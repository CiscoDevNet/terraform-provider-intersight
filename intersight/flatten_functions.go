package intersight

import (
	"encoding/json"
	"fmt"
	"log"
	"reflect"
	"time"

	models "github.com/CiscoDevNet/terraform-provider-intersight/intersight_gosdk"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
)

func flattenAdditionalProperties(m interface{}) string {
	var s string
	switch m.(type) {
	case int, int32, int64, bool, time.Time:
		s = fmt.Sprint(m)
	case float32, float64:
		s = fmt.Sprintf("%f", m)
	default:
		if m != nil && reflect.ValueOf(m).Len() > 0 {
			j, err := json.Marshal(m)
			if err != nil {
				log.Printf("Error occurred while flattening and json parsing: %s", err)
			} else {
				s = string(j)
			}
		}
	}
	return s
}
func flattenMoMoRef(ref *models.MoMoRef) map[string]interface{} {
	x := make(map[string]interface{})
	x["additional_properties"] = flattenAdditionalProperties(ref.AdditionalProperties)
	x["class_id"] = ref.GetClassId()
	x["moid"] = ref.GetMoid()
	x["object_type"] = ref.GetObjectType()
	x["selector"] = ref.GetSelector()
	return x
}

func flattenListAdapterAdapterConfig(p []models.AdapterAdapterConfig, d *schema.ResourceData) []map[string]interface{} {
	var adapteradapterconfigs []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		adapteradapterconfig := make(map[string]interface{})
		adapteradapterconfig["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
		adapteradapterconfig["class_id"] = item.GetClassId()
		adapteradapterconfig["dce_interface_settings"] = (func(p []models.AdapterDceInterfaceSettings, d *schema.ResourceData) []map[string]interface{} {
			var adapterdceinterfacesettingss []map[string]interface{}
			if len(p) == 0 {
				return nil
			}
			for _, item := range p {
				adapterdceinterfacesettings := make(map[string]interface{})
				adapterdceinterfacesettings["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
				adapterdceinterfacesettings["class_id"] = item.GetClassId()
				adapterdceinterfacesettings["fec_mode"] = item.GetFecMode()
				adapterdceinterfacesettings["interface_id"] = item.GetInterfaceId()
				adapterdceinterfacesettings["object_type"] = item.GetObjectType()
				adapterdceinterfacesettingss = append(adapterdceinterfacesettingss, adapterdceinterfacesettings)
			}
			return adapterdceinterfacesettingss
		})(item.GetDceInterfaceSettings(), d)
		adapteradapterconfig["eth_settings"] = (func(p models.AdapterEthSettings, d *schema.ResourceData) []map[string]interface{} {
			var adapterethsettingss []map[string]interface{}
			var ret models.AdapterEthSettings
			if reflect.DeepEqual(ret, p) {
				return nil
			}
			item := p
			adapterethsettings := make(map[string]interface{})
			adapterethsettings["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
			adapterethsettings["class_id"] = item.GetClassId()
			adapterethsettings["lldp_enabled"] = item.GetLldpEnabled()
			adapterethsettings["object_type"] = item.GetObjectType()

			adapterethsettingss = append(adapterethsettingss, adapterethsettings)
			return adapterethsettingss
		})(item.GetEthSettings(), d)
		adapteradapterconfig["fc_settings"] = (func(p models.AdapterFcSettings, d *schema.ResourceData) []map[string]interface{} {
			var adapterfcsettingss []map[string]interface{}
			var ret models.AdapterFcSettings
			if reflect.DeepEqual(ret, p) {
				return nil
			}
			item := p
			adapterfcsettings := make(map[string]interface{})
			adapterfcsettings["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
			adapterfcsettings["class_id"] = item.GetClassId()
			adapterfcsettings["fip_enabled"] = item.GetFipEnabled()
			adapterfcsettings["object_type"] = item.GetObjectType()

			adapterfcsettingss = append(adapterfcsettingss, adapterfcsettings)
			return adapterfcsettingss
		})(item.GetFcSettings(), d)
		adapteradapterconfig["object_type"] = item.GetObjectType()
		adapteradapterconfig["physical_nic_mode_settings"] = (func(p models.AdapterPhysicalNicModeSettings, d *schema.ResourceData) []map[string]interface{} {
			var adapterphysicalnicmodesettingss []map[string]interface{}
			var ret models.AdapterPhysicalNicModeSettings
			if reflect.DeepEqual(ret, p) {
				return nil
			}
			item := p
			adapterphysicalnicmodesettings := make(map[string]interface{})
			adapterphysicalnicmodesettings["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
			adapterphysicalnicmodesettings["class_id"] = item.GetClassId()
			adapterphysicalnicmodesettings["object_type"] = item.GetObjectType()
			adapterphysicalnicmodesettings["phy_nic_enabled"] = item.GetPhyNicEnabled()

			adapterphysicalnicmodesettingss = append(adapterphysicalnicmodesettingss, adapterphysicalnicmodesettings)
			return adapterphysicalnicmodesettingss
		})(item.GetPhysicalNicModeSettings(), d)
		adapteradapterconfig["port_channel_settings"] = (func(p models.AdapterPortChannelSettings, d *schema.ResourceData) []map[string]interface{} {
			var adapterportchannelsettingss []map[string]interface{}
			var ret models.AdapterPortChannelSettings
			if reflect.DeepEqual(ret, p) {
				return nil
			}
			item := p
			adapterportchannelsettings := make(map[string]interface{})
			adapterportchannelsettings["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
			adapterportchannelsettings["class_id"] = item.GetClassId()
			adapterportchannelsettings["enabled"] = item.GetEnabled()
			adapterportchannelsettings["object_type"] = item.GetObjectType()

			adapterportchannelsettingss = append(adapterportchannelsettingss, adapterportchannelsettings)
			return adapterportchannelsettingss
		})(item.GetPortChannelSettings(), d)
		adapteradapterconfig["slot_id"] = item.GetSlotId()
		adapteradapterconfigs = append(adapteradapterconfigs, adapteradapterconfig)
	}
	return adapteradapterconfigs
}
func flattenListAdapterExtEthInterfaceRelationship(p []models.AdapterExtEthInterfaceRelationship, d *schema.ResourceData) []map[string]interface{} {
	var adapterextethinterfacerelationships []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		item := item.MoMoRef
		adapterextethinterfacerelationship := flattenMoMoRef(item)
		adapterextethinterfacerelationships = append(adapterextethinterfacerelationships, adapterextethinterfacerelationship)
	}
	return adapterextethinterfacerelationships
}
func flattenListAdapterHostEthInterfaceRelationship(p []models.AdapterHostEthInterfaceRelationship, d *schema.ResourceData) []map[string]interface{} {
	var adapterhostethinterfacerelationships []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		item := item.MoMoRef
		adapterhostethinterfacerelationship := flattenMoMoRef(item)
		adapterhostethinterfacerelationships = append(adapterhostethinterfacerelationships, adapterhostethinterfacerelationship)
	}
	return adapterhostethinterfacerelationships
}
func flattenListAdapterHostFcInterfaceRelationship(p []models.AdapterHostFcInterfaceRelationship, d *schema.ResourceData) []map[string]interface{} {
	var adapterhostfcinterfacerelationships []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		item := item.MoMoRef
		adapterhostfcinterfacerelationship := flattenMoMoRef(item)
		adapterhostfcinterfacerelationships = append(adapterhostfcinterfacerelationships, adapterhostfcinterfacerelationship)
	}
	return adapterhostfcinterfacerelationships
}
func flattenListAdapterHostIscsiInterfaceRelationship(p []models.AdapterHostIscsiInterfaceRelationship, d *schema.ResourceData) []map[string]interface{} {
	var adapterhostiscsiinterfacerelationships []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		item := item.MoMoRef
		adapterhostiscsiinterfacerelationship := flattenMoMoRef(item)
		adapterhostiscsiinterfacerelationships = append(adapterhostiscsiinterfacerelationships, adapterhostiscsiinterfacerelationship)
	}
	return adapterhostiscsiinterfacerelationships
}
func flattenListAdapterUnitRelationship(p []models.AdapterUnitRelationship, d *schema.ResourceData) []map[string]interface{} {
	var adapterunitrelationships []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		item := item.MoMoRef
		adapterunitrelationship := flattenMoMoRef(item)
		adapterunitrelationships = append(adapterunitrelationships, adapterunitrelationship)
	}
	return adapterunitrelationships
}
func flattenListApplianceApiStatus(p []models.ApplianceApiStatus, d *schema.ResourceData) []map[string]interface{} {
	var applianceapistatuss []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		applianceapistatus := make(map[string]interface{})
		applianceapistatus["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
		applianceapistatus["class_id"] = item.GetClassId()
		applianceapistatus["elapsed_time"] = item.GetElapsedTime()
		applianceapistatus["object_name"] = item.GetObjectName()
		applianceapistatus["object_type"] = item.GetObjectType()
		applianceapistatus["reason"] = item.GetReason()
		applianceapistatus["response"] = item.GetResponse()
		applianceapistatuss = append(applianceapistatuss, applianceapistatus)
	}
	return applianceapistatuss
}
func flattenListApplianceAppOpStatusRelationship(p []models.ApplianceAppOpStatusRelationship, d *schema.ResourceData) []map[string]interface{} {
	var applianceappopstatusrelationships []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		item := item.MoMoRef
		applianceappopstatusrelationship := flattenMoMoRef(item)
		applianceappopstatusrelationships = append(applianceappopstatusrelationships, applianceappopstatusrelationship)
	}
	return applianceappopstatusrelationships
}
func flattenListApplianceAppStatusRelationship(p []models.ApplianceAppStatusRelationship, d *schema.ResourceData) []map[string]interface{} {
	var applianceappstatusrelationships []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		item := item.MoMoRef
		applianceappstatusrelationship := flattenMoMoRef(item)
		applianceappstatusrelationships = append(applianceappstatusrelationships, applianceappstatusrelationship)
	}
	return applianceappstatusrelationships
}
func flattenListApplianceCertRenewalPhase(p []models.ApplianceCertRenewalPhase, d *schema.ResourceData) []map[string]interface{} {
	var appliancecertrenewalphases []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		appliancecertrenewalphase := make(map[string]interface{})
		appliancecertrenewalphase["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
		appliancecertrenewalphase["class_id"] = item.GetClassId()
		appliancecertrenewalphase["end_time"] = item.GetEndTime().String()
		appliancecertrenewalphase["failed"] = item.GetFailed()
		appliancecertrenewalphase["message"] = item.GetMessage()
		appliancecertrenewalphase["name"] = item.GetName()
		appliancecertrenewalphase["object_type"] = item.GetObjectType()
		appliancecertrenewalphase["start_time"] = item.GetStartTime().String()
		appliancecertrenewalphases = append(appliancecertrenewalphases, appliancecertrenewalphase)
	}
	return appliancecertrenewalphases
}
func flattenListApplianceClusterInstallPhase(p []models.ApplianceClusterInstallPhase, d *schema.ResourceData) []map[string]interface{} {
	var applianceclusterinstallphases []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		applianceclusterinstallphase := make(map[string]interface{})
		applianceclusterinstallphase["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
		applianceclusterinstallphase["class_id"] = item.GetClassId()
		applianceclusterinstallphase["current_node"] = item.GetCurrentNode()
		applianceclusterinstallphase["current_subphase"] = item.GetCurrentSubphase()
		applianceclusterinstallphase["elapsed_time"] = item.GetElapsedTime()
		applianceclusterinstallphase["end_time"] = item.GetEndTime().String()
		applianceclusterinstallphase["failed"] = item.GetFailed()
		applianceclusterinstallphase["message"] = item.GetMessage()
		applianceclusterinstallphase["name"] = item.GetName()
		applianceclusterinstallphase["object_type"] = item.GetObjectType()
		applianceclusterinstallphase["pending_nodes"] = item.GetPendingNodes()
		applianceclusterinstallphase["start_time"] = item.GetStartTime().String()
		applianceclusterinstallphase["status"] = item.GetStatus()
		applianceclusterinstallphases = append(applianceclusterinstallphases, applianceclusterinstallphase)
	}
	return applianceclusterinstallphases
}
func flattenListApplianceDataExportPolicyRelationship(p []models.ApplianceDataExportPolicyRelationship, d *schema.ResourceData) []map[string]interface{} {
	var appliancedataexportpolicyrelationships []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		item := item.MoMoRef
		appliancedataexportpolicyrelationship := flattenMoMoRef(item)
		appliancedataexportpolicyrelationships = append(appliancedataexportpolicyrelationships, appliancedataexportpolicyrelationship)
	}
	return appliancedataexportpolicyrelationships
}
func flattenListApplianceFileSystemOpStatusRelationship(p []models.ApplianceFileSystemOpStatusRelationship, d *schema.ResourceData) []map[string]interface{} {
	var appliancefilesystemopstatusrelationships []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		item := item.MoMoRef
		appliancefilesystemopstatusrelationship := flattenMoMoRef(item)
		appliancefilesystemopstatusrelationships = append(appliancefilesystemopstatusrelationships, appliancefilesystemopstatusrelationship)
	}
	return appliancefilesystemopstatusrelationships
}
func flattenListApplianceFileSystemStatusRelationship(p []models.ApplianceFileSystemStatusRelationship, d *schema.ResourceData) []map[string]interface{} {
	var appliancefilesystemstatusrelationships []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		item := item.MoMoRef
		appliancefilesystemstatusrelationship := flattenMoMoRef(item)
		appliancefilesystemstatusrelationships = append(appliancefilesystemstatusrelationships, appliancefilesystemstatusrelationship)
	}
	return appliancefilesystemstatusrelationships
}
func flattenListApplianceGroupOpStatusRelationship(p []models.ApplianceGroupOpStatusRelationship, d *schema.ResourceData) []map[string]interface{} {
	var appliancegroupopstatusrelationships []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		item := item.MoMoRef
		appliancegroupopstatusrelationship := flattenMoMoRef(item)
		appliancegroupopstatusrelationships = append(appliancegroupopstatusrelationships, appliancegroupopstatusrelationship)
	}
	return appliancegroupopstatusrelationships
}
func flattenListApplianceGroupStatusRelationship(p []models.ApplianceGroupStatusRelationship, d *schema.ResourceData) []map[string]interface{} {
	var appliancegroupstatusrelationships []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		item := item.MoMoRef
		appliancegroupstatusrelationship := flattenMoMoRef(item)
		appliancegroupstatusrelationships = append(appliancegroupstatusrelationships, appliancegroupstatusrelationship)
	}
	return appliancegroupstatusrelationships
}
func flattenListApplianceKeyValuePair(p []models.ApplianceKeyValuePair, d *schema.ResourceData) []map[string]interface{} {
	var appliancekeyvaluepairs []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		appliancekeyvaluepair := make(map[string]interface{})
		appliancekeyvaluepair["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
		appliancekeyvaluepair["class_id"] = item.GetClassId()
		appliancekeyvaluepair["key"] = item.GetKey()
		appliancekeyvaluepair["object_type"] = item.GetObjectType()
		appliancekeyvaluepair["value"] = item.GetValue()
		appliancekeyvaluepairs = append(appliancekeyvaluepairs, appliancekeyvaluepair)
	}
	return appliancekeyvaluepairs
}
func flattenListApplianceMetadataManifestVersion(p []models.ApplianceMetadataManifestVersion, d *schema.ResourceData) []map[string]interface{} {
	var appliancemetadatamanifestversions []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		appliancemetadatamanifestversion := make(map[string]interface{})
		appliancemetadatamanifestversion["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
		appliancemetadatamanifestversion["class_id"] = item.GetClassId()
		appliancemetadatamanifestversion["file_sha"] = item.GetFileSha()
		appliancemetadatamanifestversion["file_time"] = item.GetFileTime().String()
		appliancemetadatamanifestversion["metadata_type"] = item.GetMetadataType()
		appliancemetadatamanifestversion["object_type"] = item.GetObjectType()
		appliancemetadatamanifestversions = append(appliancemetadatamanifestversions, appliancemetadatamanifestversion)
	}
	return appliancemetadatamanifestversions
}
func flattenListApplianceNetworkLinkStatusRelationship(p []models.ApplianceNetworkLinkStatusRelationship, d *schema.ResourceData) []map[string]interface{} {
	var appliancenetworklinkstatusrelationships []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		item := item.MoMoRef
		appliancenetworklinkstatusrelationship := flattenMoMoRef(item)
		appliancenetworklinkstatusrelationships = append(appliancenetworklinkstatusrelationships, appliancenetworklinkstatusrelationship)
	}
	return appliancenetworklinkstatusrelationships
}
func flattenListApplianceNetworkStatus(p []models.ApplianceNetworkStatus, d *schema.ResourceData) []map[string]interface{} {
	var appliancenetworkstatuss []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		appliancenetworkstatus := make(map[string]interface{})
		appliancenetworkstatus["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
		appliancenetworkstatus["class_id"] = item.GetClassId()
		appliancenetworkstatus["destination_hostname"] = item.GetDestinationHostname()
		appliancenetworkstatus["object_type"] = item.GetObjectType()
		appliancenetworkstatus["ping_time"] = item.GetPingTime()
		appliancenetworkstatus["source_hostname"] = item.GetSourceHostname()
		appliancenetworkstatuss = append(appliancenetworkstatuss, appliancenetworkstatus)
	}
	return appliancenetworkstatuss
}
func flattenListApplianceNodeIpInfo(p []models.ApplianceNodeIpInfo, d *schema.ResourceData) []map[string]interface{} {
	var appliancenodeipinfos []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		appliancenodeipinfo := make(map[string]interface{})
		appliancenodeipinfo["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
		appliancenodeipinfo["class_id"] = item.GetClassId()
		appliancenodeipinfo["gateway"] = item.GetGateway()
		appliancenodeipinfo["hostname"] = item.GetHostname()
		appliancenodeipinfo["ip_address"] = item.GetIpAddress()
		appliancenodeipinfo["netmask"] = item.GetNetmask()
		appliancenodeipinfo["node_id"] = item.GetNodeId()
		appliancenodeipinfo["node_moid"] = item.GetNodeMoid()
		appliancenodeipinfo["object_type"] = item.GetObjectType()
		appliancenodeipinfo["status"] = item.GetStatus()
		appliancenodeipinfos = append(appliancenodeipinfos, appliancenodeipinfo)
	}
	return appliancenodeipinfos
}
func flattenListApplianceStatusCheck(p []models.ApplianceStatusCheck, d *schema.ResourceData) []map[string]interface{} {
	var appliancestatuschecks []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		appliancestatuscheck := make(map[string]interface{})
		appliancestatuscheck["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
		appliancestatuscheck["class_id"] = item.GetClassId()
		appliancestatuscheck["code"] = item.GetCode()
		appliancestatuscheck["object_type"] = item.GetObjectType()
		appliancestatuscheck["result"] = item.GetResult()
		appliancestatuschecks = append(appliancestatuschecks, appliancestatuscheck)
	}
	return appliancestatuschecks
}
func flattenListAssetClusterMemberRelationship(p []models.AssetClusterMemberRelationship, d *schema.ResourceData) []map[string]interface{} {
	var assetclustermemberrelationships []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		item := item.MoMoRef
		assetclustermemberrelationship := flattenMoMoRef(item)
		assetclustermemberrelationships = append(assetclustermemberrelationships, assetclustermemberrelationship)
	}
	return assetclustermemberrelationships
}
func flattenListAssetConnection(p []models.AssetConnection, d *schema.ResourceData) []map[string]interface{} {
	var assetconnections []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		assetconnection := make(map[string]interface{})
		assetconnection["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
		assetconnection["class_id"] = item.GetClassId()
		assetconnection["credential"] = (func(p models.AssetCredential, d *schema.ResourceData) []map[string]interface{} {
			var assetcredentials []map[string]interface{}
			var ret models.AssetCredential
			if reflect.DeepEqual(ret, p) {
				return nil
			}
			item := p
			assetcredential := make(map[string]interface{})
			assetcredential["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
			assetcredential["class_id"] = item.GetClassId()
			assetcredential["object_type"] = item.GetObjectType()

			assetcredentials = append(assetcredentials, assetcredential)
			return assetcredentials
		})(item.GetCredential(), d)
		assetconnection["object_type"] = item.GetObjectType()
		assetconnections = append(assetconnections, assetconnection)
	}
	return assetconnections
}
func flattenListAssetDeploymentRelationship(p []models.AssetDeploymentRelationship, d *schema.ResourceData) []map[string]interface{} {
	var assetdeploymentrelationships []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		item := item.MoMoRef
		assetdeploymentrelationship := flattenMoMoRef(item)
		assetdeploymentrelationships = append(assetdeploymentrelationships, assetdeploymentrelationship)
	}
	return assetdeploymentrelationships
}
func flattenListAssetDeploymentDeviceRelationship(p []models.AssetDeploymentDeviceRelationship, d *schema.ResourceData) []map[string]interface{} {
	var assetdeploymentdevicerelationships []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		item := item.MoMoRef
		assetdeploymentdevicerelationship := flattenMoMoRef(item)
		assetdeploymentdevicerelationships = append(assetdeploymentdevicerelationships, assetdeploymentdevicerelationship)
	}
	return assetdeploymentdevicerelationships
}
func flattenListAssetDeviceRegistrationRelationship(p []models.AssetDeviceRegistrationRelationship, d *schema.ResourceData) []map[string]interface{} {
	var assetdeviceregistrationrelationships []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		item := item.MoMoRef
		assetdeviceregistrationrelationship := flattenMoMoRef(item)
		assetdeviceregistrationrelationships = append(assetdeviceregistrationrelationships, assetdeviceregistrationrelationship)
	}
	return assetdeviceregistrationrelationships
}
func flattenListAssetMeteringType(p []models.AssetMeteringType, d *schema.ResourceData) []map[string]interface{} {
	var assetmeteringtypes []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		assetmeteringtype := make(map[string]interface{})
		assetmeteringtype["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
		assetmeteringtype["class_id"] = item.GetClassId()
		assetmeteringtype["name"] = item.GetName()
		assetmeteringtype["object_type"] = item.GetObjectType()
		assetmeteringtype["unit"] = item.GetUnit()
		assetmeteringtypes = append(assetmeteringtypes, assetmeteringtype)
	}
	return assetmeteringtypes
}
func flattenListAssetService(p []models.AssetService, d *schema.ResourceData) []map[string]interface{} {
	var assetservices []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		assetservice := make(map[string]interface{})
		assetservice["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
		assetservice["class_id"] = item.GetClassId()
		assetservice["object_type"] = item.GetObjectType()
		assetservice["options"] = (func(p models.AssetServiceOptions, d *schema.ResourceData) []map[string]interface{} {
			var assetserviceoptionss []map[string]interface{}
			var ret models.AssetServiceOptions
			if reflect.DeepEqual(ret, p) {
				return nil
			}
			item := p
			assetserviceoptions := make(map[string]interface{})
			assetserviceoptions["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
			assetserviceoptions["class_id"] = item.GetClassId()
			assetserviceoptions["object_type"] = item.GetObjectType()

			assetserviceoptionss = append(assetserviceoptionss, assetserviceoptions)
			return assetserviceoptionss
		})(item.GetOptions(), d)
		assetservices = append(assetservices, assetservice)
	}
	return assetservices
}
func flattenListBiosBootDeviceRelationship(p []models.BiosBootDeviceRelationship, d *schema.ResourceData) []map[string]interface{} {
	var biosbootdevicerelationships []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		item := item.MoMoRef
		biosbootdevicerelationship := flattenMoMoRef(item)
		biosbootdevicerelationships = append(biosbootdevicerelationships, biosbootdevicerelationship)
	}
	return biosbootdevicerelationships
}
func flattenListBiosUnitRelationship(p []models.BiosUnitRelationship, d *schema.ResourceData) []map[string]interface{} {
	var biosunitrelationships []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		item := item.MoMoRef
		biosunitrelationship := flattenMoMoRef(item)
		biosunitrelationships = append(biosunitrelationships, biosunitrelationship)
	}
	return biosunitrelationships
}
func flattenListBootCddDeviceRelationship(p []models.BootCddDeviceRelationship, d *schema.ResourceData) []map[string]interface{} {
	var bootcdddevicerelationships []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		item := item.MoMoRef
		bootcdddevicerelationship := flattenMoMoRef(item)
		bootcdddevicerelationships = append(bootcdddevicerelationships, bootcdddevicerelationship)
	}
	return bootcdddevicerelationships
}
func flattenListBootDeviceBase(p []models.BootDeviceBase, d *schema.ResourceData) []map[string]interface{} {
	var bootdevicebases []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		bootdevicebase := make(map[string]interface{})
		bootdevicebase["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
		bootdevicebase["class_id"] = item.GetClassId()
		bootdevicebase["enabled"] = item.GetEnabled()
		bootdevicebase["name"] = item.GetName()
		bootdevicebase["object_type"] = item.GetObjectType()
		bootdevicebases = append(bootdevicebases, bootdevicebase)
	}
	return bootdevicebases
}
func flattenListBootHddDeviceRelationship(p []models.BootHddDeviceRelationship, d *schema.ResourceData) []map[string]interface{} {
	var boothdddevicerelationships []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		item := item.MoMoRef
		boothdddevicerelationship := flattenMoMoRef(item)
		boothdddevicerelationships = append(boothdddevicerelationships, boothdddevicerelationship)
	}
	return boothdddevicerelationships
}
func flattenListBootIscsiDeviceRelationship(p []models.BootIscsiDeviceRelationship, d *schema.ResourceData) []map[string]interface{} {
	var bootiscsidevicerelationships []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		item := item.MoMoRef
		bootiscsidevicerelationship := flattenMoMoRef(item)
		bootiscsidevicerelationships = append(bootiscsidevicerelationships, bootiscsidevicerelationship)
	}
	return bootiscsidevicerelationships
}
func flattenListBootNvmeDeviceRelationship(p []models.BootNvmeDeviceRelationship, d *schema.ResourceData) []map[string]interface{} {
	var bootnvmedevicerelationships []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		item := item.MoMoRef
		bootnvmedevicerelationship := flattenMoMoRef(item)
		bootnvmedevicerelationships = append(bootnvmedevicerelationships, bootnvmedevicerelationship)
	}
	return bootnvmedevicerelationships
}
func flattenListBootPchStorageDeviceRelationship(p []models.BootPchStorageDeviceRelationship, d *schema.ResourceData) []map[string]interface{} {
	var bootpchstoragedevicerelationships []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		item := item.MoMoRef
		bootpchstoragedevicerelationship := flattenMoMoRef(item)
		bootpchstoragedevicerelationships = append(bootpchstoragedevicerelationships, bootpchstoragedevicerelationship)
	}
	return bootpchstoragedevicerelationships
}
func flattenListBootPxeDeviceRelationship(p []models.BootPxeDeviceRelationship, d *schema.ResourceData) []map[string]interface{} {
	var bootpxedevicerelationships []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		item := item.MoMoRef
		bootpxedevicerelationship := flattenMoMoRef(item)
		bootpxedevicerelationships = append(bootpxedevicerelationships, bootpxedevicerelationship)
	}
	return bootpxedevicerelationships
}
func flattenListBootSanDeviceRelationship(p []models.BootSanDeviceRelationship, d *schema.ResourceData) []map[string]interface{} {
	var bootsandevicerelationships []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		item := item.MoMoRef
		bootsandevicerelationship := flattenMoMoRef(item)
		bootsandevicerelationships = append(bootsandevicerelationships, bootsandevicerelationship)
	}
	return bootsandevicerelationships
}
func flattenListBootSdDeviceRelationship(p []models.BootSdDeviceRelationship, d *schema.ResourceData) []map[string]interface{} {
	var bootsddevicerelationships []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		item := item.MoMoRef
		bootsddevicerelationship := flattenMoMoRef(item)
		bootsddevicerelationships = append(bootsddevicerelationships, bootsddevicerelationship)
	}
	return bootsddevicerelationships
}
func flattenListBootUefiShellDeviceRelationship(p []models.BootUefiShellDeviceRelationship, d *schema.ResourceData) []map[string]interface{} {
	var bootuefishelldevicerelationships []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		item := item.MoMoRef
		bootuefishelldevicerelationship := flattenMoMoRef(item)
		bootuefishelldevicerelationships = append(bootuefishelldevicerelationships, bootuefishelldevicerelationship)
	}
	return bootuefishelldevicerelationships
}
func flattenListBootUsbDeviceRelationship(p []models.BootUsbDeviceRelationship, d *schema.ResourceData) []map[string]interface{} {
	var bootusbdevicerelationships []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		item := item.MoMoRef
		bootusbdevicerelationship := flattenMoMoRef(item)
		bootusbdevicerelationships = append(bootusbdevicerelationships, bootusbdevicerelationship)
	}
	return bootusbdevicerelationships
}
func flattenListBootVmediaDeviceRelationship(p []models.BootVmediaDeviceRelationship, d *schema.ResourceData) []map[string]interface{} {
	var bootvmediadevicerelationships []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		item := item.MoMoRef
		bootvmediadevicerelationship := flattenMoMoRef(item)
		bootvmediadevicerelationships = append(bootvmediadevicerelationships, bootvmediadevicerelationship)
	}
	return bootvmediadevicerelationships
}
func flattenListBulkApiResult(p []models.BulkApiResult, d *schema.ResourceData) []map[string]interface{} {
	var bulkapiresults []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		bulkapiresult := make(map[string]interface{})
		bulkapiresult["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
		bulkapiresult["class_id"] = item.GetClassId()
		bulkapiresult["object_type"] = item.GetObjectType()
		bulkapiresult["status"] = item.GetStatus()
		bulkapiresults = append(bulkapiresults, bulkapiresult)
	}
	return bulkapiresults
}
func flattenListBulkExportedItemRelationship(p []models.BulkExportedItemRelationship, d *schema.ResourceData) []map[string]interface{} {
	var bulkexporteditemrelationships []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		item := item.MoMoRef
		bulkexporteditemrelationship := flattenMoMoRef(item)
		bulkexporteditemrelationships = append(bulkexporteditemrelationships, bulkexporteditemrelationship)
	}
	return bulkexporteditemrelationships
}
func flattenListBulkHttpHeader(p []models.BulkHttpHeader, d *schema.ResourceData) []map[string]interface{} {
	var bulkhttpheaders []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		bulkhttpheader := make(map[string]interface{})
		bulkhttpheader["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
		bulkhttpheader["class_id"] = item.GetClassId()
		bulkhttpheader["name"] = item.GetName()
		bulkhttpheader["object_type"] = item.GetObjectType()
		bulkhttpheader["value"] = item.GetValue()
		bulkhttpheaders = append(bulkhttpheaders, bulkhttpheader)
	}
	return bulkhttpheaders
}
func flattenListBulkRestResult(p []models.BulkRestResult, d *schema.ResourceData) []map[string]interface{} {
	var bulkrestresults []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		bulkrestresult := make(map[string]interface{})
		bulkrestresult["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
		bulkrestresult["body"] = (func(p models.MoBaseMo, d *schema.ResourceData) []map[string]interface{} {
			var mobasemos []map[string]interface{}
			var ret models.MoBaseMo
			if reflect.DeepEqual(ret, p) {
				return nil
			}
			item := p
			mobasemo := make(map[string]interface{})
			mobasemo["account_moid"] = item.GetAccountMoid()
			mobasemo["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
			mobasemo["ancestors"] = (func(p []models.MoBaseMoRelationship, d *schema.ResourceData) []map[string]interface{} {
				var mobasemorelationships []map[string]interface{}
				if len(p) == 0 {
					return nil
				}
				for _, item := range p {
					item := item.MoMoRef
					mobasemorelationship := flattenMoMoRef(item)
					mobasemorelationships = append(mobasemorelationships, mobasemorelationship)
				}
				return mobasemorelationships
			})(item.GetAncestors(), d)
			mobasemo["class_id"] = item.GetClassId()
			mobasemo["create_time"] = item.GetCreateTime().String()
			mobasemo["domain_group_moid"] = item.GetDomainGroupMoid()
			mobasemo["mod_time"] = item.GetModTime().String()
			mobasemo["moid"] = item.GetMoid()
			mobasemo["object_type"] = item.GetObjectType()
			mobasemo["owners"] = item.GetOwners()
			mobasemo["parent"] = (func(p models.MoBaseMoRelationship, d *schema.ResourceData) []map[string]interface{} {
				var mobasemorelationships []map[string]interface{}
				var ret models.MoBaseMoRelationship
				if reflect.DeepEqual(ret, p) {
					return nil
				}
				x := p
				item := x.MoMoRef
				mobasemorelationship := make(map[string]interface{})
				mobasemorelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
				mobasemorelationship["class_id"] = item.GetClassId()
				mobasemorelationship["moid"] = item.GetMoid()
				mobasemorelationship["object_type"] = item.GetObjectType()
				mobasemorelationship["selector"] = item.GetSelector()

				mobasemorelationships = append(mobasemorelationships, mobasemorelationship)
				return mobasemorelationships
			})(item.GetParent(), d)
			mobasemo["permission_resources"] = (func(p []models.MoBaseMoRelationship, d *schema.ResourceData) []map[string]interface{} {
				var mobasemorelationships []map[string]interface{}
				if len(p) == 0 {
					return nil
				}
				for _, item := range p {
					item := item.MoMoRef
					mobasemorelationship := flattenMoMoRef(item)
					mobasemorelationships = append(mobasemorelationships, mobasemorelationship)
				}
				return mobasemorelationships
			})(item.GetPermissionResources(), d)
			mobasemo["shared_scope"] = item.GetSharedScope()
			mobasemo["tags"] = (func(p []models.MoTag, d *schema.ResourceData) []map[string]interface{} {
				var motags []map[string]interface{}
				if len(p) == 0 {
					return nil
				}
				for _, item := range p {
					motag := make(map[string]interface{})
					motag["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
					motag["key"] = item.GetKey()
					motag["value"] = item.GetValue()
					motags = append(motags, motag)
				}
				return motags
			})(item.GetTags(), d)
			mobasemo["version_context"] = (func(p models.MoVersionContext, d *schema.ResourceData) []map[string]interface{} {
				var moversioncontexts []map[string]interface{}
				var ret models.MoVersionContext
				if reflect.DeepEqual(ret, p) {
					return nil
				}
				item := p
				moversioncontext := make(map[string]interface{})
				moversioncontext["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
				moversioncontext["class_id"] = item.GetClassId()
				moversioncontext["interested_mos"] = (func(p []models.MoMoRef, d *schema.ResourceData) []map[string]interface{} {
					var momorefs []map[string]interface{}
					if len(p) == 0 {
						return nil
					}
					for _, item := range p {
						momoref := make(map[string]interface{})
						momoref["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
						momoref["class_id"] = item.GetClassId()
						momoref["moid"] = item.GetMoid()
						momoref["object_type"] = item.GetObjectType()
						momoref["selector"] = item.GetSelector()
						momorefs = append(momorefs, momoref)
					}
					return momorefs
				})(item.GetInterestedMos(), d)
				moversioncontext["marked_for_deletion"] = item.GetMarkedForDeletion()
				moversioncontext["object_type"] = item.GetObjectType()
				moversioncontext["ref_mo"] = (func(p models.MoMoRef, d *schema.ResourceData) []map[string]interface{} {
					var momorefs []map[string]interface{}
					var ret models.MoMoRef
					if reflect.DeepEqual(ret, p) {
						return nil
					}
					item := p
					momoref := make(map[string]interface{})
					momoref["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
					momoref["class_id"] = item.GetClassId()
					momoref["moid"] = item.GetMoid()
					momoref["object_type"] = item.GetObjectType()
					momoref["selector"] = item.GetSelector()

					momorefs = append(momorefs, momoref)
					return momorefs
				})(item.GetRefMo(), d)
				moversioncontext["timestamp"] = item.GetTimestamp().String()
				moversioncontext["nr_version"] = item.GetVersion()
				moversioncontext["version_type"] = item.GetVersionType()

				moversioncontexts = append(moversioncontexts, moversioncontext)
				return moversioncontexts
			})(item.GetVersionContext(), d)

			mobasemos = append(mobasemos, mobasemo)
			return mobasemos
		})(item.GetBody(), d)
		bulkrestresult["body_string"] = item.GetBodyString()
		bulkrestresult["class_id"] = item.GetClassId()
		bulkrestresult["object_type"] = item.GetObjectType()
		bulkrestresult["status"] = item.GetStatus()
		bulkrestresults = append(bulkrestresults, bulkrestresult)
	}
	return bulkrestresults
}
func flattenListBulkSubRequest(p []models.BulkSubRequest, d *schema.ResourceData) []map[string]interface{} {
	var bulksubrequests []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		bulksubrequest := make(map[string]interface{})
		bulksubrequest["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
		bulksubrequest["class_id"] = item.GetClassId()
		bulksubrequest["object_type"] = item.GetObjectType()
		bulksubrequest["uri"] = item.GetUri()
		bulksubrequest["verb"] = item.GetVerb()
		bulksubrequests = append(bulksubrequests, bulksubrequest)
	}
	return bulksubrequests
}
func flattenListBulkSubRequestObjRelationship(p []models.BulkSubRequestObjRelationship, d *schema.ResourceData) []map[string]interface{} {
	var bulksubrequestobjrelationships []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		item := item.MoMoRef
		bulksubrequestobjrelationship := flattenMoMoRef(item)
		bulksubrequestobjrelationships = append(bulksubrequestobjrelationships, bulksubrequestobjrelationship)
	}
	return bulksubrequestobjrelationships
}
func flattenListCapabilityCapabilityRelationship(p []models.CapabilityCapabilityRelationship, d *schema.ResourceData) []map[string]interface{} {
	var capabilitycapabilityrelationships []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		item := item.MoMoRef
		capabilitycapabilityrelationship := flattenMoMoRef(item)
		capabilitycapabilityrelationships = append(capabilitycapabilityrelationships, capabilitycapabilityrelationship)
	}
	return capabilitycapabilityrelationships
}
func flattenListCapabilityFeatureConfig(p []models.CapabilityFeatureConfig, d *schema.ResourceData) []map[string]interface{} {
	var capabilityfeatureconfigs []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		capabilityfeatureconfig := make(map[string]interface{})
		capabilityfeatureconfig["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
		capabilityfeatureconfig["class_id"] = item.GetClassId()
		capabilityfeatureconfig["feature_name"] = item.GetFeatureName()
		capabilityfeatureconfig["min_adapter_fw_version"] = item.GetMinAdapterFwVersion()
		capabilityfeatureconfig["min_fw_version"] = item.GetMinFwVersion()
		capabilityfeatureconfig["object_type"] = item.GetObjectType()
		capabilityfeatureconfig["supported_fw_versions"] = item.GetSupportedFwVersions()
		capabilityfeatureconfig["supported_in_adapters"] = item.GetSupportedInAdapters()
		capabilityfeatureconfig["supported_in_generations"] = item.GetSupportedInGenerations()
		capabilityfeatureconfig["unsupported_feature_matrix"] = (func(p []models.CapabilityUnsupportedFeatureConfig, d *schema.ResourceData) []map[string]interface{} {
			var capabilityunsupportedfeatureconfigs []map[string]interface{}
			if len(p) == 0 {
				return nil
			}
			for _, item := range p {
				capabilityunsupportedfeatureconfig := make(map[string]interface{})
				capabilityunsupportedfeatureconfig["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
				capabilityunsupportedfeatureconfig["class_id"] = item.GetClassId()
				capabilityunsupportedfeatureconfig["generation"] = item.GetGeneration()
				capabilityunsupportedfeatureconfig["object_type"] = item.GetObjectType()
				capabilityunsupportedfeatureconfig["unsupportd_features"] = item.GetUnsupportdFeatures()
				capabilityunsupportedfeatureconfigs = append(capabilityunsupportedfeatureconfigs, capabilityunsupportedfeatureconfig)
			}
			return capabilityunsupportedfeatureconfigs
		})(item.GetUnsupportedFeatureMatrix(), d)
		capabilityfeatureconfig["validation_action"] = item.GetValidationAction()
		capabilityfeatureconfigs = append(capabilityfeatureconfigs, capabilityfeatureconfig)
	}
	return capabilityfeatureconfigs
}
func flattenListCapabilityHsuIsoModelSpecificConstraint(p []models.CapabilityHsuIsoModelSpecificConstraint, d *schema.ResourceData) []map[string]interface{} {
	var capabilityhsuisomodelspecificconstraints []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		capabilityhsuisomodelspecificconstraint := make(map[string]interface{})
		capabilityhsuisomodelspecificconstraint["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
		capabilityhsuisomodelspecificconstraint["class_id"] = item.GetClassId()
		capabilityhsuisomodelspecificconstraint["file_name"] = item.GetFileName()
		capabilityhsuisomodelspecificconstraint["min_version"] = item.GetMinVersion()
		capabilityhsuisomodelspecificconstraint["model"] = item.GetModel()
		capabilityhsuisomodelspecificconstraint["object_type"] = item.GetObjectType()
		capabilityhsuisomodelspecificconstraints = append(capabilityhsuisomodelspecificconstraints, capabilityhsuisomodelspecificconstraint)
	}
	return capabilityhsuisomodelspecificconstraints
}
func flattenListCapabilityPortRange(p []models.CapabilityPortRange, d *schema.ResourceData) []map[string]interface{} {
	var capabilityportranges []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		capabilityportrange := make(map[string]interface{})
		capabilityportrange["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
		capabilityportrange["class_id"] = item.GetClassId()
		capabilityportrange["end_port_id"] = item.GetEndPortId()
		capabilityportrange["end_slot_id"] = item.GetEndSlotId()
		capabilityportrange["object_type"] = item.GetObjectType()
		capabilityportrange["start_port_id"] = item.GetStartPortId()
		capabilityportrange["start_slot_id"] = item.GetStartSlotId()
		capabilityportranges = append(capabilityportranges, capabilityportrange)
	}
	return capabilityportranges
}
func flattenListCapabilityServerComponentConstraint(p []models.CapabilityServerComponentConstraint, d *schema.ResourceData) []map[string]interface{} {
	var capabilityservercomponentconstraints []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		capabilityservercomponentconstraint := make(map[string]interface{})
		capabilityservercomponentconstraint["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
		capabilityservercomponentconstraint["class_id"] = item.GetClassId()
		capabilityservercomponentconstraint["min_supported_version"] = item.GetMinSupportedVersion()
		capabilityservercomponentconstraint["object_type"] = item.GetObjectType()
		capabilityservercomponentconstraint["server_model"] = item.GetServerModel()
		capabilityservercomponentconstraints = append(capabilityservercomponentconstraints, capabilityservercomponentconstraint)
	}
	return capabilityservercomponentconstraints
}
func flattenListCapabilitySwitchingModeCapability(p []models.CapabilitySwitchingModeCapability, d *schema.ResourceData) []map[string]interface{} {
	var capabilityswitchingmodecapabilitys []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		capabilityswitchingmodecapability := make(map[string]interface{})
		capabilityswitchingmodecapability["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
		capabilityswitchingmodecapability["class_id"] = item.GetClassId()
		capabilityswitchingmodecapability["object_type"] = item.GetObjectType()
		capabilityswitchingmodecapability["switching_mode"] = item.GetSwitchingMode()
		capabilityswitchingmodecapability["vp_compression_supported"] = item.GetVpCompressionSupported()
		capabilityswitchingmodecapabilitys = append(capabilityswitchingmodecapabilitys, capabilityswitchingmodecapability)
	}
	return capabilityswitchingmodecapabilitys
}
func flattenListCapabilityUpdateOrderListType(p []models.CapabilityUpdateOrderListType, d *schema.ResourceData) []map[string]interface{} {
	var capabilityupdateorderlisttypes []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		capabilityupdateorderlisttype := make(map[string]interface{})
		capabilityupdateorderlisttype["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
		capabilityupdateorderlisttype["class_id"] = item.GetClassId()
		capabilityupdateorderlisttype["interim_version"] = item.GetInterimVersion()
		capabilityupdateorderlisttype["object_type"] = item.GetObjectType()
		capabilityupdateorderlisttype["source_version"] = item.GetSourceVersion()
		capabilityupdateorderlisttype["supported_models"] = item.GetSupportedModels()
		capabilityupdateorderlisttype["target_version"] = item.GetTargetVersion()
		capabilityupdateorderlisttypes = append(capabilityupdateorderlisttypes, capabilityupdateorderlisttype)
	}
	return capabilityupdateorderlisttypes
}
func flattenListCertificatemanagementCertificateBase(p []models.CertificatemanagementCertificateBase, d *schema.ResourceData) []map[string]interface{} {
	var certificatemanagementcertificatebases []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		certificatemanagementcertificatebase := make(map[string]interface{})
		certificatemanagementcertificatebase["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
		certificatemanagementcertificatebase["certificate"] = (func(p models.X509Certificate, d *schema.ResourceData) []map[string]interface{} {
			var x509certificates []map[string]interface{}
			var ret models.X509Certificate
			if reflect.DeepEqual(ret, p) {
				return nil
			}
			item := p
			x509certificate := make(map[string]interface{})
			x509certificate["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
			x509certificate["class_id"] = item.GetClassId()
			x509certificate["issuer"] = (func(p models.PkixDistinguishedName, d *schema.ResourceData) []map[string]interface{} {
				var pkixdistinguishednames []map[string]interface{}
				var ret models.PkixDistinguishedName
				if reflect.DeepEqual(ret, p) {
					return nil
				}
				item := p
				pkixdistinguishedname := make(map[string]interface{})
				pkixdistinguishedname["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
				pkixdistinguishedname["class_id"] = item.GetClassId()
				pkixdistinguishedname["common_name"] = item.GetCommonName()
				pkixdistinguishedname["country"] = item.GetCountry()
				pkixdistinguishedname["locality"] = item.GetLocality()
				pkixdistinguishedname["object_type"] = item.GetObjectType()
				pkixdistinguishedname["organization"] = item.GetOrganization()
				pkixdistinguishedname["organizational_unit"] = item.GetOrganizationalUnit()
				pkixdistinguishedname["state"] = item.GetState()

				pkixdistinguishednames = append(pkixdistinguishednames, pkixdistinguishedname)
				return pkixdistinguishednames
			})(item.GetIssuer(), d)
			x509certificate["not_after"] = item.GetNotAfter().String()
			x509certificate["not_before"] = item.GetNotBefore().String()
			x509certificate["object_type"] = item.GetObjectType()
			x509certificate["pem_certificate"] = item.GetPemCertificate()
			x509certificate["sha256_fingerprint"] = item.GetSha256Fingerprint()
			x509certificate["signature_algorithm"] = item.GetSignatureAlgorithm()
			x509certificate["subject"] = (func(p models.PkixDistinguishedName, d *schema.ResourceData) []map[string]interface{} {
				var pkixdistinguishednames []map[string]interface{}
				var ret models.PkixDistinguishedName
				if reflect.DeepEqual(ret, p) {
					return nil
				}
				item := p
				pkixdistinguishedname := make(map[string]interface{})
				pkixdistinguishedname["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
				pkixdistinguishedname["class_id"] = item.GetClassId()
				pkixdistinguishedname["common_name"] = item.GetCommonName()
				pkixdistinguishedname["country"] = item.GetCountry()
				pkixdistinguishedname["locality"] = item.GetLocality()
				pkixdistinguishedname["object_type"] = item.GetObjectType()
				pkixdistinguishedname["organization"] = item.GetOrganization()
				pkixdistinguishedname["organizational_unit"] = item.GetOrganizationalUnit()
				pkixdistinguishedname["state"] = item.GetState()

				pkixdistinguishednames = append(pkixdistinguishednames, pkixdistinguishedname)
				return pkixdistinguishednames
			})(item.GetSubject(), d)

			x509certificates = append(x509certificates, x509certificate)
			return x509certificates
		})(item.GetCertificate(), d)
		certificatemanagementcertificatebase["class_id"] = item.GetClassId()
		certificatemanagementcertificatebase["enabled"] = item.GetEnabled()
		certificatemanagementcertificatebase["object_type"] = item.GetObjectType()
		certificatemanagementcertificatebases = append(certificatemanagementcertificatebases, certificatemanagementcertificatebase)
	}
	return certificatemanagementcertificatebases
}
func flattenListCertificatemanagementRootCaCertificate(p []models.CertificatemanagementRootCaCertificate, d *schema.ResourceData) []map[string]interface{} {
	var certificatemanagementrootcacertificates []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		certificatemanagementrootcacertificate := make(map[string]interface{})
		certificatemanagementrootcacertificate["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
		certificatemanagementrootcacertificate["certificate"] = (func(p models.X509Certificate, d *schema.ResourceData) []map[string]interface{} {
			var x509certificates []map[string]interface{}
			var ret models.X509Certificate
			if reflect.DeepEqual(ret, p) {
				return nil
			}
			item := p
			x509certificate := make(map[string]interface{})
			x509certificate["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
			x509certificate["class_id"] = item.GetClassId()
			x509certificate["issuer"] = (func(p models.PkixDistinguishedName, d *schema.ResourceData) []map[string]interface{} {
				var pkixdistinguishednames []map[string]interface{}
				var ret models.PkixDistinguishedName
				if reflect.DeepEqual(ret, p) {
					return nil
				}
				item := p
				pkixdistinguishedname := make(map[string]interface{})
				pkixdistinguishedname["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
				pkixdistinguishedname["class_id"] = item.GetClassId()
				pkixdistinguishedname["common_name"] = item.GetCommonName()
				pkixdistinguishedname["country"] = item.GetCountry()
				pkixdistinguishedname["locality"] = item.GetLocality()
				pkixdistinguishedname["object_type"] = item.GetObjectType()
				pkixdistinguishedname["organization"] = item.GetOrganization()
				pkixdistinguishedname["organizational_unit"] = item.GetOrganizationalUnit()
				pkixdistinguishedname["state"] = item.GetState()

				pkixdistinguishednames = append(pkixdistinguishednames, pkixdistinguishedname)
				return pkixdistinguishednames
			})(item.GetIssuer(), d)
			x509certificate["not_after"] = item.GetNotAfter().String()
			x509certificate["not_before"] = item.GetNotBefore().String()
			x509certificate["object_type"] = item.GetObjectType()
			x509certificate["pem_certificate"] = item.GetPemCertificate()
			x509certificate["sha256_fingerprint"] = item.GetSha256Fingerprint()
			x509certificate["signature_algorithm"] = item.GetSignatureAlgorithm()
			x509certificate["subject"] = (func(p models.PkixDistinguishedName, d *schema.ResourceData) []map[string]interface{} {
				var pkixdistinguishednames []map[string]interface{}
				var ret models.PkixDistinguishedName
				if reflect.DeepEqual(ret, p) {
					return nil
				}
				item := p
				pkixdistinguishedname := make(map[string]interface{})
				pkixdistinguishedname["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
				pkixdistinguishedname["class_id"] = item.GetClassId()
				pkixdistinguishedname["common_name"] = item.GetCommonName()
				pkixdistinguishedname["country"] = item.GetCountry()
				pkixdistinguishedname["locality"] = item.GetLocality()
				pkixdistinguishedname["object_type"] = item.GetObjectType()
				pkixdistinguishedname["organization"] = item.GetOrganization()
				pkixdistinguishedname["organizational_unit"] = item.GetOrganizationalUnit()
				pkixdistinguishedname["state"] = item.GetState()

				pkixdistinguishednames = append(pkixdistinguishednames, pkixdistinguishedname)
				return pkixdistinguishednames
			})(item.GetSubject(), d)

			x509certificates = append(x509certificates, x509certificate)
			return x509certificates
		})(item.GetCertificate(), d)
		certificatemanagementrootcacertificate["certificate_name"] = item.GetCertificateName()
		certificatemanagementrootcacertificate["class_id"] = item.GetClassId()
		certificatemanagementrootcacertificate["enabled"] = item.GetEnabled()
		certificatemanagementrootcacertificate["object_type"] = item.GetObjectType()
		certificatemanagementrootcacertificates = append(certificatemanagementrootcacertificates, certificatemanagementrootcacertificate)
	}
	return certificatemanagementrootcacertificates
}
func flattenListChassisConfigChangeDetailRelationship(p []models.ChassisConfigChangeDetailRelationship, d *schema.ResourceData) []map[string]interface{} {
	var chassisconfigchangedetailrelationships []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		item := item.MoMoRef
		chassisconfigchangedetailrelationship := flattenMoMoRef(item)
		chassisconfigchangedetailrelationships = append(chassisconfigchangedetailrelationships, chassisconfigchangedetailrelationship)
	}
	return chassisconfigchangedetailrelationships
}
func flattenListChassisConfigResultEntryRelationship(p []models.ChassisConfigResultEntryRelationship, d *schema.ResourceData) []map[string]interface{} {
	var chassisconfigresultentryrelationships []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		item := item.MoMoRef
		chassisconfigresultentryrelationship := flattenMoMoRef(item)
		chassisconfigresultentryrelationships = append(chassisconfigresultentryrelationships, chassisconfigresultentryrelationship)
	}
	return chassisconfigresultentryrelationships
}
func flattenListChassisIomProfileRelationship(p []models.ChassisIomProfileRelationship, d *schema.ResourceData) []map[string]interface{} {
	var chassisiomprofilerelationships []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		item := item.MoMoRef
		chassisiomprofilerelationship := flattenMoMoRef(item)
		chassisiomprofilerelationships = append(chassisiomprofilerelationships, chassisiomprofilerelationship)
	}
	return chassisiomprofilerelationships
}
func flattenListCloudAwsSecurityGroupRelationship(p []models.CloudAwsSecurityGroupRelationship, d *schema.ResourceData) []map[string]interface{} {
	var cloudawssecuritygrouprelationships []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		item := item.MoMoRef
		cloudawssecuritygrouprelationship := flattenMoMoRef(item)
		cloudawssecuritygrouprelationships = append(cloudawssecuritygrouprelationships, cloudawssecuritygrouprelationship)
	}
	return cloudawssecuritygrouprelationships
}
func flattenListCloudCloudTag(p []models.CloudCloudTag, d *schema.ResourceData) []map[string]interface{} {
	var cloudcloudtags []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		cloudcloudtag := make(map[string]interface{})
		cloudcloudtag["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
		cloudcloudtag["class_id"] = item.GetClassId()
		cloudcloudtag["key"] = item.GetKey()
		cloudcloudtag["object_type"] = item.GetObjectType()
		cloudcloudtag["value"] = item.GetValue()
		cloudcloudtags = append(cloudcloudtags, cloudcloudtag)
	}
	return cloudcloudtags
}
func flattenListCloudCustomAttributes(p []models.CloudCustomAttributes, d *schema.ResourceData) []map[string]interface{} {
	var cloudcustomattributess []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		cloudcustomattributes := make(map[string]interface{})
		cloudcustomattributes["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
		cloudcustomattributes["attribute_name"] = item.GetAttributeName()
		cloudcustomattributes["attribute_type"] = item.GetAttributeType()
		cloudcustomattributes["attribute_value"] = item.GetAttributeValue()
		cloudcustomattributes["class_id"] = item.GetClassId()
		cloudcustomattributes["object_type"] = item.GetObjectType()
		cloudcustomattributess = append(cloudcustomattributess, cloudcustomattributes)
	}
	return cloudcustomattributess
}
func flattenListCloudNetworkInterfaceAttachment(p []models.CloudNetworkInterfaceAttachment, d *schema.ResourceData) []map[string]interface{} {
	var cloudnetworkinterfaceattachments []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		cloudnetworkinterfaceattachment := make(map[string]interface{})
		cloudnetworkinterfaceattachment["access_config"] = (func(p models.CloudNetworkAccessConfig, d *schema.ResourceData) []map[string]interface{} {
			var cloudnetworkaccessconfigs []map[string]interface{}
			var ret models.CloudNetworkAccessConfig
			if reflect.DeepEqual(ret, p) {
				return nil
			}
			item := p
			cloudnetworkaccessconfig := make(map[string]interface{})
			cloudnetworkaccessconfig["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
			cloudnetworkaccessconfig["class_id"] = item.GetClassId()
			cloudnetworkaccessconfig["external_ips"] = (func(p []models.CloudNetworkAddress, d *schema.ResourceData) []map[string]interface{} {
				var cloudnetworkaddresss []map[string]interface{}
				if len(p) == 0 {
					return nil
				}
				for _, item := range p {
					cloudnetworkaddress := make(map[string]interface{})
					cloudnetworkaddress["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
					cloudnetworkaddress["class_id"] = item.GetClassId()
					cloudnetworkaddress["ip"] = item.GetIp()
					cloudnetworkaddress["ip_allocation"] = item.GetIpAllocation()
					cloudnetworkaddress["ip_version"] = item.GetIpVersion()
					cloudnetworkaddress["object_type"] = item.GetObjectType()
					cloudnetworkaddresss = append(cloudnetworkaddresss, cloudnetworkaddress)
				}
				return cloudnetworkaddresss
			})(item.GetExternalIps(), d)
			cloudnetworkaccessconfig["object_type"] = item.GetObjectType()
			cloudnetworkaccessconfig["private_dns"] = item.GetPrivateDns()
			cloudnetworkaccessconfig["public_dns"] = item.GetPublicDns()

			cloudnetworkaccessconfigs = append(cloudnetworkaccessconfigs, cloudnetworkaccessconfig)
			return cloudnetworkaccessconfigs
		})(item.GetAccessConfig(), d)
		cloudnetworkinterfaceattachment["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
		cloudnetworkinterfaceattachment["class_id"] = item.GetClassId()
		cloudnetworkinterfaceattachment["identity"] = item.GetIdentity()
		cloudnetworkinterfaceattachment["ip_forwarding_enabled"] = item.GetIpForwardingEnabled()
		cloudnetworkinterfaceattachment["mac_address"] = item.GetMacAddress()
		cloudnetworkinterfaceattachment["network_id"] = item.GetNetworkId()
		cloudnetworkinterfaceattachment["network_name"] = item.GetNetworkName()
		cloudnetworkinterfaceattachment["nic_index"] = item.GetNicIndex()
		cloudnetworkinterfaceattachment["object_type"] = item.GetObjectType()
		cloudnetworkinterfaceattachment["private_address"] = (func(p []models.CloudNetworkAddress, d *schema.ResourceData) []map[string]interface{} {
			var cloudnetworkaddresss []map[string]interface{}
			if len(p) == 0 {
				return nil
			}
			for _, item := range p {
				cloudnetworkaddress := make(map[string]interface{})
				cloudnetworkaddress["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
				cloudnetworkaddress["class_id"] = item.GetClassId()
				cloudnetworkaddress["ip"] = item.GetIp()
				cloudnetworkaddress["ip_allocation"] = item.GetIpAllocation()
				cloudnetworkaddress["ip_version"] = item.GetIpVersion()
				cloudnetworkaddress["object_type"] = item.GetObjectType()
				cloudnetworkaddresss = append(cloudnetworkaddresss, cloudnetworkaddress)
			}
			return cloudnetworkaddresss
		})(item.GetPrivateAddress(), d)
		cloudnetworkinterfaceattachment["public_address"] = (func(p []models.CloudNetworkAddress, d *schema.ResourceData) []map[string]interface{} {
			var cloudnetworkaddresss []map[string]interface{}
			if len(p) == 0 {
				return nil
			}
			for _, item := range p {
				cloudnetworkaddress := make(map[string]interface{})
				cloudnetworkaddress["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
				cloudnetworkaddress["class_id"] = item.GetClassId()
				cloudnetworkaddress["ip"] = item.GetIp()
				cloudnetworkaddress["ip_allocation"] = item.GetIpAllocation()
				cloudnetworkaddress["ip_version"] = item.GetIpVersion()
				cloudnetworkaddress["object_type"] = item.GetObjectType()
				cloudnetworkaddresss = append(cloudnetworkaddresss, cloudnetworkaddress)
			}
			return cloudnetworkaddresss
		})(item.GetPublicAddress(), d)
		cloudnetworkinterfaceattachment["security_groups"] = item.GetSecurityGroups()
		cloudnetworkinterfaceattachment["sub_network_id"] = item.GetSubNetworkId()
		cloudnetworkinterfaceattachment["sub_network_name"] = item.GetSubNetworkName()
		cloudnetworkinterfaceattachments = append(cloudnetworkinterfaceattachments, cloudnetworkinterfaceattachment)
	}
	return cloudnetworkinterfaceattachments
}
func flattenListCloudSecurityGroupRule(p []models.CloudSecurityGroupRule, d *schema.ResourceData) []map[string]interface{} {
	var cloudsecuritygrouprules []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		cloudsecuritygrouprule := make(map[string]interface{})
		cloudsecuritygrouprule["action"] = item.GetAction()
		cloudsecuritygrouprule["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
		cloudsecuritygrouprule["class_id"] = item.GetClassId()
		cloudsecuritygrouprule["description"] = item.GetDescription()
		cloudsecuritygrouprule["end_port"] = item.GetEndPort()
		cloudsecuritygrouprule["ether_type"] = item.GetEtherType()
		cloudsecuritygrouprule["identity"] = item.GetIdentity()
		cloudsecuritygrouprule["index"] = item.GetIndex()
		cloudsecuritygrouprule["name"] = item.GetName()
		cloudsecuritygrouprule["object_type"] = item.GetObjectType()
		cloudsecuritygrouprule["port_list"] = item.GetPortList()
		cloudsecuritygrouprule["protocol"] = item.GetProtocol()
		cloudsecuritygrouprule["source_cidr"] = item.GetSourceCidr()
		cloudsecuritygrouprule["source_security_group"] = item.GetSourceSecurityGroup()
		cloudsecuritygrouprule["start_port"] = item.GetStartPort()
		cloudsecuritygrouprules = append(cloudsecuritygrouprules, cloudsecuritygrouprule)
	}
	return cloudsecuritygrouprules
}
func flattenListCloudTfcWorkspaceVariables(p []models.CloudTfcWorkspaceVariables, d *schema.ResourceData) []map[string]interface{} {
	var cloudtfcworkspacevariabless []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		cloudtfcworkspacevariables := make(map[string]interface{})
		cloudtfcworkspacevariables["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
		cloudtfcworkspacevariables["category"] = item.GetCategory()
		cloudtfcworkspacevariables["class_id"] = item.GetClassId()
		cloudtfcworkspacevariables["description"] = item.GetDescription()
		cloudtfcworkspacevariables["hcl"] = item.GetHcl()
		cloudtfcworkspacevariables["identity"] = item.GetIdentity()
		cloudtfcworkspacevariables["key"] = item.GetKey()
		cloudtfcworkspacevariables["object_type"] = item.GetObjectType()
		cloudtfcworkspacevariables["sensitive"] = item.GetSensitive()
		cloudtfcworkspacevariables["value"] = item.GetValue()
		cloudtfcworkspacevariabless = append(cloudtfcworkspacevariabless, cloudtfcworkspacevariables)
	}
	return cloudtfcworkspacevariabless
}
func flattenListCloudVolumeAttachment(p []models.CloudVolumeAttachment, d *schema.ResourceData) []map[string]interface{} {
	var cloudvolumeattachments []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		cloudvolumeattachment := make(map[string]interface{})
		cloudvolumeattachment["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
		cloudvolumeattachment["attached_time"] = item.GetAttachedTime().String()
		cloudvolumeattachment["auto_delete"] = item.GetAutoDelete()
		cloudvolumeattachment["class_id"] = item.GetClassId()
		cloudvolumeattachment["detached_time"] = item.GetDetachedTime().String()
		cloudvolumeattachment["device_name"] = item.GetDeviceName()
		cloudvolumeattachment["identity"] = item.GetIdentity()
		cloudvolumeattachment["index"] = item.GetIndex()
		cloudvolumeattachment["is_root"] = item.GetIsRoot()
		cloudvolumeattachment["object_type"] = item.GetObjectType()
		cloudvolumeattachments = append(cloudvolumeattachments, cloudvolumeattachment)
	}
	return cloudvolumeattachments
}
func flattenListCloudVolumeInstanceAttachment(p []models.CloudVolumeInstanceAttachment, d *schema.ResourceData) []map[string]interface{} {
	var cloudvolumeinstanceattachments []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		cloudvolumeinstanceattachment := make(map[string]interface{})
		cloudvolumeinstanceattachment["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
		cloudvolumeinstanceattachment["attach_time"] = item.GetAttachTime().String()
		cloudvolumeinstanceattachment["auto_delete"] = item.GetAutoDelete()
		cloudvolumeinstanceattachment["class_id"] = item.GetClassId()
		cloudvolumeinstanceattachment["device_name"] = item.GetDeviceName()
		cloudvolumeinstanceattachment["instance_id"] = item.GetInstanceId()
		cloudvolumeinstanceattachment["object_type"] = item.GetObjectType()
		cloudvolumeinstanceattachment["state"] = item.GetState()
		cloudvolumeinstanceattachments = append(cloudvolumeinstanceattachments, cloudvolumeinstanceattachment)
	}
	return cloudvolumeinstanceattachments
}
func flattenListComputeBladeRelationship(p []models.ComputeBladeRelationship, d *schema.ResourceData) []map[string]interface{} {
	var computebladerelationships []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		item := item.MoMoRef
		computebladerelationship := flattenMoMoRef(item)
		computebladerelationships = append(computebladerelationships, computebladerelationship)
	}
	return computebladerelationships
}
func flattenListComputeBladeIdentityRelationship(p []models.ComputeBladeIdentityRelationship, d *schema.ResourceData) []map[string]interface{} {
	var computebladeidentityrelationships []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		item := item.MoMoRef
		computebladeidentityrelationship := flattenMoMoRef(item)
		computebladeidentityrelationships = append(computebladeidentityrelationships, computebladeidentityrelationship)
	}
	return computebladeidentityrelationships
}
func flattenListComputeIpAddress(p []models.ComputeIpAddress, d *schema.ResourceData) []map[string]interface{} {
	var computeipaddresss []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		computeipaddress := make(map[string]interface{})
		computeipaddress["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
		computeipaddress["address"] = item.GetAddress()
		computeipaddress["category"] = item.GetCategory()
		computeipaddress["class_id"] = item.GetClassId()
		computeipaddress["default_gateway"] = item.GetDefaultGateway()
		computeipaddress["dn"] = item.GetDn()
		computeipaddress["http_port"] = item.GetHttpPort()
		computeipaddress["https_port"] = item.GetHttpsPort()
		computeipaddress["kvm_port"] = item.GetKvmPort()
		computeipaddress["kvm_vlan"] = item.GetKvmVlan()
		computeipaddress["name"] = item.GetName()
		computeipaddress["object_type"] = item.GetObjectType()
		computeipaddress["subnet"] = item.GetSubnet()
		computeipaddress["type"] = item.GetType()
		computeipaddresss = append(computeipaddresss, computeipaddress)
	}
	return computeipaddresss
}
func flattenListComputeMappingRelationship(p []models.ComputeMappingRelationship, d *schema.ResourceData) []map[string]interface{} {
	var computemappingrelationships []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		item := item.MoMoRef
		computemappingrelationship := flattenMoMoRef(item)
		computemappingrelationships = append(computemappingrelationships, computemappingrelationship)
	}
	return computemappingrelationships
}
func flattenListComputePersonalityRelationship(p []models.ComputePersonalityRelationship, d *schema.ResourceData) []map[string]interface{} {
	var computepersonalityrelationships []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		item := item.MoMoRef
		computepersonalityrelationship := flattenMoMoRef(item)
		computepersonalityrelationships = append(computepersonalityrelationships, computepersonalityrelationship)
	}
	return computepersonalityrelationships
}
func flattenListComputePhysicalRelationship(p []models.ComputePhysicalRelationship, d *schema.ResourceData) []map[string]interface{} {
	var computephysicalrelationships []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		item := item.MoMoRef
		computephysicalrelationship := flattenMoMoRef(item)
		computephysicalrelationships = append(computephysicalrelationships, computephysicalrelationship)
	}
	return computephysicalrelationships
}
func flattenListComputeRackUnitRelationship(p []models.ComputeRackUnitRelationship, d *schema.ResourceData) []map[string]interface{} {
	var computerackunitrelationships []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		item := item.MoMoRef
		computerackunitrelationship := flattenMoMoRef(item)
		computerackunitrelationships = append(computerackunitrelationships, computerackunitrelationship)
	}
	return computerackunitrelationships
}
func flattenListComputeServerOpStatus(p []models.ComputeServerOpStatus, d *schema.ResourceData) []map[string]interface{} {
	var computeserveropstatuss []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		computeserveropstatus := make(map[string]interface{})
		computeserveropstatus["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
		computeserveropstatus["class_id"] = item.GetClassId()
		computeserveropstatus["config_state"] = item.GetConfigState()
		computeserveropstatus["object_type"] = item.GetObjectType()
		computeserveropstatus["workflow_info_moid"] = item.GetWorkflowInfoMoid()
		computeserveropstatus["workflow_type"] = item.GetWorkflowType()
		computeserveropstatuss = append(computeserveropstatuss, computeserveropstatus)
	}
	return computeserveropstatuss
}
func flattenListCondAlarmAction(p []models.CondAlarmAction, d *schema.ResourceData) []map[string]interface{} {
	var condalarmactions []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		condalarmaction := make(map[string]interface{})
		condalarmaction["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
		condalarmaction["class_id"] = item.GetClassId()
		condalarmaction["message"] = (func(p models.IssueMessage, d *schema.ResourceData) []map[string]interface{} {
			var issuemessages []map[string]interface{}
			var ret models.IssueMessage
			if reflect.DeepEqual(ret, p) {
				return nil
			}
			item := p
			issuemessage := make(map[string]interface{})
			issuemessage["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
			issuemessage["class_id"] = item.GetClassId()
			issuemessage["message"] = item.GetMessage()
			issuemessage["object_type"] = item.GetObjectType()
			issuemessage["parameters"] = item.GetParameters()

			issuemessages = append(issuemessages, issuemessage)
			return issuemessages
		})(item.GetMessage(), d)
		condalarmaction["object_type"] = item.GetObjectType()
		condalarmaction["spec"] = (func(p models.CondAlarmSpec, d *schema.ResourceData) []map[string]interface{} {
			var condalarmspecs []map[string]interface{}
			var ret models.CondAlarmSpec
			if reflect.DeepEqual(ret, p) {
				return nil
			}
			item := p
			condalarmspec := make(map[string]interface{})
			condalarmspec["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
			condalarmspec["class_id"] = item.GetClassId()
			condalarmspec["object_type"] = item.GetObjectType()
			condalarmspec["severity"] = item.GetSeverity()

			condalarmspecs = append(condalarmspecs, condalarmspec)
			return condalarmspecs
		})(item.GetSpec(), d)
		condalarmactions = append(condalarmactions, condalarmaction)
	}
	return condalarmactions
}
func flattenListCondAlarmClassificationRelationship(p []models.CondAlarmClassificationRelationship, d *schema.ResourceData) []map[string]interface{} {
	var condalarmclassificationrelationships []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		item := item.MoMoRef
		condalarmclassificationrelationship := flattenMoMoRef(item)
		condalarmclassificationrelationships = append(condalarmclassificationrelationships, condalarmclassificationrelationship)
	}
	return condalarmclassificationrelationships
}
func flattenListCondAlarmClassificationEligibility(p []models.CondAlarmClassificationEligibility, d *schema.ResourceData) []map[string]interface{} {
	var condalarmclassificationeligibilitys []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		condalarmclassificationeligibility := make(map[string]interface{})
		condalarmclassificationeligibility["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
		condalarmclassificationeligibility["class_id"] = item.GetClassId()
		condalarmclassificationeligibility["entity_type"] = item.GetEntityType()
		condalarmclassificationeligibility["object_type"] = item.GetObjectType()
		condalarmclassificationeligibilitys = append(condalarmclassificationeligibilitys, condalarmclassificationeligibility)
	}
	return condalarmclassificationeligibilitys
}
func flattenListCondAlarmDefinitionRelationship(p []models.CondAlarmDefinitionRelationship, d *schema.ResourceData) []map[string]interface{} {
	var condalarmdefinitionrelationships []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		item := item.MoMoRef
		condalarmdefinitionrelationship := flattenMoMoRef(item)
		condalarmdefinitionrelationships = append(condalarmdefinitionrelationships, condalarmdefinitionrelationship)
	}
	return condalarmdefinitionrelationships
}
func flattenListCondHclStatusDetailRelationship(p []models.CondHclStatusDetailRelationship, d *schema.ResourceData) []map[string]interface{} {
	var condhclstatusdetailrelationships []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		item := item.MoMoRef
		condhclstatusdetailrelationship := flattenMoMoRef(item)
		condhclstatusdetailrelationships = append(condhclstatusdetailrelationships, condhclstatusdetailrelationship)
	}
	return condhclstatusdetailrelationships
}
func flattenListConnectorpackConnectorPackUpdate(p []models.ConnectorpackConnectorPackUpdate, d *schema.ResourceData) []map[string]interface{} {
	var connectorpackconnectorpackupdates []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		connectorpackconnectorpackupdate := make(map[string]interface{})
		connectorpackconnectorpackupdate["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
		connectorpackconnectorpackupdate["class_id"] = item.GetClassId()
		connectorpackconnectorpackupdate["current_version"] = item.GetCurrentVersion()
		connectorpackconnectorpackupdate["name"] = item.GetName()
		connectorpackconnectorpackupdate["new_version"] = item.GetNewVersion()
		connectorpackconnectorpackupdate["object_type"] = item.GetObjectType()
		connectorpackconnectorpackupdates = append(connectorpackconnectorpackupdates, connectorpackconnectorpackupdate)
	}
	return connectorpackconnectorpackupdates
}
func flattenListConsoleConsoleConfigRelationship(p []models.ConsoleConsoleConfigRelationship, d *schema.ResourceData) []map[string]interface{} {
	var consoleconsoleconfigrelationships []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		item := item.MoMoRef
		consoleconsoleconfigrelationship := flattenMoMoRef(item)
		consoleconsoleconfigrelationships = append(consoleconsoleconfigrelationships, consoleconsoleconfigrelationship)
	}
	return consoleconsoleconfigrelationships
}
func flattenListContentComplexType(p []models.ContentComplexType, d *schema.ResourceData) []map[string]interface{} {
	var contentcomplextypes []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		contentcomplextype := make(map[string]interface{})
		contentcomplextype["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
		contentcomplextype["class_id"] = item.GetClassId()
		contentcomplextype["name"] = item.GetName()
		contentcomplextype["object_type"] = item.GetObjectType()
		contentcomplextype["parameters"] = (func(p []models.ContentBaseParameter, d *schema.ResourceData) []map[string]interface{} {
			var contentbaseparameters []map[string]interface{}
			if len(p) == 0 {
				return nil
			}
			for _, item := range p {
				contentbaseparameter := make(map[string]interface{})
				contentbaseparameter["accept_single_value"] = item.GetAcceptSingleValue()
				contentbaseparameter["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
				contentbaseparameter["class_id"] = item.GetClassId()
				contentbaseparameter["complex_type"] = item.GetComplexType()
				contentbaseparameter["item_type"] = item.GetItemType()
				contentbaseparameter["name"] = item.GetName()
				contentbaseparameter["object_type"] = item.GetObjectType()
				contentbaseparameter["path"] = item.GetPath()
				contentbaseparameter["secure"] = item.GetSecure()
				contentbaseparameter["type"] = item.GetType()
				contentbaseparameters = append(contentbaseparameters, contentbaseparameter)
			}
			return contentbaseparameters
		})(item.GetParameters(), d)
		contentcomplextypes = append(contentcomplextypes, contentcomplextype)
	}
	return contentcomplextypes
}
func flattenListContentParameter(p []models.ContentParameter, d *schema.ResourceData) []map[string]interface{} {
	var contentparameters []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		contentparameter := make(map[string]interface{})
		contentparameter["accept_single_value"] = item.GetAcceptSingleValue()
		contentparameter["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
		contentparameter["class_id"] = item.GetClassId()
		contentparameter["complex_type"] = item.GetComplexType()
		contentparameter["item_type"] = item.GetItemType()
		contentparameter["name"] = item.GetName()
		contentparameter["object_type"] = item.GetObjectType()
		contentparameter["path"] = item.GetPath()
		contentparameter["secure"] = item.GetSecure()
		contentparameter["type"] = item.GetType()
		contentparameters = append(contentparameters, contentparameter)
	}
	return contentparameters
}
func flattenListConvergedinfraBaseComplianceDetailsRelationship(p []models.ConvergedinfraBaseComplianceDetailsRelationship, d *schema.ResourceData) []map[string]interface{} {
	var convergedinfrabasecompliancedetailsrelationships []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		item := item.MoMoRef
		convergedinfrabasecompliancedetailsrelationship := flattenMoMoRef(item)
		convergedinfrabasecompliancedetailsrelationships = append(convergedinfrabasecompliancedetailsrelationships, convergedinfrabasecompliancedetailsrelationship)
	}
	return convergedinfrabasecompliancedetailsrelationships
}
func flattenListConvergedinfraStorageComplianceDetailsRelationship(p []models.ConvergedinfraStorageComplianceDetailsRelationship, d *schema.ResourceData) []map[string]interface{} {
	var convergedinfrastoragecompliancedetailsrelationships []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		item := item.MoMoRef
		convergedinfrastoragecompliancedetailsrelationship := flattenMoMoRef(item)
		convergedinfrastoragecompliancedetailsrelationships = append(convergedinfrastoragecompliancedetailsrelationships, convergedinfrastoragecompliancedetailsrelationship)
	}
	return convergedinfrastoragecompliancedetailsrelationships
}
func flattenListCrdCustomResourceConfigProperty(p []models.CrdCustomResourceConfigProperty, d *schema.ResourceData) []map[string]interface{} {
	var crdcustomresourceconfigpropertys []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		crdcustomresourceconfigproperty := make(map[string]interface{})
		crdcustomresourceconfigproperty["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
		crdcustomresourceconfigproperty["class_id"] = item.GetClassId()
		crdcustomresourceconfigproperty["key"] = item.GetKey()
		crdcustomresourceconfigproperty["object_type"] = item.GetObjectType()
		crdcustomresourceconfigproperty["value"] = item.GetValue()
		crdcustomresourceconfigpropertys = append(crdcustomresourceconfigpropertys, crdcustomresourceconfigproperty)
	}
	return crdcustomresourceconfigpropertys
}
func flattenListEquipmentChassisOperationStatus(p []models.EquipmentChassisOperationStatus, d *schema.ResourceData) []map[string]interface{} {
	var equipmentchassisoperationstatuss []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		equipmentchassisoperationstatus := make(map[string]interface{})
		equipmentchassisoperationstatus["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
		equipmentchassisoperationstatus["class_id"] = item.GetClassId()
		equipmentchassisoperationstatus["config_state"] = item.GetConfigState()
		equipmentchassisoperationstatus["object_type"] = item.GetObjectType()
		equipmentchassisoperationstatus["slot_id"] = item.GetSlotId()
		equipmentchassisoperationstatus["workflow_id"] = item.GetWorkflowId()
		equipmentchassisoperationstatus["workflow_type"] = item.GetWorkflowType()
		equipmentchassisoperationstatuss = append(equipmentchassisoperationstatuss, equipmentchassisoperationstatus)
	}
	return equipmentchassisoperationstatuss
}
func flattenListEquipmentExpanderModuleRelationship(p []models.EquipmentExpanderModuleRelationship, d *schema.ResourceData) []map[string]interface{} {
	var equipmentexpandermodulerelationships []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		item := item.MoMoRef
		equipmentexpandermodulerelationship := flattenMoMoRef(item)
		equipmentexpandermodulerelationships = append(equipmentexpandermodulerelationships, equipmentexpandermodulerelationship)
	}
	return equipmentexpandermodulerelationships
}
func flattenListEquipmentFanRelationship(p []models.EquipmentFanRelationship, d *schema.ResourceData) []map[string]interface{} {
	var equipmentfanrelationships []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		item := item.MoMoRef
		equipmentfanrelationship := flattenMoMoRef(item)
		equipmentfanrelationships = append(equipmentfanrelationships, equipmentfanrelationship)
	}
	return equipmentfanrelationships
}
func flattenListEquipmentFanModuleRelationship(p []models.EquipmentFanModuleRelationship, d *schema.ResourceData) []map[string]interface{} {
	var equipmentfanmodulerelationships []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		item := item.MoMoRef
		equipmentfanmodulerelationship := flattenMoMoRef(item)
		equipmentfanmodulerelationships = append(equipmentfanmodulerelationships, equipmentfanmodulerelationship)
	}
	return equipmentfanmodulerelationships
}
func flattenListEquipmentHybridDriveSlotRelationship(p []models.EquipmentHybridDriveSlotRelationship, d *schema.ResourceData) []map[string]interface{} {
	var equipmenthybriddriveslotrelationships []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		item := item.MoMoRef
		equipmenthybriddriveslotrelationship := flattenMoMoRef(item)
		equipmenthybriddriveslotrelationships = append(equipmenthybriddriveslotrelationships, equipmenthybriddriveslotrelationship)
	}
	return equipmenthybriddriveslotrelationships
}
func flattenListEquipmentIoCardRelationship(p []models.EquipmentIoCardRelationship, d *schema.ResourceData) []map[string]interface{} {
	var equipmentiocardrelationships []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		item := item.MoMoRef
		equipmentiocardrelationship := flattenMoMoRef(item)
		equipmentiocardrelationships = append(equipmentiocardrelationships, equipmentiocardrelationship)
	}
	return equipmentiocardrelationships
}
func flattenListEquipmentIoCardIdentity(p []models.EquipmentIoCardIdentity, d *schema.ResourceData) []map[string]interface{} {
	var equipmentiocardidentitys []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		equipmentiocardidentity := make(map[string]interface{})
		equipmentiocardidentity["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
		equipmentiocardidentity["class_id"] = item.GetClassId()
		equipmentiocardidentity["io_card_moid"] = item.GetIoCardMoid()
		equipmentiocardidentity["nr_lifecycle"] = item.GetLifecycle()
		equipmentiocardidentity["model"] = item.GetModel()
		equipmentiocardidentity["module_id"] = item.GetModuleId()
		equipmentiocardidentity["network_element_moid"] = item.GetNetworkElementMoid()
		equipmentiocardidentity["object_type"] = item.GetObjectType()
		equipmentiocardidentity["serial"] = item.GetSerial()
		equipmentiocardidentity["switch_id"] = item.GetSwitchId()
		equipmentiocardidentity["vendor"] = item.GetVendor()
		equipmentiocardidentitys = append(equipmentiocardidentitys, equipmentiocardidentity)
	}
	return equipmentiocardidentitys
}
func flattenListEquipmentIoCardOperationStatus(p []models.EquipmentIoCardOperationStatus, d *schema.ResourceData) []map[string]interface{} {
	var equipmentiocardoperationstatuss []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		equipmentiocardoperationstatus := make(map[string]interface{})
		equipmentiocardoperationstatus["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
		equipmentiocardoperationstatus["class_id"] = item.GetClassId()
		equipmentiocardoperationstatus["config_state"] = item.GetConfigState()
		equipmentiocardoperationstatus["object_type"] = item.GetObjectType()
		equipmentiocardoperationstatus["workflow_id"] = item.GetWorkflowId()
		equipmentiocardoperationstatus["workflow_type"] = item.GetWorkflowType()
		equipmentiocardoperationstatuss = append(equipmentiocardoperationstatuss, equipmentiocardoperationstatus)
	}
	return equipmentiocardoperationstatuss
}
func flattenListEquipmentIoExpanderRelationship(p []models.EquipmentIoExpanderRelationship, d *schema.ResourceData) []map[string]interface{} {
	var equipmentioexpanderrelationships []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		item := item.MoMoRef
		equipmentioexpanderrelationship := flattenMoMoRef(item)
		equipmentioexpanderrelationships = append(equipmentioexpanderrelationships, equipmentioexpanderrelationship)
	}
	return equipmentioexpanderrelationships
}
func flattenListEquipmentPsuRelationship(p []models.EquipmentPsuRelationship, d *schema.ResourceData) []map[string]interface{} {
	var equipmentpsurelationships []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		item := item.MoMoRef
		equipmentpsurelationship := flattenMoMoRef(item)
		equipmentpsurelationships = append(equipmentpsurelationships, equipmentpsurelationship)
	}
	return equipmentpsurelationships
}
func flattenListEquipmentRackEnclosureSlotRelationship(p []models.EquipmentRackEnclosureSlotRelationship, d *schema.ResourceData) []map[string]interface{} {
	var equipmentrackenclosureslotrelationships []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		item := item.MoMoRef
		equipmentrackenclosureslotrelationship := flattenMoMoRef(item)
		equipmentrackenclosureslotrelationships = append(equipmentrackenclosureslotrelationships, equipmentrackenclosureslotrelationship)
	}
	return equipmentrackenclosureslotrelationships
}
func flattenListEquipmentSensorRelationship(p []models.EquipmentSensorRelationship, d *schema.ResourceData) []map[string]interface{} {
	var equipmentsensorrelationships []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		item := item.MoMoRef
		equipmentsensorrelationship := flattenMoMoRef(item)
		equipmentsensorrelationships = append(equipmentsensorrelationships, equipmentsensorrelationship)
	}
	return equipmentsensorrelationships
}
func flattenListEquipmentSwitchCardRelationship(p []models.EquipmentSwitchCardRelationship, d *schema.ResourceData) []map[string]interface{} {
	var equipmentswitchcardrelationships []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		item := item.MoMoRef
		equipmentswitchcardrelationship := flattenMoMoRef(item)
		equipmentswitchcardrelationships = append(equipmentswitchcardrelationships, equipmentswitchcardrelationship)
	}
	return equipmentswitchcardrelationships
}
func flattenListEquipmentSystemIoControllerRelationship(p []models.EquipmentSystemIoControllerRelationship, d *schema.ResourceData) []map[string]interface{} {
	var equipmentsystemiocontrollerrelationships []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		item := item.MoMoRef
		equipmentsystemiocontrollerrelationship := flattenMoMoRef(item)
		equipmentsystemiocontrollerrelationships = append(equipmentsystemiocontrollerrelationships, equipmentsystemiocontrollerrelationship)
	}
	return equipmentsystemiocontrollerrelationships
}
func flattenListEquipmentTpmRelationship(p []models.EquipmentTpmRelationship, d *schema.ResourceData) []map[string]interface{} {
	var equipmenttpmrelationships []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		item := item.MoMoRef
		equipmenttpmrelationship := flattenMoMoRef(item)
		equipmenttpmrelationships = append(equipmenttpmrelationships, equipmenttpmrelationship)
	}
	return equipmenttpmrelationships
}
func flattenListEtherHostPortRelationship(p []models.EtherHostPortRelationship, d *schema.ResourceData) []map[string]interface{} {
	var etherhostportrelationships []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		item := item.MoMoRef
		etherhostportrelationship := flattenMoMoRef(item)
		etherhostportrelationships = append(etherhostportrelationships, etherhostportrelationship)
	}
	return etherhostportrelationships
}
func flattenListEtherNetworkPortRelationship(p []models.EtherNetworkPortRelationship, d *schema.ResourceData) []map[string]interface{} {
	var ethernetworkportrelationships []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		item := item.MoMoRef
		ethernetworkportrelationship := flattenMoMoRef(item)
		ethernetworkportrelationships = append(ethernetworkportrelationships, ethernetworkportrelationship)
	}
	return ethernetworkportrelationships
}
func flattenListEtherPhysicalPortRelationship(p []models.EtherPhysicalPortRelationship, d *schema.ResourceData) []map[string]interface{} {
	var etherphysicalportrelationships []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		item := item.MoMoRef
		etherphysicalportrelationship := flattenMoMoRef(item)
		etherphysicalportrelationships = append(etherphysicalportrelationships, etherphysicalportrelationship)
	}
	return etherphysicalportrelationships
}
func flattenListEtherPortChannelRelationship(p []models.EtherPortChannelRelationship, d *schema.ResourceData) []map[string]interface{} {
	var etherportchannelrelationships []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		item := item.MoMoRef
		etherportchannelrelationship := flattenMoMoRef(item)
		etherportchannelrelationships = append(etherportchannelrelationships, etherportchannelrelationship)
	}
	return etherportchannelrelationships
}
func flattenListFabricAbstractSpanDestPortRelationship(p []models.FabricAbstractSpanDestPortRelationship, d *schema.ResourceData) []map[string]interface{} {
	var fabricabstractspandestportrelationships []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		item := item.MoMoRef
		fabricabstractspandestportrelationship := flattenMoMoRef(item)
		fabricabstractspandestportrelationships = append(fabricabstractspandestportrelationships, fabricabstractspandestportrelationship)
	}
	return fabricabstractspandestportrelationships
}
func flattenListFabricAbstractSpanSourcePortRelationship(p []models.FabricAbstractSpanSourcePortRelationship, d *schema.ResourceData) []map[string]interface{} {
	var fabricabstractspansourceportrelationships []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		item := item.MoMoRef
		fabricabstractspansourceportrelationship := flattenMoMoRef(item)
		fabricabstractspansourceportrelationships = append(fabricabstractspansourceportrelationships, fabricabstractspansourceportrelationship)
	}
	return fabricabstractspansourceportrelationships
}
func flattenListFabricAbstractSpanSourcePortChannelRelationship(p []models.FabricAbstractSpanSourcePortChannelRelationship, d *schema.ResourceData) []map[string]interface{} {
	var fabricabstractspansourceportchannelrelationships []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		item := item.MoMoRef
		fabricabstractspansourceportchannelrelationship := flattenMoMoRef(item)
		fabricabstractspansourceportchannelrelationships = append(fabricabstractspansourceportchannelrelationships, fabricabstractspansourceportchannelrelationship)
	}
	return fabricabstractspansourceportchannelrelationships
}
func flattenListFabricAbstractSpanSourceVirtualIfRelationship(p []models.FabricAbstractSpanSourceVirtualIfRelationship, d *schema.ResourceData) []map[string]interface{} {
	var fabricabstractspansourcevirtualifrelationships []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		item := item.MoMoRef
		fabricabstractspansourcevirtualifrelationship := flattenMoMoRef(item)
		fabricabstractspansourcevirtualifrelationships = append(fabricabstractspansourcevirtualifrelationships, fabricabstractspansourcevirtualifrelationship)
	}
	return fabricabstractspansourcevirtualifrelationships
}
func flattenListFabricBaseSwitchProfileRelationship(p []models.FabricBaseSwitchProfileRelationship, d *schema.ResourceData) []map[string]interface{} {
	var fabricbaseswitchprofilerelationships []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		item := item.MoMoRef
		fabricbaseswitchprofilerelationship := flattenMoMoRef(item)
		fabricbaseswitchprofilerelationships = append(fabricbaseswitchprofilerelationships, fabricbaseswitchprofilerelationship)
	}
	return fabricbaseswitchprofilerelationships
}
func flattenListFabricClusterAssignment(p []models.FabricClusterAssignment, d *schema.ResourceData) []map[string]interface{} {
	var fabricclusterassignments []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		fabricclusterassignment := make(map[string]interface{})
		fabricclusterassignment["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
		fabricclusterassignment["class_id"] = item.GetClassId()
		fabricclusterassignment["network_element"] = (func(p models.MoMoRef, d *schema.ResourceData) []map[string]interface{} {
			var momorefs []map[string]interface{}
			var ret models.MoMoRef
			if reflect.DeepEqual(ret, p) {
				return nil
			}
			item := p
			momoref := make(map[string]interface{})
			momoref["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
			momoref["class_id"] = item.GetClassId()
			momoref["moid"] = item.GetMoid()
			momoref["object_type"] = item.GetObjectType()
			momoref["selector"] = item.GetSelector()

			momorefs = append(momorefs, momoref)
			return momorefs
		})(item.GetNetworkElement(), d)
		fabricclusterassignment["object_type"] = item.GetObjectType()
		fabricclusterassignment["source_switch_profile_or_template_name"] = item.GetSourceSwitchProfileOrTemplateName()
		fabricclusterassignments = append(fabricclusterassignments, fabricclusterassignment)
	}
	return fabricclusterassignments
}
func flattenListFabricConfigChangeDetailRelationship(p []models.FabricConfigChangeDetailRelationship, d *schema.ResourceData) []map[string]interface{} {
	var fabricconfigchangedetailrelationships []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		item := item.MoMoRef
		fabricconfigchangedetailrelationship := flattenMoMoRef(item)
		fabricconfigchangedetailrelationships = append(fabricconfigchangedetailrelationships, fabricconfigchangedetailrelationship)
	}
	return fabricconfigchangedetailrelationships
}
func flattenListFabricConfigResultEntryRelationship(p []models.FabricConfigResultEntryRelationship, d *schema.ResourceData) []map[string]interface{} {
	var fabricconfigresultentryrelationships []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		item := item.MoMoRef
		fabricconfigresultentryrelationship := flattenMoMoRef(item)
		fabricconfigresultentryrelationships = append(fabricconfigresultentryrelationships, fabricconfigresultentryrelationship)
	}
	return fabricconfigresultentryrelationships
}
func flattenListFabricEthNetworkGroupPolicyRelationship(p []models.FabricEthNetworkGroupPolicyRelationship, d *schema.ResourceData) []map[string]interface{} {
	var fabricethnetworkgrouppolicyrelationships []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		item := item.MoMoRef
		fabricethnetworkgrouppolicyrelationship := flattenMoMoRef(item)
		fabricethnetworkgrouppolicyrelationships = append(fabricethnetworkgrouppolicyrelationships, fabricethnetworkgrouppolicyrelationship)
	}
	return fabricethnetworkgrouppolicyrelationships
}
func flattenListFabricEthNetworkGroupPolicyInventoryRelationship(p []models.FabricEthNetworkGroupPolicyInventoryRelationship, d *schema.ResourceData) []map[string]interface{} {
	var fabricethnetworkgrouppolicyinventoryrelationships []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		item := item.MoMoRef
		fabricethnetworkgrouppolicyinventoryrelationship := flattenMoMoRef(item)
		fabricethnetworkgrouppolicyinventoryrelationships = append(fabricethnetworkgrouppolicyinventoryrelationships, fabricethnetworkgrouppolicyinventoryrelationship)
	}
	return fabricethnetworkgrouppolicyinventoryrelationships
}
func flattenListFabricFcZoneMember(p []models.FabricFcZoneMember, d *schema.ResourceData) []map[string]interface{} {
	var fabricfczonemembers []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		fabricfczonemember := make(map[string]interface{})
		fabricfczonemember["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
		fabricfczonemember["class_id"] = item.GetClassId()
		fabricfczonemember["name"] = item.GetName()
		fabricfczonemember["object_type"] = item.GetObjectType()
		fabricfczonemember["switch_id"] = item.GetSwitchId()
		fabricfczonemember["vsan_id"] = item.GetVsanId()
		fabricfczonemember["wwpn"] = item.GetWwpn()
		fabricfczonemembers = append(fabricfczonemembers, fabricfczonemember)
	}
	return fabricfczonemembers
}
func flattenListFabricFcZonePolicyRelationship(p []models.FabricFcZonePolicyRelationship, d *schema.ResourceData) []map[string]interface{} {
	var fabricfczonepolicyrelationships []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		item := item.MoMoRef
		fabricfczonepolicyrelationship := flattenMoMoRef(item)
		fabricfczonepolicyrelationships = append(fabricfczonepolicyrelationships, fabricfczonepolicyrelationship)
	}
	return fabricfczonepolicyrelationships
}
func flattenListFabricPortIdentifier(p []models.FabricPortIdentifier, d *schema.ResourceData) []map[string]interface{} {
	var fabricportidentifiers []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		fabricportidentifier := make(map[string]interface{})
		fabricportidentifier["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
		fabricportidentifier["aggregate_port_id"] = item.GetAggregatePortId()
		fabricportidentifier["class_id"] = item.GetClassId()
		fabricportidentifier["object_type"] = item.GetObjectType()
		fabricportidentifier["port_id"] = item.GetPortId()
		fabricportidentifier["slot_id"] = item.GetSlotId()
		fabricportidentifiers = append(fabricportidentifiers, fabricportidentifier)
	}
	return fabricportidentifiers
}
func flattenListFabricQosClass(p []models.FabricQosClass, d *schema.ResourceData) []map[string]interface{} {
	var fabricqosclasss []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		fabricqosclass := make(map[string]interface{})
		fabricqosclass["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
		fabricqosclass["admin_state"] = item.GetAdminState()
		fabricqosclass["bandwidth_percent"] = item.GetBandwidthPercent()
		fabricqosclass["class_id"] = item.GetClassId()
		fabricqosclass["cos"] = item.GetCos()
		fabricqosclass["mtu"] = item.GetMtu()
		fabricqosclass["multicast_optimize"] = item.GetMulticastOptimize()
		fabricqosclass["name"] = item.GetName()
		fabricqosclass["object_type"] = item.GetObjectType()
		fabricqosclass["packet_drop"] = item.GetPacketDrop()
		fabricqosclass["weight"] = item.GetWeight()
		fabricqosclasss = append(fabricqosclasss, fabricqosclass)
	}
	return fabricqosclasss
}
func flattenListFabricSpanSourceVlanRelationship(p []models.FabricSpanSourceVlanRelationship, d *schema.ResourceData) []map[string]interface{} {
	var fabricspansourcevlanrelationships []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		item := item.MoMoRef
		fabricspansourcevlanrelationship := flattenMoMoRef(item)
		fabricspansourcevlanrelationships = append(fabricspansourcevlanrelationships, fabricspansourcevlanrelationship)
	}
	return fabricspansourcevlanrelationships
}
func flattenListFabricSwitchProfileRelationship(p []models.FabricSwitchProfileRelationship, d *schema.ResourceData) []map[string]interface{} {
	var fabricswitchprofilerelationships []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		item := item.MoMoRef
		fabricswitchprofilerelationship := flattenMoMoRef(item)
		fabricswitchprofilerelationships = append(fabricswitchprofilerelationships, fabricswitchprofilerelationship)
	}
	return fabricswitchprofilerelationships
}
func flattenListFabricSwitchProfileTemplateRelationship(p []models.FabricSwitchProfileTemplateRelationship, d *schema.ResourceData) []map[string]interface{} {
	var fabricswitchprofiletemplaterelationships []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		item := item.MoMoRef
		fabricswitchprofiletemplaterelationship := flattenMoMoRef(item)
		fabricswitchprofiletemplaterelationships = append(fabricswitchprofiletemplaterelationships, fabricswitchprofiletemplaterelationship)
	}
	return fabricswitchprofiletemplaterelationships
}
func flattenListFcNeighborRelationship(p []models.FcNeighborRelationship, d *schema.ResourceData) []map[string]interface{} {
	var fcneighborrelationships []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		item := item.MoMoRef
		fcneighborrelationship := flattenMoMoRef(item)
		fcneighborrelationships = append(fcneighborrelationships, fcneighborrelationship)
	}
	return fcneighborrelationships
}
func flattenListFcPhysicalPortRelationship(p []models.FcPhysicalPortRelationship, d *schema.ResourceData) []map[string]interface{} {
	var fcphysicalportrelationships []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		item := item.MoMoRef
		fcphysicalportrelationship := flattenMoMoRef(item)
		fcphysicalportrelationships = append(fcphysicalportrelationships, fcphysicalportrelationship)
	}
	return fcphysicalportrelationships
}
func flattenListFcPortChannelRelationship(p []models.FcPortChannelRelationship, d *schema.ResourceData) []map[string]interface{} {
	var fcportchannelrelationships []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		item := item.MoMoRef
		fcportchannelrelationship := flattenMoMoRef(item)
		fcportchannelrelationships = append(fcportchannelrelationships, fcportchannelrelationship)
	}
	return fcportchannelrelationships
}
func flattenListFcpoolBlock(p []models.FcpoolBlock, d *schema.ResourceData) []map[string]interface{} {
	var fcpoolblocks []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		fcpoolblock := make(map[string]interface{})
		fcpoolblock["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
		fcpoolblock["class_id"] = item.GetClassId()
		fcpoolblock["from"] = item.GetFrom()
		fcpoolblock["object_type"] = item.GetObjectType()
		fcpoolblock["size"] = item.GetSize()
		fcpoolblock["to"] = item.GetTo()
		fcpoolblocks = append(fcpoolblocks, fcpoolblock)
	}
	return fcpoolblocks
}
func flattenListFcpoolFcBlockRelationship(p []models.FcpoolFcBlockRelationship, d *schema.ResourceData) []map[string]interface{} {
	var fcpoolfcblockrelationships []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		item := item.MoMoRef
		fcpoolfcblockrelationship := flattenMoMoRef(item)
		fcpoolfcblockrelationships = append(fcpoolfcblockrelationships, fcpoolfcblockrelationship)
	}
	return fcpoolfcblockrelationships
}
func flattenListFcpoolReservationRelationship(p []models.FcpoolReservationRelationship, d *schema.ResourceData) []map[string]interface{} {
	var fcpoolreservationrelationships []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		item := item.MoMoRef
		fcpoolreservationrelationship := flattenMoMoRef(item)
		fcpoolreservationrelationships = append(fcpoolreservationrelationships, fcpoolreservationrelationship)
	}
	return fcpoolreservationrelationships
}
func flattenListFirmwareBaseImpact(p []models.FirmwareBaseImpact, d *schema.ResourceData) []map[string]interface{} {
	var firmwarebaseimpacts []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		firmwarebaseimpact := make(map[string]interface{})
		firmwarebaseimpact["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
		firmwarebaseimpact["class_id"] = item.GetClassId()
		firmwarebaseimpact["computation_error"] = item.GetComputationError()
		firmwarebaseimpact["computation_status_detail"] = item.GetComputationStatusDetail()
		firmwarebaseimpact["domain_name"] = item.GetDomainName()
		firmwarebaseimpact["end_point"] = item.GetEndPoint()
		firmwarebaseimpact["firmware_version"] = item.GetFirmwareVersion()
		firmwarebaseimpact["impact_type"] = item.GetImpactType()
		firmwarebaseimpact["model"] = item.GetModel()
		firmwarebaseimpact["object_type"] = item.GetObjectType()
		firmwarebaseimpact["target_firmware_version"] = item.GetTargetFirmwareVersion()
		firmwarebaseimpact["version_impact"] = item.GetVersionImpact()
		firmwarebaseimpacts = append(firmwarebaseimpacts, firmwarebaseimpact)
	}
	return firmwarebaseimpacts
}
func flattenListFirmwareComponentMeta(p []models.FirmwareComponentMeta, d *schema.ResourceData) []map[string]interface{} {
	var firmwarecomponentmetas []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		firmwarecomponentmeta := make(map[string]interface{})
		firmwarecomponentmeta["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
		firmwarecomponentmeta["class_id"] = item.GetClassId()
		firmwarecomponentmeta["component_label"] = item.GetComponentLabel()
		firmwarecomponentmeta["component_type"] = item.GetComponentType()
		firmwarecomponentmeta["description"] = item.GetDescription()
		firmwarecomponentmeta["disruption"] = item.GetDisruption()
		firmwarecomponentmeta["image_path"] = item.GetImagePath()
		firmwarecomponentmeta["is_oob_supported"] = item.GetIsOobSupported()
		firmwarecomponentmeta["model"] = item.GetModel()
		firmwarecomponentmeta["object_type"] = item.GetObjectType()
		firmwarecomponentmeta["oob_manageability"] = item.GetOobManageability()
		firmwarecomponentmeta["packed_version"] = item.GetPackedVersion()
		firmwarecomponentmeta["redfish_url"] = item.GetRedfishUrl()
		firmwarecomponentmeta["vendor"] = item.GetVendor()
		firmwarecomponentmetas = append(firmwarecomponentmetas, firmwarecomponentmeta)
	}
	return firmwarecomponentmetas
}
func flattenListFirmwareDistributableMetaRelationship(p []models.FirmwareDistributableMetaRelationship, d *schema.ResourceData) []map[string]interface{} {
	var firmwaredistributablemetarelationships []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		item := item.MoMoRef
		firmwaredistributablemetarelationship := flattenMoMoRef(item)
		firmwaredistributablemetarelationships = append(firmwaredistributablemetarelationships, firmwaredistributablemetarelationship)
	}
	return firmwaredistributablemetarelationships
}
func flattenListFirmwareFirmwareInventory(p []models.FirmwareFirmwareInventory, d *schema.ResourceData) []map[string]interface{} {
	var firmwarefirmwareinventorys []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		firmwarefirmwareinventory := make(map[string]interface{})
		firmwarefirmwareinventory["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
		firmwarefirmwareinventory["category"] = item.GetCategory()
		firmwarefirmwareinventory["class_id"] = item.GetClassId()
		firmwarefirmwareinventory["label"] = item.GetLabel()
		firmwarefirmwareinventory["model"] = item.GetModel()
		firmwarefirmwareinventory["object_type"] = item.GetObjectType()
		firmwarefirmwareinventory["update_uri"] = item.GetUpdateUri()
		firmwarefirmwareinventory["vendor"] = item.GetVendor()
		firmwarefirmwareinventory["nr_version"] = item.GetVersion()
		firmwarefirmwareinventorys = append(firmwarefirmwareinventorys, firmwarefirmwareinventory)
	}
	return firmwarefirmwareinventorys
}
func flattenListFirmwareModelBundleVersion(p []models.FirmwareModelBundleVersion, d *schema.ResourceData) []map[string]interface{} {
	var firmwaremodelbundleversions []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		firmwaremodelbundleversion := make(map[string]interface{})
		firmwaremodelbundleversion["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
		firmwaremodelbundleversion["bundle_version"] = item.GetBundleVersion()
		firmwaremodelbundleversion["class_id"] = item.GetClassId()
		firmwaremodelbundleversion["model_family"] = item.GetModelFamily()
		firmwaremodelbundleversion["object_type"] = item.GetObjectType()
		firmwaremodelbundleversions = append(firmwaremodelbundleversions, firmwaremodelbundleversion)
	}
	return firmwaremodelbundleversions
}
func flattenListFirmwareRunningFirmwareRelationship(p []models.FirmwareRunningFirmwareRelationship, d *schema.ResourceData) []map[string]interface{} {
	var firmwarerunningfirmwarerelationships []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		item := item.MoMoRef
		firmwarerunningfirmwarerelationship := flattenMoMoRef(item)
		firmwarerunningfirmwarerelationships = append(firmwarerunningfirmwarerelationships, firmwarerunningfirmwarerelationship)
	}
	return firmwarerunningfirmwarerelationships
}
func flattenListForecastDefinitionRelationship(p []models.ForecastDefinitionRelationship, d *schema.ResourceData) []map[string]interface{} {
	var forecastdefinitionrelationships []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		item := item.MoMoRef
		forecastdefinitionrelationship := flattenMoMoRef(item)
		forecastdefinitionrelationships = append(forecastdefinitionrelationships, forecastdefinitionrelationship)
	}
	return forecastdefinitionrelationships
}
func flattenListGraphicsCardRelationship(p []models.GraphicsCardRelationship, d *schema.ResourceData) []map[string]interface{} {
	var graphicscardrelationships []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		item := item.MoMoRef
		graphicscardrelationship := flattenMoMoRef(item)
		graphicscardrelationships = append(graphicscardrelationships, graphicscardrelationship)
	}
	return graphicscardrelationships
}
func flattenListGraphicsControllerRelationship(p []models.GraphicsControllerRelationship, d *schema.ResourceData) []map[string]interface{} {
	var graphicscontrollerrelationships []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		item := item.MoMoRef
		graphicscontrollerrelationship := flattenMoMoRef(item)
		graphicscontrollerrelationships = append(graphicscontrollerrelationships, graphicscontrollerrelationship)
	}
	return graphicscontrollerrelationships
}
func flattenListHclConstraint(p []models.HclConstraint, d *schema.ResourceData) []map[string]interface{} {
	var hclconstraints []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		hclconstraint := make(map[string]interface{})
		hclconstraint["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
		hclconstraint["class_id"] = item.GetClassId()
		hclconstraint["constraint_name"] = item.GetConstraintName()
		hclconstraint["constraint_value"] = item.GetConstraintValue()
		hclconstraint["object_type"] = item.GetObjectType()
		hclconstraints = append(hclconstraints, hclconstraint)
	}
	return hclconstraints
}
func flattenListHclHwCatalogInfoRelationship(p []models.HclHwCatalogInfoRelationship, d *schema.ResourceData) []map[string]interface{} {
	var hclhwcataloginforelationships []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		item := item.MoMoRef
		hclhwcataloginforelationship := flattenMoMoRef(item)
		hclhwcataloginforelationships = append(hclhwcataloginforelationships, hclhwcataloginforelationship)
	}
	return hclhwcataloginforelationships
}
func flattenListHclHyperflexSoftwareCompatibilityInfoRelationship(p []models.HclHyperflexSoftwareCompatibilityInfoRelationship, d *schema.ResourceData) []map[string]interface{} {
	var hclhyperflexsoftwarecompatibilityinforelationships []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		item := item.MoMoRef
		hclhyperflexsoftwarecompatibilityinforelationship := flattenMoMoRef(item)
		hclhyperflexsoftwarecompatibilityinforelationships = append(hclhyperflexsoftwarecompatibilityinforelationships, hclhyperflexsoftwarecompatibilityinforelationship)
	}
	return hclhyperflexsoftwarecompatibilityinforelationships
}
func flattenListHclOperatingSystemRelationship(p []models.HclOperatingSystemRelationship, d *schema.ResourceData) []map[string]interface{} {
	var hcloperatingsystemrelationships []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		item := item.MoMoRef
		hcloperatingsystemrelationship := flattenMoMoRef(item)
		hcloperatingsystemrelationships = append(hcloperatingsystemrelationships, hcloperatingsystemrelationship)
	}
	return hcloperatingsystemrelationships
}
func flattenListHclServerHwCatalogInfoRelationship(p []models.HclServerHwCatalogInfoRelationship, d *schema.ResourceData) []map[string]interface{} {
	var hclserverhwcataloginforelationships []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		item := item.MoMoRef
		hclserverhwcataloginforelationship := flattenMoMoRef(item)
		hclserverhwcataloginforelationships = append(hclserverhwcataloginforelationships, hclserverhwcataloginforelationship)
	}
	return hclserverhwcataloginforelationships
}
func flattenListHyperflexAlarmRelationship(p []models.HyperflexAlarmRelationship, d *schema.ResourceData) []map[string]interface{} {
	var hyperflexalarmrelationships []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		item := item.MoMoRef
		hyperflexalarmrelationship := flattenMoMoRef(item)
		hyperflexalarmrelationships = append(hyperflexalarmrelationships, hyperflexalarmrelationship)
	}
	return hyperflexalarmrelationships
}
func flattenListHyperflexBaseClusterRelationship(p []models.HyperflexBaseClusterRelationship, d *schema.ResourceData) []map[string]interface{} {
	var hyperflexbaseclusterrelationships []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		item := item.MoMoRef
		hyperflexbaseclusterrelationship := flattenMoMoRef(item)
		hyperflexbaseclusterrelationships = append(hyperflexbaseclusterrelationships, hyperflexbaseclusterrelationship)
	}
	return hyperflexbaseclusterrelationships
}
func flattenListHyperflexCapabilityInfoRelationship(p []models.HyperflexCapabilityInfoRelationship, d *schema.ResourceData) []map[string]interface{} {
	var hyperflexcapabilityinforelationships []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		item := item.MoMoRef
		hyperflexcapabilityinforelationship := flattenMoMoRef(item)
		hyperflexcapabilityinforelationships = append(hyperflexcapabilityinforelationships, hyperflexcapabilityinforelationship)
	}
	return hyperflexcapabilityinforelationships
}
func flattenListHyperflexClusterProfileRelationship(p []models.HyperflexClusterProfileRelationship, d *schema.ResourceData) []map[string]interface{} {
	var hyperflexclusterprofilerelationships []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		item := item.MoMoRef
		hyperflexclusterprofilerelationship := flattenMoMoRef(item)
		hyperflexclusterprofilerelationships = append(hyperflexclusterprofilerelationships, hyperflexclusterprofilerelationship)
	}
	return hyperflexclusterprofilerelationships
}
func flattenListHyperflexConfigResultEntryRelationship(p []models.HyperflexConfigResultEntryRelationship, d *schema.ResourceData) []map[string]interface{} {
	var hyperflexconfigresultentryrelationships []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		item := item.MoMoRef
		hyperflexconfigresultentryrelationship := flattenMoMoRef(item)
		hyperflexconfigresultentryrelationships = append(hyperflexconfigresultentryrelationships, hyperflexconfigresultentryrelationship)
	}
	return hyperflexconfigresultentryrelationships
}
func flattenListHyperflexDriveRelationship(p []models.HyperflexDriveRelationship, d *schema.ResourceData) []map[string]interface{} {
	var hyperflexdriverelationships []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		item := item.MoMoRef
		hyperflexdriverelationship := flattenMoMoRef(item)
		hyperflexdriverelationships = append(hyperflexdriverelationships, hyperflexdriverelationship)
	}
	return hyperflexdriverelationships
}
func flattenListHyperflexFeatureLimitEntry(p []models.HyperflexFeatureLimitEntry, d *schema.ResourceData) []map[string]interface{} {
	var hyperflexfeaturelimitentrys []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		hyperflexfeaturelimitentry := make(map[string]interface{})
		hyperflexfeaturelimitentry["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
		hyperflexfeaturelimitentry["class_id"] = item.GetClassId()
		hyperflexfeaturelimitentry["constraint"] = (func(p models.HyperflexAppSettingConstraint, d *schema.ResourceData) []map[string]interface{} {
			var hyperflexappsettingconstraints []map[string]interface{}
			var ret models.HyperflexAppSettingConstraint
			if reflect.DeepEqual(ret, p) {
				return nil
			}
			item := p
			hyperflexappsettingconstraint := make(map[string]interface{})
			hyperflexappsettingconstraint["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
			hyperflexappsettingconstraint["class_id"] = item.GetClassId()
			hyperflexappsettingconstraint["deployment_type"] = item.GetDeploymentType()
			hyperflexappsettingconstraint["hxdp_version"] = item.GetHxdpVersion()
			hyperflexappsettingconstraint["hypervisor_type"] = item.GetHypervisorType()
			hyperflexappsettingconstraint["mgmt_platform"] = item.GetMgmtPlatform()
			hyperflexappsettingconstraint["object_type"] = item.GetObjectType()
			hyperflexappsettingconstraint["server_model"] = item.GetServerModel()

			hyperflexappsettingconstraints = append(hyperflexappsettingconstraints, hyperflexappsettingconstraint)
			return hyperflexappsettingconstraints
		})(item.GetConstraint(), d)
		hyperflexfeaturelimitentry["name"] = item.GetName()
		hyperflexfeaturelimitentry["object_type"] = item.GetObjectType()
		hyperflexfeaturelimitentry["value"] = item.GetValue()
		hyperflexfeaturelimitentrys = append(hyperflexfeaturelimitentrys, hyperflexfeaturelimitentry)
	}
	return hyperflexfeaturelimitentrys
}
func flattenListHyperflexHealthCheckNodeLevelInfo(p []models.HyperflexHealthCheckNodeLevelInfo, d *schema.ResourceData) []map[string]interface{} {
	var hyperflexhealthchecknodelevelinfos []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		hyperflexhealthchecknodelevelinfo := make(map[string]interface{})
		hyperflexhealthchecknodelevelinfo["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
		hyperflexhealthchecknodelevelinfo["class_id"] = item.GetClassId()
		hyperflexhealthchecknodelevelinfo["node_cause"] = item.GetNodeCause()
		hyperflexhealthchecknodelevelinfo["node_check_result"] = item.GetNodeCheckResult()
		hyperflexhealthchecknodelevelinfo["node_esx_ip_address"] = item.GetNodeEsxIpAddress()
		hyperflexhealthchecknodelevelinfo["node_ip_address"] = item.GetNodeIpAddress()
		hyperflexhealthchecknodelevelinfo["node_name"] = item.GetNodeName()
		hyperflexhealthchecknodelevelinfo["node_resolution"] = item.GetNodeResolution()
		hyperflexhealthchecknodelevelinfo["object_type"] = item.GetObjectType()
		hyperflexhealthchecknodelevelinfos = append(hyperflexhealthchecknodelevelinfos, hyperflexhealthchecknodelevelinfo)
	}
	return hyperflexhealthchecknodelevelinfos
}
func flattenListHyperflexHealthCheckScriptInfo(p []models.HyperflexHealthCheckScriptInfo, d *schema.ResourceData) []map[string]interface{} {
	var hyperflexhealthcheckscriptinfos []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		hyperflexhealthcheckscriptinfo := make(map[string]interface{})
		hyperflexhealthcheckscriptinfo["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
		hyperflexhealthcheckscriptinfo["aggregate_script_name"] = item.GetAggregateScriptName()
		hyperflexhealthcheckscriptinfo["class_id"] = item.GetClassId()
		hyperflexhealthcheckscriptinfo["hyperflex_version"] = item.GetHyperflexVersion()
		hyperflexhealthcheckscriptinfo["object_type"] = item.GetObjectType()
		hyperflexhealthcheckscriptinfo["script_execute_location"] = item.GetScriptExecuteLocation()
		hyperflexhealthcheckscriptinfo["script_input"] = item.GetScriptInput()
		hyperflexhealthcheckscriptinfo["script_name"] = item.GetScriptName()
		hyperflexhealthcheckscriptinfo["nr_version"] = item.GetVersion()
		hyperflexhealthcheckscriptinfos = append(hyperflexhealthcheckscriptinfos, hyperflexhealthcheckscriptinfo)
	}
	return hyperflexhealthcheckscriptinfos
}
func flattenListHyperflexHxHostMountStatusDt(p []models.HyperflexHxHostMountStatusDt, d *schema.ResourceData) []map[string]interface{} {
	var hyperflexhxhostmountstatusdts []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		hyperflexhxhostmountstatusdt := make(map[string]interface{})
		hyperflexhxhostmountstatusdt["accessibility"] = item.GetAccessibility()
		hyperflexhxhostmountstatusdt["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
		hyperflexhxhostmountstatusdt["class_id"] = item.GetClassId()
		hyperflexhxhostmountstatusdt["host_name"] = item.GetHostName()
		hyperflexhxhostmountstatusdt["mounted"] = item.GetMounted()
		hyperflexhxhostmountstatusdt["object_type"] = item.GetObjectType()
		hyperflexhxhostmountstatusdt["reason"] = item.GetReason()
		hyperflexhxhostmountstatusdts = append(hyperflexhxhostmountstatusdts, hyperflexhxhostmountstatusdt)
	}
	return hyperflexhxhostmountstatusdts
}
func flattenListHyperflexHxZoneResiliencyInfoDt(p []models.HyperflexHxZoneResiliencyInfoDt, d *schema.ResourceData) []map[string]interface{} {
	var hyperflexhxzoneresiliencyinfodts []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		hyperflexhxzoneresiliencyinfodt := make(map[string]interface{})
		hyperflexhxzoneresiliencyinfodt["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
		hyperflexhxzoneresiliencyinfodt["class_id"] = item.GetClassId()
		hyperflexhxzoneresiliencyinfodt["name"] = item.GetName()
		hyperflexhxzoneresiliencyinfodt["object_type"] = item.GetObjectType()
		hyperflexhxzoneresiliencyinfodt["resiliency_info"] = (func(p models.HyperflexHxResiliencyInfoDt, d *schema.ResourceData) []map[string]interface{} {
			var hyperflexhxresiliencyinfodts []map[string]interface{}
			var ret models.HyperflexHxResiliencyInfoDt
			if reflect.DeepEqual(ret, p) {
				return nil
			}
			item := p
			hyperflexhxresiliencyinfodt := make(map[string]interface{})
			hyperflexhxresiliencyinfodt["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
			hyperflexhxresiliencyinfodt["class_id"] = item.GetClassId()
			hyperflexhxresiliencyinfodt["data_replication_factor"] = item.GetDataReplicationFactor()
			hyperflexhxresiliencyinfodt["hdd_failures_tolerable"] = item.GetHddFailuresTolerable()
			hyperflexhxresiliencyinfodt["messages"] = item.GetMessages()
			hyperflexhxresiliencyinfodt["node_failures_tolerable"] = item.GetNodeFailuresTolerable()
			hyperflexhxresiliencyinfodt["object_type"] = item.GetObjectType()
			hyperflexhxresiliencyinfodt["policy_compliance"] = item.GetPolicyCompliance()
			hyperflexhxresiliencyinfodt["resiliency_state"] = item.GetResiliencyState()
			hyperflexhxresiliencyinfodt["ssd_failures_tolerable"] = item.GetSsdFailuresTolerable()

			hyperflexhxresiliencyinfodts = append(hyperflexhxresiliencyinfodts, hyperflexhxresiliencyinfodt)
			return hyperflexhxresiliencyinfodts
		})(item.GetResiliencyInfo(), d)
		hyperflexhxzoneresiliencyinfodts = append(hyperflexhxzoneresiliencyinfodts, hyperflexhxzoneresiliencyinfodt)
	}
	return hyperflexhxzoneresiliencyinfodts
}
func flattenListHyperflexHxdpVersionRelationship(p []models.HyperflexHxdpVersionRelationship, d *schema.ResourceData) []map[string]interface{} {
	var hyperflexhxdpversionrelationships []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		item := item.MoMoRef
		hyperflexhxdpversionrelationship := flattenMoMoRef(item)
		hyperflexhxdpversionrelationships = append(hyperflexhxdpversionrelationships, hyperflexhxdpversionrelationship)
	}
	return hyperflexhxdpversionrelationships
}
func flattenListHyperflexInitiatorGroupRelationship(p []models.HyperflexInitiatorGroupRelationship, d *schema.ResourceData) []map[string]interface{} {
	var hyperflexinitiatorgrouprelationships []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		item := item.MoMoRef
		hyperflexinitiatorgrouprelationship := flattenMoMoRef(item)
		hyperflexinitiatorgrouprelationships = append(hyperflexinitiatorgrouprelationships, hyperflexinitiatorgrouprelationship)
	}
	return hyperflexinitiatorgrouprelationships
}
func flattenListHyperflexIpAddrRange(p []models.HyperflexIpAddrRange, d *schema.ResourceData) []map[string]interface{} {
	var hyperflexipaddrranges []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		hyperflexipaddrrange := make(map[string]interface{})
		hyperflexipaddrrange["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
		hyperflexipaddrrange["class_id"] = item.GetClassId()
		hyperflexipaddrrange["end_addr"] = item.GetEndAddr()
		hyperflexipaddrrange["gateway"] = item.GetGateway()
		hyperflexipaddrrange["ip_addr_blocks"] = (func(p []models.CommIpV4AddressBlock, d *schema.ResourceData) []map[string]interface{} {
			var commipv4addressblocks []map[string]interface{}
			if len(p) == 0 {
				return nil
			}
			for _, item := range p {
				commipv4addressblock := make(map[string]interface{})
				commipv4addressblock["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
				commipv4addressblock["class_id"] = item.GetClassId()
				commipv4addressblock["end_address"] = item.GetEndAddress()
				commipv4addressblock["object_type"] = item.GetObjectType()
				commipv4addressblock["start_address"] = item.GetStartAddress()
				commipv4addressblocks = append(commipv4addressblocks, commipv4addressblock)
			}
			return commipv4addressblocks
		})(item.GetIpAddrBlocks(), d)
		hyperflexipaddrrange["netmask"] = item.GetNetmask()
		hyperflexipaddrrange["object_type"] = item.GetObjectType()
		hyperflexipaddrrange["start_addr"] = item.GetStartAddr()
		hyperflexipaddrranges = append(hyperflexipaddrranges, hyperflexipaddrrange)
	}
	return hyperflexipaddrranges
}
func flattenListHyperflexLunRelationship(p []models.HyperflexLunRelationship, d *schema.ResourceData) []map[string]interface{} {
	var hyperflexlunrelationships []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		item := item.MoMoRef
		hyperflexlunrelationship := flattenMoMoRef(item)
		hyperflexlunrelationships = append(hyperflexlunrelationships, hyperflexlunrelationship)
	}
	return hyperflexlunrelationships
}
func flattenListHyperflexMapClusterIdToProtectionInfo(p []models.HyperflexMapClusterIdToProtectionInfo, d *schema.ResourceData) []map[string]interface{} {
	var hyperflexmapclusteridtoprotectioninfos []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		hyperflexmapclusteridtoprotectioninfo := make(map[string]interface{})
		hyperflexmapclusteridtoprotectioninfo["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
		hyperflexmapclusteridtoprotectioninfo["class_id"] = item.GetClassId()
		hyperflexmapclusteridtoprotectioninfo["cluster_id"] = item.GetClusterId()
		hyperflexmapclusteridtoprotectioninfo["object_type"] = item.GetObjectType()
		hyperflexmapclusteridtoprotectioninfo["protection_info"] = (func(p models.HyperflexProtectionInfo, d *schema.ResourceData) []map[string]interface{} {
			var hyperflexprotectioninfos []map[string]interface{}
			var ret models.HyperflexProtectionInfo
			if reflect.DeepEqual(ret, p) {
				return nil
			}
			item := p
			hyperflexprotectioninfo := make(map[string]interface{})
			hyperflexprotectioninfo["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
			hyperflexprotectioninfo["class_id"] = item.GetClassId()
			hyperflexprotectioninfo["object_type"] = item.GetObjectType()
			hyperflexprotectioninfo["vm_current_protection_info"] = (func(p models.HyperflexSnapshotInfoBrief, d *schema.ResourceData) []map[string]interface{} {
				var hyperflexsnapshotinfobriefs []map[string]interface{}
				var ret models.HyperflexSnapshotInfoBrief
				if reflect.DeepEqual(ret, p) {
					return nil
				}
				item := p
				hyperflexsnapshotinfobrief := make(map[string]interface{})
				hyperflexsnapshotinfobrief["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
				hyperflexsnapshotinfobrief["class_id"] = item.GetClassId()
				hyperflexsnapshotinfobrief["object_type"] = item.GetObjectType()
				hyperflexsnapshotinfobrief["replication_status"] = (func(p models.HyperflexReplicationStatus, d *schema.ResourceData) []map[string]interface{} {
					var hyperflexreplicationstatuss []map[string]interface{}
					var ret models.HyperflexReplicationStatus
					if reflect.DeepEqual(ret, p) {
						return nil
					}
					item := p
					hyperflexreplicationstatus := make(map[string]interface{})
					hyperflexreplicationstatus["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
					hyperflexreplicationstatus["bytes_replicated"] = item.GetBytesReplicated()
					hyperflexreplicationstatus["class_id"] = item.GetClassId()
					hyperflexreplicationstatus["end_time"] = item.GetEndTime()
					hyperflexreplicationstatus["error"] = (func(p models.HyperflexErrorStack, d *schema.ResourceData) []map[string]interface{} {
						var hyperflexerrorstacks []map[string]interface{}
						var ret models.HyperflexErrorStack
						if reflect.DeepEqual(ret, p) {
							return nil
						}
						item := p
						hyperflexerrorstack := make(map[string]interface{})
						hyperflexerrorstack["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
						hyperflexerrorstack["class_id"] = item.GetClassId()
						hyperflexerrorstack["message"] = item.GetMessage()
						hyperflexerrorstack["message_id"] = item.GetMessageId()
						hyperflexerrorstack["object_type"] = item.GetObjectType()

						hyperflexerrorstacks = append(hyperflexerrorstacks, hyperflexerrorstack)
						return hyperflexerrorstacks
					})(item.GetError(), d)
					hyperflexreplicationstatus["object_type"] = item.GetObjectType()
					hyperflexreplicationstatus["pack_entity_reference"] = (func(p models.HyperflexEntityReference, d *schema.ResourceData) []map[string]interface{} {
						var hyperflexentityreferences []map[string]interface{}
						var ret models.HyperflexEntityReference
						if reflect.DeepEqual(ret, p) {
							return nil
						}
						item := p
						hyperflexentityreference := make(map[string]interface{})
						hyperflexentityreference["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
						hyperflexentityreference["class_id"] = item.GetClassId()
						hyperflexentityreference["confignum"] = item.GetConfignum()
						hyperflexentityreference["id"] = item.GetId()
						hyperflexentityreference["idtype"] = item.GetIdtype()
						hyperflexentityreference["name"] = item.GetName()
						hyperflexentityreference["object_type"] = item.GetObjectType()
						hyperflexentityreference["type"] = item.GetType()

						hyperflexentityreferences = append(hyperflexentityreferences, hyperflexentityreference)
						return hyperflexentityreferences
					})(item.GetPackEntityReference(), d)
					hyperflexreplicationstatus["pct_complete"] = item.GetPctComplete()
					hyperflexreplicationstatus["rpo_status"] = (func(p models.HyperflexRpoStatus, d *schema.ResourceData) []map[string]interface{} {
						var hyperflexrpostatuss []map[string]interface{}
						var ret models.HyperflexRpoStatus
						if reflect.DeepEqual(ret, p) {
							return nil
						}
						item := p
						hyperflexrpostatus := make(map[string]interface{})
						hyperflexrpostatus["actual"] = item.GetActual()
						hyperflexrpostatus["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
						hyperflexrpostatus["class_id"] = item.GetClassId()
						hyperflexrpostatus["expected"] = item.GetExpected()
						hyperflexrpostatus["object_type"] = item.GetObjectType()
						hyperflexrpostatus["rpo_exceeded"] = item.GetRpoExceeded()

						hyperflexrpostatuss = append(hyperflexrpostatuss, hyperflexrpostatus)
						return hyperflexrpostatuss
					})(item.GetRpoStatus(), d)
					hyperflexreplicationstatus["start_time"] = item.GetStartTime()
					hyperflexreplicationstatus["status"] = item.GetStatus()

					hyperflexreplicationstatuss = append(hyperflexreplicationstatuss, hyperflexreplicationstatus)
					return hyperflexreplicationstatuss
				})(item.GetReplicationStatus(), d)
				hyperflexsnapshotinfobrief["site"] = item.GetSite()
				hyperflexsnapshotinfobrief["snapshot_status"] = (func(p models.HyperflexSnapshotStatus, d *schema.ResourceData) []map[string]interface{} {
					var hyperflexsnapshotstatuss []map[string]interface{}
					var ret models.HyperflexSnapshotStatus
					if reflect.DeepEqual(ret, p) {
						return nil
					}
					item := p
					hyperflexsnapshotstatus := make(map[string]interface{})
					hyperflexsnapshotstatus["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
					hyperflexsnapshotstatus["class_id"] = item.GetClassId()
					hyperflexsnapshotstatus["description"] = item.GetDescription()
					hyperflexsnapshotstatus["error"] = (func(p models.HyperflexErrorStack, d *schema.ResourceData) []map[string]interface{} {
						var hyperflexerrorstacks []map[string]interface{}
						var ret models.HyperflexErrorStack
						if reflect.DeepEqual(ret, p) {
							return nil
						}
						item := p
						hyperflexerrorstack := make(map[string]interface{})
						hyperflexerrorstack["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
						hyperflexerrorstack["class_id"] = item.GetClassId()
						hyperflexerrorstack["message"] = item.GetMessage()
						hyperflexerrorstack["message_id"] = item.GetMessageId()
						hyperflexerrorstack["object_type"] = item.GetObjectType()

						hyperflexerrorstacks = append(hyperflexerrorstacks, hyperflexerrorstack)
						return hyperflexerrorstacks
					})(item.GetError(), d)
					hyperflexsnapshotstatus["object_type"] = item.GetObjectType()
					hyperflexsnapshotstatus["pct_complete"] = item.GetPctComplete()
					hyperflexsnapshotstatus["status"] = item.GetStatus()
					hyperflexsnapshotstatus["timestamp"] = item.GetTimestamp()
					hyperflexsnapshotstatus["used_space"] = item.GetUsedSpace()

					hyperflexsnapshotstatuss = append(hyperflexsnapshotstatuss, hyperflexsnapshotstatus)
					return hyperflexsnapshotstatuss
				})(item.GetSnapshotStatus(), d)
				hyperflexsnapshotinfobrief["vm_snapshot_entity_reference"] = (func(p models.HyperflexEntityReference, d *schema.ResourceData) []map[string]interface{} {
					var hyperflexentityreferences []map[string]interface{}
					var ret models.HyperflexEntityReference
					if reflect.DeepEqual(ret, p) {
						return nil
					}
					item := p
					hyperflexentityreference := make(map[string]interface{})
					hyperflexentityreference["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
					hyperflexentityreference["class_id"] = item.GetClassId()
					hyperflexentityreference["confignum"] = item.GetConfignum()
					hyperflexentityreference["id"] = item.GetId()
					hyperflexentityreference["idtype"] = item.GetIdtype()
					hyperflexentityreference["name"] = item.GetName()
					hyperflexentityreference["object_type"] = item.GetObjectType()
					hyperflexentityreference["type"] = item.GetType()

					hyperflexentityreferences = append(hyperflexentityreferences, hyperflexentityreference)
					return hyperflexentityreferences
				})(item.GetVmSnapshotEntityReference(), d)

				hyperflexsnapshotinfobriefs = append(hyperflexsnapshotinfobriefs, hyperflexsnapshotinfobrief)
				return hyperflexsnapshotinfobriefs
			})(item.GetVmCurrentProtectionInfo(), d)
			hyperflexprotectioninfo["vm_last_successful_protection_info"] = (func(p models.HyperflexSnapshotInfoBrief, d *schema.ResourceData) []map[string]interface{} {
				var hyperflexsnapshotinfobriefs []map[string]interface{}
				var ret models.HyperflexSnapshotInfoBrief
				if reflect.DeepEqual(ret, p) {
					return nil
				}
				item := p
				hyperflexsnapshotinfobrief := make(map[string]interface{})
				hyperflexsnapshotinfobrief["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
				hyperflexsnapshotinfobrief["class_id"] = item.GetClassId()
				hyperflexsnapshotinfobrief["object_type"] = item.GetObjectType()
				hyperflexsnapshotinfobrief["replication_status"] = (func(p models.HyperflexReplicationStatus, d *schema.ResourceData) []map[string]interface{} {
					var hyperflexreplicationstatuss []map[string]interface{}
					var ret models.HyperflexReplicationStatus
					if reflect.DeepEqual(ret, p) {
						return nil
					}
					item := p
					hyperflexreplicationstatus := make(map[string]interface{})
					hyperflexreplicationstatus["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
					hyperflexreplicationstatus["bytes_replicated"] = item.GetBytesReplicated()
					hyperflexreplicationstatus["class_id"] = item.GetClassId()
					hyperflexreplicationstatus["end_time"] = item.GetEndTime()
					hyperflexreplicationstatus["error"] = (func(p models.HyperflexErrorStack, d *schema.ResourceData) []map[string]interface{} {
						var hyperflexerrorstacks []map[string]interface{}
						var ret models.HyperflexErrorStack
						if reflect.DeepEqual(ret, p) {
							return nil
						}
						item := p
						hyperflexerrorstack := make(map[string]interface{})
						hyperflexerrorstack["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
						hyperflexerrorstack["class_id"] = item.GetClassId()
						hyperflexerrorstack["message"] = item.GetMessage()
						hyperflexerrorstack["message_id"] = item.GetMessageId()
						hyperflexerrorstack["object_type"] = item.GetObjectType()

						hyperflexerrorstacks = append(hyperflexerrorstacks, hyperflexerrorstack)
						return hyperflexerrorstacks
					})(item.GetError(), d)
					hyperflexreplicationstatus["object_type"] = item.GetObjectType()
					hyperflexreplicationstatus["pack_entity_reference"] = (func(p models.HyperflexEntityReference, d *schema.ResourceData) []map[string]interface{} {
						var hyperflexentityreferences []map[string]interface{}
						var ret models.HyperflexEntityReference
						if reflect.DeepEqual(ret, p) {
							return nil
						}
						item := p
						hyperflexentityreference := make(map[string]interface{})
						hyperflexentityreference["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
						hyperflexentityreference["class_id"] = item.GetClassId()
						hyperflexentityreference["confignum"] = item.GetConfignum()
						hyperflexentityreference["id"] = item.GetId()
						hyperflexentityreference["idtype"] = item.GetIdtype()
						hyperflexentityreference["name"] = item.GetName()
						hyperflexentityreference["object_type"] = item.GetObjectType()
						hyperflexentityreference["type"] = item.GetType()

						hyperflexentityreferences = append(hyperflexentityreferences, hyperflexentityreference)
						return hyperflexentityreferences
					})(item.GetPackEntityReference(), d)
					hyperflexreplicationstatus["pct_complete"] = item.GetPctComplete()
					hyperflexreplicationstatus["rpo_status"] = (func(p models.HyperflexRpoStatus, d *schema.ResourceData) []map[string]interface{} {
						var hyperflexrpostatuss []map[string]interface{}
						var ret models.HyperflexRpoStatus
						if reflect.DeepEqual(ret, p) {
							return nil
						}
						item := p
						hyperflexrpostatus := make(map[string]interface{})
						hyperflexrpostatus["actual"] = item.GetActual()
						hyperflexrpostatus["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
						hyperflexrpostatus["class_id"] = item.GetClassId()
						hyperflexrpostatus["expected"] = item.GetExpected()
						hyperflexrpostatus["object_type"] = item.GetObjectType()
						hyperflexrpostatus["rpo_exceeded"] = item.GetRpoExceeded()

						hyperflexrpostatuss = append(hyperflexrpostatuss, hyperflexrpostatus)
						return hyperflexrpostatuss
					})(item.GetRpoStatus(), d)
					hyperflexreplicationstatus["start_time"] = item.GetStartTime()
					hyperflexreplicationstatus["status"] = item.GetStatus()

					hyperflexreplicationstatuss = append(hyperflexreplicationstatuss, hyperflexreplicationstatus)
					return hyperflexreplicationstatuss
				})(item.GetReplicationStatus(), d)
				hyperflexsnapshotinfobrief["site"] = item.GetSite()
				hyperflexsnapshotinfobrief["snapshot_status"] = (func(p models.HyperflexSnapshotStatus, d *schema.ResourceData) []map[string]interface{} {
					var hyperflexsnapshotstatuss []map[string]interface{}
					var ret models.HyperflexSnapshotStatus
					if reflect.DeepEqual(ret, p) {
						return nil
					}
					item := p
					hyperflexsnapshotstatus := make(map[string]interface{})
					hyperflexsnapshotstatus["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
					hyperflexsnapshotstatus["class_id"] = item.GetClassId()
					hyperflexsnapshotstatus["description"] = item.GetDescription()
					hyperflexsnapshotstatus["error"] = (func(p models.HyperflexErrorStack, d *schema.ResourceData) []map[string]interface{} {
						var hyperflexerrorstacks []map[string]interface{}
						var ret models.HyperflexErrorStack
						if reflect.DeepEqual(ret, p) {
							return nil
						}
						item := p
						hyperflexerrorstack := make(map[string]interface{})
						hyperflexerrorstack["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
						hyperflexerrorstack["class_id"] = item.GetClassId()
						hyperflexerrorstack["message"] = item.GetMessage()
						hyperflexerrorstack["message_id"] = item.GetMessageId()
						hyperflexerrorstack["object_type"] = item.GetObjectType()

						hyperflexerrorstacks = append(hyperflexerrorstacks, hyperflexerrorstack)
						return hyperflexerrorstacks
					})(item.GetError(), d)
					hyperflexsnapshotstatus["object_type"] = item.GetObjectType()
					hyperflexsnapshotstatus["pct_complete"] = item.GetPctComplete()
					hyperflexsnapshotstatus["status"] = item.GetStatus()
					hyperflexsnapshotstatus["timestamp"] = item.GetTimestamp()
					hyperflexsnapshotstatus["used_space"] = item.GetUsedSpace()

					hyperflexsnapshotstatuss = append(hyperflexsnapshotstatuss, hyperflexsnapshotstatus)
					return hyperflexsnapshotstatuss
				})(item.GetSnapshotStatus(), d)
				hyperflexsnapshotinfobrief["vm_snapshot_entity_reference"] = (func(p models.HyperflexEntityReference, d *schema.ResourceData) []map[string]interface{} {
					var hyperflexentityreferences []map[string]interface{}
					var ret models.HyperflexEntityReference
					if reflect.DeepEqual(ret, p) {
						return nil
					}
					item := p
					hyperflexentityreference := make(map[string]interface{})
					hyperflexentityreference["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
					hyperflexentityreference["class_id"] = item.GetClassId()
					hyperflexentityreference["confignum"] = item.GetConfignum()
					hyperflexentityreference["id"] = item.GetId()
					hyperflexentityreference["idtype"] = item.GetIdtype()
					hyperflexentityreference["name"] = item.GetName()
					hyperflexentityreference["object_type"] = item.GetObjectType()
					hyperflexentityreference["type"] = item.GetType()

					hyperflexentityreferences = append(hyperflexentityreferences, hyperflexentityreference)
					return hyperflexentityreferences
				})(item.GetVmSnapshotEntityReference(), d)

				hyperflexsnapshotinfobriefs = append(hyperflexsnapshotinfobriefs, hyperflexsnapshotinfobrief)
				return hyperflexsnapshotinfobriefs
			})(item.GetVmLastSuccessfulProtectionInfo(), d)
			hyperflexprotectioninfo["vm_space_usage"] = (func(p models.HyperflexVmProtectionSpaceUsage, d *schema.ResourceData) []map[string]interface{} {
				var hyperflexvmprotectionspaceusages []map[string]interface{}
				var ret models.HyperflexVmProtectionSpaceUsage
				if reflect.DeepEqual(ret, p) {
					return nil
				}
				item := p
				hyperflexvmprotectionspaceusage := make(map[string]interface{})
				hyperflexvmprotectionspaceusage["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
				hyperflexvmprotectionspaceusage["class_id"] = item.GetClassId()
				hyperflexvmprotectionspaceusage["object_type"] = item.GetObjectType()
				hyperflexvmprotectionspaceusage["space_usage"] = item.GetSpaceUsage()

				hyperflexvmprotectionspaceusages = append(hyperflexvmprotectionspaceusages, hyperflexvmprotectionspaceusage)
				return hyperflexvmprotectionspaceusages
			})(item.GetVmSpaceUsage(), d)

			hyperflexprotectioninfos = append(hyperflexprotectioninfos, hyperflexprotectioninfo)
			return hyperflexprotectioninfos
		})(item.GetProtectionInfo(), d)
		hyperflexmapclusteridtoprotectioninfos = append(hyperflexmapclusteridtoprotectioninfos, hyperflexmapclusteridtoprotectioninfo)
	}
	return hyperflexmapclusteridtoprotectioninfos
}
func flattenListHyperflexMapClusterIdToStSnapshotPoint(p []models.HyperflexMapClusterIdToStSnapshotPoint, d *schema.ResourceData) []map[string]interface{} {
	var hyperflexmapclusteridtostsnapshotpoints []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		hyperflexmapclusteridtostsnapshotpoint := make(map[string]interface{})
		hyperflexmapclusteridtostsnapshotpoint["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
		hyperflexmapclusteridtostsnapshotpoint["class_id"] = item.GetClassId()
		hyperflexmapclusteridtostsnapshotpoint["cluster_id"] = item.GetClusterId()
		hyperflexmapclusteridtostsnapshotpoint["object_type"] = item.GetObjectType()
		hyperflexmapclusteridtostsnapshotpoint["snapshot_point"] = (func(p models.HyperflexSnapshotPoint, d *schema.ResourceData) []map[string]interface{} {
			var hyperflexsnapshotpoints []map[string]interface{}
			var ret models.HyperflexSnapshotPoint
			if reflect.DeepEqual(ret, p) {
				return nil
			}
			item := p
			hyperflexsnapshotpoint := make(map[string]interface{})
			hyperflexsnapshotpoint["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
			hyperflexsnapshotpoint["class_id"] = item.GetClassId()
			hyperflexsnapshotpoint["cluster_entity_reference"] = (func(p models.HyperflexEntityReference, d *schema.ResourceData) []map[string]interface{} {
				var hyperflexentityreferences []map[string]interface{}
				var ret models.HyperflexEntityReference
				if reflect.DeepEqual(ret, p) {
					return nil
				}
				item := p
				hyperflexentityreference := make(map[string]interface{})
				hyperflexentityreference["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
				hyperflexentityreference["class_id"] = item.GetClassId()
				hyperflexentityreference["confignum"] = item.GetConfignum()
				hyperflexentityreference["id"] = item.GetId()
				hyperflexentityreference["idtype"] = item.GetIdtype()
				hyperflexentityreference["name"] = item.GetName()
				hyperflexentityreference["object_type"] = item.GetObjectType()
				hyperflexentityreference["type"] = item.GetType()

				hyperflexentityreferences = append(hyperflexentityreferences, hyperflexentityreference)
				return hyperflexentityreferences
			})(item.GetClusterEntityReference(), d)
			hyperflexsnapshotpoint["object_type"] = item.GetObjectType()
			hyperflexsnapshotpoint["replication_status"] = (func(p models.HyperflexReplicationStatus, d *schema.ResourceData) []map[string]interface{} {
				var hyperflexreplicationstatuss []map[string]interface{}
				var ret models.HyperflexReplicationStatus
				if reflect.DeepEqual(ret, p) {
					return nil
				}
				item := p
				hyperflexreplicationstatus := make(map[string]interface{})
				hyperflexreplicationstatus["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
				hyperflexreplicationstatus["bytes_replicated"] = item.GetBytesReplicated()
				hyperflexreplicationstatus["class_id"] = item.GetClassId()
				hyperflexreplicationstatus["end_time"] = item.GetEndTime()
				hyperflexreplicationstatus["error"] = (func(p models.HyperflexErrorStack, d *schema.ResourceData) []map[string]interface{} {
					var hyperflexerrorstacks []map[string]interface{}
					var ret models.HyperflexErrorStack
					if reflect.DeepEqual(ret, p) {
						return nil
					}
					item := p
					hyperflexerrorstack := make(map[string]interface{})
					hyperflexerrorstack["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
					hyperflexerrorstack["class_id"] = item.GetClassId()
					hyperflexerrorstack["message"] = item.GetMessage()
					hyperflexerrorstack["message_id"] = item.GetMessageId()
					hyperflexerrorstack["object_type"] = item.GetObjectType()

					hyperflexerrorstacks = append(hyperflexerrorstacks, hyperflexerrorstack)
					return hyperflexerrorstacks
				})(item.GetError(), d)
				hyperflexreplicationstatus["object_type"] = item.GetObjectType()
				hyperflexreplicationstatus["pack_entity_reference"] = (func(p models.HyperflexEntityReference, d *schema.ResourceData) []map[string]interface{} {
					var hyperflexentityreferences []map[string]interface{}
					var ret models.HyperflexEntityReference
					if reflect.DeepEqual(ret, p) {
						return nil
					}
					item := p
					hyperflexentityreference := make(map[string]interface{})
					hyperflexentityreference["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
					hyperflexentityreference["class_id"] = item.GetClassId()
					hyperflexentityreference["confignum"] = item.GetConfignum()
					hyperflexentityreference["id"] = item.GetId()
					hyperflexentityreference["idtype"] = item.GetIdtype()
					hyperflexentityreference["name"] = item.GetName()
					hyperflexentityreference["object_type"] = item.GetObjectType()
					hyperflexentityreference["type"] = item.GetType()

					hyperflexentityreferences = append(hyperflexentityreferences, hyperflexentityreference)
					return hyperflexentityreferences
				})(item.GetPackEntityReference(), d)
				hyperflexreplicationstatus["pct_complete"] = item.GetPctComplete()
				hyperflexreplicationstatus["rpo_status"] = (func(p models.HyperflexRpoStatus, d *schema.ResourceData) []map[string]interface{} {
					var hyperflexrpostatuss []map[string]interface{}
					var ret models.HyperflexRpoStatus
					if reflect.DeepEqual(ret, p) {
						return nil
					}
					item := p
					hyperflexrpostatus := make(map[string]interface{})
					hyperflexrpostatus["actual"] = item.GetActual()
					hyperflexrpostatus["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
					hyperflexrpostatus["class_id"] = item.GetClassId()
					hyperflexrpostatus["expected"] = item.GetExpected()
					hyperflexrpostatus["object_type"] = item.GetObjectType()
					hyperflexrpostatus["rpo_exceeded"] = item.GetRpoExceeded()

					hyperflexrpostatuss = append(hyperflexrpostatuss, hyperflexrpostatus)
					return hyperflexrpostatuss
				})(item.GetRpoStatus(), d)
				hyperflexreplicationstatus["start_time"] = item.GetStartTime()
				hyperflexreplicationstatus["status"] = item.GetStatus()

				hyperflexreplicationstatuss = append(hyperflexreplicationstatuss, hyperflexreplicationstatus)
				return hyperflexreplicationstatuss
			})(item.GetReplicationStatus(), d)
			hyperflexsnapshotpoint["snapshot_files"] = (func(p models.HyperflexSnapshotFiles, d *schema.ResourceData) []map[string]interface{} {
				var hyperflexsnapshotfiless []map[string]interface{}
				var ret models.HyperflexSnapshotFiles
				if reflect.DeepEqual(ret, p) {
					return nil
				}
				item := p
				hyperflexsnapshotfiles := make(map[string]interface{})
				hyperflexsnapshotfiles["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
				hyperflexsnapshotfiles["class_id"] = item.GetClassId()
				hyperflexsnapshotfiles["name_tracked_files"] = (func(p []models.HyperflexFilePath, d *schema.ResourceData) []map[string]interface{} {
					var hyperflexfilepaths []map[string]interface{}
					if len(p) == 0 {
						return nil
					}
					for _, item := range p {
						hyperflexfilepath := make(map[string]interface{})
						hyperflexfilepath["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
						hyperflexfilepath["class_id"] = item.GetClassId()
						hyperflexfilepath["ds_info"] = (func(p models.HyperflexDatastoreInfo, d *schema.ResourceData) []map[string]interface{} {
							var hyperflexdatastoreinfos []map[string]interface{}
							var ret models.HyperflexDatastoreInfo
							if reflect.DeepEqual(ret, p) {
								return nil
							}
							item := p
							hyperflexdatastoreinfo := make(map[string]interface{})
							hyperflexdatastoreinfo["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
							hyperflexdatastoreinfo["class_id"] = item.GetClassId()
							hyperflexdatastoreinfo["ds_backend_id"] = item.GetDsBackendId()
							hyperflexdatastoreinfo["ds_frontend_id"] = item.GetDsFrontendId()
							hyperflexdatastoreinfo["object_type"] = item.GetObjectType()

							hyperflexdatastoreinfos = append(hyperflexdatastoreinfos, hyperflexdatastoreinfo)
							return hyperflexdatastoreinfos
						})(item.GetDsInfo(), d)
						hyperflexfilepath["object_type"] = item.GetObjectType()
						hyperflexfilepath["relative_file_path"] = item.GetRelativeFilePath()
						hyperflexfilepaths = append(hyperflexfilepaths, hyperflexfilepath)
					}
					return hyperflexfilepaths
				})(item.GetNameTrackedFiles(), d)
				hyperflexsnapshotfiles["object_type"] = item.GetObjectType()
				hyperflexsnapshotfiles["uuid_tracked_disks_map"] = (func(p []models.HyperflexMapUuidToTrackedDisk, d *schema.ResourceData) []map[string]interface{} {
					var hyperflexmapuuidtotrackeddisks []map[string]interface{}
					if len(p) == 0 {
						return nil
					}
					for _, item := range p {
						hyperflexmapuuidtotrackeddisk := make(map[string]interface{})
						hyperflexmapuuidtotrackeddisk["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
						hyperflexmapuuidtotrackeddisk["class_id"] = item.GetClassId()
						hyperflexmapuuidtotrackeddisk["object_type"] = item.GetObjectType()
						hyperflexmapuuidtotrackeddisk["tracked_disk"] = (func(p models.HyperflexTrackedDisk, d *schema.ResourceData) []map[string]interface{} {
							var hyperflextrackeddisks []map[string]interface{}
							var ret models.HyperflexTrackedDisk
							if reflect.DeepEqual(ret, p) {
								return nil
							}
							item := p
							hyperflextrackeddisk := make(map[string]interface{})
							hyperflextrackeddisk["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
							hyperflextrackeddisk["class_id"] = item.GetClassId()
							hyperflextrackeddisk["disk_files"] = (func(p []models.HyperflexTrackedFile, d *schema.ResourceData) []map[string]interface{} {
								var hyperflextrackedfiles []map[string]interface{}
								if len(p) == 0 {
									return nil
								}
								for _, item := range p {
									hyperflextrackedfile := make(map[string]interface{})
									hyperflextrackedfile["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
									hyperflextrackedfile["class_id"] = item.GetClassId()
									hyperflextrackedfile["file_path"] = (func(p models.HyperflexFilePath, d *schema.ResourceData) []map[string]interface{} {
										var hyperflexfilepaths []map[string]interface{}
										var ret models.HyperflexFilePath
										if reflect.DeepEqual(ret, p) {
											return nil
										}
										item := p
										hyperflexfilepath := make(map[string]interface{})
										hyperflexfilepath["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
										hyperflexfilepath["class_id"] = item.GetClassId()
										hyperflexfilepath["ds_info"] = (func(p models.HyperflexDatastoreInfo, d *schema.ResourceData) []map[string]interface{} {
											var hyperflexdatastoreinfos []map[string]interface{}
											var ret models.HyperflexDatastoreInfo
											if reflect.DeepEqual(ret, p) {
												return nil
											}
											item := p
											hyperflexdatastoreinfo := make(map[string]interface{})
											hyperflexdatastoreinfo["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
											hyperflexdatastoreinfo["class_id"] = item.GetClassId()
											hyperflexdatastoreinfo["ds_backend_id"] = item.GetDsBackendId()
											hyperflexdatastoreinfo["ds_frontend_id"] = item.GetDsFrontendId()
											hyperflexdatastoreinfo["object_type"] = item.GetObjectType()

											hyperflexdatastoreinfos = append(hyperflexdatastoreinfos, hyperflexdatastoreinfo)
											return hyperflexdatastoreinfos
										})(item.GetDsInfo(), d)
										hyperflexfilepath["object_type"] = item.GetObjectType()
										hyperflexfilepath["relative_file_path"] = item.GetRelativeFilePath()

										hyperflexfilepaths = append(hyperflexfilepaths, hyperflexfilepath)
										return hyperflexfilepaths
									})(item.GetFilePath(), d)
									hyperflextrackedfile["file_type"] = item.GetFileType()
									hyperflextrackedfile["object_type"] = item.GetObjectType()
									hyperflextrackedfiles = append(hyperflextrackedfiles, hyperflextrackedfile)
								}
								return hyperflextrackedfiles
							})(item.GetDiskFiles(), d)
							hyperflextrackeddisk["disk_type"] = item.GetDiskType()
							hyperflextrackeddisk["object_type"] = item.GetObjectType()

							hyperflextrackeddisks = append(hyperflextrackeddisks, hyperflextrackeddisk)
							return hyperflextrackeddisks
						})(item.GetTrackedDisk(), d)
						hyperflexmapuuidtotrackeddisk["uuid"] = item.GetUuid()
						hyperflexmapuuidtotrackeddisks = append(hyperflexmapuuidtotrackeddisks, hyperflexmapuuidtotrackeddisk)
					}
					return hyperflexmapuuidtotrackeddisks
				})(item.GetUuidTrackedDisksMap(), d)

				hyperflexsnapshotfiless = append(hyperflexsnapshotfiless, hyperflexsnapshotfiles)
				return hyperflexsnapshotfiless
			})(item.GetSnapshotFiles(), d)
			hyperflexsnapshotpoint["snapshot_point_entity_reference"] = (func(p models.HyperflexEntityReference, d *schema.ResourceData) []map[string]interface{} {
				var hyperflexentityreferences []map[string]interface{}
				var ret models.HyperflexEntityReference
				if reflect.DeepEqual(ret, p) {
					return nil
				}
				item := p
				hyperflexentityreference := make(map[string]interface{})
				hyperflexentityreference["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
				hyperflexentityreference["class_id"] = item.GetClassId()
				hyperflexentityreference["confignum"] = item.GetConfignum()
				hyperflexentityreference["id"] = item.GetId()
				hyperflexentityreference["idtype"] = item.GetIdtype()
				hyperflexentityreference["name"] = item.GetName()
				hyperflexentityreference["object_type"] = item.GetObjectType()
				hyperflexentityreference["type"] = item.GetType()

				hyperflexentityreferences = append(hyperflexentityreferences, hyperflexentityreference)
				return hyperflexentityreferences
			})(item.GetSnapshotPointEntityReference(), d)
			hyperflexsnapshotpoint["snapshot_status"] = (func(p models.HyperflexSnapshotStatus, d *schema.ResourceData) []map[string]interface{} {
				var hyperflexsnapshotstatuss []map[string]interface{}
				var ret models.HyperflexSnapshotStatus
				if reflect.DeepEqual(ret, p) {
					return nil
				}
				item := p
				hyperflexsnapshotstatus := make(map[string]interface{})
				hyperflexsnapshotstatus["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
				hyperflexsnapshotstatus["class_id"] = item.GetClassId()
				hyperflexsnapshotstatus["description"] = item.GetDescription()
				hyperflexsnapshotstatus["error"] = (func(p models.HyperflexErrorStack, d *schema.ResourceData) []map[string]interface{} {
					var hyperflexerrorstacks []map[string]interface{}
					var ret models.HyperflexErrorStack
					if reflect.DeepEqual(ret, p) {
						return nil
					}
					item := p
					hyperflexerrorstack := make(map[string]interface{})
					hyperflexerrorstack["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
					hyperflexerrorstack["class_id"] = item.GetClassId()
					hyperflexerrorstack["message"] = item.GetMessage()
					hyperflexerrorstack["message_id"] = item.GetMessageId()
					hyperflexerrorstack["object_type"] = item.GetObjectType()

					hyperflexerrorstacks = append(hyperflexerrorstacks, hyperflexerrorstack)
					return hyperflexerrorstacks
				})(item.GetError(), d)
				hyperflexsnapshotstatus["object_type"] = item.GetObjectType()
				hyperflexsnapshotstatus["pct_complete"] = item.GetPctComplete()
				hyperflexsnapshotstatus["status"] = item.GetStatus()
				hyperflexsnapshotstatus["timestamp"] = item.GetTimestamp()
				hyperflexsnapshotstatus["used_space"] = item.GetUsedSpace()

				hyperflexsnapshotstatuss = append(hyperflexsnapshotstatuss, hyperflexsnapshotstatus)
				return hyperflexsnapshotstatuss
			})(item.GetSnapshotStatus(), d)
			hyperflexsnapshotpoint["vm_runtime_info"] = (func(p models.HyperflexVirtualMachine, d *schema.ResourceData) []map[string]interface{} {
				var hyperflexvirtualmachines []map[string]interface{}
				var ret models.HyperflexVirtualMachine
				if reflect.DeepEqual(ret, p) {
					return nil
				}
				item := p
				hyperflexvirtualmachine := make(map[string]interface{})
				hyperflexvirtualmachine["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
				hyperflexvirtualmachine["class_id"] = item.GetClassId()
				hyperflexvirtualmachine["object_type"] = item.GetObjectType()
				hyperflexvirtualmachine["run_time_info"] = (func(p models.HyperflexVirtualMachineRuntimeInfo, d *schema.ResourceData) []map[string]interface{} {
					var hyperflexvirtualmachineruntimeinfos []map[string]interface{}
					var ret models.HyperflexVirtualMachineRuntimeInfo
					if reflect.DeepEqual(ret, p) {
						return nil
					}
					item := p
					hyperflexvirtualmachineruntimeinfo := make(map[string]interface{})
					hyperflexvirtualmachineruntimeinfo["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
					hyperflexvirtualmachineruntimeinfo["bios_uuid"] = item.GetBiosUuid()
					hyperflexvirtualmachineruntimeinfo["class_id"] = item.GetClassId()
					hyperflexvirtualmachineruntimeinfo["connection_state"] = item.GetConnectionState()
					hyperflexvirtualmachineruntimeinfo["cpu_usage"] = item.GetCpuUsage()
					hyperflexvirtualmachineruntimeinfo["folder"] = item.GetFolder()
					hyperflexvirtualmachineruntimeinfo["guest_family"] = item.GetGuestFamily()
					hyperflexvirtualmachineruntimeinfo["guest_full_name"] = item.GetGuestFullName()
					hyperflexvirtualmachineruntimeinfo["guest_id"] = item.GetGuestId()
					hyperflexvirtualmachineruntimeinfo["guest_state"] = item.GetGuestState()
					hyperflexvirtualmachineruntimeinfo["host_name"] = item.GetHostName()
					hyperflexvirtualmachineruntimeinfo["instance_uuid"] = item.GetInstanceUuid()
					hyperflexvirtualmachineruntimeinfo["memory_mb"] = item.GetMemoryMb()
					hyperflexvirtualmachineruntimeinfo["memory_usage"] = item.GetMemoryUsage()
					hyperflexvirtualmachineruntimeinfo["moid"] = item.GetMoid()
					hyperflexvirtualmachineruntimeinfo["name"] = item.GetName()
					hyperflexvirtualmachineruntimeinfo["networks"] = item.GetNetworks()
					hyperflexvirtualmachineruntimeinfo["num_cpu"] = item.GetNumCpu()
					hyperflexvirtualmachineruntimeinfo["object_type"] = item.GetObjectType()
					hyperflexvirtualmachineruntimeinfo["power_state"] = item.GetPowerState()
					hyperflexvirtualmachineruntimeinfo["provisioned_size"] = item.GetProvisionedSize()
					hyperflexvirtualmachineruntimeinfo["resource_pool"] = item.GetResourcePool()
					hyperflexvirtualmachineruntimeinfo["used_size"] = item.GetUsedSize()
					hyperflexvirtualmachineruntimeinfo["nr_version"] = item.GetVersion()
					hyperflexvirtualmachineruntimeinfo["vmx_path"] = item.GetVmxPath()

					hyperflexvirtualmachineruntimeinfos = append(hyperflexvirtualmachineruntimeinfos, hyperflexvirtualmachineruntimeinfo)
					return hyperflexvirtualmachineruntimeinfos
				})(item.GetRunTimeInfo(), d)
				hyperflexvirtualmachine["status_code"] = item.GetStatusCode()
				hyperflexvirtualmachine["uuid"] = item.GetUuid()

				hyperflexvirtualmachines = append(hyperflexvirtualmachines, hyperflexvirtualmachine)
				return hyperflexvirtualmachines
			})(item.GetVmRuntimeInfo(), d)

			hyperflexsnapshotpoints = append(hyperflexsnapshotpoints, hyperflexsnapshotpoint)
			return hyperflexsnapshotpoints
		})(item.GetSnapshotPoint(), d)
		hyperflexmapclusteridtostsnapshotpoints = append(hyperflexmapclusteridtostsnapshotpoints, hyperflexmapclusteridtostsnapshotpoint)
	}
	return hyperflexmapclusteridtostsnapshotpoints
}
func flattenListHyperflexNamedVlan(p []models.HyperflexNamedVlan, d *schema.ResourceData) []map[string]interface{} {
	var hyperflexnamedvlans []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		hyperflexnamedvlan := make(map[string]interface{})
		hyperflexnamedvlan["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
		hyperflexnamedvlan["class_id"] = item.GetClassId()
		hyperflexnamedvlan["name"] = item.GetName()
		hyperflexnamedvlan["object_type"] = item.GetObjectType()
		hyperflexnamedvlan["vlan_id"] = item.GetVlanId()
		hyperflexnamedvlans = append(hyperflexnamedvlans, hyperflexnamedvlan)
	}
	return hyperflexnamedvlans
}
func flattenListHyperflexNodeRelationship(p []models.HyperflexNodeRelationship, d *schema.ResourceData) []map[string]interface{} {
	var hyperflexnoderelationships []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		item := item.MoMoRef
		hyperflexnoderelationship := flattenMoMoRef(item)
		hyperflexnoderelationships = append(hyperflexnoderelationships, hyperflexnoderelationship)
	}
	return hyperflexnoderelationships
}
func flattenListHyperflexNodeProfileRelationship(p []models.HyperflexNodeProfileRelationship, d *schema.ResourceData) []map[string]interface{} {
	var hyperflexnodeprofilerelationships []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		item := item.MoMoRef
		hyperflexnodeprofilerelationship := flattenMoMoRef(item)
		hyperflexnodeprofilerelationships = append(hyperflexnodeprofilerelationships, hyperflexnodeprofilerelationship)
	}
	return hyperflexnodeprofilerelationships
}
func flattenListHyperflexReSyncClusterMoIds(p []models.HyperflexReSyncClusterMoIds, d *schema.ResourceData) []map[string]interface{} {
	var hyperflexresyncclustermoidss []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		hyperflexresyncclustermoids := make(map[string]interface{})
		hyperflexresyncclustermoids["account_mo_id"] = item.GetAccountMoId()
		hyperflexresyncclustermoids["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
		hyperflexresyncclustermoids["class_id"] = item.GetClassId()
		hyperflexresyncclustermoids["cluster_mo_ids"] = item.GetClusterMoIds()
		hyperflexresyncclustermoids["object_type"] = item.GetObjectType()
		hyperflexresyncclustermoidss = append(hyperflexresyncclustermoidss, hyperflexresyncclustermoids)
	}
	return hyperflexresyncclustermoidss
}
func flattenListHyperflexReplicationClusterReferenceToSchedule(p []models.HyperflexReplicationClusterReferenceToSchedule, d *schema.ResourceData) []map[string]interface{} {
	var hyperflexreplicationclusterreferencetoschedules []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		hyperflexreplicationclusterreferencetoschedule := make(map[string]interface{})
		hyperflexreplicationclusterreferencetoschedule["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
		hyperflexreplicationclusterreferencetoschedule["class_id"] = item.GetClassId()
		hyperflexreplicationclusterreferencetoschedule["object_type"] = item.GetObjectType()
		hyperflexreplicationclusterreferencetoschedule["schedule"] = (func(p models.HyperflexReplicationSchedule, d *schema.ResourceData) []map[string]interface{} {
			var hyperflexreplicationschedules []map[string]interface{}
			var ret models.HyperflexReplicationSchedule
			if reflect.DeepEqual(ret, p) {
				return nil
			}
			item := p
			hyperflexreplicationschedule := make(map[string]interface{})
			hyperflexreplicationschedule["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
			hyperflexreplicationschedule["backup_interval"] = item.GetBackupInterval()
			hyperflexreplicationschedule["class_id"] = item.GetClassId()
			hyperflexreplicationschedule["object_type"] = item.GetObjectType()

			hyperflexreplicationschedules = append(hyperflexreplicationschedules, hyperflexreplicationschedule)
			return hyperflexreplicationschedules
		})(item.GetSchedule(), d)
		hyperflexreplicationclusterreferencetoschedule["target_cluster_entity_reference"] = (func(p models.HyperflexEntityReference, d *schema.ResourceData) []map[string]interface{} {
			var hyperflexentityreferences []map[string]interface{}
			var ret models.HyperflexEntityReference
			if reflect.DeepEqual(ret, p) {
				return nil
			}
			item := p
			hyperflexentityreference := make(map[string]interface{})
			hyperflexentityreference["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
			hyperflexentityreference["class_id"] = item.GetClassId()
			hyperflexentityreference["confignum"] = item.GetConfignum()
			hyperflexentityreference["id"] = item.GetId()
			hyperflexentityreference["idtype"] = item.GetIdtype()
			hyperflexentityreference["name"] = item.GetName()
			hyperflexentityreference["object_type"] = item.GetObjectType()
			hyperflexentityreference["type"] = item.GetType()

			hyperflexentityreferences = append(hyperflexentityreferences, hyperflexentityreference)
			return hyperflexentityreferences
		})(item.GetTargetClusterEntityReference(), d)
		hyperflexreplicationclusterreferencetoschedules = append(hyperflexreplicationclusterreferencetoschedules, hyperflexreplicationclusterreferencetoschedule)
	}
	return hyperflexreplicationclusterreferencetoschedules
}
func flattenListHyperflexServerFirmwareVersionEntryRelationship(p []models.HyperflexServerFirmwareVersionEntryRelationship, d *schema.ResourceData) []map[string]interface{} {
	var hyperflexserverfirmwareversionentryrelationships []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		item := item.MoMoRef
		hyperflexserverfirmwareversionentryrelationship := flattenMoMoRef(item)
		hyperflexserverfirmwareversionentryrelationships = append(hyperflexserverfirmwareversionentryrelationships, hyperflexserverfirmwareversionentryrelationship)
	}
	return hyperflexserverfirmwareversionentryrelationships
}
func flattenListHyperflexServerFirmwareVersionInfo(p []models.HyperflexServerFirmwareVersionInfo, d *schema.ResourceData) []map[string]interface{} {
	var hyperflexserverfirmwareversioninfos []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		hyperflexserverfirmwareversioninfo := make(map[string]interface{})
		hyperflexserverfirmwareversioninfo["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
		hyperflexserverfirmwareversioninfo["class_id"] = item.GetClassId()
		hyperflexserverfirmwareversioninfo["object_type"] = item.GetObjectType()
		hyperflexserverfirmwareversioninfo["server_platform"] = item.GetServerPlatform()
		hyperflexserverfirmwareversioninfo["nr_version"] = item.GetVersion()
		hyperflexserverfirmwareversioninfos = append(hyperflexserverfirmwareversioninfos, hyperflexserverfirmwareversioninfo)
	}
	return hyperflexserverfirmwareversioninfos
}
func flattenListHyperflexServerModelEntry(p []models.HyperflexServerModelEntry, d *schema.ResourceData) []map[string]interface{} {
	var hyperflexservermodelentrys []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		hyperflexservermodelentry := make(map[string]interface{})
		hyperflexservermodelentry["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
		hyperflexservermodelentry["class_id"] = item.GetClassId()
		hyperflexservermodelentry["constraint"] = (func(p models.HyperflexAppSettingConstraint, d *schema.ResourceData) []map[string]interface{} {
			var hyperflexappsettingconstraints []map[string]interface{}
			var ret models.HyperflexAppSettingConstraint
			if reflect.DeepEqual(ret, p) {
				return nil
			}
			item := p
			hyperflexappsettingconstraint := make(map[string]interface{})
			hyperflexappsettingconstraint["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
			hyperflexappsettingconstraint["class_id"] = item.GetClassId()
			hyperflexappsettingconstraint["deployment_type"] = item.GetDeploymentType()
			hyperflexappsettingconstraint["hxdp_version"] = item.GetHxdpVersion()
			hyperflexappsettingconstraint["hypervisor_type"] = item.GetHypervisorType()
			hyperflexappsettingconstraint["mgmt_platform"] = item.GetMgmtPlatform()
			hyperflexappsettingconstraint["object_type"] = item.GetObjectType()
			hyperflexappsettingconstraint["server_model"] = item.GetServerModel()

			hyperflexappsettingconstraints = append(hyperflexappsettingconstraints, hyperflexappsettingconstraint)
			return hyperflexappsettingconstraints
		})(item.GetConstraint(), d)
		hyperflexservermodelentry["name"] = item.GetName()
		hyperflexservermodelentry["object_type"] = item.GetObjectType()
		hyperflexservermodelentry["value"] = item.GetValue()
		hyperflexservermodelentrys = append(hyperflexservermodelentrys, hyperflexservermodelentry)
	}
	return hyperflexservermodelentrys
}
func flattenListHyperflexSoftwareDistributionComponentRelationship(p []models.HyperflexSoftwareDistributionComponentRelationship, d *schema.ResourceData) []map[string]interface{} {
	var hyperflexsoftwaredistributioncomponentrelationships []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		item := item.MoMoRef
		hyperflexsoftwaredistributioncomponentrelationship := flattenMoMoRef(item)
		hyperflexsoftwaredistributioncomponentrelationships = append(hyperflexsoftwaredistributioncomponentrelationships, hyperflexsoftwaredistributioncomponentrelationship)
	}
	return hyperflexsoftwaredistributioncomponentrelationships
}
func flattenListHyperflexSoftwareDistributionEntryRelationship(p []models.HyperflexSoftwareDistributionEntryRelationship, d *schema.ResourceData) []map[string]interface{} {
	var hyperflexsoftwaredistributionentryrelationships []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		item := item.MoMoRef
		hyperflexsoftwaredistributionentryrelationship := flattenMoMoRef(item)
		hyperflexsoftwaredistributionentryrelationships = append(hyperflexsoftwaredistributionentryrelationships, hyperflexsoftwaredistributionentryrelationship)
	}
	return hyperflexsoftwaredistributionentryrelationships
}
func flattenListHyperflexSoftwareDistributionVersionRelationship(p []models.HyperflexSoftwareDistributionVersionRelationship, d *schema.ResourceData) []map[string]interface{} {
	var hyperflexsoftwaredistributionversionrelationships []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		item := item.MoMoRef
		hyperflexsoftwaredistributionversionrelationship := flattenMoMoRef(item)
		hyperflexsoftwaredistributionversionrelationships = append(hyperflexsoftwaredistributionversionrelationships, hyperflexsoftwaredistributionversionrelationship)
	}
	return hyperflexsoftwaredistributionversionrelationships
}
func flattenListHyperflexTargetRelationship(p []models.HyperflexTargetRelationship, d *schema.ResourceData) []map[string]interface{} {
	var hyperflextargetrelationships []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		item := item.MoMoRef
		hyperflextargetrelationship := flattenMoMoRef(item)
		hyperflextargetrelationships = append(hyperflextargetrelationships, hyperflextargetrelationship)
	}
	return hyperflextargetrelationships
}
func flattenListHyperflexVolumeRelationship(p []models.HyperflexVolumeRelationship, d *schema.ResourceData) []map[string]interface{} {
	var hyperflexvolumerelationships []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		item := item.MoMoRef
		hyperflexvolumerelationship := flattenMoMoRef(item)
		hyperflexvolumerelationships = append(hyperflexvolumerelationships, hyperflexvolumerelationship)
	}
	return hyperflexvolumerelationships
}
func flattenListIaasConnectorPackRelationship(p []models.IaasConnectorPackRelationship, d *schema.ResourceData) []map[string]interface{} {
	var iaasconnectorpackrelationships []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		item := item.MoMoRef
		iaasconnectorpackrelationship := flattenMoMoRef(item)
		iaasconnectorpackrelationships = append(iaasconnectorpackrelationships, iaasconnectorpackrelationship)
	}
	return iaasconnectorpackrelationships
}
func flattenListIaasCustomTaskInfoRelationship(p []models.IaasCustomTaskInfoRelationship, d *schema.ResourceData) []map[string]interface{} {
	var iaascustomtaskinforelationships []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		item := item.MoMoRef
		iaascustomtaskinforelationship := flattenMoMoRef(item)
		iaascustomtaskinforelationships = append(iaascustomtaskinforelationships, iaascustomtaskinforelationship)
	}
	return iaascustomtaskinforelationships
}
func flattenListIaasDeviceStatusRelationship(p []models.IaasDeviceStatusRelationship, d *schema.ResourceData) []map[string]interface{} {
	var iaasdevicestatusrelationships []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		item := item.MoMoRef
		iaasdevicestatusrelationship := flattenMoMoRef(item)
		iaasdevicestatusrelationships = append(iaasdevicestatusrelationships, iaasdevicestatusrelationship)
	}
	return iaasdevicestatusrelationships
}
func flattenListIaasLicenseKeysInfo(p []models.IaasLicenseKeysInfo, d *schema.ResourceData) []map[string]interface{} {
	var iaaslicensekeysinfos []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		iaaslicensekeysinfo := make(map[string]interface{})
		iaaslicensekeysinfo["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
		iaaslicensekeysinfo["class_id"] = item.GetClassId()
		iaaslicensekeysinfo["nr_count"] = item.GetCount()
		iaaslicensekeysinfo["expiration_date"] = item.GetExpirationDate()
		iaaslicensekeysinfo["license_id"] = item.GetLicenseId()
		iaaslicensekeysinfo["object_type"] = item.GetObjectType()
		iaaslicensekeysinfo["pid"] = item.GetPid()
		iaaslicensekeysinfos = append(iaaslicensekeysinfos, iaaslicensekeysinfo)
	}
	return iaaslicensekeysinfos
}
func flattenListIaasLicenseUtilizationInfo(p []models.IaasLicenseUtilizationInfo, d *schema.ResourceData) []map[string]interface{} {
	var iaaslicenseutilizationinfos []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		iaaslicenseutilizationinfo := make(map[string]interface{})
		iaaslicenseutilizationinfo["actual_used"] = item.GetActualUsed()
		iaaslicenseutilizationinfo["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
		iaaslicenseutilizationinfo["class_id"] = item.GetClassId()
		iaaslicenseutilizationinfo["label"] = item.GetLabel()
		iaaslicenseutilizationinfo["licensed_limit"] = item.GetLicensedLimit()
		iaaslicenseutilizationinfo["object_type"] = item.GetObjectType()
		iaaslicenseutilizationinfo["sku"] = item.GetSku()
		iaaslicenseutilizationinfos = append(iaaslicenseutilizationinfos, iaaslicenseutilizationinfo)
	}
	return iaaslicenseutilizationinfos
}
func flattenListIaasMostRunTasksRelationship(p []models.IaasMostRunTasksRelationship, d *schema.ResourceData) []map[string]interface{} {
	var iaasmostruntasksrelationships []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		item := item.MoMoRef
		iaasmostruntasksrelationship := flattenMoMoRef(item)
		iaasmostruntasksrelationships = append(iaasmostruntasksrelationships, iaasmostruntasksrelationship)
	}
	return iaasmostruntasksrelationships
}
func flattenListIaasSystemTaskInfoRelationship(p []models.IaasSystemTaskInfoRelationship, d *schema.ResourceData) []map[string]interface{} {
	var iaassystemtaskinforelationships []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		item := item.MoMoRef
		iaassystemtaskinforelationship := flattenMoMoRef(item)
		iaassystemtaskinforelationships = append(iaassystemtaskinforelationships, iaassystemtaskinforelationship)
	}
	return iaassystemtaskinforelationships
}
func flattenListIaasWorkflowSteps(p []models.IaasWorkflowSteps, d *schema.ResourceData) []map[string]interface{} {
	var iaasworkflowstepss []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		iaasworkflowsteps := make(map[string]interface{})
		iaasworkflowsteps["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
		iaasworkflowsteps["class_id"] = item.GetClassId()
		iaasworkflowsteps["completed_time"] = item.GetCompletedTime()
		iaasworkflowsteps["name"] = item.GetName()
		iaasworkflowsteps["object_type"] = item.GetObjectType()
		iaasworkflowsteps["status"] = item.GetStatus()
		iaasworkflowsteps["status_message"] = item.GetStatusMessage()
		iaasworkflowstepss = append(iaasworkflowstepss, iaasworkflowsteps)
	}
	return iaasworkflowstepss
}
func flattenListIamAccountPermissions(p []models.IamAccountPermissions, d *schema.ResourceData) []map[string]interface{} {
	var iamaccountpermissionss []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		iamaccountpermissions := make(map[string]interface{})
		iamaccountpermissions["account_identifier"] = item.GetAccountIdentifier()
		iamaccountpermissions["account_name"] = item.GetAccountName()
		iamaccountpermissions["account_permission_tags"] = (func(p []models.IamAccountTags, d *schema.ResourceData) []map[string]interface{} {
			var iamaccounttagss []map[string]interface{}
			if len(p) == 0 {
				return nil
			}
			for _, item := range p {
				iamaccounttags := make(map[string]interface{})
				iamaccounttags["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
				iamaccounttags["class_id"] = item.GetClassId()
				iamaccounttags["key"] = item.GetKey()
				iamaccounttags["object_type"] = item.GetObjectType()
				iamaccounttags["value"] = item.GetValue()
				iamaccounttagss = append(iamaccounttagss, iamaccounttags)
			}
			return iamaccounttagss
		})(item.GetAccountPermissionTags(), d)
		iamaccountpermissions["account_status"] = item.GetAccountStatus()
		iamaccountpermissions["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
		iamaccountpermissions["class_id"] = item.GetClassId()
		iamaccountpermissions["home_region"] = item.GetHomeRegion()
		iamaccountpermissions["object_type"] = item.GetObjectType()
		iamaccountpermissions["permissions"] = (func(p []models.IamPermissionReference, d *schema.ResourceData) []map[string]interface{} {
			var iampermissionreferences []map[string]interface{}
			if len(p) == 0 {
				return nil
			}
			for _, item := range p {
				iampermissionreference := make(map[string]interface{})
				iampermissionreference["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
				iampermissionreference["class_id"] = item.GetClassId()
				iampermissionreference["object_type"] = item.GetObjectType()
				iampermissionreference["permission_identifier"] = item.GetPermissionIdentifier()
				iampermissionreference["permission_name"] = item.GetPermissionName()
				iampermissionreferences = append(iampermissionreferences, iampermissionreference)
			}
			return iampermissionreferences
		})(item.GetPermissions(), d)
		iamaccountpermissionss = append(iamaccountpermissionss, iamaccountpermissions)
	}
	return iamaccountpermissionss
}
func flattenListIamApiKeyRelationship(p []models.IamApiKeyRelationship, d *schema.ResourceData) []map[string]interface{} {
	var iamapikeyrelationships []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		item := item.MoMoRef
		iamapikeyrelationship := flattenMoMoRef(item)
		iamapikeyrelationships = append(iamapikeyrelationships, iamapikeyrelationship)
	}
	return iamapikeyrelationships
}
func flattenListIamAppRegistrationRelationship(p []models.IamAppRegistrationRelationship, d *schema.ResourceData) []map[string]interface{} {
	var iamappregistrationrelationships []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		item := item.MoMoRef
		iamappregistrationrelationship := flattenMoMoRef(item)
		iamappregistrationrelationships = append(iamappregistrationrelationships, iamappregistrationrelationship)
	}
	return iamappregistrationrelationships
}
func flattenListIamDomainGroupRelationship(p []models.IamDomainGroupRelationship, d *schema.ResourceData) []map[string]interface{} {
	var iamdomaingrouprelationships []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		item := item.MoMoRef
		iamdomaingrouprelationship := flattenMoMoRef(item)
		iamdomaingrouprelationships = append(iamdomaingrouprelationships, iamdomaingrouprelationship)
	}
	return iamdomaingrouprelationships
}
func flattenListIamEndPointPrivilegeRelationship(p []models.IamEndPointPrivilegeRelationship, d *schema.ResourceData) []map[string]interface{} {
	var iamendpointprivilegerelationships []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		item := item.MoMoRef
		iamendpointprivilegerelationship := flattenMoMoRef(item)
		iamendpointprivilegerelationships = append(iamendpointprivilegerelationships, iamendpointprivilegerelationship)
	}
	return iamendpointprivilegerelationships
}
func flattenListIamEndPointRoleRelationship(p []models.IamEndPointRoleRelationship, d *schema.ResourceData) []map[string]interface{} {
	var iamendpointrolerelationships []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		item := item.MoMoRef
		iamendpointrolerelationship := flattenMoMoRef(item)
		iamendpointrolerelationships = append(iamendpointrolerelationships, iamendpointrolerelationship)
	}
	return iamendpointrolerelationships
}
func flattenListIamEndPointUserRoleRelationship(p []models.IamEndPointUserRoleRelationship, d *schema.ResourceData) []map[string]interface{} {
	var iamendpointuserrolerelationships []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		item := item.MoMoRef
		iamendpointuserrolerelationship := flattenMoMoRef(item)
		iamendpointuserrolerelationships = append(iamendpointuserrolerelationships, iamendpointuserrolerelationship)
	}
	return iamendpointuserrolerelationships
}
func flattenListIamEndPointUserRoleInventoryRelationship(p []models.IamEndPointUserRoleInventoryRelationship, d *schema.ResourceData) []map[string]interface{} {
	var iamendpointuserroleinventoryrelationships []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		item := item.MoMoRef
		iamendpointuserroleinventoryrelationship := flattenMoMoRef(item)
		iamendpointuserroleinventoryrelationships = append(iamendpointuserroleinventoryrelationships, iamendpointuserroleinventoryrelationship)
	}
	return iamendpointuserroleinventoryrelationships
}
func flattenListIamFeatureDefinition(p []models.IamFeatureDefinition, d *schema.ResourceData) []map[string]interface{} {
	var iamfeaturedefinitions []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		iamfeaturedefinition := make(map[string]interface{})
		iamfeaturedefinition["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
		iamfeaturedefinition["class_id"] = item.GetClassId()
		iamfeaturedefinition["feature"] = item.GetFeature()
		iamfeaturedefinition["object_type"] = item.GetObjectType()
		iamfeaturedefinitions = append(iamfeaturedefinitions, iamfeaturedefinition)
	}
	return iamfeaturedefinitions
}
func flattenListIamGroupPermissionToRoles(p []models.IamGroupPermissionToRoles, d *schema.ResourceData) []map[string]interface{} {
	var iamgrouppermissiontoroless []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		iamgrouppermissiontoroles := make(map[string]interface{})
		iamgrouppermissiontoroles["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
		iamgrouppermissiontoroles["class_id"] = item.GetClassId()
		iamgrouppermissiontoroles["group"] = (func(p models.MoMoRef, d *schema.ResourceData) []map[string]interface{} {
			var momorefs []map[string]interface{}
			var ret models.MoMoRef
			if reflect.DeepEqual(ret, p) {
				return nil
			}
			item := p
			momoref := make(map[string]interface{})
			momoref["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
			momoref["class_id"] = item.GetClassId()
			momoref["moid"] = item.GetMoid()
			momoref["object_type"] = item.GetObjectType()
			momoref["selector"] = item.GetSelector()

			momorefs = append(momorefs, momoref)
			return momorefs
		})(item.GetGroup(), d)
		iamgrouppermissiontoroles["object_type"] = item.GetObjectType()
		iamgrouppermissiontoroles["orgs"] = (func(p []models.MoMoRef, d *schema.ResourceData) []map[string]interface{} {
			var momorefs []map[string]interface{}
			if len(p) == 0 {
				return nil
			}
			for _, item := range p {
				momoref := make(map[string]interface{})
				momoref["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
				momoref["class_id"] = item.GetClassId()
				momoref["moid"] = item.GetMoid()
				momoref["object_type"] = item.GetObjectType()
				momoref["selector"] = item.GetSelector()
				momorefs = append(momorefs, momoref)
			}
			return momorefs
		})(item.GetOrgs(), d)
		iamgrouppermissiontoroless = append(iamgrouppermissiontoroless, iamgrouppermissiontoroles)
	}
	return iamgrouppermissiontoroless
}
func flattenListIamIdpRelationship(p []models.IamIdpRelationship, d *schema.ResourceData) []map[string]interface{} {
	var iamidprelationships []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		item := item.MoMoRef
		iamidprelationship := flattenMoMoRef(item)
		iamidprelationships = append(iamidprelationships, iamidprelationship)
	}
	return iamidprelationships
}
func flattenListIamIdpReferenceRelationship(p []models.IamIdpReferenceRelationship, d *schema.ResourceData) []map[string]interface{} {
	var iamidpreferencerelationships []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		item := item.MoMoRef
		iamidpreferencerelationship := flattenMoMoRef(item)
		iamidpreferencerelationships = append(iamidpreferencerelationships, iamidpreferencerelationship)
	}
	return iamidpreferencerelationships
}
func flattenListIamIpAddressRelationship(p []models.IamIpAddressRelationship, d *schema.ResourceData) []map[string]interface{} {
	var iamipaddressrelationships []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		item := item.MoMoRef
		iamipaddressrelationship := flattenMoMoRef(item)
		iamipaddressrelationships = append(iamipaddressrelationships, iamipaddressrelationship)
	}
	return iamipaddressrelationships
}
func flattenListIamLdapGroupRelationship(p []models.IamLdapGroupRelationship, d *schema.ResourceData) []map[string]interface{} {
	var iamldapgrouprelationships []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		item := item.MoMoRef
		iamldapgrouprelationship := flattenMoMoRef(item)
		iamldapgrouprelationships = append(iamldapgrouprelationships, iamldapgrouprelationship)
	}
	return iamldapgrouprelationships
}
func flattenListIamLdapProviderRelationship(p []models.IamLdapProviderRelationship, d *schema.ResourceData) []map[string]interface{} {
	var iamldapproviderrelationships []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		item := item.MoMoRef
		iamldapproviderrelationship := flattenMoMoRef(item)
		iamldapproviderrelationships = append(iamldapproviderrelationships, iamldapproviderrelationship)
	}
	return iamldapproviderrelationships
}
func flattenListIamOAuthTokenRelationship(p []models.IamOAuthTokenRelationship, d *schema.ResourceData) []map[string]interface{} {
	var iamoauthtokenrelationships []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		item := item.MoMoRef
		iamoauthtokenrelationship := flattenMoMoRef(item)
		iamoauthtokenrelationships = append(iamoauthtokenrelationships, iamoauthtokenrelationship)
	}
	return iamoauthtokenrelationships
}
func flattenListIamPermissionRelationship(p []models.IamPermissionRelationship, d *schema.ResourceData) []map[string]interface{} {
	var iampermissionrelationships []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		item := item.MoMoRef
		iampermissionrelationship := flattenMoMoRef(item)
		iampermissionrelationships = append(iampermissionrelationships, iampermissionrelationship)
	}
	return iampermissionrelationships
}
func flattenListIamPermissionToRoles(p []models.IamPermissionToRoles, d *schema.ResourceData) []map[string]interface{} {
	var iampermissiontoroless []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		iampermissiontoroles := make(map[string]interface{})
		iampermissiontoroles["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
		iampermissiontoroles["class_id"] = item.GetClassId()
		iampermissiontoroles["object_type"] = item.GetObjectType()
		iampermissiontoroles["permission"] = (func(p models.MoMoRef, d *schema.ResourceData) []map[string]interface{} {
			var momorefs []map[string]interface{}
			var ret models.MoMoRef
			if reflect.DeepEqual(ret, p) {
				return nil
			}
			item := p
			momoref := make(map[string]interface{})
			momoref["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
			momoref["class_id"] = item.GetClassId()
			momoref["moid"] = item.GetMoid()
			momoref["object_type"] = item.GetObjectType()
			momoref["selector"] = item.GetSelector()

			momorefs = append(momorefs, momoref)
			return momorefs
		})(item.GetPermission(), d)
		iampermissiontoroles["roles"] = (func(p []models.MoMoRef, d *schema.ResourceData) []map[string]interface{} {
			var momorefs []map[string]interface{}
			if len(p) == 0 {
				return nil
			}
			for _, item := range p {
				momoref := make(map[string]interface{})
				momoref["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
				momoref["class_id"] = item.GetClassId()
				momoref["moid"] = item.GetMoid()
				momoref["object_type"] = item.GetObjectType()
				momoref["selector"] = item.GetSelector()
				momorefs = append(momorefs, momoref)
			}
			return momorefs
		})(item.GetRoles(), d)
		iampermissiontoroless = append(iampermissiontoroless, iampermissiontoroles)
	}
	return iampermissiontoroless
}
func flattenListIamPrivilegeRelationship(p []models.IamPrivilegeRelationship, d *schema.ResourceData) []map[string]interface{} {
	var iamprivilegerelationships []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		item := item.MoMoRef
		iamprivilegerelationship := flattenMoMoRef(item)
		iamprivilegerelationships = append(iamprivilegerelationships, iamprivilegerelationship)
	}
	return iamprivilegerelationships
}
func flattenListIamPrivilegeSetRelationship(p []models.IamPrivilegeSetRelationship, d *schema.ResourceData) []map[string]interface{} {
	var iamprivilegesetrelationships []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		item := item.MoMoRef
		iamprivilegesetrelationship := flattenMoMoRef(item)
		iamprivilegesetrelationships = append(iamprivilegesetrelationships, iamprivilegesetrelationship)
	}
	return iamprivilegesetrelationships
}
func flattenListIamResourcePermissionRelationship(p []models.IamResourcePermissionRelationship, d *schema.ResourceData) []map[string]interface{} {
	var iamresourcepermissionrelationships []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		item := item.MoMoRef
		iamresourcepermissionrelationship := flattenMoMoRef(item)
		iamresourcepermissionrelationships = append(iamresourcepermissionrelationships, iamresourcepermissionrelationship)
	}
	return iamresourcepermissionrelationships
}
func flattenListIamResourceRolesRelationship(p []models.IamResourceRolesRelationship, d *schema.ResourceData) []map[string]interface{} {
	var iamresourcerolesrelationships []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		item := item.MoMoRef
		iamresourcerolesrelationship := flattenMoMoRef(item)
		iamresourcerolesrelationships = append(iamresourcerolesrelationships, iamresourcerolesrelationship)
	}
	return iamresourcerolesrelationships
}
func flattenListIamRoleRelationship(p []models.IamRoleRelationship, d *schema.ResourceData) []map[string]interface{} {
	var iamrolerelationships []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		item := item.MoMoRef
		iamrolerelationship := flattenMoMoRef(item)
		iamrolerelationships = append(iamrolerelationships, iamrolerelationship)
	}
	return iamrolerelationships
}
func flattenListIamSessionRelationship(p []models.IamSessionRelationship, d *schema.ResourceData) []map[string]interface{} {
	var iamsessionrelationships []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		item := item.MoMoRef
		iamsessionrelationship := flattenMoMoRef(item)
		iamsessionrelationships = append(iamsessionrelationships, iamsessionrelationship)
	}
	return iamsessionrelationships
}
func flattenListIamUserRelationship(p []models.IamUserRelationship, d *schema.ResourceData) []map[string]interface{} {
	var iamuserrelationships []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		item := item.MoMoRef
		iamuserrelationship := flattenMoMoRef(item)
		iamuserrelationships = append(iamuserrelationships, iamuserrelationship)
	}
	return iamuserrelationships
}
func flattenListIamUserGroupRelationship(p []models.IamUserGroupRelationship, d *schema.ResourceData) []map[string]interface{} {
	var iamusergrouprelationships []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		item := item.MoMoRef
		iamusergrouprelationship := flattenMoMoRef(item)
		iamusergrouprelationships = append(iamusergrouprelationships, iamusergrouprelationship)
	}
	return iamusergrouprelationships
}
func flattenListIamUserPreferenceRelationship(p []models.IamUserPreferenceRelationship, d *schema.ResourceData) []map[string]interface{} {
	var iamuserpreferencerelationships []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		item := item.MoMoRef
		iamuserpreferencerelationship := flattenMoMoRef(item)
		iamuserpreferencerelationships = append(iamuserpreferencerelationships, iamuserpreferencerelationship)
	}
	return iamuserpreferencerelationships
}
func flattenListIamUserSettingRelationship(p []models.IamUserSettingRelationship, d *schema.ResourceData) []map[string]interface{} {
	var iamusersettingrelationships []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		item := item.MoMoRef
		iamusersettingrelationship := flattenMoMoRef(item)
		iamusersettingrelationships = append(iamusersettingrelationships, iamusersettingrelationship)
	}
	return iamusersettingrelationships
}
func flattenListInfraBaseClusterRelationship(p []models.InfraBaseClusterRelationship, d *schema.ResourceData) []map[string]interface{} {
	var infrabaseclusterrelationships []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		item := item.MoMoRef
		infrabaseclusterrelationship := flattenMoMoRef(item)
		infrabaseclusterrelationships = append(infrabaseclusterrelationships, infrabaseclusterrelationship)
	}
	return infrabaseclusterrelationships
}
func flattenListInfraBaseGpuConfiguration(p []models.InfraBaseGpuConfiguration, d *schema.ResourceData) []map[string]interface{} {
	var infrabasegpuconfigurations []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		infrabasegpuconfiguration := make(map[string]interface{})
		infrabasegpuconfiguration["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
		infrabasegpuconfiguration["class_id"] = item.GetClassId()
		infrabasegpuconfiguration["device_id"] = item.GetDeviceId()
		infrabasegpuconfiguration["memory_size"] = item.GetMemorySize()
		infrabasegpuconfiguration["object_type"] = item.GetObjectType()
		infrabasegpuconfiguration["vendor_id"] = item.GetVendorId()
		infrabasegpuconfigurations = append(infrabasegpuconfigurations, infrabasegpuconfiguration)
	}
	return infrabasegpuconfigurations
}
func flattenListInfraMetaData(p []models.InfraMetaData, d *schema.ResourceData) []map[string]interface{} {
	var inframetadatas []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		inframetadata := make(map[string]interface{})
		inframetadata["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
		inframetadata["class_id"] = item.GetClassId()
		inframetadata["name"] = item.GetName()
		inframetadata["object_type"] = item.GetObjectType()
		inframetadata["value"] = item.GetValue()
		inframetadatas = append(inframetadatas, inframetadata)
	}
	return inframetadatas
}
func flattenListInventoryGenericInventoryRelationship(p []models.InventoryGenericInventoryRelationship, d *schema.ResourceData) []map[string]interface{} {
	var inventorygenericinventoryrelationships []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		item := item.MoMoRef
		inventorygenericinventoryrelationship := flattenMoMoRef(item)
		inventorygenericinventoryrelationships = append(inventorygenericinventoryrelationships, inventorygenericinventoryrelationship)
	}
	return inventorygenericinventoryrelationships
}
func flattenListInventoryGenericInventoryHolderRelationship(p []models.InventoryGenericInventoryHolderRelationship, d *schema.ResourceData) []map[string]interface{} {
	var inventorygenericinventoryholderrelationships []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		item := item.MoMoRef
		inventorygenericinventoryholderrelationship := flattenMoMoRef(item)
		inventorygenericinventoryholderrelationships = append(inventorygenericinventoryholderrelationships, inventorygenericinventoryholderrelationship)
	}
	return inventorygenericinventoryholderrelationships
}
func flattenListInventoryJobInfo(p []models.InventoryJobInfo, d *schema.ResourceData) []map[string]interface{} {
	var inventoryjobinfos []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		inventoryjobinfo := make(map[string]interface{})
		inventoryjobinfo["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
		inventoryjobinfo["class_id"] = item.GetClassId()
		inventoryjobinfo["execution_status"] = item.GetExecutionStatus()
		inventoryjobinfo["job_name"] = item.GetJobName()
		inventoryjobinfo["last_processed_time"] = item.GetLastProcessedTime().String()
		inventoryjobinfo["last_scheduled_time"] = item.GetLastScheduledTime().String()
		inventoryjobinfo["object_type"] = item.GetObjectType()
		inventoryjobinfo["properties"] = item.GetProperties()
		inventoryjobinfo["regex"] = item.GetRegex()
		inventoryjobinfos = append(inventoryjobinfos, inventoryjobinfo)
	}
	return inventoryjobinfos
}
func flattenListIppoolBlockLeaseRelationship(p []models.IppoolBlockLeaseRelationship, d *schema.ResourceData) []map[string]interface{} {
	var ippoolblockleaserelationships []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		item := item.MoMoRef
		ippoolblockleaserelationship := flattenMoMoRef(item)
		ippoolblockleaserelationships = append(ippoolblockleaserelationships, ippoolblockleaserelationship)
	}
	return ippoolblockleaserelationships
}
func flattenListIppoolIpLeaseRelationship(p []models.IppoolIpLeaseRelationship, d *schema.ResourceData) []map[string]interface{} {
	var ippoolipleaserelationships []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		item := item.MoMoRef
		ippoolipleaserelationship := flattenMoMoRef(item)
		ippoolipleaserelationships = append(ippoolipleaserelationships, ippoolipleaserelationship)
	}
	return ippoolipleaserelationships
}
func flattenListIppoolIpV4Block(p []models.IppoolIpV4Block, d *schema.ResourceData) []map[string]interface{} {
	var ippoolipv4blocks []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		ippoolipv4block := make(map[string]interface{})
		ippoolipv4block["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
		ippoolipv4block["class_id"] = item.GetClassId()
		ippoolipv4block["from"] = item.GetFrom()
		ippoolipv4block["ip_v4_config"] = (func(p models.IppoolIpV4Config, d *schema.ResourceData) []map[string]interface{} {
			var ippoolipv4configs []map[string]interface{}
			var ret models.IppoolIpV4Config
			if reflect.DeepEqual(ret, p) {
				return nil
			}
			item := p
			ippoolipv4config := make(map[string]interface{})
			ippoolipv4config["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
			ippoolipv4config["class_id"] = item.GetClassId()
			ippoolipv4config["gateway"] = item.GetGateway()
			ippoolipv4config["netmask"] = item.GetNetmask()
			ippoolipv4config["object_type"] = item.GetObjectType()
			ippoolipv4config["primary_dns"] = item.GetPrimaryDns()
			ippoolipv4config["secondary_dns"] = item.GetSecondaryDns()

			ippoolipv4configs = append(ippoolipv4configs, ippoolipv4config)
			return ippoolipv4configs
		})(item.GetIpV4Config(), d)
		ippoolipv4block["object_type"] = item.GetObjectType()
		ippoolipv4block["size"] = item.GetSize()
		ippoolipv4block["to"] = item.GetTo()
		ippoolipv4blocks = append(ippoolipv4blocks, ippoolipv4block)
	}
	return ippoolipv4blocks
}
func flattenListIppoolIpV6Block(p []models.IppoolIpV6Block, d *schema.ResourceData) []map[string]interface{} {
	var ippoolipv6blocks []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		ippoolipv6block := make(map[string]interface{})
		ippoolipv6block["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
		ippoolipv6block["class_id"] = item.GetClassId()
		ippoolipv6block["from"] = item.GetFrom()
		ippoolipv6block["ip_v6_config"] = (func(p models.IppoolIpV6Config, d *schema.ResourceData) []map[string]interface{} {
			var ippoolipv6configs []map[string]interface{}
			var ret models.IppoolIpV6Config
			if reflect.DeepEqual(ret, p) {
				return nil
			}
			item := p
			ippoolipv6config := make(map[string]interface{})
			ippoolipv6config["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
			ippoolipv6config["class_id"] = item.GetClassId()
			ippoolipv6config["gateway"] = item.GetGateway()
			ippoolipv6config["object_type"] = item.GetObjectType()
			ippoolipv6config["prefix"] = item.GetPrefix()
			ippoolipv6config["primary_dns"] = item.GetPrimaryDns()
			ippoolipv6config["secondary_dns"] = item.GetSecondaryDns()

			ippoolipv6configs = append(ippoolipv6configs, ippoolipv6config)
			return ippoolipv6configs
		})(item.GetIpV6Config(), d)
		ippoolipv6block["object_type"] = item.GetObjectType()
		ippoolipv6block["size"] = item.GetSize()
		ippoolipv6block["to"] = item.GetTo()
		ippoolipv6blocks = append(ippoolipv6blocks, ippoolipv6block)
	}
	return ippoolipv6blocks
}
func flattenListIppoolPoolRelationship(p []models.IppoolPoolRelationship, d *schema.ResourceData) []map[string]interface{} {
	var ippoolpoolrelationships []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		item := item.MoMoRef
		ippoolpoolrelationship := flattenMoMoRef(item)
		ippoolpoolrelationships = append(ippoolpoolrelationships, ippoolpoolrelationship)
	}
	return ippoolpoolrelationships
}
func flattenListIppoolReservationRelationship(p []models.IppoolReservationRelationship, d *schema.ResourceData) []map[string]interface{} {
	var ippoolreservationrelationships []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		item := item.MoMoRef
		ippoolreservationrelationship := flattenMoMoRef(item)
		ippoolreservationrelationships = append(ippoolreservationrelationships, ippoolreservationrelationship)
	}
	return ippoolreservationrelationships
}
func flattenListIppoolShadowBlockRelationship(p []models.IppoolShadowBlockRelationship, d *schema.ResourceData) []map[string]interface{} {
	var ippoolshadowblockrelationships []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		item := item.MoMoRef
		ippoolshadowblockrelationship := flattenMoMoRef(item)
		ippoolshadowblockrelationships = append(ippoolshadowblockrelationships, ippoolshadowblockrelationship)
	}
	return ippoolshadowblockrelationships
}
func flattenListIppoolShadowPoolRelationship(p []models.IppoolShadowPoolRelationship, d *schema.ResourceData) []map[string]interface{} {
	var ippoolshadowpoolrelationships []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		item := item.MoMoRef
		ippoolshadowpoolrelationship := flattenMoMoRef(item)
		ippoolshadowpoolrelationships = append(ippoolshadowpoolrelationships, ippoolshadowpoolrelationship)
	}
	return ippoolshadowpoolrelationships
}
func flattenListIqnpoolBlockRelationship(p []models.IqnpoolBlockRelationship, d *schema.ResourceData) []map[string]interface{} {
	var iqnpoolblockrelationships []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		item := item.MoMoRef
		iqnpoolblockrelationship := flattenMoMoRef(item)
		iqnpoolblockrelationships = append(iqnpoolblockrelationships, iqnpoolblockrelationship)
	}
	return iqnpoolblockrelationships
}
func flattenListIqnpoolIqnSuffixBlock(p []models.IqnpoolIqnSuffixBlock, d *schema.ResourceData) []map[string]interface{} {
	var iqnpooliqnsuffixblocks []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		iqnpooliqnsuffixblock := make(map[string]interface{})
		iqnpooliqnsuffixblock["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
		iqnpooliqnsuffixblock["class_id"] = item.GetClassId()
		iqnpooliqnsuffixblock["from"] = item.GetFrom()
		iqnpooliqnsuffixblock["object_type"] = item.GetObjectType()
		iqnpooliqnsuffixblock["size"] = item.GetSize()
		iqnpooliqnsuffixblock["suffix"] = item.GetSuffix()
		iqnpooliqnsuffixblock["to"] = item.GetTo()
		iqnpooliqnsuffixblocks = append(iqnpooliqnsuffixblocks, iqnpooliqnsuffixblock)
	}
	return iqnpooliqnsuffixblocks
}
func flattenListIqnpoolReservationRelationship(p []models.IqnpoolReservationRelationship, d *schema.ResourceData) []map[string]interface{} {
	var iqnpoolreservationrelationships []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		item := item.MoMoRef
		iqnpoolreservationrelationship := flattenMoMoRef(item)
		iqnpoolreservationrelationships = append(iqnpoolreservationrelationships, iqnpoolreservationrelationship)
	}
	return iqnpoolreservationrelationships
}
func flattenListKubernetesAciCniProfileRelationship(p []models.KubernetesAciCniProfileRelationship, d *schema.ResourceData) []map[string]interface{} {
	var kubernetesacicniprofilerelationships []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		item := item.MoMoRef
		kubernetesacicniprofilerelationship := flattenMoMoRef(item)
		kubernetesacicniprofilerelationships = append(kubernetesacicniprofilerelationships, kubernetesacicniprofilerelationship)
	}
	return kubernetesacicniprofilerelationships
}
func flattenListKubernetesAciCniTenantClusterAllocationRelationship(p []models.KubernetesAciCniTenantClusterAllocationRelationship, d *schema.ResourceData) []map[string]interface{} {
	var kubernetesacicnitenantclusterallocationrelationships []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		item := item.MoMoRef
		kubernetesacicnitenantclusterallocationrelationship := flattenMoMoRef(item)
		kubernetesacicnitenantclusterallocationrelationships = append(kubernetesacicnitenantclusterallocationrelationships, kubernetesacicnitenantclusterallocationrelationship)
	}
	return kubernetesacicnitenantclusterallocationrelationships
}
func flattenListKubernetesAddon(p []models.KubernetesAddon, d *schema.ResourceData) []map[string]interface{} {
	var kubernetesaddons []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		kubernetesaddon := make(map[string]interface{})
		kubernetesaddon["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
		kubernetesaddon["addon_configuration"] = (func(p models.KubernetesAddonConfiguration, d *schema.ResourceData) []map[string]interface{} {
			var kubernetesaddonconfigurations []map[string]interface{}
			var ret models.KubernetesAddonConfiguration
			if reflect.DeepEqual(ret, p) {
				return nil
			}
			item := p
			kubernetesaddonconfiguration := make(map[string]interface{})
			kubernetesaddonconfiguration["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
			kubernetesaddonconfiguration["class_id"] = item.GetClassId()
			kubernetesaddonconfiguration["install_strategy"] = item.GetInstallStrategy()
			kubernetesaddonconfiguration["object_type"] = item.GetObjectType()
			kubernetesaddonconfiguration["override_sets"] = (func(p []models.KubernetesKeyValue, d *schema.ResourceData) []map[string]interface{} {
				var kuberneteskeyvalues []map[string]interface{}
				if len(p) == 0 {
					return nil
				}
				for _, item := range p {
					kuberneteskeyvalue := make(map[string]interface{})
					kuberneteskeyvalue["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
					kuberneteskeyvalue["class_id"] = item.GetClassId()
					kuberneteskeyvalue["key"] = item.GetKey()
					kuberneteskeyvalue["object_type"] = item.GetObjectType()
					kuberneteskeyvalue["value"] = item.GetValue()
					kuberneteskeyvalues = append(kuberneteskeyvalues, kuberneteskeyvalue)
				}
				return kuberneteskeyvalues
			})(item.GetOverrideSets(), d)
			kubernetesaddonconfiguration["overrides"] = item.GetOverrides()
			kubernetesaddonconfiguration["release_name"] = item.GetReleaseName()
			kubernetesaddonconfiguration["release_namespace"] = item.GetReleaseNamespace()
			kubernetesaddonconfiguration["upgrade_strategy"] = item.GetUpgradeStrategy()

			kubernetesaddonconfigurations = append(kubernetesaddonconfigurations, kubernetesaddonconfiguration)
			return kubernetesaddonconfigurations
		})(item.GetAddonConfiguration(), d)
		kubernetesaddon["addon_policy"] = (func(p models.MoMoRef, d *schema.ResourceData) []map[string]interface{} {
			var momorefs []map[string]interface{}
			var ret models.MoMoRef
			if reflect.DeepEqual(ret, p) {
				return nil
			}
			item := p
			momoref := make(map[string]interface{})
			momoref["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
			momoref["class_id"] = item.GetClassId()
			momoref["moid"] = item.GetMoid()
			momoref["object_type"] = item.GetObjectType()
			momoref["selector"] = item.GetSelector()

			momorefs = append(momorefs, momoref)
			return momorefs
		})(item.GetAddonPolicy(), d)
		kubernetesaddon["class_id"] = item.GetClassId()
		kubernetesaddon["name"] = item.GetName()
		kubernetesaddon["object_type"] = item.GetObjectType()
		kubernetesaddons = append(kubernetesaddons, kubernetesaddon)
	}
	return kubernetesaddons
}
func flattenListKubernetesAddonVersionReference(p []models.KubernetesAddonVersionReference, d *schema.ResourceData) []map[string]interface{} {
	var kubernetesaddonversionreferences []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		kubernetesaddonversionreference := make(map[string]interface{})
		kubernetesaddonversionreference["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
		kubernetesaddonversionreference["class_id"] = item.GetClassId()
		kubernetesaddonversionreference["name"] = item.GetName()
		kubernetesaddonversionreference["object_type"] = item.GetObjectType()
		kubernetesaddonversionreference["nr_version"] = item.GetVersion()
		kubernetesaddonversionreferences = append(kubernetesaddonversionreferences, kubernetesaddonversionreference)
	}
	return kubernetesaddonversionreferences
}
func flattenListKubernetesClusterProfileRelationship(p []models.KubernetesClusterProfileRelationship, d *schema.ResourceData) []map[string]interface{} {
	var kubernetesclusterprofilerelationships []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		item := item.MoMoRef
		kubernetesclusterprofilerelationship := flattenMoMoRef(item)
		kubernetesclusterprofilerelationships = append(kubernetesclusterprofilerelationships, kubernetesclusterprofilerelationship)
	}
	return kubernetesclusterprofilerelationships
}
func flattenListKubernetesConfigResultEntryRelationship(p []models.KubernetesConfigResultEntryRelationship, d *schema.ResourceData) []map[string]interface{} {
	var kubernetesconfigresultentryrelationships []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		item := item.MoMoRef
		kubernetesconfigresultentryrelationship := flattenMoMoRef(item)
		kubernetesconfigresultentryrelationships = append(kubernetesconfigresultentryrelationships, kubernetesconfigresultentryrelationship)
	}
	return kubernetesconfigresultentryrelationships
}
func flattenListKubernetesEssentialAddon(p []models.KubernetesEssentialAddon, d *schema.ResourceData) []map[string]interface{} {
	var kubernetesessentialaddons []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		kubernetesessentialaddon := make(map[string]interface{})
		kubernetesessentialaddon["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
		kubernetesessentialaddon["addon_configuration"] = (func(p models.KubernetesAddonConfiguration, d *schema.ResourceData) []map[string]interface{} {
			var kubernetesaddonconfigurations []map[string]interface{}
			var ret models.KubernetesAddonConfiguration
			if reflect.DeepEqual(ret, p) {
				return nil
			}
			item := p
			kubernetesaddonconfiguration := make(map[string]interface{})
			kubernetesaddonconfiguration["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
			kubernetesaddonconfiguration["class_id"] = item.GetClassId()
			kubernetesaddonconfiguration["install_strategy"] = item.GetInstallStrategy()
			kubernetesaddonconfiguration["object_type"] = item.GetObjectType()
			kubernetesaddonconfiguration["override_sets"] = (func(p []models.KubernetesKeyValue, d *schema.ResourceData) []map[string]interface{} {
				var kuberneteskeyvalues []map[string]interface{}
				if len(p) == 0 {
					return nil
				}
				for _, item := range p {
					kuberneteskeyvalue := make(map[string]interface{})
					kuberneteskeyvalue["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
					kuberneteskeyvalue["class_id"] = item.GetClassId()
					kuberneteskeyvalue["key"] = item.GetKey()
					kuberneteskeyvalue["object_type"] = item.GetObjectType()
					kuberneteskeyvalue["value"] = item.GetValue()
					kuberneteskeyvalues = append(kuberneteskeyvalues, kuberneteskeyvalue)
				}
				return kuberneteskeyvalues
			})(item.GetOverrideSets(), d)
			kubernetesaddonconfiguration["overrides"] = item.GetOverrides()
			kubernetesaddonconfiguration["release_name"] = item.GetReleaseName()
			kubernetesaddonconfiguration["release_namespace"] = item.GetReleaseNamespace()
			kubernetesaddonconfiguration["upgrade_strategy"] = item.GetUpgradeStrategy()

			kubernetesaddonconfigurations = append(kubernetesaddonconfigurations, kubernetesaddonconfiguration)
			return kubernetesaddonconfigurations
		})(item.GetAddonConfiguration(), d)
		kubernetesessentialaddon["addon_definition"] = (func(p models.MoMoRef, d *schema.ResourceData) []map[string]interface{} {
			var momorefs []map[string]interface{}
			var ret models.MoMoRef
			if reflect.DeepEqual(ret, p) {
				return nil
			}
			item := p
			momoref := make(map[string]interface{})
			momoref["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
			momoref["class_id"] = item.GetClassId()
			momoref["moid"] = item.GetMoid()
			momoref["object_type"] = item.GetObjectType()
			momoref["selector"] = item.GetSelector()

			momorefs = append(momorefs, momoref)
			return momorefs
		})(item.GetAddonDefinition(), d)
		kubernetesessentialaddon["class_id"] = item.GetClassId()
		kubernetesessentialaddon["name"] = item.GetName()
		kubernetesessentialaddon["object_type"] = item.GetObjectType()
		kubernetesessentialaddons = append(kubernetesessentialaddons, kubernetesessentialaddon)
	}
	return kubernetesessentialaddons
}
func flattenListKubernetesEthernet(p []models.KubernetesEthernet, d *schema.ResourceData) []map[string]interface{} {
	var kubernetesethernets []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		kubernetesethernet := make(map[string]interface{})
		kubernetesethernet["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
		kubernetesethernet["addresses"] = item.GetAddresses()
		kubernetesethernet["class_id"] = item.GetClassId()
		kubernetesethernet["gateway"] = item.GetGateway()
		kubernetesethernet["ip_v4_configs"] = (func(p []models.KubernetesIpV4Config, d *schema.ResourceData) []map[string]interface{} {
			var kubernetesipv4configs []map[string]interface{}
			if len(p) == 0 {
				return nil
			}
			for _, item := range p {
				kubernetesipv4config := make(map[string]interface{})
				kubernetesipv4config["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
				kubernetesipv4config["class_id"] = item.GetClassId()
				kubernetesipv4config["ip"] = item.GetIp()
				kubernetesipv4config["lease"] = (func(p models.MoMoRef, d *schema.ResourceData) []map[string]interface{} {
					var momorefs []map[string]interface{}
					var ret models.MoMoRef
					if reflect.DeepEqual(ret, p) {
						return nil
					}
					item := p
					momoref := make(map[string]interface{})
					momoref["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
					momoref["class_id"] = item.GetClassId()
					momoref["moid"] = item.GetMoid()
					momoref["object_type"] = item.GetObjectType()
					momoref["selector"] = item.GetSelector()

					momorefs = append(momorefs, momoref)
					return momorefs
				})(item.GetLease(), d)
				kubernetesipv4config["object_type"] = item.GetObjectType()
				kubernetesipv4configs = append(kubernetesipv4configs, kubernetesipv4config)
			}
			return kubernetesipv4configs
		})(item.GetIpV4Configs(), d)
		kubernetesethernet["matcher"] = (func(p models.KubernetesEthernetMatcher, d *schema.ResourceData) []map[string]interface{} {
			var kubernetesethernetmatchers []map[string]interface{}
			var ret models.KubernetesEthernetMatcher
			if reflect.DeepEqual(ret, p) {
				return nil
			}
			item := p
			kubernetesethernetmatcher := make(map[string]interface{})
			kubernetesethernetmatcher["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
			kubernetesethernetmatcher["class_id"] = item.GetClassId()
			kubernetesethernetmatcher["object_type"] = item.GetObjectType()
			kubernetesethernetmatcher["type"] = item.GetType()
			kubernetesethernetmatcher["value"] = item.GetValue()

			kubernetesethernetmatchers = append(kubernetesethernetmatchers, kubernetesethernetmatcher)
			return kubernetesethernetmatchers
		})(item.GetMatcher(), d)
		kubernetesethernet["mtu"] = item.GetMtu()
		kubernetesethernet["name"] = item.GetName()
		kubernetesethernet["object_type"] = item.GetObjectType()
		kubernetesethernet["provider_name"] = item.GetProviderName()
		kubernetesethernet["routes"] = (func(p []models.KubernetesRoute, d *schema.ResourceData) []map[string]interface{} {
			var kubernetesroutes []map[string]interface{}
			if len(p) == 0 {
				return nil
			}
			for _, item := range p {
				kubernetesroute := make(map[string]interface{})
				kubernetesroute["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
				kubernetesroute["class_id"] = item.GetClassId()
				kubernetesroute["object_type"] = item.GetObjectType()
				kubernetesroute["to"] = item.GetTo()
				kubernetesroute["via"] = item.GetVia()
				kubernetesroutes = append(kubernetesroutes, kubernetesroute)
			}
			return kubernetesroutes
		})(item.GetRoutes(), d)
		kubernetesethernets = append(kubernetesethernets, kubernetesethernet)
	}
	return kubernetesethernets
}
func flattenListKubernetesNodeAddress(p []models.KubernetesNodeAddress, d *schema.ResourceData) []map[string]interface{} {
	var kubernetesnodeaddresss []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		kubernetesnodeaddress := make(map[string]interface{})
		kubernetesnodeaddress["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
		kubernetesnodeaddress["address"] = item.GetAddress()
		kubernetesnodeaddress["class_id"] = item.GetClassId()
		kubernetesnodeaddress["object_type"] = item.GetObjectType()
		kubernetesnodeaddress["type"] = item.GetType()
		kubernetesnodeaddresss = append(kubernetesnodeaddresss, kubernetesnodeaddress)
	}
	return kubernetesnodeaddresss
}
func flattenListKubernetesNodeGroupLabel(p []models.KubernetesNodeGroupLabel, d *schema.ResourceData) []map[string]interface{} {
	var kubernetesnodegrouplabels []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		kubernetesnodegrouplabel := make(map[string]interface{})
		kubernetesnodegrouplabel["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
		kubernetesnodegrouplabel["class_id"] = item.GetClassId()
		kubernetesnodegrouplabel["key"] = item.GetKey()
		kubernetesnodegrouplabel["object_type"] = item.GetObjectType()
		kubernetesnodegrouplabel["value"] = item.GetValue()
		kubernetesnodegrouplabels = append(kubernetesnodegrouplabels, kubernetesnodegrouplabel)
	}
	return kubernetesnodegrouplabels
}
func flattenListKubernetesNodeGroupProfileRelationship(p []models.KubernetesNodeGroupProfileRelationship, d *schema.ResourceData) []map[string]interface{} {
	var kubernetesnodegroupprofilerelationships []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		item := item.MoMoRef
		kubernetesnodegroupprofilerelationship := flattenMoMoRef(item)
		kubernetesnodegroupprofilerelationships = append(kubernetesnodegroupprofilerelationships, kubernetesnodegroupprofilerelationship)
	}
	return kubernetesnodegroupprofilerelationships
}
func flattenListKubernetesNodeGroupTaint(p []models.KubernetesNodeGroupTaint, d *schema.ResourceData) []map[string]interface{} {
	var kubernetesnodegrouptaints []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		kubernetesnodegrouptaint := make(map[string]interface{})
		kubernetesnodegrouptaint["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
		kubernetesnodegrouptaint["class_id"] = item.GetClassId()
		kubernetesnodegrouptaint["effect"] = item.GetEffect()
		kubernetesnodegrouptaint["key"] = item.GetKey()
		kubernetesnodegrouptaint["object_type"] = item.GetObjectType()
		kubernetesnodegrouptaint["value"] = item.GetValue()
		kubernetesnodegrouptaints = append(kubernetesnodegrouptaints, kubernetesnodegrouptaint)
	}
	return kubernetesnodegrouptaints
}
func flattenListKubernetesNodeProfileRelationship(p []models.KubernetesNodeProfileRelationship, d *schema.ResourceData) []map[string]interface{} {
	var kubernetesnodeprofilerelationships []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		item := item.MoMoRef
		kubernetesnodeprofilerelationship := flattenMoMoRef(item)
		kubernetesnodeprofilerelationships = append(kubernetesnodeprofilerelationships, kubernetesnodeprofilerelationship)
	}
	return kubernetesnodeprofilerelationships
}
func flattenListKubernetesNodeStatus(p []models.KubernetesNodeStatus, d *schema.ResourceData) []map[string]interface{} {
	var kubernetesnodestatuss []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		kubernetesnodestatus := make(map[string]interface{})
		kubernetesnodestatus["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
		kubernetesnodestatus["class_id"] = item.GetClassId()
		kubernetesnodestatus["object_type"] = item.GetObjectType()
		kubernetesnodestatus["status"] = item.GetStatus()
		kubernetesnodestatus["type"] = item.GetType()
		kubernetesnodestatuss = append(kubernetesnodestatuss, kubernetesnodestatus)
	}
	return kubernetesnodestatuss
}
func flattenListKubernetesTaint(p []models.KubernetesTaint, d *schema.ResourceData) []map[string]interface{} {
	var kubernetestaints []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		kubernetestaint := make(map[string]interface{})
		kubernetestaint["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
		kubernetestaint["class_id"] = item.GetClassId()
		kubernetestaint["effect"] = item.GetEffect()
		kubernetestaint["key"] = item.GetKey()
		kubernetestaint["object_type"] = item.GetObjectType()
		kubernetestaint["value"] = item.GetValue()
		kubernetestaints = append(kubernetestaints, kubernetestaint)
	}
	return kubernetestaints
}
func flattenListKubernetesVirtualMachineInfrastructureProviderRelationship(p []models.KubernetesVirtualMachineInfrastructureProviderRelationship, d *schema.ResourceData) []map[string]interface{} {
	var kubernetesvirtualmachineinfrastructureproviderrelationships []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		item := item.MoMoRef
		kubernetesvirtualmachineinfrastructureproviderrelationship := flattenMoMoRef(item)
		kubernetesvirtualmachineinfrastructureproviderrelationships = append(kubernetesvirtualmachineinfrastructureproviderrelationships, kubernetesvirtualmachineinfrastructureproviderrelationship)
	}
	return kubernetesvirtualmachineinfrastructureproviderrelationships
}
func flattenListLicenseLicenseInfoRelationship(p []models.LicenseLicenseInfoRelationship, d *schema.ResourceData) []map[string]interface{} {
	var licenselicenseinforelationships []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		item := item.MoMoRef
		licenselicenseinforelationship := flattenMoMoRef(item)
		licenselicenseinforelationships = append(licenselicenseinforelationships, licenselicenseinforelationship)
	}
	return licenselicenseinforelationships
}
func flattenListLicenseSubstituteLicense(p []models.LicenseSubstituteLicense, d *schema.ResourceData) []map[string]interface{} {
	var licensesubstitutelicenses []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		licensesubstitutelicense := make(map[string]interface{})
		licensesubstitutelicense["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
		licensesubstitutelicense["class_id"] = item.GetClassId()
		licensesubstitutelicense["object_type"] = item.GetObjectType()
		licensesubstitutelicense["substituted_license"] = item.GetSubstitutedLicense()
		licensesubstitutelicense["substituted_quantity"] = item.GetSubstitutedQuantity()
		licensesubstitutelicense["substitution_type"] = item.GetSubstitutionType()
		licensesubstitutelicenses = append(licensesubstitutelicenses, licensesubstitutelicense)
	}
	return licensesubstitutelicenses
}
func flattenListMacpoolBlock(p []models.MacpoolBlock, d *schema.ResourceData) []map[string]interface{} {
	var macpoolblocks []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		macpoolblock := make(map[string]interface{})
		macpoolblock["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
		macpoolblock["class_id"] = item.GetClassId()
		macpoolblock["from"] = item.GetFrom()
		macpoolblock["object_type"] = item.GetObjectType()
		macpoolblock["size"] = item.GetSize()
		macpoolblock["to"] = item.GetTo()
		macpoolblocks = append(macpoolblocks, macpoolblock)
	}
	return macpoolblocks
}
func flattenListMacpoolIdBlockRelationship(p []models.MacpoolIdBlockRelationship, d *schema.ResourceData) []map[string]interface{} {
	var macpoolidblockrelationships []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		item := item.MoMoRef
		macpoolidblockrelationship := flattenMoMoRef(item)
		macpoolidblockrelationships = append(macpoolidblockrelationships, macpoolidblockrelationship)
	}
	return macpoolidblockrelationships
}
func flattenListMacpoolMemberOf(p []models.MacpoolMemberOf, d *schema.ResourceData) []map[string]interface{} {
	var macpoolmemberofs []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		macpoolmemberof := make(map[string]interface{})
		macpoolmemberof["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
		macpoolmemberof["class_id"] = item.GetClassId()
		macpoolmemberof["id_block_moid"] = item.GetIdBlockMoid()
		macpoolmemberof["object_type"] = item.GetObjectType()
		macpoolmemberof["pool_moid"] = item.GetPoolMoid()
		macpoolmemberofs = append(macpoolmemberofs, macpoolmemberof)
	}
	return macpoolmemberofs
}
func flattenListMacpoolReservationRelationship(p []models.MacpoolReservationRelationship, d *schema.ResourceData) []map[string]interface{} {
	var macpoolreservationrelationships []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		item := item.MoMoRef
		macpoolreservationrelationship := flattenMoMoRef(item)
		macpoolreservationrelationships = append(macpoolreservationrelationships, macpoolreservationrelationship)
	}
	return macpoolreservationrelationships
}
func flattenListManagementInterfaceRelationship(p []models.ManagementInterfaceRelationship, d *schema.ResourceData) []map[string]interface{} {
	var managementinterfacerelationships []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		item := item.MoMoRef
		managementinterfacerelationship := flattenMoMoRef(item)
		managementinterfacerelationships = append(managementinterfacerelationships, managementinterfacerelationship)
	}
	return managementinterfacerelationships
}
func flattenListMarketplaceUseCaseDependency(p []models.MarketplaceUseCaseDependency, d *schema.ResourceData) []map[string]interface{} {
	var marketplaceusecasedependencys []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		marketplaceusecasedependency := make(map[string]interface{})
		marketplaceusecasedependency["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
		marketplaceusecasedependency["class_id"] = item.GetClassId()
		marketplaceusecasedependency["name"] = item.GetName()
		marketplaceusecasedependency["object_type"] = item.GetObjectType()
		marketplaceusecasedependency["nr_version"] = item.GetVersion()
		marketplaceusecasedependencys = append(marketplaceusecasedependencys, marketplaceusecasedependency)
	}
	return marketplaceusecasedependencys
}
func flattenListMarketplaceUseCaseLocale(p []models.MarketplaceUseCaseLocale, d *schema.ResourceData) []map[string]interface{} {
	var marketplaceusecaselocales []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		marketplaceusecaselocale := make(map[string]interface{})
		marketplaceusecaselocale["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
		marketplaceusecaselocale["automations"] = (func(p []models.MarketplaceUseCaseAutomation, d *schema.ResourceData) []map[string]interface{} {
			var marketplaceusecaseautomations []map[string]interface{}
			if len(p) == 0 {
				return nil
			}
			for _, item := range p {
				marketplaceusecaseautomation := make(map[string]interface{})
				marketplaceusecaseautomation["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
				marketplaceusecaseautomation["class_id"] = item.GetClassId()
				marketplaceusecaseautomation["description"] = item.GetDescription()
				marketplaceusecaseautomation["name"] = item.GetName()
				marketplaceusecaseautomation["object_type"] = item.GetObjectType()
				marketplaceusecaseautomations = append(marketplaceusecaseautomations, marketplaceusecaseautomation)
			}
			return marketplaceusecaseautomations
		})(item.GetAutomations(), d)
		marketplaceusecaselocale["class_id"] = item.GetClassId()
		marketplaceusecaselocale["contents"] = item.GetContents()
		marketplaceusecaselocale["description"] = item.GetDescription()
		marketplaceusecaselocale["icon"] = item.GetIcon()
		marketplaceusecaselocale["locale"] = item.GetLocale()
		marketplaceusecaselocale["name"] = item.GetName()
		marketplaceusecaselocale["object_type"] = item.GetObjectType()
		marketplaceusecaselocale["summary"] = item.GetSummary()
		marketplaceusecaselocales = append(marketplaceusecaselocales, marketplaceusecaselocale)
	}
	return marketplaceusecaselocales
}
func flattenListMarketplaceUseCaseVersionLocale(p []models.MarketplaceUseCaseVersionLocale, d *schema.ResourceData) []map[string]interface{} {
	var marketplaceusecaseversionlocales []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		marketplaceusecaseversionlocale := make(map[string]interface{})
		marketplaceusecaseversionlocale["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
		marketplaceusecaseversionlocale["class_id"] = item.GetClassId()
		marketplaceusecaseversionlocale["description"] = item.GetDescription()
		marketplaceusecaseversionlocale["locale"] = item.GetLocale()
		marketplaceusecaseversionlocale["object_type"] = item.GetObjectType()
		marketplaceusecaseversionlocales = append(marketplaceusecaseversionlocales, marketplaceusecaseversionlocale)
	}
	return marketplaceusecaseversionlocales
}
func flattenListMarketplaceUseCaseVersionResource(p []models.MarketplaceUseCaseVersionResource, d *schema.ResourceData) []map[string]interface{} {
	var marketplaceusecaseversionresources []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		marketplaceusecaseversionresource := make(map[string]interface{})
		marketplaceusecaseversionresource["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
		marketplaceusecaseversionresource["class_id"] = item.GetClassId()
		marketplaceusecaseversionresource["object_type"] = item.GetObjectType()
		marketplaceusecaseversionresource["resource_id"] = item.GetResourceId()
		marketplaceusecaseversionresource["resource_type"] = item.GetResourceType()
		marketplaceusecaseversionresources = append(marketplaceusecaseversionresources, marketplaceusecaseversionresource)
	}
	return marketplaceusecaseversionresources
}
func flattenListMemoryArrayRelationship(p []models.MemoryArrayRelationship, d *schema.ResourceData) []map[string]interface{} {
	var memoryarrayrelationships []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		item := item.MoMoRef
		memoryarrayrelationship := flattenMoMoRef(item)
		memoryarrayrelationships = append(memoryarrayrelationships, memoryarrayrelationship)
	}
	return memoryarrayrelationships
}
func flattenListMemoryPersistentMemoryGoal(p []models.MemoryPersistentMemoryGoal, d *schema.ResourceData) []map[string]interface{} {
	var memorypersistentmemorygoals []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		memorypersistentmemorygoal := make(map[string]interface{})
		memorypersistentmemorygoal["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
		memorypersistentmemorygoal["class_id"] = item.GetClassId()
		memorypersistentmemorygoal["memory_mode_percentage"] = item.GetMemoryModePercentage()
		memorypersistentmemorygoal["object_type"] = item.GetObjectType()
		memorypersistentmemorygoal["persistent_memory_type"] = item.GetPersistentMemoryType()
		memorypersistentmemorygoal["socket_id"] = item.GetSocketId()
		memorypersistentmemorygoals = append(memorypersistentmemorygoals, memorypersistentmemorygoal)
	}
	return memorypersistentmemorygoals
}
func flattenListMemoryPersistentMemoryLogicalNamespace(p []models.MemoryPersistentMemoryLogicalNamespace, d *schema.ResourceData) []map[string]interface{} {
	var memorypersistentmemorylogicalnamespaces []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		memorypersistentmemorylogicalnamespace := make(map[string]interface{})
		memorypersistentmemorylogicalnamespace["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
		memorypersistentmemorylogicalnamespace["capacity"] = item.GetCapacity()
		memorypersistentmemorylogicalnamespace["class_id"] = item.GetClassId()
		memorypersistentmemorylogicalnamespace["mode"] = item.GetMode()
		memorypersistentmemorylogicalnamespace["name"] = item.GetName()
		memorypersistentmemorylogicalnamespace["object_type"] = item.GetObjectType()
		memorypersistentmemorylogicalnamespace["socket_id"] = item.GetSocketId()
		memorypersistentmemorylogicalnamespace["socket_memory_id"] = item.GetSocketMemoryId()
		memorypersistentmemorylogicalnamespaces = append(memorypersistentmemorylogicalnamespaces, memorypersistentmemorylogicalnamespace)
	}
	return memorypersistentmemorylogicalnamespaces
}
func flattenListMemoryPersistentMemoryNamespaceRelationship(p []models.MemoryPersistentMemoryNamespaceRelationship, d *schema.ResourceData) []map[string]interface{} {
	var memorypersistentmemorynamespacerelationships []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		item := item.MoMoRef
		memorypersistentmemorynamespacerelationship := flattenMoMoRef(item)
		memorypersistentmemorynamespacerelationships = append(memorypersistentmemorynamespacerelationships, memorypersistentmemorynamespacerelationship)
	}
	return memorypersistentmemorynamespacerelationships
}
func flattenListMemoryPersistentMemoryNamespaceConfigResultRelationship(p []models.MemoryPersistentMemoryNamespaceConfigResultRelationship, d *schema.ResourceData) []map[string]interface{} {
	var memorypersistentmemorynamespaceconfigresultrelationships []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		item := item.MoMoRef
		memorypersistentmemorynamespaceconfigresultrelationship := flattenMoMoRef(item)
		memorypersistentmemorynamespaceconfigresultrelationships = append(memorypersistentmemorynamespaceconfigresultrelationships, memorypersistentmemorynamespaceconfigresultrelationship)
	}
	return memorypersistentmemorynamespaceconfigresultrelationships
}
func flattenListMemoryPersistentMemoryRegionRelationship(p []models.MemoryPersistentMemoryRegionRelationship, d *schema.ResourceData) []map[string]interface{} {
	var memorypersistentmemoryregionrelationships []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		item := item.MoMoRef
		memorypersistentmemoryregionrelationship := flattenMoMoRef(item)
		memorypersistentmemoryregionrelationships = append(memorypersistentmemoryregionrelationships, memorypersistentmemoryregionrelationship)
	}
	return memorypersistentmemoryregionrelationships
}
func flattenListMemoryPersistentMemoryUnitRelationship(p []models.MemoryPersistentMemoryUnitRelationship, d *schema.ResourceData) []map[string]interface{} {
	var memorypersistentmemoryunitrelationships []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		item := item.MoMoRef
		memorypersistentmemoryunitrelationship := flattenMoMoRef(item)
		memorypersistentmemoryunitrelationships = append(memorypersistentmemoryunitrelationships, memorypersistentmemoryunitrelationship)
	}
	return memorypersistentmemoryunitrelationships
}
func flattenListMemoryUnitRelationship(p []models.MemoryUnitRelationship, d *schema.ResourceData) []map[string]interface{} {
	var memoryunitrelationships []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		item := item.MoMoRef
		memoryunitrelationship := flattenMoMoRef(item)
		memoryunitrelationships = append(memoryunitrelationships, memoryunitrelationship)
	}
	return memoryunitrelationships
}
func flattenListMetaAccessPrivilege(p []models.MetaAccessPrivilege, d *schema.ResourceData) []map[string]interface{} {
	var metaaccessprivileges []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		metaaccessprivilege := make(map[string]interface{})
		metaaccessprivilege["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
		metaaccessprivilege["class_id"] = item.GetClassId()
		metaaccessprivilege["method"] = item.GetMethod()
		metaaccessprivilege["object_type"] = item.GetObjectType()
		metaaccessprivilege["privilege"] = item.GetPrivilege()
		metaaccessprivileges = append(metaaccessprivileges, metaaccessprivilege)
	}
	return metaaccessprivileges
}
func flattenListMetaDisplayNameDefinition(p []models.MetaDisplayNameDefinition, d *schema.ResourceData) []map[string]interface{} {
	var metadisplaynamedefinitions []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		metadisplaynamedefinition := make(map[string]interface{})
		metadisplaynamedefinition["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
		metadisplaynamedefinition["class_id"] = item.GetClassId()
		metadisplaynamedefinition["format"] = item.GetFormat()
		metadisplaynamedefinition["include_ancestor"] = item.GetIncludeAncestor()
		metadisplaynamedefinition["name"] = item.GetName()
		metadisplaynamedefinition["object_type"] = item.GetObjectType()
		metadisplaynamedefinitions = append(metadisplaynamedefinitions, metadisplaynamedefinition)
	}
	return metadisplaynamedefinitions
}
func flattenListMetaIdentityDefinition(p []models.MetaIdentityDefinition, d *schema.ResourceData) []map[string]interface{} {
	var metaidentitydefinitions []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		metaidentitydefinition := make(map[string]interface{})
		metaidentitydefinition["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
		metaidentitydefinition["class_id"] = item.GetClassId()
		metaidentitydefinition["fields"] = item.GetFields()
		metaidentitydefinition["object_type"] = item.GetObjectType()
		metaidentitydefinitions = append(metaidentitydefinitions, metaidentitydefinition)
	}
	return metaidentitydefinitions
}
func flattenListMetaPropDefinition(p []models.MetaPropDefinition, d *schema.ResourceData) []map[string]interface{} {
	var metapropdefinitions []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		metapropdefinition := make(map[string]interface{})
		metapropdefinition["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
		metapropdefinition["api_access"] = item.GetApiAccess()
		metapropdefinition["class_id"] = item.GetClassId()
		metapropdefinition["default"] = flattenAdditionalProperties(item.Default)
		metapropdefinition["is_collection"] = item.GetIsCollection()
		metapropdefinition["is_complex_type"] = item.GetIsComplexType()
		metapropdefinition["kind"] = item.GetKind()
		metapropdefinition["name"] = item.GetName()
		metapropdefinition["object_type"] = item.GetObjectType()
		metapropdefinition["op_security"] = item.GetOpSecurity()
		metapropdefinition["search_weight"] = item.GetSearchWeight()
		metapropdefinition["type"] = item.GetType()
		metapropdefinitions = append(metapropdefinitions, metapropdefinition)
	}
	return metapropdefinitions
}
func flattenListMetaRelationshipDefinition(p []models.MetaRelationshipDefinition, d *schema.ResourceData) []map[string]interface{} {
	var metarelationshipdefinitions []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		metarelationshipdefinition := make(map[string]interface{})
		metarelationshipdefinition["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
		metarelationshipdefinition["api_access"] = item.GetApiAccess()
		metarelationshipdefinition["class_id"] = item.GetClassId()
		metarelationshipdefinition["collection"] = item.GetCollection()
		metarelationshipdefinition["export"] = item.GetExport()
		metarelationshipdefinition["export_with_peer"] = item.GetExportWithPeer()
		metarelationshipdefinition["name"] = item.GetName()
		metarelationshipdefinition["object_type"] = item.GetObjectType()
		metarelationshipdefinition["peer_rel_name"] = item.GetPeerRelName()
		metarelationshipdefinition["peer_sync"] = item.GetPeerSync()
		metarelationshipdefinition["type"] = item.GetType()
		metarelationshipdefinitions = append(metarelationshipdefinitions, metarelationshipdefinition)
	}
	return metarelationshipdefinitions
}
func flattenListMetricsMetricCriterion(p []models.MetricsMetricCriterion, d *schema.ResourceData) []map[string]interface{} {
	var metricsmetriccriterions []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		metricsmetriccriterion := make(map[string]interface{})
		metricsmetriccriterion["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
		metricsmetriccriterion["aggregation"] = item.GetAggregation()
		metricsmetriccriterion["class_id"] = item.GetClassId()
		metricsmetriccriterion["filters"] = item.GetFilters()
		metricsmetriccriterion["groups"] = item.GetGroups()
		metricsmetriccriterion["instrument"] = item.GetInstrument()
		metricsmetriccriterion["is_enabled"] = item.GetIsEnabled()
		metricsmetriccriterion["metric"] = item.GetMetric()
		metricsmetriccriterion["metric_aggregation"] = item.GetMetricAggregation()
		metricsmetriccriterion["object_type"] = item.GetObjectType()
		metricsmetriccriterion["top_limit"] = item.GetTopLimit()
		metricsmetriccriterion["top_sort"] = item.GetTopSort()
		metricsmetriccriterions = append(metricsmetriccriterions, metricsmetriccriterion)
	}
	return metricsmetriccriterions
}
func flattenListMoBaseMo(p []models.MoBaseMo, d *schema.ResourceData) []map[string]interface{} {
	var mobasemos []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		mobasemo := make(map[string]interface{})
		mobasemo["account_moid"] = item.GetAccountMoid()
		mobasemo["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
		mobasemo["ancestors"] = (func(p []models.MoBaseMoRelationship, d *schema.ResourceData) []map[string]interface{} {
			var mobasemorelationships []map[string]interface{}
			if len(p) == 0 {
				return nil
			}
			for _, item := range p {
				item := item.MoMoRef
				mobasemorelationship := flattenMoMoRef(item)
				mobasemorelationships = append(mobasemorelationships, mobasemorelationship)
			}
			return mobasemorelationships
		})(item.GetAncestors(), d)
		mobasemo["class_id"] = item.GetClassId()
		mobasemo["create_time"] = item.GetCreateTime().String()
		mobasemo["domain_group_moid"] = item.GetDomainGroupMoid()
		mobasemo["mod_time"] = item.GetModTime().String()
		mobasemo["moid"] = item.GetMoid()
		mobasemo["object_type"] = item.GetObjectType()
		mobasemo["owners"] = item.GetOwners()
		mobasemo["parent"] = (func(p models.MoBaseMoRelationship, d *schema.ResourceData) []map[string]interface{} {
			var mobasemorelationships []map[string]interface{}
			var ret models.MoBaseMoRelationship
			if reflect.DeepEqual(ret, p) {
				return nil
			}
			x := p
			item := x.MoMoRef
			mobasemorelationship := make(map[string]interface{})
			mobasemorelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
			mobasemorelationship["class_id"] = item.GetClassId()
			mobasemorelationship["moid"] = item.GetMoid()
			mobasemorelationship["object_type"] = item.GetObjectType()
			mobasemorelationship["selector"] = item.GetSelector()

			mobasemorelationships = append(mobasemorelationships, mobasemorelationship)
			return mobasemorelationships
		})(item.GetParent(), d)
		mobasemo["permission_resources"] = (func(p []models.MoBaseMoRelationship, d *schema.ResourceData) []map[string]interface{} {
			var mobasemorelationships []map[string]interface{}
			if len(p) == 0 {
				return nil
			}
			for _, item := range p {
				item := item.MoMoRef
				mobasemorelationship := flattenMoMoRef(item)
				mobasemorelationships = append(mobasemorelationships, mobasemorelationship)
			}
			return mobasemorelationships
		})(item.GetPermissionResources(), d)
		mobasemo["shared_scope"] = item.GetSharedScope()
		mobasemo["tags"] = (func(p []models.MoTag, d *schema.ResourceData) []map[string]interface{} {
			var motags []map[string]interface{}
			if len(p) == 0 {
				return nil
			}
			for _, item := range p {
				motag := make(map[string]interface{})
				motag["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
				motag["key"] = item.GetKey()
				motag["value"] = item.GetValue()
				motags = append(motags, motag)
			}
			return motags
		})(item.GetTags(), d)
		mobasemo["version_context"] = (func(p models.MoVersionContext, d *schema.ResourceData) []map[string]interface{} {
			var moversioncontexts []map[string]interface{}
			var ret models.MoVersionContext
			if reflect.DeepEqual(ret, p) {
				return nil
			}
			item := p
			moversioncontext := make(map[string]interface{})
			moversioncontext["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
			moversioncontext["class_id"] = item.GetClassId()
			moversioncontext["interested_mos"] = (func(p []models.MoMoRef, d *schema.ResourceData) []map[string]interface{} {
				var momorefs []map[string]interface{}
				if len(p) == 0 {
					return nil
				}
				for _, item := range p {
					momoref := make(map[string]interface{})
					momoref["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
					momoref["class_id"] = item.GetClassId()
					momoref["moid"] = item.GetMoid()
					momoref["object_type"] = item.GetObjectType()
					momoref["selector"] = item.GetSelector()
					momorefs = append(momorefs, momoref)
				}
				return momorefs
			})(item.GetInterestedMos(), d)
			moversioncontext["marked_for_deletion"] = item.GetMarkedForDeletion()
			moversioncontext["object_type"] = item.GetObjectType()
			moversioncontext["ref_mo"] = (func(p models.MoMoRef, d *schema.ResourceData) []map[string]interface{} {
				var momorefs []map[string]interface{}
				var ret models.MoMoRef
				if reflect.DeepEqual(ret, p) {
					return nil
				}
				item := p
				momoref := make(map[string]interface{})
				momoref["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
				momoref["class_id"] = item.GetClassId()
				momoref["moid"] = item.GetMoid()
				momoref["object_type"] = item.GetObjectType()
				momoref["selector"] = item.GetSelector()

				momorefs = append(momorefs, momoref)
				return momorefs
			})(item.GetRefMo(), d)
			moversioncontext["timestamp"] = item.GetTimestamp().String()
			moversioncontext["nr_version"] = item.GetVersion()
			moversioncontext["version_type"] = item.GetVersionType()

			moversioncontexts = append(moversioncontexts, moversioncontext)
			return moversioncontexts
		})(item.GetVersionContext(), d)
		mobasemos = append(mobasemos, mobasemo)
	}
	return mobasemos
}
func flattenListMoBaseMoRelationship(p []models.MoBaseMoRelationship, d *schema.ResourceData) []map[string]interface{} {
	var mobasemorelationships []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		item := item.MoMoRef
		mobasemorelationship := flattenMoMoRef(item)
		mobasemorelationships = append(mobasemorelationships, mobasemorelationship)
	}
	return mobasemorelationships
}
func flattenListMoMoRef(p []models.MoMoRef, d *schema.ResourceData) []map[string]interface{} {
	var momorefs []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		momoref := make(map[string]interface{})
		momoref["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
		momoref["class_id"] = item.GetClassId()
		momoref["moid"] = item.GetMoid()
		momoref["object_type"] = item.GetObjectType()
		momoref["selector"] = item.GetSelector()
		momorefs = append(momorefs, momoref)
	}
	return momorefs
}
func flattenListMoTag(p []models.MoTag, d *schema.ResourceData) []map[string]interface{} {
	var motags []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		motag := make(map[string]interface{})
		motag["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
		motag["key"] = item.GetKey()
		motag["value"] = item.GetValue()
		motags = append(motags, motag)
	}
	return motags
}
func flattenListMonitoringCategoryStatus(p []models.MonitoringCategoryStatus, d *schema.ResourceData) []map[string]interface{} {
	var monitoringcategorystatuss []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		monitoringcategorystatus := make(map[string]interface{})
		monitoringcategorystatus["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
		monitoringcategorystatus["category_label"] = item.GetCategoryLabel()
		monitoringcategorystatus["class_id"] = item.GetClassId()
		monitoringcategorystatus["deeplink"] = item.GetDeeplink()
		monitoringcategorystatus["details"] = item.GetDetails()
		monitoringcategorystatus["object_type"] = item.GetObjectType()
		monitoringcategorystatus["source_id"] = item.GetSourceId()
		monitoringcategorystatus["status"] = item.GetStatus()
		monitoringcategorystatuss = append(monitoringcategorystatuss, monitoringcategorystatus)
	}
	return monitoringcategorystatuss
}
func flattenListMotemplateActionEntry(p []models.MotemplateActionEntry, d *schema.ResourceData) []map[string]interface{} {
	var motemplateactionentrys []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		motemplateactionentry := make(map[string]interface{})
		motemplateactionentry["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
		motemplateactionentry["class_id"] = item.GetClassId()
		motemplateactionentry["object_type"] = item.GetObjectType()
		motemplateactionentry["params"] = (func(p []models.MotemplateActionParam, d *schema.ResourceData) []map[string]interface{} {
			var motemplateactionparams []map[string]interface{}
			if len(p) == 0 {
				return nil
			}
			for _, item := range p {
				motemplateactionparam := make(map[string]interface{})
				motemplateactionparam["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
				motemplateactionparam["class_id"] = item.GetClassId()
				motemplateactionparam["name"] = item.GetName()
				motemplateactionparam["object_type"] = item.GetObjectType()
				motemplateactionparam["value"] = item.GetValue()
				motemplateactionparams = append(motemplateactionparams, motemplateactionparam)
			}
			return motemplateactionparams
		})(item.GetParams(), d)
		motemplateactionentry["type"] = item.GetType()
		motemplateactionentrys = append(motemplateactionentrys, motemplateactionentry)
	}
	return motemplateactionentrys
}
func flattenListMotemplateSyncError(p []models.MotemplateSyncError, d *schema.ResourceData) []map[string]interface{} {
	var motemplatesyncerrors []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		motemplatesyncerror := make(map[string]interface{})
		motemplatesyncerror["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
		motemplatesyncerror["class_id"] = item.GetClassId()
		motemplatesyncerror["message"] = item.GetMessage()
		motemplatesyncerror["object_type"] = item.GetObjectType()
		motemplatesyncerror["type"] = item.GetType()
		motemplatesyncerrors = append(motemplatesyncerrors, motemplatesyncerror)
	}
	return motemplatesyncerrors
}
func flattenListNetworkDiscoveredNeighborRelationship(p []models.NetworkDiscoveredNeighborRelationship, d *schema.ResourceData) []map[string]interface{} {
	var networkdiscoveredneighborrelationships []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		item := item.MoMoRef
		networkdiscoveredneighborrelationship := flattenMoMoRef(item)
		networkdiscoveredneighborrelationships = append(networkdiscoveredneighborrelationships, networkdiscoveredneighborrelationship)
	}
	return networkdiscoveredneighborrelationships
}
func flattenListNetworkDnsRelationship(p []models.NetworkDnsRelationship, d *schema.ResourceData) []map[string]interface{} {
	var networkdnsrelationships []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		item := item.MoMoRef
		networkdnsrelationship := flattenMoMoRef(item)
		networkdnsrelationships = append(networkdnsrelationships, networkdnsrelationship)
	}
	return networkdnsrelationships
}
func flattenListNetworkElementRelationship(p []models.NetworkElementRelationship, d *schema.ResourceData) []map[string]interface{} {
	var networkelementrelationships []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		item := item.MoMoRef
		networkelementrelationship := flattenMoMoRef(item)
		networkelementrelationships = append(networkelementrelationships, networkelementrelationship)
	}
	return networkelementrelationships
}
func flattenListNetworkFeatureControlRelationship(p []models.NetworkFeatureControlRelationship, d *schema.ResourceData) []map[string]interface{} {
	var networkfeaturecontrolrelationships []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		item := item.MoMoRef
		networkfeaturecontrolrelationship := flattenMoMoRef(item)
		networkfeaturecontrolrelationships = append(networkfeaturecontrolrelationships, networkfeaturecontrolrelationship)
	}
	return networkfeaturecontrolrelationships
}
func flattenListNetworkHyperFlexInternetProtocolAddressRange(p []models.NetworkHyperFlexInternetProtocolAddressRange, d *schema.ResourceData) []map[string]interface{} {
	var networkhyperflexinternetprotocoladdressranges []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		networkhyperflexinternetprotocoladdressrange := make(map[string]interface{})
		networkhyperflexinternetprotocoladdressrange["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
		networkhyperflexinternetprotocoladdressrange["begin_address"] = item.GetBeginAddress()
		networkhyperflexinternetprotocoladdressrange["class_id"] = item.GetClassId()
		networkhyperflexinternetprotocoladdressrange["end_address"] = item.GetEndAddress()
		networkhyperflexinternetprotocoladdressrange["object_type"] = item.GetObjectType()
		networkhyperflexinternetprotocoladdressranges = append(networkhyperflexinternetprotocoladdressranges, networkhyperflexinternetprotocoladdressrange)
	}
	return networkhyperflexinternetprotocoladdressranges
}
func flattenListNetworkInterfaceListRelationship(p []models.NetworkInterfaceListRelationship, d *schema.ResourceData) []map[string]interface{} {
	var networkinterfacelistrelationships []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		item := item.MoMoRef
		networkinterfacelistrelationship := flattenMoMoRef(item)
		networkinterfacelistrelationships = append(networkinterfacelistrelationships, networkinterfacelistrelationship)
	}
	return networkinterfacelistrelationships
}
func flattenListNetworkLicenseFileRelationship(p []models.NetworkLicenseFileRelationship, d *schema.ResourceData) []map[string]interface{} {
	var networklicensefilerelationships []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		item := item.MoMoRef
		networklicensefilerelationship := flattenMoMoRef(item)
		networklicensefilerelationships = append(networklicensefilerelationships, networklicensefilerelationship)
	}
	return networklicensefilerelationships
}
func flattenListNetworkSupervisorCardRelationship(p []models.NetworkSupervisorCardRelationship, d *schema.ResourceData) []map[string]interface{} {
	var networksupervisorcardrelationships []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		item := item.MoMoRef
		networksupervisorcardrelationship := flattenMoMoRef(item)
		networksupervisorcardrelationships = append(networksupervisorcardrelationships, networksupervisorcardrelationship)
	}
	return networksupervisorcardrelationships
}
func flattenListNetworkVethernetRelationship(p []models.NetworkVethernetRelationship, d *schema.ResourceData) []map[string]interface{} {
	var networkvethernetrelationships []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		item := item.MoMoRef
		networkvethernetrelationship := flattenMoMoRef(item)
		networkvethernetrelationships = append(networkvethernetrelationships, networkvethernetrelationship)
	}
	return networkvethernetrelationships
}
func flattenListNetworkVfcRelationship(p []models.NetworkVfcRelationship, d *schema.ResourceData) []map[string]interface{} {
	var networkvfcrelationships []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		item := item.MoMoRef
		networkvfcrelationship := flattenMoMoRef(item)
		networkvfcrelationships = append(networkvfcrelationships, networkvfcrelationship)
	}
	return networkvfcrelationships
}
func flattenListNetworkVpcMemberRelationship(p []models.NetworkVpcMemberRelationship, d *schema.ResourceData) []map[string]interface{} {
	var networkvpcmemberrelationships []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		item := item.MoMoRef
		networkvpcmemberrelationship := flattenMoMoRef(item)
		networkvpcmemberrelationships = append(networkvpcmemberrelationships, networkvpcmemberrelationship)
	}
	return networkvpcmemberrelationships
}
func flattenListNetworkVpcPeerRelationship(p []models.NetworkVpcPeerRelationship, d *schema.ResourceData) []map[string]interface{} {
	var networkvpcpeerrelationships []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		item := item.MoMoRef
		networkvpcpeerrelationship := flattenMoMoRef(item)
		networkvpcpeerrelationships = append(networkvpcpeerrelationships, networkvpcpeerrelationship)
	}
	return networkvpcpeerrelationships
}
func flattenListNetworkVrfRelationship(p []models.NetworkVrfRelationship, d *schema.ResourceData) []map[string]interface{} {
	var networkvrfrelationships []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		item := item.MoMoRef
		networkvrfrelationship := flattenMoMoRef(item)
		networkvrfrelationships = append(networkvrfrelationships, networkvrfrelationship)
	}
	return networkvrfrelationships
}
func flattenListNiaapiDetail(p []models.NiaapiDetail, d *schema.ResourceData) []map[string]interface{} {
	var niaapidetails []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		niaapidetail := make(map[string]interface{})
		niaapidetail["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
		niaapidetail["chksum"] = item.GetChksum()
		niaapidetail["class_id"] = item.GetClassId()
		niaapidetail["filename"] = item.GetFilename()
		niaapidetail["name"] = item.GetName()
		niaapidetail["object_type"] = item.GetObjectType()
		niaapidetails = append(niaapidetails, niaapidetail)
	}
	return niaapidetails
}
func flattenListNiaapiRevisionInfo(p []models.NiaapiRevisionInfo, d *schema.ResourceData) []map[string]interface{} {
	var niaapirevisioninfos []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		niaapirevisioninfo := make(map[string]interface{})
		niaapirevisioninfo["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
		niaapirevisioninfo["class_id"] = item.GetClassId()
		niaapirevisioninfo["date_published"] = item.GetDatePublished().String()
		niaapirevisioninfo["object_type"] = item.GetObjectType()
		niaapirevisioninfo["revision_comment"] = item.GetRevisionComment()
		niaapirevisioninfo["revision_no"] = item.GetRevisionNo()
		niaapirevisioninfos = append(niaapirevisioninfos, niaapirevisioninfo)
	}
	return niaapirevisioninfos
}
func flattenListNiatelemetryCloudRegionsElement(p []models.NiatelemetryCloudRegionsElement, d *schema.ResourceData) []map[string]interface{} {
	var niatelemetrycloudregionselements []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		niatelemetrycloudregionselement := make(map[string]interface{})
		niatelemetrycloudregionselement["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
		niatelemetrycloudregionselement["admin_state"] = item.GetAdminState()
		niatelemetrycloudregionselement["capic_deployed"] = item.GetCapicDeployed()
		niatelemetrycloudregionselement["class_id"] = item.GetClassId()
		niatelemetrycloudregionselement["in_use"] = item.GetInUse()
		niatelemetrycloudregionselement["name"] = item.GetName()
		niatelemetrycloudregionselement["object_type"] = item.GetObjectType()
		niatelemetrycloudregionselements = append(niatelemetrycloudregionselements, niatelemetrycloudregionselement)
	}
	return niatelemetrycloudregionselements
}
func flattenListNiatelemetryCloudRoutersElement(p []models.NiatelemetryCloudRoutersElement, d *schema.ResourceData) []map[string]interface{} {
	var niatelemetrycloudrouterselements []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		niatelemetrycloudrouterselement := make(map[string]interface{})
		niatelemetrycloudrouterselement["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
		niatelemetrycloudrouterselement["class_id"] = item.GetClassId()
		niatelemetrycloudrouterselement["name"] = item.GetName()
		niatelemetrycloudrouterselement["object_type"] = item.GetObjectType()
		niatelemetrycloudrouterselement["nr_version"] = item.GetVersion()
		niatelemetrycloudrouterselements = append(niatelemetrycloudrouterselements, niatelemetrycloudrouterselement)
	}
	return niatelemetrycloudrouterselements
}
func flattenListNiatelemetryDeploymentStatus(p []models.NiatelemetryDeploymentStatus, d *schema.ResourceData) []map[string]interface{} {
	var niatelemetrydeploymentstatuss []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		niatelemetrydeploymentstatus := make(map[string]interface{})
		niatelemetrydeploymentstatus["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
		niatelemetrydeploymentstatus["class_id"] = item.GetClassId()
		niatelemetrydeploymentstatus["id"] = item.GetId()
		niatelemetrydeploymentstatus["name"] = item.GetName()
		niatelemetrydeploymentstatus["object_type"] = item.GetObjectType()
		niatelemetrydeploymentstatus["status"] = item.GetStatus()
		niatelemetrydeploymentstatuss = append(niatelemetrydeploymentstatuss, niatelemetrydeploymentstatus)
	}
	return niatelemetrydeploymentstatuss
}
func flattenListNiatelemetryDigitalOpticalMonitoring(p []models.NiatelemetryDigitalOpticalMonitoring, d *schema.ResourceData) []map[string]interface{} {
	var niatelemetrydigitalopticalmonitorings []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		niatelemetrydigitalopticalmonitoring := make(map[string]interface{})
		niatelemetrydigitalopticalmonitoring["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
		niatelemetrydigitalopticalmonitoring["alerts"] = item.GetAlerts()
		niatelemetrydigitalopticalmonitoring["class_id"] = item.GetClassId()
		niatelemetrydigitalopticalmonitoring["dn"] = item.GetDn()
		niatelemetrydigitalopticalmonitoring["object_type"] = item.GetObjectType()
		niatelemetrydigitalopticalmonitoring["rx_los"] = item.GetRxLos()
		niatelemetrydigitalopticalmonitoring["tx_fault_count"] = item.GetTxFaultCount()
		niatelemetrydigitalopticalmonitorings = append(niatelemetrydigitalopticalmonitorings, niatelemetrydigitalopticalmonitoring)
	}
	return niatelemetrydigitalopticalmonitorings
}
func flattenListNiatelemetryDomInfo(p []models.NiatelemetryDomInfo, d *schema.ResourceData) []map[string]interface{} {
	var niatelemetrydominfos []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		niatelemetrydominfo := make(map[string]interface{})
		niatelemetrydominfo["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
		niatelemetrydominfo["avg"] = item.GetAvg()
		niatelemetrydominfo["class_id"] = item.GetClassId()
		niatelemetrydominfo["dn"] = item.GetDn()
		niatelemetrydominfo["instant"] = item.GetInstant()
		niatelemetrydominfo["max"] = item.GetMax()
		niatelemetrydominfo["min"] = item.GetMin()
		niatelemetrydominfo["object_type"] = item.GetObjectType()
		niatelemetrydominfo["unit"] = item.GetUnit()
		niatelemetrydominfo["value"] = item.GetValue()
		niatelemetrydominfos = append(niatelemetrydominfos, niatelemetrydominfo)
	}
	return niatelemetrydominfos
}
func flattenListNiatelemetryDomThresInfo(p []models.NiatelemetryDomThresInfo, d *schema.ResourceData) []map[string]interface{} {
	var niatelemetrydomthresinfos []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		niatelemetrydomthresinfo := make(map[string]interface{})
		niatelemetrydomthresinfo["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
		niatelemetrydomthresinfo["class_id"] = item.GetClassId()
		niatelemetrydomthresinfo["dn"] = item.GetDn()
		niatelemetrydomthresinfo["high_alarm"] = item.GetHighAlarm()
		niatelemetrydomthresinfo["high_warning"] = item.GetHighWarning()
		niatelemetrydomthresinfo["low_alarm"] = item.GetLowAlarm()
		niatelemetrydomthresinfo["low_warning"] = item.GetLowWarning()
		niatelemetrydomthresinfo["num_lanes"] = item.GetNumLanes()
		niatelemetrydomthresinfo["object_type"] = item.GetObjectType()
		niatelemetrydomthresinfo["part_number"] = item.GetPartNumber()
		niatelemetrydomthresinfo["type"] = item.GetType()
		niatelemetrydomthresinfo["type_name"] = item.GetTypeName()
		niatelemetrydomthresinfo["unit"] = item.GetUnit()
		niatelemetrydomthresinfo["vendor_name"] = item.GetVendorName()
		niatelemetrydomthresinfo["vendor_pn"] = item.GetVendorPn()
		niatelemetrydomthresinfo["vendor_rev"] = item.GetVendorRev()
		niatelemetrydomthresinfo["vendor_sn"] = item.GetVendorSn()
		niatelemetrydomthresinfo["version_id"] = item.GetVersionId()
		niatelemetrydomthresinfos = append(niatelemetrydomthresinfos, niatelemetrydomthresinfo)
	}
	return niatelemetrydomthresinfos
}
func flattenListNiatelemetryFanDetails(p []models.NiatelemetryFanDetails, d *schema.ResourceData) []map[string]interface{} {
	var niatelemetryfandetailss []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		niatelemetryfandetails := make(map[string]interface{})
		niatelemetryfandetails["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
		niatelemetryfandetails["class_id"] = item.GetClassId()
		niatelemetryfandetails["name"] = item.GetName()
		niatelemetryfandetails["object_type"] = item.GetObjectType()
		niatelemetryfandetails["product_id"] = item.GetProductId()
		niatelemetryfandetails["serial_number"] = item.GetSerialNumber()
		niatelemetryfandetails["vendor_id"] = item.GetVendorId()
		niatelemetryfandetailss = append(niatelemetryfandetailss, niatelemetryfandetails)
	}
	return niatelemetryfandetailss
}
func flattenListNiatelemetryImageDetail(p []models.NiatelemetryImageDetail, d *schema.ResourceData) []map[string]interface{} {
	var niatelemetryimagedetails []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		niatelemetryimagedetail := make(map[string]interface{})
		niatelemetryimagedetail["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
		niatelemetryimagedetail["class_id"] = item.GetClassId()
		niatelemetryimagedetail["image_name"] = item.GetImageName()
		niatelemetryimagedetail["name"] = item.GetName()
		niatelemetryimagedetail["object_type"] = item.GetObjectType()
		niatelemetryimagedetail["nr_version"] = item.GetVersion()
		niatelemetryimagedetails = append(niatelemetryimagedetails, niatelemetryimagedetail)
	}
	return niatelemetryimagedetails
}
func flattenListNiatelemetryInterfaceElement(p []models.NiatelemetryInterfaceElement, d *schema.ResourceData) []map[string]interface{} {
	var niatelemetryinterfaceelements []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		niatelemetryinterfaceelement := make(map[string]interface{})
		niatelemetryinterfaceelement["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
		niatelemetryinterfaceelement["class_id"] = item.GetClassId()
		niatelemetryinterfaceelement["name"] = item.GetName()
		niatelemetryinterfaceelement["object_type"] = item.GetObjectType()
		niatelemetryinterfaceelement["oper_state"] = item.GetOperState()
		niatelemetryinterfaceelement["xcvr_present"] = item.GetXcvrPresent()
		niatelemetryinterfaceelements = append(niatelemetryinterfaceelements, niatelemetryinterfaceelement)
	}
	return niatelemetryinterfaceelements
}
func flattenListNiatelemetryJobDetail(p []models.NiatelemetryJobDetail, d *schema.ResourceData) []map[string]interface{} {
	var niatelemetryjobdetails []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		niatelemetryjobdetail := make(map[string]interface{})
		niatelemetryjobdetail["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
		niatelemetryjobdetail["class_id"] = item.GetClassId()
		niatelemetryjobdetail["job_id"] = item.GetJobId()
		niatelemetryjobdetail["object_type"] = item.GetObjectType()
		niatelemetryjobdetail["upg_status"] = item.GetUpgStatus()
		niatelemetryjobdetails = append(niatelemetryjobdetails, niatelemetryjobdetail)
	}
	return niatelemetryjobdetails
}
func flattenListNiatelemetryLogicalLink(p []models.NiatelemetryLogicalLink, d *schema.ResourceData) []map[string]interface{} {
	var niatelemetrylogicallinks []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		niatelemetrylogicallink := make(map[string]interface{})
		niatelemetrylogicallink["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
		niatelemetrylogicallink["class_id"] = item.GetClassId()
		niatelemetrylogicallink["db_id"] = item.GetDbId()
		niatelemetrylogicallink["is_present"] = item.GetIsPresent()
		niatelemetrylogicallink["link_addr1"] = item.GetLinkAddr1()
		niatelemetrylogicallink["link_addr2"] = item.GetLinkAddr2()
		niatelemetrylogicallink["link_state"] = item.GetLinkState()
		niatelemetrylogicallink["link_type"] = item.GetLinkType()
		niatelemetrylogicallink["object_type"] = item.GetObjectType()
		niatelemetrylogicallink["uptime"] = item.GetUptime()
		niatelemetrylogicallinks = append(niatelemetrylogicallinks, niatelemetrylogicallink)
	}
	return niatelemetrylogicallinks
}
func flattenListNiatelemetryMdsNeighborInfo(p []models.NiatelemetryMdsNeighborInfo, d *schema.ResourceData) []map[string]interface{} {
	var niatelemetrymdsneighborinfos []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		niatelemetrymdsneighborinfo := make(map[string]interface{})
		niatelemetrymdsneighborinfo["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
		niatelemetrymdsneighborinfo["class_id"] = item.GetClassId()
		niatelemetrymdsneighborinfo["device_wwn"] = item.GetDeviceWwn()
		niatelemetrymdsneighborinfo["object_type"] = item.GetObjectType()
		niatelemetrymdsneighborinfos = append(niatelemetrymdsneighborinfos, niatelemetrymdsneighborinfo)
	}
	return niatelemetrymdsneighborinfos
}
func flattenListNiatelemetrySites(p []models.NiatelemetrySites, d *schema.ResourceData) []map[string]interface{} {
	var niatelemetrysitess []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		niatelemetrysites := make(map[string]interface{})
		niatelemetrysites["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
		niatelemetrysites["class_id"] = item.GetClassId()
		niatelemetrysites["name"] = item.GetName()
		niatelemetrysites["object_type"] = item.GetObjectType()
		niatelemetrysites["site_type"] = item.GetSiteType()
		niatelemetrysites["uuid"] = item.GetUuid()
		niatelemetrysitess = append(niatelemetrysitess, niatelemetrysites)
	}
	return niatelemetrysitess
}
func flattenListNiatelemetrySwitchDiskUtilization(p []models.NiatelemetrySwitchDiskUtilization, d *schema.ResourceData) []map[string]interface{} {
	var niatelemetryswitchdiskutilizations []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		niatelemetryswitchdiskutilization := make(map[string]interface{})
		niatelemetryswitchdiskutilization["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
		niatelemetryswitchdiskutilization["avail"] = item.GetAvail()
		niatelemetryswitchdiskutilization["class_id"] = item.GetClassId()
		niatelemetryswitchdiskutilization["name"] = item.GetName()
		niatelemetryswitchdiskutilization["object_type"] = item.GetObjectType()
		niatelemetryswitchdiskutilization["path"] = item.GetPath()
		niatelemetryswitchdiskutilization["used"] = item.GetUsed()
		niatelemetryswitchdiskutilizations = append(niatelemetryswitchdiskutilizations, niatelemetryswitchdiskutilization)
	}
	return niatelemetryswitchdiskutilizations
}
func flattenListNiatelemetryVniStatus(p []models.NiatelemetryVniStatus, d *schema.ResourceData) []map[string]interface{} {
	var niatelemetryvnistatuss []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		niatelemetryvnistatus := make(map[string]interface{})
		niatelemetryvnistatus["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
		niatelemetryvnistatus["class_id"] = item.GetClassId()
		niatelemetryvnistatus["object_type"] = item.GetObjectType()
		niatelemetryvnistatus["vni"] = item.GetVni()
		niatelemetryvnistatus["vni_state"] = item.GetVniState()
		niatelemetryvnistatus["vni_type"] = item.GetVniType()
		niatelemetryvnistatuss = append(niatelemetryvnistatuss, niatelemetryvnistatus)
	}
	return niatelemetryvnistatuss
}
func flattenListNiatelemetryVpcDetails(p []models.NiatelemetryVpcDetails, d *schema.ResourceData) []map[string]interface{} {
	var niatelemetryvpcdetailss []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		niatelemetryvpcdetails := make(map[string]interface{})
		niatelemetryvpcdetails["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
		niatelemetryvpcdetails["class_id"] = item.GetClassId()
		niatelemetryvpcdetails["is_vpc_configured"] = item.GetIsVpcConfigured()
		niatelemetryvpcdetails["object_type"] = item.GetObjectType()
		niatelemetryvpcdetails["peer_switch_db_id"] = item.GetPeerSwitchDbId()
		niatelemetryvpcdetails["switch_db_id"] = item.GetSwitchDbId()
		niatelemetryvpcdetailss = append(niatelemetryvpcdetailss, niatelemetryvpcdetails)
	}
	return niatelemetryvpcdetailss
}
func flattenListNotificationAbstractCondition(p []models.NotificationAbstractCondition, d *schema.ResourceData) []map[string]interface{} {
	var notificationabstractconditions []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		notificationabstractcondition := make(map[string]interface{})
		notificationabstractcondition["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
		notificationabstractcondition["class_id"] = item.GetClassId()
		notificationabstractcondition["object_type"] = item.GetObjectType()
		notificationabstractconditions = append(notificationabstractconditions, notificationabstractcondition)
	}
	return notificationabstractconditions
}
func flattenListNotificationAction(p []models.NotificationAction, d *schema.ResourceData) []map[string]interface{} {
	var notificationactions []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		notificationaction := make(map[string]interface{})
		notificationaction["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
		notificationaction["class_id"] = item.GetClassId()
		notificationaction["object_type"] = item.GetObjectType()
		notificationactions = append(notificationactions, notificationaction)
	}
	return notificationactions
}
func flattenListNtpAuthNtpServer(p []models.NtpAuthNtpServer, d *schema.ResourceData) []map[string]interface{} {
	var ntpauthntpservers []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		ntpauthntpserver := make(map[string]interface{})
		ntpauthntpserver["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
		ntpauthntpserver["class_id"] = item.GetClassId()
		ntpauthntpserver["key_type"] = item.GetKeyType()
		ntpauthntpserver["object_type"] = item.GetObjectType()
		ntpauthntpserver["server_name"] = item.GetServerName()
		ntpauthntpserver["sym_key_id"] = item.GetSymKeyId()
		ntpauthntpserver["sym_key_value"] = item.GetSymKeyValue()
		ntpauthntpservers = append(ntpauthntpservers, ntpauthntpserver)
	}
	return ntpauthntpservers
}
func flattenListNtpNtpServerRelationship(p []models.NtpNtpServerRelationship, d *schema.ResourceData) []map[string]interface{} {
	var ntpntpserverrelationships []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		item := item.MoMoRef
		ntpntpserverrelationship := flattenMoMoRef(item)
		ntpntpserverrelationships = append(ntpntpserverrelationships, ntpntpserverrelationship)
	}
	return ntpntpserverrelationships
}
func flattenListOnpremImagePackage(p []models.OnpremImagePackage, d *schema.ResourceData) []map[string]interface{} {
	var onpremimagepackages []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		onpremimagepackage := make(map[string]interface{})
		onpremimagepackage["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
		onpremimagepackage["class_id"] = item.GetClassId()
		onpremimagepackage["file_path"] = item.GetFilePath()
		onpremimagepackage["file_sha"] = item.GetFileSha()
		onpremimagepackage["file_size"] = item.GetFileSize()
		onpremimagepackage["file_time"] = item.GetFileTime().String()
		onpremimagepackage["filename"] = item.GetFilename()
		onpremimagepackage["name"] = item.GetName()
		onpremimagepackage["object_type"] = item.GetObjectType()
		onpremimagepackage["package_type"] = item.GetPackageType()
		onpremimagepackage["nr_version"] = item.GetVersion()
		onpremimagepackages = append(onpremimagepackages, onpremimagepackage)
	}
	return onpremimagepackages
}
func flattenListOnpremUpgradeNote(p []models.OnpremUpgradeNote, d *schema.ResourceData) []map[string]interface{} {
	var onpremupgradenotes []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		onpremupgradenote := make(map[string]interface{})
		onpremupgradenote["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
		onpremupgradenote["class_id"] = item.GetClassId()
		onpremupgradenote["message"] = item.GetMessage()
		onpremupgradenote["object_type"] = item.GetObjectType()
		onpremupgradenotes = append(onpremupgradenotes, onpremupgradenote)
	}
	return onpremupgradenotes
}
func flattenListOnpremUpgradePhase(p []models.OnpremUpgradePhase, d *schema.ResourceData) []map[string]interface{} {
	var onpremupgradephases []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		onpremupgradephase := make(map[string]interface{})
		onpremupgradephase["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
		onpremupgradephase["class_id"] = item.GetClassId()
		onpremupgradephase["current_node"] = item.GetCurrentNode()
		onpremupgradephase["current_node_hostname"] = item.GetCurrentNodeHostname()
		onpremupgradephase["elapsed_time"] = item.GetElapsedTime()
		onpremupgradephase["end_time"] = item.GetEndTime().String()
		onpremupgradephase["failed"] = item.GetFailed()
		onpremupgradephase["message"] = item.GetMessage()
		onpremupgradephase["name"] = item.GetName()
		onpremupgradephase["object_type"] = item.GetObjectType()
		onpremupgradephase["retry_count"] = item.GetRetryCount()
		onpremupgradephase["start_time"] = item.GetStartTime().String()
		onpremupgradephase["status"] = item.GetStatus()
		onpremupgradephases = append(onpremupgradephases, onpremupgradephase)
	}
	return onpremupgradephases
}
func flattenListOpenapiApiInfo(p []models.OpenapiApiInfo, d *schema.ResourceData) []map[string]interface{} {
	var openapiapiinfos []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		openapiapiinfo := make(map[string]interface{})
		openapiapiinfo["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
		openapiapiinfo["api_path_object_identifier"] = (func(p models.MoMoRef, d *schema.ResourceData) []map[string]interface{} {
			var momorefs []map[string]interface{}
			var ret models.MoMoRef
			if reflect.DeepEqual(ret, p) {
				return nil
			}
			item := p
			momoref := make(map[string]interface{})
			momoref["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
			momoref["class_id"] = item.GetClassId()
			momoref["moid"] = item.GetMoid()
			momoref["object_type"] = item.GetObjectType()
			momoref["selector"] = item.GetSelector()

			momorefs = append(momorefs, momoref)
			return momorefs
		})(item.GetApiPathObjectIdentifier(), d)
		openapiapiinfo["class_id"] = item.GetClassId()
		openapiapiinfo["description"] = item.GetDescription()
		openapiapiinfo["display_label"] = item.GetDisplayLabel()
		openapiapiinfo["method"] = item.GetMethod()
		openapiapiinfo["name"] = item.GetName()
		openapiapiinfo["object_type"] = item.GetObjectType()
		openapiapiinfo["path"] = item.GetPath()
		openapiapiinfo["validation_error"] = item.GetValidationError()
		openapiapiinfo["validation_status"] = item.GetValidationStatus()
		openapiapiinfos = append(openapiapiinfos, openapiapiinfo)
	}
	return openapiapiinfos
}
func flattenListOpenapiFailedTask(p []models.OpenapiFailedTask, d *schema.ResourceData) []map[string]interface{} {
	var openapifailedtasks []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		openapifailedtask := make(map[string]interface{})
		openapifailedtask["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
		openapifailedtask["class_id"] = item.GetClassId()
		openapifailedtask["name"] = item.GetName()
		openapifailedtask["object_type"] = item.GetObjectType()
		openapifailedtask["path"] = item.GetPath()
		openapifailedtask["reason"] = item.GetReason()
		openapifailedtasks = append(openapifailedtasks, openapifailedtask)
	}
	return openapifailedtasks
}
func flattenListOpenapiKeyValuePair(p []models.OpenapiKeyValuePair, d *schema.ResourceData) []map[string]interface{} {
	var openapikeyvaluepairs []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		openapikeyvaluepair := make(map[string]interface{})
		openapikeyvaluepair["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
		openapikeyvaluepair["class_id"] = item.GetClassId()
		openapikeyvaluepair["key"] = item.GetKey()
		openapikeyvaluepair["object_type"] = item.GetObjectType()
		openapikeyvaluepair["value"] = item.GetValue()
		openapikeyvaluepairs = append(openapikeyvaluepairs, openapikeyvaluepair)
	}
	return openapikeyvaluepairs
}
func flattenListOprsKvpair(p []models.OprsKvpair, d *schema.ResourceData) []map[string]interface{} {
	var oprskvpairs []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		oprskvpair := make(map[string]interface{})
		oprskvpair["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
		oprskvpair["class_id"] = item.GetClassId()
		oprskvpair["key"] = item.GetKey()
		oprskvpair["object_type"] = item.GetObjectType()
		oprskvpair["value"] = item.GetValue()
		oprskvpairs = append(oprskvpairs, oprskvpair)
	}
	return oprskvpairs
}
func flattenListOrganizationOrganizationRelationship(p []models.OrganizationOrganizationRelationship, d *schema.ResourceData) []map[string]interface{} {
	var organizationorganizationrelationships []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		item := item.MoMoRef
		organizationorganizationrelationship := flattenMoMoRef(item)
		organizationorganizationrelationships = append(organizationorganizationrelationships, organizationorganizationrelationship)
	}
	return organizationorganizationrelationships
}
func flattenListOsConfigurationFileRelationship(p []models.OsConfigurationFileRelationship, d *schema.ResourceData) []map[string]interface{} {
	var osconfigurationfilerelationships []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		item := item.MoMoRef
		osconfigurationfilerelationship := flattenMoMoRef(item)
		osconfigurationfilerelationships = append(osconfigurationfilerelationships, osconfigurationfilerelationship)
	}
	return osconfigurationfilerelationships
}
func flattenListOsDistributionRelationship(p []models.OsDistributionRelationship, d *schema.ResourceData) []map[string]interface{} {
	var osdistributionrelationships []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		item := item.MoMoRef
		osdistributionrelationship := flattenMoMoRef(item)
		osdistributionrelationships = append(osdistributionrelationships, osdistributionrelationship)
	}
	return osdistributionrelationships
}
func flattenListOsPlaceHolder(p []models.OsPlaceHolder, d *schema.ResourceData) []map[string]interface{} {
	var osplaceholders []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		osplaceholder := make(map[string]interface{})
		osplaceholder["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
		osplaceholder["class_id"] = item.GetClassId()
		osplaceholder["is_value_set"] = item.GetIsValueSet()
		osplaceholder["object_type"] = item.GetObjectType()
		osplaceholder["type"] = flattenAdditionalProperties(item.Type)
		osplaceholder["value"] = flattenAdditionalProperties(item.Value)
		osplaceholders = append(osplaceholders, osplaceholder)
	}
	return osplaceholders
}
func flattenListOsServerConfig(p []models.OsServerConfig, d *schema.ResourceData) []map[string]interface{} {
	var osserverconfigs []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		osserverconfig := make(map[string]interface{})
		osserverconfig["additional_parameters"] = (func(p []models.OsPlaceHolder, d *schema.ResourceData) []map[string]interface{} {
			var osplaceholders []map[string]interface{}
			if len(p) == 0 {
				return nil
			}
			for _, item := range p {
				osplaceholder := make(map[string]interface{})
				osplaceholder["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
				osplaceholder["class_id"] = item.GetClassId()
				osplaceholder["is_value_set"] = item.GetIsValueSet()
				osplaceholder["object_type"] = item.GetObjectType()
				osplaceholder["type"] = flattenAdditionalProperties(item.Type)
				osplaceholder["value"] = flattenAdditionalProperties(item.Value)
				osplaceholders = append(osplaceholders, osplaceholder)
			}
			return osplaceholders
		})(item.GetAdditionalParameters(), d)
		osserverconfig["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
		osserverconfig["answers"] = (func(p models.OsAnswers, d *schema.ResourceData) []map[string]interface{} {
			var osanswerss []map[string]interface{}
			var ret models.OsAnswers
			if reflect.DeepEqual(ret, p) {
				return nil
			}
			item := p
			osanswers := make(map[string]interface{})
			osanswers["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
			osanswers["alternate_name_servers"] = item.GetAlternateNameServers()
			answer_file_x, exists := d.GetOk("answers")
			if exists && answer_file_x != nil {
				answer_file_y := answer_file_x.([]interface{})[0].(map[string]interface{})
				osanswers["answer_file"] = answer_file_y["answer_file"]
			}
			osanswers["class_id"] = item.GetClassId()
			osanswers["hostname"] = item.GetHostname()
			osanswers["ip_config_type"] = item.GetIpConfigType()
			osanswers["ip_configuration"] = (func(p models.OsIpConfiguration, d *schema.ResourceData) []map[string]interface{} {
				var osipconfigurations []map[string]interface{}
				var ret models.OsIpConfiguration
				if reflect.DeepEqual(ret, p) {
					return nil
				}
				item := p
				osipconfiguration := make(map[string]interface{})
				osipconfiguration["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
				osipconfiguration["class_id"] = item.GetClassId()
				osipconfiguration["object_type"] = item.GetObjectType()

				osipconfigurations = append(osipconfigurations, osipconfiguration)
				return osipconfigurations
			})(item.GetIpConfiguration(), d)
			osanswers["is_answer_file_set"] = item.GetIsAnswerFileSet()
			osanswers["is_root_password_crypted"] = item.GetIsRootPasswordCrypted()
			osanswers["is_root_password_set"] = item.GetIsRootPasswordSet()
			osanswers["nameserver"] = item.GetNameserver()
			osanswers["network_device"] = item.GetNetworkDevice()
			osanswers["object_type"] = item.GetObjectType()
			osanswers["product_key"] = item.GetProductKey()
			root_password_x, exists := d.GetOk("answers")
			if exists && root_password_x != nil {
				root_password_y := root_password_x.([]interface{})[0].(map[string]interface{})
				osanswers["root_password"] = root_password_y["root_password"]
			}
			osanswers["nr_source"] = item.GetSource()

			osanswerss = append(osanswerss, osanswers)
			return osanswerss
		})(item.GetAnswers(), d)
		osserverconfig["class_id"] = item.GetClassId()
		osserverconfig["error_msgs"] = item.GetErrorMsgs()
		osserverconfig["initiator_wwpn"] = item.GetInitiatorWwpn()
		osserverconfig["install_target"] = item.GetInstallTarget()
		osserverconfig["lun_id"] = item.GetLunId()
		osserverconfig["object_type"] = item.GetObjectType()
		osserverconfig["operating_system_parameters"] = (func(p models.OsOperatingSystemParameters, d *schema.ResourceData) []map[string]interface{} {
			var osoperatingsystemparameterss []map[string]interface{}
			var ret models.OsOperatingSystemParameters
			if reflect.DeepEqual(ret, p) {
				return nil
			}
			item := p
			osoperatingsystemparameters := make(map[string]interface{})
			osoperatingsystemparameters["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
			osoperatingsystemparameters["class_id"] = item.GetClassId()
			osoperatingsystemparameters["object_type"] = item.GetObjectType()

			osoperatingsystemparameterss = append(osoperatingsystemparameterss, osoperatingsystemparameters)
			return osoperatingsystemparameterss
		})(item.GetOperatingSystemParameters(), d)
		osserverconfig["processed_install_target"] = (func(p models.OsInstallTarget, d *schema.ResourceData) []map[string]interface{} {
			var osinstalltargets []map[string]interface{}
			var ret models.OsInstallTarget
			if reflect.DeepEqual(ret, p) {
				return nil
			}
			item := p
			osinstalltarget := make(map[string]interface{})
			osinstalltarget["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
			osinstalltarget["class_id"] = item.GetClassId()
			osinstalltarget["object_type"] = item.GetObjectType()

			osinstalltargets = append(osinstalltargets, osinstalltarget)
			return osinstalltargets
		})(item.GetProcessedInstallTarget(), d)
		osserverconfig["serial_number"] = item.GetSerialNumber()
		osserverconfig["target_iqn"] = item.GetTargetIqn()
		osserverconfig["target_wwpn"] = item.GetTargetWwpn()
		osserverconfig["vnic_mac"] = item.GetVnicMac()
		osserverconfigs = append(osserverconfigs, osserverconfig)
	}
	return osserverconfigs
}
func flattenListOsValidationInformation(p []models.OsValidationInformation, d *schema.ResourceData) []map[string]interface{} {
	var osvalidationinformations []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		osvalidationinformation := make(map[string]interface{})
		osvalidationinformation["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
		osvalidationinformation["class_id"] = item.GetClassId()
		osvalidationinformation["error_msg"] = item.GetErrorMsg()
		osvalidationinformation["object_type"] = item.GetObjectType()
		osvalidationinformation["status"] = item.GetStatus()
		osvalidationinformation["step_name"] = item.GetStepName()
		osvalidationinformations = append(osvalidationinformations, osvalidationinformation)
	}
	return osvalidationinformations
}
func flattenListPartnerintegrationDcLogsRelationship(p []models.PartnerintegrationDcLogsRelationship, d *schema.ResourceData) []map[string]interface{} {
	var partnerintegrationdclogsrelationships []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		item := item.MoMoRef
		partnerintegrationdclogsrelationship := flattenMoMoRef(item)
		partnerintegrationdclogsrelationships = append(partnerintegrationdclogsrelationships, partnerintegrationdclogsrelationship)
	}
	return partnerintegrationdclogsrelationships
}
func flattenListPartnerintegrationDocIssuesRelationship(p []models.PartnerintegrationDocIssuesRelationship, d *schema.ResourceData) []map[string]interface{} {
	var partnerintegrationdocissuesrelationships []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		item := item.MoMoRef
		partnerintegrationdocissuesrelationship := flattenMoMoRef(item)
		partnerintegrationdocissuesrelationships = append(partnerintegrationdocissuesrelationships, partnerintegrationdocissuesrelationship)
	}
	return partnerintegrationdocissuesrelationships
}
func flattenListPartnerintegrationEtlRelationship(p []models.PartnerintegrationEtlRelationship, d *schema.ResourceData) []map[string]interface{} {
	var partnerintegrationetlrelationships []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		item := item.MoMoRef
		partnerintegrationetlrelationship := flattenMoMoRef(item)
		partnerintegrationetlrelationships = append(partnerintegrationetlrelationships, partnerintegrationetlrelationship)
	}
	return partnerintegrationetlrelationships
}
func flattenListPartnerintegrationLogsRelationship(p []models.PartnerintegrationLogsRelationship, d *schema.ResourceData) []map[string]interface{} {
	var partnerintegrationlogsrelationships []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		item := item.MoMoRef
		partnerintegrationlogsrelationship := flattenMoMoRef(item)
		partnerintegrationlogsrelationships = append(partnerintegrationlogsrelationships, partnerintegrationlogsrelationship)
	}
	return partnerintegrationlogsrelationships
}
func flattenListPartnerintegrationModelRelationship(p []models.PartnerintegrationModelRelationship, d *schema.ResourceData) []map[string]interface{} {
	var partnerintegrationmodelrelationships []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		item := item.MoMoRef
		partnerintegrationmodelrelationship := flattenMoMoRef(item)
		partnerintegrationmodelrelationships = append(partnerintegrationmodelrelationships, partnerintegrationmodelrelationship)
	}
	return partnerintegrationmodelrelationships
}
func flattenListPciCoprocessorCardRelationship(p []models.PciCoprocessorCardRelationship, d *schema.ResourceData) []map[string]interface{} {
	var pcicoprocessorcardrelationships []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		item := item.MoMoRef
		pcicoprocessorcardrelationship := flattenMoMoRef(item)
		pcicoprocessorcardrelationships = append(pcicoprocessorcardrelationships, pcicoprocessorcardrelationship)
	}
	return pcicoprocessorcardrelationships
}
func flattenListPciDeviceRelationship(p []models.PciDeviceRelationship, d *schema.ResourceData) []map[string]interface{} {
	var pcidevicerelationships []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		item := item.MoMoRef
		pcidevicerelationship := flattenMoMoRef(item)
		pcidevicerelationships = append(pcidevicerelationships, pcidevicerelationship)
	}
	return pcidevicerelationships
}
func flattenListPciLinkRelationship(p []models.PciLinkRelationship, d *schema.ResourceData) []map[string]interface{} {
	var pcilinkrelationships []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		item := item.MoMoRef
		pcilinkrelationship := flattenMoMoRef(item)
		pcilinkrelationships = append(pcilinkrelationships, pcilinkrelationship)
	}
	return pcilinkrelationships
}
func flattenListPciNodeRelationship(p []models.PciNodeRelationship, d *schema.ResourceData) []map[string]interface{} {
	var pcinoderelationships []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		item := item.MoMoRef
		pcinoderelationship := flattenMoMoRef(item)
		pcinoderelationships = append(pcinoderelationships, pcinoderelationship)
	}
	return pcinoderelationships
}
func flattenListPciSwitchRelationship(p []models.PciSwitchRelationship, d *schema.ResourceData) []map[string]interface{} {
	var pciswitchrelationships []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		item := item.MoMoRef
		pciswitchrelationship := flattenMoMoRef(item)
		pciswitchrelationships = append(pciswitchrelationships, pciswitchrelationship)
	}
	return pciswitchrelationships
}
func flattenListPolicyAbstractConfigProfileRelationship(p []models.PolicyAbstractConfigProfileRelationship, d *schema.ResourceData) []map[string]interface{} {
	var policyabstractconfigprofilerelationships []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		item := item.MoMoRef
		policyabstractconfigprofilerelationship := flattenMoMoRef(item)
		policyabstractconfigprofilerelationships = append(policyabstractconfigprofilerelationships, policyabstractconfigprofilerelationship)
	}
	return policyabstractconfigprofilerelationships
}
func flattenListPolicyAbstractPolicyRelationship(p []models.PolicyAbstractPolicyRelationship, d *schema.ResourceData) []map[string]interface{} {
	var policyabstractpolicyrelationships []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		item := item.MoMoRef
		policyabstractpolicyrelationship := flattenMoMoRef(item)
		policyabstractpolicyrelationships = append(policyabstractpolicyrelationships, policyabstractpolicyrelationship)
	}
	return policyabstractpolicyrelationships
}
func flattenListPolicyActionParam(p []models.PolicyActionParam, d *schema.ResourceData) []map[string]interface{} {
	var policyactionparams []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		policyactionparam := make(map[string]interface{})
		policyactionparam["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
		policyactionparam["class_id"] = item.GetClassId()
		policyactionparam["name"] = item.GetName()
		policyactionparam["object_type"] = item.GetObjectType()
		policyactionparam["value"] = item.GetValue()
		policyactionparams = append(policyactionparams, policyactionparam)
	}
	return policyactionparams
}
func flattenListPolicyPolicyStatus(p []models.PolicyPolicyStatus, d *schema.ResourceData) []map[string]interface{} {
	var policypolicystatuss []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		policypolicystatus := make(map[string]interface{})
		policypolicystatus["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
		policypolicystatus["class_id"] = item.GetClassId()
		policypolicystatus["error_messages"] = (func(p []models.PolicyPolicyError, d *schema.ResourceData) []map[string]interface{} {
			var policypolicyerrors []map[string]interface{}
			if len(p) == 0 {
				return nil
			}
			for _, item := range p {
				policypolicyerror := make(map[string]interface{})
				policypolicyerror["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
				policypolicyerror["class_id"] = item.GetClassId()
				policypolicyerror["message"] = item.GetMessage()
				policypolicyerror["object_type"] = item.GetObjectType()
				policypolicyerror["type"] = item.GetType()
				policypolicyerrors = append(policypolicyerrors, policypolicyerror)
			}
			return policypolicyerrors
		})(item.GetErrorMessages(), d)
		policypolicystatus["moid"] = item.GetMoid()
		policypolicystatus["object_type"] = item.GetObjectType()
		policypolicystatus["reason"] = item.GetReason()
		policypolicystatus["status"] = item.GetStatus()
		policypolicystatus["type"] = item.GetType()
		policypolicystatuss = append(policypolicystatuss, policypolicystatus)
	}
	return policypolicystatuss
}
func flattenListPolicyScheduledAction(p []models.PolicyScheduledAction, d *schema.ResourceData) []map[string]interface{} {
	var policyscheduledactions []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		policyscheduledaction := make(map[string]interface{})
		policyscheduledaction["action"] = item.GetAction()
		policyscheduledaction["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
		policyscheduledaction["class_id"] = item.GetClassId()
		policyscheduledaction["object_type"] = item.GetObjectType()
		policyscheduledaction["proceed_on_reboot"] = item.GetProceedOnReboot()
		policyscheduledactions = append(policyscheduledactions, policyscheduledaction)
	}
	return policyscheduledactions
}
func flattenListPoolReservationReference(p []models.PoolReservationReference, d *schema.ResourceData) []map[string]interface{} {
	var poolreservationreferences []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		poolreservationreference := make(map[string]interface{})
		poolreservationreference["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
		poolreservationreference["class_id"] = item.GetClassId()
		poolreservationreference["object_type"] = item.GetObjectType()
		poolreservationreference["reservation_moid"] = item.GetReservationMoid()
		poolreservationreferences = append(poolreservationreferences, poolreservationreference)
	}
	return poolreservationreferences
}
func flattenListPortGroupRelationship(p []models.PortGroupRelationship, d *schema.ResourceData) []map[string]interface{} {
	var portgrouprelationships []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		item := item.MoMoRef
		portgrouprelationship := flattenMoMoRef(item)
		portgrouprelationships = append(portgrouprelationships, portgrouprelationship)
	}
	return portgrouprelationships
}
func flattenListPortMacBindingRelationship(p []models.PortMacBindingRelationship, d *schema.ResourceData) []map[string]interface{} {
	var portmacbindingrelationships []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		item := item.MoMoRef
		portmacbindingrelationship := flattenMoMoRef(item)
		portmacbindingrelationships = append(portmacbindingrelationships, portmacbindingrelationship)
	}
	return portmacbindingrelationships
}
func flattenListPortSubGroupRelationship(p []models.PortSubGroupRelationship, d *schema.ResourceData) []map[string]interface{} {
	var portsubgrouprelationships []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		item := item.MoMoRef
		portsubgrouprelationship := flattenMoMoRef(item)
		portsubgrouprelationships = append(portsubgrouprelationships, portsubgrouprelationship)
	}
	return portsubgrouprelationships
}
func flattenListProcessorUnitRelationship(p []models.ProcessorUnitRelationship, d *schema.ResourceData) []map[string]interface{} {
	var processorunitrelationships []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		item := item.MoMoRef
		processorunitrelationship := flattenMoMoRef(item)
		processorunitrelationships = append(processorunitrelationships, processorunitrelationship)
	}
	return processorunitrelationships
}
func flattenListRackUnitPersonalityRelationship(p []models.RackUnitPersonalityRelationship, d *schema.ResourceData) []map[string]interface{} {
	var rackunitpersonalityrelationships []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		item := item.MoMoRef
		rackunitpersonalityrelationship := flattenMoMoRef(item)
		rackunitpersonalityrelationships = append(rackunitpersonalityrelationships, rackunitpersonalityrelationship)
	}
	return rackunitpersonalityrelationships
}
func flattenListRecommendationHardwareExpansionRequestItemRelationship(p []models.RecommendationHardwareExpansionRequestItemRelationship, d *schema.ResourceData) []map[string]interface{} {
	var recommendationhardwareexpansionrequestitemrelationships []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		item := item.MoMoRef
		recommendationhardwareexpansionrequestitemrelationship := flattenMoMoRef(item)
		recommendationhardwareexpansionrequestitemrelationships = append(recommendationhardwareexpansionrequestitemrelationships, recommendationhardwareexpansionrequestitemrelationship)
	}
	return recommendationhardwareexpansionrequestitemrelationships
}
func flattenListRecommendationPhysicalItemRelationship(p []models.RecommendationPhysicalItemRelationship, d *schema.ResourceData) []map[string]interface{} {
	var recommendationphysicalitemrelationships []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		item := item.MoMoRef
		recommendationphysicalitemrelationship := flattenMoMoRef(item)
		recommendationphysicalitemrelationships = append(recommendationphysicalitemrelationships, recommendationphysicalitemrelationship)
	}
	return recommendationphysicalitemrelationships
}
func flattenListRecommendationSoftwareItemRelationship(p []models.RecommendationSoftwareItemRelationship, d *schema.ResourceData) []map[string]interface{} {
	var recommendationsoftwareitemrelationships []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		item := item.MoMoRef
		recommendationsoftwareitemrelationship := flattenMoMoRef(item)
		recommendationsoftwareitemrelationships = append(recommendationsoftwareitemrelationships, recommendationsoftwareitemrelationship)
	}
	return recommendationsoftwareitemrelationships
}
func flattenListRecoveryBackupProfileRelationship(p []models.RecoveryBackupProfileRelationship, d *schema.ResourceData) []map[string]interface{} {
	var recoverybackupprofilerelationships []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		item := item.MoMoRef
		recoverybackupprofilerelationship := flattenMoMoRef(item)
		recoverybackupprofilerelationships = append(recoverybackupprofilerelationships, recoverybackupprofilerelationship)
	}
	return recoverybackupprofilerelationships
}
func flattenListRecoveryConfigResultEntryRelationship(p []models.RecoveryConfigResultEntryRelationship, d *schema.ResourceData) []map[string]interface{} {
	var recoveryconfigresultentryrelationships []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		item := item.MoMoRef
		recoveryconfigresultentryrelationship := flattenMoMoRef(item)
		recoveryconfigresultentryrelationships = append(recoveryconfigresultentryrelationships, recoveryconfigresultentryrelationship)
	}
	return recoveryconfigresultentryrelationships
}
func flattenListResourceGroupRelationship(p []models.ResourceGroupRelationship, d *schema.ResourceData) []map[string]interface{} {
	var resourcegrouprelationships []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		item := item.MoMoRef
		resourcegrouprelationship := flattenMoMoRef(item)
		resourcegrouprelationships = append(resourcegrouprelationships, resourcegrouprelationship)
	}
	return resourcegrouprelationships
}
func flattenListResourcePerTypeCombinedSelector(p []models.ResourcePerTypeCombinedSelector, d *schema.ResourceData) []map[string]interface{} {
	var resourcepertypecombinedselectors []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		resourcepertypecombinedselector := make(map[string]interface{})
		resourcepertypecombinedselector["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
		resourcepertypecombinedselector["class_id"] = item.GetClassId()
		resourcepertypecombinedselector["combined_selector"] = item.GetCombinedSelector()
		resourcepertypecombinedselector["empty_filter"] = item.GetEmptyFilter()
		resourcepertypecombinedselector["object_type"] = item.GetObjectType()
		resourcepertypecombinedselector["selector_object_type"] = item.GetSelectorObjectType()
		resourcepertypecombinedselectors = append(resourcepertypecombinedselectors, resourcepertypecombinedselector)
	}
	return resourcepertypecombinedselectors
}
func flattenListResourceSelector(p []models.ResourceSelector, d *schema.ResourceData) []map[string]interface{} {
	var resourceselectors []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		resourceselector := make(map[string]interface{})
		resourceselector["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
		resourceselector["class_id"] = item.GetClassId()
		resourceselector["object_type"] = item.GetObjectType()
		resourceselector["selector"] = item.GetSelector()
		resourceselectors = append(resourceselectors, resourceselector)
	}
	return resourceselectors
}
func flattenListResourcepoolPoolRelationship(p []models.ResourcepoolPoolRelationship, d *schema.ResourceData) []map[string]interface{} {
	var resourcepoolpoolrelationships []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		item := item.MoMoRef
		resourcepoolpoolrelationship := flattenMoMoRef(item)
		resourcepoolpoolrelationships = append(resourcepoolpoolrelationships, resourcepoolpoolrelationship)
	}
	return resourcepoolpoolrelationships
}
func flattenListSdcardPartition(p []models.SdcardPartition, d *schema.ResourceData) []map[string]interface{} {
	var sdcardpartitions []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		sdcardpartition := make(map[string]interface{})
		sdcardpartition["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
		sdcardpartition["class_id"] = item.GetClassId()
		sdcardpartition["object_type"] = item.GetObjectType()
		sdcardpartition["type"] = item.GetType()
		sdcardpartition["virtual_drives"] = (func(p []models.SdcardVirtualDrive, d *schema.ResourceData) []map[string]interface{} {
			var sdcardvirtualdrives []map[string]interface{}
			if len(p) == 0 {
				return nil
			}
			for _, item := range p {
				sdcardvirtualdrive := make(map[string]interface{})
				sdcardvirtualdrive["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
				sdcardvirtualdrive["class_id"] = item.GetClassId()
				sdcardvirtualdrive["enable"] = item.GetEnable()
				sdcardvirtualdrive["object_type"] = item.GetObjectType()
				sdcardvirtualdrives = append(sdcardvirtualdrives, sdcardvirtualdrive)
			}
			return sdcardvirtualdrives
		})(item.GetVirtualDrives(), d)
		sdcardpartitions = append(sdcardpartitions, sdcardpartition)
	}
	return sdcardpartitions
}
func flattenListSecurityUnitRelationship(p []models.SecurityUnitRelationship, d *schema.ResourceData) []map[string]interface{} {
	var securityunitrelationships []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		item := item.MoMoRef
		securityunitrelationship := flattenMoMoRef(item)
		securityunitrelationships = append(securityunitrelationships, securityunitrelationship)
	}
	return securityunitrelationships
}
func flattenListServerConfigChangeDetailRelationship(p []models.ServerConfigChangeDetailRelationship, d *schema.ResourceData) []map[string]interface{} {
	var serverconfigchangedetailrelationships []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		item := item.MoMoRef
		serverconfigchangedetailrelationship := flattenMoMoRef(item)
		serverconfigchangedetailrelationships = append(serverconfigchangedetailrelationships, serverconfigchangedetailrelationship)
	}
	return serverconfigchangedetailrelationships
}
func flattenListServerConfigResultEntryRelationship(p []models.ServerConfigResultEntryRelationship, d *schema.ResourceData) []map[string]interface{} {
	var serverconfigresultentryrelationships []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		item := item.MoMoRef
		serverconfigresultentryrelationship := flattenMoMoRef(item)
		serverconfigresultentryrelationships = append(serverconfigresultentryrelationships, serverconfigresultentryrelationship)
	}
	return serverconfigresultentryrelationships
}
func flattenListServiceitemHealthCheckErrorElement(p []models.ServiceitemHealthCheckErrorElement, d *schema.ResourceData) []map[string]interface{} {
	var serviceitemhealthcheckerrorelements []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		serviceitemhealthcheckerrorelement := make(map[string]interface{})
		serviceitemhealthcheckerrorelement["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
		serviceitemhealthcheckerrorelement["class_id"] = item.GetClassId()
		serviceitemhealthcheckerrorelement["element_type"] = item.GetElementType()
		serviceitemhealthcheckerrorelement["elements"] = (func(p []models.MoMoRef, d *schema.ResourceData) []map[string]interface{} {
			var momorefs []map[string]interface{}
			if len(p) == 0 {
				return nil
			}
			for _, item := range p {
				momoref := make(map[string]interface{})
				momoref["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
				momoref["class_id"] = item.GetClassId()
				momoref["moid"] = item.GetMoid()
				momoref["object_type"] = item.GetObjectType()
				momoref["selector"] = item.GetSelector()
				momorefs = append(momorefs, momoref)
			}
			return momorefs
		})(item.GetElements(), d)
		serviceitemhealthcheckerrorelement["object_type"] = item.GetObjectType()
		serviceitemhealthcheckerrorelements = append(serviceitemhealthcheckerrorelements, serviceitemhealthcheckerrorelement)
	}
	return serviceitemhealthcheckerrorelements
}
func flattenListServiceitemMessage(p []models.ServiceitemMessage, d *schema.ResourceData) []map[string]interface{} {
	var serviceitemmessages []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		serviceitemmessage := make(map[string]interface{})
		serviceitemmessage["action_operation"] = item.GetActionOperation()
		serviceitemmessage["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
		serviceitemmessage["class_id"] = item.GetClassId()
		serviceitemmessage["create_time"] = item.GetCreateTime().String()
		serviceitemmessage["message"] = item.GetMessage()
		serviceitemmessage["object_type"] = item.GetObjectType()
		serviceitemmessage["severity"] = item.GetSeverity()
		serviceitemmessages = append(serviceitemmessages, serviceitemmessage)
	}
	return serviceitemmessages
}
func flattenListServiceitemSelectionCriteriaInput(p []models.ServiceitemSelectionCriteriaInput, d *schema.ResourceData) []map[string]interface{} {
	var serviceitemselectioncriteriainputs []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		serviceitemselectioncriteriainput := make(map[string]interface{})
		serviceitemselectioncriteriainput["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
		serviceitemselectioncriteriainput["class_id"] = item.GetClassId()
		serviceitemselectioncriteriainput["filter_conditions"] = (func(p []models.ResourceSelector, d *schema.ResourceData) []map[string]interface{} {
			var resourceselectors []map[string]interface{}
			if len(p) == 0 {
				return nil
			}
			for _, item := range p {
				resourceselector := make(map[string]interface{})
				resourceselector["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
				resourceselector["class_id"] = item.GetClassId()
				resourceselector["object_type"] = item.GetObjectType()
				resourceselector["selector"] = item.GetSelector()
				resourceselectors = append(resourceselectors, resourceselector)
			}
			return resourceselectors
		})(item.GetFilterConditions(), d)
		serviceitemselectioncriteriainput["input_name"] = item.GetInputName()
		serviceitemselectioncriteriainput["input_value"] = flattenAdditionalProperties(item.InputValue)
		serviceitemselectioncriteriainput["object_type"] = item.GetObjectType()
		serviceitemselectioncriteriainputs = append(serviceitemselectioncriteriainputs, serviceitemselectioncriteriainput)
	}
	return serviceitemselectioncriteriainputs
}
func flattenListServicerequestMessage(p []models.ServicerequestMessage, d *schema.ResourceData) []map[string]interface{} {
	var servicerequestmessages []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		servicerequestmessage := make(map[string]interface{})
		servicerequestmessage["action_operation"] = item.GetActionOperation()
		servicerequestmessage["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
		servicerequestmessage["class_id"] = item.GetClassId()
		servicerequestmessage["create_time"] = item.GetCreateTime().String()
		servicerequestmessage["message"] = item.GetMessage()
		servicerequestmessage["object_type"] = item.GetObjectType()
		servicerequestmessage["service_item_name"] = item.GetServiceItemName()
		servicerequestmessage["severity"] = item.GetSeverity()
		servicerequestmessages = append(servicerequestmessages, servicerequestmessage)
	}
	return servicerequestmessages
}
func flattenListSnmpTrap(p []models.SnmpTrap, d *schema.ResourceData) []map[string]interface{} {
	var snmptraps []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		snmptrap := make(map[string]interface{})
		snmptrap["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
		snmptrap["class_id"] = item.GetClassId()
		snmptrap["community"] = item.GetCommunity()
		snmptrap["destination"] = item.GetDestination()
		snmptrap["enabled"] = item.GetEnabled()
		snmptrap["object_type"] = item.GetObjectType()
		snmptrap["port"] = item.GetPort()
		snmptrap["security_level"] = item.GetSecurityLevel()
		snmptrap["type"] = item.GetType()
		snmptrap["user"] = item.GetUser()
		snmptrap["nr_version"] = item.GetVersion()
		snmptrap["vrf_name"] = item.GetVrfName()
		snmptraps = append(snmptraps, snmptrap)
	}
	return snmptraps
}
func flattenListSnmpUser(p []models.SnmpUser, d *schema.ResourceData) []map[string]interface{} {
	var snmpusers []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		snmpuser := make(map[string]interface{})
		snmpuser["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
		auth_password_x, exists := d.GetOk("snmp_users")
		if exists && auth_password_x != nil {
			snmpuser["auth_password"] = auth_password_x.([]interface{})[len(snmpusers)].(map[string]interface{})["auth_password"]
		}
		snmpuser["auth_type"] = item.GetAuthType()
		snmpuser["class_id"] = item.GetClassId()
		snmpuser["is_auth_password_set"] = item.GetIsAuthPasswordSet()
		snmpuser["is_privacy_password_set"] = item.GetIsPrivacyPasswordSet()
		snmpuser["name"] = item.GetName()
		snmpuser["object_type"] = item.GetObjectType()
		privacy_password_x, exists := d.GetOk("snmp_users")
		if exists && privacy_password_x != nil {
			snmpuser["privacy_password"] = privacy_password_x.([]interface{})[len(snmpusers)].(map[string]interface{})["privacy_password"]
		}
		snmpuser["privacy_type"] = item.GetPrivacyType()
		snmpuser["security_level"] = item.GetSecurityLevel()
		snmpusers = append(snmpusers, snmpuser)
	}
	return snmpusers
}
func flattenListSoftwareHciDistributableRelationship(p []models.SoftwareHciDistributableRelationship, d *schema.ResourceData) []map[string]interface{} {
	var softwarehcidistributablerelationships []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		item := item.MoMoRef
		softwarehcidistributablerelationship := flattenMoMoRef(item)
		softwarehcidistributablerelationships = append(softwarehcidistributablerelationships, softwarehcidistributablerelationship)
	}
	return softwarehcidistributablerelationships
}
func flattenListSoftwareHyperflexDistributableRelationship(p []models.SoftwareHyperflexDistributableRelationship, d *schema.ResourceData) []map[string]interface{} {
	var softwarehyperflexdistributablerelationships []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		item := item.MoMoRef
		softwarehyperflexdistributablerelationship := flattenMoMoRef(item)
		softwarehyperflexdistributablerelationships = append(softwarehyperflexdistributablerelationships, softwarehyperflexdistributablerelationship)
	}
	return softwarehyperflexdistributablerelationships
}
func flattenListSoftwareSolutionDistributableRelationship(p []models.SoftwareSolutionDistributableRelationship, d *schema.ResourceData) []map[string]interface{} {
	var softwaresolutiondistributablerelationships []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		item := item.MoMoRef
		softwaresolutiondistributablerelationship := flattenMoMoRef(item)
		softwaresolutiondistributablerelationships = append(softwaresolutiondistributablerelationships, softwaresolutiondistributablerelationship)
	}
	return softwaresolutiondistributablerelationships
}
func flattenListSoftwareUcsdDistributableRelationship(p []models.SoftwareUcsdDistributableRelationship, d *schema.ResourceData) []map[string]interface{} {
	var softwareucsddistributablerelationships []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		item := item.MoMoRef
		softwareucsddistributablerelationship := flattenMoMoRef(item)
		softwareucsddistributablerelationships = append(softwareucsddistributablerelationships, softwareucsddistributablerelationship)
	}
	return softwareucsddistributablerelationships
}
func flattenListSoftwarerepositoryConstraintModels(p []models.SoftwarerepositoryConstraintModels, d *schema.ResourceData) []map[string]interface{} {
	var softwarerepositoryconstraintmodelss []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		softwarerepositoryconstraintmodels := make(map[string]interface{})
		softwarerepositoryconstraintmodels["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
		softwarerepositoryconstraintmodels["class_id"] = item.GetClassId()
		softwarerepositoryconstraintmodels["min_version"] = item.GetMinVersion()
		softwarerepositoryconstraintmodels["name"] = item.GetName()
		softwarerepositoryconstraintmodels["object_type"] = item.GetObjectType()
		softwarerepositoryconstraintmodels["platform_regex"] = item.GetPlatformRegex()
		softwarerepositoryconstraintmodels["supported_models"] = item.GetSupportedModels()
		softwarerepositoryconstraintmodelss = append(softwarerepositoryconstraintmodelss, softwarerepositoryconstraintmodels)
	}
	return softwarerepositoryconstraintmodelss
}
func flattenListSoftwarerepositoryUnsupportedModelConstraint(p []models.SoftwarerepositoryUnsupportedModelConstraint, d *schema.ResourceData) []map[string]interface{} {
	var softwarerepositoryunsupportedmodelconstraints []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		softwarerepositoryunsupportedmodelconstraint := make(map[string]interface{})
		softwarerepositoryunsupportedmodelconstraint["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
		softwarerepositoryunsupportedmodelconstraint["class_id"] = item.GetClassId()
		softwarerepositoryunsupportedmodelconstraint["max_version"] = item.GetMaxVersion()
		softwarerepositoryunsupportedmodelconstraint["name"] = item.GetName()
		softwarerepositoryunsupportedmodelconstraint["object_type"] = item.GetObjectType()
		softwarerepositoryunsupportedmodelconstraint["platform_regex"] = item.GetPlatformRegex()
		softwarerepositoryunsupportedmodelconstraint["unsupported_models"] = item.GetUnsupportedModels()
		softwarerepositoryunsupportedmodelconstraints = append(softwarerepositoryunsupportedmodelconstraints, softwarerepositoryunsupportedmodelconstraint)
	}
	return softwarerepositoryunsupportedmodelconstraints
}
func flattenListStorageBaseClusterRelationship(p []models.StorageBaseClusterRelationship, d *schema.ResourceData) []map[string]interface{} {
	var storagebaseclusterrelationships []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		item := item.MoMoRef
		storagebaseclusterrelationship := flattenMoMoRef(item)
		storagebaseclusterrelationships = append(storagebaseclusterrelationships, storagebaseclusterrelationship)
	}
	return storagebaseclusterrelationships
}
func flattenListStorageBaseInitiator(p []models.StorageBaseInitiator, d *schema.ResourceData) []map[string]interface{} {
	var storagebaseinitiators []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		storagebaseinitiator := make(map[string]interface{})
		storagebaseinitiator["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
		storagebaseinitiator["class_id"] = item.GetClassId()
		storagebaseinitiator["iqn"] = item.GetIqn()
		storagebaseinitiator["name"] = item.GetName()
		storagebaseinitiator["nqn"] = item.GetNqn()
		storagebaseinitiator["object_type"] = item.GetObjectType()
		storagebaseinitiator["type"] = item.GetType()
		storagebaseinitiator["wwn"] = item.GetWwn()
		storagebaseinitiators = append(storagebaseinitiators, storagebaseinitiator)
	}
	return storagebaseinitiators
}
func flattenListStorageControllerRelationship(p []models.StorageControllerRelationship, d *schema.ResourceData) []map[string]interface{} {
	var storagecontrollerrelationships []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		item := item.MoMoRef
		storagecontrollerrelationship := flattenMoMoRef(item)
		storagecontrollerrelationships = append(storagecontrollerrelationships, storagecontrollerrelationship)
	}
	return storagecontrollerrelationships
}
func flattenListStorageControllerDriveRelationship(p []models.StorageControllerDriveRelationship, d *schema.ResourceData) []map[string]interface{} {
	var storagecontrollerdriverelationships []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		item := item.MoMoRef
		storagecontrollerdriverelationship := flattenMoMoRef(item)
		storagecontrollerdriverelationships = append(storagecontrollerdriverelationships, storagecontrollerdriverelationship)
	}
	return storagecontrollerdriverelationships
}
func flattenListStorageDiskGroupRelationship(p []models.StorageDiskGroupRelationship, d *schema.ResourceData) []map[string]interface{} {
	var storagediskgrouprelationships []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		item := item.MoMoRef
		storagediskgrouprelationship := flattenMoMoRef(item)
		storagediskgrouprelationships = append(storagediskgrouprelationships, storagediskgrouprelationship)
	}
	return storagediskgrouprelationships
}
func flattenListStorageDiskSlotRelationship(p []models.StorageDiskSlotRelationship, d *schema.ResourceData) []map[string]interface{} {
	var storagediskslotrelationships []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		item := item.MoMoRef
		storagediskslotrelationship := flattenMoMoRef(item)
		storagediskslotrelationships = append(storagediskslotrelationships, storagediskslotrelationship)
	}
	return storagediskslotrelationships
}
func flattenListStorageDriveGroupRelationship(p []models.StorageDriveGroupRelationship, d *schema.ResourceData) []map[string]interface{} {
	var storagedrivegrouprelationships []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		item := item.MoMoRef
		storagedrivegrouprelationship := flattenMoMoRef(item)
		storagedrivegrouprelationships = append(storagedrivegrouprelationships, storagedrivegrouprelationship)
	}
	return storagedrivegrouprelationships
}
func flattenListStorageEnclosureRelationship(p []models.StorageEnclosureRelationship, d *schema.ResourceData) []map[string]interface{} {
	var storageenclosurerelationships []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		item := item.MoMoRef
		storageenclosurerelationship := flattenMoMoRef(item)
		storageenclosurerelationships = append(storageenclosurerelationships, storageenclosurerelationship)
	}
	return storageenclosurerelationships
}
func flattenListStorageEnclosureDiskRelationship(p []models.StorageEnclosureDiskRelationship, d *schema.ResourceData) []map[string]interface{} {
	var storageenclosurediskrelationships []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		item := item.MoMoRef
		storageenclosurediskrelationship := flattenMoMoRef(item)
		storageenclosurediskrelationships = append(storageenclosurediskrelationships, storageenclosurediskrelationship)
	}
	return storageenclosurediskrelationships
}
func flattenListStorageEnclosureDiskSlotEpRelationship(p []models.StorageEnclosureDiskSlotEpRelationship, d *schema.ResourceData) []map[string]interface{} {
	var storageenclosuredisksloteprelationships []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		item := item.MoMoRef
		storageenclosuredisksloteprelationship := flattenMoMoRef(item)
		storageenclosuredisksloteprelationships = append(storageenclosuredisksloteprelationships, storageenclosuredisksloteprelationship)
	}
	return storageenclosuredisksloteprelationships
}
func flattenListStorageExternalParityGroup(p []models.StorageExternalParityGroup, d *schema.ResourceData) []map[string]interface{} {
	var storageexternalparitygroups []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		storageexternalparitygroup := make(map[string]interface{})
		storageexternalparitygroup["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
		storageexternalparitygroup["cache_mode"] = item.GetCacheMode()
		storageexternalparitygroup["class_id"] = item.GetClassId()
		storageexternalparitygroup["external_luns"] = (func(p []models.StorageExternalLun, d *schema.ResourceData) []map[string]interface{} {
			var storageexternalluns []map[string]interface{}
			if len(p) == 0 {
				return nil
			}
			for _, item := range p {
				storageexternallun := make(map[string]interface{})
				storageexternallun["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
				storageexternallun["class_id"] = item.GetClassId()
				storageexternallun["external_lun"] = item.GetExternalLun()
				storageexternallun["external_wwn"] = item.GetExternalWwn()
				storageexternallun["object_type"] = item.GetObjectType()
				storageexternallun["path_status"] = item.GetPathStatus()
				storageexternallun["port_id"] = item.GetPortId()
				storageexternallun["priority"] = item.GetPriority()
				storageexternalluns = append(storageexternalluns, storageexternallun)
			}
			return storageexternalluns
		})(item.GetExternalLuns(), d)
		storageexternalparitygroup["external_parity_group_id"] = item.GetExternalParityGroupId()
		storageexternalparitygroup["external_parity_group_status"] = item.GetExternalParityGroupStatus()
		storageexternalparitygroup["is_data_direct_mapping"] = item.GetIsDataDirectMapping()
		storageexternalparitygroup["is_inflow_control_enabled"] = item.GetIsInflowControlEnabled()
		storageexternalparitygroup["load_balance_mode"] = item.GetLoadBalanceMode()
		storageexternalparitygroup["mp_blade_id"] = item.GetMpBladeId()
		storageexternalparitygroup["object_type"] = item.GetObjectType()
		storageexternalparitygroup["path_mode"] = item.GetPathMode()
		storageexternalparitygroups = append(storageexternalparitygroups, storageexternalparitygroup)
	}
	return storageexternalparitygroups
}
func flattenListStorageExternalPath(p []models.StorageExternalPath, d *schema.ResourceData) []map[string]interface{} {
	var storageexternalpaths []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		storageexternalpath := make(map[string]interface{})
		storageexternalpath["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
		storageexternalpath["blocked_path_monitoring"] = item.GetBlockedPathMonitoring()
		storageexternalpath["class_id"] = item.GetClassId()
		storageexternalpath["external_wwn"] = item.GetExternalWwn()
		storageexternalpath["io_time_out"] = item.GetIoTimeOut()
		storageexternalpath["object_type"] = item.GetObjectType()
		storageexternalpath["port_id"] = item.GetPortId()
		storageexternalpath["queue_depth"] = item.GetQueueDepth()
		storageexternalpaths = append(storageexternalpaths, storageexternalpath)
	}
	return storageexternalpaths
}
func flattenListStorageFileItemRelationship(p []models.StorageFileItemRelationship, d *schema.ResourceData) []map[string]interface{} {
	var storagefileitemrelationships []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		item := item.MoMoRef
		storagefileitemrelationship := flattenMoMoRef(item)
		storagefileitemrelationships = append(storagefileitemrelationships, storagefileitemrelationship)
	}
	return storagefileitemrelationships
}
func flattenListStorageFlexFlashControllerRelationship(p []models.StorageFlexFlashControllerRelationship, d *schema.ResourceData) []map[string]interface{} {
	var storageflexflashcontrollerrelationships []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		item := item.MoMoRef
		storageflexflashcontrollerrelationship := flattenMoMoRef(item)
		storageflexflashcontrollerrelationships = append(storageflexflashcontrollerrelationships, storageflexflashcontrollerrelationship)
	}
	return storageflexflashcontrollerrelationships
}
func flattenListStorageFlexFlashControllerPropsRelationship(p []models.StorageFlexFlashControllerPropsRelationship, d *schema.ResourceData) []map[string]interface{} {
	var storageflexflashcontrollerpropsrelationships []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		item := item.MoMoRef
		storageflexflashcontrollerpropsrelationship := flattenMoMoRef(item)
		storageflexflashcontrollerpropsrelationships = append(storageflexflashcontrollerpropsrelationships, storageflexflashcontrollerpropsrelationship)
	}
	return storageflexflashcontrollerpropsrelationships
}
func flattenListStorageFlexFlashPhysicalDriveRelationship(p []models.StorageFlexFlashPhysicalDriveRelationship, d *schema.ResourceData) []map[string]interface{} {
	var storageflexflashphysicaldriverelationships []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		item := item.MoMoRef
		storageflexflashphysicaldriverelationship := flattenMoMoRef(item)
		storageflexflashphysicaldriverelationships = append(storageflexflashphysicaldriverelationships, storageflexflashphysicaldriverelationship)
	}
	return storageflexflashphysicaldriverelationships
}
func flattenListStorageFlexFlashVirtualDriveRelationship(p []models.StorageFlexFlashVirtualDriveRelationship, d *schema.ResourceData) []map[string]interface{} {
	var storageflexflashvirtualdriverelationships []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		item := item.MoMoRef
		storageflexflashvirtualdriverelationship := flattenMoMoRef(item)
		storageflexflashvirtualdriverelationships = append(storageflexflashvirtualdriverelationships, storageflexflashvirtualdriverelationship)
	}
	return storageflexflashvirtualdriverelationships
}
func flattenListStorageFlexUtilControllerRelationship(p []models.StorageFlexUtilControllerRelationship, d *schema.ResourceData) []map[string]interface{} {
	var storageflexutilcontrollerrelationships []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		item := item.MoMoRef
		storageflexutilcontrollerrelationship := flattenMoMoRef(item)
		storageflexutilcontrollerrelationships = append(storageflexutilcontrollerrelationships, storageflexutilcontrollerrelationship)
	}
	return storageflexutilcontrollerrelationships
}
func flattenListStorageFlexUtilPhysicalDriveRelationship(p []models.StorageFlexUtilPhysicalDriveRelationship, d *schema.ResourceData) []map[string]interface{} {
	var storageflexutilphysicaldriverelationships []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		item := item.MoMoRef
		storageflexutilphysicaldriverelationship := flattenMoMoRef(item)
		storageflexutilphysicaldriverelationships = append(storageflexutilphysicaldriverelationships, storageflexutilphysicaldriverelationship)
	}
	return storageflexutilphysicaldriverelationships
}
func flattenListStorageFlexUtilVirtualDriveRelationship(p []models.StorageFlexUtilVirtualDriveRelationship, d *schema.ResourceData) []map[string]interface{} {
	var storageflexutilvirtualdriverelationships []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		item := item.MoMoRef
		storageflexutilvirtualdriverelationship := flattenMoMoRef(item)
		storageflexutilvirtualdriverelationships = append(storageflexutilvirtualdriverelationships, storageflexutilvirtualdriverelationship)
	}
	return storageflexutilvirtualdriverelationships
}
func flattenListStorageHitachiParityGroupRelationship(p []models.StorageHitachiParityGroupRelationship, d *schema.ResourceData) []map[string]interface{} {
	var storagehitachiparitygrouprelationships []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		item := item.MoMoRef
		storagehitachiparitygrouprelationship := flattenMoMoRef(item)
		storagehitachiparitygrouprelationships = append(storagehitachiparitygrouprelationships, storagehitachiparitygrouprelationship)
	}
	return storagehitachiparitygrouprelationships
}
func flattenListStorageHyperFlexIscsiInitiator(p []models.StorageHyperFlexIscsiInitiator, d *schema.ResourceData) []map[string]interface{} {
	var storagehyperflexiscsiinitiators []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		storagehyperflexiscsiinitiator := make(map[string]interface{})
		storagehyperflexiscsiinitiator["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
		storagehyperflexiscsiinitiator["class_id"] = item.GetClassId()
		storagehyperflexiscsiinitiator["ip_addresses"] = item.GetIpAddresses()
		storagehyperflexiscsiinitiator["iqn"] = item.GetIqn()
		storagehyperflexiscsiinitiator["name"] = item.GetName()
		storagehyperflexiscsiinitiator["nqn"] = item.GetNqn()
		storagehyperflexiscsiinitiator["object_type"] = item.GetObjectType()
		storagehyperflexiscsiinitiator["type"] = item.GetType()
		storagehyperflexiscsiinitiator["wwn"] = item.GetWwn()
		storagehyperflexiscsiinitiators = append(storagehyperflexiscsiinitiators, storagehyperflexiscsiinitiator)
	}
	return storagehyperflexiscsiinitiators
}
func flattenListStorageHyperFlexStorageContainerRelationship(p []models.StorageHyperFlexStorageContainerRelationship, d *schema.ResourceData) []map[string]interface{} {
	var storagehyperflexstoragecontainerrelationships []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		item := item.MoMoRef
		storagehyperflexstoragecontainerrelationship := flattenMoMoRef(item)
		storagehyperflexstoragecontainerrelationships = append(storagehyperflexstoragecontainerrelationships, storagehyperflexstoragecontainerrelationship)
	}
	return storagehyperflexstoragecontainerrelationships
}
func flattenListStorageHyperFlexVolumeRelationship(p []models.StorageHyperFlexVolumeRelationship, d *schema.ResourceData) []map[string]interface{} {
	var storagehyperflexvolumerelationships []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		item := item.MoMoRef
		storagehyperflexvolumerelationship := flattenMoMoRef(item)
		storagehyperflexvolumerelationships = append(storagehyperflexvolumerelationships, storagehyperflexvolumerelationship)
	}
	return storagehyperflexvolumerelationships
}
func flattenListStorageInternalMoPhysicalDiskConfig(p []models.StorageInternalMoPhysicalDiskConfig, d *schema.ResourceData) []map[string]interface{} {
	var storageinternalmophysicaldiskconfigs []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		storageinternalmophysicaldiskconfig := make(map[string]interface{})
		storageinternalmophysicaldiskconfig["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
		storageinternalmophysicaldiskconfig["class_id"] = item.GetClassId()
		storageinternalmophysicaldiskconfig["encryption_op"] = item.GetEncryptionOp()
		storageinternalmophysicaldiskconfig["object_type"] = item.GetObjectType()
		storageinternalmophysicaldiskconfig["slot"] = item.GetSlot()
		storageinternalmophysicaldiskconfig["state"] = item.GetState()
		storageinternalmophysicaldiskconfigs = append(storageinternalmophysicaldiskconfigs, storageinternalmophysicaldiskconfig)
	}
	return storageinternalmophysicaldiskconfigs
}
func flattenListStorageItemRelationship(p []models.StorageItemRelationship, d *schema.ResourceData) []map[string]interface{} {
	var storageitemrelationships []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		item := item.MoMoRef
		storageitemrelationship := flattenMoMoRef(item)
		storageitemrelationships = append(storageitemrelationships, storageitemrelationship)
	}
	return storageitemrelationships
}
func flattenListStorageNetAppAggregateRelationship(p []models.StorageNetAppAggregateRelationship, d *schema.ResourceData) []map[string]interface{} {
	var storagenetappaggregaterelationships []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		item := item.MoMoRef
		storagenetappaggregaterelationship := flattenMoMoRef(item)
		storagenetappaggregaterelationships = append(storagenetappaggregaterelationships, storagenetappaggregaterelationship)
	}
	return storagenetappaggregaterelationships
}
func flattenListStorageNetAppAggregateEventRelationship(p []models.StorageNetAppAggregateEventRelationship, d *schema.ResourceData) []map[string]interface{} {
	var storagenetappaggregateeventrelationships []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		item := item.MoMoRef
		storagenetappaggregateeventrelationship := flattenMoMoRef(item)
		storagenetappaggregateeventrelationships = append(storagenetappaggregateeventrelationships, storagenetappaggregateeventrelationship)
	}
	return storagenetappaggregateeventrelationships
}
func flattenListStorageNetAppCifsAcl(p []models.StorageNetAppCifsAcl, d *schema.ResourceData) []map[string]interface{} {
	var storagenetappcifsacls []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		storagenetappcifsacl := make(map[string]interface{})
		storagenetappcifsacl["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
		storagenetappcifsacl["class_id"] = item.GetClassId()
		storagenetappcifsacl["object_type"] = item.GetObjectType()
		storagenetappcifsacl["permission"] = item.GetPermission()
		storagenetappcifsacl["type"] = item.GetType()
		storagenetappcifsacl["user_or_group"] = item.GetUserOrGroup()
		storagenetappcifsacls = append(storagenetappcifsacls, storagenetappcifsacl)
	}
	return storagenetappcifsacls
}
func flattenListStorageNetAppClusterEventRelationship(p []models.StorageNetAppClusterEventRelationship, d *schema.ResourceData) []map[string]interface{} {
	var storagenetappclustereventrelationships []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		item := item.MoMoRef
		storagenetappclustereventrelationship := flattenMoMoRef(item)
		storagenetappclustereventrelationships = append(storagenetappclustereventrelationships, storagenetappclustereventrelationship)
	}
	return storagenetappclustereventrelationships
}
func flattenListStorageNetAppDataIpInterfaceEventRelationship(p []models.StorageNetAppDataIpInterfaceEventRelationship, d *schema.ResourceData) []map[string]interface{} {
	var storagenetappdataipinterfaceeventrelationships []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		item := item.MoMoRef
		storagenetappdataipinterfaceeventrelationship := flattenMoMoRef(item)
		storagenetappdataipinterfaceeventrelationships = append(storagenetappdataipinterfaceeventrelationships, storagenetappdataipinterfaceeventrelationship)
	}
	return storagenetappdataipinterfaceeventrelationships
}
func flattenListStorageNetAppDiskEventRelationship(p []models.StorageNetAppDiskEventRelationship, d *schema.ResourceData) []map[string]interface{} {
	var storagenetappdiskeventrelationships []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		item := item.MoMoRef
		storagenetappdiskeventrelationship := flattenMoMoRef(item)
		storagenetappdiskeventrelationships = append(storagenetappdiskeventrelationships, storagenetappdiskeventrelationship)
	}
	return storagenetappdiskeventrelationships
}
func flattenListStorageNetAppEthernetPortEventRelationship(p []models.StorageNetAppEthernetPortEventRelationship, d *schema.ResourceData) []map[string]interface{} {
	var storagenetappethernetporteventrelationships []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		item := item.MoMoRef
		storagenetappethernetporteventrelationship := flattenMoMoRef(item)
		storagenetappethernetporteventrelationships = append(storagenetappethernetporteventrelationships, storagenetappethernetporteventrelationship)
	}
	return storagenetappethernetporteventrelationships
}
func flattenListStorageNetAppExportPolicyRule(p []models.StorageNetAppExportPolicyRule, d *schema.ResourceData) []map[string]interface{} {
	var storagenetappexportpolicyrules []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		storagenetappexportpolicyrule := make(map[string]interface{})
		storagenetappexportpolicyrule["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
		storagenetappexportpolicyrule["class_id"] = item.GetClassId()
		storagenetappexportpolicyrule["client_match"] = item.GetClientMatch()
		storagenetappexportpolicyrule["index"] = item.GetIndex()
		storagenetappexportpolicyrule["object_type"] = item.GetObjectType()
		storagenetappexportpolicyrule["protocols"] = item.GetProtocols()
		storagenetappexportpolicyrule["ro_rule"] = item.GetRoRule()
		storagenetappexportpolicyrule["rw_rule"] = item.GetRwRule()
		storagenetappexportpolicyrule["super_user"] = item.GetSuperUser()
		storagenetappexportpolicyrule["user"] = item.GetUser()
		storagenetappexportpolicyrules = append(storagenetappexportpolicyrules, storagenetappexportpolicyrule)
	}
	return storagenetappexportpolicyrules
}
func flattenListStorageNetAppFcInterfaceEventRelationship(p []models.StorageNetAppFcInterfaceEventRelationship, d *schema.ResourceData) []map[string]interface{} {
	var storagenetappfcinterfaceeventrelationships []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		item := item.MoMoRef
		storagenetappfcinterfaceeventrelationship := flattenMoMoRef(item)
		storagenetappfcinterfaceeventrelationships = append(storagenetappfcinterfaceeventrelationships, storagenetappfcinterfaceeventrelationship)
	}
	return storagenetappfcinterfaceeventrelationships
}
func flattenListStorageNetAppFcPortEventRelationship(p []models.StorageNetAppFcPortEventRelationship, d *schema.ResourceData) []map[string]interface{} {
	var storagenetappfcporteventrelationships []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		item := item.MoMoRef
		storagenetappfcporteventrelationship := flattenMoMoRef(item)
		storagenetappfcporteventrelationships = append(storagenetappfcporteventrelationships, storagenetappfcporteventrelationship)
	}
	return storagenetappfcporteventrelationships
}
func flattenListStorageNetAppInitiatorGroupRelationship(p []models.StorageNetAppInitiatorGroupRelationship, d *schema.ResourceData) []map[string]interface{} {
	var storagenetappinitiatorgrouprelationships []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		item := item.MoMoRef
		storagenetappinitiatorgrouprelationship := flattenMoMoRef(item)
		storagenetappinitiatorgrouprelationships = append(storagenetappinitiatorgrouprelationships, storagenetappinitiatorgrouprelationship)
	}
	return storagenetappinitiatorgrouprelationships
}
func flattenListStorageNetAppIpInterfaceEventRelationship(p []models.StorageNetAppIpInterfaceEventRelationship, d *schema.ResourceData) []map[string]interface{} {
	var storagenetappipinterfaceeventrelationships []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		item := item.MoMoRef
		storagenetappipinterfaceeventrelationship := flattenMoMoRef(item)
		storagenetappipinterfaceeventrelationships = append(storagenetappipinterfaceeventrelationships, storagenetappipinterfaceeventrelationship)
	}
	return storagenetappipinterfaceeventrelationships
}
func flattenListStorageNetAppLunEventRelationship(p []models.StorageNetAppLunEventRelationship, d *schema.ResourceData) []map[string]interface{} {
	var storagenetappluneventrelationships []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		item := item.MoMoRef
		storagenetappluneventrelationship := flattenMoMoRef(item)
		storagenetappluneventrelationships = append(storagenetappluneventrelationships, storagenetappluneventrelationship)
	}
	return storagenetappluneventrelationships
}
func flattenListStorageNetAppNodeEventRelationship(p []models.StorageNetAppNodeEventRelationship, d *schema.ResourceData) []map[string]interface{} {
	var storagenetappnodeeventrelationships []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		item := item.MoMoRef
		storagenetappnodeeventrelationship := flattenMoMoRef(item)
		storagenetappnodeeventrelationships = append(storagenetappnodeeventrelationships, storagenetappnodeeventrelationship)
	}
	return storagenetappnodeeventrelationships
}
func flattenListStorageNetAppNonDataIpInterfaceEventRelationship(p []models.StorageNetAppNonDataIpInterfaceEventRelationship, d *schema.ResourceData) []map[string]interface{} {
	var storagenetappnondataipinterfaceeventrelationships []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		item := item.MoMoRef
		storagenetappnondataipinterfaceeventrelationship := flattenMoMoRef(item)
		storagenetappnondataipinterfaceeventrelationships = append(storagenetappnondataipinterfaceeventrelationships, storagenetappnondataipinterfaceeventrelationship)
	}
	return storagenetappnondataipinterfaceeventrelationships
}
func flattenListStorageNetAppSnapshotPolicySchedule(p []models.StorageNetAppSnapshotPolicySchedule, d *schema.ResourceData) []map[string]interface{} {
	var storagenetappsnapshotpolicyschedules []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		storagenetappsnapshotpolicyschedule := make(map[string]interface{})
		storagenetappsnapshotpolicyschedule["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
		storagenetappsnapshotpolicyschedule["class_id"] = item.GetClassId()
		storagenetappsnapshotpolicyschedule["nr_count"] = item.GetCount()
		storagenetappsnapshotpolicyschedule["label"] = item.GetLabel()
		storagenetappsnapshotpolicyschedule["object_type"] = item.GetObjectType()
		storagenetappsnapshotpolicyschedule["schedule_name"] = item.GetScheduleName()
		storagenetappsnapshotpolicyschedules = append(storagenetappsnapshotpolicyschedules, storagenetappsnapshotpolicyschedule)
	}
	return storagenetappsnapshotpolicyschedules
}
func flattenListStorageNetAppSvmEventRelationship(p []models.StorageNetAppSvmEventRelationship, d *schema.ResourceData) []map[string]interface{} {
	var storagenetappsvmeventrelationships []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		item := item.MoMoRef
		storagenetappsvmeventrelationship := flattenMoMoRef(item)
		storagenetappsvmeventrelationships = append(storagenetappsvmeventrelationships, storagenetappsvmeventrelationship)
	}
	return storagenetappsvmeventrelationships
}
func flattenListStorageNetAppVolumeEventRelationship(p []models.StorageNetAppVolumeEventRelationship, d *schema.ResourceData) []map[string]interface{} {
	var storagenetappvolumeeventrelationships []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		item := item.MoMoRef
		storagenetappvolumeeventrelationship := flattenMoMoRef(item)
		storagenetappvolumeeventrelationships = append(storagenetappvolumeeventrelationships, storagenetappvolumeeventrelationship)
	}
	return storagenetappvolumeeventrelationships
}
func flattenListStorageNvmePhysicalDiskState(p []models.StorageNvmePhysicalDiskState, d *schema.ResourceData) []map[string]interface{} {
	var storagenvmephysicaldiskstates []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		storagenvmephysicaldiskstate := make(map[string]interface{})
		storagenvmephysicaldiskstate["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
		storagenvmephysicaldiskstate["class_id"] = item.GetClassId()
		storagenvmephysicaldiskstate["object_type"] = item.GetObjectType()
		storagenvmephysicaldiskstate["slot"] = item.GetSlot()
		storagenvmephysicaldiskstate["state"] = item.GetState()
		storagenvmephysicaldiskstates = append(storagenvmephysicaldiskstates, storagenvmephysicaldiskstate)
	}
	return storagenvmephysicaldiskstates
}
func flattenListStorageNvmeRaidDriveGroup(p []models.StorageNvmeRaidDriveGroup, d *schema.ResourceData) []map[string]interface{} {
	var storagenvmeraiddrivegroups []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		storagenvmeraiddrivegroup := make(map[string]interface{})
		storagenvmeraiddrivegroup["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
		storagenvmeraiddrivegroup["class_id"] = item.GetClassId()
		storagenvmeraiddrivegroup["configurations"] = (func(p []models.StorageNvmeVirtualDriveConfiguration, d *schema.ResourceData) []map[string]interface{} {
			var storagenvmevirtualdriveconfigurations []map[string]interface{}
			if len(p) == 0 {
				return nil
			}
			for _, item := range p {
				storagenvmevirtualdriveconfiguration := make(map[string]interface{})
				storagenvmevirtualdriveconfiguration["access_policy"] = item.GetAccessPolicy()
				storagenvmevirtualdriveconfiguration["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
				storagenvmevirtualdriveconfiguration["bootable"] = item.GetBootable()
				storagenvmevirtualdriveconfiguration["class_id"] = item.GetClassId()
				storagenvmevirtualdriveconfiguration["controller_dn"] = item.GetControllerDn()
				storagenvmevirtualdriveconfiguration["dedicated_hot_spare"] = item.GetDedicatedHotSpare()
				storagenvmevirtualdriveconfiguration["disk_cache_policy"] = item.GetDiskCachePolicy()
				storagenvmevirtualdriveconfiguration["name"] = item.GetName()
				storagenvmevirtualdriveconfiguration["object_type"] = item.GetObjectType()
				storagenvmevirtualdriveconfiguration["raid_level"] = item.GetRaidLevel()
				storagenvmevirtualdriveconfiguration["read_policy"] = item.GetReadPolicy()
				storagenvmevirtualdriveconfiguration["self_encrypt"] = item.GetSelfEncrypt()
				storagenvmevirtualdriveconfiguration["size"] = item.GetSize()
				storagenvmevirtualdriveconfiguration["span_disks"] = item.GetSpanDisks()
				storagenvmevirtualdriveconfiguration["strip_size"] = item.GetStripSize()
				storagenvmevirtualdriveconfiguration["write_policy"] = item.GetWritePolicy()
				storagenvmevirtualdriveconfigurations = append(storagenvmevirtualdriveconfigurations, storagenvmevirtualdriveconfiguration)
			}
			return storagenvmevirtualdriveconfigurations
		})(item.GetConfigurations(), d)
		storagenvmeraiddrivegroup["dedicated_hot_spares_for_drive_group"] = (func(p []models.StorageNvmeDedicatedHotSpareConfiguration, d *schema.ResourceData) []map[string]interface{} {
			var storagenvmededicatedhotspareconfigurations []map[string]interface{}
			if len(p) == 0 {
				return nil
			}
			for _, item := range p {
				storagenvmededicatedhotspareconfiguration := make(map[string]interface{})
				storagenvmededicatedhotspareconfiguration["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
				storagenvmededicatedhotspareconfiguration["class_id"] = item.GetClassId()
				storagenvmededicatedhotspareconfiguration["is_new_vd"] = item.GetIsNewVd()
				storagenvmededicatedhotspareconfiguration["name"] = item.GetName()
				storagenvmededicatedhotspareconfiguration["object_type"] = item.GetObjectType()
				storagenvmededicatedhotspareconfiguration["slot"] = item.GetSlot()
				storagenvmededicatedhotspareconfiguration["volume_dn"] = item.GetVolumeDn()
				storagenvmededicatedhotspareconfigurations = append(storagenvmededicatedhotspareconfigurations, storagenvmededicatedhotspareconfiguration)
			}
			return storagenvmededicatedhotspareconfigurations
		})(item.GetDedicatedHotSparesForDriveGroup(), d)
		storagenvmeraiddrivegroup["name"] = item.GetName()
		storagenvmeraiddrivegroup["object_type"] = item.GetObjectType()
		storagenvmeraiddrivegroups = append(storagenvmeraiddrivegroups, storagenvmeraiddrivegroup)
	}
	return storagenvmeraiddrivegroups
}
func flattenListStoragePhysicalDiskRelationship(p []models.StoragePhysicalDiskRelationship, d *schema.ResourceData) []map[string]interface{} {
	var storagephysicaldiskrelationships []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		item := item.MoMoRef
		storagephysicaldiskrelationship := flattenMoMoRef(item)
		storagephysicaldiskrelationships = append(storagephysicaldiskrelationships, storagephysicaldiskrelationship)
	}
	return storagephysicaldiskrelationships
}
func flattenListStoragePhysicalDiskExtensionRelationship(p []models.StoragePhysicalDiskExtensionRelationship, d *schema.ResourceData) []map[string]interface{} {
	var storagephysicaldiskextensionrelationships []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		item := item.MoMoRef
		storagephysicaldiskextensionrelationship := flattenMoMoRef(item)
		storagephysicaldiskextensionrelationships = append(storagephysicaldiskextensionrelationships, storagephysicaldiskextensionrelationship)
	}
	return storagephysicaldiskextensionrelationships
}
func flattenListStoragePhysicalDiskUsageRelationship(p []models.StoragePhysicalDiskUsageRelationship, d *schema.ResourceData) []map[string]interface{} {
	var storagephysicaldiskusagerelationships []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		item := item.MoMoRef
		storagephysicaldiskusagerelationship := flattenMoMoRef(item)
		storagephysicaldiskusagerelationships = append(storagephysicaldiskusagerelationships, storagephysicaldiskusagerelationship)
	}
	return storagephysicaldiskusagerelationships
}
func flattenListStoragePureHostRelationship(p []models.StoragePureHostRelationship, d *schema.ResourceData) []map[string]interface{} {
	var storagepurehostrelationships []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		item := item.MoMoRef
		storagepurehostrelationship := flattenMoMoRef(item)
		storagepurehostrelationships = append(storagepurehostrelationships, storagepurehostrelationship)
	}
	return storagepurehostrelationships
}
func flattenListStoragePureHostGroupRelationship(p []models.StoragePureHostGroupRelationship, d *schema.ResourceData) []map[string]interface{} {
	var storagepurehostgrouprelationships []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		item := item.MoMoRef
		storagepurehostgrouprelationship := flattenMoMoRef(item)
		storagepurehostgrouprelationships = append(storagepurehostgrouprelationships, storagepurehostgrouprelationship)
	}
	return storagepurehostgrouprelationships
}
func flattenListStoragePureReplicationBlackout(p []models.StoragePureReplicationBlackout, d *schema.ResourceData) []map[string]interface{} {
	var storagepurereplicationblackouts []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		storagepurereplicationblackout := make(map[string]interface{})
		storagepurereplicationblackout["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
		storagepurereplicationblackout["class_id"] = item.GetClassId()
		storagepurereplicationblackout["end"] = item.GetEnd()
		storagepurereplicationblackout["object_type"] = item.GetObjectType()
		storagepurereplicationblackout["start"] = item.GetStart()
		storagepurereplicationblackouts = append(storagepurereplicationblackouts, storagepurereplicationblackout)
	}
	return storagepurereplicationblackouts
}
func flattenListStoragePureVolumeRelationship(p []models.StoragePureVolumeRelationship, d *schema.ResourceData) []map[string]interface{} {
	var storagepurevolumerelationships []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		item := item.MoMoRef
		storagepurevolumerelationship := flattenMoMoRef(item)
		storagepurevolumerelationships = append(storagepurevolumerelationships, storagepurevolumerelationship)
	}
	return storagepurevolumerelationships
}
func flattenListStorageSasExpanderRelationship(p []models.StorageSasExpanderRelationship, d *schema.ResourceData) []map[string]interface{} {
	var storagesasexpanderrelationships []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		item := item.MoMoRef
		storagesasexpanderrelationship := flattenMoMoRef(item)
		storagesasexpanderrelationships = append(storagesasexpanderrelationships, storagesasexpanderrelationship)
	}
	return storagesasexpanderrelationships
}
func flattenListStorageSasPortRelationship(p []models.StorageSasPortRelationship, d *schema.ResourceData) []map[string]interface{} {
	var storagesasportrelationships []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		item := item.MoMoRef
		storagesasportrelationship := flattenMoMoRef(item)
		storagesasportrelationships = append(storagesasportrelationships, storagesasportrelationship)
	}
	return storagesasportrelationships
}
func flattenListStorageSpace(p []models.StorageSpace, d *schema.ResourceData) []map[string]interface{} {
	var storagespaces []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		storagespace := make(map[string]interface{})
		storagespace["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
		storagespace["class_id"] = item.GetClassId()
		storagespace["lba_location"] = item.GetLbaLocation()
		storagespace["lba_size"] = item.GetLbaSize()
		storagespace["ldev_id"] = item.GetLdevId()
		storagespace["object_type"] = item.GetObjectType()
		storagespace["partition_number"] = item.GetPartitionNumber()
		storagespace["status"] = item.GetStatus()
		storagespaces = append(storagespaces, storagespace)
	}
	return storagespaces
}
func flattenListStorageSpanRelationship(p []models.StorageSpanRelationship, d *schema.ResourceData) []map[string]interface{} {
	var storagespanrelationships []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		item := item.MoMoRef
		storagespanrelationship := flattenMoMoRef(item)
		storagespanrelationships = append(storagespanrelationships, storagespanrelationship)
	}
	return storagespanrelationships
}
func flattenListStorageStorageContainerHostMountStatus(p []models.StorageStorageContainerHostMountStatus, d *schema.ResourceData) []map[string]interface{} {
	var storagestoragecontainerhostmountstatuss []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		storagestoragecontainerhostmountstatus := make(map[string]interface{})
		storagestoragecontainerhostmountstatus["accessibility"] = item.GetAccessibility()
		storagestoragecontainerhostmountstatus["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
		storagestoragecontainerhostmountstatus["class_id"] = item.GetClassId()
		storagestoragecontainerhostmountstatus["host_name"] = item.GetHostName()
		storagestoragecontainerhostmountstatus["mounted"] = item.GetMounted()
		storagestoragecontainerhostmountstatus["object_type"] = item.GetObjectType()
		storagestoragecontainerhostmountstatus["reason"] = item.GetReason()
		storagestoragecontainerhostmountstatuss = append(storagestoragecontainerhostmountstatuss, storagestoragecontainerhostmountstatus)
	}
	return storagestoragecontainerhostmountstatuss
}
func flattenListStorageVdMemberEpRelationship(p []models.StorageVdMemberEpRelationship, d *schema.ResourceData) []map[string]interface{} {
	var storagevdmembereprelationships []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		item := item.MoMoRef
		storagevdmembereprelationship := flattenMoMoRef(item)
		storagevdmembereprelationships = append(storagevdmembereprelationships, storagevdmembereprelationship)
	}
	return storagevdmembereprelationships
}
func flattenListStorageVirtualDriveRelationship(p []models.StorageVirtualDriveRelationship, d *schema.ResourceData) []map[string]interface{} {
	var storagevirtualdriverelationships []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		item := item.MoMoRef
		storagevirtualdriverelationship := flattenMoMoRef(item)
		storagevirtualdriverelationships = append(storagevirtualdriverelationships, storagevirtualdriverelationship)
	}
	return storagevirtualdriverelationships
}
func flattenListStorageVirtualDriveConfiguration(p []models.StorageVirtualDriveConfiguration, d *schema.ResourceData) []map[string]interface{} {
	var storagevirtualdriveconfigurations []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		storagevirtualdriveconfiguration := make(map[string]interface{})
		storagevirtualdriveconfiguration["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
		storagevirtualdriveconfiguration["boot_drive"] = item.GetBootDrive()
		storagevirtualdriveconfiguration["class_id"] = item.GetClassId()
		storagevirtualdriveconfiguration["expand_to_available"] = item.GetExpandToAvailable()
		storagevirtualdriveconfiguration["name"] = item.GetName()
		storagevirtualdriveconfiguration["object_type"] = item.GetObjectType()
		storagevirtualdriveconfiguration["size"] = item.GetSize()
		storagevirtualdriveconfiguration["virtual_drive_policy"] = (func(p models.StorageVirtualDrivePolicy, d *schema.ResourceData) []map[string]interface{} {
			var storagevirtualdrivepolicys []map[string]interface{}
			var ret models.StorageVirtualDrivePolicy
			if reflect.DeepEqual(ret, p) {
				return nil
			}
			item := p
			storagevirtualdrivepolicy := make(map[string]interface{})
			storagevirtualdrivepolicy["access_policy"] = item.GetAccessPolicy()
			storagevirtualdrivepolicy["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
			storagevirtualdrivepolicy["class_id"] = item.GetClassId()
			storagevirtualdrivepolicy["drive_cache"] = item.GetDriveCache()
			storagevirtualdrivepolicy["object_type"] = item.GetObjectType()
			storagevirtualdrivepolicy["read_policy"] = item.GetReadPolicy()
			storagevirtualdrivepolicy["strip_size"] = item.GetStripSize()
			storagevirtualdrivepolicy["write_policy"] = item.GetWritePolicy()

			storagevirtualdrivepolicys = append(storagevirtualdrivepolicys, storagevirtualdrivepolicy)
			return storagevirtualdrivepolicys
		})(item.GetVirtualDrivePolicy(), d)
		storagevirtualdriveconfigurations = append(storagevirtualdriveconfigurations, storagevirtualdriveconfiguration)
	}
	return storagevirtualdriveconfigurations
}
func flattenListStorageVirtualDriveContainerRelationship(p []models.StorageVirtualDriveContainerRelationship, d *schema.ResourceData) []map[string]interface{} {
	var storagevirtualdrivecontainerrelationships []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		item := item.MoMoRef
		storagevirtualdrivecontainerrelationship := flattenMoMoRef(item)
		storagevirtualdrivecontainerrelationships = append(storagevirtualdrivecontainerrelationships, storagevirtualdrivecontainerrelationship)
	}
	return storagevirtualdrivecontainerrelationships
}
func flattenListStorageVirtualDriveExtensionRelationship(p []models.StorageVirtualDriveExtensionRelationship, d *schema.ResourceData) []map[string]interface{} {
	var storagevirtualdriveextensionrelationships []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		item := item.MoMoRef
		storagevirtualdriveextensionrelationship := flattenMoMoRef(item)
		storagevirtualdriveextensionrelationships = append(storagevirtualdriveextensionrelationships, storagevirtualdriveextensionrelationship)
	}
	return storagevirtualdriveextensionrelationships
}
func flattenListSyslogLocalClientBase(p []models.SyslogLocalClientBase, d *schema.ResourceData) []map[string]interface{} {
	var sysloglocalclientbases []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		sysloglocalclientbase := make(map[string]interface{})
		sysloglocalclientbase["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
		sysloglocalclientbase["class_id"] = item.GetClassId()
		sysloglocalclientbase["min_severity"] = item.GetMinSeverity()
		sysloglocalclientbase["object_type"] = item.GetObjectType()
		sysloglocalclientbases = append(sysloglocalclientbases, sysloglocalclientbase)
	}
	return sysloglocalclientbases
}
func flattenListSyslogRemoteClientBase(p []models.SyslogRemoteClientBase, d *schema.ResourceData) []map[string]interface{} {
	var syslogremoteclientbases []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		syslogremoteclientbase := make(map[string]interface{})
		syslogremoteclientbase["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
		syslogremoteclientbase["class_id"] = item.GetClassId()
		syslogremoteclientbase["enabled"] = item.GetEnabled()
		syslogremoteclientbase["facility"] = item.GetFacility()
		syslogremoteclientbase["hostname"] = item.GetHostname()
		syslogremoteclientbase["min_severity"] = item.GetMinSeverity()
		syslogremoteclientbase["object_type"] = item.GetObjectType()
		syslogremoteclientbase["port"] = item.GetPort()
		syslogremoteclientbase["protocol"] = item.GetProtocol()
		syslogremoteclientbase["vrf_name"] = item.GetVrfName()
		syslogremoteclientbases = append(syslogremoteclientbases, syslogremoteclientbase)
	}
	return syslogremoteclientbases
}
func flattenListTamAction(p []models.TamAction, d *schema.ResourceData) []map[string]interface{} {
	var tamactions []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		tamaction := make(map[string]interface{})
		tamaction["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
		tamaction["affected_object_type"] = item.GetAffectedObjectType()
		tamaction["alert_type"] = item.GetAlertType()
		tamaction["class_id"] = item.GetClassId()
		tamaction["identifiers"] = (func(p []models.TamIdentifiers, d *schema.ResourceData) []map[string]interface{} {
			var tamidentifierss []map[string]interface{}
			if len(p) == 0 {
				return nil
			}
			for _, item := range p {
				tamidentifiers := make(map[string]interface{})
				tamidentifiers["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
				tamidentifiers["class_id"] = item.GetClassId()
				tamidentifiers["name"] = item.GetName()
				tamidentifiers["object_type"] = item.GetObjectType()
				tamidentifiers["value"] = item.GetValue()
				tamidentifierss = append(tamidentifierss, tamidentifiers)
			}
			return tamidentifierss
		})(item.GetIdentifiers(), d)
		tamaction["name"] = item.GetName()
		tamaction["object_type"] = item.GetObjectType()
		tamaction["operation_type"] = item.GetOperationType()
		tamaction["queries"] = (func(p []models.TamQueryEntry, d *schema.ResourceData) []map[string]interface{} {
			var tamqueryentrys []map[string]interface{}
			if len(p) == 0 {
				return nil
			}
			for _, item := range p {
				tamqueryentry := make(map[string]interface{})
				tamqueryentry["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
				tamqueryentry["class_id"] = item.GetClassId()
				tamqueryentry["name"] = item.GetName()
				tamqueryentry["object_type"] = item.GetObjectType()
				tamqueryentry["priority"] = item.GetPriority()
				tamqueryentry["query"] = item.GetQuery()
				tamqueryentrys = append(tamqueryentrys, tamqueryentry)
			}
			return tamqueryentrys
		})(item.GetQueries(), d)
		tamaction["type"] = item.GetType()
		tamactions = append(tamactions, tamaction)
	}
	return tamactions
}
func flattenListTamApiDataSource(p []models.TamApiDataSource, d *schema.ResourceData) []map[string]interface{} {
	var tamapidatasources []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		tamapidatasource := make(map[string]interface{})
		tamapidatasource["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
		tamapidatasource["class_id"] = item.GetClassId()
		tamapidatasource["mo_type"] = item.GetMoType()
		tamapidatasource["name"] = item.GetName()
		tamapidatasource["object_type"] = item.GetObjectType()
		tamapidatasource["queries"] = (func(p []models.TamQueryEntry, d *schema.ResourceData) []map[string]interface{} {
			var tamqueryentrys []map[string]interface{}
			if len(p) == 0 {
				return nil
			}
			for _, item := range p {
				tamqueryentry := make(map[string]interface{})
				tamqueryentry["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
				tamqueryentry["class_id"] = item.GetClassId()
				tamqueryentry["name"] = item.GetName()
				tamqueryentry["object_type"] = item.GetObjectType()
				tamqueryentry["priority"] = item.GetPriority()
				tamqueryentry["query"] = item.GetQuery()
				tamqueryentrys = append(tamqueryentrys, tamqueryentry)
			}
			return tamqueryentrys
		})(item.GetQueries(), d)
		tamapidatasource["type"] = item.GetType()
		tamapidatasources = append(tamapidatasources, tamapidatasource)
	}
	return tamapidatasources
}
func flattenListTamS3DataSource(p []models.TamS3DataSource, d *schema.ResourceData) []map[string]interface{} {
	var tams3datasources []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		tams3datasource := make(map[string]interface{})
		tams3datasource["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
		tams3datasource["class_id"] = item.GetClassId()
		tams3datasource["name"] = item.GetName()
		tams3datasource["object_type"] = item.GetObjectType()
		tams3datasource["queries"] = (func(p []models.TamQueryEntry, d *schema.ResourceData) []map[string]interface{} {
			var tamqueryentrys []map[string]interface{}
			if len(p) == 0 {
				return nil
			}
			for _, item := range p {
				tamqueryentry := make(map[string]interface{})
				tamqueryentry["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
				tamqueryentry["class_id"] = item.GetClassId()
				tamqueryentry["name"] = item.GetName()
				tamqueryentry["object_type"] = item.GetObjectType()
				tamqueryentry["priority"] = item.GetPriority()
				tamqueryentry["query"] = item.GetQuery()
				tamqueryentrys = append(tamqueryentrys, tamqueryentry)
			}
			return tamqueryentrys
		})(item.GetQueries(), d)
		tams3datasource["s3_path"] = item.GetS3Path()
		tams3datasource["type"] = item.GetType()
		tams3datasources = append(tams3datasources, tams3datasource)
	}
	return tams3datasources
}
func flattenListTechsupportmanagementTechSupportFileInfo(p []models.TechsupportmanagementTechSupportFileInfo, d *schema.ResourceData) []map[string]interface{} {
	var techsupportmanagementtechsupportfileinfos []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		techsupportmanagementtechsupportfileinfo := make(map[string]interface{})
		techsupportmanagementtechsupportfileinfo["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
		techsupportmanagementtechsupportfileinfo["class_id"] = item.GetClassId()
		techsupportmanagementtechsupportfileinfo["file_name"] = item.GetFileName()
		techsupportmanagementtechsupportfileinfo["file_size"] = item.GetFileSize()
		techsupportmanagementtechsupportfileinfo["object_type"] = item.GetObjectType()
		techsupportmanagementtechsupportfileinfo["techsupport_download_url"] = item.GetTechsupportDownloadUrl()
		techsupportmanagementtechsupportfileinfo["upload_status"] = item.GetUploadStatus()
		techsupportmanagementtechsupportfileinfos = append(techsupportmanagementtechsupportfileinfos, techsupportmanagementtechsupportfileinfo)
	}
	return techsupportmanagementtechsupportfileinfos
}
func flattenListUcsdConnectorPack(p []models.UcsdConnectorPack, d *schema.ResourceData) []map[string]interface{} {
	var ucsdconnectorpacks []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		ucsdconnectorpack := make(map[string]interface{})
		ucsdconnectorpack["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
		ucsdconnectorpack["class_id"] = item.GetClassId()
		ucsdconnectorpack["connector_feature"] = item.GetConnectorFeature()
		ucsdconnectorpack["dependency_names"] = item.GetDependencyNames()
		ucsdconnectorpack["downloaded_version"] = item.GetDownloadedVersion()
		ucsdconnectorpack["name"] = item.GetName()
		ucsdconnectorpack["object_type"] = item.GetObjectType()
		ucsdconnectorpack["services"] = item.GetServices()
		ucsdconnectorpack["state"] = item.GetState()
		ucsdconnectorpack["nr_version"] = item.GetVersion()
		ucsdconnectorpacks = append(ucsdconnectorpacks, ucsdconnectorpack)
	}
	return ucsdconnectorpacks
}
func flattenListUuidpoolBlockRelationship(p []models.UuidpoolBlockRelationship, d *schema.ResourceData) []map[string]interface{} {
	var uuidpoolblockrelationships []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		item := item.MoMoRef
		uuidpoolblockrelationship := flattenMoMoRef(item)
		uuidpoolblockrelationships = append(uuidpoolblockrelationships, uuidpoolblockrelationship)
	}
	return uuidpoolblockrelationships
}
func flattenListUuidpoolReservationRelationship(p []models.UuidpoolReservationRelationship, d *schema.ResourceData) []map[string]interface{} {
	var uuidpoolreservationrelationships []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		item := item.MoMoRef
		uuidpoolreservationrelationship := flattenMoMoRef(item)
		uuidpoolreservationrelationships = append(uuidpoolreservationrelationships, uuidpoolreservationrelationship)
	}
	return uuidpoolreservationrelationships
}
func flattenListUuidpoolUuidBlock(p []models.UuidpoolUuidBlock, d *schema.ResourceData) []map[string]interface{} {
	var uuidpooluuidblocks []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		uuidpooluuidblock := make(map[string]interface{})
		uuidpooluuidblock["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
		uuidpooluuidblock["class_id"] = item.GetClassId()
		uuidpooluuidblock["from"] = item.GetFrom()
		uuidpooluuidblock["object_type"] = item.GetObjectType()
		uuidpooluuidblock["size"] = item.GetSize()
		uuidpooluuidblock["to"] = item.GetTo()
		uuidpooluuidblocks = append(uuidpooluuidblocks, uuidpooluuidblock)
	}
	return uuidpooluuidblocks
}
func flattenListVirtualizationBaseNetworkRelationship(p []models.VirtualizationBaseNetworkRelationship, d *schema.ResourceData) []map[string]interface{} {
	var virtualizationbasenetworkrelationships []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		item := item.MoMoRef
		virtualizationbasenetworkrelationship := flattenMoMoRef(item)
		virtualizationbasenetworkrelationships = append(virtualizationbasenetworkrelationships, virtualizationbasenetworkrelationship)
	}
	return virtualizationbasenetworkrelationships
}
func flattenListVirtualizationNetworkInterface(p []models.VirtualizationNetworkInterface, d *schema.ResourceData) []map[string]interface{} {
	var virtualizationnetworkinterfaces []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		virtualizationnetworkinterface := make(map[string]interface{})
		virtualizationnetworkinterface["adaptor_type"] = item.GetAdaptorType()
		virtualizationnetworkinterface["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
		virtualizationnetworkinterface["bridge"] = item.GetBridge()
		virtualizationnetworkinterface["class_id"] = item.GetClassId()
		virtualizationnetworkinterface["connect_at_power_on"] = item.GetConnectAtPowerOn()
		virtualizationnetworkinterface["direct_path_io"] = item.GetDirectPathIo()
		virtualizationnetworkinterface["mac_address"] = item.GetMacAddress()
		virtualizationnetworkinterface["name"] = item.GetName()
		virtualizationnetworkinterface["object_type"] = item.GetObjectType()
		virtualizationnetworkinterfaces = append(virtualizationnetworkinterfaces, virtualizationnetworkinterface)
	}
	return virtualizationnetworkinterfaces
}
func flattenListVirtualizationVirtualMachineDisk(p []models.VirtualizationVirtualMachineDisk, d *schema.ResourceData) []map[string]interface{} {
	var virtualizationvirtualmachinedisks []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		virtualizationvirtualmachinedisk := make(map[string]interface{})
		virtualizationvirtualmachinedisk["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
		virtualizationvirtualmachinedisk["bus"] = item.GetBus()
		virtualizationvirtualmachinedisk["class_id"] = item.GetClassId()
		virtualizationvirtualmachinedisk["name"] = item.GetName()
		virtualizationvirtualmachinedisk["object_type"] = item.GetObjectType()
		virtualizationvirtualmachinedisk["order"] = item.GetOrder()
		virtualizationvirtualmachinedisk["type"] = item.GetType()
		virtualizationvirtualmachinedisk["virtual_disk_reference"] = item.GetVirtualDiskReference()
		virtualizationvirtualmachinedisks = append(virtualizationvirtualmachinedisks, virtualizationvirtualmachinedisk)
	}
	return virtualizationvirtualmachinedisks
}
func flattenListVirtualizationVmwareClusterRelationship(p []models.VirtualizationVmwareClusterRelationship, d *schema.ResourceData) []map[string]interface{} {
	var virtualizationvmwareclusterrelationships []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		item := item.MoMoRef
		virtualizationvmwareclusterrelationship := flattenMoMoRef(item)
		virtualizationvmwareclusterrelationships = append(virtualizationvmwareclusterrelationships, virtualizationvmwareclusterrelationship)
	}
	return virtualizationvmwareclusterrelationships
}
func flattenListVirtualizationVmwareDatastoreRelationship(p []models.VirtualizationVmwareDatastoreRelationship, d *schema.ResourceData) []map[string]interface{} {
	var virtualizationvmwaredatastorerelationships []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		item := item.MoMoRef
		virtualizationvmwaredatastorerelationship := flattenMoMoRef(item)
		virtualizationvmwaredatastorerelationships = append(virtualizationvmwaredatastorerelationships, virtualizationvmwaredatastorerelationship)
	}
	return virtualizationvmwaredatastorerelationships
}
func flattenListVirtualizationVmwareDistributedNetworkRelationship(p []models.VirtualizationVmwareDistributedNetworkRelationship, d *schema.ResourceData) []map[string]interface{} {
	var virtualizationvmwaredistributednetworkrelationships []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		item := item.MoMoRef
		virtualizationvmwaredistributednetworkrelationship := flattenMoMoRef(item)
		virtualizationvmwaredistributednetworkrelationships = append(virtualizationvmwaredistributednetworkrelationships, virtualizationvmwaredistributednetworkrelationship)
	}
	return virtualizationvmwaredistributednetworkrelationships
}
func flattenListVirtualizationVmwareDistributedSwitchRelationship(p []models.VirtualizationVmwareDistributedSwitchRelationship, d *schema.ResourceData) []map[string]interface{} {
	var virtualizationvmwaredistributedswitchrelationships []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		item := item.MoMoRef
		virtualizationvmwaredistributedswitchrelationship := flattenMoMoRef(item)
		virtualizationvmwaredistributedswitchrelationships = append(virtualizationvmwaredistributedswitchrelationships, virtualizationvmwaredistributedswitchrelationship)
	}
	return virtualizationvmwaredistributedswitchrelationships
}
func flattenListVirtualizationVmwareHostRelationship(p []models.VirtualizationVmwareHostRelationship, d *schema.ResourceData) []map[string]interface{} {
	var virtualizationvmwarehostrelationships []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		item := item.MoMoRef
		virtualizationvmwarehostrelationship := flattenMoMoRef(item)
		virtualizationvmwarehostrelationships = append(virtualizationvmwarehostrelationships, virtualizationvmwarehostrelationship)
	}
	return virtualizationvmwarehostrelationships
}
func flattenListVirtualizationVmwareResourceAllocationSystemTrafficTypes(p []models.VirtualizationVmwareResourceAllocationSystemTrafficTypes, d *schema.ResourceData) []map[string]interface{} {
	var virtualizationvmwareresourceallocationsystemtraffictypess []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		virtualizationvmwareresourceallocationsystemtraffictypes := make(map[string]interface{})
		virtualizationvmwareresourceallocationsystemtraffictypes["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
		virtualizationvmwareresourceallocationsystemtraffictypes["class_id"] = item.GetClassId()
		virtualizationvmwareresourceallocationsystemtraffictypes["limit"] = item.GetLimit()
		virtualizationvmwareresourceallocationsystemtraffictypes["object_type"] = item.GetObjectType()
		virtualizationvmwareresourceallocationsystemtraffictypes["reservation"] = item.GetReservation()
		virtualizationvmwareresourceallocationsystemtraffictypes["shares"] = item.GetShares()
		virtualizationvmwareresourceallocationsystemtraffictypes["shares_value"] = item.GetSharesValue()
		virtualizationvmwareresourceallocationsystemtraffictypes["traffic_type"] = item.GetTrafficType()
		virtualizationvmwareresourceallocationsystemtraffictypess = append(virtualizationvmwareresourceallocationsystemtraffictypess, virtualizationvmwareresourceallocationsystemtraffictypes)
	}
	return virtualizationvmwareresourceallocationsystemtraffictypess
}
func flattenListVirtualizationVmwareVlanRange(p []models.VirtualizationVmwareVlanRange, d *schema.ResourceData) []map[string]interface{} {
	var virtualizationvmwarevlanranges []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		virtualizationvmwarevlanrange := make(map[string]interface{})
		virtualizationvmwarevlanrange["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
		virtualizationvmwarevlanrange["class_id"] = item.GetClassId()
		virtualizationvmwarevlanrange["object_type"] = item.GetObjectType()
		virtualizationvmwarevlanrange["vlan_range_end"] = item.GetVlanRangeEnd()
		virtualizationvmwarevlanrange["vlan_range_start"] = item.GetVlanRangeStart()
		virtualizationvmwarevlanranges = append(virtualizationvmwarevlanranges, virtualizationvmwarevlanrange)
	}
	return virtualizationvmwarevlanranges
}
func flattenListVmediaMapping(p []models.VmediaMapping, d *schema.ResourceData) []map[string]interface{} {
	var vmediamappings []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		vmediamapping := make(map[string]interface{})
		vmediamapping["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
		vmediamapping["authentication_protocol"] = item.GetAuthenticationProtocol()
		vmediamapping["class_id"] = item.GetClassId()
		vmediamapping["device_type"] = item.GetDeviceType()
		vmediamapping["file_location"] = item.GetFileLocation()
		vmediamapping["host_name"] = item.GetHostName()
		vmediamapping["is_password_set"] = item.GetIsPasswordSet()
		vmediamapping["mount_options"] = item.GetMountOptions()
		vmediamapping["mount_protocol"] = item.GetMountProtocol()
		vmediamapping["object_type"] = item.GetObjectType()
		password_x, exists := d.GetOk("mappings")
		if exists && password_x != nil {
			vmediamapping["password"] = password_x.([]interface{})[len(vmediamappings)].(map[string]interface{})["password"]
		}
		vmediamapping["remote_file"] = item.GetRemoteFile()
		vmediamapping["remote_path"] = item.GetRemotePath()
		vmediamapping["sanitized_file_location"] = item.GetSanitizedFileLocation()
		vmediamapping["username"] = item.GetUsername()
		vmediamapping["volume_name"] = item.GetVolumeName()
		vmediamappings = append(vmediamappings, vmediamapping)
	}
	return vmediamappings
}
func flattenListVnicEthIfRelationship(p []models.VnicEthIfRelationship, d *schema.ResourceData) []map[string]interface{} {
	var vnicethifrelationships []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		item := item.MoMoRef
		vnicethifrelationship := flattenMoMoRef(item)
		vnicethifrelationships = append(vnicethifrelationships, vnicethifrelationship)
	}
	return vnicethifrelationships
}
func flattenListVnicEthIfInventoryRelationship(p []models.VnicEthIfInventoryRelationship, d *schema.ResourceData) []map[string]interface{} {
	var vnicethifinventoryrelationships []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		item := item.MoMoRef
		vnicethifinventoryrelationship := flattenMoMoRef(item)
		vnicethifinventoryrelationships = append(vnicethifinventoryrelationships, vnicethifinventoryrelationship)
	}
	return vnicethifinventoryrelationships
}
func flattenListVnicEthNetworkPolicyRelationship(p []models.VnicEthNetworkPolicyRelationship, d *schema.ResourceData) []map[string]interface{} {
	var vnicethnetworkpolicyrelationships []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		item := item.MoMoRef
		vnicethnetworkpolicyrelationship := flattenMoMoRef(item)
		vnicethnetworkpolicyrelationships = append(vnicethnetworkpolicyrelationships, vnicethnetworkpolicyrelationship)
	}
	return vnicethnetworkpolicyrelationships
}
func flattenListVnicEthNetworkPolicyInventoryRelationship(p []models.VnicEthNetworkPolicyInventoryRelationship, d *schema.ResourceData) []map[string]interface{} {
	var vnicethnetworkpolicyinventoryrelationships []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		item := item.MoMoRef
		vnicethnetworkpolicyinventoryrelationship := flattenMoMoRef(item)
		vnicethnetworkpolicyinventoryrelationships = append(vnicethnetworkpolicyinventoryrelationships, vnicethnetworkpolicyinventoryrelationship)
	}
	return vnicethnetworkpolicyinventoryrelationships
}
func flattenListVnicFcIfRelationship(p []models.VnicFcIfRelationship, d *schema.ResourceData) []map[string]interface{} {
	var vnicfcifrelationships []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		item := item.MoMoRef
		vnicfcifrelationship := flattenMoMoRef(item)
		vnicfcifrelationships = append(vnicfcifrelationships, vnicfcifrelationship)
	}
	return vnicfcifrelationships
}
func flattenListVnicFcIfInventoryRelationship(p []models.VnicFcIfInventoryRelationship, d *schema.ResourceData) []map[string]interface{} {
	var vnicfcifinventoryrelationships []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		item := item.MoMoRef
		vnicfcifinventoryrelationship := flattenMoMoRef(item)
		vnicfcifinventoryrelationships = append(vnicfcifinventoryrelationships, vnicfcifinventoryrelationship)
	}
	return vnicfcifinventoryrelationships
}
func flattenListVnicVifStatus(p []models.VnicVifStatus, d *schema.ResourceData) []map[string]interface{} {
	var vnicvifstatuss []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		vnicvifstatus := make(map[string]interface{})
		vnicvifstatus["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
		vnicvifstatus["class_id"] = item.GetClassId()
		vnicvifstatus["name"] = item.GetName()
		vnicvifstatus["object_type"] = item.GetObjectType()
		vnicvifstatus["reason"] = item.GetReason()
		vnicvifstatus["status"] = item.GetStatus()
		vnicvifstatuss = append(vnicvifstatuss, vnicvifstatus)
	}
	return vnicvifstatuss
}
func flattenListWorkflowApi(p []models.WorkflowApi, d *schema.ResourceData) []map[string]interface{} {
	var workflowapis []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		workflowapi := make(map[string]interface{})
		workflowapi["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
		workflowapi["asset_target_moid"] = item.GetAssetTargetMoid()
		workflowapi["body"] = item.GetBody()
		workflowapi["class_id"] = item.GetClassId()
		workflowapi["content_type"] = item.GetContentType()
		workflowapi["description"] = item.GetDescription()
		workflowapi["error_content_type"] = item.GetErrorContentType()
		workflowapi["label"] = item.GetLabel()
		workflowapi["name"] = item.GetName()
		workflowapi["object_type"] = item.GetObjectType()
		workflowapi["outcomes"] = flattenAdditionalProperties(item.Outcomes)
		workflowapi["response_spec"] = flattenAdditionalProperties(item.ResponseSpec)
		workflowapi["skip_on_condition"] = item.GetSkipOnCondition()
		workflowapi["start_delay"] = item.GetStartDelay()
		workflowapi["timeout"] = item.GetTimeout()
		workflowapis = append(workflowapis, workflowapi)
	}
	return workflowapis
}
func flattenListWorkflowBaseDataType(p []models.WorkflowBaseDataType, d *schema.ResourceData) []map[string]interface{} {
	var workflowbasedatatypes []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		workflowbasedatatype := make(map[string]interface{})
		workflowbasedatatype["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
		workflowbasedatatype["class_id"] = item.GetClassId()
		workflowbasedatatype["default"] = (func(p models.WorkflowDefaultValue, d *schema.ResourceData) []map[string]interface{} {
			var workflowdefaultvalues []map[string]interface{}
			var ret models.WorkflowDefaultValue
			if reflect.DeepEqual(ret, p) {
				return nil
			}
			item := p
			workflowdefaultvalue := make(map[string]interface{})
			workflowdefaultvalue["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
			workflowdefaultvalue["class_id"] = item.GetClassId()
			workflowdefaultvalue["is_value_set"] = item.GetIsValueSet()
			workflowdefaultvalue["object_type"] = item.GetObjectType()
			workflowdefaultvalue["override"] = item.GetOverride()
			workflowdefaultvalue["value"] = flattenAdditionalProperties(item.Value)

			workflowdefaultvalues = append(workflowdefaultvalues, workflowdefaultvalue)
			return workflowdefaultvalues
		})(item.GetDefault(), d)
		workflowbasedatatype["description"] = item.GetDescription()
		workflowbasedatatype["display_meta"] = (func(p models.WorkflowDisplayMeta, d *schema.ResourceData) []map[string]interface{} {
			var workflowdisplaymetas []map[string]interface{}
			var ret models.WorkflowDisplayMeta
			if reflect.DeepEqual(ret, p) {
				return nil
			}
			item := p
			workflowdisplaymeta := make(map[string]interface{})
			workflowdisplaymeta["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
			workflowdisplaymeta["class_id"] = item.GetClassId()
			workflowdisplaymeta["inventory_selector"] = item.GetInventorySelector()
			workflowdisplaymeta["object_type"] = item.GetObjectType()
			workflowdisplaymeta["widget_type"] = item.GetWidgetType()

			workflowdisplaymetas = append(workflowdisplaymetas, workflowdisplaymeta)
			return workflowdisplaymetas
		})(item.GetDisplayMeta(), d)
		workflowbasedatatype["input_parameters"] = flattenAdditionalProperties(item.InputParameters)
		workflowbasedatatype["label"] = item.GetLabel()
		workflowbasedatatype["name"] = item.GetName()
		workflowbasedatatype["object_type"] = item.GetObjectType()
		workflowbasedatatype["required"] = item.GetRequired()
		workflowbasedatatypes = append(workflowbasedatatypes, workflowbasedatatype)
	}
	return workflowbasedatatypes
}
func flattenListWorkflowCatalogServiceRequestRelationship(p []models.WorkflowCatalogServiceRequestRelationship, d *schema.ResourceData) []map[string]interface{} {
	var workflowcatalogservicerequestrelationships []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		item := item.MoMoRef
		workflowcatalogservicerequestrelationship := flattenMoMoRef(item)
		workflowcatalogservicerequestrelationships = append(workflowcatalogservicerequestrelationships, workflowcatalogservicerequestrelationship)
	}
	return workflowcatalogservicerequestrelationships
}
func flattenListWorkflowMessage(p []models.WorkflowMessage, d *schema.ResourceData) []map[string]interface{} {
	var workflowmessages []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		workflowmessage := make(map[string]interface{})
		workflowmessage["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
		workflowmessage["class_id"] = item.GetClassId()
		workflowmessage["message"] = item.GetMessage()
		workflowmessage["object_type"] = item.GetObjectType()
		workflowmessage["severity"] = item.GetSeverity()
		workflowmessages = append(workflowmessages, workflowmessage)
	}
	return workflowmessages
}
func flattenListWorkflowParameterSet(p []models.WorkflowParameterSet, d *schema.ResourceData) []map[string]interface{} {
	var workflowparametersets []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		workflowparameterset := make(map[string]interface{})
		workflowparameterset["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
		workflowparameterset["class_id"] = item.GetClassId()
		workflowparameterset["condition"] = item.GetCondition()
		workflowparameterset["control_parameter"] = item.GetControlParameter()
		workflowparameterset["enable_parameters"] = item.GetEnableParameters()
		workflowparameterset["name"] = item.GetName()
		workflowparameterset["object_type"] = item.GetObjectType()
		workflowparameterset["value"] = item.GetValue()
		workflowparametersets = append(workflowparametersets, workflowparameterset)
	}
	return workflowparametersets
}
func flattenListWorkflowRollbackTask(p []models.WorkflowRollbackTask, d *schema.ResourceData) []map[string]interface{} {
	var workflowrollbacktasks []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		workflowrollbacktask := make(map[string]interface{})
		workflowrollbacktask["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
		workflowrollbacktask["catalog_moid"] = item.GetCatalogMoid()
		workflowrollbacktask["class_id"] = item.GetClassId()
		workflowrollbacktask["description"] = item.GetDescription()
		workflowrollbacktask["input_parameters"] = flattenAdditionalProperties(item.InputParameters)
		workflowrollbacktask["name"] = item.GetName()
		workflowrollbacktask["object_type"] = item.GetObjectType()
		workflowrollbacktask["skip_condition"] = item.GetSkipCondition()
		workflowrollbacktask["task_moid"] = item.GetTaskMoid()
		workflowrollbacktask["nr_version"] = item.GetVersion()
		workflowrollbacktasks = append(workflowrollbacktasks, workflowrollbacktask)
	}
	return workflowrollbacktasks
}
func flattenListWorkflowRollbackWorkflowTask(p []models.WorkflowRollbackWorkflowTask, d *schema.ResourceData) []map[string]interface{} {
	var workflowrollbackworkflowtasks []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		workflowrollbackworkflowtask := make(map[string]interface{})
		workflowrollbackworkflowtask["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
		workflowrollbackworkflowtask["class_id"] = item.GetClassId()
		workflowrollbackworkflowtask["description"] = item.GetDescription()
		workflowrollbackworkflowtask["name"] = item.GetName()
		workflowrollbackworkflowtask["object_type"] = item.GetObjectType()
		workflowrollbackworkflowtask["ref_name"] = item.GetRefName()
		workflowrollbackworkflowtask["rollback_completed"] = item.GetRollbackCompleted()
		workflowrollbackworkflowtask["rollback_task_name"] = item.GetRollbackTaskName()
		workflowrollbackworkflowtask["status"] = item.GetStatus()
		workflowrollbackworkflowtask["task_info_moid"] = item.GetTaskInfoMoid()
		workflowrollbackworkflowtask["task_path"] = item.GetTaskPath()
		workflowrollbackworkflowtasks = append(workflowrollbackworkflowtasks, workflowrollbackworkflowtask)
	}
	return workflowrollbackworkflowtasks
}
func flattenListWorkflowServiceItemActionDefinitionRelationship(p []models.WorkflowServiceItemActionDefinitionRelationship, d *schema.ResourceData) []map[string]interface{} {
	var workflowserviceitemactiondefinitionrelationships []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		item := item.MoMoRef
		workflowserviceitemactiondefinitionrelationship := flattenMoMoRef(item)
		workflowserviceitemactiondefinitionrelationships = append(workflowserviceitemactiondefinitionrelationships, workflowserviceitemactiondefinitionrelationship)
	}
	return workflowserviceitemactiondefinitionrelationships
}
func flattenListWorkflowServiceItemActionInstanceRelationship(p []models.WorkflowServiceItemActionInstanceRelationship, d *schema.ResourceData) []map[string]interface{} {
	var workflowserviceitemactioninstancerelationships []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		item := item.MoMoRef
		workflowserviceitemactioninstancerelationship := flattenMoMoRef(item)
		workflowserviceitemactioninstancerelationships = append(workflowserviceitemactioninstancerelationships, workflowserviceitemactioninstancerelationship)
	}
	return workflowserviceitemactioninstancerelationships
}
func flattenListWorkflowServiceItemActionWorkflowDefinition(p []models.WorkflowServiceItemActionWorkflowDefinition, d *schema.ResourceData) []map[string]interface{} {
	var workflowserviceitemactionworkflowdefinitions []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		workflowserviceitemactionworkflowdefinition := make(map[string]interface{})
		workflowserviceitemactionworkflowdefinition["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
		workflowserviceitemactionworkflowdefinition["catalog_moid"] = item.GetCatalogMoid()
		workflowserviceitemactionworkflowdefinition["class_id"] = item.GetClassId()
		workflowserviceitemactionworkflowdefinition["description"] = item.GetDescription()
		workflowserviceitemactionworkflowdefinition["input_parameters"] = flattenAdditionalProperties(item.InputParameters)
		workflowserviceitemactionworkflowdefinition["label"] = item.GetLabel()
		workflowserviceitemactionworkflowdefinition["name"] = item.GetName()
		workflowserviceitemactionworkflowdefinition["object_type"] = item.GetObjectType()
		workflowserviceitemactionworkflowdefinition["nr_version"] = item.GetVersion()
		workflowserviceitemactionworkflowdefinition["workflow_definition"] = (func(p models.MoMoRef, d *schema.ResourceData) []map[string]interface{} {
			var momorefs []map[string]interface{}
			var ret models.MoMoRef
			if reflect.DeepEqual(ret, p) {
				return nil
			}
			item := p
			momoref := make(map[string]interface{})
			momoref["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
			momoref["class_id"] = item.GetClassId()
			momoref["moid"] = item.GetMoid()
			momoref["object_type"] = item.GetObjectType()
			momoref["selector"] = item.GetSelector()

			momorefs = append(momorefs, momoref)
			return momorefs
		})(item.GetWorkflowDefinition(), d)
		workflowserviceitemactionworkflowdefinition["workflow_definition_name"] = item.GetWorkflowDefinitionName()
		workflowserviceitemactionworkflowdefinitions = append(workflowserviceitemactionworkflowdefinitions, workflowserviceitemactionworkflowdefinition)
	}
	return workflowserviceitemactionworkflowdefinitions
}
func flattenListWorkflowServiceItemInstanceRelationship(p []models.WorkflowServiceItemInstanceRelationship, d *schema.ResourceData) []map[string]interface{} {
	var workflowserviceiteminstancerelationships []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		item := item.MoMoRef
		workflowserviceiteminstancerelationship := flattenMoMoRef(item)
		workflowserviceiteminstancerelationships = append(workflowserviceiteminstancerelationships, workflowserviceiteminstancerelationship)
	}
	return workflowserviceiteminstancerelationships
}
func flattenListWorkflowServiceItemType(p []models.WorkflowServiceItemType, d *schema.ResourceData) []map[string]interface{} {
	var workflowserviceitemtypes []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		workflowserviceitemtype := make(map[string]interface{})
		workflowserviceitemtype["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
		workflowserviceitemtype["class_id"] = item.GetClassId()
		workflowserviceitemtype["description"] = item.GetDescription()
		workflowserviceitemtype["name"] = item.GetName()
		workflowserviceitemtype["object_type"] = item.GetObjectType()
		workflowserviceitemtype["service_item_definition"] = (func(p models.MoMoRef, d *schema.ResourceData) []map[string]interface{} {
			var momorefs []map[string]interface{}
			var ret models.MoMoRef
			if reflect.DeepEqual(ret, p) {
				return nil
			}
			item := p
			momoref := make(map[string]interface{})
			momoref["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
			momoref["class_id"] = item.GetClassId()
			momoref["moid"] = item.GetMoid()
			momoref["object_type"] = item.GetObjectType()
			momoref["selector"] = item.GetSelector()

			momorefs = append(momorefs, momoref)
			return momorefs
		})(item.GetServiceItemDefinition(), d)
		workflowserviceitemtype["service_item_input_definition"] = (func(p []models.WorkflowServiceItemInputDefinitionType, d *schema.ResourceData) []map[string]interface{} {
			var workflowserviceiteminputdefinitiontypes []map[string]interface{}
			if len(p) == 0 {
				return nil
			}
			for _, item := range p {
				workflowserviceiteminputdefinitiontype := make(map[string]interface{})
				workflowserviceiteminputdefinitiontype["action_name"] = item.GetActionName()
				workflowserviceiteminputdefinitiontype["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
				workflowserviceiteminputdefinitiontype["class_id"] = item.GetClassId()
				workflowserviceiteminputdefinitiontype["input_definition"] = (func(p []models.WorkflowBaseDataType, d *schema.ResourceData) []map[string]interface{} {
					var workflowbasedatatypes []map[string]interface{}
					if len(p) == 0 {
						return nil
					}
					for _, item := range p {
						workflowbasedatatype := make(map[string]interface{})
						workflowbasedatatype["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
						workflowbasedatatype["class_id"] = item.GetClassId()
						workflowbasedatatype["default"] = (func(p models.WorkflowDefaultValue, d *schema.ResourceData) []map[string]interface{} {
							var workflowdefaultvalues []map[string]interface{}
							var ret models.WorkflowDefaultValue
							if reflect.DeepEqual(ret, p) {
								return nil
							}
							item := p
							workflowdefaultvalue := make(map[string]interface{})
							workflowdefaultvalue["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
							workflowdefaultvalue["class_id"] = item.GetClassId()
							workflowdefaultvalue["is_value_set"] = item.GetIsValueSet()
							workflowdefaultvalue["object_type"] = item.GetObjectType()
							workflowdefaultvalue["override"] = item.GetOverride()
							workflowdefaultvalue["value"] = flattenAdditionalProperties(item.Value)

							workflowdefaultvalues = append(workflowdefaultvalues, workflowdefaultvalue)
							return workflowdefaultvalues
						})(item.GetDefault(), d)
						workflowbasedatatype["description"] = item.GetDescription()
						workflowbasedatatype["display_meta"] = (func(p models.WorkflowDisplayMeta, d *schema.ResourceData) []map[string]interface{} {
							var workflowdisplaymetas []map[string]interface{}
							var ret models.WorkflowDisplayMeta
							if reflect.DeepEqual(ret, p) {
								return nil
							}
							item := p
							workflowdisplaymeta := make(map[string]interface{})
							workflowdisplaymeta["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
							workflowdisplaymeta["class_id"] = item.GetClassId()
							workflowdisplaymeta["inventory_selector"] = item.GetInventorySelector()
							workflowdisplaymeta["object_type"] = item.GetObjectType()
							workflowdisplaymeta["widget_type"] = item.GetWidgetType()

							workflowdisplaymetas = append(workflowdisplaymetas, workflowdisplaymeta)
							return workflowdisplaymetas
						})(item.GetDisplayMeta(), d)
						workflowbasedatatype["input_parameters"] = flattenAdditionalProperties(item.InputParameters)
						workflowbasedatatype["label"] = item.GetLabel()
						workflowbasedatatype["name"] = item.GetName()
						workflowbasedatatype["object_type"] = item.GetObjectType()
						workflowbasedatatype["required"] = item.GetRequired()
						workflowbasedatatypes = append(workflowbasedatatypes, workflowbasedatatype)
					}
					return workflowbasedatatypes
				})(item.GetInputDefinition(), d)
				workflowserviceiteminputdefinitiontype["input_parameters"] = flattenAdditionalProperties(item.InputParameters)
				workflowserviceiteminputdefinitiontype["object_type"] = item.GetObjectType()
				workflowserviceiteminputdefinitiontype["operation_type"] = item.GetOperationType()
				workflowserviceiteminputdefinitiontype["service_item_action_definition"] = (func(p models.MoMoRef, d *schema.ResourceData) []map[string]interface{} {
					var momorefs []map[string]interface{}
					var ret models.MoMoRef
					if reflect.DeepEqual(ret, p) {
						return nil
					}
					item := p
					momoref := make(map[string]interface{})
					momoref["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
					momoref["class_id"] = item.GetClassId()
					momoref["moid"] = item.GetMoid()
					momoref["object_type"] = item.GetObjectType()
					momoref["selector"] = item.GetSelector()

					momorefs = append(momorefs, momoref)
					return momorefs
				})(item.GetServiceItemActionDefinition(), d)
				workflowserviceiteminputdefinitiontypes = append(workflowserviceiteminputdefinitiontypes, workflowserviceiteminputdefinitiontype)
			}
			return workflowserviceiteminputdefinitiontypes
		})(item.GetServiceItemInputDefinition(), d)
		workflowserviceitemtypes = append(workflowserviceitemtypes, workflowserviceitemtype)
	}
	return workflowserviceitemtypes
}
func flattenListWorkflowTaskDefinitionRelationship(p []models.WorkflowTaskDefinitionRelationship, d *schema.ResourceData) []map[string]interface{} {
	var workflowtaskdefinitionrelationships []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		item := item.MoMoRef
		workflowtaskdefinitionrelationship := flattenMoMoRef(item)
		workflowtaskdefinitionrelationships = append(workflowtaskdefinitionrelationships, workflowtaskdefinitionrelationship)
	}
	return workflowtaskdefinitionrelationships
}
func flattenListWorkflowTaskInfoRelationship(p []models.WorkflowTaskInfoRelationship, d *schema.ResourceData) []map[string]interface{} {
	var workflowtaskinforelationships []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		item := item.MoMoRef
		workflowtaskinforelationship := flattenMoMoRef(item)
		workflowtaskinforelationships = append(workflowtaskinforelationships, workflowtaskinforelationship)
	}
	return workflowtaskinforelationships
}
func flattenListWorkflowTaskRetryInfo(p []models.WorkflowTaskRetryInfo, d *schema.ResourceData) []map[string]interface{} {
	var workflowtaskretryinfos []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		workflowtaskretryinfo := make(map[string]interface{})
		workflowtaskretryinfo["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
		workflowtaskretryinfo["class_id"] = item.GetClassId()
		workflowtaskretryinfo["object_type"] = item.GetObjectType()
		workflowtaskretryinfo["status"] = item.GetStatus()
		workflowtaskretryinfo["task_inst_id"] = item.GetTaskInstId()
		workflowtaskretryinfos = append(workflowtaskretryinfos, workflowtaskretryinfo)
	}
	return workflowtaskretryinfos
}
func flattenListWorkflowUiFormConfig(p []models.WorkflowUiFormConfig, d *schema.ResourceData) []map[string]interface{} {
	var workflowuiformconfigs []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		workflowuiformconfig := make(map[string]interface{})
		workflowuiformconfig["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
		workflowuiformconfig["class_id"] = item.GetClassId()
		workflowuiformconfig["config"] = flattenAdditionalProperties(item.Config)
		workflowuiformconfig["name"] = item.GetName()
		workflowuiformconfig["object_type"] = item.GetObjectType()
		workflowuiformconfigs = append(workflowuiformconfigs, workflowuiformconfig)
	}
	return workflowuiformconfigs
}
func flattenListWorkflowUiInputFilter(p []models.WorkflowUiInputFilter, d *schema.ResourceData) []map[string]interface{} {
	var workflowuiinputfilters []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		workflowuiinputfilter := make(map[string]interface{})
		workflowuiinputfilter["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
		workflowuiinputfilter["class_id"] = item.GetClassId()
		workflowuiinputfilter["filters"] = item.GetFilters()
		workflowuiinputfilter["name"] = item.GetName()
		workflowuiinputfilter["object_type"] = item.GetObjectType()
		workflowuiinputfilter["user_help_message"] = item.GetUserHelpMessage()
		workflowuiinputfilters = append(workflowuiinputfilters, workflowuiinputfilter)
	}
	return workflowuiinputfilters
}
func flattenListWorkflowUiViewConfig(p []models.WorkflowUiViewConfig, d *schema.ResourceData) []map[string]interface{} {
	var workflowuiviewconfigs []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		workflowuiviewconfig := make(map[string]interface{})
		workflowuiviewconfig["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
		workflowuiviewconfig["class_id"] = item.GetClassId()
		workflowuiviewconfig["config"] = flattenAdditionalProperties(item.Config)
		workflowuiviewconfig["name"] = item.GetName()
		workflowuiviewconfig["object_type"] = item.GetObjectType()
		workflowuiviewconfigs = append(workflowuiviewconfigs, workflowuiviewconfig)
	}
	return workflowuiviewconfigs
}
func flattenListWorkflowWorkflowInfoRelationship(p []models.WorkflowWorkflowInfoRelationship, d *schema.ResourceData) []map[string]interface{} {
	var workflowworkflowinforelationships []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		item := item.MoMoRef
		workflowworkflowinforelationship := flattenMoMoRef(item)
		workflowworkflowinforelationships = append(workflowworkflowinforelationships, workflowworkflowinforelationship)
	}
	return workflowworkflowinforelationships
}
func flattenListWorkflowWorkflowTask(p []models.WorkflowWorkflowTask, d *schema.ResourceData) []map[string]interface{} {
	var workflowworkflowtasks []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		workflowworkflowtask := make(map[string]interface{})
		workflowworkflowtask["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
		workflowworkflowtask["class_id"] = item.GetClassId()
		workflowworkflowtask["description"] = item.GetDescription()
		workflowworkflowtask["label"] = item.GetLabel()
		workflowworkflowtask["name"] = item.GetName()
		workflowworkflowtask["object_type"] = item.GetObjectType()
		workflowworkflowtasks = append(workflowworkflowtasks, workflowworkflowtask)
	}
	return workflowworkflowtasks
}
func flattenListWorkspaceFolderRelationship(p []models.WorkspaceFolderRelationship, d *schema.ResourceData) []map[string]interface{} {
	var workspacefolderrelationships []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		item := item.MoMoRef
		workspacefolderrelationship := flattenMoMoRef(item)
		workspacefolderrelationships = append(workspacefolderrelationships, workspacefolderrelationship)
	}
	return workspacefolderrelationships
}
func flattenListX509Certificate(p []models.X509Certificate, d *schema.ResourceData) []map[string]interface{} {
	var x509certificates []map[string]interface{}
	if len(p) == 0 {
		return nil
	}
	for _, item := range p {
		x509certificate := make(map[string]interface{})
		x509certificate["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
		x509certificate["class_id"] = item.GetClassId()
		x509certificate["issuer"] = (func(p models.PkixDistinguishedName, d *schema.ResourceData) []map[string]interface{} {
			var pkixdistinguishednames []map[string]interface{}
			var ret models.PkixDistinguishedName
			if reflect.DeepEqual(ret, p) {
				return nil
			}
			item := p
			pkixdistinguishedname := make(map[string]interface{})
			pkixdistinguishedname["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
			pkixdistinguishedname["class_id"] = item.GetClassId()
			pkixdistinguishedname["common_name"] = item.GetCommonName()
			pkixdistinguishedname["country"] = item.GetCountry()
			pkixdistinguishedname["locality"] = item.GetLocality()
			pkixdistinguishedname["object_type"] = item.GetObjectType()
			pkixdistinguishedname["organization"] = item.GetOrganization()
			pkixdistinguishedname["organizational_unit"] = item.GetOrganizationalUnit()
			pkixdistinguishedname["state"] = item.GetState()

			pkixdistinguishednames = append(pkixdistinguishednames, pkixdistinguishedname)
			return pkixdistinguishednames
		})(item.GetIssuer(), d)
		x509certificate["not_after"] = item.GetNotAfter().String()
		x509certificate["not_before"] = item.GetNotBefore().String()
		x509certificate["object_type"] = item.GetObjectType()
		x509certificate["pem_certificate"] = item.GetPemCertificate()
		x509certificate["sha256_fingerprint"] = item.GetSha256Fingerprint()
		x509certificate["signature_algorithm"] = item.GetSignatureAlgorithm()
		x509certificate["subject"] = (func(p models.PkixDistinguishedName, d *schema.ResourceData) []map[string]interface{} {
			var pkixdistinguishednames []map[string]interface{}
			var ret models.PkixDistinguishedName
			if reflect.DeepEqual(ret, p) {
				return nil
			}
			item := p
			pkixdistinguishedname := make(map[string]interface{})
			pkixdistinguishedname["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
			pkixdistinguishedname["class_id"] = item.GetClassId()
			pkixdistinguishedname["common_name"] = item.GetCommonName()
			pkixdistinguishedname["country"] = item.GetCountry()
			pkixdistinguishedname["locality"] = item.GetLocality()
			pkixdistinguishedname["object_type"] = item.GetObjectType()
			pkixdistinguishedname["organization"] = item.GetOrganization()
			pkixdistinguishedname["organizational_unit"] = item.GetOrganizationalUnit()
			pkixdistinguishedname["state"] = item.GetState()

			pkixdistinguishednames = append(pkixdistinguishednames, pkixdistinguishedname)
			return pkixdistinguishednames
		})(item.GetSubject(), d)
		x509certificates = append(x509certificates, x509certificate)
	}
	return x509certificates
}
func flattenMapAaaUserAgent(p models.AaaUserAgent, d *schema.ResourceData) []map[string]interface{} {
	var aaauseragents []map[string]interface{}
	var ret models.AaaUserAgent
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	item := p
	aaauseragent := make(map[string]interface{})
	aaauseragent["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	aaauseragent["class_id"] = item.GetClassId()
	aaauseragent["object_type"] = item.GetObjectType()
	aaauseragent["os_family"] = item.GetOsFamily()
	aaauseragent["os_version"] = item.GetOsVersion()
	aaauseragent["software_family"] = item.GetSoftwareFamily()
	aaauseragent["software_subtype"] = item.GetSoftwareSubtype()
	aaauseragent["software_type"] = item.GetSoftwareType()
	aaauseragent["software_version"] = item.GetSoftwareVersion()

	aaauseragents = append(aaauseragents, aaauseragent)
	return aaauseragents
}
func flattenMapAccessAddressType(p models.AccessAddressType, d *schema.ResourceData) []map[string]interface{} {
	var accessaddresstypes []map[string]interface{}
	var ret models.AccessAddressType
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	item := p
	accessaddresstype := make(map[string]interface{})
	accessaddresstype["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	accessaddresstype["class_id"] = item.GetClassId()
	accessaddresstype["enable_ip_v4"] = item.GetEnableIpV4()
	accessaddresstype["enable_ip_v6"] = item.GetEnableIpV6()
	accessaddresstype["object_type"] = item.GetObjectType()

	accessaddresstypes = append(accessaddresstypes, accessaddresstype)
	return accessaddresstypes
}
func flattenMapAccessConfigurationType(p models.AccessConfigurationType, d *schema.ResourceData) []map[string]interface{} {
	var accessconfigurationtypes []map[string]interface{}
	var ret models.AccessConfigurationType
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	item := p
	accessconfigurationtype := make(map[string]interface{})
	accessconfigurationtype["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	accessconfigurationtype["class_id"] = item.GetClassId()
	accessconfigurationtype["configure_inband"] = item.GetConfigureInband()
	accessconfigurationtype["configure_out_of_band"] = item.GetConfigureOutOfBand()
	accessconfigurationtype["object_type"] = item.GetObjectType()

	accessconfigurationtypes = append(accessconfigurationtypes, accessconfigurationtype)
	return accessconfigurationtypes
}
func flattenMapAdapterHostEthInterfaceRelationship(p models.AdapterHostEthInterfaceRelationship, d *schema.ResourceData) []map[string]interface{} {
	var adapterhostethinterfacerelationships []map[string]interface{}
	var ret models.AdapterHostEthInterfaceRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	adapterhostethinterfacerelationship := make(map[string]interface{})
	adapterhostethinterfacerelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	adapterhostethinterfacerelationship["class_id"] = item.GetClassId()
	adapterhostethinterfacerelationship["moid"] = item.GetMoid()
	adapterhostethinterfacerelationship["object_type"] = item.GetObjectType()
	adapterhostethinterfacerelationship["selector"] = item.GetSelector()

	adapterhostethinterfacerelationships = append(adapterhostethinterfacerelationships, adapterhostethinterfacerelationship)
	return adapterhostethinterfacerelationships
}
func flattenMapAdapterHostFcInterfaceRelationship(p models.AdapterHostFcInterfaceRelationship, d *schema.ResourceData) []map[string]interface{} {
	var adapterhostfcinterfacerelationships []map[string]interface{}
	var ret models.AdapterHostFcInterfaceRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	adapterhostfcinterfacerelationship := make(map[string]interface{})
	adapterhostfcinterfacerelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	adapterhostfcinterfacerelationship["class_id"] = item.GetClassId()
	adapterhostfcinterfacerelationship["moid"] = item.GetMoid()
	adapterhostfcinterfacerelationship["object_type"] = item.GetObjectType()
	adapterhostfcinterfacerelationship["selector"] = item.GetSelector()

	adapterhostfcinterfacerelationships = append(adapterhostfcinterfacerelationships, adapterhostfcinterfacerelationship)
	return adapterhostfcinterfacerelationships
}
func flattenMapAdapterUnitRelationship(p models.AdapterUnitRelationship, d *schema.ResourceData) []map[string]interface{} {
	var adapterunitrelationships []map[string]interface{}
	var ret models.AdapterUnitRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	adapterunitrelationship := make(map[string]interface{})
	adapterunitrelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	adapterunitrelationship["class_id"] = item.GetClassId()
	adapterunitrelationship["moid"] = item.GetMoid()
	adapterunitrelationship["object_type"] = item.GetObjectType()
	adapterunitrelationship["selector"] = item.GetSelector()

	adapterunitrelationships = append(adapterunitrelationships, adapterunitrelationship)
	return adapterunitrelationships
}
func flattenMapAdapterUnitExpanderRelationship(p models.AdapterUnitExpanderRelationship, d *schema.ResourceData) []map[string]interface{} {
	var adapterunitexpanderrelationships []map[string]interface{}
	var ret models.AdapterUnitExpanderRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	adapterunitexpanderrelationship := make(map[string]interface{})
	adapterunitexpanderrelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	adapterunitexpanderrelationship["class_id"] = item.GetClassId()
	adapterunitexpanderrelationship["moid"] = item.GetMoid()
	adapterunitexpanderrelationship["object_type"] = item.GetObjectType()
	adapterunitexpanderrelationship["selector"] = item.GetSelector()

	adapterunitexpanderrelationships = append(adapterunitexpanderrelationships, adapterunitexpanderrelationship)
	return adapterunitexpanderrelationships
}
func flattenMapApicApplicationRelationship(p models.ApicApplicationRelationship, d *schema.ResourceData) []map[string]interface{} {
	var apicapplicationrelationships []map[string]interface{}
	var ret models.ApicApplicationRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	apicapplicationrelationship := make(map[string]interface{})
	apicapplicationrelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	apicapplicationrelationship["class_id"] = item.GetClassId()
	apicapplicationrelationship["moid"] = item.GetMoid()
	apicapplicationrelationship["object_type"] = item.GetObjectType()
	apicapplicationrelationship["selector"] = item.GetSelector()

	apicapplicationrelationships = append(apicapplicationrelationships, apicapplicationrelationship)
	return apicapplicationrelationships
}
func flattenMapApicBridgeDomainRelationship(p models.ApicBridgeDomainRelationship, d *schema.ResourceData) []map[string]interface{} {
	var apicbridgedomainrelationships []map[string]interface{}
	var ret models.ApicBridgeDomainRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	apicbridgedomainrelationship := make(map[string]interface{})
	apicbridgedomainrelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	apicbridgedomainrelationship["class_id"] = item.GetClassId()
	apicbridgedomainrelationship["moid"] = item.GetMoid()
	apicbridgedomainrelationship["object_type"] = item.GetObjectType()
	apicbridgedomainrelationship["selector"] = item.GetSelector()

	apicbridgedomainrelationships = append(apicbridgedomainrelationships, apicbridgedomainrelationship)
	return apicbridgedomainrelationships
}
func flattenMapApicFabricLeafNodeRelationship(p models.ApicFabricLeafNodeRelationship, d *schema.ResourceData) []map[string]interface{} {
	var apicfabricleafnoderelationships []map[string]interface{}
	var ret models.ApicFabricLeafNodeRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	apicfabricleafnoderelationship := make(map[string]interface{})
	apicfabricleafnoderelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	apicfabricleafnoderelationship["class_id"] = item.GetClassId()
	apicfabricleafnoderelationship["moid"] = item.GetMoid()
	apicfabricleafnoderelationship["object_type"] = item.GetObjectType()
	apicfabricleafnoderelationship["selector"] = item.GetSelector()

	apicfabricleafnoderelationships = append(apicfabricleafnoderelationships, apicfabricleafnoderelationship)
	return apicfabricleafnoderelationships
}
func flattenMapApicFabricLeafNodeDetails(p models.ApicFabricLeafNodeDetails, d *schema.ResourceData) []map[string]interface{} {
	var apicfabricleafnodedetailss []map[string]interface{}
	var ret models.ApicFabricLeafNodeDetails
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	item := p
	apicfabricleafnodedetails := make(map[string]interface{})
	apicfabricleafnodedetails["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	apicfabricleafnodedetails["class_id"] = item.GetClassId()
	apicfabricleafnodedetails["id"] = item.GetId()
	apicfabricleafnodedetails["name"] = item.GetName()
	apicfabricleafnodedetails["object_type"] = item.GetObjectType()

	apicfabricleafnodedetailss = append(apicfabricleafnodedetailss, apicfabricleafnodedetails)
	return apicfabricleafnodedetailss
}
func flattenMapApicTenantRelationship(p models.ApicTenantRelationship, d *schema.ResourceData) []map[string]interface{} {
	var apictenantrelationships []map[string]interface{}
	var ret models.ApicTenantRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	apictenantrelationship := make(map[string]interface{})
	apictenantrelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	apictenantrelationship["class_id"] = item.GetClassId()
	apictenantrelationship["moid"] = item.GetMoid()
	apictenantrelationship["object_type"] = item.GetObjectType()
	apictenantrelationship["selector"] = item.GetSelector()

	apictenantrelationships = append(apictenantrelationships, apictenantrelationship)
	return apictenantrelationships
}
func flattenMapApplianceCertRenewalPhase(p models.ApplianceCertRenewalPhase, d *schema.ResourceData) []map[string]interface{} {
	var appliancecertrenewalphases []map[string]interface{}
	var ret models.ApplianceCertRenewalPhase
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	item := p
	appliancecertrenewalphase := make(map[string]interface{})
	appliancecertrenewalphase["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	appliancecertrenewalphase["class_id"] = item.GetClassId()
	appliancecertrenewalphase["end_time"] = item.GetEndTime().String()
	appliancecertrenewalphase["failed"] = item.GetFailed()
	appliancecertrenewalphase["message"] = item.GetMessage()
	appliancecertrenewalphase["name"] = item.GetName()
	appliancecertrenewalphase["object_type"] = item.GetObjectType()
	appliancecertrenewalphase["start_time"] = item.GetStartTime().String()

	appliancecertrenewalphases = append(appliancecertrenewalphases, appliancecertrenewalphase)
	return appliancecertrenewalphases
}
func flattenMapApplianceClusterInstallPhase(p models.ApplianceClusterInstallPhase, d *schema.ResourceData) []map[string]interface{} {
	var applianceclusterinstallphases []map[string]interface{}
	var ret models.ApplianceClusterInstallPhase
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	item := p
	applianceclusterinstallphase := make(map[string]interface{})
	applianceclusterinstallphase["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	applianceclusterinstallphase["class_id"] = item.GetClassId()
	applianceclusterinstallphase["current_node"] = item.GetCurrentNode()
	applianceclusterinstallphase["current_subphase"] = item.GetCurrentSubphase()
	applianceclusterinstallphase["elapsed_time"] = item.GetElapsedTime()
	applianceclusterinstallphase["end_time"] = item.GetEndTime().String()
	applianceclusterinstallphase["failed"] = item.GetFailed()
	applianceclusterinstallphase["message"] = item.GetMessage()
	applianceclusterinstallphase["name"] = item.GetName()
	applianceclusterinstallphase["object_type"] = item.GetObjectType()
	applianceclusterinstallphase["pending_nodes"] = item.GetPendingNodes()
	applianceclusterinstallphase["start_time"] = item.GetStartTime().String()
	applianceclusterinstallphase["status"] = item.GetStatus()

	applianceclusterinstallphases = append(applianceclusterinstallphases, applianceclusterinstallphase)
	return applianceclusterinstallphases
}
func flattenMapApplianceDataExportPolicyRelationship(p models.ApplianceDataExportPolicyRelationship, d *schema.ResourceData) []map[string]interface{} {
	var appliancedataexportpolicyrelationships []map[string]interface{}
	var ret models.ApplianceDataExportPolicyRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	appliancedataexportpolicyrelationship := make(map[string]interface{})
	appliancedataexportpolicyrelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	appliancedataexportpolicyrelationship["class_id"] = item.GetClassId()
	appliancedataexportpolicyrelationship["moid"] = item.GetMoid()
	appliancedataexportpolicyrelationship["object_type"] = item.GetObjectType()
	appliancedataexportpolicyrelationship["selector"] = item.GetSelector()

	appliancedataexportpolicyrelationships = append(appliancedataexportpolicyrelationships, appliancedataexportpolicyrelationship)
	return appliancedataexportpolicyrelationships
}
func flattenMapApplianceDeviceUpgradePolicyRelationship(p models.ApplianceDeviceUpgradePolicyRelationship, d *schema.ResourceData) []map[string]interface{} {
	var appliancedeviceupgradepolicyrelationships []map[string]interface{}
	var ret models.ApplianceDeviceUpgradePolicyRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	appliancedeviceupgradepolicyrelationship := make(map[string]interface{})
	appliancedeviceupgradepolicyrelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	appliancedeviceupgradepolicyrelationship["class_id"] = item.GetClassId()
	appliancedeviceupgradepolicyrelationship["moid"] = item.GetMoid()
	appliancedeviceupgradepolicyrelationship["object_type"] = item.GetObjectType()
	appliancedeviceupgradepolicyrelationship["selector"] = item.GetSelector()

	appliancedeviceupgradepolicyrelationships = append(appliancedeviceupgradepolicyrelationships, appliancedeviceupgradepolicyrelationship)
	return appliancedeviceupgradepolicyrelationships
}
func flattenMapApplianceGroupOpStatusRelationship(p models.ApplianceGroupOpStatusRelationship, d *schema.ResourceData) []map[string]interface{} {
	var appliancegroupopstatusrelationships []map[string]interface{}
	var ret models.ApplianceGroupOpStatusRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	appliancegroupopstatusrelationship := make(map[string]interface{})
	appliancegroupopstatusrelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	appliancegroupopstatusrelationship["class_id"] = item.GetClassId()
	appliancegroupopstatusrelationship["moid"] = item.GetMoid()
	appliancegroupopstatusrelationship["object_type"] = item.GetObjectType()
	appliancegroupopstatusrelationship["selector"] = item.GetSelector()

	appliancegroupopstatusrelationships = append(appliancegroupopstatusrelationships, appliancegroupopstatusrelationship)
	return appliancegroupopstatusrelationships
}
func flattenMapApplianceGroupStatusRelationship(p models.ApplianceGroupStatusRelationship, d *schema.ResourceData) []map[string]interface{} {
	var appliancegroupstatusrelationships []map[string]interface{}
	var ret models.ApplianceGroupStatusRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	appliancegroupstatusrelationship := make(map[string]interface{})
	appliancegroupstatusrelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	appliancegroupstatusrelationship["class_id"] = item.GetClassId()
	appliancegroupstatusrelationship["moid"] = item.GetMoid()
	appliancegroupstatusrelationship["object_type"] = item.GetObjectType()
	appliancegroupstatusrelationship["selector"] = item.GetSelector()

	appliancegroupstatusrelationships = append(appliancegroupstatusrelationships, appliancegroupstatusrelationship)
	return appliancegroupstatusrelationships
}
func flattenMapApplianceImageBundleRelationship(p models.ApplianceImageBundleRelationship, d *schema.ResourceData) []map[string]interface{} {
	var applianceimagebundlerelationships []map[string]interface{}
	var ret models.ApplianceImageBundleRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	applianceimagebundlerelationship := make(map[string]interface{})
	applianceimagebundlerelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	applianceimagebundlerelationship["class_id"] = item.GetClassId()
	applianceimagebundlerelationship["moid"] = item.GetMoid()
	applianceimagebundlerelationship["object_type"] = item.GetObjectType()
	applianceimagebundlerelationship["selector"] = item.GetSelector()

	applianceimagebundlerelationships = append(applianceimagebundlerelationships, applianceimagebundlerelationship)
	return applianceimagebundlerelationships
}
func flattenMapApplianceNodeInfoRelationship(p models.ApplianceNodeInfoRelationship, d *schema.ResourceData) []map[string]interface{} {
	var appliancenodeinforelationships []map[string]interface{}
	var ret models.ApplianceNodeInfoRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	appliancenodeinforelationship := make(map[string]interface{})
	appliancenodeinforelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	appliancenodeinforelationship["class_id"] = item.GetClassId()
	appliancenodeinforelationship["moid"] = item.GetMoid()
	appliancenodeinforelationship["object_type"] = item.GetObjectType()
	appliancenodeinforelationship["selector"] = item.GetSelector()

	appliancenodeinforelationships = append(appliancenodeinforelationships, appliancenodeinforelationship)
	return appliancenodeinforelationships
}
func flattenMapApplianceNodeIpInfo(p models.ApplianceNodeIpInfo, d *schema.ResourceData) []map[string]interface{} {
	var appliancenodeipinfos []map[string]interface{}
	var ret models.ApplianceNodeIpInfo
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	item := p
	appliancenodeipinfo := make(map[string]interface{})
	appliancenodeipinfo["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	appliancenodeipinfo["class_id"] = item.GetClassId()
	appliancenodeipinfo["gateway"] = item.GetGateway()
	appliancenodeipinfo["hostname"] = item.GetHostname()
	appliancenodeipinfo["ip_address"] = item.GetIpAddress()
	appliancenodeipinfo["netmask"] = item.GetNetmask()
	appliancenodeipinfo["node_id"] = item.GetNodeId()
	appliancenodeipinfo["node_moid"] = item.GetNodeMoid()
	appliancenodeipinfo["object_type"] = item.GetObjectType()
	appliancenodeipinfo["status"] = item.GetStatus()

	appliancenodeipinfos = append(appliancenodeipinfos, appliancenodeipinfo)
	return appliancenodeipinfos
}
func flattenMapApplianceNodeOpStatusRelationship(p models.ApplianceNodeOpStatusRelationship, d *schema.ResourceData) []map[string]interface{} {
	var appliancenodeopstatusrelationships []map[string]interface{}
	var ret models.ApplianceNodeOpStatusRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	appliancenodeopstatusrelationship := make(map[string]interface{})
	appliancenodeopstatusrelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	appliancenodeopstatusrelationship["class_id"] = item.GetClassId()
	appliancenodeopstatusrelationship["moid"] = item.GetMoid()
	appliancenodeopstatusrelationship["object_type"] = item.GetObjectType()
	appliancenodeopstatusrelationship["selector"] = item.GetSelector()

	appliancenodeopstatusrelationships = append(appliancenodeopstatusrelationships, appliancenodeopstatusrelationship)
	return appliancenodeopstatusrelationships
}
func flattenMapApplianceNodeStatusRelationship(p models.ApplianceNodeStatusRelationship, d *schema.ResourceData) []map[string]interface{} {
	var appliancenodestatusrelationships []map[string]interface{}
	var ret models.ApplianceNodeStatusRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	appliancenodestatusrelationship := make(map[string]interface{})
	appliancenodestatusrelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	appliancenodestatusrelationship["class_id"] = item.GetClassId()
	appliancenodestatusrelationship["moid"] = item.GetMoid()
	appliancenodestatusrelationship["object_type"] = item.GetObjectType()
	appliancenodestatusrelationship["selector"] = item.GetSelector()

	appliancenodestatusrelationships = append(appliancenodestatusrelationships, appliancenodestatusrelationship)
	return appliancenodestatusrelationships
}
func flattenMapApplianceSystemInfoRelationship(p models.ApplianceSystemInfoRelationship, d *schema.ResourceData) []map[string]interface{} {
	var appliancesysteminforelationships []map[string]interface{}
	var ret models.ApplianceSystemInfoRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	appliancesysteminforelationship := make(map[string]interface{})
	appliancesysteminforelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	appliancesysteminforelationship["class_id"] = item.GetClassId()
	appliancesysteminforelationship["moid"] = item.GetMoid()
	appliancesysteminforelationship["object_type"] = item.GetObjectType()
	appliancesysteminforelationship["selector"] = item.GetSelector()

	appliancesysteminforelationships = append(appliancesysteminforelationships, appliancesysteminforelationship)
	return appliancesysteminforelationships
}
func flattenMapApplianceSystemOpStatusRelationship(p models.ApplianceSystemOpStatusRelationship, d *schema.ResourceData) []map[string]interface{} {
	var appliancesystemopstatusrelationships []map[string]interface{}
	var ret models.ApplianceSystemOpStatusRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	appliancesystemopstatusrelationship := make(map[string]interface{})
	appliancesystemopstatusrelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	appliancesystemopstatusrelationship["class_id"] = item.GetClassId()
	appliancesystemopstatusrelationship["moid"] = item.GetMoid()
	appliancesystemopstatusrelationship["object_type"] = item.GetObjectType()
	appliancesystemopstatusrelationship["selector"] = item.GetSelector()

	appliancesystemopstatusrelationships = append(appliancesystemopstatusrelationships, appliancesystemopstatusrelationship)
	return appliancesystemopstatusrelationships
}
func flattenMapApplianceSystemStatusRelationship(p models.ApplianceSystemStatusRelationship, d *schema.ResourceData) []map[string]interface{} {
	var appliancesystemstatusrelationships []map[string]interface{}
	var ret models.ApplianceSystemStatusRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	appliancesystemstatusrelationship := make(map[string]interface{})
	appliancesystemstatusrelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	appliancesystemstatusrelationship["class_id"] = item.GetClassId()
	appliancesystemstatusrelationship["moid"] = item.GetMoid()
	appliancesystemstatusrelationship["object_type"] = item.GetObjectType()
	appliancesystemstatusrelationship["selector"] = item.GetSelector()

	appliancesystemstatusrelationships = append(appliancesystemstatusrelationships, appliancesystemstatusrelationship)
	return appliancesystemstatusrelationships
}
func flattenMapApplianceUpgradeRelationship(p models.ApplianceUpgradeRelationship, d *schema.ResourceData) []map[string]interface{} {
	var applianceupgraderelationships []map[string]interface{}
	var ret models.ApplianceUpgradeRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	applianceupgraderelationship := make(map[string]interface{})
	applianceupgraderelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	applianceupgraderelationship["class_id"] = item.GetClassId()
	applianceupgraderelationship["moid"] = item.GetMoid()
	applianceupgraderelationship["object_type"] = item.GetObjectType()
	applianceupgraderelationship["selector"] = item.GetSelector()

	applianceupgraderelationships = append(applianceupgraderelationships, applianceupgraderelationship)
	return applianceupgraderelationships
}
func flattenMapAssetAlarmSummary(p models.AssetAlarmSummary, d *schema.ResourceData) []map[string]interface{} {
	var assetalarmsummarys []map[string]interface{}
	var ret models.AssetAlarmSummary
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	item := p
	assetalarmsummary := make(map[string]interface{})
	assetalarmsummary["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	assetalarmsummary["class_id"] = item.GetClassId()
	assetalarmsummary["critical"] = item.GetCritical()
	assetalarmsummary["health"] = item.GetHealth()
	assetalarmsummary["info"] = item.GetInfo()
	assetalarmsummary["object_type"] = item.GetObjectType()
	assetalarmsummary["suppressed_critical"] = item.GetSuppressedCritical()
	assetalarmsummary["suppressed_info"] = item.GetSuppressedInfo()
	assetalarmsummary["suppressed_warning"] = item.GetSuppressedWarning()
	assetalarmsummary["warning"] = item.GetWarning()

	assetalarmsummarys = append(assetalarmsummarys, assetalarmsummary)
	return assetalarmsummarys
}
func flattenMapAssetClaimSignature(p models.AssetClaimSignature, d *schema.ResourceData) []map[string]interface{} {
	var assetclaimsignatures []map[string]interface{}
	var ret models.AssetClaimSignature
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	item := p
	assetclaimsignature := make(map[string]interface{})
	assetclaimsignature["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	assetclaimsignature["class_id"] = item.GetClassId()
	assetclaimsignature["object_type"] = item.GetObjectType()
	assetclaimsignature["time_stamp"] = item.GetTimeStamp().String()

	assetclaimsignatures = append(assetclaimsignatures, assetclaimsignature)
	return assetclaimsignatures
}
func flattenMapAssetClusterMemberRelationship(p models.AssetClusterMemberRelationship, d *schema.ResourceData) []map[string]interface{} {
	var assetclustermemberrelationships []map[string]interface{}
	var ret models.AssetClusterMemberRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	assetclustermemberrelationship := make(map[string]interface{})
	assetclustermemberrelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	assetclustermemberrelationship["class_id"] = item.GetClassId()
	assetclustermemberrelationship["moid"] = item.GetMoid()
	assetclustermemberrelationship["object_type"] = item.GetObjectType()
	assetclustermemberrelationship["selector"] = item.GetSelector()

	assetclustermemberrelationships = append(assetclustermemberrelationships, assetclustermemberrelationship)
	return assetclustermemberrelationships
}
func flattenMapAssetContractInformation(p models.AssetContractInformation, d *schema.ResourceData) []map[string]interface{} {
	var assetcontractinformations []map[string]interface{}
	var ret models.AssetContractInformation
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	item := p
	assetcontractinformation := make(map[string]interface{})
	assetcontractinformation["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	assetcontractinformation["bill_to"] = (func(p models.AssetAddressInformation, d *schema.ResourceData) []map[string]interface{} {
		var assetaddressinformations []map[string]interface{}
		var ret models.AssetAddressInformation
		if reflect.DeepEqual(ret, p) {
			return nil
		}
		item := p
		assetaddressinformation := make(map[string]interface{})
		assetaddressinformation["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
		assetaddressinformation["address1"] = item.GetAddress1()
		assetaddressinformation["address2"] = item.GetAddress2()
		assetaddressinformation["address3"] = item.GetAddress3()
		assetaddressinformation["city"] = item.GetCity()
		assetaddressinformation["class_id"] = item.GetClassId()
		assetaddressinformation["country"] = item.GetCountry()
		assetaddressinformation["county"] = item.GetCounty()
		assetaddressinformation["location"] = item.GetLocation()
		assetaddressinformation["name"] = item.GetName()
		assetaddressinformation["object_type"] = item.GetObjectType()
		assetaddressinformation["postal_code"] = item.GetPostalCode()
		assetaddressinformation["province"] = item.GetProvince()
		assetaddressinformation["state"] = item.GetState()

		assetaddressinformations = append(assetaddressinformations, assetaddressinformation)
		return assetaddressinformations
	})(item.GetBillTo(), d)
	assetcontractinformation["bill_to_global_ultimate"] = (func(p models.AssetGlobalUltimate, d *schema.ResourceData) []map[string]interface{} {
		var assetglobalultimates []map[string]interface{}
		var ret models.AssetGlobalUltimate
		if reflect.DeepEqual(ret, p) {
			return nil
		}
		item := p
		assetglobalultimate := make(map[string]interface{})
		assetglobalultimate["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
		assetglobalultimate["class_id"] = item.GetClassId()
		assetglobalultimate["id"] = item.GetId()
		assetglobalultimate["name"] = item.GetName()
		assetglobalultimate["object_type"] = item.GetObjectType()

		assetglobalultimates = append(assetglobalultimates, assetglobalultimate)
		return assetglobalultimates
	})(item.GetBillToGlobalUltimate(), d)
	assetcontractinformation["class_id"] = item.GetClassId()
	assetcontractinformation["contract_number"] = item.GetContractNumber()
	assetcontractinformation["line_status"] = item.GetLineStatus()
	assetcontractinformation["object_type"] = item.GetObjectType()

	assetcontractinformations = append(assetcontractinformations, assetcontractinformation)
	return assetcontractinformations
}
func flattenMapAssetCustomerInformation(p models.AssetCustomerInformation, d *schema.ResourceData) []map[string]interface{} {
	var assetcustomerinformations []map[string]interface{}
	var ret models.AssetCustomerInformation
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	item := p
	assetcustomerinformation := make(map[string]interface{})
	assetcustomerinformation["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	assetcustomerinformation["address"] = (func(p models.AssetAddressInformation, d *schema.ResourceData) []map[string]interface{} {
		var assetaddressinformations []map[string]interface{}
		var ret models.AssetAddressInformation
		if reflect.DeepEqual(ret, p) {
			return nil
		}
		item := p
		assetaddressinformation := make(map[string]interface{})
		assetaddressinformation["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
		assetaddressinformation["address1"] = item.GetAddress1()
		assetaddressinformation["address2"] = item.GetAddress2()
		assetaddressinformation["address3"] = item.GetAddress3()
		assetaddressinformation["city"] = item.GetCity()
		assetaddressinformation["class_id"] = item.GetClassId()
		assetaddressinformation["country"] = item.GetCountry()
		assetaddressinformation["county"] = item.GetCounty()
		assetaddressinformation["location"] = item.GetLocation()
		assetaddressinformation["name"] = item.GetName()
		assetaddressinformation["object_type"] = item.GetObjectType()
		assetaddressinformation["postal_code"] = item.GetPostalCode()
		assetaddressinformation["province"] = item.GetProvince()
		assetaddressinformation["state"] = item.GetState()

		assetaddressinformations = append(assetaddressinformations, assetaddressinformation)
		return assetaddressinformations
	})(item.GetAddress(), d)
	assetcustomerinformation["class_id"] = item.GetClassId()
	assetcustomerinformation["id"] = item.GetId()
	assetcustomerinformation["name"] = item.GetName()
	assetcustomerinformation["object_type"] = item.GetObjectType()

	assetcustomerinformations = append(assetcustomerinformations, assetcustomerinformation)
	return assetcustomerinformations
}
func flattenMapAssetDeploymentRelationship(p models.AssetDeploymentRelationship, d *schema.ResourceData) []map[string]interface{} {
	var assetdeploymentrelationships []map[string]interface{}
	var ret models.AssetDeploymentRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	assetdeploymentrelationship := make(map[string]interface{})
	assetdeploymentrelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	assetdeploymentrelationship["class_id"] = item.GetClassId()
	assetdeploymentrelationship["moid"] = item.GetMoid()
	assetdeploymentrelationship["object_type"] = item.GetObjectType()
	assetdeploymentrelationship["selector"] = item.GetSelector()

	assetdeploymentrelationships = append(assetdeploymentrelationships, assetdeploymentrelationship)
	return assetdeploymentrelationships
}
func flattenMapAssetDeploymentAlarmInfo(p models.AssetDeploymentAlarmInfo, d *schema.ResourceData) []map[string]interface{} {
	var assetdeploymentalarminfos []map[string]interface{}
	var ret models.AssetDeploymentAlarmInfo
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	item := p
	assetdeploymentalarminfo := make(map[string]interface{})
	assetdeploymentalarminfo["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	assetdeploymentalarminfo["class_id"] = item.GetClassId()
	assetdeploymentalarminfo["enabled_alarms"] = item.GetEnabledAlarms()
	assetdeploymentalarminfo["object_type"] = item.GetObjectType()

	assetdeploymentalarminfos = append(assetdeploymentalarminfos, assetdeploymentalarminfo)
	return assetdeploymentalarminfos
}
func flattenMapAssetDeploymentDeviceAlarmInfo(p models.AssetDeploymentDeviceAlarmInfo, d *schema.ResourceData) []map[string]interface{} {
	var assetdeploymentdevicealarminfos []map[string]interface{}
	var ret models.AssetDeploymentDeviceAlarmInfo
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	item := p
	assetdeploymentdevicealarminfo := make(map[string]interface{})
	assetdeploymentdevicealarminfo["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	assetdeploymentdevicealarminfo["class_id"] = item.GetClassId()
	assetdeploymentdevicealarminfo["enabled_alarms"] = item.GetEnabledAlarms()
	assetdeploymentdevicealarminfo["object_type"] = item.GetObjectType()

	assetdeploymentdevicealarminfos = append(assetdeploymentdevicealarminfos, assetdeploymentdevicealarminfo)
	return assetdeploymentdevicealarminfos
}
func flattenMapAssetDeploymentDeviceInformation(p models.AssetDeploymentDeviceInformation, d *schema.ResourceData) []map[string]interface{} {
	var assetdeploymentdeviceinformations []map[string]interface{}
	var ret models.AssetDeploymentDeviceInformation
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	item := p
	assetdeploymentdeviceinformation := make(map[string]interface{})
	assetdeploymentdeviceinformation["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	assetdeploymentdeviceinformation["application_name"] = item.GetApplicationName()
	assetdeploymentdeviceinformation["class_id"] = item.GetClassId()
	assetdeploymentdeviceinformation["description"] = item.GetDescription()
	assetdeploymentdeviceinformation["device_transactions"] = (func(p []models.AssetDeviceTransaction, d *schema.ResourceData) []map[string]interface{} {
		var assetdevicetransactions []map[string]interface{}
		if len(p) == 0 {
			return nil
		}
		for _, item := range p {
			assetdevicetransaction := make(map[string]interface{})
			assetdevicetransaction["action"] = item.GetAction()
			assetdevicetransaction["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
			assetdevicetransaction["class_id"] = item.GetClassId()
			assetdevicetransaction["object_type"] = item.GetObjectType()
			assetdevicetransaction["status_description"] = item.GetStatusDescription()
			assetdevicetransaction["status_id"] = item.GetStatusId()
			assetdevicetransaction["timestamp"] = item.GetTimestamp()
			assetdevicetransaction["transaction_batch_id"] = item.GetTransactionBatchId()
			assetdevicetransaction["transaction_date"] = item.GetTransactionDate()
			assetdevicetransaction["transaction_sequence"] = item.GetTransactionSequence()
			assetdevicetransactions = append(assetdevicetransactions, assetdevicetransaction)
		}
		return assetdevicetransactions
	})(item.GetDeviceTransactions(), d)
	assetdeploymentdeviceinformation["instance_id"] = item.GetInstanceId()
	assetdeploymentdeviceinformation["item_type"] = item.GetItemType()
	assetdeploymentdeviceinformation["mlb_product_id"] = item.GetMlbProductId()
	assetdeploymentdeviceinformation["mlb_product_name"] = item.GetMlbProductName()
	assetdeploymentdeviceinformation["object_type"] = item.GetObjectType()
	assetdeploymentdeviceinformation["old_device_id"] = item.GetOldDeviceId()
	assetdeploymentdeviceinformation["old_device_status_description"] = item.GetOldDeviceStatusDescription()
	assetdeploymentdeviceinformation["old_device_status_id"] = item.GetOldDeviceStatusId()
	assetdeploymentdeviceinformation["old_instance_id"] = item.GetOldInstanceId()

	assetdeploymentdeviceinformations = append(assetdeploymentdeviceinformations, assetdeploymentdeviceinformation)
	return assetdeploymentdeviceinformations
}
func flattenMapAssetDeviceClaimRelationship(p models.AssetDeviceClaimRelationship, d *schema.ResourceData) []map[string]interface{} {
	var assetdeviceclaimrelationships []map[string]interface{}
	var ret models.AssetDeviceClaimRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	assetdeviceclaimrelationship := make(map[string]interface{})
	assetdeviceclaimrelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	assetdeviceclaimrelationship["class_id"] = item.GetClassId()
	assetdeviceclaimrelationship["moid"] = item.GetMoid()
	assetdeviceclaimrelationship["object_type"] = item.GetObjectType()
	assetdeviceclaimrelationship["selector"] = item.GetSelector()

	assetdeviceclaimrelationships = append(assetdeviceclaimrelationships, assetdeviceclaimrelationship)
	return assetdeviceclaimrelationships
}
func flattenMapAssetDeviceConfigurationRelationship(p models.AssetDeviceConfigurationRelationship, d *schema.ResourceData) []map[string]interface{} {
	var assetdeviceconfigurationrelationships []map[string]interface{}
	var ret models.AssetDeviceConfigurationRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	assetdeviceconfigurationrelationship := make(map[string]interface{})
	assetdeviceconfigurationrelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	assetdeviceconfigurationrelationship["class_id"] = item.GetClassId()
	assetdeviceconfigurationrelationship["moid"] = item.GetMoid()
	assetdeviceconfigurationrelationship["object_type"] = item.GetObjectType()
	assetdeviceconfigurationrelationship["selector"] = item.GetSelector()

	assetdeviceconfigurationrelationships = append(assetdeviceconfigurationrelationships, assetdeviceconfigurationrelationship)
	return assetdeviceconfigurationrelationships
}
func flattenMapAssetDeviceConnectionRelationship(p models.AssetDeviceConnectionRelationship, d *schema.ResourceData) []map[string]interface{} {
	var assetdeviceconnectionrelationships []map[string]interface{}
	var ret models.AssetDeviceConnectionRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	assetdeviceconnectionrelationship := make(map[string]interface{})
	assetdeviceconnectionrelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	assetdeviceconnectionrelationship["class_id"] = item.GetClassId()
	assetdeviceconnectionrelationship["moid"] = item.GetMoid()
	assetdeviceconnectionrelationship["object_type"] = item.GetObjectType()
	assetdeviceconnectionrelationship["selector"] = item.GetSelector()

	assetdeviceconnectionrelationships = append(assetdeviceconnectionrelationships, assetdeviceconnectionrelationship)
	return assetdeviceconnectionrelationships
}
func flattenMapAssetDeviceContractInformationRelationship(p models.AssetDeviceContractInformationRelationship, d *schema.ResourceData) []map[string]interface{} {
	var assetdevicecontractinformationrelationships []map[string]interface{}
	var ret models.AssetDeviceContractInformationRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	assetdevicecontractinformationrelationship := make(map[string]interface{})
	assetdevicecontractinformationrelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	assetdevicecontractinformationrelationship["class_id"] = item.GetClassId()
	assetdevicecontractinformationrelationship["moid"] = item.GetMoid()
	assetdevicecontractinformationrelationship["object_type"] = item.GetObjectType()
	assetdevicecontractinformationrelationship["selector"] = item.GetSelector()

	assetdevicecontractinformationrelationships = append(assetdevicecontractinformationrelationships, assetdevicecontractinformationrelationship)
	return assetdevicecontractinformationrelationships
}
func flattenMapAssetDeviceInformation(p models.AssetDeviceInformation, d *schema.ResourceData) []map[string]interface{} {
	var assetdeviceinformations []map[string]interface{}
	var ret models.AssetDeviceInformation
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	item := p
	assetdeviceinformation := make(map[string]interface{})
	assetdeviceinformation["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	assetdeviceinformation["application_name"] = item.GetApplicationName()
	assetdeviceinformation["class_id"] = item.GetClassId()
	assetdeviceinformation["device_transactions"] = (func(p []models.AssetDeviceTransaction, d *schema.ResourceData) []map[string]interface{} {
		var assetdevicetransactions []map[string]interface{}
		if len(p) == 0 {
			return nil
		}
		for _, item := range p {
			assetdevicetransaction := make(map[string]interface{})
			assetdevicetransaction["action"] = item.GetAction()
			assetdevicetransaction["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
			assetdevicetransaction["class_id"] = item.GetClassId()
			assetdevicetransaction["object_type"] = item.GetObjectType()
			assetdevicetransaction["status_description"] = item.GetStatusDescription()
			assetdevicetransaction["status_id"] = item.GetStatusId()
			assetdevicetransaction["timestamp"] = item.GetTimestamp()
			assetdevicetransaction["transaction_batch_id"] = item.GetTransactionBatchId()
			assetdevicetransaction["transaction_date"] = item.GetTransactionDate()
			assetdevicetransaction["transaction_sequence"] = item.GetTransactionSequence()
			assetdevicetransactions = append(assetdevicetransactions, assetdevicetransaction)
		}
		return assetdevicetransactions
	})(item.GetDeviceTransactions(), d)
	assetdeviceinformation["end_customer"] = (func(p models.AssetCustomerInformation, d *schema.ResourceData) []map[string]interface{} {
		var assetcustomerinformations []map[string]interface{}
		var ret models.AssetCustomerInformation
		if reflect.DeepEqual(ret, p) {
			return nil
		}
		item := p
		assetcustomerinformation := make(map[string]interface{})
		assetcustomerinformation["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
		assetcustomerinformation["address"] = (func(p models.AssetAddressInformation, d *schema.ResourceData) []map[string]interface{} {
			var assetaddressinformations []map[string]interface{}
			var ret models.AssetAddressInformation
			if reflect.DeepEqual(ret, p) {
				return nil
			}
			item := p
			assetaddressinformation := make(map[string]interface{})
			assetaddressinformation["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
			assetaddressinformation["address1"] = item.GetAddress1()
			assetaddressinformation["address2"] = item.GetAddress2()
			assetaddressinformation["address3"] = item.GetAddress3()
			assetaddressinformation["city"] = item.GetCity()
			assetaddressinformation["class_id"] = item.GetClassId()
			assetaddressinformation["country"] = item.GetCountry()
			assetaddressinformation["county"] = item.GetCounty()
			assetaddressinformation["location"] = item.GetLocation()
			assetaddressinformation["name"] = item.GetName()
			assetaddressinformation["object_type"] = item.GetObjectType()
			assetaddressinformation["postal_code"] = item.GetPostalCode()
			assetaddressinformation["province"] = item.GetProvince()
			assetaddressinformation["state"] = item.GetState()

			assetaddressinformations = append(assetaddressinformations, assetaddressinformation)
			return assetaddressinformations
		})(item.GetAddress(), d)
		assetcustomerinformation["class_id"] = item.GetClassId()
		assetcustomerinformation["id"] = item.GetId()
		assetcustomerinformation["name"] = item.GetName()
		assetcustomerinformation["object_type"] = item.GetObjectType()

		assetcustomerinformations = append(assetcustomerinformations, assetcustomerinformation)
		return assetcustomerinformations
	})(item.GetEndCustomer(), d)
	assetdeviceinformation["instance_id"] = item.GetInstanceId()
	assetdeviceinformation["item_type"] = item.GetItemType()
	assetdeviceinformation["mlb_offer_type"] = item.GetMlbOfferType()
	assetdeviceinformation["mlb_product_id"] = item.GetMlbProductId()
	assetdeviceinformation["mlb_product_name"] = item.GetMlbProductName()
	assetdeviceinformation["object_type"] = item.GetObjectType()
	assetdeviceinformation["old_device_id"] = item.GetOldDeviceId()
	assetdeviceinformation["old_device_status_description"] = item.GetOldDeviceStatusDescription()
	assetdeviceinformation["old_device_status_id"] = item.GetOldDeviceStatusId()
	assetdeviceinformation["old_instance_id"] = item.GetOldInstanceId()
	assetdeviceinformation["product_family"] = item.GetProductFamily()
	assetdeviceinformation["product_type"] = item.GetProductType()
	assetdeviceinformation["unit_of_measure"] = item.GetUnitOfMeasure()

	assetdeviceinformations = append(assetdeviceinformations, assetdeviceinformation)
	return assetdeviceinformations
}
func flattenMapAssetDeviceRegistrationRelationship(p models.AssetDeviceRegistrationRelationship, d *schema.ResourceData) []map[string]interface{} {
	var assetdeviceregistrationrelationships []map[string]interface{}
	var ret models.AssetDeviceRegistrationRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	assetdeviceregistrationrelationship := make(map[string]interface{})
	assetdeviceregistrationrelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	assetdeviceregistrationrelationship["class_id"] = item.GetClassId()
	assetdeviceregistrationrelationship["moid"] = item.GetMoid()
	assetdeviceregistrationrelationship["object_type"] = item.GetObjectType()
	assetdeviceregistrationrelationship["selector"] = item.GetSelector()

	assetdeviceregistrationrelationships = append(assetdeviceregistrationrelationships, assetdeviceregistrationrelationship)
	return assetdeviceregistrationrelationships
}
func flattenMapAssetDeviceStatistics(p models.AssetDeviceStatistics, d *schema.ResourceData) []map[string]interface{} {
	var assetdevicestatisticss []map[string]interface{}
	var ret models.AssetDeviceStatistics
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	item := p
	assetdevicestatistics := make(map[string]interface{})
	assetdevicestatistics["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	assetdevicestatistics["class_id"] = item.GetClassId()
	assetdevicestatistics["cluster_deployment_type"] = item.GetClusterDeploymentType()
	assetdevicestatistics["cluster_device_moid"] = item.GetClusterDeviceMoid()
	assetdevicestatistics["cluster_name"] = item.GetClusterName()
	assetdevicestatistics["cluster_replication_factor"] = item.GetClusterReplicationFactor()
	assetdevicestatistics["connected"] = item.GetConnected()
	assetdevicestatistics["membership_ratio"] = item.GetMembershipRatio()
	assetdevicestatistics["memory_mirroring_factor"] = item.GetMemoryMirroringFactor()
	assetdevicestatistics["object_type"] = item.GetObjectType()
	assetdevicestatistics["vm_host"] = (func(p models.AssetVmHost, d *schema.ResourceData) []map[string]interface{} {
		var assetvmhosts []map[string]interface{}
		var ret models.AssetVmHost
		if reflect.DeepEqual(ret, p) {
			return nil
		}
		item := p
		assetvmhost := make(map[string]interface{})
		assetvmhost["account_moid"] = item.GetAccountMoid()
		assetvmhost["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
		assetvmhost["class_id"] = item.GetClassId()
		assetvmhost["cluster_identity"] = item.GetClusterIdentity()
		assetvmhost["cluster_moid"] = item.GetClusterMoid()
		assetvmhost["cluster_name"] = item.GetClusterName()
		assetvmhost["object_type"] = item.GetObjectType()

		assetvmhosts = append(assetvmhosts, assetvmhost)
		return assetvmhosts
	})(item.GetVmHost(), d)

	assetdevicestatisticss = append(assetdevicestatisticss, assetdevicestatistics)
	return assetdevicestatisticss
}
func flattenMapAssetGlobalUltimate(p models.AssetGlobalUltimate, d *schema.ResourceData) []map[string]interface{} {
	var assetglobalultimates []map[string]interface{}
	var ret models.AssetGlobalUltimate
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	item := p
	assetglobalultimate := make(map[string]interface{})
	assetglobalultimate["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	assetglobalultimate["class_id"] = item.GetClassId()
	assetglobalultimate["id"] = item.GetId()
	assetglobalultimate["name"] = item.GetName()
	assetglobalultimate["object_type"] = item.GetObjectType()

	assetglobalultimates = append(assetglobalultimates, assetglobalultimate)
	return assetglobalultimates
}
func flattenMapAssetProductInformation(p models.AssetProductInformation, d *schema.ResourceData) []map[string]interface{} {
	var assetproductinformations []map[string]interface{}
	var ret models.AssetProductInformation
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	item := p
	assetproductinformation := make(map[string]interface{})
	assetproductinformation["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	assetproductinformation["bill_to"] = (func(p models.AssetAddressInformation, d *schema.ResourceData) []map[string]interface{} {
		var assetaddressinformations []map[string]interface{}
		var ret models.AssetAddressInformation
		if reflect.DeepEqual(ret, p) {
			return nil
		}
		item := p
		assetaddressinformation := make(map[string]interface{})
		assetaddressinformation["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
		assetaddressinformation["address1"] = item.GetAddress1()
		assetaddressinformation["address2"] = item.GetAddress2()
		assetaddressinformation["address3"] = item.GetAddress3()
		assetaddressinformation["city"] = item.GetCity()
		assetaddressinformation["class_id"] = item.GetClassId()
		assetaddressinformation["country"] = item.GetCountry()
		assetaddressinformation["county"] = item.GetCounty()
		assetaddressinformation["location"] = item.GetLocation()
		assetaddressinformation["name"] = item.GetName()
		assetaddressinformation["object_type"] = item.GetObjectType()
		assetaddressinformation["postal_code"] = item.GetPostalCode()
		assetaddressinformation["province"] = item.GetProvince()
		assetaddressinformation["state"] = item.GetState()

		assetaddressinformations = append(assetaddressinformations, assetaddressinformation)
		return assetaddressinformations
	})(item.GetBillTo(), d)
	assetproductinformation["class_id"] = item.GetClassId()
	assetproductinformation["description"] = item.GetDescription()
	assetproductinformation["family"] = item.GetFamily()
	assetproductinformation["group"] = item.GetGroup()
	assetproductinformation["number"] = item.GetNumber()
	assetproductinformation["object_type"] = item.GetObjectType()
	assetproductinformation["ship_to"] = (func(p models.AssetAddressInformation, d *schema.ResourceData) []map[string]interface{} {
		var assetaddressinformations []map[string]interface{}
		var ret models.AssetAddressInformation
		if reflect.DeepEqual(ret, p) {
			return nil
		}
		item := p
		assetaddressinformation := make(map[string]interface{})
		assetaddressinformation["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
		assetaddressinformation["address1"] = item.GetAddress1()
		assetaddressinformation["address2"] = item.GetAddress2()
		assetaddressinformation["address3"] = item.GetAddress3()
		assetaddressinformation["city"] = item.GetCity()
		assetaddressinformation["class_id"] = item.GetClassId()
		assetaddressinformation["country"] = item.GetCountry()
		assetaddressinformation["county"] = item.GetCounty()
		assetaddressinformation["location"] = item.GetLocation()
		assetaddressinformation["name"] = item.GetName()
		assetaddressinformation["object_type"] = item.GetObjectType()
		assetaddressinformation["postal_code"] = item.GetPostalCode()
		assetaddressinformation["province"] = item.GetProvince()
		assetaddressinformation["state"] = item.GetState()

		assetaddressinformations = append(assetaddressinformations, assetaddressinformation)
		return assetaddressinformations
	})(item.GetShipTo(), d)
	assetproductinformation["sub_type"] = item.GetSubType()

	assetproductinformations = append(assetproductinformations, assetproductinformation)
	return assetproductinformations
}
func flattenMapAssetSubscriptionRelationship(p models.AssetSubscriptionRelationship, d *schema.ResourceData) []map[string]interface{} {
	var assetsubscriptionrelationships []map[string]interface{}
	var ret models.AssetSubscriptionRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	assetsubscriptionrelationship := make(map[string]interface{})
	assetsubscriptionrelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	assetsubscriptionrelationship["class_id"] = item.GetClassId()
	assetsubscriptionrelationship["moid"] = item.GetMoid()
	assetsubscriptionrelationship["object_type"] = item.GetObjectType()
	assetsubscriptionrelationship["selector"] = item.GetSelector()

	assetsubscriptionrelationships = append(assetsubscriptionrelationships, assetsubscriptionrelationship)
	return assetsubscriptionrelationships
}
func flattenMapAssetSubscriptionAccountRelationship(p models.AssetSubscriptionAccountRelationship, d *schema.ResourceData) []map[string]interface{} {
	var assetsubscriptionaccountrelationships []map[string]interface{}
	var ret models.AssetSubscriptionAccountRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	assetsubscriptionaccountrelationship := make(map[string]interface{})
	assetsubscriptionaccountrelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	assetsubscriptionaccountrelationship["class_id"] = item.GetClassId()
	assetsubscriptionaccountrelationship["moid"] = item.GetMoid()
	assetsubscriptionaccountrelationship["object_type"] = item.GetObjectType()
	assetsubscriptionaccountrelationship["selector"] = item.GetSelector()

	assetsubscriptionaccountrelationships = append(assetsubscriptionaccountrelationships, assetsubscriptionaccountrelationship)
	return assetsubscriptionaccountrelationships
}
func flattenMapAssetSudiInfo(p models.AssetSudiInfo, d *schema.ResourceData) []map[string]interface{} {
	var assetsudiinfos []map[string]interface{}
	var ret models.AssetSudiInfo
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	item := p
	assetsudiinfo := make(map[string]interface{})
	assetsudiinfo["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	assetsudiinfo["class_id"] = item.GetClassId()
	assetsudiinfo["object_type"] = item.GetObjectType()
	assetsudiinfo["pid"] = item.GetPid()
	assetsudiinfo["serial_number"] = item.GetSerialNumber()
	assetsudiinfo["signature"] = item.GetSignature()
	assetsudiinfo["status"] = item.GetStatus()
	assetsudiinfo["status_details"] = item.GetStatusDetails()
	assetsudiinfo["sudi_certificate"] = (func(p models.X509Certificate, d *schema.ResourceData) []map[string]interface{} {
		var x509certificates []map[string]interface{}
		var ret models.X509Certificate
		if reflect.DeepEqual(ret, p) {
			return nil
		}
		item := p
		x509certificate := make(map[string]interface{})
		x509certificate["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
		x509certificate["class_id"] = item.GetClassId()
		x509certificate["issuer"] = (func(p models.PkixDistinguishedName, d *schema.ResourceData) []map[string]interface{} {
			var pkixdistinguishednames []map[string]interface{}
			var ret models.PkixDistinguishedName
			if reflect.DeepEqual(ret, p) {
				return nil
			}
			item := p
			pkixdistinguishedname := make(map[string]interface{})
			pkixdistinguishedname["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
			pkixdistinguishedname["class_id"] = item.GetClassId()
			pkixdistinguishedname["common_name"] = item.GetCommonName()
			pkixdistinguishedname["country"] = item.GetCountry()
			pkixdistinguishedname["locality"] = item.GetLocality()
			pkixdistinguishedname["object_type"] = item.GetObjectType()
			pkixdistinguishedname["organization"] = item.GetOrganization()
			pkixdistinguishedname["organizational_unit"] = item.GetOrganizationalUnit()
			pkixdistinguishedname["state"] = item.GetState()

			pkixdistinguishednames = append(pkixdistinguishednames, pkixdistinguishedname)
			return pkixdistinguishednames
		})(item.GetIssuer(), d)
		x509certificate["not_after"] = item.GetNotAfter().String()
		x509certificate["not_before"] = item.GetNotBefore().String()
		x509certificate["object_type"] = item.GetObjectType()
		x509certificate["pem_certificate"] = item.GetPemCertificate()
		x509certificate["sha256_fingerprint"] = item.GetSha256Fingerprint()
		x509certificate["signature_algorithm"] = item.GetSignatureAlgorithm()
		x509certificate["subject"] = (func(p models.PkixDistinguishedName, d *schema.ResourceData) []map[string]interface{} {
			var pkixdistinguishednames []map[string]interface{}
			var ret models.PkixDistinguishedName
			if reflect.DeepEqual(ret, p) {
				return nil
			}
			item := p
			pkixdistinguishedname := make(map[string]interface{})
			pkixdistinguishedname["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
			pkixdistinguishedname["class_id"] = item.GetClassId()
			pkixdistinguishedname["common_name"] = item.GetCommonName()
			pkixdistinguishedname["country"] = item.GetCountry()
			pkixdistinguishedname["locality"] = item.GetLocality()
			pkixdistinguishedname["object_type"] = item.GetObjectType()
			pkixdistinguishedname["organization"] = item.GetOrganization()
			pkixdistinguishedname["organizational_unit"] = item.GetOrganizationalUnit()
			pkixdistinguishedname["state"] = item.GetState()

			pkixdistinguishednames = append(pkixdistinguishednames, pkixdistinguishedname)
			return pkixdistinguishednames
		})(item.GetSubject(), d)

		x509certificates = append(x509certificates, x509certificate)
		return x509certificates
	})(item.GetSudiCertificate(), d)

	assetsudiinfos = append(assetsudiinfos, assetsudiinfo)
	return assetsudiinfos
}
func flattenMapAssetTargetRelationship(p models.AssetTargetRelationship, d *schema.ResourceData) []map[string]interface{} {
	var assettargetrelationships []map[string]interface{}
	var ret models.AssetTargetRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	assettargetrelationship := make(map[string]interface{})
	assettargetrelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	assettargetrelationship["class_id"] = item.GetClassId()
	assettargetrelationship["moid"] = item.GetMoid()
	assettargetrelationship["object_type"] = item.GetObjectType()
	assettargetrelationship["selector"] = item.GetSelector()

	assettargetrelationships = append(assettargetrelationships, assettargetrelationship)
	return assettargetrelationships
}
func flattenMapBiosBootModeRelationship(p models.BiosBootModeRelationship, d *schema.ResourceData) []map[string]interface{} {
	var biosbootmoderelationships []map[string]interface{}
	var ret models.BiosBootModeRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	biosbootmoderelationship := make(map[string]interface{})
	biosbootmoderelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	biosbootmoderelationship["class_id"] = item.GetClassId()
	biosbootmoderelationship["moid"] = item.GetMoid()
	biosbootmoderelationship["object_type"] = item.GetObjectType()
	biosbootmoderelationship["selector"] = item.GetSelector()

	biosbootmoderelationships = append(biosbootmoderelationships, biosbootmoderelationship)
	return biosbootmoderelationships
}
func flattenMapBiosSystemBootOrderRelationship(p models.BiosSystemBootOrderRelationship, d *schema.ResourceData) []map[string]interface{} {
	var biossystembootorderrelationships []map[string]interface{}
	var ret models.BiosSystemBootOrderRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	biossystembootorderrelationship := make(map[string]interface{})
	biossystembootorderrelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	biossystembootorderrelationship["class_id"] = item.GetClassId()
	biossystembootorderrelationship["moid"] = item.GetMoid()
	biossystembootorderrelationship["object_type"] = item.GetObjectType()
	biossystembootorderrelationship["selector"] = item.GetSelector()

	biossystembootorderrelationships = append(biossystembootorderrelationships, biossystembootorderrelationship)
	return biossystembootorderrelationships
}
func flattenMapBiosTokenSettingsRelationship(p models.BiosTokenSettingsRelationship, d *schema.ResourceData) []map[string]interface{} {
	var biostokensettingsrelationships []map[string]interface{}
	var ret models.BiosTokenSettingsRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	biostokensettingsrelationship := make(map[string]interface{})
	biostokensettingsrelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	biostokensettingsrelationship["class_id"] = item.GetClassId()
	biostokensettingsrelationship["moid"] = item.GetMoid()
	biostokensettingsrelationship["object_type"] = item.GetObjectType()
	biostokensettingsrelationship["selector"] = item.GetSelector()

	biostokensettingsrelationships = append(biostokensettingsrelationships, biostokensettingsrelationship)
	return biostokensettingsrelationships
}
func flattenMapBiosUnitRelationship(p models.BiosUnitRelationship, d *schema.ResourceData) []map[string]interface{} {
	var biosunitrelationships []map[string]interface{}
	var ret models.BiosUnitRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	biosunitrelationship := make(map[string]interface{})
	biosunitrelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	biosunitrelationship["class_id"] = item.GetClassId()
	biosunitrelationship["moid"] = item.GetMoid()
	biosunitrelationship["object_type"] = item.GetObjectType()
	biosunitrelationship["selector"] = item.GetSelector()

	biosunitrelationships = append(biosunitrelationships, biosunitrelationship)
	return biosunitrelationships
}
func flattenMapBiosVfSelectMemoryRasConfigurationRelationship(p models.BiosVfSelectMemoryRasConfigurationRelationship, d *schema.ResourceData) []map[string]interface{} {
	var biosvfselectmemoryrasconfigurationrelationships []map[string]interface{}
	var ret models.BiosVfSelectMemoryRasConfigurationRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	biosvfselectmemoryrasconfigurationrelationship := make(map[string]interface{})
	biosvfselectmemoryrasconfigurationrelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	biosvfselectmemoryrasconfigurationrelationship["class_id"] = item.GetClassId()
	biosvfselectmemoryrasconfigurationrelationship["moid"] = item.GetMoid()
	biosvfselectmemoryrasconfigurationrelationship["object_type"] = item.GetObjectType()
	biosvfselectmemoryrasconfigurationrelationship["selector"] = item.GetSelector()

	biosvfselectmemoryrasconfigurationrelationships = append(biosvfselectmemoryrasconfigurationrelationships, biosvfselectmemoryrasconfigurationrelationship)
	return biosvfselectmemoryrasconfigurationrelationships
}
func flattenMapBootDeviceBootModeRelationship(p models.BootDeviceBootModeRelationship, d *schema.ResourceData) []map[string]interface{} {
	var bootdevicebootmoderelationships []map[string]interface{}
	var ret models.BootDeviceBootModeRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	bootdevicebootmoderelationship := make(map[string]interface{})
	bootdevicebootmoderelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	bootdevicebootmoderelationship["class_id"] = item.GetClassId()
	bootdevicebootmoderelationship["moid"] = item.GetMoid()
	bootdevicebootmoderelationship["object_type"] = item.GetObjectType()
	bootdevicebootmoderelationship["selector"] = item.GetSelector()

	bootdevicebootmoderelationships = append(bootdevicebootmoderelationships, bootdevicebootmoderelationship)
	return bootdevicebootmoderelationships
}
func flattenMapBootDeviceBootSecurityRelationship(p models.BootDeviceBootSecurityRelationship, d *schema.ResourceData) []map[string]interface{} {
	var bootdevicebootsecurityrelationships []map[string]interface{}
	var ret models.BootDeviceBootSecurityRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	bootdevicebootsecurityrelationship := make(map[string]interface{})
	bootdevicebootsecurityrelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	bootdevicebootsecurityrelationship["class_id"] = item.GetClassId()
	bootdevicebootsecurityrelationship["moid"] = item.GetMoid()
	bootdevicebootsecurityrelationship["object_type"] = item.GetObjectType()
	bootdevicebootsecurityrelationship["selector"] = item.GetSelector()

	bootdevicebootsecurityrelationships = append(bootdevicebootsecurityrelationships, bootdevicebootsecurityrelationship)
	return bootdevicebootsecurityrelationships
}
func flattenMapBulkApiResult(p models.BulkApiResult, d *schema.ResourceData) []map[string]interface{} {
	var bulkapiresults []map[string]interface{}
	var ret models.BulkApiResult
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	item := p
	bulkapiresult := make(map[string]interface{})
	bulkapiresult["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	bulkapiresult["class_id"] = item.GetClassId()
	bulkapiresult["object_type"] = item.GetObjectType()
	bulkapiresult["status"] = item.GetStatus()

	bulkapiresults = append(bulkapiresults, bulkapiresult)
	return bulkapiresults
}
func flattenMapBulkExportRelationship(p models.BulkExportRelationship, d *schema.ResourceData) []map[string]interface{} {
	var bulkexportrelationships []map[string]interface{}
	var ret models.BulkExportRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	bulkexportrelationship := make(map[string]interface{})
	bulkexportrelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	bulkexportrelationship["class_id"] = item.GetClassId()
	bulkexportrelationship["moid"] = item.GetMoid()
	bulkexportrelationship["object_type"] = item.GetObjectType()
	bulkexportrelationship["selector"] = item.GetSelector()

	bulkexportrelationships = append(bulkexportrelationships, bulkexportrelationship)
	return bulkexportrelationships
}
func flattenMapBulkExportedItemRelationship(p models.BulkExportedItemRelationship, d *schema.ResourceData) []map[string]interface{} {
	var bulkexporteditemrelationships []map[string]interface{}
	var ret models.BulkExportedItemRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	bulkexporteditemrelationship := make(map[string]interface{})
	bulkexporteditemrelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	bulkexporteditemrelationship["class_id"] = item.GetClassId()
	bulkexporteditemrelationship["moid"] = item.GetMoid()
	bulkexporteditemrelationship["object_type"] = item.GetObjectType()
	bulkexporteditemrelationship["selector"] = item.GetSelector()

	bulkexporteditemrelationships = append(bulkexporteditemrelationships, bulkexporteditemrelationship)
	return bulkexporteditemrelationships
}
func flattenMapBulkMoClonerRelationship(p models.BulkMoClonerRelationship, d *schema.ResourceData) []map[string]interface{} {
	var bulkmoclonerrelationships []map[string]interface{}
	var ret models.BulkMoClonerRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	bulkmoclonerrelationship := make(map[string]interface{})
	bulkmoclonerrelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	bulkmoclonerrelationship["class_id"] = item.GetClassId()
	bulkmoclonerrelationship["moid"] = item.GetMoid()
	bulkmoclonerrelationship["object_type"] = item.GetObjectType()
	bulkmoclonerrelationship["selector"] = item.GetSelector()

	bulkmoclonerrelationships = append(bulkmoclonerrelationships, bulkmoclonerrelationship)
	return bulkmoclonerrelationships
}
func flattenMapBulkMoDeepClonerRelationship(p models.BulkMoDeepClonerRelationship, d *schema.ResourceData) []map[string]interface{} {
	var bulkmodeepclonerrelationships []map[string]interface{}
	var ret models.BulkMoDeepClonerRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	bulkmodeepclonerrelationship := make(map[string]interface{})
	bulkmodeepclonerrelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	bulkmodeepclonerrelationship["class_id"] = item.GetClassId()
	bulkmodeepclonerrelationship["moid"] = item.GetMoid()
	bulkmodeepclonerrelationship["object_type"] = item.GetObjectType()
	bulkmodeepclonerrelationship["selector"] = item.GetSelector()

	bulkmodeepclonerrelationships = append(bulkmodeepclonerrelationships, bulkmodeepclonerrelationship)
	return bulkmodeepclonerrelationships
}
func flattenMapBulkMoMergerRelationship(p models.BulkMoMergerRelationship, d *schema.ResourceData) []map[string]interface{} {
	var bulkmomergerrelationships []map[string]interface{}
	var ret models.BulkMoMergerRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	bulkmomergerrelationship := make(map[string]interface{})
	bulkmomergerrelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	bulkmomergerrelationship["class_id"] = item.GetClassId()
	bulkmomergerrelationship["moid"] = item.GetMoid()
	bulkmomergerrelationship["object_type"] = item.GetObjectType()
	bulkmomergerrelationship["selector"] = item.GetSelector()

	bulkmomergerrelationships = append(bulkmomergerrelationships, bulkmomergerrelationship)
	return bulkmomergerrelationships
}
func flattenMapBulkRequestRelationship(p models.BulkRequestRelationship, d *schema.ResourceData) []map[string]interface{} {
	var bulkrequestrelationships []map[string]interface{}
	var ret models.BulkRequestRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	bulkrequestrelationship := make(map[string]interface{})
	bulkrequestrelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	bulkrequestrelationship["class_id"] = item.GetClassId()
	bulkrequestrelationship["moid"] = item.GetMoid()
	bulkrequestrelationship["object_type"] = item.GetObjectType()
	bulkrequestrelationship["selector"] = item.GetSelector()

	bulkrequestrelationships = append(bulkrequestrelationships, bulkrequestrelationship)
	return bulkrequestrelationships
}
func flattenMapBulkResultRelationship(p models.BulkResultRelationship, d *schema.ResourceData) []map[string]interface{} {
	var bulkresultrelationships []map[string]interface{}
	var ret models.BulkResultRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	bulkresultrelationship := make(map[string]interface{})
	bulkresultrelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	bulkresultrelationship["class_id"] = item.GetClassId()
	bulkresultrelationship["moid"] = item.GetMoid()
	bulkresultrelationship["object_type"] = item.GetObjectType()
	bulkresultrelationship["selector"] = item.GetSelector()

	bulkresultrelationships = append(bulkresultrelationships, bulkresultrelationship)
	return bulkresultrelationships
}
func flattenMapCapabilitySwitchNetworkLimits(p models.CapabilitySwitchNetworkLimits, d *schema.ResourceData) []map[string]interface{} {
	var capabilityswitchnetworklimitss []map[string]interface{}
	var ret models.CapabilitySwitchNetworkLimits
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	item := p
	capabilityswitchnetworklimits := make(map[string]interface{})
	capabilityswitchnetworklimits["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	capabilityswitchnetworklimits["class_id"] = item.GetClassId()
	capabilityswitchnetworklimits["max_compressed_port_vlan_count"] = item.GetMaxCompressedPortVlanCount()
	capabilityswitchnetworklimits["max_uncompressed_port_vlan_count"] = item.GetMaxUncompressedPortVlanCount()
	capabilityswitchnetworklimits["maximum_active_traffic_monitoring_sessions"] = item.GetMaximumActiveTrafficMonitoringSessions()
	capabilityswitchnetworklimits["maximum_ethernet_port_channels"] = item.GetMaximumEthernetPortChannels()
	capabilityswitchnetworklimits["maximum_ethernet_uplink_ports"] = item.GetMaximumEthernetUplinkPorts()
	capabilityswitchnetworklimits["maximum_fc_port_channel_members"] = item.GetMaximumFcPortChannelMembers()
	capabilityswitchnetworklimits["maximum_fc_port_channels"] = item.GetMaximumFcPortChannels()
	capabilityswitchnetworklimits["maximum_igmp_groups"] = item.GetMaximumIgmpGroups()
	capabilityswitchnetworklimits["maximum_port_channel_members"] = item.GetMaximumPortChannelMembers()
	capabilityswitchnetworklimits["maximum_primary_vlan"] = item.GetMaximumPrimaryVlan()
	capabilityswitchnetworklimits["maximum_secondary_vlan"] = item.GetMaximumSecondaryVlan()
	capabilityswitchnetworklimits["maximum_secondary_vlan_per_primary"] = item.GetMaximumSecondaryVlanPerPrimary()
	capabilityswitchnetworklimits["maximum_vifs"] = item.GetMaximumVifs()
	capabilityswitchnetworklimits["maximum_vlans"] = item.GetMaximumVlans()
	capabilityswitchnetworklimits["minimum_active_fans"] = item.GetMinimumActiveFans()
	capabilityswitchnetworklimits["object_type"] = item.GetObjectType()

	capabilityswitchnetworklimitss = append(capabilityswitchnetworklimitss, capabilityswitchnetworklimits)
	return capabilityswitchnetworklimitss
}
func flattenMapCapabilitySwitchStorageLimits(p models.CapabilitySwitchStorageLimits, d *schema.ResourceData) []map[string]interface{} {
	var capabilityswitchstoragelimitss []map[string]interface{}
	var ret models.CapabilitySwitchStorageLimits
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	item := p
	capabilityswitchstoragelimits := make(map[string]interface{})
	capabilityswitchstoragelimits["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	capabilityswitchstoragelimits["class_id"] = item.GetClassId()
	capabilityswitchstoragelimits["maximum_user_zone_count"] = item.GetMaximumUserZoneCount()
	capabilityswitchstoragelimits["maximum_virtual_fc_interfaces"] = item.GetMaximumVirtualFcInterfaces()
	capabilityswitchstoragelimits["maximum_virtual_fc_interfaces_per_blade_server"] = item.GetMaximumVirtualFcInterfacesPerBladeServer()
	capabilityswitchstoragelimits["maximum_vsans"] = item.GetMaximumVsans()
	capabilityswitchstoragelimits["maximum_zone_count"] = item.GetMaximumZoneCount()
	capabilityswitchstoragelimits["object_type"] = item.GetObjectType()

	capabilityswitchstoragelimitss = append(capabilityswitchstoragelimitss, capabilityswitchstoragelimits)
	return capabilityswitchstoragelimitss
}
func flattenMapCapabilitySwitchSystemLimits(p models.CapabilitySwitchSystemLimits, d *schema.ResourceData) []map[string]interface{} {
	var capabilityswitchsystemlimitss []map[string]interface{}
	var ret models.CapabilitySwitchSystemLimits
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	item := p
	capabilityswitchsystemlimits := make(map[string]interface{})
	capabilityswitchsystemlimits["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	capabilityswitchsystemlimits["class_id"] = item.GetClassId()
	capabilityswitchsystemlimits["maximum_chassis_count"] = item.GetMaximumChassisCount()
	capabilityswitchsystemlimits["maximum_fex_per_domain"] = item.GetMaximumFexPerDomain()
	capabilityswitchsystemlimits["maximum_servers_per_domain"] = item.GetMaximumServersPerDomain()
	capabilityswitchsystemlimits["object_type"] = item.GetObjectType()

	capabilityswitchsystemlimitss = append(capabilityswitchsystemlimitss, capabilityswitchsystemlimits)
	return capabilityswitchsystemlimitss
}
func flattenMapCertificatemanagementCertificateBase(p models.CertificatemanagementCertificateBase, d *schema.ResourceData) []map[string]interface{} {
	var certificatemanagementcertificatebases []map[string]interface{}
	var ret models.CertificatemanagementCertificateBase
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	item := p
	certificatemanagementcertificatebase := make(map[string]interface{})
	certificatemanagementcertificatebase["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	certificatemanagementcertificatebase["certificate"] = (func(p models.X509Certificate, d *schema.ResourceData) []map[string]interface{} {
		var x509certificates []map[string]interface{}
		var ret models.X509Certificate
		if reflect.DeepEqual(ret, p) {
			return nil
		}
		item := p
		x509certificate := make(map[string]interface{})
		x509certificate["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
		x509certificate["class_id"] = item.GetClassId()
		x509certificate["issuer"] = (func(p models.PkixDistinguishedName, d *schema.ResourceData) []map[string]interface{} {
			var pkixdistinguishednames []map[string]interface{}
			var ret models.PkixDistinguishedName
			if reflect.DeepEqual(ret, p) {
				return nil
			}
			item := p
			pkixdistinguishedname := make(map[string]interface{})
			pkixdistinguishedname["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
			pkixdistinguishedname["class_id"] = item.GetClassId()
			pkixdistinguishedname["common_name"] = item.GetCommonName()
			pkixdistinguishedname["country"] = item.GetCountry()
			pkixdistinguishedname["locality"] = item.GetLocality()
			pkixdistinguishedname["object_type"] = item.GetObjectType()
			pkixdistinguishedname["organization"] = item.GetOrganization()
			pkixdistinguishedname["organizational_unit"] = item.GetOrganizationalUnit()
			pkixdistinguishedname["state"] = item.GetState()

			pkixdistinguishednames = append(pkixdistinguishednames, pkixdistinguishedname)
			return pkixdistinguishednames
		})(item.GetIssuer(), d)
		x509certificate["not_after"] = item.GetNotAfter().String()
		x509certificate["not_before"] = item.GetNotBefore().String()
		x509certificate["object_type"] = item.GetObjectType()
		x509certificate["pem_certificate"] = item.GetPemCertificate()
		x509certificate["sha256_fingerprint"] = item.GetSha256Fingerprint()
		x509certificate["signature_algorithm"] = item.GetSignatureAlgorithm()
		x509certificate["subject"] = (func(p models.PkixDistinguishedName, d *schema.ResourceData) []map[string]interface{} {
			var pkixdistinguishednames []map[string]interface{}
			var ret models.PkixDistinguishedName
			if reflect.DeepEqual(ret, p) {
				return nil
			}
			item := p
			pkixdistinguishedname := make(map[string]interface{})
			pkixdistinguishedname["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
			pkixdistinguishedname["class_id"] = item.GetClassId()
			pkixdistinguishedname["common_name"] = item.GetCommonName()
			pkixdistinguishedname["country"] = item.GetCountry()
			pkixdistinguishedname["locality"] = item.GetLocality()
			pkixdistinguishedname["object_type"] = item.GetObjectType()
			pkixdistinguishedname["organization"] = item.GetOrganization()
			pkixdistinguishedname["organizational_unit"] = item.GetOrganizationalUnit()
			pkixdistinguishedname["state"] = item.GetState()

			pkixdistinguishednames = append(pkixdistinguishednames, pkixdistinguishedname)
			return pkixdistinguishednames
		})(item.GetSubject(), d)

		x509certificates = append(x509certificates, x509certificate)
		return x509certificates
	})(item.GetCertificate(), d)
	certificatemanagementcertificatebase["class_id"] = item.GetClassId()
	certificatemanagementcertificatebase["enabled"] = item.GetEnabled()
	certificatemanagementcertificatebase["object_type"] = item.GetObjectType()

	certificatemanagementcertificatebases = append(certificatemanagementcertificatebases, certificatemanagementcertificatebase)
	return certificatemanagementcertificatebases
}
func flattenMapCertificatemanagementImc(p models.CertificatemanagementImc, d *schema.ResourceData) []map[string]interface{} {
	var certificatemanagementimcs []map[string]interface{}
	var ret models.CertificatemanagementImc
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	item := p
	certificatemanagementimc := make(map[string]interface{})
	certificatemanagementimc["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	certificatemanagementimc["cert_type"] = item.GetCertType()
	certificatemanagementimc["certificate"] = (func(p models.X509Certificate, d *schema.ResourceData) []map[string]interface{} {
		var x509certificates []map[string]interface{}
		var ret models.X509Certificate
		if reflect.DeepEqual(ret, p) {
			return nil
		}
		item := p
		x509certificate := make(map[string]interface{})
		x509certificate["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
		x509certificate["class_id"] = item.GetClassId()
		x509certificate["issuer"] = (func(p models.PkixDistinguishedName, d *schema.ResourceData) []map[string]interface{} {
			var pkixdistinguishednames []map[string]interface{}
			var ret models.PkixDistinguishedName
			if reflect.DeepEqual(ret, p) {
				return nil
			}
			item := p
			pkixdistinguishedname := make(map[string]interface{})
			pkixdistinguishedname["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
			pkixdistinguishedname["class_id"] = item.GetClassId()
			pkixdistinguishedname["common_name"] = item.GetCommonName()
			pkixdistinguishedname["country"] = item.GetCountry()
			pkixdistinguishedname["locality"] = item.GetLocality()
			pkixdistinguishedname["object_type"] = item.GetObjectType()
			pkixdistinguishedname["organization"] = item.GetOrganization()
			pkixdistinguishedname["organizational_unit"] = item.GetOrganizationalUnit()
			pkixdistinguishedname["state"] = item.GetState()

			pkixdistinguishednames = append(pkixdistinguishednames, pkixdistinguishedname)
			return pkixdistinguishednames
		})(item.GetIssuer(), d)
		x509certificate["not_after"] = item.GetNotAfter().String()
		x509certificate["not_before"] = item.GetNotBefore().String()
		x509certificate["object_type"] = item.GetObjectType()
		x509certificate["pem_certificate"] = item.GetPemCertificate()
		x509certificate["sha256_fingerprint"] = item.GetSha256Fingerprint()
		x509certificate["signature_algorithm"] = item.GetSignatureAlgorithm()
		x509certificate["subject"] = (func(p models.PkixDistinguishedName, d *schema.ResourceData) []map[string]interface{} {
			var pkixdistinguishednames []map[string]interface{}
			var ret models.PkixDistinguishedName
			if reflect.DeepEqual(ret, p) {
				return nil
			}
			item := p
			pkixdistinguishedname := make(map[string]interface{})
			pkixdistinguishedname["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
			pkixdistinguishedname["class_id"] = item.GetClassId()
			pkixdistinguishedname["common_name"] = item.GetCommonName()
			pkixdistinguishedname["country"] = item.GetCountry()
			pkixdistinguishedname["locality"] = item.GetLocality()
			pkixdistinguishedname["object_type"] = item.GetObjectType()
			pkixdistinguishedname["organization"] = item.GetOrganization()
			pkixdistinguishedname["organizational_unit"] = item.GetOrganizationalUnit()
			pkixdistinguishedname["state"] = item.GetState()

			pkixdistinguishednames = append(pkixdistinguishednames, pkixdistinguishedname)
			return pkixdistinguishednames
		})(item.GetSubject(), d)

		x509certificates = append(x509certificates, x509certificate)
		return x509certificates
	})(item.GetCertificate(), d)
	certificatemanagementimc["class_id"] = item.GetClassId()
	certificatemanagementimc["enabled"] = item.GetEnabled()
	certificatemanagementimc["is_privatekey_set"] = item.GetIsPrivatekeySet()
	certificatemanagementimc["object_type"] = item.GetObjectType()
	privatekey_x, exists := d.GetOk("certificate")
	if exists && privatekey_x != nil {
		privatekey_y := privatekey_x.([]interface{})[0].(map[string]interface{})
		certificatemanagementimc["privatekey"] = privatekey_y["privatekey"]
	}

	certificatemanagementimcs = append(certificatemanagementimcs, certificatemanagementimc)
	return certificatemanagementimcs
}
func flattenMapChassisBaseProfileRelationship(p models.ChassisBaseProfileRelationship, d *schema.ResourceData) []map[string]interface{} {
	var chassisbaseprofilerelationships []map[string]interface{}
	var ret models.ChassisBaseProfileRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	chassisbaseprofilerelationship := make(map[string]interface{})
	chassisbaseprofilerelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	chassisbaseprofilerelationship["class_id"] = item.GetClassId()
	chassisbaseprofilerelationship["moid"] = item.GetMoid()
	chassisbaseprofilerelationship["object_type"] = item.GetObjectType()
	chassisbaseprofilerelationship["selector"] = item.GetSelector()

	chassisbaseprofilerelationships = append(chassisbaseprofilerelationships, chassisbaseprofilerelationship)
	return chassisbaseprofilerelationships
}
func flattenMapChassisConfigResultRelationship(p models.ChassisConfigResultRelationship, d *schema.ResourceData) []map[string]interface{} {
	var chassisconfigresultrelationships []map[string]interface{}
	var ret models.ChassisConfigResultRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	chassisconfigresultrelationship := make(map[string]interface{})
	chassisconfigresultrelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	chassisconfigresultrelationship["class_id"] = item.GetClassId()
	chassisconfigresultrelationship["moid"] = item.GetMoid()
	chassisconfigresultrelationship["object_type"] = item.GetObjectType()
	chassisconfigresultrelationship["selector"] = item.GetSelector()

	chassisconfigresultrelationships = append(chassisconfigresultrelationships, chassisconfigresultrelationship)
	return chassisconfigresultrelationships
}
func flattenMapChassisIomProfileRelationship(p models.ChassisIomProfileRelationship, d *schema.ResourceData) []map[string]interface{} {
	var chassisiomprofilerelationships []map[string]interface{}
	var ret models.ChassisIomProfileRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	chassisiomprofilerelationship := make(map[string]interface{})
	chassisiomprofilerelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	chassisiomprofilerelationship["class_id"] = item.GetClassId()
	chassisiomprofilerelationship["moid"] = item.GetMoid()
	chassisiomprofilerelationship["object_type"] = item.GetObjectType()
	chassisiomprofilerelationship["selector"] = item.GetSelector()

	chassisiomprofilerelationships = append(chassisiomprofilerelationships, chassisiomprofilerelationship)
	return chassisiomprofilerelationships
}
func flattenMapChassisProfileRelationship(p models.ChassisProfileRelationship, d *schema.ResourceData) []map[string]interface{} {
	var chassisprofilerelationships []map[string]interface{}
	var ret models.ChassisProfileRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	chassisprofilerelationship := make(map[string]interface{})
	chassisprofilerelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	chassisprofilerelationship["class_id"] = item.GetClassId()
	chassisprofilerelationship["moid"] = item.GetMoid()
	chassisprofilerelationship["object_type"] = item.GetObjectType()
	chassisprofilerelationship["selector"] = item.GetSelector()

	chassisprofilerelationships = append(chassisprofilerelationships, chassisprofilerelationship)
	return chassisprofilerelationships
}
func flattenMapCloudAvailabilityZone(p models.CloudAvailabilityZone, d *schema.ResourceData) []map[string]interface{} {
	var cloudavailabilityzones []map[string]interface{}
	var ret models.CloudAvailabilityZone
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	item := p
	cloudavailabilityzone := make(map[string]interface{})
	cloudavailabilityzone["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	cloudavailabilityzone["class_id"] = item.GetClassId()
	cloudavailabilityzone["name"] = item.GetName()
	cloudavailabilityzone["object_type"] = item.GetObjectType()
	cloudavailabilityzone["zone_id"] = item.GetZoneId()

	cloudavailabilityzones = append(cloudavailabilityzones, cloudavailabilityzone)
	return cloudavailabilityzones
}
func flattenMapCloudAwsBillingUnitRelationship(p models.CloudAwsBillingUnitRelationship, d *schema.ResourceData) []map[string]interface{} {
	var cloudawsbillingunitrelationships []map[string]interface{}
	var ret models.CloudAwsBillingUnitRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	cloudawsbillingunitrelationship := make(map[string]interface{})
	cloudawsbillingunitrelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	cloudawsbillingunitrelationship["class_id"] = item.GetClassId()
	cloudawsbillingunitrelationship["moid"] = item.GetMoid()
	cloudawsbillingunitrelationship["object_type"] = item.GetObjectType()
	cloudawsbillingunitrelationship["selector"] = item.GetSelector()

	cloudawsbillingunitrelationships = append(cloudawsbillingunitrelationships, cloudawsbillingunitrelationship)
	return cloudawsbillingunitrelationships
}
func flattenMapCloudAwsKeyPairRelationship(p models.CloudAwsKeyPairRelationship, d *schema.ResourceData) []map[string]interface{} {
	var cloudawskeypairrelationships []map[string]interface{}
	var ret models.CloudAwsKeyPairRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	cloudawskeypairrelationship := make(map[string]interface{})
	cloudawskeypairrelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	cloudawskeypairrelationship["class_id"] = item.GetClassId()
	cloudawskeypairrelationship["moid"] = item.GetMoid()
	cloudawskeypairrelationship["object_type"] = item.GetObjectType()
	cloudawskeypairrelationship["selector"] = item.GetSelector()

	cloudawskeypairrelationships = append(cloudawskeypairrelationships, cloudawskeypairrelationship)
	return cloudawskeypairrelationships
}
func flattenMapCloudAwsOrganizationalUnitRelationship(p models.CloudAwsOrganizationalUnitRelationship, d *schema.ResourceData) []map[string]interface{} {
	var cloudawsorganizationalunitrelationships []map[string]interface{}
	var ret models.CloudAwsOrganizationalUnitRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	cloudawsorganizationalunitrelationship := make(map[string]interface{})
	cloudawsorganizationalunitrelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	cloudawsorganizationalunitrelationship["class_id"] = item.GetClassId()
	cloudawsorganizationalunitrelationship["moid"] = item.GetMoid()
	cloudawsorganizationalunitrelationship["object_type"] = item.GetObjectType()
	cloudawsorganizationalunitrelationship["selector"] = item.GetSelector()

	cloudawsorganizationalunitrelationships = append(cloudawsorganizationalunitrelationships, cloudawsorganizationalunitrelationship)
	return cloudawsorganizationalunitrelationships
}
func flattenMapCloudAwsSubnetRelationship(p models.CloudAwsSubnetRelationship, d *schema.ResourceData) []map[string]interface{} {
	var cloudawssubnetrelationships []map[string]interface{}
	var ret models.CloudAwsSubnetRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	cloudawssubnetrelationship := make(map[string]interface{})
	cloudawssubnetrelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	cloudawssubnetrelationship["class_id"] = item.GetClassId()
	cloudawssubnetrelationship["moid"] = item.GetMoid()
	cloudawssubnetrelationship["object_type"] = item.GetObjectType()
	cloudawssubnetrelationship["selector"] = item.GetSelector()

	cloudawssubnetrelationships = append(cloudawssubnetrelationships, cloudawssubnetrelationship)
	return cloudawssubnetrelationships
}
func flattenMapCloudAwsVpcRelationship(p models.CloudAwsVpcRelationship, d *schema.ResourceData) []map[string]interface{} {
	var cloudawsvpcrelationships []map[string]interface{}
	var ret models.CloudAwsVpcRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	cloudawsvpcrelationship := make(map[string]interface{})
	cloudawsvpcrelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	cloudawsvpcrelationship["class_id"] = item.GetClassId()
	cloudawsvpcrelationship["moid"] = item.GetMoid()
	cloudawsvpcrelationship["object_type"] = item.GetObjectType()
	cloudawsvpcrelationship["selector"] = item.GetSelector()

	cloudawsvpcrelationships = append(cloudawsvpcrelationships, cloudawsvpcrelationship)
	return cloudawsvpcrelationships
}
func flattenMapCloudBaseSkuRelationship(p models.CloudBaseSkuRelationship, d *schema.ResourceData) []map[string]interface{} {
	var cloudbaseskurelationships []map[string]interface{}
	var ret models.CloudBaseSkuRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	cloudbaseskurelationship := make(map[string]interface{})
	cloudbaseskurelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	cloudbaseskurelationship["class_id"] = item.GetClassId()
	cloudbaseskurelationship["moid"] = item.GetMoid()
	cloudbaseskurelationship["object_type"] = item.GetObjectType()
	cloudbaseskurelationship["selector"] = item.GetSelector()

	cloudbaseskurelationships = append(cloudbaseskurelationships, cloudbaseskurelationship)
	return cloudbaseskurelationships
}
func flattenMapCloudBillingUnit(p models.CloudBillingUnit, d *schema.ResourceData) []map[string]interface{} {
	var cloudbillingunits []map[string]interface{}
	var ret models.CloudBillingUnit
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	item := p
	cloudbillingunit := make(map[string]interface{})
	cloudbillingunit["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	cloudbillingunit["billing_id"] = item.GetBillingId()
	cloudbillingunit["class_id"] = item.GetClassId()
	cloudbillingunit["name"] = item.GetName()
	cloudbillingunit["object_type"] = item.GetObjectType()

	cloudbillingunits = append(cloudbillingunits, cloudbillingunit)
	return cloudbillingunits
}
func flattenMapCloudCloudRegion(p models.CloudCloudRegion, d *schema.ResourceData) []map[string]interface{} {
	var cloudcloudregions []map[string]interface{}
	var ret models.CloudCloudRegion
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	item := p
	cloudcloudregion := make(map[string]interface{})
	cloudcloudregion["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	cloudcloudregion["class_id"] = item.GetClassId()
	cloudcloudregion["name"] = item.GetName()
	cloudcloudregion["object_type"] = item.GetObjectType()
	cloudcloudregion["region_id"] = item.GetRegionId()

	cloudcloudregions = append(cloudcloudregions, cloudcloudregion)
	return cloudcloudregions
}
func flattenMapCloudImageReference(p models.CloudImageReference, d *schema.ResourceData) []map[string]interface{} {
	var cloudimagereferences []map[string]interface{}
	var ret models.CloudImageReference
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	item := p
	cloudimagereference := make(map[string]interface{})
	cloudimagereference["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	cloudimagereference["class_id"] = item.GetClassId()
	cloudimagereference["image_id"] = item.GetImageId()
	cloudimagereference["name"] = item.GetName()
	cloudimagereference["object_type"] = item.GetObjectType()

	cloudimagereferences = append(cloudimagereferences, cloudimagereference)
	return cloudimagereferences
}
func flattenMapCloudInstanceType(p models.CloudInstanceType, d *schema.ResourceData) []map[string]interface{} {
	var cloudinstancetypes []map[string]interface{}
	var ret models.CloudInstanceType
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	item := p
	cloudinstancetype := make(map[string]interface{})
	cloudinstancetype["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	cloudinstancetype["architecture"] = item.GetArchitecture()
	cloudinstancetype["class_id"] = item.GetClassId()
	cloudinstancetype["cpu_speed"] = item.GetCpuSpeed()
	cloudinstancetype["cpus"] = item.GetCpus()
	cloudinstancetype["instance_type_id"] = item.GetInstanceTypeId()
	cloudinstancetype["memory"] = item.GetMemory()
	cloudinstancetype["name"] = item.GetName()
	cloudinstancetype["object_type"] = item.GetObjectType()
	cloudinstancetype["platform"] = item.GetPlatform()

	cloudinstancetypes = append(cloudinstancetypes, cloudinstancetype)
	return cloudinstancetypes
}
func flattenMapCloudNetworkInstanceAttachment(p models.CloudNetworkInstanceAttachment, d *schema.ResourceData) []map[string]interface{} {
	var cloudnetworkinstanceattachments []map[string]interface{}
	var ret models.CloudNetworkInstanceAttachment
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	item := p
	cloudnetworkinstanceattachment := make(map[string]interface{})
	cloudnetworkinstanceattachment["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	cloudnetworkinstanceattachment["attach_time"] = item.GetAttachTime().String()
	cloudnetworkinstanceattachment["auto_delete"] = item.GetAutoDelete()
	cloudnetworkinstanceattachment["class_id"] = item.GetClassId()
	cloudnetworkinstanceattachment["device_index"] = item.GetDeviceIndex()
	cloudnetworkinstanceattachment["instance_id"] = item.GetInstanceId()
	cloudnetworkinstanceattachment["object_type"] = item.GetObjectType()
	cloudnetworkinstanceattachment["state"] = item.GetState()

	cloudnetworkinstanceattachments = append(cloudnetworkinstanceattachments, cloudnetworkinstanceattachment)
	return cloudnetworkinstanceattachments
}
func flattenMapCloudRegionsRelationship(p models.CloudRegionsRelationship, d *schema.ResourceData) []map[string]interface{} {
	var cloudregionsrelationships []map[string]interface{}
	var ret models.CloudRegionsRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	cloudregionsrelationship := make(map[string]interface{})
	cloudregionsrelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	cloudregionsrelationship["class_id"] = item.GetClassId()
	cloudregionsrelationship["moid"] = item.GetMoid()
	cloudregionsrelationship["object_type"] = item.GetObjectType()
	cloudregionsrelationship["selector"] = item.GetSelector()

	cloudregionsrelationships = append(cloudregionsrelationships, cloudregionsrelationship)
	return cloudregionsrelationships
}
func flattenMapCloudTfcOrganizationRelationship(p models.CloudTfcOrganizationRelationship, d *schema.ResourceData) []map[string]interface{} {
	var cloudtfcorganizationrelationships []map[string]interface{}
	var ret models.CloudTfcOrganizationRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	cloudtfcorganizationrelationship := make(map[string]interface{})
	cloudtfcorganizationrelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	cloudtfcorganizationrelationship["class_id"] = item.GetClassId()
	cloudtfcorganizationrelationship["moid"] = item.GetMoid()
	cloudtfcorganizationrelationship["object_type"] = item.GetObjectType()
	cloudtfcorganizationrelationship["selector"] = item.GetSelector()

	cloudtfcorganizationrelationships = append(cloudtfcorganizationrelationships, cloudtfcorganizationrelationship)
	return cloudtfcorganizationrelationships
}
func flattenMapCloudVolumeIopsInfo(p models.CloudVolumeIopsInfo, d *schema.ResourceData) []map[string]interface{} {
	var cloudvolumeiopsinfos []map[string]interface{}
	var ret models.CloudVolumeIopsInfo
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	item := p
	cloudvolumeiopsinfo := make(map[string]interface{})
	cloudvolumeiopsinfo["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	cloudvolumeiopsinfo["class_id"] = item.GetClassId()
	cloudvolumeiopsinfo["iops_read_limit"] = item.GetIopsReadLimit()
	cloudvolumeiopsinfo["iops_write_limit"] = item.GetIopsWriteLimit()
	cloudvolumeiopsinfo["object_type"] = item.GetObjectType()
	cloudvolumeiopsinfo["throughput_read_limit"] = item.GetThroughputReadLimit()
	cloudvolumeiopsinfo["throughput_write_limit"] = item.GetThroughputWriteLimit()

	cloudvolumeiopsinfos = append(cloudvolumeiopsinfos, cloudvolumeiopsinfo)
	return cloudvolumeiopsinfos
}
func flattenMapCloudVolumeType(p models.CloudVolumeType, d *schema.ResourceData) []map[string]interface{} {
	var cloudvolumetypes []map[string]interface{}
	var ret models.CloudVolumeType
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	item := p
	cloudvolumetype := make(map[string]interface{})
	cloudvolumetype["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	cloudvolumetype["class_id"] = item.GetClassId()
	cloudvolumetype["name"] = item.GetName()
	cloudvolumetype["object_type"] = item.GetObjectType()
	cloudvolumetype["volume_type_id"] = item.GetVolumeTypeId()

	cloudvolumetypes = append(cloudvolumetypes, cloudvolumetype)
	return cloudvolumetypes
}
func flattenMapCommHttpProxyPolicyRelationship(p models.CommHttpProxyPolicyRelationship, d *schema.ResourceData) []map[string]interface{} {
	var commhttpproxypolicyrelationships []map[string]interface{}
	var ret models.CommHttpProxyPolicyRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	commhttpproxypolicyrelationship := make(map[string]interface{})
	commhttpproxypolicyrelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	commhttpproxypolicyrelationship["class_id"] = item.GetClassId()
	commhttpproxypolicyrelationship["moid"] = item.GetMoid()
	commhttpproxypolicyrelationship["object_type"] = item.GetObjectType()
	commhttpproxypolicyrelationship["selector"] = item.GetSelector()

	commhttpproxypolicyrelationships = append(commhttpproxypolicyrelationships, commhttpproxypolicyrelationship)
	return commhttpproxypolicyrelationships
}
func flattenMapCommIpV4Interface(p models.CommIpV4Interface, d *schema.ResourceData) []map[string]interface{} {
	var commipv4interfaces []map[string]interface{}
	var ret models.CommIpV4Interface
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	item := p
	commipv4interface := make(map[string]interface{})
	commipv4interface["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	commipv4interface["class_id"] = item.GetClassId()
	commipv4interface["gateway"] = item.GetGateway()
	commipv4interface["ip_address"] = item.GetIpAddress()
	commipv4interface["netmask"] = item.GetNetmask()
	commipv4interface["object_type"] = item.GetObjectType()

	commipv4interfaces = append(commipv4interfaces, commipv4interface)
	return commipv4interfaces
}
func flattenMapCommIpV6Interface(p models.CommIpV6Interface, d *schema.ResourceData) []map[string]interface{} {
	var commipv6interfaces []map[string]interface{}
	var ret models.CommIpV6Interface
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	item := p
	commipv6interface := make(map[string]interface{})
	commipv6interface["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	commipv6interface["class_id"] = item.GetClassId()
	commipv6interface["gateway"] = item.GetGateway()
	commipv6interface["ip_address"] = item.GetIpAddress()
	commipv6interface["object_type"] = item.GetObjectType()
	commipv6interface["prefix"] = item.GetPrefix()

	commipv6interfaces = append(commipv6interfaces, commipv6interface)
	return commipv6interfaces
}
func flattenMapComputeAlarmSummary(p models.ComputeAlarmSummary, d *schema.ResourceData) []map[string]interface{} {
	var computealarmsummarys []map[string]interface{}
	var ret models.ComputeAlarmSummary
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	item := p
	computealarmsummary := make(map[string]interface{})
	computealarmsummary["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	computealarmsummary["class_id"] = item.GetClassId()
	computealarmsummary["critical"] = item.GetCritical()
	computealarmsummary["health"] = item.GetHealth()
	computealarmsummary["info"] = item.GetInfo()
	computealarmsummary["object_type"] = item.GetObjectType()
	computealarmsummary["suppressed"] = item.GetSuppressed()
	computealarmsummary["suppressed_critical"] = item.GetSuppressedCritical()
	computealarmsummary["suppressed_info"] = item.GetSuppressedInfo()
	computealarmsummary["suppressed_warning"] = item.GetSuppressedWarning()
	computealarmsummary["warning"] = item.GetWarning()

	computealarmsummarys = append(computealarmsummarys, computealarmsummary)
	return computealarmsummarys
}
func flattenMapComputeBaseClusterRelationship(p models.ComputeBaseClusterRelationship, d *schema.ResourceData) []map[string]interface{} {
	var computebaseclusterrelationships []map[string]interface{}
	var ret models.ComputeBaseClusterRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	computebaseclusterrelationship := make(map[string]interface{})
	computebaseclusterrelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	computebaseclusterrelationship["class_id"] = item.GetClassId()
	computebaseclusterrelationship["moid"] = item.GetMoid()
	computebaseclusterrelationship["object_type"] = item.GetObjectType()
	computebaseclusterrelationship["selector"] = item.GetSelector()

	computebaseclusterrelationships = append(computebaseclusterrelationships, computebaseclusterrelationship)
	return computebaseclusterrelationships
}
func flattenMapComputeBladeRelationship(p models.ComputeBladeRelationship, d *schema.ResourceData) []map[string]interface{} {
	var computebladerelationships []map[string]interface{}
	var ret models.ComputeBladeRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	computebladerelationship := make(map[string]interface{})
	computebladerelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	computebladerelationship["class_id"] = item.GetClassId()
	computebladerelationship["moid"] = item.GetMoid()
	computebladerelationship["object_type"] = item.GetObjectType()
	computebladerelationship["selector"] = item.GetSelector()

	computebladerelationships = append(computebladerelationships, computebladerelationship)
	return computebladerelationships
}
func flattenMapComputeBoardRelationship(p models.ComputeBoardRelationship, d *schema.ResourceData) []map[string]interface{} {
	var computeboardrelationships []map[string]interface{}
	var ret models.ComputeBoardRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	computeboardrelationship := make(map[string]interface{})
	computeboardrelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	computeboardrelationship["class_id"] = item.GetClassId()
	computeboardrelationship["moid"] = item.GetMoid()
	computeboardrelationship["object_type"] = item.GetObjectType()
	computeboardrelationship["selector"] = item.GetSelector()

	computeboardrelationships = append(computeboardrelationships, computeboardrelationship)
	return computeboardrelationships
}
func flattenMapComputeDownloadStatusRelationship(p models.ComputeDownloadStatusRelationship, d *schema.ResourceData) []map[string]interface{} {
	var computedownloadstatusrelationships []map[string]interface{}
	var ret models.ComputeDownloadStatusRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	computedownloadstatusrelationship := make(map[string]interface{})
	computedownloadstatusrelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	computedownloadstatusrelationship["class_id"] = item.GetClassId()
	computedownloadstatusrelationship["moid"] = item.GetMoid()
	computedownloadstatusrelationship["object_type"] = item.GetObjectType()
	computedownloadstatusrelationship["selector"] = item.GetSelector()

	computedownloadstatusrelationships = append(computedownloadstatusrelationships, computedownloadstatusrelationship)
	return computedownloadstatusrelationships
}
func flattenMapComputeHostUtilityOperationRelationship(p models.ComputeHostUtilityOperationRelationship, d *schema.ResourceData) []map[string]interface{} {
	var computehostutilityoperationrelationships []map[string]interface{}
	var ret models.ComputeHostUtilityOperationRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	computehostutilityoperationrelationship := make(map[string]interface{})
	computehostutilityoperationrelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	computehostutilityoperationrelationship["class_id"] = item.GetClassId()
	computehostutilityoperationrelationship["moid"] = item.GetMoid()
	computehostutilityoperationrelationship["object_type"] = item.GetObjectType()
	computehostutilityoperationrelationship["selector"] = item.GetSelector()

	computehostutilityoperationrelationships = append(computehostutilityoperationrelationships, computehostutilityoperationrelationship)
	return computehostutilityoperationrelationships
}
func flattenMapComputeHostUtilityOperationConfguration(p models.ComputeHostUtilityOperationConfguration, d *schema.ResourceData) []map[string]interface{} {
	var computehostutilityoperationconfgurations []map[string]interface{}
	var ret models.ComputeHostUtilityOperationConfguration
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	item := p
	computehostutilityoperationconfguration := make(map[string]interface{})
	computehostutilityoperationconfguration["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	computehostutilityoperationconfguration["class_id"] = item.GetClassId()
	computehostutilityoperationconfguration["object_type"] = item.GetObjectType()

	computehostutilityoperationconfgurations = append(computehostutilityoperationconfgurations, computehostutilityoperationconfguration)
	return computehostutilityoperationconfgurations
}
func flattenMapComputePersistentMemoryOperation(p models.ComputePersistentMemoryOperation, d *schema.ResourceData) []map[string]interface{} {
	var computepersistentmemoryoperations []map[string]interface{}
	var ret models.ComputePersistentMemoryOperation
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	item := p
	computepersistentmemoryoperation := make(map[string]interface{})
	computepersistentmemoryoperation["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	computepersistentmemoryoperation["admin_action"] = item.GetAdminAction()
	computepersistentmemoryoperation["class_id"] = item.GetClassId()
	computepersistentmemoryoperation["is_secure_passphrase_set"] = item.GetIsSecurePassphraseSet()
	computepersistentmemoryoperation["modules"] = (func(p []models.ComputePersistentMemoryModule, d *schema.ResourceData) []map[string]interface{} {
		var computepersistentmemorymodules []map[string]interface{}
		if len(p) == 0 {
			return nil
		}
		for _, item := range p {
			computepersistentmemorymodule := make(map[string]interface{})
			computepersistentmemorymodule["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
			computepersistentmemorymodule["class_id"] = item.GetClassId()
			computepersistentmemorymodule["object_type"] = item.GetObjectType()
			computepersistentmemorymodule["socket_id"] = item.GetSocketId()
			computepersistentmemorymodule["socket_memory_id"] = item.GetSocketMemoryId()
			computepersistentmemorymodules = append(computepersistentmemorymodules, computepersistentmemorymodule)
		}
		return computepersistentmemorymodules
	})(item.GetModules(), d)
	computepersistentmemoryoperation["object_type"] = item.GetObjectType()
	secure_passphrase_x, exists := d.GetOk("persistent_memory_operation")
	if exists && secure_passphrase_x != nil {
		secure_passphrase_y := secure_passphrase_x.([]interface{})[0].(map[string]interface{})
		computepersistentmemoryoperation["secure_passphrase"] = secure_passphrase_y["secure_passphrase"]
	}

	computepersistentmemoryoperations = append(computepersistentmemoryoperations, computepersistentmemoryoperation)
	return computepersistentmemoryoperations
}
func flattenMapComputePersonalitySetting(p models.ComputePersonalitySetting, d *schema.ResourceData) []map[string]interface{} {
	var computepersonalitysettings []map[string]interface{}
	var ret models.ComputePersonalitySetting
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	item := p
	computepersonalitysetting := make(map[string]interface{})
	computepersonalitysetting["additional_information"] = flattenAdditionalProperties(item.AdditionalInformation)
	computepersonalitysetting["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	computepersonalitysetting["class_id"] = item.GetClassId()
	computepersonalitysetting["object_type"] = item.GetObjectType()
	personality_x, exists := d.GetOk("personality_setting")
	if exists && personality_x != nil {
		personality_y := personality_x.([]interface{})[0].(map[string]interface{})
		computepersonalitysetting["personality"] = personality_y["personality"]
	}

	computepersonalitysettings = append(computepersonalitysettings, computepersonalitysetting)
	return computepersonalitysettings
}
func flattenMapComputePhysicalRelationship(p models.ComputePhysicalRelationship, d *schema.ResourceData) []map[string]interface{} {
	var computephysicalrelationships []map[string]interface{}
	var ret models.ComputePhysicalRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	computephysicalrelationship := make(map[string]interface{})
	computephysicalrelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	computephysicalrelationship["class_id"] = item.GetClassId()
	computephysicalrelationship["moid"] = item.GetMoid()
	computephysicalrelationship["object_type"] = item.GetObjectType()
	computephysicalrelationship["selector"] = item.GetSelector()

	computephysicalrelationships = append(computephysicalrelationships, computephysicalrelationship)
	return computephysicalrelationships
}
func flattenMapComputePhysicalSummaryRelationship(p models.ComputePhysicalSummaryRelationship, d *schema.ResourceData) []map[string]interface{} {
	var computephysicalsummaryrelationships []map[string]interface{}
	var ret models.ComputePhysicalSummaryRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	computephysicalsummaryrelationship := make(map[string]interface{})
	computephysicalsummaryrelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	computephysicalsummaryrelationship["class_id"] = item.GetClassId()
	computephysicalsummaryrelationship["moid"] = item.GetMoid()
	computephysicalsummaryrelationship["object_type"] = item.GetObjectType()
	computephysicalsummaryrelationship["selector"] = item.GetSelector()

	computephysicalsummaryrelationships = append(computephysicalsummaryrelationships, computephysicalsummaryrelationship)
	return computephysicalsummaryrelationships
}
func flattenMapComputeRackUnitRelationship(p models.ComputeRackUnitRelationship, d *schema.ResourceData) []map[string]interface{} {
	var computerackunitrelationships []map[string]interface{}
	var ret models.ComputeRackUnitRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	computerackunitrelationship := make(map[string]interface{})
	computerackunitrelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	computerackunitrelationship["class_id"] = item.GetClassId()
	computerackunitrelationship["moid"] = item.GetMoid()
	computerackunitrelationship["object_type"] = item.GetObjectType()
	computerackunitrelationship["selector"] = item.GetSelector()

	computerackunitrelationships = append(computerackunitrelationships, computerackunitrelationship)
	return computerackunitrelationships
}
func flattenMapComputeServerConfig(p models.ComputeServerConfig, d *schema.ResourceData) []map[string]interface{} {
	var computeserverconfigs []map[string]interface{}
	var ret models.ComputeServerConfig
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	item := p
	computeserverconfig := make(map[string]interface{})
	computeserverconfig["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	computeserverconfig["asset_tag"] = item.GetAssetTag()
	computeserverconfig["class_id"] = item.GetClassId()
	computeserverconfig["object_type"] = item.GetObjectType()
	computeserverconfig["user_label"] = item.GetUserLabel()

	computeserverconfigs = append(computeserverconfigs, computeserverconfig)
	return computeserverconfigs
}
func flattenMapComputeStorageControllerOperation(p models.ComputeStorageControllerOperation, d *schema.ResourceData) []map[string]interface{} {
	var computestoragecontrolleroperations []map[string]interface{}
	var ret models.ComputeStorageControllerOperation
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	item := p
	computestoragecontrolleroperation := make(map[string]interface{})
	computestoragecontrolleroperation["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	computestoragecontrolleroperation["admin_action"] = item.GetAdminAction()
	computestoragecontrolleroperation["class_id"] = item.GetClassId()
	computestoragecontrolleroperation["controller_id"] = item.GetControllerId()
	computestoragecontrolleroperation["encryption_key"] = item.GetEncryptionKey()
	computestoragecontrolleroperation["object_type"] = item.GetObjectType()
	computestoragecontrolleroperation["remote_mode"] = item.GetRemoteMode()

	computestoragecontrolleroperations = append(computestoragecontrolleroperations, computestoragecontrolleroperation)
	return computestoragecontrolleroperations
}
func flattenMapComputeStoragePhysicalDriveOperation(p models.ComputeStoragePhysicalDriveOperation, d *schema.ResourceData) []map[string]interface{} {
	var computestoragephysicaldriveoperations []map[string]interface{}
	var ret models.ComputeStoragePhysicalDriveOperation
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	item := p
	computestoragephysicaldriveoperation := make(map[string]interface{})
	computestoragephysicaldriveoperation["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	computestoragephysicaldriveoperation["admin_action"] = item.GetAdminAction()
	computestoragephysicaldriveoperation["class_id"] = item.GetClassId()
	computestoragephysicaldriveoperation["controller_id"] = item.GetControllerId()
	computestoragephysicaldriveoperation["drive_slots"] = item.GetDriveSlots()
	computestoragephysicaldriveoperation["object_type"] = item.GetObjectType()
	computestoragephysicaldriveoperation["physical_drives"] = (func(p []models.ComputeStoragePhysicalDrive, d *schema.ResourceData) []map[string]interface{} {
		var computestoragephysicaldrives []map[string]interface{}
		if len(p) == 0 {
			return nil
		}
		for _, item := range p {
			computestoragephysicaldrive := make(map[string]interface{})
			computestoragephysicaldrive["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
			computestoragephysicaldrive["class_id"] = item.GetClassId()
			computestoragephysicaldrive["object_type"] = item.GetObjectType()
			computestoragephysicaldrive["slot_number"] = item.GetSlotNumber()
			computestoragephysicaldrives = append(computestoragephysicaldrives, computestoragephysicaldrive)
		}
		return computestoragephysicaldrives
	})(item.GetPhysicalDrives(), d)

	computestoragephysicaldriveoperations = append(computestoragephysicaldriveoperations, computestoragephysicaldriveoperation)
	return computestoragephysicaldriveoperations
}
func flattenMapComputeStorageUtilityImageOperation(p models.ComputeStorageUtilityImageOperation, d *schema.ResourceData) []map[string]interface{} {
	var computestorageutilityimageoperations []map[string]interface{}
	var ret models.ComputeStorageUtilityImageOperation
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	item := p
	computestorageutilityimageoperation := make(map[string]interface{})
	computestorageutilityimageoperation["action"] = item.GetAction()
	computestorageutilityimageoperation["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	computestorageutilityimageoperation["class_id"] = item.GetClassId()
	computestorageutilityimageoperation["image_name"] = item.GetImageName()
	computestorageutilityimageoperation["image_type"] = item.GetImageType()
	computestorageutilityimageoperation["object_type"] = item.GetObjectType()

	computestorageutilityimageoperations = append(computestorageutilityimageoperations, computestorageutilityimageoperation)
	return computestorageutilityimageoperations
}
func flattenMapComputeStorageVirtualDriveOperation(p models.ComputeStorageVirtualDriveOperation, d *schema.ResourceData) []map[string]interface{} {
	var computestoragevirtualdriveoperations []map[string]interface{}
	var ret models.ComputeStorageVirtualDriveOperation
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	item := p
	computestoragevirtualdriveoperation := make(map[string]interface{})
	computestoragevirtualdriveoperation["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	computestoragevirtualdriveoperation["admin_action"] = item.GetAdminAction()
	computestoragevirtualdriveoperation["class_id"] = item.GetClassId()
	computestoragevirtualdriveoperation["controller_id"] = item.GetControllerId()
	computestoragevirtualdriveoperation["object_type"] = item.GetObjectType()
	computestoragevirtualdriveoperation["virtual_drives"] = (func(p []models.ComputeStorageVirtualDrive, d *schema.ResourceData) []map[string]interface{} {
		var computestoragevirtualdrives []map[string]interface{}
		if len(p) == 0 {
			return nil
		}
		for _, item := range p {
			computestoragevirtualdrive := make(map[string]interface{})
			computestoragevirtualdrive["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
			computestoragevirtualdrive["class_id"] = item.GetClassId()
			computestoragevirtualdrive["id"] = item.GetId()
			computestoragevirtualdrive["object_type"] = item.GetObjectType()
			computestoragevirtualdrives = append(computestoragevirtualdrives, computestoragevirtualdrive)
		}
		return computestoragevirtualdrives
	})(item.GetVirtualDrives(), d)

	computestoragevirtualdriveoperations = append(computestoragevirtualdriveoperations, computestoragevirtualdriveoperation)
	return computestoragevirtualdriveoperations
}
func flattenMapComputeVmediaRelationship(p models.ComputeVmediaRelationship, d *schema.ResourceData) []map[string]interface{} {
	var computevmediarelationships []map[string]interface{}
	var ret models.ComputeVmediaRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	computevmediarelationship := make(map[string]interface{})
	computevmediarelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	computevmediarelationship["class_id"] = item.GetClassId()
	computevmediarelationship["moid"] = item.GetMoid()
	computevmediarelationship["object_type"] = item.GetObjectType()
	computevmediarelationship["selector"] = item.GetSelector()

	computevmediarelationships = append(computevmediarelationships, computevmediarelationship)
	return computevmediarelationships
}
func flattenMapCondAlarmDefinitionRelationship(p models.CondAlarmDefinitionRelationship, d *schema.ResourceData) []map[string]interface{} {
	var condalarmdefinitionrelationships []map[string]interface{}
	var ret models.CondAlarmDefinitionRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	condalarmdefinitionrelationship := make(map[string]interface{})
	condalarmdefinitionrelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	condalarmdefinitionrelationship["class_id"] = item.GetClassId()
	condalarmdefinitionrelationship["moid"] = item.GetMoid()
	condalarmdefinitionrelationship["object_type"] = item.GetObjectType()
	condalarmdefinitionrelationship["selector"] = item.GetSelector()

	condalarmdefinitionrelationships = append(condalarmdefinitionrelationships, condalarmdefinitionrelationship)
	return condalarmdefinitionrelationships
}
func flattenMapCondAlarmSummary(p models.CondAlarmSummary, d *schema.ResourceData) []map[string]interface{} {
	var condalarmsummarys []map[string]interface{}
	var ret models.CondAlarmSummary
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	item := p
	condalarmsummary := make(map[string]interface{})
	condalarmsummary["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	condalarmsummary["class_id"] = item.GetClassId()
	condalarmsummary["critical"] = item.GetCritical()
	condalarmsummary["health"] = item.GetHealth()
	condalarmsummary["info"] = item.GetInfo()
	condalarmsummary["object_type"] = item.GetObjectType()
	condalarmsummary["suppressed_critical"] = item.GetSuppressedCritical()
	condalarmsummary["suppressed_info"] = item.GetSuppressedInfo()
	condalarmsummary["suppressed_warning"] = item.GetSuppressedWarning()
	condalarmsummary["warning"] = item.GetWarning()

	condalarmsummarys = append(condalarmsummarys, condalarmsummary)
	return condalarmsummarys
}
func flattenMapCondHclStatusRelationship(p models.CondHclStatusRelationship, d *schema.ResourceData) []map[string]interface{} {
	var condhclstatusrelationships []map[string]interface{}
	var ret models.CondHclStatusRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	condhclstatusrelationship := make(map[string]interface{})
	condhclstatusrelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	condhclstatusrelationship["class_id"] = item.GetClassId()
	condhclstatusrelationship["moid"] = item.GetMoid()
	condhclstatusrelationship["object_type"] = item.GetObjectType()
	condhclstatusrelationship["selector"] = item.GetSelector()

	condhclstatusrelationships = append(condhclstatusrelationships, condhclstatusrelationship)
	return condhclstatusrelationships
}
func flattenMapConnectorFileChecksum(p models.ConnectorFileChecksum, d *schema.ResourceData) []map[string]interface{} {
	var connectorfilechecksums []map[string]interface{}
	var ret models.ConnectorFileChecksum
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	item := p
	connectorfilechecksum := make(map[string]interface{})
	connectorfilechecksum["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	connectorfilechecksum["class_id"] = item.GetClassId()
	connectorfilechecksum["hash_algorithm"] = item.GetHashAlgorithm()
	connectorfilechecksum["object_type"] = item.GetObjectType()

	connectorfilechecksums = append(connectorfilechecksums, connectorfilechecksum)
	return connectorfilechecksums
}
func flattenMapConnectorPlatformParamBase(p models.ConnectorPlatformParamBase, d *schema.ResourceData) []map[string]interface{} {
	var connectorplatformparambases []map[string]interface{}
	var ret models.ConnectorPlatformParamBase
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	item := p
	connectorplatformparambase := make(map[string]interface{})
	connectorplatformparambase["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	connectorplatformparambase["class_id"] = item.GetClassId()
	connectorplatformparambase["object_type"] = item.GetObjectType()

	connectorplatformparambases = append(connectorplatformparambases, connectorplatformparambase)
	return connectorplatformparambases
}
func flattenMapConvergedinfraAdapterComplianceDetailsRelationship(p models.ConvergedinfraAdapterComplianceDetailsRelationship, d *schema.ResourceData) []map[string]interface{} {
	var convergedinfraadaptercompliancedetailsrelationships []map[string]interface{}
	var ret models.ConvergedinfraAdapterComplianceDetailsRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	convergedinfraadaptercompliancedetailsrelationship := make(map[string]interface{})
	convergedinfraadaptercompliancedetailsrelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	convergedinfraadaptercompliancedetailsrelationship["class_id"] = item.GetClassId()
	convergedinfraadaptercompliancedetailsrelationship["moid"] = item.GetMoid()
	convergedinfraadaptercompliancedetailsrelationship["object_type"] = item.GetObjectType()
	convergedinfraadaptercompliancedetailsrelationship["selector"] = item.GetSelector()

	convergedinfraadaptercompliancedetailsrelationships = append(convergedinfraadaptercompliancedetailsrelationships, convergedinfraadaptercompliancedetailsrelationship)
	return convergedinfraadaptercompliancedetailsrelationships
}
func flattenMapConvergedinfraPodRelationship(p models.ConvergedinfraPodRelationship, d *schema.ResourceData) []map[string]interface{} {
	var convergedinfrapodrelationships []map[string]interface{}
	var ret models.ConvergedinfraPodRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	convergedinfrapodrelationship := make(map[string]interface{})
	convergedinfrapodrelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	convergedinfrapodrelationship["class_id"] = item.GetClassId()
	convergedinfrapodrelationship["moid"] = item.GetMoid()
	convergedinfrapodrelationship["object_type"] = item.GetObjectType()
	convergedinfrapodrelationship["selector"] = item.GetSelector()

	convergedinfrapodrelationships = append(convergedinfrapodrelationships, convergedinfrapodrelationship)
	return convergedinfrapodrelationships
}
func flattenMapConvergedinfraPodComplianceInfoRelationship(p models.ConvergedinfraPodComplianceInfoRelationship, d *schema.ResourceData) []map[string]interface{} {
	var convergedinfrapodcomplianceinforelationships []map[string]interface{}
	var ret models.ConvergedinfraPodComplianceInfoRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	convergedinfrapodcomplianceinforelationship := make(map[string]interface{})
	convergedinfrapodcomplianceinforelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	convergedinfrapodcomplianceinforelationship["class_id"] = item.GetClassId()
	convergedinfrapodcomplianceinforelationship["moid"] = item.GetMoid()
	convergedinfrapodcomplianceinforelationship["object_type"] = item.GetObjectType()
	convergedinfrapodcomplianceinforelationship["selector"] = item.GetSelector()

	convergedinfrapodcomplianceinforelationships = append(convergedinfrapodcomplianceinforelationships, convergedinfrapodcomplianceinforelationship)
	return convergedinfrapodcomplianceinforelationships
}
func flattenMapConvergedinfraPodSummary(p models.ConvergedinfraPodSummary, d *schema.ResourceData) []map[string]interface{} {
	var convergedinfrapodsummarys []map[string]interface{}
	var ret models.ConvergedinfraPodSummary
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	item := p
	convergedinfrapodsummary := make(map[string]interface{})
	convergedinfrapodsummary["active_nodes"] = item.GetActiveNodes()
	convergedinfrapodsummary["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	convergedinfrapodsummary["alarm_summary"] = (func(p models.ConvergedinfraAlarmSummary, d *schema.ResourceData) []map[string]interface{} {
		var convergedinfraalarmsummarys []map[string]interface{}
		var ret models.ConvergedinfraAlarmSummary
		if reflect.DeepEqual(ret, p) {
			return nil
		}
		item := p
		convergedinfraalarmsummary := make(map[string]interface{})
		convergedinfraalarmsummary["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
		convergedinfraalarmsummary["class_id"] = item.GetClassId()
		convergedinfraalarmsummary["critical"] = item.GetCritical()
		convergedinfraalarmsummary["object_type"] = item.GetObjectType()
		convergedinfraalarmsummary["warning"] = item.GetWarning()

		convergedinfraalarmsummarys = append(convergedinfraalarmsummarys, convergedinfraalarmsummary)
		return convergedinfraalarmsummarys
	})(item.GetAlarmSummary(), d)
	convergedinfrapodsummary["class_id"] = item.GetClassId()
	convergedinfrapodsummary["compliance_summary"] = (func(p models.ConvergedinfraComplianceSummary, d *schema.ResourceData) []map[string]interface{} {
		var convergedinfracompliancesummarys []map[string]interface{}
		var ret models.ConvergedinfraComplianceSummary
		if reflect.DeepEqual(ret, p) {
			return nil
		}
		item := p
		convergedinfracompliancesummary := make(map[string]interface{})
		convergedinfracompliancesummary["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
		convergedinfracompliancesummary["class_id"] = item.GetClassId()
		convergedinfracompliancesummary["incomplete"] = item.GetIncomplete()
		convergedinfracompliancesummary["not_evaluated"] = item.GetNotEvaluated()
		convergedinfracompliancesummary["not_listed"] = item.GetNotListed()
		convergedinfracompliancesummary["object_type"] = item.GetObjectType()
		convergedinfracompliancesummary["validated"] = item.GetValidated()

		convergedinfracompliancesummarys = append(convergedinfracompliancesummarys, convergedinfracompliancesummary)
		return convergedinfracompliancesummarys
	})(item.GetComplianceSummary(), d)
	convergedinfrapodsummary["node_count"] = item.GetNodeCount()
	convergedinfrapodsummary["object_type"] = item.GetObjectType()
	convergedinfrapodsummary["storage_available"] = item.GetStorageAvailable()
	convergedinfrapodsummary["storage_capacity"] = item.GetStorageCapacity()
	convergedinfrapodsummary["storage_utilization"] = item.GetStorageUtilization()
	convergedinfrapodsummary["vm_count"] = item.GetVmCount()

	convergedinfrapodsummarys = append(convergedinfrapodsummarys, convergedinfrapodsummary)
	return convergedinfrapodsummarys
}
func flattenMapConvergedinfraServerComplianceDetailsRelationship(p models.ConvergedinfraServerComplianceDetailsRelationship, d *schema.ResourceData) []map[string]interface{} {
	var convergedinfraservercompliancedetailsrelationships []map[string]interface{}
	var ret models.ConvergedinfraServerComplianceDetailsRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	convergedinfraservercompliancedetailsrelationship := make(map[string]interface{})
	convergedinfraservercompliancedetailsrelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	convergedinfraservercompliancedetailsrelationship["class_id"] = item.GetClassId()
	convergedinfraservercompliancedetailsrelationship["moid"] = item.GetMoid()
	convergedinfraservercompliancedetailsrelationship["object_type"] = item.GetObjectType()
	convergedinfraservercompliancedetailsrelationship["selector"] = item.GetSelector()

	convergedinfraservercompliancedetailsrelationships = append(convergedinfraservercompliancedetailsrelationships, convergedinfraservercompliancedetailsrelationship)
	return convergedinfraservercompliancedetailsrelationships
}
func flattenMapConvergedinfraSwitchComplianceDetailsRelationship(p models.ConvergedinfraSwitchComplianceDetailsRelationship, d *schema.ResourceData) []map[string]interface{} {
	var convergedinfraswitchcompliancedetailsrelationships []map[string]interface{}
	var ret models.ConvergedinfraSwitchComplianceDetailsRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	convergedinfraswitchcompliancedetailsrelationship := make(map[string]interface{})
	convergedinfraswitchcompliancedetailsrelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	convergedinfraswitchcompliancedetailsrelationship["class_id"] = item.GetClassId()
	convergedinfraswitchcompliancedetailsrelationship["moid"] = item.GetMoid()
	convergedinfraswitchcompliancedetailsrelationship["object_type"] = item.GetObjectType()
	convergedinfraswitchcompliancedetailsrelationship["selector"] = item.GetSelector()

	convergedinfraswitchcompliancedetailsrelationships = append(convergedinfraswitchcompliancedetailsrelationships, convergedinfraswitchcompliancedetailsrelationship)
	return convergedinfraswitchcompliancedetailsrelationships
}
func flattenMapEquipmentBaseRelationship(p models.EquipmentBaseRelationship, d *schema.ResourceData) []map[string]interface{} {
	var equipmentbaserelationships []map[string]interface{}
	var ret models.EquipmentBaseRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	equipmentbaserelationship := make(map[string]interface{})
	equipmentbaserelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	equipmentbaserelationship["class_id"] = item.GetClassId()
	equipmentbaserelationship["moid"] = item.GetMoid()
	equipmentbaserelationship["object_type"] = item.GetObjectType()
	equipmentbaserelationship["selector"] = item.GetSelector()

	equipmentbaserelationships = append(equipmentbaserelationships, equipmentbaserelationship)
	return equipmentbaserelationships
}
func flattenMapEquipmentChassisRelationship(p models.EquipmentChassisRelationship, d *schema.ResourceData) []map[string]interface{} {
	var equipmentchassisrelationships []map[string]interface{}
	var ret models.EquipmentChassisRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	equipmentchassisrelationship := make(map[string]interface{})
	equipmentchassisrelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	equipmentchassisrelationship["class_id"] = item.GetClassId()
	equipmentchassisrelationship["moid"] = item.GetMoid()
	equipmentchassisrelationship["object_type"] = item.GetObjectType()
	equipmentchassisrelationship["selector"] = item.GetSelector()

	equipmentchassisrelationships = append(equipmentchassisrelationships, equipmentchassisrelationship)
	return equipmentchassisrelationships
}
func flattenMapEquipmentDeviceLocation(p models.EquipmentDeviceLocation, d *schema.ResourceData) []map[string]interface{} {
	var equipmentdevicelocations []map[string]interface{}
	var ret models.EquipmentDeviceLocation
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	item := p
	equipmentdevicelocation := make(map[string]interface{})
	equipmentdevicelocation["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	equipmentdevicelocation["address"] = item.GetAddress()
	equipmentdevicelocation["class_id"] = item.GetClassId()
	equipmentdevicelocation["latitude"] = item.GetLatitude()
	equipmentdevicelocation["longitude"] = item.GetLongitude()
	equipmentdevicelocation["object_type"] = item.GetObjectType()

	equipmentdevicelocations = append(equipmentdevicelocations, equipmentdevicelocation)
	return equipmentdevicelocations
}
func flattenMapEquipmentExpanderModuleRelationship(p models.EquipmentExpanderModuleRelationship, d *schema.ResourceData) []map[string]interface{} {
	var equipmentexpandermodulerelationships []map[string]interface{}
	var ret models.EquipmentExpanderModuleRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	equipmentexpandermodulerelationship := make(map[string]interface{})
	equipmentexpandermodulerelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	equipmentexpandermodulerelationship["class_id"] = item.GetClassId()
	equipmentexpandermodulerelationship["moid"] = item.GetMoid()
	equipmentexpandermodulerelationship["object_type"] = item.GetObjectType()
	equipmentexpandermodulerelationship["selector"] = item.GetSelector()

	equipmentexpandermodulerelationships = append(equipmentexpandermodulerelationships, equipmentexpandermodulerelationship)
	return equipmentexpandermodulerelationships
}
func flattenMapEquipmentFanControlRelationship(p models.EquipmentFanControlRelationship, d *schema.ResourceData) []map[string]interface{} {
	var equipmentfancontrolrelationships []map[string]interface{}
	var ret models.EquipmentFanControlRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	equipmentfancontrolrelationship := make(map[string]interface{})
	equipmentfancontrolrelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	equipmentfancontrolrelationship["class_id"] = item.GetClassId()
	equipmentfancontrolrelationship["moid"] = item.GetMoid()
	equipmentfancontrolrelationship["object_type"] = item.GetObjectType()
	equipmentfancontrolrelationship["selector"] = item.GetSelector()

	equipmentfancontrolrelationships = append(equipmentfancontrolrelationships, equipmentfancontrolrelationship)
	return equipmentfancontrolrelationships
}
func flattenMapEquipmentFanModuleRelationship(p models.EquipmentFanModuleRelationship, d *schema.ResourceData) []map[string]interface{} {
	var equipmentfanmodulerelationships []map[string]interface{}
	var ret models.EquipmentFanModuleRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	equipmentfanmodulerelationship := make(map[string]interface{})
	equipmentfanmodulerelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	equipmentfanmodulerelationship["class_id"] = item.GetClassId()
	equipmentfanmodulerelationship["moid"] = item.GetMoid()
	equipmentfanmodulerelationship["object_type"] = item.GetObjectType()
	equipmentfanmodulerelationship["selector"] = item.GetSelector()

	equipmentfanmodulerelationships = append(equipmentfanmodulerelationships, equipmentfanmodulerelationship)
	return equipmentfanmodulerelationships
}
func flattenMapEquipmentFexRelationship(p models.EquipmentFexRelationship, d *schema.ResourceData) []map[string]interface{} {
	var equipmentfexrelationships []map[string]interface{}
	var ret models.EquipmentFexRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	equipmentfexrelationship := make(map[string]interface{})
	equipmentfexrelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	equipmentfexrelationship["class_id"] = item.GetClassId()
	equipmentfexrelationship["moid"] = item.GetMoid()
	equipmentfexrelationship["object_type"] = item.GetObjectType()
	equipmentfexrelationship["selector"] = item.GetSelector()

	equipmentfexrelationships = append(equipmentfexrelationships, equipmentfexrelationship)
	return equipmentfexrelationships
}
func flattenMapEquipmentFruRelationship(p models.EquipmentFruRelationship, d *schema.ResourceData) []map[string]interface{} {
	var equipmentfrurelationships []map[string]interface{}
	var ret models.EquipmentFruRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	equipmentfrurelationship := make(map[string]interface{})
	equipmentfrurelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	equipmentfrurelationship["class_id"] = item.GetClassId()
	equipmentfrurelationship["moid"] = item.GetMoid()
	equipmentfrurelationship["object_type"] = item.GetObjectType()
	equipmentfrurelationship["selector"] = item.GetSelector()

	equipmentfrurelationships = append(equipmentfrurelationships, equipmentfrurelationship)
	return equipmentfrurelationships
}
func flattenMapEquipmentIoCardRelationship(p models.EquipmentIoCardRelationship, d *schema.ResourceData) []map[string]interface{} {
	var equipmentiocardrelationships []map[string]interface{}
	var ret models.EquipmentIoCardRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	equipmentiocardrelationship := make(map[string]interface{})
	equipmentiocardrelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	equipmentiocardrelationship["class_id"] = item.GetClassId()
	equipmentiocardrelationship["moid"] = item.GetMoid()
	equipmentiocardrelationship["object_type"] = item.GetObjectType()
	equipmentiocardrelationship["selector"] = item.GetSelector()

	equipmentiocardrelationships = append(equipmentiocardrelationships, equipmentiocardrelationship)
	return equipmentiocardrelationships
}
func flattenMapEquipmentIoCardBaseRelationship(p models.EquipmentIoCardBaseRelationship, d *schema.ResourceData) []map[string]interface{} {
	var equipmentiocardbaserelationships []map[string]interface{}
	var ret models.EquipmentIoCardBaseRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	equipmentiocardbaserelationship := make(map[string]interface{})
	equipmentiocardbaserelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	equipmentiocardbaserelationship["class_id"] = item.GetClassId()
	equipmentiocardbaserelationship["moid"] = item.GetMoid()
	equipmentiocardbaserelationship["object_type"] = item.GetObjectType()
	equipmentiocardbaserelationship["selector"] = item.GetSelector()

	equipmentiocardbaserelationships = append(equipmentiocardbaserelationships, equipmentiocardbaserelationship)
	return equipmentiocardbaserelationships
}
func flattenMapEquipmentLocatorLedRelationship(p models.EquipmentLocatorLedRelationship, d *schema.ResourceData) []map[string]interface{} {
	var equipmentlocatorledrelationships []map[string]interface{}
	var ret models.EquipmentLocatorLedRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	equipmentlocatorledrelationship := make(map[string]interface{})
	equipmentlocatorledrelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	equipmentlocatorledrelationship["class_id"] = item.GetClassId()
	equipmentlocatorledrelationship["moid"] = item.GetMoid()
	equipmentlocatorledrelationship["object_type"] = item.GetObjectType()
	equipmentlocatorledrelationship["selector"] = item.GetSelector()

	equipmentlocatorledrelationships = append(equipmentlocatorledrelationships, equipmentlocatorledrelationship)
	return equipmentlocatorledrelationships
}
func flattenMapEquipmentPhysicalIdentityRelationship(p models.EquipmentPhysicalIdentityRelationship, d *schema.ResourceData) []map[string]interface{} {
	var equipmentphysicalidentityrelationships []map[string]interface{}
	var ret models.EquipmentPhysicalIdentityRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	equipmentphysicalidentityrelationship := make(map[string]interface{})
	equipmentphysicalidentityrelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	equipmentphysicalidentityrelationship["class_id"] = item.GetClassId()
	equipmentphysicalidentityrelationship["moid"] = item.GetMoid()
	equipmentphysicalidentityrelationship["object_type"] = item.GetObjectType()
	equipmentphysicalidentityrelationship["selector"] = item.GetSelector()

	equipmentphysicalidentityrelationships = append(equipmentphysicalidentityrelationships, equipmentphysicalidentityrelationship)
	return equipmentphysicalidentityrelationships
}
func flattenMapEquipmentPsuControlRelationship(p models.EquipmentPsuControlRelationship, d *schema.ResourceData) []map[string]interface{} {
	var equipmentpsucontrolrelationships []map[string]interface{}
	var ret models.EquipmentPsuControlRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	equipmentpsucontrolrelationship := make(map[string]interface{})
	equipmentpsucontrolrelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	equipmentpsucontrolrelationship["class_id"] = item.GetClassId()
	equipmentpsucontrolrelationship["moid"] = item.GetMoid()
	equipmentpsucontrolrelationship["object_type"] = item.GetObjectType()
	equipmentpsucontrolrelationship["selector"] = item.GetSelector()

	equipmentpsucontrolrelationships = append(equipmentpsucontrolrelationships, equipmentpsucontrolrelationship)
	return equipmentpsucontrolrelationships
}
func flattenMapEquipmentRackEnclosureRelationship(p models.EquipmentRackEnclosureRelationship, d *schema.ResourceData) []map[string]interface{} {
	var equipmentrackenclosurerelationships []map[string]interface{}
	var ret models.EquipmentRackEnclosureRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	equipmentrackenclosurerelationship := make(map[string]interface{})
	equipmentrackenclosurerelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	equipmentrackenclosurerelationship["class_id"] = item.GetClassId()
	equipmentrackenclosurerelationship["moid"] = item.GetMoid()
	equipmentrackenclosurerelationship["object_type"] = item.GetObjectType()
	equipmentrackenclosurerelationship["selector"] = item.GetSelector()

	equipmentrackenclosurerelationships = append(equipmentrackenclosurerelationships, equipmentrackenclosurerelationship)
	return equipmentrackenclosurerelationships
}
func flattenMapEquipmentRackEnclosureSlotRelationship(p models.EquipmentRackEnclosureSlotRelationship, d *schema.ResourceData) []map[string]interface{} {
	var equipmentrackenclosureslotrelationships []map[string]interface{}
	var ret models.EquipmentRackEnclosureSlotRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	equipmentrackenclosureslotrelationship := make(map[string]interface{})
	equipmentrackenclosureslotrelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	equipmentrackenclosureslotrelationship["class_id"] = item.GetClassId()
	equipmentrackenclosureslotrelationship["moid"] = item.GetMoid()
	equipmentrackenclosureslotrelationship["object_type"] = item.GetObjectType()
	equipmentrackenclosureslotrelationship["selector"] = item.GetSelector()

	equipmentrackenclosureslotrelationships = append(equipmentrackenclosureslotrelationships, equipmentrackenclosureslotrelationship)
	return equipmentrackenclosureslotrelationships
}
func flattenMapEquipmentResetAction(p models.EquipmentResetAction, d *schema.ResourceData) []map[string]interface{} {
	var equipmentresetactions []map[string]interface{}
	var ret models.EquipmentResetAction
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	item := p
	equipmentresetaction := make(map[string]interface{})
	equipmentresetaction["action"] = item.GetAction()
	equipmentresetaction["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	equipmentresetaction["class_id"] = item.GetClassId()
	equipmentresetaction["enable_fabric_evacuation"] = item.GetEnableFabricEvacuation()
	equipmentresetaction["object_type"] = item.GetObjectType()

	equipmentresetactions = append(equipmentresetactions, equipmentresetaction)
	return equipmentresetactions
}
func flattenMapEquipmentSharedIoModuleRelationship(p models.EquipmentSharedIoModuleRelationship, d *schema.ResourceData) []map[string]interface{} {
	var equipmentsharediomodulerelationships []map[string]interface{}
	var ret models.EquipmentSharedIoModuleRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	equipmentsharediomodulerelationship := make(map[string]interface{})
	equipmentsharediomodulerelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	equipmentsharediomodulerelationship["class_id"] = item.GetClassId()
	equipmentsharediomodulerelationship["moid"] = item.GetMoid()
	equipmentsharediomodulerelationship["object_type"] = item.GetObjectType()
	equipmentsharediomodulerelationship["selector"] = item.GetSelector()

	equipmentsharediomodulerelationships = append(equipmentsharediomodulerelationships, equipmentsharediomodulerelationship)
	return equipmentsharediomodulerelationships
}
func flattenMapEquipmentSwitchCardRelationship(p models.EquipmentSwitchCardRelationship, d *schema.ResourceData) []map[string]interface{} {
	var equipmentswitchcardrelationships []map[string]interface{}
	var ret models.EquipmentSwitchCardRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	equipmentswitchcardrelationship := make(map[string]interface{})
	equipmentswitchcardrelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	equipmentswitchcardrelationship["class_id"] = item.GetClassId()
	equipmentswitchcardrelationship["moid"] = item.GetMoid()
	equipmentswitchcardrelationship["object_type"] = item.GetObjectType()
	equipmentswitchcardrelationship["selector"] = item.GetSelector()

	equipmentswitchcardrelationships = append(equipmentswitchcardrelationships, equipmentswitchcardrelationship)
	return equipmentswitchcardrelationships
}
func flattenMapEquipmentSystemIoControllerRelationship(p models.EquipmentSystemIoControllerRelationship, d *schema.ResourceData) []map[string]interface{} {
	var equipmentsystemiocontrollerrelationships []map[string]interface{}
	var ret models.EquipmentSystemIoControllerRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	equipmentsystemiocontrollerrelationship := make(map[string]interface{})
	equipmentsystemiocontrollerrelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	equipmentsystemiocontrollerrelationship["class_id"] = item.GetClassId()
	equipmentsystemiocontrollerrelationship["moid"] = item.GetMoid()
	equipmentsystemiocontrollerrelationship["object_type"] = item.GetObjectType()
	equipmentsystemiocontrollerrelationship["selector"] = item.GetSelector()

	equipmentsystemiocontrollerrelationships = append(equipmentsystemiocontrollerrelationships, equipmentsystemiocontrollerrelationship)
	return equipmentsystemiocontrollerrelationships
}
func flattenMapEtherHostPortRelationship(p models.EtherHostPortRelationship, d *schema.ResourceData) []map[string]interface{} {
	var etherhostportrelationships []map[string]interface{}
	var ret models.EtherHostPortRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	etherhostportrelationship := make(map[string]interface{})
	etherhostportrelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	etherhostportrelationship["class_id"] = item.GetClassId()
	etherhostportrelationship["moid"] = item.GetMoid()
	etherhostportrelationship["object_type"] = item.GetObjectType()
	etherhostportrelationship["selector"] = item.GetSelector()

	etherhostportrelationships = append(etherhostportrelationships, etherhostportrelationship)
	return etherhostportrelationships
}
func flattenMapEtherPhysicalPortRelationship(p models.EtherPhysicalPortRelationship, d *schema.ResourceData) []map[string]interface{} {
	var etherphysicalportrelationships []map[string]interface{}
	var ret models.EtherPhysicalPortRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	etherphysicalportrelationship := make(map[string]interface{})
	etherphysicalportrelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	etherphysicalportrelationship["class_id"] = item.GetClassId()
	etherphysicalportrelationship["moid"] = item.GetMoid()
	etherphysicalportrelationship["object_type"] = item.GetObjectType()
	etherphysicalportrelationship["selector"] = item.GetSelector()

	etherphysicalportrelationships = append(etherphysicalportrelationships, etherphysicalportrelationship)
	return etherphysicalportrelationships
}
func flattenMapEtherPhysicalPortBaseRelationship(p models.EtherPhysicalPortBaseRelationship, d *schema.ResourceData) []map[string]interface{} {
	var etherphysicalportbaserelationships []map[string]interface{}
	var ret models.EtherPhysicalPortBaseRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	etherphysicalportbaserelationship := make(map[string]interface{})
	etherphysicalportbaserelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	etherphysicalportbaserelationship["class_id"] = item.GetClassId()
	etherphysicalportbaserelationship["moid"] = item.GetMoid()
	etherphysicalportbaserelationship["object_type"] = item.GetObjectType()
	etherphysicalportbaserelationship["selector"] = item.GetSelector()

	etherphysicalportbaserelationships = append(etherphysicalportbaserelationships, etherphysicalportbaserelationship)
	return etherphysicalportbaserelationships
}
func flattenMapEtherPortChannelRelationship(p models.EtherPortChannelRelationship, d *schema.ResourceData) []map[string]interface{} {
	var etherportchannelrelationships []map[string]interface{}
	var ret models.EtherPortChannelRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	etherportchannelrelationship := make(map[string]interface{})
	etherportchannelrelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	etherportchannelrelationship["class_id"] = item.GetClassId()
	etherportchannelrelationship["moid"] = item.GetMoid()
	etherportchannelrelationship["object_type"] = item.GetObjectType()
	etherportchannelrelationship["selector"] = item.GetSelector()

	etherportchannelrelationships = append(etherportchannelrelationships, etherportchannelrelationship)
	return etherportchannelrelationships
}
func flattenMapFabricAbstractInterfaceRoleRelationship(p models.FabricAbstractInterfaceRoleRelationship, d *schema.ResourceData) []map[string]interface{} {
	var fabricabstractinterfacerolerelationships []map[string]interface{}
	var ret models.FabricAbstractInterfaceRoleRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	fabricabstractinterfacerolerelationship := make(map[string]interface{})
	fabricabstractinterfacerolerelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	fabricabstractinterfacerolerelationship["class_id"] = item.GetClassId()
	fabricabstractinterfacerolerelationship["moid"] = item.GetMoid()
	fabricabstractinterfacerolerelationship["object_type"] = item.GetObjectType()
	fabricabstractinterfacerolerelationship["selector"] = item.GetSelector()

	fabricabstractinterfacerolerelationships = append(fabricabstractinterfacerolerelationships, fabricabstractinterfacerolerelationship)
	return fabricabstractinterfacerolerelationships
}
func flattenMapFabricBaseSwitchProfileRelationship(p models.FabricBaseSwitchProfileRelationship, d *schema.ResourceData) []map[string]interface{} {
	var fabricbaseswitchprofilerelationships []map[string]interface{}
	var ret models.FabricBaseSwitchProfileRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	fabricbaseswitchprofilerelationship := make(map[string]interface{})
	fabricbaseswitchprofilerelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	fabricbaseswitchprofilerelationship["class_id"] = item.GetClassId()
	fabricbaseswitchprofilerelationship["moid"] = item.GetMoid()
	fabricbaseswitchprofilerelationship["object_type"] = item.GetObjectType()
	fabricbaseswitchprofilerelationship["selector"] = item.GetSelector()

	fabricbaseswitchprofilerelationships = append(fabricbaseswitchprofilerelationships, fabricbaseswitchprofilerelationship)
	return fabricbaseswitchprofilerelationships
}
func flattenMapFabricConfigResultRelationship(p models.FabricConfigResultRelationship, d *schema.ResourceData) []map[string]interface{} {
	var fabricconfigresultrelationships []map[string]interface{}
	var ret models.FabricConfigResultRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	fabricconfigresultrelationship := make(map[string]interface{})
	fabricconfigresultrelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	fabricconfigresultrelationship["class_id"] = item.GetClassId()
	fabricconfigresultrelationship["moid"] = item.GetMoid()
	fabricconfigresultrelationship["object_type"] = item.GetObjectType()
	fabricconfigresultrelationship["selector"] = item.GetSelector()

	fabricconfigresultrelationships = append(fabricconfigresultrelationships, fabricconfigresultrelationship)
	return fabricconfigresultrelationships
}
func flattenMapFabricEthNetworkControlPolicyRelationship(p models.FabricEthNetworkControlPolicyRelationship, d *schema.ResourceData) []map[string]interface{} {
	var fabricethnetworkcontrolpolicyrelationships []map[string]interface{}
	var ret models.FabricEthNetworkControlPolicyRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	fabricethnetworkcontrolpolicyrelationship := make(map[string]interface{})
	fabricethnetworkcontrolpolicyrelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	fabricethnetworkcontrolpolicyrelationship["class_id"] = item.GetClassId()
	fabricethnetworkcontrolpolicyrelationship["moid"] = item.GetMoid()
	fabricethnetworkcontrolpolicyrelationship["object_type"] = item.GetObjectType()
	fabricethnetworkcontrolpolicyrelationship["selector"] = item.GetSelector()

	fabricethnetworkcontrolpolicyrelationships = append(fabricethnetworkcontrolpolicyrelationships, fabricethnetworkcontrolpolicyrelationship)
	return fabricethnetworkcontrolpolicyrelationships
}
func flattenMapFabricEthNetworkControlPolicyInventoryRelationship(p models.FabricEthNetworkControlPolicyInventoryRelationship, d *schema.ResourceData) []map[string]interface{} {
	var fabricethnetworkcontrolpolicyinventoryrelationships []map[string]interface{}
	var ret models.FabricEthNetworkControlPolicyInventoryRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	fabricethnetworkcontrolpolicyinventoryrelationship := make(map[string]interface{})
	fabricethnetworkcontrolpolicyinventoryrelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	fabricethnetworkcontrolpolicyinventoryrelationship["class_id"] = item.GetClassId()
	fabricethnetworkcontrolpolicyinventoryrelationship["moid"] = item.GetMoid()
	fabricethnetworkcontrolpolicyinventoryrelationship["object_type"] = item.GetObjectType()
	fabricethnetworkcontrolpolicyinventoryrelationship["selector"] = item.GetSelector()

	fabricethnetworkcontrolpolicyinventoryrelationships = append(fabricethnetworkcontrolpolicyinventoryrelationships, fabricethnetworkcontrolpolicyinventoryrelationship)
	return fabricethnetworkcontrolpolicyinventoryrelationships
}
func flattenMapFabricEthNetworkGroupPolicyRelationship(p models.FabricEthNetworkGroupPolicyRelationship, d *schema.ResourceData) []map[string]interface{} {
	var fabricethnetworkgrouppolicyrelationships []map[string]interface{}
	var ret models.FabricEthNetworkGroupPolicyRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	fabricethnetworkgrouppolicyrelationship := make(map[string]interface{})
	fabricethnetworkgrouppolicyrelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	fabricethnetworkgrouppolicyrelationship["class_id"] = item.GetClassId()
	fabricethnetworkgrouppolicyrelationship["moid"] = item.GetMoid()
	fabricethnetworkgrouppolicyrelationship["object_type"] = item.GetObjectType()
	fabricethnetworkgrouppolicyrelationship["selector"] = item.GetSelector()

	fabricethnetworkgrouppolicyrelationships = append(fabricethnetworkgrouppolicyrelationships, fabricethnetworkgrouppolicyrelationship)
	return fabricethnetworkgrouppolicyrelationships
}
func flattenMapFabricEthNetworkPolicyRelationship(p models.FabricEthNetworkPolicyRelationship, d *schema.ResourceData) []map[string]interface{} {
	var fabricethnetworkpolicyrelationships []map[string]interface{}
	var ret models.FabricEthNetworkPolicyRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	fabricethnetworkpolicyrelationship := make(map[string]interface{})
	fabricethnetworkpolicyrelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	fabricethnetworkpolicyrelationship["class_id"] = item.GetClassId()
	fabricethnetworkpolicyrelationship["moid"] = item.GetMoid()
	fabricethnetworkpolicyrelationship["object_type"] = item.GetObjectType()
	fabricethnetworkpolicyrelationship["selector"] = item.GetSelector()

	fabricethnetworkpolicyrelationships = append(fabricethnetworkpolicyrelationships, fabricethnetworkpolicyrelationship)
	return fabricethnetworkpolicyrelationships
}
func flattenMapFabricFcNetworkPolicyRelationship(p models.FabricFcNetworkPolicyRelationship, d *schema.ResourceData) []map[string]interface{} {
	var fabricfcnetworkpolicyrelationships []map[string]interface{}
	var ret models.FabricFcNetworkPolicyRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	fabricfcnetworkpolicyrelationship := make(map[string]interface{})
	fabricfcnetworkpolicyrelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	fabricfcnetworkpolicyrelationship["class_id"] = item.GetClassId()
	fabricfcnetworkpolicyrelationship["moid"] = item.GetMoid()
	fabricfcnetworkpolicyrelationship["object_type"] = item.GetObjectType()
	fabricfcnetworkpolicyrelationship["selector"] = item.GetSelector()

	fabricfcnetworkpolicyrelationships = append(fabricfcnetworkpolicyrelationships, fabricfcnetworkpolicyrelationship)
	return fabricfcnetworkpolicyrelationships
}
func flattenMapFabricFlowControlPolicyRelationship(p models.FabricFlowControlPolicyRelationship, d *schema.ResourceData) []map[string]interface{} {
	var fabricflowcontrolpolicyrelationships []map[string]interface{}
	var ret models.FabricFlowControlPolicyRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	fabricflowcontrolpolicyrelationship := make(map[string]interface{})
	fabricflowcontrolpolicyrelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	fabricflowcontrolpolicyrelationship["class_id"] = item.GetClassId()
	fabricflowcontrolpolicyrelationship["moid"] = item.GetMoid()
	fabricflowcontrolpolicyrelationship["object_type"] = item.GetObjectType()
	fabricflowcontrolpolicyrelationship["selector"] = item.GetSelector()

	fabricflowcontrolpolicyrelationships = append(fabricflowcontrolpolicyrelationships, fabricflowcontrolpolicyrelationship)
	return fabricflowcontrolpolicyrelationships
}
func flattenMapFabricLinkAggregationPolicyRelationship(p models.FabricLinkAggregationPolicyRelationship, d *schema.ResourceData) []map[string]interface{} {
	var fabriclinkaggregationpolicyrelationships []map[string]interface{}
	var ret models.FabricLinkAggregationPolicyRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	fabriclinkaggregationpolicyrelationship := make(map[string]interface{})
	fabriclinkaggregationpolicyrelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	fabriclinkaggregationpolicyrelationship["class_id"] = item.GetClassId()
	fabriclinkaggregationpolicyrelationship["moid"] = item.GetMoid()
	fabriclinkaggregationpolicyrelationship["object_type"] = item.GetObjectType()
	fabriclinkaggregationpolicyrelationship["selector"] = item.GetSelector()

	fabriclinkaggregationpolicyrelationships = append(fabriclinkaggregationpolicyrelationships, fabriclinkaggregationpolicyrelationship)
	return fabriclinkaggregationpolicyrelationships
}
func flattenMapFabricLinkControlPolicyRelationship(p models.FabricLinkControlPolicyRelationship, d *schema.ResourceData) []map[string]interface{} {
	var fabriclinkcontrolpolicyrelationships []map[string]interface{}
	var ret models.FabricLinkControlPolicyRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	fabriclinkcontrolpolicyrelationship := make(map[string]interface{})
	fabriclinkcontrolpolicyrelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	fabriclinkcontrolpolicyrelationship["class_id"] = item.GetClassId()
	fabriclinkcontrolpolicyrelationship["moid"] = item.GetMoid()
	fabriclinkcontrolpolicyrelationship["object_type"] = item.GetObjectType()
	fabriclinkcontrolpolicyrelationship["selector"] = item.GetSelector()

	fabriclinkcontrolpolicyrelationships = append(fabriclinkcontrolpolicyrelationships, fabriclinkcontrolpolicyrelationship)
	return fabriclinkcontrolpolicyrelationships
}
func flattenMapFabricLldpSettings(p models.FabricLldpSettings, d *schema.ResourceData) []map[string]interface{} {
	var fabriclldpsettingss []map[string]interface{}
	var ret models.FabricLldpSettings
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	item := p
	fabriclldpsettings := make(map[string]interface{})
	fabriclldpsettings["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	fabriclldpsettings["class_id"] = item.GetClassId()
	fabriclldpsettings["object_type"] = item.GetObjectType()
	fabriclldpsettings["receive_enabled"] = item.GetReceiveEnabled()
	fabriclldpsettings["transmit_enabled"] = item.GetTransmitEnabled()

	fabriclldpsettingss = append(fabriclldpsettingss, fabriclldpsettings)
	return fabriclldpsettingss
}
func flattenMapFabricMacAgingSettings(p models.FabricMacAgingSettings, d *schema.ResourceData) []map[string]interface{} {
	var fabricmacagingsettingss []map[string]interface{}
	var ret models.FabricMacAgingSettings
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	item := p
	fabricmacagingsettings := make(map[string]interface{})
	fabricmacagingsettings["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	fabricmacagingsettings["class_id"] = item.GetClassId()
	fabricmacagingsettings["mac_aging_option"] = item.GetMacAgingOption()
	fabricmacagingsettings["mac_aging_time"] = item.GetMacAgingTime()
	fabricmacagingsettings["object_type"] = item.GetObjectType()

	fabricmacagingsettingss = append(fabricmacagingsettingss, fabricmacagingsettings)
	return fabricmacagingsettingss
}
func flattenMapFabricMulticastPolicyRelationship(p models.FabricMulticastPolicyRelationship, d *schema.ResourceData) []map[string]interface{} {
	var fabricmulticastpolicyrelationships []map[string]interface{}
	var ret models.FabricMulticastPolicyRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	fabricmulticastpolicyrelationship := make(map[string]interface{})
	fabricmulticastpolicyrelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	fabricmulticastpolicyrelationship["class_id"] = item.GetClassId()
	fabricmulticastpolicyrelationship["moid"] = item.GetMoid()
	fabricmulticastpolicyrelationship["object_type"] = item.GetObjectType()
	fabricmulticastpolicyrelationship["selector"] = item.GetSelector()

	fabricmulticastpolicyrelationships = append(fabricmulticastpolicyrelationships, fabricmulticastpolicyrelationship)
	return fabricmulticastpolicyrelationships
}
func flattenMapFabricPortPolicyRelationship(p models.FabricPortPolicyRelationship, d *schema.ResourceData) []map[string]interface{} {
	var fabricportpolicyrelationships []map[string]interface{}
	var ret models.FabricPortPolicyRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	fabricportpolicyrelationship := make(map[string]interface{})
	fabricportpolicyrelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	fabricportpolicyrelationship["class_id"] = item.GetClassId()
	fabricportpolicyrelationship["moid"] = item.GetMoid()
	fabricportpolicyrelationship["object_type"] = item.GetObjectType()
	fabricportpolicyrelationship["selector"] = item.GetSelector()

	fabricportpolicyrelationships = append(fabricportpolicyrelationships, fabricportpolicyrelationship)
	return fabricportpolicyrelationships
}
func flattenMapFabricSpanSessionRelationship(p models.FabricSpanSessionRelationship, d *schema.ResourceData) []map[string]interface{} {
	var fabricspansessionrelationships []map[string]interface{}
	var ret models.FabricSpanSessionRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	fabricspansessionrelationship := make(map[string]interface{})
	fabricspansessionrelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	fabricspansessionrelationship["class_id"] = item.GetClassId()
	fabricspansessionrelationship["moid"] = item.GetMoid()
	fabricspansessionrelationship["object_type"] = item.GetObjectType()
	fabricspansessionrelationship["selector"] = item.GetSelector()

	fabricspansessionrelationships = append(fabricspansessionrelationships, fabricspansessionrelationship)
	return fabricspansessionrelationships
}
func flattenMapFabricSwitchClusterProfileRelationship(p models.FabricSwitchClusterProfileRelationship, d *schema.ResourceData) []map[string]interface{} {
	var fabricswitchclusterprofilerelationships []map[string]interface{}
	var ret models.FabricSwitchClusterProfileRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	fabricswitchclusterprofilerelationship := make(map[string]interface{})
	fabricswitchclusterprofilerelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	fabricswitchclusterprofilerelationship["class_id"] = item.GetClassId()
	fabricswitchclusterprofilerelationship["moid"] = item.GetMoid()
	fabricswitchclusterprofilerelationship["object_type"] = item.GetObjectType()
	fabricswitchclusterprofilerelationship["selector"] = item.GetSelector()

	fabricswitchclusterprofilerelationships = append(fabricswitchclusterprofilerelationships, fabricswitchclusterprofilerelationship)
	return fabricswitchclusterprofilerelationships
}
func flattenMapFabricSwitchClusterProfileTemplateRelationship(p models.FabricSwitchClusterProfileTemplateRelationship, d *schema.ResourceData) []map[string]interface{} {
	var fabricswitchclusterprofiletemplaterelationships []map[string]interface{}
	var ret models.FabricSwitchClusterProfileTemplateRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	fabricswitchclusterprofiletemplaterelationship := make(map[string]interface{})
	fabricswitchclusterprofiletemplaterelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	fabricswitchclusterprofiletemplaterelationship["class_id"] = item.GetClassId()
	fabricswitchclusterprofiletemplaterelationship["moid"] = item.GetMoid()
	fabricswitchclusterprofiletemplaterelationship["object_type"] = item.GetObjectType()
	fabricswitchclusterprofiletemplaterelationship["selector"] = item.GetSelector()

	fabricswitchclusterprofiletemplaterelationships = append(fabricswitchclusterprofiletemplaterelationships, fabricswitchclusterprofiletemplaterelationship)
	return fabricswitchclusterprofiletemplaterelationships
}
func flattenMapFabricSwitchProfileRelationship(p models.FabricSwitchProfileRelationship, d *schema.ResourceData) []map[string]interface{} {
	var fabricswitchprofilerelationships []map[string]interface{}
	var ret models.FabricSwitchProfileRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	fabricswitchprofilerelationship := make(map[string]interface{})
	fabricswitchprofilerelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	fabricswitchprofilerelationship["class_id"] = item.GetClassId()
	fabricswitchprofilerelationship["moid"] = item.GetMoid()
	fabricswitchprofilerelationship["object_type"] = item.GetObjectType()
	fabricswitchprofilerelationship["selector"] = item.GetSelector()

	fabricswitchprofilerelationships = append(fabricswitchprofilerelationships, fabricswitchprofilerelationship)
	return fabricswitchprofilerelationships
}
func flattenMapFabricUdldGlobalSettings(p models.FabricUdldGlobalSettings, d *schema.ResourceData) []map[string]interface{} {
	var fabricudldglobalsettingss []map[string]interface{}
	var ret models.FabricUdldGlobalSettings
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	item := p
	fabricudldglobalsettings := make(map[string]interface{})
	fabricudldglobalsettings["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	fabricudldglobalsettings["class_id"] = item.GetClassId()
	fabricudldglobalsettings["message_interval"] = item.GetMessageInterval()
	fabricudldglobalsettings["object_type"] = item.GetObjectType()
	fabricudldglobalsettings["recovery_action"] = item.GetRecoveryAction()

	fabricudldglobalsettingss = append(fabricudldglobalsettingss, fabricudldglobalsettings)
	return fabricudldglobalsettingss
}
func flattenMapFabricUdldSettings(p models.FabricUdldSettings, d *schema.ResourceData) []map[string]interface{} {
	var fabricudldsettingss []map[string]interface{}
	var ret models.FabricUdldSettings
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	item := p
	fabricudldsettings := make(map[string]interface{})
	fabricudldsettings["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	fabricudldsettings["admin_state"] = item.GetAdminState()
	fabricudldsettings["class_id"] = item.GetClassId()
	fabricudldsettings["mode"] = item.GetMode()
	fabricudldsettings["object_type"] = item.GetObjectType()

	fabricudldsettingss = append(fabricudldsettingss, fabricudldsettings)
	return fabricudldsettingss
}
func flattenMapFabricVlanSetRelationship(p models.FabricVlanSetRelationship, d *schema.ResourceData) []map[string]interface{} {
	var fabricvlansetrelationships []map[string]interface{}
	var ret models.FabricVlanSetRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	fabricvlansetrelationship := make(map[string]interface{})
	fabricvlansetrelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	fabricvlansetrelationship["class_id"] = item.GetClassId()
	fabricvlansetrelationship["moid"] = item.GetMoid()
	fabricvlansetrelationship["object_type"] = item.GetObjectType()
	fabricvlansetrelationship["selector"] = item.GetSelector()

	fabricvlansetrelationships = append(fabricvlansetrelationships, fabricvlansetrelationship)
	return fabricvlansetrelationships
}
func flattenMapFabricVlanSettings(p models.FabricVlanSettings, d *schema.ResourceData) []map[string]interface{} {
	var fabricvlansettingss []map[string]interface{}
	var ret models.FabricVlanSettings
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	item := p
	fabricvlansettings := make(map[string]interface{})
	fabricvlansettings["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	fabricvlansettings["allowed_vlans"] = item.GetAllowedVlans()
	fabricvlansettings["class_id"] = item.GetClassId()
	fabricvlansettings["native_vlan"] = item.GetNativeVlan()
	fabricvlansettings["object_type"] = item.GetObjectType()
	fabricvlansettings["qinq_enabled"] = item.GetQinqEnabled()
	fabricvlansettings["qinq_vlan"] = item.GetQinqVlan()

	fabricvlansettingss = append(fabricvlansettingss, fabricvlansettings)
	return fabricvlansettingss
}
func flattenMapFcNeighborRelationship(p models.FcNeighborRelationship, d *schema.ResourceData) []map[string]interface{} {
	var fcneighborrelationships []map[string]interface{}
	var ret models.FcNeighborRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	fcneighborrelationship := make(map[string]interface{})
	fcneighborrelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	fcneighborrelationship["class_id"] = item.GetClassId()
	fcneighborrelationship["moid"] = item.GetMoid()
	fcneighborrelationship["object_type"] = item.GetObjectType()
	fcneighborrelationship["selector"] = item.GetSelector()

	fcneighborrelationships = append(fcneighborrelationships, fcneighborrelationship)
	return fcneighborrelationships
}
func flattenMapFcPhysicalPortRelationship(p models.FcPhysicalPortRelationship, d *schema.ResourceData) []map[string]interface{} {
	var fcphysicalportrelationships []map[string]interface{}
	var ret models.FcPhysicalPortRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	fcphysicalportrelationship := make(map[string]interface{})
	fcphysicalportrelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	fcphysicalportrelationship["class_id"] = item.GetClassId()
	fcphysicalportrelationship["moid"] = item.GetMoid()
	fcphysicalportrelationship["object_type"] = item.GetObjectType()
	fcphysicalportrelationship["selector"] = item.GetSelector()

	fcphysicalportrelationships = append(fcphysicalportrelationships, fcphysicalportrelationship)
	return fcphysicalportrelationships
}
func flattenMapFcPortChannelRelationship(p models.FcPortChannelRelationship, d *schema.ResourceData) []map[string]interface{} {
	var fcportchannelrelationships []map[string]interface{}
	var ret models.FcPortChannelRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	fcportchannelrelationship := make(map[string]interface{})
	fcportchannelrelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	fcportchannelrelationship["class_id"] = item.GetClassId()
	fcportchannelrelationship["moid"] = item.GetMoid()
	fcportchannelrelationship["object_type"] = item.GetObjectType()
	fcportchannelrelationship["selector"] = item.GetSelector()

	fcportchannelrelationships = append(fcportchannelrelationships, fcportchannelrelationship)
	return fcportchannelrelationships
}
func flattenMapFcpoolBlock(p models.FcpoolBlock, d *schema.ResourceData) []map[string]interface{} {
	var fcpoolblocks []map[string]interface{}
	var ret models.FcpoolBlock
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	item := p
	fcpoolblock := make(map[string]interface{})
	fcpoolblock["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	fcpoolblock["class_id"] = item.GetClassId()
	fcpoolblock["from"] = item.GetFrom()
	fcpoolblock["object_type"] = item.GetObjectType()
	fcpoolblock["size"] = item.GetSize()
	fcpoolblock["to"] = item.GetTo()

	fcpoolblocks = append(fcpoolblocks, fcpoolblock)
	return fcpoolblocks
}
func flattenMapFcpoolFcBlockRelationship(p models.FcpoolFcBlockRelationship, d *schema.ResourceData) []map[string]interface{} {
	var fcpoolfcblockrelationships []map[string]interface{}
	var ret models.FcpoolFcBlockRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	fcpoolfcblockrelationship := make(map[string]interface{})
	fcpoolfcblockrelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	fcpoolfcblockrelationship["class_id"] = item.GetClassId()
	fcpoolfcblockrelationship["moid"] = item.GetMoid()
	fcpoolfcblockrelationship["object_type"] = item.GetObjectType()
	fcpoolfcblockrelationship["selector"] = item.GetSelector()

	fcpoolfcblockrelationships = append(fcpoolfcblockrelationships, fcpoolfcblockrelationship)
	return fcpoolfcblockrelationships
}
func flattenMapFcpoolLeaseRelationship(p models.FcpoolLeaseRelationship, d *schema.ResourceData) []map[string]interface{} {
	var fcpoolleaserelationships []map[string]interface{}
	var ret models.FcpoolLeaseRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	fcpoolleaserelationship := make(map[string]interface{})
	fcpoolleaserelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	fcpoolleaserelationship["class_id"] = item.GetClassId()
	fcpoolleaserelationship["moid"] = item.GetMoid()
	fcpoolleaserelationship["object_type"] = item.GetObjectType()
	fcpoolleaserelationship["selector"] = item.GetSelector()

	fcpoolleaserelationships = append(fcpoolleaserelationships, fcpoolleaserelationship)
	return fcpoolleaserelationships
}
func flattenMapFcpoolPoolRelationship(p models.FcpoolPoolRelationship, d *schema.ResourceData) []map[string]interface{} {
	var fcpoolpoolrelationships []map[string]interface{}
	var ret models.FcpoolPoolRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	fcpoolpoolrelationship := make(map[string]interface{})
	fcpoolpoolrelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	fcpoolpoolrelationship["class_id"] = item.GetClassId()
	fcpoolpoolrelationship["moid"] = item.GetMoid()
	fcpoolpoolrelationship["object_type"] = item.GetObjectType()
	fcpoolpoolrelationship["selector"] = item.GetSelector()

	fcpoolpoolrelationships = append(fcpoolpoolrelationships, fcpoolpoolrelationship)
	return fcpoolpoolrelationships
}
func flattenMapFcpoolPoolMemberRelationship(p models.FcpoolPoolMemberRelationship, d *schema.ResourceData) []map[string]interface{} {
	var fcpoolpoolmemberrelationships []map[string]interface{}
	var ret models.FcpoolPoolMemberRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	fcpoolpoolmemberrelationship := make(map[string]interface{})
	fcpoolpoolmemberrelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	fcpoolpoolmemberrelationship["class_id"] = item.GetClassId()
	fcpoolpoolmemberrelationship["moid"] = item.GetMoid()
	fcpoolpoolmemberrelationship["object_type"] = item.GetObjectType()
	fcpoolpoolmemberrelationship["selector"] = item.GetSelector()

	fcpoolpoolmemberrelationships = append(fcpoolpoolmemberrelationships, fcpoolpoolmemberrelationship)
	return fcpoolpoolmemberrelationships
}
func flattenMapFcpoolReservationRelationship(p models.FcpoolReservationRelationship, d *schema.ResourceData) []map[string]interface{} {
	var fcpoolreservationrelationships []map[string]interface{}
	var ret models.FcpoolReservationRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	fcpoolreservationrelationship := make(map[string]interface{})
	fcpoolreservationrelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	fcpoolreservationrelationship["class_id"] = item.GetClassId()
	fcpoolreservationrelationship["moid"] = item.GetMoid()
	fcpoolreservationrelationship["object_type"] = item.GetObjectType()
	fcpoolreservationrelationship["selector"] = item.GetSelector()

	fcpoolreservationrelationships = append(fcpoolreservationrelationships, fcpoolreservationrelationship)
	return fcpoolreservationrelationships
}
func flattenMapFcpoolReservationReference(p models.FcpoolReservationReference, d *schema.ResourceData) []map[string]interface{} {
	var fcpoolreservationreferences []map[string]interface{}
	var ret models.FcpoolReservationReference
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	item := p
	fcpoolreservationreference := make(map[string]interface{})
	fcpoolreservationreference["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	fcpoolreservationreference["class_id"] = item.GetClassId()
	fcpoolreservationreference["consumer_name"] = item.GetConsumerName()
	fcpoolreservationreference["consumer_type"] = item.GetConsumerType()
	fcpoolreservationreference["object_type"] = item.GetObjectType()
	fcpoolreservationreference["reservation_moid"] = item.GetReservationMoid()

	fcpoolreservationreferences = append(fcpoolreservationreferences, fcpoolreservationreference)
	return fcpoolreservationreferences
}
func flattenMapFcpoolUniverseRelationship(p models.FcpoolUniverseRelationship, d *schema.ResourceData) []map[string]interface{} {
	var fcpooluniverserelationships []map[string]interface{}
	var ret models.FcpoolUniverseRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	fcpooluniverserelationship := make(map[string]interface{})
	fcpooluniverserelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	fcpooluniverserelationship["class_id"] = item.GetClassId()
	fcpooluniverserelationship["moid"] = item.GetMoid()
	fcpooluniverserelationship["object_type"] = item.GetObjectType()
	fcpooluniverserelationship["selector"] = item.GetSelector()

	fcpooluniverserelationships = append(fcpooluniverserelationships, fcpooluniverserelationship)
	return fcpooluniverserelationships
}
func flattenMapFirmwareBaseDistributableRelationship(p models.FirmwareBaseDistributableRelationship, d *schema.ResourceData) []map[string]interface{} {
	var firmwarebasedistributablerelationships []map[string]interface{}
	var ret models.FirmwareBaseDistributableRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	firmwarebasedistributablerelationship := make(map[string]interface{})
	firmwarebasedistributablerelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	firmwarebasedistributablerelationship["class_id"] = item.GetClassId()
	firmwarebasedistributablerelationship["moid"] = item.GetMoid()
	firmwarebasedistributablerelationship["object_type"] = item.GetObjectType()
	firmwarebasedistributablerelationship["selector"] = item.GetSelector()

	firmwarebasedistributablerelationships = append(firmwarebasedistributablerelationships, firmwarebasedistributablerelationship)
	return firmwarebasedistributablerelationships
}
func flattenMapFirmwareDirectDownload(p models.FirmwareDirectDownload, d *schema.ResourceData) []map[string]interface{} {
	var firmwaredirectdownloads []map[string]interface{}
	var ret models.FirmwareDirectDownload
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	item := p
	firmwaredirectdownload := make(map[string]interface{})
	firmwaredirectdownload["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	firmwaredirectdownload["class_id"] = item.GetClassId()
	firmwaredirectdownload["http_server"] = (func(p models.FirmwareHttpServer, d *schema.ResourceData) []map[string]interface{} {
		var firmwarehttpservers []map[string]interface{}
		var ret models.FirmwareHttpServer
		if reflect.DeepEqual(ret, p) {
			return nil
		}
		item := p
		firmwarehttpserver := make(map[string]interface{})
		firmwarehttpserver["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
		firmwarehttpserver["class_id"] = item.GetClassId()
		firmwarehttpserver["location_link"] = item.GetLocationLink()
		firmwarehttpserver["mount_options"] = item.GetMountOptions()
		firmwarehttpserver["object_type"] = item.GetObjectType()

		firmwarehttpservers = append(firmwarehttpservers, firmwarehttpserver)
		return firmwarehttpservers
	})(item.GetHttpServer(), d)
	firmwaredirectdownload["image_source"] = item.GetImageSource()
	firmwaredirectdownload["is_password_set"] = item.GetIsPasswordSet()
	firmwaredirectdownload["object_type"] = item.GetObjectType()
	password_x, exists := d.GetOk("direct_download")
	if exists && password_x != nil {
		password_y := password_x.([]interface{})[0].(map[string]interface{})
		firmwaredirectdownload["password"] = password_y["password"]
	}
	firmwaredirectdownload["upgradeoption"] = item.GetUpgradeoption()
	firmwaredirectdownload["username"] = item.GetUsername()

	firmwaredirectdownloads = append(firmwaredirectdownloads, firmwaredirectdownload)
	return firmwaredirectdownloads
}
func flattenMapFirmwareDistributableRelationship(p models.FirmwareDistributableRelationship, d *schema.ResourceData) []map[string]interface{} {
	var firmwaredistributablerelationships []map[string]interface{}
	var ret models.FirmwareDistributableRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	firmwaredistributablerelationship := make(map[string]interface{})
	firmwaredistributablerelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	firmwaredistributablerelationship["class_id"] = item.GetClassId()
	firmwaredistributablerelationship["moid"] = item.GetMoid()
	firmwaredistributablerelationship["object_type"] = item.GetObjectType()
	firmwaredistributablerelationship["selector"] = item.GetSelector()

	firmwaredistributablerelationships = append(firmwaredistributablerelationships, firmwaredistributablerelationship)
	return firmwaredistributablerelationships
}
func flattenMapFirmwareExcludeComponentPidListType(p models.FirmwareExcludeComponentPidListType, d *schema.ResourceData) []map[string]interface{} {
	var firmwareexcludecomponentpidlisttypes []map[string]interface{}
	var ret models.FirmwareExcludeComponentPidListType
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	item := p
	firmwareexcludecomponentpidlisttype := make(map[string]interface{})
	firmwareexcludecomponentpidlisttype["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	firmwareexcludecomponentpidlisttype["class_id"] = item.GetClassId()
	firmwareexcludecomponentpidlisttype["exclude_local_disk_list"] = item.GetExcludeLocalDiskList()
	firmwareexcludecomponentpidlisttype["exclude_storage_controller_list"] = item.GetExcludeStorageControllerList()
	firmwareexcludecomponentpidlisttype["object_type"] = item.GetObjectType()

	firmwareexcludecomponentpidlisttypes = append(firmwareexcludecomponentpidlisttypes, firmwareexcludecomponentpidlisttype)
	return firmwareexcludecomponentpidlisttypes
}
func flattenMapFirmwareNetworkShare(p models.FirmwareNetworkShare, d *schema.ResourceData) []map[string]interface{} {
	var firmwarenetworkshares []map[string]interface{}
	var ret models.FirmwareNetworkShare
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	item := p
	firmwarenetworkshare := make(map[string]interface{})
	firmwarenetworkshare["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	firmwarenetworkshare["cifs_server"] = (func(p models.FirmwareCifsServer, d *schema.ResourceData) []map[string]interface{} {
		var firmwarecifsservers []map[string]interface{}
		var ret models.FirmwareCifsServer
		if reflect.DeepEqual(ret, p) {
			return nil
		}
		item := p
		firmwarecifsserver := make(map[string]interface{})
		firmwarecifsserver["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
		firmwarecifsserver["class_id"] = item.GetClassId()
		firmwarecifsserver["file_location"] = item.GetFileLocation()
		firmwarecifsserver["mount_options"] = item.GetMountOptions()
		firmwarecifsserver["object_type"] = item.GetObjectType()
		firmwarecifsserver["remote_file"] = item.GetRemoteFile()
		firmwarecifsserver["remote_ip"] = item.GetRemoteIp()
		firmwarecifsserver["remote_share"] = item.GetRemoteShare()

		firmwarecifsservers = append(firmwarecifsservers, firmwarecifsserver)
		return firmwarecifsservers
	})(item.GetCifsServer(), d)
	firmwarenetworkshare["class_id"] = item.GetClassId()
	firmwarenetworkshare["http_server"] = (func(p models.FirmwareHttpServer, d *schema.ResourceData) []map[string]interface{} {
		var firmwarehttpservers []map[string]interface{}
		var ret models.FirmwareHttpServer
		if reflect.DeepEqual(ret, p) {
			return nil
		}
		item := p
		firmwarehttpserver := make(map[string]interface{})
		firmwarehttpserver["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
		firmwarehttpserver["class_id"] = item.GetClassId()
		firmwarehttpserver["location_link"] = item.GetLocationLink()
		firmwarehttpserver["mount_options"] = item.GetMountOptions()
		firmwarehttpserver["object_type"] = item.GetObjectType()

		firmwarehttpservers = append(firmwarehttpservers, firmwarehttpserver)
		return firmwarehttpservers
	})(item.GetHttpServer(), d)
	firmwarenetworkshare["is_password_set"] = item.GetIsPasswordSet()
	firmwarenetworkshare["map_type"] = item.GetMapType()
	firmwarenetworkshare["nfs_server"] = (func(p models.FirmwareNfsServer, d *schema.ResourceData) []map[string]interface{} {
		var firmwarenfsservers []map[string]interface{}
		var ret models.FirmwareNfsServer
		if reflect.DeepEqual(ret, p) {
			return nil
		}
		item := p
		firmwarenfsserver := make(map[string]interface{})
		firmwarenfsserver["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
		firmwarenfsserver["class_id"] = item.GetClassId()
		firmwarenfsserver["file_location"] = item.GetFileLocation()
		firmwarenfsserver["mount_options"] = item.GetMountOptions()
		firmwarenfsserver["object_type"] = item.GetObjectType()
		firmwarenfsserver["remote_file"] = item.GetRemoteFile()
		firmwarenfsserver["remote_ip"] = item.GetRemoteIp()
		firmwarenfsserver["remote_share"] = item.GetRemoteShare()

		firmwarenfsservers = append(firmwarenfsservers, firmwarenfsserver)
		return firmwarenfsservers
	})(item.GetNfsServer(), d)
	firmwarenetworkshare["object_type"] = item.GetObjectType()
	password_x, exists := d.GetOk("network_share")
	if exists && password_x != nil {
		password_y := password_x.([]interface{})[0].(map[string]interface{})
		firmwarenetworkshare["password"] = password_y["password"]
	}
	firmwarenetworkshare["upgradeoption"] = item.GetUpgradeoption()
	firmwarenetworkshare["username"] = item.GetUsername()

	firmwarenetworkshares = append(firmwarenetworkshares, firmwarenetworkshare)
	return firmwarenetworkshares
}
func flattenMapFirmwareRunningFirmwareRelationship(p models.FirmwareRunningFirmwareRelationship, d *schema.ResourceData) []map[string]interface{} {
	var firmwarerunningfirmwarerelationships []map[string]interface{}
	var ret models.FirmwareRunningFirmwareRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	firmwarerunningfirmwarerelationship := make(map[string]interface{})
	firmwarerunningfirmwarerelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	firmwarerunningfirmwarerelationship["class_id"] = item.GetClassId()
	firmwarerunningfirmwarerelationship["moid"] = item.GetMoid()
	firmwarerunningfirmwarerelationship["object_type"] = item.GetObjectType()
	firmwarerunningfirmwarerelationship["selector"] = item.GetSelector()

	firmwarerunningfirmwarerelationships = append(firmwarerunningfirmwarerelationships, firmwarerunningfirmwarerelationship)
	return firmwarerunningfirmwarerelationships
}
func flattenMapFirmwareServerConfigurationUtilityDistributableRelationship(p models.FirmwareServerConfigurationUtilityDistributableRelationship, d *schema.ResourceData) []map[string]interface{} {
	var firmwareserverconfigurationutilitydistributablerelationships []map[string]interface{}
	var ret models.FirmwareServerConfigurationUtilityDistributableRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	firmwareserverconfigurationutilitydistributablerelationship := make(map[string]interface{})
	firmwareserverconfigurationutilitydistributablerelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	firmwareserverconfigurationutilitydistributablerelationship["class_id"] = item.GetClassId()
	firmwareserverconfigurationutilitydistributablerelationship["moid"] = item.GetMoid()
	firmwareserverconfigurationutilitydistributablerelationship["object_type"] = item.GetObjectType()
	firmwareserverconfigurationutilitydistributablerelationship["selector"] = item.GetSelector()

	firmwareserverconfigurationutilitydistributablerelationships = append(firmwareserverconfigurationutilitydistributablerelationships, firmwareserverconfigurationutilitydistributablerelationship)
	return firmwareserverconfigurationutilitydistributablerelationships
}
func flattenMapFirmwareUpgradeBaseRelationship(p models.FirmwareUpgradeBaseRelationship, d *schema.ResourceData) []map[string]interface{} {
	var firmwareupgradebaserelationships []map[string]interface{}
	var ret models.FirmwareUpgradeBaseRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	firmwareupgradebaserelationship := make(map[string]interface{})
	firmwareupgradebaserelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	firmwareupgradebaserelationship["class_id"] = item.GetClassId()
	firmwareupgradebaserelationship["moid"] = item.GetMoid()
	firmwareupgradebaserelationship["object_type"] = item.GetObjectType()
	firmwareupgradebaserelationship["selector"] = item.GetSelector()

	firmwareupgradebaserelationships = append(firmwareupgradebaserelationships, firmwareupgradebaserelationship)
	return firmwareupgradebaserelationships
}
func flattenMapFirmwareUpgradeImpactStatusRelationship(p models.FirmwareUpgradeImpactStatusRelationship, d *schema.ResourceData) []map[string]interface{} {
	var firmwareupgradeimpactstatusrelationships []map[string]interface{}
	var ret models.FirmwareUpgradeImpactStatusRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	firmwareupgradeimpactstatusrelationship := make(map[string]interface{})
	firmwareupgradeimpactstatusrelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	firmwareupgradeimpactstatusrelationship["class_id"] = item.GetClassId()
	firmwareupgradeimpactstatusrelationship["moid"] = item.GetMoid()
	firmwareupgradeimpactstatusrelationship["object_type"] = item.GetObjectType()
	firmwareupgradeimpactstatusrelationship["selector"] = item.GetSelector()

	firmwareupgradeimpactstatusrelationships = append(firmwareupgradeimpactstatusrelationships, firmwareupgradeimpactstatusrelationship)
	return firmwareupgradeimpactstatusrelationships
}
func flattenMapFirmwareUpgradeStatusRelationship(p models.FirmwareUpgradeStatusRelationship, d *schema.ResourceData) []map[string]interface{} {
	var firmwareupgradestatusrelationships []map[string]interface{}
	var ret models.FirmwareUpgradeStatusRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	firmwareupgradestatusrelationship := make(map[string]interface{})
	firmwareupgradestatusrelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	firmwareupgradestatusrelationship["class_id"] = item.GetClassId()
	firmwareupgradestatusrelationship["moid"] = item.GetMoid()
	firmwareupgradestatusrelationship["object_type"] = item.GetObjectType()
	firmwareupgradestatusrelationship["selector"] = item.GetSelector()

	firmwareupgradestatusrelationships = append(firmwareupgradestatusrelationships, firmwareupgradestatusrelationship)
	return firmwareupgradestatusrelationships
}
func flattenMapFirmwareVersionMap(p models.FirmwareVersionMap, d *schema.ResourceData) []map[string]interface{} {
	var firmwareversionmaps []map[string]interface{}
	var ret models.FirmwareVersionMap
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	item := p
	firmwareversionmap := make(map[string]interface{})
	firmwareversionmap["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	firmwareversionmap["bundle_version"] = item.GetBundleVersion()
	firmwareversionmap["class_id"] = item.GetClassId()
	firmwareversionmap["device_firmware_version"] = item.GetDeviceFirmwareVersion()
	firmwareversionmap["object_type"] = item.GetObjectType()

	firmwareversionmaps = append(firmwareversionmaps, firmwareversionmap)
	return firmwareversionmaps
}
func flattenMapForecastCatalogRelationship(p models.ForecastCatalogRelationship, d *schema.ResourceData) []map[string]interface{} {
	var forecastcatalogrelationships []map[string]interface{}
	var ret models.ForecastCatalogRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	forecastcatalogrelationship := make(map[string]interface{})
	forecastcatalogrelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	forecastcatalogrelationship["class_id"] = item.GetClassId()
	forecastcatalogrelationship["moid"] = item.GetMoid()
	forecastcatalogrelationship["object_type"] = item.GetObjectType()
	forecastcatalogrelationship["selector"] = item.GetSelector()

	forecastcatalogrelationships = append(forecastcatalogrelationships, forecastcatalogrelationship)
	return forecastcatalogrelationships
}
func flattenMapForecastDefinitionRelationship(p models.ForecastDefinitionRelationship, d *schema.ResourceData) []map[string]interface{} {
	var forecastdefinitionrelationships []map[string]interface{}
	var ret models.ForecastDefinitionRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	forecastdefinitionrelationship := make(map[string]interface{})
	forecastdefinitionrelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	forecastdefinitionrelationship["class_id"] = item.GetClassId()
	forecastdefinitionrelationship["moid"] = item.GetMoid()
	forecastdefinitionrelationship["object_type"] = item.GetObjectType()
	forecastdefinitionrelationship["selector"] = item.GetSelector()

	forecastdefinitionrelationships = append(forecastdefinitionrelationships, forecastdefinitionrelationship)
	return forecastdefinitionrelationships
}
func flattenMapForecastInstanceRelationship(p models.ForecastInstanceRelationship, d *schema.ResourceData) []map[string]interface{} {
	var forecastinstancerelationships []map[string]interface{}
	var ret models.ForecastInstanceRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	forecastinstancerelationship := make(map[string]interface{})
	forecastinstancerelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	forecastinstancerelationship["class_id"] = item.GetClassId()
	forecastinstancerelationship["moid"] = item.GetMoid()
	forecastinstancerelationship["object_type"] = item.GetObjectType()
	forecastinstancerelationship["selector"] = item.GetSelector()

	forecastinstancerelationships = append(forecastinstancerelationships, forecastinstancerelationship)
	return forecastinstancerelationships
}
func flattenMapForecastModel(p models.ForecastModel, d *schema.ResourceData) []map[string]interface{} {
	var forecastmodels []map[string]interface{}
	var ret models.ForecastModel
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	item := p
	forecastmodel := make(map[string]interface{})
	forecastmodel["accuracy"] = item.GetAccuracy()
	forecastmodel["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	forecastmodel["class_id"] = item.GetClassId()
	forecastmodel["model_data"] = item.GetModelData()
	forecastmodel["model_type"] = item.GetModelType()
	forecastmodel["object_type"] = item.GetObjectType()

	forecastmodels = append(forecastmodels, forecastmodel)
	return forecastmodels
}
func flattenMapGraphicsCardRelationship(p models.GraphicsCardRelationship, d *schema.ResourceData) []map[string]interface{} {
	var graphicscardrelationships []map[string]interface{}
	var ret models.GraphicsCardRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	graphicscardrelationship := make(map[string]interface{})
	graphicscardrelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	graphicscardrelationship["class_id"] = item.GetClassId()
	graphicscardrelationship["moid"] = item.GetMoid()
	graphicscardrelationship["object_type"] = item.GetObjectType()
	graphicscardrelationship["selector"] = item.GetSelector()

	graphicscardrelationships = append(graphicscardrelationships, graphicscardrelationship)
	return graphicscardrelationships
}
func flattenMapHclOperatingSystemRelationship(p models.HclOperatingSystemRelationship, d *schema.ResourceData) []map[string]interface{} {
	var hcloperatingsystemrelationships []map[string]interface{}
	var ret models.HclOperatingSystemRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	hcloperatingsystemrelationship := make(map[string]interface{})
	hcloperatingsystemrelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	hcloperatingsystemrelationship["class_id"] = item.GetClassId()
	hcloperatingsystemrelationship["moid"] = item.GetMoid()
	hcloperatingsystemrelationship["object_type"] = item.GetObjectType()
	hcloperatingsystemrelationship["selector"] = item.GetSelector()

	hcloperatingsystemrelationships = append(hcloperatingsystemrelationships, hcloperatingsystemrelationship)
	return hcloperatingsystemrelationships
}
func flattenMapHclOperatingSystemVendorRelationship(p models.HclOperatingSystemVendorRelationship, d *schema.ResourceData) []map[string]interface{} {
	var hcloperatingsystemvendorrelationships []map[string]interface{}
	var ret models.HclOperatingSystemVendorRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	hcloperatingsystemvendorrelationship := make(map[string]interface{})
	hcloperatingsystemvendorrelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	hcloperatingsystemvendorrelationship["class_id"] = item.GetClassId()
	hcloperatingsystemvendorrelationship["moid"] = item.GetMoid()
	hcloperatingsystemvendorrelationship["object_type"] = item.GetObjectType()
	hcloperatingsystemvendorrelationship["selector"] = item.GetSelector()

	hcloperatingsystemvendorrelationships = append(hcloperatingsystemvendorrelationships, hcloperatingsystemvendorrelationship)
	return hcloperatingsystemvendorrelationships
}
func flattenMapHyperflexAlarmSummary(p models.HyperflexAlarmSummary, d *schema.ResourceData) []map[string]interface{} {
	var hyperflexalarmsummarys []map[string]interface{}
	var ret models.HyperflexAlarmSummary
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	item := p
	hyperflexalarmsummary := make(map[string]interface{})
	hyperflexalarmsummary["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	hyperflexalarmsummary["class_id"] = item.GetClassId()
	hyperflexalarmsummary["critical"] = item.GetCritical()
	hyperflexalarmsummary["health"] = item.GetHealth()
	hyperflexalarmsummary["info"] = item.GetInfo()
	hyperflexalarmsummary["object_type"] = item.GetObjectType()
	hyperflexalarmsummary["warning"] = item.GetWarning()

	hyperflexalarmsummarys = append(hyperflexalarmsummarys, hyperflexalarmsummary)
	return hyperflexalarmsummarys
}
func flattenMapHyperflexAppCatalogRelationship(p models.HyperflexAppCatalogRelationship, d *schema.ResourceData) []map[string]interface{} {
	var hyperflexappcatalogrelationships []map[string]interface{}
	var ret models.HyperflexAppCatalogRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	hyperflexappcatalogrelationship := make(map[string]interface{})
	hyperflexappcatalogrelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	hyperflexappcatalogrelationship["class_id"] = item.GetClassId()
	hyperflexappcatalogrelationship["moid"] = item.GetMoid()
	hyperflexappcatalogrelationship["object_type"] = item.GetObjectType()
	hyperflexappcatalogrelationship["selector"] = item.GetSelector()

	hyperflexappcatalogrelationships = append(hyperflexappcatalogrelationships, hyperflexappcatalogrelationship)
	return hyperflexappcatalogrelationships
}
func flattenMapHyperflexAppSettingConstraint(p models.HyperflexAppSettingConstraint, d *schema.ResourceData) []map[string]interface{} {
	var hyperflexappsettingconstraints []map[string]interface{}
	var ret models.HyperflexAppSettingConstraint
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	item := p
	hyperflexappsettingconstraint := make(map[string]interface{})
	hyperflexappsettingconstraint["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	hyperflexappsettingconstraint["class_id"] = item.GetClassId()
	hyperflexappsettingconstraint["deployment_type"] = item.GetDeploymentType()
	hyperflexappsettingconstraint["hxdp_version"] = item.GetHxdpVersion()
	hyperflexappsettingconstraint["hypervisor_type"] = item.GetHypervisorType()
	hyperflexappsettingconstraint["mgmt_platform"] = item.GetMgmtPlatform()
	hyperflexappsettingconstraint["object_type"] = item.GetObjectType()
	hyperflexappsettingconstraint["server_model"] = item.GetServerModel()

	hyperflexappsettingconstraints = append(hyperflexappsettingconstraints, hyperflexappsettingconstraint)
	return hyperflexappsettingconstraints
}
func flattenMapHyperflexAutoSupportPolicyRelationship(p models.HyperflexAutoSupportPolicyRelationship, d *schema.ResourceData) []map[string]interface{} {
	var hyperflexautosupportpolicyrelationships []map[string]interface{}
	var ret models.HyperflexAutoSupportPolicyRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	hyperflexautosupportpolicyrelationship := make(map[string]interface{})
	hyperflexautosupportpolicyrelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	hyperflexautosupportpolicyrelationship["class_id"] = item.GetClassId()
	hyperflexautosupportpolicyrelationship["moid"] = item.GetMoid()
	hyperflexautosupportpolicyrelationship["object_type"] = item.GetObjectType()
	hyperflexautosupportpolicyrelationship["selector"] = item.GetSelector()

	hyperflexautosupportpolicyrelationships = append(hyperflexautosupportpolicyrelationships, hyperflexautosupportpolicyrelationship)
	return hyperflexautosupportpolicyrelationships
}
func flattenMapHyperflexBackupClusterRelationship(p models.HyperflexBackupClusterRelationship, d *schema.ResourceData) []map[string]interface{} {
	var hyperflexbackupclusterrelationships []map[string]interface{}
	var ret models.HyperflexBackupClusterRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	hyperflexbackupclusterrelationship := make(map[string]interface{})
	hyperflexbackupclusterrelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	hyperflexbackupclusterrelationship["class_id"] = item.GetClassId()
	hyperflexbackupclusterrelationship["moid"] = item.GetMoid()
	hyperflexbackupclusterrelationship["object_type"] = item.GetObjectType()
	hyperflexbackupclusterrelationship["selector"] = item.GetSelector()

	hyperflexbackupclusterrelationships = append(hyperflexbackupclusterrelationships, hyperflexbackupclusterrelationship)
	return hyperflexbackupclusterrelationships
}
func flattenMapHyperflexBackupPolicySettings(p models.HyperflexBackupPolicySettings, d *schema.ResourceData) []map[string]interface{} {
	var hyperflexbackuppolicysettingss []map[string]interface{}
	var ret models.HyperflexBackupPolicySettings
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	item := p
	hyperflexbackuppolicysettings := make(map[string]interface{})
	hyperflexbackuppolicysettings["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	hyperflexbackuppolicysettings["backup_data_store_name"] = item.GetBackupDataStoreName()
	hyperflexbackuppolicysettings["backup_data_store_size"] = item.GetBackupDataStoreSize()
	hyperflexbackuppolicysettings["backup_data_store_size_unit"] = item.GetBackupDataStoreSizeUnit()
	hyperflexbackuppolicysettings["class_id"] = item.GetClassId()
	hyperflexbackuppolicysettings["data_store_encryption_enabled"] = item.GetDataStoreEncryptionEnabled()
	hyperflexbackuppolicysettings["local_snapshot_retention_count"] = item.GetLocalSnapshotRetentionCount()
	hyperflexbackuppolicysettings["object_type"] = item.GetObjectType()
	hyperflexbackuppolicysettings["replication_interval_in_minutes"] = item.GetReplicationIntervalInMinutes()
	hyperflexbackuppolicysettings["replication_pair_name_prefix"] = item.GetReplicationPairNamePrefix()
	hyperflexbackuppolicysettings["snapshot_retention_count"] = item.GetSnapshotRetentionCount()

	hyperflexbackuppolicysettingss = append(hyperflexbackuppolicysettingss, hyperflexbackuppolicysettings)
	return hyperflexbackuppolicysettingss
}
func flattenMapHyperflexCapability(p models.HyperflexCapability, d *schema.ResourceData) []map[string]interface{} {
	var hyperflexcapabilitys []map[string]interface{}
	var ret models.HyperflexCapability
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	item := p
	hyperflexcapability := make(map[string]interface{})
	hyperflexcapability["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	hyperflexcapability["class_id"] = item.GetClassId()
	hyperflexcapability["encryption_supported"] = item.GetEncryptionSupported()
	hyperflexcapability["iscsi_supported"] = item.GetIscsiSupported()
	hyperflexcapability["object_type"] = item.GetObjectType()
	hyperflexcapability["replication_supported"] = item.GetReplicationSupported()

	hyperflexcapabilitys = append(hyperflexcapabilitys, hyperflexcapability)
	return hyperflexcapabilitys
}
func flattenMapHyperflexClusterRelationship(p models.HyperflexClusterRelationship, d *schema.ResourceData) []map[string]interface{} {
	var hyperflexclusterrelationships []map[string]interface{}
	var ret models.HyperflexClusterRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	hyperflexclusterrelationship := make(map[string]interface{})
	hyperflexclusterrelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	hyperflexclusterrelationship["class_id"] = item.GetClassId()
	hyperflexclusterrelationship["moid"] = item.GetMoid()
	hyperflexclusterrelationship["object_type"] = item.GetObjectType()
	hyperflexclusterrelationship["selector"] = item.GetSelector()

	hyperflexclusterrelationships = append(hyperflexclusterrelationships, hyperflexclusterrelationship)
	return hyperflexclusterrelationships
}
func flattenMapHyperflexClusterBackupPolicyInventoryRelationship(p models.HyperflexClusterBackupPolicyInventoryRelationship, d *schema.ResourceData) []map[string]interface{} {
	var hyperflexclusterbackuppolicyinventoryrelationships []map[string]interface{}
	var ret models.HyperflexClusterBackupPolicyInventoryRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	hyperflexclusterbackuppolicyinventoryrelationship := make(map[string]interface{})
	hyperflexclusterbackuppolicyinventoryrelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	hyperflexclusterbackuppolicyinventoryrelationship["class_id"] = item.GetClassId()
	hyperflexclusterbackuppolicyinventoryrelationship["moid"] = item.GetMoid()
	hyperflexclusterbackuppolicyinventoryrelationship["object_type"] = item.GetObjectType()
	hyperflexclusterbackuppolicyinventoryrelationship["selector"] = item.GetSelector()

	hyperflexclusterbackuppolicyinventoryrelationships = append(hyperflexclusterbackuppolicyinventoryrelationships, hyperflexclusterbackuppolicyinventoryrelationship)
	return hyperflexclusterbackuppolicyinventoryrelationships
}
func flattenMapHyperflexClusterNetworkPolicyRelationship(p models.HyperflexClusterNetworkPolicyRelationship, d *schema.ResourceData) []map[string]interface{} {
	var hyperflexclusternetworkpolicyrelationships []map[string]interface{}
	var ret models.HyperflexClusterNetworkPolicyRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	hyperflexclusternetworkpolicyrelationship := make(map[string]interface{})
	hyperflexclusternetworkpolicyrelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	hyperflexclusternetworkpolicyrelationship["class_id"] = item.GetClassId()
	hyperflexclusternetworkpolicyrelationship["moid"] = item.GetMoid()
	hyperflexclusternetworkpolicyrelationship["object_type"] = item.GetObjectType()
	hyperflexclusternetworkpolicyrelationship["selector"] = item.GetSelector()

	hyperflexclusternetworkpolicyrelationships = append(hyperflexclusternetworkpolicyrelationships, hyperflexclusternetworkpolicyrelationship)
	return hyperflexclusternetworkpolicyrelationships
}
func flattenMapHyperflexClusterProfileRelationship(p models.HyperflexClusterProfileRelationship, d *schema.ResourceData) []map[string]interface{} {
	var hyperflexclusterprofilerelationships []map[string]interface{}
	var ret models.HyperflexClusterProfileRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	hyperflexclusterprofilerelationship := make(map[string]interface{})
	hyperflexclusterprofilerelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	hyperflexclusterprofilerelationship["class_id"] = item.GetClassId()
	hyperflexclusterprofilerelationship["moid"] = item.GetMoid()
	hyperflexclusterprofilerelationship["object_type"] = item.GetObjectType()
	hyperflexclusterprofilerelationship["selector"] = item.GetSelector()

	hyperflexclusterprofilerelationships = append(hyperflexclusterprofilerelationships, hyperflexclusterprofilerelationship)
	return hyperflexclusterprofilerelationships
}
func flattenMapHyperflexClusterStoragePolicyRelationship(p models.HyperflexClusterStoragePolicyRelationship, d *schema.ResourceData) []map[string]interface{} {
	var hyperflexclusterstoragepolicyrelationships []map[string]interface{}
	var ret models.HyperflexClusterStoragePolicyRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	hyperflexclusterstoragepolicyrelationship := make(map[string]interface{})
	hyperflexclusterstoragepolicyrelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	hyperflexclusterstoragepolicyrelationship["class_id"] = item.GetClassId()
	hyperflexclusterstoragepolicyrelationship["moid"] = item.GetMoid()
	hyperflexclusterstoragepolicyrelationship["object_type"] = item.GetObjectType()
	hyperflexclusterstoragepolicyrelationship["selector"] = item.GetSelector()

	hyperflexclusterstoragepolicyrelationships = append(hyperflexclusterstoragepolicyrelationships, hyperflexclusterstoragepolicyrelationship)
	return hyperflexclusterstoragepolicyrelationships
}
func flattenMapHyperflexConfigResultRelationship(p models.HyperflexConfigResultRelationship, d *schema.ResourceData) []map[string]interface{} {
	var hyperflexconfigresultrelationships []map[string]interface{}
	var ret models.HyperflexConfigResultRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	hyperflexconfigresultrelationship := make(map[string]interface{})
	hyperflexconfigresultrelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	hyperflexconfigresultrelationship["class_id"] = item.GetClassId()
	hyperflexconfigresultrelationship["moid"] = item.GetMoid()
	hyperflexconfigresultrelationship["object_type"] = item.GetObjectType()
	hyperflexconfigresultrelationship["selector"] = item.GetSelector()

	hyperflexconfigresultrelationships = append(hyperflexconfigresultrelationships, hyperflexconfigresultrelationship)
	return hyperflexconfigresultrelationships
}
func flattenMapHyperflexDataProtectionPeerRelationship(p models.HyperflexDataProtectionPeerRelationship, d *schema.ResourceData) []map[string]interface{} {
	var hyperflexdataprotectionpeerrelationships []map[string]interface{}
	var ret models.HyperflexDataProtectionPeerRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	hyperflexdataprotectionpeerrelationship := make(map[string]interface{})
	hyperflexdataprotectionpeerrelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	hyperflexdataprotectionpeerrelationship["class_id"] = item.GetClassId()
	hyperflexdataprotectionpeerrelationship["moid"] = item.GetMoid()
	hyperflexdataprotectionpeerrelationship["object_type"] = item.GetObjectType()
	hyperflexdataprotectionpeerrelationship["selector"] = item.GetSelector()

	hyperflexdataprotectionpeerrelationships = append(hyperflexdataprotectionpeerrelationships, hyperflexdataprotectionpeerrelationship)
	return hyperflexdataprotectionpeerrelationships
}
func flattenMapHyperflexDatastoreStatisticRelationship(p models.HyperflexDatastoreStatisticRelationship, d *schema.ResourceData) []map[string]interface{} {
	var hyperflexdatastorestatisticrelationships []map[string]interface{}
	var ret models.HyperflexDatastoreStatisticRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	hyperflexdatastorestatisticrelationship := make(map[string]interface{})
	hyperflexdatastorestatisticrelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	hyperflexdatastorestatisticrelationship["class_id"] = item.GetClassId()
	hyperflexdatastorestatisticrelationship["moid"] = item.GetMoid()
	hyperflexdatastorestatisticrelationship["object_type"] = item.GetObjectType()
	hyperflexdatastorestatisticrelationship["selector"] = item.GetSelector()

	hyperflexdatastorestatisticrelationships = append(hyperflexdatastorestatisticrelationships, hyperflexdatastorestatisticrelationship)
	return hyperflexdatastorestatisticrelationships
}
func flattenMapHyperflexEncryptionRelationship(p models.HyperflexEncryptionRelationship, d *schema.ResourceData) []map[string]interface{} {
	var hyperflexencryptionrelationships []map[string]interface{}
	var ret models.HyperflexEncryptionRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	hyperflexencryptionrelationship := make(map[string]interface{})
	hyperflexencryptionrelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	hyperflexencryptionrelationship["class_id"] = item.GetClassId()
	hyperflexencryptionrelationship["moid"] = item.GetMoid()
	hyperflexencryptionrelationship["object_type"] = item.GetObjectType()
	hyperflexencryptionrelationship["selector"] = item.GetSelector()

	hyperflexencryptionrelationships = append(hyperflexencryptionrelationships, hyperflexencryptionrelationship)
	return hyperflexencryptionrelationships
}
func flattenMapHyperflexEntityReference(p models.HyperflexEntityReference, d *schema.ResourceData) []map[string]interface{} {
	var hyperflexentityreferences []map[string]interface{}
	var ret models.HyperflexEntityReference
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	item := p
	hyperflexentityreference := make(map[string]interface{})
	hyperflexentityreference["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	hyperflexentityreference["class_id"] = item.GetClassId()
	hyperflexentityreference["confignum"] = item.GetConfignum()
	hyperflexentityreference["id"] = item.GetId()
	hyperflexentityreference["idtype"] = item.GetIdtype()
	hyperflexentityreference["name"] = item.GetName()
	hyperflexentityreference["object_type"] = item.GetObjectType()
	hyperflexentityreference["type"] = item.GetType()

	hyperflexentityreferences = append(hyperflexentityreferences, hyperflexentityreference)
	return hyperflexentityreferences
}
func flattenMapHyperflexErrorStack(p models.HyperflexErrorStack, d *schema.ResourceData) []map[string]interface{} {
	var hyperflexerrorstacks []map[string]interface{}
	var ret models.HyperflexErrorStack
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	item := p
	hyperflexerrorstack := make(map[string]interface{})
	hyperflexerrorstack["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	hyperflexerrorstack["class_id"] = item.GetClassId()
	hyperflexerrorstack["message"] = item.GetMessage()
	hyperflexerrorstack["message_id"] = item.GetMessageId()
	hyperflexerrorstack["object_type"] = item.GetObjectType()

	hyperflexerrorstacks = append(hyperflexerrorstacks, hyperflexerrorstack)
	return hyperflexerrorstacks
}
func flattenMapHyperflexExtFcStoragePolicyRelationship(p models.HyperflexExtFcStoragePolicyRelationship, d *schema.ResourceData) []map[string]interface{} {
	var hyperflexextfcstoragepolicyrelationships []map[string]interface{}
	var ret models.HyperflexExtFcStoragePolicyRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	hyperflexextfcstoragepolicyrelationship := make(map[string]interface{})
	hyperflexextfcstoragepolicyrelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	hyperflexextfcstoragepolicyrelationship["class_id"] = item.GetClassId()
	hyperflexextfcstoragepolicyrelationship["moid"] = item.GetMoid()
	hyperflexextfcstoragepolicyrelationship["object_type"] = item.GetObjectType()
	hyperflexextfcstoragepolicyrelationship["selector"] = item.GetSelector()

	hyperflexextfcstoragepolicyrelationships = append(hyperflexextfcstoragepolicyrelationships, hyperflexextfcstoragepolicyrelationship)
	return hyperflexextfcstoragepolicyrelationships
}
func flattenMapHyperflexExtIscsiStoragePolicyRelationship(p models.HyperflexExtIscsiStoragePolicyRelationship, d *schema.ResourceData) []map[string]interface{} {
	var hyperflexextiscsistoragepolicyrelationships []map[string]interface{}
	var ret models.HyperflexExtIscsiStoragePolicyRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	hyperflexextiscsistoragepolicyrelationship := make(map[string]interface{})
	hyperflexextiscsistoragepolicyrelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	hyperflexextiscsistoragepolicyrelationship["class_id"] = item.GetClassId()
	hyperflexextiscsistoragepolicyrelationship["moid"] = item.GetMoid()
	hyperflexextiscsistoragepolicyrelationship["object_type"] = item.GetObjectType()
	hyperflexextiscsistoragepolicyrelationship["selector"] = item.GetSelector()

	hyperflexextiscsistoragepolicyrelationships = append(hyperflexextiscsistoragepolicyrelationships, hyperflexextiscsistoragepolicyrelationship)
	return hyperflexextiscsistoragepolicyrelationships
}
func flattenMapHyperflexFeatureLimitExternalRelationship(p models.HyperflexFeatureLimitExternalRelationship, d *schema.ResourceData) []map[string]interface{} {
	var hyperflexfeaturelimitexternalrelationships []map[string]interface{}
	var ret models.HyperflexFeatureLimitExternalRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	hyperflexfeaturelimitexternalrelationship := make(map[string]interface{})
	hyperflexfeaturelimitexternalrelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	hyperflexfeaturelimitexternalrelationship["class_id"] = item.GetClassId()
	hyperflexfeaturelimitexternalrelationship["moid"] = item.GetMoid()
	hyperflexfeaturelimitexternalrelationship["object_type"] = item.GetObjectType()
	hyperflexfeaturelimitexternalrelationship["selector"] = item.GetSelector()

	hyperflexfeaturelimitexternalrelationships = append(hyperflexfeaturelimitexternalrelationships, hyperflexfeaturelimitexternalrelationship)
	return hyperflexfeaturelimitexternalrelationships
}
func flattenMapHyperflexFeatureLimitInternalRelationship(p models.HyperflexFeatureLimitInternalRelationship, d *schema.ResourceData) []map[string]interface{} {
	var hyperflexfeaturelimitinternalrelationships []map[string]interface{}
	var ret models.HyperflexFeatureLimitInternalRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	hyperflexfeaturelimitinternalrelationship := make(map[string]interface{})
	hyperflexfeaturelimitinternalrelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	hyperflexfeaturelimitinternalrelationship["class_id"] = item.GetClassId()
	hyperflexfeaturelimitinternalrelationship["moid"] = item.GetMoid()
	hyperflexfeaturelimitinternalrelationship["object_type"] = item.GetObjectType()
	hyperflexfeaturelimitinternalrelationship["selector"] = item.GetSelector()

	hyperflexfeaturelimitinternalrelationships = append(hyperflexfeaturelimitinternalrelationships, hyperflexfeaturelimitinternalrelationship)
	return hyperflexfeaturelimitinternalrelationships
}
func flattenMapHyperflexHealthRelationship(p models.HyperflexHealthRelationship, d *schema.ResourceData) []map[string]interface{} {
	var hyperflexhealthrelationships []map[string]interface{}
	var ret models.HyperflexHealthRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	hyperflexhealthrelationship := make(map[string]interface{})
	hyperflexhealthrelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	hyperflexhealthrelationship["class_id"] = item.GetClassId()
	hyperflexhealthrelationship["moid"] = item.GetMoid()
	hyperflexhealthrelationship["object_type"] = item.GetObjectType()
	hyperflexhealthrelationship["selector"] = item.GetSelector()

	hyperflexhealthrelationships = append(hyperflexhealthrelationships, hyperflexhealthrelationship)
	return hyperflexhealthrelationships
}
func flattenMapHyperflexHealthCheckDefinitionRelationship(p models.HyperflexHealthCheckDefinitionRelationship, d *schema.ResourceData) []map[string]interface{} {
	var hyperflexhealthcheckdefinitionrelationships []map[string]interface{}
	var ret models.HyperflexHealthCheckDefinitionRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	hyperflexhealthcheckdefinitionrelationship := make(map[string]interface{})
	hyperflexhealthcheckdefinitionrelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	hyperflexhealthcheckdefinitionrelationship["class_id"] = item.GetClassId()
	hyperflexhealthcheckdefinitionrelationship["moid"] = item.GetMoid()
	hyperflexhealthcheckdefinitionrelationship["object_type"] = item.GetObjectType()
	hyperflexhealthcheckdefinitionrelationship["selector"] = item.GetSelector()

	hyperflexhealthcheckdefinitionrelationships = append(hyperflexhealthcheckdefinitionrelationships, hyperflexhealthcheckdefinitionrelationship)
	return hyperflexhealthcheckdefinitionrelationships
}
func flattenMapHyperflexHealthCheckScriptInfo(p models.HyperflexHealthCheckScriptInfo, d *schema.ResourceData) []map[string]interface{} {
	var hyperflexhealthcheckscriptinfos []map[string]interface{}
	var ret models.HyperflexHealthCheckScriptInfo
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	item := p
	hyperflexhealthcheckscriptinfo := make(map[string]interface{})
	hyperflexhealthcheckscriptinfo["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	hyperflexhealthcheckscriptinfo["aggregate_script_name"] = item.GetAggregateScriptName()
	hyperflexhealthcheckscriptinfo["class_id"] = item.GetClassId()
	hyperflexhealthcheckscriptinfo["hyperflex_version"] = item.GetHyperflexVersion()
	hyperflexhealthcheckscriptinfo["object_type"] = item.GetObjectType()
	hyperflexhealthcheckscriptinfo["script_execute_location"] = item.GetScriptExecuteLocation()
	hyperflexhealthcheckscriptinfo["script_input"] = item.GetScriptInput()
	hyperflexhealthcheckscriptinfo["script_name"] = item.GetScriptName()
	hyperflexhealthcheckscriptinfo["nr_version"] = item.GetVersion()

	hyperflexhealthcheckscriptinfos = append(hyperflexhealthcheckscriptinfos, hyperflexhealthcheckscriptinfo)
	return hyperflexhealthcheckscriptinfos
}
func flattenMapHyperflexHxLicenseAuthorizationDetailsDt(p models.HyperflexHxLicenseAuthorizationDetailsDt, d *schema.ResourceData) []map[string]interface{} {
	var hyperflexhxlicenseauthorizationdetailsdts []map[string]interface{}
	var ret models.HyperflexHxLicenseAuthorizationDetailsDt
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	item := p
	hyperflexhxlicenseauthorizationdetailsdt := make(map[string]interface{})
	hyperflexhxlicenseauthorizationdetailsdt["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	hyperflexhxlicenseauthorizationdetailsdt["class_id"] = item.GetClassId()
	hyperflexhxlicenseauthorizationdetailsdt["communication_deadline_date"] = item.GetCommunicationDeadlineDate()
	hyperflexhxlicenseauthorizationdetailsdt["evaluation_period_expired_at"] = item.GetEvaluationPeriodExpiredAt()
	hyperflexhxlicenseauthorizationdetailsdt["evaluation_period_remaining"] = item.GetEvaluationPeriodRemaining()
	hyperflexhxlicenseauthorizationdetailsdt["last_communication_attempt_date"] = item.GetLastCommunicationAttemptDate()
	hyperflexhxlicenseauthorizationdetailsdt["next_communication_attempt_date"] = item.GetNextCommunicationAttemptDate()
	hyperflexhxlicenseauthorizationdetailsdt["object_type"] = item.GetObjectType()
	hyperflexhxlicenseauthorizationdetailsdt["status"] = item.GetStatus()

	hyperflexhxlicenseauthorizationdetailsdts = append(hyperflexhxlicenseauthorizationdetailsdts, hyperflexhxlicenseauthorizationdetailsdt)
	return hyperflexhxlicenseauthorizationdetailsdts
}
func flattenMapHyperflexHxNetworkAddressDt(p models.HyperflexHxNetworkAddressDt, d *schema.ResourceData) []map[string]interface{} {
	var hyperflexhxnetworkaddressdts []map[string]interface{}
	var ret models.HyperflexHxNetworkAddressDt
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	item := p
	hyperflexhxnetworkaddressdt := make(map[string]interface{})
	hyperflexhxnetworkaddressdt["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	hyperflexhxnetworkaddressdt["address"] = item.GetAddress()
	hyperflexhxnetworkaddressdt["class_id"] = item.GetClassId()
	hyperflexhxnetworkaddressdt["fqdn"] = item.GetFqdn()
	hyperflexhxnetworkaddressdt["ip"] = item.GetIp()
	hyperflexhxnetworkaddressdt["object_type"] = item.GetObjectType()

	hyperflexhxnetworkaddressdts = append(hyperflexhxnetworkaddressdts, hyperflexhxnetworkaddressdt)
	return hyperflexhxnetworkaddressdts
}
func flattenMapHyperflexHxPlatformDatastoreConfigDt(p models.HyperflexHxPlatformDatastoreConfigDt, d *schema.ResourceData) []map[string]interface{} {
	var hyperflexhxplatformdatastoreconfigdts []map[string]interface{}
	var ret models.HyperflexHxPlatformDatastoreConfigDt
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	item := p
	hyperflexhxplatformdatastoreconfigdt := make(map[string]interface{})
	hyperflexhxplatformdatastoreconfigdt["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	hyperflexhxplatformdatastoreconfigdt["class_id"] = item.GetClassId()
	hyperflexhxplatformdatastoreconfigdt["data_block_size"] = item.GetDataBlockSize()
	hyperflexhxplatformdatastoreconfigdt["name"] = item.GetName()
	hyperflexhxplatformdatastoreconfigdt["num_mirrors"] = item.GetNumMirrors()
	hyperflexhxplatformdatastoreconfigdt["num_stripes_for_large_files"] = item.GetNumStripesForLargeFiles()
	hyperflexhxplatformdatastoreconfigdt["object_type"] = item.GetObjectType()
	hyperflexhxplatformdatastoreconfigdt["provisioned_capacity"] = item.GetProvisionedCapacity()
	hyperflexhxplatformdatastoreconfigdt["system_datastore"] = item.GetSystemDatastore()
	hyperflexhxplatformdatastoreconfigdt["usage_type"] = item.GetUsageType()

	hyperflexhxplatformdatastoreconfigdts = append(hyperflexhxplatformdatastoreconfigdts, hyperflexhxplatformdatastoreconfigdt)
	return hyperflexhxplatformdatastoreconfigdts
}
func flattenMapHyperflexHxRegistrationDetailsDt(p models.HyperflexHxRegistrationDetailsDt, d *schema.ResourceData) []map[string]interface{} {
	var hyperflexhxregistrationdetailsdts []map[string]interface{}
	var ret models.HyperflexHxRegistrationDetailsDt
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	item := p
	hyperflexhxregistrationdetailsdt := make(map[string]interface{})
	hyperflexhxregistrationdetailsdt["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	hyperflexhxregistrationdetailsdt["class_id"] = item.GetClassId()
	hyperflexhxregistrationdetailsdt["initial_registration_date"] = item.GetInitialRegistrationDate()
	hyperflexhxregistrationdetailsdt["last_renewal_attempt_date"] = item.GetLastRenewalAttemptDate()
	hyperflexhxregistrationdetailsdt["next_renewal_attempt_date"] = item.GetNextRenewalAttemptDate()
	hyperflexhxregistrationdetailsdt["object_type"] = item.GetObjectType()
	hyperflexhxregistrationdetailsdt["out_of_compliance_start_date"] = item.GetOutOfComplianceStartDate()
	hyperflexhxregistrationdetailsdt["registration_expire_date"] = item.GetRegistrationExpireDate()
	hyperflexhxregistrationdetailsdt["registration_failed_reason"] = item.GetRegistrationFailedReason()
	hyperflexhxregistrationdetailsdt["smart_account"] = item.GetSmartAccount()
	hyperflexhxregistrationdetailsdt["status"] = item.GetStatus()
	hyperflexhxregistrationdetailsdt["virtual_account"] = item.GetVirtualAccount()

	hyperflexhxregistrationdetailsdts = append(hyperflexhxregistrationdetailsdts, hyperflexhxregistrationdetailsdt)
	return hyperflexhxregistrationdetailsdts
}
func flattenMapHyperflexHxResiliencyInfoDt(p models.HyperflexHxResiliencyInfoDt, d *schema.ResourceData) []map[string]interface{} {
	var hyperflexhxresiliencyinfodts []map[string]interface{}
	var ret models.HyperflexHxResiliencyInfoDt
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	item := p
	hyperflexhxresiliencyinfodt := make(map[string]interface{})
	hyperflexhxresiliencyinfodt["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	hyperflexhxresiliencyinfodt["class_id"] = item.GetClassId()
	hyperflexhxresiliencyinfodt["data_replication_factor"] = item.GetDataReplicationFactor()
	hyperflexhxresiliencyinfodt["hdd_failures_tolerable"] = item.GetHddFailuresTolerable()
	hyperflexhxresiliencyinfodt["messages"] = item.GetMessages()
	hyperflexhxresiliencyinfodt["node_failures_tolerable"] = item.GetNodeFailuresTolerable()
	hyperflexhxresiliencyinfodt["object_type"] = item.GetObjectType()
	hyperflexhxresiliencyinfodt["policy_compliance"] = item.GetPolicyCompliance()
	hyperflexhxresiliencyinfodt["resiliency_state"] = item.GetResiliencyState()
	hyperflexhxresiliencyinfodt["ssd_failures_tolerable"] = item.GetSsdFailuresTolerable()

	hyperflexhxresiliencyinfodts = append(hyperflexhxresiliencyinfodts, hyperflexhxresiliencyinfodt)
	return hyperflexhxresiliencyinfodts
}
func flattenMapHyperflexHxSiteDt(p models.HyperflexHxSiteDt, d *schema.ResourceData) []map[string]interface{} {
	var hyperflexhxsitedts []map[string]interface{}
	var ret models.HyperflexHxSiteDt
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	item := p
	hyperflexhxsitedt := make(map[string]interface{})
	hyperflexhxsitedt["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	hyperflexhxsitedt["class_id"] = item.GetClassId()
	hyperflexhxsitedt["name"] = item.GetName()
	hyperflexhxsitedt["object_type"] = item.GetObjectType()
	hyperflexhxsitedt["zone"] = (func(p models.HyperflexHxZoneInfoDt, d *schema.ResourceData) []map[string]interface{} {
		var hyperflexhxzoneinfodts []map[string]interface{}
		var ret models.HyperflexHxZoneInfoDt
		if reflect.DeepEqual(ret, p) {
			return nil
		}
		item := p
		hyperflexhxzoneinfodt := make(map[string]interface{})
		hyperflexhxzoneinfodt["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
		hyperflexhxzoneinfodt["class_id"] = item.GetClassId()
		hyperflexhxzoneinfodt["num_nodes"] = item.GetNumNodes()
		hyperflexhxzoneinfodt["object_type"] = item.GetObjectType()
		hyperflexhxzoneinfodt["uuid"] = item.GetUuid()

		hyperflexhxzoneinfodts = append(hyperflexhxzoneinfodts, hyperflexhxzoneinfodt)
		return hyperflexhxzoneinfodts
	})(item.GetZone(), d)

	hyperflexhxsitedts = append(hyperflexhxsitedts, hyperflexhxsitedt)
	return hyperflexhxsitedts
}
func flattenMapHyperflexHxUuIdDt(p models.HyperflexHxUuIdDt, d *schema.ResourceData) []map[string]interface{} {
	var hyperflexhxuuiddts []map[string]interface{}
	var ret models.HyperflexHxUuIdDt
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	item := p
	hyperflexhxuuiddt := make(map[string]interface{})
	hyperflexhxuuiddt["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	hyperflexhxuuiddt["class_id"] = item.GetClassId()
	hyperflexhxuuiddt["links"] = (func(p []models.HyperflexHxLinkDt, d *schema.ResourceData) []map[string]interface{} {
		var hyperflexhxlinkdts []map[string]interface{}
		if len(p) == 0 {
			return nil
		}
		for _, item := range p {
			hyperflexhxlinkdt := make(map[string]interface{})
			hyperflexhxlinkdt["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
			hyperflexhxlinkdt["class_id"] = item.GetClassId()
			hyperflexhxlinkdt["comments"] = item.GetComments()
			hyperflexhxlinkdt["href"] = item.GetHref()
			hyperflexhxlinkdt["method"] = item.GetMethod()
			hyperflexhxlinkdt["object_type"] = item.GetObjectType()
			hyperflexhxlinkdt["rel"] = item.GetRel()
			hyperflexhxlinkdts = append(hyperflexhxlinkdts, hyperflexhxlinkdt)
		}
		return hyperflexhxlinkdts
	})(item.GetLinks(), d)
	hyperflexhxuuiddt["object_type"] = item.GetObjectType()
	hyperflexhxuuiddt["uuid"] = item.GetUuid()

	hyperflexhxuuiddts = append(hyperflexhxuuiddts, hyperflexhxuuiddt)
	return hyperflexhxuuiddts
}
func flattenMapHyperflexHypervisorHostRelationship(p models.HyperflexHypervisorHostRelationship, d *schema.ResourceData) []map[string]interface{} {
	var hyperflexhypervisorhostrelationships []map[string]interface{}
	var ret models.HyperflexHypervisorHostRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	hyperflexhypervisorhostrelationship := make(map[string]interface{})
	hyperflexhypervisorhostrelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	hyperflexhypervisorhostrelationship["class_id"] = item.GetClassId()
	hyperflexhypervisorhostrelationship["moid"] = item.GetMoid()
	hyperflexhypervisorhostrelationship["object_type"] = item.GetObjectType()
	hyperflexhypervisorhostrelationship["selector"] = item.GetSelector()

	hyperflexhypervisorhostrelationships = append(hyperflexhypervisorhostrelationships, hyperflexhypervisorhostrelationship)
	return hyperflexhypervisorhostrelationships
}
func flattenMapHyperflexIpAddrRange(p models.HyperflexIpAddrRange, d *schema.ResourceData) []map[string]interface{} {
	var hyperflexipaddrranges []map[string]interface{}
	var ret models.HyperflexIpAddrRange
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	item := p
	hyperflexipaddrrange := make(map[string]interface{})
	hyperflexipaddrrange["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	hyperflexipaddrrange["class_id"] = item.GetClassId()
	hyperflexipaddrrange["end_addr"] = item.GetEndAddr()
	hyperflexipaddrrange["gateway"] = item.GetGateway()
	hyperflexipaddrrange["ip_addr_blocks"] = (func(p []models.CommIpV4AddressBlock, d *schema.ResourceData) []map[string]interface{} {
		var commipv4addressblocks []map[string]interface{}
		if len(p) == 0 {
			return nil
		}
		for _, item := range p {
			commipv4addressblock := make(map[string]interface{})
			commipv4addressblock["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
			commipv4addressblock["class_id"] = item.GetClassId()
			commipv4addressblock["end_address"] = item.GetEndAddress()
			commipv4addressblock["object_type"] = item.GetObjectType()
			commipv4addressblock["start_address"] = item.GetStartAddress()
			commipv4addressblocks = append(commipv4addressblocks, commipv4addressblock)
		}
		return commipv4addressblocks
	})(item.GetIpAddrBlocks(), d)
	hyperflexipaddrrange["netmask"] = item.GetNetmask()
	hyperflexipaddrrange["object_type"] = item.GetObjectType()
	hyperflexipaddrrange["start_addr"] = item.GetStartAddr()

	hyperflexipaddrranges = append(hyperflexipaddrranges, hyperflexipaddrrange)
	return hyperflexipaddrranges
}
func flattenMapHyperflexLicenseRelationship(p models.HyperflexLicenseRelationship, d *schema.ResourceData) []map[string]interface{} {
	var hyperflexlicenserelationships []map[string]interface{}
	var ret models.HyperflexLicenseRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	hyperflexlicenserelationship := make(map[string]interface{})
	hyperflexlicenserelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	hyperflexlicenserelationship["class_id"] = item.GetClassId()
	hyperflexlicenserelationship["moid"] = item.GetMoid()
	hyperflexlicenserelationship["object_type"] = item.GetObjectType()
	hyperflexlicenserelationship["selector"] = item.GetSelector()

	hyperflexlicenserelationships = append(hyperflexlicenserelationships, hyperflexlicenserelationship)
	return hyperflexlicenserelationships
}
func flattenMapHyperflexLocalCredentialPolicyRelationship(p models.HyperflexLocalCredentialPolicyRelationship, d *schema.ResourceData) []map[string]interface{} {
	var hyperflexlocalcredentialpolicyrelationships []map[string]interface{}
	var ret models.HyperflexLocalCredentialPolicyRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	hyperflexlocalcredentialpolicyrelationship := make(map[string]interface{})
	hyperflexlocalcredentialpolicyrelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	hyperflexlocalcredentialpolicyrelationship["class_id"] = item.GetClassId()
	hyperflexlocalcredentialpolicyrelationship["moid"] = item.GetMoid()
	hyperflexlocalcredentialpolicyrelationship["object_type"] = item.GetObjectType()
	hyperflexlocalcredentialpolicyrelationship["selector"] = item.GetSelector()

	hyperflexlocalcredentialpolicyrelationships = append(hyperflexlocalcredentialpolicyrelationships, hyperflexlocalcredentialpolicyrelationship)
	return hyperflexlocalcredentialpolicyrelationships
}
func flattenMapHyperflexLogicalAvailabilityZone(p models.HyperflexLogicalAvailabilityZone, d *schema.ResourceData) []map[string]interface{} {
	var hyperflexlogicalavailabilityzones []map[string]interface{}
	var ret models.HyperflexLogicalAvailabilityZone
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	item := p
	hyperflexlogicalavailabilityzone := make(map[string]interface{})
	hyperflexlogicalavailabilityzone["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	hyperflexlogicalavailabilityzone["auto_config"] = item.GetAutoConfig()
	hyperflexlogicalavailabilityzone["class_id"] = item.GetClassId()
	hyperflexlogicalavailabilityzone["object_type"] = item.GetObjectType()

	hyperflexlogicalavailabilityzones = append(hyperflexlogicalavailabilityzones, hyperflexlogicalavailabilityzone)
	return hyperflexlogicalavailabilityzones
}
func flattenMapHyperflexMacAddrPrefixRange(p models.HyperflexMacAddrPrefixRange, d *schema.ResourceData) []map[string]interface{} {
	var hyperflexmacaddrprefixranges []map[string]interface{}
	var ret models.HyperflexMacAddrPrefixRange
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	item := p
	hyperflexmacaddrprefixrange := make(map[string]interface{})
	hyperflexmacaddrprefixrange["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	hyperflexmacaddrprefixrange["class_id"] = item.GetClassId()
	hyperflexmacaddrprefixrange["end_addr"] = item.GetEndAddr()
	hyperflexmacaddrprefixrange["object_type"] = item.GetObjectType()
	hyperflexmacaddrprefixrange["start_addr"] = item.GetStartAddr()

	hyperflexmacaddrprefixranges = append(hyperflexmacaddrprefixranges, hyperflexmacaddrprefixrange)
	return hyperflexmacaddrprefixranges
}
func flattenMapHyperflexNamedVlan(p models.HyperflexNamedVlan, d *schema.ResourceData) []map[string]interface{} {
	var hyperflexnamedvlans []map[string]interface{}
	var ret models.HyperflexNamedVlan
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	item := p
	hyperflexnamedvlan := make(map[string]interface{})
	hyperflexnamedvlan["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	hyperflexnamedvlan["class_id"] = item.GetClassId()
	hyperflexnamedvlan["name"] = item.GetName()
	hyperflexnamedvlan["object_type"] = item.GetObjectType()
	hyperflexnamedvlan["vlan_id"] = item.GetVlanId()

	hyperflexnamedvlans = append(hyperflexnamedvlans, hyperflexnamedvlan)
	return hyperflexnamedvlans
}
func flattenMapHyperflexNamedVsan(p models.HyperflexNamedVsan, d *schema.ResourceData) []map[string]interface{} {
	var hyperflexnamedvsans []map[string]interface{}
	var ret models.HyperflexNamedVsan
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	item := p
	hyperflexnamedvsan := make(map[string]interface{})
	hyperflexnamedvsan["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	hyperflexnamedvsan["class_id"] = item.GetClassId()
	hyperflexnamedvsan["name"] = item.GetName()
	hyperflexnamedvsan["object_type"] = item.GetObjectType()
	hyperflexnamedvsan["vsan_id"] = item.GetVsanId()

	hyperflexnamedvsans = append(hyperflexnamedvsans, hyperflexnamedvsan)
	return hyperflexnamedvsans
}
func flattenMapHyperflexNetworkConfiguration(p models.HyperflexNetworkConfiguration, d *schema.ResourceData) []map[string]interface{} {
	var hyperflexnetworkconfigurations []map[string]interface{}
	var ret models.HyperflexNetworkConfiguration
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	item := p
	hyperflexnetworkconfiguration := make(map[string]interface{})
	hyperflexnetworkconfiguration["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	hyperflexnetworkconfiguration["class_id"] = item.GetClassId()
	hyperflexnetworkconfiguration["data_gateway_ip_address"] = item.GetDataGatewayIpAddress()
	hyperflexnetworkconfiguration["data_ip_address"] = item.GetDataIpAddress()
	hyperflexnetworkconfiguration["data_netmask"] = item.GetDataNetmask()
	hyperflexnetworkconfiguration["data_vlan"] = item.GetDataVlan()
	hyperflexnetworkconfiguration["dns_suffix"] = item.GetDnsSuffix()
	hyperflexnetworkconfiguration["jumbo_frame_enabled"] = item.GetJumboFrameEnabled()
	hyperflexnetworkconfiguration["live_migration_vlan"] = item.GetLiveMigrationVlan()
	hyperflexnetworkconfiguration["mgmt_gateway_ip_address"] = item.GetMgmtGatewayIpAddress()
	hyperflexnetworkconfiguration["mgmt_ip_address"] = item.GetMgmtIpAddress()
	hyperflexnetworkconfiguration["mgmt_netmask"] = item.GetMgmtNetmask()
	hyperflexnetworkconfiguration["mgmt_vlan"] = item.GetMgmtVlan()
	hyperflexnetworkconfiguration["object_type"] = item.GetObjectType()
	hyperflexnetworkconfiguration["timezone"] = item.GetTimezone()
	hyperflexnetworkconfiguration["vm_network_vlans"] = item.GetVmNetworkVlans()

	hyperflexnetworkconfigurations = append(hyperflexnetworkconfigurations, hyperflexnetworkconfiguration)
	return hyperflexnetworkconfigurations
}
func flattenMapHyperflexNodeRelationship(p models.HyperflexNodeRelationship, d *schema.ResourceData) []map[string]interface{} {
	var hyperflexnoderelationships []map[string]interface{}
	var ret models.HyperflexNodeRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	hyperflexnoderelationship := make(map[string]interface{})
	hyperflexnoderelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	hyperflexnoderelationship["class_id"] = item.GetClassId()
	hyperflexnoderelationship["moid"] = item.GetMoid()
	hyperflexnoderelationship["object_type"] = item.GetObjectType()
	hyperflexnoderelationship["selector"] = item.GetSelector()

	hyperflexnoderelationships = append(hyperflexnoderelationships, hyperflexnoderelationship)
	return hyperflexnoderelationships
}
func flattenMapHyperflexNodeConfigPolicyRelationship(p models.HyperflexNodeConfigPolicyRelationship, d *schema.ResourceData) []map[string]interface{} {
	var hyperflexnodeconfigpolicyrelationships []map[string]interface{}
	var ret models.HyperflexNodeConfigPolicyRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	hyperflexnodeconfigpolicyrelationship := make(map[string]interface{})
	hyperflexnodeconfigpolicyrelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	hyperflexnodeconfigpolicyrelationship["class_id"] = item.GetClassId()
	hyperflexnodeconfigpolicyrelationship["moid"] = item.GetMoid()
	hyperflexnodeconfigpolicyrelationship["object_type"] = item.GetObjectType()
	hyperflexnodeconfigpolicyrelationship["selector"] = item.GetSelector()

	hyperflexnodeconfigpolicyrelationships = append(hyperflexnodeconfigpolicyrelationships, hyperflexnodeconfigpolicyrelationship)
	return hyperflexnodeconfigpolicyrelationships
}
func flattenMapHyperflexProxySettingPolicyRelationship(p models.HyperflexProxySettingPolicyRelationship, d *schema.ResourceData) []map[string]interface{} {
	var hyperflexproxysettingpolicyrelationships []map[string]interface{}
	var ret models.HyperflexProxySettingPolicyRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	hyperflexproxysettingpolicyrelationship := make(map[string]interface{})
	hyperflexproxysettingpolicyrelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	hyperflexproxysettingpolicyrelationship["class_id"] = item.GetClassId()
	hyperflexproxysettingpolicyrelationship["moid"] = item.GetMoid()
	hyperflexproxysettingpolicyrelationship["object_type"] = item.GetObjectType()
	hyperflexproxysettingpolicyrelationship["selector"] = item.GetSelector()

	hyperflexproxysettingpolicyrelationships = append(hyperflexproxysettingpolicyrelationships, hyperflexproxysettingpolicyrelationship)
	return hyperflexproxysettingpolicyrelationships
}
func flattenMapHyperflexReplicationPeerInfo(p models.HyperflexReplicationPeerInfo, d *schema.ResourceData) []map[string]interface{} {
	var hyperflexreplicationpeerinfos []map[string]interface{}
	var ret models.HyperflexReplicationPeerInfo
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	item := p
	hyperflexreplicationpeerinfo := make(map[string]interface{})
	hyperflexreplicationpeerinfo["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	hyperflexreplicationpeerinfo["class_id"] = item.GetClassId()
	hyperflexreplicationpeerinfo["datastores"] = (func(p []models.HyperflexReplicationPlatDatastorePair, d *schema.ResourceData) []map[string]interface{} {
		var hyperflexreplicationplatdatastorepairs []map[string]interface{}
		if len(p) == 0 {
			return nil
		}
		for _, item := range p {
			hyperflexreplicationplatdatastorepair := make(map[string]interface{})
			hyperflexreplicationplatdatastorepair["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
			hyperflexreplicationplatdatastorepair["ads"] = (func(p models.HyperflexReplicationPlatDatastore, d *schema.ResourceData) []map[string]interface{} {
				var hyperflexreplicationplatdatastores []map[string]interface{}
				var ret models.HyperflexReplicationPlatDatastore
				if reflect.DeepEqual(ret, p) {
					return nil
				}
				item := p
				hyperflexreplicationplatdatastore := make(map[string]interface{})
				hyperflexreplicationplatdatastore["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
				hyperflexreplicationplatdatastore["class_id"] = item.GetClassId()
				hyperflexreplicationplatdatastore["cluster_er"] = (func(p models.HyperflexEntityReference, d *schema.ResourceData) []map[string]interface{} {
					var hyperflexentityreferences []map[string]interface{}
					var ret models.HyperflexEntityReference
					if reflect.DeepEqual(ret, p) {
						return nil
					}
					item := p
					hyperflexentityreference := make(map[string]interface{})
					hyperflexentityreference["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
					hyperflexentityreference["class_id"] = item.GetClassId()
					hyperflexentityreference["confignum"] = item.GetConfignum()
					hyperflexentityreference["id"] = item.GetId()
					hyperflexentityreference["idtype"] = item.GetIdtype()
					hyperflexentityreference["name"] = item.GetName()
					hyperflexentityreference["object_type"] = item.GetObjectType()
					hyperflexentityreference["type"] = item.GetType()

					hyperflexentityreferences = append(hyperflexentityreferences, hyperflexentityreference)
					return hyperflexentityreferences
				})(item.GetClusterEr(), d)
				hyperflexreplicationplatdatastore["datastore_er"] = (func(p models.HyperflexEntityReference, d *schema.ResourceData) []map[string]interface{} {
					var hyperflexentityreferences []map[string]interface{}
					var ret models.HyperflexEntityReference
					if reflect.DeepEqual(ret, p) {
						return nil
					}
					item := p
					hyperflexentityreference := make(map[string]interface{})
					hyperflexentityreference["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
					hyperflexentityreference["class_id"] = item.GetClassId()
					hyperflexentityreference["confignum"] = item.GetConfignum()
					hyperflexentityreference["id"] = item.GetId()
					hyperflexentityreference["idtype"] = item.GetIdtype()
					hyperflexentityreference["name"] = item.GetName()
					hyperflexentityreference["object_type"] = item.GetObjectType()
					hyperflexentityreference["type"] = item.GetType()

					hyperflexentityreferences = append(hyperflexentityreferences, hyperflexentityreference)
					return hyperflexentityreferences
				})(item.GetDatastoreEr(), d)
				hyperflexreplicationplatdatastore["object_type"] = item.GetObjectType()

				hyperflexreplicationplatdatastores = append(hyperflexreplicationplatdatastores, hyperflexreplicationplatdatastore)
				return hyperflexreplicationplatdatastores
			})(item.GetAds(), d)
			hyperflexreplicationplatdatastorepair["backup_only"] = item.GetBackupOnly()
			hyperflexreplicationplatdatastorepair["bds"] = (func(p models.HyperflexReplicationPlatDatastore, d *schema.ResourceData) []map[string]interface{} {
				var hyperflexreplicationplatdatastores []map[string]interface{}
				var ret models.HyperflexReplicationPlatDatastore
				if reflect.DeepEqual(ret, p) {
					return nil
				}
				item := p
				hyperflexreplicationplatdatastore := make(map[string]interface{})
				hyperflexreplicationplatdatastore["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
				hyperflexreplicationplatdatastore["class_id"] = item.GetClassId()
				hyperflexreplicationplatdatastore["cluster_er"] = (func(p models.HyperflexEntityReference, d *schema.ResourceData) []map[string]interface{} {
					var hyperflexentityreferences []map[string]interface{}
					var ret models.HyperflexEntityReference
					if reflect.DeepEqual(ret, p) {
						return nil
					}
					item := p
					hyperflexentityreference := make(map[string]interface{})
					hyperflexentityreference["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
					hyperflexentityreference["class_id"] = item.GetClassId()
					hyperflexentityreference["confignum"] = item.GetConfignum()
					hyperflexentityreference["id"] = item.GetId()
					hyperflexentityreference["idtype"] = item.GetIdtype()
					hyperflexentityreference["name"] = item.GetName()
					hyperflexentityreference["object_type"] = item.GetObjectType()
					hyperflexentityreference["type"] = item.GetType()

					hyperflexentityreferences = append(hyperflexentityreferences, hyperflexentityreference)
					return hyperflexentityreferences
				})(item.GetClusterEr(), d)
				hyperflexreplicationplatdatastore["datastore_er"] = (func(p models.HyperflexEntityReference, d *schema.ResourceData) []map[string]interface{} {
					var hyperflexentityreferences []map[string]interface{}
					var ret models.HyperflexEntityReference
					if reflect.DeepEqual(ret, p) {
						return nil
					}
					item := p
					hyperflexentityreference := make(map[string]interface{})
					hyperflexentityreference["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
					hyperflexentityreference["class_id"] = item.GetClassId()
					hyperflexentityreference["confignum"] = item.GetConfignum()
					hyperflexentityreference["id"] = item.GetId()
					hyperflexentityreference["idtype"] = item.GetIdtype()
					hyperflexentityreference["name"] = item.GetName()
					hyperflexentityreference["object_type"] = item.GetObjectType()
					hyperflexentityreference["type"] = item.GetType()

					hyperflexentityreferences = append(hyperflexentityreferences, hyperflexentityreference)
					return hyperflexentityreferences
				})(item.GetDatastoreEr(), d)
				hyperflexreplicationplatdatastore["object_type"] = item.GetObjectType()

				hyperflexreplicationplatdatastores = append(hyperflexreplicationplatdatastores, hyperflexreplicationplatdatastore)
				return hyperflexreplicationplatdatastores
			})(item.GetBds(), d)
			hyperflexreplicationplatdatastorepair["class_id"] = item.GetClassId()
			hyperflexreplicationplatdatastorepair["object_type"] = item.GetObjectType()
			hyperflexreplicationplatdatastorepair["quiesce"] = item.GetQuiesce()
			hyperflexreplicationplatdatastorepair["replication_interval_in_minutes"] = item.GetReplicationIntervalInMinutes()
			hyperflexreplicationplatdatastorepair["sourceds"] = (func(p models.HyperflexReplicationPlatDatastore, d *schema.ResourceData) []map[string]interface{} {
				var hyperflexreplicationplatdatastores []map[string]interface{}
				var ret models.HyperflexReplicationPlatDatastore
				if reflect.DeepEqual(ret, p) {
					return nil
				}
				item := p
				hyperflexreplicationplatdatastore := make(map[string]interface{})
				hyperflexreplicationplatdatastore["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
				hyperflexreplicationplatdatastore["class_id"] = item.GetClassId()
				hyperflexreplicationplatdatastore["cluster_er"] = (func(p models.HyperflexEntityReference, d *schema.ResourceData) []map[string]interface{} {
					var hyperflexentityreferences []map[string]interface{}
					var ret models.HyperflexEntityReference
					if reflect.DeepEqual(ret, p) {
						return nil
					}
					item := p
					hyperflexentityreference := make(map[string]interface{})
					hyperflexentityreference["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
					hyperflexentityreference["class_id"] = item.GetClassId()
					hyperflexentityreference["confignum"] = item.GetConfignum()
					hyperflexentityreference["id"] = item.GetId()
					hyperflexentityreference["idtype"] = item.GetIdtype()
					hyperflexentityreference["name"] = item.GetName()
					hyperflexentityreference["object_type"] = item.GetObjectType()
					hyperflexentityreference["type"] = item.GetType()

					hyperflexentityreferences = append(hyperflexentityreferences, hyperflexentityreference)
					return hyperflexentityreferences
				})(item.GetClusterEr(), d)
				hyperflexreplicationplatdatastore["datastore_er"] = (func(p models.HyperflexEntityReference, d *schema.ResourceData) []map[string]interface{} {
					var hyperflexentityreferences []map[string]interface{}
					var ret models.HyperflexEntityReference
					if reflect.DeepEqual(ret, p) {
						return nil
					}
					item := p
					hyperflexentityreference := make(map[string]interface{})
					hyperflexentityreference["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
					hyperflexentityreference["class_id"] = item.GetClassId()
					hyperflexentityreference["confignum"] = item.GetConfignum()
					hyperflexentityreference["id"] = item.GetId()
					hyperflexentityreference["idtype"] = item.GetIdtype()
					hyperflexentityreference["name"] = item.GetName()
					hyperflexentityreference["object_type"] = item.GetObjectType()
					hyperflexentityreference["type"] = item.GetType()

					hyperflexentityreferences = append(hyperflexentityreferences, hyperflexentityreference)
					return hyperflexentityreferences
				})(item.GetDatastoreEr(), d)
				hyperflexreplicationplatdatastore["object_type"] = item.GetObjectType()

				hyperflexreplicationplatdatastores = append(hyperflexreplicationplatdatastores, hyperflexreplicationplatdatastore)
				return hyperflexreplicationplatdatastores
			})(item.GetSourceds(), d)
			hyperflexreplicationplatdatastorepair["storage_only"] = item.GetStorageOnly()
			hyperflexreplicationplatdatastorepairs = append(hyperflexreplicationplatdatastorepairs, hyperflexreplicationplatdatastorepair)
		}
		return hyperflexreplicationplatdatastorepairs
	})(item.GetDatastores(), d)
	hyperflexreplicationpeerinfo["dcip"] = item.GetDcip()
	hyperflexreplicationpeerinfo["er"] = (func(p models.HyperflexEntityReference, d *schema.ResourceData) []map[string]interface{} {
		var hyperflexentityreferences []map[string]interface{}
		var ret models.HyperflexEntityReference
		if reflect.DeepEqual(ret, p) {
			return nil
		}
		item := p
		hyperflexentityreference := make(map[string]interface{})
		hyperflexentityreference["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
		hyperflexentityreference["class_id"] = item.GetClassId()
		hyperflexentityreference["confignum"] = item.GetConfignum()
		hyperflexentityreference["id"] = item.GetId()
		hyperflexentityreference["idtype"] = item.GetIdtype()
		hyperflexentityreference["name"] = item.GetName()
		hyperflexentityreference["object_type"] = item.GetObjectType()
		hyperflexentityreference["type"] = item.GetType()

		hyperflexentityreferences = append(hyperflexentityreferences, hyperflexentityreference)
		return hyperflexentityreferences
	})(item.GetEr(), d)
	hyperflexreplicationpeerinfo["mcip"] = item.GetMcip()
	hyperflexreplicationpeerinfo["object_type"] = item.GetObjectType()
	hyperflexreplicationpeerinfo["ports"] = (func(p []models.HyperflexPortTypeToPortNumberMap, d *schema.ResourceData) []map[string]interface{} {
		var hyperflexporttypetoportnumbermaps []map[string]interface{}
		if len(p) == 0 {
			return nil
		}
		for _, item := range p {
			hyperflexporttypetoportnumbermap := make(map[string]interface{})
			hyperflexporttypetoportnumbermap["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
			hyperflexporttypetoportnumbermap["class_id"] = item.GetClassId()
			hyperflexporttypetoportnumbermap["i16"] = item.GetI16()
			hyperflexporttypetoportnumbermap["object_type"] = item.GetObjectType()
			hyperflexporttypetoportnumbermap["string"] = item.GetString()
			hyperflexporttypetoportnumbermaps = append(hyperflexporttypetoportnumbermaps, hyperflexporttypetoportnumbermap)
		}
		return hyperflexporttypetoportnumbermaps
	})(item.GetPorts(), d)
	hyperflexreplicationpeerinfo["repl_cip"] = item.GetReplCip()
	hyperflexreplicationpeerinfo["status"] = item.GetStatus()
	hyperflexreplicationpeerinfo["status_details"] = item.GetStatusDetails()

	hyperflexreplicationpeerinfos = append(hyperflexreplicationpeerinfos, hyperflexreplicationpeerinfo)
	return hyperflexreplicationpeerinfos
}
func flattenMapHyperflexReplicationSchedule(p models.HyperflexReplicationSchedule, d *schema.ResourceData) []map[string]interface{} {
	var hyperflexreplicationschedules []map[string]interface{}
	var ret models.HyperflexReplicationSchedule
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	item := p
	hyperflexreplicationschedule := make(map[string]interface{})
	hyperflexreplicationschedule["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	hyperflexreplicationschedule["backup_interval"] = item.GetBackupInterval()
	hyperflexreplicationschedule["class_id"] = item.GetClassId()
	hyperflexreplicationschedule["object_type"] = item.GetObjectType()

	hyperflexreplicationschedules = append(hyperflexreplicationschedules, hyperflexreplicationschedule)
	return hyperflexreplicationschedules
}
func flattenMapHyperflexServerFirmwareVersionRelationship(p models.HyperflexServerFirmwareVersionRelationship, d *schema.ResourceData) []map[string]interface{} {
	var hyperflexserverfirmwareversionrelationships []map[string]interface{}
	var ret models.HyperflexServerFirmwareVersionRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	hyperflexserverfirmwareversionrelationship := make(map[string]interface{})
	hyperflexserverfirmwareversionrelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	hyperflexserverfirmwareversionrelationship["class_id"] = item.GetClassId()
	hyperflexserverfirmwareversionrelationship["moid"] = item.GetMoid()
	hyperflexserverfirmwareversionrelationship["object_type"] = item.GetObjectType()
	hyperflexserverfirmwareversionrelationship["selector"] = item.GetSelector()

	hyperflexserverfirmwareversionrelationships = append(hyperflexserverfirmwareversionrelationships, hyperflexserverfirmwareversionrelationship)
	return hyperflexserverfirmwareversionrelationships
}
func flattenMapHyperflexServerModelRelationship(p models.HyperflexServerModelRelationship, d *schema.ResourceData) []map[string]interface{} {
	var hyperflexservermodelrelationships []map[string]interface{}
	var ret models.HyperflexServerModelRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	hyperflexservermodelrelationship := make(map[string]interface{})
	hyperflexservermodelrelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	hyperflexservermodelrelationship["class_id"] = item.GetClassId()
	hyperflexservermodelrelationship["moid"] = item.GetMoid()
	hyperflexservermodelrelationship["object_type"] = item.GetObjectType()
	hyperflexservermodelrelationship["selector"] = item.GetSelector()

	hyperflexservermodelrelationships = append(hyperflexservermodelrelationships, hyperflexservermodelrelationship)
	return hyperflexservermodelrelationships
}
func flattenMapHyperflexSiteDetails(p models.HyperflexSiteDetails, d *schema.ResourceData) []map[string]interface{} {
	var hyperflexsitedetailss []map[string]interface{}
	var ret models.HyperflexSiteDetails
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	item := p
	hyperflexsitedetails := make(map[string]interface{})
	hyperflexsitedetails["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	hyperflexsitedetails["class_id"] = item.GetClassId()
	hyperflexsitedetails["name"] = item.GetName()
	hyperflexsitedetails["num_nodes"] = item.GetNumNodes()
	hyperflexsitedetails["object_type"] = item.GetObjectType()
	hyperflexsitedetails["zone_uuid"] = item.GetZoneUuid()

	hyperflexsitedetailss = append(hyperflexsitedetailss, hyperflexsitedetails)
	return hyperflexsitedetailss
}
func flattenMapHyperflexSoftwareDistributionEntryRelationship(p models.HyperflexSoftwareDistributionEntryRelationship, d *schema.ResourceData) []map[string]interface{} {
	var hyperflexsoftwaredistributionentryrelationships []map[string]interface{}
	var ret models.HyperflexSoftwareDistributionEntryRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	hyperflexsoftwaredistributionentryrelationship := make(map[string]interface{})
	hyperflexsoftwaredistributionentryrelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	hyperflexsoftwaredistributionentryrelationship["class_id"] = item.GetClassId()
	hyperflexsoftwaredistributionentryrelationship["moid"] = item.GetMoid()
	hyperflexsoftwaredistributionentryrelationship["object_type"] = item.GetObjectType()
	hyperflexsoftwaredistributionentryrelationship["selector"] = item.GetSelector()

	hyperflexsoftwaredistributionentryrelationships = append(hyperflexsoftwaredistributionentryrelationships, hyperflexsoftwaredistributionentryrelationship)
	return hyperflexsoftwaredistributionentryrelationships
}
func flattenMapHyperflexSoftwareDistributionVersionRelationship(p models.HyperflexSoftwareDistributionVersionRelationship, d *schema.ResourceData) []map[string]interface{} {
	var hyperflexsoftwaredistributionversionrelationships []map[string]interface{}
	var ret models.HyperflexSoftwareDistributionVersionRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	hyperflexsoftwaredistributionversionrelationship := make(map[string]interface{})
	hyperflexsoftwaredistributionversionrelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	hyperflexsoftwaredistributionversionrelationship["class_id"] = item.GetClassId()
	hyperflexsoftwaredistributionversionrelationship["moid"] = item.GetMoid()
	hyperflexsoftwaredistributionversionrelationship["object_type"] = item.GetObjectType()
	hyperflexsoftwaredistributionversionrelationship["selector"] = item.GetSelector()

	hyperflexsoftwaredistributionversionrelationships = append(hyperflexsoftwaredistributionversionrelationships, hyperflexsoftwaredistributionversionrelationship)
	return hyperflexsoftwaredistributionversionrelationships
}
func flattenMapHyperflexSoftwareVersionPolicyRelationship(p models.HyperflexSoftwareVersionPolicyRelationship, d *schema.ResourceData) []map[string]interface{} {
	var hyperflexsoftwareversionpolicyrelationships []map[string]interface{}
	var ret models.HyperflexSoftwareVersionPolicyRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	hyperflexsoftwareversionpolicyrelationship := make(map[string]interface{})
	hyperflexsoftwareversionpolicyrelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	hyperflexsoftwareversionpolicyrelationship["class_id"] = item.GetClassId()
	hyperflexsoftwareversionpolicyrelationship["moid"] = item.GetMoid()
	hyperflexsoftwareversionpolicyrelationship["object_type"] = item.GetObjectType()
	hyperflexsoftwareversionpolicyrelationship["selector"] = item.GetSelector()

	hyperflexsoftwareversionpolicyrelationships = append(hyperflexsoftwareversionpolicyrelationships, hyperflexsoftwareversionpolicyrelationship)
	return hyperflexsoftwareversionpolicyrelationships
}
func flattenMapHyperflexStorageContainerRelationship(p models.HyperflexStorageContainerRelationship, d *schema.ResourceData) []map[string]interface{} {
	var hyperflexstoragecontainerrelationships []map[string]interface{}
	var ret models.HyperflexStorageContainerRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	hyperflexstoragecontainerrelationship := make(map[string]interface{})
	hyperflexstoragecontainerrelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	hyperflexstoragecontainerrelationship["class_id"] = item.GetClassId()
	hyperflexstoragecontainerrelationship["moid"] = item.GetMoid()
	hyperflexstoragecontainerrelationship["object_type"] = item.GetObjectType()
	hyperflexstoragecontainerrelationship["selector"] = item.GetSelector()

	hyperflexstoragecontainerrelationships = append(hyperflexstoragecontainerrelationships, hyperflexstoragecontainerrelationship)
	return hyperflexstoragecontainerrelationships
}
func flattenMapHyperflexSummary(p models.HyperflexSummary, d *schema.ResourceData) []map[string]interface{} {
	var hyperflexsummarys []map[string]interface{}
	var ret models.HyperflexSummary
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	item := p
	hyperflexsummary := make(map[string]interface{})
	hyperflexsummary["active_nodes"] = item.GetActiveNodes()
	hyperflexsummary["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	hyperflexsummary["address"] = item.GetAddress()
	hyperflexsummary["boottime"] = item.GetBoottime()
	hyperflexsummary["class_id"] = item.GetClassId()
	hyperflexsummary["cluster_access_policy"] = item.GetClusterAccessPolicy()
	hyperflexsummary["compression_savings"] = item.GetCompressionSavings()
	hyperflexsummary["data_replication_compliance"] = item.GetDataReplicationCompliance()
	hyperflexsummary["data_replication_factor"] = item.GetDataReplicationFactor()
	hyperflexsummary["deduplication_savings"] = item.GetDeduplicationSavings()
	hyperflexsummary["downtime"] = item.GetDowntime()
	hyperflexsummary["free_capacity"] = item.GetFreeCapacity()
	hyperflexsummary["healing_info"] = (func(p models.HyperflexStPlatformClusterHealingInfo, d *schema.ResourceData) []map[string]interface{} {
		var hyperflexstplatformclusterhealinginfos []map[string]interface{}
		var ret models.HyperflexStPlatformClusterHealingInfo
		if reflect.DeepEqual(ret, p) {
			return nil
		}
		item := p
		hyperflexstplatformclusterhealinginfo := make(map[string]interface{})
		hyperflexstplatformclusterhealinginfo["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
		hyperflexstplatformclusterhealinginfo["class_id"] = item.GetClassId()
		hyperflexstplatformclusterhealinginfo["estimated_completion_time_in_seconds"] = item.GetEstimatedCompletionTimeInSeconds()
		hyperflexstplatformclusterhealinginfo["in_progress"] = item.GetInProgress()
		hyperflexstplatformclusterhealinginfo["messages"] = item.GetMessages()
		hyperflexstplatformclusterhealinginfo["messages_iterator"] = flattenAdditionalProperties(item.MessagesIterator)
		hyperflexstplatformclusterhealinginfo["messages_size"] = item.GetMessagesSize()
		hyperflexstplatformclusterhealinginfo["object_type"] = item.GetObjectType()
		hyperflexstplatformclusterhealinginfo["percent_complete"] = item.GetPercentComplete()

		hyperflexstplatformclusterhealinginfos = append(hyperflexstplatformclusterhealinginfos, hyperflexstplatformclusterhealinginfo)
		return hyperflexstplatformclusterhealinginfos
	})(item.GetHealingInfo(), d)
	hyperflexsummary["name"] = item.GetName()
	hyperflexsummary["object_type"] = item.GetObjectType()
	hyperflexsummary["resiliency_details"] = flattenAdditionalProperties(item.ResiliencyDetails)
	hyperflexsummary["resiliency_details_size"] = item.GetResiliencyDetailsSize()
	hyperflexsummary["resiliency_info"] = (func(p models.HyperflexStPlatformClusterResiliencyInfo, d *schema.ResourceData) []map[string]interface{} {
		var hyperflexstplatformclusterresiliencyinfos []map[string]interface{}
		var ret models.HyperflexStPlatformClusterResiliencyInfo
		if reflect.DeepEqual(ret, p) {
			return nil
		}
		item := p
		hyperflexstplatformclusterresiliencyinfo := make(map[string]interface{})
		hyperflexstplatformclusterresiliencyinfo["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
		hyperflexstplatformclusterresiliencyinfo["class_id"] = item.GetClassId()
		hyperflexstplatformclusterresiliencyinfo["hdd_failures_tolerable"] = item.GetHddFailuresTolerable()
		hyperflexstplatformclusterresiliencyinfo["messages"] = item.GetMessages()
		hyperflexstplatformclusterresiliencyinfo["messages_iterator"] = flattenAdditionalProperties(item.MessagesIterator)
		hyperflexstplatformclusterresiliencyinfo["messages_size"] = item.GetMessagesSize()
		hyperflexstplatformclusterresiliencyinfo["node_failures_tolerable"] = item.GetNodeFailuresTolerable()
		hyperflexstplatformclusterresiliencyinfo["object_type"] = item.GetObjectType()
		hyperflexstplatformclusterresiliencyinfo["ssd_failures_tolerable"] = item.GetSsdFailuresTolerable()
		hyperflexstplatformclusterresiliencyinfo["state"] = item.GetState()

		hyperflexstplatformclusterresiliencyinfos = append(hyperflexstplatformclusterresiliencyinfos, hyperflexstplatformclusterresiliencyinfo)
		return hyperflexstplatformclusterresiliencyinfos
	})(item.GetResiliencyInfo(), d)
	hyperflexsummary["space_status"] = item.GetSpaceStatus()
	hyperflexsummary["state"] = item.GetState()
	hyperflexsummary["total_capacity"] = item.GetTotalCapacity()
	hyperflexsummary["total_savings"] = item.GetTotalSavings()
	hyperflexsummary["uptime"] = item.GetUptime()
	hyperflexsummary["used_capacity"] = item.GetUsedCapacity()

	hyperflexsummarys = append(hyperflexsummarys, hyperflexsummary)
	return hyperflexsummarys
}
func flattenMapHyperflexSysConfigPolicyRelationship(p models.HyperflexSysConfigPolicyRelationship, d *schema.ResourceData) []map[string]interface{} {
	var hyperflexsysconfigpolicyrelationships []map[string]interface{}
	var ret models.HyperflexSysConfigPolicyRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	hyperflexsysconfigpolicyrelationship := make(map[string]interface{})
	hyperflexsysconfigpolicyrelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	hyperflexsysconfigpolicyrelationship["class_id"] = item.GetClassId()
	hyperflexsysconfigpolicyrelationship["moid"] = item.GetMoid()
	hyperflexsysconfigpolicyrelationship["object_type"] = item.GetObjectType()
	hyperflexsysconfigpolicyrelationship["selector"] = item.GetSelector()

	hyperflexsysconfigpolicyrelationships = append(hyperflexsysconfigpolicyrelationships, hyperflexsysconfigpolicyrelationship)
	return hyperflexsysconfigpolicyrelationships
}
func flattenMapHyperflexTargetRelationship(p models.HyperflexTargetRelationship, d *schema.ResourceData) []map[string]interface{} {
	var hyperflextargetrelationships []map[string]interface{}
	var ret models.HyperflexTargetRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	hyperflextargetrelationship := make(map[string]interface{})
	hyperflextargetrelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	hyperflextargetrelationship["class_id"] = item.GetClassId()
	hyperflextargetrelationship["moid"] = item.GetMoid()
	hyperflextargetrelationship["object_type"] = item.GetObjectType()
	hyperflextargetrelationship["selector"] = item.GetSelector()

	hyperflextargetrelationships = append(hyperflextargetrelationships, hyperflextargetrelationship)
	return hyperflextargetrelationships
}
func flattenMapHyperflexUcsmConfigPolicyRelationship(p models.HyperflexUcsmConfigPolicyRelationship, d *schema.ResourceData) []map[string]interface{} {
	var hyperflexucsmconfigpolicyrelationships []map[string]interface{}
	var ret models.HyperflexUcsmConfigPolicyRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	hyperflexucsmconfigpolicyrelationship := make(map[string]interface{})
	hyperflexucsmconfigpolicyrelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	hyperflexucsmconfigpolicyrelationship["class_id"] = item.GetClassId()
	hyperflexucsmconfigpolicyrelationship["moid"] = item.GetMoid()
	hyperflexucsmconfigpolicyrelationship["object_type"] = item.GetObjectType()
	hyperflexucsmconfigpolicyrelationship["selector"] = item.GetSelector()

	hyperflexucsmconfigpolicyrelationships = append(hyperflexucsmconfigpolicyrelationships, hyperflexucsmconfigpolicyrelationship)
	return hyperflexucsmconfigpolicyrelationships
}
func flattenMapHyperflexVcenterConfigPolicyRelationship(p models.HyperflexVcenterConfigPolicyRelationship, d *schema.ResourceData) []map[string]interface{} {
	var hyperflexvcenterconfigpolicyrelationships []map[string]interface{}
	var ret models.HyperflexVcenterConfigPolicyRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	hyperflexvcenterconfigpolicyrelationship := make(map[string]interface{})
	hyperflexvcenterconfigpolicyrelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	hyperflexvcenterconfigpolicyrelationship["class_id"] = item.GetClassId()
	hyperflexvcenterconfigpolicyrelationship["moid"] = item.GetMoid()
	hyperflexvcenterconfigpolicyrelationship["object_type"] = item.GetObjectType()
	hyperflexvcenterconfigpolicyrelationship["selector"] = item.GetSelector()

	hyperflexvcenterconfigpolicyrelationships = append(hyperflexvcenterconfigpolicyrelationships, hyperflexvcenterconfigpolicyrelationship)
	return hyperflexvcenterconfigpolicyrelationships
}
func flattenMapHyperflexVcenterConfiguration(p models.HyperflexVcenterConfiguration, d *schema.ResourceData) []map[string]interface{} {
	var hyperflexvcenterconfigurations []map[string]interface{}
	var ret models.HyperflexVcenterConfiguration
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	item := p
	hyperflexvcenterconfiguration := make(map[string]interface{})
	hyperflexvcenterconfiguration["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	hyperflexvcenterconfiguration["class_id"] = item.GetClassId()
	hyperflexvcenterconfiguration["cluster_id"] = item.GetClusterId()
	hyperflexvcenterconfiguration["cluster_name"] = item.GetClusterName()
	hyperflexvcenterconfiguration["datacenter_id"] = item.GetDatacenterId()
	hyperflexvcenterconfiguration["datacenter_name"] = item.GetDatacenterName()
	hyperflexvcenterconfiguration["object_type"] = item.GetObjectType()
	hyperflexvcenterconfiguration["url"] = item.GetUrl()

	hyperflexvcenterconfigurations = append(hyperflexvcenterconfigurations, hyperflexvcenterconfiguration)
	return hyperflexvcenterconfigurations
}
func flattenMapHyperflexVirtualMachine(p models.HyperflexVirtualMachine, d *schema.ResourceData) []map[string]interface{} {
	var hyperflexvirtualmachines []map[string]interface{}
	var ret models.HyperflexVirtualMachine
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	item := p
	hyperflexvirtualmachine := make(map[string]interface{})
	hyperflexvirtualmachine["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	hyperflexvirtualmachine["class_id"] = item.GetClassId()
	hyperflexvirtualmachine["object_type"] = item.GetObjectType()
	hyperflexvirtualmachine["run_time_info"] = (func(p models.HyperflexVirtualMachineRuntimeInfo, d *schema.ResourceData) []map[string]interface{} {
		var hyperflexvirtualmachineruntimeinfos []map[string]interface{}
		var ret models.HyperflexVirtualMachineRuntimeInfo
		if reflect.DeepEqual(ret, p) {
			return nil
		}
		item := p
		hyperflexvirtualmachineruntimeinfo := make(map[string]interface{})
		hyperflexvirtualmachineruntimeinfo["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
		hyperflexvirtualmachineruntimeinfo["bios_uuid"] = item.GetBiosUuid()
		hyperflexvirtualmachineruntimeinfo["class_id"] = item.GetClassId()
		hyperflexvirtualmachineruntimeinfo["connection_state"] = item.GetConnectionState()
		hyperflexvirtualmachineruntimeinfo["cpu_usage"] = item.GetCpuUsage()
		hyperflexvirtualmachineruntimeinfo["folder"] = item.GetFolder()
		hyperflexvirtualmachineruntimeinfo["guest_family"] = item.GetGuestFamily()
		hyperflexvirtualmachineruntimeinfo["guest_full_name"] = item.GetGuestFullName()
		hyperflexvirtualmachineruntimeinfo["guest_id"] = item.GetGuestId()
		hyperflexvirtualmachineruntimeinfo["guest_state"] = item.GetGuestState()
		hyperflexvirtualmachineruntimeinfo["host_name"] = item.GetHostName()
		hyperflexvirtualmachineruntimeinfo["instance_uuid"] = item.GetInstanceUuid()
		hyperflexvirtualmachineruntimeinfo["memory_mb"] = item.GetMemoryMb()
		hyperflexvirtualmachineruntimeinfo["memory_usage"] = item.GetMemoryUsage()
		hyperflexvirtualmachineruntimeinfo["moid"] = item.GetMoid()
		hyperflexvirtualmachineruntimeinfo["name"] = item.GetName()
		hyperflexvirtualmachineruntimeinfo["networks"] = item.GetNetworks()
		hyperflexvirtualmachineruntimeinfo["num_cpu"] = item.GetNumCpu()
		hyperflexvirtualmachineruntimeinfo["object_type"] = item.GetObjectType()
		hyperflexvirtualmachineruntimeinfo["power_state"] = item.GetPowerState()
		hyperflexvirtualmachineruntimeinfo["provisioned_size"] = item.GetProvisionedSize()
		hyperflexvirtualmachineruntimeinfo["resource_pool"] = item.GetResourcePool()
		hyperflexvirtualmachineruntimeinfo["used_size"] = item.GetUsedSize()
		hyperflexvirtualmachineruntimeinfo["nr_version"] = item.GetVersion()
		hyperflexvirtualmachineruntimeinfo["vmx_path"] = item.GetVmxPath()

		hyperflexvirtualmachineruntimeinfos = append(hyperflexvirtualmachineruntimeinfos, hyperflexvirtualmachineruntimeinfo)
		return hyperflexvirtualmachineruntimeinfos
	})(item.GetRunTimeInfo(), d)
	hyperflexvirtualmachine["status_code"] = item.GetStatusCode()
	hyperflexvirtualmachine["uuid"] = item.GetUuid()

	hyperflexvirtualmachines = append(hyperflexvirtualmachines, hyperflexvirtualmachine)
	return hyperflexvirtualmachines
}
func flattenMapHyperflexVmBackupInfoRelationship(p models.HyperflexVmBackupInfoRelationship, d *schema.ResourceData) []map[string]interface{} {
	var hyperflexvmbackupinforelationships []map[string]interface{}
	var ret models.HyperflexVmBackupInfoRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	hyperflexvmbackupinforelationship := make(map[string]interface{})
	hyperflexvmbackupinforelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	hyperflexvmbackupinforelationship["class_id"] = item.GetClassId()
	hyperflexvmbackupinforelationship["moid"] = item.GetMoid()
	hyperflexvmbackupinforelationship["object_type"] = item.GetObjectType()
	hyperflexvmbackupinforelationship["selector"] = item.GetSelector()

	hyperflexvmbackupinforelationships = append(hyperflexvmbackupinforelationships, hyperflexvmbackupinforelationship)
	return hyperflexvmbackupinforelationships
}
func flattenMapHyperflexVmSnapshotInfoRelationship(p models.HyperflexVmSnapshotInfoRelationship, d *schema.ResourceData) []map[string]interface{} {
	var hyperflexvmsnapshotinforelationships []map[string]interface{}
	var ret models.HyperflexVmSnapshotInfoRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	hyperflexvmsnapshotinforelationship := make(map[string]interface{})
	hyperflexvmsnapshotinforelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	hyperflexvmsnapshotinforelationship["class_id"] = item.GetClassId()
	hyperflexvmsnapshotinforelationship["moid"] = item.GetMoid()
	hyperflexvmsnapshotinforelationship["object_type"] = item.GetObjectType()
	hyperflexvmsnapshotinforelationship["selector"] = item.GetSelector()

	hyperflexvmsnapshotinforelationships = append(hyperflexvmsnapshotinforelationships, hyperflexvmsnapshotinforelationship)
	return hyperflexvmsnapshotinforelationships
}
func flattenMapHyperflexWwxnPrefixRange(p models.HyperflexWwxnPrefixRange, d *schema.ResourceData) []map[string]interface{} {
	var hyperflexwwxnprefixranges []map[string]interface{}
	var ret models.HyperflexWwxnPrefixRange
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	item := p
	hyperflexwwxnprefixrange := make(map[string]interface{})
	hyperflexwwxnprefixrange["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	hyperflexwwxnprefixrange["class_id"] = item.GetClassId()
	hyperflexwwxnprefixrange["end_addr"] = item.GetEndAddr()
	hyperflexwwxnprefixrange["object_type"] = item.GetObjectType()
	hyperflexwwxnprefixrange["start_addr"] = item.GetStartAddr()

	hyperflexwwxnprefixranges = append(hyperflexwwxnprefixranges, hyperflexwwxnprefixrange)
	return hyperflexwwxnprefixranges
}
func flattenMapIaasLicenseInfoRelationship(p models.IaasLicenseInfoRelationship, d *schema.ResourceData) []map[string]interface{} {
	var iaaslicenseinforelationships []map[string]interface{}
	var ret models.IaasLicenseInfoRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	iaaslicenseinforelationship := make(map[string]interface{})
	iaaslicenseinforelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	iaaslicenseinforelationship["class_id"] = item.GetClassId()
	iaaslicenseinforelationship["moid"] = item.GetMoid()
	iaaslicenseinforelationship["object_type"] = item.GetObjectType()
	iaaslicenseinforelationship["selector"] = item.GetSelector()

	iaaslicenseinforelationships = append(iaaslicenseinforelationships, iaaslicenseinforelationship)
	return iaaslicenseinforelationships
}
func flattenMapIaasUcsdInfoRelationship(p models.IaasUcsdInfoRelationship, d *schema.ResourceData) []map[string]interface{} {
	var iaasucsdinforelationships []map[string]interface{}
	var ret models.IaasUcsdInfoRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	iaasucsdinforelationship := make(map[string]interface{})
	iaasucsdinforelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	iaasucsdinforelationship["class_id"] = item.GetClassId()
	iaasucsdinforelationship["moid"] = item.GetMoid()
	iaasucsdinforelationship["object_type"] = item.GetObjectType()
	iaasucsdinforelationship["selector"] = item.GetSelector()

	iaasucsdinforelationships = append(iaasucsdinforelationships, iaasucsdinforelationship)
	return iaasucsdinforelationships
}
func flattenMapIaasUcsdManagedInfraRelationship(p models.IaasUcsdManagedInfraRelationship, d *schema.ResourceData) []map[string]interface{} {
	var iaasucsdmanagedinfrarelationships []map[string]interface{}
	var ret models.IaasUcsdManagedInfraRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	iaasucsdmanagedinfrarelationship := make(map[string]interface{})
	iaasucsdmanagedinfrarelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	iaasucsdmanagedinfrarelationship["class_id"] = item.GetClassId()
	iaasucsdmanagedinfrarelationship["moid"] = item.GetMoid()
	iaasucsdmanagedinfrarelationship["object_type"] = item.GetObjectType()
	iaasucsdmanagedinfrarelationship["selector"] = item.GetSelector()

	iaasucsdmanagedinfrarelationships = append(iaasucsdmanagedinfrarelationships, iaasucsdmanagedinfrarelationship)
	return iaasucsdmanagedinfrarelationships
}
func flattenMapIamAccountRelationship(p models.IamAccountRelationship, d *schema.ResourceData) []map[string]interface{} {
	var iamaccountrelationships []map[string]interface{}
	var ret models.IamAccountRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	iamaccountrelationship := make(map[string]interface{})
	iamaccountrelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	iamaccountrelationship["class_id"] = item.GetClassId()
	iamaccountrelationship["moid"] = item.GetMoid()
	iamaccountrelationship["object_type"] = item.GetObjectType()
	iamaccountrelationship["selector"] = item.GetSelector()

	iamaccountrelationships = append(iamaccountrelationships, iamaccountrelationship)
	return iamaccountrelationships
}
func flattenMapIamAppRegistrationRelationship(p models.IamAppRegistrationRelationship, d *schema.ResourceData) []map[string]interface{} {
	var iamappregistrationrelationships []map[string]interface{}
	var ret models.IamAppRegistrationRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	iamappregistrationrelationship := make(map[string]interface{})
	iamappregistrationrelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	iamappregistrationrelationship["class_id"] = item.GetClassId()
	iamappregistrationrelationship["moid"] = item.GetMoid()
	iamappregistrationrelationship["object_type"] = item.GetObjectType()
	iamappregistrationrelationship["selector"] = item.GetSelector()

	iamappregistrationrelationships = append(iamappregistrationrelationships, iamappregistrationrelationship)
	return iamappregistrationrelationships
}
func flattenMapIamCertificateRelationship(p models.IamCertificateRelationship, d *schema.ResourceData) []map[string]interface{} {
	var iamcertificaterelationships []map[string]interface{}
	var ret models.IamCertificateRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	iamcertificaterelationship := make(map[string]interface{})
	iamcertificaterelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	iamcertificaterelationship["class_id"] = item.GetClassId()
	iamcertificaterelationship["moid"] = item.GetMoid()
	iamcertificaterelationship["object_type"] = item.GetObjectType()
	iamcertificaterelationship["selector"] = item.GetSelector()

	iamcertificaterelationships = append(iamcertificaterelationships, iamcertificaterelationship)
	return iamcertificaterelationships
}
func flattenMapIamCertificateRequestRelationship(p models.IamCertificateRequestRelationship, d *schema.ResourceData) []map[string]interface{} {
	var iamcertificaterequestrelationships []map[string]interface{}
	var ret models.IamCertificateRequestRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	iamcertificaterequestrelationship := make(map[string]interface{})
	iamcertificaterequestrelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	iamcertificaterequestrelationship["class_id"] = item.GetClassId()
	iamcertificaterequestrelationship["moid"] = item.GetMoid()
	iamcertificaterequestrelationship["object_type"] = item.GetObjectType()
	iamcertificaterequestrelationship["selector"] = item.GetSelector()

	iamcertificaterequestrelationships = append(iamcertificaterequestrelationships, iamcertificaterequestrelationship)
	return iamcertificaterequestrelationships
}
func flattenMapIamClientMeta(p models.IamClientMeta, d *schema.ResourceData) []map[string]interface{} {
	var iamclientmetas []map[string]interface{}
	var ret models.IamClientMeta
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	item := p
	iamclientmeta := make(map[string]interface{})
	iamclientmeta["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	iamclientmeta["class_id"] = item.GetClassId()
	iamclientmeta["device_model"] = item.GetDeviceModel()
	iamclientmeta["object_type"] = item.GetObjectType()
	iamclientmeta["user_agent"] = item.GetUserAgent()

	iamclientmetas = append(iamclientmetas, iamclientmeta)
	return iamclientmetas
}
func flattenMapIamDomainGroupRelationship(p models.IamDomainGroupRelationship, d *schema.ResourceData) []map[string]interface{} {
	var iamdomaingrouprelationships []map[string]interface{}
	var ret models.IamDomainGroupRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	iamdomaingrouprelationship := make(map[string]interface{})
	iamdomaingrouprelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	iamdomaingrouprelationship["class_id"] = item.GetClassId()
	iamdomaingrouprelationship["moid"] = item.GetMoid()
	iamdomaingrouprelationship["object_type"] = item.GetObjectType()
	iamdomaingrouprelationship["selector"] = item.GetSelector()

	iamdomaingrouprelationships = append(iamdomaingrouprelationships, iamdomaingrouprelationship)
	return iamdomaingrouprelationships
}
func flattenMapIamEndPointPasswordProperties(p models.IamEndPointPasswordProperties, d *schema.ResourceData) []map[string]interface{} {
	var iamendpointpasswordpropertiess []map[string]interface{}
	var ret models.IamEndPointPasswordProperties
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	item := p
	iamendpointpasswordproperties := make(map[string]interface{})
	iamendpointpasswordproperties["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	iamendpointpasswordproperties["class_id"] = item.GetClassId()
	iamendpointpasswordproperties["enable_password_expiry"] = item.GetEnablePasswordExpiry()
	iamendpointpasswordproperties["enforce_strong_password"] = item.GetEnforceStrongPassword()
	iamendpointpasswordproperties["force_send_password"] = item.GetForceSendPassword()
	iamendpointpasswordproperties["grace_period"] = item.GetGracePeriod()
	iamendpointpasswordproperties["notification_period"] = item.GetNotificationPeriod()
	iamendpointpasswordproperties["object_type"] = item.GetObjectType()
	iamendpointpasswordproperties["password_expiry_duration"] = item.GetPasswordExpiryDuration()
	iamendpointpasswordproperties["password_history"] = item.GetPasswordHistory()

	iamendpointpasswordpropertiess = append(iamendpointpasswordpropertiess, iamendpointpasswordproperties)
	return iamendpointpasswordpropertiess
}
func flattenMapIamEndPointUserRelationship(p models.IamEndPointUserRelationship, d *schema.ResourceData) []map[string]interface{} {
	var iamendpointuserrelationships []map[string]interface{}
	var ret models.IamEndPointUserRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	iamendpointuserrelationship := make(map[string]interface{})
	iamendpointuserrelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	iamendpointuserrelationship["class_id"] = item.GetClassId()
	iamendpointuserrelationship["moid"] = item.GetMoid()
	iamendpointuserrelationship["object_type"] = item.GetObjectType()
	iamendpointuserrelationship["selector"] = item.GetSelector()

	iamendpointuserrelationships = append(iamendpointuserrelationships, iamendpointuserrelationship)
	return iamendpointuserrelationships
}
func flattenMapIamEndPointUserInventoryRelationship(p models.IamEndPointUserInventoryRelationship, d *schema.ResourceData) []map[string]interface{} {
	var iamendpointuserinventoryrelationships []map[string]interface{}
	var ret models.IamEndPointUserInventoryRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	iamendpointuserinventoryrelationship := make(map[string]interface{})
	iamendpointuserinventoryrelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	iamendpointuserinventoryrelationship["class_id"] = item.GetClassId()
	iamendpointuserinventoryrelationship["moid"] = item.GetMoid()
	iamendpointuserinventoryrelationship["object_type"] = item.GetObjectType()
	iamendpointuserinventoryrelationship["selector"] = item.GetSelector()

	iamendpointuserinventoryrelationships = append(iamendpointuserinventoryrelationships, iamendpointuserinventoryrelationship)
	return iamendpointuserinventoryrelationships
}
func flattenMapIamEndPointUserPolicyRelationship(p models.IamEndPointUserPolicyRelationship, d *schema.ResourceData) []map[string]interface{} {
	var iamendpointuserpolicyrelationships []map[string]interface{}
	var ret models.IamEndPointUserPolicyRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	iamendpointuserpolicyrelationship := make(map[string]interface{})
	iamendpointuserpolicyrelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	iamendpointuserpolicyrelationship["class_id"] = item.GetClassId()
	iamendpointuserpolicyrelationship["moid"] = item.GetMoid()
	iamendpointuserpolicyrelationship["object_type"] = item.GetObjectType()
	iamendpointuserpolicyrelationship["selector"] = item.GetSelector()

	iamendpointuserpolicyrelationships = append(iamendpointuserpolicyrelationships, iamendpointuserpolicyrelationship)
	return iamendpointuserpolicyrelationships
}
func flattenMapIamEndPointUserPolicyInventoryRelationship(p models.IamEndPointUserPolicyInventoryRelationship, d *schema.ResourceData) []map[string]interface{} {
	var iamendpointuserpolicyinventoryrelationships []map[string]interface{}
	var ret models.IamEndPointUserPolicyInventoryRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	iamendpointuserpolicyinventoryrelationship := make(map[string]interface{})
	iamendpointuserpolicyinventoryrelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	iamendpointuserpolicyinventoryrelationship["class_id"] = item.GetClassId()
	iamendpointuserpolicyinventoryrelationship["moid"] = item.GetMoid()
	iamendpointuserpolicyinventoryrelationship["object_type"] = item.GetObjectType()
	iamendpointuserpolicyinventoryrelationship["selector"] = item.GetSelector()

	iamendpointuserpolicyinventoryrelationships = append(iamendpointuserpolicyinventoryrelationships, iamendpointuserpolicyinventoryrelationship)
	return iamendpointuserpolicyinventoryrelationships
}
func flattenMapIamFailureDetails(p models.IamFailureDetails, d *schema.ResourceData) []map[string]interface{} {
	var iamfailuredetailss []map[string]interface{}
	var ret models.IamFailureDetails
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	item := p
	iamfailuredetails := make(map[string]interface{})
	iamfailuredetails["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	iamfailuredetails["class_id"] = item.GetClassId()
	iamfailuredetails["failure_reason"] = item.GetFailureReason()
	iamfailuredetails["failure_time"] = item.GetFailureTime().String()
	iamfailuredetails["object_type"] = item.GetObjectType()

	iamfailuredetailss = append(iamfailuredetailss, iamfailuredetails)
	return iamfailuredetailss
}
func flattenMapIamIdpRelationship(p models.IamIdpRelationship, d *schema.ResourceData) []map[string]interface{} {
	var iamidprelationships []map[string]interface{}
	var ret models.IamIdpRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	iamidprelationship := make(map[string]interface{})
	iamidprelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	iamidprelationship["class_id"] = item.GetClassId()
	iamidprelationship["moid"] = item.GetMoid()
	iamidprelationship["object_type"] = item.GetObjectType()
	iamidprelationship["selector"] = item.GetSelector()

	iamidprelationships = append(iamidprelationships, iamidprelationship)
	return iamidprelationships
}
func flattenMapIamIdpReferenceRelationship(p models.IamIdpReferenceRelationship, d *schema.ResourceData) []map[string]interface{} {
	var iamidpreferencerelationships []map[string]interface{}
	var ret models.IamIdpReferenceRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	iamidpreferencerelationship := make(map[string]interface{})
	iamidpreferencerelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	iamidpreferencerelationship["class_id"] = item.GetClassId()
	iamidpreferencerelationship["moid"] = item.GetMoid()
	iamidpreferencerelationship["object_type"] = item.GetObjectType()
	iamidpreferencerelationship["selector"] = item.GetSelector()

	iamidpreferencerelationships = append(iamidpreferencerelationships, iamidpreferencerelationship)
	return iamidpreferencerelationships
}
func flattenMapIamIpAccessManagementRelationship(p models.IamIpAccessManagementRelationship, d *schema.ResourceData) []map[string]interface{} {
	var iamipaccessmanagementrelationships []map[string]interface{}
	var ret models.IamIpAccessManagementRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	iamipaccessmanagementrelationship := make(map[string]interface{})
	iamipaccessmanagementrelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	iamipaccessmanagementrelationship["class_id"] = item.GetClassId()
	iamipaccessmanagementrelationship["moid"] = item.GetMoid()
	iamipaccessmanagementrelationship["object_type"] = item.GetObjectType()
	iamipaccessmanagementrelationship["selector"] = item.GetSelector()

	iamipaccessmanagementrelationships = append(iamipaccessmanagementrelationships, iamipaccessmanagementrelationship)
	return iamipaccessmanagementrelationships
}
func flattenMapIamLdapBaseProperties(p models.IamLdapBaseProperties, d *schema.ResourceData) []map[string]interface{} {
	var iamldapbasepropertiess []map[string]interface{}
	var ret models.IamLdapBaseProperties
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	item := p
	iamldapbaseproperties := make(map[string]interface{})
	iamldapbaseproperties["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	iamldapbaseproperties["attribute"] = item.GetAttribute()
	iamldapbaseproperties["base_dn"] = item.GetBaseDn()
	iamldapbaseproperties["bind_dn"] = item.GetBindDn()
	iamldapbaseproperties["bind_method"] = item.GetBindMethod()
	iamldapbaseproperties["class_id"] = item.GetClassId()
	iamldapbaseproperties["domain"] = item.GetDomain()
	iamldapbaseproperties["enable_encryption"] = item.GetEnableEncryption()
	iamldapbaseproperties["enable_group_authorization"] = item.GetEnableGroupAuthorization()
	iamldapbaseproperties["enable_nested_group_search"] = item.GetEnableNestedGroupSearch()
	iamldapbaseproperties["filter"] = item.GetFilter()
	iamldapbaseproperties["group_attribute"] = item.GetGroupAttribute()
	iamldapbaseproperties["is_password_set"] = item.GetIsPasswordSet()
	iamldapbaseproperties["nested_group_search_depth"] = item.GetNestedGroupSearchDepth()
	iamldapbaseproperties["object_type"] = item.GetObjectType()
	password_x, exists := d.GetOk("base_properties")
	if exists && password_x != nil {
		password_y := password_x.([]interface{})[0].(map[string]interface{})
		iamldapbaseproperties["password"] = password_y["password"]
	}
	iamldapbaseproperties["timeout"] = item.GetTimeout()

	iamldapbasepropertiess = append(iamldapbasepropertiess, iamldapbaseproperties)
	return iamldapbasepropertiess
}
func flattenMapIamLdapDnsParameters(p models.IamLdapDnsParameters, d *schema.ResourceData) []map[string]interface{} {
	var iamldapdnsparameterss []map[string]interface{}
	var ret models.IamLdapDnsParameters
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	item := p
	iamldapdnsparameters := make(map[string]interface{})
	iamldapdnsparameters["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	iamldapdnsparameters["class_id"] = item.GetClassId()
	iamldapdnsparameters["object_type"] = item.GetObjectType()
	iamldapdnsparameters["search_domain"] = item.GetSearchDomain()
	iamldapdnsparameters["search_forest"] = item.GetSearchForest()
	iamldapdnsparameters["nr_source"] = item.GetSource()

	iamldapdnsparameterss = append(iamldapdnsparameterss, iamldapdnsparameters)
	return iamldapdnsparameterss
}
func flattenMapIamLdapPolicyRelationship(p models.IamLdapPolicyRelationship, d *schema.ResourceData) []map[string]interface{} {
	var iamldappolicyrelationships []map[string]interface{}
	var ret models.IamLdapPolicyRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	iamldappolicyrelationship := make(map[string]interface{})
	iamldappolicyrelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	iamldappolicyrelationship["class_id"] = item.GetClassId()
	iamldappolicyrelationship["moid"] = item.GetMoid()
	iamldappolicyrelationship["object_type"] = item.GetObjectType()
	iamldappolicyrelationship["selector"] = item.GetSelector()

	iamldappolicyrelationships = append(iamldappolicyrelationships, iamldappolicyrelationship)
	return iamldappolicyrelationships
}
func flattenMapIamLocalUserPasswordRelationship(p models.IamLocalUserPasswordRelationship, d *schema.ResourceData) []map[string]interface{} {
	var iamlocaluserpasswordrelationships []map[string]interface{}
	var ret models.IamLocalUserPasswordRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	iamlocaluserpasswordrelationship := make(map[string]interface{})
	iamlocaluserpasswordrelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	iamlocaluserpasswordrelationship["class_id"] = item.GetClassId()
	iamlocaluserpasswordrelationship["moid"] = item.GetMoid()
	iamlocaluserpasswordrelationship["object_type"] = item.GetObjectType()
	iamlocaluserpasswordrelationship["selector"] = item.GetSelector()

	iamlocaluserpasswordrelationships = append(iamlocaluserpasswordrelationships, iamlocaluserpasswordrelationship)
	return iamlocaluserpasswordrelationships
}
func flattenMapIamPermissionRelationship(p models.IamPermissionRelationship, d *schema.ResourceData) []map[string]interface{} {
	var iampermissionrelationships []map[string]interface{}
	var ret models.IamPermissionRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	iampermissionrelationship := make(map[string]interface{})
	iampermissionrelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	iampermissionrelationship["class_id"] = item.GetClassId()
	iampermissionrelationship["moid"] = item.GetMoid()
	iampermissionrelationship["object_type"] = item.GetObjectType()
	iampermissionrelationship["selector"] = item.GetSelector()

	iampermissionrelationships = append(iampermissionrelationships, iampermissionrelationship)
	return iampermissionrelationships
}
func flattenMapIamPrivateKeySpecRelationship(p models.IamPrivateKeySpecRelationship, d *schema.ResourceData) []map[string]interface{} {
	var iamprivatekeyspecrelationships []map[string]interface{}
	var ret models.IamPrivateKeySpecRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	iamprivatekeyspecrelationship := make(map[string]interface{})
	iamprivatekeyspecrelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	iamprivatekeyspecrelationship["class_id"] = item.GetClassId()
	iamprivatekeyspecrelationship["moid"] = item.GetMoid()
	iamprivatekeyspecrelationship["object_type"] = item.GetObjectType()
	iamprivatekeyspecrelationship["selector"] = item.GetSelector()

	iamprivatekeyspecrelationships = append(iamprivatekeyspecrelationships, iamprivatekeyspecrelationship)
	return iamprivatekeyspecrelationships
}
func flattenMapIamQualifierRelationship(p models.IamQualifierRelationship, d *schema.ResourceData) []map[string]interface{} {
	var iamqualifierrelationships []map[string]interface{}
	var ret models.IamQualifierRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	iamqualifierrelationship := make(map[string]interface{})
	iamqualifierrelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	iamqualifierrelationship["class_id"] = item.GetClassId()
	iamqualifierrelationship["moid"] = item.GetMoid()
	iamqualifierrelationship["object_type"] = item.GetObjectType()
	iamqualifierrelationship["selector"] = item.GetSelector()

	iamqualifierrelationships = append(iamqualifierrelationships, iamqualifierrelationship)
	return iamqualifierrelationships
}
func flattenMapIamResourceLimitsRelationship(p models.IamResourceLimitsRelationship, d *schema.ResourceData) []map[string]interface{} {
	var iamresourcelimitsrelationships []map[string]interface{}
	var ret models.IamResourceLimitsRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	iamresourcelimitsrelationship := make(map[string]interface{})
	iamresourcelimitsrelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	iamresourcelimitsrelationship["class_id"] = item.GetClassId()
	iamresourcelimitsrelationship["moid"] = item.GetMoid()
	iamresourcelimitsrelationship["object_type"] = item.GetObjectType()
	iamresourcelimitsrelationship["selector"] = item.GetSelector()

	iamresourcelimitsrelationships = append(iamresourcelimitsrelationships, iamresourcelimitsrelationship)
	return iamresourcelimitsrelationships
}
func flattenMapIamSecurityHolderRelationship(p models.IamSecurityHolderRelationship, d *schema.ResourceData) []map[string]interface{} {
	var iamsecurityholderrelationships []map[string]interface{}
	var ret models.IamSecurityHolderRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	iamsecurityholderrelationship := make(map[string]interface{})
	iamsecurityholderrelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	iamsecurityholderrelationship["class_id"] = item.GetClassId()
	iamsecurityholderrelationship["moid"] = item.GetMoid()
	iamsecurityholderrelationship["object_type"] = item.GetObjectType()
	iamsecurityholderrelationship["selector"] = item.GetSelector()

	iamsecurityholderrelationships = append(iamsecurityholderrelationships, iamsecurityholderrelationship)
	return iamsecurityholderrelationships
}
func flattenMapIamServiceProviderRelationship(p models.IamServiceProviderRelationship, d *schema.ResourceData) []map[string]interface{} {
	var iamserviceproviderrelationships []map[string]interface{}
	var ret models.IamServiceProviderRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	iamserviceproviderrelationship := make(map[string]interface{})
	iamserviceproviderrelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	iamserviceproviderrelationship["class_id"] = item.GetClassId()
	iamserviceproviderrelationship["moid"] = item.GetMoid()
	iamserviceproviderrelationship["object_type"] = item.GetObjectType()
	iamserviceproviderrelationship["selector"] = item.GetSelector()

	iamserviceproviderrelationships = append(iamserviceproviderrelationships, iamserviceproviderrelationship)
	return iamserviceproviderrelationships
}
func flattenMapIamSessionRelationship(p models.IamSessionRelationship, d *schema.ResourceData) []map[string]interface{} {
	var iamsessionrelationships []map[string]interface{}
	var ret models.IamSessionRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	iamsessionrelationship := make(map[string]interface{})
	iamsessionrelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	iamsessionrelationship["class_id"] = item.GetClassId()
	iamsessionrelationship["moid"] = item.GetMoid()
	iamsessionrelationship["object_type"] = item.GetObjectType()
	iamsessionrelationship["selector"] = item.GetSelector()

	iamsessionrelationships = append(iamsessionrelationships, iamsessionrelationship)
	return iamsessionrelationships
}
func flattenMapIamSessionLimitsRelationship(p models.IamSessionLimitsRelationship, d *schema.ResourceData) []map[string]interface{} {
	var iamsessionlimitsrelationships []map[string]interface{}
	var ret models.IamSessionLimitsRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	iamsessionlimitsrelationship := make(map[string]interface{})
	iamsessionlimitsrelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	iamsessionlimitsrelationship["class_id"] = item.GetClassId()
	iamsessionlimitsrelationship["moid"] = item.GetMoid()
	iamsessionlimitsrelationship["object_type"] = item.GetObjectType()
	iamsessionlimitsrelationship["selector"] = item.GetSelector()

	iamsessionlimitsrelationships = append(iamsessionlimitsrelationships, iamsessionlimitsrelationship)
	return iamsessionlimitsrelationships
}
func flattenMapIamSharingRuleRelationship(p models.IamSharingRuleRelationship, d *schema.ResourceData) []map[string]interface{} {
	var iamsharingrulerelationships []map[string]interface{}
	var ret models.IamSharingRuleRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	iamsharingrulerelationship := make(map[string]interface{})
	iamsharingrulerelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	iamsharingrulerelationship["class_id"] = item.GetClassId()
	iamsharingrulerelationship["moid"] = item.GetMoid()
	iamsharingrulerelationship["object_type"] = item.GetObjectType()
	iamsharingrulerelationship["selector"] = item.GetSelector()

	iamsharingrulerelationships = append(iamsharingrulerelationships, iamsharingrulerelationship)
	return iamsharingrulerelationships
}
func flattenMapIamSwitchScopePermissions(p models.IamSwitchScopePermissions, d *schema.ResourceData) []map[string]interface{} {
	var iamswitchscopepermissionss []map[string]interface{}
	var ret models.IamSwitchScopePermissions
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	item := p
	iamswitchscopepermissions := make(map[string]interface{})
	iamswitchscopepermissions["account_access_control_id"] = item.GetAccountAccessControlId()
	iamswitchscopepermissions["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	iamswitchscopepermissions["class_id"] = item.GetClassId()
	iamswitchscopepermissions["object_type"] = item.GetObjectType()
	iamswitchscopepermissions["request_identifier"] = item.GetRequestIdentifier()
	iamswitchscopepermissions["switched_from_account"] = (func(p models.IamSwitchAccountPermission, d *schema.ResourceData) []map[string]interface{} {
		var iamswitchaccountpermissions []map[string]interface{}
		var ret models.IamSwitchAccountPermission
		if reflect.DeepEqual(ret, p) {
			return nil
		}
		item := p
		iamswitchaccountpermission := make(map[string]interface{})
		iamswitchaccountpermission["account_id"] = item.GetAccountId()
		iamswitchaccountpermission["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
		iamswitchaccountpermission["class_id"] = item.GetClassId()
		iamswitchaccountpermission["object_type"] = item.GetObjectType()
		iamswitchaccountpermission["permission_id"] = item.GetPermissionId()

		iamswitchaccountpermissions = append(iamswitchaccountpermissions, iamswitchaccountpermission)
		return iamswitchaccountpermissions
	})(item.GetSwitchedFromAccount(), d)
	iamswitchscopepermissions["switched_to_accounts"] = (func(p []models.IamSwitchAccountPermission, d *schema.ResourceData) []map[string]interface{} {
		var iamswitchaccountpermissions []map[string]interface{}
		if len(p) == 0 {
			return nil
		}
		for _, item := range p {
			iamswitchaccountpermission := make(map[string]interface{})
			iamswitchaccountpermission["account_id"] = item.GetAccountId()
			iamswitchaccountpermission["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
			iamswitchaccountpermission["class_id"] = item.GetClassId()
			iamswitchaccountpermission["object_type"] = item.GetObjectType()
			iamswitchaccountpermission["permission_id"] = item.GetPermissionId()
			iamswitchaccountpermissions = append(iamswitchaccountpermissions, iamswitchaccountpermission)
		}
		return iamswitchaccountpermissions
	})(item.GetSwitchedToAccounts(), d)

	iamswitchscopepermissionss = append(iamswitchscopepermissionss, iamswitchscopepermissions)
	return iamswitchscopepermissionss
}
func flattenMapIamSystemRelationship(p models.IamSystemRelationship, d *schema.ResourceData) []map[string]interface{} {
	var iamsystemrelationships []map[string]interface{}
	var ret models.IamSystemRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	iamsystemrelationship := make(map[string]interface{})
	iamsystemrelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	iamsystemrelationship["class_id"] = item.GetClassId()
	iamsystemrelationship["moid"] = item.GetMoid()
	iamsystemrelationship["object_type"] = item.GetObjectType()
	iamsystemrelationship["selector"] = item.GetSelector()

	iamsystemrelationships = append(iamsystemrelationships, iamsystemrelationship)
	return iamsystemrelationships
}
func flattenMapIamTrustPointRelationship(p models.IamTrustPointRelationship, d *schema.ResourceData) []map[string]interface{} {
	var iamtrustpointrelationships []map[string]interface{}
	var ret models.IamTrustPointRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	iamtrustpointrelationship := make(map[string]interface{})
	iamtrustpointrelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	iamtrustpointrelationship["class_id"] = item.GetClassId()
	iamtrustpointrelationship["moid"] = item.GetMoid()
	iamtrustpointrelationship["object_type"] = item.GetObjectType()
	iamtrustpointrelationship["selector"] = item.GetSelector()

	iamtrustpointrelationships = append(iamtrustpointrelationships, iamtrustpointrelationship)
	return iamtrustpointrelationships
}
func flattenMapIamUserRelationship(p models.IamUserRelationship, d *schema.ResourceData) []map[string]interface{} {
	var iamuserrelationships []map[string]interface{}
	var ret models.IamUserRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	iamuserrelationship := make(map[string]interface{})
	iamuserrelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	iamuserrelationship["class_id"] = item.GetClassId()
	iamuserrelationship["moid"] = item.GetMoid()
	iamuserrelationship["object_type"] = item.GetObjectType()
	iamuserrelationship["selector"] = item.GetSelector()

	iamuserrelationships = append(iamuserrelationships, iamuserrelationship)
	return iamuserrelationships
}
func flattenMapIamUserGroupRelationship(p models.IamUserGroupRelationship, d *schema.ResourceData) []map[string]interface{} {
	var iamusergrouprelationships []map[string]interface{}
	var ret models.IamUserGroupRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	iamusergrouprelationship := make(map[string]interface{})
	iamusergrouprelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	iamusergrouprelationship["class_id"] = item.GetClassId()
	iamusergrouprelationship["moid"] = item.GetMoid()
	iamusergrouprelationship["object_type"] = item.GetObjectType()
	iamusergrouprelationship["selector"] = item.GetSelector()

	iamusergrouprelationships = append(iamusergrouprelationships, iamusergrouprelationship)
	return iamusergrouprelationships
}
func flattenMapInfraHardwareInfo(p models.InfraHardwareInfo, d *schema.ResourceData) []map[string]interface{} {
	var infrahardwareinfos []map[string]interface{}
	var ret models.InfraHardwareInfo
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	item := p
	infrahardwareinfo := make(map[string]interface{})
	infrahardwareinfo["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	infrahardwareinfo["class_id"] = item.GetClassId()
	infrahardwareinfo["cpu_cores"] = item.GetCpuCores()
	infrahardwareinfo["cpu_speed"] = item.GetCpuSpeed()
	infrahardwareinfo["memory_size"] = item.GetMemorySize()
	infrahardwareinfo["object_type"] = item.GetObjectType()

	infrahardwareinfos = append(infrahardwareinfos, infrahardwareinfo)
	return infrahardwareinfos
}
func flattenMapInventoryBaseRelationship(p models.InventoryBaseRelationship, d *schema.ResourceData) []map[string]interface{} {
	var inventorybaserelationships []map[string]interface{}
	var ret models.InventoryBaseRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	inventorybaserelationship := make(map[string]interface{})
	inventorybaserelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	inventorybaserelationship["class_id"] = item.GetClassId()
	inventorybaserelationship["moid"] = item.GetMoid()
	inventorybaserelationship["object_type"] = item.GetObjectType()
	inventorybaserelationship["selector"] = item.GetSelector()

	inventorybaserelationships = append(inventorybaserelationships, inventorybaserelationship)
	return inventorybaserelationships
}
func flattenMapInventoryDeviceInfoRelationship(p models.InventoryDeviceInfoRelationship, d *schema.ResourceData) []map[string]interface{} {
	var inventorydeviceinforelationships []map[string]interface{}
	var ret models.InventoryDeviceInfoRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	inventorydeviceinforelationship := make(map[string]interface{})
	inventorydeviceinforelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	inventorydeviceinforelationship["class_id"] = item.GetClassId()
	inventorydeviceinforelationship["moid"] = item.GetMoid()
	inventorydeviceinforelationship["object_type"] = item.GetObjectType()
	inventorydeviceinforelationship["selector"] = item.GetSelector()

	inventorydeviceinforelationships = append(inventorydeviceinforelationships, inventorydeviceinforelationship)
	return inventorydeviceinforelationships
}
func flattenMapInventoryGenericInventoryHolderRelationship(p models.InventoryGenericInventoryHolderRelationship, d *schema.ResourceData) []map[string]interface{} {
	var inventorygenericinventoryholderrelationships []map[string]interface{}
	var ret models.InventoryGenericInventoryHolderRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	inventorygenericinventoryholderrelationship := make(map[string]interface{})
	inventorygenericinventoryholderrelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	inventorygenericinventoryholderrelationship["class_id"] = item.GetClassId()
	inventorygenericinventoryholderrelationship["moid"] = item.GetMoid()
	inventorygenericinventoryholderrelationship["object_type"] = item.GetObjectType()
	inventorygenericinventoryholderrelationship["selector"] = item.GetSelector()

	inventorygenericinventoryholderrelationships = append(inventorygenericinventoryholderrelationships, inventorygenericinventoryholderrelationship)
	return inventorygenericinventoryholderrelationships
}
func flattenMapInventoryInterfaceRelationship(p models.InventoryInterfaceRelationship, d *schema.ResourceData) []map[string]interface{} {
	var inventoryinterfacerelationships []map[string]interface{}
	var ret models.InventoryInterfaceRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	inventoryinterfacerelationship := make(map[string]interface{})
	inventoryinterfacerelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	inventoryinterfacerelationship["class_id"] = item.GetClassId()
	inventoryinterfacerelationship["moid"] = item.GetMoid()
	inventoryinterfacerelationship["object_type"] = item.GetObjectType()
	inventoryinterfacerelationship["selector"] = item.GetSelector()

	inventoryinterfacerelationships = append(inventoryinterfacerelationships, inventoryinterfacerelationship)
	return inventoryinterfacerelationships
}
func flattenMapIppoolBlockLeaseRelationship(p models.IppoolBlockLeaseRelationship, d *schema.ResourceData) []map[string]interface{} {
	var ippoolblockleaserelationships []map[string]interface{}
	var ret models.IppoolBlockLeaseRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	ippoolblockleaserelationship := make(map[string]interface{})
	ippoolblockleaserelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	ippoolblockleaserelationship["class_id"] = item.GetClassId()
	ippoolblockleaserelationship["moid"] = item.GetMoid()
	ippoolblockleaserelationship["object_type"] = item.GetObjectType()
	ippoolblockleaserelationship["selector"] = item.GetSelector()

	ippoolblockleaserelationships = append(ippoolblockleaserelationships, ippoolblockleaserelationship)
	return ippoolblockleaserelationships
}
func flattenMapIppoolIpLeaseRelationship(p models.IppoolIpLeaseRelationship, d *schema.ResourceData) []map[string]interface{} {
	var ippoolipleaserelationships []map[string]interface{}
	var ret models.IppoolIpLeaseRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	ippoolipleaserelationship := make(map[string]interface{})
	ippoolipleaserelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	ippoolipleaserelationship["class_id"] = item.GetClassId()
	ippoolipleaserelationship["moid"] = item.GetMoid()
	ippoolipleaserelationship["object_type"] = item.GetObjectType()
	ippoolipleaserelationship["selector"] = item.GetSelector()

	ippoolipleaserelationships = append(ippoolipleaserelationships, ippoolipleaserelationship)
	return ippoolipleaserelationships
}
func flattenMapIppoolIpV4Block(p models.IppoolIpV4Block, d *schema.ResourceData) []map[string]interface{} {
	var ippoolipv4blocks []map[string]interface{}
	var ret models.IppoolIpV4Block
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	item := p
	ippoolipv4block := make(map[string]interface{})
	ippoolipv4block["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	ippoolipv4block["class_id"] = item.GetClassId()
	ippoolipv4block["from"] = item.GetFrom()
	ippoolipv4block["ip_v4_config"] = (func(p models.IppoolIpV4Config, d *schema.ResourceData) []map[string]interface{} {
		var ippoolipv4configs []map[string]interface{}
		var ret models.IppoolIpV4Config
		if reflect.DeepEqual(ret, p) {
			return nil
		}
		item := p
		ippoolipv4config := make(map[string]interface{})
		ippoolipv4config["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
		ippoolipv4config["class_id"] = item.GetClassId()
		ippoolipv4config["gateway"] = item.GetGateway()
		ippoolipv4config["netmask"] = item.GetNetmask()
		ippoolipv4config["object_type"] = item.GetObjectType()
		ippoolipv4config["primary_dns"] = item.GetPrimaryDns()
		ippoolipv4config["secondary_dns"] = item.GetSecondaryDns()

		ippoolipv4configs = append(ippoolipv4configs, ippoolipv4config)
		return ippoolipv4configs
	})(item.GetIpV4Config(), d)
	ippoolipv4block["object_type"] = item.GetObjectType()
	ippoolipv4block["size"] = item.GetSize()
	ippoolipv4block["to"] = item.GetTo()

	ippoolipv4blocks = append(ippoolipv4blocks, ippoolipv4block)
	return ippoolipv4blocks
}
func flattenMapIppoolIpV4Config(p models.IppoolIpV4Config, d *schema.ResourceData) []map[string]interface{} {
	var ippoolipv4configs []map[string]interface{}
	var ret models.IppoolIpV4Config
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	item := p
	ippoolipv4config := make(map[string]interface{})
	ippoolipv4config["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	ippoolipv4config["class_id"] = item.GetClassId()
	ippoolipv4config["gateway"] = item.GetGateway()
	ippoolipv4config["netmask"] = item.GetNetmask()
	ippoolipv4config["object_type"] = item.GetObjectType()
	ippoolipv4config["primary_dns"] = item.GetPrimaryDns()
	ippoolipv4config["secondary_dns"] = item.GetSecondaryDns()

	ippoolipv4configs = append(ippoolipv4configs, ippoolipv4config)
	return ippoolipv4configs
}
func flattenMapIppoolIpV6Block(p models.IppoolIpV6Block, d *schema.ResourceData) []map[string]interface{} {
	var ippoolipv6blocks []map[string]interface{}
	var ret models.IppoolIpV6Block
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	item := p
	ippoolipv6block := make(map[string]interface{})
	ippoolipv6block["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	ippoolipv6block["class_id"] = item.GetClassId()
	ippoolipv6block["from"] = item.GetFrom()
	ippoolipv6block["ip_v6_config"] = (func(p models.IppoolIpV6Config, d *schema.ResourceData) []map[string]interface{} {
		var ippoolipv6configs []map[string]interface{}
		var ret models.IppoolIpV6Config
		if reflect.DeepEqual(ret, p) {
			return nil
		}
		item := p
		ippoolipv6config := make(map[string]interface{})
		ippoolipv6config["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
		ippoolipv6config["class_id"] = item.GetClassId()
		ippoolipv6config["gateway"] = item.GetGateway()
		ippoolipv6config["object_type"] = item.GetObjectType()
		ippoolipv6config["prefix"] = item.GetPrefix()
		ippoolipv6config["primary_dns"] = item.GetPrimaryDns()
		ippoolipv6config["secondary_dns"] = item.GetSecondaryDns()

		ippoolipv6configs = append(ippoolipv6configs, ippoolipv6config)
		return ippoolipv6configs
	})(item.GetIpV6Config(), d)
	ippoolipv6block["object_type"] = item.GetObjectType()
	ippoolipv6block["size"] = item.GetSize()
	ippoolipv6block["to"] = item.GetTo()

	ippoolipv6blocks = append(ippoolipv6blocks, ippoolipv6block)
	return ippoolipv6blocks
}
func flattenMapIppoolIpV6Config(p models.IppoolIpV6Config, d *schema.ResourceData) []map[string]interface{} {
	var ippoolipv6configs []map[string]interface{}
	var ret models.IppoolIpV6Config
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	item := p
	ippoolipv6config := make(map[string]interface{})
	ippoolipv6config["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	ippoolipv6config["class_id"] = item.GetClassId()
	ippoolipv6config["gateway"] = item.GetGateway()
	ippoolipv6config["object_type"] = item.GetObjectType()
	ippoolipv6config["prefix"] = item.GetPrefix()
	ippoolipv6config["primary_dns"] = item.GetPrimaryDns()
	ippoolipv6config["secondary_dns"] = item.GetSecondaryDns()

	ippoolipv6configs = append(ippoolipv6configs, ippoolipv6config)
	return ippoolipv6configs
}
func flattenMapIppoolPoolRelationship(p models.IppoolPoolRelationship, d *schema.ResourceData) []map[string]interface{} {
	var ippoolpoolrelationships []map[string]interface{}
	var ret models.IppoolPoolRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	ippoolpoolrelationship := make(map[string]interface{})
	ippoolpoolrelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	ippoolpoolrelationship["class_id"] = item.GetClassId()
	ippoolpoolrelationship["moid"] = item.GetMoid()
	ippoolpoolrelationship["object_type"] = item.GetObjectType()
	ippoolpoolrelationship["selector"] = item.GetSelector()

	ippoolpoolrelationships = append(ippoolpoolrelationships, ippoolpoolrelationship)
	return ippoolpoolrelationships
}
func flattenMapIppoolPoolMemberRelationship(p models.IppoolPoolMemberRelationship, d *schema.ResourceData) []map[string]interface{} {
	var ippoolpoolmemberrelationships []map[string]interface{}
	var ret models.IppoolPoolMemberRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	ippoolpoolmemberrelationship := make(map[string]interface{})
	ippoolpoolmemberrelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	ippoolpoolmemberrelationship["class_id"] = item.GetClassId()
	ippoolpoolmemberrelationship["moid"] = item.GetMoid()
	ippoolpoolmemberrelationship["object_type"] = item.GetObjectType()
	ippoolpoolmemberrelationship["selector"] = item.GetSelector()

	ippoolpoolmemberrelationships = append(ippoolpoolmemberrelationships, ippoolpoolmemberrelationship)
	return ippoolpoolmemberrelationships
}
func flattenMapIppoolReservationRelationship(p models.IppoolReservationRelationship, d *schema.ResourceData) []map[string]interface{} {
	var ippoolreservationrelationships []map[string]interface{}
	var ret models.IppoolReservationRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	ippoolreservationrelationship := make(map[string]interface{})
	ippoolreservationrelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	ippoolreservationrelationship["class_id"] = item.GetClassId()
	ippoolreservationrelationship["moid"] = item.GetMoid()
	ippoolreservationrelationship["object_type"] = item.GetObjectType()
	ippoolreservationrelationship["selector"] = item.GetSelector()

	ippoolreservationrelationships = append(ippoolreservationrelationships, ippoolreservationrelationship)
	return ippoolreservationrelationships
}
func flattenMapIppoolReservationReference(p models.IppoolReservationReference, d *schema.ResourceData) []map[string]interface{} {
	var ippoolreservationreferences []map[string]interface{}
	var ret models.IppoolReservationReference
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	item := p
	ippoolreservationreference := make(map[string]interface{})
	ippoolreservationreference["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	ippoolreservationreference["class_id"] = item.GetClassId()
	ippoolreservationreference["consumer_name"] = item.GetConsumerName()
	ippoolreservationreference["consumer_type"] = item.GetConsumerType()
	ippoolreservationreference["object_type"] = item.GetObjectType()
	ippoolreservationreference["reservation_moid"] = item.GetReservationMoid()

	ippoolreservationreferences = append(ippoolreservationreferences, ippoolreservationreference)
	return ippoolreservationreferences
}
func flattenMapIppoolShadowBlockRelationship(p models.IppoolShadowBlockRelationship, d *schema.ResourceData) []map[string]interface{} {
	var ippoolshadowblockrelationships []map[string]interface{}
	var ret models.IppoolShadowBlockRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	ippoolshadowblockrelationship := make(map[string]interface{})
	ippoolshadowblockrelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	ippoolshadowblockrelationship["class_id"] = item.GetClassId()
	ippoolshadowblockrelationship["moid"] = item.GetMoid()
	ippoolshadowblockrelationship["object_type"] = item.GetObjectType()
	ippoolshadowblockrelationship["selector"] = item.GetSelector()

	ippoolshadowblockrelationships = append(ippoolshadowblockrelationships, ippoolshadowblockrelationship)
	return ippoolshadowblockrelationships
}
func flattenMapIppoolShadowPoolRelationship(p models.IppoolShadowPoolRelationship, d *schema.ResourceData) []map[string]interface{} {
	var ippoolshadowpoolrelationships []map[string]interface{}
	var ret models.IppoolShadowPoolRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	ippoolshadowpoolrelationship := make(map[string]interface{})
	ippoolshadowpoolrelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	ippoolshadowpoolrelationship["class_id"] = item.GetClassId()
	ippoolshadowpoolrelationship["moid"] = item.GetMoid()
	ippoolshadowpoolrelationship["object_type"] = item.GetObjectType()
	ippoolshadowpoolrelationship["selector"] = item.GetSelector()

	ippoolshadowpoolrelationships = append(ippoolshadowpoolrelationships, ippoolshadowpoolrelationship)
	return ippoolshadowpoolrelationships
}
func flattenMapIppoolUniverseRelationship(p models.IppoolUniverseRelationship, d *schema.ResourceData) []map[string]interface{} {
	var ippooluniverserelationships []map[string]interface{}
	var ret models.IppoolUniverseRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	ippooluniverserelationship := make(map[string]interface{})
	ippooluniverserelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	ippooluniverserelationship["class_id"] = item.GetClassId()
	ippooluniverserelationship["moid"] = item.GetMoid()
	ippooluniverserelationship["object_type"] = item.GetObjectType()
	ippooluniverserelationship["selector"] = item.GetSelector()

	ippooluniverserelationships = append(ippooluniverserelationships, ippooluniverserelationship)
	return ippooluniverserelationships
}
func flattenMapIqnpoolBlockRelationship(p models.IqnpoolBlockRelationship, d *schema.ResourceData) []map[string]interface{} {
	var iqnpoolblockrelationships []map[string]interface{}
	var ret models.IqnpoolBlockRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	iqnpoolblockrelationship := make(map[string]interface{})
	iqnpoolblockrelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	iqnpoolblockrelationship["class_id"] = item.GetClassId()
	iqnpoolblockrelationship["moid"] = item.GetMoid()
	iqnpoolblockrelationship["object_type"] = item.GetObjectType()
	iqnpoolblockrelationship["selector"] = item.GetSelector()

	iqnpoolblockrelationships = append(iqnpoolblockrelationships, iqnpoolblockrelationship)
	return iqnpoolblockrelationships
}
func flattenMapIqnpoolIqnSuffixBlock(p models.IqnpoolIqnSuffixBlock, d *schema.ResourceData) []map[string]interface{} {
	var iqnpooliqnsuffixblocks []map[string]interface{}
	var ret models.IqnpoolIqnSuffixBlock
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	item := p
	iqnpooliqnsuffixblock := make(map[string]interface{})
	iqnpooliqnsuffixblock["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	iqnpooliqnsuffixblock["class_id"] = item.GetClassId()
	iqnpooliqnsuffixblock["from"] = item.GetFrom()
	iqnpooliqnsuffixblock["object_type"] = item.GetObjectType()
	iqnpooliqnsuffixblock["size"] = item.GetSize()
	iqnpooliqnsuffixblock["suffix"] = item.GetSuffix()
	iqnpooliqnsuffixblock["to"] = item.GetTo()

	iqnpooliqnsuffixblocks = append(iqnpooliqnsuffixblocks, iqnpooliqnsuffixblock)
	return iqnpooliqnsuffixblocks
}
func flattenMapIqnpoolLeaseRelationship(p models.IqnpoolLeaseRelationship, d *schema.ResourceData) []map[string]interface{} {
	var iqnpoolleaserelationships []map[string]interface{}
	var ret models.IqnpoolLeaseRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	iqnpoolleaserelationship := make(map[string]interface{})
	iqnpoolleaserelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	iqnpoolleaserelationship["class_id"] = item.GetClassId()
	iqnpoolleaserelationship["moid"] = item.GetMoid()
	iqnpoolleaserelationship["object_type"] = item.GetObjectType()
	iqnpoolleaserelationship["selector"] = item.GetSelector()

	iqnpoolleaserelationships = append(iqnpoolleaserelationships, iqnpoolleaserelationship)
	return iqnpoolleaserelationships
}
func flattenMapIqnpoolPoolRelationship(p models.IqnpoolPoolRelationship, d *schema.ResourceData) []map[string]interface{} {
	var iqnpoolpoolrelationships []map[string]interface{}
	var ret models.IqnpoolPoolRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	iqnpoolpoolrelationship := make(map[string]interface{})
	iqnpoolpoolrelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	iqnpoolpoolrelationship["class_id"] = item.GetClassId()
	iqnpoolpoolrelationship["moid"] = item.GetMoid()
	iqnpoolpoolrelationship["object_type"] = item.GetObjectType()
	iqnpoolpoolrelationship["selector"] = item.GetSelector()

	iqnpoolpoolrelationships = append(iqnpoolpoolrelationships, iqnpoolpoolrelationship)
	return iqnpoolpoolrelationships
}
func flattenMapIqnpoolPoolMemberRelationship(p models.IqnpoolPoolMemberRelationship, d *schema.ResourceData) []map[string]interface{} {
	var iqnpoolpoolmemberrelationships []map[string]interface{}
	var ret models.IqnpoolPoolMemberRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	iqnpoolpoolmemberrelationship := make(map[string]interface{})
	iqnpoolpoolmemberrelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	iqnpoolpoolmemberrelationship["class_id"] = item.GetClassId()
	iqnpoolpoolmemberrelationship["moid"] = item.GetMoid()
	iqnpoolpoolmemberrelationship["object_type"] = item.GetObjectType()
	iqnpoolpoolmemberrelationship["selector"] = item.GetSelector()

	iqnpoolpoolmemberrelationships = append(iqnpoolpoolmemberrelationships, iqnpoolpoolmemberrelationship)
	return iqnpoolpoolmemberrelationships
}
func flattenMapIqnpoolReservationRelationship(p models.IqnpoolReservationRelationship, d *schema.ResourceData) []map[string]interface{} {
	var iqnpoolreservationrelationships []map[string]interface{}
	var ret models.IqnpoolReservationRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	iqnpoolreservationrelationship := make(map[string]interface{})
	iqnpoolreservationrelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	iqnpoolreservationrelationship["class_id"] = item.GetClassId()
	iqnpoolreservationrelationship["moid"] = item.GetMoid()
	iqnpoolreservationrelationship["object_type"] = item.GetObjectType()
	iqnpoolreservationrelationship["selector"] = item.GetSelector()

	iqnpoolreservationrelationships = append(iqnpoolreservationrelationships, iqnpoolreservationrelationship)
	return iqnpoolreservationrelationships
}
func flattenMapIqnpoolReservationReference(p models.IqnpoolReservationReference, d *schema.ResourceData) []map[string]interface{} {
	var iqnpoolreservationreferences []map[string]interface{}
	var ret models.IqnpoolReservationReference
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	item := p
	iqnpoolreservationreference := make(map[string]interface{})
	iqnpoolreservationreference["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	iqnpoolreservationreference["class_id"] = item.GetClassId()
	iqnpoolreservationreference["object_type"] = item.GetObjectType()
	iqnpoolreservationreference["reservation_moid"] = item.GetReservationMoid()

	iqnpoolreservationreferences = append(iqnpoolreservationreferences, iqnpoolreservationreference)
	return iqnpoolreservationreferences
}
func flattenMapIqnpoolUniverseRelationship(p models.IqnpoolUniverseRelationship, d *schema.ResourceData) []map[string]interface{} {
	var iqnpooluniverserelationships []map[string]interface{}
	var ret models.IqnpoolUniverseRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	iqnpooluniverserelationship := make(map[string]interface{})
	iqnpooluniverserelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	iqnpooluniverserelationship["class_id"] = item.GetClassId()
	iqnpooluniverserelationship["moid"] = item.GetMoid()
	iqnpooluniverserelationship["object_type"] = item.GetObjectType()
	iqnpooluniverserelationship["selector"] = item.GetSelector()

	iqnpooluniverserelationships = append(iqnpooluniverserelationships, iqnpooluniverserelationship)
	return iqnpooluniverserelationships
}
func flattenMapIssueCondition(p models.IssueCondition, d *schema.ResourceData) []map[string]interface{} {
	var issueconditions []map[string]interface{}
	var ret models.IssueCondition
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	item := p
	issuecondition := make(map[string]interface{})
	issuecondition["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	issuecondition["class_id"] = item.GetClassId()
	issuecondition["object_type"] = item.GetObjectType()

	issueconditions = append(issueconditions, issuecondition)
	return issueconditions
}
func flattenMapKubernetesAciCniProfileRelationship(p models.KubernetesAciCniProfileRelationship, d *schema.ResourceData) []map[string]interface{} {
	var kubernetesacicniprofilerelationships []map[string]interface{}
	var ret models.KubernetesAciCniProfileRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	kubernetesacicniprofilerelationship := make(map[string]interface{})
	kubernetesacicniprofilerelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	kubernetesacicniprofilerelationship["class_id"] = item.GetClassId()
	kubernetesacicniprofilerelationship["moid"] = item.GetMoid()
	kubernetesacicniprofilerelationship["object_type"] = item.GetObjectType()
	kubernetesacicniprofilerelationship["selector"] = item.GetSelector()

	kubernetesacicniprofilerelationships = append(kubernetesacicniprofilerelationships, kubernetesacicniprofilerelationship)
	return kubernetesacicniprofilerelationships
}
func flattenMapKubernetesActionInfo(p models.KubernetesActionInfo, d *schema.ResourceData) []map[string]interface{} {
	var kubernetesactioninfos []map[string]interface{}
	var ret models.KubernetesActionInfo
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	item := p
	kubernetesactioninfo := make(map[string]interface{})
	kubernetesactioninfo["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	kubernetesactioninfo["class_id"] = item.GetClassId()
	kubernetesactioninfo["failure_reason"] = item.GetFailureReason()
	kubernetesactioninfo["name"] = item.GetName()
	kubernetesactioninfo["object_type"] = item.GetObjectType()
	kubernetesactioninfo["status"] = item.GetStatus()

	kubernetesactioninfos = append(kubernetesactioninfos, kubernetesactioninfo)
	return kubernetesactioninfos
}
func flattenMapKubernetesAddonConfiguration(p models.KubernetesAddonConfiguration, d *schema.ResourceData) []map[string]interface{} {
	var kubernetesaddonconfigurations []map[string]interface{}
	var ret models.KubernetesAddonConfiguration
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	item := p
	kubernetesaddonconfiguration := make(map[string]interface{})
	kubernetesaddonconfiguration["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	kubernetesaddonconfiguration["class_id"] = item.GetClassId()
	kubernetesaddonconfiguration["install_strategy"] = item.GetInstallStrategy()
	kubernetesaddonconfiguration["object_type"] = item.GetObjectType()
	kubernetesaddonconfiguration["override_sets"] = (func(p []models.KubernetesKeyValue, d *schema.ResourceData) []map[string]interface{} {
		var kuberneteskeyvalues []map[string]interface{}
		if len(p) == 0 {
			return nil
		}
		for _, item := range p {
			kuberneteskeyvalue := make(map[string]interface{})
			kuberneteskeyvalue["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
			kuberneteskeyvalue["class_id"] = item.GetClassId()
			kuberneteskeyvalue["key"] = item.GetKey()
			kuberneteskeyvalue["object_type"] = item.GetObjectType()
			kuberneteskeyvalue["value"] = item.GetValue()
			kuberneteskeyvalues = append(kuberneteskeyvalues, kuberneteskeyvalue)
		}
		return kuberneteskeyvalues
	})(item.GetOverrideSets(), d)
	kubernetesaddonconfiguration["overrides"] = item.GetOverrides()
	kubernetesaddonconfiguration["release_name"] = item.GetReleaseName()
	kubernetesaddonconfiguration["release_namespace"] = item.GetReleaseNamespace()
	kubernetesaddonconfiguration["upgrade_strategy"] = item.GetUpgradeStrategy()

	kubernetesaddonconfigurations = append(kubernetesaddonconfigurations, kubernetesaddonconfiguration)
	return kubernetesaddonconfigurations
}
func flattenMapKubernetesAddonDefinitionRelationship(p models.KubernetesAddonDefinitionRelationship, d *schema.ResourceData) []map[string]interface{} {
	var kubernetesaddondefinitionrelationships []map[string]interface{}
	var ret models.KubernetesAddonDefinitionRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	kubernetesaddondefinitionrelationship := make(map[string]interface{})
	kubernetesaddondefinitionrelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	kubernetesaddondefinitionrelationship["class_id"] = item.GetClassId()
	kubernetesaddondefinitionrelationship["moid"] = item.GetMoid()
	kubernetesaddondefinitionrelationship["object_type"] = item.GetObjectType()
	kubernetesaddondefinitionrelationship["selector"] = item.GetSelector()

	kubernetesaddondefinitionrelationships = append(kubernetesaddondefinitionrelationships, kubernetesaddondefinitionrelationship)
	return kubernetesaddondefinitionrelationships
}
func flattenMapKubernetesBaremetalNetworkInfo(p models.KubernetesBaremetalNetworkInfo, d *schema.ResourceData) []map[string]interface{} {
	var kubernetesbaremetalnetworkinfos []map[string]interface{}
	var ret models.KubernetesBaremetalNetworkInfo
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	item := p
	kubernetesbaremetalnetworkinfo := make(map[string]interface{})
	kubernetesbaremetalnetworkinfo["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	kubernetesbaremetalnetworkinfo["class_id"] = item.GetClassId()
	kubernetesbaremetalnetworkinfo["ethernets"] = (func(p []models.KubernetesEthernet, d *schema.ResourceData) []map[string]interface{} {
		var kubernetesethernets []map[string]interface{}
		if len(p) == 0 {
			return nil
		}
		for _, item := range p {
			kubernetesethernet := make(map[string]interface{})
			kubernetesethernet["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
			kubernetesethernet["addresses"] = item.GetAddresses()
			kubernetesethernet["class_id"] = item.GetClassId()
			kubernetesethernet["gateway"] = item.GetGateway()
			kubernetesethernet["ip_v4_configs"] = (func(p []models.KubernetesIpV4Config, d *schema.ResourceData) []map[string]interface{} {
				var kubernetesipv4configs []map[string]interface{}
				if len(p) == 0 {
					return nil
				}
				for _, item := range p {
					kubernetesipv4config := make(map[string]interface{})
					kubernetesipv4config["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
					kubernetesipv4config["class_id"] = item.GetClassId()
					kubernetesipv4config["ip"] = item.GetIp()
					kubernetesipv4config["lease"] = (func(p models.MoMoRef, d *schema.ResourceData) []map[string]interface{} {
						var momorefs []map[string]interface{}
						var ret models.MoMoRef
						if reflect.DeepEqual(ret, p) {
							return nil
						}
						item := p
						momoref := make(map[string]interface{})
						momoref["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
						momoref["class_id"] = item.GetClassId()
						momoref["moid"] = item.GetMoid()
						momoref["object_type"] = item.GetObjectType()
						momoref["selector"] = item.GetSelector()

						momorefs = append(momorefs, momoref)
						return momorefs
					})(item.GetLease(), d)
					kubernetesipv4config["object_type"] = item.GetObjectType()
					kubernetesipv4configs = append(kubernetesipv4configs, kubernetesipv4config)
				}
				return kubernetesipv4configs
			})(item.GetIpV4Configs(), d)
			kubernetesethernet["matcher"] = (func(p models.KubernetesEthernetMatcher, d *schema.ResourceData) []map[string]interface{} {
				var kubernetesethernetmatchers []map[string]interface{}
				var ret models.KubernetesEthernetMatcher
				if reflect.DeepEqual(ret, p) {
					return nil
				}
				item := p
				kubernetesethernetmatcher := make(map[string]interface{})
				kubernetesethernetmatcher["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
				kubernetesethernetmatcher["class_id"] = item.GetClassId()
				kubernetesethernetmatcher["object_type"] = item.GetObjectType()
				kubernetesethernetmatcher["type"] = item.GetType()
				kubernetesethernetmatcher["value"] = item.GetValue()

				kubernetesethernetmatchers = append(kubernetesethernetmatchers, kubernetesethernetmatcher)
				return kubernetesethernetmatchers
			})(item.GetMatcher(), d)
			kubernetesethernet["mtu"] = item.GetMtu()
			kubernetesethernet["name"] = item.GetName()
			kubernetesethernet["object_type"] = item.GetObjectType()
			kubernetesethernet["provider_name"] = item.GetProviderName()
			kubernetesethernet["routes"] = (func(p []models.KubernetesRoute, d *schema.ResourceData) []map[string]interface{} {
				var kubernetesroutes []map[string]interface{}
				if len(p) == 0 {
					return nil
				}
				for _, item := range p {
					kubernetesroute := make(map[string]interface{})
					kubernetesroute["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
					kubernetesroute["class_id"] = item.GetClassId()
					kubernetesroute["object_type"] = item.GetObjectType()
					kubernetesroute["to"] = item.GetTo()
					kubernetesroute["via"] = item.GetVia()
					kubernetesroutes = append(kubernetesroutes, kubernetesroute)
				}
				return kubernetesroutes
			})(item.GetRoutes(), d)
			kubernetesethernets = append(kubernetesethernets, kubernetesethernet)
		}
		return kubernetesethernets
	})(item.GetEthernets(), d)
	kubernetesbaremetalnetworkinfo["object_type"] = item.GetObjectType()
	kubernetesbaremetalnetworkinfo["ovsbonds"] = (func(p []models.KubernetesOvsBond, d *schema.ResourceData) []map[string]interface{} {
		var kubernetesovsbonds []map[string]interface{}
		if len(p) == 0 {
			return nil
		}
		for _, item := range p {
			kubernetesovsbond := make(map[string]interface{})
			kubernetesovsbond["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
			kubernetesovsbond["addresses"] = item.GetAddresses()
			kubernetesovsbond["class_id"] = item.GetClassId()
			kubernetesovsbond["gateway"] = item.GetGateway()
			kubernetesovsbond["interfaces"] = item.GetInterfaces()
			kubernetesovsbond["ip_v4_configs"] = (func(p []models.KubernetesIpV4Config, d *schema.ResourceData) []map[string]interface{} {
				var kubernetesipv4configs []map[string]interface{}
				if len(p) == 0 {
					return nil
				}
				for _, item := range p {
					kubernetesipv4config := make(map[string]interface{})
					kubernetesipv4config["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
					kubernetesipv4config["class_id"] = item.GetClassId()
					kubernetesipv4config["ip"] = item.GetIp()
					kubernetesipv4config["lease"] = (func(p models.MoMoRef, d *schema.ResourceData) []map[string]interface{} {
						var momorefs []map[string]interface{}
						var ret models.MoMoRef
						if reflect.DeepEqual(ret, p) {
							return nil
						}
						item := p
						momoref := make(map[string]interface{})
						momoref["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
						momoref["class_id"] = item.GetClassId()
						momoref["moid"] = item.GetMoid()
						momoref["object_type"] = item.GetObjectType()
						momoref["selector"] = item.GetSelector()

						momorefs = append(momorefs, momoref)
						return momorefs
					})(item.GetLease(), d)
					kubernetesipv4config["object_type"] = item.GetObjectType()
					kubernetesipv4configs = append(kubernetesipv4configs, kubernetesipv4config)
				}
				return kubernetesipv4configs
			})(item.GetIpV4Configs(), d)
			kubernetesovsbond["mtu"] = item.GetMtu()
			kubernetesovsbond["name"] = item.GetName()
			kubernetesovsbond["object_type"] = item.GetObjectType()
			kubernetesovsbond["routes"] = (func(p []models.KubernetesRoute, d *schema.ResourceData) []map[string]interface{} {
				var kubernetesroutes []map[string]interface{}
				if len(p) == 0 {
					return nil
				}
				for _, item := range p {
					kubernetesroute := make(map[string]interface{})
					kubernetesroute["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
					kubernetesroute["class_id"] = item.GetClassId()
					kubernetesroute["object_type"] = item.GetObjectType()
					kubernetesroute["to"] = item.GetTo()
					kubernetesroute["via"] = item.GetVia()
					kubernetesroutes = append(kubernetesroutes, kubernetesroute)
				}
				return kubernetesroutes
			})(item.GetRoutes(), d)
			kubernetesovsbond["vlan"] = item.GetVlan()
			kubernetesovsbonds = append(kubernetesovsbonds, kubernetesovsbond)
		}
		return kubernetesovsbonds
	})(item.GetOvsbonds(), d)

	kubernetesbaremetalnetworkinfos = append(kubernetesbaremetalnetworkinfos, kubernetesbaremetalnetworkinfo)
	return kubernetesbaremetalnetworkinfos
}
func flattenMapKubernetesBaseInfrastructureProviderRelationship(p models.KubernetesBaseInfrastructureProviderRelationship, d *schema.ResourceData) []map[string]interface{} {
	var kubernetesbaseinfrastructureproviderrelationships []map[string]interface{}
	var ret models.KubernetesBaseInfrastructureProviderRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	kubernetesbaseinfrastructureproviderrelationship := make(map[string]interface{})
	kubernetesbaseinfrastructureproviderrelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	kubernetesbaseinfrastructureproviderrelationship["class_id"] = item.GetClassId()
	kubernetesbaseinfrastructureproviderrelationship["moid"] = item.GetMoid()
	kubernetesbaseinfrastructureproviderrelationship["object_type"] = item.GetObjectType()
	kubernetesbaseinfrastructureproviderrelationship["selector"] = item.GetSelector()

	kubernetesbaseinfrastructureproviderrelationships = append(kubernetesbaseinfrastructureproviderrelationships, kubernetesbaseinfrastructureproviderrelationship)
	return kubernetesbaseinfrastructureproviderrelationships
}
func flattenMapKubernetesBaseVirtualMachineInfraConfig(p models.KubernetesBaseVirtualMachineInfraConfig, d *schema.ResourceData) []map[string]interface{} {
	var kubernetesbasevirtualmachineinfraconfigs []map[string]interface{}
	var ret models.KubernetesBaseVirtualMachineInfraConfig
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	item := p
	kubernetesbasevirtualmachineinfraconfig := make(map[string]interface{})
	kubernetesbasevirtualmachineinfraconfig["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	kubernetesbasevirtualmachineinfraconfig["class_id"] = item.GetClassId()
	kubernetesbasevirtualmachineinfraconfig["interfaces"] = item.GetInterfaces()
	kubernetesbasevirtualmachineinfraconfig["network_interfaces"] = (func(p []models.KubernetesNetworkInterfaceSpec, d *schema.ResourceData) []map[string]interface{} {
		var kubernetesnetworkinterfacespecs []map[string]interface{}
		if len(p) == 0 {
			return nil
		}
		for _, item := range p {
			kubernetesnetworkinterfacespec := make(map[string]interface{})
			kubernetesnetworkinterfacespec["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
			kubernetesnetworkinterfacespec["class_id"] = item.GetClassId()
			kubernetesnetworkinterfacespec["mtu"] = item.GetMtu()
			kubernetesnetworkinterfacespec["name"] = item.GetName()
			kubernetesnetworkinterfacespec["object_type"] = item.GetObjectType()
			kubernetesnetworkinterfacespec["pools"] = (func(p []models.MoMoRef, d *schema.ResourceData) []map[string]interface{} {
				var momorefs []map[string]interface{}
				if len(p) == 0 {
					return nil
				}
				for _, item := range p {
					momoref := make(map[string]interface{})
					momoref["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
					momoref["class_id"] = item.GetClassId()
					momoref["moid"] = item.GetMoid()
					momoref["object_type"] = item.GetObjectType()
					momoref["selector"] = item.GetSelector()
					momorefs = append(momorefs, momoref)
				}
				return momorefs
			})(item.GetPools(), d)
			kubernetesnetworkinterfacespec["provider_name"] = item.GetProviderName()
			kubernetesnetworkinterfacespec["vrf"] = (func(p models.MoMoRef, d *schema.ResourceData) []map[string]interface{} {
				var momorefs []map[string]interface{}
				var ret models.MoMoRef
				if reflect.DeepEqual(ret, p) {
					return nil
				}
				item := p
				momoref := make(map[string]interface{})
				momoref["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
				momoref["class_id"] = item.GetClassId()
				momoref["moid"] = item.GetMoid()
				momoref["object_type"] = item.GetObjectType()
				momoref["selector"] = item.GetSelector()

				momorefs = append(momorefs, momoref)
				return momorefs
			})(item.GetVrf(), d)
			kubernetesnetworkinterfacespecs = append(kubernetesnetworkinterfacespecs, kubernetesnetworkinterfacespec)
		}
		return kubernetesnetworkinterfacespecs
	})(item.GetNetworkInterfaces(), d)
	kubernetesbasevirtualmachineinfraconfig["object_type"] = item.GetObjectType()

	kubernetesbasevirtualmachineinfraconfigs = append(kubernetesbasevirtualmachineinfraconfigs, kubernetesbasevirtualmachineinfraconfig)
	return kubernetesbasevirtualmachineinfraconfigs
}
func flattenMapKubernetesCatalogRelationship(p models.KubernetesCatalogRelationship, d *schema.ResourceData) []map[string]interface{} {
	var kubernetescatalogrelationships []map[string]interface{}
	var ret models.KubernetesCatalogRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	kubernetescatalogrelationship := make(map[string]interface{})
	kubernetescatalogrelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	kubernetescatalogrelationship["class_id"] = item.GetClassId()
	kubernetescatalogrelationship["moid"] = item.GetMoid()
	kubernetescatalogrelationship["object_type"] = item.GetObjectType()
	kubernetescatalogrelationship["selector"] = item.GetSelector()

	kubernetescatalogrelationships = append(kubernetescatalogrelationships, kubernetescatalogrelationship)
	return kubernetescatalogrelationships
}
func flattenMapKubernetesClusterRelationship(p models.KubernetesClusterRelationship, d *schema.ResourceData) []map[string]interface{} {
	var kubernetesclusterrelationships []map[string]interface{}
	var ret models.KubernetesClusterRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	kubernetesclusterrelationship := make(map[string]interface{})
	kubernetesclusterrelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	kubernetesclusterrelationship["class_id"] = item.GetClassId()
	kubernetesclusterrelationship["moid"] = item.GetMoid()
	kubernetesclusterrelationship["object_type"] = item.GetObjectType()
	kubernetesclusterrelationship["selector"] = item.GetSelector()

	kubernetesclusterrelationships = append(kubernetesclusterrelationships, kubernetesclusterrelationship)
	return kubernetesclusterrelationships
}
func flattenMapKubernetesClusterAddonProfileRelationship(p models.KubernetesClusterAddonProfileRelationship, d *schema.ResourceData) []map[string]interface{} {
	var kubernetesclusteraddonprofilerelationships []map[string]interface{}
	var ret models.KubernetesClusterAddonProfileRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	kubernetesclusteraddonprofilerelationship := make(map[string]interface{})
	kubernetesclusteraddonprofilerelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	kubernetesclusteraddonprofilerelationship["class_id"] = item.GetClassId()
	kubernetesclusteraddonprofilerelationship["moid"] = item.GetMoid()
	kubernetesclusteraddonprofilerelationship["object_type"] = item.GetObjectType()
	kubernetesclusteraddonprofilerelationship["selector"] = item.GetSelector()

	kubernetesclusteraddonprofilerelationships = append(kubernetesclusteraddonprofilerelationships, kubernetesclusteraddonprofilerelationship)
	return kubernetesclusteraddonprofilerelationships
}
func flattenMapKubernetesClusterCertificateConfiguration(p models.KubernetesClusterCertificateConfiguration, d *schema.ResourceData) []map[string]interface{} {
	var kubernetesclustercertificateconfigurations []map[string]interface{}
	var ret models.KubernetesClusterCertificateConfiguration
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	item := p
	kubernetesclustercertificateconfiguration := make(map[string]interface{})
	kubernetesclustercertificateconfiguration["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	kubernetesclustercertificateconfiguration["ca_cert"] = item.GetCaCert()
	ca_key_x, exists := d.GetOk("cert_config")
	if exists && ca_key_x != nil {
		ca_key_y := ca_key_x.([]interface{})[0].(map[string]interface{})
		kubernetesclustercertificateconfiguration["ca_key"] = ca_key_y["ca_key"]
	}
	kubernetesclustercertificateconfiguration["class_id"] = item.GetClassId()
	kubernetesclustercertificateconfiguration["etcd_cert"] = item.GetEtcdCert()
	kubernetesclustercertificateconfiguration["etcd_encryption_key"] = item.GetEtcdEncryptionKey()
	etcd_key_x, exists := d.GetOk("cert_config")
	if exists && etcd_key_x != nil {
		etcd_key_y := etcd_key_x.([]interface{})[0].(map[string]interface{})
		kubernetesclustercertificateconfiguration["etcd_key"] = etcd_key_y["etcd_key"]
	}
	kubernetesclustercertificateconfiguration["front_proxy_cert"] = item.GetFrontProxyCert()
	front_proxy_key_x, exists := d.GetOk("cert_config")
	if exists && front_proxy_key_x != nil {
		front_proxy_key_y := front_proxy_key_x.([]interface{})[0].(map[string]interface{})
		kubernetesclustercertificateconfiguration["front_proxy_key"] = front_proxy_key_y["front_proxy_key"]
	}
	kubernetesclustercertificateconfiguration["object_type"] = item.GetObjectType()
	sa_private_key_x, exists := d.GetOk("cert_config")
	if exists && sa_private_key_x != nil {
		sa_private_key_y := sa_private_key_x.([]interface{})[0].(map[string]interface{})
		kubernetesclustercertificateconfiguration["sa_private_key"] = sa_private_key_y["sa_private_key"]
	}
	kubernetesclustercertificateconfiguration["sa_public_key"] = item.GetSaPublicKey()

	kubernetesclustercertificateconfigurations = append(kubernetesclustercertificateconfigurations, kubernetesclustercertificateconfiguration)
	return kubernetesclustercertificateconfigurations
}
func flattenMapKubernetesClusterManagementConfig(p models.KubernetesClusterManagementConfig, d *schema.ResourceData) []map[string]interface{} {
	var kubernetesclustermanagementconfigs []map[string]interface{}
	var ret models.KubernetesClusterManagementConfig
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	item := p
	kubernetesclustermanagementconfig := make(map[string]interface{})
	kubernetesclustermanagementconfig["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	kubernetesclustermanagementconfig["class_id"] = item.GetClassId()
	kubernetesclustermanagementconfig["is_tac_passwd_set"] = item.GetIsTacPasswdSet()
	kubernetesclustermanagementconfig["load_balancer_count"] = item.GetLoadBalancerCount()
	kubernetesclustermanagementconfig["load_balancers"] = item.GetLoadBalancers()
	kubernetesclustermanagementconfig["master_vip"] = item.GetMasterVip()
	kubernetesclustermanagementconfig["object_type"] = item.GetObjectType()
	kubernetesclustermanagementconfig["ssh_keys"] = item.GetSshKeys()
	kubernetesclustermanagementconfig["ssh_user"] = item.GetSshUser()
	tac_passwd_x, exists := d.GetOk("management_config")
	if exists && tac_passwd_x != nil {
		tac_passwd_y := tac_passwd_x.([]interface{})[0].(map[string]interface{})
		kubernetesclustermanagementconfig["tac_passwd"] = tac_passwd_y["tac_passwd"]
	}

	kubernetesclustermanagementconfigs = append(kubernetesclustermanagementconfigs, kubernetesclustermanagementconfig)
	return kubernetesclustermanagementconfigs
}
func flattenMapKubernetesClusterProfileRelationship(p models.KubernetesClusterProfileRelationship, d *schema.ResourceData) []map[string]interface{} {
	var kubernetesclusterprofilerelationships []map[string]interface{}
	var ret models.KubernetesClusterProfileRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	kubernetesclusterprofilerelationship := make(map[string]interface{})
	kubernetesclusterprofilerelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	kubernetesclusterprofilerelationship["class_id"] = item.GetClassId()
	kubernetesclusterprofilerelationship["moid"] = item.GetMoid()
	kubernetesclusterprofilerelationship["object_type"] = item.GetObjectType()
	kubernetesclusterprofilerelationship["selector"] = item.GetSelector()

	kubernetesclusterprofilerelationships = append(kubernetesclusterprofilerelationships, kubernetesclusterprofilerelationship)
	return kubernetesclusterprofilerelationships
}
func flattenMapKubernetesCniConfig(p models.KubernetesCniConfig, d *schema.ResourceData) []map[string]interface{} {
	var kubernetescniconfigs []map[string]interface{}
	var ret models.KubernetesCniConfig
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	item := p
	kubernetescniconfig := make(map[string]interface{})
	kubernetescniconfig["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	kubernetescniconfig["class_id"] = item.GetClassId()
	kubernetescniconfig["object_type"] = item.GetObjectType()
	kubernetescniconfig["registry"] = item.GetRegistry()
	kubernetescniconfig["nr_version"] = item.GetVersion()

	kubernetescniconfigs = append(kubernetescniconfigs, kubernetescniconfig)
	return kubernetescniconfigs
}
func flattenMapKubernetesConfigResultRelationship(p models.KubernetesConfigResultRelationship, d *schema.ResourceData) []map[string]interface{} {
	var kubernetesconfigresultrelationships []map[string]interface{}
	var ret models.KubernetesConfigResultRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	kubernetesconfigresultrelationship := make(map[string]interface{})
	kubernetesconfigresultrelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	kubernetesconfigresultrelationship["class_id"] = item.GetClassId()
	kubernetesconfigresultrelationship["moid"] = item.GetMoid()
	kubernetesconfigresultrelationship["object_type"] = item.GetObjectType()
	kubernetesconfigresultrelationship["selector"] = item.GetSelector()

	kubernetesconfigresultrelationships = append(kubernetesconfigresultrelationships, kubernetesconfigresultrelationship)
	return kubernetesconfigresultrelationships
}
func flattenMapKubernetesConfiguration(p models.KubernetesConfiguration, d *schema.ResourceData) []map[string]interface{} {
	var kubernetesconfigurations []map[string]interface{}
	var ret models.KubernetesConfiguration
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	item := p
	kubernetesconfiguration := make(map[string]interface{})
	kubernetesconfiguration["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	kubernetesconfiguration["class_id"] = item.GetClassId()
	kubernetesconfiguration["kube_config"] = item.GetKubeConfig()
	kubernetesconfiguration["object_type"] = item.GetObjectType()

	kubernetesconfigurations = append(kubernetesconfigurations, kubernetesconfiguration)
	return kubernetesconfigurations
}
func flattenMapKubernetesContainerRuntimePolicyRelationship(p models.KubernetesContainerRuntimePolicyRelationship, d *schema.ResourceData) []map[string]interface{} {
	var kubernetescontainerruntimepolicyrelationships []map[string]interface{}
	var ret models.KubernetesContainerRuntimePolicyRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	kubernetescontainerruntimepolicyrelationship := make(map[string]interface{})
	kubernetescontainerruntimepolicyrelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	kubernetescontainerruntimepolicyrelationship["class_id"] = item.GetClassId()
	kubernetescontainerruntimepolicyrelationship["moid"] = item.GetMoid()
	kubernetescontainerruntimepolicyrelationship["object_type"] = item.GetObjectType()
	kubernetescontainerruntimepolicyrelationship["selector"] = item.GetSelector()

	kubernetescontainerruntimepolicyrelationships = append(kubernetescontainerruntimepolicyrelationships, kubernetescontainerruntimepolicyrelationship)
	return kubernetescontainerruntimepolicyrelationships
}
func flattenMapKubernetesDaemonSetStatus(p models.KubernetesDaemonSetStatus, d *schema.ResourceData) []map[string]interface{} {
	var kubernetesdaemonsetstatuss []map[string]interface{}
	var ret models.KubernetesDaemonSetStatus
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	item := p
	kubernetesdaemonsetstatus := make(map[string]interface{})
	kubernetesdaemonsetstatus["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	kubernetesdaemonsetstatus["class_id"] = item.GetClassId()
	kubernetesdaemonsetstatus["current_number_scheduled"] = item.GetCurrentNumberScheduled()
	kubernetesdaemonsetstatus["desired_number_scheduled"] = item.GetDesiredNumberScheduled()
	kubernetesdaemonsetstatus["number_available"] = item.GetNumberAvailable()
	kubernetesdaemonsetstatus["number_misscheduled"] = item.GetNumberMisscheduled()
	kubernetesdaemonsetstatus["number_ready"] = item.GetNumberReady()
	kubernetesdaemonsetstatus["object_type"] = item.GetObjectType()
	kubernetesdaemonsetstatus["observed_generation"] = item.GetObservedGeneration()
	kubernetesdaemonsetstatus["updated_number_scheduled"] = item.GetUpdatedNumberScheduled()

	kubernetesdaemonsetstatuss = append(kubernetesdaemonsetstatuss, kubernetesdaemonsetstatus)
	return kubernetesdaemonsetstatuss
}
func flattenMapKubernetesDeploymentStatus(p models.KubernetesDeploymentStatus, d *schema.ResourceData) []map[string]interface{} {
	var kubernetesdeploymentstatuss []map[string]interface{}
	var ret models.KubernetesDeploymentStatus
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	item := p
	kubernetesdeploymentstatus := make(map[string]interface{})
	kubernetesdeploymentstatus["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	kubernetesdeploymentstatus["available_replicas"] = item.GetAvailableReplicas()
	kubernetesdeploymentstatus["class_id"] = item.GetClassId()
	kubernetesdeploymentstatus["object_type"] = item.GetObjectType()
	kubernetesdeploymentstatus["observed_generation"] = item.GetObservedGeneration()
	kubernetesdeploymentstatus["ready_replicas"] = item.GetReadyReplicas()
	kubernetesdeploymentstatus["replicas"] = item.GetReplicas()
	kubernetesdeploymentstatus["updated_replicas"] = item.GetUpdatedReplicas()

	kubernetesdeploymentstatuss = append(kubernetesdeploymentstatuss, kubernetesdeploymentstatus)
	return kubernetesdeploymentstatuss
}
func flattenMapKubernetesHttpProxyPolicyRelationship(p models.KubernetesHttpProxyPolicyRelationship, d *schema.ResourceData) []map[string]interface{} {
	var kuberneteshttpproxypolicyrelationships []map[string]interface{}
	var ret models.KubernetesHttpProxyPolicyRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	kuberneteshttpproxypolicyrelationship := make(map[string]interface{})
	kuberneteshttpproxypolicyrelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	kuberneteshttpproxypolicyrelationship["class_id"] = item.GetClassId()
	kuberneteshttpproxypolicyrelationship["moid"] = item.GetMoid()
	kuberneteshttpproxypolicyrelationship["object_type"] = item.GetObjectType()
	kuberneteshttpproxypolicyrelationship["selector"] = item.GetSelector()

	kuberneteshttpproxypolicyrelationships = append(kuberneteshttpproxypolicyrelationships, kuberneteshttpproxypolicyrelationship)
	return kuberneteshttpproxypolicyrelationships
}
func flattenMapKubernetesIngressStatus(p models.KubernetesIngressStatus, d *schema.ResourceData) []map[string]interface{} {
	var kubernetesingressstatuss []map[string]interface{}
	var ret models.KubernetesIngressStatus
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	item := p
	kubernetesingressstatus := make(map[string]interface{})
	kubernetesingressstatus["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	kubernetesingressstatus["class_id"] = item.GetClassId()
	kubernetesingressstatus["load_balancer"] = (func(p models.KubernetesLoadBalancer, d *schema.ResourceData) []map[string]interface{} {
		var kubernetesloadbalancers []map[string]interface{}
		var ret models.KubernetesLoadBalancer
		if reflect.DeepEqual(ret, p) {
			return nil
		}
		item := p
		kubernetesloadbalancer := make(map[string]interface{})
		kubernetesloadbalancer["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
		kubernetesloadbalancer["class_id"] = item.GetClassId()
		kubernetesloadbalancer["ip_addresses"] = item.GetIpAddresses()
		kubernetesloadbalancer["object_type"] = item.GetObjectType()

		kubernetesloadbalancers = append(kubernetesloadbalancers, kubernetesloadbalancer)
		return kubernetesloadbalancers
	})(item.GetLoadBalancer(), d)
	kubernetesingressstatus["object_type"] = item.GetObjectType()

	kubernetesingressstatuss = append(kubernetesingressstatuss, kubernetesingressstatus)
	return kubernetesingressstatuss
}
func flattenMapKubernetesNetworkPolicyRelationship(p models.KubernetesNetworkPolicyRelationship, d *schema.ResourceData) []map[string]interface{} {
	var kubernetesnetworkpolicyrelationships []map[string]interface{}
	var ret models.KubernetesNetworkPolicyRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	kubernetesnetworkpolicyrelationship := make(map[string]interface{})
	kubernetesnetworkpolicyrelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	kubernetesnetworkpolicyrelationship["class_id"] = item.GetClassId()
	kubernetesnetworkpolicyrelationship["moid"] = item.GetMoid()
	kubernetesnetworkpolicyrelationship["object_type"] = item.GetObjectType()
	kubernetesnetworkpolicyrelationship["selector"] = item.GetSelector()

	kubernetesnetworkpolicyrelationships = append(kubernetesnetworkpolicyrelationships, kubernetesnetworkpolicyrelationship)
	return kubernetesnetworkpolicyrelationships
}
func flattenMapKubernetesNodeGroupProfileRelationship(p models.KubernetesNodeGroupProfileRelationship, d *schema.ResourceData) []map[string]interface{} {
	var kubernetesnodegroupprofilerelationships []map[string]interface{}
	var ret models.KubernetesNodeGroupProfileRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	kubernetesnodegroupprofilerelationship := make(map[string]interface{})
	kubernetesnodegroupprofilerelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	kubernetesnodegroupprofilerelationship["class_id"] = item.GetClassId()
	kubernetesnodegroupprofilerelationship["moid"] = item.GetMoid()
	kubernetesnodegroupprofilerelationship["object_type"] = item.GetObjectType()
	kubernetesnodegroupprofilerelationship["selector"] = item.GetSelector()

	kubernetesnodegroupprofilerelationships = append(kubernetesnodegroupprofilerelationships, kubernetesnodegroupprofilerelationship)
	return kubernetesnodegroupprofilerelationships
}
func flattenMapKubernetesNodeInfo(p models.KubernetesNodeInfo, d *schema.ResourceData) []map[string]interface{} {
	var kubernetesnodeinfos []map[string]interface{}
	var ret models.KubernetesNodeInfo
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	item := p
	kubernetesnodeinfo := make(map[string]interface{})
	kubernetesnodeinfo["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	kubernetesnodeinfo["architecture"] = item.GetArchitecture()
	kubernetesnodeinfo["boot_id"] = item.GetBootId()
	kubernetesnodeinfo["class_id"] = item.GetClassId()
	kubernetesnodeinfo["container_runtime_version"] = item.GetContainerRuntimeVersion()
	kubernetesnodeinfo["kernel_version"] = item.GetKernelVersion()
	kubernetesnodeinfo["kube_proxy_version"] = item.GetKubeProxyVersion()
	kubernetesnodeinfo["kubelet_version"] = item.GetKubeletVersion()
	kubernetesnodeinfo["machine_id"] = item.GetMachineId()
	kubernetesnodeinfo["object_type"] = item.GetObjectType()
	kubernetesnodeinfo["operating_system"] = item.GetOperatingSystem()
	kubernetesnodeinfo["os_image"] = item.GetOsImage()
	kubernetesnodeinfo["system_uuid"] = item.GetSystemUuid()

	kubernetesnodeinfos = append(kubernetesnodeinfos, kubernetesnodeinfo)
	return kubernetesnodeinfos
}
func flattenMapKubernetesNodeProfileRelationship(p models.KubernetesNodeProfileRelationship, d *schema.ResourceData) []map[string]interface{} {
	var kubernetesnodeprofilerelationships []map[string]interface{}
	var ret models.KubernetesNodeProfileRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	kubernetesnodeprofilerelationship := make(map[string]interface{})
	kubernetesnodeprofilerelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	kubernetesnodeprofilerelationship["class_id"] = item.GetClassId()
	kubernetesnodeprofilerelationship["moid"] = item.GetMoid()
	kubernetesnodeprofilerelationship["object_type"] = item.GetObjectType()
	kubernetesnodeprofilerelationship["selector"] = item.GetSelector()

	kubernetesnodeprofilerelationships = append(kubernetesnodeprofilerelationships, kubernetesnodeprofilerelationship)
	return kubernetesnodeprofilerelationships
}
func flattenMapKubernetesNodeSpec(p models.KubernetesNodeSpec, d *schema.ResourceData) []map[string]interface{} {
	var kubernetesnodespecs []map[string]interface{}
	var ret models.KubernetesNodeSpec
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	item := p
	kubernetesnodespec := make(map[string]interface{})
	kubernetesnodespec["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	kubernetesnodespec["class_id"] = item.GetClassId()
	kubernetesnodespec["object_type"] = item.GetObjectType()
	kubernetesnodespec["pod_cidr"] = item.GetPodCidr()
	kubernetesnodespec["provider_id"] = item.GetProviderId()

	kubernetesnodespecs = append(kubernetesnodespecs, kubernetesnodespec)
	return kubernetesnodespecs
}
func flattenMapKubernetesObjectMeta(p models.KubernetesObjectMeta, d *schema.ResourceData) []map[string]interface{} {
	var kubernetesobjectmetas []map[string]interface{}
	var ret models.KubernetesObjectMeta
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	item := p
	kubernetesobjectmeta := make(map[string]interface{})
	kubernetesobjectmeta["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	kubernetesobjectmeta["class_id"] = item.GetClassId()
	kubernetesobjectmeta["creation_timestamp"] = item.GetCreationTimestamp()
	kubernetesobjectmeta["name"] = item.GetName()
	kubernetesobjectmeta["namespace"] = item.GetNamespace()
	kubernetesobjectmeta["object_type"] = item.GetObjectType()
	kubernetesobjectmeta["resource_version"] = item.GetResourceVersion()
	kubernetesobjectmeta["uuid"] = item.GetUuid()

	kubernetesobjectmetas = append(kubernetesobjectmetas, kubernetesobjectmeta)
	return kubernetesobjectmetas
}
func flattenMapKubernetesPodStatus(p models.KubernetesPodStatus, d *schema.ResourceData) []map[string]interface{} {
	var kubernetespodstatuss []map[string]interface{}
	var ret models.KubernetesPodStatus
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	item := p
	kubernetespodstatus := make(map[string]interface{})
	kubernetespodstatus["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	kubernetespodstatus["class_id"] = item.GetClassId()
	kubernetespodstatus["host_ip"] = item.GetHostIp()
	kubernetespodstatus["object_type"] = item.GetObjectType()
	kubernetespodstatus["phase"] = item.GetPhase()
	kubernetespodstatus["pod_ip"] = item.GetPodIp()
	kubernetespodstatus["qos_class"] = item.GetQosClass()
	kubernetespodstatus["start_time"] = item.GetStartTime()

	kubernetespodstatuss = append(kubernetespodstatuss, kubernetespodstatus)
	return kubernetespodstatuss
}
func flattenMapKubernetesProxyConfig(p models.KubernetesProxyConfig, d *schema.ResourceData) []map[string]interface{} {
	var kubernetesproxyconfigs []map[string]interface{}
	var ret models.KubernetesProxyConfig
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	item := p
	kubernetesproxyconfig := make(map[string]interface{})
	kubernetesproxyconfig["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	kubernetesproxyconfig["class_id"] = item.GetClassId()
	kubernetesproxyconfig["hostname"] = item.GetHostname()
	kubernetesproxyconfig["is_password_set"] = item.GetIsPasswordSet()
	kubernetesproxyconfig["object_type"] = item.GetObjectType()
	password_x, exists := d.GetOk("docker_http_proxy")
	if exists && password_x != nil {
		password_y := password_x.([]interface{})[0].(map[string]interface{})
		kubernetesproxyconfig["password"] = password_y["password"]
	}
	kubernetesproxyconfig["port"] = item.GetPort()
	kubernetesproxyconfig["protocol"] = item.GetProtocol()
	kubernetesproxyconfig["username"] = item.GetUsername()

	kubernetesproxyconfigs = append(kubernetesproxyconfigs, kubernetesproxyconfig)
	return kubernetesproxyconfigs
}
func flattenMapKubernetesServiceStatus(p models.KubernetesServiceStatus, d *schema.ResourceData) []map[string]interface{} {
	var kubernetesservicestatuss []map[string]interface{}
	var ret models.KubernetesServiceStatus
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	item := p
	kubernetesservicestatus := make(map[string]interface{})
	kubernetesservicestatus["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	kubernetesservicestatus["class_id"] = item.GetClassId()
	kubernetesservicestatus["load_balancer"] = (func(p models.KubernetesLoadBalancer, d *schema.ResourceData) []map[string]interface{} {
		var kubernetesloadbalancers []map[string]interface{}
		var ret models.KubernetesLoadBalancer
		if reflect.DeepEqual(ret, p) {
			return nil
		}
		item := p
		kubernetesloadbalancer := make(map[string]interface{})
		kubernetesloadbalancer["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
		kubernetesloadbalancer["class_id"] = item.GetClassId()
		kubernetesloadbalancer["ip_addresses"] = item.GetIpAddresses()
		kubernetesloadbalancer["object_type"] = item.GetObjectType()

		kubernetesloadbalancers = append(kubernetesloadbalancers, kubernetesloadbalancer)
		return kubernetesloadbalancers
	})(item.GetLoadBalancer(), d)
	kubernetesservicestatus["object_type"] = item.GetObjectType()

	kubernetesservicestatuss = append(kubernetesservicestatuss, kubernetesservicestatus)
	return kubernetesservicestatuss
}
func flattenMapKubernetesStatefulSetStatus(p models.KubernetesStatefulSetStatus, d *schema.ResourceData) []map[string]interface{} {
	var kubernetesstatefulsetstatuss []map[string]interface{}
	var ret models.KubernetesStatefulSetStatus
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	item := p
	kubernetesstatefulsetstatus := make(map[string]interface{})
	kubernetesstatefulsetstatus["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	kubernetesstatefulsetstatus["available_replicas"] = item.GetAvailableReplicas()
	kubernetesstatefulsetstatus["class_id"] = item.GetClassId()
	kubernetesstatefulsetstatus["collision_count"] = item.GetCollisionCount()
	kubernetesstatefulsetstatus["current_revision"] = item.GetCurrentRevision()
	kubernetesstatefulsetstatus["object_type"] = item.GetObjectType()
	kubernetesstatefulsetstatus["observed_generation"] = item.GetObservedGeneration()
	kubernetesstatefulsetstatus["ready_replicas"] = item.GetReadyReplicas()
	kubernetesstatefulsetstatus["replicas"] = item.GetReplicas()
	kubernetesstatefulsetstatus["update_revision"] = item.GetUpdateRevision()
	kubernetesstatefulsetstatus["updated_replicas"] = item.GetUpdatedReplicas()

	kubernetesstatefulsetstatuss = append(kubernetesstatefulsetstatuss, kubernetesstatefulsetstatus)
	return kubernetesstatefulsetstatuss
}
func flattenMapKubernetesSysConfigPolicyRelationship(p models.KubernetesSysConfigPolicyRelationship, d *schema.ResourceData) []map[string]interface{} {
	var kubernetessysconfigpolicyrelationships []map[string]interface{}
	var ret models.KubernetesSysConfigPolicyRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	kubernetessysconfigpolicyrelationship := make(map[string]interface{})
	kubernetessysconfigpolicyrelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	kubernetessysconfigpolicyrelationship["class_id"] = item.GetClassId()
	kubernetessysconfigpolicyrelationship["moid"] = item.GetMoid()
	kubernetessysconfigpolicyrelationship["object_type"] = item.GetObjectType()
	kubernetessysconfigpolicyrelationship["selector"] = item.GetSelector()

	kubernetessysconfigpolicyrelationships = append(kubernetessysconfigpolicyrelationships, kubernetessysconfigpolicyrelationship)
	return kubernetessysconfigpolicyrelationships
}
func flattenMapKubernetesTrustedRegistriesPolicyRelationship(p models.KubernetesTrustedRegistriesPolicyRelationship, d *schema.ResourceData) []map[string]interface{} {
	var kubernetestrustedregistriespolicyrelationships []map[string]interface{}
	var ret models.KubernetesTrustedRegistriesPolicyRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	kubernetestrustedregistriespolicyrelationship := make(map[string]interface{})
	kubernetestrustedregistriespolicyrelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	kubernetestrustedregistriespolicyrelationship["class_id"] = item.GetClassId()
	kubernetestrustedregistriespolicyrelationship["moid"] = item.GetMoid()
	kubernetestrustedregistriespolicyrelationship["object_type"] = item.GetObjectType()
	kubernetestrustedregistriespolicyrelationship["selector"] = item.GetSelector()

	kubernetestrustedregistriespolicyrelationships = append(kubernetestrustedregistriespolicyrelationships, kubernetestrustedregistriespolicyrelationship)
	return kubernetestrustedregistriespolicyrelationships
}
func flattenMapKubernetesVersionRelationship(p models.KubernetesVersionRelationship, d *schema.ResourceData) []map[string]interface{} {
	var kubernetesversionrelationships []map[string]interface{}
	var ret models.KubernetesVersionRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	kubernetesversionrelationship := make(map[string]interface{})
	kubernetesversionrelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	kubernetesversionrelationship["class_id"] = item.GetClassId()
	kubernetesversionrelationship["moid"] = item.GetMoid()
	kubernetesversionrelationship["object_type"] = item.GetObjectType()
	kubernetesversionrelationship["selector"] = item.GetSelector()

	kubernetesversionrelationships = append(kubernetesversionrelationships, kubernetesversionrelationship)
	return kubernetesversionrelationships
}
func flattenMapKubernetesVersionPolicyRelationship(p models.KubernetesVersionPolicyRelationship, d *schema.ResourceData) []map[string]interface{} {
	var kubernetesversionpolicyrelationships []map[string]interface{}
	var ret models.KubernetesVersionPolicyRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	kubernetesversionpolicyrelationship := make(map[string]interface{})
	kubernetesversionpolicyrelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	kubernetesversionpolicyrelationship["class_id"] = item.GetClassId()
	kubernetesversionpolicyrelationship["moid"] = item.GetMoid()
	kubernetesversionpolicyrelationship["object_type"] = item.GetObjectType()
	kubernetesversionpolicyrelationship["selector"] = item.GetSelector()

	kubernetesversionpolicyrelationships = append(kubernetesversionpolicyrelationships, kubernetesversionpolicyrelationship)
	return kubernetesversionpolicyrelationships
}
func flattenMapKubernetesVirtualMachineInfraConfigPolicyRelationship(p models.KubernetesVirtualMachineInfraConfigPolicyRelationship, d *schema.ResourceData) []map[string]interface{} {
	var kubernetesvirtualmachineinfraconfigpolicyrelationships []map[string]interface{}
	var ret models.KubernetesVirtualMachineInfraConfigPolicyRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	kubernetesvirtualmachineinfraconfigpolicyrelationship := make(map[string]interface{})
	kubernetesvirtualmachineinfraconfigpolicyrelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	kubernetesvirtualmachineinfraconfigpolicyrelationship["class_id"] = item.GetClassId()
	kubernetesvirtualmachineinfraconfigpolicyrelationship["moid"] = item.GetMoid()
	kubernetesvirtualmachineinfraconfigpolicyrelationship["object_type"] = item.GetObjectType()
	kubernetesvirtualmachineinfraconfigpolicyrelationship["selector"] = item.GetSelector()

	kubernetesvirtualmachineinfraconfigpolicyrelationships = append(kubernetesvirtualmachineinfraconfigpolicyrelationships, kubernetesvirtualmachineinfraconfigpolicyrelationship)
	return kubernetesvirtualmachineinfraconfigpolicyrelationships
}
func flattenMapKubernetesVirtualMachineInstanceTypeRelationship(p models.KubernetesVirtualMachineInstanceTypeRelationship, d *schema.ResourceData) []map[string]interface{} {
	var kubernetesvirtualmachineinstancetyperelationships []map[string]interface{}
	var ret models.KubernetesVirtualMachineInstanceTypeRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	kubernetesvirtualmachineinstancetyperelationship := make(map[string]interface{})
	kubernetesvirtualmachineinstancetyperelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	kubernetesvirtualmachineinstancetyperelationship["class_id"] = item.GetClassId()
	kubernetesvirtualmachineinstancetyperelationship["moid"] = item.GetMoid()
	kubernetesvirtualmachineinstancetyperelationship["object_type"] = item.GetObjectType()
	kubernetesvirtualmachineinstancetyperelationship["selector"] = item.GetSelector()

	kubernetesvirtualmachineinstancetyperelationships = append(kubernetesvirtualmachineinstancetyperelationships, kubernetesvirtualmachineinstancetyperelationship)
	return kubernetesvirtualmachineinstancetyperelationships
}
func flattenMapKvmSessionRelationship(p models.KvmSessionRelationship, d *schema.ResourceData) []map[string]interface{} {
	var kvmsessionrelationships []map[string]interface{}
	var ret models.KvmSessionRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	kvmsessionrelationship := make(map[string]interface{})
	kvmsessionrelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	kvmsessionrelationship["class_id"] = item.GetClassId()
	kvmsessionrelationship["moid"] = item.GetMoid()
	kvmsessionrelationship["object_type"] = item.GetObjectType()
	kvmsessionrelationship["selector"] = item.GetSelector()

	kvmsessionrelationships = append(kvmsessionrelationships, kvmsessionrelationship)
	return kvmsessionrelationships
}
func flattenMapKvmTunnelRelationship(p models.KvmTunnelRelationship, d *schema.ResourceData) []map[string]interface{} {
	var kvmtunnelrelationships []map[string]interface{}
	var ret models.KvmTunnelRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	kvmtunnelrelationship := make(map[string]interface{})
	kvmtunnelrelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	kvmtunnelrelationship["class_id"] = item.GetClassId()
	kvmtunnelrelationship["moid"] = item.GetMoid()
	kvmtunnelrelationship["object_type"] = item.GetObjectType()
	kvmtunnelrelationship["selector"] = item.GetSelector()

	kvmtunnelrelationships = append(kvmtunnelrelationships, kvmtunnelrelationship)
	return kvmtunnelrelationships
}
func flattenMapLicenseAccountLicenseDataRelationship(p models.LicenseAccountLicenseDataRelationship, d *schema.ResourceData) []map[string]interface{} {
	var licenseaccountlicensedatarelationships []map[string]interface{}
	var ret models.LicenseAccountLicenseDataRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	licenseaccountlicensedatarelationship := make(map[string]interface{})
	licenseaccountlicensedatarelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	licenseaccountlicensedatarelationship["class_id"] = item.GetClassId()
	licenseaccountlicensedatarelationship["moid"] = item.GetMoid()
	licenseaccountlicensedatarelationship["object_type"] = item.GetObjectType()
	licenseaccountlicensedatarelationship["selector"] = item.GetSelector()

	licenseaccountlicensedatarelationships = append(licenseaccountlicensedatarelationships, licenseaccountlicensedatarelationship)
	return licenseaccountlicensedatarelationships
}
func flattenMapLicenseCustomerOpRelationship(p models.LicenseCustomerOpRelationship, d *schema.ResourceData) []map[string]interface{} {
	var licensecustomeroprelationships []map[string]interface{}
	var ret models.LicenseCustomerOpRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	licensecustomeroprelationship := make(map[string]interface{})
	licensecustomeroprelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	licensecustomeroprelationship["class_id"] = item.GetClassId()
	licensecustomeroprelationship["moid"] = item.GetMoid()
	licensecustomeroprelationship["object_type"] = item.GetObjectType()
	licensecustomeroprelationship["selector"] = item.GetSelector()

	licensecustomeroprelationships = append(licensecustomeroprelationships, licensecustomeroprelationship)
	return licensecustomeroprelationships
}
func flattenMapLicenseIksCustomerOpRelationship(p models.LicenseIksCustomerOpRelationship, d *schema.ResourceData) []map[string]interface{} {
	var licenseikscustomeroprelationships []map[string]interface{}
	var ret models.LicenseIksCustomerOpRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	licenseikscustomeroprelationship := make(map[string]interface{})
	licenseikscustomeroprelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	licenseikscustomeroprelationship["class_id"] = item.GetClassId()
	licenseikscustomeroprelationship["moid"] = item.GetMoid()
	licenseikscustomeroprelationship["object_type"] = item.GetObjectType()
	licenseikscustomeroprelationship["selector"] = item.GetSelector()

	licenseikscustomeroprelationships = append(licenseikscustomeroprelationships, licenseikscustomeroprelationship)
	return licenseikscustomeroprelationships
}
func flattenMapLicenseIksLicenseCountRelationship(p models.LicenseIksLicenseCountRelationship, d *schema.ResourceData) []map[string]interface{} {
	var licenseikslicensecountrelationships []map[string]interface{}
	var ret models.LicenseIksLicenseCountRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	licenseikslicensecountrelationship := make(map[string]interface{})
	licenseikslicensecountrelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	licenseikslicensecountrelationship["class_id"] = item.GetClassId()
	licenseikslicensecountrelationship["moid"] = item.GetMoid()
	licenseikslicensecountrelationship["object_type"] = item.GetObjectType()
	licenseikslicensecountrelationship["selector"] = item.GetSelector()

	licenseikslicensecountrelationships = append(licenseikslicensecountrelationships, licenseikslicensecountrelationship)
	return licenseikslicensecountrelationships
}
func flattenMapLicenseIncCustomerOpRelationship(p models.LicenseIncCustomerOpRelationship, d *schema.ResourceData) []map[string]interface{} {
	var licenseinccustomeroprelationships []map[string]interface{}
	var ret models.LicenseIncCustomerOpRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	licenseinccustomeroprelationship := make(map[string]interface{})
	licenseinccustomeroprelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	licenseinccustomeroprelationship["class_id"] = item.GetClassId()
	licenseinccustomeroprelationship["moid"] = item.GetMoid()
	licenseinccustomeroprelationship["object_type"] = item.GetObjectType()
	licenseinccustomeroprelationship["selector"] = item.GetSelector()

	licenseinccustomeroprelationships = append(licenseinccustomeroprelationships, licenseinccustomeroprelationship)
	return licenseinccustomeroprelationships
}
func flattenMapLicenseIncLicenseCountRelationship(p models.LicenseIncLicenseCountRelationship, d *schema.ResourceData) []map[string]interface{} {
	var licenseinclicensecountrelationships []map[string]interface{}
	var ret models.LicenseIncLicenseCountRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	licenseinclicensecountrelationship := make(map[string]interface{})
	licenseinclicensecountrelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	licenseinclicensecountrelationship["class_id"] = item.GetClassId()
	licenseinclicensecountrelationship["moid"] = item.GetMoid()
	licenseinclicensecountrelationship["object_type"] = item.GetObjectType()
	licenseinclicensecountrelationship["selector"] = item.GetSelector()

	licenseinclicensecountrelationships = append(licenseinclicensecountrelationships, licenseinclicensecountrelationship)
	return licenseinclicensecountrelationships
}
func flattenMapLicenseIwoCustomerOpRelationship(p models.LicenseIwoCustomerOpRelationship, d *schema.ResourceData) []map[string]interface{} {
	var licenseiwocustomeroprelationships []map[string]interface{}
	var ret models.LicenseIwoCustomerOpRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	licenseiwocustomeroprelationship := make(map[string]interface{})
	licenseiwocustomeroprelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	licenseiwocustomeroprelationship["class_id"] = item.GetClassId()
	licenseiwocustomeroprelationship["moid"] = item.GetMoid()
	licenseiwocustomeroprelationship["object_type"] = item.GetObjectType()
	licenseiwocustomeroprelationship["selector"] = item.GetSelector()

	licenseiwocustomeroprelationships = append(licenseiwocustomeroprelationships, licenseiwocustomeroprelationship)
	return licenseiwocustomeroprelationships
}
func flattenMapLicenseIwoLicenseCountRelationship(p models.LicenseIwoLicenseCountRelationship, d *schema.ResourceData) []map[string]interface{} {
	var licenseiwolicensecountrelationships []map[string]interface{}
	var ret models.LicenseIwoLicenseCountRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	licenseiwolicensecountrelationship := make(map[string]interface{})
	licenseiwolicensecountrelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	licenseiwolicensecountrelationship["class_id"] = item.GetClassId()
	licenseiwolicensecountrelationship["moid"] = item.GetMoid()
	licenseiwolicensecountrelationship["object_type"] = item.GetObjectType()
	licenseiwolicensecountrelationship["selector"] = item.GetSelector()

	licenseiwolicensecountrelationships = append(licenseiwolicensecountrelationships, licenseiwolicensecountrelationship)
	return licenseiwolicensecountrelationships
}
func flattenMapLicenseLicenseInfoViewRelationship(p models.LicenseLicenseInfoViewRelationship, d *schema.ResourceData) []map[string]interface{} {
	var licenselicenseinfoviewrelationships []map[string]interface{}
	var ret models.LicenseLicenseInfoViewRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	licenselicenseinfoviewrelationship := make(map[string]interface{})
	licenselicenseinfoviewrelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	licenselicenseinfoviewrelationship["class_id"] = item.GetClassId()
	licenselicenseinfoviewrelationship["moid"] = item.GetMoid()
	licenselicenseinfoviewrelationship["object_type"] = item.GetObjectType()
	licenselicenseinfoviewrelationship["selector"] = item.GetSelector()

	licenselicenseinfoviewrelationships = append(licenselicenseinfoviewrelationships, licenselicenseinfoviewrelationship)
	return licenselicenseinfoviewrelationships
}
func flattenMapLicenseLicenseRegistrationStatusRelationship(p models.LicenseLicenseRegistrationStatusRelationship, d *schema.ResourceData) []map[string]interface{} {
	var licenselicenseregistrationstatusrelationships []map[string]interface{}
	var ret models.LicenseLicenseRegistrationStatusRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	licenselicenseregistrationstatusrelationship := make(map[string]interface{})
	licenselicenseregistrationstatusrelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	licenselicenseregistrationstatusrelationship["class_id"] = item.GetClassId()
	licenselicenseregistrationstatusrelationship["moid"] = item.GetMoid()
	licenselicenseregistrationstatusrelationship["object_type"] = item.GetObjectType()
	licenselicenseregistrationstatusrelationship["selector"] = item.GetSelector()

	licenselicenseregistrationstatusrelationships = append(licenselicenseregistrationstatusrelationships, licenselicenseregistrationstatusrelationship)
	return licenselicenseregistrationstatusrelationships
}
func flattenMapLicenseSmartlicenseTokenRelationship(p models.LicenseSmartlicenseTokenRelationship, d *schema.ResourceData) []map[string]interface{} {
	var licensesmartlicensetokenrelationships []map[string]interface{}
	var ret models.LicenseSmartlicenseTokenRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	licensesmartlicensetokenrelationship := make(map[string]interface{})
	licensesmartlicensetokenrelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	licensesmartlicensetokenrelationship["class_id"] = item.GetClassId()
	licensesmartlicensetokenrelationship["moid"] = item.GetMoid()
	licensesmartlicensetokenrelationship["object_type"] = item.GetObjectType()
	licensesmartlicensetokenrelationship["selector"] = item.GetSelector()

	licensesmartlicensetokenrelationships = append(licensesmartlicensetokenrelationships, licensesmartlicensetokenrelationship)
	return licensesmartlicensetokenrelationships
}
func flattenMapMacpoolBlock(p models.MacpoolBlock, d *schema.ResourceData) []map[string]interface{} {
	var macpoolblocks []map[string]interface{}
	var ret models.MacpoolBlock
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	item := p
	macpoolblock := make(map[string]interface{})
	macpoolblock["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	macpoolblock["class_id"] = item.GetClassId()
	macpoolblock["from"] = item.GetFrom()
	macpoolblock["object_type"] = item.GetObjectType()
	macpoolblock["size"] = item.GetSize()
	macpoolblock["to"] = item.GetTo()

	macpoolblocks = append(macpoolblocks, macpoolblock)
	return macpoolblocks
}
func flattenMapMacpoolIdBlockRelationship(p models.MacpoolIdBlockRelationship, d *schema.ResourceData) []map[string]interface{} {
	var macpoolidblockrelationships []map[string]interface{}
	var ret models.MacpoolIdBlockRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	macpoolidblockrelationship := make(map[string]interface{})
	macpoolidblockrelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	macpoolidblockrelationship["class_id"] = item.GetClassId()
	macpoolidblockrelationship["moid"] = item.GetMoid()
	macpoolidblockrelationship["object_type"] = item.GetObjectType()
	macpoolidblockrelationship["selector"] = item.GetSelector()

	macpoolidblockrelationships = append(macpoolidblockrelationships, macpoolidblockrelationship)
	return macpoolidblockrelationships
}
func flattenMapMacpoolLeaseRelationship(p models.MacpoolLeaseRelationship, d *schema.ResourceData) []map[string]interface{} {
	var macpoolleaserelationships []map[string]interface{}
	var ret models.MacpoolLeaseRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	macpoolleaserelationship := make(map[string]interface{})
	macpoolleaserelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	macpoolleaserelationship["class_id"] = item.GetClassId()
	macpoolleaserelationship["moid"] = item.GetMoid()
	macpoolleaserelationship["object_type"] = item.GetObjectType()
	macpoolleaserelationship["selector"] = item.GetSelector()

	macpoolleaserelationships = append(macpoolleaserelationships, macpoolleaserelationship)
	return macpoolleaserelationships
}
func flattenMapMacpoolPoolRelationship(p models.MacpoolPoolRelationship, d *schema.ResourceData) []map[string]interface{} {
	var macpoolpoolrelationships []map[string]interface{}
	var ret models.MacpoolPoolRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	macpoolpoolrelationship := make(map[string]interface{})
	macpoolpoolrelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	macpoolpoolrelationship["class_id"] = item.GetClassId()
	macpoolpoolrelationship["moid"] = item.GetMoid()
	macpoolpoolrelationship["object_type"] = item.GetObjectType()
	macpoolpoolrelationship["selector"] = item.GetSelector()

	macpoolpoolrelationships = append(macpoolpoolrelationships, macpoolpoolrelationship)
	return macpoolpoolrelationships
}
func flattenMapMacpoolPoolMemberRelationship(p models.MacpoolPoolMemberRelationship, d *schema.ResourceData) []map[string]interface{} {
	var macpoolpoolmemberrelationships []map[string]interface{}
	var ret models.MacpoolPoolMemberRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	macpoolpoolmemberrelationship := make(map[string]interface{})
	macpoolpoolmemberrelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	macpoolpoolmemberrelationship["class_id"] = item.GetClassId()
	macpoolpoolmemberrelationship["moid"] = item.GetMoid()
	macpoolpoolmemberrelationship["object_type"] = item.GetObjectType()
	macpoolpoolmemberrelationship["selector"] = item.GetSelector()

	macpoolpoolmemberrelationships = append(macpoolpoolmemberrelationships, macpoolpoolmemberrelationship)
	return macpoolpoolmemberrelationships
}
func flattenMapMacpoolReservationRelationship(p models.MacpoolReservationRelationship, d *schema.ResourceData) []map[string]interface{} {
	var macpoolreservationrelationships []map[string]interface{}
	var ret models.MacpoolReservationRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	macpoolreservationrelationship := make(map[string]interface{})
	macpoolreservationrelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	macpoolreservationrelationship["class_id"] = item.GetClassId()
	macpoolreservationrelationship["moid"] = item.GetMoid()
	macpoolreservationrelationship["object_type"] = item.GetObjectType()
	macpoolreservationrelationship["selector"] = item.GetSelector()

	macpoolreservationrelationships = append(macpoolreservationrelationships, macpoolreservationrelationship)
	return macpoolreservationrelationships
}
func flattenMapMacpoolReservationReference(p models.MacpoolReservationReference, d *schema.ResourceData) []map[string]interface{} {
	var macpoolreservationreferences []map[string]interface{}
	var ret models.MacpoolReservationReference
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	item := p
	macpoolreservationreference := make(map[string]interface{})
	macpoolreservationreference["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	macpoolreservationreference["class_id"] = item.GetClassId()
	macpoolreservationreference["consumer_name"] = item.GetConsumerName()
	macpoolreservationreference["consumer_type"] = item.GetConsumerType()
	macpoolreservationreference["object_type"] = item.GetObjectType()
	macpoolreservationreference["reservation_moid"] = item.GetReservationMoid()

	macpoolreservationreferences = append(macpoolreservationreferences, macpoolreservationreference)
	return macpoolreservationreferences
}
func flattenMapMacpoolUniverseRelationship(p models.MacpoolUniverseRelationship, d *schema.ResourceData) []map[string]interface{} {
	var macpooluniverserelationships []map[string]interface{}
	var ret models.MacpoolUniverseRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	macpooluniverserelationship := make(map[string]interface{})
	macpooluniverserelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	macpooluniverserelationship["class_id"] = item.GetClassId()
	macpooluniverserelationship["moid"] = item.GetMoid()
	macpooluniverserelationship["object_type"] = item.GetObjectType()
	macpooluniverserelationship["selector"] = item.GetSelector()

	macpooluniverserelationships = append(macpooluniverserelationships, macpooluniverserelationship)
	return macpooluniverserelationships
}
func flattenMapManagementControllerRelationship(p models.ManagementControllerRelationship, d *schema.ResourceData) []map[string]interface{} {
	var managementcontrollerrelationships []map[string]interface{}
	var ret models.ManagementControllerRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	managementcontrollerrelationship := make(map[string]interface{})
	managementcontrollerrelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	managementcontrollerrelationship["class_id"] = item.GetClassId()
	managementcontrollerrelationship["moid"] = item.GetMoid()
	managementcontrollerrelationship["object_type"] = item.GetObjectType()
	managementcontrollerrelationship["selector"] = item.GetSelector()

	managementcontrollerrelationships = append(managementcontrollerrelationships, managementcontrollerrelationship)
	return managementcontrollerrelationships
}
func flattenMapManagementEntityRelationship(p models.ManagementEntityRelationship, d *schema.ResourceData) []map[string]interface{} {
	var managemententityrelationships []map[string]interface{}
	var ret models.ManagementEntityRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	managemententityrelationship := make(map[string]interface{})
	managemententityrelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	managemententityrelationship["class_id"] = item.GetClassId()
	managemententityrelationship["moid"] = item.GetMoid()
	managemententityrelationship["object_type"] = item.GetObjectType()
	managemententityrelationship["selector"] = item.GetSelector()

	managemententityrelationships = append(managemententityrelationships, managemententityrelationship)
	return managemententityrelationships
}
func flattenMapManagementInterfaceRelationship(p models.ManagementInterfaceRelationship, d *schema.ResourceData) []map[string]interface{} {
	var managementinterfacerelationships []map[string]interface{}
	var ret models.ManagementInterfaceRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	managementinterfacerelationship := make(map[string]interface{})
	managementinterfacerelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	managementinterfacerelationship["class_id"] = item.GetClassId()
	managementinterfacerelationship["moid"] = item.GetMoid()
	managementinterfacerelationship["object_type"] = item.GetObjectType()
	managementinterfacerelationship["selector"] = item.GetSelector()

	managementinterfacerelationships = append(managementinterfacerelationships, managementinterfacerelationship)
	return managementinterfacerelationships
}
func flattenMapMarketplaceUseCaseRelationship(p models.MarketplaceUseCaseRelationship, d *schema.ResourceData) []map[string]interface{} {
	var marketplaceusecaserelationships []map[string]interface{}
	var ret models.MarketplaceUseCaseRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	marketplaceusecaserelationship := make(map[string]interface{})
	marketplaceusecaserelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	marketplaceusecaserelationship["class_id"] = item.GetClassId()
	marketplaceusecaserelationship["moid"] = item.GetMoid()
	marketplaceusecaserelationship["object_type"] = item.GetObjectType()
	marketplaceusecaserelationship["selector"] = item.GetSelector()

	marketplaceusecaserelationships = append(marketplaceusecaserelationships, marketplaceusecaserelationship)
	return marketplaceusecaserelationships
}
func flattenMapMemoryArrayRelationship(p models.MemoryArrayRelationship, d *schema.ResourceData) []map[string]interface{} {
	var memoryarrayrelationships []map[string]interface{}
	var ret models.MemoryArrayRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	memoryarrayrelationship := make(map[string]interface{})
	memoryarrayrelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	memoryarrayrelationship["class_id"] = item.GetClassId()
	memoryarrayrelationship["moid"] = item.GetMoid()
	memoryarrayrelationship["object_type"] = item.GetObjectType()
	memoryarrayrelationship["selector"] = item.GetSelector()

	memoryarrayrelationships = append(memoryarrayrelationships, memoryarrayrelationship)
	return memoryarrayrelationships
}
func flattenMapMemoryPersistentMemoryConfigResultRelationship(p models.MemoryPersistentMemoryConfigResultRelationship, d *schema.ResourceData) []map[string]interface{} {
	var memorypersistentmemoryconfigresultrelationships []map[string]interface{}
	var ret models.MemoryPersistentMemoryConfigResultRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	memorypersistentmemoryconfigresultrelationship := make(map[string]interface{})
	memorypersistentmemoryconfigresultrelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	memorypersistentmemoryconfigresultrelationship["class_id"] = item.GetClassId()
	memorypersistentmemoryconfigresultrelationship["moid"] = item.GetMoid()
	memorypersistentmemoryconfigresultrelationship["object_type"] = item.GetObjectType()
	memorypersistentmemoryconfigresultrelationship["selector"] = item.GetSelector()

	memorypersistentmemoryconfigresultrelationships = append(memorypersistentmemoryconfigresultrelationships, memorypersistentmemoryconfigresultrelationship)
	return memorypersistentmemoryconfigresultrelationships
}
func flattenMapMemoryPersistentMemoryConfigurationRelationship(p models.MemoryPersistentMemoryConfigurationRelationship, d *schema.ResourceData) []map[string]interface{} {
	var memorypersistentmemoryconfigurationrelationships []map[string]interface{}
	var ret models.MemoryPersistentMemoryConfigurationRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	memorypersistentmemoryconfigurationrelationship := make(map[string]interface{})
	memorypersistentmemoryconfigurationrelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	memorypersistentmemoryconfigurationrelationship["class_id"] = item.GetClassId()
	memorypersistentmemoryconfigurationrelationship["moid"] = item.GetMoid()
	memorypersistentmemoryconfigurationrelationship["object_type"] = item.GetObjectType()
	memorypersistentmemoryconfigurationrelationship["selector"] = item.GetSelector()

	memorypersistentmemoryconfigurationrelationships = append(memorypersistentmemoryconfigurationrelationships, memorypersistentmemoryconfigurationrelationship)
	return memorypersistentmemoryconfigurationrelationships
}
func flattenMapMemoryPersistentMemoryLocalSecurity(p models.MemoryPersistentMemoryLocalSecurity, d *schema.ResourceData) []map[string]interface{} {
	var memorypersistentmemorylocalsecuritys []map[string]interface{}
	var ret models.MemoryPersistentMemoryLocalSecurity
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	item := p
	memorypersistentmemorylocalsecurity := make(map[string]interface{})
	memorypersistentmemorylocalsecurity["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	memorypersistentmemorylocalsecurity["class_id"] = item.GetClassId()
	memorypersistentmemorylocalsecurity["enabled"] = item.GetEnabled()
	memorypersistentmemorylocalsecurity["is_secure_passphrase_set"] = item.GetIsSecurePassphraseSet()
	memorypersistentmemorylocalsecurity["object_type"] = item.GetObjectType()
	secure_passphrase_x, exists := d.GetOk("local_security")
	if exists && secure_passphrase_x != nil {
		secure_passphrase_y := secure_passphrase_x.([]interface{})[0].(map[string]interface{})
		memorypersistentmemorylocalsecurity["secure_passphrase"] = secure_passphrase_y["secure_passphrase"]
	}

	memorypersistentmemorylocalsecuritys = append(memorypersistentmemorylocalsecuritys, memorypersistentmemorylocalsecurity)
	return memorypersistentmemorylocalsecuritys
}
func flattenMapMemoryPersistentMemoryRegionRelationship(p models.MemoryPersistentMemoryRegionRelationship, d *schema.ResourceData) []map[string]interface{} {
	var memorypersistentmemoryregionrelationships []map[string]interface{}
	var ret models.MemoryPersistentMemoryRegionRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	memorypersistentmemoryregionrelationship := make(map[string]interface{})
	memorypersistentmemoryregionrelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	memorypersistentmemoryregionrelationship["class_id"] = item.GetClassId()
	memorypersistentmemoryregionrelationship["moid"] = item.GetMoid()
	memorypersistentmemoryregionrelationship["object_type"] = item.GetObjectType()
	memorypersistentmemoryregionrelationship["selector"] = item.GetSelector()

	memorypersistentmemoryregionrelationships = append(memorypersistentmemoryregionrelationships, memorypersistentmemoryregionrelationship)
	return memorypersistentmemoryregionrelationships
}
func flattenMapMerakiDeviceRelationship(p models.MerakiDeviceRelationship, d *schema.ResourceData) []map[string]interface{} {
	var merakidevicerelationships []map[string]interface{}
	var ret models.MerakiDeviceRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	merakidevicerelationship := make(map[string]interface{})
	merakidevicerelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	merakidevicerelationship["class_id"] = item.GetClassId()
	merakidevicerelationship["moid"] = item.GetMoid()
	merakidevicerelationship["object_type"] = item.GetObjectType()
	merakidevicerelationship["selector"] = item.GetSelector()

	merakidevicerelationships = append(merakidevicerelationships, merakidevicerelationship)
	return merakidevicerelationships
}
func flattenMapMerakiNetworkRelationship(p models.MerakiNetworkRelationship, d *schema.ResourceData) []map[string]interface{} {
	var merakinetworkrelationships []map[string]interface{}
	var ret models.MerakiNetworkRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	merakinetworkrelationship := make(map[string]interface{})
	merakinetworkrelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	merakinetworkrelationship["class_id"] = item.GetClassId()
	merakinetworkrelationship["moid"] = item.GetMoid()
	merakinetworkrelationship["object_type"] = item.GetObjectType()
	merakinetworkrelationship["selector"] = item.GetSelector()

	merakinetworkrelationships = append(merakinetworkrelationships, merakinetworkrelationship)
	return merakinetworkrelationships
}
func flattenMapMerakiOrganizationRelationship(p models.MerakiOrganizationRelationship, d *schema.ResourceData) []map[string]interface{} {
	var merakiorganizationrelationships []map[string]interface{}
	var ret models.MerakiOrganizationRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	merakiorganizationrelationship := make(map[string]interface{})
	merakiorganizationrelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	merakiorganizationrelationship["class_id"] = item.GetClassId()
	merakiorganizationrelationship["moid"] = item.GetMoid()
	merakiorganizationrelationship["object_type"] = item.GetObjectType()
	merakiorganizationrelationship["selector"] = item.GetSelector()

	merakiorganizationrelationships = append(merakiorganizationrelationships, merakiorganizationrelationship)
	return merakiorganizationrelationships
}
func flattenMapMoBaseMo(p models.MoBaseMo, d *schema.ResourceData) []map[string]interface{} {
	var mobasemos []map[string]interface{}
	var ret models.MoBaseMo
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	item := p
	mobasemo := make(map[string]interface{})
	mobasemo["account_moid"] = item.GetAccountMoid()
	mobasemo["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	mobasemo["ancestors"] = (func(p []models.MoBaseMoRelationship, d *schema.ResourceData) []map[string]interface{} {
		var mobasemorelationships []map[string]interface{}
		if len(p) == 0 {
			return nil
		}
		for _, item := range p {
			item := item.MoMoRef
			mobasemorelationship := flattenMoMoRef(item)
			mobasemorelationships = append(mobasemorelationships, mobasemorelationship)
		}
		return mobasemorelationships
	})(item.GetAncestors(), d)
	mobasemo["class_id"] = item.GetClassId()
	mobasemo["create_time"] = item.GetCreateTime().String()
	mobasemo["domain_group_moid"] = item.GetDomainGroupMoid()
	mobasemo["mod_time"] = item.GetModTime().String()
	mobasemo["moid"] = item.GetMoid()
	mobasemo["object_type"] = item.GetObjectType()
	mobasemo["owners"] = item.GetOwners()
	mobasemo["parent"] = (func(p models.MoBaseMoRelationship, d *schema.ResourceData) []map[string]interface{} {
		var mobasemorelationships []map[string]interface{}
		var ret models.MoBaseMoRelationship
		if reflect.DeepEqual(ret, p) {
			return nil
		}
		x := p
		item := x.MoMoRef
		mobasemorelationship := make(map[string]interface{})
		mobasemorelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
		mobasemorelationship["class_id"] = item.GetClassId()
		mobasemorelationship["moid"] = item.GetMoid()
		mobasemorelationship["object_type"] = item.GetObjectType()
		mobasemorelationship["selector"] = item.GetSelector()

		mobasemorelationships = append(mobasemorelationships, mobasemorelationship)
		return mobasemorelationships
	})(item.GetParent(), d)
	mobasemo["permission_resources"] = (func(p []models.MoBaseMoRelationship, d *schema.ResourceData) []map[string]interface{} {
		var mobasemorelationships []map[string]interface{}
		if len(p) == 0 {
			return nil
		}
		for _, item := range p {
			item := item.MoMoRef
			mobasemorelationship := flattenMoMoRef(item)
			mobasemorelationships = append(mobasemorelationships, mobasemorelationship)
		}
		return mobasemorelationships
	})(item.GetPermissionResources(), d)
	mobasemo["shared_scope"] = item.GetSharedScope()
	mobasemo["tags"] = (func(p []models.MoTag, d *schema.ResourceData) []map[string]interface{} {
		var motags []map[string]interface{}
		if len(p) == 0 {
			return nil
		}
		for _, item := range p {
			motag := make(map[string]interface{})
			motag["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
			motag["key"] = item.GetKey()
			motag["value"] = item.GetValue()
			motags = append(motags, motag)
		}
		return motags
	})(item.GetTags(), d)
	mobasemo["version_context"] = (func(p models.MoVersionContext, d *schema.ResourceData) []map[string]interface{} {
		var moversioncontexts []map[string]interface{}
		var ret models.MoVersionContext
		if reflect.DeepEqual(ret, p) {
			return nil
		}
		item := p
		moversioncontext := make(map[string]interface{})
		moversioncontext["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
		moversioncontext["class_id"] = item.GetClassId()
		moversioncontext["interested_mos"] = (func(p []models.MoMoRef, d *schema.ResourceData) []map[string]interface{} {
			var momorefs []map[string]interface{}
			if len(p) == 0 {
				return nil
			}
			for _, item := range p {
				momoref := make(map[string]interface{})
				momoref["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
				momoref["class_id"] = item.GetClassId()
				momoref["moid"] = item.GetMoid()
				momoref["object_type"] = item.GetObjectType()
				momoref["selector"] = item.GetSelector()
				momorefs = append(momorefs, momoref)
			}
			return momorefs
		})(item.GetInterestedMos(), d)
		moversioncontext["marked_for_deletion"] = item.GetMarkedForDeletion()
		moversioncontext["object_type"] = item.GetObjectType()
		moversioncontext["ref_mo"] = (func(p models.MoMoRef, d *schema.ResourceData) []map[string]interface{} {
			var momorefs []map[string]interface{}
			var ret models.MoMoRef
			if reflect.DeepEqual(ret, p) {
				return nil
			}
			item := p
			momoref := make(map[string]interface{})
			momoref["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
			momoref["class_id"] = item.GetClassId()
			momoref["moid"] = item.GetMoid()
			momoref["object_type"] = item.GetObjectType()
			momoref["selector"] = item.GetSelector()

			momorefs = append(momorefs, momoref)
			return momorefs
		})(item.GetRefMo(), d)
		moversioncontext["timestamp"] = item.GetTimestamp().String()
		moversioncontext["nr_version"] = item.GetVersion()
		moversioncontext["version_type"] = item.GetVersionType()

		moversioncontexts = append(moversioncontexts, moversioncontext)
		return moversioncontexts
	})(item.GetVersionContext(), d)

	mobasemos = append(mobasemos, mobasemo)
	return mobasemos
}
func flattenMapMoBaseMoRelationship(p models.MoBaseMoRelationship, d *schema.ResourceData) []map[string]interface{} {
	var mobasemorelationships []map[string]interface{}
	var ret models.MoBaseMoRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	mobasemorelationship := make(map[string]interface{})
	mobasemorelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	mobasemorelationship["class_id"] = item.GetClassId()
	mobasemorelationship["moid"] = item.GetMoid()
	mobasemorelationship["object_type"] = item.GetObjectType()
	mobasemorelationship["selector"] = item.GetSelector()

	mobasemorelationships = append(mobasemorelationships, mobasemorelationship)
	return mobasemorelationships
}
func flattenMapMoMoRef(p models.MoMoRef, d *schema.ResourceData) []map[string]interface{} {
	var momorefs []map[string]interface{}
	var ret models.MoMoRef
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	item := p
	momoref := make(map[string]interface{})
	momoref["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	momoref["class_id"] = item.GetClassId()
	momoref["moid"] = item.GetMoid()
	momoref["object_type"] = item.GetObjectType()
	momoref["selector"] = item.GetSelector()

	momorefs = append(momorefs, momoref)
	return momorefs
}
func flattenMapMoVersionContext(p models.MoVersionContext, d *schema.ResourceData) []map[string]interface{} {
	var moversioncontexts []map[string]interface{}
	var ret models.MoVersionContext
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	item := p
	moversioncontext := make(map[string]interface{})
	moversioncontext["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	moversioncontext["class_id"] = item.GetClassId()
	moversioncontext["interested_mos"] = (func(p []models.MoMoRef, d *schema.ResourceData) []map[string]interface{} {
		var momorefs []map[string]interface{}
		if len(p) == 0 {
			return nil
		}
		for _, item := range p {
			momoref := make(map[string]interface{})
			momoref["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
			momoref["class_id"] = item.GetClassId()
			momoref["moid"] = item.GetMoid()
			momoref["object_type"] = item.GetObjectType()
			momoref["selector"] = item.GetSelector()
			momorefs = append(momorefs, momoref)
		}
		return momorefs
	})(item.GetInterestedMos(), d)
	moversioncontext["marked_for_deletion"] = item.GetMarkedForDeletion()
	moversioncontext["object_type"] = item.GetObjectType()
	moversioncontext["ref_mo"] = (func(p models.MoMoRef, d *schema.ResourceData) []map[string]interface{} {
		var momorefs []map[string]interface{}
		var ret models.MoMoRef
		if reflect.DeepEqual(ret, p) {
			return nil
		}
		item := p
		momoref := make(map[string]interface{})
		momoref["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
		momoref["class_id"] = item.GetClassId()
		momoref["moid"] = item.GetMoid()
		momoref["object_type"] = item.GetObjectType()
		momoref["selector"] = item.GetSelector()

		momorefs = append(momorefs, momoref)
		return momorefs
	})(item.GetRefMo(), d)
	moversioncontext["timestamp"] = item.GetTimestamp().String()
	moversioncontext["nr_version"] = item.GetVersion()
	moversioncontext["version_type"] = item.GetVersionType()

	moversioncontexts = append(moversioncontexts, moversioncontext)
	return moversioncontexts
}
func flattenMapNetworkElementRelationship(p models.NetworkElementRelationship, d *schema.ResourceData) []map[string]interface{} {
	var networkelementrelationships []map[string]interface{}
	var ret models.NetworkElementRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	networkelementrelationship := make(map[string]interface{})
	networkelementrelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	networkelementrelationship["class_id"] = item.GetClassId()
	networkelementrelationship["moid"] = item.GetMoid()
	networkelementrelationship["object_type"] = item.GetObjectType()
	networkelementrelationship["selector"] = item.GetSelector()

	networkelementrelationships = append(networkelementrelationships, networkelementrelationship)
	return networkelementrelationships
}
func flattenMapNetworkElementSummaryRelationship(p models.NetworkElementSummaryRelationship, d *schema.ResourceData) []map[string]interface{} {
	var networkelementsummaryrelationships []map[string]interface{}
	var ret models.NetworkElementSummaryRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	networkelementsummaryrelationship := make(map[string]interface{})
	networkelementsummaryrelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	networkelementsummaryrelationship["class_id"] = item.GetClassId()
	networkelementsummaryrelationship["moid"] = item.GetMoid()
	networkelementsummaryrelationship["object_type"] = item.GetObjectType()
	networkelementsummaryrelationship["selector"] = item.GetSelector()

	networkelementsummaryrelationships = append(networkelementsummaryrelationships, networkelementsummaryrelationship)
	return networkelementsummaryrelationships
}
func flattenMapNetworkFcZoneInfoRelationship(p models.NetworkFcZoneInfoRelationship, d *schema.ResourceData) []map[string]interface{} {
	var networkfczoneinforelationships []map[string]interface{}
	var ret models.NetworkFcZoneInfoRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	networkfczoneinforelationship := make(map[string]interface{})
	networkfczoneinforelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	networkfczoneinforelationship["class_id"] = item.GetClassId()
	networkfczoneinforelationship["moid"] = item.GetMoid()
	networkfczoneinforelationship["object_type"] = item.GetObjectType()
	networkfczoneinforelationship["selector"] = item.GetSelector()

	networkfczoneinforelationships = append(networkfczoneinforelationships, networkfczoneinforelationship)
	return networkfczoneinforelationships
}
func flattenMapNetworkHyperFlexNetworkAddress(p models.NetworkHyperFlexNetworkAddress, d *schema.ResourceData) []map[string]interface{} {
	var networkhyperflexnetworkaddresss []map[string]interface{}
	var ret models.NetworkHyperFlexNetworkAddress
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	item := p
	networkhyperflexnetworkaddress := make(map[string]interface{})
	networkhyperflexnetworkaddress["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	networkhyperflexnetworkaddress["address"] = item.GetAddress()
	networkhyperflexnetworkaddress["class_id"] = item.GetClassId()
	networkhyperflexnetworkaddress["fqdn"] = item.GetFqdn()
	networkhyperflexnetworkaddress["ip"] = item.GetIp()
	networkhyperflexnetworkaddress["object_type"] = item.GetObjectType()

	networkhyperflexnetworkaddresss = append(networkhyperflexnetworkaddresss, networkhyperflexnetworkaddress)
	return networkhyperflexnetworkaddresss
}
func flattenMapNetworkSupervisorCardRelationship(p models.NetworkSupervisorCardRelationship, d *schema.ResourceData) []map[string]interface{} {
	var networksupervisorcardrelationships []map[string]interface{}
	var ret models.NetworkSupervisorCardRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	networksupervisorcardrelationship := make(map[string]interface{})
	networksupervisorcardrelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	networksupervisorcardrelationship["class_id"] = item.GetClassId()
	networksupervisorcardrelationship["moid"] = item.GetMoid()
	networksupervisorcardrelationship["object_type"] = item.GetObjectType()
	networksupervisorcardrelationship["selector"] = item.GetSelector()

	networksupervisorcardrelationships = append(networksupervisorcardrelationships, networksupervisorcardrelationship)
	return networksupervisorcardrelationships
}
func flattenMapNetworkVethernetRelationship(p models.NetworkVethernetRelationship, d *schema.ResourceData) []map[string]interface{} {
	var networkvethernetrelationships []map[string]interface{}
	var ret models.NetworkVethernetRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	networkvethernetrelationship := make(map[string]interface{})
	networkvethernetrelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	networkvethernetrelationship["class_id"] = item.GetClassId()
	networkvethernetrelationship["moid"] = item.GetMoid()
	networkvethernetrelationship["object_type"] = item.GetObjectType()
	networkvethernetrelationship["selector"] = item.GetSelector()

	networkvethernetrelationships = append(networkvethernetrelationships, networkvethernetrelationship)
	return networkvethernetrelationships
}
func flattenMapNetworkVfcRelationship(p models.NetworkVfcRelationship, d *schema.ResourceData) []map[string]interface{} {
	var networkvfcrelationships []map[string]interface{}
	var ret models.NetworkVfcRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	networkvfcrelationship := make(map[string]interface{})
	networkvfcrelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	networkvfcrelationship["class_id"] = item.GetClassId()
	networkvfcrelationship["moid"] = item.GetMoid()
	networkvfcrelationship["object_type"] = item.GetObjectType()
	networkvfcrelationship["selector"] = item.GetSelector()

	networkvfcrelationships = append(networkvfcrelationships, networkvfcrelationship)
	return networkvfcrelationships
}
func flattenMapNetworkVlanPortInfoRelationship(p models.NetworkVlanPortInfoRelationship, d *schema.ResourceData) []map[string]interface{} {
	var networkvlanportinforelationships []map[string]interface{}
	var ret models.NetworkVlanPortInfoRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	networkvlanportinforelationship := make(map[string]interface{})
	networkvlanportinforelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	networkvlanportinforelationship["class_id"] = item.GetClassId()
	networkvlanportinforelationship["moid"] = item.GetMoid()
	networkvlanportinforelationship["object_type"] = item.GetObjectType()
	networkvlanportinforelationship["selector"] = item.GetSelector()

	networkvlanportinforelationships = append(networkvlanportinforelationships, networkvlanportinforelationship)
	return networkvlanportinforelationships
}
func flattenMapNetworkVpcDomainRelationship(p models.NetworkVpcDomainRelationship, d *schema.ResourceData) []map[string]interface{} {
	var networkvpcdomainrelationships []map[string]interface{}
	var ret models.NetworkVpcDomainRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	networkvpcdomainrelationship := make(map[string]interface{})
	networkvpcdomainrelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	networkvpcdomainrelationship["class_id"] = item.GetClassId()
	networkvpcdomainrelationship["moid"] = item.GetMoid()
	networkvpcdomainrelationship["object_type"] = item.GetObjectType()
	networkvpcdomainrelationship["selector"] = item.GetSelector()

	networkvpcdomainrelationships = append(networkvpcdomainrelationships, networkvpcdomainrelationship)
	return networkvpcdomainrelationships
}
func flattenMapNiaapiNewReleaseDetail(p models.NiaapiNewReleaseDetail, d *schema.ResourceData) []map[string]interface{} {
	var niaapinewreleasedetails []map[string]interface{}
	var ret models.NiaapiNewReleaseDetail
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	item := p
	niaapinewreleasedetail := make(map[string]interface{})
	niaapinewreleasedetail["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	niaapinewreleasedetail["class_id"] = item.GetClassId()
	niaapinewreleasedetail["description"] = item.GetDescription()
	niaapinewreleasedetail["link"] = item.GetLink()
	niaapinewreleasedetail["object_type"] = item.GetObjectType()
	niaapinewreleasedetail["release_note_link"] = item.GetReleaseNoteLink()
	niaapinewreleasedetail["release_note_link_title"] = item.GetReleaseNoteLinkTitle()
	niaapinewreleasedetail["software_download_link"] = item.GetSoftwareDownloadLink()
	niaapinewreleasedetail["software_download_link_title"] = item.GetSoftwareDownloadLinkTitle()
	niaapinewreleasedetail["title"] = item.GetTitle()
	niaapinewreleasedetail["nr_version"] = item.GetVersion()

	niaapinewreleasedetails = append(niaapinewreleasedetails, niaapinewreleasedetail)
	return niaapinewreleasedetails
}
func flattenMapNiaapiVersionRegexPlatform(p models.NiaapiVersionRegexPlatform, d *schema.ResourceData) []map[string]interface{} {
	var niaapiversionregexplatforms []map[string]interface{}
	var ret models.NiaapiVersionRegexPlatform
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	item := p
	niaapiversionregexplatform := make(map[string]interface{})
	niaapiversionregexplatform["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	niaapiversionregexplatform["anyllregex"] = item.GetAnyllregex()
	niaapiversionregexplatform["class_id"] = item.GetClassId()
	niaapiversionregexplatform["currentlltrain"] = (func(p models.NiaapiSoftwareRegex, d *schema.ResourceData) []map[string]interface{} {
		var niaapisoftwareregexs []map[string]interface{}
		var ret models.NiaapiSoftwareRegex
		if reflect.DeepEqual(ret, p) {
			return nil
		}
		item := p
		niaapisoftwareregex := make(map[string]interface{})
		niaapisoftwareregex["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
		niaapisoftwareregex["class_id"] = item.GetClassId()
		niaapisoftwareregex["object_type"] = item.GetObjectType()
		niaapisoftwareregex["regex"] = item.GetRegex()
		niaapisoftwareregex["software_version"] = item.GetSoftwareVersion()

		niaapisoftwareregexs = append(niaapisoftwareregexs, niaapisoftwareregex)
		return niaapisoftwareregexs
	})(item.GetCurrentlltrain(), d)
	niaapiversionregexplatform["latestsltrain"] = (func(p models.NiaapiSoftwareRegex, d *schema.ResourceData) []map[string]interface{} {
		var niaapisoftwareregexs []map[string]interface{}
		var ret models.NiaapiSoftwareRegex
		if reflect.DeepEqual(ret, p) {
			return nil
		}
		item := p
		niaapisoftwareregex := make(map[string]interface{})
		niaapisoftwareregex["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
		niaapisoftwareregex["class_id"] = item.GetClassId()
		niaapisoftwareregex["object_type"] = item.GetObjectType()
		niaapisoftwareregex["regex"] = item.GetRegex()
		niaapisoftwareregex["software_version"] = item.GetSoftwareVersion()

		niaapisoftwareregexs = append(niaapisoftwareregexs, niaapisoftwareregex)
		return niaapisoftwareregexs
	})(item.GetLatestsltrain(), d)
	niaapiversionregexplatform["object_type"] = item.GetObjectType()
	niaapiversionregexplatform["sltrain"] = (func(p []models.NiaapiSoftwareRegex, d *schema.ResourceData) []map[string]interface{} {
		var niaapisoftwareregexs []map[string]interface{}
		if len(p) == 0 {
			return nil
		}
		for _, item := range p {
			niaapisoftwareregex := make(map[string]interface{})
			niaapisoftwareregex["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
			niaapisoftwareregex["class_id"] = item.GetClassId()
			niaapisoftwareregex["object_type"] = item.GetObjectType()
			niaapisoftwareregex["regex"] = item.GetRegex()
			niaapisoftwareregex["software_version"] = item.GetSoftwareVersion()
			niaapisoftwareregexs = append(niaapisoftwareregexs, niaapisoftwareregex)
		}
		return niaapisoftwareregexs
	})(item.GetSltrain(), d)
	niaapiversionregexplatform["upcominglltrain"] = (func(p models.NiaapiSoftwareRegex, d *schema.ResourceData) []map[string]interface{} {
		var niaapisoftwareregexs []map[string]interface{}
		var ret models.NiaapiSoftwareRegex
		if reflect.DeepEqual(ret, p) {
			return nil
		}
		item := p
		niaapisoftwareregex := make(map[string]interface{})
		niaapisoftwareregex["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
		niaapisoftwareregex["class_id"] = item.GetClassId()
		niaapisoftwareregex["object_type"] = item.GetObjectType()
		niaapisoftwareregex["regex"] = item.GetRegex()
		niaapisoftwareregex["software_version"] = item.GetSoftwareVersion()

		niaapisoftwareregexs = append(niaapisoftwareregexs, niaapisoftwareregex)
		return niaapisoftwareregexs
	})(item.GetUpcominglltrain(), d)

	niaapiversionregexplatforms = append(niaapiversionregexplatforms, niaapiversionregexplatform)
	return niaapiversionregexplatforms
}
func flattenMapNiatelemetryBootflashDetails(p models.NiatelemetryBootflashDetails, d *schema.ResourceData) []map[string]interface{} {
	var niatelemetrybootflashdetailss []map[string]interface{}
	var ret models.NiatelemetryBootflashDetails
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	item := p
	niatelemetrybootflashdetails := make(map[string]interface{})
	niatelemetrybootflashdetails["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	niatelemetrybootflashdetails["class_id"] = item.GetClassId()
	niatelemetrybootflashdetails["fw_rev"] = item.GetFwRev()
	niatelemetrybootflashdetails["model_type"] = item.GetModelType()
	niatelemetrybootflashdetails["object_type"] = item.GetObjectType()
	niatelemetrybootflashdetails["serial"] = item.GetSerial()

	niatelemetrybootflashdetailss = append(niatelemetrybootflashdetailss, niatelemetrybootflashdetails)
	return niatelemetrybootflashdetailss
}
func flattenMapNiatelemetryDiskinfo(p models.NiatelemetryDiskinfo, d *schema.ResourceData) []map[string]interface{} {
	var niatelemetrydiskinfos []map[string]interface{}
	var ret models.NiatelemetryDiskinfo
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	item := p
	niatelemetrydiskinfo := make(map[string]interface{})
	niatelemetrydiskinfo["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	niatelemetrydiskinfo["class_id"] = item.GetClassId()
	niatelemetrydiskinfo["free"] = item.GetFree()
	niatelemetrydiskinfo["name"] = item.GetName()
	niatelemetrydiskinfo["object_type"] = item.GetObjectType()
	niatelemetrydiskinfo["total"] = item.GetTotal()
	niatelemetrydiskinfo["used"] = item.GetUsed()

	niatelemetrydiskinfos = append(niatelemetrydiskinfos, niatelemetrydiskinfo)
	return niatelemetrydiskinfos
}
func flattenMapNiatelemetryEqptStorageFirmware(p models.NiatelemetryEqptStorageFirmware, d *schema.ResourceData) []map[string]interface{} {
	var niatelemetryeqptstoragefirmwares []map[string]interface{}
	var ret models.NiatelemetryEqptStorageFirmware
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	item := p
	niatelemetryeqptstoragefirmware := make(map[string]interface{})
	niatelemetryeqptstoragefirmware["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	niatelemetryeqptstoragefirmware["available"] = item.GetAvailable()
	niatelemetryeqptstoragefirmware["class_id"] = item.GetClassId()
	niatelemetryeqptstoragefirmware["object_type"] = item.GetObjectType()
	niatelemetryeqptstoragefirmware["used"] = item.GetUsed()

	niatelemetryeqptstoragefirmwares = append(niatelemetryeqptstoragefirmwares, niatelemetryeqptstoragefirmware)
	return niatelemetryeqptstoragefirmwares
}
func flattenMapNiatelemetryEqptcapacityPolUsage5min(p models.NiatelemetryEqptcapacityPolUsage5min, d *schema.ResourceData) []map[string]interface{} {
	var niatelemetryeqptcapacitypolusage5mins []map[string]interface{}
	var ret models.NiatelemetryEqptcapacityPolUsage5min
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	item := p
	niatelemetryeqptcapacitypolusage5min := make(map[string]interface{})
	niatelemetryeqptcapacitypolusage5min["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	niatelemetryeqptcapacitypolusage5min["class_id"] = item.GetClassId()
	niatelemetryeqptcapacitypolusage5min["object_type"] = item.GetObjectType()
	niatelemetryeqptcapacitypolusage5min["pol_usage_base"] = item.GetPolUsageBase()
	niatelemetryeqptcapacitypolusage5min["pol_usage_cap_cum"] = item.GetPolUsageCapCum()
	niatelemetryeqptcapacitypolusage5min["pol_usage_cum"] = item.GetPolUsageCum()

	niatelemetryeqptcapacitypolusage5mins = append(niatelemetryeqptcapacitypolusage5mins, niatelemetryeqptcapacitypolusage5min)
	return niatelemetryeqptcapacitypolusage5mins
}
func flattenMapNiatelemetryEqptcapacityPrefixEntries15min(p models.NiatelemetryEqptcapacityPrefixEntries15min, d *schema.ResourceData) []map[string]interface{} {
	var niatelemetryeqptcapacityprefixentries15mins []map[string]interface{}
	var ret models.NiatelemetryEqptcapacityPrefixEntries15min
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	item := p
	niatelemetryeqptcapacityprefixentries15min := make(map[string]interface{})
	niatelemetryeqptcapacityprefixentries15min["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	niatelemetryeqptcapacityprefixentries15min["class_id"] = item.GetClassId()
	niatelemetryeqptcapacityprefixentries15min["ext_normalized_last"] = item.GetExtNormalizedLast()
	niatelemetryeqptcapacityprefixentries15min["object_type"] = item.GetObjectType()

	niatelemetryeqptcapacityprefixentries15mins = append(niatelemetryeqptcapacityprefixentries15mins, niatelemetryeqptcapacityprefixentries15min)
	return niatelemetryeqptcapacityprefixentries15mins
}
func flattenMapNiatelemetryEqptcapacityPrefixEntries5min(p models.NiatelemetryEqptcapacityPrefixEntries5min, d *schema.ResourceData) []map[string]interface{} {
	var niatelemetryeqptcapacityprefixentries5mins []map[string]interface{}
	var ret models.NiatelemetryEqptcapacityPrefixEntries5min
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	item := p
	niatelemetryeqptcapacityprefixentries5min := make(map[string]interface{})
	niatelemetryeqptcapacityprefixentries5min["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	niatelemetryeqptcapacityprefixentries5min["class_id"] = item.GetClassId()
	niatelemetryeqptcapacityprefixentries5min["ext_normalized_last"] = item.GetExtNormalizedLast()
	niatelemetryeqptcapacityprefixentries5min["object_type"] = item.GetObjectType()

	niatelemetryeqptcapacityprefixentries5mins = append(niatelemetryeqptcapacityprefixentries5mins, niatelemetryeqptcapacityprefixentries5min)
	return niatelemetryeqptcapacityprefixentries5mins
}
func flattenMapNiatelemetryInterface(p models.NiatelemetryInterface, d *schema.ResourceData) []map[string]interface{} {
	var niatelemetryinterfaces []map[string]interface{}
	var ret models.NiatelemetryInterface
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	item := p
	niatelemetryinterface := make(map[string]interface{})
	niatelemetryinterface["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	niatelemetryinterface["class_id"] = item.GetClassId()
	niatelemetryinterface["interface_down_count"] = item.GetInterfaceDownCount()
	niatelemetryinterface["interface_up_count"] = item.GetInterfaceUpCount()
	niatelemetryinterface["object_type"] = item.GetObjectType()

	niatelemetryinterfaces = append(niatelemetryinterfaces, niatelemetryinterface)
	return niatelemetryinterfaces
}
func flattenMapNiatelemetryNetworkInfo(p models.NiatelemetryNetworkInfo, d *schema.ResourceData) []map[string]interface{} {
	var niatelemetrynetworkinfos []map[string]interface{}
	var ret models.NiatelemetryNetworkInfo
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	item := p
	niatelemetrynetworkinfo := make(map[string]interface{})
	niatelemetrynetworkinfo["active_node"] = (func(p models.NiatelemetryNode, d *schema.ResourceData) []map[string]interface{} {
		var niatelemetrynodes []map[string]interface{}
		var ret models.NiatelemetryNode
		if reflect.DeepEqual(ret, p) {
			return nil
		}
		item := p
		niatelemetrynode := make(map[string]interface{})
		niatelemetrynode["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
		niatelemetrynode["class_id"] = item.GetClassId()
		niatelemetrynode["hostname"] = item.GetHostname()
		niatelemetrynode["managementt_ip"] = item.GetManagementtIp()
		niatelemetrynode["object_type"] = item.GetObjectType()
		niatelemetrynode["outofband_ip"] = item.GetOutofbandIp()

		niatelemetrynodes = append(niatelemetrynodes, niatelemetrynode)
		return niatelemetrynodes
	})(item.GetActiveNode(), d)
	niatelemetrynetworkinfo["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	niatelemetrynetworkinfo["class_id"] = item.GetClassId()
	niatelemetrynetworkinfo["hostname"] = item.GetHostname()
	niatelemetrynetworkinfo["managementt_ip"] = item.GetManagementtIp()
	niatelemetrynetworkinfo["object_type"] = item.GetObjectType()
	niatelemetrynetworkinfo["outofband_ip"] = item.GetOutofbandIp()
	niatelemetrynetworkinfo["standby_node"] = (func(p models.NiatelemetryNode, d *schema.ResourceData) []map[string]interface{} {
		var niatelemetrynodes []map[string]interface{}
		var ret models.NiatelemetryNode
		if reflect.DeepEqual(ret, p) {
			return nil
		}
		item := p
		niatelemetrynode := make(map[string]interface{})
		niatelemetrynode["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
		niatelemetrynode["class_id"] = item.GetClassId()
		niatelemetrynode["hostname"] = item.GetHostname()
		niatelemetrynode["managementt_ip"] = item.GetManagementtIp()
		niatelemetrynode["object_type"] = item.GetObjectType()
		niatelemetrynode["outofband_ip"] = item.GetOutofbandIp()

		niatelemetrynodes = append(niatelemetrynodes, niatelemetrynode)
		return niatelemetrynodes
	})(item.GetStandbyNode(), d)

	niatelemetrynetworkinfos = append(niatelemetrynetworkinfos, niatelemetrynetworkinfo)
	return niatelemetrynetworkinfos
}
func flattenMapNiatelemetryNexusCloudAccountRelationship(p models.NiatelemetryNexusCloudAccountRelationship, d *schema.ResourceData) []map[string]interface{} {
	var niatelemetrynexuscloudaccountrelationships []map[string]interface{}
	var ret models.NiatelemetryNexusCloudAccountRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	niatelemetrynexuscloudaccountrelationship := make(map[string]interface{})
	niatelemetrynexuscloudaccountrelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	niatelemetrynexuscloudaccountrelationship["class_id"] = item.GetClassId()
	niatelemetrynexuscloudaccountrelationship["moid"] = item.GetMoid()
	niatelemetrynexuscloudaccountrelationship["object_type"] = item.GetObjectType()
	niatelemetrynexuscloudaccountrelationship["selector"] = item.GetSelector()

	niatelemetrynexuscloudaccountrelationships = append(niatelemetrynexuscloudaccountrelationships, niatelemetrynexuscloudaccountrelationship)
	return niatelemetrynexuscloudaccountrelationships
}
func flattenMapNiatelemetryNexusDashboardsRelationship(p models.NiatelemetryNexusDashboardsRelationship, d *schema.ResourceData) []map[string]interface{} {
	var niatelemetrynexusdashboardsrelationships []map[string]interface{}
	var ret models.NiatelemetryNexusDashboardsRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	niatelemetrynexusdashboardsrelationship := make(map[string]interface{})
	niatelemetrynexusdashboardsrelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	niatelemetrynexusdashboardsrelationship["class_id"] = item.GetClassId()
	niatelemetrynexusdashboardsrelationship["moid"] = item.GetMoid()
	niatelemetrynexusdashboardsrelationship["object_type"] = item.GetObjectType()
	niatelemetrynexusdashboardsrelationship["selector"] = item.GetSelector()

	niatelemetrynexusdashboardsrelationships = append(niatelemetrynexusdashboardsrelationships, niatelemetrynexusdashboardsrelationship)
	return niatelemetrynexusdashboardsrelationships
}
func flattenMapNiatelemetryNiaInventoryRelationship(p models.NiatelemetryNiaInventoryRelationship, d *schema.ResourceData) []map[string]interface{} {
	var niatelemetryniainventoryrelationships []map[string]interface{}
	var ret models.NiatelemetryNiaInventoryRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	niatelemetryniainventoryrelationship := make(map[string]interface{})
	niatelemetryniainventoryrelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	niatelemetryniainventoryrelationship["class_id"] = item.GetClassId()
	niatelemetryniainventoryrelationship["moid"] = item.GetMoid()
	niatelemetryniainventoryrelationship["object_type"] = item.GetObjectType()
	niatelemetryniainventoryrelationship["selector"] = item.GetSelector()

	niatelemetryniainventoryrelationships = append(niatelemetryniainventoryrelationships, niatelemetryniainventoryrelationship)
	return niatelemetryniainventoryrelationships
}
func flattenMapNiatelemetryNiaLicenseStateRelationship(p models.NiatelemetryNiaLicenseStateRelationship, d *schema.ResourceData) []map[string]interface{} {
	var niatelemetrynialicensestaterelationships []map[string]interface{}
	var ret models.NiatelemetryNiaLicenseStateRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	niatelemetrynialicensestaterelationship := make(map[string]interface{})
	niatelemetrynialicensestaterelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	niatelemetrynialicensestaterelationship["class_id"] = item.GetClassId()
	niatelemetrynialicensestaterelationship["moid"] = item.GetMoid()
	niatelemetrynialicensestaterelationship["object_type"] = item.GetObjectType()
	niatelemetrynialicensestaterelationship["selector"] = item.GetSelector()

	niatelemetrynialicensestaterelationships = append(niatelemetrynialicensestaterelationships, niatelemetrynialicensestaterelationship)
	return niatelemetrynialicensestaterelationships
}
func flattenMapNiatelemetryNvePacketCounters(p models.NiatelemetryNvePacketCounters, d *schema.ResourceData) []map[string]interface{} {
	var niatelemetrynvepacketcounterss []map[string]interface{}
	var ret models.NiatelemetryNvePacketCounters
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	item := p
	niatelemetrynvepacketcounters := make(map[string]interface{})
	niatelemetrynvepacketcounters["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	niatelemetrynvepacketcounters["class_id"] = item.GetClassId()
	niatelemetrynvepacketcounters["mcast_inpkts"] = item.GetMcastInpkts()
	niatelemetrynvepacketcounters["mcast_outbytes"] = item.GetMcastOutbytes()
	niatelemetrynvepacketcounters["object_type"] = item.GetObjectType()
	niatelemetrynvepacketcounters["ucast_inpkts"] = item.GetUcastInpkts()
	niatelemetrynvepacketcounters["ucast_outpkts"] = item.GetUcastOutpkts()

	niatelemetrynvepacketcounterss = append(niatelemetrynvepacketcounterss, niatelemetrynvepacketcounters)
	return niatelemetrynvepacketcounterss
}
func flattenMapNiatelemetryNveVni(p models.NiatelemetryNveVni, d *schema.ResourceData) []map[string]interface{} {
	var niatelemetrynvevnis []map[string]interface{}
	var ret models.NiatelemetryNveVni
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	item := p
	niatelemetrynvevni := make(map[string]interface{})
	niatelemetrynvevni["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	niatelemetrynvevni["class_id"] = item.GetClassId()
	niatelemetrynvevni["cp_vni_count"] = item.GetCpVniCount()
	niatelemetrynvevni["cp_vni_down"] = item.GetCpVniDown()
	niatelemetrynvevni["cp_vni_up"] = item.GetCpVniUp()
	niatelemetrynvevni["dp_vni_count"] = item.GetDpVniCount()
	niatelemetrynvevni["dp_vni_down"] = item.GetDpVniDown()
	niatelemetrynvevni["dp_vni_up"] = item.GetDpVniUp()
	niatelemetrynvevni["object_type"] = item.GetObjectType()

	niatelemetrynvevnis = append(niatelemetrynvevnis, niatelemetrynvevni)
	return niatelemetrynvevnis
}
func flattenMapNiatelemetryNxosBgpEvpn(p models.NiatelemetryNxosBgpEvpn, d *schema.ResourceData) []map[string]interface{} {
	var niatelemetrynxosbgpevpns []map[string]interface{}
	var ret models.NiatelemetryNxosBgpEvpn
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	item := p
	niatelemetrynxosbgpevpn := make(map[string]interface{})
	niatelemetrynxosbgpevpn["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	niatelemetrynxosbgpevpn["class_id"] = item.GetClassId()
	niatelemetrynxosbgpevpn["nxos_evpn_mac_count"] = item.GetNxosEvpnMacCount()
	niatelemetrynxosbgpevpn["object_type"] = item.GetObjectType()
	niatelemetrynxosbgpevpn["total_networks"] = item.GetTotalNetworks()
	niatelemetrynxosbgpevpn["total_paths"] = item.GetTotalPaths()

	niatelemetrynxosbgpevpns = append(niatelemetrynxosbgpevpns, niatelemetrynxosbgpevpn)
	return niatelemetrynxosbgpevpns
}
func flattenMapNiatelemetryNxosBgpMvpn(p models.NiatelemetryNxosBgpMvpn, d *schema.ResourceData) []map[string]interface{} {
	var niatelemetrynxosbgpmvpns []map[string]interface{}
	var ret models.NiatelemetryNxosBgpMvpn
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	item := p
	niatelemetrynxosbgpmvpn := make(map[string]interface{})
	niatelemetrynxosbgpmvpn["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	niatelemetrynxosbgpmvpn["capable_peers"] = item.GetCapablePeers()
	niatelemetrynxosbgpmvpn["class_id"] = item.GetClassId()
	niatelemetrynxosbgpmvpn["configured_peers"] = item.GetConfiguredPeers()
	niatelemetrynxosbgpmvpn["memory_used"] = item.GetMemoryUsed()
	niatelemetrynxosbgpmvpn["number_of_cluster_lists"] = item.GetNumberOfClusterLists()
	niatelemetrynxosbgpmvpn["number_of_communities"] = item.GetNumberOfCommunities()
	niatelemetrynxosbgpmvpn["object_type"] = item.GetObjectType()
	niatelemetrynxosbgpmvpn["table_version"] = item.GetTableVersion()
	niatelemetrynxosbgpmvpn["total_networks"] = item.GetTotalNetworks()
	niatelemetrynxosbgpmvpn["total_paths"] = item.GetTotalPaths()

	niatelemetrynxosbgpmvpns = append(niatelemetrynxosbgpmvpns, niatelemetrynxosbgpmvpn)
	return niatelemetrynxosbgpmvpns
}
func flattenMapNiatelemetryNxosVtp(p models.NiatelemetryNxosVtp, d *schema.ResourceData) []map[string]interface{} {
	var niatelemetrynxosvtps []map[string]interface{}
	var ret models.NiatelemetryNxosVtp
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	item := p
	niatelemetrynxosvtp := make(map[string]interface{})
	niatelemetrynxosvtp["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	niatelemetrynxosvtp["class_id"] = item.GetClassId()
	niatelemetrynxosvtp["object_type"] = item.GetObjectType()
	niatelemetrynxosvtp["oper_mode"] = item.GetOperMode()
	niatelemetrynxosvtp["pruning_mode"] = item.GetPruningMode()
	niatelemetrynxosvtp["running_version"] = item.GetRunningVersion()
	niatelemetrynxosvtp["trap_enabled"] = item.GetTrapEnabled()
	niatelemetrynxosvtp["v2_mode"] = item.GetV2Mode()
	niatelemetrynxosvtp["nr_version"] = item.GetVersion()

	niatelemetrynxosvtps = append(niatelemetrynxosvtps, niatelemetrynxosvtp)
	return niatelemetrynxosvtps
}
func flattenMapNiatelemetryProcSysCpu15min(p models.NiatelemetryProcSysCpu15min, d *schema.ResourceData) []map[string]interface{} {
	var niatelemetryprocsyscpu15mins []map[string]interface{}
	var ret models.NiatelemetryProcSysCpu15min
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	item := p
	niatelemetryprocsyscpu15min := make(map[string]interface{})
	niatelemetryprocsyscpu15min["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	niatelemetryprocsyscpu15min["class_id"] = item.GetClassId()
	niatelemetryprocsyscpu15min["kernal_avg"] = item.GetKernalAvg()
	niatelemetryprocsyscpu15min["object_type"] = item.GetObjectType()
	niatelemetryprocsyscpu15min["user_avg"] = item.GetUserAvg()

	niatelemetryprocsyscpu15mins = append(niatelemetryprocsyscpu15mins, niatelemetryprocsyscpu15min)
	return niatelemetryprocsyscpu15mins
}
func flattenMapNiatelemetryProcSysCpu5min(p models.NiatelemetryProcSysCpu5min, d *schema.ResourceData) []map[string]interface{} {
	var niatelemetryprocsyscpu5mins []map[string]interface{}
	var ret models.NiatelemetryProcSysCpu5min
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	item := p
	niatelemetryprocsyscpu5min := make(map[string]interface{})
	niatelemetryprocsyscpu5min["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	niatelemetryprocsyscpu5min["class_id"] = item.GetClassId()
	niatelemetryprocsyscpu5min["kernal_avg"] = item.GetKernalAvg()
	niatelemetryprocsyscpu5min["object_type"] = item.GetObjectType()
	niatelemetryprocsyscpu5min["user_avg"] = item.GetUserAvg()

	niatelemetryprocsyscpu5mins = append(niatelemetryprocsyscpu5mins, niatelemetryprocsyscpu5min)
	return niatelemetryprocsyscpu5mins
}
func flattenMapNiatelemetryProcSysMem15min(p models.NiatelemetryProcSysMem15min, d *schema.ResourceData) []map[string]interface{} {
	var niatelemetryprocsysmem15mins []map[string]interface{}
	var ret models.NiatelemetryProcSysMem15min
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	item := p
	niatelemetryprocsysmem15min := make(map[string]interface{})
	niatelemetryprocsysmem15min["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	niatelemetryprocsysmem15min["class_id"] = item.GetClassId()
	niatelemetryprocsysmem15min["free_avg"] = item.GetFreeAvg()
	niatelemetryprocsysmem15min["object_type"] = item.GetObjectType()
	niatelemetryprocsysmem15min["total_avg"] = item.GetTotalAvg()

	niatelemetryprocsysmem15mins = append(niatelemetryprocsysmem15mins, niatelemetryprocsysmem15min)
	return niatelemetryprocsysmem15mins
}
func flattenMapNiatelemetryProcSysMem5min(p models.NiatelemetryProcSysMem5min, d *schema.ResourceData) []map[string]interface{} {
	var niatelemetryprocsysmem5mins []map[string]interface{}
	var ret models.NiatelemetryProcSysMem5min
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	item := p
	niatelemetryprocsysmem5min := make(map[string]interface{})
	niatelemetryprocsysmem5min["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	niatelemetryprocsysmem5min["class_id"] = item.GetClassId()
	niatelemetryprocsysmem5min["free_avg"] = item.GetFreeAvg()
	niatelemetryprocsysmem5min["object_type"] = item.GetObjectType()
	niatelemetryprocsysmem5min["total_avg"] = item.GetTotalAvg()

	niatelemetryprocsysmem5mins = append(niatelemetryprocsysmem5mins, niatelemetryprocsysmem5min)
	return niatelemetryprocsysmem5mins
}
func flattenMapNiatelemetrySmartLicense(p models.NiatelemetrySmartLicense, d *schema.ResourceData) []map[string]interface{} {
	var niatelemetrysmartlicenses []map[string]interface{}
	var ret models.NiatelemetrySmartLicense
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	item := p
	niatelemetrysmartlicense := make(map[string]interface{})
	niatelemetrysmartlicense["active_mode"] = item.GetActiveMode()
	niatelemetrysmartlicense["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	niatelemetrysmartlicense["auth_status"] = item.GetAuthStatus()
	niatelemetrysmartlicense["class_id"] = item.GetClassId()
	niatelemetrysmartlicense["license_udi"] = item.GetLicenseUdi()
	niatelemetrysmartlicense["object_type"] = item.GetObjectType()
	niatelemetrysmartlicense["smart_account"] = item.GetSmartAccount()

	niatelemetrysmartlicenses = append(niatelemetrysmartlicenses, niatelemetrysmartlicense)
	return niatelemetrysmartlicenses
}
func flattenMapOauthAccessTokenRelationship(p models.OauthAccessTokenRelationship, d *schema.ResourceData) []map[string]interface{} {
	var oauthaccesstokenrelationships []map[string]interface{}
	var ret models.OauthAccessTokenRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	oauthaccesstokenrelationship := make(map[string]interface{})
	oauthaccesstokenrelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	oauthaccesstokenrelationship["class_id"] = item.GetClassId()
	oauthaccesstokenrelationship["moid"] = item.GetMoid()
	oauthaccesstokenrelationship["object_type"] = item.GetObjectType()
	oauthaccesstokenrelationship["selector"] = item.GetSelector()

	oauthaccesstokenrelationships = append(oauthaccesstokenrelationships, oauthaccesstokenrelationship)
	return oauthaccesstokenrelationships
}
func flattenMapOnpremClusterInfo(p models.OnpremClusterInfo, d *schema.ResourceData) []map[string]interface{} {
	var onpremclusterinfos []map[string]interface{}
	var ret models.OnpremClusterInfo
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	item := p
	onpremclusterinfo := make(map[string]interface{})
	onpremclusterinfo["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	onpremclusterinfo["class_id"] = item.GetClassId()
	onpremclusterinfo["nodes"] = (func(p []models.OnpremClusterNode, d *schema.ResourceData) []map[string]interface{} {
		var onpremclusternodes []map[string]interface{}
		if len(p) == 0 {
			return nil
		}
		for _, item := range p {
			onpremclusternode := make(map[string]interface{})
			onpremclusternode["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
			onpremclusternode["boot_time"] = item.GetBootTime().String()
			onpremclusternode["class_id"] = item.GetClassId()
			onpremclusternode["cluster_mode"] = item.GetClusterMode()
			onpremclusternode["cpu_count"] = item.GetCpuCount()
			onpremclusternode["deployment_type"] = item.GetDeploymentType()
			onpremclusternode["disks"] = (func(p []models.OnpremResourceInfo, d *schema.ResourceData) []map[string]interface{} {
				var onpremresourceinfos []map[string]interface{}
				if len(p) == 0 {
					return nil
				}
				for _, item := range p {
					onpremresourceinfo := make(map[string]interface{})
					onpremresourceinfo["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
					onpremresourceinfo["avail"] = item.GetAvail()
					onpremresourceinfo["class_id"] = item.GetClassId()
					onpremresourceinfo["name"] = item.GetName()
					onpremresourceinfo["object_type"] = item.GetObjectType()
					onpremresourceinfo["total"] = item.GetTotal()
					onpremresourceinfos = append(onpremresourceinfos, onpremresourceinfo)
				}
				return onpremresourceinfos
			})(item.GetDisks(), d)
			onpremclusternode["hostname"] = item.GetHostname()
			onpremclusternode["memory"] = (func(p models.OnpremResourceInfo, d *schema.ResourceData) []map[string]interface{} {
				var onpremresourceinfos []map[string]interface{}
				var ret models.OnpremResourceInfo
				if reflect.DeepEqual(ret, p) {
					return nil
				}
				item := p
				onpremresourceinfo := make(map[string]interface{})
				onpremresourceinfo["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
				onpremresourceinfo["avail"] = item.GetAvail()
				onpremresourceinfo["class_id"] = item.GetClassId()
				onpremresourceinfo["name"] = item.GetName()
				onpremresourceinfo["object_type"] = item.GetObjectType()
				onpremresourceinfo["total"] = item.GetTotal()

				onpremresourceinfos = append(onpremresourceinfos, onpremresourceinfo)
				return onpremresourceinfos
			})(item.GetMemory(), d)
			onpremclusternode["node_id"] = item.GetNodeId()
			onpremclusternode["object_type"] = item.GetObjectType()
			onpremclusternode["ping_error_nodes"] = item.GetPingErrorNodes()
			onpremclusternode["ping_ok"] = item.GetPingOk()
			onpremclusternode["primary_node"] = item.GetPrimaryNode()
			onpremclusternode["rsync_error_nodes"] = item.GetRsyncErrorNodes()
			onpremclusternode["rsync_ok"] = item.GetRsyncOk()
			onpremclusternode["nr_version"] = item.GetVersion()
			onpremclusternode["virtual_env_type"] = item.GetVirtualEnvType()
			onpremclusternodes = append(onpremclusternodes, onpremclusternode)
		}
		return onpremclusternodes
	})(item.GetNodes(), d)
	onpremclusterinfo["object_type"] = item.GetObjectType()
	onpremclusterinfo["quorum_ok"] = item.GetQuorumOk()
	onpremclusterinfo["reported_time"] = item.GetReportedTime().String()
	onpremclusterinfo["setup_time"] = item.GetSetupTime().String()
	onpremclusterinfo["time_zone"] = item.GetTimeZone()

	onpremclusterinfos = append(onpremclusterinfos, onpremclusterinfo)
	return onpremclusterinfos
}
func flattenMapOnpremSchedule(p models.OnpremSchedule, d *schema.ResourceData) []map[string]interface{} {
	var onpremschedules []map[string]interface{}
	var ret models.OnpremSchedule
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	item := p
	onpremschedule := make(map[string]interface{})
	onpremschedule["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	onpremschedule["class_id"] = item.GetClassId()
	onpremschedule["day_of_month"] = item.GetDayOfMonth()
	onpremschedule["day_of_week"] = item.GetDayOfWeek()
	onpremschedule["month_of_year"] = item.GetMonthOfYear()
	onpremschedule["object_type"] = item.GetObjectType()
	onpremschedule["repeat_interval"] = item.GetRepeatInterval()
	onpremschedule["time_of_day"] = item.GetTimeOfDay()
	onpremschedule["time_zone"] = item.GetTimeZone()
	onpremschedule["week_of_month"] = item.GetWeekOfMonth()

	onpremschedules = append(onpremschedules, onpremschedule)
	return onpremschedules
}
func flattenMapOnpremUpgradePhase(p models.OnpremUpgradePhase, d *schema.ResourceData) []map[string]interface{} {
	var onpremupgradephases []map[string]interface{}
	var ret models.OnpremUpgradePhase
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	item := p
	onpremupgradephase := make(map[string]interface{})
	onpremupgradephase["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	onpremupgradephase["class_id"] = item.GetClassId()
	onpremupgradephase["current_node"] = item.GetCurrentNode()
	onpremupgradephase["current_node_hostname"] = item.GetCurrentNodeHostname()
	onpremupgradephase["elapsed_time"] = item.GetElapsedTime()
	onpremupgradephase["end_time"] = item.GetEndTime().String()
	onpremupgradephase["failed"] = item.GetFailed()
	onpremupgradephase["message"] = item.GetMessage()
	onpremupgradephase["name"] = item.GetName()
	onpremupgradephase["object_type"] = item.GetObjectType()
	onpremupgradephase["retry_count"] = item.GetRetryCount()
	onpremupgradephase["start_time"] = item.GetStartTime().String()
	onpremupgradephase["status"] = item.GetStatus()

	onpremupgradephases = append(onpremupgradephases, onpremupgradephase)
	return onpremupgradephases
}
func flattenMapOpenapiOpenApiSpecificationRelationship(p models.OpenapiOpenApiSpecificationRelationship, d *schema.ResourceData) []map[string]interface{} {
	var openapiopenapispecificationrelationships []map[string]interface{}
	var ret models.OpenapiOpenApiSpecificationRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	openapiopenapispecificationrelationship := make(map[string]interface{})
	openapiopenapispecificationrelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	openapiopenapispecificationrelationship["class_id"] = item.GetClassId()
	openapiopenapispecificationrelationship["moid"] = item.GetMoid()
	openapiopenapispecificationrelationship["object_type"] = item.GetObjectType()
	openapiopenapispecificationrelationship["selector"] = item.GetSelector()

	openapiopenapispecificationrelationships = append(openapiopenapispecificationrelationships, openapiopenapispecificationrelationship)
	return openapiopenapispecificationrelationships
}
func flattenMapOpenapiProcessFileRelationship(p models.OpenapiProcessFileRelationship, d *schema.ResourceData) []map[string]interface{} {
	var openapiprocessfilerelationships []map[string]interface{}
	var ret models.OpenapiProcessFileRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	openapiprocessfilerelationship := make(map[string]interface{})
	openapiprocessfilerelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	openapiprocessfilerelationship["class_id"] = item.GetClassId()
	openapiprocessfilerelationship["moid"] = item.GetMoid()
	openapiprocessfilerelationship["object_type"] = item.GetObjectType()
	openapiprocessfilerelationship["selector"] = item.GetSelector()

	openapiprocessfilerelationships = append(openapiprocessfilerelationships, openapiprocessfilerelationship)
	return openapiprocessfilerelationships
}
func flattenMapOpenapiTaskGenerationRequestRelationship(p models.OpenapiTaskGenerationRequestRelationship, d *schema.ResourceData) []map[string]interface{} {
	var openapitaskgenerationrequestrelationships []map[string]interface{}
	var ret models.OpenapiTaskGenerationRequestRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	openapitaskgenerationrequestrelationship := make(map[string]interface{})
	openapitaskgenerationrequestrelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	openapitaskgenerationrequestrelationship["class_id"] = item.GetClassId()
	openapitaskgenerationrequestrelationship["moid"] = item.GetMoid()
	openapitaskgenerationrequestrelationship["object_type"] = item.GetObjectType()
	openapitaskgenerationrequestrelationship["selector"] = item.GetSelector()

	openapitaskgenerationrequestrelationships = append(openapitaskgenerationrequestrelationships, openapitaskgenerationrequestrelationship)
	return openapitaskgenerationrequestrelationships
}
func flattenMapOrganizationOrganizationRelationship(p models.OrganizationOrganizationRelationship, d *schema.ResourceData) []map[string]interface{} {
	var organizationorganizationrelationships []map[string]interface{}
	var ret models.OrganizationOrganizationRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	organizationorganizationrelationship := make(map[string]interface{})
	organizationorganizationrelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	organizationorganizationrelationship["class_id"] = item.GetClassId()
	organizationorganizationrelationship["moid"] = item.GetMoid()
	organizationorganizationrelationship["object_type"] = item.GetObjectType()
	organizationorganizationrelationship["selector"] = item.GetSelector()

	organizationorganizationrelationships = append(organizationorganizationrelationships, organizationorganizationrelationship)
	return organizationorganizationrelationships
}
func flattenMapOsAnswers(p models.OsAnswers, d *schema.ResourceData) []map[string]interface{} {
	var osanswerss []map[string]interface{}
	var ret models.OsAnswers
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	item := p
	osanswers := make(map[string]interface{})
	osanswers["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	osanswers["alternate_name_servers"] = item.GetAlternateNameServers()
	answer_file_x, exists := d.GetOk("answers")
	if exists && answer_file_x != nil {
		answer_file_y := answer_file_x.([]interface{})[0].(map[string]interface{})
		osanswers["answer_file"] = answer_file_y["answer_file"]
	}
	osanswers["class_id"] = item.GetClassId()
	osanswers["hostname"] = item.GetHostname()
	osanswers["ip_config_type"] = item.GetIpConfigType()
	osanswers["ip_configuration"] = (func(p models.OsIpConfiguration, d *schema.ResourceData) []map[string]interface{} {
		var osipconfigurations []map[string]interface{}
		var ret models.OsIpConfiguration
		if reflect.DeepEqual(ret, p) {
			return nil
		}
		item := p
		osipconfiguration := make(map[string]interface{})
		osipconfiguration["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
		osipconfiguration["class_id"] = item.GetClassId()
		osipconfiguration["object_type"] = item.GetObjectType()

		osipconfigurations = append(osipconfigurations, osipconfiguration)
		return osipconfigurations
	})(item.GetIpConfiguration(), d)
	osanswers["is_answer_file_set"] = item.GetIsAnswerFileSet()
	osanswers["is_root_password_crypted"] = item.GetIsRootPasswordCrypted()
	osanswers["is_root_password_set"] = item.GetIsRootPasswordSet()
	osanswers["nameserver"] = item.GetNameserver()
	osanswers["network_device"] = item.GetNetworkDevice()
	osanswers["object_type"] = item.GetObjectType()
	osanswers["product_key"] = item.GetProductKey()
	root_password_x, exists := d.GetOk("answers")
	if exists && root_password_x != nil {
		root_password_y := root_password_x.([]interface{})[0].(map[string]interface{})
		osanswers["root_password"] = root_password_y["root_password"]
	}
	osanswers["nr_source"] = item.GetSource()

	osanswerss = append(osanswerss, osanswers)
	return osanswerss
}
func flattenMapOsCatalogRelationship(p models.OsCatalogRelationship, d *schema.ResourceData) []map[string]interface{} {
	var oscatalogrelationships []map[string]interface{}
	var ret models.OsCatalogRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	oscatalogrelationship := make(map[string]interface{})
	oscatalogrelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	oscatalogrelationship["class_id"] = item.GetClassId()
	oscatalogrelationship["moid"] = item.GetMoid()
	oscatalogrelationship["object_type"] = item.GetObjectType()
	oscatalogrelationship["selector"] = item.GetSelector()

	oscatalogrelationships = append(oscatalogrelationships, oscatalogrelationship)
	return oscatalogrelationships
}
func flattenMapOsConfigurationFileRelationship(p models.OsConfigurationFileRelationship, d *schema.ResourceData) []map[string]interface{} {
	var osconfigurationfilerelationships []map[string]interface{}
	var ret models.OsConfigurationFileRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	osconfigurationfilerelationship := make(map[string]interface{})
	osconfigurationfilerelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	osconfigurationfilerelationship["class_id"] = item.GetClassId()
	osconfigurationfilerelationship["moid"] = item.GetMoid()
	osconfigurationfilerelationship["object_type"] = item.GetObjectType()
	osconfigurationfilerelationship["selector"] = item.GetSelector()

	osconfigurationfilerelationships = append(osconfigurationfilerelationships, osconfigurationfilerelationship)
	return osconfigurationfilerelationships
}
func flattenMapOsGlobalConfig(p models.OsGlobalConfig, d *schema.ResourceData) []map[string]interface{} {
	var osglobalconfigs []map[string]interface{}
	var ret models.OsGlobalConfig
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	item := p
	osglobalconfig := make(map[string]interface{})
	osglobalconfig["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	osglobalconfig["class_id"] = item.GetClassId()
	osglobalconfig["configuration_file_name"] = item.GetConfigurationFileName()
	osglobalconfig["configuration_source"] = item.GetConfigurationSource()
	osglobalconfig["install_method"] = item.GetInstallMethod()
	osglobalconfig["install_target_type"] = item.GetInstallTargetType()
	osglobalconfig["object_type"] = item.GetObjectType()
	osglobalconfig["operating_system_parameters"] = (func(p models.OsOperatingSystemParameters, d *schema.ResourceData) []map[string]interface{} {
		var osoperatingsystemparameterss []map[string]interface{}
		var ret models.OsOperatingSystemParameters
		if reflect.DeepEqual(ret, p) {
			return nil
		}
		item := p
		osoperatingsystemparameters := make(map[string]interface{})
		osoperatingsystemparameters["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
		osoperatingsystemparameters["class_id"] = item.GetClassId()
		osoperatingsystemparameters["object_type"] = item.GetObjectType()

		osoperatingsystemparameterss = append(osoperatingsystemparameterss, osoperatingsystemparameters)
		return osoperatingsystemparameterss
	})(item.GetOperatingSystemParameters(), d)
	osglobalconfig["os_image_name"] = item.GetOsImageName()
	osglobalconfig["override_secure_boot"] = item.GetOverrideSecureBoot()
	osglobalconfig["scu_image_name"] = item.GetScuImageName()
	osglobalconfig["windows_edition"] = item.GetWindowsEdition()

	osglobalconfigs = append(osglobalconfigs, osglobalconfig)
	return osglobalconfigs
}
func flattenMapOsInstallTarget(p models.OsInstallTarget, d *schema.ResourceData) []map[string]interface{} {
	var osinstalltargets []map[string]interface{}
	var ret models.OsInstallTarget
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	item := p
	osinstalltarget := make(map[string]interface{})
	osinstalltarget["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	osinstalltarget["class_id"] = item.GetClassId()
	osinstalltarget["object_type"] = item.GetObjectType()

	osinstalltargets = append(osinstalltargets, osinstalltarget)
	return osinstalltargets
}
func flattenMapOsOperatingSystemParameters(p models.OsOperatingSystemParameters, d *schema.ResourceData) []map[string]interface{} {
	var osoperatingsystemparameterss []map[string]interface{}
	var ret models.OsOperatingSystemParameters
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	item := p
	osoperatingsystemparameters := make(map[string]interface{})
	osoperatingsystemparameters["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	osoperatingsystemparameters["class_id"] = item.GetClassId()
	osoperatingsystemparameters["object_type"] = item.GetObjectType()

	osoperatingsystemparameterss = append(osoperatingsystemparameterss, osoperatingsystemparameters)
	return osoperatingsystemparameterss
}
func flattenMapPartnerintegrationDeviceConnectorRelationship(p models.PartnerintegrationDeviceConnectorRelationship, d *schema.ResourceData) []map[string]interface{} {
	var partnerintegrationdeviceconnectorrelationships []map[string]interface{}
	var ret models.PartnerintegrationDeviceConnectorRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	partnerintegrationdeviceconnectorrelationship := make(map[string]interface{})
	partnerintegrationdeviceconnectorrelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	partnerintegrationdeviceconnectorrelationship["class_id"] = item.GetClassId()
	partnerintegrationdeviceconnectorrelationship["moid"] = item.GetMoid()
	partnerintegrationdeviceconnectorrelationship["object_type"] = item.GetObjectType()
	partnerintegrationdeviceconnectorrelationship["selector"] = item.GetSelector()

	partnerintegrationdeviceconnectorrelationships = append(partnerintegrationdeviceconnectorrelationships, partnerintegrationdeviceconnectorrelationship)
	return partnerintegrationdeviceconnectorrelationships
}
func flattenMapPartnerintegrationInventoryRelationship(p models.PartnerintegrationInventoryRelationship, d *schema.ResourceData) []map[string]interface{} {
	var partnerintegrationinventoryrelationships []map[string]interface{}
	var ret models.PartnerintegrationInventoryRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	partnerintegrationinventoryrelationship := make(map[string]interface{})
	partnerintegrationinventoryrelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	partnerintegrationinventoryrelationship["class_id"] = item.GetClassId()
	partnerintegrationinventoryrelationship["moid"] = item.GetMoid()
	partnerintegrationinventoryrelationship["object_type"] = item.GetObjectType()
	partnerintegrationinventoryrelationship["selector"] = item.GetSelector()

	partnerintegrationinventoryrelationships = append(partnerintegrationinventoryrelationships, partnerintegrationinventoryrelationship)
	return partnerintegrationinventoryrelationships
}
func flattenMapPartnerintegrationMetricsRelationship(p models.PartnerintegrationMetricsRelationship, d *schema.ResourceData) []map[string]interface{} {
	var partnerintegrationmetricsrelationships []map[string]interface{}
	var ret models.PartnerintegrationMetricsRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	partnerintegrationmetricsrelationship := make(map[string]interface{})
	partnerintegrationmetricsrelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	partnerintegrationmetricsrelationship["class_id"] = item.GetClassId()
	partnerintegrationmetricsrelationship["moid"] = item.GetMoid()
	partnerintegrationmetricsrelationship["object_type"] = item.GetObjectType()
	partnerintegrationmetricsrelationship["selector"] = item.GetSelector()

	partnerintegrationmetricsrelationships = append(partnerintegrationmetricsrelationships, partnerintegrationmetricsrelationship)
	return partnerintegrationmetricsrelationships
}
func flattenMapPartnerintegrationMetricsModel(p models.PartnerintegrationMetricsModel, d *schema.ResourceData) []map[string]interface{} {
	var partnerintegrationmetricsmodels []map[string]interface{}
	var ret models.PartnerintegrationMetricsModel
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	item := p
	partnerintegrationmetricsmodel := make(map[string]interface{})
	partnerintegrationmetricsmodel["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	partnerintegrationmetricsmodel["attributes"] = flattenAdditionalProperties(item.Attributes)
	partnerintegrationmetricsmodel["class_id"] = item.GetClassId()
	partnerintegrationmetricsmodel["druid_instrument_exporters"] = flattenAdditionalProperties(item.DruidInstrumentExporters)
	partnerintegrationmetricsmodel["instruments"] = flattenAdditionalProperties(item.Instruments)
	partnerintegrationmetricsmodel["meter_providers"] = flattenAdditionalProperties(item.MeterProviders)
	partnerintegrationmetricsmodel["metrics"] = flattenAdditionalProperties(item.Metrics)
	partnerintegrationmetricsmodel["object_type"] = item.GetObjectType()

	partnerintegrationmetricsmodels = append(partnerintegrationmetricsmodels, partnerintegrationmetricsmodel)
	return partnerintegrationmetricsmodels
}
func flattenMapPciDeviceRelationship(p models.PciDeviceRelationship, d *schema.ResourceData) []map[string]interface{} {
	var pcidevicerelationships []map[string]interface{}
	var ret models.PciDeviceRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	pcidevicerelationship := make(map[string]interface{})
	pcidevicerelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	pcidevicerelationship["class_id"] = item.GetClassId()
	pcidevicerelationship["moid"] = item.GetMoid()
	pcidevicerelationship["object_type"] = item.GetObjectType()
	pcidevicerelationship["selector"] = item.GetSelector()

	pcidevicerelationships = append(pcidevicerelationships, pcidevicerelationship)
	return pcidevicerelationships
}
func flattenMapPciNodeRelationship(p models.PciNodeRelationship, d *schema.ResourceData) []map[string]interface{} {
	var pcinoderelationships []map[string]interface{}
	var ret models.PciNodeRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	pcinoderelationship := make(map[string]interface{})
	pcinoderelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	pcinoderelationship["class_id"] = item.GetClassId()
	pcinoderelationship["moid"] = item.GetMoid()
	pcinoderelationship["object_type"] = item.GetObjectType()
	pcinoderelationship["selector"] = item.GetSelector()

	pcinoderelationships = append(pcinoderelationships, pcinoderelationship)
	return pcinoderelationships
}
func flattenMapPciSwitchRelationship(p models.PciSwitchRelationship, d *schema.ResourceData) []map[string]interface{} {
	var pciswitchrelationships []map[string]interface{}
	var ret models.PciSwitchRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	pciswitchrelationship := make(map[string]interface{})
	pciswitchrelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	pciswitchrelationship["class_id"] = item.GetClassId()
	pciswitchrelationship["moid"] = item.GetMoid()
	pciswitchrelationship["object_type"] = item.GetObjectType()
	pciswitchrelationship["selector"] = item.GetSelector()

	pciswitchrelationships = append(pciswitchrelationships, pciswitchrelationship)
	return pciswitchrelationships
}
func flattenMapPkixDistinguishedName(p models.PkixDistinguishedName, d *schema.ResourceData) []map[string]interface{} {
	var pkixdistinguishednames []map[string]interface{}
	var ret models.PkixDistinguishedName
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	item := p
	pkixdistinguishedname := make(map[string]interface{})
	pkixdistinguishedname["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	pkixdistinguishedname["class_id"] = item.GetClassId()
	pkixdistinguishedname["common_name"] = item.GetCommonName()
	pkixdistinguishedname["country"] = item.GetCountry()
	pkixdistinguishedname["locality"] = item.GetLocality()
	pkixdistinguishedname["object_type"] = item.GetObjectType()
	pkixdistinguishedname["organization"] = item.GetOrganization()
	pkixdistinguishedname["organizational_unit"] = item.GetOrganizationalUnit()
	pkixdistinguishedname["state"] = item.GetState()

	pkixdistinguishednames = append(pkixdistinguishednames, pkixdistinguishedname)
	return pkixdistinguishednames
}
func flattenMapPkixKeyGenerationSpec(p models.PkixKeyGenerationSpec, d *schema.ResourceData) []map[string]interface{} {
	var pkixkeygenerationspecs []map[string]interface{}
	var ret models.PkixKeyGenerationSpec
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	item := p
	pkixkeygenerationspec := make(map[string]interface{})
	pkixkeygenerationspec["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	pkixkeygenerationspec["class_id"] = item.GetClassId()
	pkixkeygenerationspec["name"] = item.GetName()
	pkixkeygenerationspec["object_type"] = item.GetObjectType()

	pkixkeygenerationspecs = append(pkixkeygenerationspecs, pkixkeygenerationspec)
	return pkixkeygenerationspecs
}
func flattenMapPkixSubjectAlternateName(p models.PkixSubjectAlternateName, d *schema.ResourceData) []map[string]interface{} {
	var pkixsubjectalternatenames []map[string]interface{}
	var ret models.PkixSubjectAlternateName
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	item := p
	pkixsubjectalternatename := make(map[string]interface{})
	pkixsubjectalternatename["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	pkixsubjectalternatename["class_id"] = item.GetClassId()
	pkixsubjectalternatename["dns_name"] = item.GetDnsName()
	pkixsubjectalternatename["email_address"] = item.GetEmailAddress()
	pkixsubjectalternatename["ip_address"] = item.GetIpAddress()
	pkixsubjectalternatename["object_type"] = item.GetObjectType()
	pkixsubjectalternatename["uri"] = item.GetUri()

	pkixsubjectalternatenames = append(pkixsubjectalternatenames, pkixsubjectalternatename)
	return pkixsubjectalternatenames
}
func flattenMapPolicyAbstractConfigProfileRelationship(p models.PolicyAbstractConfigProfileRelationship, d *schema.ResourceData) []map[string]interface{} {
	var policyabstractconfigprofilerelationships []map[string]interface{}
	var ret models.PolicyAbstractConfigProfileRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	policyabstractconfigprofilerelationship := make(map[string]interface{})
	policyabstractconfigprofilerelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	policyabstractconfigprofilerelationship["class_id"] = item.GetClassId()
	policyabstractconfigprofilerelationship["moid"] = item.GetMoid()
	policyabstractconfigprofilerelationship["object_type"] = item.GetObjectType()
	policyabstractconfigprofilerelationship["selector"] = item.GetSelector()

	policyabstractconfigprofilerelationships = append(policyabstractconfigprofilerelationships, policyabstractconfigprofilerelationship)
	return policyabstractconfigprofilerelationships
}
func flattenMapPolicyAbstractProfileRelationship(p models.PolicyAbstractProfileRelationship, d *schema.ResourceData) []map[string]interface{} {
	var policyabstractprofilerelationships []map[string]interface{}
	var ret models.PolicyAbstractProfileRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	policyabstractprofilerelationship := make(map[string]interface{})
	policyabstractprofilerelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	policyabstractprofilerelationship["class_id"] = item.GetClassId()
	policyabstractprofilerelationship["moid"] = item.GetMoid()
	policyabstractprofilerelationship["object_type"] = item.GetObjectType()
	policyabstractprofilerelationship["selector"] = item.GetSelector()

	policyabstractprofilerelationships = append(policyabstractprofilerelationships, policyabstractprofilerelationship)
	return policyabstractprofilerelationships
}
func flattenMapPolicyConfigChange(p models.PolicyConfigChange, d *schema.ResourceData) []map[string]interface{} {
	var policyconfigchanges []map[string]interface{}
	var ret models.PolicyConfigChange
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	item := p
	policyconfigchange := make(map[string]interface{})
	policyconfigchange["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	policyconfigchange["changes"] = item.GetChanges()
	policyconfigchange["class_id"] = item.GetClassId()
	policyconfigchange["disruptions"] = item.GetDisruptions()
	policyconfigchange["object_type"] = item.GetObjectType()
	policyconfigchange["policy_disruptions"] = (func(p []models.PolicyConfigChangeDisruptionDetailType, d *schema.ResourceData) []map[string]interface{} {
		var policyconfigchangedisruptiondetailtypes []map[string]interface{}
		if len(p) == 0 {
			return nil
		}
		for _, item := range p {
			policyconfigchangedisruptiondetailtype := make(map[string]interface{})
			policyconfigchangedisruptiondetailtype["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
			policyconfigchangedisruptiondetailtype["class_id"] = item.GetClassId()
			policyconfigchangedisruptiondetailtype["disruptions"] = item.GetDisruptions()
			policyconfigchangedisruptiondetailtype["object_type"] = item.GetObjectType()
			policyconfigchangedisruptiondetailtype["policy_name"] = item.GetPolicyName()
			policyconfigchangedisruptiondetailtype["policy_pending_action"] = item.GetPolicyPendingAction()
			policyconfigchangedisruptiondetailtypes = append(policyconfigchangedisruptiondetailtypes, policyconfigchangedisruptiondetailtype)
		}
		return policyconfigchangedisruptiondetailtypes
	})(item.GetPolicyDisruptions(), d)

	policyconfigchanges = append(policyconfigchanges, policyconfigchange)
	return policyconfigchanges
}
func flattenMapPolicyConfigChangeContext(p models.PolicyConfigChangeContext, d *schema.ResourceData) []map[string]interface{} {
	var policyconfigchangecontexts []map[string]interface{}
	var ret models.PolicyConfigChangeContext
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	item := p
	policyconfigchangecontext := make(map[string]interface{})
	policyconfigchangecontext["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	policyconfigchangecontext["class_id"] = item.GetClassId()
	policyconfigchangecontext["config_change_error"] = item.GetConfigChangeError()
	policyconfigchangecontext["config_change_state"] = item.GetConfigChangeState()
	policyconfigchangecontext["initial_config_context"] = (func(p models.PolicyConfigContext, d *schema.ResourceData) []map[string]interface{} {
		var policyconfigcontexts []map[string]interface{}
		var ret models.PolicyConfigContext
		if reflect.DeepEqual(ret, p) {
			return nil
		}
		item := p
		policyconfigcontext := make(map[string]interface{})
		policyconfigcontext["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
		policyconfigcontext["class_id"] = item.GetClassId()
		policyconfigcontext["config_state"] = item.GetConfigState()
		policyconfigcontext["config_state_summary"] = item.GetConfigStateSummary()
		policyconfigcontext["config_type"] = item.GetConfigType()
		policyconfigcontext["control_action"] = item.GetControlAction()
		policyconfigcontext["error_state"] = item.GetErrorState()
		policyconfigcontext["inconsistency_reason"] = item.GetInconsistencyReason()
		policyconfigcontext["object_type"] = item.GetObjectType()
		policyconfigcontext["oper_state"] = item.GetOperState()

		policyconfigcontexts = append(policyconfigcontexts, policyconfigcontext)
		return policyconfigcontexts
	})(item.GetInitialConfigContext(), d)
	policyconfigchangecontext["object_type"] = item.GetObjectType()

	policyconfigchangecontexts = append(policyconfigchangecontexts, policyconfigchangecontext)
	return policyconfigchangecontexts
}
func flattenMapPolicyConfigContext(p models.PolicyConfigContext, d *schema.ResourceData) []map[string]interface{} {
	var policyconfigcontexts []map[string]interface{}
	var ret models.PolicyConfigContext
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	item := p
	policyconfigcontext := make(map[string]interface{})
	policyconfigcontext["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	policyconfigcontext["class_id"] = item.GetClassId()
	policyconfigcontext["config_state"] = item.GetConfigState()
	policyconfigcontext["config_state_summary"] = item.GetConfigStateSummary()
	policyconfigcontext["config_type"] = item.GetConfigType()
	policyconfigcontext["control_action"] = item.GetControlAction()
	policyconfigcontext["error_state"] = item.GetErrorState()
	policyconfigcontext["inconsistency_reason"] = item.GetInconsistencyReason()
	policyconfigcontext["object_type"] = item.GetObjectType()
	policyconfigcontext["oper_state"] = item.GetOperState()

	policyconfigcontexts = append(policyconfigcontexts, policyconfigcontext)
	return policyconfigcontexts
}
func flattenMapPolicyConfigResultContext(p models.PolicyConfigResultContext, d *schema.ResourceData) []map[string]interface{} {
	var policyconfigresultcontexts []map[string]interface{}
	var ret models.PolicyConfigResultContext
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	item := p
	policyconfigresultcontext := make(map[string]interface{})
	policyconfigresultcontext["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	policyconfigresultcontext["class_id"] = item.GetClassId()
	policyconfigresultcontext["entity_data"] = flattenAdditionalProperties(item.EntityData)
	policyconfigresultcontext["entity_moid"] = item.GetEntityMoid()
	policyconfigresultcontext["entity_name"] = item.GetEntityName()
	policyconfigresultcontext["entity_type"] = item.GetEntityType()
	policyconfigresultcontext["object_type"] = item.GetObjectType()
	policyconfigresultcontext["parent_moid"] = item.GetParentMoid()
	policyconfigresultcontext["parent_type"] = item.GetParentType()

	policyconfigresultcontexts = append(policyconfigresultcontexts, policyconfigresultcontext)
	return policyconfigresultcontexts
}
func flattenMapPortGroupRelationship(p models.PortGroupRelationship, d *schema.ResourceData) []map[string]interface{} {
	var portgrouprelationships []map[string]interface{}
	var ret models.PortGroupRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	portgrouprelationship := make(map[string]interface{})
	portgrouprelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	portgrouprelationship["class_id"] = item.GetClassId()
	portgrouprelationship["moid"] = item.GetMoid()
	portgrouprelationship["object_type"] = item.GetObjectType()
	portgrouprelationship["selector"] = item.GetSelector()

	portgrouprelationships = append(portgrouprelationships, portgrouprelationship)
	return portgrouprelationships
}
func flattenMapPortInterfaceBaseRelationship(p models.PortInterfaceBaseRelationship, d *schema.ResourceData) []map[string]interface{} {
	var portinterfacebaserelationships []map[string]interface{}
	var ret models.PortInterfaceBaseRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	portinterfacebaserelationship := make(map[string]interface{})
	portinterfacebaserelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	portinterfacebaserelationship["class_id"] = item.GetClassId()
	portinterfacebaserelationship["moid"] = item.GetMoid()
	portinterfacebaserelationship["object_type"] = item.GetObjectType()
	portinterfacebaserelationship["selector"] = item.GetSelector()

	portinterfacebaserelationships = append(portinterfacebaserelationships, portinterfacebaserelationship)
	return portinterfacebaserelationships
}
func flattenMapPortSubGroupRelationship(p models.PortSubGroupRelationship, d *schema.ResourceData) []map[string]interface{} {
	var portsubgrouprelationships []map[string]interface{}
	var ret models.PortSubGroupRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	portsubgrouprelationship := make(map[string]interface{})
	portsubgrouprelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	portsubgrouprelationship["class_id"] = item.GetClassId()
	portsubgrouprelationship["moid"] = item.GetMoid()
	portsubgrouprelationship["object_type"] = item.GetObjectType()
	portsubgrouprelationship["selector"] = item.GetSelector()

	portsubgrouprelationships = append(portsubgrouprelationships, portsubgrouprelationship)
	return portsubgrouprelationships
}
func flattenMapPowerControlStateRelationship(p models.PowerControlStateRelationship, d *schema.ResourceData) []map[string]interface{} {
	var powercontrolstaterelationships []map[string]interface{}
	var ret models.PowerControlStateRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	powercontrolstaterelationship := make(map[string]interface{})
	powercontrolstaterelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	powercontrolstaterelationship["class_id"] = item.GetClassId()
	powercontrolstaterelationship["moid"] = item.GetMoid()
	powercontrolstaterelationship["object_type"] = item.GetObjectType()
	powercontrolstaterelationship["selector"] = item.GetSelector()

	powercontrolstaterelationships = append(powercontrolstaterelationships, powercontrolstaterelationship)
	return powercontrolstaterelationships
}
func flattenMapRecommendationCapacityRunwayRelationship(p models.RecommendationCapacityRunwayRelationship, d *schema.ResourceData) []map[string]interface{} {
	var recommendationcapacityrunwayrelationships []map[string]interface{}
	var ret models.RecommendationCapacityRunwayRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	recommendationcapacityrunwayrelationship := make(map[string]interface{})
	recommendationcapacityrunwayrelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	recommendationcapacityrunwayrelationship["class_id"] = item.GetClassId()
	recommendationcapacityrunwayrelationship["moid"] = item.GetMoid()
	recommendationcapacityrunwayrelationship["object_type"] = item.GetObjectType()
	recommendationcapacityrunwayrelationship["selector"] = item.GetSelector()

	recommendationcapacityrunwayrelationships = append(recommendationcapacityrunwayrelationships, recommendationcapacityrunwayrelationship)
	return recommendationcapacityrunwayrelationships
}
func flattenMapRecommendationClusterExpansionRelationship(p models.RecommendationClusterExpansionRelationship, d *schema.ResourceData) []map[string]interface{} {
	var recommendationclusterexpansionrelationships []map[string]interface{}
	var ret models.RecommendationClusterExpansionRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	recommendationclusterexpansionrelationship := make(map[string]interface{})
	recommendationclusterexpansionrelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	recommendationclusterexpansionrelationship["class_id"] = item.GetClassId()
	recommendationclusterexpansionrelationship["moid"] = item.GetMoid()
	recommendationclusterexpansionrelationship["object_type"] = item.GetObjectType()
	recommendationclusterexpansionrelationship["selector"] = item.GetSelector()

	recommendationclusterexpansionrelationships = append(recommendationclusterexpansionrelationships, recommendationclusterexpansionrelationship)
	return recommendationclusterexpansionrelationships
}
func flattenMapRecommendationHardwareExpansionRequestRelationship(p models.RecommendationHardwareExpansionRequestRelationship, d *schema.ResourceData) []map[string]interface{} {
	var recommendationhardwareexpansionrequestrelationships []map[string]interface{}
	var ret models.RecommendationHardwareExpansionRequestRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	recommendationhardwareexpansionrequestrelationship := make(map[string]interface{})
	recommendationhardwareexpansionrequestrelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	recommendationhardwareexpansionrequestrelationship["class_id"] = item.GetClassId()
	recommendationhardwareexpansionrequestrelationship["moid"] = item.GetMoid()
	recommendationhardwareexpansionrequestrelationship["object_type"] = item.GetObjectType()
	recommendationhardwareexpansionrequestrelationship["selector"] = item.GetSelector()

	recommendationhardwareexpansionrequestrelationships = append(recommendationhardwareexpansionrequestrelationships, recommendationhardwareexpansionrequestrelationship)
	return recommendationhardwareexpansionrequestrelationships
}
func flattenMapRecoveryAbstractBackupInfoRelationship(p models.RecoveryAbstractBackupInfoRelationship, d *schema.ResourceData) []map[string]interface{} {
	var recoveryabstractbackupinforelationships []map[string]interface{}
	var ret models.RecoveryAbstractBackupInfoRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	recoveryabstractbackupinforelationship := make(map[string]interface{})
	recoveryabstractbackupinforelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	recoveryabstractbackupinforelationship["class_id"] = item.GetClassId()
	recoveryabstractbackupinforelationship["moid"] = item.GetMoid()
	recoveryabstractbackupinforelationship["object_type"] = item.GetObjectType()
	recoveryabstractbackupinforelationship["selector"] = item.GetSelector()

	recoveryabstractbackupinforelationships = append(recoveryabstractbackupinforelationships, recoveryabstractbackupinforelationship)
	return recoveryabstractbackupinforelationships
}
func flattenMapRecoveryBackupConfigPolicyRelationship(p models.RecoveryBackupConfigPolicyRelationship, d *schema.ResourceData) []map[string]interface{} {
	var recoverybackupconfigpolicyrelationships []map[string]interface{}
	var ret models.RecoveryBackupConfigPolicyRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	recoverybackupconfigpolicyrelationship := make(map[string]interface{})
	recoverybackupconfigpolicyrelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	recoverybackupconfigpolicyrelationship["class_id"] = item.GetClassId()
	recoverybackupconfigpolicyrelationship["moid"] = item.GetMoid()
	recoverybackupconfigpolicyrelationship["object_type"] = item.GetObjectType()
	recoverybackupconfigpolicyrelationship["selector"] = item.GetSelector()

	recoverybackupconfigpolicyrelationships = append(recoverybackupconfigpolicyrelationships, recoverybackupconfigpolicyrelationship)
	return recoverybackupconfigpolicyrelationships
}
func flattenMapRecoveryBackupProfileRelationship(p models.RecoveryBackupProfileRelationship, d *schema.ResourceData) []map[string]interface{} {
	var recoverybackupprofilerelationships []map[string]interface{}
	var ret models.RecoveryBackupProfileRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	recoverybackupprofilerelationship := make(map[string]interface{})
	recoverybackupprofilerelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	recoverybackupprofilerelationship["class_id"] = item.GetClassId()
	recoverybackupprofilerelationship["moid"] = item.GetMoid()
	recoverybackupprofilerelationship["object_type"] = item.GetObjectType()
	recoverybackupprofilerelationship["selector"] = item.GetSelector()

	recoverybackupprofilerelationships = append(recoverybackupprofilerelationships, recoverybackupprofilerelationship)
	return recoverybackupprofilerelationships
}
func flattenMapRecoveryBackupSchedule(p models.RecoveryBackupSchedule, d *schema.ResourceData) []map[string]interface{} {
	var recoverybackupschedules []map[string]interface{}
	var ret models.RecoveryBackupSchedule
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	item := p
	recoverybackupschedule := make(map[string]interface{})
	recoverybackupschedule["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	recoverybackupschedule["class_id"] = item.GetClassId()
	recoverybackupschedule["execution_time"] = item.GetExecutionTime().String()
	recoverybackupschedule["frequency_unit"] = item.GetFrequencyUnit()
	recoverybackupschedule["hours"] = item.GetHours()
	recoverybackupschedule["object_type"] = item.GetObjectType()

	recoverybackupschedules = append(recoverybackupschedules, recoverybackupschedule)
	return recoverybackupschedules
}
func flattenMapRecoveryConfigParams(p models.RecoveryConfigParams, d *schema.ResourceData) []map[string]interface{} {
	var recoveryconfigparamss []map[string]interface{}
	var ret models.RecoveryConfigParams
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	item := p
	recoveryconfigparams := make(map[string]interface{})
	recoveryconfigparams["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	recoveryconfigparams["class_id"] = item.GetClassId()
	recoveryconfigparams["object_type"] = item.GetObjectType()

	recoveryconfigparamss = append(recoveryconfigparamss, recoveryconfigparams)
	return recoveryconfigparamss
}
func flattenMapRecoveryConfigResultRelationship(p models.RecoveryConfigResultRelationship, d *schema.ResourceData) []map[string]interface{} {
	var recoveryconfigresultrelationships []map[string]interface{}
	var ret models.RecoveryConfigResultRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	recoveryconfigresultrelationship := make(map[string]interface{})
	recoveryconfigresultrelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	recoveryconfigresultrelationship["class_id"] = item.GetClassId()
	recoveryconfigresultrelationship["moid"] = item.GetMoid()
	recoveryconfigresultrelationship["object_type"] = item.GetObjectType()
	recoveryconfigresultrelationship["selector"] = item.GetSelector()

	recoveryconfigresultrelationships = append(recoveryconfigresultrelationships, recoveryconfigresultrelationship)
	return recoveryconfigresultrelationships
}
func flattenMapRecoveryScheduleConfigPolicyRelationship(p models.RecoveryScheduleConfigPolicyRelationship, d *schema.ResourceData) []map[string]interface{} {
	var recoveryscheduleconfigpolicyrelationships []map[string]interface{}
	var ret models.RecoveryScheduleConfigPolicyRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	recoveryscheduleconfigpolicyrelationship := make(map[string]interface{})
	recoveryscheduleconfigpolicyrelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	recoveryscheduleconfigpolicyrelationship["class_id"] = item.GetClassId()
	recoveryscheduleconfigpolicyrelationship["moid"] = item.GetMoid()
	recoveryscheduleconfigpolicyrelationship["object_type"] = item.GetObjectType()
	recoveryscheduleconfigpolicyrelationship["selector"] = item.GetSelector()

	recoveryscheduleconfigpolicyrelationships = append(recoveryscheduleconfigpolicyrelationships, recoveryscheduleconfigpolicyrelationship)
	return recoveryscheduleconfigpolicyrelationships
}
func flattenMapResourceGroupRelationship(p models.ResourceGroupRelationship, d *schema.ResourceData) []map[string]interface{} {
	var resourcegrouprelationships []map[string]interface{}
	var ret models.ResourceGroupRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	resourcegrouprelationship := make(map[string]interface{})
	resourcegrouprelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	resourcegrouprelationship["class_id"] = item.GetClassId()
	resourcegrouprelationship["moid"] = item.GetMoid()
	resourcegrouprelationship["object_type"] = item.GetObjectType()
	resourcegrouprelationship["selector"] = item.GetSelector()

	resourcegrouprelationships = append(resourcegrouprelationships, resourcegrouprelationship)
	return resourcegrouprelationships
}
func flattenMapResourceMembershipHolderRelationship(p models.ResourceMembershipHolderRelationship, d *schema.ResourceData) []map[string]interface{} {
	var resourcemembershipholderrelationships []map[string]interface{}
	var ret models.ResourceMembershipHolderRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	resourcemembershipholderrelationship := make(map[string]interface{})
	resourcemembershipholderrelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	resourcemembershipholderrelationship["class_id"] = item.GetClassId()
	resourcemembershipholderrelationship["moid"] = item.GetMoid()
	resourcemembershipholderrelationship["object_type"] = item.GetObjectType()
	resourcemembershipholderrelationship["selector"] = item.GetSelector()

	resourcemembershipholderrelationships = append(resourcemembershipholderrelationships, resourcemembershipholderrelationship)
	return resourcemembershipholderrelationships
}
func flattenMapResourceReservationRelationship(p models.ResourceReservationRelationship, d *schema.ResourceData) []map[string]interface{} {
	var resourcereservationrelationships []map[string]interface{}
	var ret models.ResourceReservationRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	resourcereservationrelationship := make(map[string]interface{})
	resourcereservationrelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	resourcereservationrelationship["class_id"] = item.GetClassId()
	resourcereservationrelationship["moid"] = item.GetMoid()
	resourcereservationrelationship["object_type"] = item.GetObjectType()
	resourcereservationrelationship["selector"] = item.GetSelector()

	resourcereservationrelationships = append(resourcereservationrelationships, resourcereservationrelationship)
	return resourcereservationrelationships
}
func flattenMapResourcepoolLeaseRelationship(p models.ResourcepoolLeaseRelationship, d *schema.ResourceData) []map[string]interface{} {
	var resourcepoolleaserelationships []map[string]interface{}
	var ret models.ResourcepoolLeaseRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	resourcepoolleaserelationship := make(map[string]interface{})
	resourcepoolleaserelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	resourcepoolleaserelationship["class_id"] = item.GetClassId()
	resourcepoolleaserelationship["moid"] = item.GetMoid()
	resourcepoolleaserelationship["object_type"] = item.GetObjectType()
	resourcepoolleaserelationship["selector"] = item.GetSelector()

	resourcepoolleaserelationships = append(resourcepoolleaserelationships, resourcepoolleaserelationship)
	return resourcepoolleaserelationships
}
func flattenMapResourcepoolLeaseParameters(p models.ResourcepoolLeaseParameters, d *schema.ResourceData) []map[string]interface{} {
	var resourcepoolleaseparameterss []map[string]interface{}
	var ret models.ResourcepoolLeaseParameters
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	item := p
	resourcepoolleaseparameters := make(map[string]interface{})
	resourcepoolleaseparameters["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	resourcepoolleaseparameters["class_id"] = item.GetClassId()
	resourcepoolleaseparameters["object_type"] = item.GetObjectType()

	resourcepoolleaseparameterss = append(resourcepoolleaseparameterss, resourcepoolleaseparameters)
	return resourcepoolleaseparameterss
}
func flattenMapResourcepoolLeaseResourceRelationship(p models.ResourcepoolLeaseResourceRelationship, d *schema.ResourceData) []map[string]interface{} {
	var resourcepoolleaseresourcerelationships []map[string]interface{}
	var ret models.ResourcepoolLeaseResourceRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	resourcepoolleaseresourcerelationship := make(map[string]interface{})
	resourcepoolleaseresourcerelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	resourcepoolleaseresourcerelationship["class_id"] = item.GetClassId()
	resourcepoolleaseresourcerelationship["moid"] = item.GetMoid()
	resourcepoolleaseresourcerelationship["object_type"] = item.GetObjectType()
	resourcepoolleaseresourcerelationship["selector"] = item.GetSelector()

	resourcepoolleaseresourcerelationships = append(resourcepoolleaseresourcerelationships, resourcepoolleaseresourcerelationship)
	return resourcepoolleaseresourcerelationships
}
func flattenMapResourcepoolPoolRelationship(p models.ResourcepoolPoolRelationship, d *schema.ResourceData) []map[string]interface{} {
	var resourcepoolpoolrelationships []map[string]interface{}
	var ret models.ResourcepoolPoolRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	resourcepoolpoolrelationship := make(map[string]interface{})
	resourcepoolpoolrelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	resourcepoolpoolrelationship["class_id"] = item.GetClassId()
	resourcepoolpoolrelationship["moid"] = item.GetMoid()
	resourcepoolpoolrelationship["object_type"] = item.GetObjectType()
	resourcepoolpoolrelationship["selector"] = item.GetSelector()

	resourcepoolpoolrelationships = append(resourcepoolpoolrelationships, resourcepoolpoolrelationship)
	return resourcepoolpoolrelationships
}
func flattenMapResourcepoolPoolMemberRelationship(p models.ResourcepoolPoolMemberRelationship, d *schema.ResourceData) []map[string]interface{} {
	var resourcepoolpoolmemberrelationships []map[string]interface{}
	var ret models.ResourcepoolPoolMemberRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	resourcepoolpoolmemberrelationship := make(map[string]interface{})
	resourcepoolpoolmemberrelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	resourcepoolpoolmemberrelationship["class_id"] = item.GetClassId()
	resourcepoolpoolmemberrelationship["moid"] = item.GetMoid()
	resourcepoolpoolmemberrelationship["object_type"] = item.GetObjectType()
	resourcepoolpoolmemberrelationship["selector"] = item.GetSelector()

	resourcepoolpoolmemberrelationships = append(resourcepoolpoolmemberrelationships, resourcepoolpoolmemberrelationship)
	return resourcepoolpoolmemberrelationships
}
func flattenMapResourcepoolResourcePoolParameters(p models.ResourcepoolResourcePoolParameters, d *schema.ResourceData) []map[string]interface{} {
	var resourcepoolresourcepoolparameterss []map[string]interface{}
	var ret models.ResourcepoolResourcePoolParameters
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	item := p
	resourcepoolresourcepoolparameters := make(map[string]interface{})
	resourcepoolresourcepoolparameters["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	resourcepoolresourcepoolparameters["class_id"] = item.GetClassId()
	resourcepoolresourcepoolparameters["object_type"] = item.GetObjectType()

	resourcepoolresourcepoolparameterss = append(resourcepoolresourcepoolparameterss, resourcepoolresourcepoolparameters)
	return resourcepoolresourcepoolparameterss
}
func flattenMapResourcepoolUniverseRelationship(p models.ResourcepoolUniverseRelationship, d *schema.ResourceData) []map[string]interface{} {
	var resourcepooluniverserelationships []map[string]interface{}
	var ret models.ResourcepoolUniverseRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	resourcepooluniverserelationship := make(map[string]interface{})
	resourcepooluniverserelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	resourcepooluniverserelationship["class_id"] = item.GetClassId()
	resourcepooluniverserelationship["moid"] = item.GetMoid()
	resourcepooluniverserelationship["object_type"] = item.GetObjectType()
	resourcepooluniverserelationship["selector"] = item.GetSelector()

	resourcepooluniverserelationships = append(resourcepooluniverserelationships, resourcepooluniverserelationship)
	return resourcepooluniverserelationships
}
func flattenMapSchedulerBaseScheduleParams(p models.SchedulerBaseScheduleParams, d *schema.ResourceData) []map[string]interface{} {
	var schedulerbasescheduleparamss []map[string]interface{}
	var ret models.SchedulerBaseScheduleParams
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	item := p
	schedulerbasescheduleparams := make(map[string]interface{})
	schedulerbasescheduleparams["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	schedulerbasescheduleparams["class_id"] = item.GetClassId()
	schedulerbasescheduleparams["object_type"] = item.GetObjectType()
	schedulerbasescheduleparams["start_time"] = item.GetStartTime().String()
	schedulerbasescheduleparams["time_zone"] = item.GetTimeZone()

	schedulerbasescheduleparamss = append(schedulerbasescheduleparamss, schedulerbasescheduleparams)
	return schedulerbasescheduleparamss
}
func flattenMapSchedulerRestStimTaskRequest(p models.SchedulerRestStimTaskRequest, d *schema.ResourceData) []map[string]interface{} {
	var schedulerreststimtaskrequests []map[string]interface{}
	var ret models.SchedulerRestStimTaskRequest
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	item := p
	schedulerreststimtaskrequest := make(map[string]interface{})
	schedulerreststimtaskrequest["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	schedulerreststimtaskrequest["body"] = flattenAdditionalProperties(item.Body)
	schedulerreststimtaskrequest["class_id"] = item.GetClassId()
	schedulerreststimtaskrequest["headers"] = flattenAdditionalProperties(item.Headers)
	schedulerreststimtaskrequest["method"] = item.GetMethod()
	schedulerreststimtaskrequest["object_type"] = item.GetObjectType()
	schedulerreststimtaskrequest["protocol"] = item.GetProtocol()
	schedulerreststimtaskrequest["response"] = flattenAdditionalProperties(item.Response)
	schedulerreststimtaskrequest["timeout"] = item.GetTimeout()
	schedulerreststimtaskrequest["url"] = item.GetUrl()

	schedulerreststimtaskrequests = append(schedulerreststimtaskrequests, schedulerreststimtaskrequest)
	return schedulerreststimtaskrequests
}
func flattenMapSchedulerTaskResultStatus(p models.SchedulerTaskResultStatus, d *schema.ResourceData) []map[string]interface{} {
	var schedulertaskresultstatuss []map[string]interface{}
	var ret models.SchedulerTaskResultStatus
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	item := p
	schedulertaskresultstatus := make(map[string]interface{})
	schedulertaskresultstatus["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	schedulertaskresultstatus["class_id"] = item.GetClassId()
	schedulertaskresultstatus["object_type"] = item.GetObjectType()
	schedulertaskresultstatus["reason"] = item.GetReason()
	schedulertaskresultstatus["status"] = item.GetStatus()

	schedulertaskresultstatuss = append(schedulertaskresultstatuss, schedulertaskresultstatus)
	return schedulertaskresultstatuss
}
func flattenMapSchedulerTaskScheduleRelationship(p models.SchedulerTaskScheduleRelationship, d *schema.ResourceData) []map[string]interface{} {
	var schedulertaskschedulerelationships []map[string]interface{}
	var ret models.SchedulerTaskScheduleRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	schedulertaskschedulerelationship := make(map[string]interface{})
	schedulertaskschedulerelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	schedulertaskschedulerelationship["class_id"] = item.GetClassId()
	schedulertaskschedulerelationship["moid"] = item.GetMoid()
	schedulertaskschedulerelationship["object_type"] = item.GetObjectType()
	schedulertaskschedulerelationship["selector"] = item.GetSelector()

	schedulertaskschedulerelationships = append(schedulertaskschedulerelationships, schedulertaskschedulerelationship)
	return schedulertaskschedulerelationships
}
func flattenMapSchedulerTaskScheduleStatus(p models.SchedulerTaskScheduleStatus, d *schema.ResourceData) []map[string]interface{} {
	var schedulertaskschedulestatuss []map[string]interface{}
	var ret models.SchedulerTaskScheduleStatus
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	item := p
	schedulertaskschedulestatus := make(map[string]interface{})
	schedulertaskschedulestatus["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	schedulertaskschedulestatus["class_id"] = item.GetClassId()
	schedulertaskschedulestatus["consecutive_failures"] = item.GetConsecutiveFailures()
	schedulertaskschedulestatus["nr_count"] = item.GetCount()
	schedulertaskschedulestatus["current_status"] = item.GetCurrentStatus()
	schedulertaskschedulestatus["is_system_suspended"] = item.GetIsSystemSuspended()
	schedulertaskschedulestatus["last_run_status"] = item.GetLastRunStatus()
	schedulertaskschedulestatus["next_run_start_time"] = item.GetNextRunStartTime().String()
	schedulertaskschedulestatus["object_type"] = item.GetObjectType()
	schedulertaskschedulestatus["prev_run_end_time"] = item.GetPrevRunEndTime().String()
	schedulertaskschedulestatus["prev_run_start_time"] = item.GetPrevRunStartTime().String()
	schedulertaskschedulestatus["reason"] = item.GetReason()

	schedulertaskschedulestatuss = append(schedulertaskschedulestatuss, schedulertaskschedulestatus)
	return schedulertaskschedulestatuss
}
func flattenMapSdaaciConnectionRelationship(p models.SdaaciConnectionRelationship, d *schema.ResourceData) []map[string]interface{} {
	var sdaaciconnectionrelationships []map[string]interface{}
	var ret models.SdaaciConnectionRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	sdaaciconnectionrelationship := make(map[string]interface{})
	sdaaciconnectionrelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	sdaaciconnectionrelationship["class_id"] = item.GetClassId()
	sdaaciconnectionrelationship["moid"] = item.GetMoid()
	sdaaciconnectionrelationship["object_type"] = item.GetObjectType()
	sdaaciconnectionrelationship["selector"] = item.GetSelector()

	sdaaciconnectionrelationships = append(sdaaciconnectionrelationships, sdaaciconnectionrelationship)
	return sdaaciconnectionrelationships
}
func flattenMapServerBaseProfileRelationship(p models.ServerBaseProfileRelationship, d *schema.ResourceData) []map[string]interface{} {
	var serverbaseprofilerelationships []map[string]interface{}
	var ret models.ServerBaseProfileRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	serverbaseprofilerelationship := make(map[string]interface{})
	serverbaseprofilerelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	serverbaseprofilerelationship["class_id"] = item.GetClassId()
	serverbaseprofilerelationship["moid"] = item.GetMoid()
	serverbaseprofilerelationship["object_type"] = item.GetObjectType()
	serverbaseprofilerelationship["selector"] = item.GetSelector()

	serverbaseprofilerelationships = append(serverbaseprofilerelationships, serverbaseprofilerelationship)
	return serverbaseprofilerelationships
}
func flattenMapServerConfigResultRelationship(p models.ServerConfigResultRelationship, d *schema.ResourceData) []map[string]interface{} {
	var serverconfigresultrelationships []map[string]interface{}
	var ret models.ServerConfigResultRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	serverconfigresultrelationship := make(map[string]interface{})
	serverconfigresultrelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	serverconfigresultrelationship["class_id"] = item.GetClassId()
	serverconfigresultrelationship["moid"] = item.GetMoid()
	serverconfigresultrelationship["object_type"] = item.GetObjectType()
	serverconfigresultrelationship["selector"] = item.GetSelector()

	serverconfigresultrelationships = append(serverconfigresultrelationships, serverconfigresultrelationship)
	return serverconfigresultrelationships
}
func flattenMapServerProfileRelationship(p models.ServerProfileRelationship, d *schema.ResourceData) []map[string]interface{} {
	var serverprofilerelationships []map[string]interface{}
	var ret models.ServerProfileRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	serverprofilerelationship := make(map[string]interface{})
	serverprofilerelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	serverprofilerelationship["class_id"] = item.GetClassId()
	serverprofilerelationship["moid"] = item.GetMoid()
	serverprofilerelationship["object_type"] = item.GetObjectType()
	serverprofilerelationship["selector"] = item.GetSelector()

	serverprofilerelationships = append(serverprofilerelationships, serverprofilerelationship)
	return serverprofilerelationships
}
func flattenMapServerServerAssignTypeSlot(p models.ServerServerAssignTypeSlot, d *schema.ResourceData) []map[string]interface{} {
	var serverserverassigntypeslots []map[string]interface{}
	var ret models.ServerServerAssignTypeSlot
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	item := p
	serverserverassigntypeslot := make(map[string]interface{})
	serverserverassigntypeslot["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	serverserverassigntypeslot["chassis_id"] = item.GetChassisId()
	serverserverassigntypeslot["class_id"] = item.GetClassId()
	serverserverassigntypeslot["domain_name"] = item.GetDomainName()
	serverserverassigntypeslot["object_type"] = item.GetObjectType()
	serverserverassigntypeslot["slot_id"] = item.GetSlotId()

	serverserverassigntypeslots = append(serverserverassigntypeslots, serverserverassigntypeslot)
	return serverserverassigntypeslots
}
func flattenMapSessionAbstractSessionRelationship(p models.SessionAbstractSessionRelationship, d *schema.ResourceData) []map[string]interface{} {
	var sessionabstractsessionrelationships []map[string]interface{}
	var ret models.SessionAbstractSessionRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	sessionabstractsessionrelationship := make(map[string]interface{})
	sessionabstractsessionrelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	sessionabstractsessionrelationship["class_id"] = item.GetClassId()
	sessionabstractsessionrelationship["moid"] = item.GetMoid()
	sessionabstractsessionrelationship["object_type"] = item.GetObjectType()
	sessionabstractsessionrelationship["selector"] = item.GetSelector()

	sessionabstractsessionrelationships = append(sessionabstractsessionrelationships, sessionabstractsessionrelationship)
	return sessionabstractsessionrelationships
}
func flattenMapSoftwareHyperflexDistributableRelationship(p models.SoftwareHyperflexDistributableRelationship, d *schema.ResourceData) []map[string]interface{} {
	var softwarehyperflexdistributablerelationships []map[string]interface{}
	var ret models.SoftwareHyperflexDistributableRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	softwarehyperflexdistributablerelationship := make(map[string]interface{})
	softwarehyperflexdistributablerelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	softwarehyperflexdistributablerelationship["class_id"] = item.GetClassId()
	softwarehyperflexdistributablerelationship["moid"] = item.GetMoid()
	softwarehyperflexdistributablerelationship["object_type"] = item.GetObjectType()
	softwarehyperflexdistributablerelationship["selector"] = item.GetSelector()

	softwarehyperflexdistributablerelationships = append(softwarehyperflexdistributablerelationships, softwarehyperflexdistributablerelationship)
	return softwarehyperflexdistributablerelationships
}
func flattenMapSoftwareSolutionDistributableRelationship(p models.SoftwareSolutionDistributableRelationship, d *schema.ResourceData) []map[string]interface{} {
	var softwaresolutiondistributablerelationships []map[string]interface{}
	var ret models.SoftwareSolutionDistributableRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	softwaresolutiondistributablerelationship := make(map[string]interface{})
	softwaresolutiondistributablerelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	softwaresolutiondistributablerelationship["class_id"] = item.GetClassId()
	softwaresolutiondistributablerelationship["moid"] = item.GetMoid()
	softwaresolutiondistributablerelationship["object_type"] = item.GetObjectType()
	softwaresolutiondistributablerelationship["selector"] = item.GetSelector()

	softwaresolutiondistributablerelationships = append(softwaresolutiondistributablerelationships, softwaresolutiondistributablerelationship)
	return softwaresolutiondistributablerelationships
}
func flattenMapSoftwarerepositoryCatalogRelationship(p models.SoftwarerepositoryCatalogRelationship, d *schema.ResourceData) []map[string]interface{} {
	var softwarerepositorycatalogrelationships []map[string]interface{}
	var ret models.SoftwarerepositoryCatalogRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	softwarerepositorycatalogrelationship := make(map[string]interface{})
	softwarerepositorycatalogrelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	softwarerepositorycatalogrelationship["class_id"] = item.GetClassId()
	softwarerepositorycatalogrelationship["moid"] = item.GetMoid()
	softwarerepositorycatalogrelationship["object_type"] = item.GetObjectType()
	softwarerepositorycatalogrelationship["selector"] = item.GetSelector()

	softwarerepositorycatalogrelationships = append(softwarerepositorycatalogrelationships, softwarerepositorycatalogrelationship)
	return softwarerepositorycatalogrelationships
}
func flattenMapSoftwarerepositoryFileRelationship(p models.SoftwarerepositoryFileRelationship, d *schema.ResourceData) []map[string]interface{} {
	var softwarerepositoryfilerelationships []map[string]interface{}
	var ret models.SoftwarerepositoryFileRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	softwarerepositoryfilerelationship := make(map[string]interface{})
	softwarerepositoryfilerelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	softwarerepositoryfilerelationship["class_id"] = item.GetClassId()
	softwarerepositoryfilerelationship["moid"] = item.GetMoid()
	softwarerepositoryfilerelationship["object_type"] = item.GetObjectType()
	softwarerepositoryfilerelationship["selector"] = item.GetSelector()

	softwarerepositoryfilerelationships = append(softwarerepositoryfilerelationships, softwarerepositoryfilerelationship)
	return softwarerepositoryfilerelationships
}
func flattenMapSoftwarerepositoryFileServer(p models.SoftwarerepositoryFileServer, d *schema.ResourceData) []map[string]interface{} {
	var softwarerepositoryfileservers []map[string]interface{}
	var ret models.SoftwarerepositoryFileServer
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	item := p
	softwarerepositoryfileserver := make(map[string]interface{})
	softwarerepositoryfileserver["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	softwarerepositoryfileserver["class_id"] = item.GetClassId()
	softwarerepositoryfileserver["object_type"] = item.GetObjectType()

	softwarerepositoryfileservers = append(softwarerepositoryfileservers, softwarerepositoryfileserver)
	return softwarerepositoryfileservers
}
func flattenMapSoftwarerepositoryOperatingSystemFileRelationship(p models.SoftwarerepositoryOperatingSystemFileRelationship, d *schema.ResourceData) []map[string]interface{} {
	var softwarerepositoryoperatingsystemfilerelationships []map[string]interface{}
	var ret models.SoftwarerepositoryOperatingSystemFileRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	softwarerepositoryoperatingsystemfilerelationship := make(map[string]interface{})
	softwarerepositoryoperatingsystemfilerelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	softwarerepositoryoperatingsystemfilerelationship["class_id"] = item.GetClassId()
	softwarerepositoryoperatingsystemfilerelationship["moid"] = item.GetMoid()
	softwarerepositoryoperatingsystemfilerelationship["object_type"] = item.GetObjectType()
	softwarerepositoryoperatingsystemfilerelationship["selector"] = item.GetSelector()

	softwarerepositoryoperatingsystemfilerelationships = append(softwarerepositoryoperatingsystemfilerelationships, softwarerepositoryoperatingsystemfilerelationship)
	return softwarerepositoryoperatingsystemfilerelationships
}
func flattenMapSoftwarerepositoryReleaseRelationship(p models.SoftwarerepositoryReleaseRelationship, d *schema.ResourceData) []map[string]interface{} {
	var softwarerepositoryreleaserelationships []map[string]interface{}
	var ret models.SoftwarerepositoryReleaseRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	softwarerepositoryreleaserelationship := make(map[string]interface{})
	softwarerepositoryreleaserelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	softwarerepositoryreleaserelationship["class_id"] = item.GetClassId()
	softwarerepositoryreleaserelationship["moid"] = item.GetMoid()
	softwarerepositoryreleaserelationship["object_type"] = item.GetObjectType()
	softwarerepositoryreleaserelationship["selector"] = item.GetSelector()

	softwarerepositoryreleaserelationships = append(softwarerepositoryreleaserelationships, softwarerepositoryreleaserelationship)
	return softwarerepositoryreleaserelationships
}
func flattenMapStorageAutomaticDriveGroup(p models.StorageAutomaticDriveGroup, d *schema.ResourceData) []map[string]interface{} {
	var storageautomaticdrivegroups []map[string]interface{}
	var ret models.StorageAutomaticDriveGroup
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	item := p
	storageautomaticdrivegroup := make(map[string]interface{})
	storageautomaticdrivegroup["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	storageautomaticdrivegroup["class_id"] = item.GetClassId()
	storageautomaticdrivegroup["drive_type"] = item.GetDriveType()
	storageautomaticdrivegroup["drives_per_span"] = item.GetDrivesPerSpan()
	storageautomaticdrivegroup["minimum_drive_size"] = item.GetMinimumDriveSize()
	storageautomaticdrivegroup["num_dedicated_hot_spares"] = item.GetNumDedicatedHotSpares()
	storageautomaticdrivegroup["number_of_spans"] = item.GetNumberOfSpans()
	storageautomaticdrivegroup["object_type"] = item.GetObjectType()
	storageautomaticdrivegroup["use_remaining_drives"] = item.GetUseRemainingDrives()

	storageautomaticdrivegroups = append(storageautomaticdrivegroups, storageautomaticdrivegroup)
	return storageautomaticdrivegroups
}
func flattenMapStorageBaseArrayRelationship(p models.StorageBaseArrayRelationship, d *schema.ResourceData) []map[string]interface{} {
	var storagebasearrayrelationships []map[string]interface{}
	var ret models.StorageBaseArrayRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	storagebasearrayrelationship := make(map[string]interface{})
	storagebasearrayrelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	storagebasearrayrelationship["class_id"] = item.GetClassId()
	storagebasearrayrelationship["moid"] = item.GetMoid()
	storagebasearrayrelationship["object_type"] = item.GetObjectType()
	storagebasearrayrelationship["selector"] = item.GetSelector()

	storagebasearrayrelationships = append(storagebasearrayrelationships, storagebasearrayrelationship)
	return storagebasearrayrelationships
}
func flattenMapStorageBaseCapacity(p models.StorageBaseCapacity, d *schema.ResourceData) []map[string]interface{} {
	var storagebasecapacitys []map[string]interface{}
	var ret models.StorageBaseCapacity
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	item := p
	storagebasecapacity := make(map[string]interface{})
	storagebasecapacity["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	storagebasecapacity["available"] = item.GetAvailable()
	storagebasecapacity["capacity_utilization"] = item.GetCapacityUtilization()
	storagebasecapacity["class_id"] = item.GetClassId()
	storagebasecapacity["free"] = item.GetFree()
	storagebasecapacity["object_type"] = item.GetObjectType()
	storagebasecapacity["total"] = item.GetTotal()
	storagebasecapacity["used"] = item.GetUsed()

	storagebasecapacitys = append(storagebasecapacitys, storagebasecapacity)
	return storagebasecapacitys
}
func flattenMapStorageBatteryBackupUnitRelationship(p models.StorageBatteryBackupUnitRelationship, d *schema.ResourceData) []map[string]interface{} {
	var storagebatterybackupunitrelationships []map[string]interface{}
	var ret models.StorageBatteryBackupUnitRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	storagebatterybackupunitrelationship := make(map[string]interface{})
	storagebatterybackupunitrelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	storagebatterybackupunitrelationship["class_id"] = item.GetClassId()
	storagebatterybackupunitrelationship["moid"] = item.GetMoid()
	storagebatterybackupunitrelationship["object_type"] = item.GetObjectType()
	storagebatterybackupunitrelationship["selector"] = item.GetSelector()

	storagebatterybackupunitrelationships = append(storagebatterybackupunitrelationships, storagebatterybackupunitrelationship)
	return storagebatterybackupunitrelationships
}
func flattenMapStorageControllerRelationship(p models.StorageControllerRelationship, d *schema.ResourceData) []map[string]interface{} {
	var storagecontrollerrelationships []map[string]interface{}
	var ret models.StorageControllerRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	storagecontrollerrelationship := make(map[string]interface{})
	storagecontrollerrelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	storagecontrollerrelationship["class_id"] = item.GetClassId()
	storagecontrollerrelationship["moid"] = item.GetMoid()
	storagecontrollerrelationship["object_type"] = item.GetObjectType()
	storagecontrollerrelationship["selector"] = item.GetSelector()

	storagecontrollerrelationships = append(storagecontrollerrelationships, storagecontrollerrelationship)
	return storagecontrollerrelationships
}
func flattenMapStorageControllerDriveRelationship(p models.StorageControllerDriveRelationship, d *schema.ResourceData) []map[string]interface{} {
	var storagecontrollerdriverelationships []map[string]interface{}
	var ret models.StorageControllerDriveRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	storagecontrollerdriverelationship := make(map[string]interface{})
	storagecontrollerdriverelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	storagecontrollerdriverelationship["class_id"] = item.GetClassId()
	storagecontrollerdriverelationship["moid"] = item.GetMoid()
	storagecontrollerdriverelationship["object_type"] = item.GetObjectType()
	storagecontrollerdriverelationship["selector"] = item.GetSelector()

	storagecontrollerdriverelationships = append(storagecontrollerdriverelationships, storagecontrollerdriverelationship)
	return storagecontrollerdriverelationships
}
func flattenMapStorageDiskGroupRelationship(p models.StorageDiskGroupRelationship, d *schema.ResourceData) []map[string]interface{} {
	var storagediskgrouprelationships []map[string]interface{}
	var ret models.StorageDiskGroupRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	storagediskgrouprelationship := make(map[string]interface{})
	storagediskgrouprelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	storagediskgrouprelationship["class_id"] = item.GetClassId()
	storagediskgrouprelationship["moid"] = item.GetMoid()
	storagediskgrouprelationship["object_type"] = item.GetObjectType()
	storagediskgrouprelationship["selector"] = item.GetSelector()

	storagediskgrouprelationships = append(storagediskgrouprelationships, storagediskgrouprelationship)
	return storagediskgrouprelationships
}
func flattenMapStorageEnclosureRelationship(p models.StorageEnclosureRelationship, d *schema.ResourceData) []map[string]interface{} {
	var storageenclosurerelationships []map[string]interface{}
	var ret models.StorageEnclosureRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	storageenclosurerelationship := make(map[string]interface{})
	storageenclosurerelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	storageenclosurerelationship["class_id"] = item.GetClassId()
	storageenclosurerelationship["moid"] = item.GetMoid()
	storageenclosurerelationship["object_type"] = item.GetObjectType()
	storageenclosurerelationship["selector"] = item.GetSelector()

	storageenclosurerelationships = append(storageenclosurerelationships, storageenclosurerelationship)
	return storageenclosurerelationships
}
func flattenMapStorageFlexFlashControllerRelationship(p models.StorageFlexFlashControllerRelationship, d *schema.ResourceData) []map[string]interface{} {
	var storageflexflashcontrollerrelationships []map[string]interface{}
	var ret models.StorageFlexFlashControllerRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	storageflexflashcontrollerrelationship := make(map[string]interface{})
	storageflexflashcontrollerrelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	storageflexflashcontrollerrelationship["class_id"] = item.GetClassId()
	storageflexflashcontrollerrelationship["moid"] = item.GetMoid()
	storageflexflashcontrollerrelationship["object_type"] = item.GetObjectType()
	storageflexflashcontrollerrelationship["selector"] = item.GetSelector()

	storageflexflashcontrollerrelationships = append(storageflexflashcontrollerrelationships, storageflexflashcontrollerrelationship)
	return storageflexflashcontrollerrelationships
}
func flattenMapStorageFlexUtilControllerRelationship(p models.StorageFlexUtilControllerRelationship, d *schema.ResourceData) []map[string]interface{} {
	var storageflexutilcontrollerrelationships []map[string]interface{}
	var ret models.StorageFlexUtilControllerRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	storageflexutilcontrollerrelationship := make(map[string]interface{})
	storageflexutilcontrollerrelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	storageflexutilcontrollerrelationship["class_id"] = item.GetClassId()
	storageflexutilcontrollerrelationship["moid"] = item.GetMoid()
	storageflexutilcontrollerrelationship["object_type"] = item.GetObjectType()
	storageflexutilcontrollerrelationship["selector"] = item.GetSelector()

	storageflexutilcontrollerrelationships = append(storageflexutilcontrollerrelationships, storageflexutilcontrollerrelationship)
	return storageflexutilcontrollerrelationships
}
func flattenMapStorageHitachiArrayRelationship(p models.StorageHitachiArrayRelationship, d *schema.ResourceData) []map[string]interface{} {
	var storagehitachiarrayrelationships []map[string]interface{}
	var ret models.StorageHitachiArrayRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	storagehitachiarrayrelationship := make(map[string]interface{})
	storagehitachiarrayrelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	storagehitachiarrayrelationship["class_id"] = item.GetClassId()
	storagehitachiarrayrelationship["moid"] = item.GetMoid()
	storagehitachiarrayrelationship["object_type"] = item.GetObjectType()
	storagehitachiarrayrelationship["selector"] = item.GetSelector()

	storagehitachiarrayrelationships = append(storagehitachiarrayrelationships, storagehitachiarrayrelationship)
	return storagehitachiarrayrelationships
}
func flattenMapStorageHitachiCapacity(p models.StorageHitachiCapacity, d *schema.ResourceData) []map[string]interface{} {
	var storagehitachicapacitys []map[string]interface{}
	var ret models.StorageHitachiCapacity
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	item := p
	storagehitachicapacity := make(map[string]interface{})
	storagehitachicapacity["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	storagehitachicapacity["available"] = item.GetAvailable()
	storagehitachicapacity["capacity_utilization"] = item.GetCapacityUtilization()
	storagehitachicapacity["class_id"] = item.GetClassId()
	storagehitachicapacity["free"] = item.GetFree()
	storagehitachicapacity["object_type"] = item.GetObjectType()
	storagehitachicapacity["total"] = item.GetTotal()
	storagehitachicapacity["used"] = item.GetUsed()

	storagehitachicapacitys = append(storagehitachicapacitys, storagehitachicapacity)
	return storagehitachicapacitys
}
func flattenMapStorageHitachiExternalStoragePortRelationship(p models.StorageHitachiExternalStoragePortRelationship, d *schema.ResourceData) []map[string]interface{} {
	var storagehitachiexternalstorageportrelationships []map[string]interface{}
	var ret models.StorageHitachiExternalStoragePortRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	storagehitachiexternalstorageportrelationship := make(map[string]interface{})
	storagehitachiexternalstorageportrelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	storagehitachiexternalstorageportrelationship["class_id"] = item.GetClassId()
	storagehitachiexternalstorageportrelationship["moid"] = item.GetMoid()
	storagehitachiexternalstorageportrelationship["object_type"] = item.GetObjectType()
	storagehitachiexternalstorageportrelationship["selector"] = item.GetSelector()

	storagehitachiexternalstorageportrelationships = append(storagehitachiexternalstorageportrelationships, storagehitachiexternalstorageportrelationship)
	return storagehitachiexternalstorageportrelationships
}
func flattenMapStorageHitachiHostRelationship(p models.StorageHitachiHostRelationship, d *schema.ResourceData) []map[string]interface{} {
	var storagehitachihostrelationships []map[string]interface{}
	var ret models.StorageHitachiHostRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	storagehitachihostrelationship := make(map[string]interface{})
	storagehitachihostrelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	storagehitachihostrelationship["class_id"] = item.GetClassId()
	storagehitachihostrelationship["moid"] = item.GetMoid()
	storagehitachihostrelationship["object_type"] = item.GetObjectType()
	storagehitachihostrelationship["selector"] = item.GetSelector()

	storagehitachihostrelationships = append(storagehitachihostrelationships, storagehitachihostrelationship)
	return storagehitachihostrelationships
}
func flattenMapStorageHitachiParityGroupRelationship(p models.StorageHitachiParityGroupRelationship, d *schema.ResourceData) []map[string]interface{} {
	var storagehitachiparitygrouprelationships []map[string]interface{}
	var ret models.StorageHitachiParityGroupRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	storagehitachiparitygrouprelationship := make(map[string]interface{})
	storagehitachiparitygrouprelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	storagehitachiparitygrouprelationship["class_id"] = item.GetClassId()
	storagehitachiparitygrouprelationship["moid"] = item.GetMoid()
	storagehitachiparitygrouprelationship["object_type"] = item.GetObjectType()
	storagehitachiparitygrouprelationship["selector"] = item.GetSelector()

	storagehitachiparitygrouprelationships = append(storagehitachiparitygrouprelationships, storagehitachiparitygrouprelationship)
	return storagehitachiparitygrouprelationships
}
func flattenMapStorageHitachiPoolRelationship(p models.StorageHitachiPoolRelationship, d *schema.ResourceData) []map[string]interface{} {
	var storagehitachipoolrelationships []map[string]interface{}
	var ret models.StorageHitachiPoolRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	storagehitachipoolrelationship := make(map[string]interface{})
	storagehitachipoolrelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	storagehitachipoolrelationship["class_id"] = item.GetClassId()
	storagehitachipoolrelationship["moid"] = item.GetMoid()
	storagehitachipoolrelationship["object_type"] = item.GetObjectType()
	storagehitachipoolrelationship["selector"] = item.GetSelector()

	storagehitachipoolrelationships = append(storagehitachipoolrelationships, storagehitachipoolrelationship)
	return storagehitachipoolrelationships
}
func flattenMapStorageHitachiVolumeRelationship(p models.StorageHitachiVolumeRelationship, d *schema.ResourceData) []map[string]interface{} {
	var storagehitachivolumerelationships []map[string]interface{}
	var ret models.StorageHitachiVolumeRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	storagehitachivolumerelationship := make(map[string]interface{})
	storagehitachivolumerelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	storagehitachivolumerelationship["class_id"] = item.GetClassId()
	storagehitachivolumerelationship["moid"] = item.GetMoid()
	storagehitachivolumerelationship["object_type"] = item.GetObjectType()
	storagehitachivolumerelationship["selector"] = item.GetSelector()

	storagehitachivolumerelationships = append(storagehitachivolumerelationships, storagehitachivolumerelationship)
	return storagehitachivolumerelationships
}
func flattenMapStorageHyperFlexStorageContainerRelationship(p models.StorageHyperFlexStorageContainerRelationship, d *schema.ResourceData) []map[string]interface{} {
	var storagehyperflexstoragecontainerrelationships []map[string]interface{}
	var ret models.StorageHyperFlexStorageContainerRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	storagehyperflexstoragecontainerrelationship := make(map[string]interface{})
	storagehyperflexstoragecontainerrelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	storagehyperflexstoragecontainerrelationship["class_id"] = item.GetClassId()
	storagehyperflexstoragecontainerrelationship["moid"] = item.GetMoid()
	storagehyperflexstoragecontainerrelationship["object_type"] = item.GetObjectType()
	storagehyperflexstoragecontainerrelationship["selector"] = item.GetSelector()

	storagehyperflexstoragecontainerrelationships = append(storagehyperflexstoragecontainerrelationships, storagehyperflexstoragecontainerrelationship)
	return storagehyperflexstoragecontainerrelationships
}
func flattenMapStorageItemRelationship(p models.StorageItemRelationship, d *schema.ResourceData) []map[string]interface{} {
	var storageitemrelationships []map[string]interface{}
	var ret models.StorageItemRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	storageitemrelationship := make(map[string]interface{})
	storageitemrelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	storageitemrelationship["class_id"] = item.GetClassId()
	storageitemrelationship["moid"] = item.GetMoid()
	storageitemrelationship["object_type"] = item.GetObjectType()
	storageitemrelationship["selector"] = item.GetSelector()

	storageitemrelationships = append(storageitemrelationships, storageitemrelationship)
	return storageitemrelationships
}
func flattenMapStorageKeySetting(p models.StorageKeySetting, d *schema.ResourceData) []map[string]interface{} {
	var storagekeysettings []map[string]interface{}
	var ret models.StorageKeySetting
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	item := p
	storagekeysetting := make(map[string]interface{})
	storagekeysetting["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	storagekeysetting["class_id"] = item.GetClassId()
	storagekeysetting["key_type"] = item.GetKeyType()
	storagekeysetting["manual_key"] = (func(p models.StorageLocalKeySetting, d *schema.ResourceData) []map[string]interface{} {
		var storagelocalkeysettings []map[string]interface{}
		var ret models.StorageLocalKeySetting
		if reflect.DeepEqual(ret, p) {
			return nil
		}
		item := p
		storagelocalkeysetting := make(map[string]interface{})
		storagelocalkeysetting["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
		storagelocalkeysetting["class_id"] = item.GetClassId()
		existing_key_x, exists := d.GetOk("manual_key")
		if exists && existing_key_x != nil {
			existing_key_y := existing_key_x.([]interface{})[0].(map[string]interface{})
			storagelocalkeysetting["existing_key"] = existing_key_y["existing_key"]
		}
		storagelocalkeysetting["is_existing_key_set"] = item.GetIsExistingKeySet()
		storagelocalkeysetting["is_new_key_set"] = item.GetIsNewKeySet()
		new_key_x, exists := d.GetOk("manual_key")
		if exists && new_key_x != nil {
			new_key_y := new_key_x.([]interface{})[0].(map[string]interface{})
			storagelocalkeysetting["new_key"] = new_key_y["new_key"]
		}
		storagelocalkeysetting["object_type"] = item.GetObjectType()

		storagelocalkeysettings = append(storagelocalkeysettings, storagelocalkeysetting)
		return storagelocalkeysettings
	})(item.GetManualKey(), d)
	storagekeysetting["object_type"] = item.GetObjectType()
	storagekeysetting["remote_key"] = (func(p models.StorageRemoteKeySetting, d *schema.ResourceData) []map[string]interface{} {
		var storageremotekeysettings []map[string]interface{}
		var ret models.StorageRemoteKeySetting
		if reflect.DeepEqual(ret, p) {
			return nil
		}
		item := p
		storageremotekeysetting := make(map[string]interface{})
		storageremotekeysetting["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
		storageremotekeysetting["auth_credentials"] = (func(p models.StorageKmipAuthCredentials, d *schema.ResourceData) []map[string]interface{} {
			var storagekmipauthcredentialss []map[string]interface{}
			var ret models.StorageKmipAuthCredentials
			if reflect.DeepEqual(ret, p) {
				return nil
			}
			item := p
			storagekmipauthcredentials := make(map[string]interface{})
			storagekmipauthcredentials["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
			storagekmipauthcredentials["class_id"] = item.GetClassId()
			storagekmipauthcredentials["is_password_set"] = item.GetIsPasswordSet()
			storagekmipauthcredentials["object_type"] = item.GetObjectType()
			password_x, exists := d.GetOk("auth_credentials")
			if exists && password_x != nil {
				password_y := password_x.([]interface{})[0].(map[string]interface{})
				storagekmipauthcredentials["password"] = password_y["password"]
			}
			storagekmipauthcredentials["use_authentication"] = item.GetUseAuthentication()
			storagekmipauthcredentials["username"] = item.GetUsername()

			storagekmipauthcredentialss = append(storagekmipauthcredentialss, storagekmipauthcredentials)
			return storagekmipauthcredentialss
		})(item.GetAuthCredentials(), d)
		storageremotekeysetting["class_id"] = item.GetClassId()
		existing_key_x, exists := d.GetOk("remote_key")
		if exists && existing_key_x != nil {
			existing_key_y := existing_key_x.([]interface{})[0].(map[string]interface{})
			storageremotekeysetting["existing_key"] = existing_key_y["existing_key"]
		}
		storageremotekeysetting["is_existing_key_set"] = item.GetIsExistingKeySet()
		storageremotekeysetting["object_type"] = item.GetObjectType()
		storageremotekeysetting["primary_server"] = (func(p models.StorageKmipServer, d *schema.ResourceData) []map[string]interface{} {
			var storagekmipservers []map[string]interface{}
			var ret models.StorageKmipServer
			if reflect.DeepEqual(ret, p) {
				return nil
			}
			item := p
			storagekmipserver := make(map[string]interface{})
			storagekmipserver["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
			storagekmipserver["class_id"] = item.GetClassId()
			storagekmipserver["enable_drive_security"] = item.GetEnableDriveSecurity()
			storagekmipserver["ip_address"] = item.GetIpAddress()
			storagekmipserver["object_type"] = item.GetObjectType()
			storagekmipserver["port"] = item.GetPort()
			storagekmipserver["timeout"] = item.GetTimeout()

			storagekmipservers = append(storagekmipservers, storagekmipserver)
			return storagekmipservers
		})(item.GetPrimaryServer(), d)
		storageremotekeysetting["secondary_server"] = (func(p models.StorageKmipServer, d *schema.ResourceData) []map[string]interface{} {
			var storagekmipservers []map[string]interface{}
			var ret models.StorageKmipServer
			if reflect.DeepEqual(ret, p) {
				return nil
			}
			item := p
			storagekmipserver := make(map[string]interface{})
			storagekmipserver["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
			storagekmipserver["class_id"] = item.GetClassId()
			storagekmipserver["enable_drive_security"] = item.GetEnableDriveSecurity()
			storagekmipserver["ip_address"] = item.GetIpAddress()
			storagekmipserver["object_type"] = item.GetObjectType()
			storagekmipserver["port"] = item.GetPort()
			storagekmipserver["timeout"] = item.GetTimeout()

			storagekmipservers = append(storagekmipservers, storagekmipserver)
			return storagekmipservers
		})(item.GetSecondaryServer(), d)
		storageremotekeysetting["server_certificate"] = item.GetServerCertificate()

		storageremotekeysettings = append(storageremotekeysettings, storageremotekeysetting)
		return storageremotekeysettings
	})(item.GetRemoteKey(), d)

	storagekeysettings = append(storagekeysettings, storagekeysetting)
	return storagekeysettings
}
func flattenMapStorageM2VirtualDriveConfig(p models.StorageM2VirtualDriveConfig, d *schema.ResourceData) []map[string]interface{} {
	var storagem2virtualdriveconfigs []map[string]interface{}
	var ret models.StorageM2VirtualDriveConfig
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	item := p
	storagem2virtualdriveconfig := make(map[string]interface{})
	storagem2virtualdriveconfig["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	storagem2virtualdriveconfig["class_id"] = item.GetClassId()
	storagem2virtualdriveconfig["controller_slot"] = item.GetControllerSlot()
	storagem2virtualdriveconfig["enable"] = item.GetEnable()
	storagem2virtualdriveconfig["name"] = item.GetName()
	storagem2virtualdriveconfig["object_type"] = item.GetObjectType()

	storagem2virtualdriveconfigs = append(storagem2virtualdriveconfigs, storagem2virtualdriveconfig)
	return storagem2virtualdriveconfigs
}
func flattenMapStorageManualDriveGroup(p models.StorageManualDriveGroup, d *schema.ResourceData) []map[string]interface{} {
	var storagemanualdrivegroups []map[string]interface{}
	var ret models.StorageManualDriveGroup
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	item := p
	storagemanualdrivegroup := make(map[string]interface{})
	storagemanualdrivegroup["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	storagemanualdrivegroup["class_id"] = item.GetClassId()
	storagemanualdrivegroup["dedicated_hot_spares"] = item.GetDedicatedHotSpares()
	storagemanualdrivegroup["object_type"] = item.GetObjectType()
	storagemanualdrivegroup["span_groups"] = (func(p []models.StorageSpanDrives, d *schema.ResourceData) []map[string]interface{} {
		var storagespandrivess []map[string]interface{}
		if len(p) == 0 {
			return nil
		}
		for _, item := range p {
			storagespandrives := make(map[string]interface{})
			storagespandrives["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
			storagespandrives["class_id"] = item.GetClassId()
			storagespandrives["object_type"] = item.GetObjectType()
			storagespandrives["slots"] = item.GetSlots()
			storagespandrivess = append(storagespandrivess, storagespandrives)
		}
		return storagespandrivess
	})(item.GetSpanGroups(), d)

	storagemanualdrivegroups = append(storagemanualdrivegroups, storagemanualdrivegroup)
	return storagemanualdrivegroups
}
func flattenMapStorageNetAppAggregateRelationship(p models.StorageNetAppAggregateRelationship, d *schema.ResourceData) []map[string]interface{} {
	var storagenetappaggregaterelationships []map[string]interface{}
	var ret models.StorageNetAppAggregateRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	storagenetappaggregaterelationship := make(map[string]interface{})
	storagenetappaggregaterelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	storagenetappaggregaterelationship["class_id"] = item.GetClassId()
	storagenetappaggregaterelationship["moid"] = item.GetMoid()
	storagenetappaggregaterelationship["object_type"] = item.GetObjectType()
	storagenetappaggregaterelationship["selector"] = item.GetSelector()

	storagenetappaggregaterelationships = append(storagenetappaggregaterelationships, storagenetappaggregaterelationship)
	return storagenetappaggregaterelationships
}
func flattenMapStorageNetAppAutoSupport(p models.StorageNetAppAutoSupport, d *schema.ResourceData) []map[string]interface{} {
	var storagenetappautosupports []map[string]interface{}
	var ret models.StorageNetAppAutoSupport
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	item := p
	storagenetappautosupport := make(map[string]interface{})
	storagenetappautosupport["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	storagenetappautosupport["class_id"] = item.GetClassId()
	storagenetappautosupport["enabled"] = item.GetEnabled()
	storagenetappautosupport["from"] = item.GetFrom()
	storagenetappautosupport["object_type"] = item.GetObjectType()
	storagenetappautosupport["proxy_url"] = item.GetProxyUrl()
	storagenetappautosupport["transport"] = item.GetTransport()

	storagenetappautosupports = append(storagenetappautosupports, storagenetappautosupport)
	return storagenetappautosupports
}
func flattenMapStorageNetAppBaseDiskRelationship(p models.StorageNetAppBaseDiskRelationship, d *schema.ResourceData) []map[string]interface{} {
	var storagenetappbasediskrelationships []map[string]interface{}
	var ret models.StorageNetAppBaseDiskRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	storagenetappbasediskrelationship := make(map[string]interface{})
	storagenetappbasediskrelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	storagenetappbasediskrelationship["class_id"] = item.GetClassId()
	storagenetappbasediskrelationship["moid"] = item.GetMoid()
	storagenetappbasediskrelationship["object_type"] = item.GetObjectType()
	storagenetappbasediskrelationship["selector"] = item.GetSelector()

	storagenetappbasediskrelationships = append(storagenetappbasediskrelationships, storagenetappbasediskrelationship)
	return storagenetappbasediskrelationships
}
func flattenMapStorageNetAppBaseSnapMirrorPolicyRelationship(p models.StorageNetAppBaseSnapMirrorPolicyRelationship, d *schema.ResourceData) []map[string]interface{} {
	var storagenetappbasesnapmirrorpolicyrelationships []map[string]interface{}
	var ret models.StorageNetAppBaseSnapMirrorPolicyRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	storagenetappbasesnapmirrorpolicyrelationship := make(map[string]interface{})
	storagenetappbasesnapmirrorpolicyrelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	storagenetappbasesnapmirrorpolicyrelationship["class_id"] = item.GetClassId()
	storagenetappbasesnapmirrorpolicyrelationship["moid"] = item.GetMoid()
	storagenetappbasesnapmirrorpolicyrelationship["object_type"] = item.GetObjectType()
	storagenetappbasesnapmirrorpolicyrelationship["selector"] = item.GetSelector()

	storagenetappbasesnapmirrorpolicyrelationships = append(storagenetappbasesnapmirrorpolicyrelationships, storagenetappbasesnapmirrorpolicyrelationship)
	return storagenetappbasesnapmirrorpolicyrelationships
}
func flattenMapStorageNetAppClusterRelationship(p models.StorageNetAppClusterRelationship, d *schema.ResourceData) []map[string]interface{} {
	var storagenetappclusterrelationships []map[string]interface{}
	var ret models.StorageNetAppClusterRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	storagenetappclusterrelationship := make(map[string]interface{})
	storagenetappclusterrelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	storagenetappclusterrelationship["class_id"] = item.GetClassId()
	storagenetappclusterrelationship["moid"] = item.GetMoid()
	storagenetappclusterrelationship["object_type"] = item.GetObjectType()
	storagenetappclusterrelationship["selector"] = item.GetSelector()

	storagenetappclusterrelationships = append(storagenetappclusterrelationships, storagenetappclusterrelationship)
	return storagenetappclusterrelationships
}
func flattenMapStorageNetAppDataIpInterfaceRelationship(p models.StorageNetAppDataIpInterfaceRelationship, d *schema.ResourceData) []map[string]interface{} {
	var storagenetappdataipinterfacerelationships []map[string]interface{}
	var ret models.StorageNetAppDataIpInterfaceRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	storagenetappdataipinterfacerelationship := make(map[string]interface{})
	storagenetappdataipinterfacerelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	storagenetappdataipinterfacerelationship["class_id"] = item.GetClassId()
	storagenetappdataipinterfacerelationship["moid"] = item.GetMoid()
	storagenetappdataipinterfacerelationship["object_type"] = item.GetObjectType()
	storagenetappdataipinterfacerelationship["selector"] = item.GetSelector()

	storagenetappdataipinterfacerelationships = append(storagenetappdataipinterfacerelationships, storagenetappdataipinterfacerelationship)
	return storagenetappdataipinterfacerelationships
}
func flattenMapStorageNetAppEthernetPortRelationship(p models.StorageNetAppEthernetPortRelationship, d *schema.ResourceData) []map[string]interface{} {
	var storagenetappethernetportrelationships []map[string]interface{}
	var ret models.StorageNetAppEthernetPortRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	storagenetappethernetportrelationship := make(map[string]interface{})
	storagenetappethernetportrelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	storagenetappethernetportrelationship["class_id"] = item.GetClassId()
	storagenetappethernetportrelationship["moid"] = item.GetMoid()
	storagenetappethernetportrelationship["object_type"] = item.GetObjectType()
	storagenetappethernetportrelationship["selector"] = item.GetSelector()

	storagenetappethernetportrelationships = append(storagenetappethernetportrelationships, storagenetappethernetportrelationship)
	return storagenetappethernetportrelationships
}
func flattenMapStorageNetAppEthernetPortLag(p models.StorageNetAppEthernetPortLag, d *schema.ResourceData) []map[string]interface{} {
	var storagenetappethernetportlags []map[string]interface{}
	var ret models.StorageNetAppEthernetPortLag
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	item := p
	storagenetappethernetportlag := make(map[string]interface{})
	storagenetappethernetportlag["active_ports"] = (func(p []models.StorageNetAppPort, d *schema.ResourceData) []map[string]interface{} {
		var storagenetappports []map[string]interface{}
		if len(p) == 0 {
			return nil
		}
		for _, item := range p {
			storagenetappport := make(map[string]interface{})
			storagenetappport["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
			storagenetappport["class_id"] = item.GetClassId()
			storagenetappport["name"] = item.GetName()
			storagenetappport["node_name"] = item.GetNodeName()
			storagenetappport["object_type"] = item.GetObjectType()
			storagenetappport["uuid"] = item.GetUuid()
			storagenetappports = append(storagenetappports, storagenetappport)
		}
		return storagenetappports
	})(item.GetActivePorts(), d)
	storagenetappethernetportlag["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	storagenetappethernetportlag["class_id"] = item.GetClassId()
	storagenetappethernetportlag["distribution_policy"] = item.GetDistributionPolicy()
	storagenetappethernetportlag["member_ports"] = (func(p []models.StorageNetAppPort, d *schema.ResourceData) []map[string]interface{} {
		var storagenetappports []map[string]interface{}
		if len(p) == 0 {
			return nil
		}
		for _, item := range p {
			storagenetappport := make(map[string]interface{})
			storagenetappport["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
			storagenetappport["class_id"] = item.GetClassId()
			storagenetappport["name"] = item.GetName()
			storagenetappport["node_name"] = item.GetNodeName()
			storagenetappport["object_type"] = item.GetObjectType()
			storagenetappport["uuid"] = item.GetUuid()
			storagenetappports = append(storagenetappports, storagenetappport)
		}
		return storagenetappports
	})(item.GetMemberPorts(), d)
	storagenetappethernetportlag["mode"] = item.GetMode()
	storagenetappethernetportlag["object_type"] = item.GetObjectType()

	storagenetappethernetportlags = append(storagenetappethernetportlags, storagenetappethernetportlag)
	return storagenetappethernetportlags
}
func flattenMapStorageNetAppEthernetPortVlan(p models.StorageNetAppEthernetPortVlan, d *schema.ResourceData) []map[string]interface{} {
	var storagenetappethernetportvlans []map[string]interface{}
	var ret models.StorageNetAppEthernetPortVlan
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	item := p
	storagenetappethernetportvlan := make(map[string]interface{})
	storagenetappethernetportvlan["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	storagenetappethernetportvlan["base_port"] = (func(p models.StorageNetAppPort, d *schema.ResourceData) []map[string]interface{} {
		var storagenetappports []map[string]interface{}
		var ret models.StorageNetAppPort
		if reflect.DeepEqual(ret, p) {
			return nil
		}
		item := p
		storagenetappport := make(map[string]interface{})
		storagenetappport["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
		storagenetappport["class_id"] = item.GetClassId()
		storagenetappport["name"] = item.GetName()
		storagenetappport["node_name"] = item.GetNodeName()
		storagenetappport["object_type"] = item.GetObjectType()
		storagenetappport["uuid"] = item.GetUuid()

		storagenetappports = append(storagenetappports, storagenetappport)
		return storagenetappports
	})(item.GetBasePort(), d)
	storagenetappethernetportvlan["class_id"] = item.GetClassId()
	storagenetappethernetportvlan["object_type"] = item.GetObjectType()
	storagenetappethernetportvlan["tag"] = item.GetTag()

	storagenetappethernetportvlans = append(storagenetappethernetportvlans, storagenetappethernetportvlan)
	return storagenetappethernetportvlans
}
func flattenMapStorageNetAppFcInterfaceRelationship(p models.StorageNetAppFcInterfaceRelationship, d *schema.ResourceData) []map[string]interface{} {
	var storagenetappfcinterfacerelationships []map[string]interface{}
	var ret models.StorageNetAppFcInterfaceRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	storagenetappfcinterfacerelationship := make(map[string]interface{})
	storagenetappfcinterfacerelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	storagenetappfcinterfacerelationship["class_id"] = item.GetClassId()
	storagenetappfcinterfacerelationship["moid"] = item.GetMoid()
	storagenetappfcinterfacerelationship["object_type"] = item.GetObjectType()
	storagenetappfcinterfacerelationship["selector"] = item.GetSelector()

	storagenetappfcinterfacerelationships = append(storagenetappfcinterfacerelationships, storagenetappfcinterfacerelationship)
	return storagenetappfcinterfacerelationships
}
func flattenMapStorageNetAppFcPortRelationship(p models.StorageNetAppFcPortRelationship, d *schema.ResourceData) []map[string]interface{} {
	var storagenetappfcportrelationships []map[string]interface{}
	var ret models.StorageNetAppFcPortRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	storagenetappfcportrelationship := make(map[string]interface{})
	storagenetappfcportrelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	storagenetappfcportrelationship["class_id"] = item.GetClassId()
	storagenetappfcportrelationship["moid"] = item.GetMoid()
	storagenetappfcportrelationship["object_type"] = item.GetObjectType()
	storagenetappfcportrelationship["selector"] = item.GetSelector()

	storagenetappfcportrelationships = append(storagenetappfcportrelationships, storagenetappfcportrelationship)
	return storagenetappfcportrelationships
}
func flattenMapStorageNetAppHighAvailability(p models.StorageNetAppHighAvailability, d *schema.ResourceData) []map[string]interface{} {
	var storagenetapphighavailabilitys []map[string]interface{}
	var ret models.StorageNetAppHighAvailability
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	item := p
	storagenetapphighavailability := make(map[string]interface{})
	storagenetapphighavailability["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	storagenetapphighavailability["auto_giveback_enabled"] = item.GetAutoGivebackEnabled()
	storagenetapphighavailability["class_id"] = item.GetClassId()
	storagenetapphighavailability["enabled"] = item.GetEnabled()
	storagenetapphighavailability["giveback_state"] = item.GetGivebackState()
	storagenetapphighavailability["object_type"] = item.GetObjectType()
	storagenetapphighavailability["partner_model"] = item.GetPartnerModel()
	storagenetapphighavailability["partner_name"] = item.GetPartnerName()
	storagenetapphighavailability["partner_uuid"] = item.GetPartnerUuid()
	storagenetapphighavailability["takeover_state"] = item.GetTakeoverState()

	storagenetapphighavailabilitys = append(storagenetapphighavailabilitys, storagenetapphighavailability)
	return storagenetapphighavailabilitys
}
func flattenMapStorageNetAppIpInterfaceRelationship(p models.StorageNetAppIpInterfaceRelationship, d *schema.ResourceData) []map[string]interface{} {
	var storagenetappipinterfacerelationships []map[string]interface{}
	var ret models.StorageNetAppIpInterfaceRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	storagenetappipinterfacerelationship := make(map[string]interface{})
	storagenetappipinterfacerelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	storagenetappipinterfacerelationship["class_id"] = item.GetClassId()
	storagenetappipinterfacerelationship["moid"] = item.GetMoid()
	storagenetappipinterfacerelationship["object_type"] = item.GetObjectType()
	storagenetappipinterfacerelationship["selector"] = item.GetSelector()

	storagenetappipinterfacerelationships = append(storagenetappipinterfacerelationships, storagenetappipinterfacerelationship)
	return storagenetappipinterfacerelationships
}
func flattenMapStorageNetAppLunRelationship(p models.StorageNetAppLunRelationship, d *schema.ResourceData) []map[string]interface{} {
	var storagenetapplunrelationships []map[string]interface{}
	var ret models.StorageNetAppLunRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	storagenetapplunrelationship := make(map[string]interface{})
	storagenetapplunrelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	storagenetapplunrelationship["class_id"] = item.GetClassId()
	storagenetapplunrelationship["moid"] = item.GetMoid()
	storagenetapplunrelationship["object_type"] = item.GetObjectType()
	storagenetapplunrelationship["selector"] = item.GetSelector()

	storagenetapplunrelationships = append(storagenetapplunrelationships, storagenetapplunrelationship)
	return storagenetapplunrelationships
}
func flattenMapStorageNetAppNodeRelationship(p models.StorageNetAppNodeRelationship, d *schema.ResourceData) []map[string]interface{} {
	var storagenetappnoderelationships []map[string]interface{}
	var ret models.StorageNetAppNodeRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	storagenetappnoderelationship := make(map[string]interface{})
	storagenetappnoderelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	storagenetappnoderelationship["class_id"] = item.GetClassId()
	storagenetappnoderelationship["moid"] = item.GetMoid()
	storagenetappnoderelationship["object_type"] = item.GetObjectType()
	storagenetappnoderelationship["selector"] = item.GetSelector()

	storagenetappnoderelationships = append(storagenetappnoderelationships, storagenetappnoderelationship)
	return storagenetappnoderelationships
}
func flattenMapStorageNetAppNonDataIpInterfaceRelationship(p models.StorageNetAppNonDataIpInterfaceRelationship, d *schema.ResourceData) []map[string]interface{} {
	var storagenetappnondataipinterfacerelationships []map[string]interface{}
	var ret models.StorageNetAppNonDataIpInterfaceRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	storagenetappnondataipinterfacerelationship := make(map[string]interface{})
	storagenetappnondataipinterfacerelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	storagenetappnondataipinterfacerelationship["class_id"] = item.GetClassId()
	storagenetappnondataipinterfacerelationship["moid"] = item.GetMoid()
	storagenetappnondataipinterfacerelationship["object_type"] = item.GetObjectType()
	storagenetappnondataipinterfacerelationship["selector"] = item.GetSelector()

	storagenetappnondataipinterfacerelationships = append(storagenetappnondataipinterfacerelationships, storagenetappnondataipinterfacerelationship)
	return storagenetappnondataipinterfacerelationships
}
func flattenMapStorageNetAppPerformanceMetricsAverage(p models.StorageNetAppPerformanceMetricsAverage, d *schema.ResourceData) []map[string]interface{} {
	var storagenetappperformancemetricsaverages []map[string]interface{}
	var ret models.StorageNetAppPerformanceMetricsAverage
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	item := p
	storagenetappperformancemetricsaverage := make(map[string]interface{})
	storagenetappperformancemetricsaverage["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	storagenetappperformancemetricsaverage["class_id"] = item.GetClassId()
	storagenetappperformancemetricsaverage["iops"] = item.GetIops()
	storagenetappperformancemetricsaverage["latency"] = item.GetLatency()
	storagenetappperformancemetricsaverage["object_type"] = item.GetObjectType()
	storagenetappperformancemetricsaverage["period"] = item.GetPeriod()
	storagenetappperformancemetricsaverage["throughput"] = item.GetThroughput()

	storagenetappperformancemetricsaverages = append(storagenetappperformancemetricsaverages, storagenetappperformancemetricsaverage)
	return storagenetappperformancemetricsaverages
}
func flattenMapStorageNetAppStorageClusterEfficiency(p models.StorageNetAppStorageClusterEfficiency, d *schema.ResourceData) []map[string]interface{} {
	var storagenetappstorageclusterefficiencys []map[string]interface{}
	var ret models.StorageNetAppStorageClusterEfficiency
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	item := p
	storagenetappstorageclusterefficiency := make(map[string]interface{})
	storagenetappstorageclusterefficiency["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	storagenetappstorageclusterefficiency["class_id"] = item.GetClassId()
	storagenetappstorageclusterefficiency["logical_used"] = item.GetLogicalUsed()
	storagenetappstorageclusterefficiency["object_type"] = item.GetObjectType()
	storagenetappstorageclusterefficiency["ratio"] = item.GetRatio()
	storagenetappstorageclusterefficiency["savings"] = item.GetSavings()

	storagenetappstorageclusterefficiencys = append(storagenetappstorageclusterefficiencys, storagenetappstorageclusterefficiency)
	return storagenetappstorageclusterefficiencys
}
func flattenMapStorageNetAppStorageVmRelationship(p models.StorageNetAppStorageVmRelationship, d *schema.ResourceData) []map[string]interface{} {
	var storagenetappstoragevmrelationships []map[string]interface{}
	var ret models.StorageNetAppStorageVmRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	storagenetappstoragevmrelationship := make(map[string]interface{})
	storagenetappstoragevmrelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	storagenetappstoragevmrelationship["class_id"] = item.GetClassId()
	storagenetappstoragevmrelationship["moid"] = item.GetMoid()
	storagenetappstoragevmrelationship["object_type"] = item.GetObjectType()
	storagenetappstoragevmrelationship["selector"] = item.GetSelector()

	storagenetappstoragevmrelationships = append(storagenetappstoragevmrelationships, storagenetappstoragevmrelationship)
	return storagenetappstoragevmrelationships
}
func flattenMapStorageNetAppVolumeRelationship(p models.StorageNetAppVolumeRelationship, d *schema.ResourceData) []map[string]interface{} {
	var storagenetappvolumerelationships []map[string]interface{}
	var ret models.StorageNetAppVolumeRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	storagenetappvolumerelationship := make(map[string]interface{})
	storagenetappvolumerelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	storagenetappvolumerelationship["class_id"] = item.GetClassId()
	storagenetappvolumerelationship["moid"] = item.GetMoid()
	storagenetappvolumerelationship["object_type"] = item.GetObjectType()
	storagenetappvolumerelationship["selector"] = item.GetSelector()

	storagenetappvolumerelationships = append(storagenetappvolumerelationships, storagenetappvolumerelationship)
	return storagenetappvolumerelationships
}
func flattenMapStoragePhysicalDiskRelationship(p models.StoragePhysicalDiskRelationship, d *schema.ResourceData) []map[string]interface{} {
	var storagephysicaldiskrelationships []map[string]interface{}
	var ret models.StoragePhysicalDiskRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	storagephysicaldiskrelationship := make(map[string]interface{})
	storagephysicaldiskrelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	storagephysicaldiskrelationship["class_id"] = item.GetClassId()
	storagephysicaldiskrelationship["moid"] = item.GetMoid()
	storagephysicaldiskrelationship["object_type"] = item.GetObjectType()
	storagephysicaldiskrelationship["selector"] = item.GetSelector()

	storagephysicaldiskrelationships = append(storagephysicaldiskrelationships, storagephysicaldiskrelationship)
	return storagephysicaldiskrelationships
}
func flattenMapStoragePureArrayRelationship(p models.StoragePureArrayRelationship, d *schema.ResourceData) []map[string]interface{} {
	var storagepurearrayrelationships []map[string]interface{}
	var ret models.StoragePureArrayRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	storagepurearrayrelationship := make(map[string]interface{})
	storagepurearrayrelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	storagepurearrayrelationship["class_id"] = item.GetClassId()
	storagepurearrayrelationship["moid"] = item.GetMoid()
	storagepurearrayrelationship["object_type"] = item.GetObjectType()
	storagepurearrayrelationship["selector"] = item.GetSelector()

	storagepurearrayrelationships = append(storagepurearrayrelationships, storagepurearrayrelationship)
	return storagepurearrayrelationships
}
func flattenMapStoragePureControllerRelationship(p models.StoragePureControllerRelationship, d *schema.ResourceData) []map[string]interface{} {
	var storagepurecontrollerrelationships []map[string]interface{}
	var ret models.StoragePureControllerRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	storagepurecontrollerrelationship := make(map[string]interface{})
	storagepurecontrollerrelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	storagepurecontrollerrelationship["class_id"] = item.GetClassId()
	storagepurecontrollerrelationship["moid"] = item.GetMoid()
	storagepurecontrollerrelationship["object_type"] = item.GetObjectType()
	storagepurecontrollerrelationship["selector"] = item.GetSelector()

	storagepurecontrollerrelationships = append(storagepurecontrollerrelationships, storagepurecontrollerrelationship)
	return storagepurecontrollerrelationships
}
func flattenMapStoragePureHostRelationship(p models.StoragePureHostRelationship, d *schema.ResourceData) []map[string]interface{} {
	var storagepurehostrelationships []map[string]interface{}
	var ret models.StoragePureHostRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	storagepurehostrelationship := make(map[string]interface{})
	storagepurehostrelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	storagepurehostrelationship["class_id"] = item.GetClassId()
	storagepurehostrelationship["moid"] = item.GetMoid()
	storagepurehostrelationship["object_type"] = item.GetObjectType()
	storagepurehostrelationship["selector"] = item.GetSelector()

	storagepurehostrelationships = append(storagepurehostrelationships, storagepurehostrelationship)
	return storagepurehostrelationships
}
func flattenMapStoragePureHostGroupRelationship(p models.StoragePureHostGroupRelationship, d *schema.ResourceData) []map[string]interface{} {
	var storagepurehostgrouprelationships []map[string]interface{}
	var ret models.StoragePureHostGroupRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	storagepurehostgrouprelationship := make(map[string]interface{})
	storagepurehostgrouprelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	storagepurehostgrouprelationship["class_id"] = item.GetClassId()
	storagepurehostgrouprelationship["moid"] = item.GetMoid()
	storagepurehostgrouprelationship["object_type"] = item.GetObjectType()
	storagepurehostgrouprelationship["selector"] = item.GetSelector()

	storagepurehostgrouprelationships = append(storagepurehostgrouprelationships, storagepurehostgrouprelationship)
	return storagepurehostgrouprelationships
}
func flattenMapStoragePureProtectionGroupRelationship(p models.StoragePureProtectionGroupRelationship, d *schema.ResourceData) []map[string]interface{} {
	var storagepureprotectiongrouprelationships []map[string]interface{}
	var ret models.StoragePureProtectionGroupRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	storagepureprotectiongrouprelationship := make(map[string]interface{})
	storagepureprotectiongrouprelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	storagepureprotectiongrouprelationship["class_id"] = item.GetClassId()
	storagepureprotectiongrouprelationship["moid"] = item.GetMoid()
	storagepureprotectiongrouprelationship["object_type"] = item.GetObjectType()
	storagepureprotectiongrouprelationship["selector"] = item.GetSelector()

	storagepureprotectiongrouprelationships = append(storagepureprotectiongrouprelationships, storagepureprotectiongrouprelationship)
	return storagepureprotectiongrouprelationships
}
func flattenMapStoragePureProtectionGroupSnapshotRelationship(p models.StoragePureProtectionGroupSnapshotRelationship, d *schema.ResourceData) []map[string]interface{} {
	var storagepureprotectiongroupsnapshotrelationships []map[string]interface{}
	var ret models.StoragePureProtectionGroupSnapshotRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	storagepureprotectiongroupsnapshotrelationship := make(map[string]interface{})
	storagepureprotectiongroupsnapshotrelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	storagepureprotectiongroupsnapshotrelationship["class_id"] = item.GetClassId()
	storagepureprotectiongroupsnapshotrelationship["moid"] = item.GetMoid()
	storagepureprotectiongroupsnapshotrelationship["object_type"] = item.GetObjectType()
	storagepureprotectiongroupsnapshotrelationship["selector"] = item.GetSelector()

	storagepureprotectiongroupsnapshotrelationships = append(storagepureprotectiongroupsnapshotrelationships, storagepureprotectiongroupsnapshotrelationship)
	return storagepureprotectiongroupsnapshotrelationships
}
func flattenMapStoragePureVolumeRelationship(p models.StoragePureVolumeRelationship, d *schema.ResourceData) []map[string]interface{} {
	var storagepurevolumerelationships []map[string]interface{}
	var ret models.StoragePureVolumeRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	storagepurevolumerelationship := make(map[string]interface{})
	storagepurevolumerelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	storagepurevolumerelationship["class_id"] = item.GetClassId()
	storagepurevolumerelationship["moid"] = item.GetMoid()
	storagepurevolumerelationship["object_type"] = item.GetObjectType()
	storagepurevolumerelationship["selector"] = item.GetSelector()

	storagepurevolumerelationships = append(storagepurevolumerelationships, storagepurevolumerelationship)
	return storagepurevolumerelationships
}
func flattenMapStorageR0Drive(p models.StorageR0Drive, d *schema.ResourceData) []map[string]interface{} {
	var storager0drives []map[string]interface{}
	var ret models.StorageR0Drive
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	item := p
	storager0drive := make(map[string]interface{})
	storager0drive["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	storager0drive["class_id"] = item.GetClassId()
	storager0drive["drive_slots"] = item.GetDriveSlots()
	storager0drive["drive_slots_list"] = item.GetDriveSlotsList()
	storager0drive["enable"] = item.GetEnable()
	storager0drive["object_type"] = item.GetObjectType()
	storager0drive["virtual_drive_policy"] = (func(p models.StorageVirtualDrivePolicy, d *schema.ResourceData) []map[string]interface{} {
		var storagevirtualdrivepolicys []map[string]interface{}
		var ret models.StorageVirtualDrivePolicy
		if reflect.DeepEqual(ret, p) {
			return nil
		}
		item := p
		storagevirtualdrivepolicy := make(map[string]interface{})
		storagevirtualdrivepolicy["access_policy"] = item.GetAccessPolicy()
		storagevirtualdrivepolicy["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
		storagevirtualdrivepolicy["class_id"] = item.GetClassId()
		storagevirtualdrivepolicy["drive_cache"] = item.GetDriveCache()
		storagevirtualdrivepolicy["object_type"] = item.GetObjectType()
		storagevirtualdrivepolicy["read_policy"] = item.GetReadPolicy()
		storagevirtualdrivepolicy["strip_size"] = item.GetStripSize()
		storagevirtualdrivepolicy["write_policy"] = item.GetWritePolicy()

		storagevirtualdrivepolicys = append(storagevirtualdrivepolicys, storagevirtualdrivepolicy)
		return storagevirtualdrivepolicys
	})(item.GetVirtualDrivePolicy(), d)

	storager0drives = append(storager0drives, storager0drive)
	return storager0drives
}
func flattenMapStorageSasExpanderRelationship(p models.StorageSasExpanderRelationship, d *schema.ResourceData) []map[string]interface{} {
	var storagesasexpanderrelationships []map[string]interface{}
	var ret models.StorageSasExpanderRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	storagesasexpanderrelationship := make(map[string]interface{})
	storagesasexpanderrelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	storagesasexpanderrelationship["class_id"] = item.GetClassId()
	storagesasexpanderrelationship["moid"] = item.GetMoid()
	storagesasexpanderrelationship["object_type"] = item.GetObjectType()
	storagesasexpanderrelationship["selector"] = item.GetSelector()

	storagesasexpanderrelationships = append(storagesasexpanderrelationships, storagesasexpanderrelationship)
	return storagesasexpanderrelationships
}
func flattenMapStorageStoragePolicyRelationship(p models.StorageStoragePolicyRelationship, d *schema.ResourceData) []map[string]interface{} {
	var storagestoragepolicyrelationships []map[string]interface{}
	var ret models.StorageStoragePolicyRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	storagestoragepolicyrelationship := make(map[string]interface{})
	storagestoragepolicyrelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	storagestoragepolicyrelationship["class_id"] = item.GetClassId()
	storagestoragepolicyrelationship["moid"] = item.GetMoid()
	storagestoragepolicyrelationship["object_type"] = item.GetObjectType()
	storagestoragepolicyrelationship["selector"] = item.GetSelector()

	storagestoragepolicyrelationships = append(storagestoragepolicyrelationships, storagestoragepolicyrelationship)
	return storagestoragepolicyrelationships
}
func flattenMapStorageVirtualDriveRelationship(p models.StorageVirtualDriveRelationship, d *schema.ResourceData) []map[string]interface{} {
	var storagevirtualdriverelationships []map[string]interface{}
	var ret models.StorageVirtualDriveRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	storagevirtualdriverelationship := make(map[string]interface{})
	storagevirtualdriverelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	storagevirtualdriverelationship["class_id"] = item.GetClassId()
	storagevirtualdriverelationship["moid"] = item.GetMoid()
	storagevirtualdriverelationship["object_type"] = item.GetObjectType()
	storagevirtualdriverelationship["selector"] = item.GetSelector()

	storagevirtualdriverelationships = append(storagevirtualdriverelationships, storagevirtualdriverelationship)
	return storagevirtualdriverelationships
}
func flattenMapStorageVirtualDriveContainerRelationship(p models.StorageVirtualDriveContainerRelationship, d *schema.ResourceData) []map[string]interface{} {
	var storagevirtualdrivecontainerrelationships []map[string]interface{}
	var ret models.StorageVirtualDriveContainerRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	storagevirtualdrivecontainerrelationship := make(map[string]interface{})
	storagevirtualdrivecontainerrelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	storagevirtualdrivecontainerrelationship["class_id"] = item.GetClassId()
	storagevirtualdrivecontainerrelationship["moid"] = item.GetMoid()
	storagevirtualdrivecontainerrelationship["object_type"] = item.GetObjectType()
	storagevirtualdrivecontainerrelationship["selector"] = item.GetSelector()

	storagevirtualdrivecontainerrelationships = append(storagevirtualdrivecontainerrelationships, storagevirtualdrivecontainerrelationship)
	return storagevirtualdrivecontainerrelationships
}
func flattenMapStorageVirtualDriveExtensionRelationship(p models.StorageVirtualDriveExtensionRelationship, d *schema.ResourceData) []map[string]interface{} {
	var storagevirtualdriveextensionrelationships []map[string]interface{}
	var ret models.StorageVirtualDriveExtensionRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	storagevirtualdriveextensionrelationship := make(map[string]interface{})
	storagevirtualdriveextensionrelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	storagevirtualdriveextensionrelationship["class_id"] = item.GetClassId()
	storagevirtualdriveextensionrelationship["moid"] = item.GetMoid()
	storagevirtualdriveextensionrelationship["object_type"] = item.GetObjectType()
	storagevirtualdriveextensionrelationship["selector"] = item.GetSelector()

	storagevirtualdriveextensionrelationships = append(storagevirtualdriveextensionrelationships, storagevirtualdriveextensionrelationship)
	return storagevirtualdriveextensionrelationships
}
func flattenMapTamBaseAdvisoryRelationship(p models.TamBaseAdvisoryRelationship, d *schema.ResourceData) []map[string]interface{} {
	var tambaseadvisoryrelationships []map[string]interface{}
	var ret models.TamBaseAdvisoryRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	tambaseadvisoryrelationship := make(map[string]interface{})
	tambaseadvisoryrelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	tambaseadvisoryrelationship["class_id"] = item.GetClassId()
	tambaseadvisoryrelationship["moid"] = item.GetMoid()
	tambaseadvisoryrelationship["object_type"] = item.GetObjectType()
	tambaseadvisoryrelationship["selector"] = item.GetSelector()

	tambaseadvisoryrelationships = append(tambaseadvisoryrelationships, tambaseadvisoryrelationship)
	return tambaseadvisoryrelationships
}
func flattenMapTamBaseAdvisoryDetails(p models.TamBaseAdvisoryDetails, d *schema.ResourceData) []map[string]interface{} {
	var tambaseadvisorydetailss []map[string]interface{}
	var ret models.TamBaseAdvisoryDetails
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	item := p
	tambaseadvisorydetails := make(map[string]interface{})
	tambaseadvisorydetails["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	tambaseadvisorydetails["class_id"] = item.GetClassId()
	tambaseadvisorydetails["description"] = item.GetDescription()
	tambaseadvisorydetails["object_type"] = item.GetObjectType()

	tambaseadvisorydetailss = append(tambaseadvisorydetailss, tambaseadvisorydetails)
	return tambaseadvisorydetailss
}
func flattenMapTamSeverity(p models.TamSeverity, d *schema.ResourceData) []map[string]interface{} {
	var tamseveritys []map[string]interface{}
	var ret models.TamSeverity
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	item := p
	tamseverity := make(map[string]interface{})
	tamseverity["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	tamseverity["class_id"] = item.GetClassId()
	tamseverity["object_type"] = item.GetObjectType()

	tamseveritys = append(tamseveritys, tamseverity)
	return tamseveritys
}
func flattenMapTaskFileDownloadInfo(p models.TaskFileDownloadInfo, d *schema.ResourceData) []map[string]interface{} {
	var taskfiledownloadinfos []map[string]interface{}
	var ret models.TaskFileDownloadInfo
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	item := p
	taskfiledownloadinfo := make(map[string]interface{})
	taskfiledownloadinfo["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	taskfiledownloadinfo["class_id"] = item.GetClassId()
	taskfiledownloadinfo["contents"] = item.GetContents()
	taskfiledownloadinfo["object_type"] = item.GetObjectType()
	taskfiledownloadinfo["path"] = item.GetPath()
	taskfiledownloadinfo["nr_source"] = item.GetSource()
	taskfiledownloadinfo["type"] = item.GetType()

	taskfiledownloadinfos = append(taskfiledownloadinfos, taskfiledownloadinfo)
	return taskfiledownloadinfos
}
func flattenMapTechsupportmanagementTechSupportBundleRelationship(p models.TechsupportmanagementTechSupportBundleRelationship, d *schema.ResourceData) []map[string]interface{} {
	var techsupportmanagementtechsupportbundlerelationships []map[string]interface{}
	var ret models.TechsupportmanagementTechSupportBundleRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	techsupportmanagementtechsupportbundlerelationship := make(map[string]interface{})
	techsupportmanagementtechsupportbundlerelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	techsupportmanagementtechsupportbundlerelationship["class_id"] = item.GetClassId()
	techsupportmanagementtechsupportbundlerelationship["moid"] = item.GetMoid()
	techsupportmanagementtechsupportbundlerelationship["object_type"] = item.GetObjectType()
	techsupportmanagementtechsupportbundlerelationship["selector"] = item.GetSelector()

	techsupportmanagementtechsupportbundlerelationships = append(techsupportmanagementtechsupportbundlerelationships, techsupportmanagementtechsupportbundlerelationship)
	return techsupportmanagementtechsupportbundlerelationships
}
func flattenMapTechsupportmanagementTechSupportStatusRelationship(p models.TechsupportmanagementTechSupportStatusRelationship, d *schema.ResourceData) []map[string]interface{} {
	var techsupportmanagementtechsupportstatusrelationships []map[string]interface{}
	var ret models.TechsupportmanagementTechSupportStatusRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	techsupportmanagementtechsupportstatusrelationship := make(map[string]interface{})
	techsupportmanagementtechsupportstatusrelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	techsupportmanagementtechsupportstatusrelationship["class_id"] = item.GetClassId()
	techsupportmanagementtechsupportstatusrelationship["moid"] = item.GetMoid()
	techsupportmanagementtechsupportstatusrelationship["object_type"] = item.GetObjectType()
	techsupportmanagementtechsupportstatusrelationship["selector"] = item.GetSelector()

	techsupportmanagementtechsupportstatusrelationships = append(techsupportmanagementtechsupportstatusrelationships, techsupportmanagementtechsupportstatusrelationship)
	return techsupportmanagementtechsupportstatusrelationships
}
func flattenMapTopSystemRelationship(p models.TopSystemRelationship, d *schema.ResourceData) []map[string]interface{} {
	var topsystemrelationships []map[string]interface{}
	var ret models.TopSystemRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	topsystemrelationship := make(map[string]interface{})
	topsystemrelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	topsystemrelationship["class_id"] = item.GetClassId()
	topsystemrelationship["moid"] = item.GetMoid()
	topsystemrelationship["object_type"] = item.GetObjectType()
	topsystemrelationship["selector"] = item.GetSelector()

	topsystemrelationships = append(topsystemrelationships, topsystemrelationship)
	return topsystemrelationships
}
func flattenMapUuidpoolBlockRelationship(p models.UuidpoolBlockRelationship, d *schema.ResourceData) []map[string]interface{} {
	var uuidpoolblockrelationships []map[string]interface{}
	var ret models.UuidpoolBlockRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	uuidpoolblockrelationship := make(map[string]interface{})
	uuidpoolblockrelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	uuidpoolblockrelationship["class_id"] = item.GetClassId()
	uuidpoolblockrelationship["moid"] = item.GetMoid()
	uuidpoolblockrelationship["object_type"] = item.GetObjectType()
	uuidpoolblockrelationship["selector"] = item.GetSelector()

	uuidpoolblockrelationships = append(uuidpoolblockrelationships, uuidpoolblockrelationship)
	return uuidpoolblockrelationships
}
func flattenMapUuidpoolPoolRelationship(p models.UuidpoolPoolRelationship, d *schema.ResourceData) []map[string]interface{} {
	var uuidpoolpoolrelationships []map[string]interface{}
	var ret models.UuidpoolPoolRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	uuidpoolpoolrelationship := make(map[string]interface{})
	uuidpoolpoolrelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	uuidpoolpoolrelationship["class_id"] = item.GetClassId()
	uuidpoolpoolrelationship["moid"] = item.GetMoid()
	uuidpoolpoolrelationship["object_type"] = item.GetObjectType()
	uuidpoolpoolrelationship["selector"] = item.GetSelector()

	uuidpoolpoolrelationships = append(uuidpoolpoolrelationships, uuidpoolpoolrelationship)
	return uuidpoolpoolrelationships
}
func flattenMapUuidpoolPoolMemberRelationship(p models.UuidpoolPoolMemberRelationship, d *schema.ResourceData) []map[string]interface{} {
	var uuidpoolpoolmemberrelationships []map[string]interface{}
	var ret models.UuidpoolPoolMemberRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	uuidpoolpoolmemberrelationship := make(map[string]interface{})
	uuidpoolpoolmemberrelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	uuidpoolpoolmemberrelationship["class_id"] = item.GetClassId()
	uuidpoolpoolmemberrelationship["moid"] = item.GetMoid()
	uuidpoolpoolmemberrelationship["object_type"] = item.GetObjectType()
	uuidpoolpoolmemberrelationship["selector"] = item.GetSelector()

	uuidpoolpoolmemberrelationships = append(uuidpoolpoolmemberrelationships, uuidpoolpoolmemberrelationship)
	return uuidpoolpoolmemberrelationships
}
func flattenMapUuidpoolReservationRelationship(p models.UuidpoolReservationRelationship, d *schema.ResourceData) []map[string]interface{} {
	var uuidpoolreservationrelationships []map[string]interface{}
	var ret models.UuidpoolReservationRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	uuidpoolreservationrelationship := make(map[string]interface{})
	uuidpoolreservationrelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	uuidpoolreservationrelationship["class_id"] = item.GetClassId()
	uuidpoolreservationrelationship["moid"] = item.GetMoid()
	uuidpoolreservationrelationship["object_type"] = item.GetObjectType()
	uuidpoolreservationrelationship["selector"] = item.GetSelector()

	uuidpoolreservationrelationships = append(uuidpoolreservationrelationships, uuidpoolreservationrelationship)
	return uuidpoolreservationrelationships
}
func flattenMapUuidpoolReservationReference(p models.UuidpoolReservationReference, d *schema.ResourceData) []map[string]interface{} {
	var uuidpoolreservationreferences []map[string]interface{}
	var ret models.UuidpoolReservationReference
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	item := p
	uuidpoolreservationreference := make(map[string]interface{})
	uuidpoolreservationreference["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	uuidpoolreservationreference["class_id"] = item.GetClassId()
	uuidpoolreservationreference["object_type"] = item.GetObjectType()
	uuidpoolreservationreference["reservation_moid"] = item.GetReservationMoid()

	uuidpoolreservationreferences = append(uuidpoolreservationreferences, uuidpoolreservationreference)
	return uuidpoolreservationreferences
}
func flattenMapUuidpoolUniverseRelationship(p models.UuidpoolUniverseRelationship, d *schema.ResourceData) []map[string]interface{} {
	var uuidpooluniverserelationships []map[string]interface{}
	var ret models.UuidpoolUniverseRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	uuidpooluniverserelationship := make(map[string]interface{})
	uuidpooluniverserelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	uuidpooluniverserelationship["class_id"] = item.GetClassId()
	uuidpooluniverserelationship["moid"] = item.GetMoid()
	uuidpooluniverserelationship["object_type"] = item.GetObjectType()
	uuidpooluniverserelationship["selector"] = item.GetSelector()

	uuidpooluniverserelationships = append(uuidpooluniverserelationships, uuidpooluniverserelationship)
	return uuidpooluniverserelationships
}
func flattenMapUuidpoolUuidBlock(p models.UuidpoolUuidBlock, d *schema.ResourceData) []map[string]interface{} {
	var uuidpooluuidblocks []map[string]interface{}
	var ret models.UuidpoolUuidBlock
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	item := p
	uuidpooluuidblock := make(map[string]interface{})
	uuidpooluuidblock["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	uuidpooluuidblock["class_id"] = item.GetClassId()
	uuidpooluuidblock["from"] = item.GetFrom()
	uuidpooluuidblock["object_type"] = item.GetObjectType()
	uuidpooluuidblock["size"] = item.GetSize()
	uuidpooluuidblock["to"] = item.GetTo()

	uuidpooluuidblocks = append(uuidpooluuidblocks, uuidpooluuidblock)
	return uuidpooluuidblocks
}
func flattenMapUuidpoolUuidLeaseRelationship(p models.UuidpoolUuidLeaseRelationship, d *schema.ResourceData) []map[string]interface{} {
	var uuidpooluuidleaserelationships []map[string]interface{}
	var ret models.UuidpoolUuidLeaseRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	uuidpooluuidleaserelationship := make(map[string]interface{})
	uuidpooluuidleaserelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	uuidpooluuidleaserelationship["class_id"] = item.GetClassId()
	uuidpooluuidleaserelationship["moid"] = item.GetMoid()
	uuidpooluuidleaserelationship["object_type"] = item.GetObjectType()
	uuidpooluuidleaserelationship["selector"] = item.GetSelector()

	uuidpooluuidleaserelationships = append(uuidpooluuidleaserelationships, uuidpooluuidleaserelationship)
	return uuidpooluuidleaserelationships
}
func flattenMapVirtualizationActionInfo(p models.VirtualizationActionInfo, d *schema.ResourceData) []map[string]interface{} {
	var virtualizationactioninfos []map[string]interface{}
	var ret models.VirtualizationActionInfo
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	item := p
	virtualizationactioninfo := make(map[string]interface{})
	virtualizationactioninfo["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	virtualizationactioninfo["class_id"] = item.GetClassId()
	virtualizationactioninfo["failure_reason"] = item.GetFailureReason()
	virtualizationactioninfo["name"] = item.GetName()
	virtualizationactioninfo["object_type"] = item.GetObjectType()
	virtualizationactioninfo["status"] = item.GetStatus()

	virtualizationactioninfos = append(virtualizationactioninfos, virtualizationactioninfo)
	return virtualizationactioninfos
}
func flattenMapVirtualizationBaseClusterRelationship(p models.VirtualizationBaseClusterRelationship, d *schema.ResourceData) []map[string]interface{} {
	var virtualizationbaseclusterrelationships []map[string]interface{}
	var ret models.VirtualizationBaseClusterRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	virtualizationbaseclusterrelationship := make(map[string]interface{})
	virtualizationbaseclusterrelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	virtualizationbaseclusterrelationship["class_id"] = item.GetClassId()
	virtualizationbaseclusterrelationship["moid"] = item.GetMoid()
	virtualizationbaseclusterrelationship["object_type"] = item.GetObjectType()
	virtualizationbaseclusterrelationship["selector"] = item.GetSelector()

	virtualizationbaseclusterrelationships = append(virtualizationbaseclusterrelationships, virtualizationbaseclusterrelationship)
	return virtualizationbaseclusterrelationships
}
func flattenMapVirtualizationBaseHostRelationship(p models.VirtualizationBaseHostRelationship, d *schema.ResourceData) []map[string]interface{} {
	var virtualizationbasehostrelationships []map[string]interface{}
	var ret models.VirtualizationBaseHostRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	virtualizationbasehostrelationship := make(map[string]interface{})
	virtualizationbasehostrelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	virtualizationbasehostrelationship["class_id"] = item.GetClassId()
	virtualizationbasehostrelationship["moid"] = item.GetMoid()
	virtualizationbasehostrelationship["object_type"] = item.GetObjectType()
	virtualizationbasehostrelationship["selector"] = item.GetSelector()

	virtualizationbasehostrelationships = append(virtualizationbasehostrelationships, virtualizationbasehostrelationship)
	return virtualizationbasehostrelationships
}
func flattenMapVirtualizationBaseHostConfiguration(p models.VirtualizationBaseHostConfiguration, d *schema.ResourceData) []map[string]interface{} {
	var virtualizationbasehostconfigurations []map[string]interface{}
	var ret models.VirtualizationBaseHostConfiguration
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	item := p
	virtualizationbasehostconfiguration := make(map[string]interface{})
	virtualizationbasehostconfiguration["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	virtualizationbasehostconfiguration["class_id"] = item.GetClassId()
	virtualizationbasehostconfiguration["object_type"] = item.GetObjectType()

	virtualizationbasehostconfigurations = append(virtualizationbasehostconfigurations, virtualizationbasehostconfiguration)
	return virtualizationbasehostconfigurations
}
func flattenMapVirtualizationBaseHostPciDeviceRelationship(p models.VirtualizationBaseHostPciDeviceRelationship, d *schema.ResourceData) []map[string]interface{} {
	var virtualizationbasehostpcidevicerelationships []map[string]interface{}
	var ret models.VirtualizationBaseHostPciDeviceRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	virtualizationbasehostpcidevicerelationship := make(map[string]interface{})
	virtualizationbasehostpcidevicerelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	virtualizationbasehostpcidevicerelationship["class_id"] = item.GetClassId()
	virtualizationbasehostpcidevicerelationship["moid"] = item.GetMoid()
	virtualizationbasehostpcidevicerelationship["object_type"] = item.GetObjectType()
	virtualizationbasehostpcidevicerelationship["selector"] = item.GetSelector()

	virtualizationbasehostpcidevicerelationships = append(virtualizationbasehostpcidevicerelationships, virtualizationbasehostpcidevicerelationship)
	return virtualizationbasehostpcidevicerelationships
}
func flattenMapVirtualizationBaseNetworkRelationship(p models.VirtualizationBaseNetworkRelationship, d *schema.ResourceData) []map[string]interface{} {
	var virtualizationbasenetworkrelationships []map[string]interface{}
	var ret models.VirtualizationBaseNetworkRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	virtualizationbasenetworkrelationship := make(map[string]interface{})
	virtualizationbasenetworkrelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	virtualizationbasenetworkrelationship["class_id"] = item.GetClassId()
	virtualizationbasenetworkrelationship["moid"] = item.GetMoid()
	virtualizationbasenetworkrelationship["object_type"] = item.GetObjectType()
	virtualizationbasenetworkrelationship["selector"] = item.GetSelector()

	virtualizationbasenetworkrelationships = append(virtualizationbasenetworkrelationships, virtualizationbasenetworkrelationship)
	return virtualizationbasenetworkrelationships
}
func flattenMapVirtualizationBaseVirtualMachineRelationship(p models.VirtualizationBaseVirtualMachineRelationship, d *schema.ResourceData) []map[string]interface{} {
	var virtualizationbasevirtualmachinerelationships []map[string]interface{}
	var ret models.VirtualizationBaseVirtualMachineRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	virtualizationbasevirtualmachinerelationship := make(map[string]interface{})
	virtualizationbasevirtualmachinerelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	virtualizationbasevirtualmachinerelationship["class_id"] = item.GetClassId()
	virtualizationbasevirtualmachinerelationship["moid"] = item.GetMoid()
	virtualizationbasevirtualmachinerelationship["object_type"] = item.GetObjectType()
	virtualizationbasevirtualmachinerelationship["selector"] = item.GetSelector()

	virtualizationbasevirtualmachinerelationships = append(virtualizationbasevirtualmachinerelationships, virtualizationbasevirtualmachinerelationship)
	return virtualizationbasevirtualmachinerelationships
}
func flattenMapVirtualizationBaseVmConfiguration(p models.VirtualizationBaseVmConfiguration, d *schema.ResourceData) []map[string]interface{} {
	var virtualizationbasevmconfigurations []map[string]interface{}
	var ret models.VirtualizationBaseVmConfiguration
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	item := p
	virtualizationbasevmconfiguration := make(map[string]interface{})
	virtualizationbasevmconfiguration["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	virtualizationbasevmconfiguration["class_id"] = item.GetClassId()
	virtualizationbasevmconfiguration["object_type"] = item.GetObjectType()

	virtualizationbasevmconfigurations = append(virtualizationbasevmconfigurations, virtualizationbasevmconfiguration)
	return virtualizationbasevmconfigurations
}
func flattenMapVirtualizationCloudInitConfig(p models.VirtualizationCloudInitConfig, d *schema.ResourceData) []map[string]interface{} {
	var virtualizationcloudinitconfigs []map[string]interface{}
	var ret models.VirtualizationCloudInitConfig
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	item := p
	virtualizationcloudinitconfig := make(map[string]interface{})
	virtualizationcloudinitconfig["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	virtualizationcloudinitconfig["class_id"] = item.GetClassId()
	virtualizationcloudinitconfig["config_type"] = item.GetConfigType()
	virtualizationcloudinitconfig["network_data"] = item.GetNetworkData()
	virtualizationcloudinitconfig["network_data_base64_encoded"] = item.GetNetworkDataBase64Encoded()
	virtualizationcloudinitconfig["object_type"] = item.GetObjectType()
	virtualizationcloudinitconfig["user_data"] = item.GetUserData()
	virtualizationcloudinitconfig["user_data_base64_encoded"] = item.GetUserDataBase64Encoded()

	virtualizationcloudinitconfigs = append(virtualizationcloudinitconfigs, virtualizationcloudinitconfig)
	return virtualizationcloudinitconfigs
}
func flattenMapVirtualizationComputeCapacity(p models.VirtualizationComputeCapacity, d *schema.ResourceData) []map[string]interface{} {
	var virtualizationcomputecapacitys []map[string]interface{}
	var ret models.VirtualizationComputeCapacity
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	item := p
	virtualizationcomputecapacity := make(map[string]interface{})
	virtualizationcomputecapacity["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	virtualizationcomputecapacity["capacity"] = item.GetCapacity()
	virtualizationcomputecapacity["class_id"] = item.GetClassId()
	virtualizationcomputecapacity["free"] = item.GetFree()
	virtualizationcomputecapacity["object_type"] = item.GetObjectType()
	virtualizationcomputecapacity["used"] = item.GetUsed()

	virtualizationcomputecapacitys = append(virtualizationcomputecapacitys, virtualizationcomputecapacity)
	return virtualizationcomputecapacitys
}
func flattenMapVirtualizationCpuInfo(p models.VirtualizationCpuInfo, d *schema.ResourceData) []map[string]interface{} {
	var virtualizationcpuinfos []map[string]interface{}
	var ret models.VirtualizationCpuInfo
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	item := p
	virtualizationcpuinfo := make(map[string]interface{})
	virtualizationcpuinfo["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	virtualizationcpuinfo["class_id"] = item.GetClassId()
	virtualizationcpuinfo["cores"] = item.GetCores()
	virtualizationcpuinfo["description"] = item.GetDescription()
	virtualizationcpuinfo["object_type"] = item.GetObjectType()
	virtualizationcpuinfo["sockets"] = item.GetSockets()
	virtualizationcpuinfo["speed"] = item.GetSpeed()
	virtualizationcpuinfo["vendor"] = item.GetVendor()

	virtualizationcpuinfos = append(virtualizationcpuinfos, virtualizationcpuinfo)
	return virtualizationcpuinfos
}
func flattenMapVirtualizationGuestInfo(p models.VirtualizationGuestInfo, d *schema.ResourceData) []map[string]interface{} {
	var virtualizationguestinfos []map[string]interface{}
	var ret models.VirtualizationGuestInfo
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	item := p
	virtualizationguestinfo := make(map[string]interface{})
	virtualizationguestinfo["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	virtualizationguestinfo["class_id"] = item.GetClassId()
	virtualizationguestinfo["hostname"] = item.GetHostname()
	virtualizationguestinfo["ip_address"] = item.GetIpAddress()
	virtualizationguestinfo["name"] = item.GetName()
	virtualizationguestinfo["object_type"] = item.GetObjectType()
	virtualizationguestinfo["operating_system"] = item.GetOperatingSystem()

	virtualizationguestinfos = append(virtualizationguestinfos, virtualizationguestinfo)
	return virtualizationguestinfos
}
func flattenMapVirtualizationMemoryCapacity(p models.VirtualizationMemoryCapacity, d *schema.ResourceData) []map[string]interface{} {
	var virtualizationmemorycapacitys []map[string]interface{}
	var ret models.VirtualizationMemoryCapacity
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	item := p
	virtualizationmemorycapacity := make(map[string]interface{})
	virtualizationmemorycapacity["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	virtualizationmemorycapacity["capacity"] = item.GetCapacity()
	virtualizationmemorycapacity["class_id"] = item.GetClassId()
	virtualizationmemorycapacity["free"] = item.GetFree()
	virtualizationmemorycapacity["object_type"] = item.GetObjectType()
	virtualizationmemorycapacity["used"] = item.GetUsed()

	virtualizationmemorycapacitys = append(virtualizationmemorycapacitys, virtualizationmemorycapacity)
	return virtualizationmemorycapacitys
}
func flattenMapVirtualizationProductInfo(p models.VirtualizationProductInfo, d *schema.ResourceData) []map[string]interface{} {
	var virtualizationproductinfos []map[string]interface{}
	var ret models.VirtualizationProductInfo
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	item := p
	virtualizationproductinfo := make(map[string]interface{})
	virtualizationproductinfo["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	virtualizationproductinfo["build"] = item.GetBuild()
	virtualizationproductinfo["class_id"] = item.GetClassId()
	virtualizationproductinfo["object_type"] = item.GetObjectType()
	virtualizationproductinfo["product_name"] = item.GetProductName()
	virtualizationproductinfo["product_type"] = item.GetProductType()
	virtualizationproductinfo["product_vendor"] = item.GetProductVendor()
	virtualizationproductinfo["nr_version"] = item.GetVersion()

	virtualizationproductinfos = append(virtualizationproductinfos, virtualizationproductinfo)
	return virtualizationproductinfos
}
func flattenMapVirtualizationStorageCapacity(p models.VirtualizationStorageCapacity, d *schema.ResourceData) []map[string]interface{} {
	var virtualizationstoragecapacitys []map[string]interface{}
	var ret models.VirtualizationStorageCapacity
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	item := p
	virtualizationstoragecapacity := make(map[string]interface{})
	virtualizationstoragecapacity["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	virtualizationstoragecapacity["capacity"] = item.GetCapacity()
	virtualizationstoragecapacity["class_id"] = item.GetClassId()
	virtualizationstoragecapacity["free"] = item.GetFree()
	virtualizationstoragecapacity["object_type"] = item.GetObjectType()
	virtualizationstoragecapacity["used"] = item.GetUsed()

	virtualizationstoragecapacitys = append(virtualizationstoragecapacitys, virtualizationstoragecapacity)
	return virtualizationstoragecapacitys
}
func flattenMapVirtualizationVirtualMachineRelationship(p models.VirtualizationVirtualMachineRelationship, d *schema.ResourceData) []map[string]interface{} {
	var virtualizationvirtualmachinerelationships []map[string]interface{}
	var ret models.VirtualizationVirtualMachineRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	virtualizationvirtualmachinerelationship := make(map[string]interface{})
	virtualizationvirtualmachinerelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	virtualizationvirtualmachinerelationship["class_id"] = item.GetClassId()
	virtualizationvirtualmachinerelationship["moid"] = item.GetMoid()
	virtualizationvirtualmachinerelationship["object_type"] = item.GetObjectType()
	virtualizationvirtualmachinerelationship["selector"] = item.GetSelector()

	virtualizationvirtualmachinerelationships = append(virtualizationvirtualmachinerelationships, virtualizationvirtualmachinerelationship)
	return virtualizationvirtualmachinerelationships
}
func flattenMapVirtualizationVmwareClusterRelationship(p models.VirtualizationVmwareClusterRelationship, d *schema.ResourceData) []map[string]interface{} {
	var virtualizationvmwareclusterrelationships []map[string]interface{}
	var ret models.VirtualizationVmwareClusterRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	virtualizationvmwareclusterrelationship := make(map[string]interface{})
	virtualizationvmwareclusterrelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	virtualizationvmwareclusterrelationship["class_id"] = item.GetClassId()
	virtualizationvmwareclusterrelationship["moid"] = item.GetMoid()
	virtualizationvmwareclusterrelationship["object_type"] = item.GetObjectType()
	virtualizationvmwareclusterrelationship["selector"] = item.GetSelector()

	virtualizationvmwareclusterrelationships = append(virtualizationvmwareclusterrelationships, virtualizationvmwareclusterrelationship)
	return virtualizationvmwareclusterrelationships
}
func flattenMapVirtualizationVmwareDatacenterRelationship(p models.VirtualizationVmwareDatacenterRelationship, d *schema.ResourceData) []map[string]interface{} {
	var virtualizationvmwaredatacenterrelationships []map[string]interface{}
	var ret models.VirtualizationVmwareDatacenterRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	virtualizationvmwaredatacenterrelationship := make(map[string]interface{})
	virtualizationvmwaredatacenterrelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	virtualizationvmwaredatacenterrelationship["class_id"] = item.GetClassId()
	virtualizationvmwaredatacenterrelationship["moid"] = item.GetMoid()
	virtualizationvmwaredatacenterrelationship["object_type"] = item.GetObjectType()
	virtualizationvmwaredatacenterrelationship["selector"] = item.GetSelector()

	virtualizationvmwaredatacenterrelationships = append(virtualizationvmwaredatacenterrelationships, virtualizationvmwaredatacenterrelationship)
	return virtualizationvmwaredatacenterrelationships
}
func flattenMapVirtualizationVmwareDatastoreRelationship(p models.VirtualizationVmwareDatastoreRelationship, d *schema.ResourceData) []map[string]interface{} {
	var virtualizationvmwaredatastorerelationships []map[string]interface{}
	var ret models.VirtualizationVmwareDatastoreRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	virtualizationvmwaredatastorerelationship := make(map[string]interface{})
	virtualizationvmwaredatastorerelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	virtualizationvmwaredatastorerelationship["class_id"] = item.GetClassId()
	virtualizationvmwaredatastorerelationship["moid"] = item.GetMoid()
	virtualizationvmwaredatastorerelationship["object_type"] = item.GetObjectType()
	virtualizationvmwaredatastorerelationship["selector"] = item.GetSelector()

	virtualizationvmwaredatastorerelationships = append(virtualizationvmwaredatastorerelationships, virtualizationvmwaredatastorerelationship)
	return virtualizationvmwaredatastorerelationships
}
func flattenMapVirtualizationVmwareDatastoreClusterRelationship(p models.VirtualizationVmwareDatastoreClusterRelationship, d *schema.ResourceData) []map[string]interface{} {
	var virtualizationvmwaredatastoreclusterrelationships []map[string]interface{}
	var ret models.VirtualizationVmwareDatastoreClusterRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	virtualizationvmwaredatastoreclusterrelationship := make(map[string]interface{})
	virtualizationvmwaredatastoreclusterrelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	virtualizationvmwaredatastoreclusterrelationship["class_id"] = item.GetClassId()
	virtualizationvmwaredatastoreclusterrelationship["moid"] = item.GetMoid()
	virtualizationvmwaredatastoreclusterrelationship["object_type"] = item.GetObjectType()
	virtualizationvmwaredatastoreclusterrelationship["selector"] = item.GetSelector()

	virtualizationvmwaredatastoreclusterrelationships = append(virtualizationvmwaredatastoreclusterrelationships, virtualizationvmwaredatastoreclusterrelationship)
	return virtualizationvmwaredatastoreclusterrelationships
}
func flattenMapVirtualizationVmwareDiscoveryProtocol(p models.VirtualizationVmwareDiscoveryProtocol, d *schema.ResourceData) []map[string]interface{} {
	var virtualizationvmwarediscoveryprotocols []map[string]interface{}
	var ret models.VirtualizationVmwareDiscoveryProtocol
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	item := p
	virtualizationvmwarediscoveryprotocol := make(map[string]interface{})
	virtualizationvmwarediscoveryprotocol["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	virtualizationvmwarediscoveryprotocol["class_id"] = item.GetClassId()
	virtualizationvmwarediscoveryprotocol["object_type"] = item.GetObjectType()
	virtualizationvmwarediscoveryprotocol["operation"] = item.GetOperation()
	virtualizationvmwarediscoveryprotocol["type"] = item.GetType()

	virtualizationvmwarediscoveryprotocols = append(virtualizationvmwarediscoveryprotocols, virtualizationvmwarediscoveryprotocol)
	return virtualizationvmwarediscoveryprotocols
}
func flattenMapVirtualizationVmwareDistributedNetworkRelationship(p models.VirtualizationVmwareDistributedNetworkRelationship, d *schema.ResourceData) []map[string]interface{} {
	var virtualizationvmwaredistributednetworkrelationships []map[string]interface{}
	var ret models.VirtualizationVmwareDistributedNetworkRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	virtualizationvmwaredistributednetworkrelationship := make(map[string]interface{})
	virtualizationvmwaredistributednetworkrelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	virtualizationvmwaredistributednetworkrelationship["class_id"] = item.GetClassId()
	virtualizationvmwaredistributednetworkrelationship["moid"] = item.GetMoid()
	virtualizationvmwaredistributednetworkrelationship["object_type"] = item.GetObjectType()
	virtualizationvmwaredistributednetworkrelationship["selector"] = item.GetSelector()

	virtualizationvmwaredistributednetworkrelationships = append(virtualizationvmwaredistributednetworkrelationships, virtualizationvmwaredistributednetworkrelationship)
	return virtualizationvmwaredistributednetworkrelationships
}
func flattenMapVirtualizationVmwareDistributedSwitchRelationship(p models.VirtualizationVmwareDistributedSwitchRelationship, d *schema.ResourceData) []map[string]interface{} {
	var virtualizationvmwaredistributedswitchrelationships []map[string]interface{}
	var ret models.VirtualizationVmwareDistributedSwitchRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	virtualizationvmwaredistributedswitchrelationship := make(map[string]interface{})
	virtualizationvmwaredistributedswitchrelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	virtualizationvmwaredistributedswitchrelationship["class_id"] = item.GetClassId()
	virtualizationvmwaredistributedswitchrelationship["moid"] = item.GetMoid()
	virtualizationvmwaredistributedswitchrelationship["object_type"] = item.GetObjectType()
	virtualizationvmwaredistributedswitchrelationship["selector"] = item.GetSelector()

	virtualizationvmwaredistributedswitchrelationships = append(virtualizationvmwaredistributedswitchrelationships, virtualizationvmwaredistributedswitchrelationship)
	return virtualizationvmwaredistributedswitchrelationships
}
func flattenMapVirtualizationVmwareFolderRelationship(p models.VirtualizationVmwareFolderRelationship, d *schema.ResourceData) []map[string]interface{} {
	var virtualizationvmwarefolderrelationships []map[string]interface{}
	var ret models.VirtualizationVmwareFolderRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	virtualizationvmwarefolderrelationship := make(map[string]interface{})
	virtualizationvmwarefolderrelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	virtualizationvmwarefolderrelationship["class_id"] = item.GetClassId()
	virtualizationvmwarefolderrelationship["moid"] = item.GetMoid()
	virtualizationvmwarefolderrelationship["object_type"] = item.GetObjectType()
	virtualizationvmwarefolderrelationship["selector"] = item.GetSelector()

	virtualizationvmwarefolderrelationships = append(virtualizationvmwarefolderrelationships, virtualizationvmwarefolderrelationship)
	return virtualizationvmwarefolderrelationships
}
func flattenMapVirtualizationVmwareHostRelationship(p models.VirtualizationVmwareHostRelationship, d *schema.ResourceData) []map[string]interface{} {
	var virtualizationvmwarehostrelationships []map[string]interface{}
	var ret models.VirtualizationVmwareHostRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	virtualizationvmwarehostrelationship := make(map[string]interface{})
	virtualizationvmwarehostrelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	virtualizationvmwarehostrelationship["class_id"] = item.GetClassId()
	virtualizationvmwarehostrelationship["moid"] = item.GetMoid()
	virtualizationvmwarehostrelationship["object_type"] = item.GetObjectType()
	virtualizationvmwarehostrelationship["selector"] = item.GetSelector()

	virtualizationvmwarehostrelationships = append(virtualizationvmwarehostrelationships, virtualizationvmwarehostrelationship)
	return virtualizationvmwarehostrelationships
}
func flattenMapVirtualizationVmwareNetworkRelationship(p models.VirtualizationVmwareNetworkRelationship, d *schema.ResourceData) []map[string]interface{} {
	var virtualizationvmwarenetworkrelationships []map[string]interface{}
	var ret models.VirtualizationVmwareNetworkRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	virtualizationvmwarenetworkrelationship := make(map[string]interface{})
	virtualizationvmwarenetworkrelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	virtualizationvmwarenetworkrelationship["class_id"] = item.GetClassId()
	virtualizationvmwarenetworkrelationship["moid"] = item.GetMoid()
	virtualizationvmwarenetworkrelationship["object_type"] = item.GetObjectType()
	virtualizationvmwarenetworkrelationship["selector"] = item.GetSelector()

	virtualizationvmwarenetworkrelationships = append(virtualizationvmwarenetworkrelationships, virtualizationvmwarenetworkrelationship)
	return virtualizationvmwarenetworkrelationships
}
func flattenMapVirtualizationVmwarePhysicalNetworkInterfaceRelationship(p models.VirtualizationVmwarePhysicalNetworkInterfaceRelationship, d *schema.ResourceData) []map[string]interface{} {
	var virtualizationvmwarephysicalnetworkinterfacerelationships []map[string]interface{}
	var ret models.VirtualizationVmwarePhysicalNetworkInterfaceRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	virtualizationvmwarephysicalnetworkinterfacerelationship := make(map[string]interface{})
	virtualizationvmwarephysicalnetworkinterfacerelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	virtualizationvmwarephysicalnetworkinterfacerelationship["class_id"] = item.GetClassId()
	virtualizationvmwarephysicalnetworkinterfacerelationship["moid"] = item.GetMoid()
	virtualizationvmwarephysicalnetworkinterfacerelationship["object_type"] = item.GetObjectType()
	virtualizationvmwarephysicalnetworkinterfacerelationship["selector"] = item.GetSelector()

	virtualizationvmwarephysicalnetworkinterfacerelationships = append(virtualizationvmwarephysicalnetworkinterfacerelationships, virtualizationvmwarephysicalnetworkinterfacerelationship)
	return virtualizationvmwarephysicalnetworkinterfacerelationships
}
func flattenMapVirtualizationVmwareRemoteDisplayInfo(p models.VirtualizationVmwareRemoteDisplayInfo, d *schema.ResourceData) []map[string]interface{} {
	var virtualizationvmwareremotedisplayinfos []map[string]interface{}
	var ret models.VirtualizationVmwareRemoteDisplayInfo
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	item := p
	virtualizationvmwareremotedisplayinfo := make(map[string]interface{})
	virtualizationvmwareremotedisplayinfo["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	virtualizationvmwareremotedisplayinfo["class_id"] = item.GetClassId()
	virtualizationvmwareremotedisplayinfo["object_type"] = item.GetObjectType()
	virtualizationvmwareremotedisplayinfo["remote_display_password"] = item.GetRemoteDisplayPassword()
	virtualizationvmwareremotedisplayinfo["remote_display_vnc_key"] = item.GetRemoteDisplayVncKey()
	virtualizationvmwareremotedisplayinfo["remote_display_vnc_port"] = item.GetRemoteDisplayVncPort()

	virtualizationvmwareremotedisplayinfos = append(virtualizationvmwareremotedisplayinfos, virtualizationvmwareremotedisplayinfo)
	return virtualizationvmwareremotedisplayinfos
}
func flattenMapVirtualizationVmwareResourceConsumption(p models.VirtualizationVmwareResourceConsumption, d *schema.ResourceData) []map[string]interface{} {
	var virtualizationvmwareresourceconsumptions []map[string]interface{}
	var ret models.VirtualizationVmwareResourceConsumption
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	item := p
	virtualizationvmwareresourceconsumption := make(map[string]interface{})
	virtualizationvmwareresourceconsumption["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	virtualizationvmwareresourceconsumption["class_id"] = item.GetClassId()
	virtualizationvmwareresourceconsumption["cpu_consumed"] = item.GetCpuConsumed()
	virtualizationvmwareresourceconsumption["memory_consumed"] = item.GetMemoryConsumed()
	virtualizationvmwareresourceconsumption["object_type"] = item.GetObjectType()

	virtualizationvmwareresourceconsumptions = append(virtualizationvmwareresourceconsumptions, virtualizationvmwareresourceconsumption)
	return virtualizationvmwareresourceconsumptions
}
func flattenMapVirtualizationVmwareSharesInfo(p models.VirtualizationVmwareSharesInfo, d *schema.ResourceData) []map[string]interface{} {
	var virtualizationvmwaresharesinfos []map[string]interface{}
	var ret models.VirtualizationVmwareSharesInfo
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	item := p
	virtualizationvmwaresharesinfo := make(map[string]interface{})
	virtualizationvmwaresharesinfo["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	virtualizationvmwaresharesinfo["class_id"] = item.GetClassId()
	virtualizationvmwaresharesinfo["level"] = item.GetLevel()
	virtualizationvmwaresharesinfo["object_type"] = item.GetObjectType()
	virtualizationvmwaresharesinfo["shares"] = item.GetShares()

	virtualizationvmwaresharesinfos = append(virtualizationvmwaresharesinfos, virtualizationvmwaresharesinfo)
	return virtualizationvmwaresharesinfos
}
func flattenMapVirtualizationVmwareTeamingAndFailover(p models.VirtualizationVmwareTeamingAndFailover, d *schema.ResourceData) []map[string]interface{} {
	var virtualizationvmwareteamingandfailovers []map[string]interface{}
	var ret models.VirtualizationVmwareTeamingAndFailover
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	item := p
	virtualizationvmwareteamingandfailover := make(map[string]interface{})
	virtualizationvmwareteamingandfailover["active_adapters"] = item.GetActiveAdapters()
	virtualizationvmwareteamingandfailover["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	virtualizationvmwareteamingandfailover["class_id"] = item.GetClassId()
	virtualizationvmwareteamingandfailover["failback"] = item.GetFailback()
	virtualizationvmwareteamingandfailover["load_balancing"] = item.GetLoadBalancing()
	virtualizationvmwareteamingandfailover["name"] = item.GetName()
	virtualizationvmwareteamingandfailover["network_failure_detection"] = item.GetNetworkFailureDetection()
	virtualizationvmwareteamingandfailover["notify_switches"] = item.GetNotifySwitches()
	virtualizationvmwareteamingandfailover["object_type"] = item.GetObjectType()
	virtualizationvmwareteamingandfailover["standby_adapters"] = item.GetStandbyAdapters()

	virtualizationvmwareteamingandfailovers = append(virtualizationvmwareteamingandfailovers, virtualizationvmwareteamingandfailover)
	return virtualizationvmwareteamingandfailovers
}
func flattenMapVirtualizationVmwareVcenterRelationship(p models.VirtualizationVmwareVcenterRelationship, d *schema.ResourceData) []map[string]interface{} {
	var virtualizationvmwarevcenterrelationships []map[string]interface{}
	var ret models.VirtualizationVmwareVcenterRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	virtualizationvmwarevcenterrelationship := make(map[string]interface{})
	virtualizationvmwarevcenterrelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	virtualizationvmwarevcenterrelationship["class_id"] = item.GetClassId()
	virtualizationvmwarevcenterrelationship["moid"] = item.GetMoid()
	virtualizationvmwarevcenterrelationship["object_type"] = item.GetObjectType()
	virtualizationvmwarevcenterrelationship["selector"] = item.GetSelector()

	virtualizationvmwarevcenterrelationships = append(virtualizationvmwarevcenterrelationships, virtualizationvmwarevcenterrelationship)
	return virtualizationvmwarevcenterrelationships
}
func flattenMapVirtualizationVmwareVirtualMachineRelationship(p models.VirtualizationVmwareVirtualMachineRelationship, d *schema.ResourceData) []map[string]interface{} {
	var virtualizationvmwarevirtualmachinerelationships []map[string]interface{}
	var ret models.VirtualizationVmwareVirtualMachineRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	virtualizationvmwarevirtualmachinerelationship := make(map[string]interface{})
	virtualizationvmwarevirtualmachinerelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	virtualizationvmwarevirtualmachinerelationship["class_id"] = item.GetClassId()
	virtualizationvmwarevirtualmachinerelationship["moid"] = item.GetMoid()
	virtualizationvmwarevirtualmachinerelationship["object_type"] = item.GetObjectType()
	virtualizationvmwarevirtualmachinerelationship["selector"] = item.GetSelector()

	virtualizationvmwarevirtualmachinerelationships = append(virtualizationvmwarevirtualmachinerelationships, virtualizationvmwarevirtualmachinerelationship)
	return virtualizationvmwarevirtualmachinerelationships
}
func flattenMapVirtualizationVmwareVirtualSwitchRelationship(p models.VirtualizationVmwareVirtualSwitchRelationship, d *schema.ResourceData) []map[string]interface{} {
	var virtualizationvmwarevirtualswitchrelationships []map[string]interface{}
	var ret models.VirtualizationVmwareVirtualSwitchRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	virtualizationvmwarevirtualswitchrelationship := make(map[string]interface{})
	virtualizationvmwarevirtualswitchrelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	virtualizationvmwarevirtualswitchrelationship["class_id"] = item.GetClassId()
	virtualizationvmwarevirtualswitchrelationship["moid"] = item.GetMoid()
	virtualizationvmwarevirtualswitchrelationship["object_type"] = item.GetObjectType()
	virtualizationvmwarevirtualswitchrelationship["selector"] = item.GetSelector()

	virtualizationvmwarevirtualswitchrelationships = append(virtualizationvmwarevirtualswitchrelationships, virtualizationvmwarevirtualswitchrelationship)
	return virtualizationvmwarevirtualswitchrelationships
}
func flattenMapVirtualizationVmwareVmCpuShareInfo(p models.VirtualizationVmwareVmCpuShareInfo, d *schema.ResourceData) []map[string]interface{} {
	var virtualizationvmwarevmcpushareinfos []map[string]interface{}
	var ret models.VirtualizationVmwareVmCpuShareInfo
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	item := p
	virtualizationvmwarevmcpushareinfo := make(map[string]interface{})
	virtualizationvmwarevmcpushareinfo["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	virtualizationvmwarevmcpushareinfo["class_id"] = item.GetClassId()
	virtualizationvmwarevmcpushareinfo["cpu_limit"] = item.GetCpuLimit()
	virtualizationvmwarevmcpushareinfo["cpu_overhead_limit"] = item.GetCpuOverheadLimit()
	virtualizationvmwarevmcpushareinfo["cpu_reservation"] = item.GetCpuReservation()
	virtualizationvmwarevmcpushareinfo["cpu_shares"] = item.GetCpuShares()
	virtualizationvmwarevmcpushareinfo["object_type"] = item.GetObjectType()

	virtualizationvmwarevmcpushareinfos = append(virtualizationvmwarevmcpushareinfos, virtualizationvmwarevmcpushareinfo)
	return virtualizationvmwarevmcpushareinfos
}
func flattenMapVirtualizationVmwareVmCpuSocketInfo(p models.VirtualizationVmwareVmCpuSocketInfo, d *schema.ResourceData) []map[string]interface{} {
	var virtualizationvmwarevmcpusocketinfos []map[string]interface{}
	var ret models.VirtualizationVmwareVmCpuSocketInfo
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	item := p
	virtualizationvmwarevmcpusocketinfo := make(map[string]interface{})
	virtualizationvmwarevmcpusocketinfo["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	virtualizationvmwarevmcpusocketinfo["class_id"] = item.GetClassId()
	virtualizationvmwarevmcpusocketinfo["cores_per_socket"] = item.GetCoresPerSocket()
	virtualizationvmwarevmcpusocketinfo["num_cpus"] = item.GetNumCpus()
	virtualizationvmwarevmcpusocketinfo["num_sockets"] = item.GetNumSockets()
	virtualizationvmwarevmcpusocketinfo["object_type"] = item.GetObjectType()

	virtualizationvmwarevmcpusocketinfos = append(virtualizationvmwarevmcpusocketinfos, virtualizationvmwarevmcpusocketinfo)
	return virtualizationvmwarevmcpusocketinfos
}
func flattenMapVirtualizationVmwareVmDiskCommitInfo(p models.VirtualizationVmwareVmDiskCommitInfo, d *schema.ResourceData) []map[string]interface{} {
	var virtualizationvmwarevmdiskcommitinfos []map[string]interface{}
	var ret models.VirtualizationVmwareVmDiskCommitInfo
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	item := p
	virtualizationvmwarevmdiskcommitinfo := make(map[string]interface{})
	virtualizationvmwarevmdiskcommitinfo["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	virtualizationvmwarevmdiskcommitinfo["class_id"] = item.GetClassId()
	virtualizationvmwarevmdiskcommitinfo["committed_disk"] = item.GetCommittedDisk()
	virtualizationvmwarevmdiskcommitinfo["object_type"] = item.GetObjectType()
	virtualizationvmwarevmdiskcommitinfo["un_committed_disk"] = item.GetUnCommittedDisk()
	virtualizationvmwarevmdiskcommitinfo["unshared_disk"] = item.GetUnsharedDisk()

	virtualizationvmwarevmdiskcommitinfos = append(virtualizationvmwarevmdiskcommitinfos, virtualizationvmwarevmdiskcommitinfo)
	return virtualizationvmwarevmdiskcommitinfos
}
func flattenMapVirtualizationVmwareVmMemoryShareInfo(p models.VirtualizationVmwareVmMemoryShareInfo, d *schema.ResourceData) []map[string]interface{} {
	var virtualizationvmwarevmmemoryshareinfos []map[string]interface{}
	var ret models.VirtualizationVmwareVmMemoryShareInfo
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	item := p
	virtualizationvmwarevmmemoryshareinfo := make(map[string]interface{})
	virtualizationvmwarevmmemoryshareinfo["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	virtualizationvmwarevmmemoryshareinfo["class_id"] = item.GetClassId()
	virtualizationvmwarevmmemoryshareinfo["mem_limit"] = item.GetMemLimit()
	virtualizationvmwarevmmemoryshareinfo["mem_overhead_limit"] = item.GetMemOverheadLimit()
	virtualizationvmwarevmmemoryshareinfo["mem_reservation"] = item.GetMemReservation()
	virtualizationvmwarevmmemoryshareinfo["mem_shares"] = item.GetMemShares()
	virtualizationvmwarevmmemoryshareinfo["object_type"] = item.GetObjectType()

	virtualizationvmwarevmmemoryshareinfos = append(virtualizationvmwarevmmemoryshareinfos, virtualizationvmwarevmmemoryshareinfo)
	return virtualizationvmwarevmmemoryshareinfos
}
func flattenMapVnicArfsSettings(p models.VnicArfsSettings, d *schema.ResourceData) []map[string]interface{} {
	var vnicarfssettingss []map[string]interface{}
	var ret models.VnicArfsSettings
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	item := p
	vnicarfssettings := make(map[string]interface{})
	vnicarfssettings["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	vnicarfssettings["class_id"] = item.GetClassId()
	vnicarfssettings["enabled"] = item.GetEnabled()
	vnicarfssettings["object_type"] = item.GetObjectType()

	vnicarfssettingss = append(vnicarfssettingss, vnicarfssettings)
	return vnicarfssettingss
}
func flattenMapVnicCdn(p models.VnicCdn, d *schema.ResourceData) []map[string]interface{} {
	var vniccdns []map[string]interface{}
	var ret models.VnicCdn
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	item := p
	vniccdn := make(map[string]interface{})
	vniccdn["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	vniccdn["class_id"] = item.GetClassId()
	vniccdn["object_type"] = item.GetObjectType()
	vniccdn["nr_source"] = item.GetSource()
	vniccdn["value"] = item.GetValue()

	vniccdns = append(vniccdns, vniccdn)
	return vniccdns
}
func flattenMapVnicCompletionQueueSettings(p models.VnicCompletionQueueSettings, d *schema.ResourceData) []map[string]interface{} {
	var vniccompletionqueuesettingss []map[string]interface{}
	var ret models.VnicCompletionQueueSettings
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	item := p
	vniccompletionqueuesettings := make(map[string]interface{})
	vniccompletionqueuesettings["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	vniccompletionqueuesettings["class_id"] = item.GetClassId()
	vniccompletionqueuesettings["nr_count"] = item.GetCount()
	vniccompletionqueuesettings["object_type"] = item.GetObjectType()
	vniccompletionqueuesettings["ring_size"] = item.GetRingSize()

	vniccompletionqueuesettingss = append(vniccompletionqueuesettingss, vniccompletionqueuesettings)
	return vniccompletionqueuesettingss
}
func flattenMapVnicEthAdapterPolicyRelationship(p models.VnicEthAdapterPolicyRelationship, d *schema.ResourceData) []map[string]interface{} {
	var vnicethadapterpolicyrelationships []map[string]interface{}
	var ret models.VnicEthAdapterPolicyRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	vnicethadapterpolicyrelationship := make(map[string]interface{})
	vnicethadapterpolicyrelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	vnicethadapterpolicyrelationship["class_id"] = item.GetClassId()
	vnicethadapterpolicyrelationship["moid"] = item.GetMoid()
	vnicethadapterpolicyrelationship["object_type"] = item.GetObjectType()
	vnicethadapterpolicyrelationship["selector"] = item.GetSelector()

	vnicethadapterpolicyrelationships = append(vnicethadapterpolicyrelationships, vnicethadapterpolicyrelationship)
	return vnicethadapterpolicyrelationships
}
func flattenMapVnicEthAdapterPolicyInventoryRelationship(p models.VnicEthAdapterPolicyInventoryRelationship, d *schema.ResourceData) []map[string]interface{} {
	var vnicethadapterpolicyinventoryrelationships []map[string]interface{}
	var ret models.VnicEthAdapterPolicyInventoryRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	vnicethadapterpolicyinventoryrelationship := make(map[string]interface{})
	vnicethadapterpolicyinventoryrelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	vnicethadapterpolicyinventoryrelationship["class_id"] = item.GetClassId()
	vnicethadapterpolicyinventoryrelationship["moid"] = item.GetMoid()
	vnicethadapterpolicyinventoryrelationship["object_type"] = item.GetObjectType()
	vnicethadapterpolicyinventoryrelationship["selector"] = item.GetSelector()

	vnicethadapterpolicyinventoryrelationships = append(vnicethadapterpolicyinventoryrelationships, vnicethadapterpolicyinventoryrelationship)
	return vnicethadapterpolicyinventoryrelationships
}
func flattenMapVnicEthIfRelationship(p models.VnicEthIfRelationship, d *schema.ResourceData) []map[string]interface{} {
	var vnicethifrelationships []map[string]interface{}
	var ret models.VnicEthIfRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	vnicethifrelationship := make(map[string]interface{})
	vnicethifrelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	vnicethifrelationship["class_id"] = item.GetClassId()
	vnicethifrelationship["moid"] = item.GetMoid()
	vnicethifrelationship["object_type"] = item.GetObjectType()
	vnicethifrelationship["selector"] = item.GetSelector()

	vnicethifrelationships = append(vnicethifrelationships, vnicethifrelationship)
	return vnicethifrelationships
}
func flattenMapVnicEthIfInventoryRelationship(p models.VnicEthIfInventoryRelationship, d *schema.ResourceData) []map[string]interface{} {
	var vnicethifinventoryrelationships []map[string]interface{}
	var ret models.VnicEthIfInventoryRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	vnicethifinventoryrelationship := make(map[string]interface{})
	vnicethifinventoryrelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	vnicethifinventoryrelationship["class_id"] = item.GetClassId()
	vnicethifinventoryrelationship["moid"] = item.GetMoid()
	vnicethifinventoryrelationship["object_type"] = item.GetObjectType()
	vnicethifinventoryrelationship["selector"] = item.GetSelector()

	vnicethifinventoryrelationships = append(vnicethifinventoryrelationships, vnicethifinventoryrelationship)
	return vnicethifinventoryrelationships
}
func flattenMapVnicEthInterruptSettings(p models.VnicEthInterruptSettings, d *schema.ResourceData) []map[string]interface{} {
	var vnicethinterruptsettingss []map[string]interface{}
	var ret models.VnicEthInterruptSettings
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	item := p
	vnicethinterruptsettings := make(map[string]interface{})
	vnicethinterruptsettings["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	vnicethinterruptsettings["class_id"] = item.GetClassId()
	vnicethinterruptsettings["coalescing_time"] = item.GetCoalescingTime()
	vnicethinterruptsettings["coalescing_type"] = item.GetCoalescingType()
	vnicethinterruptsettings["nr_count"] = item.GetCount()
	vnicethinterruptsettings["mode"] = item.GetMode()
	vnicethinterruptsettings["object_type"] = item.GetObjectType()

	vnicethinterruptsettingss = append(vnicethinterruptsettingss, vnicethinterruptsettings)
	return vnicethinterruptsettingss
}
func flattenMapVnicEthNetworkPolicyRelationship(p models.VnicEthNetworkPolicyRelationship, d *schema.ResourceData) []map[string]interface{} {
	var vnicethnetworkpolicyrelationships []map[string]interface{}
	var ret models.VnicEthNetworkPolicyRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	vnicethnetworkpolicyrelationship := make(map[string]interface{})
	vnicethnetworkpolicyrelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	vnicethnetworkpolicyrelationship["class_id"] = item.GetClassId()
	vnicethnetworkpolicyrelationship["moid"] = item.GetMoid()
	vnicethnetworkpolicyrelationship["object_type"] = item.GetObjectType()
	vnicethnetworkpolicyrelationship["selector"] = item.GetSelector()

	vnicethnetworkpolicyrelationships = append(vnicethnetworkpolicyrelationships, vnicethnetworkpolicyrelationship)
	return vnicethnetworkpolicyrelationships
}
func flattenMapVnicEthNetworkPolicyInventoryRelationship(p models.VnicEthNetworkPolicyInventoryRelationship, d *schema.ResourceData) []map[string]interface{} {
	var vnicethnetworkpolicyinventoryrelationships []map[string]interface{}
	var ret models.VnicEthNetworkPolicyInventoryRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	vnicethnetworkpolicyinventoryrelationship := make(map[string]interface{})
	vnicethnetworkpolicyinventoryrelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	vnicethnetworkpolicyinventoryrelationship["class_id"] = item.GetClassId()
	vnicethnetworkpolicyinventoryrelationship["moid"] = item.GetMoid()
	vnicethnetworkpolicyinventoryrelationship["object_type"] = item.GetObjectType()
	vnicethnetworkpolicyinventoryrelationship["selector"] = item.GetSelector()

	vnicethnetworkpolicyinventoryrelationships = append(vnicethnetworkpolicyinventoryrelationships, vnicethnetworkpolicyinventoryrelationship)
	return vnicethnetworkpolicyinventoryrelationships
}
func flattenMapVnicEthQosPolicyRelationship(p models.VnicEthQosPolicyRelationship, d *schema.ResourceData) []map[string]interface{} {
	var vnicethqospolicyrelationships []map[string]interface{}
	var ret models.VnicEthQosPolicyRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	vnicethqospolicyrelationship := make(map[string]interface{})
	vnicethqospolicyrelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	vnicethqospolicyrelationship["class_id"] = item.GetClassId()
	vnicethqospolicyrelationship["moid"] = item.GetMoid()
	vnicethqospolicyrelationship["object_type"] = item.GetObjectType()
	vnicethqospolicyrelationship["selector"] = item.GetSelector()

	vnicethqospolicyrelationships = append(vnicethqospolicyrelationships, vnicethqospolicyrelationship)
	return vnicethqospolicyrelationships
}
func flattenMapVnicEthQosPolicyInventoryRelationship(p models.VnicEthQosPolicyInventoryRelationship, d *schema.ResourceData) []map[string]interface{} {
	var vnicethqospolicyinventoryrelationships []map[string]interface{}
	var ret models.VnicEthQosPolicyInventoryRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	vnicethqospolicyinventoryrelationship := make(map[string]interface{})
	vnicethqospolicyinventoryrelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	vnicethqospolicyinventoryrelationship["class_id"] = item.GetClassId()
	vnicethqospolicyinventoryrelationship["moid"] = item.GetMoid()
	vnicethqospolicyinventoryrelationship["object_type"] = item.GetObjectType()
	vnicethqospolicyinventoryrelationship["selector"] = item.GetSelector()

	vnicethqospolicyinventoryrelationships = append(vnicethqospolicyinventoryrelationships, vnicethqospolicyinventoryrelationship)
	return vnicethqospolicyinventoryrelationships
}
func flattenMapVnicEthRxQueueSettings(p models.VnicEthRxQueueSettings, d *schema.ResourceData) []map[string]interface{} {
	var vnicethrxqueuesettingss []map[string]interface{}
	var ret models.VnicEthRxQueueSettings
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	item := p
	vnicethrxqueuesettings := make(map[string]interface{})
	vnicethrxqueuesettings["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	vnicethrxqueuesettings["class_id"] = item.GetClassId()
	vnicethrxqueuesettings["nr_count"] = item.GetCount()
	vnicethrxqueuesettings["object_type"] = item.GetObjectType()
	vnicethrxqueuesettings["ring_size"] = item.GetRingSize()

	vnicethrxqueuesettingss = append(vnicethrxqueuesettingss, vnicethrxqueuesettings)
	return vnicethrxqueuesettingss
}
func flattenMapVnicEthTxQueueSettings(p models.VnicEthTxQueueSettings, d *schema.ResourceData) []map[string]interface{} {
	var vnicethtxqueuesettingss []map[string]interface{}
	var ret models.VnicEthTxQueueSettings
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	item := p
	vnicethtxqueuesettings := make(map[string]interface{})
	vnicethtxqueuesettings["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	vnicethtxqueuesettings["class_id"] = item.GetClassId()
	vnicethtxqueuesettings["nr_count"] = item.GetCount()
	vnicethtxqueuesettings["object_type"] = item.GetObjectType()
	vnicethtxqueuesettings["ring_size"] = item.GetRingSize()

	vnicethtxqueuesettingss = append(vnicethtxqueuesettingss, vnicethtxqueuesettings)
	return vnicethtxqueuesettingss
}
func flattenMapVnicFcAdapterPolicyRelationship(p models.VnicFcAdapterPolicyRelationship, d *schema.ResourceData) []map[string]interface{} {
	var vnicfcadapterpolicyrelationships []map[string]interface{}
	var ret models.VnicFcAdapterPolicyRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	vnicfcadapterpolicyrelationship := make(map[string]interface{})
	vnicfcadapterpolicyrelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	vnicfcadapterpolicyrelationship["class_id"] = item.GetClassId()
	vnicfcadapterpolicyrelationship["moid"] = item.GetMoid()
	vnicfcadapterpolicyrelationship["object_type"] = item.GetObjectType()
	vnicfcadapterpolicyrelationship["selector"] = item.GetSelector()

	vnicfcadapterpolicyrelationships = append(vnicfcadapterpolicyrelationships, vnicfcadapterpolicyrelationship)
	return vnicfcadapterpolicyrelationships
}
func flattenMapVnicFcAdapterPolicyInventoryRelationship(p models.VnicFcAdapterPolicyInventoryRelationship, d *schema.ResourceData) []map[string]interface{} {
	var vnicfcadapterpolicyinventoryrelationships []map[string]interface{}
	var ret models.VnicFcAdapterPolicyInventoryRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	vnicfcadapterpolicyinventoryrelationship := make(map[string]interface{})
	vnicfcadapterpolicyinventoryrelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	vnicfcadapterpolicyinventoryrelationship["class_id"] = item.GetClassId()
	vnicfcadapterpolicyinventoryrelationship["moid"] = item.GetMoid()
	vnicfcadapterpolicyinventoryrelationship["object_type"] = item.GetObjectType()
	vnicfcadapterpolicyinventoryrelationship["selector"] = item.GetSelector()

	vnicfcadapterpolicyinventoryrelationships = append(vnicfcadapterpolicyinventoryrelationships, vnicfcadapterpolicyinventoryrelationship)
	return vnicfcadapterpolicyinventoryrelationships
}
func flattenMapVnicFcErrorRecoverySettings(p models.VnicFcErrorRecoverySettings, d *schema.ResourceData) []map[string]interface{} {
	var vnicfcerrorrecoverysettingss []map[string]interface{}
	var ret models.VnicFcErrorRecoverySettings
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	item := p
	vnicfcerrorrecoverysettings := make(map[string]interface{})
	vnicfcerrorrecoverysettings["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	vnicfcerrorrecoverysettings["class_id"] = item.GetClassId()
	vnicfcerrorrecoverysettings["enabled"] = item.GetEnabled()
	vnicfcerrorrecoverysettings["io_retry_count"] = item.GetIoRetryCount()
	vnicfcerrorrecoverysettings["io_retry_timeout"] = item.GetIoRetryTimeout()
	vnicfcerrorrecoverysettings["link_down_timeout"] = item.GetLinkDownTimeout()
	vnicfcerrorrecoverysettings["object_type"] = item.GetObjectType()
	vnicfcerrorrecoverysettings["port_down_timeout"] = item.GetPortDownTimeout()

	vnicfcerrorrecoverysettingss = append(vnicfcerrorrecoverysettingss, vnicfcerrorrecoverysettings)
	return vnicfcerrorrecoverysettingss
}
func flattenMapVnicFcIfRelationship(p models.VnicFcIfRelationship, d *schema.ResourceData) []map[string]interface{} {
	var vnicfcifrelationships []map[string]interface{}
	var ret models.VnicFcIfRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	vnicfcifrelationship := make(map[string]interface{})
	vnicfcifrelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	vnicfcifrelationship["class_id"] = item.GetClassId()
	vnicfcifrelationship["moid"] = item.GetMoid()
	vnicfcifrelationship["object_type"] = item.GetObjectType()
	vnicfcifrelationship["selector"] = item.GetSelector()

	vnicfcifrelationships = append(vnicfcifrelationships, vnicfcifrelationship)
	return vnicfcifrelationships
}
func flattenMapVnicFcIfInventoryRelationship(p models.VnicFcIfInventoryRelationship, d *schema.ResourceData) []map[string]interface{} {
	var vnicfcifinventoryrelationships []map[string]interface{}
	var ret models.VnicFcIfInventoryRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	vnicfcifinventoryrelationship := make(map[string]interface{})
	vnicfcifinventoryrelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	vnicfcifinventoryrelationship["class_id"] = item.GetClassId()
	vnicfcifinventoryrelationship["moid"] = item.GetMoid()
	vnicfcifinventoryrelationship["object_type"] = item.GetObjectType()
	vnicfcifinventoryrelationship["selector"] = item.GetSelector()

	vnicfcifinventoryrelationships = append(vnicfcifinventoryrelationships, vnicfcifinventoryrelationship)
	return vnicfcifinventoryrelationships
}
func flattenMapVnicFcInterruptSettings(p models.VnicFcInterruptSettings, d *schema.ResourceData) []map[string]interface{} {
	var vnicfcinterruptsettingss []map[string]interface{}
	var ret models.VnicFcInterruptSettings
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	item := p
	vnicfcinterruptsettings := make(map[string]interface{})
	vnicfcinterruptsettings["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	vnicfcinterruptsettings["class_id"] = item.GetClassId()
	vnicfcinterruptsettings["mode"] = item.GetMode()
	vnicfcinterruptsettings["object_type"] = item.GetObjectType()

	vnicfcinterruptsettingss = append(vnicfcinterruptsettingss, vnicfcinterruptsettings)
	return vnicfcinterruptsettingss
}
func flattenMapVnicFcNetworkPolicyRelationship(p models.VnicFcNetworkPolicyRelationship, d *schema.ResourceData) []map[string]interface{} {
	var vnicfcnetworkpolicyrelationships []map[string]interface{}
	var ret models.VnicFcNetworkPolicyRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	vnicfcnetworkpolicyrelationship := make(map[string]interface{})
	vnicfcnetworkpolicyrelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	vnicfcnetworkpolicyrelationship["class_id"] = item.GetClassId()
	vnicfcnetworkpolicyrelationship["moid"] = item.GetMoid()
	vnicfcnetworkpolicyrelationship["object_type"] = item.GetObjectType()
	vnicfcnetworkpolicyrelationship["selector"] = item.GetSelector()

	vnicfcnetworkpolicyrelationships = append(vnicfcnetworkpolicyrelationships, vnicfcnetworkpolicyrelationship)
	return vnicfcnetworkpolicyrelationships
}
func flattenMapVnicFcNetworkPolicyInventoryRelationship(p models.VnicFcNetworkPolicyInventoryRelationship, d *schema.ResourceData) []map[string]interface{} {
	var vnicfcnetworkpolicyinventoryrelationships []map[string]interface{}
	var ret models.VnicFcNetworkPolicyInventoryRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	vnicfcnetworkpolicyinventoryrelationship := make(map[string]interface{})
	vnicfcnetworkpolicyinventoryrelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	vnicfcnetworkpolicyinventoryrelationship["class_id"] = item.GetClassId()
	vnicfcnetworkpolicyinventoryrelationship["moid"] = item.GetMoid()
	vnicfcnetworkpolicyinventoryrelationship["object_type"] = item.GetObjectType()
	vnicfcnetworkpolicyinventoryrelationship["selector"] = item.GetSelector()

	vnicfcnetworkpolicyinventoryrelationships = append(vnicfcnetworkpolicyinventoryrelationships, vnicfcnetworkpolicyinventoryrelationship)
	return vnicfcnetworkpolicyinventoryrelationships
}
func flattenMapVnicFcQosPolicyRelationship(p models.VnicFcQosPolicyRelationship, d *schema.ResourceData) []map[string]interface{} {
	var vnicfcqospolicyrelationships []map[string]interface{}
	var ret models.VnicFcQosPolicyRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	vnicfcqospolicyrelationship := make(map[string]interface{})
	vnicfcqospolicyrelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	vnicfcqospolicyrelationship["class_id"] = item.GetClassId()
	vnicfcqospolicyrelationship["moid"] = item.GetMoid()
	vnicfcqospolicyrelationship["object_type"] = item.GetObjectType()
	vnicfcqospolicyrelationship["selector"] = item.GetSelector()

	vnicfcqospolicyrelationships = append(vnicfcqospolicyrelationships, vnicfcqospolicyrelationship)
	return vnicfcqospolicyrelationships
}
func flattenMapVnicFcQosPolicyInventoryRelationship(p models.VnicFcQosPolicyInventoryRelationship, d *schema.ResourceData) []map[string]interface{} {
	var vnicfcqospolicyinventoryrelationships []map[string]interface{}
	var ret models.VnicFcQosPolicyInventoryRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	vnicfcqospolicyinventoryrelationship := make(map[string]interface{})
	vnicfcqospolicyinventoryrelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	vnicfcqospolicyinventoryrelationship["class_id"] = item.GetClassId()
	vnicfcqospolicyinventoryrelationship["moid"] = item.GetMoid()
	vnicfcqospolicyinventoryrelationship["object_type"] = item.GetObjectType()
	vnicfcqospolicyinventoryrelationship["selector"] = item.GetSelector()

	vnicfcqospolicyinventoryrelationships = append(vnicfcqospolicyinventoryrelationships, vnicfcqospolicyinventoryrelationship)
	return vnicfcqospolicyinventoryrelationships
}
func flattenMapVnicFcQueueSettings(p models.VnicFcQueueSettings, d *schema.ResourceData) []map[string]interface{} {
	var vnicfcqueuesettingss []map[string]interface{}
	var ret models.VnicFcQueueSettings
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	item := p
	vnicfcqueuesettings := make(map[string]interface{})
	vnicfcqueuesettings["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	vnicfcqueuesettings["class_id"] = item.GetClassId()
	vnicfcqueuesettings["nr_count"] = item.GetCount()
	vnicfcqueuesettings["object_type"] = item.GetObjectType()
	vnicfcqueuesettings["ring_size"] = item.GetRingSize()

	vnicfcqueuesettingss = append(vnicfcqueuesettingss, vnicfcqueuesettings)
	return vnicfcqueuesettingss
}
func flattenMapVnicFlogiSettings(p models.VnicFlogiSettings, d *schema.ResourceData) []map[string]interface{} {
	var vnicflogisettingss []map[string]interface{}
	var ret models.VnicFlogiSettings
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	item := p
	vnicflogisettings := make(map[string]interface{})
	vnicflogisettings["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	vnicflogisettings["class_id"] = item.GetClassId()
	vnicflogisettings["object_type"] = item.GetObjectType()
	vnicflogisettings["retries"] = item.GetRetries()
	vnicflogisettings["timeout"] = item.GetTimeout()

	vnicflogisettingss = append(vnicflogisettingss, vnicflogisettings)
	return vnicflogisettingss
}
func flattenMapVnicIscsiAdapterPolicyRelationship(p models.VnicIscsiAdapterPolicyRelationship, d *schema.ResourceData) []map[string]interface{} {
	var vniciscsiadapterpolicyrelationships []map[string]interface{}
	var ret models.VnicIscsiAdapterPolicyRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	vniciscsiadapterpolicyrelationship := make(map[string]interface{})
	vniciscsiadapterpolicyrelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	vniciscsiadapterpolicyrelationship["class_id"] = item.GetClassId()
	vniciscsiadapterpolicyrelationship["moid"] = item.GetMoid()
	vniciscsiadapterpolicyrelationship["object_type"] = item.GetObjectType()
	vniciscsiadapterpolicyrelationship["selector"] = item.GetSelector()

	vniciscsiadapterpolicyrelationships = append(vniciscsiadapterpolicyrelationships, vniciscsiadapterpolicyrelationship)
	return vniciscsiadapterpolicyrelationships
}
func flattenMapVnicIscsiAdapterPolicyInventoryRelationship(p models.VnicIscsiAdapterPolicyInventoryRelationship, d *schema.ResourceData) []map[string]interface{} {
	var vniciscsiadapterpolicyinventoryrelationships []map[string]interface{}
	var ret models.VnicIscsiAdapterPolicyInventoryRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	vniciscsiadapterpolicyinventoryrelationship := make(map[string]interface{})
	vniciscsiadapterpolicyinventoryrelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	vniciscsiadapterpolicyinventoryrelationship["class_id"] = item.GetClassId()
	vniciscsiadapterpolicyinventoryrelationship["moid"] = item.GetMoid()
	vniciscsiadapterpolicyinventoryrelationship["object_type"] = item.GetObjectType()
	vniciscsiadapterpolicyinventoryrelationship["selector"] = item.GetSelector()

	vniciscsiadapterpolicyinventoryrelationships = append(vniciscsiadapterpolicyinventoryrelationships, vniciscsiadapterpolicyinventoryrelationship)
	return vniciscsiadapterpolicyinventoryrelationships
}
func flattenMapVnicIscsiAuthProfile(p models.VnicIscsiAuthProfile, d *schema.ResourceData) []map[string]interface{} {
	var vniciscsiauthprofiles []map[string]interface{}
	var ret models.VnicIscsiAuthProfile
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	item := p
	vniciscsiauthprofile := make(map[string]interface{})
	vniciscsiauthprofile["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	vniciscsiauthprofile["class_id"] = item.GetClassId()
	vniciscsiauthprofile["is_password_set"] = item.GetIsPasswordSet()
	vniciscsiauthprofile["object_type"] = item.GetObjectType()
	password_x, exists := d.GetOk("chap")
	if exists && password_x != nil {
		password_y := password_x.([]interface{})[0].(map[string]interface{})
		vniciscsiauthprofile["password"] = password_y["password"]
	}
	vniciscsiauthprofile["user_id"] = item.GetUserId()

	vniciscsiauthprofiles = append(vniciscsiauthprofiles, vniciscsiauthprofile)
	return vniciscsiauthprofiles
}
func flattenMapVnicIscsiBootPolicyRelationship(p models.VnicIscsiBootPolicyRelationship, d *schema.ResourceData) []map[string]interface{} {
	var vniciscsibootpolicyrelationships []map[string]interface{}
	var ret models.VnicIscsiBootPolicyRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	vniciscsibootpolicyrelationship := make(map[string]interface{})
	vniciscsibootpolicyrelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	vniciscsibootpolicyrelationship["class_id"] = item.GetClassId()
	vniciscsibootpolicyrelationship["moid"] = item.GetMoid()
	vniciscsibootpolicyrelationship["object_type"] = item.GetObjectType()
	vniciscsibootpolicyrelationship["selector"] = item.GetSelector()

	vniciscsibootpolicyrelationships = append(vniciscsibootpolicyrelationships, vniciscsibootpolicyrelationship)
	return vniciscsibootpolicyrelationships
}
func flattenMapVnicIscsiBootPolicyInventoryRelationship(p models.VnicIscsiBootPolicyInventoryRelationship, d *schema.ResourceData) []map[string]interface{} {
	var vniciscsibootpolicyinventoryrelationships []map[string]interface{}
	var ret models.VnicIscsiBootPolicyInventoryRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	vniciscsibootpolicyinventoryrelationship := make(map[string]interface{})
	vniciscsibootpolicyinventoryrelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	vniciscsibootpolicyinventoryrelationship["class_id"] = item.GetClassId()
	vniciscsibootpolicyinventoryrelationship["moid"] = item.GetMoid()
	vniciscsibootpolicyinventoryrelationship["object_type"] = item.GetObjectType()
	vniciscsibootpolicyinventoryrelationship["selector"] = item.GetSelector()

	vniciscsibootpolicyinventoryrelationships = append(vniciscsibootpolicyinventoryrelationships, vniciscsibootpolicyinventoryrelationship)
	return vniciscsibootpolicyinventoryrelationships
}
func flattenMapVnicIscsiStaticTargetPolicyRelationship(p models.VnicIscsiStaticTargetPolicyRelationship, d *schema.ResourceData) []map[string]interface{} {
	var vniciscsistatictargetpolicyrelationships []map[string]interface{}
	var ret models.VnicIscsiStaticTargetPolicyRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	vniciscsistatictargetpolicyrelationship := make(map[string]interface{})
	vniciscsistatictargetpolicyrelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	vniciscsistatictargetpolicyrelationship["class_id"] = item.GetClassId()
	vniciscsistatictargetpolicyrelationship["moid"] = item.GetMoid()
	vniciscsistatictargetpolicyrelationship["object_type"] = item.GetObjectType()
	vniciscsistatictargetpolicyrelationship["selector"] = item.GetSelector()

	vniciscsistatictargetpolicyrelationships = append(vniciscsistatictargetpolicyrelationships, vniciscsistatictargetpolicyrelationship)
	return vniciscsistatictargetpolicyrelationships
}
func flattenMapVnicIscsiStaticTargetPolicyInventoryRelationship(p models.VnicIscsiStaticTargetPolicyInventoryRelationship, d *schema.ResourceData) []map[string]interface{} {
	var vniciscsistatictargetpolicyinventoryrelationships []map[string]interface{}
	var ret models.VnicIscsiStaticTargetPolicyInventoryRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	vniciscsistatictargetpolicyinventoryrelationship := make(map[string]interface{})
	vniciscsistatictargetpolicyinventoryrelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	vniciscsistatictargetpolicyinventoryrelationship["class_id"] = item.GetClassId()
	vniciscsistatictargetpolicyinventoryrelationship["moid"] = item.GetMoid()
	vniciscsistatictargetpolicyinventoryrelationship["object_type"] = item.GetObjectType()
	vniciscsistatictargetpolicyinventoryrelationship["selector"] = item.GetSelector()

	vniciscsistatictargetpolicyinventoryrelationships = append(vniciscsistatictargetpolicyinventoryrelationships, vniciscsistatictargetpolicyinventoryrelationship)
	return vniciscsistatictargetpolicyinventoryrelationships
}
func flattenMapVnicLanConnectivityPolicyRelationship(p models.VnicLanConnectivityPolicyRelationship, d *schema.ResourceData) []map[string]interface{} {
	var vniclanconnectivitypolicyrelationships []map[string]interface{}
	var ret models.VnicLanConnectivityPolicyRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	vniclanconnectivitypolicyrelationship := make(map[string]interface{})
	vniclanconnectivitypolicyrelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	vniclanconnectivitypolicyrelationship["class_id"] = item.GetClassId()
	vniclanconnectivitypolicyrelationship["moid"] = item.GetMoid()
	vniclanconnectivitypolicyrelationship["object_type"] = item.GetObjectType()
	vniclanconnectivitypolicyrelationship["selector"] = item.GetSelector()

	vniclanconnectivitypolicyrelationships = append(vniclanconnectivitypolicyrelationships, vniclanconnectivitypolicyrelationship)
	return vniclanconnectivitypolicyrelationships
}
func flattenMapVnicLanConnectivityPolicyInventoryRelationship(p models.VnicLanConnectivityPolicyInventoryRelationship, d *schema.ResourceData) []map[string]interface{} {
	var vniclanconnectivitypolicyinventoryrelationships []map[string]interface{}
	var ret models.VnicLanConnectivityPolicyInventoryRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	vniclanconnectivitypolicyinventoryrelationship := make(map[string]interface{})
	vniclanconnectivitypolicyinventoryrelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	vniclanconnectivitypolicyinventoryrelationship["class_id"] = item.GetClassId()
	vniclanconnectivitypolicyinventoryrelationship["moid"] = item.GetMoid()
	vniclanconnectivitypolicyinventoryrelationship["object_type"] = item.GetObjectType()
	vniclanconnectivitypolicyinventoryrelationship["selector"] = item.GetSelector()

	vniclanconnectivitypolicyinventoryrelationships = append(vniclanconnectivitypolicyinventoryrelationships, vniclanconnectivitypolicyinventoryrelationship)
	return vniclanconnectivitypolicyinventoryrelationships
}
func flattenMapVnicLun(p models.VnicLun, d *schema.ResourceData) []map[string]interface{} {
	var vnicluns []map[string]interface{}
	var ret models.VnicLun
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	item := p
	vniclun := make(map[string]interface{})
	vniclun["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	vniclun["bootable"] = item.GetBootable()
	vniclun["class_id"] = item.GetClassId()
	vniclun["lun_id"] = item.GetLunId()
	vniclun["object_type"] = item.GetObjectType()

	vnicluns = append(vnicluns, vniclun)
	return vnicluns
}
func flattenMapVnicNvgreSettings(p models.VnicNvgreSettings, d *schema.ResourceData) []map[string]interface{} {
	var vnicnvgresettingss []map[string]interface{}
	var ret models.VnicNvgreSettings
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	item := p
	vnicnvgresettings := make(map[string]interface{})
	vnicnvgresettings["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	vnicnvgresettings["class_id"] = item.GetClassId()
	vnicnvgresettings["enabled"] = item.GetEnabled()
	vnicnvgresettings["object_type"] = item.GetObjectType()

	vnicnvgresettingss = append(vnicnvgresettingss, vnicnvgresettings)
	return vnicnvgresettingss
}
func flattenMapVnicPlacementSettings(p models.VnicPlacementSettings, d *schema.ResourceData) []map[string]interface{} {
	var vnicplacementsettingss []map[string]interface{}
	var ret models.VnicPlacementSettings
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	item := p
	vnicplacementsettings := make(map[string]interface{})
	vnicplacementsettings["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	vnicplacementsettings["auto_pci_link"] = item.GetAutoPciLink()
	vnicplacementsettings["auto_slot_id"] = item.GetAutoSlotId()
	vnicplacementsettings["class_id"] = item.GetClassId()
	vnicplacementsettings["id"] = item.GetId()
	vnicplacementsettings["object_type"] = item.GetObjectType()
	vnicplacementsettings["pci_link"] = item.GetPciLink()
	vnicplacementsettings["pci_link_assignment_mode"] = item.GetPciLinkAssignmentMode()
	vnicplacementsettings["switch_id"] = item.GetSwitchId()
	vnicplacementsettings["uplink"] = item.GetUplink()

	vnicplacementsettingss = append(vnicplacementsettingss, vnicplacementsettings)
	return vnicplacementsettingss
}
func flattenMapVnicPlogiSettings(p models.VnicPlogiSettings, d *schema.ResourceData) []map[string]interface{} {
	var vnicplogisettingss []map[string]interface{}
	var ret models.VnicPlogiSettings
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	item := p
	vnicplogisettings := make(map[string]interface{})
	vnicplogisettings["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	vnicplogisettings["class_id"] = item.GetClassId()
	vnicplogisettings["object_type"] = item.GetObjectType()
	vnicplogisettings["retries"] = item.GetRetries()
	vnicplogisettings["timeout"] = item.GetTimeout()

	vnicplogisettingss = append(vnicplogisettingss, vnicplogisettings)
	return vnicplogisettingss
}
func flattenMapVnicPtpSettings(p models.VnicPtpSettings, d *schema.ResourceData) []map[string]interface{} {
	var vnicptpsettingss []map[string]interface{}
	var ret models.VnicPtpSettings
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	item := p
	vnicptpsettings := make(map[string]interface{})
	vnicptpsettings["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	vnicptpsettings["class_id"] = item.GetClassId()
	vnicptpsettings["enabled"] = item.GetEnabled()
	vnicptpsettings["object_type"] = item.GetObjectType()

	vnicptpsettingss = append(vnicptpsettingss, vnicptpsettings)
	return vnicptpsettingss
}
func flattenMapVnicRoceSettings(p models.VnicRoceSettings, d *schema.ResourceData) []map[string]interface{} {
	var vnicrocesettingss []map[string]interface{}
	var ret models.VnicRoceSettings
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	item := p
	vnicrocesettings := make(map[string]interface{})
	vnicrocesettings["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	vnicrocesettings["class_id"] = item.GetClassId()
	vnicrocesettings["class_of_service"] = item.GetClassOfService()
	vnicrocesettings["enabled"] = item.GetEnabled()
	vnicrocesettings["memory_regions"] = item.GetMemoryRegions()
	vnicrocesettings["object_type"] = item.GetObjectType()
	vnicrocesettings["queue_pairs"] = item.GetQueuePairs()
	vnicrocesettings["resource_groups"] = item.GetResourceGroups()
	vnicrocesettings["nr_version"] = item.GetVersion()

	vnicrocesettingss = append(vnicrocesettingss, vnicrocesettings)
	return vnicrocesettingss
}
func flattenMapVnicRssHashSettings(p models.VnicRssHashSettings, d *schema.ResourceData) []map[string]interface{} {
	var vnicrsshashsettingss []map[string]interface{}
	var ret models.VnicRssHashSettings
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	item := p
	vnicrsshashsettings := make(map[string]interface{})
	vnicrsshashsettings["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	vnicrsshashsettings["class_id"] = item.GetClassId()
	vnicrsshashsettings["ipv4_hash"] = item.GetIpv4Hash()
	vnicrsshashsettings["ipv6_ext_hash"] = item.GetIpv6ExtHash()
	vnicrsshashsettings["ipv6_hash"] = item.GetIpv6Hash()
	vnicrsshashsettings["object_type"] = item.GetObjectType()
	vnicrsshashsettings["tcp_ipv4_hash"] = item.GetTcpIpv4Hash()
	vnicrsshashsettings["tcp_ipv6_ext_hash"] = item.GetTcpIpv6ExtHash()
	vnicrsshashsettings["tcp_ipv6_hash"] = item.GetTcpIpv6Hash()
	vnicrsshashsettings["udp_ipv4_hash"] = item.GetUdpIpv4Hash()
	vnicrsshashsettings["udp_ipv6_hash"] = item.GetUdpIpv6Hash()

	vnicrsshashsettingss = append(vnicrsshashsettingss, vnicrsshashsettings)
	return vnicrsshashsettingss
}
func flattenMapVnicSanConnectivityPolicyRelationship(p models.VnicSanConnectivityPolicyRelationship, d *schema.ResourceData) []map[string]interface{} {
	var vnicsanconnectivitypolicyrelationships []map[string]interface{}
	var ret models.VnicSanConnectivityPolicyRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	vnicsanconnectivitypolicyrelationship := make(map[string]interface{})
	vnicsanconnectivitypolicyrelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	vnicsanconnectivitypolicyrelationship["class_id"] = item.GetClassId()
	vnicsanconnectivitypolicyrelationship["moid"] = item.GetMoid()
	vnicsanconnectivitypolicyrelationship["object_type"] = item.GetObjectType()
	vnicsanconnectivitypolicyrelationship["selector"] = item.GetSelector()

	vnicsanconnectivitypolicyrelationships = append(vnicsanconnectivitypolicyrelationships, vnicsanconnectivitypolicyrelationship)
	return vnicsanconnectivitypolicyrelationships
}
func flattenMapVnicSanConnectivityPolicyInventoryRelationship(p models.VnicSanConnectivityPolicyInventoryRelationship, d *schema.ResourceData) []map[string]interface{} {
	var vnicsanconnectivitypolicyinventoryrelationships []map[string]interface{}
	var ret models.VnicSanConnectivityPolicyInventoryRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	vnicsanconnectivitypolicyinventoryrelationship := make(map[string]interface{})
	vnicsanconnectivitypolicyinventoryrelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	vnicsanconnectivitypolicyinventoryrelationship["class_id"] = item.GetClassId()
	vnicsanconnectivitypolicyinventoryrelationship["moid"] = item.GetMoid()
	vnicsanconnectivitypolicyinventoryrelationship["object_type"] = item.GetObjectType()
	vnicsanconnectivitypolicyinventoryrelationship["selector"] = item.GetSelector()

	vnicsanconnectivitypolicyinventoryrelationships = append(vnicsanconnectivitypolicyinventoryrelationships, vnicsanconnectivitypolicyinventoryrelationship)
	return vnicsanconnectivitypolicyinventoryrelationships
}
func flattenMapVnicScsiQueueSettings(p models.VnicScsiQueueSettings, d *schema.ResourceData) []map[string]interface{} {
	var vnicscsiqueuesettingss []map[string]interface{}
	var ret models.VnicScsiQueueSettings
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	item := p
	vnicscsiqueuesettings := make(map[string]interface{})
	vnicscsiqueuesettings["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	vnicscsiqueuesettings["class_id"] = item.GetClassId()
	vnicscsiqueuesettings["nr_count"] = item.GetCount()
	vnicscsiqueuesettings["object_type"] = item.GetObjectType()
	vnicscsiqueuesettings["ring_size"] = item.GetRingSize()

	vnicscsiqueuesettingss = append(vnicscsiqueuesettingss, vnicscsiqueuesettings)
	return vnicscsiqueuesettingss
}
func flattenMapVnicSriovSettings(p models.VnicSriovSettings, d *schema.ResourceData) []map[string]interface{} {
	var vnicsriovsettingss []map[string]interface{}
	var ret models.VnicSriovSettings
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	item := p
	vnicsriovsettings := make(map[string]interface{})
	vnicsriovsettings["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	vnicsriovsettings["class_id"] = item.GetClassId()
	vnicsriovsettings["comp_count_per_vf"] = item.GetCompCountPerVf()
	vnicsriovsettings["enabled"] = item.GetEnabled()
	vnicsriovsettings["int_count_per_vf"] = item.GetIntCountPerVf()
	vnicsriovsettings["object_type"] = item.GetObjectType()
	vnicsriovsettings["rx_count_per_vf"] = item.GetRxCountPerVf()
	vnicsriovsettings["tx_count_per_vf"] = item.GetTxCountPerVf()
	vnicsriovsettings["vf_count"] = item.GetVfCount()

	vnicsriovsettingss = append(vnicsriovsettingss, vnicsriovsettings)
	return vnicsriovsettingss
}
func flattenMapVnicTcpOffloadSettings(p models.VnicTcpOffloadSettings, d *schema.ResourceData) []map[string]interface{} {
	var vnictcpoffloadsettingss []map[string]interface{}
	var ret models.VnicTcpOffloadSettings
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	item := p
	vnictcpoffloadsettings := make(map[string]interface{})
	vnictcpoffloadsettings["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	vnictcpoffloadsettings["class_id"] = item.GetClassId()
	vnictcpoffloadsettings["large_receive"] = item.GetLargeReceive()
	vnictcpoffloadsettings["large_send"] = item.GetLargeSend()
	vnictcpoffloadsettings["object_type"] = item.GetObjectType()
	vnictcpoffloadsettings["rx_checksum"] = item.GetRxChecksum()
	vnictcpoffloadsettings["tx_checksum"] = item.GetTxChecksum()

	vnictcpoffloadsettingss = append(vnictcpoffloadsettingss, vnictcpoffloadsettings)
	return vnictcpoffloadsettingss
}
func flattenMapVnicUsnicSettings(p models.VnicUsnicSettings, d *schema.ResourceData) []map[string]interface{} {
	var vnicusnicsettingss []map[string]interface{}
	var ret models.VnicUsnicSettings
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	item := p
	vnicusnicsettings := make(map[string]interface{})
	vnicusnicsettings["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	vnicusnicsettings["class_id"] = item.GetClassId()
	vnicusnicsettings["cos"] = item.GetCos()
	vnicusnicsettings["nr_count"] = item.GetCount()
	vnicusnicsettings["object_type"] = item.GetObjectType()
	vnicusnicsettings["usnic_adapter_policy"] = item.GetUsnicAdapterPolicy()

	vnicusnicsettingss = append(vnicusnicsettingss, vnicusnicsettings)
	return vnicusnicsettingss
}
func flattenMapVnicVhbaTemplateRelationship(p models.VnicVhbaTemplateRelationship, d *schema.ResourceData) []map[string]interface{} {
	var vnicvhbatemplaterelationships []map[string]interface{}
	var ret models.VnicVhbaTemplateRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	vnicvhbatemplaterelationship := make(map[string]interface{})
	vnicvhbatemplaterelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	vnicvhbatemplaterelationship["class_id"] = item.GetClassId()
	vnicvhbatemplaterelationship["moid"] = item.GetMoid()
	vnicvhbatemplaterelationship["object_type"] = item.GetObjectType()
	vnicvhbatemplaterelationship["selector"] = item.GetSelector()

	vnicvhbatemplaterelationships = append(vnicvhbatemplaterelationships, vnicvhbatemplaterelationship)
	return vnicvhbatemplaterelationships
}
func flattenMapVnicVlanSettings(p models.VnicVlanSettings, d *schema.ResourceData) []map[string]interface{} {
	var vnicvlansettingss []map[string]interface{}
	var ret models.VnicVlanSettings
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	item := p
	vnicvlansettings := make(map[string]interface{})
	vnicvlansettings["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	vnicvlansettings["allowed_vlans"] = item.GetAllowedVlans()
	vnicvlansettings["class_id"] = item.GetClassId()
	vnicvlansettings["default_vlan"] = item.GetDefaultVlan()
	vnicvlansettings["mode"] = item.GetMode()
	vnicvlansettings["object_type"] = item.GetObjectType()
	vnicvlansettings["qinq_enabled"] = item.GetQinqEnabled()
	vnicvlansettings["qinq_vlan"] = item.GetQinqVlan()

	vnicvlansettingss = append(vnicvlansettingss, vnicvlansettings)
	return vnicvlansettingss
}
func flattenMapVnicVmqSettings(p models.VnicVmqSettings, d *schema.ResourceData) []map[string]interface{} {
	var vnicvmqsettingss []map[string]interface{}
	var ret models.VnicVmqSettings
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	item := p
	vnicvmqsettings := make(map[string]interface{})
	vnicvmqsettings["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	vnicvmqsettings["class_id"] = item.GetClassId()
	vnicvmqsettings["enabled"] = item.GetEnabled()
	vnicvmqsettings["multi_queue_support"] = item.GetMultiQueueSupport()
	vnicvmqsettings["num_interrupts"] = item.GetNumInterrupts()
	vnicvmqsettings["num_sub_vnics"] = item.GetNumSubVnics()
	vnicvmqsettings["num_vmqs"] = item.GetNumVmqs()
	vnicvmqsettings["object_type"] = item.GetObjectType()
	vnicvmqsettings["vmmq_adapter_policy"] = item.GetVmmqAdapterPolicy()

	vnicvmqsettingss = append(vnicvmqsettingss, vnicvmqsettings)
	return vnicvmqsettingss
}
func flattenMapVnicVnicTemplateRelationship(p models.VnicVnicTemplateRelationship, d *schema.ResourceData) []map[string]interface{} {
	var vnicvnictemplaterelationships []map[string]interface{}
	var ret models.VnicVnicTemplateRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	vnicvnictemplaterelationship := make(map[string]interface{})
	vnicvnictemplaterelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	vnicvnictemplaterelationship["class_id"] = item.GetClassId()
	vnicvnictemplaterelationship["moid"] = item.GetMoid()
	vnicvnictemplaterelationship["object_type"] = item.GetObjectType()
	vnicvnictemplaterelationship["selector"] = item.GetSelector()

	vnicvnictemplaterelationships = append(vnicvnictemplaterelationships, vnicvnictemplaterelationship)
	return vnicvnictemplaterelationships
}
func flattenMapVnicVsanSettings(p models.VnicVsanSettings, d *schema.ResourceData) []map[string]interface{} {
	var vnicvsansettingss []map[string]interface{}
	var ret models.VnicVsanSettings
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	item := p
	vnicvsansettings := make(map[string]interface{})
	vnicvsansettings["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	vnicvsansettings["class_id"] = item.GetClassId()
	vnicvsansettings["default_vlan_id"] = item.GetDefaultVlanId()
	vnicvsansettings["id"] = item.GetId()
	vnicvsansettings["object_type"] = item.GetObjectType()

	vnicvsansettingss = append(vnicvsansettingss, vnicvsansettings)
	return vnicvsansettingss
}
func flattenMapVnicVxlanSettings(p models.VnicVxlanSettings, d *schema.ResourceData) []map[string]interface{} {
	var vnicvxlansettingss []map[string]interface{}
	var ret models.VnicVxlanSettings
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	item := p
	vnicvxlansettings := make(map[string]interface{})
	vnicvxlansettings["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	vnicvxlansettings["class_id"] = item.GetClassId()
	vnicvxlansettings["enabled"] = item.GetEnabled()
	vnicvxlansettings["object_type"] = item.GetObjectType()

	vnicvxlansettingss = append(vnicvxlansettingss, vnicvxlansettings)
	return vnicvxlansettingss
}
func flattenMapVrfVrfRelationship(p models.VrfVrfRelationship, d *schema.ResourceData) []map[string]interface{} {
	var vrfvrfrelationships []map[string]interface{}
	var ret models.VrfVrfRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	vrfvrfrelationship := make(map[string]interface{})
	vrfvrfrelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	vrfvrfrelationship["class_id"] = item.GetClassId()
	vrfvrfrelationship["moid"] = item.GetMoid()
	vrfvrfrelationship["object_type"] = item.GetObjectType()
	vrfvrfrelationship["selector"] = item.GetSelector()

	vrfvrfrelationships = append(vrfvrfrelationships, vrfvrfrelationship)
	return vrfvrfrelationships
}
func flattenMapWorkflowBaseOperation(p models.WorkflowBaseOperation, d *schema.ResourceData) []map[string]interface{} {
	var workflowbaseoperations []map[string]interface{}
	var ret models.WorkflowBaseOperation
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	item := p
	workflowbaseoperation := make(map[string]interface{})
	workflowbaseoperation["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	workflowbaseoperation["class_id"] = item.GetClassId()
	workflowbaseoperation["object_type"] = item.GetObjectType()
	workflowbaseoperation["operation_type"] = item.GetOperationType()

	workflowbaseoperations = append(workflowbaseoperations, workflowbaseoperation)
	return workflowbaseoperations
}
func flattenMapWorkflowCatalogRelationship(p models.WorkflowCatalogRelationship, d *schema.ResourceData) []map[string]interface{} {
	var workflowcatalogrelationships []map[string]interface{}
	var ret models.WorkflowCatalogRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	workflowcatalogrelationship := make(map[string]interface{})
	workflowcatalogrelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	workflowcatalogrelationship["class_id"] = item.GetClassId()
	workflowcatalogrelationship["moid"] = item.GetMoid()
	workflowcatalogrelationship["object_type"] = item.GetObjectType()
	workflowcatalogrelationship["selector"] = item.GetSelector()

	workflowcatalogrelationships = append(workflowcatalogrelationships, workflowcatalogrelationship)
	return workflowcatalogrelationships
}
func flattenMapWorkflowCatalogItemDefinitionRelationship(p models.WorkflowCatalogItemDefinitionRelationship, d *schema.ResourceData) []map[string]interface{} {
	var workflowcatalogitemdefinitionrelationships []map[string]interface{}
	var ret models.WorkflowCatalogItemDefinitionRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	workflowcatalogitemdefinitionrelationship := make(map[string]interface{})
	workflowcatalogitemdefinitionrelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	workflowcatalogitemdefinitionrelationship["class_id"] = item.GetClassId()
	workflowcatalogitemdefinitionrelationship["moid"] = item.GetMoid()
	workflowcatalogitemdefinitionrelationship["object_type"] = item.GetObjectType()
	workflowcatalogitemdefinitionrelationship["selector"] = item.GetSelector()

	workflowcatalogitemdefinitionrelationships = append(workflowcatalogitemdefinitionrelationships, workflowcatalogitemdefinitionrelationship)
	return workflowcatalogitemdefinitionrelationships
}
func flattenMapWorkflowComments(p models.WorkflowComments, d *schema.ResourceData) []map[string]interface{} {
	var workflowcommentss []map[string]interface{}
	var ret models.WorkflowComments
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	item := p
	workflowcomments := make(map[string]interface{})
	workflowcomments["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	workflowcomments["class_id"] = item.GetClassId()
	workflowcomments["description"] = item.GetDescription()
	workflowcomments["examples"] = item.GetExamples()
	workflowcomments["object_type"] = item.GetObjectType()

	workflowcommentss = append(workflowcommentss, workflowcomments)
	return workflowcommentss
}
func flattenMapWorkflowCustomDataTypeDefinitionRelationship(p models.WorkflowCustomDataTypeDefinitionRelationship, d *schema.ResourceData) []map[string]interface{} {
	var workflowcustomdatatypedefinitionrelationships []map[string]interface{}
	var ret models.WorkflowCustomDataTypeDefinitionRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	workflowcustomdatatypedefinitionrelationship := make(map[string]interface{})
	workflowcustomdatatypedefinitionrelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	workflowcustomdatatypedefinitionrelationship["class_id"] = item.GetClassId()
	workflowcustomdatatypedefinitionrelationship["moid"] = item.GetMoid()
	workflowcustomdatatypedefinitionrelationship["object_type"] = item.GetObjectType()
	workflowcustomdatatypedefinitionrelationship["selector"] = item.GetSelector()

	workflowcustomdatatypedefinitionrelationships = append(workflowcustomdatatypedefinitionrelationships, workflowcustomdatatypedefinitionrelationship)
	return workflowcustomdatatypedefinitionrelationships
}
func flattenMapWorkflowCustomDataTypeProperties(p models.WorkflowCustomDataTypeProperties, d *schema.ResourceData) []map[string]interface{} {
	var workflowcustomdatatypepropertiess []map[string]interface{}
	var ret models.WorkflowCustomDataTypeProperties
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	item := p
	workflowcustomdatatypeproperties := make(map[string]interface{})
	workflowcustomdatatypeproperties["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	workflowcustomdatatypeproperties["class_id"] = item.GetClassId()
	workflowcustomdatatypeproperties["cloneable"] = item.GetCloneable()
	workflowcustomdatatypeproperties["external_meta"] = item.GetExternalMeta()
	workflowcustomdatatypeproperties["object_type"] = item.GetObjectType()

	workflowcustomdatatypepropertiess = append(workflowcustomdatatypepropertiess, workflowcustomdatatypeproperties)
	return workflowcustomdatatypepropertiess
}
func flattenMapWorkflowErrorResponseHandlerRelationship(p models.WorkflowErrorResponseHandlerRelationship, d *schema.ResourceData) []map[string]interface{} {
	var workflowerrorresponsehandlerrelationships []map[string]interface{}
	var ret models.WorkflowErrorResponseHandlerRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	workflowerrorresponsehandlerrelationship := make(map[string]interface{})
	workflowerrorresponsehandlerrelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	workflowerrorresponsehandlerrelationship["class_id"] = item.GetClassId()
	workflowerrorresponsehandlerrelationship["moid"] = item.GetMoid()
	workflowerrorresponsehandlerrelationship["object_type"] = item.GetObjectType()
	workflowerrorresponsehandlerrelationship["selector"] = item.GetSelector()

	workflowerrorresponsehandlerrelationships = append(workflowerrorresponsehandlerrelationships, workflowerrorresponsehandlerrelationship)
	return workflowerrorresponsehandlerrelationships
}
func flattenMapWorkflowInternalProperties(p models.WorkflowInternalProperties, d *schema.ResourceData) []map[string]interface{} {
	var workflowinternalpropertiess []map[string]interface{}
	var ret models.WorkflowInternalProperties
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	item := p
	workflowinternalproperties := make(map[string]interface{})
	workflowinternalproperties["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	workflowinternalproperties["base_task_type"] = item.GetBaseTaskType()
	workflowinternalproperties["class_id"] = item.GetClassId()
	workflowinternalproperties["constraints"] = (func(p models.WorkflowTaskConstraints, d *schema.ResourceData) []map[string]interface{} {
		var workflowtaskconstraintss []map[string]interface{}
		var ret models.WorkflowTaskConstraints
		if reflect.DeepEqual(ret, p) {
			return nil
		}
		item := p
		workflowtaskconstraints := make(map[string]interface{})
		workflowtaskconstraints["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
		workflowtaskconstraints["class_id"] = item.GetClassId()
		workflowtaskconstraints["object_type"] = item.GetObjectType()
		workflowtaskconstraints["target_data_type"] = flattenAdditionalProperties(item.TargetDataType)

		workflowtaskconstraintss = append(workflowtaskconstraintss, workflowtaskconstraints)
		return workflowtaskconstraintss
	})(item.GetConstraints(), d)
	workflowinternalproperties["internal"] = item.GetInternal()
	workflowinternalproperties["object_type"] = item.GetObjectType()
	workflowinternalproperties["owner"] = item.GetOwner()

	workflowinternalpropertiess = append(workflowinternalpropertiess, workflowinternalproperties)
	return workflowinternalpropertiess
}
func flattenMapWorkflowProperties(p models.WorkflowProperties, d *schema.ResourceData) []map[string]interface{} {
	var workflowpropertiess []map[string]interface{}
	var ret models.WorkflowProperties
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	item := p
	workflowproperties := make(map[string]interface{})
	workflowproperties["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	workflowproperties["class_id"] = item.GetClassId()
	workflowproperties["cloneable"] = item.GetCloneable()
	workflowproperties["external_meta"] = item.GetExternalMeta()
	workflowproperties["input_definition"] = (func(p []models.WorkflowBaseDataType, d *schema.ResourceData) []map[string]interface{} {
		var workflowbasedatatypes []map[string]interface{}
		if len(p) == 0 {
			return nil
		}
		for _, item := range p {
			workflowbasedatatype := make(map[string]interface{})
			workflowbasedatatype["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
			workflowbasedatatype["class_id"] = item.GetClassId()
			workflowbasedatatype["default"] = (func(p models.WorkflowDefaultValue, d *schema.ResourceData) []map[string]interface{} {
				var workflowdefaultvalues []map[string]interface{}
				var ret models.WorkflowDefaultValue
				if reflect.DeepEqual(ret, p) {
					return nil
				}
				item := p
				workflowdefaultvalue := make(map[string]interface{})
				workflowdefaultvalue["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
				workflowdefaultvalue["class_id"] = item.GetClassId()
				workflowdefaultvalue["is_value_set"] = item.GetIsValueSet()
				workflowdefaultvalue["object_type"] = item.GetObjectType()
				workflowdefaultvalue["override"] = item.GetOverride()
				workflowdefaultvalue["value"] = flattenAdditionalProperties(item.Value)

				workflowdefaultvalues = append(workflowdefaultvalues, workflowdefaultvalue)
				return workflowdefaultvalues
			})(item.GetDefault(), d)
			workflowbasedatatype["description"] = item.GetDescription()
			workflowbasedatatype["display_meta"] = (func(p models.WorkflowDisplayMeta, d *schema.ResourceData) []map[string]interface{} {
				var workflowdisplaymetas []map[string]interface{}
				var ret models.WorkflowDisplayMeta
				if reflect.DeepEqual(ret, p) {
					return nil
				}
				item := p
				workflowdisplaymeta := make(map[string]interface{})
				workflowdisplaymeta["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
				workflowdisplaymeta["class_id"] = item.GetClassId()
				workflowdisplaymeta["inventory_selector"] = item.GetInventorySelector()
				workflowdisplaymeta["object_type"] = item.GetObjectType()
				workflowdisplaymeta["widget_type"] = item.GetWidgetType()

				workflowdisplaymetas = append(workflowdisplaymetas, workflowdisplaymeta)
				return workflowdisplaymetas
			})(item.GetDisplayMeta(), d)
			workflowbasedatatype["input_parameters"] = flattenAdditionalProperties(item.InputParameters)
			workflowbasedatatype["label"] = item.GetLabel()
			workflowbasedatatype["name"] = item.GetName()
			workflowbasedatatype["object_type"] = item.GetObjectType()
			workflowbasedatatype["required"] = item.GetRequired()
			workflowbasedatatypes = append(workflowbasedatatypes, workflowbasedatatype)
		}
		return workflowbasedatatypes
	})(item.GetInputDefinition(), d)
	workflowproperties["object_type"] = item.GetObjectType()
	workflowproperties["output_definition"] = (func(p []models.WorkflowBaseDataType, d *schema.ResourceData) []map[string]interface{} {
		var workflowbasedatatypes []map[string]interface{}
		if len(p) == 0 {
			return nil
		}
		for _, item := range p {
			workflowbasedatatype := make(map[string]interface{})
			workflowbasedatatype["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
			workflowbasedatatype["class_id"] = item.GetClassId()
			workflowbasedatatype["default"] = (func(p models.WorkflowDefaultValue, d *schema.ResourceData) []map[string]interface{} {
				var workflowdefaultvalues []map[string]interface{}
				var ret models.WorkflowDefaultValue
				if reflect.DeepEqual(ret, p) {
					return nil
				}
				item := p
				workflowdefaultvalue := make(map[string]interface{})
				workflowdefaultvalue["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
				workflowdefaultvalue["class_id"] = item.GetClassId()
				workflowdefaultvalue["is_value_set"] = item.GetIsValueSet()
				workflowdefaultvalue["object_type"] = item.GetObjectType()
				workflowdefaultvalue["override"] = item.GetOverride()
				workflowdefaultvalue["value"] = flattenAdditionalProperties(item.Value)

				workflowdefaultvalues = append(workflowdefaultvalues, workflowdefaultvalue)
				return workflowdefaultvalues
			})(item.GetDefault(), d)
			workflowbasedatatype["description"] = item.GetDescription()
			workflowbasedatatype["display_meta"] = (func(p models.WorkflowDisplayMeta, d *schema.ResourceData) []map[string]interface{} {
				var workflowdisplaymetas []map[string]interface{}
				var ret models.WorkflowDisplayMeta
				if reflect.DeepEqual(ret, p) {
					return nil
				}
				item := p
				workflowdisplaymeta := make(map[string]interface{})
				workflowdisplaymeta["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
				workflowdisplaymeta["class_id"] = item.GetClassId()
				workflowdisplaymeta["inventory_selector"] = item.GetInventorySelector()
				workflowdisplaymeta["object_type"] = item.GetObjectType()
				workflowdisplaymeta["widget_type"] = item.GetWidgetType()

				workflowdisplaymetas = append(workflowdisplaymetas, workflowdisplaymeta)
				return workflowdisplaymetas
			})(item.GetDisplayMeta(), d)
			workflowbasedatatype["input_parameters"] = flattenAdditionalProperties(item.InputParameters)
			workflowbasedatatype["label"] = item.GetLabel()
			workflowbasedatatype["name"] = item.GetName()
			workflowbasedatatype["object_type"] = item.GetObjectType()
			workflowbasedatatype["required"] = item.GetRequired()
			workflowbasedatatypes = append(workflowbasedatatypes, workflowbasedatatype)
		}
		return workflowbasedatatypes
	})(item.GetOutputDefinition(), d)
	workflowproperties["retry_count"] = item.GetRetryCount()
	workflowproperties["retry_delay"] = item.GetRetryDelay()
	workflowproperties["retry_policy"] = item.GetRetryPolicy()
	workflowproperties["starts_workflow"] = item.GetStartsWorkflow()
	workflowproperties["support_status"] = item.GetSupportStatus()
	workflowproperties["timeout"] = item.GetTimeout()
	workflowproperties["timeout_policy"] = item.GetTimeoutPolicy()

	workflowpropertiess = append(workflowpropertiess, workflowproperties)
	return workflowpropertiess
}
func flattenMapWorkflowServiceItemActionDefinitionRelationship(p models.WorkflowServiceItemActionDefinitionRelationship, d *schema.ResourceData) []map[string]interface{} {
	var workflowserviceitemactiondefinitionrelationships []map[string]interface{}
	var ret models.WorkflowServiceItemActionDefinitionRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	workflowserviceitemactiondefinitionrelationship := make(map[string]interface{})
	workflowserviceitemactiondefinitionrelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	workflowserviceitemactiondefinitionrelationship["class_id"] = item.GetClassId()
	workflowserviceitemactiondefinitionrelationship["moid"] = item.GetMoid()
	workflowserviceitemactiondefinitionrelationship["object_type"] = item.GetObjectType()
	workflowserviceitemactiondefinitionrelationship["selector"] = item.GetSelector()

	workflowserviceitemactiondefinitionrelationships = append(workflowserviceitemactiondefinitionrelationships, workflowserviceitemactiondefinitionrelationship)
	return workflowserviceitemactiondefinitionrelationships
}
func flattenMapWorkflowServiceItemActionProperties(p models.WorkflowServiceItemActionProperties, d *schema.ResourceData) []map[string]interface{} {
	var workflowserviceitemactionpropertiess []map[string]interface{}
	var ret models.WorkflowServiceItemActionProperties
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	item := p
	workflowserviceitemactionproperties := make(map[string]interface{})
	workflowserviceitemactionproperties["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	workflowserviceitemactionproperties["class_id"] = item.GetClassId()
	workflowserviceitemactionproperties["object_type"] = item.GetObjectType()
	workflowserviceitemactionproperties["operation_type"] = item.GetOperationType()
	workflowserviceitemactionproperties["stop_on_failure"] = item.GetStopOnFailure()

	workflowserviceitemactionpropertiess = append(workflowserviceitemactionpropertiess, workflowserviceitemactionproperties)
	return workflowserviceitemactionpropertiess
}
func flattenMapWorkflowServiceItemActionWorkflowDefinition(p models.WorkflowServiceItemActionWorkflowDefinition, d *schema.ResourceData) []map[string]interface{} {
	var workflowserviceitemactionworkflowdefinitions []map[string]interface{}
	var ret models.WorkflowServiceItemActionWorkflowDefinition
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	item := p
	workflowserviceitemactionworkflowdefinition := make(map[string]interface{})
	workflowserviceitemactionworkflowdefinition["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	workflowserviceitemactionworkflowdefinition["catalog_moid"] = item.GetCatalogMoid()
	workflowserviceitemactionworkflowdefinition["class_id"] = item.GetClassId()
	workflowserviceitemactionworkflowdefinition["description"] = item.GetDescription()
	workflowserviceitemactionworkflowdefinition["input_parameters"] = flattenAdditionalProperties(item.InputParameters)
	workflowserviceitemactionworkflowdefinition["label"] = item.GetLabel()
	workflowserviceitemactionworkflowdefinition["name"] = item.GetName()
	workflowserviceitemactionworkflowdefinition["object_type"] = item.GetObjectType()
	workflowserviceitemactionworkflowdefinition["nr_version"] = item.GetVersion()
	workflowserviceitemactionworkflowdefinition["workflow_definition"] = (func(p models.MoMoRef, d *schema.ResourceData) []map[string]interface{} {
		var momorefs []map[string]interface{}
		var ret models.MoMoRef
		if reflect.DeepEqual(ret, p) {
			return nil
		}
		item := p
		momoref := make(map[string]interface{})
		momoref["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
		momoref["class_id"] = item.GetClassId()
		momoref["moid"] = item.GetMoid()
		momoref["object_type"] = item.GetObjectType()
		momoref["selector"] = item.GetSelector()

		momorefs = append(momorefs, momoref)
		return momorefs
	})(item.GetWorkflowDefinition(), d)
	workflowserviceitemactionworkflowdefinition["workflow_definition_name"] = item.GetWorkflowDefinitionName()

	workflowserviceitemactionworkflowdefinitions = append(workflowserviceitemactionworkflowdefinitions, workflowserviceitemactionworkflowdefinition)
	return workflowserviceitemactionworkflowdefinitions
}
func flattenMapWorkflowServiceItemDefinitionRelationship(p models.WorkflowServiceItemDefinitionRelationship, d *schema.ResourceData) []map[string]interface{} {
	var workflowserviceitemdefinitionrelationships []map[string]interface{}
	var ret models.WorkflowServiceItemDefinitionRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	workflowserviceitemdefinitionrelationship := make(map[string]interface{})
	workflowserviceitemdefinitionrelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	workflowserviceitemdefinitionrelationship["class_id"] = item.GetClassId()
	workflowserviceitemdefinitionrelationship["moid"] = item.GetMoid()
	workflowserviceitemdefinitionrelationship["object_type"] = item.GetObjectType()
	workflowserviceitemdefinitionrelationship["selector"] = item.GetSelector()

	workflowserviceitemdefinitionrelationships = append(workflowserviceitemdefinitionrelationships, workflowserviceitemdefinitionrelationship)
	return workflowserviceitemdefinitionrelationships
}
func flattenMapWorkflowServiceItemHealthCheckDefinitionRelationship(p models.WorkflowServiceItemHealthCheckDefinitionRelationship, d *schema.ResourceData) []map[string]interface{} {
	var workflowserviceitemhealthcheckdefinitionrelationships []map[string]interface{}
	var ret models.WorkflowServiceItemHealthCheckDefinitionRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	workflowserviceitemhealthcheckdefinitionrelationship := make(map[string]interface{})
	workflowserviceitemhealthcheckdefinitionrelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	workflowserviceitemhealthcheckdefinitionrelationship["class_id"] = item.GetClassId()
	workflowserviceitemhealthcheckdefinitionrelationship["moid"] = item.GetMoid()
	workflowserviceitemhealthcheckdefinitionrelationship["object_type"] = item.GetObjectType()
	workflowserviceitemhealthcheckdefinitionrelationship["selector"] = item.GetSelector()

	workflowserviceitemhealthcheckdefinitionrelationships = append(workflowserviceitemhealthcheckdefinitionrelationships, workflowserviceitemhealthcheckdefinitionrelationship)
	return workflowserviceitemhealthcheckdefinitionrelationships
}
func flattenMapWorkflowServiceItemInstanceRelationship(p models.WorkflowServiceItemInstanceRelationship, d *schema.ResourceData) []map[string]interface{} {
	var workflowserviceiteminstancerelationships []map[string]interface{}
	var ret models.WorkflowServiceItemInstanceRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	workflowserviceiteminstancerelationship := make(map[string]interface{})
	workflowserviceiteminstancerelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	workflowserviceiteminstancerelationship["class_id"] = item.GetClassId()
	workflowserviceiteminstancerelationship["moid"] = item.GetMoid()
	workflowserviceiteminstancerelationship["object_type"] = item.GetObjectType()
	workflowserviceiteminstancerelationship["selector"] = item.GetSelector()

	workflowserviceiteminstancerelationships = append(workflowserviceiteminstancerelationships, workflowserviceiteminstancerelationship)
	return workflowserviceiteminstancerelationships
}
func flattenMapWorkflowTaskConstraints(p models.WorkflowTaskConstraints, d *schema.ResourceData) []map[string]interface{} {
	var workflowtaskconstraintss []map[string]interface{}
	var ret models.WorkflowTaskConstraints
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	item := p
	workflowtaskconstraints := make(map[string]interface{})
	workflowtaskconstraints["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	workflowtaskconstraints["class_id"] = item.GetClassId()
	workflowtaskconstraints["object_type"] = item.GetObjectType()
	workflowtaskconstraints["target_data_type"] = flattenAdditionalProperties(item.TargetDataType)

	workflowtaskconstraintss = append(workflowtaskconstraintss, workflowtaskconstraints)
	return workflowtaskconstraintss
}
func flattenMapWorkflowTaskDefinitionRelationship(p models.WorkflowTaskDefinitionRelationship, d *schema.ResourceData) []map[string]interface{} {
	var workflowtaskdefinitionrelationships []map[string]interface{}
	var ret models.WorkflowTaskDefinitionRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	workflowtaskdefinitionrelationship := make(map[string]interface{})
	workflowtaskdefinitionrelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	workflowtaskdefinitionrelationship["class_id"] = item.GetClassId()
	workflowtaskdefinitionrelationship["moid"] = item.GetMoid()
	workflowtaskdefinitionrelationship["object_type"] = item.GetObjectType()
	workflowtaskdefinitionrelationship["selector"] = item.GetSelector()

	workflowtaskdefinitionrelationships = append(workflowtaskdefinitionrelationships, workflowtaskdefinitionrelationship)
	return workflowtaskdefinitionrelationships
}
func flattenMapWorkflowTaskInfoRelationship(p models.WorkflowTaskInfoRelationship, d *schema.ResourceData) []map[string]interface{} {
	var workflowtaskinforelationships []map[string]interface{}
	var ret models.WorkflowTaskInfoRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	workflowtaskinforelationship := make(map[string]interface{})
	workflowtaskinforelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	workflowtaskinforelationship["class_id"] = item.GetClassId()
	workflowtaskinforelationship["moid"] = item.GetMoid()
	workflowtaskinforelationship["object_type"] = item.GetObjectType()
	workflowtaskinforelationship["selector"] = item.GetSelector()

	workflowtaskinforelationships = append(workflowtaskinforelationships, workflowtaskinforelationship)
	return workflowtaskinforelationships
}
func flattenMapWorkflowTaskInfoUpdate(p models.WorkflowTaskInfoUpdate, d *schema.ResourceData) []map[string]interface{} {
	var workflowtaskinfoupdates []map[string]interface{}
	var ret models.WorkflowTaskInfoUpdate
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	item := p
	workflowtaskinfoupdate := make(map[string]interface{})
	workflowtaskinfoupdate["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	workflowtaskinfoupdate["class_id"] = item.GetClassId()
	workflowtaskinfoupdate["input"] = flattenAdditionalProperties(item.Input)
	name_x, exists := d.GetOk("task_info_update")
	if exists && name_x != nil {
		name_y := name_x.([]interface{})[0].(map[string]interface{})
		workflowtaskinfoupdate["name"] = name_y["name"]
	}
	workflowtaskinfoupdate["object_type"] = item.GetObjectType()
	status_x, exists := d.GetOk("task_info_update")
	if exists && status_x != nil {
		status_y := status_x.([]interface{})[0].(map[string]interface{})
		workflowtaskinfoupdate["status"] = status_y["status"]
	}

	workflowtaskinfoupdates = append(workflowtaskinfoupdates, workflowtaskinfoupdate)
	return workflowtaskinfoupdates
}
func flattenMapWorkflowTaskLoopInfo(p models.WorkflowTaskLoopInfo, d *schema.ResourceData) []map[string]interface{} {
	var workflowtaskloopinfos []map[string]interface{}
	var ret models.WorkflowTaskLoopInfo
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	item := p
	workflowtaskloopinfo := make(map[string]interface{})
	workflowtaskloopinfo["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	workflowtaskloopinfo["class_id"] = item.GetClassId()
	workflowtaskloopinfo["iteration"] = item.GetIteration()
	workflowtaskloopinfo["loop_task_label"] = item.GetLoopTaskLabel()
	workflowtaskloopinfo["loop_task_name"] = item.GetLoopTaskName()
	workflowtaskloopinfo["loop_type"] = item.GetLoopType()
	workflowtaskloopinfo["object_type"] = item.GetObjectType()

	workflowtaskloopinfos = append(workflowtaskloopinfos, workflowtaskloopinfo)
	return workflowtaskloopinfos
}
func flattenMapWorkflowTaskMetadataRelationship(p models.WorkflowTaskMetadataRelationship, d *schema.ResourceData) []map[string]interface{} {
	var workflowtaskmetadatarelationships []map[string]interface{}
	var ret models.WorkflowTaskMetadataRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	workflowtaskmetadatarelationship := make(map[string]interface{})
	workflowtaskmetadatarelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	workflowtaskmetadatarelationship["class_id"] = item.GetClassId()
	workflowtaskmetadatarelationship["moid"] = item.GetMoid()
	workflowtaskmetadatarelationship["object_type"] = item.GetObjectType()
	workflowtaskmetadatarelationship["selector"] = item.GetSelector()

	workflowtaskmetadatarelationships = append(workflowtaskmetadatarelationships, workflowtaskmetadatarelationship)
	return workflowtaskmetadatarelationships
}
func flattenMapWorkflowValidationInformation(p models.WorkflowValidationInformation, d *schema.ResourceData) []map[string]interface{} {
	var workflowvalidationinformations []map[string]interface{}
	var ret models.WorkflowValidationInformation
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	item := p
	workflowvalidationinformation := make(map[string]interface{})
	workflowvalidationinformation["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	workflowvalidationinformation["class_id"] = item.GetClassId()
	workflowvalidationinformation["object_type"] = item.GetObjectType()
	workflowvalidationinformation["state"] = item.GetState()
	workflowvalidationinformation["validation_error"] = (func(p []models.WorkflowValidationError, d *schema.ResourceData) []map[string]interface{} {
		var workflowvalidationerrors []map[string]interface{}
		if len(p) == 0 {
			return nil
		}
		for _, item := range p {
			workflowvalidationerror := make(map[string]interface{})
			workflowvalidationerror["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
			workflowvalidationerror["class_id"] = item.GetClassId()
			workflowvalidationerror["error_log"] = item.GetErrorLog()
			workflowvalidationerror["field"] = item.GetField()
			workflowvalidationerror["object_type"] = item.GetObjectType()
			workflowvalidationerror["task_name"] = item.GetTaskName()
			workflowvalidationerror["transition_name"] = item.GetTransitionName()
			workflowvalidationerrors = append(workflowvalidationerrors, workflowvalidationerror)
		}
		return workflowvalidationerrors
	})(item.GetValidationError(), d)

	workflowvalidationinformations = append(workflowvalidationinformations, workflowvalidationinformation)
	return workflowvalidationinformations
}
func flattenMapWorkflowWorkflowCtx(p models.WorkflowWorkflowCtx, d *schema.ResourceData) []map[string]interface{} {
	var workflowworkflowctxs []map[string]interface{}
	var ret models.WorkflowWorkflowCtx
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	item := p
	workflowworkflowctx := make(map[string]interface{})
	workflowworkflowctx["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	workflowworkflowctx["class_id"] = item.GetClassId()
	workflowworkflowctx["initiator_ctx"] = (func(p models.WorkflowInitiatorContext, d *schema.ResourceData) []map[string]interface{} {
		var workflowinitiatorcontexts []map[string]interface{}
		var ret models.WorkflowInitiatorContext
		if reflect.DeepEqual(ret, p) {
			return nil
		}
		item := p
		workflowinitiatorcontext := make(map[string]interface{})
		workflowinitiatorcontext["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
		workflowinitiatorcontext["class_id"] = item.GetClassId()
		workflowinitiatorcontext["initiator_moid"] = item.GetInitiatorMoid()
		workflowinitiatorcontext["initiator_name"] = item.GetInitiatorName()
		workflowinitiatorcontext["initiator_type"] = item.GetInitiatorType()
		workflowinitiatorcontext["object_type"] = item.GetObjectType()

		workflowinitiatorcontexts = append(workflowinitiatorcontexts, workflowinitiatorcontext)
		return workflowinitiatorcontexts
	})(item.GetInitiatorCtx(), d)
	workflowworkflowctx["object_type"] = item.GetObjectType()
	workflowworkflowctx["target_ctx_list"] = (func(p []models.WorkflowTargetContext, d *schema.ResourceData) []map[string]interface{} {
		var workflowtargetcontexts []map[string]interface{}
		if len(p) == 0 {
			return nil
		}
		for _, item := range p {
			workflowtargetcontext := make(map[string]interface{})
			workflowtargetcontext["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
			workflowtargetcontext["class_id"] = item.GetClassId()
			workflowtargetcontext["object_type"] = item.GetObjectType()
			workflowtargetcontext["target_moid"] = item.GetTargetMoid()
			workflowtargetcontext["target_name"] = item.GetTargetName()
			workflowtargetcontext["target_type"] = item.GetTargetType()
			workflowtargetcontexts = append(workflowtargetcontexts, workflowtargetcontext)
		}
		return workflowtargetcontexts
	})(item.GetTargetCtxList(), d)
	workflowworkflowctx["workflow_subtype"] = item.GetWorkflowSubtype()
	workflowworkflowctx["workflow_type"] = item.GetWorkflowType()

	workflowworkflowctxs = append(workflowworkflowctxs, workflowworkflowctx)
	return workflowworkflowctxs
}
func flattenMapWorkflowWorkflowDefinitionRelationship(p models.WorkflowWorkflowDefinitionRelationship, d *schema.ResourceData) []map[string]interface{} {
	var workflowworkflowdefinitionrelationships []map[string]interface{}
	var ret models.WorkflowWorkflowDefinitionRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	workflowworkflowdefinitionrelationship := make(map[string]interface{})
	workflowworkflowdefinitionrelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	workflowworkflowdefinitionrelationship["class_id"] = item.GetClassId()
	workflowworkflowdefinitionrelationship["moid"] = item.GetMoid()
	workflowworkflowdefinitionrelationship["object_type"] = item.GetObjectType()
	workflowworkflowdefinitionrelationship["selector"] = item.GetSelector()

	workflowworkflowdefinitionrelationships = append(workflowworkflowdefinitionrelationships, workflowworkflowdefinitionrelationship)
	return workflowworkflowdefinitionrelationships
}
func flattenMapWorkflowWorkflowInfoRelationship(p models.WorkflowWorkflowInfoRelationship, d *schema.ResourceData) []map[string]interface{} {
	var workflowworkflowinforelationships []map[string]interface{}
	var ret models.WorkflowWorkflowInfoRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	workflowworkflowinforelationship := make(map[string]interface{})
	workflowworkflowinforelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	workflowworkflowinforelationship["class_id"] = item.GetClassId()
	workflowworkflowinforelationship["moid"] = item.GetMoid()
	workflowworkflowinforelationship["object_type"] = item.GetObjectType()
	workflowworkflowinforelationship["selector"] = item.GetSelector()

	workflowworkflowinforelationships = append(workflowworkflowinforelationships, workflowworkflowinforelationship)
	return workflowworkflowinforelationships
}
func flattenMapWorkflowWorkflowInfoProperties(p models.WorkflowWorkflowInfoProperties, d *schema.ResourceData) []map[string]interface{} {
	var workflowworkflowinfopropertiess []map[string]interface{}
	var ret models.WorkflowWorkflowInfoProperties
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	item := p
	workflowworkflowinfoproperties := make(map[string]interface{})
	workflowworkflowinfoproperties["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	workflowworkflowinfoproperties["cancelable"] = (func(p models.WorkflowCancelableType, d *schema.ResourceData) []map[string]interface{} {
		var workflowcancelabletypes []map[string]interface{}
		var ret models.WorkflowCancelableType
		if reflect.DeepEqual(ret, p) {
			return nil
		}
		item := p
		workflowcancelabletype := make(map[string]interface{})
		workflowcancelabletype["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
		workflowcancelabletype["cancelable_states"] = item.GetCancelableStates()
		workflowcancelabletype["class_id"] = item.GetClassId()
		workflowcancelabletype["enabled"] = item.GetEnabled()
		workflowcancelabletype["mode"] = item.GetMode()
		workflowcancelabletype["object_type"] = item.GetObjectType()

		workflowcancelabletypes = append(workflowcancelabletypes, workflowcancelabletype)
		return workflowcancelabletypes
	})(item.GetCancelable(), d)
	workflowworkflowinfoproperties["class_id"] = item.GetClassId()
	workflowworkflowinfoproperties["object_type"] = item.GetObjectType()
	workflowworkflowinfoproperties["retryable"] = item.GetRetryable()
	workflowworkflowinfoproperties["rollback_action"] = item.GetRollbackAction()
	workflowworkflowinfoproperties["rollback_on_cancel"] = item.GetRollbackOnCancel()
	workflowworkflowinfoproperties["rollback_on_failure"] = item.GetRollbackOnFailure()

	workflowworkflowinfopropertiess = append(workflowworkflowinfopropertiess, workflowworkflowinfoproperties)
	return workflowworkflowinfopropertiess
}
func flattenMapWorkflowWorkflowMetadataRelationship(p models.WorkflowWorkflowMetadataRelationship, d *schema.ResourceData) []map[string]interface{} {
	var workflowworkflowmetadatarelationships []map[string]interface{}
	var ret models.WorkflowWorkflowMetadataRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	workflowworkflowmetadatarelationship := make(map[string]interface{})
	workflowworkflowmetadatarelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	workflowworkflowmetadatarelationship["class_id"] = item.GetClassId()
	workflowworkflowmetadatarelationship["moid"] = item.GetMoid()
	workflowworkflowmetadatarelationship["object_type"] = item.GetObjectType()
	workflowworkflowmetadatarelationship["selector"] = item.GetSelector()

	workflowworkflowmetadatarelationships = append(workflowworkflowmetadatarelationships, workflowworkflowmetadatarelationship)
	return workflowworkflowmetadatarelationships
}
func flattenMapWorkflowWorkflowProperties(p models.WorkflowWorkflowProperties, d *schema.ResourceData) []map[string]interface{} {
	var workflowworkflowpropertiess []map[string]interface{}
	var ret models.WorkflowWorkflowProperties
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	item := p
	workflowworkflowproperties := make(map[string]interface{})
	workflowworkflowproperties["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	workflowworkflowproperties["class_id"] = item.GetClassId()
	workflowworkflowproperties["cloneable"] = item.GetCloneable()
	workflowworkflowproperties["enable_debug"] = item.GetEnableDebug()
	workflowworkflowproperties["enable_publish_status"] = item.GetEnablePublishStatus()
	workflowworkflowproperties["external_meta"] = item.GetExternalMeta()
	workflowworkflowproperties["object_type"] = item.GetObjectType()
	workflowworkflowproperties["publish_status"] = item.GetPublishStatus()
	workflowworkflowproperties["retryable"] = item.GetRetryable()
	workflowworkflowproperties["rollback_on_cancel"] = item.GetRollbackOnCancel()
	workflowworkflowproperties["rollback_on_failure"] = item.GetRollbackOnFailure()
	workflowworkflowproperties["support_status"] = item.GetSupportStatus()

	workflowworkflowpropertiess = append(workflowworkflowpropertiess, workflowworkflowproperties)
	return workflowworkflowpropertiess
}
func flattenMapWorkspaceFolderRelationship(p models.WorkspaceFolderRelationship, d *schema.ResourceData) []map[string]interface{} {
	var workspacefolderrelationships []map[string]interface{}
	var ret models.WorkspaceFolderRelationship
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	x := p
	item := x.MoMoRef
	workspacefolderrelationship := make(map[string]interface{})
	workspacefolderrelationship["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	workspacefolderrelationship["class_id"] = item.GetClassId()
	workspacefolderrelationship["moid"] = item.GetMoid()
	workspacefolderrelationship["object_type"] = item.GetObjectType()
	workspacefolderrelationship["selector"] = item.GetSelector()

	workspacefolderrelationships = append(workspacefolderrelationships, workspacefolderrelationship)
	return workspacefolderrelationships
}
func flattenMapX509Certificate(p models.X509Certificate, d *schema.ResourceData) []map[string]interface{} {
	var x509certificates []map[string]interface{}
	var ret models.X509Certificate
	if reflect.DeepEqual(ret, p) {
		return nil
	}
	item := p
	x509certificate := make(map[string]interface{})
	x509certificate["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
	x509certificate["class_id"] = item.GetClassId()
	x509certificate["issuer"] = (func(p models.PkixDistinguishedName, d *schema.ResourceData) []map[string]interface{} {
		var pkixdistinguishednames []map[string]interface{}
		var ret models.PkixDistinguishedName
		if reflect.DeepEqual(ret, p) {
			return nil
		}
		item := p
		pkixdistinguishedname := make(map[string]interface{})
		pkixdistinguishedname["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
		pkixdistinguishedname["class_id"] = item.GetClassId()
		pkixdistinguishedname["common_name"] = item.GetCommonName()
		pkixdistinguishedname["country"] = item.GetCountry()
		pkixdistinguishedname["locality"] = item.GetLocality()
		pkixdistinguishedname["object_type"] = item.GetObjectType()
		pkixdistinguishedname["organization"] = item.GetOrganization()
		pkixdistinguishedname["organizational_unit"] = item.GetOrganizationalUnit()
		pkixdistinguishedname["state"] = item.GetState()

		pkixdistinguishednames = append(pkixdistinguishednames, pkixdistinguishedname)
		return pkixdistinguishednames
	})(item.GetIssuer(), d)
	x509certificate["not_after"] = item.GetNotAfter().String()
	x509certificate["not_before"] = item.GetNotBefore().String()
	x509certificate["object_type"] = item.GetObjectType()
	x509certificate["pem_certificate"] = item.GetPemCertificate()
	x509certificate["sha256_fingerprint"] = item.GetSha256Fingerprint()
	x509certificate["signature_algorithm"] = item.GetSignatureAlgorithm()
	x509certificate["subject"] = (func(p models.PkixDistinguishedName, d *schema.ResourceData) []map[string]interface{} {
		var pkixdistinguishednames []map[string]interface{}
		var ret models.PkixDistinguishedName
		if reflect.DeepEqual(ret, p) {
			return nil
		}
		item := p
		pkixdistinguishedname := make(map[string]interface{})
		pkixdistinguishedname["additional_properties"] = flattenAdditionalProperties(item.AdditionalProperties)
		pkixdistinguishedname["class_id"] = item.GetClassId()
		pkixdistinguishedname["common_name"] = item.GetCommonName()
		pkixdistinguishedname["country"] = item.GetCountry()
		pkixdistinguishedname["locality"] = item.GetLocality()
		pkixdistinguishedname["object_type"] = item.GetObjectType()
		pkixdistinguishedname["organization"] = item.GetOrganization()
		pkixdistinguishedname["organizational_unit"] = item.GetOrganizationalUnit()
		pkixdistinguishedname["state"] = item.GetState()

		pkixdistinguishednames = append(pkixdistinguishednames, pkixdistinguishedname)
		return pkixdistinguishednames
	})(item.GetSubject(), d)

	x509certificates = append(x509certificates, x509certificate)
	return x509certificates
}
