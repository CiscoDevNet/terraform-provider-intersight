/*
Cisco Intersight

Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations. The Intersight OpenAPI document defines the complete set of properties that are returned in the HTTP response. From that perspective, a client can expect that no additional properties are returned, unless these properties are explicitly defined in the OpenAPI document. However, when a client uses an older version of the Intersight OpenAPI document, the server may send additional properties because the software is more recent than the client. In that case, the client may receive properties that it does not know about. Some generated SDKs perform a strict validation of the HTTP response body against the OpenAPI document.

API version: 1.0.11-2025091920
Contact: intersight@cisco.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package intersight

import (
	"encoding/json"
	"fmt"
	"reflect"
	"strings"
)

// checks if the IamAbstractClientApplication type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &IamAbstractClientApplication{}

// IamAbstractClientApplication Describes an internal application registered against an endpoint in Intersight. The application receives requests specific to  its use case and these requests require authentication via bearer token validations. The SCIM Client and WebHook Event Receiver Endpoints are such examples.
type IamAbstractClientApplication struct {
	MoBaseMo
	// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data. The enum values provides the list of concrete types that can be instantiated from this abstract type.
	ClassId string `json:"ClassId"`
	// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property. The enum values provides the list of concrete types that can be instantiated from this abstract type.
	ObjectType     string                    `json:"ObjectType"`
	AppCredentials NullableIamAppCredentials `json:"AppCredentials,omitempty"`
	// Type of authentication used by the clientApp. * `basic` - The client uses basic username/password authentication. The password is expected to be a JWT token. * `none` - No authentication method specified by the client. * `bearer-token` - The client uses a long-lived bearer token to authenticate. * `auth-code` - The client uses OAuth Authorization Grant Flow without PKCE for authentication. * `client-credentials` - The client uses OAuth Client Credentials Flow for authentication.
	AuthType *string `json:"AuthType,omitempty"`
	// An action to be performed on the credentials. * `none` - No action to be performed. * `regenerateCredentials` - Allows for revocation and regeneration of a token. The old token associated with the client application. will not be usable and a new token will be generated.
	CredentialsAction    *string                                `json:"CredentialsAction,omitempty"`
	AppRegistration      NullableIamAppRegistrationRelationship `json:"AppRegistration,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _IamAbstractClientApplication IamAbstractClientApplication

// NewIamAbstractClientApplication instantiates a new IamAbstractClientApplication object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIamAbstractClientApplication(classId string, objectType string) *IamAbstractClientApplication {
	this := IamAbstractClientApplication{}
	this.ClassId = classId
	this.ObjectType = objectType
	var authType string = "basic"
	this.AuthType = &authType
	var credentialsAction string = "none"
	this.CredentialsAction = &credentialsAction
	return &this
}

// NewIamAbstractClientApplicationWithDefaults instantiates a new IamAbstractClientApplication object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIamAbstractClientApplicationWithDefaults() *IamAbstractClientApplication {
	this := IamAbstractClientApplication{}
	var classId string = "webhook.Endpoint"
	this.ClassId = classId
	var objectType string = "webhook.Endpoint"
	this.ObjectType = objectType
	var authType string = "basic"
	this.AuthType = &authType
	var credentialsAction string = "none"
	this.CredentialsAction = &credentialsAction
	return &this
}

// GetClassId returns the ClassId field value
func (o *IamAbstractClientApplication) GetClassId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ClassId
}

// GetClassIdOk returns a tuple with the ClassId field value
// and a boolean to check if the value has been set.
func (o *IamAbstractClientApplication) GetClassIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ClassId, true
}

// SetClassId sets field value
func (o *IamAbstractClientApplication) SetClassId(v string) {
	o.ClassId = v
}

// GetDefaultClassId returns the default value "webhook.Endpoint" of the ClassId field.
func (o *IamAbstractClientApplication) GetDefaultClassId() interface{} {
	return "webhook.Endpoint"
}

// GetObjectType returns the ObjectType field value
func (o *IamAbstractClientApplication) GetObjectType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ObjectType
}

// GetObjectTypeOk returns a tuple with the ObjectType field value
// and a boolean to check if the value has been set.
func (o *IamAbstractClientApplication) GetObjectTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ObjectType, true
}

// SetObjectType sets field value
func (o *IamAbstractClientApplication) SetObjectType(v string) {
	o.ObjectType = v
}

// GetDefaultObjectType returns the default value "webhook.Endpoint" of the ObjectType field.
func (o *IamAbstractClientApplication) GetDefaultObjectType() interface{} {
	return "webhook.Endpoint"
}

// GetAppCredentials returns the AppCredentials field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IamAbstractClientApplication) GetAppCredentials() IamAppCredentials {
	if o == nil || IsNil(o.AppCredentials.Get()) {
		var ret IamAppCredentials
		return ret
	}
	return *o.AppCredentials.Get()
}

// GetAppCredentialsOk returns a tuple with the AppCredentials field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IamAbstractClientApplication) GetAppCredentialsOk() (*IamAppCredentials, bool) {
	if o == nil {
		return nil, false
	}
	return o.AppCredentials.Get(), o.AppCredentials.IsSet()
}

// HasAppCredentials returns a boolean if a field has been set.
func (o *IamAbstractClientApplication) HasAppCredentials() bool {
	if o != nil && o.AppCredentials.IsSet() {
		return true
	}

	return false
}

// SetAppCredentials gets a reference to the given NullableIamAppCredentials and assigns it to the AppCredentials field.
func (o *IamAbstractClientApplication) SetAppCredentials(v IamAppCredentials) {
	o.AppCredentials.Set(&v)
}

// SetAppCredentialsNil sets the value for AppCredentials to be an explicit nil
func (o *IamAbstractClientApplication) SetAppCredentialsNil() {
	o.AppCredentials.Set(nil)
}

// UnsetAppCredentials ensures that no value is present for AppCredentials, not even an explicit nil
func (o *IamAbstractClientApplication) UnsetAppCredentials() {
	o.AppCredentials.Unset()
}

// GetAuthType returns the AuthType field value if set, zero value otherwise.
func (o *IamAbstractClientApplication) GetAuthType() string {
	if o == nil || IsNil(o.AuthType) {
		var ret string
		return ret
	}
	return *o.AuthType
}

// GetAuthTypeOk returns a tuple with the AuthType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IamAbstractClientApplication) GetAuthTypeOk() (*string, bool) {
	if o == nil || IsNil(o.AuthType) {
		return nil, false
	}
	return o.AuthType, true
}

// HasAuthType returns a boolean if a field has been set.
func (o *IamAbstractClientApplication) HasAuthType() bool {
	if o != nil && !IsNil(o.AuthType) {
		return true
	}

	return false
}

// SetAuthType gets a reference to the given string and assigns it to the AuthType field.
func (o *IamAbstractClientApplication) SetAuthType(v string) {
	o.AuthType = &v
}

// GetCredentialsAction returns the CredentialsAction field value if set, zero value otherwise.
func (o *IamAbstractClientApplication) GetCredentialsAction() string {
	if o == nil || IsNil(o.CredentialsAction) {
		var ret string
		return ret
	}
	return *o.CredentialsAction
}

// GetCredentialsActionOk returns a tuple with the CredentialsAction field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IamAbstractClientApplication) GetCredentialsActionOk() (*string, bool) {
	if o == nil || IsNil(o.CredentialsAction) {
		return nil, false
	}
	return o.CredentialsAction, true
}

// HasCredentialsAction returns a boolean if a field has been set.
func (o *IamAbstractClientApplication) HasCredentialsAction() bool {
	if o != nil && !IsNil(o.CredentialsAction) {
		return true
	}

	return false
}

// SetCredentialsAction gets a reference to the given string and assigns it to the CredentialsAction field.
func (o *IamAbstractClientApplication) SetCredentialsAction(v string) {
	o.CredentialsAction = &v
}

// GetAppRegistration returns the AppRegistration field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IamAbstractClientApplication) GetAppRegistration() IamAppRegistrationRelationship {
	if o == nil || IsNil(o.AppRegistration.Get()) {
		var ret IamAppRegistrationRelationship
		return ret
	}
	return *o.AppRegistration.Get()
}

// GetAppRegistrationOk returns a tuple with the AppRegistration field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IamAbstractClientApplication) GetAppRegistrationOk() (*IamAppRegistrationRelationship, bool) {
	if o == nil {
		return nil, false
	}
	return o.AppRegistration.Get(), o.AppRegistration.IsSet()
}

// HasAppRegistration returns a boolean if a field has been set.
func (o *IamAbstractClientApplication) HasAppRegistration() bool {
	if o != nil && o.AppRegistration.IsSet() {
		return true
	}

	return false
}

// SetAppRegistration gets a reference to the given NullableIamAppRegistrationRelationship and assigns it to the AppRegistration field.
func (o *IamAbstractClientApplication) SetAppRegistration(v IamAppRegistrationRelationship) {
	o.AppRegistration.Set(&v)
}

// SetAppRegistrationNil sets the value for AppRegistration to be an explicit nil
func (o *IamAbstractClientApplication) SetAppRegistrationNil() {
	o.AppRegistration.Set(nil)
}

// UnsetAppRegistration ensures that no value is present for AppRegistration, not even an explicit nil
func (o *IamAbstractClientApplication) UnsetAppRegistration() {
	o.AppRegistration.Unset()
}

func (o IamAbstractClientApplication) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IamAbstractClientApplication) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	serializedMoBaseMo, errMoBaseMo := json.Marshal(o.MoBaseMo)
	if errMoBaseMo != nil {
		return map[string]interface{}{}, errMoBaseMo
	}
	errMoBaseMo = json.Unmarshal([]byte(serializedMoBaseMo), &toSerialize)
	if errMoBaseMo != nil {
		return map[string]interface{}{}, errMoBaseMo
	}
	if _, exists := toSerialize["ClassId"]; !exists {
		toSerialize["ClassId"] = o.GetDefaultClassId()
	}
	toSerialize["ClassId"] = o.ClassId
	if _, exists := toSerialize["ObjectType"]; !exists {
		toSerialize["ObjectType"] = o.GetDefaultObjectType()
	}
	toSerialize["ObjectType"] = o.ObjectType
	if o.AppCredentials.IsSet() {
		toSerialize["AppCredentials"] = o.AppCredentials.Get()
	}
	if !IsNil(o.AuthType) {
		toSerialize["AuthType"] = o.AuthType
	}
	if !IsNil(o.CredentialsAction) {
		toSerialize["CredentialsAction"] = o.CredentialsAction
	}
	if o.AppRegistration.IsSet() {
		toSerialize["AppRegistration"] = o.AppRegistration.Get()
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *IamAbstractClientApplication) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"ClassId",
		"ObjectType",
	}

	// defaultValueFuncMap captures the default values for required properties.
	// These values are used when required properties are missing from the payload.
	defaultValueFuncMap := map[string]func() interface{}{
		"ClassId":    o.GetDefaultClassId,
		"ObjectType": o.GetDefaultObjectType,
	}
	var defaultValueApplied bool
	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			if _, ok := defaultValueFuncMap[requiredProperty]; ok {
				allProperties[requiredProperty] = defaultValueFuncMap[requiredProperty]()
				defaultValueApplied = true
			}
		}
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	if defaultValueApplied {
		data, err = json.Marshal(allProperties)
		if err != nil {
			return err
		}
	}
	type IamAbstractClientApplicationWithoutEmbeddedStruct struct {
		// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data. The enum values provides the list of concrete types that can be instantiated from this abstract type.
		ClassId string `json:"ClassId"`
		// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property. The enum values provides the list of concrete types that can be instantiated from this abstract type.
		ObjectType     string                    `json:"ObjectType"`
		AppCredentials NullableIamAppCredentials `json:"AppCredentials,omitempty"`
		// Type of authentication used by the clientApp. * `basic` - The client uses basic username/password authentication. The password is expected to be a JWT token. * `none` - No authentication method specified by the client. * `bearer-token` - The client uses a long-lived bearer token to authenticate. * `auth-code` - The client uses OAuth Authorization Grant Flow without PKCE for authentication. * `client-credentials` - The client uses OAuth Client Credentials Flow for authentication.
		AuthType *string `json:"AuthType,omitempty"`
		// An action to be performed on the credentials. * `none` - No action to be performed. * `regenerateCredentials` - Allows for revocation and regeneration of a token. The old token associated with the client application. will not be usable and a new token will be generated.
		CredentialsAction *string                                `json:"CredentialsAction,omitempty"`
		AppRegistration   NullableIamAppRegistrationRelationship `json:"AppRegistration,omitempty"`
	}

	varIamAbstractClientApplicationWithoutEmbeddedStruct := IamAbstractClientApplicationWithoutEmbeddedStruct{}

	err = json.Unmarshal(data, &varIamAbstractClientApplicationWithoutEmbeddedStruct)
	if err == nil {
		varIamAbstractClientApplication := _IamAbstractClientApplication{}
		varIamAbstractClientApplication.ClassId = varIamAbstractClientApplicationWithoutEmbeddedStruct.ClassId
		varIamAbstractClientApplication.ObjectType = varIamAbstractClientApplicationWithoutEmbeddedStruct.ObjectType
		varIamAbstractClientApplication.AppCredentials = varIamAbstractClientApplicationWithoutEmbeddedStruct.AppCredentials
		varIamAbstractClientApplication.AuthType = varIamAbstractClientApplicationWithoutEmbeddedStruct.AuthType
		varIamAbstractClientApplication.CredentialsAction = varIamAbstractClientApplicationWithoutEmbeddedStruct.CredentialsAction
		varIamAbstractClientApplication.AppRegistration = varIamAbstractClientApplicationWithoutEmbeddedStruct.AppRegistration
		*o = IamAbstractClientApplication(varIamAbstractClientApplication)
	} else {
		return err
	}

	varIamAbstractClientApplication := _IamAbstractClientApplication{}

	err = json.Unmarshal(data, &varIamAbstractClientApplication)
	if err == nil {
		o.MoBaseMo = varIamAbstractClientApplication.MoBaseMo
	} else {
		return err
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "ClassId")
		delete(additionalProperties, "ObjectType")
		delete(additionalProperties, "AppCredentials")
		delete(additionalProperties, "AuthType")
		delete(additionalProperties, "CredentialsAction")
		delete(additionalProperties, "AppRegistration")

		// remove fields from embedded structs
		reflectMoBaseMo := reflect.ValueOf(o.MoBaseMo)
		for i := 0; i < reflectMoBaseMo.Type().NumField(); i++ {
			t := reflectMoBaseMo.Type().Field(i)

			if jsonTag := t.Tag.Get("json"); jsonTag != "" {
				fieldName := ""
				if commaIdx := strings.Index(jsonTag, ","); commaIdx > 0 {
					fieldName = jsonTag[:commaIdx]
				} else {
					fieldName = jsonTag
				}
				if fieldName != "AdditionalProperties" {
					delete(additionalProperties, fieldName)
				}
			}
		}

		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableIamAbstractClientApplication struct {
	value *IamAbstractClientApplication
	isSet bool
}

func (v NullableIamAbstractClientApplication) Get() *IamAbstractClientApplication {
	return v.value
}

func (v *NullableIamAbstractClientApplication) Set(val *IamAbstractClientApplication) {
	v.value = val
	v.isSet = true
}

func (v NullableIamAbstractClientApplication) IsSet() bool {
	return v.isSet
}

func (v *NullableIamAbstractClientApplication) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIamAbstractClientApplication(val *IamAbstractClientApplication) *NullableIamAbstractClientApplication {
	return &NullableIamAbstractClientApplication{value: val, isSet: true}
}

func (v NullableIamAbstractClientApplication) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIamAbstractClientApplication) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
