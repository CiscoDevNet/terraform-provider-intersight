/*
Cisco Intersight

Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations. The Intersight OpenAPI document defines the complete set of properties that are returned in the HTTP response. From that perspective, a client can expect that no additional properties are returned, unless these properties are explicitly defined in the OpenAPI document. However, when a client uses an older version of the Intersight OpenAPI document, the server may send additional properties because the software is more recent than the client. In that case, the client may receive properties that it does not know about. Some generated SDKs perform a strict validation of the HTTP response body against the OpenAPI document.

API version: 1.0.11-2024100405
Contact: intersight@cisco.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package intersight

import (
	"encoding/json"
	"fmt"
	"reflect"
	"strings"
)

// checks if the StorageHitachiExternalParityGroup type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &StorageHitachiExternalParityGroup{}

// StorageHitachiExternalParityGroup A external parity group in Hitachi storage array.
type StorageHitachiExternalParityGroup struct {
	MoBaseMo
	// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.
	ClassId string `json:"ClassId"`
	// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
	ObjectType string `json:"ObjectType"`
	// From among the open volumes in the external parity group, the total capacity of volumes to which paths can be allocated (KB).
	AllocatableOpenVolumeCapacity *int64 `json:"AllocatableOpenVolumeCapacity,omitempty"`
	// From among the open volumes in the external parity group, the total capacity of volumes to which paths are allocated (KB).
	AllocatedOpenVolumeCapacity *int64 `json:"AllocatedOpenVolumeCapacity,omitempty"`
	// Available capacity of the external parity group, represented in bytes.
	AvailableVolumeCapacity *int64 `json:"AvailableVolumeCapacity,omitempty"`
	// Number of CLPR to which the external parity group belongs.
	ClprId *int64 `json:"ClprId,omitempty"`
	// Emulation type of the external parity group.
	EmulationType *string `json:"EmulationType,omitempty"`
	// Storage system that is connected using the external storage connection functionality of Universal Volume Manager.
	ExternalProductId *string `json:"ExternalProductId,omitempty"`
	// Maximum capacity of the non-volume areas in the external parity group (KB).
	LargestAvailableCapacity *int64 `json:"LargestAvailableCapacity,omitempty"`
	// External parity group number.
	Name *string `json:"Name,omitempty"`
	// From among the open volumes in the external parity group, the total capacity of volumes which are reserved (KB).
	ReservedOpenVolumeCapacity *int64                  `json:"ReservedOpenVolumeCapacity,omitempty"`
	Spaces                     []StorageSpace          `json:"Spaces,omitempty"`
	StorageUtilization         *StorageHitachiCapacity `json:"StorageUtilization,omitempty"`
	// Total volume capacity of the open volumes in the external parity group (KB).
	TotalOpenVolumeCapacity *int64 `json:"TotalOpenVolumeCapacity,omitempty"`
	// From among the open volumes in the external parity group, the total capacity of volumes to which paths are not allocated (KB).
	UnallocatedOpenVolumeCapacity *int64 `json:"UnallocatedOpenVolumeCapacity,omitempty"`
	// Usage rate of the external parity group.
	UsedCapacityRate     *int64                                      `json:"UsedCapacityRate,omitempty"`
	Array                NullableStorageHitachiArrayRelationship     `json:"Array,omitempty"`
	RegisteredDevice     NullableAssetDeviceRegistrationRelationship `json:"RegisteredDevice,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _StorageHitachiExternalParityGroup StorageHitachiExternalParityGroup

// NewStorageHitachiExternalParityGroup instantiates a new StorageHitachiExternalParityGroup object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStorageHitachiExternalParityGroup(classId string, objectType string) *StorageHitachiExternalParityGroup {
	this := StorageHitachiExternalParityGroup{}
	this.ClassId = classId
	this.ObjectType = objectType
	return &this
}

// NewStorageHitachiExternalParityGroupWithDefaults instantiates a new StorageHitachiExternalParityGroup object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStorageHitachiExternalParityGroupWithDefaults() *StorageHitachiExternalParityGroup {
	this := StorageHitachiExternalParityGroup{}
	var classId string = "storage.HitachiExternalParityGroup"
	this.ClassId = classId
	var objectType string = "storage.HitachiExternalParityGroup"
	this.ObjectType = objectType
	return &this
}

// GetClassId returns the ClassId field value
func (o *StorageHitachiExternalParityGroup) GetClassId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ClassId
}

// GetClassIdOk returns a tuple with the ClassId field value
// and a boolean to check if the value has been set.
func (o *StorageHitachiExternalParityGroup) GetClassIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ClassId, true
}

// SetClassId sets field value
func (o *StorageHitachiExternalParityGroup) SetClassId(v string) {
	o.ClassId = v
}

// GetDefaultClassId returns the default value "storage.HitachiExternalParityGroup" of the ClassId field.
func (o *StorageHitachiExternalParityGroup) GetDefaultClassId() interface{} {
	return "storage.HitachiExternalParityGroup"
}

// GetObjectType returns the ObjectType field value
func (o *StorageHitachiExternalParityGroup) GetObjectType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ObjectType
}

// GetObjectTypeOk returns a tuple with the ObjectType field value
// and a boolean to check if the value has been set.
func (o *StorageHitachiExternalParityGroup) GetObjectTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ObjectType, true
}

// SetObjectType sets field value
func (o *StorageHitachiExternalParityGroup) SetObjectType(v string) {
	o.ObjectType = v
}

// GetDefaultObjectType returns the default value "storage.HitachiExternalParityGroup" of the ObjectType field.
func (o *StorageHitachiExternalParityGroup) GetDefaultObjectType() interface{} {
	return "storage.HitachiExternalParityGroup"
}

// GetAllocatableOpenVolumeCapacity returns the AllocatableOpenVolumeCapacity field value if set, zero value otherwise.
func (o *StorageHitachiExternalParityGroup) GetAllocatableOpenVolumeCapacity() int64 {
	if o == nil || IsNil(o.AllocatableOpenVolumeCapacity) {
		var ret int64
		return ret
	}
	return *o.AllocatableOpenVolumeCapacity
}

// GetAllocatableOpenVolumeCapacityOk returns a tuple with the AllocatableOpenVolumeCapacity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageHitachiExternalParityGroup) GetAllocatableOpenVolumeCapacityOk() (*int64, bool) {
	if o == nil || IsNil(o.AllocatableOpenVolumeCapacity) {
		return nil, false
	}
	return o.AllocatableOpenVolumeCapacity, true
}

// HasAllocatableOpenVolumeCapacity returns a boolean if a field has been set.
func (o *StorageHitachiExternalParityGroup) HasAllocatableOpenVolumeCapacity() bool {
	if o != nil && !IsNil(o.AllocatableOpenVolumeCapacity) {
		return true
	}

	return false
}

// SetAllocatableOpenVolumeCapacity gets a reference to the given int64 and assigns it to the AllocatableOpenVolumeCapacity field.
func (o *StorageHitachiExternalParityGroup) SetAllocatableOpenVolumeCapacity(v int64) {
	o.AllocatableOpenVolumeCapacity = &v
}

// GetAllocatedOpenVolumeCapacity returns the AllocatedOpenVolumeCapacity field value if set, zero value otherwise.
func (o *StorageHitachiExternalParityGroup) GetAllocatedOpenVolumeCapacity() int64 {
	if o == nil || IsNil(o.AllocatedOpenVolumeCapacity) {
		var ret int64
		return ret
	}
	return *o.AllocatedOpenVolumeCapacity
}

// GetAllocatedOpenVolumeCapacityOk returns a tuple with the AllocatedOpenVolumeCapacity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageHitachiExternalParityGroup) GetAllocatedOpenVolumeCapacityOk() (*int64, bool) {
	if o == nil || IsNil(o.AllocatedOpenVolumeCapacity) {
		return nil, false
	}
	return o.AllocatedOpenVolumeCapacity, true
}

// HasAllocatedOpenVolumeCapacity returns a boolean if a field has been set.
func (o *StorageHitachiExternalParityGroup) HasAllocatedOpenVolumeCapacity() bool {
	if o != nil && !IsNil(o.AllocatedOpenVolumeCapacity) {
		return true
	}

	return false
}

// SetAllocatedOpenVolumeCapacity gets a reference to the given int64 and assigns it to the AllocatedOpenVolumeCapacity field.
func (o *StorageHitachiExternalParityGroup) SetAllocatedOpenVolumeCapacity(v int64) {
	o.AllocatedOpenVolumeCapacity = &v
}

// GetAvailableVolumeCapacity returns the AvailableVolumeCapacity field value if set, zero value otherwise.
func (o *StorageHitachiExternalParityGroup) GetAvailableVolumeCapacity() int64 {
	if o == nil || IsNil(o.AvailableVolumeCapacity) {
		var ret int64
		return ret
	}
	return *o.AvailableVolumeCapacity
}

// GetAvailableVolumeCapacityOk returns a tuple with the AvailableVolumeCapacity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageHitachiExternalParityGroup) GetAvailableVolumeCapacityOk() (*int64, bool) {
	if o == nil || IsNil(o.AvailableVolumeCapacity) {
		return nil, false
	}
	return o.AvailableVolumeCapacity, true
}

// HasAvailableVolumeCapacity returns a boolean if a field has been set.
func (o *StorageHitachiExternalParityGroup) HasAvailableVolumeCapacity() bool {
	if o != nil && !IsNil(o.AvailableVolumeCapacity) {
		return true
	}

	return false
}

// SetAvailableVolumeCapacity gets a reference to the given int64 and assigns it to the AvailableVolumeCapacity field.
func (o *StorageHitachiExternalParityGroup) SetAvailableVolumeCapacity(v int64) {
	o.AvailableVolumeCapacity = &v
}

// GetClprId returns the ClprId field value if set, zero value otherwise.
func (o *StorageHitachiExternalParityGroup) GetClprId() int64 {
	if o == nil || IsNil(o.ClprId) {
		var ret int64
		return ret
	}
	return *o.ClprId
}

// GetClprIdOk returns a tuple with the ClprId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageHitachiExternalParityGroup) GetClprIdOk() (*int64, bool) {
	if o == nil || IsNil(o.ClprId) {
		return nil, false
	}
	return o.ClprId, true
}

// HasClprId returns a boolean if a field has been set.
func (o *StorageHitachiExternalParityGroup) HasClprId() bool {
	if o != nil && !IsNil(o.ClprId) {
		return true
	}

	return false
}

// SetClprId gets a reference to the given int64 and assigns it to the ClprId field.
func (o *StorageHitachiExternalParityGroup) SetClprId(v int64) {
	o.ClprId = &v
}

// GetEmulationType returns the EmulationType field value if set, zero value otherwise.
func (o *StorageHitachiExternalParityGroup) GetEmulationType() string {
	if o == nil || IsNil(o.EmulationType) {
		var ret string
		return ret
	}
	return *o.EmulationType
}

// GetEmulationTypeOk returns a tuple with the EmulationType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageHitachiExternalParityGroup) GetEmulationTypeOk() (*string, bool) {
	if o == nil || IsNil(o.EmulationType) {
		return nil, false
	}
	return o.EmulationType, true
}

// HasEmulationType returns a boolean if a field has been set.
func (o *StorageHitachiExternalParityGroup) HasEmulationType() bool {
	if o != nil && !IsNil(o.EmulationType) {
		return true
	}

	return false
}

// SetEmulationType gets a reference to the given string and assigns it to the EmulationType field.
func (o *StorageHitachiExternalParityGroup) SetEmulationType(v string) {
	o.EmulationType = &v
}

// GetExternalProductId returns the ExternalProductId field value if set, zero value otherwise.
func (o *StorageHitachiExternalParityGroup) GetExternalProductId() string {
	if o == nil || IsNil(o.ExternalProductId) {
		var ret string
		return ret
	}
	return *o.ExternalProductId
}

// GetExternalProductIdOk returns a tuple with the ExternalProductId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageHitachiExternalParityGroup) GetExternalProductIdOk() (*string, bool) {
	if o == nil || IsNil(o.ExternalProductId) {
		return nil, false
	}
	return o.ExternalProductId, true
}

// HasExternalProductId returns a boolean if a field has been set.
func (o *StorageHitachiExternalParityGroup) HasExternalProductId() bool {
	if o != nil && !IsNil(o.ExternalProductId) {
		return true
	}

	return false
}

// SetExternalProductId gets a reference to the given string and assigns it to the ExternalProductId field.
func (o *StorageHitachiExternalParityGroup) SetExternalProductId(v string) {
	o.ExternalProductId = &v
}

// GetLargestAvailableCapacity returns the LargestAvailableCapacity field value if set, zero value otherwise.
func (o *StorageHitachiExternalParityGroup) GetLargestAvailableCapacity() int64 {
	if o == nil || IsNil(o.LargestAvailableCapacity) {
		var ret int64
		return ret
	}
	return *o.LargestAvailableCapacity
}

// GetLargestAvailableCapacityOk returns a tuple with the LargestAvailableCapacity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageHitachiExternalParityGroup) GetLargestAvailableCapacityOk() (*int64, bool) {
	if o == nil || IsNil(o.LargestAvailableCapacity) {
		return nil, false
	}
	return o.LargestAvailableCapacity, true
}

// HasLargestAvailableCapacity returns a boolean if a field has been set.
func (o *StorageHitachiExternalParityGroup) HasLargestAvailableCapacity() bool {
	if o != nil && !IsNil(o.LargestAvailableCapacity) {
		return true
	}

	return false
}

// SetLargestAvailableCapacity gets a reference to the given int64 and assigns it to the LargestAvailableCapacity field.
func (o *StorageHitachiExternalParityGroup) SetLargestAvailableCapacity(v int64) {
	o.LargestAvailableCapacity = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *StorageHitachiExternalParityGroup) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageHitachiExternalParityGroup) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *StorageHitachiExternalParityGroup) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *StorageHitachiExternalParityGroup) SetName(v string) {
	o.Name = &v
}

// GetReservedOpenVolumeCapacity returns the ReservedOpenVolumeCapacity field value if set, zero value otherwise.
func (o *StorageHitachiExternalParityGroup) GetReservedOpenVolumeCapacity() int64 {
	if o == nil || IsNil(o.ReservedOpenVolumeCapacity) {
		var ret int64
		return ret
	}
	return *o.ReservedOpenVolumeCapacity
}

// GetReservedOpenVolumeCapacityOk returns a tuple with the ReservedOpenVolumeCapacity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageHitachiExternalParityGroup) GetReservedOpenVolumeCapacityOk() (*int64, bool) {
	if o == nil || IsNil(o.ReservedOpenVolumeCapacity) {
		return nil, false
	}
	return o.ReservedOpenVolumeCapacity, true
}

// HasReservedOpenVolumeCapacity returns a boolean if a field has been set.
func (o *StorageHitachiExternalParityGroup) HasReservedOpenVolumeCapacity() bool {
	if o != nil && !IsNil(o.ReservedOpenVolumeCapacity) {
		return true
	}

	return false
}

// SetReservedOpenVolumeCapacity gets a reference to the given int64 and assigns it to the ReservedOpenVolumeCapacity field.
func (o *StorageHitachiExternalParityGroup) SetReservedOpenVolumeCapacity(v int64) {
	o.ReservedOpenVolumeCapacity = &v
}

// GetSpaces returns the Spaces field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *StorageHitachiExternalParityGroup) GetSpaces() []StorageSpace {
	if o == nil {
		var ret []StorageSpace
		return ret
	}
	return o.Spaces
}

// GetSpacesOk returns a tuple with the Spaces field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *StorageHitachiExternalParityGroup) GetSpacesOk() ([]StorageSpace, bool) {
	if o == nil || IsNil(o.Spaces) {
		return nil, false
	}
	return o.Spaces, true
}

// HasSpaces returns a boolean if a field has been set.
func (o *StorageHitachiExternalParityGroup) HasSpaces() bool {
	if o != nil && !IsNil(o.Spaces) {
		return true
	}

	return false
}

// SetSpaces gets a reference to the given []StorageSpace and assigns it to the Spaces field.
func (o *StorageHitachiExternalParityGroup) SetSpaces(v []StorageSpace) {
	o.Spaces = v
}

// GetStorageUtilization returns the StorageUtilization field value if set, zero value otherwise.
func (o *StorageHitachiExternalParityGroup) GetStorageUtilization() StorageHitachiCapacity {
	if o == nil || IsNil(o.StorageUtilization) {
		var ret StorageHitachiCapacity
		return ret
	}
	return *o.StorageUtilization
}

// GetStorageUtilizationOk returns a tuple with the StorageUtilization field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageHitachiExternalParityGroup) GetStorageUtilizationOk() (*StorageHitachiCapacity, bool) {
	if o == nil || IsNil(o.StorageUtilization) {
		return nil, false
	}
	return o.StorageUtilization, true
}

// HasStorageUtilization returns a boolean if a field has been set.
func (o *StorageHitachiExternalParityGroup) HasStorageUtilization() bool {
	if o != nil && !IsNil(o.StorageUtilization) {
		return true
	}

	return false
}

// SetStorageUtilization gets a reference to the given StorageHitachiCapacity and assigns it to the StorageUtilization field.
func (o *StorageHitachiExternalParityGroup) SetStorageUtilization(v StorageHitachiCapacity) {
	o.StorageUtilization = &v
}

// GetTotalOpenVolumeCapacity returns the TotalOpenVolumeCapacity field value if set, zero value otherwise.
func (o *StorageHitachiExternalParityGroup) GetTotalOpenVolumeCapacity() int64 {
	if o == nil || IsNil(o.TotalOpenVolumeCapacity) {
		var ret int64
		return ret
	}
	return *o.TotalOpenVolumeCapacity
}

// GetTotalOpenVolumeCapacityOk returns a tuple with the TotalOpenVolumeCapacity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageHitachiExternalParityGroup) GetTotalOpenVolumeCapacityOk() (*int64, bool) {
	if o == nil || IsNil(o.TotalOpenVolumeCapacity) {
		return nil, false
	}
	return o.TotalOpenVolumeCapacity, true
}

// HasTotalOpenVolumeCapacity returns a boolean if a field has been set.
func (o *StorageHitachiExternalParityGroup) HasTotalOpenVolumeCapacity() bool {
	if o != nil && !IsNil(o.TotalOpenVolumeCapacity) {
		return true
	}

	return false
}

// SetTotalOpenVolumeCapacity gets a reference to the given int64 and assigns it to the TotalOpenVolumeCapacity field.
func (o *StorageHitachiExternalParityGroup) SetTotalOpenVolumeCapacity(v int64) {
	o.TotalOpenVolumeCapacity = &v
}

// GetUnallocatedOpenVolumeCapacity returns the UnallocatedOpenVolumeCapacity field value if set, zero value otherwise.
func (o *StorageHitachiExternalParityGroup) GetUnallocatedOpenVolumeCapacity() int64 {
	if o == nil || IsNil(o.UnallocatedOpenVolumeCapacity) {
		var ret int64
		return ret
	}
	return *o.UnallocatedOpenVolumeCapacity
}

// GetUnallocatedOpenVolumeCapacityOk returns a tuple with the UnallocatedOpenVolumeCapacity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageHitachiExternalParityGroup) GetUnallocatedOpenVolumeCapacityOk() (*int64, bool) {
	if o == nil || IsNil(o.UnallocatedOpenVolumeCapacity) {
		return nil, false
	}
	return o.UnallocatedOpenVolumeCapacity, true
}

// HasUnallocatedOpenVolumeCapacity returns a boolean if a field has been set.
func (o *StorageHitachiExternalParityGroup) HasUnallocatedOpenVolumeCapacity() bool {
	if o != nil && !IsNil(o.UnallocatedOpenVolumeCapacity) {
		return true
	}

	return false
}

// SetUnallocatedOpenVolumeCapacity gets a reference to the given int64 and assigns it to the UnallocatedOpenVolumeCapacity field.
func (o *StorageHitachiExternalParityGroup) SetUnallocatedOpenVolumeCapacity(v int64) {
	o.UnallocatedOpenVolumeCapacity = &v
}

// GetUsedCapacityRate returns the UsedCapacityRate field value if set, zero value otherwise.
func (o *StorageHitachiExternalParityGroup) GetUsedCapacityRate() int64 {
	if o == nil || IsNil(o.UsedCapacityRate) {
		var ret int64
		return ret
	}
	return *o.UsedCapacityRate
}

// GetUsedCapacityRateOk returns a tuple with the UsedCapacityRate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageHitachiExternalParityGroup) GetUsedCapacityRateOk() (*int64, bool) {
	if o == nil || IsNil(o.UsedCapacityRate) {
		return nil, false
	}
	return o.UsedCapacityRate, true
}

// HasUsedCapacityRate returns a boolean if a field has been set.
func (o *StorageHitachiExternalParityGroup) HasUsedCapacityRate() bool {
	if o != nil && !IsNil(o.UsedCapacityRate) {
		return true
	}

	return false
}

// SetUsedCapacityRate gets a reference to the given int64 and assigns it to the UsedCapacityRate field.
func (o *StorageHitachiExternalParityGroup) SetUsedCapacityRate(v int64) {
	o.UsedCapacityRate = &v
}

// GetArray returns the Array field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *StorageHitachiExternalParityGroup) GetArray() StorageHitachiArrayRelationship {
	if o == nil || IsNil(o.Array.Get()) {
		var ret StorageHitachiArrayRelationship
		return ret
	}
	return *o.Array.Get()
}

// GetArrayOk returns a tuple with the Array field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *StorageHitachiExternalParityGroup) GetArrayOk() (*StorageHitachiArrayRelationship, bool) {
	if o == nil {
		return nil, false
	}
	return o.Array.Get(), o.Array.IsSet()
}

// HasArray returns a boolean if a field has been set.
func (o *StorageHitachiExternalParityGroup) HasArray() bool {
	if o != nil && o.Array.IsSet() {
		return true
	}

	return false
}

// SetArray gets a reference to the given NullableStorageHitachiArrayRelationship and assigns it to the Array field.
func (o *StorageHitachiExternalParityGroup) SetArray(v StorageHitachiArrayRelationship) {
	o.Array.Set(&v)
}

// SetArrayNil sets the value for Array to be an explicit nil
func (o *StorageHitachiExternalParityGroup) SetArrayNil() {
	o.Array.Set(nil)
}

// UnsetArray ensures that no value is present for Array, not even an explicit nil
func (o *StorageHitachiExternalParityGroup) UnsetArray() {
	o.Array.Unset()
}

// GetRegisteredDevice returns the RegisteredDevice field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *StorageHitachiExternalParityGroup) GetRegisteredDevice() AssetDeviceRegistrationRelationship {
	if o == nil || IsNil(o.RegisteredDevice.Get()) {
		var ret AssetDeviceRegistrationRelationship
		return ret
	}
	return *o.RegisteredDevice.Get()
}

// GetRegisteredDeviceOk returns a tuple with the RegisteredDevice field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *StorageHitachiExternalParityGroup) GetRegisteredDeviceOk() (*AssetDeviceRegistrationRelationship, bool) {
	if o == nil {
		return nil, false
	}
	return o.RegisteredDevice.Get(), o.RegisteredDevice.IsSet()
}

// HasRegisteredDevice returns a boolean if a field has been set.
func (o *StorageHitachiExternalParityGroup) HasRegisteredDevice() bool {
	if o != nil && o.RegisteredDevice.IsSet() {
		return true
	}

	return false
}

// SetRegisteredDevice gets a reference to the given NullableAssetDeviceRegistrationRelationship and assigns it to the RegisteredDevice field.
func (o *StorageHitachiExternalParityGroup) SetRegisteredDevice(v AssetDeviceRegistrationRelationship) {
	o.RegisteredDevice.Set(&v)
}

// SetRegisteredDeviceNil sets the value for RegisteredDevice to be an explicit nil
func (o *StorageHitachiExternalParityGroup) SetRegisteredDeviceNil() {
	o.RegisteredDevice.Set(nil)
}

// UnsetRegisteredDevice ensures that no value is present for RegisteredDevice, not even an explicit nil
func (o *StorageHitachiExternalParityGroup) UnsetRegisteredDevice() {
	o.RegisteredDevice.Unset()
}

func (o StorageHitachiExternalParityGroup) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o StorageHitachiExternalParityGroup) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	serializedMoBaseMo, errMoBaseMo := json.Marshal(o.MoBaseMo)
	if errMoBaseMo != nil {
		return map[string]interface{}{}, errMoBaseMo
	}
	errMoBaseMo = json.Unmarshal([]byte(serializedMoBaseMo), &toSerialize)
	if errMoBaseMo != nil {
		return map[string]interface{}{}, errMoBaseMo
	}
	if _, exists := toSerialize["ClassId"]; !exists {
		toSerialize["ClassId"] = o.GetDefaultClassId()
	}
	toSerialize["ClassId"] = o.ClassId
	if _, exists := toSerialize["ObjectType"]; !exists {
		toSerialize["ObjectType"] = o.GetDefaultObjectType()
	}
	toSerialize["ObjectType"] = o.ObjectType
	if !IsNil(o.AllocatableOpenVolumeCapacity) {
		toSerialize["AllocatableOpenVolumeCapacity"] = o.AllocatableOpenVolumeCapacity
	}
	if !IsNil(o.AllocatedOpenVolumeCapacity) {
		toSerialize["AllocatedOpenVolumeCapacity"] = o.AllocatedOpenVolumeCapacity
	}
	if !IsNil(o.AvailableVolumeCapacity) {
		toSerialize["AvailableVolumeCapacity"] = o.AvailableVolumeCapacity
	}
	if !IsNil(o.ClprId) {
		toSerialize["ClprId"] = o.ClprId
	}
	if !IsNil(o.EmulationType) {
		toSerialize["EmulationType"] = o.EmulationType
	}
	if !IsNil(o.ExternalProductId) {
		toSerialize["ExternalProductId"] = o.ExternalProductId
	}
	if !IsNil(o.LargestAvailableCapacity) {
		toSerialize["LargestAvailableCapacity"] = o.LargestAvailableCapacity
	}
	if !IsNil(o.Name) {
		toSerialize["Name"] = o.Name
	}
	if !IsNil(o.ReservedOpenVolumeCapacity) {
		toSerialize["ReservedOpenVolumeCapacity"] = o.ReservedOpenVolumeCapacity
	}
	if o.Spaces != nil {
		toSerialize["Spaces"] = o.Spaces
	}
	if !IsNil(o.StorageUtilization) {
		toSerialize["StorageUtilization"] = o.StorageUtilization
	}
	if !IsNil(o.TotalOpenVolumeCapacity) {
		toSerialize["TotalOpenVolumeCapacity"] = o.TotalOpenVolumeCapacity
	}
	if !IsNil(o.UnallocatedOpenVolumeCapacity) {
		toSerialize["UnallocatedOpenVolumeCapacity"] = o.UnallocatedOpenVolumeCapacity
	}
	if !IsNil(o.UsedCapacityRate) {
		toSerialize["UsedCapacityRate"] = o.UsedCapacityRate
	}
	if o.Array.IsSet() {
		toSerialize["Array"] = o.Array.Get()
	}
	if o.RegisteredDevice.IsSet() {
		toSerialize["RegisteredDevice"] = o.RegisteredDevice.Get()
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *StorageHitachiExternalParityGroup) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"ClassId",
		"ObjectType",
	}

	// defaultValueFuncMap captures the default values for required properties.
	// These values are used when required properties are missing from the payload.
	defaultValueFuncMap := map[string]func() interface{}{
		"ClassId":    o.GetDefaultClassId,
		"ObjectType": o.GetDefaultObjectType,
	}
	var defaultValueApplied bool
	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			if _, ok := defaultValueFuncMap[requiredProperty]; ok {
				allProperties[requiredProperty] = defaultValueFuncMap[requiredProperty]()
				defaultValueApplied = true
			}
		}
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	if defaultValueApplied {
		data, err = json.Marshal(allProperties)
		if err != nil {
			return err
		}
	}
	type StorageHitachiExternalParityGroupWithoutEmbeddedStruct struct {
		// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.
		ClassId string `json:"ClassId"`
		// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
		ObjectType string `json:"ObjectType"`
		// From among the open volumes in the external parity group, the total capacity of volumes to which paths can be allocated (KB).
		AllocatableOpenVolumeCapacity *int64 `json:"AllocatableOpenVolumeCapacity,omitempty"`
		// From among the open volumes in the external parity group, the total capacity of volumes to which paths are allocated (KB).
		AllocatedOpenVolumeCapacity *int64 `json:"AllocatedOpenVolumeCapacity,omitempty"`
		// Available capacity of the external parity group, represented in bytes.
		AvailableVolumeCapacity *int64 `json:"AvailableVolumeCapacity,omitempty"`
		// Number of CLPR to which the external parity group belongs.
		ClprId *int64 `json:"ClprId,omitempty"`
		// Emulation type of the external parity group.
		EmulationType *string `json:"EmulationType,omitempty"`
		// Storage system that is connected using the external storage connection functionality of Universal Volume Manager.
		ExternalProductId *string `json:"ExternalProductId,omitempty"`
		// Maximum capacity of the non-volume areas in the external parity group (KB).
		LargestAvailableCapacity *int64 `json:"LargestAvailableCapacity,omitempty"`
		// External parity group number.
		Name *string `json:"Name,omitempty"`
		// From among the open volumes in the external parity group, the total capacity of volumes which are reserved (KB).
		ReservedOpenVolumeCapacity *int64                  `json:"ReservedOpenVolumeCapacity,omitempty"`
		Spaces                     []StorageSpace          `json:"Spaces,omitempty"`
		StorageUtilization         *StorageHitachiCapacity `json:"StorageUtilization,omitempty"`
		// Total volume capacity of the open volumes in the external parity group (KB).
		TotalOpenVolumeCapacity *int64 `json:"TotalOpenVolumeCapacity,omitempty"`
		// From among the open volumes in the external parity group, the total capacity of volumes to which paths are not allocated (KB).
		UnallocatedOpenVolumeCapacity *int64 `json:"UnallocatedOpenVolumeCapacity,omitempty"`
		// Usage rate of the external parity group.
		UsedCapacityRate *int64                                      `json:"UsedCapacityRate,omitempty"`
		Array            NullableStorageHitachiArrayRelationship     `json:"Array,omitempty"`
		RegisteredDevice NullableAssetDeviceRegistrationRelationship `json:"RegisteredDevice,omitempty"`
	}

	varStorageHitachiExternalParityGroupWithoutEmbeddedStruct := StorageHitachiExternalParityGroupWithoutEmbeddedStruct{}

	err = json.Unmarshal(data, &varStorageHitachiExternalParityGroupWithoutEmbeddedStruct)
	if err == nil {
		varStorageHitachiExternalParityGroup := _StorageHitachiExternalParityGroup{}
		varStorageHitachiExternalParityGroup.ClassId = varStorageHitachiExternalParityGroupWithoutEmbeddedStruct.ClassId
		varStorageHitachiExternalParityGroup.ObjectType = varStorageHitachiExternalParityGroupWithoutEmbeddedStruct.ObjectType
		varStorageHitachiExternalParityGroup.AllocatableOpenVolumeCapacity = varStorageHitachiExternalParityGroupWithoutEmbeddedStruct.AllocatableOpenVolumeCapacity
		varStorageHitachiExternalParityGroup.AllocatedOpenVolumeCapacity = varStorageHitachiExternalParityGroupWithoutEmbeddedStruct.AllocatedOpenVolumeCapacity
		varStorageHitachiExternalParityGroup.AvailableVolumeCapacity = varStorageHitachiExternalParityGroupWithoutEmbeddedStruct.AvailableVolumeCapacity
		varStorageHitachiExternalParityGroup.ClprId = varStorageHitachiExternalParityGroupWithoutEmbeddedStruct.ClprId
		varStorageHitachiExternalParityGroup.EmulationType = varStorageHitachiExternalParityGroupWithoutEmbeddedStruct.EmulationType
		varStorageHitachiExternalParityGroup.ExternalProductId = varStorageHitachiExternalParityGroupWithoutEmbeddedStruct.ExternalProductId
		varStorageHitachiExternalParityGroup.LargestAvailableCapacity = varStorageHitachiExternalParityGroupWithoutEmbeddedStruct.LargestAvailableCapacity
		varStorageHitachiExternalParityGroup.Name = varStorageHitachiExternalParityGroupWithoutEmbeddedStruct.Name
		varStorageHitachiExternalParityGroup.ReservedOpenVolumeCapacity = varStorageHitachiExternalParityGroupWithoutEmbeddedStruct.ReservedOpenVolumeCapacity
		varStorageHitachiExternalParityGroup.Spaces = varStorageHitachiExternalParityGroupWithoutEmbeddedStruct.Spaces
		varStorageHitachiExternalParityGroup.StorageUtilization = varStorageHitachiExternalParityGroupWithoutEmbeddedStruct.StorageUtilization
		varStorageHitachiExternalParityGroup.TotalOpenVolumeCapacity = varStorageHitachiExternalParityGroupWithoutEmbeddedStruct.TotalOpenVolumeCapacity
		varStorageHitachiExternalParityGroup.UnallocatedOpenVolumeCapacity = varStorageHitachiExternalParityGroupWithoutEmbeddedStruct.UnallocatedOpenVolumeCapacity
		varStorageHitachiExternalParityGroup.UsedCapacityRate = varStorageHitachiExternalParityGroupWithoutEmbeddedStruct.UsedCapacityRate
		varStorageHitachiExternalParityGroup.Array = varStorageHitachiExternalParityGroupWithoutEmbeddedStruct.Array
		varStorageHitachiExternalParityGroup.RegisteredDevice = varStorageHitachiExternalParityGroupWithoutEmbeddedStruct.RegisteredDevice
		*o = StorageHitachiExternalParityGroup(varStorageHitachiExternalParityGroup)
	} else {
		return err
	}

	varStorageHitachiExternalParityGroup := _StorageHitachiExternalParityGroup{}

	err = json.Unmarshal(data, &varStorageHitachiExternalParityGroup)
	if err == nil {
		o.MoBaseMo = varStorageHitachiExternalParityGroup.MoBaseMo
	} else {
		return err
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "ClassId")
		delete(additionalProperties, "ObjectType")
		delete(additionalProperties, "AllocatableOpenVolumeCapacity")
		delete(additionalProperties, "AllocatedOpenVolumeCapacity")
		delete(additionalProperties, "AvailableVolumeCapacity")
		delete(additionalProperties, "ClprId")
		delete(additionalProperties, "EmulationType")
		delete(additionalProperties, "ExternalProductId")
		delete(additionalProperties, "LargestAvailableCapacity")
		delete(additionalProperties, "Name")
		delete(additionalProperties, "ReservedOpenVolumeCapacity")
		delete(additionalProperties, "Spaces")
		delete(additionalProperties, "StorageUtilization")
		delete(additionalProperties, "TotalOpenVolumeCapacity")
		delete(additionalProperties, "UnallocatedOpenVolumeCapacity")
		delete(additionalProperties, "UsedCapacityRate")
		delete(additionalProperties, "Array")
		delete(additionalProperties, "RegisteredDevice")

		// remove fields from embedded structs
		reflectMoBaseMo := reflect.ValueOf(o.MoBaseMo)
		for i := 0; i < reflectMoBaseMo.Type().NumField(); i++ {
			t := reflectMoBaseMo.Type().Field(i)

			if jsonTag := t.Tag.Get("json"); jsonTag != "" {
				fieldName := ""
				if commaIdx := strings.Index(jsonTag, ","); commaIdx > 0 {
					fieldName = jsonTag[:commaIdx]
				} else {
					fieldName = jsonTag
				}
				if fieldName != "AdditionalProperties" {
					delete(additionalProperties, fieldName)
				}
			}
		}

		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableStorageHitachiExternalParityGroup struct {
	value *StorageHitachiExternalParityGroup
	isSet bool
}

func (v NullableStorageHitachiExternalParityGroup) Get() *StorageHitachiExternalParityGroup {
	return v.value
}

func (v *NullableStorageHitachiExternalParityGroup) Set(val *StorageHitachiExternalParityGroup) {
	v.value = val
	v.isSet = true
}

func (v NullableStorageHitachiExternalParityGroup) IsSet() bool {
	return v.isSet
}

func (v *NullableStorageHitachiExternalParityGroup) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStorageHitachiExternalParityGroup(val *StorageHitachiExternalParityGroup) *NullableStorageHitachiExternalParityGroup {
	return &NullableStorageHitachiExternalParityGroup{value: val, isSet: true}
}

func (v NullableStorageHitachiExternalParityGroup) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStorageHitachiExternalParityGroup) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
