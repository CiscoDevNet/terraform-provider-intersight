/*
Cisco Intersight

Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations. The Intersight OpenAPI document defines the complete set of properties that are returned in the HTTP response. From that perspective, a client can expect that no additional properties are returned, unless these properties are explicitly defined in the OpenAPI document. However, when a client uses an older version of the Intersight OpenAPI document, the server may send additional properties because the software is more recent than the client. In that case, the client may receive properties that it does not know about. Some generated SDKs perform a strict validation of the HTTP response body against the OpenAPI document.

API version: 1.0.11-2024100405
Contact: intersight@cisco.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package intersight

import (
	"encoding/json"
	"fmt"
	"reflect"
	"strings"
	"time"
)

// checks if the StorageHyperFlexVolume type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &StorageHyperFlexVolume{}

// StorageHyperFlexVolume A HyperFlex Volume entity.
type StorageHyperFlexVolume struct {
	StorageBaseVolume
	// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.
	ClassId string `json:"ClassId"`
	// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
	ObjectType string `json:"ObjectType"`
	// Provisioned Capacity of the Storage container in Bytes.
	Capacity *int64 `json:"Capacity,omitempty"`
	// Client ID to which the volume belongs.
	ClientId *string `json:"ClientId,omitempty"`
	// Last modified time as UTC of the volume.
	LastModifiedTime *time.Time `json:"LastModifiedTime,omitempty"`
	// UUID of Lun associated with the volume.
	LunUuid *string `json:"LunUuid,omitempty"`
	// Serial number of the volume.
	SerialNumber *string `json:"SerialNumber,omitempty"`
	// UUID of the Datastore/Storage Containter.
	Uuid *string `json:"Uuid,omitempty"`
	// Access Mode of the volume. * `ReadWriteOnce` - Read write permisisons to a Virtual disk by a single virtual machine. * `ReadWriteMany` - Read write permisisons to a Virtual disk by multiple virtual machines. * `ReadOnlyMany` - Read only permisisons to a Virtual disk by multiple virtual machines. * `` - Unknown disk access mode.
	VolumeAccessMode *string `json:"VolumeAccessMode,omitempty"`
	// Mode of the volume. * `Block` - It is a Block virtual disk. * `Filesystem` - It is a File system virtual disk. * `` - Disk mode is either unknown or not supported.
	VolumeMode *string `json:"VolumeMode,omitempty"`
	// The Type of the volume.
	VolumeType           *string                                              `json:"VolumeType,omitempty"`
	Cluster              NullableHyperflexClusterRelationship                 `json:"Cluster,omitempty"`
	RegisteredDevice     NullableAssetDeviceRegistrationRelationship          `json:"RegisteredDevice,omitempty"`
	StorageContainer     NullableStorageHyperFlexStorageContainerRelationship `json:"StorageContainer,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _StorageHyperFlexVolume StorageHyperFlexVolume

// NewStorageHyperFlexVolume instantiates a new StorageHyperFlexVolume object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStorageHyperFlexVolume(classId string, objectType string) *StorageHyperFlexVolume {
	this := StorageHyperFlexVolume{}
	this.ClassId = classId
	this.ObjectType = objectType
	return &this
}

// NewStorageHyperFlexVolumeWithDefaults instantiates a new StorageHyperFlexVolume object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStorageHyperFlexVolumeWithDefaults() *StorageHyperFlexVolume {
	this := StorageHyperFlexVolume{}
	var classId string = "storage.HyperFlexVolume"
	this.ClassId = classId
	var objectType string = "storage.HyperFlexVolume"
	this.ObjectType = objectType
	return &this
}

// GetClassId returns the ClassId field value
func (o *StorageHyperFlexVolume) GetClassId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ClassId
}

// GetClassIdOk returns a tuple with the ClassId field value
// and a boolean to check if the value has been set.
func (o *StorageHyperFlexVolume) GetClassIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ClassId, true
}

// SetClassId sets field value
func (o *StorageHyperFlexVolume) SetClassId(v string) {
	o.ClassId = v
}

// GetDefaultClassId returns the default value "storage.HyperFlexVolume" of the ClassId field.
func (o *StorageHyperFlexVolume) GetDefaultClassId() interface{} {
	return "storage.HyperFlexVolume"
}

// GetObjectType returns the ObjectType field value
func (o *StorageHyperFlexVolume) GetObjectType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ObjectType
}

// GetObjectTypeOk returns a tuple with the ObjectType field value
// and a boolean to check if the value has been set.
func (o *StorageHyperFlexVolume) GetObjectTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ObjectType, true
}

// SetObjectType sets field value
func (o *StorageHyperFlexVolume) SetObjectType(v string) {
	o.ObjectType = v
}

// GetDefaultObjectType returns the default value "storage.HyperFlexVolume" of the ObjectType field.
func (o *StorageHyperFlexVolume) GetDefaultObjectType() interface{} {
	return "storage.HyperFlexVolume"
}

// GetCapacity returns the Capacity field value if set, zero value otherwise.
func (o *StorageHyperFlexVolume) GetCapacity() int64 {
	if o == nil || IsNil(o.Capacity) {
		var ret int64
		return ret
	}
	return *o.Capacity
}

// GetCapacityOk returns a tuple with the Capacity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageHyperFlexVolume) GetCapacityOk() (*int64, bool) {
	if o == nil || IsNil(o.Capacity) {
		return nil, false
	}
	return o.Capacity, true
}

// HasCapacity returns a boolean if a field has been set.
func (o *StorageHyperFlexVolume) HasCapacity() bool {
	if o != nil && !IsNil(o.Capacity) {
		return true
	}

	return false
}

// SetCapacity gets a reference to the given int64 and assigns it to the Capacity field.
func (o *StorageHyperFlexVolume) SetCapacity(v int64) {
	o.Capacity = &v
}

// GetClientId returns the ClientId field value if set, zero value otherwise.
func (o *StorageHyperFlexVolume) GetClientId() string {
	if o == nil || IsNil(o.ClientId) {
		var ret string
		return ret
	}
	return *o.ClientId
}

// GetClientIdOk returns a tuple with the ClientId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageHyperFlexVolume) GetClientIdOk() (*string, bool) {
	if o == nil || IsNil(o.ClientId) {
		return nil, false
	}
	return o.ClientId, true
}

// HasClientId returns a boolean if a field has been set.
func (o *StorageHyperFlexVolume) HasClientId() bool {
	if o != nil && !IsNil(o.ClientId) {
		return true
	}

	return false
}

// SetClientId gets a reference to the given string and assigns it to the ClientId field.
func (o *StorageHyperFlexVolume) SetClientId(v string) {
	o.ClientId = &v
}

// GetLastModifiedTime returns the LastModifiedTime field value if set, zero value otherwise.
func (o *StorageHyperFlexVolume) GetLastModifiedTime() time.Time {
	if o == nil || IsNil(o.LastModifiedTime) {
		var ret time.Time
		return ret
	}
	return *o.LastModifiedTime
}

// GetLastModifiedTimeOk returns a tuple with the LastModifiedTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageHyperFlexVolume) GetLastModifiedTimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.LastModifiedTime) {
		return nil, false
	}
	return o.LastModifiedTime, true
}

// HasLastModifiedTime returns a boolean if a field has been set.
func (o *StorageHyperFlexVolume) HasLastModifiedTime() bool {
	if o != nil && !IsNil(o.LastModifiedTime) {
		return true
	}

	return false
}

// SetLastModifiedTime gets a reference to the given time.Time and assigns it to the LastModifiedTime field.
func (o *StorageHyperFlexVolume) SetLastModifiedTime(v time.Time) {
	o.LastModifiedTime = &v
}

// GetLunUuid returns the LunUuid field value if set, zero value otherwise.
func (o *StorageHyperFlexVolume) GetLunUuid() string {
	if o == nil || IsNil(o.LunUuid) {
		var ret string
		return ret
	}
	return *o.LunUuid
}

// GetLunUuidOk returns a tuple with the LunUuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageHyperFlexVolume) GetLunUuidOk() (*string, bool) {
	if o == nil || IsNil(o.LunUuid) {
		return nil, false
	}
	return o.LunUuid, true
}

// HasLunUuid returns a boolean if a field has been set.
func (o *StorageHyperFlexVolume) HasLunUuid() bool {
	if o != nil && !IsNil(o.LunUuid) {
		return true
	}

	return false
}

// SetLunUuid gets a reference to the given string and assigns it to the LunUuid field.
func (o *StorageHyperFlexVolume) SetLunUuid(v string) {
	o.LunUuid = &v
}

// GetSerialNumber returns the SerialNumber field value if set, zero value otherwise.
func (o *StorageHyperFlexVolume) GetSerialNumber() string {
	if o == nil || IsNil(o.SerialNumber) {
		var ret string
		return ret
	}
	return *o.SerialNumber
}

// GetSerialNumberOk returns a tuple with the SerialNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageHyperFlexVolume) GetSerialNumberOk() (*string, bool) {
	if o == nil || IsNil(o.SerialNumber) {
		return nil, false
	}
	return o.SerialNumber, true
}

// HasSerialNumber returns a boolean if a field has been set.
func (o *StorageHyperFlexVolume) HasSerialNumber() bool {
	if o != nil && !IsNil(o.SerialNumber) {
		return true
	}

	return false
}

// SetSerialNumber gets a reference to the given string and assigns it to the SerialNumber field.
func (o *StorageHyperFlexVolume) SetSerialNumber(v string) {
	o.SerialNumber = &v
}

// GetUuid returns the Uuid field value if set, zero value otherwise.
func (o *StorageHyperFlexVolume) GetUuid() string {
	if o == nil || IsNil(o.Uuid) {
		var ret string
		return ret
	}
	return *o.Uuid
}

// GetUuidOk returns a tuple with the Uuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageHyperFlexVolume) GetUuidOk() (*string, bool) {
	if o == nil || IsNil(o.Uuid) {
		return nil, false
	}
	return o.Uuid, true
}

// HasUuid returns a boolean if a field has been set.
func (o *StorageHyperFlexVolume) HasUuid() bool {
	if o != nil && !IsNil(o.Uuid) {
		return true
	}

	return false
}

// SetUuid gets a reference to the given string and assigns it to the Uuid field.
func (o *StorageHyperFlexVolume) SetUuid(v string) {
	o.Uuid = &v
}

// GetVolumeAccessMode returns the VolumeAccessMode field value if set, zero value otherwise.
func (o *StorageHyperFlexVolume) GetVolumeAccessMode() string {
	if o == nil || IsNil(o.VolumeAccessMode) {
		var ret string
		return ret
	}
	return *o.VolumeAccessMode
}

// GetVolumeAccessModeOk returns a tuple with the VolumeAccessMode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageHyperFlexVolume) GetVolumeAccessModeOk() (*string, bool) {
	if o == nil || IsNil(o.VolumeAccessMode) {
		return nil, false
	}
	return o.VolumeAccessMode, true
}

// HasVolumeAccessMode returns a boolean if a field has been set.
func (o *StorageHyperFlexVolume) HasVolumeAccessMode() bool {
	if o != nil && !IsNil(o.VolumeAccessMode) {
		return true
	}

	return false
}

// SetVolumeAccessMode gets a reference to the given string and assigns it to the VolumeAccessMode field.
func (o *StorageHyperFlexVolume) SetVolumeAccessMode(v string) {
	o.VolumeAccessMode = &v
}

// GetVolumeMode returns the VolumeMode field value if set, zero value otherwise.
func (o *StorageHyperFlexVolume) GetVolumeMode() string {
	if o == nil || IsNil(o.VolumeMode) {
		var ret string
		return ret
	}
	return *o.VolumeMode
}

// GetVolumeModeOk returns a tuple with the VolumeMode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageHyperFlexVolume) GetVolumeModeOk() (*string, bool) {
	if o == nil || IsNil(o.VolumeMode) {
		return nil, false
	}
	return o.VolumeMode, true
}

// HasVolumeMode returns a boolean if a field has been set.
func (o *StorageHyperFlexVolume) HasVolumeMode() bool {
	if o != nil && !IsNil(o.VolumeMode) {
		return true
	}

	return false
}

// SetVolumeMode gets a reference to the given string and assigns it to the VolumeMode field.
func (o *StorageHyperFlexVolume) SetVolumeMode(v string) {
	o.VolumeMode = &v
}

// GetVolumeType returns the VolumeType field value if set, zero value otherwise.
func (o *StorageHyperFlexVolume) GetVolumeType() string {
	if o == nil || IsNil(o.VolumeType) {
		var ret string
		return ret
	}
	return *o.VolumeType
}

// GetVolumeTypeOk returns a tuple with the VolumeType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageHyperFlexVolume) GetVolumeTypeOk() (*string, bool) {
	if o == nil || IsNil(o.VolumeType) {
		return nil, false
	}
	return o.VolumeType, true
}

// HasVolumeType returns a boolean if a field has been set.
func (o *StorageHyperFlexVolume) HasVolumeType() bool {
	if o != nil && !IsNil(o.VolumeType) {
		return true
	}

	return false
}

// SetVolumeType gets a reference to the given string and assigns it to the VolumeType field.
func (o *StorageHyperFlexVolume) SetVolumeType(v string) {
	o.VolumeType = &v
}

// GetCluster returns the Cluster field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *StorageHyperFlexVolume) GetCluster() HyperflexClusterRelationship {
	if o == nil || IsNil(o.Cluster.Get()) {
		var ret HyperflexClusterRelationship
		return ret
	}
	return *o.Cluster.Get()
}

// GetClusterOk returns a tuple with the Cluster field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *StorageHyperFlexVolume) GetClusterOk() (*HyperflexClusterRelationship, bool) {
	if o == nil {
		return nil, false
	}
	return o.Cluster.Get(), o.Cluster.IsSet()
}

// HasCluster returns a boolean if a field has been set.
func (o *StorageHyperFlexVolume) HasCluster() bool {
	if o != nil && o.Cluster.IsSet() {
		return true
	}

	return false
}

// SetCluster gets a reference to the given NullableHyperflexClusterRelationship and assigns it to the Cluster field.
func (o *StorageHyperFlexVolume) SetCluster(v HyperflexClusterRelationship) {
	o.Cluster.Set(&v)
}

// SetClusterNil sets the value for Cluster to be an explicit nil
func (o *StorageHyperFlexVolume) SetClusterNil() {
	o.Cluster.Set(nil)
}

// UnsetCluster ensures that no value is present for Cluster, not even an explicit nil
func (o *StorageHyperFlexVolume) UnsetCluster() {
	o.Cluster.Unset()
}

// GetRegisteredDevice returns the RegisteredDevice field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *StorageHyperFlexVolume) GetRegisteredDevice() AssetDeviceRegistrationRelationship {
	if o == nil || IsNil(o.RegisteredDevice.Get()) {
		var ret AssetDeviceRegistrationRelationship
		return ret
	}
	return *o.RegisteredDevice.Get()
}

// GetRegisteredDeviceOk returns a tuple with the RegisteredDevice field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *StorageHyperFlexVolume) GetRegisteredDeviceOk() (*AssetDeviceRegistrationRelationship, bool) {
	if o == nil {
		return nil, false
	}
	return o.RegisteredDevice.Get(), o.RegisteredDevice.IsSet()
}

// HasRegisteredDevice returns a boolean if a field has been set.
func (o *StorageHyperFlexVolume) HasRegisteredDevice() bool {
	if o != nil && o.RegisteredDevice.IsSet() {
		return true
	}

	return false
}

// SetRegisteredDevice gets a reference to the given NullableAssetDeviceRegistrationRelationship and assigns it to the RegisteredDevice field.
func (o *StorageHyperFlexVolume) SetRegisteredDevice(v AssetDeviceRegistrationRelationship) {
	o.RegisteredDevice.Set(&v)
}

// SetRegisteredDeviceNil sets the value for RegisteredDevice to be an explicit nil
func (o *StorageHyperFlexVolume) SetRegisteredDeviceNil() {
	o.RegisteredDevice.Set(nil)
}

// UnsetRegisteredDevice ensures that no value is present for RegisteredDevice, not even an explicit nil
func (o *StorageHyperFlexVolume) UnsetRegisteredDevice() {
	o.RegisteredDevice.Unset()
}

// GetStorageContainer returns the StorageContainer field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *StorageHyperFlexVolume) GetStorageContainer() StorageHyperFlexStorageContainerRelationship {
	if o == nil || IsNil(o.StorageContainer.Get()) {
		var ret StorageHyperFlexStorageContainerRelationship
		return ret
	}
	return *o.StorageContainer.Get()
}

// GetStorageContainerOk returns a tuple with the StorageContainer field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *StorageHyperFlexVolume) GetStorageContainerOk() (*StorageHyperFlexStorageContainerRelationship, bool) {
	if o == nil {
		return nil, false
	}
	return o.StorageContainer.Get(), o.StorageContainer.IsSet()
}

// HasStorageContainer returns a boolean if a field has been set.
func (o *StorageHyperFlexVolume) HasStorageContainer() bool {
	if o != nil && o.StorageContainer.IsSet() {
		return true
	}

	return false
}

// SetStorageContainer gets a reference to the given NullableStorageHyperFlexStorageContainerRelationship and assigns it to the StorageContainer field.
func (o *StorageHyperFlexVolume) SetStorageContainer(v StorageHyperFlexStorageContainerRelationship) {
	o.StorageContainer.Set(&v)
}

// SetStorageContainerNil sets the value for StorageContainer to be an explicit nil
func (o *StorageHyperFlexVolume) SetStorageContainerNil() {
	o.StorageContainer.Set(nil)
}

// UnsetStorageContainer ensures that no value is present for StorageContainer, not even an explicit nil
func (o *StorageHyperFlexVolume) UnsetStorageContainer() {
	o.StorageContainer.Unset()
}

func (o StorageHyperFlexVolume) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o StorageHyperFlexVolume) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	serializedStorageBaseVolume, errStorageBaseVolume := json.Marshal(o.StorageBaseVolume)
	if errStorageBaseVolume != nil {
		return map[string]interface{}{}, errStorageBaseVolume
	}
	errStorageBaseVolume = json.Unmarshal([]byte(serializedStorageBaseVolume), &toSerialize)
	if errStorageBaseVolume != nil {
		return map[string]interface{}{}, errStorageBaseVolume
	}
	if _, exists := toSerialize["ClassId"]; !exists {
		toSerialize["ClassId"] = o.GetDefaultClassId()
	}
	toSerialize["ClassId"] = o.ClassId
	if _, exists := toSerialize["ObjectType"]; !exists {
		toSerialize["ObjectType"] = o.GetDefaultObjectType()
	}
	toSerialize["ObjectType"] = o.ObjectType
	if !IsNil(o.Capacity) {
		toSerialize["Capacity"] = o.Capacity
	}
	if !IsNil(o.ClientId) {
		toSerialize["ClientId"] = o.ClientId
	}
	if !IsNil(o.LastModifiedTime) {
		toSerialize["LastModifiedTime"] = o.LastModifiedTime
	}
	if !IsNil(o.LunUuid) {
		toSerialize["LunUuid"] = o.LunUuid
	}
	if !IsNil(o.SerialNumber) {
		toSerialize["SerialNumber"] = o.SerialNumber
	}
	if !IsNil(o.Uuid) {
		toSerialize["Uuid"] = o.Uuid
	}
	if !IsNil(o.VolumeAccessMode) {
		toSerialize["VolumeAccessMode"] = o.VolumeAccessMode
	}
	if !IsNil(o.VolumeMode) {
		toSerialize["VolumeMode"] = o.VolumeMode
	}
	if !IsNil(o.VolumeType) {
		toSerialize["VolumeType"] = o.VolumeType
	}
	if o.Cluster.IsSet() {
		toSerialize["Cluster"] = o.Cluster.Get()
	}
	if o.RegisteredDevice.IsSet() {
		toSerialize["RegisteredDevice"] = o.RegisteredDevice.Get()
	}
	if o.StorageContainer.IsSet() {
		toSerialize["StorageContainer"] = o.StorageContainer.Get()
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *StorageHyperFlexVolume) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"ClassId",
		"ObjectType",
	}

	// defaultValueFuncMap captures the default values for required properties.
	// These values are used when required properties are missing from the payload.
	defaultValueFuncMap := map[string]func() interface{}{
		"ClassId":    o.GetDefaultClassId,
		"ObjectType": o.GetDefaultObjectType,
	}
	var defaultValueApplied bool
	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			if _, ok := defaultValueFuncMap[requiredProperty]; ok {
				allProperties[requiredProperty] = defaultValueFuncMap[requiredProperty]()
				defaultValueApplied = true
			}
		}
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	if defaultValueApplied {
		data, err = json.Marshal(allProperties)
		if err != nil {
			return err
		}
	}
	type StorageHyperFlexVolumeWithoutEmbeddedStruct struct {
		// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.
		ClassId string `json:"ClassId"`
		// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
		ObjectType string `json:"ObjectType"`
		// Provisioned Capacity of the Storage container in Bytes.
		Capacity *int64 `json:"Capacity,omitempty"`
		// Client ID to which the volume belongs.
		ClientId *string `json:"ClientId,omitempty"`
		// Last modified time as UTC of the volume.
		LastModifiedTime *time.Time `json:"LastModifiedTime,omitempty"`
		// UUID of Lun associated with the volume.
		LunUuid *string `json:"LunUuid,omitempty"`
		// Serial number of the volume.
		SerialNumber *string `json:"SerialNumber,omitempty"`
		// UUID of the Datastore/Storage Containter.
		Uuid *string `json:"Uuid,omitempty"`
		// Access Mode of the volume. * `ReadWriteOnce` - Read write permisisons to a Virtual disk by a single virtual machine. * `ReadWriteMany` - Read write permisisons to a Virtual disk by multiple virtual machines. * `ReadOnlyMany` - Read only permisisons to a Virtual disk by multiple virtual machines. * `` - Unknown disk access mode.
		VolumeAccessMode *string `json:"VolumeAccessMode,omitempty"`
		// Mode of the volume. * `Block` - It is a Block virtual disk. * `Filesystem` - It is a File system virtual disk. * `` - Disk mode is either unknown or not supported.
		VolumeMode *string `json:"VolumeMode,omitempty"`
		// The Type of the volume.
		VolumeType       *string                                              `json:"VolumeType,omitempty"`
		Cluster          NullableHyperflexClusterRelationship                 `json:"Cluster,omitempty"`
		RegisteredDevice NullableAssetDeviceRegistrationRelationship          `json:"RegisteredDevice,omitempty"`
		StorageContainer NullableStorageHyperFlexStorageContainerRelationship `json:"StorageContainer,omitempty"`
	}

	varStorageHyperFlexVolumeWithoutEmbeddedStruct := StorageHyperFlexVolumeWithoutEmbeddedStruct{}

	err = json.Unmarshal(data, &varStorageHyperFlexVolumeWithoutEmbeddedStruct)
	if err == nil {
		varStorageHyperFlexVolume := _StorageHyperFlexVolume{}
		varStorageHyperFlexVolume.ClassId = varStorageHyperFlexVolumeWithoutEmbeddedStruct.ClassId
		varStorageHyperFlexVolume.ObjectType = varStorageHyperFlexVolumeWithoutEmbeddedStruct.ObjectType
		varStorageHyperFlexVolume.Capacity = varStorageHyperFlexVolumeWithoutEmbeddedStruct.Capacity
		varStorageHyperFlexVolume.ClientId = varStorageHyperFlexVolumeWithoutEmbeddedStruct.ClientId
		varStorageHyperFlexVolume.LastModifiedTime = varStorageHyperFlexVolumeWithoutEmbeddedStruct.LastModifiedTime
		varStorageHyperFlexVolume.LunUuid = varStorageHyperFlexVolumeWithoutEmbeddedStruct.LunUuid
		varStorageHyperFlexVolume.SerialNumber = varStorageHyperFlexVolumeWithoutEmbeddedStruct.SerialNumber
		varStorageHyperFlexVolume.Uuid = varStorageHyperFlexVolumeWithoutEmbeddedStruct.Uuid
		varStorageHyperFlexVolume.VolumeAccessMode = varStorageHyperFlexVolumeWithoutEmbeddedStruct.VolumeAccessMode
		varStorageHyperFlexVolume.VolumeMode = varStorageHyperFlexVolumeWithoutEmbeddedStruct.VolumeMode
		varStorageHyperFlexVolume.VolumeType = varStorageHyperFlexVolumeWithoutEmbeddedStruct.VolumeType
		varStorageHyperFlexVolume.Cluster = varStorageHyperFlexVolumeWithoutEmbeddedStruct.Cluster
		varStorageHyperFlexVolume.RegisteredDevice = varStorageHyperFlexVolumeWithoutEmbeddedStruct.RegisteredDevice
		varStorageHyperFlexVolume.StorageContainer = varStorageHyperFlexVolumeWithoutEmbeddedStruct.StorageContainer
		*o = StorageHyperFlexVolume(varStorageHyperFlexVolume)
	} else {
		return err
	}

	varStorageHyperFlexVolume := _StorageHyperFlexVolume{}

	err = json.Unmarshal(data, &varStorageHyperFlexVolume)
	if err == nil {
		o.StorageBaseVolume = varStorageHyperFlexVolume.StorageBaseVolume
	} else {
		return err
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "ClassId")
		delete(additionalProperties, "ObjectType")
		delete(additionalProperties, "Capacity")
		delete(additionalProperties, "ClientId")
		delete(additionalProperties, "LastModifiedTime")
		delete(additionalProperties, "LunUuid")
		delete(additionalProperties, "SerialNumber")
		delete(additionalProperties, "Uuid")
		delete(additionalProperties, "VolumeAccessMode")
		delete(additionalProperties, "VolumeMode")
		delete(additionalProperties, "VolumeType")
		delete(additionalProperties, "Cluster")
		delete(additionalProperties, "RegisteredDevice")
		delete(additionalProperties, "StorageContainer")

		// remove fields from embedded structs
		reflectStorageBaseVolume := reflect.ValueOf(o.StorageBaseVolume)
		for i := 0; i < reflectStorageBaseVolume.Type().NumField(); i++ {
			t := reflectStorageBaseVolume.Type().Field(i)

			if jsonTag := t.Tag.Get("json"); jsonTag != "" {
				fieldName := ""
				if commaIdx := strings.Index(jsonTag, ","); commaIdx > 0 {
					fieldName = jsonTag[:commaIdx]
				} else {
					fieldName = jsonTag
				}
				if fieldName != "AdditionalProperties" {
					delete(additionalProperties, fieldName)
				}
			}
		}

		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableStorageHyperFlexVolume struct {
	value *StorageHyperFlexVolume
	isSet bool
}

func (v NullableStorageHyperFlexVolume) Get() *StorageHyperFlexVolume {
	return v.value
}

func (v *NullableStorageHyperFlexVolume) Set(val *StorageHyperFlexVolume) {
	v.value = val
	v.isSet = true
}

func (v NullableStorageHyperFlexVolume) IsSet() bool {
	return v.isSet
}

func (v *NullableStorageHyperFlexVolume) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStorageHyperFlexVolume(val *StorageHyperFlexVolume) *NullableStorageHyperFlexVolume {
	return &NullableStorageHyperFlexVolume{value: val, isSet: true}
}

func (v NullableStorageHyperFlexVolume) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStorageHyperFlexVolume) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
