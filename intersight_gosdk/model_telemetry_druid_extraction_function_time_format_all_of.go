/*
Cisco Intersight

Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations. The Intersight OpenAPI document defines the complete set of properties that are returned in the HTTP response. From that perspective, a client can expect that no additional properties are returned, unless these properties are explicitly defined in the OpenAPI document. However, when a client uses an older version of the Intersight OpenAPI document, the server may send additional properties because the software is more recent than the client. In that case, the client may receive properties that it does not know about. Some generated SDKs perform a strict validation of the HTTP response body against the OpenAPI document.

API version: 1.0.11-16342
Contact: intersight@cisco.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package intersight

import (
	"encoding/json"
)

// TelemetryDruidExtractionFunctionTimeFormatAllOf struct for TelemetryDruidExtractionFunctionTimeFormatAllOf
type TelemetryDruidExtractionFunctionTimeFormatAllOf struct {
	Type string `json:"type"`
	// Date time format for the resulting dimension value, in Joda Time DateTimeFormat, or null to use the default ISO8601 format.
	Format *string `json:"format,omitempty"`
	// Locale (language and country) to use, given as a IETF BCP 47 language tag, e.g. en-US, en-GB, fr-FR, fr-CA, etc.
	Locale *string `json:"locale,omitempty"`
	// Time zone to use in IANA tz database format, e.g. Europe/Berlin (this can possibly be different than the aggregation time-zone)
	TimeZone    *string                    `json:"timeZone,omitempty"`
	Granularity *TelemetryDruidGranularity `json:"granularity,omitempty"`
	// boolean value, set to true to treat input strings as millis rather than ISO8601 strings. Additionally, if format is null or not specified, output will be in millis rather than ISO8601.
	AsMillis             *bool `json:"asMillis,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _TelemetryDruidExtractionFunctionTimeFormatAllOf TelemetryDruidExtractionFunctionTimeFormatAllOf

// NewTelemetryDruidExtractionFunctionTimeFormatAllOf instantiates a new TelemetryDruidExtractionFunctionTimeFormatAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTelemetryDruidExtractionFunctionTimeFormatAllOf(type_ string) *TelemetryDruidExtractionFunctionTimeFormatAllOf {
	this := TelemetryDruidExtractionFunctionTimeFormatAllOf{}
	this.Type = type_
	return &this
}

// NewTelemetryDruidExtractionFunctionTimeFormatAllOfWithDefaults instantiates a new TelemetryDruidExtractionFunctionTimeFormatAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTelemetryDruidExtractionFunctionTimeFormatAllOfWithDefaults() *TelemetryDruidExtractionFunctionTimeFormatAllOf {
	this := TelemetryDruidExtractionFunctionTimeFormatAllOf{}
	return &this
}

// GetType returns the Type field value
func (o *TelemetryDruidExtractionFunctionTimeFormatAllOf) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *TelemetryDruidExtractionFunctionTimeFormatAllOf) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *TelemetryDruidExtractionFunctionTimeFormatAllOf) SetType(v string) {
	o.Type = v
}

// GetFormat returns the Format field value if set, zero value otherwise.
func (o *TelemetryDruidExtractionFunctionTimeFormatAllOf) GetFormat() string {
	if o == nil || o.Format == nil {
		var ret string
		return ret
	}
	return *o.Format
}

// GetFormatOk returns a tuple with the Format field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TelemetryDruidExtractionFunctionTimeFormatAllOf) GetFormatOk() (*string, bool) {
	if o == nil || o.Format == nil {
		return nil, false
	}
	return o.Format, true
}

// HasFormat returns a boolean if a field has been set.
func (o *TelemetryDruidExtractionFunctionTimeFormatAllOf) HasFormat() bool {
	if o != nil && o.Format != nil {
		return true
	}

	return false
}

// SetFormat gets a reference to the given string and assigns it to the Format field.
func (o *TelemetryDruidExtractionFunctionTimeFormatAllOf) SetFormat(v string) {
	o.Format = &v
}

// GetLocale returns the Locale field value if set, zero value otherwise.
func (o *TelemetryDruidExtractionFunctionTimeFormatAllOf) GetLocale() string {
	if o == nil || o.Locale == nil {
		var ret string
		return ret
	}
	return *o.Locale
}

// GetLocaleOk returns a tuple with the Locale field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TelemetryDruidExtractionFunctionTimeFormatAllOf) GetLocaleOk() (*string, bool) {
	if o == nil || o.Locale == nil {
		return nil, false
	}
	return o.Locale, true
}

// HasLocale returns a boolean if a field has been set.
func (o *TelemetryDruidExtractionFunctionTimeFormatAllOf) HasLocale() bool {
	if o != nil && o.Locale != nil {
		return true
	}

	return false
}

// SetLocale gets a reference to the given string and assigns it to the Locale field.
func (o *TelemetryDruidExtractionFunctionTimeFormatAllOf) SetLocale(v string) {
	o.Locale = &v
}

// GetTimeZone returns the TimeZone field value if set, zero value otherwise.
func (o *TelemetryDruidExtractionFunctionTimeFormatAllOf) GetTimeZone() string {
	if o == nil || o.TimeZone == nil {
		var ret string
		return ret
	}
	return *o.TimeZone
}

// GetTimeZoneOk returns a tuple with the TimeZone field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TelemetryDruidExtractionFunctionTimeFormatAllOf) GetTimeZoneOk() (*string, bool) {
	if o == nil || o.TimeZone == nil {
		return nil, false
	}
	return o.TimeZone, true
}

// HasTimeZone returns a boolean if a field has been set.
func (o *TelemetryDruidExtractionFunctionTimeFormatAllOf) HasTimeZone() bool {
	if o != nil && o.TimeZone != nil {
		return true
	}

	return false
}

// SetTimeZone gets a reference to the given string and assigns it to the TimeZone field.
func (o *TelemetryDruidExtractionFunctionTimeFormatAllOf) SetTimeZone(v string) {
	o.TimeZone = &v
}

// GetGranularity returns the Granularity field value if set, zero value otherwise.
func (o *TelemetryDruidExtractionFunctionTimeFormatAllOf) GetGranularity() TelemetryDruidGranularity {
	if o == nil || o.Granularity == nil {
		var ret TelemetryDruidGranularity
		return ret
	}
	return *o.Granularity
}

// GetGranularityOk returns a tuple with the Granularity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TelemetryDruidExtractionFunctionTimeFormatAllOf) GetGranularityOk() (*TelemetryDruidGranularity, bool) {
	if o == nil || o.Granularity == nil {
		return nil, false
	}
	return o.Granularity, true
}

// HasGranularity returns a boolean if a field has been set.
func (o *TelemetryDruidExtractionFunctionTimeFormatAllOf) HasGranularity() bool {
	if o != nil && o.Granularity != nil {
		return true
	}

	return false
}

// SetGranularity gets a reference to the given TelemetryDruidGranularity and assigns it to the Granularity field.
func (o *TelemetryDruidExtractionFunctionTimeFormatAllOf) SetGranularity(v TelemetryDruidGranularity) {
	o.Granularity = &v
}

// GetAsMillis returns the AsMillis field value if set, zero value otherwise.
func (o *TelemetryDruidExtractionFunctionTimeFormatAllOf) GetAsMillis() bool {
	if o == nil || o.AsMillis == nil {
		var ret bool
		return ret
	}
	return *o.AsMillis
}

// GetAsMillisOk returns a tuple with the AsMillis field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TelemetryDruidExtractionFunctionTimeFormatAllOf) GetAsMillisOk() (*bool, bool) {
	if o == nil || o.AsMillis == nil {
		return nil, false
	}
	return o.AsMillis, true
}

// HasAsMillis returns a boolean if a field has been set.
func (o *TelemetryDruidExtractionFunctionTimeFormatAllOf) HasAsMillis() bool {
	if o != nil && o.AsMillis != nil {
		return true
	}

	return false
}

// SetAsMillis gets a reference to the given bool and assigns it to the AsMillis field.
func (o *TelemetryDruidExtractionFunctionTimeFormatAllOf) SetAsMillis(v bool) {
	o.AsMillis = &v
}

func (o TelemetryDruidExtractionFunctionTimeFormatAllOf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["type"] = o.Type
	}
	if o.Format != nil {
		toSerialize["format"] = o.Format
	}
	if o.Locale != nil {
		toSerialize["locale"] = o.Locale
	}
	if o.TimeZone != nil {
		toSerialize["timeZone"] = o.TimeZone
	}
	if o.Granularity != nil {
		toSerialize["granularity"] = o.Granularity
	}
	if o.AsMillis != nil {
		toSerialize["asMillis"] = o.AsMillis
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *TelemetryDruidExtractionFunctionTimeFormatAllOf) UnmarshalJSON(bytes []byte) (err error) {
	varTelemetryDruidExtractionFunctionTimeFormatAllOf := _TelemetryDruidExtractionFunctionTimeFormatAllOf{}

	if err = json.Unmarshal(bytes, &varTelemetryDruidExtractionFunctionTimeFormatAllOf); err == nil {
		*o = TelemetryDruidExtractionFunctionTimeFormatAllOf(varTelemetryDruidExtractionFunctionTimeFormatAllOf)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "type")
		delete(additionalProperties, "format")
		delete(additionalProperties, "locale")
		delete(additionalProperties, "timeZone")
		delete(additionalProperties, "granularity")
		delete(additionalProperties, "asMillis")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableTelemetryDruidExtractionFunctionTimeFormatAllOf struct {
	value *TelemetryDruidExtractionFunctionTimeFormatAllOf
	isSet bool
}

func (v NullableTelemetryDruidExtractionFunctionTimeFormatAllOf) Get() *TelemetryDruidExtractionFunctionTimeFormatAllOf {
	return v.value
}

func (v *NullableTelemetryDruidExtractionFunctionTimeFormatAllOf) Set(val *TelemetryDruidExtractionFunctionTimeFormatAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableTelemetryDruidExtractionFunctionTimeFormatAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableTelemetryDruidExtractionFunctionTimeFormatAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTelemetryDruidExtractionFunctionTimeFormatAllOf(val *TelemetryDruidExtractionFunctionTimeFormatAllOf) *NullableTelemetryDruidExtractionFunctionTimeFormatAllOf {
	return &NullableTelemetryDruidExtractionFunctionTimeFormatAllOf{value: val, isSet: true}
}

func (v NullableTelemetryDruidExtractionFunctionTimeFormatAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTelemetryDruidExtractionFunctionTimeFormatAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
