/*
Cisco Intersight

Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations. The Intersight OpenAPI document defines the complete set of properties that are returned in the HTTP response. From that perspective, a client can expect that no additional properties are returned, unless these properties are explicitly defined in the OpenAPI document. However, when a client uses an older version of the Intersight OpenAPI document, the server may send additional properties because the software is more recent than the client. In that case, the client may receive properties that it does not know about. Some generated SDKs perform a strict validation of the HTTP response body against the OpenAPI document.

API version: 1.0.11-16342
Contact: intersight@cisco.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package intersight

import (
	"encoding/json"
	"time"
)

// SchedulerTaskResultAllOf Definition of the list of properties defined in 'scheduler.TaskResult', excluding properties defined in parent classes.
type SchedulerTaskResultAllOf struct {
	// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.
	ClassId string `json:"ClassId"`
	// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
	ObjectType string `json:"ObjectType"`
	// End time for the scheduled task.
	EndTime *time.Time `json:"EndTime,omitempty"`
	// Start time for the scheduled task.
	StartTime    *time.Time                        `json:"StartTime,omitempty"`
	StatusDetail NullableSchedulerTaskResultStatus `json:"StatusDetail,omitempty"`
	// The timezone for the startTime specified. * `Pacific/Niue` -  * `Pacific/Pago_Pago` -  * `Pacific/Honolulu` -  * `Pacific/Rarotonga` -  * `Pacific/Tahiti` -  * `Pacific/Marquesas` -  * `America/Anchorage` -  * `Pacific/Gambier` -  * `America/Los_Angeles` -  * `America/Tijuana` -  * `America/Vancouver` -  * `America/Whitehorse` -  * `Pacific/Pitcairn` -  * `America/Dawson_Creek` -  * `America/Denver` -  * `America/Edmonton` -  * `America/Hermosillo` -  * `America/Mazatlan` -  * `America/Phoenix` -  * `America/Yellowknife` -  * `America/Belize` -  * `America/Chicago` -  * `America/Costa_Rica` -  * `America/El_Salvador` -  * `America/Guatemala` -  * `America/Managua` -  * `America/Mexico_City` -  * `America/Regina` -  * `America/Tegucigalpa` -  * `America/Winnipeg` -  * `Pacific/Galapagos` -  * `America/Bogota` -  * `America/Cancun` -  * `America/Cayman` -  * `America/Guayaquil` -  * `America/Havana` -  * `America/Iqaluit` -  * `America/Jamaica` -  * `America/Lima` -  * `America/Nassau` -  * `America/New_York` -  * `America/Nuuk` -  * `America/Panama` -  * `America/Port-au-Prince` -  * `America/Rio_Branco` -  * `America/Toronto` -  * `Pacific/Easter` -  * `America/Caracas` -  * `America/Asuncion` -  * `America/Barbados` -  * `America/Boa_Vista` -  * `America/Campo_Grande` -  * `America/Cuiaba` -  * `America/Curacao` -  * `America/Grand_Turk` -  * `America/Guyana` -  * `America/Halifax` -  * `America/La_Paz` -  * `America/Manaus` -  * `America/Martinique` -  * `America/Port_of_Spain` -  * `America/Porto_Velho` -  * `America/Puerto_Rico` -  * `America/Santo_Domingo` -  * `America/Thule` -  * `Atlantic/Bermuda` -  * `America/St_Johns` -  * `America/Araguaina` -  * `America/Argentina/Buenos_Aires` -  * `America/Bahia` -  * `America/Belem` -  * `America/Cayenne` -  * `America/Fortaleza` -  * `America/Godthab` -  * `America/Maceio` -  * `America/Miquelon` -  * `America/Montevideo` -  * `America/Paramaribo` -  * `America/Recife` -  * `America/Santiago` -  * `America/Sao_Paulo` -  * `Antarctica/Palmer` -  * `Antarctica/Rothera` -  * `Atlantic/Stanley` -  * `America/Noronha` -  * `Atlantic/South_Georgia` -  * `America/Scoresbysund` -  * `Atlantic/Azores` -  * `Atlantic/Cape_Verde` -  * `Africa/Abidjan` -  * `Africa/Accra` -  * `Africa/Bissau` -  * `Africa/Casablanca` -  * `Africa/El_Aaiun` -  * `Africa/Monrovia` -  * `America/Danmarkshavn` -  * `Atlantic/Canary` -  * `Atlantic/Faroe` -  * `Atlantic/Reykjavik` -  * `Etc/GMT` -  * `Europe/Dublin` -  * `Europe/Lisbon` -  * `Europe/London` -  * `Africa/Algiers` -  * `Africa/Ceuta` -  * `Africa/Lagos` -  * `Africa/Ndjamena` -  * `Africa/Tunis` -  * `Africa/Windhoek` -  * `Europe/Amsterdam` -  * `Europe/Andorra` -  * `Europe/Belgrade` -  * `Europe/Berlin` -  * `Europe/Brussels` -  * `Europe/Budapest` -  * `Europe/Copenhagen` -  * `Europe/Gibraltar` -  * `Europe/Luxembourg` -  * `Europe/Madrid` -  * `Europe/Malta` -  * `Europe/Monaco` -  * `Europe/Oslo` -  * `Europe/Paris` -  * `Europe/Prague` -  * `Europe/Rome` -  * `Europe/Stockholm` -  * `Europe/Tirane` -  * `Europe/Vienna` -  * `Europe/Warsaw` -  * `Europe/Zurich` -  * `Africa/Cairo` -  * `Africa/Johannesburg` -  * `Africa/Maputo` -  * `Africa/Tripoli` -  * `Asia/Amman` -  * `Asia/Beirut` -  * `Asia/Damascus` -  * `Asia/Gaza` -  * `Asia/Jerusalem` -  * `Asia/Nicosia` -  * `Europe/Athens` -  * `Europe/Bucharest` -  * `Europe/Chisinau` -  * `Europe/Helsinki` -  * `Europe/Istanbul` -  * `Europe/Kaliningrad` -  * `Europe/Kiev` -  * `Europe/Riga` -  * `Europe/Sofia` -  * `Europe/Tallinn` -  * `Europe/Vilnius` -  * `Africa/Khartoum` -  * `Africa/Nairobi` -  * `Antarctica/Syowa` -  * `Asia/Baghdad` -  * `Asia/Qatar` -  * `Asia/Riyadh` -  * `Europe/Minsk` -  * `Europe/Moscow` -  * `Asia/Tehran` -  * `Asia/Baku` -  * `Asia/Dubai` -  * `Asia/Tbilisi` -  * `Asia/Yerevan` -  * `Europe/Samara` -  * `Indian/Mahe` -  * `Indian/Mauritius` -  * `Indian/Reunion` -  * `Asia/Kabul` -  * `Antarctica/Mawson` -  * `Asia/Aqtau` -  * `Asia/Aqtobe` -  * `Asia/Ashgabat` -  * `Asia/Dushanbe` -  * `Asia/Karachi` -  * `Asia/Tashkent` -  * `Asia/Yekaterinburg` -  * `Indian/Kerguelen` -  * `Indian/Maldives` -  * `Asia/Calcutta` -  * `Asia/Kolkata` -  * `Asia/Colombo` -  * `Asia/Kathmandu` -  * `Asia/Katmandu` -  * `Antarctica/Vostok` -  * `Asia/Almaty` -  * `Asia/Bishkek` -  * `Asia/Dhaka` -  * `Asia/Omsk` -  * `Asia/Thimphu` -  * `Indian/Chagos` -  * `Asia/Rangoon` -  * `Indian/Cocos` -  * `Antarctica/Davis` -  * `Asia/Bangkok` -  * `Asia/Ho_Chi_Minh` -  * `Asia/Hovd` -  * `Asia/Jakarta` -  * `Asia/Krasnoyarsk` -  * `Asia/Saigon` -  * `Indian/Christmas` -  * `Antarctica/Casey` -  * `Asia/Brunei` -  * `Asia/Choibalsan` -  * `Asia/Hong_Kong` -  * `Asia/Irkutsk` -  * `Asia/Kuala_Lumpur` -  * `Asia/Macau` -  * `Asia/Makassar` -  * `Asia/Manila` -  * `Asia/Shanghai` -  * `Asia/Singapore` -  * `Asia/Taipei` -  * `Asia/Ulaanbaatar` -  * `Australia/Perth` -  * `Asia/Pyongyang` -  * `Asia/Dili` -  * `Asia/Jayapura` -  * `Asia/Seoul` -  * `Asia/Tokyo` -  * `Asia/Yakutsk` -  * `Asia/Yangon` -  * `Pacific/Palau` -  * `Australia/Adelaide` -  * `Australia/Darwin` -  * `Antarctica/DumontDUrville` -  * `Asia/Magadan` -  * `Asia/Vladivostok` -  * `Australia/Brisbane` -  * `Australia/Hobart` -  * `Australia/Sydney` -  * `Pacific/Chuuk` -  * `Pacific/Guam` -  * `Pacific/Port_Moresby` -  * `Pacific/Efate` -  * `Pacific/Guadalcanal` -  * `Pacific/Kosrae` -  * `Pacific/Norfolk` -  * `Pacific/Noumea` -  * `Pacific/Pohnpei` -  * `Asia/Kamchatka` -  * `Pacific/Auckland` -  * `Pacific/Fiji` -  * `Pacific/Funafuti` -  * `Pacific/Kwajalein` -  * `Pacific/Majuro` -  * `Pacific/Nauru` -  * `Pacific/Tarawa` -  * `Pacific/Wake` -  * `Pacific/Wallis` -  * `Pacific/Apia` -  * `Pacific/Enderbury` -  * `Pacific/Fakaofo` -  * `Pacific/Tongatapu` -  * `Pacific/Kiritimati` -  * `UTC` -
	TimeZone             *string                            `json:"TimeZone,omitempty"`
	AssociatedObject     *MoBaseMoRelationship              `json:"AssociatedObject,omitempty"`
	TaskSchedule         *SchedulerTaskScheduleRelationship `json:"TaskSchedule,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _SchedulerTaskResultAllOf SchedulerTaskResultAllOf

// NewSchedulerTaskResultAllOf instantiates a new SchedulerTaskResultAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSchedulerTaskResultAllOf(classId string, objectType string) *SchedulerTaskResultAllOf {
	this := SchedulerTaskResultAllOf{}
	this.ClassId = classId
	this.ObjectType = objectType
	return &this
}

// NewSchedulerTaskResultAllOfWithDefaults instantiates a new SchedulerTaskResultAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSchedulerTaskResultAllOfWithDefaults() *SchedulerTaskResultAllOf {
	this := SchedulerTaskResultAllOf{}
	var classId string = "scheduler.TaskResult"
	this.ClassId = classId
	var objectType string = "scheduler.TaskResult"
	this.ObjectType = objectType
	return &this
}

// GetClassId returns the ClassId field value
func (o *SchedulerTaskResultAllOf) GetClassId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ClassId
}

// GetClassIdOk returns a tuple with the ClassId field value
// and a boolean to check if the value has been set.
func (o *SchedulerTaskResultAllOf) GetClassIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ClassId, true
}

// SetClassId sets field value
func (o *SchedulerTaskResultAllOf) SetClassId(v string) {
	o.ClassId = v
}

// GetObjectType returns the ObjectType field value
func (o *SchedulerTaskResultAllOf) GetObjectType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ObjectType
}

// GetObjectTypeOk returns a tuple with the ObjectType field value
// and a boolean to check if the value has been set.
func (o *SchedulerTaskResultAllOf) GetObjectTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ObjectType, true
}

// SetObjectType sets field value
func (o *SchedulerTaskResultAllOf) SetObjectType(v string) {
	o.ObjectType = v
}

// GetEndTime returns the EndTime field value if set, zero value otherwise.
func (o *SchedulerTaskResultAllOf) GetEndTime() time.Time {
	if o == nil || o.EndTime == nil {
		var ret time.Time
		return ret
	}
	return *o.EndTime
}

// GetEndTimeOk returns a tuple with the EndTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchedulerTaskResultAllOf) GetEndTimeOk() (*time.Time, bool) {
	if o == nil || o.EndTime == nil {
		return nil, false
	}
	return o.EndTime, true
}

// HasEndTime returns a boolean if a field has been set.
func (o *SchedulerTaskResultAllOf) HasEndTime() bool {
	if o != nil && o.EndTime != nil {
		return true
	}

	return false
}

// SetEndTime gets a reference to the given time.Time and assigns it to the EndTime field.
func (o *SchedulerTaskResultAllOf) SetEndTime(v time.Time) {
	o.EndTime = &v
}

// GetStartTime returns the StartTime field value if set, zero value otherwise.
func (o *SchedulerTaskResultAllOf) GetStartTime() time.Time {
	if o == nil || o.StartTime == nil {
		var ret time.Time
		return ret
	}
	return *o.StartTime
}

// GetStartTimeOk returns a tuple with the StartTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchedulerTaskResultAllOf) GetStartTimeOk() (*time.Time, bool) {
	if o == nil || o.StartTime == nil {
		return nil, false
	}
	return o.StartTime, true
}

// HasStartTime returns a boolean if a field has been set.
func (o *SchedulerTaskResultAllOf) HasStartTime() bool {
	if o != nil && o.StartTime != nil {
		return true
	}

	return false
}

// SetStartTime gets a reference to the given time.Time and assigns it to the StartTime field.
func (o *SchedulerTaskResultAllOf) SetStartTime(v time.Time) {
	o.StartTime = &v
}

// GetStatusDetail returns the StatusDetail field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SchedulerTaskResultAllOf) GetStatusDetail() SchedulerTaskResultStatus {
	if o == nil || o.StatusDetail.Get() == nil {
		var ret SchedulerTaskResultStatus
		return ret
	}
	return *o.StatusDetail.Get()
}

// GetStatusDetailOk returns a tuple with the StatusDetail field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SchedulerTaskResultAllOf) GetStatusDetailOk() (*SchedulerTaskResultStatus, bool) {
	if o == nil {
		return nil, false
	}
	return o.StatusDetail.Get(), o.StatusDetail.IsSet()
}

// HasStatusDetail returns a boolean if a field has been set.
func (o *SchedulerTaskResultAllOf) HasStatusDetail() bool {
	if o != nil && o.StatusDetail.IsSet() {
		return true
	}

	return false
}

// SetStatusDetail gets a reference to the given NullableSchedulerTaskResultStatus and assigns it to the StatusDetail field.
func (o *SchedulerTaskResultAllOf) SetStatusDetail(v SchedulerTaskResultStatus) {
	o.StatusDetail.Set(&v)
}

// SetStatusDetailNil sets the value for StatusDetail to be an explicit nil
func (o *SchedulerTaskResultAllOf) SetStatusDetailNil() {
	o.StatusDetail.Set(nil)
}

// UnsetStatusDetail ensures that no value is present for StatusDetail, not even an explicit nil
func (o *SchedulerTaskResultAllOf) UnsetStatusDetail() {
	o.StatusDetail.Unset()
}

// GetTimeZone returns the TimeZone field value if set, zero value otherwise.
func (o *SchedulerTaskResultAllOf) GetTimeZone() string {
	if o == nil || o.TimeZone == nil {
		var ret string
		return ret
	}
	return *o.TimeZone
}

// GetTimeZoneOk returns a tuple with the TimeZone field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchedulerTaskResultAllOf) GetTimeZoneOk() (*string, bool) {
	if o == nil || o.TimeZone == nil {
		return nil, false
	}
	return o.TimeZone, true
}

// HasTimeZone returns a boolean if a field has been set.
func (o *SchedulerTaskResultAllOf) HasTimeZone() bool {
	if o != nil && o.TimeZone != nil {
		return true
	}

	return false
}

// SetTimeZone gets a reference to the given string and assigns it to the TimeZone field.
func (o *SchedulerTaskResultAllOf) SetTimeZone(v string) {
	o.TimeZone = &v
}

// GetAssociatedObject returns the AssociatedObject field value if set, zero value otherwise.
func (o *SchedulerTaskResultAllOf) GetAssociatedObject() MoBaseMoRelationship {
	if o == nil || o.AssociatedObject == nil {
		var ret MoBaseMoRelationship
		return ret
	}
	return *o.AssociatedObject
}

// GetAssociatedObjectOk returns a tuple with the AssociatedObject field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchedulerTaskResultAllOf) GetAssociatedObjectOk() (*MoBaseMoRelationship, bool) {
	if o == nil || o.AssociatedObject == nil {
		return nil, false
	}
	return o.AssociatedObject, true
}

// HasAssociatedObject returns a boolean if a field has been set.
func (o *SchedulerTaskResultAllOf) HasAssociatedObject() bool {
	if o != nil && o.AssociatedObject != nil {
		return true
	}

	return false
}

// SetAssociatedObject gets a reference to the given MoBaseMoRelationship and assigns it to the AssociatedObject field.
func (o *SchedulerTaskResultAllOf) SetAssociatedObject(v MoBaseMoRelationship) {
	o.AssociatedObject = &v
}

// GetTaskSchedule returns the TaskSchedule field value if set, zero value otherwise.
func (o *SchedulerTaskResultAllOf) GetTaskSchedule() SchedulerTaskScheduleRelationship {
	if o == nil || o.TaskSchedule == nil {
		var ret SchedulerTaskScheduleRelationship
		return ret
	}
	return *o.TaskSchedule
}

// GetTaskScheduleOk returns a tuple with the TaskSchedule field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchedulerTaskResultAllOf) GetTaskScheduleOk() (*SchedulerTaskScheduleRelationship, bool) {
	if o == nil || o.TaskSchedule == nil {
		return nil, false
	}
	return o.TaskSchedule, true
}

// HasTaskSchedule returns a boolean if a field has been set.
func (o *SchedulerTaskResultAllOf) HasTaskSchedule() bool {
	if o != nil && o.TaskSchedule != nil {
		return true
	}

	return false
}

// SetTaskSchedule gets a reference to the given SchedulerTaskScheduleRelationship and assigns it to the TaskSchedule field.
func (o *SchedulerTaskResultAllOf) SetTaskSchedule(v SchedulerTaskScheduleRelationship) {
	o.TaskSchedule = &v
}

func (o SchedulerTaskResultAllOf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["ClassId"] = o.ClassId
	}
	if true {
		toSerialize["ObjectType"] = o.ObjectType
	}
	if o.EndTime != nil {
		toSerialize["EndTime"] = o.EndTime
	}
	if o.StartTime != nil {
		toSerialize["StartTime"] = o.StartTime
	}
	if o.StatusDetail.IsSet() {
		toSerialize["StatusDetail"] = o.StatusDetail.Get()
	}
	if o.TimeZone != nil {
		toSerialize["TimeZone"] = o.TimeZone
	}
	if o.AssociatedObject != nil {
		toSerialize["AssociatedObject"] = o.AssociatedObject
	}
	if o.TaskSchedule != nil {
		toSerialize["TaskSchedule"] = o.TaskSchedule
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *SchedulerTaskResultAllOf) UnmarshalJSON(bytes []byte) (err error) {
	varSchedulerTaskResultAllOf := _SchedulerTaskResultAllOf{}

	if err = json.Unmarshal(bytes, &varSchedulerTaskResultAllOf); err == nil {
		*o = SchedulerTaskResultAllOf(varSchedulerTaskResultAllOf)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "ClassId")
		delete(additionalProperties, "ObjectType")
		delete(additionalProperties, "EndTime")
		delete(additionalProperties, "StartTime")
		delete(additionalProperties, "StatusDetail")
		delete(additionalProperties, "TimeZone")
		delete(additionalProperties, "AssociatedObject")
		delete(additionalProperties, "TaskSchedule")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableSchedulerTaskResultAllOf struct {
	value *SchedulerTaskResultAllOf
	isSet bool
}

func (v NullableSchedulerTaskResultAllOf) Get() *SchedulerTaskResultAllOf {
	return v.value
}

func (v *NullableSchedulerTaskResultAllOf) Set(val *SchedulerTaskResultAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableSchedulerTaskResultAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableSchedulerTaskResultAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSchedulerTaskResultAllOf(val *SchedulerTaskResultAllOf) *NullableSchedulerTaskResultAllOf {
	return &NullableSchedulerTaskResultAllOf{value: val, isSet: true}
}

func (v NullableSchedulerTaskResultAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSchedulerTaskResultAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
