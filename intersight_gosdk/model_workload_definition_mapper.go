/*
Cisco Intersight

Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations. The Intersight OpenAPI document defines the complete set of properties that are returned in the HTTP response. From that perspective, a client can expect that no additional properties are returned, unless these properties are explicitly defined in the OpenAPI document. However, when a client uses an older version of the Intersight OpenAPI document, the server may send additional properties because the software is more recent than the client. In that case, the client may receive properties that it does not know about. Some generated SDKs perform a strict validation of the HTTP response body against the OpenAPI document.

API version: 1.0.11-2025101412
Contact: intersight@cisco.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package intersight

import (
	"encoding/json"
	"fmt"
	"reflect"
	"strings"
)

// checks if the WorkloadDefinitionMapper type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &WorkloadDefinitionMapper{}

// WorkloadDefinitionMapper Captures the definition and its version to map values for consumers. For example, a WorkloadDeployment references a WorkloadDefinition, containing both the WorkloadDefinition and its version.
type WorkloadDefinitionMapper struct {
	MoBaseComplexType
	// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.
	ClassId string `json:"ClassId"`
	// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
	ObjectType string `json:"ObjectType"`
	// The name of the definition being referenced.
	DefinitionName *string  `json:"DefinitionName,omitempty"`
	Organization   *MoMoRef `json:"Organization,omitempty"`
	// Indicates whether this version is the default version of the referenced definition. If set to true, the version should be the default.
	UsePreferredVersion *bool `json:"UsePreferredVersion,omitempty"`
	// The version number of the referenced definition.
	Version              *int64 `json:"Version,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _WorkloadDefinitionMapper WorkloadDefinitionMapper

// NewWorkloadDefinitionMapper instantiates a new WorkloadDefinitionMapper object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWorkloadDefinitionMapper(classId string, objectType string) *WorkloadDefinitionMapper {
	this := WorkloadDefinitionMapper{}
	this.ClassId = classId
	this.ObjectType = objectType
	return &this
}

// NewWorkloadDefinitionMapperWithDefaults instantiates a new WorkloadDefinitionMapper object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWorkloadDefinitionMapperWithDefaults() *WorkloadDefinitionMapper {
	this := WorkloadDefinitionMapper{}
	var classId string = "workload.DefinitionMapper"
	this.ClassId = classId
	var objectType string = "workload.DefinitionMapper"
	this.ObjectType = objectType
	return &this
}

// GetClassId returns the ClassId field value
func (o *WorkloadDefinitionMapper) GetClassId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ClassId
}

// GetClassIdOk returns a tuple with the ClassId field value
// and a boolean to check if the value has been set.
func (o *WorkloadDefinitionMapper) GetClassIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ClassId, true
}

// SetClassId sets field value
func (o *WorkloadDefinitionMapper) SetClassId(v string) {
	o.ClassId = v
}

// GetDefaultClassId returns the default value "workload.DefinitionMapper" of the ClassId field.
func (o *WorkloadDefinitionMapper) GetDefaultClassId() interface{} {
	return "workload.DefinitionMapper"
}

// GetObjectType returns the ObjectType field value
func (o *WorkloadDefinitionMapper) GetObjectType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ObjectType
}

// GetObjectTypeOk returns a tuple with the ObjectType field value
// and a boolean to check if the value has been set.
func (o *WorkloadDefinitionMapper) GetObjectTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ObjectType, true
}

// SetObjectType sets field value
func (o *WorkloadDefinitionMapper) SetObjectType(v string) {
	o.ObjectType = v
}

// GetDefaultObjectType returns the default value "workload.DefinitionMapper" of the ObjectType field.
func (o *WorkloadDefinitionMapper) GetDefaultObjectType() interface{} {
	return "workload.DefinitionMapper"
}

// GetDefinitionName returns the DefinitionName field value if set, zero value otherwise.
func (o *WorkloadDefinitionMapper) GetDefinitionName() string {
	if o == nil || IsNil(o.DefinitionName) {
		var ret string
		return ret
	}
	return *o.DefinitionName
}

// GetDefinitionNameOk returns a tuple with the DefinitionName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkloadDefinitionMapper) GetDefinitionNameOk() (*string, bool) {
	if o == nil || IsNil(o.DefinitionName) {
		return nil, false
	}
	return o.DefinitionName, true
}

// HasDefinitionName returns a boolean if a field has been set.
func (o *WorkloadDefinitionMapper) HasDefinitionName() bool {
	if o != nil && !IsNil(o.DefinitionName) {
		return true
	}

	return false
}

// SetDefinitionName gets a reference to the given string and assigns it to the DefinitionName field.
func (o *WorkloadDefinitionMapper) SetDefinitionName(v string) {
	o.DefinitionName = &v
}

// GetOrganization returns the Organization field value if set, zero value otherwise.
func (o *WorkloadDefinitionMapper) GetOrganization() MoMoRef {
	if o == nil || IsNil(o.Organization) {
		var ret MoMoRef
		return ret
	}
	return *o.Organization
}

// GetOrganizationOk returns a tuple with the Organization field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkloadDefinitionMapper) GetOrganizationOk() (*MoMoRef, bool) {
	if o == nil || IsNil(o.Organization) {
		return nil, false
	}
	return o.Organization, true
}

// HasOrganization returns a boolean if a field has been set.
func (o *WorkloadDefinitionMapper) HasOrganization() bool {
	if o != nil && !IsNil(o.Organization) {
		return true
	}

	return false
}

// SetOrganization gets a reference to the given MoMoRef and assigns it to the Organization field.
func (o *WorkloadDefinitionMapper) SetOrganization(v MoMoRef) {
	o.Organization = &v
}

// GetUsePreferredVersion returns the UsePreferredVersion field value if set, zero value otherwise.
func (o *WorkloadDefinitionMapper) GetUsePreferredVersion() bool {
	if o == nil || IsNil(o.UsePreferredVersion) {
		var ret bool
		return ret
	}
	return *o.UsePreferredVersion
}

// GetUsePreferredVersionOk returns a tuple with the UsePreferredVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkloadDefinitionMapper) GetUsePreferredVersionOk() (*bool, bool) {
	if o == nil || IsNil(o.UsePreferredVersion) {
		return nil, false
	}
	return o.UsePreferredVersion, true
}

// HasUsePreferredVersion returns a boolean if a field has been set.
func (o *WorkloadDefinitionMapper) HasUsePreferredVersion() bool {
	if o != nil && !IsNil(o.UsePreferredVersion) {
		return true
	}

	return false
}

// SetUsePreferredVersion gets a reference to the given bool and assigns it to the UsePreferredVersion field.
func (o *WorkloadDefinitionMapper) SetUsePreferredVersion(v bool) {
	o.UsePreferredVersion = &v
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *WorkloadDefinitionMapper) GetVersion() int64 {
	if o == nil || IsNil(o.Version) {
		var ret int64
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkloadDefinitionMapper) GetVersionOk() (*int64, bool) {
	if o == nil || IsNil(o.Version) {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *WorkloadDefinitionMapper) HasVersion() bool {
	if o != nil && !IsNil(o.Version) {
		return true
	}

	return false
}

// SetVersion gets a reference to the given int64 and assigns it to the Version field.
func (o *WorkloadDefinitionMapper) SetVersion(v int64) {
	o.Version = &v
}

func (o WorkloadDefinitionMapper) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o WorkloadDefinitionMapper) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	serializedMoBaseComplexType, errMoBaseComplexType := json.Marshal(o.MoBaseComplexType)
	if errMoBaseComplexType != nil {
		return map[string]interface{}{}, errMoBaseComplexType
	}
	errMoBaseComplexType = json.Unmarshal([]byte(serializedMoBaseComplexType), &toSerialize)
	if errMoBaseComplexType != nil {
		return map[string]interface{}{}, errMoBaseComplexType
	}
	if _, exists := toSerialize["ClassId"]; !exists {
		toSerialize["ClassId"] = o.GetDefaultClassId()
	}
	toSerialize["ClassId"] = o.ClassId
	if _, exists := toSerialize["ObjectType"]; !exists {
		toSerialize["ObjectType"] = o.GetDefaultObjectType()
	}
	toSerialize["ObjectType"] = o.ObjectType
	if !IsNil(o.DefinitionName) {
		toSerialize["DefinitionName"] = o.DefinitionName
	}
	if !IsNil(o.Organization) {
		toSerialize["Organization"] = o.Organization
	}
	if !IsNil(o.UsePreferredVersion) {
		toSerialize["UsePreferredVersion"] = o.UsePreferredVersion
	}
	if !IsNil(o.Version) {
		toSerialize["Version"] = o.Version
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *WorkloadDefinitionMapper) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"ClassId",
		"ObjectType",
	}

	// defaultValueFuncMap captures the default values for required properties.
	// These values are used when required properties are missing from the payload.
	defaultValueFuncMap := map[string]func() interface{}{
		"ClassId":    o.GetDefaultClassId,
		"ObjectType": o.GetDefaultObjectType,
	}
	var defaultValueApplied bool
	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			if _, ok := defaultValueFuncMap[requiredProperty]; ok {
				allProperties[requiredProperty] = defaultValueFuncMap[requiredProperty]()
				defaultValueApplied = true
			}
		}
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	if defaultValueApplied {
		data, err = json.Marshal(allProperties)
		if err != nil {
			return err
		}
	}
	type WorkloadDefinitionMapperWithoutEmbeddedStruct struct {
		// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.
		ClassId string `json:"ClassId"`
		// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
		ObjectType string `json:"ObjectType"`
		// The name of the definition being referenced.
		DefinitionName *string  `json:"DefinitionName,omitempty"`
		Organization   *MoMoRef `json:"Organization,omitempty"`
		// Indicates whether this version is the default version of the referenced definition. If set to true, the version should be the default.
		UsePreferredVersion *bool `json:"UsePreferredVersion,omitempty"`
		// The version number of the referenced definition.
		Version *int64 `json:"Version,omitempty"`
	}

	varWorkloadDefinitionMapperWithoutEmbeddedStruct := WorkloadDefinitionMapperWithoutEmbeddedStruct{}

	err = json.Unmarshal(data, &varWorkloadDefinitionMapperWithoutEmbeddedStruct)
	if err == nil {
		varWorkloadDefinitionMapper := _WorkloadDefinitionMapper{}
		varWorkloadDefinitionMapper.ClassId = varWorkloadDefinitionMapperWithoutEmbeddedStruct.ClassId
		varWorkloadDefinitionMapper.ObjectType = varWorkloadDefinitionMapperWithoutEmbeddedStruct.ObjectType
		varWorkloadDefinitionMapper.DefinitionName = varWorkloadDefinitionMapperWithoutEmbeddedStruct.DefinitionName
		varWorkloadDefinitionMapper.Organization = varWorkloadDefinitionMapperWithoutEmbeddedStruct.Organization
		varWorkloadDefinitionMapper.UsePreferredVersion = varWorkloadDefinitionMapperWithoutEmbeddedStruct.UsePreferredVersion
		varWorkloadDefinitionMapper.Version = varWorkloadDefinitionMapperWithoutEmbeddedStruct.Version
		*o = WorkloadDefinitionMapper(varWorkloadDefinitionMapper)
	} else {
		return err
	}

	varWorkloadDefinitionMapper := _WorkloadDefinitionMapper{}

	err = json.Unmarshal(data, &varWorkloadDefinitionMapper)
	if err == nil {
		o.MoBaseComplexType = varWorkloadDefinitionMapper.MoBaseComplexType
	} else {
		return err
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "ClassId")
		delete(additionalProperties, "ObjectType")
		delete(additionalProperties, "DefinitionName")
		delete(additionalProperties, "Organization")
		delete(additionalProperties, "UsePreferredVersion")
		delete(additionalProperties, "Version")

		// remove fields from embedded structs
		reflectMoBaseComplexType := reflect.ValueOf(o.MoBaseComplexType)
		for i := 0; i < reflectMoBaseComplexType.Type().NumField(); i++ {
			t := reflectMoBaseComplexType.Type().Field(i)

			if jsonTag := t.Tag.Get("json"); jsonTag != "" {
				fieldName := ""
				if commaIdx := strings.Index(jsonTag, ","); commaIdx > 0 {
					fieldName = jsonTag[:commaIdx]
				} else {
					fieldName = jsonTag
				}
				if fieldName != "AdditionalProperties" {
					delete(additionalProperties, fieldName)
				}
			}
		}

		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableWorkloadDefinitionMapper struct {
	value *WorkloadDefinitionMapper
	isSet bool
}

func (v NullableWorkloadDefinitionMapper) Get() *WorkloadDefinitionMapper {
	return v.value
}

func (v *NullableWorkloadDefinitionMapper) Set(val *WorkloadDefinitionMapper) {
	v.value = val
	v.isSet = true
}

func (v NullableWorkloadDefinitionMapper) IsSet() bool {
	return v.isSet
}

func (v *NullableWorkloadDefinitionMapper) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWorkloadDefinitionMapper(val *WorkloadDefinitionMapper) *NullableWorkloadDefinitionMapper {
	return &NullableWorkloadDefinitionMapper{value: val, isSet: true}
}

func (v NullableWorkloadDefinitionMapper) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWorkloadDefinitionMapper) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
