/*
Cisco Intersight

Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations. The Intersight OpenAPI document defines the complete set of properties that are returned in the HTTP response. From that perspective, a client can expect that no additional properties are returned, unless these properties are explicitly defined in the OpenAPI document. However, when a client uses an older version of the Intersight OpenAPI document, the server may send additional properties because the software is more recent than the client. In that case, the client may receive properties that it does not know about. Some generated SDKs perform a strict validation of the HTTP response body against the OpenAPI document.

API version: 1.0.11-2025101412
Contact: intersight@cisco.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package intersight

import (
	"encoding/json"
	"fmt"
	"reflect"
	"strings"
)

// checks if the EquipmentEnclosureElement type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EquipmentEnclosureElement{}

// EquipmentEnclosureElement This represents Enclosure element of chassis/server which holds the manageable sub comoponents.
type EquipmentEnclosureElement struct {
	EquipmentBase
	// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.
	ClassId string `json:"ClassId"`
	// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
	ObjectType string `json:"ObjectType"`
	// This field is to provide description for the Enclosure module.
	Description *string `json:"Description,omitempty"`
	// This field acts as the identifier for this particular Enclosure Module, within the Server or Fabric Interconnect.
	EnclosureId *string `json:"EnclosureId,omitempty"`
	// The name of the pluggable Enclosure Module.
	Name       *string  `json:"Name,omitempty"`
	OperReason []string `json:"OperReason,omitempty"`
	// This field is used to indicate this equipment enclosure's operational state.
	OperState *string `json:"OperState,omitempty"`
	// This field identifies the Part Number for this Enclosure Module.
	PartNumber *string `json:"PartNumber,omitempty"`
	// This field identifies the Product ID for the Enclosure module.
	Pid *string `json:"Pid,omitempty"`
	// This field identifies the Stockkeeping Unit for this Enclosure Module.
	Sku *string `json:"Sku,omitempty"`
	// This field is to abstract the status of the Enclosure module.
	Status *string `json:"Status,omitempty"`
	// Type of the Enclosure module.
	Type *string `json:"Type,omitempty"`
	// This field identifies the Vendor ID for this Enclosure Module.
	Vid             *string                             `json:"Vid,omitempty"`
	ComputeRackUnit NullableComputeRackUnitRelationship `json:"ComputeRackUnit,omitempty"`
	// An array of relationships to firmwareRunningFirmware resources.
	FirmwareRunningFirmwares []FirmwareRunningFirmwareRelationship `json:"FirmwareRunningFirmwares,omitempty"`
	// An array of relationships to graphicsCard resources.
	GraphicsCards        []GraphicsCardRelationship                  `json:"GraphicsCards,omitempty"`
	RegisteredDevice     NullableAssetDeviceRegistrationRelationship `json:"RegisteredDevice,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _EquipmentEnclosureElement EquipmentEnclosureElement

// NewEquipmentEnclosureElement instantiates a new EquipmentEnclosureElement object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEquipmentEnclosureElement(classId string, objectType string) *EquipmentEnclosureElement {
	this := EquipmentEnclosureElement{}
	this.ClassId = classId
	this.ObjectType = objectType
	return &this
}

// NewEquipmentEnclosureElementWithDefaults instantiates a new EquipmentEnclosureElement object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEquipmentEnclosureElementWithDefaults() *EquipmentEnclosureElement {
	this := EquipmentEnclosureElement{}
	var classId string = "equipment.EnclosureElement"
	this.ClassId = classId
	var objectType string = "equipment.EnclosureElement"
	this.ObjectType = objectType
	return &this
}

// GetClassId returns the ClassId field value
func (o *EquipmentEnclosureElement) GetClassId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ClassId
}

// GetClassIdOk returns a tuple with the ClassId field value
// and a boolean to check if the value has been set.
func (o *EquipmentEnclosureElement) GetClassIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ClassId, true
}

// SetClassId sets field value
func (o *EquipmentEnclosureElement) SetClassId(v string) {
	o.ClassId = v
}

// GetDefaultClassId returns the default value "equipment.EnclosureElement" of the ClassId field.
func (o *EquipmentEnclosureElement) GetDefaultClassId() interface{} {
	return "equipment.EnclosureElement"
}

// GetObjectType returns the ObjectType field value
func (o *EquipmentEnclosureElement) GetObjectType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ObjectType
}

// GetObjectTypeOk returns a tuple with the ObjectType field value
// and a boolean to check if the value has been set.
func (o *EquipmentEnclosureElement) GetObjectTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ObjectType, true
}

// SetObjectType sets field value
func (o *EquipmentEnclosureElement) SetObjectType(v string) {
	o.ObjectType = v
}

// GetDefaultObjectType returns the default value "equipment.EnclosureElement" of the ObjectType field.
func (o *EquipmentEnclosureElement) GetDefaultObjectType() interface{} {
	return "equipment.EnclosureElement"
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *EquipmentEnclosureElement) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EquipmentEnclosureElement) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *EquipmentEnclosureElement) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *EquipmentEnclosureElement) SetDescription(v string) {
	o.Description = &v
}

// GetEnclosureId returns the EnclosureId field value if set, zero value otherwise.
func (o *EquipmentEnclosureElement) GetEnclosureId() string {
	if o == nil || IsNil(o.EnclosureId) {
		var ret string
		return ret
	}
	return *o.EnclosureId
}

// GetEnclosureIdOk returns a tuple with the EnclosureId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EquipmentEnclosureElement) GetEnclosureIdOk() (*string, bool) {
	if o == nil || IsNil(o.EnclosureId) {
		return nil, false
	}
	return o.EnclosureId, true
}

// HasEnclosureId returns a boolean if a field has been set.
func (o *EquipmentEnclosureElement) HasEnclosureId() bool {
	if o != nil && !IsNil(o.EnclosureId) {
		return true
	}

	return false
}

// SetEnclosureId gets a reference to the given string and assigns it to the EnclosureId field.
func (o *EquipmentEnclosureElement) SetEnclosureId(v string) {
	o.EnclosureId = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *EquipmentEnclosureElement) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EquipmentEnclosureElement) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *EquipmentEnclosureElement) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *EquipmentEnclosureElement) SetName(v string) {
	o.Name = &v
}

// GetOperReason returns the OperReason field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EquipmentEnclosureElement) GetOperReason() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.OperReason
}

// GetOperReasonOk returns a tuple with the OperReason field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EquipmentEnclosureElement) GetOperReasonOk() ([]string, bool) {
	if o == nil || IsNil(o.OperReason) {
		return nil, false
	}
	return o.OperReason, true
}

// HasOperReason returns a boolean if a field has been set.
func (o *EquipmentEnclosureElement) HasOperReason() bool {
	if o != nil && !IsNil(o.OperReason) {
		return true
	}

	return false
}

// SetOperReason gets a reference to the given []string and assigns it to the OperReason field.
func (o *EquipmentEnclosureElement) SetOperReason(v []string) {
	o.OperReason = v
}

// GetOperState returns the OperState field value if set, zero value otherwise.
func (o *EquipmentEnclosureElement) GetOperState() string {
	if o == nil || IsNil(o.OperState) {
		var ret string
		return ret
	}
	return *o.OperState
}

// GetOperStateOk returns a tuple with the OperState field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EquipmentEnclosureElement) GetOperStateOk() (*string, bool) {
	if o == nil || IsNil(o.OperState) {
		return nil, false
	}
	return o.OperState, true
}

// HasOperState returns a boolean if a field has been set.
func (o *EquipmentEnclosureElement) HasOperState() bool {
	if o != nil && !IsNil(o.OperState) {
		return true
	}

	return false
}

// SetOperState gets a reference to the given string and assigns it to the OperState field.
func (o *EquipmentEnclosureElement) SetOperState(v string) {
	o.OperState = &v
}

// GetPartNumber returns the PartNumber field value if set, zero value otherwise.
func (o *EquipmentEnclosureElement) GetPartNumber() string {
	if o == nil || IsNil(o.PartNumber) {
		var ret string
		return ret
	}
	return *o.PartNumber
}

// GetPartNumberOk returns a tuple with the PartNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EquipmentEnclosureElement) GetPartNumberOk() (*string, bool) {
	if o == nil || IsNil(o.PartNumber) {
		return nil, false
	}
	return o.PartNumber, true
}

// HasPartNumber returns a boolean if a field has been set.
func (o *EquipmentEnclosureElement) HasPartNumber() bool {
	if o != nil && !IsNil(o.PartNumber) {
		return true
	}

	return false
}

// SetPartNumber gets a reference to the given string and assigns it to the PartNumber field.
func (o *EquipmentEnclosureElement) SetPartNumber(v string) {
	o.PartNumber = &v
}

// GetPid returns the Pid field value if set, zero value otherwise.
func (o *EquipmentEnclosureElement) GetPid() string {
	if o == nil || IsNil(o.Pid) {
		var ret string
		return ret
	}
	return *o.Pid
}

// GetPidOk returns a tuple with the Pid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EquipmentEnclosureElement) GetPidOk() (*string, bool) {
	if o == nil || IsNil(o.Pid) {
		return nil, false
	}
	return o.Pid, true
}

// HasPid returns a boolean if a field has been set.
func (o *EquipmentEnclosureElement) HasPid() bool {
	if o != nil && !IsNil(o.Pid) {
		return true
	}

	return false
}

// SetPid gets a reference to the given string and assigns it to the Pid field.
func (o *EquipmentEnclosureElement) SetPid(v string) {
	o.Pid = &v
}

// GetSku returns the Sku field value if set, zero value otherwise.
func (o *EquipmentEnclosureElement) GetSku() string {
	if o == nil || IsNil(o.Sku) {
		var ret string
		return ret
	}
	return *o.Sku
}

// GetSkuOk returns a tuple with the Sku field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EquipmentEnclosureElement) GetSkuOk() (*string, bool) {
	if o == nil || IsNil(o.Sku) {
		return nil, false
	}
	return o.Sku, true
}

// HasSku returns a boolean if a field has been set.
func (o *EquipmentEnclosureElement) HasSku() bool {
	if o != nil && !IsNil(o.Sku) {
		return true
	}

	return false
}

// SetSku gets a reference to the given string and assigns it to the Sku field.
func (o *EquipmentEnclosureElement) SetSku(v string) {
	o.Sku = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *EquipmentEnclosureElement) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EquipmentEnclosureElement) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *EquipmentEnclosureElement) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *EquipmentEnclosureElement) SetStatus(v string) {
	o.Status = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *EquipmentEnclosureElement) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EquipmentEnclosureElement) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *EquipmentEnclosureElement) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *EquipmentEnclosureElement) SetType(v string) {
	o.Type = &v
}

// GetVid returns the Vid field value if set, zero value otherwise.
func (o *EquipmentEnclosureElement) GetVid() string {
	if o == nil || IsNil(o.Vid) {
		var ret string
		return ret
	}
	return *o.Vid
}

// GetVidOk returns a tuple with the Vid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EquipmentEnclosureElement) GetVidOk() (*string, bool) {
	if o == nil || IsNil(o.Vid) {
		return nil, false
	}
	return o.Vid, true
}

// HasVid returns a boolean if a field has been set.
func (o *EquipmentEnclosureElement) HasVid() bool {
	if o != nil && !IsNil(o.Vid) {
		return true
	}

	return false
}

// SetVid gets a reference to the given string and assigns it to the Vid field.
func (o *EquipmentEnclosureElement) SetVid(v string) {
	o.Vid = &v
}

// GetComputeRackUnit returns the ComputeRackUnit field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EquipmentEnclosureElement) GetComputeRackUnit() ComputeRackUnitRelationship {
	if o == nil || IsNil(o.ComputeRackUnit.Get()) {
		var ret ComputeRackUnitRelationship
		return ret
	}
	return *o.ComputeRackUnit.Get()
}

// GetComputeRackUnitOk returns a tuple with the ComputeRackUnit field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EquipmentEnclosureElement) GetComputeRackUnitOk() (*ComputeRackUnitRelationship, bool) {
	if o == nil {
		return nil, false
	}
	return o.ComputeRackUnit.Get(), o.ComputeRackUnit.IsSet()
}

// HasComputeRackUnit returns a boolean if a field has been set.
func (o *EquipmentEnclosureElement) HasComputeRackUnit() bool {
	if o != nil && o.ComputeRackUnit.IsSet() {
		return true
	}

	return false
}

// SetComputeRackUnit gets a reference to the given NullableComputeRackUnitRelationship and assigns it to the ComputeRackUnit field.
func (o *EquipmentEnclosureElement) SetComputeRackUnit(v ComputeRackUnitRelationship) {
	o.ComputeRackUnit.Set(&v)
}

// SetComputeRackUnitNil sets the value for ComputeRackUnit to be an explicit nil
func (o *EquipmentEnclosureElement) SetComputeRackUnitNil() {
	o.ComputeRackUnit.Set(nil)
}

// UnsetComputeRackUnit ensures that no value is present for ComputeRackUnit, not even an explicit nil
func (o *EquipmentEnclosureElement) UnsetComputeRackUnit() {
	o.ComputeRackUnit.Unset()
}

// GetFirmwareRunningFirmwares returns the FirmwareRunningFirmwares field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EquipmentEnclosureElement) GetFirmwareRunningFirmwares() []FirmwareRunningFirmwareRelationship {
	if o == nil {
		var ret []FirmwareRunningFirmwareRelationship
		return ret
	}
	return o.FirmwareRunningFirmwares
}

// GetFirmwareRunningFirmwaresOk returns a tuple with the FirmwareRunningFirmwares field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EquipmentEnclosureElement) GetFirmwareRunningFirmwaresOk() ([]FirmwareRunningFirmwareRelationship, bool) {
	if o == nil || IsNil(o.FirmwareRunningFirmwares) {
		return nil, false
	}
	return o.FirmwareRunningFirmwares, true
}

// HasFirmwareRunningFirmwares returns a boolean if a field has been set.
func (o *EquipmentEnclosureElement) HasFirmwareRunningFirmwares() bool {
	if o != nil && !IsNil(o.FirmwareRunningFirmwares) {
		return true
	}

	return false
}

// SetFirmwareRunningFirmwares gets a reference to the given []FirmwareRunningFirmwareRelationship and assigns it to the FirmwareRunningFirmwares field.
func (o *EquipmentEnclosureElement) SetFirmwareRunningFirmwares(v []FirmwareRunningFirmwareRelationship) {
	o.FirmwareRunningFirmwares = v
}

// GetGraphicsCards returns the GraphicsCards field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EquipmentEnclosureElement) GetGraphicsCards() []GraphicsCardRelationship {
	if o == nil {
		var ret []GraphicsCardRelationship
		return ret
	}
	return o.GraphicsCards
}

// GetGraphicsCardsOk returns a tuple with the GraphicsCards field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EquipmentEnclosureElement) GetGraphicsCardsOk() ([]GraphicsCardRelationship, bool) {
	if o == nil || IsNil(o.GraphicsCards) {
		return nil, false
	}
	return o.GraphicsCards, true
}

// HasGraphicsCards returns a boolean if a field has been set.
func (o *EquipmentEnclosureElement) HasGraphicsCards() bool {
	if o != nil && !IsNil(o.GraphicsCards) {
		return true
	}

	return false
}

// SetGraphicsCards gets a reference to the given []GraphicsCardRelationship and assigns it to the GraphicsCards field.
func (o *EquipmentEnclosureElement) SetGraphicsCards(v []GraphicsCardRelationship) {
	o.GraphicsCards = v
}

// GetRegisteredDevice returns the RegisteredDevice field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EquipmentEnclosureElement) GetRegisteredDevice() AssetDeviceRegistrationRelationship {
	if o == nil || IsNil(o.RegisteredDevice.Get()) {
		var ret AssetDeviceRegistrationRelationship
		return ret
	}
	return *o.RegisteredDevice.Get()
}

// GetRegisteredDeviceOk returns a tuple with the RegisteredDevice field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EquipmentEnclosureElement) GetRegisteredDeviceOk() (*AssetDeviceRegistrationRelationship, bool) {
	if o == nil {
		return nil, false
	}
	return o.RegisteredDevice.Get(), o.RegisteredDevice.IsSet()
}

// HasRegisteredDevice returns a boolean if a field has been set.
func (o *EquipmentEnclosureElement) HasRegisteredDevice() bool {
	if o != nil && o.RegisteredDevice.IsSet() {
		return true
	}

	return false
}

// SetRegisteredDevice gets a reference to the given NullableAssetDeviceRegistrationRelationship and assigns it to the RegisteredDevice field.
func (o *EquipmentEnclosureElement) SetRegisteredDevice(v AssetDeviceRegistrationRelationship) {
	o.RegisteredDevice.Set(&v)
}

// SetRegisteredDeviceNil sets the value for RegisteredDevice to be an explicit nil
func (o *EquipmentEnclosureElement) SetRegisteredDeviceNil() {
	o.RegisteredDevice.Set(nil)
}

// UnsetRegisteredDevice ensures that no value is present for RegisteredDevice, not even an explicit nil
func (o *EquipmentEnclosureElement) UnsetRegisteredDevice() {
	o.RegisteredDevice.Unset()
}

func (o EquipmentEnclosureElement) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EquipmentEnclosureElement) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	serializedEquipmentBase, errEquipmentBase := json.Marshal(o.EquipmentBase)
	if errEquipmentBase != nil {
		return map[string]interface{}{}, errEquipmentBase
	}
	errEquipmentBase = json.Unmarshal([]byte(serializedEquipmentBase), &toSerialize)
	if errEquipmentBase != nil {
		return map[string]interface{}{}, errEquipmentBase
	}
	if _, exists := toSerialize["ClassId"]; !exists {
		toSerialize["ClassId"] = o.GetDefaultClassId()
	}
	toSerialize["ClassId"] = o.ClassId
	if _, exists := toSerialize["ObjectType"]; !exists {
		toSerialize["ObjectType"] = o.GetDefaultObjectType()
	}
	toSerialize["ObjectType"] = o.ObjectType
	if !IsNil(o.Description) {
		toSerialize["Description"] = o.Description
	}
	if !IsNil(o.EnclosureId) {
		toSerialize["EnclosureId"] = o.EnclosureId
	}
	if !IsNil(o.Name) {
		toSerialize["Name"] = o.Name
	}
	if o.OperReason != nil {
		toSerialize["OperReason"] = o.OperReason
	}
	if !IsNil(o.OperState) {
		toSerialize["OperState"] = o.OperState
	}
	if !IsNil(o.PartNumber) {
		toSerialize["PartNumber"] = o.PartNumber
	}
	if !IsNil(o.Pid) {
		toSerialize["Pid"] = o.Pid
	}
	if !IsNil(o.Sku) {
		toSerialize["Sku"] = o.Sku
	}
	if !IsNil(o.Status) {
		toSerialize["Status"] = o.Status
	}
	if !IsNil(o.Type) {
		toSerialize["Type"] = o.Type
	}
	if !IsNil(o.Vid) {
		toSerialize["Vid"] = o.Vid
	}
	if o.ComputeRackUnit.IsSet() {
		toSerialize["ComputeRackUnit"] = o.ComputeRackUnit.Get()
	}
	if o.FirmwareRunningFirmwares != nil {
		toSerialize["FirmwareRunningFirmwares"] = o.FirmwareRunningFirmwares
	}
	if o.GraphicsCards != nil {
		toSerialize["GraphicsCards"] = o.GraphicsCards
	}
	if o.RegisteredDevice.IsSet() {
		toSerialize["RegisteredDevice"] = o.RegisteredDevice.Get()
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *EquipmentEnclosureElement) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"ClassId",
		"ObjectType",
	}

	// defaultValueFuncMap captures the default values for required properties.
	// These values are used when required properties are missing from the payload.
	defaultValueFuncMap := map[string]func() interface{}{
		"ClassId":    o.GetDefaultClassId,
		"ObjectType": o.GetDefaultObjectType,
	}
	var defaultValueApplied bool
	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			if _, ok := defaultValueFuncMap[requiredProperty]; ok {
				allProperties[requiredProperty] = defaultValueFuncMap[requiredProperty]()
				defaultValueApplied = true
			}
		}
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	if defaultValueApplied {
		data, err = json.Marshal(allProperties)
		if err != nil {
			return err
		}
	}
	type EquipmentEnclosureElementWithoutEmbeddedStruct struct {
		// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.
		ClassId string `json:"ClassId"`
		// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
		ObjectType string `json:"ObjectType"`
		// This field is to provide description for the Enclosure module.
		Description *string `json:"Description,omitempty"`
		// This field acts as the identifier for this particular Enclosure Module, within the Server or Fabric Interconnect.
		EnclosureId *string `json:"EnclosureId,omitempty"`
		// The name of the pluggable Enclosure Module.
		Name       *string  `json:"Name,omitempty"`
		OperReason []string `json:"OperReason,omitempty"`
		// This field is used to indicate this equipment enclosure's operational state.
		OperState *string `json:"OperState,omitempty"`
		// This field identifies the Part Number for this Enclosure Module.
		PartNumber *string `json:"PartNumber,omitempty"`
		// This field identifies the Product ID for the Enclosure module.
		Pid *string `json:"Pid,omitempty"`
		// This field identifies the Stockkeeping Unit for this Enclosure Module.
		Sku *string `json:"Sku,omitempty"`
		// This field is to abstract the status of the Enclosure module.
		Status *string `json:"Status,omitempty"`
		// Type of the Enclosure module.
		Type *string `json:"Type,omitempty"`
		// This field identifies the Vendor ID for this Enclosure Module.
		Vid             *string                             `json:"Vid,omitempty"`
		ComputeRackUnit NullableComputeRackUnitRelationship `json:"ComputeRackUnit,omitempty"`
		// An array of relationships to firmwareRunningFirmware resources.
		FirmwareRunningFirmwares []FirmwareRunningFirmwareRelationship `json:"FirmwareRunningFirmwares,omitempty"`
		// An array of relationships to graphicsCard resources.
		GraphicsCards    []GraphicsCardRelationship                  `json:"GraphicsCards,omitempty"`
		RegisteredDevice NullableAssetDeviceRegistrationRelationship `json:"RegisteredDevice,omitempty"`
	}

	varEquipmentEnclosureElementWithoutEmbeddedStruct := EquipmentEnclosureElementWithoutEmbeddedStruct{}

	err = json.Unmarshal(data, &varEquipmentEnclosureElementWithoutEmbeddedStruct)
	if err == nil {
		varEquipmentEnclosureElement := _EquipmentEnclosureElement{}
		varEquipmentEnclosureElement.ClassId = varEquipmentEnclosureElementWithoutEmbeddedStruct.ClassId
		varEquipmentEnclosureElement.ObjectType = varEquipmentEnclosureElementWithoutEmbeddedStruct.ObjectType
		varEquipmentEnclosureElement.Description = varEquipmentEnclosureElementWithoutEmbeddedStruct.Description
		varEquipmentEnclosureElement.EnclosureId = varEquipmentEnclosureElementWithoutEmbeddedStruct.EnclosureId
		varEquipmentEnclosureElement.Name = varEquipmentEnclosureElementWithoutEmbeddedStruct.Name
		varEquipmentEnclosureElement.OperReason = varEquipmentEnclosureElementWithoutEmbeddedStruct.OperReason
		varEquipmentEnclosureElement.OperState = varEquipmentEnclosureElementWithoutEmbeddedStruct.OperState
		varEquipmentEnclosureElement.PartNumber = varEquipmentEnclosureElementWithoutEmbeddedStruct.PartNumber
		varEquipmentEnclosureElement.Pid = varEquipmentEnclosureElementWithoutEmbeddedStruct.Pid
		varEquipmentEnclosureElement.Sku = varEquipmentEnclosureElementWithoutEmbeddedStruct.Sku
		varEquipmentEnclosureElement.Status = varEquipmentEnclosureElementWithoutEmbeddedStruct.Status
		varEquipmentEnclosureElement.Type = varEquipmentEnclosureElementWithoutEmbeddedStruct.Type
		varEquipmentEnclosureElement.Vid = varEquipmentEnclosureElementWithoutEmbeddedStruct.Vid
		varEquipmentEnclosureElement.ComputeRackUnit = varEquipmentEnclosureElementWithoutEmbeddedStruct.ComputeRackUnit
		varEquipmentEnclosureElement.FirmwareRunningFirmwares = varEquipmentEnclosureElementWithoutEmbeddedStruct.FirmwareRunningFirmwares
		varEquipmentEnclosureElement.GraphicsCards = varEquipmentEnclosureElementWithoutEmbeddedStruct.GraphicsCards
		varEquipmentEnclosureElement.RegisteredDevice = varEquipmentEnclosureElementWithoutEmbeddedStruct.RegisteredDevice
		*o = EquipmentEnclosureElement(varEquipmentEnclosureElement)
	} else {
		return err
	}

	varEquipmentEnclosureElement := _EquipmentEnclosureElement{}

	err = json.Unmarshal(data, &varEquipmentEnclosureElement)
	if err == nil {
		o.EquipmentBase = varEquipmentEnclosureElement.EquipmentBase
	} else {
		return err
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "ClassId")
		delete(additionalProperties, "ObjectType")
		delete(additionalProperties, "Description")
		delete(additionalProperties, "EnclosureId")
		delete(additionalProperties, "Name")
		delete(additionalProperties, "OperReason")
		delete(additionalProperties, "OperState")
		delete(additionalProperties, "PartNumber")
		delete(additionalProperties, "Pid")
		delete(additionalProperties, "Sku")
		delete(additionalProperties, "Status")
		delete(additionalProperties, "Type")
		delete(additionalProperties, "Vid")
		delete(additionalProperties, "ComputeRackUnit")
		delete(additionalProperties, "FirmwareRunningFirmwares")
		delete(additionalProperties, "GraphicsCards")
		delete(additionalProperties, "RegisteredDevice")

		// remove fields from embedded structs
		reflectEquipmentBase := reflect.ValueOf(o.EquipmentBase)
		for i := 0; i < reflectEquipmentBase.Type().NumField(); i++ {
			t := reflectEquipmentBase.Type().Field(i)

			if jsonTag := t.Tag.Get("json"); jsonTag != "" {
				fieldName := ""
				if commaIdx := strings.Index(jsonTag, ","); commaIdx > 0 {
					fieldName = jsonTag[:commaIdx]
				} else {
					fieldName = jsonTag
				}
				if fieldName != "AdditionalProperties" {
					delete(additionalProperties, fieldName)
				}
			}
		}

		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableEquipmentEnclosureElement struct {
	value *EquipmentEnclosureElement
	isSet bool
}

func (v NullableEquipmentEnclosureElement) Get() *EquipmentEnclosureElement {
	return v.value
}

func (v *NullableEquipmentEnclosureElement) Set(val *EquipmentEnclosureElement) {
	v.value = val
	v.isSet = true
}

func (v NullableEquipmentEnclosureElement) IsSet() bool {
	return v.isSet
}

func (v *NullableEquipmentEnclosureElement) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEquipmentEnclosureElement(val *EquipmentEnclosureElement) *NullableEquipmentEnclosureElement {
	return &NullableEquipmentEnclosureElement{value: val, isSet: true}
}

func (v NullableEquipmentEnclosureElement) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEquipmentEnclosureElement) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
