/*
Cisco Intersight

Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations. The Intersight OpenAPI document defines the complete set of properties that are returned in the HTTP response. From that perspective, a client can expect that no additional properties are returned, unless these properties are explicitly defined in the OpenAPI document. However, when a client uses an older version of the Intersight OpenAPI document, the server may send additional properties because the software is more recent than the client. In that case, the client may receive properties that it does not know about. Some generated SDKs perform a strict validation of the HTTP response body against the OpenAPI document.

API version: 1.0.11-18775
Contact: intersight@cisco.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package intersight

import (
	"encoding/json"
	"fmt"
	"reflect"
	"strings"
)

// checks if the VnicEthAdapterPolicyInventory type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VnicEthAdapterPolicyInventory{}

// VnicEthAdapterPolicyInventory An Ethernet adapter policy governs the host-side behavior of the adapter, including how the adapter handles traffic. For each VIC Virtual Ethernet Interface various features like VXLAN, NVGRE, ARFS, Interrupt settings, and TCP Offload settings can be configured.
type VnicEthAdapterPolicyInventory struct {
	PolicyAbstractPolicyInventory
	// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.
	ClassId string `json:"ClassId"`
	// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
	ObjectType string `json:"ObjectType"`
	// Enables advanced filtering on the interface.
	AdvancedFilter          *bool                               `json:"AdvancedFilter,omitempty"`
	ArfsSettings            NullableVnicArfsSettings            `json:"ArfsSettings,omitempty"`
	CompletionQueueSettings NullableVnicCompletionQueueSettings `json:"CompletionQueueSettings,omitempty"`
	// GENEVE offload protocol allows you to create logical networks that span physical network boundaries by allowing any information to be encoded in a packet and passed between tunnel endpoints.
	GeneveEnabled *bool `json:"GeneveEnabled,omitempty"`
	// Enables Interrupt Scaling on the interface.
	InterruptScaling  *bool                            `json:"InterruptScaling,omitempty"`
	InterruptSettings NullableVnicEthInterruptSettings `json:"InterruptSettings,omitempty"`
	NvgreSettings     NullableVnicNvgreSettings        `json:"NvgreSettings,omitempty"`
	PtpSettings       NullableVnicPtpSettings          `json:"PtpSettings,omitempty"`
	RoceSettings      NullableVnicRoceSettings         `json:"RoceSettings,omitempty"`
	RssHashSettings   NullableVnicRssHashSettings      `json:"RssHashSettings,omitempty"`
	// Receive Side Scaling allows the incoming traffic to be spread across multiple CPU cores.
	RssSettings        *bool                          `json:"RssSettings,omitempty"`
	RxQueueSettings    NullableVnicEthRxQueueSettings `json:"RxQueueSettings,omitempty"`
	TcpOffloadSettings NullableVnicTcpOffloadSettings `json:"TcpOffloadSettings,omitempty"`
	TxQueueSettings    NullableVnicEthTxQueueSettings `json:"TxQueueSettings,omitempty"`
	// Uplink Failback Timeout in seconds when uplink failover is enabled for a vNIC. After a vNIC has started using its secondary interface, this setting controls how long the primary interface must be available before the system resumes using the primary interface for the vNIC.
	UplinkFailbackTimeout *int64                       `json:"UplinkFailbackTimeout,omitempty"`
	VxlanSettings         NullableVnicVxlanSettings    `json:"VxlanSettings,omitempty"`
	TargetMo              NullableMoBaseMoRelationship `json:"TargetMo,omitempty"`
	AdditionalProperties  map[string]interface{}
}

type _VnicEthAdapterPolicyInventory VnicEthAdapterPolicyInventory

// NewVnicEthAdapterPolicyInventory instantiates a new VnicEthAdapterPolicyInventory object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVnicEthAdapterPolicyInventory(classId string, objectType string) *VnicEthAdapterPolicyInventory {
	this := VnicEthAdapterPolicyInventory{}
	this.ClassId = classId
	this.ObjectType = objectType
	return &this
}

// NewVnicEthAdapterPolicyInventoryWithDefaults instantiates a new VnicEthAdapterPolicyInventory object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVnicEthAdapterPolicyInventoryWithDefaults() *VnicEthAdapterPolicyInventory {
	this := VnicEthAdapterPolicyInventory{}
	var classId string = "vnic.EthAdapterPolicyInventory"
	this.ClassId = classId
	var objectType string = "vnic.EthAdapterPolicyInventory"
	this.ObjectType = objectType
	return &this
}

// GetClassId returns the ClassId field value
func (o *VnicEthAdapterPolicyInventory) GetClassId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ClassId
}

// GetClassIdOk returns a tuple with the ClassId field value
// and a boolean to check if the value has been set.
func (o *VnicEthAdapterPolicyInventory) GetClassIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ClassId, true
}

// SetClassId sets field value
func (o *VnicEthAdapterPolicyInventory) SetClassId(v string) {
	o.ClassId = v
}

// GetDefaultClassId returns the default value "vnic.EthAdapterPolicyInventory" of the ClassId field.
func (o *VnicEthAdapterPolicyInventory) GetDefaultClassId() interface{} {
	return "vnic.EthAdapterPolicyInventory"
}

// GetObjectType returns the ObjectType field value
func (o *VnicEthAdapterPolicyInventory) GetObjectType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ObjectType
}

// GetObjectTypeOk returns a tuple with the ObjectType field value
// and a boolean to check if the value has been set.
func (o *VnicEthAdapterPolicyInventory) GetObjectTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ObjectType, true
}

// SetObjectType sets field value
func (o *VnicEthAdapterPolicyInventory) SetObjectType(v string) {
	o.ObjectType = v
}

// GetDefaultObjectType returns the default value "vnic.EthAdapterPolicyInventory" of the ObjectType field.
func (o *VnicEthAdapterPolicyInventory) GetDefaultObjectType() interface{} {
	return "vnic.EthAdapterPolicyInventory"
}

// GetAdvancedFilter returns the AdvancedFilter field value if set, zero value otherwise.
func (o *VnicEthAdapterPolicyInventory) GetAdvancedFilter() bool {
	if o == nil || IsNil(o.AdvancedFilter) {
		var ret bool
		return ret
	}
	return *o.AdvancedFilter
}

// GetAdvancedFilterOk returns a tuple with the AdvancedFilter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VnicEthAdapterPolicyInventory) GetAdvancedFilterOk() (*bool, bool) {
	if o == nil || IsNil(o.AdvancedFilter) {
		return nil, false
	}
	return o.AdvancedFilter, true
}

// HasAdvancedFilter returns a boolean if a field has been set.
func (o *VnicEthAdapterPolicyInventory) HasAdvancedFilter() bool {
	if o != nil && !IsNil(o.AdvancedFilter) {
		return true
	}

	return false
}

// SetAdvancedFilter gets a reference to the given bool and assigns it to the AdvancedFilter field.
func (o *VnicEthAdapterPolicyInventory) SetAdvancedFilter(v bool) {
	o.AdvancedFilter = &v
}

// GetArfsSettings returns the ArfsSettings field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VnicEthAdapterPolicyInventory) GetArfsSettings() VnicArfsSettings {
	if o == nil || IsNil(o.ArfsSettings.Get()) {
		var ret VnicArfsSettings
		return ret
	}
	return *o.ArfsSettings.Get()
}

// GetArfsSettingsOk returns a tuple with the ArfsSettings field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VnicEthAdapterPolicyInventory) GetArfsSettingsOk() (*VnicArfsSettings, bool) {
	if o == nil {
		return nil, false
	}
	return o.ArfsSettings.Get(), o.ArfsSettings.IsSet()
}

// HasArfsSettings returns a boolean if a field has been set.
func (o *VnicEthAdapterPolicyInventory) HasArfsSettings() bool {
	if o != nil && o.ArfsSettings.IsSet() {
		return true
	}

	return false
}

// SetArfsSettings gets a reference to the given NullableVnicArfsSettings and assigns it to the ArfsSettings field.
func (o *VnicEthAdapterPolicyInventory) SetArfsSettings(v VnicArfsSettings) {
	o.ArfsSettings.Set(&v)
}

// SetArfsSettingsNil sets the value for ArfsSettings to be an explicit nil
func (o *VnicEthAdapterPolicyInventory) SetArfsSettingsNil() {
	o.ArfsSettings.Set(nil)
}

// UnsetArfsSettings ensures that no value is present for ArfsSettings, not even an explicit nil
func (o *VnicEthAdapterPolicyInventory) UnsetArfsSettings() {
	o.ArfsSettings.Unset()
}

// GetCompletionQueueSettings returns the CompletionQueueSettings field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VnicEthAdapterPolicyInventory) GetCompletionQueueSettings() VnicCompletionQueueSettings {
	if o == nil || IsNil(o.CompletionQueueSettings.Get()) {
		var ret VnicCompletionQueueSettings
		return ret
	}
	return *o.CompletionQueueSettings.Get()
}

// GetCompletionQueueSettingsOk returns a tuple with the CompletionQueueSettings field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VnicEthAdapterPolicyInventory) GetCompletionQueueSettingsOk() (*VnicCompletionQueueSettings, bool) {
	if o == nil {
		return nil, false
	}
	return o.CompletionQueueSettings.Get(), o.CompletionQueueSettings.IsSet()
}

// HasCompletionQueueSettings returns a boolean if a field has been set.
func (o *VnicEthAdapterPolicyInventory) HasCompletionQueueSettings() bool {
	if o != nil && o.CompletionQueueSettings.IsSet() {
		return true
	}

	return false
}

// SetCompletionQueueSettings gets a reference to the given NullableVnicCompletionQueueSettings and assigns it to the CompletionQueueSettings field.
func (o *VnicEthAdapterPolicyInventory) SetCompletionQueueSettings(v VnicCompletionQueueSettings) {
	o.CompletionQueueSettings.Set(&v)
}

// SetCompletionQueueSettingsNil sets the value for CompletionQueueSettings to be an explicit nil
func (o *VnicEthAdapterPolicyInventory) SetCompletionQueueSettingsNil() {
	o.CompletionQueueSettings.Set(nil)
}

// UnsetCompletionQueueSettings ensures that no value is present for CompletionQueueSettings, not even an explicit nil
func (o *VnicEthAdapterPolicyInventory) UnsetCompletionQueueSettings() {
	o.CompletionQueueSettings.Unset()
}

// GetGeneveEnabled returns the GeneveEnabled field value if set, zero value otherwise.
func (o *VnicEthAdapterPolicyInventory) GetGeneveEnabled() bool {
	if o == nil || IsNil(o.GeneveEnabled) {
		var ret bool
		return ret
	}
	return *o.GeneveEnabled
}

// GetGeneveEnabledOk returns a tuple with the GeneveEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VnicEthAdapterPolicyInventory) GetGeneveEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.GeneveEnabled) {
		return nil, false
	}
	return o.GeneveEnabled, true
}

// HasGeneveEnabled returns a boolean if a field has been set.
func (o *VnicEthAdapterPolicyInventory) HasGeneveEnabled() bool {
	if o != nil && !IsNil(o.GeneveEnabled) {
		return true
	}

	return false
}

// SetGeneveEnabled gets a reference to the given bool and assigns it to the GeneveEnabled field.
func (o *VnicEthAdapterPolicyInventory) SetGeneveEnabled(v bool) {
	o.GeneveEnabled = &v
}

// GetInterruptScaling returns the InterruptScaling field value if set, zero value otherwise.
func (o *VnicEthAdapterPolicyInventory) GetInterruptScaling() bool {
	if o == nil || IsNil(o.InterruptScaling) {
		var ret bool
		return ret
	}
	return *o.InterruptScaling
}

// GetInterruptScalingOk returns a tuple with the InterruptScaling field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VnicEthAdapterPolicyInventory) GetInterruptScalingOk() (*bool, bool) {
	if o == nil || IsNil(o.InterruptScaling) {
		return nil, false
	}
	return o.InterruptScaling, true
}

// HasInterruptScaling returns a boolean if a field has been set.
func (o *VnicEthAdapterPolicyInventory) HasInterruptScaling() bool {
	if o != nil && !IsNil(o.InterruptScaling) {
		return true
	}

	return false
}

// SetInterruptScaling gets a reference to the given bool and assigns it to the InterruptScaling field.
func (o *VnicEthAdapterPolicyInventory) SetInterruptScaling(v bool) {
	o.InterruptScaling = &v
}

// GetInterruptSettings returns the InterruptSettings field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VnicEthAdapterPolicyInventory) GetInterruptSettings() VnicEthInterruptSettings {
	if o == nil || IsNil(o.InterruptSettings.Get()) {
		var ret VnicEthInterruptSettings
		return ret
	}
	return *o.InterruptSettings.Get()
}

// GetInterruptSettingsOk returns a tuple with the InterruptSettings field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VnicEthAdapterPolicyInventory) GetInterruptSettingsOk() (*VnicEthInterruptSettings, bool) {
	if o == nil {
		return nil, false
	}
	return o.InterruptSettings.Get(), o.InterruptSettings.IsSet()
}

// HasInterruptSettings returns a boolean if a field has been set.
func (o *VnicEthAdapterPolicyInventory) HasInterruptSettings() bool {
	if o != nil && o.InterruptSettings.IsSet() {
		return true
	}

	return false
}

// SetInterruptSettings gets a reference to the given NullableVnicEthInterruptSettings and assigns it to the InterruptSettings field.
func (o *VnicEthAdapterPolicyInventory) SetInterruptSettings(v VnicEthInterruptSettings) {
	o.InterruptSettings.Set(&v)
}

// SetInterruptSettingsNil sets the value for InterruptSettings to be an explicit nil
func (o *VnicEthAdapterPolicyInventory) SetInterruptSettingsNil() {
	o.InterruptSettings.Set(nil)
}

// UnsetInterruptSettings ensures that no value is present for InterruptSettings, not even an explicit nil
func (o *VnicEthAdapterPolicyInventory) UnsetInterruptSettings() {
	o.InterruptSettings.Unset()
}

// GetNvgreSettings returns the NvgreSettings field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VnicEthAdapterPolicyInventory) GetNvgreSettings() VnicNvgreSettings {
	if o == nil || IsNil(o.NvgreSettings.Get()) {
		var ret VnicNvgreSettings
		return ret
	}
	return *o.NvgreSettings.Get()
}

// GetNvgreSettingsOk returns a tuple with the NvgreSettings field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VnicEthAdapterPolicyInventory) GetNvgreSettingsOk() (*VnicNvgreSettings, bool) {
	if o == nil {
		return nil, false
	}
	return o.NvgreSettings.Get(), o.NvgreSettings.IsSet()
}

// HasNvgreSettings returns a boolean if a field has been set.
func (o *VnicEthAdapterPolicyInventory) HasNvgreSettings() bool {
	if o != nil && o.NvgreSettings.IsSet() {
		return true
	}

	return false
}

// SetNvgreSettings gets a reference to the given NullableVnicNvgreSettings and assigns it to the NvgreSettings field.
func (o *VnicEthAdapterPolicyInventory) SetNvgreSettings(v VnicNvgreSettings) {
	o.NvgreSettings.Set(&v)
}

// SetNvgreSettingsNil sets the value for NvgreSettings to be an explicit nil
func (o *VnicEthAdapterPolicyInventory) SetNvgreSettingsNil() {
	o.NvgreSettings.Set(nil)
}

// UnsetNvgreSettings ensures that no value is present for NvgreSettings, not even an explicit nil
func (o *VnicEthAdapterPolicyInventory) UnsetNvgreSettings() {
	o.NvgreSettings.Unset()
}

// GetPtpSettings returns the PtpSettings field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VnicEthAdapterPolicyInventory) GetPtpSettings() VnicPtpSettings {
	if o == nil || IsNil(o.PtpSettings.Get()) {
		var ret VnicPtpSettings
		return ret
	}
	return *o.PtpSettings.Get()
}

// GetPtpSettingsOk returns a tuple with the PtpSettings field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VnicEthAdapterPolicyInventory) GetPtpSettingsOk() (*VnicPtpSettings, bool) {
	if o == nil {
		return nil, false
	}
	return o.PtpSettings.Get(), o.PtpSettings.IsSet()
}

// HasPtpSettings returns a boolean if a field has been set.
func (o *VnicEthAdapterPolicyInventory) HasPtpSettings() bool {
	if o != nil && o.PtpSettings.IsSet() {
		return true
	}

	return false
}

// SetPtpSettings gets a reference to the given NullableVnicPtpSettings and assigns it to the PtpSettings field.
func (o *VnicEthAdapterPolicyInventory) SetPtpSettings(v VnicPtpSettings) {
	o.PtpSettings.Set(&v)
}

// SetPtpSettingsNil sets the value for PtpSettings to be an explicit nil
func (o *VnicEthAdapterPolicyInventory) SetPtpSettingsNil() {
	o.PtpSettings.Set(nil)
}

// UnsetPtpSettings ensures that no value is present for PtpSettings, not even an explicit nil
func (o *VnicEthAdapterPolicyInventory) UnsetPtpSettings() {
	o.PtpSettings.Unset()
}

// GetRoceSettings returns the RoceSettings field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VnicEthAdapterPolicyInventory) GetRoceSettings() VnicRoceSettings {
	if o == nil || IsNil(o.RoceSettings.Get()) {
		var ret VnicRoceSettings
		return ret
	}
	return *o.RoceSettings.Get()
}

// GetRoceSettingsOk returns a tuple with the RoceSettings field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VnicEthAdapterPolicyInventory) GetRoceSettingsOk() (*VnicRoceSettings, bool) {
	if o == nil {
		return nil, false
	}
	return o.RoceSettings.Get(), o.RoceSettings.IsSet()
}

// HasRoceSettings returns a boolean if a field has been set.
func (o *VnicEthAdapterPolicyInventory) HasRoceSettings() bool {
	if o != nil && o.RoceSettings.IsSet() {
		return true
	}

	return false
}

// SetRoceSettings gets a reference to the given NullableVnicRoceSettings and assigns it to the RoceSettings field.
func (o *VnicEthAdapterPolicyInventory) SetRoceSettings(v VnicRoceSettings) {
	o.RoceSettings.Set(&v)
}

// SetRoceSettingsNil sets the value for RoceSettings to be an explicit nil
func (o *VnicEthAdapterPolicyInventory) SetRoceSettingsNil() {
	o.RoceSettings.Set(nil)
}

// UnsetRoceSettings ensures that no value is present for RoceSettings, not even an explicit nil
func (o *VnicEthAdapterPolicyInventory) UnsetRoceSettings() {
	o.RoceSettings.Unset()
}

// GetRssHashSettings returns the RssHashSettings field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VnicEthAdapterPolicyInventory) GetRssHashSettings() VnicRssHashSettings {
	if o == nil || IsNil(o.RssHashSettings.Get()) {
		var ret VnicRssHashSettings
		return ret
	}
	return *o.RssHashSettings.Get()
}

// GetRssHashSettingsOk returns a tuple with the RssHashSettings field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VnicEthAdapterPolicyInventory) GetRssHashSettingsOk() (*VnicRssHashSettings, bool) {
	if o == nil {
		return nil, false
	}
	return o.RssHashSettings.Get(), o.RssHashSettings.IsSet()
}

// HasRssHashSettings returns a boolean if a field has been set.
func (o *VnicEthAdapterPolicyInventory) HasRssHashSettings() bool {
	if o != nil && o.RssHashSettings.IsSet() {
		return true
	}

	return false
}

// SetRssHashSettings gets a reference to the given NullableVnicRssHashSettings and assigns it to the RssHashSettings field.
func (o *VnicEthAdapterPolicyInventory) SetRssHashSettings(v VnicRssHashSettings) {
	o.RssHashSettings.Set(&v)
}

// SetRssHashSettingsNil sets the value for RssHashSettings to be an explicit nil
func (o *VnicEthAdapterPolicyInventory) SetRssHashSettingsNil() {
	o.RssHashSettings.Set(nil)
}

// UnsetRssHashSettings ensures that no value is present for RssHashSettings, not even an explicit nil
func (o *VnicEthAdapterPolicyInventory) UnsetRssHashSettings() {
	o.RssHashSettings.Unset()
}

// GetRssSettings returns the RssSettings field value if set, zero value otherwise.
func (o *VnicEthAdapterPolicyInventory) GetRssSettings() bool {
	if o == nil || IsNil(o.RssSettings) {
		var ret bool
		return ret
	}
	return *o.RssSettings
}

// GetRssSettingsOk returns a tuple with the RssSettings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VnicEthAdapterPolicyInventory) GetRssSettingsOk() (*bool, bool) {
	if o == nil || IsNil(o.RssSettings) {
		return nil, false
	}
	return o.RssSettings, true
}

// HasRssSettings returns a boolean if a field has been set.
func (o *VnicEthAdapterPolicyInventory) HasRssSettings() bool {
	if o != nil && !IsNil(o.RssSettings) {
		return true
	}

	return false
}

// SetRssSettings gets a reference to the given bool and assigns it to the RssSettings field.
func (o *VnicEthAdapterPolicyInventory) SetRssSettings(v bool) {
	o.RssSettings = &v
}

// GetRxQueueSettings returns the RxQueueSettings field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VnicEthAdapterPolicyInventory) GetRxQueueSettings() VnicEthRxQueueSettings {
	if o == nil || IsNil(o.RxQueueSettings.Get()) {
		var ret VnicEthRxQueueSettings
		return ret
	}
	return *o.RxQueueSettings.Get()
}

// GetRxQueueSettingsOk returns a tuple with the RxQueueSettings field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VnicEthAdapterPolicyInventory) GetRxQueueSettingsOk() (*VnicEthRxQueueSettings, bool) {
	if o == nil {
		return nil, false
	}
	return o.RxQueueSettings.Get(), o.RxQueueSettings.IsSet()
}

// HasRxQueueSettings returns a boolean if a field has been set.
func (o *VnicEthAdapterPolicyInventory) HasRxQueueSettings() bool {
	if o != nil && o.RxQueueSettings.IsSet() {
		return true
	}

	return false
}

// SetRxQueueSettings gets a reference to the given NullableVnicEthRxQueueSettings and assigns it to the RxQueueSettings field.
func (o *VnicEthAdapterPolicyInventory) SetRxQueueSettings(v VnicEthRxQueueSettings) {
	o.RxQueueSettings.Set(&v)
}

// SetRxQueueSettingsNil sets the value for RxQueueSettings to be an explicit nil
func (o *VnicEthAdapterPolicyInventory) SetRxQueueSettingsNil() {
	o.RxQueueSettings.Set(nil)
}

// UnsetRxQueueSettings ensures that no value is present for RxQueueSettings, not even an explicit nil
func (o *VnicEthAdapterPolicyInventory) UnsetRxQueueSettings() {
	o.RxQueueSettings.Unset()
}

// GetTcpOffloadSettings returns the TcpOffloadSettings field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VnicEthAdapterPolicyInventory) GetTcpOffloadSettings() VnicTcpOffloadSettings {
	if o == nil || IsNil(o.TcpOffloadSettings.Get()) {
		var ret VnicTcpOffloadSettings
		return ret
	}
	return *o.TcpOffloadSettings.Get()
}

// GetTcpOffloadSettingsOk returns a tuple with the TcpOffloadSettings field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VnicEthAdapterPolicyInventory) GetTcpOffloadSettingsOk() (*VnicTcpOffloadSettings, bool) {
	if o == nil {
		return nil, false
	}
	return o.TcpOffloadSettings.Get(), o.TcpOffloadSettings.IsSet()
}

// HasTcpOffloadSettings returns a boolean if a field has been set.
func (o *VnicEthAdapterPolicyInventory) HasTcpOffloadSettings() bool {
	if o != nil && o.TcpOffloadSettings.IsSet() {
		return true
	}

	return false
}

// SetTcpOffloadSettings gets a reference to the given NullableVnicTcpOffloadSettings and assigns it to the TcpOffloadSettings field.
func (o *VnicEthAdapterPolicyInventory) SetTcpOffloadSettings(v VnicTcpOffloadSettings) {
	o.TcpOffloadSettings.Set(&v)
}

// SetTcpOffloadSettingsNil sets the value for TcpOffloadSettings to be an explicit nil
func (o *VnicEthAdapterPolicyInventory) SetTcpOffloadSettingsNil() {
	o.TcpOffloadSettings.Set(nil)
}

// UnsetTcpOffloadSettings ensures that no value is present for TcpOffloadSettings, not even an explicit nil
func (o *VnicEthAdapterPolicyInventory) UnsetTcpOffloadSettings() {
	o.TcpOffloadSettings.Unset()
}

// GetTxQueueSettings returns the TxQueueSettings field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VnicEthAdapterPolicyInventory) GetTxQueueSettings() VnicEthTxQueueSettings {
	if o == nil || IsNil(o.TxQueueSettings.Get()) {
		var ret VnicEthTxQueueSettings
		return ret
	}
	return *o.TxQueueSettings.Get()
}

// GetTxQueueSettingsOk returns a tuple with the TxQueueSettings field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VnicEthAdapterPolicyInventory) GetTxQueueSettingsOk() (*VnicEthTxQueueSettings, bool) {
	if o == nil {
		return nil, false
	}
	return o.TxQueueSettings.Get(), o.TxQueueSettings.IsSet()
}

// HasTxQueueSettings returns a boolean if a field has been set.
func (o *VnicEthAdapterPolicyInventory) HasTxQueueSettings() bool {
	if o != nil && o.TxQueueSettings.IsSet() {
		return true
	}

	return false
}

// SetTxQueueSettings gets a reference to the given NullableVnicEthTxQueueSettings and assigns it to the TxQueueSettings field.
func (o *VnicEthAdapterPolicyInventory) SetTxQueueSettings(v VnicEthTxQueueSettings) {
	o.TxQueueSettings.Set(&v)
}

// SetTxQueueSettingsNil sets the value for TxQueueSettings to be an explicit nil
func (o *VnicEthAdapterPolicyInventory) SetTxQueueSettingsNil() {
	o.TxQueueSettings.Set(nil)
}

// UnsetTxQueueSettings ensures that no value is present for TxQueueSettings, not even an explicit nil
func (o *VnicEthAdapterPolicyInventory) UnsetTxQueueSettings() {
	o.TxQueueSettings.Unset()
}

// GetUplinkFailbackTimeout returns the UplinkFailbackTimeout field value if set, zero value otherwise.
func (o *VnicEthAdapterPolicyInventory) GetUplinkFailbackTimeout() int64 {
	if o == nil || IsNil(o.UplinkFailbackTimeout) {
		var ret int64
		return ret
	}
	return *o.UplinkFailbackTimeout
}

// GetUplinkFailbackTimeoutOk returns a tuple with the UplinkFailbackTimeout field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VnicEthAdapterPolicyInventory) GetUplinkFailbackTimeoutOk() (*int64, bool) {
	if o == nil || IsNil(o.UplinkFailbackTimeout) {
		return nil, false
	}
	return o.UplinkFailbackTimeout, true
}

// HasUplinkFailbackTimeout returns a boolean if a field has been set.
func (o *VnicEthAdapterPolicyInventory) HasUplinkFailbackTimeout() bool {
	if o != nil && !IsNil(o.UplinkFailbackTimeout) {
		return true
	}

	return false
}

// SetUplinkFailbackTimeout gets a reference to the given int64 and assigns it to the UplinkFailbackTimeout field.
func (o *VnicEthAdapterPolicyInventory) SetUplinkFailbackTimeout(v int64) {
	o.UplinkFailbackTimeout = &v
}

// GetVxlanSettings returns the VxlanSettings field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VnicEthAdapterPolicyInventory) GetVxlanSettings() VnicVxlanSettings {
	if o == nil || IsNil(o.VxlanSettings.Get()) {
		var ret VnicVxlanSettings
		return ret
	}
	return *o.VxlanSettings.Get()
}

// GetVxlanSettingsOk returns a tuple with the VxlanSettings field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VnicEthAdapterPolicyInventory) GetVxlanSettingsOk() (*VnicVxlanSettings, bool) {
	if o == nil {
		return nil, false
	}
	return o.VxlanSettings.Get(), o.VxlanSettings.IsSet()
}

// HasVxlanSettings returns a boolean if a field has been set.
func (o *VnicEthAdapterPolicyInventory) HasVxlanSettings() bool {
	if o != nil && o.VxlanSettings.IsSet() {
		return true
	}

	return false
}

// SetVxlanSettings gets a reference to the given NullableVnicVxlanSettings and assigns it to the VxlanSettings field.
func (o *VnicEthAdapterPolicyInventory) SetVxlanSettings(v VnicVxlanSettings) {
	o.VxlanSettings.Set(&v)
}

// SetVxlanSettingsNil sets the value for VxlanSettings to be an explicit nil
func (o *VnicEthAdapterPolicyInventory) SetVxlanSettingsNil() {
	o.VxlanSettings.Set(nil)
}

// UnsetVxlanSettings ensures that no value is present for VxlanSettings, not even an explicit nil
func (o *VnicEthAdapterPolicyInventory) UnsetVxlanSettings() {
	o.VxlanSettings.Unset()
}

// GetTargetMo returns the TargetMo field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VnicEthAdapterPolicyInventory) GetTargetMo() MoBaseMoRelationship {
	if o == nil || IsNil(o.TargetMo.Get()) {
		var ret MoBaseMoRelationship
		return ret
	}
	return *o.TargetMo.Get()
}

// GetTargetMoOk returns a tuple with the TargetMo field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VnicEthAdapterPolicyInventory) GetTargetMoOk() (*MoBaseMoRelationship, bool) {
	if o == nil {
		return nil, false
	}
	return o.TargetMo.Get(), o.TargetMo.IsSet()
}

// HasTargetMo returns a boolean if a field has been set.
func (o *VnicEthAdapterPolicyInventory) HasTargetMo() bool {
	if o != nil && o.TargetMo.IsSet() {
		return true
	}

	return false
}

// SetTargetMo gets a reference to the given NullableMoBaseMoRelationship and assigns it to the TargetMo field.
func (o *VnicEthAdapterPolicyInventory) SetTargetMo(v MoBaseMoRelationship) {
	o.TargetMo.Set(&v)
}

// SetTargetMoNil sets the value for TargetMo to be an explicit nil
func (o *VnicEthAdapterPolicyInventory) SetTargetMoNil() {
	o.TargetMo.Set(nil)
}

// UnsetTargetMo ensures that no value is present for TargetMo, not even an explicit nil
func (o *VnicEthAdapterPolicyInventory) UnsetTargetMo() {
	o.TargetMo.Unset()
}

func (o VnicEthAdapterPolicyInventory) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VnicEthAdapterPolicyInventory) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	serializedPolicyAbstractPolicyInventory, errPolicyAbstractPolicyInventory := json.Marshal(o.PolicyAbstractPolicyInventory)
	if errPolicyAbstractPolicyInventory != nil {
		return map[string]interface{}{}, errPolicyAbstractPolicyInventory
	}
	errPolicyAbstractPolicyInventory = json.Unmarshal([]byte(serializedPolicyAbstractPolicyInventory), &toSerialize)
	if errPolicyAbstractPolicyInventory != nil {
		return map[string]interface{}{}, errPolicyAbstractPolicyInventory
	}
	if _, exists := toSerialize["ClassId"]; !exists {
		toSerialize["ClassId"] = o.GetDefaultClassId()
	}
	toSerialize["ClassId"] = o.ClassId
	if _, exists := toSerialize["ObjectType"]; !exists {
		toSerialize["ObjectType"] = o.GetDefaultObjectType()
	}
	toSerialize["ObjectType"] = o.ObjectType
	if !IsNil(o.AdvancedFilter) {
		toSerialize["AdvancedFilter"] = o.AdvancedFilter
	}
	if o.ArfsSettings.IsSet() {
		toSerialize["ArfsSettings"] = o.ArfsSettings.Get()
	}
	if o.CompletionQueueSettings.IsSet() {
		toSerialize["CompletionQueueSettings"] = o.CompletionQueueSettings.Get()
	}
	if !IsNil(o.GeneveEnabled) {
		toSerialize["GeneveEnabled"] = o.GeneveEnabled
	}
	if !IsNil(o.InterruptScaling) {
		toSerialize["InterruptScaling"] = o.InterruptScaling
	}
	if o.InterruptSettings.IsSet() {
		toSerialize["InterruptSettings"] = o.InterruptSettings.Get()
	}
	if o.NvgreSettings.IsSet() {
		toSerialize["NvgreSettings"] = o.NvgreSettings.Get()
	}
	if o.PtpSettings.IsSet() {
		toSerialize["PtpSettings"] = o.PtpSettings.Get()
	}
	if o.RoceSettings.IsSet() {
		toSerialize["RoceSettings"] = o.RoceSettings.Get()
	}
	if o.RssHashSettings.IsSet() {
		toSerialize["RssHashSettings"] = o.RssHashSettings.Get()
	}
	if !IsNil(o.RssSettings) {
		toSerialize["RssSettings"] = o.RssSettings
	}
	if o.RxQueueSettings.IsSet() {
		toSerialize["RxQueueSettings"] = o.RxQueueSettings.Get()
	}
	if o.TcpOffloadSettings.IsSet() {
		toSerialize["TcpOffloadSettings"] = o.TcpOffloadSettings.Get()
	}
	if o.TxQueueSettings.IsSet() {
		toSerialize["TxQueueSettings"] = o.TxQueueSettings.Get()
	}
	if !IsNil(o.UplinkFailbackTimeout) {
		toSerialize["UplinkFailbackTimeout"] = o.UplinkFailbackTimeout
	}
	if o.VxlanSettings.IsSet() {
		toSerialize["VxlanSettings"] = o.VxlanSettings.Get()
	}
	if o.TargetMo.IsSet() {
		toSerialize["TargetMo"] = o.TargetMo.Get()
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *VnicEthAdapterPolicyInventory) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"ClassId",
		"ObjectType",
	}

	// defaultValueFuncMap captures the default values for required properties.
	// These values are used when required properties are missing from the payload.
	defaultValueFuncMap := map[string]func() interface{}{
		"ClassId":    o.GetDefaultClassId,
		"ObjectType": o.GetDefaultObjectType,
	}
	var defaultValueApplied bool
	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			if _, ok := defaultValueFuncMap[requiredProperty]; ok {
				allProperties[requiredProperty] = defaultValueFuncMap[requiredProperty]()
				defaultValueApplied = true
			}
		}
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	if defaultValueApplied {
		data, err = json.Marshal(allProperties)
		if err != nil {
			return err
		}
	}
	type VnicEthAdapterPolicyInventoryWithoutEmbeddedStruct struct {
		// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.
		ClassId string `json:"ClassId"`
		// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
		ObjectType string `json:"ObjectType"`
		// Enables advanced filtering on the interface.
		AdvancedFilter          *bool                               `json:"AdvancedFilter,omitempty"`
		ArfsSettings            NullableVnicArfsSettings            `json:"ArfsSettings,omitempty"`
		CompletionQueueSettings NullableVnicCompletionQueueSettings `json:"CompletionQueueSettings,omitempty"`
		// GENEVE offload protocol allows you to create logical networks that span physical network boundaries by allowing any information to be encoded in a packet and passed between tunnel endpoints.
		GeneveEnabled *bool `json:"GeneveEnabled,omitempty"`
		// Enables Interrupt Scaling on the interface.
		InterruptScaling  *bool                            `json:"InterruptScaling,omitempty"`
		InterruptSettings NullableVnicEthInterruptSettings `json:"InterruptSettings,omitempty"`
		NvgreSettings     NullableVnicNvgreSettings        `json:"NvgreSettings,omitempty"`
		PtpSettings       NullableVnicPtpSettings          `json:"PtpSettings,omitempty"`
		RoceSettings      NullableVnicRoceSettings         `json:"RoceSettings,omitempty"`
		RssHashSettings   NullableVnicRssHashSettings      `json:"RssHashSettings,omitempty"`
		// Receive Side Scaling allows the incoming traffic to be spread across multiple CPU cores.
		RssSettings        *bool                          `json:"RssSettings,omitempty"`
		RxQueueSettings    NullableVnicEthRxQueueSettings `json:"RxQueueSettings,omitempty"`
		TcpOffloadSettings NullableVnicTcpOffloadSettings `json:"TcpOffloadSettings,omitempty"`
		TxQueueSettings    NullableVnicEthTxQueueSettings `json:"TxQueueSettings,omitempty"`
		// Uplink Failback Timeout in seconds when uplink failover is enabled for a vNIC. After a vNIC has started using its secondary interface, this setting controls how long the primary interface must be available before the system resumes using the primary interface for the vNIC.
		UplinkFailbackTimeout *int64                       `json:"UplinkFailbackTimeout,omitempty"`
		VxlanSettings         NullableVnicVxlanSettings    `json:"VxlanSettings,omitempty"`
		TargetMo              NullableMoBaseMoRelationship `json:"TargetMo,omitempty"`
	}

	varVnicEthAdapterPolicyInventoryWithoutEmbeddedStruct := VnicEthAdapterPolicyInventoryWithoutEmbeddedStruct{}

	err = json.Unmarshal(data, &varVnicEthAdapterPolicyInventoryWithoutEmbeddedStruct)
	if err == nil {
		varVnicEthAdapterPolicyInventory := _VnicEthAdapterPolicyInventory{}
		varVnicEthAdapterPolicyInventory.ClassId = varVnicEthAdapterPolicyInventoryWithoutEmbeddedStruct.ClassId
		varVnicEthAdapterPolicyInventory.ObjectType = varVnicEthAdapterPolicyInventoryWithoutEmbeddedStruct.ObjectType
		varVnicEthAdapterPolicyInventory.AdvancedFilter = varVnicEthAdapterPolicyInventoryWithoutEmbeddedStruct.AdvancedFilter
		varVnicEthAdapterPolicyInventory.ArfsSettings = varVnicEthAdapterPolicyInventoryWithoutEmbeddedStruct.ArfsSettings
		varVnicEthAdapterPolicyInventory.CompletionQueueSettings = varVnicEthAdapterPolicyInventoryWithoutEmbeddedStruct.CompletionQueueSettings
		varVnicEthAdapterPolicyInventory.GeneveEnabled = varVnicEthAdapterPolicyInventoryWithoutEmbeddedStruct.GeneveEnabled
		varVnicEthAdapterPolicyInventory.InterruptScaling = varVnicEthAdapterPolicyInventoryWithoutEmbeddedStruct.InterruptScaling
		varVnicEthAdapterPolicyInventory.InterruptSettings = varVnicEthAdapterPolicyInventoryWithoutEmbeddedStruct.InterruptSettings
		varVnicEthAdapterPolicyInventory.NvgreSettings = varVnicEthAdapterPolicyInventoryWithoutEmbeddedStruct.NvgreSettings
		varVnicEthAdapterPolicyInventory.PtpSettings = varVnicEthAdapterPolicyInventoryWithoutEmbeddedStruct.PtpSettings
		varVnicEthAdapterPolicyInventory.RoceSettings = varVnicEthAdapterPolicyInventoryWithoutEmbeddedStruct.RoceSettings
		varVnicEthAdapterPolicyInventory.RssHashSettings = varVnicEthAdapterPolicyInventoryWithoutEmbeddedStruct.RssHashSettings
		varVnicEthAdapterPolicyInventory.RssSettings = varVnicEthAdapterPolicyInventoryWithoutEmbeddedStruct.RssSettings
		varVnicEthAdapterPolicyInventory.RxQueueSettings = varVnicEthAdapterPolicyInventoryWithoutEmbeddedStruct.RxQueueSettings
		varVnicEthAdapterPolicyInventory.TcpOffloadSettings = varVnicEthAdapterPolicyInventoryWithoutEmbeddedStruct.TcpOffloadSettings
		varVnicEthAdapterPolicyInventory.TxQueueSettings = varVnicEthAdapterPolicyInventoryWithoutEmbeddedStruct.TxQueueSettings
		varVnicEthAdapterPolicyInventory.UplinkFailbackTimeout = varVnicEthAdapterPolicyInventoryWithoutEmbeddedStruct.UplinkFailbackTimeout
		varVnicEthAdapterPolicyInventory.VxlanSettings = varVnicEthAdapterPolicyInventoryWithoutEmbeddedStruct.VxlanSettings
		varVnicEthAdapterPolicyInventory.TargetMo = varVnicEthAdapterPolicyInventoryWithoutEmbeddedStruct.TargetMo
		*o = VnicEthAdapterPolicyInventory(varVnicEthAdapterPolicyInventory)
	} else {
		return err
	}

	varVnicEthAdapterPolicyInventory := _VnicEthAdapterPolicyInventory{}

	err = json.Unmarshal(data, &varVnicEthAdapterPolicyInventory)
	if err == nil {
		o.PolicyAbstractPolicyInventory = varVnicEthAdapterPolicyInventory.PolicyAbstractPolicyInventory
	} else {
		return err
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "ClassId")
		delete(additionalProperties, "ObjectType")
		delete(additionalProperties, "AdvancedFilter")
		delete(additionalProperties, "ArfsSettings")
		delete(additionalProperties, "CompletionQueueSettings")
		delete(additionalProperties, "GeneveEnabled")
		delete(additionalProperties, "InterruptScaling")
		delete(additionalProperties, "InterruptSettings")
		delete(additionalProperties, "NvgreSettings")
		delete(additionalProperties, "PtpSettings")
		delete(additionalProperties, "RoceSettings")
		delete(additionalProperties, "RssHashSettings")
		delete(additionalProperties, "RssSettings")
		delete(additionalProperties, "RxQueueSettings")
		delete(additionalProperties, "TcpOffloadSettings")
		delete(additionalProperties, "TxQueueSettings")
		delete(additionalProperties, "UplinkFailbackTimeout")
		delete(additionalProperties, "VxlanSettings")
		delete(additionalProperties, "TargetMo")

		// remove fields from embedded structs
		reflectPolicyAbstractPolicyInventory := reflect.ValueOf(o.PolicyAbstractPolicyInventory)
		for i := 0; i < reflectPolicyAbstractPolicyInventory.Type().NumField(); i++ {
			t := reflectPolicyAbstractPolicyInventory.Type().Field(i)

			if jsonTag := t.Tag.Get("json"); jsonTag != "" {
				fieldName := ""
				if commaIdx := strings.Index(jsonTag, ","); commaIdx > 0 {
					fieldName = jsonTag[:commaIdx]
				} else {
					fieldName = jsonTag
				}
				if fieldName != "AdditionalProperties" {
					delete(additionalProperties, fieldName)
				}
			}
		}

		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableVnicEthAdapterPolicyInventory struct {
	value *VnicEthAdapterPolicyInventory
	isSet bool
}

func (v NullableVnicEthAdapterPolicyInventory) Get() *VnicEthAdapterPolicyInventory {
	return v.value
}

func (v *NullableVnicEthAdapterPolicyInventory) Set(val *VnicEthAdapterPolicyInventory) {
	v.value = val
	v.isSet = true
}

func (v NullableVnicEthAdapterPolicyInventory) IsSet() bool {
	return v.isSet
}

func (v *NullableVnicEthAdapterPolicyInventory) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVnicEthAdapterPolicyInventory(val *VnicEthAdapterPolicyInventory) *NullableVnicEthAdapterPolicyInventory {
	return &NullableVnicEthAdapterPolicyInventory{value: val, isSet: true}
}

func (v NullableVnicEthAdapterPolicyInventory) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVnicEthAdapterPolicyInventory) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
