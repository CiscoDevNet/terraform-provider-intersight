/*
Cisco Intersight

Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations. The Intersight OpenAPI document defines the complete set of properties that are returned in the HTTP response. From that perspective, a client can expect that no additional properties are returned, unless these properties are explicitly defined in the OpenAPI document. However, when a client uses an older version of the Intersight OpenAPI document, the server may send additional properties because the software is more recent than the client. In that case, the client may receive properties that it does not know about. Some generated SDKs perform a strict validation of the HTTP response body against the OpenAPI document.

API version: 1.0.11-2024100405
Contact: intersight@cisco.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package intersight

import (
	"encoding/json"
	"fmt"
	"reflect"
	"strings"
)

// checks if the SecurityUnit type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SecurityUnit{}

// SecurityUnit The crypto card present on a server.
type SecurityUnit struct {
	EquipmentBase
	// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.
	ClassId string `json:"ClassId"`
	// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
	ObjectType string `json:"ObjectType"`
	// Operational state of the security unit.
	OperState *string `json:"OperState,omitempty"`
	// Operability state of the security unit.
	Operability *string `json:"Operability,omitempty"`
	// The part number of the security unit.
	PartNumber *string `json:"PartNumber,omitempty"`
	// PCIe slot of the security unit in the server.
	PciSlot *string `json:"PciSlot,omitempty"`
	// Power state of the security unit.
	Power *string `json:"Power,omitempty"`
	// Thermal state of the security unit.
	Thermal *string `json:"Thermal,omitempty"`
	// The unique identifier assigned to the security unit within the server.
	UnitId *int64 `json:"UnitId,omitempty"`
	// The vendor identifier of the security unit.
	Vid *string `json:"Vid,omitempty"`
	// The voltage state of the security unit.
	Voltage              *string                                     `json:"Voltage,omitempty"`
	ComputeBoard         NullableComputeBoardRelationship            `json:"ComputeBoard,omitempty"`
	InventoryDeviceInfo  NullableInventoryDeviceInfoRelationship     `json:"InventoryDeviceInfo,omitempty"`
	RegisteredDevice     NullableAssetDeviceRegistrationRelationship `json:"RegisteredDevice,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _SecurityUnit SecurityUnit

// NewSecurityUnit instantiates a new SecurityUnit object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSecurityUnit(classId string, objectType string) *SecurityUnit {
	this := SecurityUnit{}
	this.ClassId = classId
	this.ObjectType = objectType
	return &this
}

// NewSecurityUnitWithDefaults instantiates a new SecurityUnit object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSecurityUnitWithDefaults() *SecurityUnit {
	this := SecurityUnit{}
	var classId string = "security.Unit"
	this.ClassId = classId
	var objectType string = "security.Unit"
	this.ObjectType = objectType
	return &this
}

// GetClassId returns the ClassId field value
func (o *SecurityUnit) GetClassId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ClassId
}

// GetClassIdOk returns a tuple with the ClassId field value
// and a boolean to check if the value has been set.
func (o *SecurityUnit) GetClassIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ClassId, true
}

// SetClassId sets field value
func (o *SecurityUnit) SetClassId(v string) {
	o.ClassId = v
}

// GetDefaultClassId returns the default value "security.Unit" of the ClassId field.
func (o *SecurityUnit) GetDefaultClassId() interface{} {
	return "security.Unit"
}

// GetObjectType returns the ObjectType field value
func (o *SecurityUnit) GetObjectType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ObjectType
}

// GetObjectTypeOk returns a tuple with the ObjectType field value
// and a boolean to check if the value has been set.
func (o *SecurityUnit) GetObjectTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ObjectType, true
}

// SetObjectType sets field value
func (o *SecurityUnit) SetObjectType(v string) {
	o.ObjectType = v
}

// GetDefaultObjectType returns the default value "security.Unit" of the ObjectType field.
func (o *SecurityUnit) GetDefaultObjectType() interface{} {
	return "security.Unit"
}

// GetOperState returns the OperState field value if set, zero value otherwise.
func (o *SecurityUnit) GetOperState() string {
	if o == nil || IsNil(o.OperState) {
		var ret string
		return ret
	}
	return *o.OperState
}

// GetOperStateOk returns a tuple with the OperState field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SecurityUnit) GetOperStateOk() (*string, bool) {
	if o == nil || IsNil(o.OperState) {
		return nil, false
	}
	return o.OperState, true
}

// HasOperState returns a boolean if a field has been set.
func (o *SecurityUnit) HasOperState() bool {
	if o != nil && !IsNil(o.OperState) {
		return true
	}

	return false
}

// SetOperState gets a reference to the given string and assigns it to the OperState field.
func (o *SecurityUnit) SetOperState(v string) {
	o.OperState = &v
}

// GetOperability returns the Operability field value if set, zero value otherwise.
func (o *SecurityUnit) GetOperability() string {
	if o == nil || IsNil(o.Operability) {
		var ret string
		return ret
	}
	return *o.Operability
}

// GetOperabilityOk returns a tuple with the Operability field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SecurityUnit) GetOperabilityOk() (*string, bool) {
	if o == nil || IsNil(o.Operability) {
		return nil, false
	}
	return o.Operability, true
}

// HasOperability returns a boolean if a field has been set.
func (o *SecurityUnit) HasOperability() bool {
	if o != nil && !IsNil(o.Operability) {
		return true
	}

	return false
}

// SetOperability gets a reference to the given string and assigns it to the Operability field.
func (o *SecurityUnit) SetOperability(v string) {
	o.Operability = &v
}

// GetPartNumber returns the PartNumber field value if set, zero value otherwise.
func (o *SecurityUnit) GetPartNumber() string {
	if o == nil || IsNil(o.PartNumber) {
		var ret string
		return ret
	}
	return *o.PartNumber
}

// GetPartNumberOk returns a tuple with the PartNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SecurityUnit) GetPartNumberOk() (*string, bool) {
	if o == nil || IsNil(o.PartNumber) {
		return nil, false
	}
	return o.PartNumber, true
}

// HasPartNumber returns a boolean if a field has been set.
func (o *SecurityUnit) HasPartNumber() bool {
	if o != nil && !IsNil(o.PartNumber) {
		return true
	}

	return false
}

// SetPartNumber gets a reference to the given string and assigns it to the PartNumber field.
func (o *SecurityUnit) SetPartNumber(v string) {
	o.PartNumber = &v
}

// GetPciSlot returns the PciSlot field value if set, zero value otherwise.
func (o *SecurityUnit) GetPciSlot() string {
	if o == nil || IsNil(o.PciSlot) {
		var ret string
		return ret
	}
	return *o.PciSlot
}

// GetPciSlotOk returns a tuple with the PciSlot field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SecurityUnit) GetPciSlotOk() (*string, bool) {
	if o == nil || IsNil(o.PciSlot) {
		return nil, false
	}
	return o.PciSlot, true
}

// HasPciSlot returns a boolean if a field has been set.
func (o *SecurityUnit) HasPciSlot() bool {
	if o != nil && !IsNil(o.PciSlot) {
		return true
	}

	return false
}

// SetPciSlot gets a reference to the given string and assigns it to the PciSlot field.
func (o *SecurityUnit) SetPciSlot(v string) {
	o.PciSlot = &v
}

// GetPower returns the Power field value if set, zero value otherwise.
func (o *SecurityUnit) GetPower() string {
	if o == nil || IsNil(o.Power) {
		var ret string
		return ret
	}
	return *o.Power
}

// GetPowerOk returns a tuple with the Power field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SecurityUnit) GetPowerOk() (*string, bool) {
	if o == nil || IsNil(o.Power) {
		return nil, false
	}
	return o.Power, true
}

// HasPower returns a boolean if a field has been set.
func (o *SecurityUnit) HasPower() bool {
	if o != nil && !IsNil(o.Power) {
		return true
	}

	return false
}

// SetPower gets a reference to the given string and assigns it to the Power field.
func (o *SecurityUnit) SetPower(v string) {
	o.Power = &v
}

// GetThermal returns the Thermal field value if set, zero value otherwise.
func (o *SecurityUnit) GetThermal() string {
	if o == nil || IsNil(o.Thermal) {
		var ret string
		return ret
	}
	return *o.Thermal
}

// GetThermalOk returns a tuple with the Thermal field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SecurityUnit) GetThermalOk() (*string, bool) {
	if o == nil || IsNil(o.Thermal) {
		return nil, false
	}
	return o.Thermal, true
}

// HasThermal returns a boolean if a field has been set.
func (o *SecurityUnit) HasThermal() bool {
	if o != nil && !IsNil(o.Thermal) {
		return true
	}

	return false
}

// SetThermal gets a reference to the given string and assigns it to the Thermal field.
func (o *SecurityUnit) SetThermal(v string) {
	o.Thermal = &v
}

// GetUnitId returns the UnitId field value if set, zero value otherwise.
func (o *SecurityUnit) GetUnitId() int64 {
	if o == nil || IsNil(o.UnitId) {
		var ret int64
		return ret
	}
	return *o.UnitId
}

// GetUnitIdOk returns a tuple with the UnitId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SecurityUnit) GetUnitIdOk() (*int64, bool) {
	if o == nil || IsNil(o.UnitId) {
		return nil, false
	}
	return o.UnitId, true
}

// HasUnitId returns a boolean if a field has been set.
func (o *SecurityUnit) HasUnitId() bool {
	if o != nil && !IsNil(o.UnitId) {
		return true
	}

	return false
}

// SetUnitId gets a reference to the given int64 and assigns it to the UnitId field.
func (o *SecurityUnit) SetUnitId(v int64) {
	o.UnitId = &v
}

// GetVid returns the Vid field value if set, zero value otherwise.
func (o *SecurityUnit) GetVid() string {
	if o == nil || IsNil(o.Vid) {
		var ret string
		return ret
	}
	return *o.Vid
}

// GetVidOk returns a tuple with the Vid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SecurityUnit) GetVidOk() (*string, bool) {
	if o == nil || IsNil(o.Vid) {
		return nil, false
	}
	return o.Vid, true
}

// HasVid returns a boolean if a field has been set.
func (o *SecurityUnit) HasVid() bool {
	if o != nil && !IsNil(o.Vid) {
		return true
	}

	return false
}

// SetVid gets a reference to the given string and assigns it to the Vid field.
func (o *SecurityUnit) SetVid(v string) {
	o.Vid = &v
}

// GetVoltage returns the Voltage field value if set, zero value otherwise.
func (o *SecurityUnit) GetVoltage() string {
	if o == nil || IsNil(o.Voltage) {
		var ret string
		return ret
	}
	return *o.Voltage
}

// GetVoltageOk returns a tuple with the Voltage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SecurityUnit) GetVoltageOk() (*string, bool) {
	if o == nil || IsNil(o.Voltage) {
		return nil, false
	}
	return o.Voltage, true
}

// HasVoltage returns a boolean if a field has been set.
func (o *SecurityUnit) HasVoltage() bool {
	if o != nil && !IsNil(o.Voltage) {
		return true
	}

	return false
}

// SetVoltage gets a reference to the given string and assigns it to the Voltage field.
func (o *SecurityUnit) SetVoltage(v string) {
	o.Voltage = &v
}

// GetComputeBoard returns the ComputeBoard field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SecurityUnit) GetComputeBoard() ComputeBoardRelationship {
	if o == nil || IsNil(o.ComputeBoard.Get()) {
		var ret ComputeBoardRelationship
		return ret
	}
	return *o.ComputeBoard.Get()
}

// GetComputeBoardOk returns a tuple with the ComputeBoard field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SecurityUnit) GetComputeBoardOk() (*ComputeBoardRelationship, bool) {
	if o == nil {
		return nil, false
	}
	return o.ComputeBoard.Get(), o.ComputeBoard.IsSet()
}

// HasComputeBoard returns a boolean if a field has been set.
func (o *SecurityUnit) HasComputeBoard() bool {
	if o != nil && o.ComputeBoard.IsSet() {
		return true
	}

	return false
}

// SetComputeBoard gets a reference to the given NullableComputeBoardRelationship and assigns it to the ComputeBoard field.
func (o *SecurityUnit) SetComputeBoard(v ComputeBoardRelationship) {
	o.ComputeBoard.Set(&v)
}

// SetComputeBoardNil sets the value for ComputeBoard to be an explicit nil
func (o *SecurityUnit) SetComputeBoardNil() {
	o.ComputeBoard.Set(nil)
}

// UnsetComputeBoard ensures that no value is present for ComputeBoard, not even an explicit nil
func (o *SecurityUnit) UnsetComputeBoard() {
	o.ComputeBoard.Unset()
}

// GetInventoryDeviceInfo returns the InventoryDeviceInfo field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SecurityUnit) GetInventoryDeviceInfo() InventoryDeviceInfoRelationship {
	if o == nil || IsNil(o.InventoryDeviceInfo.Get()) {
		var ret InventoryDeviceInfoRelationship
		return ret
	}
	return *o.InventoryDeviceInfo.Get()
}

// GetInventoryDeviceInfoOk returns a tuple with the InventoryDeviceInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SecurityUnit) GetInventoryDeviceInfoOk() (*InventoryDeviceInfoRelationship, bool) {
	if o == nil {
		return nil, false
	}
	return o.InventoryDeviceInfo.Get(), o.InventoryDeviceInfo.IsSet()
}

// HasInventoryDeviceInfo returns a boolean if a field has been set.
func (o *SecurityUnit) HasInventoryDeviceInfo() bool {
	if o != nil && o.InventoryDeviceInfo.IsSet() {
		return true
	}

	return false
}

// SetInventoryDeviceInfo gets a reference to the given NullableInventoryDeviceInfoRelationship and assigns it to the InventoryDeviceInfo field.
func (o *SecurityUnit) SetInventoryDeviceInfo(v InventoryDeviceInfoRelationship) {
	o.InventoryDeviceInfo.Set(&v)
}

// SetInventoryDeviceInfoNil sets the value for InventoryDeviceInfo to be an explicit nil
func (o *SecurityUnit) SetInventoryDeviceInfoNil() {
	o.InventoryDeviceInfo.Set(nil)
}

// UnsetInventoryDeviceInfo ensures that no value is present for InventoryDeviceInfo, not even an explicit nil
func (o *SecurityUnit) UnsetInventoryDeviceInfo() {
	o.InventoryDeviceInfo.Unset()
}

// GetRegisteredDevice returns the RegisteredDevice field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SecurityUnit) GetRegisteredDevice() AssetDeviceRegistrationRelationship {
	if o == nil || IsNil(o.RegisteredDevice.Get()) {
		var ret AssetDeviceRegistrationRelationship
		return ret
	}
	return *o.RegisteredDevice.Get()
}

// GetRegisteredDeviceOk returns a tuple with the RegisteredDevice field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SecurityUnit) GetRegisteredDeviceOk() (*AssetDeviceRegistrationRelationship, bool) {
	if o == nil {
		return nil, false
	}
	return o.RegisteredDevice.Get(), o.RegisteredDevice.IsSet()
}

// HasRegisteredDevice returns a boolean if a field has been set.
func (o *SecurityUnit) HasRegisteredDevice() bool {
	if o != nil && o.RegisteredDevice.IsSet() {
		return true
	}

	return false
}

// SetRegisteredDevice gets a reference to the given NullableAssetDeviceRegistrationRelationship and assigns it to the RegisteredDevice field.
func (o *SecurityUnit) SetRegisteredDevice(v AssetDeviceRegistrationRelationship) {
	o.RegisteredDevice.Set(&v)
}

// SetRegisteredDeviceNil sets the value for RegisteredDevice to be an explicit nil
func (o *SecurityUnit) SetRegisteredDeviceNil() {
	o.RegisteredDevice.Set(nil)
}

// UnsetRegisteredDevice ensures that no value is present for RegisteredDevice, not even an explicit nil
func (o *SecurityUnit) UnsetRegisteredDevice() {
	o.RegisteredDevice.Unset()
}

func (o SecurityUnit) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SecurityUnit) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	serializedEquipmentBase, errEquipmentBase := json.Marshal(o.EquipmentBase)
	if errEquipmentBase != nil {
		return map[string]interface{}{}, errEquipmentBase
	}
	errEquipmentBase = json.Unmarshal([]byte(serializedEquipmentBase), &toSerialize)
	if errEquipmentBase != nil {
		return map[string]interface{}{}, errEquipmentBase
	}
	if _, exists := toSerialize["ClassId"]; !exists {
		toSerialize["ClassId"] = o.GetDefaultClassId()
	}
	toSerialize["ClassId"] = o.ClassId
	if _, exists := toSerialize["ObjectType"]; !exists {
		toSerialize["ObjectType"] = o.GetDefaultObjectType()
	}
	toSerialize["ObjectType"] = o.ObjectType
	if !IsNil(o.OperState) {
		toSerialize["OperState"] = o.OperState
	}
	if !IsNil(o.Operability) {
		toSerialize["Operability"] = o.Operability
	}
	if !IsNil(o.PartNumber) {
		toSerialize["PartNumber"] = o.PartNumber
	}
	if !IsNil(o.PciSlot) {
		toSerialize["PciSlot"] = o.PciSlot
	}
	if !IsNil(o.Power) {
		toSerialize["Power"] = o.Power
	}
	if !IsNil(o.Thermal) {
		toSerialize["Thermal"] = o.Thermal
	}
	if !IsNil(o.UnitId) {
		toSerialize["UnitId"] = o.UnitId
	}
	if !IsNil(o.Vid) {
		toSerialize["Vid"] = o.Vid
	}
	if !IsNil(o.Voltage) {
		toSerialize["Voltage"] = o.Voltage
	}
	if o.ComputeBoard.IsSet() {
		toSerialize["ComputeBoard"] = o.ComputeBoard.Get()
	}
	if o.InventoryDeviceInfo.IsSet() {
		toSerialize["InventoryDeviceInfo"] = o.InventoryDeviceInfo.Get()
	}
	if o.RegisteredDevice.IsSet() {
		toSerialize["RegisteredDevice"] = o.RegisteredDevice.Get()
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *SecurityUnit) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"ClassId",
		"ObjectType",
	}

	// defaultValueFuncMap captures the default values for required properties.
	// These values are used when required properties are missing from the payload.
	defaultValueFuncMap := map[string]func() interface{}{
		"ClassId":    o.GetDefaultClassId,
		"ObjectType": o.GetDefaultObjectType,
	}
	var defaultValueApplied bool
	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			if _, ok := defaultValueFuncMap[requiredProperty]; ok {
				allProperties[requiredProperty] = defaultValueFuncMap[requiredProperty]()
				defaultValueApplied = true
			}
		}
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	if defaultValueApplied {
		data, err = json.Marshal(allProperties)
		if err != nil {
			return err
		}
	}
	type SecurityUnitWithoutEmbeddedStruct struct {
		// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.
		ClassId string `json:"ClassId"`
		// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
		ObjectType string `json:"ObjectType"`
		// Operational state of the security unit.
		OperState *string `json:"OperState,omitempty"`
		// Operability state of the security unit.
		Operability *string `json:"Operability,omitempty"`
		// The part number of the security unit.
		PartNumber *string `json:"PartNumber,omitempty"`
		// PCIe slot of the security unit in the server.
		PciSlot *string `json:"PciSlot,omitempty"`
		// Power state of the security unit.
		Power *string `json:"Power,omitempty"`
		// Thermal state of the security unit.
		Thermal *string `json:"Thermal,omitempty"`
		// The unique identifier assigned to the security unit within the server.
		UnitId *int64 `json:"UnitId,omitempty"`
		// The vendor identifier of the security unit.
		Vid *string `json:"Vid,omitempty"`
		// The voltage state of the security unit.
		Voltage             *string                                     `json:"Voltage,omitempty"`
		ComputeBoard        NullableComputeBoardRelationship            `json:"ComputeBoard,omitempty"`
		InventoryDeviceInfo NullableInventoryDeviceInfoRelationship     `json:"InventoryDeviceInfo,omitempty"`
		RegisteredDevice    NullableAssetDeviceRegistrationRelationship `json:"RegisteredDevice,omitempty"`
	}

	varSecurityUnitWithoutEmbeddedStruct := SecurityUnitWithoutEmbeddedStruct{}

	err = json.Unmarshal(data, &varSecurityUnitWithoutEmbeddedStruct)
	if err == nil {
		varSecurityUnit := _SecurityUnit{}
		varSecurityUnit.ClassId = varSecurityUnitWithoutEmbeddedStruct.ClassId
		varSecurityUnit.ObjectType = varSecurityUnitWithoutEmbeddedStruct.ObjectType
		varSecurityUnit.OperState = varSecurityUnitWithoutEmbeddedStruct.OperState
		varSecurityUnit.Operability = varSecurityUnitWithoutEmbeddedStruct.Operability
		varSecurityUnit.PartNumber = varSecurityUnitWithoutEmbeddedStruct.PartNumber
		varSecurityUnit.PciSlot = varSecurityUnitWithoutEmbeddedStruct.PciSlot
		varSecurityUnit.Power = varSecurityUnitWithoutEmbeddedStruct.Power
		varSecurityUnit.Thermal = varSecurityUnitWithoutEmbeddedStruct.Thermal
		varSecurityUnit.UnitId = varSecurityUnitWithoutEmbeddedStruct.UnitId
		varSecurityUnit.Vid = varSecurityUnitWithoutEmbeddedStruct.Vid
		varSecurityUnit.Voltage = varSecurityUnitWithoutEmbeddedStruct.Voltage
		varSecurityUnit.ComputeBoard = varSecurityUnitWithoutEmbeddedStruct.ComputeBoard
		varSecurityUnit.InventoryDeviceInfo = varSecurityUnitWithoutEmbeddedStruct.InventoryDeviceInfo
		varSecurityUnit.RegisteredDevice = varSecurityUnitWithoutEmbeddedStruct.RegisteredDevice
		*o = SecurityUnit(varSecurityUnit)
	} else {
		return err
	}

	varSecurityUnit := _SecurityUnit{}

	err = json.Unmarshal(data, &varSecurityUnit)
	if err == nil {
		o.EquipmentBase = varSecurityUnit.EquipmentBase
	} else {
		return err
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "ClassId")
		delete(additionalProperties, "ObjectType")
		delete(additionalProperties, "OperState")
		delete(additionalProperties, "Operability")
		delete(additionalProperties, "PartNumber")
		delete(additionalProperties, "PciSlot")
		delete(additionalProperties, "Power")
		delete(additionalProperties, "Thermal")
		delete(additionalProperties, "UnitId")
		delete(additionalProperties, "Vid")
		delete(additionalProperties, "Voltage")
		delete(additionalProperties, "ComputeBoard")
		delete(additionalProperties, "InventoryDeviceInfo")
		delete(additionalProperties, "RegisteredDevice")

		// remove fields from embedded structs
		reflectEquipmentBase := reflect.ValueOf(o.EquipmentBase)
		for i := 0; i < reflectEquipmentBase.Type().NumField(); i++ {
			t := reflectEquipmentBase.Type().Field(i)

			if jsonTag := t.Tag.Get("json"); jsonTag != "" {
				fieldName := ""
				if commaIdx := strings.Index(jsonTag, ","); commaIdx > 0 {
					fieldName = jsonTag[:commaIdx]
				} else {
					fieldName = jsonTag
				}
				if fieldName != "AdditionalProperties" {
					delete(additionalProperties, fieldName)
				}
			}
		}

		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableSecurityUnit struct {
	value *SecurityUnit
	isSet bool
}

func (v NullableSecurityUnit) Get() *SecurityUnit {
	return v.value
}

func (v *NullableSecurityUnit) Set(val *SecurityUnit) {
	v.value = val
	v.isSet = true
}

func (v NullableSecurityUnit) IsSet() bool {
	return v.isSet
}

func (v *NullableSecurityUnit) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSecurityUnit(val *SecurityUnit) *NullableSecurityUnit {
	return &NullableSecurityUnit{value: val, isSet: true}
}

func (v NullableSecurityUnit) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSecurityUnit) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
