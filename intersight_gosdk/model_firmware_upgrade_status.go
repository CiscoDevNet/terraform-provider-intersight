/*
Cisco Intersight

Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations. The Intersight OpenAPI document defines the complete set of properties that are returned in the HTTP response. From that perspective, a client can expect that no additional properties are returned, unless these properties are explicitly defined in the OpenAPI document. However, when a client uses an older version of the Intersight OpenAPI document, the server may send additional properties because the software is more recent than the client. In that case, the client may receive properties that it does not know about. Some generated SDKs perform a strict validation of the HTTP response body against the OpenAPI document.

API version: 1.0.11-2024100405
Contact: intersight@cisco.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package intersight

import (
	"encoding/json"
	"fmt"
	"reflect"
	"strings"
)

// checks if the FirmwareUpgradeStatus type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FirmwareUpgradeStatus{}

// FirmwareUpgradeStatus The status for the upgrade operation to include the status for the download and upgrade stages.
type FirmwareUpgradeStatus struct {
	ConnectorDownloadStatus
	// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.
	ClassId string `json:"ClassId"`
	// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
	ObjectType string `json:"ObjectType"`
	// The message from the endpoint during the download.
	DownloadMessage *string `json:"DownloadMessage,omitempty"`
	// The percentage of the image downloaded in the endpoint.
	DownloadPercentage *int64 `json:"DownloadPercentage,omitempty"`
	// The image download stages. Example:downloading, flashing.
	DownloadStage *string `json:"DownloadStage,omitempty"`
	// The server power status after the upgrade request is submitted in the endpoint. * `none` - Server power status is none. * `powered on` - Server power status is powered on. * `powered off` - Server power status is powered off.
	EpPowerStatus *string `json:"EpPowerStatus,omitempty"`
	// The server power status before the upgrade request is submitted in the endpoint. * `none` - Server power status is none. * `powered on` - Server power status is powered on. * `powered off` - Server power status is powered off.
	InitialPowerStatus *string `json:"InitialPowerStatus,omitempty"`
	// A boolean flag which indicates that the generated pre-signed url is not a CDN URL when set to true.
	IsCdnDisabled *bool `json:"IsCdnDisabled,omitempty"`
	// The reason for the operation failure.
	OverallError *string `json:"OverallError,omitempty"`
	// The overall percentage of the operation.
	OverallPercentage *int64 `json:"OverallPercentage,omitempty"`
	// The overall status of the operation. * `none` - Upgrade stage is no upgrade stage. * `started` - Upgrade stage is started. * `prepare initiating` - Upgrade configuration is being prepared. * `prepare initiated` - Upgrade configuration is initiated. * `prepared` - Upgrade configuration is prepared. * `download initiating` - Upgrade stage is download initiating. * `download initiated` - Upgrade stage is download initiated. * `downloading` - Upgrade stage is downloading. * `downloaded` - Upgrade stage is downloaded. * `upgrade initiating on fabric A` - Upgrade stage is in upgrade initiating when upgrade is being started in endopint. * `upgrade initiated on fabric A` - Upgrade stage is in upgrade initiated when the upgrade has started in endpoint. * `upgrading fabric A` - Upgrade stage is in upgrading when the upgrade requires reboot to complete. * `rebooting fabric A` - Upgrade is in rebooting when the endpoint is being rebooted. * `upgraded fabric A` - Upgrade stage is in upgraded when the corresponding endpoint has completed. * `upgrade initiating on fabric B` - Upgrade stage is in upgrade initiating when upgrade is being started in endopint. * `upgrade initiated on fabric B` - Upgrade stage is in upgrade initiated when upgrade has started in endpoint. * `upgrading fabric B` - Upgrade stage is in upgrading when the upgrade requires reboot to complete. * `rebooting fabric B` - Upgrade is in rebooting when the endpoint is being rebooted. * `upgraded fabric B` - Upgrade stage is in upgraded when the corresponding endpoint has completed. * `upgrade initiating` - Upgrade stage is upgrade initiating. * `upgrade initiated` - Upgrade stage is upgrade initiated. * `upgrading` - Upgrade stage is upgrading. * `oob images staging` - Out-of-band component images staging. * `oob images staged` - Out-of-band component images staged. * `rebooting` - Upgrade is rebooting the endpoint. * `upgraded` - Upgrade stage is upgraded. * `success` - Upgrade stage is success. * `failed` - Upgrade stage is upgrade failed. * `terminated` - Upgrade stage is terminated. * `pending` - Upgrade stage is pending. * `ReadyForCache` - The image is ready to be cached into the Intersight Appliance. * `Caching` - The image will be cached into Intersight Appliance or an endpoint cache. * `Cached` - The image has been cached into the Intersight Appliance or endpoint cache. * `CachingFailed` - The image caching into the Intersight Appliance failed or endpoint cache.
	Overallstatus *string `json:"Overallstatus,omitempty"`
	// Pending reason for the upgrade waiting. * `none` - Upgrade pending reason is none. * `pending for next reboot` - Upgrade pending reason is pending for next reboot.
	PendingType *string `json:"PendingType,omitempty"`
	// The error message from the endpoint during the SD card download.
	SdCardDownloadError *string `json:"SdCardDownloadError,omitempty"`
	// CIMC firmware version of the server prior to the upgrade.
	SourceFirmwareVersion *string `json:"SourceFirmwareVersion,omitempty"`
	// CIMC firmware version of the server post the upgrade.
	TargetFirmwareVersion *string                                  `json:"TargetFirmwareVersion,omitempty"`
	Upgrade               NullableFirmwareUpgradeBaseRelationship  `json:"Upgrade,omitempty"`
	Workflow              NullableWorkflowWorkflowInfoRelationship `json:"Workflow,omitempty"`
	AdditionalProperties  map[string]interface{}
}

type _FirmwareUpgradeStatus FirmwareUpgradeStatus

// NewFirmwareUpgradeStatus instantiates a new FirmwareUpgradeStatus object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFirmwareUpgradeStatus(classId string, objectType string) *FirmwareUpgradeStatus {
	this := FirmwareUpgradeStatus{}
	this.ClassId = classId
	this.ObjectType = objectType
	var epPowerStatus string = "none"
	this.EpPowerStatus = &epPowerStatus
	var initialPowerStatus string = "none"
	this.InitialPowerStatus = &initialPowerStatus
	var overallstatus string = "none"
	this.Overallstatus = &overallstatus
	var pendingType string = "none"
	this.PendingType = &pendingType
	return &this
}

// NewFirmwareUpgradeStatusWithDefaults instantiates a new FirmwareUpgradeStatus object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFirmwareUpgradeStatusWithDefaults() *FirmwareUpgradeStatus {
	this := FirmwareUpgradeStatus{}
	var classId string = "firmware.UpgradeStatus"
	this.ClassId = classId
	var objectType string = "firmware.UpgradeStatus"
	this.ObjectType = objectType
	var epPowerStatus string = "none"
	this.EpPowerStatus = &epPowerStatus
	var initialPowerStatus string = "none"
	this.InitialPowerStatus = &initialPowerStatus
	var overallstatus string = "none"
	this.Overallstatus = &overallstatus
	var pendingType string = "none"
	this.PendingType = &pendingType
	return &this
}

// GetClassId returns the ClassId field value
func (o *FirmwareUpgradeStatus) GetClassId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ClassId
}

// GetClassIdOk returns a tuple with the ClassId field value
// and a boolean to check if the value has been set.
func (o *FirmwareUpgradeStatus) GetClassIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ClassId, true
}

// SetClassId sets field value
func (o *FirmwareUpgradeStatus) SetClassId(v string) {
	o.ClassId = v
}

// GetDefaultClassId returns the default value "firmware.UpgradeStatus" of the ClassId field.
func (o *FirmwareUpgradeStatus) GetDefaultClassId() interface{} {
	return "firmware.UpgradeStatus"
}

// GetObjectType returns the ObjectType field value
func (o *FirmwareUpgradeStatus) GetObjectType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ObjectType
}

// GetObjectTypeOk returns a tuple with the ObjectType field value
// and a boolean to check if the value has been set.
func (o *FirmwareUpgradeStatus) GetObjectTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ObjectType, true
}

// SetObjectType sets field value
func (o *FirmwareUpgradeStatus) SetObjectType(v string) {
	o.ObjectType = v
}

// GetDefaultObjectType returns the default value "firmware.UpgradeStatus" of the ObjectType field.
func (o *FirmwareUpgradeStatus) GetDefaultObjectType() interface{} {
	return "firmware.UpgradeStatus"
}

// GetDownloadMessage returns the DownloadMessage field value if set, zero value otherwise.
func (o *FirmwareUpgradeStatus) GetDownloadMessage() string {
	if o == nil || IsNil(o.DownloadMessage) {
		var ret string
		return ret
	}
	return *o.DownloadMessage
}

// GetDownloadMessageOk returns a tuple with the DownloadMessage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FirmwareUpgradeStatus) GetDownloadMessageOk() (*string, bool) {
	if o == nil || IsNil(o.DownloadMessage) {
		return nil, false
	}
	return o.DownloadMessage, true
}

// HasDownloadMessage returns a boolean if a field has been set.
func (o *FirmwareUpgradeStatus) HasDownloadMessage() bool {
	if o != nil && !IsNil(o.DownloadMessage) {
		return true
	}

	return false
}

// SetDownloadMessage gets a reference to the given string and assigns it to the DownloadMessage field.
func (o *FirmwareUpgradeStatus) SetDownloadMessage(v string) {
	o.DownloadMessage = &v
}

// GetDownloadPercentage returns the DownloadPercentage field value if set, zero value otherwise.
func (o *FirmwareUpgradeStatus) GetDownloadPercentage() int64 {
	if o == nil || IsNil(o.DownloadPercentage) {
		var ret int64
		return ret
	}
	return *o.DownloadPercentage
}

// GetDownloadPercentageOk returns a tuple with the DownloadPercentage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FirmwareUpgradeStatus) GetDownloadPercentageOk() (*int64, bool) {
	if o == nil || IsNil(o.DownloadPercentage) {
		return nil, false
	}
	return o.DownloadPercentage, true
}

// HasDownloadPercentage returns a boolean if a field has been set.
func (o *FirmwareUpgradeStatus) HasDownloadPercentage() bool {
	if o != nil && !IsNil(o.DownloadPercentage) {
		return true
	}

	return false
}

// SetDownloadPercentage gets a reference to the given int64 and assigns it to the DownloadPercentage field.
func (o *FirmwareUpgradeStatus) SetDownloadPercentage(v int64) {
	o.DownloadPercentage = &v
}

// GetDownloadStage returns the DownloadStage field value if set, zero value otherwise.
func (o *FirmwareUpgradeStatus) GetDownloadStage() string {
	if o == nil || IsNil(o.DownloadStage) {
		var ret string
		return ret
	}
	return *o.DownloadStage
}

// GetDownloadStageOk returns a tuple with the DownloadStage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FirmwareUpgradeStatus) GetDownloadStageOk() (*string, bool) {
	if o == nil || IsNil(o.DownloadStage) {
		return nil, false
	}
	return o.DownloadStage, true
}

// HasDownloadStage returns a boolean if a field has been set.
func (o *FirmwareUpgradeStatus) HasDownloadStage() bool {
	if o != nil && !IsNil(o.DownloadStage) {
		return true
	}

	return false
}

// SetDownloadStage gets a reference to the given string and assigns it to the DownloadStage field.
func (o *FirmwareUpgradeStatus) SetDownloadStage(v string) {
	o.DownloadStage = &v
}

// GetEpPowerStatus returns the EpPowerStatus field value if set, zero value otherwise.
func (o *FirmwareUpgradeStatus) GetEpPowerStatus() string {
	if o == nil || IsNil(o.EpPowerStatus) {
		var ret string
		return ret
	}
	return *o.EpPowerStatus
}

// GetEpPowerStatusOk returns a tuple with the EpPowerStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FirmwareUpgradeStatus) GetEpPowerStatusOk() (*string, bool) {
	if o == nil || IsNil(o.EpPowerStatus) {
		return nil, false
	}
	return o.EpPowerStatus, true
}

// HasEpPowerStatus returns a boolean if a field has been set.
func (o *FirmwareUpgradeStatus) HasEpPowerStatus() bool {
	if o != nil && !IsNil(o.EpPowerStatus) {
		return true
	}

	return false
}

// SetEpPowerStatus gets a reference to the given string and assigns it to the EpPowerStatus field.
func (o *FirmwareUpgradeStatus) SetEpPowerStatus(v string) {
	o.EpPowerStatus = &v
}

// GetInitialPowerStatus returns the InitialPowerStatus field value if set, zero value otherwise.
func (o *FirmwareUpgradeStatus) GetInitialPowerStatus() string {
	if o == nil || IsNil(o.InitialPowerStatus) {
		var ret string
		return ret
	}
	return *o.InitialPowerStatus
}

// GetInitialPowerStatusOk returns a tuple with the InitialPowerStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FirmwareUpgradeStatus) GetInitialPowerStatusOk() (*string, bool) {
	if o == nil || IsNil(o.InitialPowerStatus) {
		return nil, false
	}
	return o.InitialPowerStatus, true
}

// HasInitialPowerStatus returns a boolean if a field has been set.
func (o *FirmwareUpgradeStatus) HasInitialPowerStatus() bool {
	if o != nil && !IsNil(o.InitialPowerStatus) {
		return true
	}

	return false
}

// SetInitialPowerStatus gets a reference to the given string and assigns it to the InitialPowerStatus field.
func (o *FirmwareUpgradeStatus) SetInitialPowerStatus(v string) {
	o.InitialPowerStatus = &v
}

// GetIsCdnDisabled returns the IsCdnDisabled field value if set, zero value otherwise.
func (o *FirmwareUpgradeStatus) GetIsCdnDisabled() bool {
	if o == nil || IsNil(o.IsCdnDisabled) {
		var ret bool
		return ret
	}
	return *o.IsCdnDisabled
}

// GetIsCdnDisabledOk returns a tuple with the IsCdnDisabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FirmwareUpgradeStatus) GetIsCdnDisabledOk() (*bool, bool) {
	if o == nil || IsNil(o.IsCdnDisabled) {
		return nil, false
	}
	return o.IsCdnDisabled, true
}

// HasIsCdnDisabled returns a boolean if a field has been set.
func (o *FirmwareUpgradeStatus) HasIsCdnDisabled() bool {
	if o != nil && !IsNil(o.IsCdnDisabled) {
		return true
	}

	return false
}

// SetIsCdnDisabled gets a reference to the given bool and assigns it to the IsCdnDisabled field.
func (o *FirmwareUpgradeStatus) SetIsCdnDisabled(v bool) {
	o.IsCdnDisabled = &v
}

// GetOverallError returns the OverallError field value if set, zero value otherwise.
func (o *FirmwareUpgradeStatus) GetOverallError() string {
	if o == nil || IsNil(o.OverallError) {
		var ret string
		return ret
	}
	return *o.OverallError
}

// GetOverallErrorOk returns a tuple with the OverallError field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FirmwareUpgradeStatus) GetOverallErrorOk() (*string, bool) {
	if o == nil || IsNil(o.OverallError) {
		return nil, false
	}
	return o.OverallError, true
}

// HasOverallError returns a boolean if a field has been set.
func (o *FirmwareUpgradeStatus) HasOverallError() bool {
	if o != nil && !IsNil(o.OverallError) {
		return true
	}

	return false
}

// SetOverallError gets a reference to the given string and assigns it to the OverallError field.
func (o *FirmwareUpgradeStatus) SetOverallError(v string) {
	o.OverallError = &v
}

// GetOverallPercentage returns the OverallPercentage field value if set, zero value otherwise.
func (o *FirmwareUpgradeStatus) GetOverallPercentage() int64 {
	if o == nil || IsNil(o.OverallPercentage) {
		var ret int64
		return ret
	}
	return *o.OverallPercentage
}

// GetOverallPercentageOk returns a tuple with the OverallPercentage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FirmwareUpgradeStatus) GetOverallPercentageOk() (*int64, bool) {
	if o == nil || IsNil(o.OverallPercentage) {
		return nil, false
	}
	return o.OverallPercentage, true
}

// HasOverallPercentage returns a boolean if a field has been set.
func (o *FirmwareUpgradeStatus) HasOverallPercentage() bool {
	if o != nil && !IsNil(o.OverallPercentage) {
		return true
	}

	return false
}

// SetOverallPercentage gets a reference to the given int64 and assigns it to the OverallPercentage field.
func (o *FirmwareUpgradeStatus) SetOverallPercentage(v int64) {
	o.OverallPercentage = &v
}

// GetOverallstatus returns the Overallstatus field value if set, zero value otherwise.
func (o *FirmwareUpgradeStatus) GetOverallstatus() string {
	if o == nil || IsNil(o.Overallstatus) {
		var ret string
		return ret
	}
	return *o.Overallstatus
}

// GetOverallstatusOk returns a tuple with the Overallstatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FirmwareUpgradeStatus) GetOverallstatusOk() (*string, bool) {
	if o == nil || IsNil(o.Overallstatus) {
		return nil, false
	}
	return o.Overallstatus, true
}

// HasOverallstatus returns a boolean if a field has been set.
func (o *FirmwareUpgradeStatus) HasOverallstatus() bool {
	if o != nil && !IsNil(o.Overallstatus) {
		return true
	}

	return false
}

// SetOverallstatus gets a reference to the given string and assigns it to the Overallstatus field.
func (o *FirmwareUpgradeStatus) SetOverallstatus(v string) {
	o.Overallstatus = &v
}

// GetPendingType returns the PendingType field value if set, zero value otherwise.
func (o *FirmwareUpgradeStatus) GetPendingType() string {
	if o == nil || IsNil(o.PendingType) {
		var ret string
		return ret
	}
	return *o.PendingType
}

// GetPendingTypeOk returns a tuple with the PendingType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FirmwareUpgradeStatus) GetPendingTypeOk() (*string, bool) {
	if o == nil || IsNil(o.PendingType) {
		return nil, false
	}
	return o.PendingType, true
}

// HasPendingType returns a boolean if a field has been set.
func (o *FirmwareUpgradeStatus) HasPendingType() bool {
	if o != nil && !IsNil(o.PendingType) {
		return true
	}

	return false
}

// SetPendingType gets a reference to the given string and assigns it to the PendingType field.
func (o *FirmwareUpgradeStatus) SetPendingType(v string) {
	o.PendingType = &v
}

// GetSdCardDownloadError returns the SdCardDownloadError field value if set, zero value otherwise.
func (o *FirmwareUpgradeStatus) GetSdCardDownloadError() string {
	if o == nil || IsNil(o.SdCardDownloadError) {
		var ret string
		return ret
	}
	return *o.SdCardDownloadError
}

// GetSdCardDownloadErrorOk returns a tuple with the SdCardDownloadError field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FirmwareUpgradeStatus) GetSdCardDownloadErrorOk() (*string, bool) {
	if o == nil || IsNil(o.SdCardDownloadError) {
		return nil, false
	}
	return o.SdCardDownloadError, true
}

// HasSdCardDownloadError returns a boolean if a field has been set.
func (o *FirmwareUpgradeStatus) HasSdCardDownloadError() bool {
	if o != nil && !IsNil(o.SdCardDownloadError) {
		return true
	}

	return false
}

// SetSdCardDownloadError gets a reference to the given string and assigns it to the SdCardDownloadError field.
func (o *FirmwareUpgradeStatus) SetSdCardDownloadError(v string) {
	o.SdCardDownloadError = &v
}

// GetSourceFirmwareVersion returns the SourceFirmwareVersion field value if set, zero value otherwise.
func (o *FirmwareUpgradeStatus) GetSourceFirmwareVersion() string {
	if o == nil || IsNil(o.SourceFirmwareVersion) {
		var ret string
		return ret
	}
	return *o.SourceFirmwareVersion
}

// GetSourceFirmwareVersionOk returns a tuple with the SourceFirmwareVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FirmwareUpgradeStatus) GetSourceFirmwareVersionOk() (*string, bool) {
	if o == nil || IsNil(o.SourceFirmwareVersion) {
		return nil, false
	}
	return o.SourceFirmwareVersion, true
}

// HasSourceFirmwareVersion returns a boolean if a field has been set.
func (o *FirmwareUpgradeStatus) HasSourceFirmwareVersion() bool {
	if o != nil && !IsNil(o.SourceFirmwareVersion) {
		return true
	}

	return false
}

// SetSourceFirmwareVersion gets a reference to the given string and assigns it to the SourceFirmwareVersion field.
func (o *FirmwareUpgradeStatus) SetSourceFirmwareVersion(v string) {
	o.SourceFirmwareVersion = &v
}

// GetTargetFirmwareVersion returns the TargetFirmwareVersion field value if set, zero value otherwise.
func (o *FirmwareUpgradeStatus) GetTargetFirmwareVersion() string {
	if o == nil || IsNil(o.TargetFirmwareVersion) {
		var ret string
		return ret
	}
	return *o.TargetFirmwareVersion
}

// GetTargetFirmwareVersionOk returns a tuple with the TargetFirmwareVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FirmwareUpgradeStatus) GetTargetFirmwareVersionOk() (*string, bool) {
	if o == nil || IsNil(o.TargetFirmwareVersion) {
		return nil, false
	}
	return o.TargetFirmwareVersion, true
}

// HasTargetFirmwareVersion returns a boolean if a field has been set.
func (o *FirmwareUpgradeStatus) HasTargetFirmwareVersion() bool {
	if o != nil && !IsNil(o.TargetFirmwareVersion) {
		return true
	}

	return false
}

// SetTargetFirmwareVersion gets a reference to the given string and assigns it to the TargetFirmwareVersion field.
func (o *FirmwareUpgradeStatus) SetTargetFirmwareVersion(v string) {
	o.TargetFirmwareVersion = &v
}

// GetUpgrade returns the Upgrade field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FirmwareUpgradeStatus) GetUpgrade() FirmwareUpgradeBaseRelationship {
	if o == nil || IsNil(o.Upgrade.Get()) {
		var ret FirmwareUpgradeBaseRelationship
		return ret
	}
	return *o.Upgrade.Get()
}

// GetUpgradeOk returns a tuple with the Upgrade field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FirmwareUpgradeStatus) GetUpgradeOk() (*FirmwareUpgradeBaseRelationship, bool) {
	if o == nil {
		return nil, false
	}
	return o.Upgrade.Get(), o.Upgrade.IsSet()
}

// HasUpgrade returns a boolean if a field has been set.
func (o *FirmwareUpgradeStatus) HasUpgrade() bool {
	if o != nil && o.Upgrade.IsSet() {
		return true
	}

	return false
}

// SetUpgrade gets a reference to the given NullableFirmwareUpgradeBaseRelationship and assigns it to the Upgrade field.
func (o *FirmwareUpgradeStatus) SetUpgrade(v FirmwareUpgradeBaseRelationship) {
	o.Upgrade.Set(&v)
}

// SetUpgradeNil sets the value for Upgrade to be an explicit nil
func (o *FirmwareUpgradeStatus) SetUpgradeNil() {
	o.Upgrade.Set(nil)
}

// UnsetUpgrade ensures that no value is present for Upgrade, not even an explicit nil
func (o *FirmwareUpgradeStatus) UnsetUpgrade() {
	o.Upgrade.Unset()
}

// GetWorkflow returns the Workflow field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FirmwareUpgradeStatus) GetWorkflow() WorkflowWorkflowInfoRelationship {
	if o == nil || IsNil(o.Workflow.Get()) {
		var ret WorkflowWorkflowInfoRelationship
		return ret
	}
	return *o.Workflow.Get()
}

// GetWorkflowOk returns a tuple with the Workflow field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FirmwareUpgradeStatus) GetWorkflowOk() (*WorkflowWorkflowInfoRelationship, bool) {
	if o == nil {
		return nil, false
	}
	return o.Workflow.Get(), o.Workflow.IsSet()
}

// HasWorkflow returns a boolean if a field has been set.
func (o *FirmwareUpgradeStatus) HasWorkflow() bool {
	if o != nil && o.Workflow.IsSet() {
		return true
	}

	return false
}

// SetWorkflow gets a reference to the given NullableWorkflowWorkflowInfoRelationship and assigns it to the Workflow field.
func (o *FirmwareUpgradeStatus) SetWorkflow(v WorkflowWorkflowInfoRelationship) {
	o.Workflow.Set(&v)
}

// SetWorkflowNil sets the value for Workflow to be an explicit nil
func (o *FirmwareUpgradeStatus) SetWorkflowNil() {
	o.Workflow.Set(nil)
}

// UnsetWorkflow ensures that no value is present for Workflow, not even an explicit nil
func (o *FirmwareUpgradeStatus) UnsetWorkflow() {
	o.Workflow.Unset()
}

func (o FirmwareUpgradeStatus) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FirmwareUpgradeStatus) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	serializedConnectorDownloadStatus, errConnectorDownloadStatus := json.Marshal(o.ConnectorDownloadStatus)
	if errConnectorDownloadStatus != nil {
		return map[string]interface{}{}, errConnectorDownloadStatus
	}
	errConnectorDownloadStatus = json.Unmarshal([]byte(serializedConnectorDownloadStatus), &toSerialize)
	if errConnectorDownloadStatus != nil {
		return map[string]interface{}{}, errConnectorDownloadStatus
	}
	if _, exists := toSerialize["ClassId"]; !exists {
		toSerialize["ClassId"] = o.GetDefaultClassId()
	}
	toSerialize["ClassId"] = o.ClassId
	if _, exists := toSerialize["ObjectType"]; !exists {
		toSerialize["ObjectType"] = o.GetDefaultObjectType()
	}
	toSerialize["ObjectType"] = o.ObjectType
	if !IsNil(o.DownloadMessage) {
		toSerialize["DownloadMessage"] = o.DownloadMessage
	}
	if !IsNil(o.DownloadPercentage) {
		toSerialize["DownloadPercentage"] = o.DownloadPercentage
	}
	if !IsNil(o.DownloadStage) {
		toSerialize["DownloadStage"] = o.DownloadStage
	}
	if !IsNil(o.EpPowerStatus) {
		toSerialize["EpPowerStatus"] = o.EpPowerStatus
	}
	if !IsNil(o.InitialPowerStatus) {
		toSerialize["InitialPowerStatus"] = o.InitialPowerStatus
	}
	if !IsNil(o.IsCdnDisabled) {
		toSerialize["IsCdnDisabled"] = o.IsCdnDisabled
	}
	if !IsNil(o.OverallError) {
		toSerialize["OverallError"] = o.OverallError
	}
	if !IsNil(o.OverallPercentage) {
		toSerialize["OverallPercentage"] = o.OverallPercentage
	}
	if !IsNil(o.Overallstatus) {
		toSerialize["Overallstatus"] = o.Overallstatus
	}
	if !IsNil(o.PendingType) {
		toSerialize["PendingType"] = o.PendingType
	}
	if !IsNil(o.SdCardDownloadError) {
		toSerialize["SdCardDownloadError"] = o.SdCardDownloadError
	}
	if !IsNil(o.SourceFirmwareVersion) {
		toSerialize["SourceFirmwareVersion"] = o.SourceFirmwareVersion
	}
	if !IsNil(o.TargetFirmwareVersion) {
		toSerialize["TargetFirmwareVersion"] = o.TargetFirmwareVersion
	}
	if o.Upgrade.IsSet() {
		toSerialize["Upgrade"] = o.Upgrade.Get()
	}
	if o.Workflow.IsSet() {
		toSerialize["Workflow"] = o.Workflow.Get()
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *FirmwareUpgradeStatus) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"ClassId",
		"ObjectType",
	}

	// defaultValueFuncMap captures the default values for required properties.
	// These values are used when required properties are missing from the payload.
	defaultValueFuncMap := map[string]func() interface{}{
		"ClassId":    o.GetDefaultClassId,
		"ObjectType": o.GetDefaultObjectType,
	}
	var defaultValueApplied bool
	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			if _, ok := defaultValueFuncMap[requiredProperty]; ok {
				allProperties[requiredProperty] = defaultValueFuncMap[requiredProperty]()
				defaultValueApplied = true
			}
		}
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	if defaultValueApplied {
		data, err = json.Marshal(allProperties)
		if err != nil {
			return err
		}
	}
	type FirmwareUpgradeStatusWithoutEmbeddedStruct struct {
		// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.
		ClassId string `json:"ClassId"`
		// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
		ObjectType string `json:"ObjectType"`
		// The message from the endpoint during the download.
		DownloadMessage *string `json:"DownloadMessage,omitempty"`
		// The percentage of the image downloaded in the endpoint.
		DownloadPercentage *int64 `json:"DownloadPercentage,omitempty"`
		// The image download stages. Example:downloading, flashing.
		DownloadStage *string `json:"DownloadStage,omitempty"`
		// The server power status after the upgrade request is submitted in the endpoint. * `none` - Server power status is none. * `powered on` - Server power status is powered on. * `powered off` - Server power status is powered off.
		EpPowerStatus *string `json:"EpPowerStatus,omitempty"`
		// The server power status before the upgrade request is submitted in the endpoint. * `none` - Server power status is none. * `powered on` - Server power status is powered on. * `powered off` - Server power status is powered off.
		InitialPowerStatus *string `json:"InitialPowerStatus,omitempty"`
		// A boolean flag which indicates that the generated pre-signed url is not a CDN URL when set to true.
		IsCdnDisabled *bool `json:"IsCdnDisabled,omitempty"`
		// The reason for the operation failure.
		OverallError *string `json:"OverallError,omitempty"`
		// The overall percentage of the operation.
		OverallPercentage *int64 `json:"OverallPercentage,omitempty"`
		// The overall status of the operation. * `none` - Upgrade stage is no upgrade stage. * `started` - Upgrade stage is started. * `prepare initiating` - Upgrade configuration is being prepared. * `prepare initiated` - Upgrade configuration is initiated. * `prepared` - Upgrade configuration is prepared. * `download initiating` - Upgrade stage is download initiating. * `download initiated` - Upgrade stage is download initiated. * `downloading` - Upgrade stage is downloading. * `downloaded` - Upgrade stage is downloaded. * `upgrade initiating on fabric A` - Upgrade stage is in upgrade initiating when upgrade is being started in endopint. * `upgrade initiated on fabric A` - Upgrade stage is in upgrade initiated when the upgrade has started in endpoint. * `upgrading fabric A` - Upgrade stage is in upgrading when the upgrade requires reboot to complete. * `rebooting fabric A` - Upgrade is in rebooting when the endpoint is being rebooted. * `upgraded fabric A` - Upgrade stage is in upgraded when the corresponding endpoint has completed. * `upgrade initiating on fabric B` - Upgrade stage is in upgrade initiating when upgrade is being started in endopint. * `upgrade initiated on fabric B` - Upgrade stage is in upgrade initiated when upgrade has started in endpoint. * `upgrading fabric B` - Upgrade stage is in upgrading when the upgrade requires reboot to complete. * `rebooting fabric B` - Upgrade is in rebooting when the endpoint is being rebooted. * `upgraded fabric B` - Upgrade stage is in upgraded when the corresponding endpoint has completed. * `upgrade initiating` - Upgrade stage is upgrade initiating. * `upgrade initiated` - Upgrade stage is upgrade initiated. * `upgrading` - Upgrade stage is upgrading. * `oob images staging` - Out-of-band component images staging. * `oob images staged` - Out-of-band component images staged. * `rebooting` - Upgrade is rebooting the endpoint. * `upgraded` - Upgrade stage is upgraded. * `success` - Upgrade stage is success. * `failed` - Upgrade stage is upgrade failed. * `terminated` - Upgrade stage is terminated. * `pending` - Upgrade stage is pending. * `ReadyForCache` - The image is ready to be cached into the Intersight Appliance. * `Caching` - The image will be cached into Intersight Appliance or an endpoint cache. * `Cached` - The image has been cached into the Intersight Appliance or endpoint cache. * `CachingFailed` - The image caching into the Intersight Appliance failed or endpoint cache.
		Overallstatus *string `json:"Overallstatus,omitempty"`
		// Pending reason for the upgrade waiting. * `none` - Upgrade pending reason is none. * `pending for next reboot` - Upgrade pending reason is pending for next reboot.
		PendingType *string `json:"PendingType,omitempty"`
		// The error message from the endpoint during the SD card download.
		SdCardDownloadError *string `json:"SdCardDownloadError,omitempty"`
		// CIMC firmware version of the server prior to the upgrade.
		SourceFirmwareVersion *string `json:"SourceFirmwareVersion,omitempty"`
		// CIMC firmware version of the server post the upgrade.
		TargetFirmwareVersion *string                                  `json:"TargetFirmwareVersion,omitempty"`
		Upgrade               NullableFirmwareUpgradeBaseRelationship  `json:"Upgrade,omitempty"`
		Workflow              NullableWorkflowWorkflowInfoRelationship `json:"Workflow,omitempty"`
	}

	varFirmwareUpgradeStatusWithoutEmbeddedStruct := FirmwareUpgradeStatusWithoutEmbeddedStruct{}

	err = json.Unmarshal(data, &varFirmwareUpgradeStatusWithoutEmbeddedStruct)
	if err == nil {
		varFirmwareUpgradeStatus := _FirmwareUpgradeStatus{}
		varFirmwareUpgradeStatus.ClassId = varFirmwareUpgradeStatusWithoutEmbeddedStruct.ClassId
		varFirmwareUpgradeStatus.ObjectType = varFirmwareUpgradeStatusWithoutEmbeddedStruct.ObjectType
		varFirmwareUpgradeStatus.DownloadMessage = varFirmwareUpgradeStatusWithoutEmbeddedStruct.DownloadMessage
		varFirmwareUpgradeStatus.DownloadPercentage = varFirmwareUpgradeStatusWithoutEmbeddedStruct.DownloadPercentage
		varFirmwareUpgradeStatus.DownloadStage = varFirmwareUpgradeStatusWithoutEmbeddedStruct.DownloadStage
		varFirmwareUpgradeStatus.EpPowerStatus = varFirmwareUpgradeStatusWithoutEmbeddedStruct.EpPowerStatus
		varFirmwareUpgradeStatus.InitialPowerStatus = varFirmwareUpgradeStatusWithoutEmbeddedStruct.InitialPowerStatus
		varFirmwareUpgradeStatus.IsCdnDisabled = varFirmwareUpgradeStatusWithoutEmbeddedStruct.IsCdnDisabled
		varFirmwareUpgradeStatus.OverallError = varFirmwareUpgradeStatusWithoutEmbeddedStruct.OverallError
		varFirmwareUpgradeStatus.OverallPercentage = varFirmwareUpgradeStatusWithoutEmbeddedStruct.OverallPercentage
		varFirmwareUpgradeStatus.Overallstatus = varFirmwareUpgradeStatusWithoutEmbeddedStruct.Overallstatus
		varFirmwareUpgradeStatus.PendingType = varFirmwareUpgradeStatusWithoutEmbeddedStruct.PendingType
		varFirmwareUpgradeStatus.SdCardDownloadError = varFirmwareUpgradeStatusWithoutEmbeddedStruct.SdCardDownloadError
		varFirmwareUpgradeStatus.SourceFirmwareVersion = varFirmwareUpgradeStatusWithoutEmbeddedStruct.SourceFirmwareVersion
		varFirmwareUpgradeStatus.TargetFirmwareVersion = varFirmwareUpgradeStatusWithoutEmbeddedStruct.TargetFirmwareVersion
		varFirmwareUpgradeStatus.Upgrade = varFirmwareUpgradeStatusWithoutEmbeddedStruct.Upgrade
		varFirmwareUpgradeStatus.Workflow = varFirmwareUpgradeStatusWithoutEmbeddedStruct.Workflow
		*o = FirmwareUpgradeStatus(varFirmwareUpgradeStatus)
	} else {
		return err
	}

	varFirmwareUpgradeStatus := _FirmwareUpgradeStatus{}

	err = json.Unmarshal(data, &varFirmwareUpgradeStatus)
	if err == nil {
		o.ConnectorDownloadStatus = varFirmwareUpgradeStatus.ConnectorDownloadStatus
	} else {
		return err
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "ClassId")
		delete(additionalProperties, "ObjectType")
		delete(additionalProperties, "DownloadMessage")
		delete(additionalProperties, "DownloadPercentage")
		delete(additionalProperties, "DownloadStage")
		delete(additionalProperties, "EpPowerStatus")
		delete(additionalProperties, "InitialPowerStatus")
		delete(additionalProperties, "IsCdnDisabled")
		delete(additionalProperties, "OverallError")
		delete(additionalProperties, "OverallPercentage")
		delete(additionalProperties, "Overallstatus")
		delete(additionalProperties, "PendingType")
		delete(additionalProperties, "SdCardDownloadError")
		delete(additionalProperties, "SourceFirmwareVersion")
		delete(additionalProperties, "TargetFirmwareVersion")
		delete(additionalProperties, "Upgrade")
		delete(additionalProperties, "Workflow")

		// remove fields from embedded structs
		reflectConnectorDownloadStatus := reflect.ValueOf(o.ConnectorDownloadStatus)
		for i := 0; i < reflectConnectorDownloadStatus.Type().NumField(); i++ {
			t := reflectConnectorDownloadStatus.Type().Field(i)

			if jsonTag := t.Tag.Get("json"); jsonTag != "" {
				fieldName := ""
				if commaIdx := strings.Index(jsonTag, ","); commaIdx > 0 {
					fieldName = jsonTag[:commaIdx]
				} else {
					fieldName = jsonTag
				}
				if fieldName != "AdditionalProperties" {
					delete(additionalProperties, fieldName)
				}
			}
		}

		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableFirmwareUpgradeStatus struct {
	value *FirmwareUpgradeStatus
	isSet bool
}

func (v NullableFirmwareUpgradeStatus) Get() *FirmwareUpgradeStatus {
	return v.value
}

func (v *NullableFirmwareUpgradeStatus) Set(val *FirmwareUpgradeStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableFirmwareUpgradeStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableFirmwareUpgradeStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFirmwareUpgradeStatus(val *FirmwareUpgradeStatus) *NullableFirmwareUpgradeStatus {
	return &NullableFirmwareUpgradeStatus{value: val, isSet: true}
}

func (v NullableFirmwareUpgradeStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFirmwareUpgradeStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
