/*
Cisco Intersight

Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations. The Intersight OpenAPI document defines the complete set of properties that are returned in the HTTP response. From that perspective, a client can expect that no additional properties are returned, unless these properties are explicitly defined in the OpenAPI document. However, when a client uses an older version of the Intersight OpenAPI document, the server may send additional properties because the software is more recent than the client. In that case, the client may receive properties that it does not know about. Some generated SDKs perform a strict validation of the HTTP response body against the OpenAPI document.

API version: 1.0.11-18775
Contact: intersight@cisco.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package intersight

import (
	"encoding/json"
	"fmt"
)

// checks if the TelemetryDruidBoundFilter type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TelemetryDruidBoundFilter{}

// TelemetryDruidBoundFilter Bound filters can be used to filter on ranges of dimension values. It can be used for comparison filtering like greater than, less than, greater than or equal to, less than or equal to, and \"between\" (if both \"lower\" and \"upper\" are set). When the bound filter matches against numeric inputs, the string lower and upper bound values are best-effort coerced into a numeric value when using the \"numeric\" mode of ordering. The bound filter can only match against STRING (single and multi-valued), LONG, FLOAT, DOUBLE types. Use the newer range to match against ARRAY or COMPLEX types. Note that the bound filter matches null values if you don't specify a lower bound.
type TelemetryDruidBoundFilter struct {
	Type string `json:"type"`
	// Input column or virtual column name to filter.
	Dimension string `json:"dimension"`
	// The lower bound string match value for the filter.
	Lower *string `json:"lower,omitempty"`
	// The upper bound string match value for the filter.
	Upper *string `json:"upper,omitempty"`
	// Boolean indicating whether to perform strict comparison on the lower bound (\">\" instead of \">=\").
	LowerStrict *bool `json:"lowerStrict,omitempty"`
	// Boolean indicating whether to perform strict comparison on the upper bound (\"<\" instead of \"<=\").
	UpperStrict *bool `json:"upperStrict,omitempty"`
	// String that specifies the sorting order to use when comparing values against the bound. lexicographic - Sorts values by converting Strings to their UTF-8 byte array representations and comparing lexicographically, byte-by-byte. alphanumeric - Suitable for strings with both numeric and non-numeric content, e.g., \"file12 sorts after file2\" This ordering is not suitable for numbers with decimal points or negative numbers. For example, \"1.3\" precedes \"1.15\" in this ordering because \"15\" has more significant digits than \"3\". Negative numbers are sorted after positive numbers (because numeric characters precede the \"-\" in the negative numbers). numeric - Sorts values as numbers, supports integers and floating point values. Negative values are supported. This sorting order will try to parse all string values as numbers. Unparseable values are treated as nulls, and nulls precede numbers. When comparing two unparseable values (e.g., \"hello\" and \"world\"), this ordering will sort by comparing the unparsed strings lexicographically. strlen - Sorts values by their string lengths. When there is a tie, this comparator falls back to using the String compareTo method. version - Sorts values as versions, e.g., \"10.0 sorts after 9.0\", \"1.0.0-SNAPSHOT sorts after 1.0.0\".
	Ordering             *string                           `json:"ordering,omitempty"`
	ExtractionFn         *TelemetryDruidExtractionFunction `json:"extractionFn,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _TelemetryDruidBoundFilter TelemetryDruidBoundFilter

// NewTelemetryDruidBoundFilter instantiates a new TelemetryDruidBoundFilter object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTelemetryDruidBoundFilter(type_ string, dimension string) *TelemetryDruidBoundFilter {
	this := TelemetryDruidBoundFilter{}
	this.Type = type_
	this.Dimension = dimension
	return &this
}

// NewTelemetryDruidBoundFilterWithDefaults instantiates a new TelemetryDruidBoundFilter object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTelemetryDruidBoundFilterWithDefaults() *TelemetryDruidBoundFilter {
	this := TelemetryDruidBoundFilter{}
	return &this
}

// GetType returns the Type field value
func (o *TelemetryDruidBoundFilter) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *TelemetryDruidBoundFilter) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *TelemetryDruidBoundFilter) SetType(v string) {
	o.Type = v
}

// GetDimension returns the Dimension field value
func (o *TelemetryDruidBoundFilter) GetDimension() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Dimension
}

// GetDimensionOk returns a tuple with the Dimension field value
// and a boolean to check if the value has been set.
func (o *TelemetryDruidBoundFilter) GetDimensionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Dimension, true
}

// SetDimension sets field value
func (o *TelemetryDruidBoundFilter) SetDimension(v string) {
	o.Dimension = v
}

// GetLower returns the Lower field value if set, zero value otherwise.
func (o *TelemetryDruidBoundFilter) GetLower() string {
	if o == nil || IsNil(o.Lower) {
		var ret string
		return ret
	}
	return *o.Lower
}

// GetLowerOk returns a tuple with the Lower field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TelemetryDruidBoundFilter) GetLowerOk() (*string, bool) {
	if o == nil || IsNil(o.Lower) {
		return nil, false
	}
	return o.Lower, true
}

// HasLower returns a boolean if a field has been set.
func (o *TelemetryDruidBoundFilter) HasLower() bool {
	if o != nil && !IsNil(o.Lower) {
		return true
	}

	return false
}

// SetLower gets a reference to the given string and assigns it to the Lower field.
func (o *TelemetryDruidBoundFilter) SetLower(v string) {
	o.Lower = &v
}

// GetUpper returns the Upper field value if set, zero value otherwise.
func (o *TelemetryDruidBoundFilter) GetUpper() string {
	if o == nil || IsNil(o.Upper) {
		var ret string
		return ret
	}
	return *o.Upper
}

// GetUpperOk returns a tuple with the Upper field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TelemetryDruidBoundFilter) GetUpperOk() (*string, bool) {
	if o == nil || IsNil(o.Upper) {
		return nil, false
	}
	return o.Upper, true
}

// HasUpper returns a boolean if a field has been set.
func (o *TelemetryDruidBoundFilter) HasUpper() bool {
	if o != nil && !IsNil(o.Upper) {
		return true
	}

	return false
}

// SetUpper gets a reference to the given string and assigns it to the Upper field.
func (o *TelemetryDruidBoundFilter) SetUpper(v string) {
	o.Upper = &v
}

// GetLowerStrict returns the LowerStrict field value if set, zero value otherwise.
func (o *TelemetryDruidBoundFilter) GetLowerStrict() bool {
	if o == nil || IsNil(o.LowerStrict) {
		var ret bool
		return ret
	}
	return *o.LowerStrict
}

// GetLowerStrictOk returns a tuple with the LowerStrict field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TelemetryDruidBoundFilter) GetLowerStrictOk() (*bool, bool) {
	if o == nil || IsNil(o.LowerStrict) {
		return nil, false
	}
	return o.LowerStrict, true
}

// HasLowerStrict returns a boolean if a field has been set.
func (o *TelemetryDruidBoundFilter) HasLowerStrict() bool {
	if o != nil && !IsNil(o.LowerStrict) {
		return true
	}

	return false
}

// SetLowerStrict gets a reference to the given bool and assigns it to the LowerStrict field.
func (o *TelemetryDruidBoundFilter) SetLowerStrict(v bool) {
	o.LowerStrict = &v
}

// GetUpperStrict returns the UpperStrict field value if set, zero value otherwise.
func (o *TelemetryDruidBoundFilter) GetUpperStrict() bool {
	if o == nil || IsNil(o.UpperStrict) {
		var ret bool
		return ret
	}
	return *o.UpperStrict
}

// GetUpperStrictOk returns a tuple with the UpperStrict field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TelemetryDruidBoundFilter) GetUpperStrictOk() (*bool, bool) {
	if o == nil || IsNil(o.UpperStrict) {
		return nil, false
	}
	return o.UpperStrict, true
}

// HasUpperStrict returns a boolean if a field has been set.
func (o *TelemetryDruidBoundFilter) HasUpperStrict() bool {
	if o != nil && !IsNil(o.UpperStrict) {
		return true
	}

	return false
}

// SetUpperStrict gets a reference to the given bool and assigns it to the UpperStrict field.
func (o *TelemetryDruidBoundFilter) SetUpperStrict(v bool) {
	o.UpperStrict = &v
}

// GetOrdering returns the Ordering field value if set, zero value otherwise.
func (o *TelemetryDruidBoundFilter) GetOrdering() string {
	if o == nil || IsNil(o.Ordering) {
		var ret string
		return ret
	}
	return *o.Ordering
}

// GetOrderingOk returns a tuple with the Ordering field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TelemetryDruidBoundFilter) GetOrderingOk() (*string, bool) {
	if o == nil || IsNil(o.Ordering) {
		return nil, false
	}
	return o.Ordering, true
}

// HasOrdering returns a boolean if a field has been set.
func (o *TelemetryDruidBoundFilter) HasOrdering() bool {
	if o != nil && !IsNil(o.Ordering) {
		return true
	}

	return false
}

// SetOrdering gets a reference to the given string and assigns it to the Ordering field.
func (o *TelemetryDruidBoundFilter) SetOrdering(v string) {
	o.Ordering = &v
}

// GetExtractionFn returns the ExtractionFn field value if set, zero value otherwise.
func (o *TelemetryDruidBoundFilter) GetExtractionFn() TelemetryDruidExtractionFunction {
	if o == nil || IsNil(o.ExtractionFn) {
		var ret TelemetryDruidExtractionFunction
		return ret
	}
	return *o.ExtractionFn
}

// GetExtractionFnOk returns a tuple with the ExtractionFn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TelemetryDruidBoundFilter) GetExtractionFnOk() (*TelemetryDruidExtractionFunction, bool) {
	if o == nil || IsNil(o.ExtractionFn) {
		return nil, false
	}
	return o.ExtractionFn, true
}

// HasExtractionFn returns a boolean if a field has been set.
func (o *TelemetryDruidBoundFilter) HasExtractionFn() bool {
	if o != nil && !IsNil(o.ExtractionFn) {
		return true
	}

	return false
}

// SetExtractionFn gets a reference to the given TelemetryDruidExtractionFunction and assigns it to the ExtractionFn field.
func (o *TelemetryDruidBoundFilter) SetExtractionFn(v TelemetryDruidExtractionFunction) {
	o.ExtractionFn = &v
}

func (o TelemetryDruidBoundFilter) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TelemetryDruidBoundFilter) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["type"] = o.Type
	toSerialize["dimension"] = o.Dimension
	if !IsNil(o.Lower) {
		toSerialize["lower"] = o.Lower
	}
	if !IsNil(o.Upper) {
		toSerialize["upper"] = o.Upper
	}
	if !IsNil(o.LowerStrict) {
		toSerialize["lowerStrict"] = o.LowerStrict
	}
	if !IsNil(o.UpperStrict) {
		toSerialize["upperStrict"] = o.UpperStrict
	}
	if !IsNil(o.Ordering) {
		toSerialize["ordering"] = o.Ordering
	}
	if !IsNil(o.ExtractionFn) {
		toSerialize["extractionFn"] = o.ExtractionFn
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *TelemetryDruidBoundFilter) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"type",
		"dimension",
	}

	// defaultValueFuncMap captures the default values for required properties.
	// These values are used when required properties are missing from the payload.
	defaultValueFuncMap := map[string]func() interface{}{}
	var defaultValueApplied bool
	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			if _, ok := defaultValueFuncMap[requiredProperty]; ok {
				allProperties[requiredProperty] = defaultValueFuncMap[requiredProperty]()
				defaultValueApplied = true
			}
		}
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	if defaultValueApplied {
		data, err = json.Marshal(allProperties)
		if err != nil {
			return err
		}
	}
	varTelemetryDruidBoundFilter := _TelemetryDruidBoundFilter{}

	err = json.Unmarshal(data, &varTelemetryDruidBoundFilter)

	if err != nil {
		return err
	}

	*o = TelemetryDruidBoundFilter(varTelemetryDruidBoundFilter)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "type")
		delete(additionalProperties, "dimension")
		delete(additionalProperties, "lower")
		delete(additionalProperties, "upper")
		delete(additionalProperties, "lowerStrict")
		delete(additionalProperties, "upperStrict")
		delete(additionalProperties, "ordering")
		delete(additionalProperties, "extractionFn")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableTelemetryDruidBoundFilter struct {
	value *TelemetryDruidBoundFilter
	isSet bool
}

func (v NullableTelemetryDruidBoundFilter) Get() *TelemetryDruidBoundFilter {
	return v.value
}

func (v *NullableTelemetryDruidBoundFilter) Set(val *TelemetryDruidBoundFilter) {
	v.value = val
	v.isSet = true
}

func (v NullableTelemetryDruidBoundFilter) IsSet() bool {
	return v.isSet
}

func (v *NullableTelemetryDruidBoundFilter) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTelemetryDruidBoundFilter(val *TelemetryDruidBoundFilter) *NullableTelemetryDruidBoundFilter {
	return &NullableTelemetryDruidBoundFilter{value: val, isSet: true}
}

func (v NullableTelemetryDruidBoundFilter) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTelemetryDruidBoundFilter) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
