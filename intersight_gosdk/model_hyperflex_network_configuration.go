/*
Cisco Intersight

Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations. The Intersight OpenAPI document defines the complete set of properties that are returned in the HTTP response. From that perspective, a client can expect that no additional properties are returned, unless these properties are explicitly defined in the OpenAPI document. However, when a client uses an older version of the Intersight OpenAPI document, the server may send additional properties because the software is more recent than the client. In that case, the client may receive properties that it does not know about. Some generated SDKs perform a strict validation of the HTTP response body against the OpenAPI document.

API version: 1.0.11-14828
Contact: intersight@cisco.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package intersight

import (
	"encoding/json"
	"reflect"
	"strings"
)

// HyperflexNetworkConfiguration Network configuration data of the HyperFlex cluster.
type HyperflexNetworkConfiguration struct {
	MoBaseComplexType
	// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.
	ClassId string `json:"ClassId"`
	// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
	ObjectType string `json:"ObjectType"`
	// Cluster data IP of the HyperFlex cluster.
	ClusterDataIp *string `json:"ClusterDataIp,omitempty"`
	// Cluster management IP of the HyperFlex cluster.
	ClusterManagementIp *string `json:"ClusterManagementIp,omitempty"`
	// Default gateway of the data network.
	DataDefaultGateway *string `json:"DataDefaultGateway,omitempty"`
	// Boolean value to indicate if jumboframes is enabled for storage-data network.
	DataJumboFrame *bool `json:"DataJumboFrame,omitempty"`
	// Subnet mask of the data network.
	DataSubNetmask *string `json:"DataSubNetmask,omitempty"`
	// Data VLAN ID. Enter the correct VLAN tags if you are using trunk ports. The VLAN tags must be different when using trunk mode.
	DataVlanId *int64 `json:"DataVlanId,omitempty"`
	// VLAN ID for virtual machine live migration.
	LiveMigrationVlanId *int64 `json:"LiveMigrationVlanId,omitempty"`
	// Default gateway of the management network.
	ManagementDefaultGateway *string `json:"ManagementDefaultGateway,omitempty"`
	// Subnet mask of the management network.
	ManagementSubNetmask *string `json:"ManagementSubNetmask,omitempty"`
	// Management VLAN ID. Enter the correct VLAN tags if you are using trunk ports. The VLAN tags must be different when using trunk mode.
	ManagementVlanId *int64 `json:"ManagementVlanId,omitempty"`
	// VM network VLAN ID. Used for VM data traffic.
	VmNetworkVlanId      *int64 `json:"VmNetworkVlanId,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _HyperflexNetworkConfiguration HyperflexNetworkConfiguration

// NewHyperflexNetworkConfiguration instantiates a new HyperflexNetworkConfiguration object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHyperflexNetworkConfiguration(classId string, objectType string) *HyperflexNetworkConfiguration {
	this := HyperflexNetworkConfiguration{}
	this.ClassId = classId
	this.ObjectType = objectType
	return &this
}

// NewHyperflexNetworkConfigurationWithDefaults instantiates a new HyperflexNetworkConfiguration object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHyperflexNetworkConfigurationWithDefaults() *HyperflexNetworkConfiguration {
	this := HyperflexNetworkConfiguration{}
	var classId string = "hyperflex.NetworkConfiguration"
	this.ClassId = classId
	var objectType string = "hyperflex.NetworkConfiguration"
	this.ObjectType = objectType
	return &this
}

// GetClassId returns the ClassId field value
func (o *HyperflexNetworkConfiguration) GetClassId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ClassId
}

// GetClassIdOk returns a tuple with the ClassId field value
// and a boolean to check if the value has been set.
func (o *HyperflexNetworkConfiguration) GetClassIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ClassId, true
}

// SetClassId sets field value
func (o *HyperflexNetworkConfiguration) SetClassId(v string) {
	o.ClassId = v
}

// GetObjectType returns the ObjectType field value
func (o *HyperflexNetworkConfiguration) GetObjectType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ObjectType
}

// GetObjectTypeOk returns a tuple with the ObjectType field value
// and a boolean to check if the value has been set.
func (o *HyperflexNetworkConfiguration) GetObjectTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ObjectType, true
}

// SetObjectType sets field value
func (o *HyperflexNetworkConfiguration) SetObjectType(v string) {
	o.ObjectType = v
}

// GetClusterDataIp returns the ClusterDataIp field value if set, zero value otherwise.
func (o *HyperflexNetworkConfiguration) GetClusterDataIp() string {
	if o == nil || o.ClusterDataIp == nil {
		var ret string
		return ret
	}
	return *o.ClusterDataIp
}

// GetClusterDataIpOk returns a tuple with the ClusterDataIp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HyperflexNetworkConfiguration) GetClusterDataIpOk() (*string, bool) {
	if o == nil || o.ClusterDataIp == nil {
		return nil, false
	}
	return o.ClusterDataIp, true
}

// HasClusterDataIp returns a boolean if a field has been set.
func (o *HyperflexNetworkConfiguration) HasClusterDataIp() bool {
	if o != nil && o.ClusterDataIp != nil {
		return true
	}

	return false
}

// SetClusterDataIp gets a reference to the given string and assigns it to the ClusterDataIp field.
func (o *HyperflexNetworkConfiguration) SetClusterDataIp(v string) {
	o.ClusterDataIp = &v
}

// GetClusterManagementIp returns the ClusterManagementIp field value if set, zero value otherwise.
func (o *HyperflexNetworkConfiguration) GetClusterManagementIp() string {
	if o == nil || o.ClusterManagementIp == nil {
		var ret string
		return ret
	}
	return *o.ClusterManagementIp
}

// GetClusterManagementIpOk returns a tuple with the ClusterManagementIp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HyperflexNetworkConfiguration) GetClusterManagementIpOk() (*string, bool) {
	if o == nil || o.ClusterManagementIp == nil {
		return nil, false
	}
	return o.ClusterManagementIp, true
}

// HasClusterManagementIp returns a boolean if a field has been set.
func (o *HyperflexNetworkConfiguration) HasClusterManagementIp() bool {
	if o != nil && o.ClusterManagementIp != nil {
		return true
	}

	return false
}

// SetClusterManagementIp gets a reference to the given string and assigns it to the ClusterManagementIp field.
func (o *HyperflexNetworkConfiguration) SetClusterManagementIp(v string) {
	o.ClusterManagementIp = &v
}

// GetDataDefaultGateway returns the DataDefaultGateway field value if set, zero value otherwise.
func (o *HyperflexNetworkConfiguration) GetDataDefaultGateway() string {
	if o == nil || o.DataDefaultGateway == nil {
		var ret string
		return ret
	}
	return *o.DataDefaultGateway
}

// GetDataDefaultGatewayOk returns a tuple with the DataDefaultGateway field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HyperflexNetworkConfiguration) GetDataDefaultGatewayOk() (*string, bool) {
	if o == nil || o.DataDefaultGateway == nil {
		return nil, false
	}
	return o.DataDefaultGateway, true
}

// HasDataDefaultGateway returns a boolean if a field has been set.
func (o *HyperflexNetworkConfiguration) HasDataDefaultGateway() bool {
	if o != nil && o.DataDefaultGateway != nil {
		return true
	}

	return false
}

// SetDataDefaultGateway gets a reference to the given string and assigns it to the DataDefaultGateway field.
func (o *HyperflexNetworkConfiguration) SetDataDefaultGateway(v string) {
	o.DataDefaultGateway = &v
}

// GetDataJumboFrame returns the DataJumboFrame field value if set, zero value otherwise.
func (o *HyperflexNetworkConfiguration) GetDataJumboFrame() bool {
	if o == nil || o.DataJumboFrame == nil {
		var ret bool
		return ret
	}
	return *o.DataJumboFrame
}

// GetDataJumboFrameOk returns a tuple with the DataJumboFrame field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HyperflexNetworkConfiguration) GetDataJumboFrameOk() (*bool, bool) {
	if o == nil || o.DataJumboFrame == nil {
		return nil, false
	}
	return o.DataJumboFrame, true
}

// HasDataJumboFrame returns a boolean if a field has been set.
func (o *HyperflexNetworkConfiguration) HasDataJumboFrame() bool {
	if o != nil && o.DataJumboFrame != nil {
		return true
	}

	return false
}

// SetDataJumboFrame gets a reference to the given bool and assigns it to the DataJumboFrame field.
func (o *HyperflexNetworkConfiguration) SetDataJumboFrame(v bool) {
	o.DataJumboFrame = &v
}

// GetDataSubNetmask returns the DataSubNetmask field value if set, zero value otherwise.
func (o *HyperflexNetworkConfiguration) GetDataSubNetmask() string {
	if o == nil || o.DataSubNetmask == nil {
		var ret string
		return ret
	}
	return *o.DataSubNetmask
}

// GetDataSubNetmaskOk returns a tuple with the DataSubNetmask field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HyperflexNetworkConfiguration) GetDataSubNetmaskOk() (*string, bool) {
	if o == nil || o.DataSubNetmask == nil {
		return nil, false
	}
	return o.DataSubNetmask, true
}

// HasDataSubNetmask returns a boolean if a field has been set.
func (o *HyperflexNetworkConfiguration) HasDataSubNetmask() bool {
	if o != nil && o.DataSubNetmask != nil {
		return true
	}

	return false
}

// SetDataSubNetmask gets a reference to the given string and assigns it to the DataSubNetmask field.
func (o *HyperflexNetworkConfiguration) SetDataSubNetmask(v string) {
	o.DataSubNetmask = &v
}

// GetDataVlanId returns the DataVlanId field value if set, zero value otherwise.
func (o *HyperflexNetworkConfiguration) GetDataVlanId() int64 {
	if o == nil || o.DataVlanId == nil {
		var ret int64
		return ret
	}
	return *o.DataVlanId
}

// GetDataVlanIdOk returns a tuple with the DataVlanId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HyperflexNetworkConfiguration) GetDataVlanIdOk() (*int64, bool) {
	if o == nil || o.DataVlanId == nil {
		return nil, false
	}
	return o.DataVlanId, true
}

// HasDataVlanId returns a boolean if a field has been set.
func (o *HyperflexNetworkConfiguration) HasDataVlanId() bool {
	if o != nil && o.DataVlanId != nil {
		return true
	}

	return false
}

// SetDataVlanId gets a reference to the given int64 and assigns it to the DataVlanId field.
func (o *HyperflexNetworkConfiguration) SetDataVlanId(v int64) {
	o.DataVlanId = &v
}

// GetLiveMigrationVlanId returns the LiveMigrationVlanId field value if set, zero value otherwise.
func (o *HyperflexNetworkConfiguration) GetLiveMigrationVlanId() int64 {
	if o == nil || o.LiveMigrationVlanId == nil {
		var ret int64
		return ret
	}
	return *o.LiveMigrationVlanId
}

// GetLiveMigrationVlanIdOk returns a tuple with the LiveMigrationVlanId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HyperflexNetworkConfiguration) GetLiveMigrationVlanIdOk() (*int64, bool) {
	if o == nil || o.LiveMigrationVlanId == nil {
		return nil, false
	}
	return o.LiveMigrationVlanId, true
}

// HasLiveMigrationVlanId returns a boolean if a field has been set.
func (o *HyperflexNetworkConfiguration) HasLiveMigrationVlanId() bool {
	if o != nil && o.LiveMigrationVlanId != nil {
		return true
	}

	return false
}

// SetLiveMigrationVlanId gets a reference to the given int64 and assigns it to the LiveMigrationVlanId field.
func (o *HyperflexNetworkConfiguration) SetLiveMigrationVlanId(v int64) {
	o.LiveMigrationVlanId = &v
}

// GetManagementDefaultGateway returns the ManagementDefaultGateway field value if set, zero value otherwise.
func (o *HyperflexNetworkConfiguration) GetManagementDefaultGateway() string {
	if o == nil || o.ManagementDefaultGateway == nil {
		var ret string
		return ret
	}
	return *o.ManagementDefaultGateway
}

// GetManagementDefaultGatewayOk returns a tuple with the ManagementDefaultGateway field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HyperflexNetworkConfiguration) GetManagementDefaultGatewayOk() (*string, bool) {
	if o == nil || o.ManagementDefaultGateway == nil {
		return nil, false
	}
	return o.ManagementDefaultGateway, true
}

// HasManagementDefaultGateway returns a boolean if a field has been set.
func (o *HyperflexNetworkConfiguration) HasManagementDefaultGateway() bool {
	if o != nil && o.ManagementDefaultGateway != nil {
		return true
	}

	return false
}

// SetManagementDefaultGateway gets a reference to the given string and assigns it to the ManagementDefaultGateway field.
func (o *HyperflexNetworkConfiguration) SetManagementDefaultGateway(v string) {
	o.ManagementDefaultGateway = &v
}

// GetManagementSubNetmask returns the ManagementSubNetmask field value if set, zero value otherwise.
func (o *HyperflexNetworkConfiguration) GetManagementSubNetmask() string {
	if o == nil || o.ManagementSubNetmask == nil {
		var ret string
		return ret
	}
	return *o.ManagementSubNetmask
}

// GetManagementSubNetmaskOk returns a tuple with the ManagementSubNetmask field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HyperflexNetworkConfiguration) GetManagementSubNetmaskOk() (*string, bool) {
	if o == nil || o.ManagementSubNetmask == nil {
		return nil, false
	}
	return o.ManagementSubNetmask, true
}

// HasManagementSubNetmask returns a boolean if a field has been set.
func (o *HyperflexNetworkConfiguration) HasManagementSubNetmask() bool {
	if o != nil && o.ManagementSubNetmask != nil {
		return true
	}

	return false
}

// SetManagementSubNetmask gets a reference to the given string and assigns it to the ManagementSubNetmask field.
func (o *HyperflexNetworkConfiguration) SetManagementSubNetmask(v string) {
	o.ManagementSubNetmask = &v
}

// GetManagementVlanId returns the ManagementVlanId field value if set, zero value otherwise.
func (o *HyperflexNetworkConfiguration) GetManagementVlanId() int64 {
	if o == nil || o.ManagementVlanId == nil {
		var ret int64
		return ret
	}
	return *o.ManagementVlanId
}

// GetManagementVlanIdOk returns a tuple with the ManagementVlanId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HyperflexNetworkConfiguration) GetManagementVlanIdOk() (*int64, bool) {
	if o == nil || o.ManagementVlanId == nil {
		return nil, false
	}
	return o.ManagementVlanId, true
}

// HasManagementVlanId returns a boolean if a field has been set.
func (o *HyperflexNetworkConfiguration) HasManagementVlanId() bool {
	if o != nil && o.ManagementVlanId != nil {
		return true
	}

	return false
}

// SetManagementVlanId gets a reference to the given int64 and assigns it to the ManagementVlanId field.
func (o *HyperflexNetworkConfiguration) SetManagementVlanId(v int64) {
	o.ManagementVlanId = &v
}

// GetVmNetworkVlanId returns the VmNetworkVlanId field value if set, zero value otherwise.
func (o *HyperflexNetworkConfiguration) GetVmNetworkVlanId() int64 {
	if o == nil || o.VmNetworkVlanId == nil {
		var ret int64
		return ret
	}
	return *o.VmNetworkVlanId
}

// GetVmNetworkVlanIdOk returns a tuple with the VmNetworkVlanId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HyperflexNetworkConfiguration) GetVmNetworkVlanIdOk() (*int64, bool) {
	if o == nil || o.VmNetworkVlanId == nil {
		return nil, false
	}
	return o.VmNetworkVlanId, true
}

// HasVmNetworkVlanId returns a boolean if a field has been set.
func (o *HyperflexNetworkConfiguration) HasVmNetworkVlanId() bool {
	if o != nil && o.VmNetworkVlanId != nil {
		return true
	}

	return false
}

// SetVmNetworkVlanId gets a reference to the given int64 and assigns it to the VmNetworkVlanId field.
func (o *HyperflexNetworkConfiguration) SetVmNetworkVlanId(v int64) {
	o.VmNetworkVlanId = &v
}

func (o HyperflexNetworkConfiguration) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	serializedMoBaseComplexType, errMoBaseComplexType := json.Marshal(o.MoBaseComplexType)
	if errMoBaseComplexType != nil {
		return []byte{}, errMoBaseComplexType
	}
	errMoBaseComplexType = json.Unmarshal([]byte(serializedMoBaseComplexType), &toSerialize)
	if errMoBaseComplexType != nil {
		return []byte{}, errMoBaseComplexType
	}
	if true {
		toSerialize["ClassId"] = o.ClassId
	}
	if true {
		toSerialize["ObjectType"] = o.ObjectType
	}
	if o.ClusterDataIp != nil {
		toSerialize["ClusterDataIp"] = o.ClusterDataIp
	}
	if o.ClusterManagementIp != nil {
		toSerialize["ClusterManagementIp"] = o.ClusterManagementIp
	}
	if o.DataDefaultGateway != nil {
		toSerialize["DataDefaultGateway"] = o.DataDefaultGateway
	}
	if o.DataJumboFrame != nil {
		toSerialize["DataJumboFrame"] = o.DataJumboFrame
	}
	if o.DataSubNetmask != nil {
		toSerialize["DataSubNetmask"] = o.DataSubNetmask
	}
	if o.DataVlanId != nil {
		toSerialize["DataVlanId"] = o.DataVlanId
	}
	if o.LiveMigrationVlanId != nil {
		toSerialize["LiveMigrationVlanId"] = o.LiveMigrationVlanId
	}
	if o.ManagementDefaultGateway != nil {
		toSerialize["ManagementDefaultGateway"] = o.ManagementDefaultGateway
	}
	if o.ManagementSubNetmask != nil {
		toSerialize["ManagementSubNetmask"] = o.ManagementSubNetmask
	}
	if o.ManagementVlanId != nil {
		toSerialize["ManagementVlanId"] = o.ManagementVlanId
	}
	if o.VmNetworkVlanId != nil {
		toSerialize["VmNetworkVlanId"] = o.VmNetworkVlanId
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *HyperflexNetworkConfiguration) UnmarshalJSON(bytes []byte) (err error) {
	type HyperflexNetworkConfigurationWithoutEmbeddedStruct struct {
		// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.
		ClassId string `json:"ClassId"`
		// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
		ObjectType string `json:"ObjectType"`
		// Cluster data IP of the HyperFlex cluster.
		ClusterDataIp *string `json:"ClusterDataIp,omitempty"`
		// Cluster management IP of the HyperFlex cluster.
		ClusterManagementIp *string `json:"ClusterManagementIp,omitempty"`
		// Default gateway of the data network.
		DataDefaultGateway *string `json:"DataDefaultGateway,omitempty"`
		// Boolean value to indicate if jumboframes is enabled for storage-data network.
		DataJumboFrame *bool `json:"DataJumboFrame,omitempty"`
		// Subnet mask of the data network.
		DataSubNetmask *string `json:"DataSubNetmask,omitempty"`
		// Data VLAN ID. Enter the correct VLAN tags if you are using trunk ports. The VLAN tags must be different when using trunk mode.
		DataVlanId *int64 `json:"DataVlanId,omitempty"`
		// VLAN ID for virtual machine live migration.
		LiveMigrationVlanId *int64 `json:"LiveMigrationVlanId,omitempty"`
		// Default gateway of the management network.
		ManagementDefaultGateway *string `json:"ManagementDefaultGateway,omitempty"`
		// Subnet mask of the management network.
		ManagementSubNetmask *string `json:"ManagementSubNetmask,omitempty"`
		// Management VLAN ID. Enter the correct VLAN tags if you are using trunk ports. The VLAN tags must be different when using trunk mode.
		ManagementVlanId *int64 `json:"ManagementVlanId,omitempty"`
		// VM network VLAN ID. Used for VM data traffic.
		VmNetworkVlanId *int64 `json:"VmNetworkVlanId,omitempty"`
	}

	varHyperflexNetworkConfigurationWithoutEmbeddedStruct := HyperflexNetworkConfigurationWithoutEmbeddedStruct{}

	err = json.Unmarshal(bytes, &varHyperflexNetworkConfigurationWithoutEmbeddedStruct)
	if err == nil {
		varHyperflexNetworkConfiguration := _HyperflexNetworkConfiguration{}
		varHyperflexNetworkConfiguration.ClassId = varHyperflexNetworkConfigurationWithoutEmbeddedStruct.ClassId
		varHyperflexNetworkConfiguration.ObjectType = varHyperflexNetworkConfigurationWithoutEmbeddedStruct.ObjectType
		varHyperflexNetworkConfiguration.ClusterDataIp = varHyperflexNetworkConfigurationWithoutEmbeddedStruct.ClusterDataIp
		varHyperflexNetworkConfiguration.ClusterManagementIp = varHyperflexNetworkConfigurationWithoutEmbeddedStruct.ClusterManagementIp
		varHyperflexNetworkConfiguration.DataDefaultGateway = varHyperflexNetworkConfigurationWithoutEmbeddedStruct.DataDefaultGateway
		varHyperflexNetworkConfiguration.DataJumboFrame = varHyperflexNetworkConfigurationWithoutEmbeddedStruct.DataJumboFrame
		varHyperflexNetworkConfiguration.DataSubNetmask = varHyperflexNetworkConfigurationWithoutEmbeddedStruct.DataSubNetmask
		varHyperflexNetworkConfiguration.DataVlanId = varHyperflexNetworkConfigurationWithoutEmbeddedStruct.DataVlanId
		varHyperflexNetworkConfiguration.LiveMigrationVlanId = varHyperflexNetworkConfigurationWithoutEmbeddedStruct.LiveMigrationVlanId
		varHyperflexNetworkConfiguration.ManagementDefaultGateway = varHyperflexNetworkConfigurationWithoutEmbeddedStruct.ManagementDefaultGateway
		varHyperflexNetworkConfiguration.ManagementSubNetmask = varHyperflexNetworkConfigurationWithoutEmbeddedStruct.ManagementSubNetmask
		varHyperflexNetworkConfiguration.ManagementVlanId = varHyperflexNetworkConfigurationWithoutEmbeddedStruct.ManagementVlanId
		varHyperflexNetworkConfiguration.VmNetworkVlanId = varHyperflexNetworkConfigurationWithoutEmbeddedStruct.VmNetworkVlanId
		*o = HyperflexNetworkConfiguration(varHyperflexNetworkConfiguration)
	} else {
		return err
	}

	varHyperflexNetworkConfiguration := _HyperflexNetworkConfiguration{}

	err = json.Unmarshal(bytes, &varHyperflexNetworkConfiguration)
	if err == nil {
		o.MoBaseComplexType = varHyperflexNetworkConfiguration.MoBaseComplexType
	} else {
		return err
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "ClassId")
		delete(additionalProperties, "ObjectType")
		delete(additionalProperties, "ClusterDataIp")
		delete(additionalProperties, "ClusterManagementIp")
		delete(additionalProperties, "DataDefaultGateway")
		delete(additionalProperties, "DataJumboFrame")
		delete(additionalProperties, "DataSubNetmask")
		delete(additionalProperties, "DataVlanId")
		delete(additionalProperties, "LiveMigrationVlanId")
		delete(additionalProperties, "ManagementDefaultGateway")
		delete(additionalProperties, "ManagementSubNetmask")
		delete(additionalProperties, "ManagementVlanId")
		delete(additionalProperties, "VmNetworkVlanId")

		// remove fields from embedded structs
		reflectMoBaseComplexType := reflect.ValueOf(o.MoBaseComplexType)
		for i := 0; i < reflectMoBaseComplexType.Type().NumField(); i++ {
			t := reflectMoBaseComplexType.Type().Field(i)

			if jsonTag := t.Tag.Get("json"); jsonTag != "" {
				fieldName := ""
				if commaIdx := strings.Index(jsonTag, ","); commaIdx > 0 {
					fieldName = jsonTag[:commaIdx]
				} else {
					fieldName = jsonTag
				}
				if fieldName != "AdditionalProperties" {
					delete(additionalProperties, fieldName)
				}
			}
		}

		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableHyperflexNetworkConfiguration struct {
	value *HyperflexNetworkConfiguration
	isSet bool
}

func (v NullableHyperflexNetworkConfiguration) Get() *HyperflexNetworkConfiguration {
	return v.value
}

func (v *NullableHyperflexNetworkConfiguration) Set(val *HyperflexNetworkConfiguration) {
	v.value = val
	v.isSet = true
}

func (v NullableHyperflexNetworkConfiguration) IsSet() bool {
	return v.isSet
}

func (v *NullableHyperflexNetworkConfiguration) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHyperflexNetworkConfiguration(val *HyperflexNetworkConfiguration) *NullableHyperflexNetworkConfiguration {
	return &NullableHyperflexNetworkConfiguration{value: val, isSet: true}
}

func (v NullableHyperflexNetworkConfiguration) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHyperflexNetworkConfiguration) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
