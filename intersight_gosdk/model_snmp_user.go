/*
Cisco Intersight

Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations. The Intersight OpenAPI document defines the complete set of properties that are returned in the HTTP response. From that perspective, a client can expect that no additional properties are returned, unless these properties are explicitly defined in the OpenAPI document. However, when a client uses an older version of the Intersight OpenAPI document, the server may send additional properties because the software is more recent than the client. In that case, the client may receive properties that it does not know about. Some generated SDKs perform a strict validation of the HTTP response body against the OpenAPI document.

API version: 1.0.11-18775
Contact: intersight@cisco.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package intersight

import (
	"encoding/json"
	"fmt"
	"reflect"
	"strings"
)

// checks if the SnmpUser type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SnmpUser{}

// SnmpUser Complex type for a User based security model, for communication between an agent and manager. Applicable only for SNMPv3.
type SnmpUser struct {
	MoBaseComplexType
	// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.
	ClassId string `json:"ClassId"`
	// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
	ObjectType string `json:"ObjectType"`
	// Authorization password for the user.
	AuthPassword *string `json:"AuthPassword,omitempty"`
	// Authorization protocol for authenticating the user. * `NA` - Authentication protocol is not applicable. * `MD5` - MD5 protocol is used to authenticate SNMP user. * `SHA` - SHA protocol is used to authenticate SNMP user. * `SHA-224` - SHA-224 protocol is used to authenticate SNMP user. * `SHA-256` - SHA-256 protocol is used to authenticate SNMP user. * `SHA-384` - SHA-384 protocol is used to authenticate SNMP user. * `SHA-512` - SHA-512 protocol is used to authenticate SNMP user.
	AuthType *string `json:"AuthType,omitempty"`
	// Indicates whether the value of the 'authPassword' property has been set.
	IsAuthPasswordSet *bool `json:"IsAuthPasswordSet,omitempty"`
	// Indicates whether the value of the 'privacyPassword' property has been set.
	IsPrivacyPasswordSet *bool `json:"IsPrivacyPasswordSet,omitempty"`
	// SNMP username. Must have a minimum of 1 and and a maximum of 31 characters.
	Name *string `json:"Name,omitempty"`
	// Privacy password for the user.
	PrivacyPassword *string `json:"PrivacyPassword,omitempty"`
	// Privacy protocol for the user. * `NA` - Privacy protocol is not applicable. * `DES` - DES privacy protocol is used for SNMP user. * `AES` - AES privacy protocol is used for SNMP user.
	PrivacyType *string `json:"PrivacyType,omitempty"`
	// Security mechanism used for communication between agent and manager. * `AuthPriv` - The user requires both an authorization password and a privacy password. * `NoAuthNoPriv` - The user does not require an authorization or privacy password. * `AuthNoPriv` - The user requires an authorization password but not a privacy password.
	SecurityLevel        *string `json:"SecurityLevel,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _SnmpUser SnmpUser

// NewSnmpUser instantiates a new SnmpUser object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSnmpUser(classId string, objectType string) *SnmpUser {
	this := SnmpUser{}
	this.ClassId = classId
	this.ObjectType = objectType
	var authType string = "NA"
	this.AuthType = &authType
	var privacyType string = "NA"
	this.PrivacyType = &privacyType
	var securityLevel string = "AuthPriv"
	this.SecurityLevel = &securityLevel
	return &this
}

// NewSnmpUserWithDefaults instantiates a new SnmpUser object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSnmpUserWithDefaults() *SnmpUser {
	this := SnmpUser{}
	var classId string = "snmp.User"
	this.ClassId = classId
	var objectType string = "snmp.User"
	this.ObjectType = objectType
	var authType string = "NA"
	this.AuthType = &authType
	var privacyType string = "NA"
	this.PrivacyType = &privacyType
	var securityLevel string = "AuthPriv"
	this.SecurityLevel = &securityLevel
	return &this
}

// GetClassId returns the ClassId field value
func (o *SnmpUser) GetClassId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ClassId
}

// GetClassIdOk returns a tuple with the ClassId field value
// and a boolean to check if the value has been set.
func (o *SnmpUser) GetClassIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ClassId, true
}

// SetClassId sets field value
func (o *SnmpUser) SetClassId(v string) {
	o.ClassId = v
}

// GetDefaultClassId returns the default value "snmp.User" of the ClassId field.
func (o *SnmpUser) GetDefaultClassId() interface{} {
	return "snmp.User"
}

// GetObjectType returns the ObjectType field value
func (o *SnmpUser) GetObjectType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ObjectType
}

// GetObjectTypeOk returns a tuple with the ObjectType field value
// and a boolean to check if the value has been set.
func (o *SnmpUser) GetObjectTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ObjectType, true
}

// SetObjectType sets field value
func (o *SnmpUser) SetObjectType(v string) {
	o.ObjectType = v
}

// GetDefaultObjectType returns the default value "snmp.User" of the ObjectType field.
func (o *SnmpUser) GetDefaultObjectType() interface{} {
	return "snmp.User"
}

// GetAuthPassword returns the AuthPassword field value if set, zero value otherwise.
func (o *SnmpUser) GetAuthPassword() string {
	if o == nil || IsNil(o.AuthPassword) {
		var ret string
		return ret
	}
	return *o.AuthPassword
}

// GetAuthPasswordOk returns a tuple with the AuthPassword field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SnmpUser) GetAuthPasswordOk() (*string, bool) {
	if o == nil || IsNil(o.AuthPassword) {
		return nil, false
	}
	return o.AuthPassword, true
}

// HasAuthPassword returns a boolean if a field has been set.
func (o *SnmpUser) HasAuthPassword() bool {
	if o != nil && !IsNil(o.AuthPassword) {
		return true
	}

	return false
}

// SetAuthPassword gets a reference to the given string and assigns it to the AuthPassword field.
func (o *SnmpUser) SetAuthPassword(v string) {
	o.AuthPassword = &v
}

// GetAuthType returns the AuthType field value if set, zero value otherwise.
func (o *SnmpUser) GetAuthType() string {
	if o == nil || IsNil(o.AuthType) {
		var ret string
		return ret
	}
	return *o.AuthType
}

// GetAuthTypeOk returns a tuple with the AuthType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SnmpUser) GetAuthTypeOk() (*string, bool) {
	if o == nil || IsNil(o.AuthType) {
		return nil, false
	}
	return o.AuthType, true
}

// HasAuthType returns a boolean if a field has been set.
func (o *SnmpUser) HasAuthType() bool {
	if o != nil && !IsNil(o.AuthType) {
		return true
	}

	return false
}

// SetAuthType gets a reference to the given string and assigns it to the AuthType field.
func (o *SnmpUser) SetAuthType(v string) {
	o.AuthType = &v
}

// GetIsAuthPasswordSet returns the IsAuthPasswordSet field value if set, zero value otherwise.
func (o *SnmpUser) GetIsAuthPasswordSet() bool {
	if o == nil || IsNil(o.IsAuthPasswordSet) {
		var ret bool
		return ret
	}
	return *o.IsAuthPasswordSet
}

// GetIsAuthPasswordSetOk returns a tuple with the IsAuthPasswordSet field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SnmpUser) GetIsAuthPasswordSetOk() (*bool, bool) {
	if o == nil || IsNil(o.IsAuthPasswordSet) {
		return nil, false
	}
	return o.IsAuthPasswordSet, true
}

// HasIsAuthPasswordSet returns a boolean if a field has been set.
func (o *SnmpUser) HasIsAuthPasswordSet() bool {
	if o != nil && !IsNil(o.IsAuthPasswordSet) {
		return true
	}

	return false
}

// SetIsAuthPasswordSet gets a reference to the given bool and assigns it to the IsAuthPasswordSet field.
func (o *SnmpUser) SetIsAuthPasswordSet(v bool) {
	o.IsAuthPasswordSet = &v
}

// GetIsPrivacyPasswordSet returns the IsPrivacyPasswordSet field value if set, zero value otherwise.
func (o *SnmpUser) GetIsPrivacyPasswordSet() bool {
	if o == nil || IsNil(o.IsPrivacyPasswordSet) {
		var ret bool
		return ret
	}
	return *o.IsPrivacyPasswordSet
}

// GetIsPrivacyPasswordSetOk returns a tuple with the IsPrivacyPasswordSet field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SnmpUser) GetIsPrivacyPasswordSetOk() (*bool, bool) {
	if o == nil || IsNil(o.IsPrivacyPasswordSet) {
		return nil, false
	}
	return o.IsPrivacyPasswordSet, true
}

// HasIsPrivacyPasswordSet returns a boolean if a field has been set.
func (o *SnmpUser) HasIsPrivacyPasswordSet() bool {
	if o != nil && !IsNil(o.IsPrivacyPasswordSet) {
		return true
	}

	return false
}

// SetIsPrivacyPasswordSet gets a reference to the given bool and assigns it to the IsPrivacyPasswordSet field.
func (o *SnmpUser) SetIsPrivacyPasswordSet(v bool) {
	o.IsPrivacyPasswordSet = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *SnmpUser) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SnmpUser) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *SnmpUser) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *SnmpUser) SetName(v string) {
	o.Name = &v
}

// GetPrivacyPassword returns the PrivacyPassword field value if set, zero value otherwise.
func (o *SnmpUser) GetPrivacyPassword() string {
	if o == nil || IsNil(o.PrivacyPassword) {
		var ret string
		return ret
	}
	return *o.PrivacyPassword
}

// GetPrivacyPasswordOk returns a tuple with the PrivacyPassword field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SnmpUser) GetPrivacyPasswordOk() (*string, bool) {
	if o == nil || IsNil(o.PrivacyPassword) {
		return nil, false
	}
	return o.PrivacyPassword, true
}

// HasPrivacyPassword returns a boolean if a field has been set.
func (o *SnmpUser) HasPrivacyPassword() bool {
	if o != nil && !IsNil(o.PrivacyPassword) {
		return true
	}

	return false
}

// SetPrivacyPassword gets a reference to the given string and assigns it to the PrivacyPassword field.
func (o *SnmpUser) SetPrivacyPassword(v string) {
	o.PrivacyPassword = &v
}

// GetPrivacyType returns the PrivacyType field value if set, zero value otherwise.
func (o *SnmpUser) GetPrivacyType() string {
	if o == nil || IsNil(o.PrivacyType) {
		var ret string
		return ret
	}
	return *o.PrivacyType
}

// GetPrivacyTypeOk returns a tuple with the PrivacyType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SnmpUser) GetPrivacyTypeOk() (*string, bool) {
	if o == nil || IsNil(o.PrivacyType) {
		return nil, false
	}
	return o.PrivacyType, true
}

// HasPrivacyType returns a boolean if a field has been set.
func (o *SnmpUser) HasPrivacyType() bool {
	if o != nil && !IsNil(o.PrivacyType) {
		return true
	}

	return false
}

// SetPrivacyType gets a reference to the given string and assigns it to the PrivacyType field.
func (o *SnmpUser) SetPrivacyType(v string) {
	o.PrivacyType = &v
}

// GetSecurityLevel returns the SecurityLevel field value if set, zero value otherwise.
func (o *SnmpUser) GetSecurityLevel() string {
	if o == nil || IsNil(o.SecurityLevel) {
		var ret string
		return ret
	}
	return *o.SecurityLevel
}

// GetSecurityLevelOk returns a tuple with the SecurityLevel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SnmpUser) GetSecurityLevelOk() (*string, bool) {
	if o == nil || IsNil(o.SecurityLevel) {
		return nil, false
	}
	return o.SecurityLevel, true
}

// HasSecurityLevel returns a boolean if a field has been set.
func (o *SnmpUser) HasSecurityLevel() bool {
	if o != nil && !IsNil(o.SecurityLevel) {
		return true
	}

	return false
}

// SetSecurityLevel gets a reference to the given string and assigns it to the SecurityLevel field.
func (o *SnmpUser) SetSecurityLevel(v string) {
	o.SecurityLevel = &v
}

func (o SnmpUser) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SnmpUser) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	serializedMoBaseComplexType, errMoBaseComplexType := json.Marshal(o.MoBaseComplexType)
	if errMoBaseComplexType != nil {
		return map[string]interface{}{}, errMoBaseComplexType
	}
	errMoBaseComplexType = json.Unmarshal([]byte(serializedMoBaseComplexType), &toSerialize)
	if errMoBaseComplexType != nil {
		return map[string]interface{}{}, errMoBaseComplexType
	}
	if _, exists := toSerialize["ClassId"]; !exists {
		toSerialize["ClassId"] = o.GetDefaultClassId()
	}
	toSerialize["ClassId"] = o.ClassId
	if _, exists := toSerialize["ObjectType"]; !exists {
		toSerialize["ObjectType"] = o.GetDefaultObjectType()
	}
	toSerialize["ObjectType"] = o.ObjectType
	if !IsNil(o.AuthPassword) {
		toSerialize["AuthPassword"] = o.AuthPassword
	}
	if !IsNil(o.AuthType) {
		toSerialize["AuthType"] = o.AuthType
	}
	if !IsNil(o.IsAuthPasswordSet) {
		toSerialize["IsAuthPasswordSet"] = o.IsAuthPasswordSet
	}
	if !IsNil(o.IsPrivacyPasswordSet) {
		toSerialize["IsPrivacyPasswordSet"] = o.IsPrivacyPasswordSet
	}
	if !IsNil(o.Name) {
		toSerialize["Name"] = o.Name
	}
	if !IsNil(o.PrivacyPassword) {
		toSerialize["PrivacyPassword"] = o.PrivacyPassword
	}
	if !IsNil(o.PrivacyType) {
		toSerialize["PrivacyType"] = o.PrivacyType
	}
	if !IsNil(o.SecurityLevel) {
		toSerialize["SecurityLevel"] = o.SecurityLevel
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *SnmpUser) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"ClassId",
		"ObjectType",
	}

	// defaultValueFuncMap captures the default values for required properties.
	// These values are used when required properties are missing from the payload.
	defaultValueFuncMap := map[string]func() interface{}{
		"ClassId":    o.GetDefaultClassId,
		"ObjectType": o.GetDefaultObjectType,
	}
	var defaultValueApplied bool
	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			if _, ok := defaultValueFuncMap[requiredProperty]; ok {
				allProperties[requiredProperty] = defaultValueFuncMap[requiredProperty]()
				defaultValueApplied = true
			}
		}
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	if defaultValueApplied {
		data, err = json.Marshal(allProperties)
		if err != nil {
			return err
		}
	}
	type SnmpUserWithoutEmbeddedStruct struct {
		// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.
		ClassId string `json:"ClassId"`
		// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
		ObjectType string `json:"ObjectType"`
		// Authorization password for the user.
		AuthPassword *string `json:"AuthPassword,omitempty"`
		// Authorization protocol for authenticating the user. * `NA` - Authentication protocol is not applicable. * `MD5` - MD5 protocol is used to authenticate SNMP user. * `SHA` - SHA protocol is used to authenticate SNMP user. * `SHA-224` - SHA-224 protocol is used to authenticate SNMP user. * `SHA-256` - SHA-256 protocol is used to authenticate SNMP user. * `SHA-384` - SHA-384 protocol is used to authenticate SNMP user. * `SHA-512` - SHA-512 protocol is used to authenticate SNMP user.
		AuthType *string `json:"AuthType,omitempty"`
		// Indicates whether the value of the 'authPassword' property has been set.
		IsAuthPasswordSet *bool `json:"IsAuthPasswordSet,omitempty"`
		// Indicates whether the value of the 'privacyPassword' property has been set.
		IsPrivacyPasswordSet *bool `json:"IsPrivacyPasswordSet,omitempty"`
		// SNMP username. Must have a minimum of 1 and and a maximum of 31 characters.
		Name *string `json:"Name,omitempty"`
		// Privacy password for the user.
		PrivacyPassword *string `json:"PrivacyPassword,omitempty"`
		// Privacy protocol for the user. * `NA` - Privacy protocol is not applicable. * `DES` - DES privacy protocol is used for SNMP user. * `AES` - AES privacy protocol is used for SNMP user.
		PrivacyType *string `json:"PrivacyType,omitempty"`
		// Security mechanism used for communication between agent and manager. * `AuthPriv` - The user requires both an authorization password and a privacy password. * `NoAuthNoPriv` - The user does not require an authorization or privacy password. * `AuthNoPriv` - The user requires an authorization password but not a privacy password.
		SecurityLevel *string `json:"SecurityLevel,omitempty"`
	}

	varSnmpUserWithoutEmbeddedStruct := SnmpUserWithoutEmbeddedStruct{}

	err = json.Unmarshal(data, &varSnmpUserWithoutEmbeddedStruct)
	if err == nil {
		varSnmpUser := _SnmpUser{}
		varSnmpUser.ClassId = varSnmpUserWithoutEmbeddedStruct.ClassId
		varSnmpUser.ObjectType = varSnmpUserWithoutEmbeddedStruct.ObjectType
		varSnmpUser.AuthPassword = varSnmpUserWithoutEmbeddedStruct.AuthPassword
		varSnmpUser.AuthType = varSnmpUserWithoutEmbeddedStruct.AuthType
		varSnmpUser.IsAuthPasswordSet = varSnmpUserWithoutEmbeddedStruct.IsAuthPasswordSet
		varSnmpUser.IsPrivacyPasswordSet = varSnmpUserWithoutEmbeddedStruct.IsPrivacyPasswordSet
		varSnmpUser.Name = varSnmpUserWithoutEmbeddedStruct.Name
		varSnmpUser.PrivacyPassword = varSnmpUserWithoutEmbeddedStruct.PrivacyPassword
		varSnmpUser.PrivacyType = varSnmpUserWithoutEmbeddedStruct.PrivacyType
		varSnmpUser.SecurityLevel = varSnmpUserWithoutEmbeddedStruct.SecurityLevel
		*o = SnmpUser(varSnmpUser)
	} else {
		return err
	}

	varSnmpUser := _SnmpUser{}

	err = json.Unmarshal(data, &varSnmpUser)
	if err == nil {
		o.MoBaseComplexType = varSnmpUser.MoBaseComplexType
	} else {
		return err
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "ClassId")
		delete(additionalProperties, "ObjectType")
		delete(additionalProperties, "AuthPassword")
		delete(additionalProperties, "AuthType")
		delete(additionalProperties, "IsAuthPasswordSet")
		delete(additionalProperties, "IsPrivacyPasswordSet")
		delete(additionalProperties, "Name")
		delete(additionalProperties, "PrivacyPassword")
		delete(additionalProperties, "PrivacyType")
		delete(additionalProperties, "SecurityLevel")

		// remove fields from embedded structs
		reflectMoBaseComplexType := reflect.ValueOf(o.MoBaseComplexType)
		for i := 0; i < reflectMoBaseComplexType.Type().NumField(); i++ {
			t := reflectMoBaseComplexType.Type().Field(i)

			if jsonTag := t.Tag.Get("json"); jsonTag != "" {
				fieldName := ""
				if commaIdx := strings.Index(jsonTag, ","); commaIdx > 0 {
					fieldName = jsonTag[:commaIdx]
				} else {
					fieldName = jsonTag
				}
				if fieldName != "AdditionalProperties" {
					delete(additionalProperties, fieldName)
				}
			}
		}

		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableSnmpUser struct {
	value *SnmpUser
	isSet bool
}

func (v NullableSnmpUser) Get() *SnmpUser {
	return v.value
}

func (v *NullableSnmpUser) Set(val *SnmpUser) {
	v.value = val
	v.isSet = true
}

func (v NullableSnmpUser) IsSet() bool {
	return v.isSet
}

func (v *NullableSnmpUser) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSnmpUser(val *SnmpUser) *NullableSnmpUser {
	return &NullableSnmpUser{value: val, isSet: true}
}

func (v NullableSnmpUser) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSnmpUser) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
