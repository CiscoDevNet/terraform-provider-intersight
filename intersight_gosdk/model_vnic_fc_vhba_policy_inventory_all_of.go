/*
Cisco Intersight

Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations. The Intersight OpenAPI document defines the complete set of properties that are returned in the HTTP response. From that perspective, a client can expect that no additional properties are returned, unless these properties are explicitly defined in the OpenAPI document. However, when a client uses an older version of the Intersight OpenAPI document, the server may send additional properties because the software is more recent than the client. In that case, the client may receive properties that it does not know about. Some generated SDKs perform a strict validation of the HTTP response body against the OpenAPI document.

API version: 1.0.9-6207
Contact: intersight@cisco.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package intersight

import (
	"encoding/json"
)

// VnicFcVhbaPolicyInventoryAllOf Definition of the list of properties defined in 'vnic.FcVhbaPolicyInventory', excluding properties defined in parent classes.
type VnicFcVhbaPolicyInventoryAllOf struct {
	// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.
	ClassId string `json:"ClassId"`
	// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
	ObjectType string `json:"ObjectType"`
	// Class of Service to be associated to the traffic on the virtual interface.
	Cos *int64 `json:"Cos,omitempty"`
	// The maximum size of the Fibre Channel frame payload bytes that the virtual interface supports.
	MaxDataFieldSize *int64 `json:"MaxDataFieldSize,omitempty"`
	// Name of the virtual HBA interface.
	Name *string `json:"Name,omitempty"`
	// The priortity matching the System QoS specified in the fabric profile. * `Best Effort` - QoS Priority for Best-effort traffic. * `FC` - QoS Priority for FC traffic. * `Platinum` - QoS Priority for Platinum traffic. * `Gold` - QoS Priority for Gold traffic. * `Silver` - QoS Priority for Silver traffic. * `Bronze` - QoS Priority for Bronze traffic.
	Priority             *string               `json:"Priority,omitempty"`
	TargetMo             *MoBaseMoRelationship `json:"TargetMo,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _VnicFcVhbaPolicyInventoryAllOf VnicFcVhbaPolicyInventoryAllOf

// NewVnicFcVhbaPolicyInventoryAllOf instantiates a new VnicFcVhbaPolicyInventoryAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVnicFcVhbaPolicyInventoryAllOf(classId string, objectType string) *VnicFcVhbaPolicyInventoryAllOf {
	this := VnicFcVhbaPolicyInventoryAllOf{}
	this.ClassId = classId
	this.ObjectType = objectType
	var cos int64 = 3
	this.Cos = &cos
	var maxDataFieldSize int64 = 2112
	this.MaxDataFieldSize = &maxDataFieldSize
	return &this
}

// NewVnicFcVhbaPolicyInventoryAllOfWithDefaults instantiates a new VnicFcVhbaPolicyInventoryAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVnicFcVhbaPolicyInventoryAllOfWithDefaults() *VnicFcVhbaPolicyInventoryAllOf {
	this := VnicFcVhbaPolicyInventoryAllOf{}
	var classId string = "vnic.FcVhbaPolicyInventory"
	this.ClassId = classId
	var objectType string = "vnic.FcVhbaPolicyInventory"
	this.ObjectType = objectType
	var cos int64 = 3
	this.Cos = &cos
	var maxDataFieldSize int64 = 2112
	this.MaxDataFieldSize = &maxDataFieldSize
	return &this
}

// GetClassId returns the ClassId field value
func (o *VnicFcVhbaPolicyInventoryAllOf) GetClassId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ClassId
}

// GetClassIdOk returns a tuple with the ClassId field value
// and a boolean to check if the value has been set.
func (o *VnicFcVhbaPolicyInventoryAllOf) GetClassIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ClassId, true
}

// SetClassId sets field value
func (o *VnicFcVhbaPolicyInventoryAllOf) SetClassId(v string) {
	o.ClassId = v
}

// GetObjectType returns the ObjectType field value
func (o *VnicFcVhbaPolicyInventoryAllOf) GetObjectType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ObjectType
}

// GetObjectTypeOk returns a tuple with the ObjectType field value
// and a boolean to check if the value has been set.
func (o *VnicFcVhbaPolicyInventoryAllOf) GetObjectTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ObjectType, true
}

// SetObjectType sets field value
func (o *VnicFcVhbaPolicyInventoryAllOf) SetObjectType(v string) {
	o.ObjectType = v
}

// GetCos returns the Cos field value if set, zero value otherwise.
func (o *VnicFcVhbaPolicyInventoryAllOf) GetCos() int64 {
	if o == nil || o.Cos == nil {
		var ret int64
		return ret
	}
	return *o.Cos
}

// GetCosOk returns a tuple with the Cos field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VnicFcVhbaPolicyInventoryAllOf) GetCosOk() (*int64, bool) {
	if o == nil || o.Cos == nil {
		return nil, false
	}
	return o.Cos, true
}

// HasCos returns a boolean if a field has been set.
func (o *VnicFcVhbaPolicyInventoryAllOf) HasCos() bool {
	if o != nil && o.Cos != nil {
		return true
	}

	return false
}

// SetCos gets a reference to the given int64 and assigns it to the Cos field.
func (o *VnicFcVhbaPolicyInventoryAllOf) SetCos(v int64) {
	o.Cos = &v
}

// GetMaxDataFieldSize returns the MaxDataFieldSize field value if set, zero value otherwise.
func (o *VnicFcVhbaPolicyInventoryAllOf) GetMaxDataFieldSize() int64 {
	if o == nil || o.MaxDataFieldSize == nil {
		var ret int64
		return ret
	}
	return *o.MaxDataFieldSize
}

// GetMaxDataFieldSizeOk returns a tuple with the MaxDataFieldSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VnicFcVhbaPolicyInventoryAllOf) GetMaxDataFieldSizeOk() (*int64, bool) {
	if o == nil || o.MaxDataFieldSize == nil {
		return nil, false
	}
	return o.MaxDataFieldSize, true
}

// HasMaxDataFieldSize returns a boolean if a field has been set.
func (o *VnicFcVhbaPolicyInventoryAllOf) HasMaxDataFieldSize() bool {
	if o != nil && o.MaxDataFieldSize != nil {
		return true
	}

	return false
}

// SetMaxDataFieldSize gets a reference to the given int64 and assigns it to the MaxDataFieldSize field.
func (o *VnicFcVhbaPolicyInventoryAllOf) SetMaxDataFieldSize(v int64) {
	o.MaxDataFieldSize = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *VnicFcVhbaPolicyInventoryAllOf) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VnicFcVhbaPolicyInventoryAllOf) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *VnicFcVhbaPolicyInventoryAllOf) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *VnicFcVhbaPolicyInventoryAllOf) SetName(v string) {
	o.Name = &v
}

// GetPriority returns the Priority field value if set, zero value otherwise.
func (o *VnicFcVhbaPolicyInventoryAllOf) GetPriority() string {
	if o == nil || o.Priority == nil {
		var ret string
		return ret
	}
	return *o.Priority
}

// GetPriorityOk returns a tuple with the Priority field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VnicFcVhbaPolicyInventoryAllOf) GetPriorityOk() (*string, bool) {
	if o == nil || o.Priority == nil {
		return nil, false
	}
	return o.Priority, true
}

// HasPriority returns a boolean if a field has been set.
func (o *VnicFcVhbaPolicyInventoryAllOf) HasPriority() bool {
	if o != nil && o.Priority != nil {
		return true
	}

	return false
}

// SetPriority gets a reference to the given string and assigns it to the Priority field.
func (o *VnicFcVhbaPolicyInventoryAllOf) SetPriority(v string) {
	o.Priority = &v
}

// GetTargetMo returns the TargetMo field value if set, zero value otherwise.
func (o *VnicFcVhbaPolicyInventoryAllOf) GetTargetMo() MoBaseMoRelationship {
	if o == nil || o.TargetMo == nil {
		var ret MoBaseMoRelationship
		return ret
	}
	return *o.TargetMo
}

// GetTargetMoOk returns a tuple with the TargetMo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VnicFcVhbaPolicyInventoryAllOf) GetTargetMoOk() (*MoBaseMoRelationship, bool) {
	if o == nil || o.TargetMo == nil {
		return nil, false
	}
	return o.TargetMo, true
}

// HasTargetMo returns a boolean if a field has been set.
func (o *VnicFcVhbaPolicyInventoryAllOf) HasTargetMo() bool {
	if o != nil && o.TargetMo != nil {
		return true
	}

	return false
}

// SetTargetMo gets a reference to the given MoBaseMoRelationship and assigns it to the TargetMo field.
func (o *VnicFcVhbaPolicyInventoryAllOf) SetTargetMo(v MoBaseMoRelationship) {
	o.TargetMo = &v
}

func (o VnicFcVhbaPolicyInventoryAllOf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["ClassId"] = o.ClassId
	}
	if true {
		toSerialize["ObjectType"] = o.ObjectType
	}
	if o.Cos != nil {
		toSerialize["Cos"] = o.Cos
	}
	if o.MaxDataFieldSize != nil {
		toSerialize["MaxDataFieldSize"] = o.MaxDataFieldSize
	}
	if o.Name != nil {
		toSerialize["Name"] = o.Name
	}
	if o.Priority != nil {
		toSerialize["Priority"] = o.Priority
	}
	if o.TargetMo != nil {
		toSerialize["TargetMo"] = o.TargetMo
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *VnicFcVhbaPolicyInventoryAllOf) UnmarshalJSON(bytes []byte) (err error) {
	varVnicFcVhbaPolicyInventoryAllOf := _VnicFcVhbaPolicyInventoryAllOf{}

	if err = json.Unmarshal(bytes, &varVnicFcVhbaPolicyInventoryAllOf); err == nil {
		*o = VnicFcVhbaPolicyInventoryAllOf(varVnicFcVhbaPolicyInventoryAllOf)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "ClassId")
		delete(additionalProperties, "ObjectType")
		delete(additionalProperties, "Cos")
		delete(additionalProperties, "MaxDataFieldSize")
		delete(additionalProperties, "Name")
		delete(additionalProperties, "Priority")
		delete(additionalProperties, "TargetMo")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableVnicFcVhbaPolicyInventoryAllOf struct {
	value *VnicFcVhbaPolicyInventoryAllOf
	isSet bool
}

func (v NullableVnicFcVhbaPolicyInventoryAllOf) Get() *VnicFcVhbaPolicyInventoryAllOf {
	return v.value
}

func (v *NullableVnicFcVhbaPolicyInventoryAllOf) Set(val *VnicFcVhbaPolicyInventoryAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableVnicFcVhbaPolicyInventoryAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableVnicFcVhbaPolicyInventoryAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVnicFcVhbaPolicyInventoryAllOf(val *VnicFcVhbaPolicyInventoryAllOf) *NullableVnicFcVhbaPolicyInventoryAllOf {
	return &NullableVnicFcVhbaPolicyInventoryAllOf{value: val, isSet: true}
}

func (v NullableVnicFcVhbaPolicyInventoryAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVnicFcVhbaPolicyInventoryAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
