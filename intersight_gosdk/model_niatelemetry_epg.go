/*
Cisco Intersight

Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations. The Intersight OpenAPI document defines the complete set of properties that are returned in the HTTP response. From that perspective, a client can expect that no additional properties are returned, unless these properties are explicitly defined in the OpenAPI document. However, when a client uses an older version of the Intersight OpenAPI document, the server may send additional properties because the software is more recent than the client. In that case, the client may receive properties that it does not know about. Some generated SDKs perform a strict validation of the HTTP response body against the OpenAPI document.

API version: 1.0.11-18775
Contact: intersight@cisco.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package intersight

import (
	"encoding/json"
	"fmt"
	"reflect"
	"strings"
)

// checks if the NiatelemetryEpg type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NiatelemetryEpg{}

// NiatelemetryEpg Object is available at End Point Group scope. This currently applies only to the APIC environemt.
type NiatelemetryEpg struct {
	MoBaseMo
	// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.
	ClassId string `json:"ClassId"`
	// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
	ObjectType string `json:"ObjectType"`
	// Azure Pack NAT with ASA feature usage.
	AzurePackCount *int64 `json:"AzurePackCount,omitempty"`
	// Dn value for the End Point Groups present.
	Dn *string `json:"Dn,omitempty"`
	// Number of  objects with delimiter value present in EPG Delimiter attribute.
	EpgDelimiterCount *int64 `json:"EpgDelimiterCount,omitempty"`
	// Number of ports with FC path attribute of type FC.
	FcNpvCount *int64 `json:"FcNpvCount,omitempty"`
	// Number of FCoE per End Point Group.
	FcoeCount *int64 `json:"FcoeCount,omitempty"`
	// Number of FvRsDomAtt objects per End Point Group with VMware configuration.
	FvRsDomAttCount *int64 `json:"FvRsDomAttCount,omitempty"`
	// Intra End Point Group Contract for Distributed Virtual Switch and BM feature usage.
	IntraEpgDvsBmCount *int64 `json:"IntraEpgDvsBmCount,omitempty"`
	// Intra EPG Isolation for Hyper-V, enabled if pcEnfPref attribute is set to enforced.
	IntraEpgHyperv *string `json:"IntraEpgHyperv,omitempty"`
	// Gets the state of End Point Groups with isAttrBasedEPg value as configured.
	IsAttrBased *string `json:"IsAttrBased,omitempty"`
	// Gets the state of End Point Groups where microsegmentation is present.
	Microsegmentation *string `json:"Microsegmentation,omitempty"`
	// Number of FvRsDomAtt objects per End Point Group with Microsoft configuration.
	MicrosoftUsegCount *int64 `json:"MicrosoftUsegCount,omitempty"`
	// Name value for the End Point Groups present.
	Name *string `json:"Name,omitempty"`
	// Number of objects with Simplified Service Graph Integration with Windows Azure Pack.
	OrchslDevVipCfgCount *int64 `json:"OrchslDevVipCfgCount,omitempty"`
	// Type of record DCNM / APIC / SE. This determines the type of platform where inventory was collected.
	RecordType *string `json:"RecordType,omitempty"`
	// Version of record being pushed. This determines what was the API version for data available from the device.
	RecordVersion *string `json:"RecordVersion,omitempty"`
	// The Site name represents an APIC cluster. Service Engine can onboard multiple APIC clusters / sites.
	SiteName *string `json:"SiteName,omitempty"`
	// Logical Operators for attribute based microsegmentation in a hypervisor.
	UsegHypervCount      *int64                                      `json:"UsegHypervCount,omitempty"`
	RegisteredDevice     NullableAssetDeviceRegistrationRelationship `json:"RegisteredDevice,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _NiatelemetryEpg NiatelemetryEpg

// NewNiatelemetryEpg instantiates a new NiatelemetryEpg object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNiatelemetryEpg(classId string, objectType string) *NiatelemetryEpg {
	this := NiatelemetryEpg{}
	this.ClassId = classId
	this.ObjectType = objectType
	return &this
}

// NewNiatelemetryEpgWithDefaults instantiates a new NiatelemetryEpg object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNiatelemetryEpgWithDefaults() *NiatelemetryEpg {
	this := NiatelemetryEpg{}
	var classId string = "niatelemetry.Epg"
	this.ClassId = classId
	var objectType string = "niatelemetry.Epg"
	this.ObjectType = objectType
	return &this
}

// GetClassId returns the ClassId field value
func (o *NiatelemetryEpg) GetClassId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ClassId
}

// GetClassIdOk returns a tuple with the ClassId field value
// and a boolean to check if the value has been set.
func (o *NiatelemetryEpg) GetClassIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ClassId, true
}

// SetClassId sets field value
func (o *NiatelemetryEpg) SetClassId(v string) {
	o.ClassId = v
}

// GetDefaultClassId returns the default value "niatelemetry.Epg" of the ClassId field.
func (o *NiatelemetryEpg) GetDefaultClassId() interface{} {
	return "niatelemetry.Epg"
}

// GetObjectType returns the ObjectType field value
func (o *NiatelemetryEpg) GetObjectType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ObjectType
}

// GetObjectTypeOk returns a tuple with the ObjectType field value
// and a boolean to check if the value has been set.
func (o *NiatelemetryEpg) GetObjectTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ObjectType, true
}

// SetObjectType sets field value
func (o *NiatelemetryEpg) SetObjectType(v string) {
	o.ObjectType = v
}

// GetDefaultObjectType returns the default value "niatelemetry.Epg" of the ObjectType field.
func (o *NiatelemetryEpg) GetDefaultObjectType() interface{} {
	return "niatelemetry.Epg"
}

// GetAzurePackCount returns the AzurePackCount field value if set, zero value otherwise.
func (o *NiatelemetryEpg) GetAzurePackCount() int64 {
	if o == nil || IsNil(o.AzurePackCount) {
		var ret int64
		return ret
	}
	return *o.AzurePackCount
}

// GetAzurePackCountOk returns a tuple with the AzurePackCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NiatelemetryEpg) GetAzurePackCountOk() (*int64, bool) {
	if o == nil || IsNil(o.AzurePackCount) {
		return nil, false
	}
	return o.AzurePackCount, true
}

// HasAzurePackCount returns a boolean if a field has been set.
func (o *NiatelemetryEpg) HasAzurePackCount() bool {
	if o != nil && !IsNil(o.AzurePackCount) {
		return true
	}

	return false
}

// SetAzurePackCount gets a reference to the given int64 and assigns it to the AzurePackCount field.
func (o *NiatelemetryEpg) SetAzurePackCount(v int64) {
	o.AzurePackCount = &v
}

// GetDn returns the Dn field value if set, zero value otherwise.
func (o *NiatelemetryEpg) GetDn() string {
	if o == nil || IsNil(o.Dn) {
		var ret string
		return ret
	}
	return *o.Dn
}

// GetDnOk returns a tuple with the Dn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NiatelemetryEpg) GetDnOk() (*string, bool) {
	if o == nil || IsNil(o.Dn) {
		return nil, false
	}
	return o.Dn, true
}

// HasDn returns a boolean if a field has been set.
func (o *NiatelemetryEpg) HasDn() bool {
	if o != nil && !IsNil(o.Dn) {
		return true
	}

	return false
}

// SetDn gets a reference to the given string and assigns it to the Dn field.
func (o *NiatelemetryEpg) SetDn(v string) {
	o.Dn = &v
}

// GetEpgDelimiterCount returns the EpgDelimiterCount field value if set, zero value otherwise.
func (o *NiatelemetryEpg) GetEpgDelimiterCount() int64 {
	if o == nil || IsNil(o.EpgDelimiterCount) {
		var ret int64
		return ret
	}
	return *o.EpgDelimiterCount
}

// GetEpgDelimiterCountOk returns a tuple with the EpgDelimiterCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NiatelemetryEpg) GetEpgDelimiterCountOk() (*int64, bool) {
	if o == nil || IsNil(o.EpgDelimiterCount) {
		return nil, false
	}
	return o.EpgDelimiterCount, true
}

// HasEpgDelimiterCount returns a boolean if a field has been set.
func (o *NiatelemetryEpg) HasEpgDelimiterCount() bool {
	if o != nil && !IsNil(o.EpgDelimiterCount) {
		return true
	}

	return false
}

// SetEpgDelimiterCount gets a reference to the given int64 and assigns it to the EpgDelimiterCount field.
func (o *NiatelemetryEpg) SetEpgDelimiterCount(v int64) {
	o.EpgDelimiterCount = &v
}

// GetFcNpvCount returns the FcNpvCount field value if set, zero value otherwise.
func (o *NiatelemetryEpg) GetFcNpvCount() int64 {
	if o == nil || IsNil(o.FcNpvCount) {
		var ret int64
		return ret
	}
	return *o.FcNpvCount
}

// GetFcNpvCountOk returns a tuple with the FcNpvCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NiatelemetryEpg) GetFcNpvCountOk() (*int64, bool) {
	if o == nil || IsNil(o.FcNpvCount) {
		return nil, false
	}
	return o.FcNpvCount, true
}

// HasFcNpvCount returns a boolean if a field has been set.
func (o *NiatelemetryEpg) HasFcNpvCount() bool {
	if o != nil && !IsNil(o.FcNpvCount) {
		return true
	}

	return false
}

// SetFcNpvCount gets a reference to the given int64 and assigns it to the FcNpvCount field.
func (o *NiatelemetryEpg) SetFcNpvCount(v int64) {
	o.FcNpvCount = &v
}

// GetFcoeCount returns the FcoeCount field value if set, zero value otherwise.
func (o *NiatelemetryEpg) GetFcoeCount() int64 {
	if o == nil || IsNil(o.FcoeCount) {
		var ret int64
		return ret
	}
	return *o.FcoeCount
}

// GetFcoeCountOk returns a tuple with the FcoeCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NiatelemetryEpg) GetFcoeCountOk() (*int64, bool) {
	if o == nil || IsNil(o.FcoeCount) {
		return nil, false
	}
	return o.FcoeCount, true
}

// HasFcoeCount returns a boolean if a field has been set.
func (o *NiatelemetryEpg) HasFcoeCount() bool {
	if o != nil && !IsNil(o.FcoeCount) {
		return true
	}

	return false
}

// SetFcoeCount gets a reference to the given int64 and assigns it to the FcoeCount field.
func (o *NiatelemetryEpg) SetFcoeCount(v int64) {
	o.FcoeCount = &v
}

// GetFvRsDomAttCount returns the FvRsDomAttCount field value if set, zero value otherwise.
func (o *NiatelemetryEpg) GetFvRsDomAttCount() int64 {
	if o == nil || IsNil(o.FvRsDomAttCount) {
		var ret int64
		return ret
	}
	return *o.FvRsDomAttCount
}

// GetFvRsDomAttCountOk returns a tuple with the FvRsDomAttCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NiatelemetryEpg) GetFvRsDomAttCountOk() (*int64, bool) {
	if o == nil || IsNil(o.FvRsDomAttCount) {
		return nil, false
	}
	return o.FvRsDomAttCount, true
}

// HasFvRsDomAttCount returns a boolean if a field has been set.
func (o *NiatelemetryEpg) HasFvRsDomAttCount() bool {
	if o != nil && !IsNil(o.FvRsDomAttCount) {
		return true
	}

	return false
}

// SetFvRsDomAttCount gets a reference to the given int64 and assigns it to the FvRsDomAttCount field.
func (o *NiatelemetryEpg) SetFvRsDomAttCount(v int64) {
	o.FvRsDomAttCount = &v
}

// GetIntraEpgDvsBmCount returns the IntraEpgDvsBmCount field value if set, zero value otherwise.
func (o *NiatelemetryEpg) GetIntraEpgDvsBmCount() int64 {
	if o == nil || IsNil(o.IntraEpgDvsBmCount) {
		var ret int64
		return ret
	}
	return *o.IntraEpgDvsBmCount
}

// GetIntraEpgDvsBmCountOk returns a tuple with the IntraEpgDvsBmCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NiatelemetryEpg) GetIntraEpgDvsBmCountOk() (*int64, bool) {
	if o == nil || IsNil(o.IntraEpgDvsBmCount) {
		return nil, false
	}
	return o.IntraEpgDvsBmCount, true
}

// HasIntraEpgDvsBmCount returns a boolean if a field has been set.
func (o *NiatelemetryEpg) HasIntraEpgDvsBmCount() bool {
	if o != nil && !IsNil(o.IntraEpgDvsBmCount) {
		return true
	}

	return false
}

// SetIntraEpgDvsBmCount gets a reference to the given int64 and assigns it to the IntraEpgDvsBmCount field.
func (o *NiatelemetryEpg) SetIntraEpgDvsBmCount(v int64) {
	o.IntraEpgDvsBmCount = &v
}

// GetIntraEpgHyperv returns the IntraEpgHyperv field value if set, zero value otherwise.
func (o *NiatelemetryEpg) GetIntraEpgHyperv() string {
	if o == nil || IsNil(o.IntraEpgHyperv) {
		var ret string
		return ret
	}
	return *o.IntraEpgHyperv
}

// GetIntraEpgHypervOk returns a tuple with the IntraEpgHyperv field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NiatelemetryEpg) GetIntraEpgHypervOk() (*string, bool) {
	if o == nil || IsNil(o.IntraEpgHyperv) {
		return nil, false
	}
	return o.IntraEpgHyperv, true
}

// HasIntraEpgHyperv returns a boolean if a field has been set.
func (o *NiatelemetryEpg) HasIntraEpgHyperv() bool {
	if o != nil && !IsNil(o.IntraEpgHyperv) {
		return true
	}

	return false
}

// SetIntraEpgHyperv gets a reference to the given string and assigns it to the IntraEpgHyperv field.
func (o *NiatelemetryEpg) SetIntraEpgHyperv(v string) {
	o.IntraEpgHyperv = &v
}

// GetIsAttrBased returns the IsAttrBased field value if set, zero value otherwise.
func (o *NiatelemetryEpg) GetIsAttrBased() string {
	if o == nil || IsNil(o.IsAttrBased) {
		var ret string
		return ret
	}
	return *o.IsAttrBased
}

// GetIsAttrBasedOk returns a tuple with the IsAttrBased field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NiatelemetryEpg) GetIsAttrBasedOk() (*string, bool) {
	if o == nil || IsNil(o.IsAttrBased) {
		return nil, false
	}
	return o.IsAttrBased, true
}

// HasIsAttrBased returns a boolean if a field has been set.
func (o *NiatelemetryEpg) HasIsAttrBased() bool {
	if o != nil && !IsNil(o.IsAttrBased) {
		return true
	}

	return false
}

// SetIsAttrBased gets a reference to the given string and assigns it to the IsAttrBased field.
func (o *NiatelemetryEpg) SetIsAttrBased(v string) {
	o.IsAttrBased = &v
}

// GetMicrosegmentation returns the Microsegmentation field value if set, zero value otherwise.
func (o *NiatelemetryEpg) GetMicrosegmentation() string {
	if o == nil || IsNil(o.Microsegmentation) {
		var ret string
		return ret
	}
	return *o.Microsegmentation
}

// GetMicrosegmentationOk returns a tuple with the Microsegmentation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NiatelemetryEpg) GetMicrosegmentationOk() (*string, bool) {
	if o == nil || IsNil(o.Microsegmentation) {
		return nil, false
	}
	return o.Microsegmentation, true
}

// HasMicrosegmentation returns a boolean if a field has been set.
func (o *NiatelemetryEpg) HasMicrosegmentation() bool {
	if o != nil && !IsNil(o.Microsegmentation) {
		return true
	}

	return false
}

// SetMicrosegmentation gets a reference to the given string and assigns it to the Microsegmentation field.
func (o *NiatelemetryEpg) SetMicrosegmentation(v string) {
	o.Microsegmentation = &v
}

// GetMicrosoftUsegCount returns the MicrosoftUsegCount field value if set, zero value otherwise.
func (o *NiatelemetryEpg) GetMicrosoftUsegCount() int64 {
	if o == nil || IsNil(o.MicrosoftUsegCount) {
		var ret int64
		return ret
	}
	return *o.MicrosoftUsegCount
}

// GetMicrosoftUsegCountOk returns a tuple with the MicrosoftUsegCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NiatelemetryEpg) GetMicrosoftUsegCountOk() (*int64, bool) {
	if o == nil || IsNil(o.MicrosoftUsegCount) {
		return nil, false
	}
	return o.MicrosoftUsegCount, true
}

// HasMicrosoftUsegCount returns a boolean if a field has been set.
func (o *NiatelemetryEpg) HasMicrosoftUsegCount() bool {
	if o != nil && !IsNil(o.MicrosoftUsegCount) {
		return true
	}

	return false
}

// SetMicrosoftUsegCount gets a reference to the given int64 and assigns it to the MicrosoftUsegCount field.
func (o *NiatelemetryEpg) SetMicrosoftUsegCount(v int64) {
	o.MicrosoftUsegCount = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *NiatelemetryEpg) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NiatelemetryEpg) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *NiatelemetryEpg) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *NiatelemetryEpg) SetName(v string) {
	o.Name = &v
}

// GetOrchslDevVipCfgCount returns the OrchslDevVipCfgCount field value if set, zero value otherwise.
func (o *NiatelemetryEpg) GetOrchslDevVipCfgCount() int64 {
	if o == nil || IsNil(o.OrchslDevVipCfgCount) {
		var ret int64
		return ret
	}
	return *o.OrchslDevVipCfgCount
}

// GetOrchslDevVipCfgCountOk returns a tuple with the OrchslDevVipCfgCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NiatelemetryEpg) GetOrchslDevVipCfgCountOk() (*int64, bool) {
	if o == nil || IsNil(o.OrchslDevVipCfgCount) {
		return nil, false
	}
	return o.OrchslDevVipCfgCount, true
}

// HasOrchslDevVipCfgCount returns a boolean if a field has been set.
func (o *NiatelemetryEpg) HasOrchslDevVipCfgCount() bool {
	if o != nil && !IsNil(o.OrchslDevVipCfgCount) {
		return true
	}

	return false
}

// SetOrchslDevVipCfgCount gets a reference to the given int64 and assigns it to the OrchslDevVipCfgCount field.
func (o *NiatelemetryEpg) SetOrchslDevVipCfgCount(v int64) {
	o.OrchslDevVipCfgCount = &v
}

// GetRecordType returns the RecordType field value if set, zero value otherwise.
func (o *NiatelemetryEpg) GetRecordType() string {
	if o == nil || IsNil(o.RecordType) {
		var ret string
		return ret
	}
	return *o.RecordType
}

// GetRecordTypeOk returns a tuple with the RecordType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NiatelemetryEpg) GetRecordTypeOk() (*string, bool) {
	if o == nil || IsNil(o.RecordType) {
		return nil, false
	}
	return o.RecordType, true
}

// HasRecordType returns a boolean if a field has been set.
func (o *NiatelemetryEpg) HasRecordType() bool {
	if o != nil && !IsNil(o.RecordType) {
		return true
	}

	return false
}

// SetRecordType gets a reference to the given string and assigns it to the RecordType field.
func (o *NiatelemetryEpg) SetRecordType(v string) {
	o.RecordType = &v
}

// GetRecordVersion returns the RecordVersion field value if set, zero value otherwise.
func (o *NiatelemetryEpg) GetRecordVersion() string {
	if o == nil || IsNil(o.RecordVersion) {
		var ret string
		return ret
	}
	return *o.RecordVersion
}

// GetRecordVersionOk returns a tuple with the RecordVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NiatelemetryEpg) GetRecordVersionOk() (*string, bool) {
	if o == nil || IsNil(o.RecordVersion) {
		return nil, false
	}
	return o.RecordVersion, true
}

// HasRecordVersion returns a boolean if a field has been set.
func (o *NiatelemetryEpg) HasRecordVersion() bool {
	if o != nil && !IsNil(o.RecordVersion) {
		return true
	}

	return false
}

// SetRecordVersion gets a reference to the given string and assigns it to the RecordVersion field.
func (o *NiatelemetryEpg) SetRecordVersion(v string) {
	o.RecordVersion = &v
}

// GetSiteName returns the SiteName field value if set, zero value otherwise.
func (o *NiatelemetryEpg) GetSiteName() string {
	if o == nil || IsNil(o.SiteName) {
		var ret string
		return ret
	}
	return *o.SiteName
}

// GetSiteNameOk returns a tuple with the SiteName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NiatelemetryEpg) GetSiteNameOk() (*string, bool) {
	if o == nil || IsNil(o.SiteName) {
		return nil, false
	}
	return o.SiteName, true
}

// HasSiteName returns a boolean if a field has been set.
func (o *NiatelemetryEpg) HasSiteName() bool {
	if o != nil && !IsNil(o.SiteName) {
		return true
	}

	return false
}

// SetSiteName gets a reference to the given string and assigns it to the SiteName field.
func (o *NiatelemetryEpg) SetSiteName(v string) {
	o.SiteName = &v
}

// GetUsegHypervCount returns the UsegHypervCount field value if set, zero value otherwise.
func (o *NiatelemetryEpg) GetUsegHypervCount() int64 {
	if o == nil || IsNil(o.UsegHypervCount) {
		var ret int64
		return ret
	}
	return *o.UsegHypervCount
}

// GetUsegHypervCountOk returns a tuple with the UsegHypervCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NiatelemetryEpg) GetUsegHypervCountOk() (*int64, bool) {
	if o == nil || IsNil(o.UsegHypervCount) {
		return nil, false
	}
	return o.UsegHypervCount, true
}

// HasUsegHypervCount returns a boolean if a field has been set.
func (o *NiatelemetryEpg) HasUsegHypervCount() bool {
	if o != nil && !IsNil(o.UsegHypervCount) {
		return true
	}

	return false
}

// SetUsegHypervCount gets a reference to the given int64 and assigns it to the UsegHypervCount field.
func (o *NiatelemetryEpg) SetUsegHypervCount(v int64) {
	o.UsegHypervCount = &v
}

// GetRegisteredDevice returns the RegisteredDevice field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NiatelemetryEpg) GetRegisteredDevice() AssetDeviceRegistrationRelationship {
	if o == nil || IsNil(o.RegisteredDevice.Get()) {
		var ret AssetDeviceRegistrationRelationship
		return ret
	}
	return *o.RegisteredDevice.Get()
}

// GetRegisteredDeviceOk returns a tuple with the RegisteredDevice field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NiatelemetryEpg) GetRegisteredDeviceOk() (*AssetDeviceRegistrationRelationship, bool) {
	if o == nil {
		return nil, false
	}
	return o.RegisteredDevice.Get(), o.RegisteredDevice.IsSet()
}

// HasRegisteredDevice returns a boolean if a field has been set.
func (o *NiatelemetryEpg) HasRegisteredDevice() bool {
	if o != nil && o.RegisteredDevice.IsSet() {
		return true
	}

	return false
}

// SetRegisteredDevice gets a reference to the given NullableAssetDeviceRegistrationRelationship and assigns it to the RegisteredDevice field.
func (o *NiatelemetryEpg) SetRegisteredDevice(v AssetDeviceRegistrationRelationship) {
	o.RegisteredDevice.Set(&v)
}

// SetRegisteredDeviceNil sets the value for RegisteredDevice to be an explicit nil
func (o *NiatelemetryEpg) SetRegisteredDeviceNil() {
	o.RegisteredDevice.Set(nil)
}

// UnsetRegisteredDevice ensures that no value is present for RegisteredDevice, not even an explicit nil
func (o *NiatelemetryEpg) UnsetRegisteredDevice() {
	o.RegisteredDevice.Unset()
}

func (o NiatelemetryEpg) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NiatelemetryEpg) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	serializedMoBaseMo, errMoBaseMo := json.Marshal(o.MoBaseMo)
	if errMoBaseMo != nil {
		return map[string]interface{}{}, errMoBaseMo
	}
	errMoBaseMo = json.Unmarshal([]byte(serializedMoBaseMo), &toSerialize)
	if errMoBaseMo != nil {
		return map[string]interface{}{}, errMoBaseMo
	}
	if _, exists := toSerialize["ClassId"]; !exists {
		toSerialize["ClassId"] = o.GetDefaultClassId()
	}
	toSerialize["ClassId"] = o.ClassId
	if _, exists := toSerialize["ObjectType"]; !exists {
		toSerialize["ObjectType"] = o.GetDefaultObjectType()
	}
	toSerialize["ObjectType"] = o.ObjectType
	if !IsNil(o.AzurePackCount) {
		toSerialize["AzurePackCount"] = o.AzurePackCount
	}
	if !IsNil(o.Dn) {
		toSerialize["Dn"] = o.Dn
	}
	if !IsNil(o.EpgDelimiterCount) {
		toSerialize["EpgDelimiterCount"] = o.EpgDelimiterCount
	}
	if !IsNil(o.FcNpvCount) {
		toSerialize["FcNpvCount"] = o.FcNpvCount
	}
	if !IsNil(o.FcoeCount) {
		toSerialize["FcoeCount"] = o.FcoeCount
	}
	if !IsNil(o.FvRsDomAttCount) {
		toSerialize["FvRsDomAttCount"] = o.FvRsDomAttCount
	}
	if !IsNil(o.IntraEpgDvsBmCount) {
		toSerialize["IntraEpgDvsBmCount"] = o.IntraEpgDvsBmCount
	}
	if !IsNil(o.IntraEpgHyperv) {
		toSerialize["IntraEpgHyperv"] = o.IntraEpgHyperv
	}
	if !IsNil(o.IsAttrBased) {
		toSerialize["IsAttrBased"] = o.IsAttrBased
	}
	if !IsNil(o.Microsegmentation) {
		toSerialize["Microsegmentation"] = o.Microsegmentation
	}
	if !IsNil(o.MicrosoftUsegCount) {
		toSerialize["MicrosoftUsegCount"] = o.MicrosoftUsegCount
	}
	if !IsNil(o.Name) {
		toSerialize["Name"] = o.Name
	}
	if !IsNil(o.OrchslDevVipCfgCount) {
		toSerialize["OrchslDevVipCfgCount"] = o.OrchslDevVipCfgCount
	}
	if !IsNil(o.RecordType) {
		toSerialize["RecordType"] = o.RecordType
	}
	if !IsNil(o.RecordVersion) {
		toSerialize["RecordVersion"] = o.RecordVersion
	}
	if !IsNil(o.SiteName) {
		toSerialize["SiteName"] = o.SiteName
	}
	if !IsNil(o.UsegHypervCount) {
		toSerialize["UsegHypervCount"] = o.UsegHypervCount
	}
	if o.RegisteredDevice.IsSet() {
		toSerialize["RegisteredDevice"] = o.RegisteredDevice.Get()
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *NiatelemetryEpg) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"ClassId",
		"ObjectType",
	}

	// defaultValueFuncMap captures the default values for required properties.
	// These values are used when required properties are missing from the payload.
	defaultValueFuncMap := map[string]func() interface{}{
		"ClassId":    o.GetDefaultClassId,
		"ObjectType": o.GetDefaultObjectType,
	}
	var defaultValueApplied bool
	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			if _, ok := defaultValueFuncMap[requiredProperty]; ok {
				allProperties[requiredProperty] = defaultValueFuncMap[requiredProperty]()
				defaultValueApplied = true
			}
		}
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	if defaultValueApplied {
		data, err = json.Marshal(allProperties)
		if err != nil {
			return err
		}
	}
	type NiatelemetryEpgWithoutEmbeddedStruct struct {
		// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.
		ClassId string `json:"ClassId"`
		// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
		ObjectType string `json:"ObjectType"`
		// Azure Pack NAT with ASA feature usage.
		AzurePackCount *int64 `json:"AzurePackCount,omitempty"`
		// Dn value for the End Point Groups present.
		Dn *string `json:"Dn,omitempty"`
		// Number of  objects with delimiter value present in EPG Delimiter attribute.
		EpgDelimiterCount *int64 `json:"EpgDelimiterCount,omitempty"`
		// Number of ports with FC path attribute of type FC.
		FcNpvCount *int64 `json:"FcNpvCount,omitempty"`
		// Number of FCoE per End Point Group.
		FcoeCount *int64 `json:"FcoeCount,omitempty"`
		// Number of FvRsDomAtt objects per End Point Group with VMware configuration.
		FvRsDomAttCount *int64 `json:"FvRsDomAttCount,omitempty"`
		// Intra End Point Group Contract for Distributed Virtual Switch and BM feature usage.
		IntraEpgDvsBmCount *int64 `json:"IntraEpgDvsBmCount,omitempty"`
		// Intra EPG Isolation for Hyper-V, enabled if pcEnfPref attribute is set to enforced.
		IntraEpgHyperv *string `json:"IntraEpgHyperv,omitempty"`
		// Gets the state of End Point Groups with isAttrBasedEPg value as configured.
		IsAttrBased *string `json:"IsAttrBased,omitempty"`
		// Gets the state of End Point Groups where microsegmentation is present.
		Microsegmentation *string `json:"Microsegmentation,omitempty"`
		// Number of FvRsDomAtt objects per End Point Group with Microsoft configuration.
		MicrosoftUsegCount *int64 `json:"MicrosoftUsegCount,omitempty"`
		// Name value for the End Point Groups present.
		Name *string `json:"Name,omitempty"`
		// Number of objects with Simplified Service Graph Integration with Windows Azure Pack.
		OrchslDevVipCfgCount *int64 `json:"OrchslDevVipCfgCount,omitempty"`
		// Type of record DCNM / APIC / SE. This determines the type of platform where inventory was collected.
		RecordType *string `json:"RecordType,omitempty"`
		// Version of record being pushed. This determines what was the API version for data available from the device.
		RecordVersion *string `json:"RecordVersion,omitempty"`
		// The Site name represents an APIC cluster. Service Engine can onboard multiple APIC clusters / sites.
		SiteName *string `json:"SiteName,omitempty"`
		// Logical Operators for attribute based microsegmentation in a hypervisor.
		UsegHypervCount  *int64                                      `json:"UsegHypervCount,omitempty"`
		RegisteredDevice NullableAssetDeviceRegistrationRelationship `json:"RegisteredDevice,omitempty"`
	}

	varNiatelemetryEpgWithoutEmbeddedStruct := NiatelemetryEpgWithoutEmbeddedStruct{}

	err = json.Unmarshal(data, &varNiatelemetryEpgWithoutEmbeddedStruct)
	if err == nil {
		varNiatelemetryEpg := _NiatelemetryEpg{}
		varNiatelemetryEpg.ClassId = varNiatelemetryEpgWithoutEmbeddedStruct.ClassId
		varNiatelemetryEpg.ObjectType = varNiatelemetryEpgWithoutEmbeddedStruct.ObjectType
		varNiatelemetryEpg.AzurePackCount = varNiatelemetryEpgWithoutEmbeddedStruct.AzurePackCount
		varNiatelemetryEpg.Dn = varNiatelemetryEpgWithoutEmbeddedStruct.Dn
		varNiatelemetryEpg.EpgDelimiterCount = varNiatelemetryEpgWithoutEmbeddedStruct.EpgDelimiterCount
		varNiatelemetryEpg.FcNpvCount = varNiatelemetryEpgWithoutEmbeddedStruct.FcNpvCount
		varNiatelemetryEpg.FcoeCount = varNiatelemetryEpgWithoutEmbeddedStruct.FcoeCount
		varNiatelemetryEpg.FvRsDomAttCount = varNiatelemetryEpgWithoutEmbeddedStruct.FvRsDomAttCount
		varNiatelemetryEpg.IntraEpgDvsBmCount = varNiatelemetryEpgWithoutEmbeddedStruct.IntraEpgDvsBmCount
		varNiatelemetryEpg.IntraEpgHyperv = varNiatelemetryEpgWithoutEmbeddedStruct.IntraEpgHyperv
		varNiatelemetryEpg.IsAttrBased = varNiatelemetryEpgWithoutEmbeddedStruct.IsAttrBased
		varNiatelemetryEpg.Microsegmentation = varNiatelemetryEpgWithoutEmbeddedStruct.Microsegmentation
		varNiatelemetryEpg.MicrosoftUsegCount = varNiatelemetryEpgWithoutEmbeddedStruct.MicrosoftUsegCount
		varNiatelemetryEpg.Name = varNiatelemetryEpgWithoutEmbeddedStruct.Name
		varNiatelemetryEpg.OrchslDevVipCfgCount = varNiatelemetryEpgWithoutEmbeddedStruct.OrchslDevVipCfgCount
		varNiatelemetryEpg.RecordType = varNiatelemetryEpgWithoutEmbeddedStruct.RecordType
		varNiatelemetryEpg.RecordVersion = varNiatelemetryEpgWithoutEmbeddedStruct.RecordVersion
		varNiatelemetryEpg.SiteName = varNiatelemetryEpgWithoutEmbeddedStruct.SiteName
		varNiatelemetryEpg.UsegHypervCount = varNiatelemetryEpgWithoutEmbeddedStruct.UsegHypervCount
		varNiatelemetryEpg.RegisteredDevice = varNiatelemetryEpgWithoutEmbeddedStruct.RegisteredDevice
		*o = NiatelemetryEpg(varNiatelemetryEpg)
	} else {
		return err
	}

	varNiatelemetryEpg := _NiatelemetryEpg{}

	err = json.Unmarshal(data, &varNiatelemetryEpg)
	if err == nil {
		o.MoBaseMo = varNiatelemetryEpg.MoBaseMo
	} else {
		return err
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "ClassId")
		delete(additionalProperties, "ObjectType")
		delete(additionalProperties, "AzurePackCount")
		delete(additionalProperties, "Dn")
		delete(additionalProperties, "EpgDelimiterCount")
		delete(additionalProperties, "FcNpvCount")
		delete(additionalProperties, "FcoeCount")
		delete(additionalProperties, "FvRsDomAttCount")
		delete(additionalProperties, "IntraEpgDvsBmCount")
		delete(additionalProperties, "IntraEpgHyperv")
		delete(additionalProperties, "IsAttrBased")
		delete(additionalProperties, "Microsegmentation")
		delete(additionalProperties, "MicrosoftUsegCount")
		delete(additionalProperties, "Name")
		delete(additionalProperties, "OrchslDevVipCfgCount")
		delete(additionalProperties, "RecordType")
		delete(additionalProperties, "RecordVersion")
		delete(additionalProperties, "SiteName")
		delete(additionalProperties, "UsegHypervCount")
		delete(additionalProperties, "RegisteredDevice")

		// remove fields from embedded structs
		reflectMoBaseMo := reflect.ValueOf(o.MoBaseMo)
		for i := 0; i < reflectMoBaseMo.Type().NumField(); i++ {
			t := reflectMoBaseMo.Type().Field(i)

			if jsonTag := t.Tag.Get("json"); jsonTag != "" {
				fieldName := ""
				if commaIdx := strings.Index(jsonTag, ","); commaIdx > 0 {
					fieldName = jsonTag[:commaIdx]
				} else {
					fieldName = jsonTag
				}
				if fieldName != "AdditionalProperties" {
					delete(additionalProperties, fieldName)
				}
			}
		}

		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableNiatelemetryEpg struct {
	value *NiatelemetryEpg
	isSet bool
}

func (v NullableNiatelemetryEpg) Get() *NiatelemetryEpg {
	return v.value
}

func (v *NullableNiatelemetryEpg) Set(val *NiatelemetryEpg) {
	v.value = val
	v.isSet = true
}

func (v NullableNiatelemetryEpg) IsSet() bool {
	return v.isSet
}

func (v *NullableNiatelemetryEpg) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNiatelemetryEpg(val *NiatelemetryEpg) *NullableNiatelemetryEpg {
	return &NullableNiatelemetryEpg{value: val, isSet: true}
}

func (v NullableNiatelemetryEpg) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNiatelemetryEpg) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
