/*
 * Cisco Intersight
 *
 * Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations. The Intersight OpenAPI document defines the complete set of properties that are returned in the HTTP response. From that perspective, a client can expect that no additional properties are returned, unless these properties are explicitly defined in the OpenAPI document. However, when a client uses an older version of the Intersight OpenAPI document, the server may send additional properties because the software is more recent than the client. In that case, the client may receive properties that it does not know about. Some generated SDKs perform a strict validation of the HTTP response body against the OpenAPI document. This document was created on 2021-07-21T16:37:30Z.
 *
 * API version: 1.0.9-4403
 * Contact: intersight@cisco.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package intersight

import (
	"encoding/json"
	"reflect"
	"strings"
)

// PowerControlState Managed object used to track chassis power capping information.
type PowerControlState struct {
	MoBaseMo
	// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.
	ClassId string `json:"ClassId"`
	// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
	ObjectType string `json:"ObjectType"`
	// This field identifies the allocated power on the chassis in Watts.
	AllocatedPower *int64 `json:"AllocatedPower,omitempty"`
	// This field identifies the available power when PSUs are in grid mode in Watts.
	GridMaxPower *int64 `json:"GridMaxPower,omitempty"`
	// This field identifies the maximum power required by the endpoint in Watts.
	MaxRequiredPower *int64 `json:"MaxRequiredPower,omitempty"`
	// This field identifies the minimum power required by the endpoint in Watts.
	MinRequiredPower *int64 `json:"MinRequiredPower,omitempty"`
	// This field identifies the available power when PSUs are in N+1 mode in Watts.
	N1MaxPower *int64 `json:"N1MaxPower,omitempty"`
	// This field identifies the available power when PSUs are in N+2 mode in Watts.
	N2MaxPower *int64 `json:"N2MaxPower,omitempty"`
	// This field identifies the available power when PSUs are in non-redundant mode in Watts.
	NonRedundantMaxPower *int64                               `json:"NonRedundantMaxPower,omitempty"`
	EquipmentChassis     *EquipmentChassisRelationship        `json:"EquipmentChassis,omitempty"`
	RegisteredDevice     *AssetDeviceRegistrationRelationship `json:"RegisteredDevice,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _PowerControlState PowerControlState

// NewPowerControlState instantiates a new PowerControlState object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPowerControlState(classId string, objectType string) *PowerControlState {
	this := PowerControlState{}
	this.ClassId = classId
	this.ObjectType = objectType
	return &this
}

// NewPowerControlStateWithDefaults instantiates a new PowerControlState object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPowerControlStateWithDefaults() *PowerControlState {
	this := PowerControlState{}
	var classId string = "power.ControlState"
	this.ClassId = classId
	var objectType string = "power.ControlState"
	this.ObjectType = objectType
	return &this
}

// GetClassId returns the ClassId field value
func (o *PowerControlState) GetClassId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ClassId
}

// GetClassIdOk returns a tuple with the ClassId field value
// and a boolean to check if the value has been set.
func (o *PowerControlState) GetClassIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ClassId, true
}

// SetClassId sets field value
func (o *PowerControlState) SetClassId(v string) {
	o.ClassId = v
}

// GetObjectType returns the ObjectType field value
func (o *PowerControlState) GetObjectType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ObjectType
}

// GetObjectTypeOk returns a tuple with the ObjectType field value
// and a boolean to check if the value has been set.
func (o *PowerControlState) GetObjectTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ObjectType, true
}

// SetObjectType sets field value
func (o *PowerControlState) SetObjectType(v string) {
	o.ObjectType = v
}

// GetAllocatedPower returns the AllocatedPower field value if set, zero value otherwise.
func (o *PowerControlState) GetAllocatedPower() int64 {
	if o == nil || o.AllocatedPower == nil {
		var ret int64
		return ret
	}
	return *o.AllocatedPower
}

// GetAllocatedPowerOk returns a tuple with the AllocatedPower field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PowerControlState) GetAllocatedPowerOk() (*int64, bool) {
	if o == nil || o.AllocatedPower == nil {
		return nil, false
	}
	return o.AllocatedPower, true
}

// HasAllocatedPower returns a boolean if a field has been set.
func (o *PowerControlState) HasAllocatedPower() bool {
	if o != nil && o.AllocatedPower != nil {
		return true
	}

	return false
}

// SetAllocatedPower gets a reference to the given int64 and assigns it to the AllocatedPower field.
func (o *PowerControlState) SetAllocatedPower(v int64) {
	o.AllocatedPower = &v
}

// GetGridMaxPower returns the GridMaxPower field value if set, zero value otherwise.
func (o *PowerControlState) GetGridMaxPower() int64 {
	if o == nil || o.GridMaxPower == nil {
		var ret int64
		return ret
	}
	return *o.GridMaxPower
}

// GetGridMaxPowerOk returns a tuple with the GridMaxPower field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PowerControlState) GetGridMaxPowerOk() (*int64, bool) {
	if o == nil || o.GridMaxPower == nil {
		return nil, false
	}
	return o.GridMaxPower, true
}

// HasGridMaxPower returns a boolean if a field has been set.
func (o *PowerControlState) HasGridMaxPower() bool {
	if o != nil && o.GridMaxPower != nil {
		return true
	}

	return false
}

// SetGridMaxPower gets a reference to the given int64 and assigns it to the GridMaxPower field.
func (o *PowerControlState) SetGridMaxPower(v int64) {
	o.GridMaxPower = &v
}

// GetMaxRequiredPower returns the MaxRequiredPower field value if set, zero value otherwise.
func (o *PowerControlState) GetMaxRequiredPower() int64 {
	if o == nil || o.MaxRequiredPower == nil {
		var ret int64
		return ret
	}
	return *o.MaxRequiredPower
}

// GetMaxRequiredPowerOk returns a tuple with the MaxRequiredPower field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PowerControlState) GetMaxRequiredPowerOk() (*int64, bool) {
	if o == nil || o.MaxRequiredPower == nil {
		return nil, false
	}
	return o.MaxRequiredPower, true
}

// HasMaxRequiredPower returns a boolean if a field has been set.
func (o *PowerControlState) HasMaxRequiredPower() bool {
	if o != nil && o.MaxRequiredPower != nil {
		return true
	}

	return false
}

// SetMaxRequiredPower gets a reference to the given int64 and assigns it to the MaxRequiredPower field.
func (o *PowerControlState) SetMaxRequiredPower(v int64) {
	o.MaxRequiredPower = &v
}

// GetMinRequiredPower returns the MinRequiredPower field value if set, zero value otherwise.
func (o *PowerControlState) GetMinRequiredPower() int64 {
	if o == nil || o.MinRequiredPower == nil {
		var ret int64
		return ret
	}
	return *o.MinRequiredPower
}

// GetMinRequiredPowerOk returns a tuple with the MinRequiredPower field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PowerControlState) GetMinRequiredPowerOk() (*int64, bool) {
	if o == nil || o.MinRequiredPower == nil {
		return nil, false
	}
	return o.MinRequiredPower, true
}

// HasMinRequiredPower returns a boolean if a field has been set.
func (o *PowerControlState) HasMinRequiredPower() bool {
	if o != nil && o.MinRequiredPower != nil {
		return true
	}

	return false
}

// SetMinRequiredPower gets a reference to the given int64 and assigns it to the MinRequiredPower field.
func (o *PowerControlState) SetMinRequiredPower(v int64) {
	o.MinRequiredPower = &v
}

// GetN1MaxPower returns the N1MaxPower field value if set, zero value otherwise.
func (o *PowerControlState) GetN1MaxPower() int64 {
	if o == nil || o.N1MaxPower == nil {
		var ret int64
		return ret
	}
	return *o.N1MaxPower
}

// GetN1MaxPowerOk returns a tuple with the N1MaxPower field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PowerControlState) GetN1MaxPowerOk() (*int64, bool) {
	if o == nil || o.N1MaxPower == nil {
		return nil, false
	}
	return o.N1MaxPower, true
}

// HasN1MaxPower returns a boolean if a field has been set.
func (o *PowerControlState) HasN1MaxPower() bool {
	if o != nil && o.N1MaxPower != nil {
		return true
	}

	return false
}

// SetN1MaxPower gets a reference to the given int64 and assigns it to the N1MaxPower field.
func (o *PowerControlState) SetN1MaxPower(v int64) {
	o.N1MaxPower = &v
}

// GetN2MaxPower returns the N2MaxPower field value if set, zero value otherwise.
func (o *PowerControlState) GetN2MaxPower() int64 {
	if o == nil || o.N2MaxPower == nil {
		var ret int64
		return ret
	}
	return *o.N2MaxPower
}

// GetN2MaxPowerOk returns a tuple with the N2MaxPower field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PowerControlState) GetN2MaxPowerOk() (*int64, bool) {
	if o == nil || o.N2MaxPower == nil {
		return nil, false
	}
	return o.N2MaxPower, true
}

// HasN2MaxPower returns a boolean if a field has been set.
func (o *PowerControlState) HasN2MaxPower() bool {
	if o != nil && o.N2MaxPower != nil {
		return true
	}

	return false
}

// SetN2MaxPower gets a reference to the given int64 and assigns it to the N2MaxPower field.
func (o *PowerControlState) SetN2MaxPower(v int64) {
	o.N2MaxPower = &v
}

// GetNonRedundantMaxPower returns the NonRedundantMaxPower field value if set, zero value otherwise.
func (o *PowerControlState) GetNonRedundantMaxPower() int64 {
	if o == nil || o.NonRedundantMaxPower == nil {
		var ret int64
		return ret
	}
	return *o.NonRedundantMaxPower
}

// GetNonRedundantMaxPowerOk returns a tuple with the NonRedundantMaxPower field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PowerControlState) GetNonRedundantMaxPowerOk() (*int64, bool) {
	if o == nil || o.NonRedundantMaxPower == nil {
		return nil, false
	}
	return o.NonRedundantMaxPower, true
}

// HasNonRedundantMaxPower returns a boolean if a field has been set.
func (o *PowerControlState) HasNonRedundantMaxPower() bool {
	if o != nil && o.NonRedundantMaxPower != nil {
		return true
	}

	return false
}

// SetNonRedundantMaxPower gets a reference to the given int64 and assigns it to the NonRedundantMaxPower field.
func (o *PowerControlState) SetNonRedundantMaxPower(v int64) {
	o.NonRedundantMaxPower = &v
}

// GetEquipmentChassis returns the EquipmentChassis field value if set, zero value otherwise.
func (o *PowerControlState) GetEquipmentChassis() EquipmentChassisRelationship {
	if o == nil || o.EquipmentChassis == nil {
		var ret EquipmentChassisRelationship
		return ret
	}
	return *o.EquipmentChassis
}

// GetEquipmentChassisOk returns a tuple with the EquipmentChassis field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PowerControlState) GetEquipmentChassisOk() (*EquipmentChassisRelationship, bool) {
	if o == nil || o.EquipmentChassis == nil {
		return nil, false
	}
	return o.EquipmentChassis, true
}

// HasEquipmentChassis returns a boolean if a field has been set.
func (o *PowerControlState) HasEquipmentChassis() bool {
	if o != nil && o.EquipmentChassis != nil {
		return true
	}

	return false
}

// SetEquipmentChassis gets a reference to the given EquipmentChassisRelationship and assigns it to the EquipmentChassis field.
func (o *PowerControlState) SetEquipmentChassis(v EquipmentChassisRelationship) {
	o.EquipmentChassis = &v
}

// GetRegisteredDevice returns the RegisteredDevice field value if set, zero value otherwise.
func (o *PowerControlState) GetRegisteredDevice() AssetDeviceRegistrationRelationship {
	if o == nil || o.RegisteredDevice == nil {
		var ret AssetDeviceRegistrationRelationship
		return ret
	}
	return *o.RegisteredDevice
}

// GetRegisteredDeviceOk returns a tuple with the RegisteredDevice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PowerControlState) GetRegisteredDeviceOk() (*AssetDeviceRegistrationRelationship, bool) {
	if o == nil || o.RegisteredDevice == nil {
		return nil, false
	}
	return o.RegisteredDevice, true
}

// HasRegisteredDevice returns a boolean if a field has been set.
func (o *PowerControlState) HasRegisteredDevice() bool {
	if o != nil && o.RegisteredDevice != nil {
		return true
	}

	return false
}

// SetRegisteredDevice gets a reference to the given AssetDeviceRegistrationRelationship and assigns it to the RegisteredDevice field.
func (o *PowerControlState) SetRegisteredDevice(v AssetDeviceRegistrationRelationship) {
	o.RegisteredDevice = &v
}

func (o PowerControlState) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	serializedMoBaseMo, errMoBaseMo := json.Marshal(o.MoBaseMo)
	if errMoBaseMo != nil {
		return []byte{}, errMoBaseMo
	}
	errMoBaseMo = json.Unmarshal([]byte(serializedMoBaseMo), &toSerialize)
	if errMoBaseMo != nil {
		return []byte{}, errMoBaseMo
	}
	if true {
		toSerialize["ClassId"] = o.ClassId
	}
	if true {
		toSerialize["ObjectType"] = o.ObjectType
	}
	if o.AllocatedPower != nil {
		toSerialize["AllocatedPower"] = o.AllocatedPower
	}
	if o.GridMaxPower != nil {
		toSerialize["GridMaxPower"] = o.GridMaxPower
	}
	if o.MaxRequiredPower != nil {
		toSerialize["MaxRequiredPower"] = o.MaxRequiredPower
	}
	if o.MinRequiredPower != nil {
		toSerialize["MinRequiredPower"] = o.MinRequiredPower
	}
	if o.N1MaxPower != nil {
		toSerialize["N1MaxPower"] = o.N1MaxPower
	}
	if o.N2MaxPower != nil {
		toSerialize["N2MaxPower"] = o.N2MaxPower
	}
	if o.NonRedundantMaxPower != nil {
		toSerialize["NonRedundantMaxPower"] = o.NonRedundantMaxPower
	}
	if o.EquipmentChassis != nil {
		toSerialize["EquipmentChassis"] = o.EquipmentChassis
	}
	if o.RegisteredDevice != nil {
		toSerialize["RegisteredDevice"] = o.RegisteredDevice
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *PowerControlState) UnmarshalJSON(bytes []byte) (err error) {
	type PowerControlStateWithoutEmbeddedStruct struct {
		// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.
		ClassId string `json:"ClassId"`
		// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
		ObjectType string `json:"ObjectType"`
		// This field identifies the allocated power on the chassis in Watts.
		AllocatedPower *int64 `json:"AllocatedPower,omitempty"`
		// This field identifies the available power when PSUs are in grid mode in Watts.
		GridMaxPower *int64 `json:"GridMaxPower,omitempty"`
		// This field identifies the maximum power required by the endpoint in Watts.
		MaxRequiredPower *int64 `json:"MaxRequiredPower,omitempty"`
		// This field identifies the minimum power required by the endpoint in Watts.
		MinRequiredPower *int64 `json:"MinRequiredPower,omitempty"`
		// This field identifies the available power when PSUs are in N+1 mode in Watts.
		N1MaxPower *int64 `json:"N1MaxPower,omitempty"`
		// This field identifies the available power when PSUs are in N+2 mode in Watts.
		N2MaxPower *int64 `json:"N2MaxPower,omitempty"`
		// This field identifies the available power when PSUs are in non-redundant mode in Watts.
		NonRedundantMaxPower *int64                               `json:"NonRedundantMaxPower,omitempty"`
		EquipmentChassis     *EquipmentChassisRelationship        `json:"EquipmentChassis,omitempty"`
		RegisteredDevice     *AssetDeviceRegistrationRelationship `json:"RegisteredDevice,omitempty"`
	}

	varPowerControlStateWithoutEmbeddedStruct := PowerControlStateWithoutEmbeddedStruct{}

	err = json.Unmarshal(bytes, &varPowerControlStateWithoutEmbeddedStruct)
	if err == nil {
		varPowerControlState := _PowerControlState{}
		varPowerControlState.ClassId = varPowerControlStateWithoutEmbeddedStruct.ClassId
		varPowerControlState.ObjectType = varPowerControlStateWithoutEmbeddedStruct.ObjectType
		varPowerControlState.AllocatedPower = varPowerControlStateWithoutEmbeddedStruct.AllocatedPower
		varPowerControlState.GridMaxPower = varPowerControlStateWithoutEmbeddedStruct.GridMaxPower
		varPowerControlState.MaxRequiredPower = varPowerControlStateWithoutEmbeddedStruct.MaxRequiredPower
		varPowerControlState.MinRequiredPower = varPowerControlStateWithoutEmbeddedStruct.MinRequiredPower
		varPowerControlState.N1MaxPower = varPowerControlStateWithoutEmbeddedStruct.N1MaxPower
		varPowerControlState.N2MaxPower = varPowerControlStateWithoutEmbeddedStruct.N2MaxPower
		varPowerControlState.NonRedundantMaxPower = varPowerControlStateWithoutEmbeddedStruct.NonRedundantMaxPower
		varPowerControlState.EquipmentChassis = varPowerControlStateWithoutEmbeddedStruct.EquipmentChassis
		varPowerControlState.RegisteredDevice = varPowerControlStateWithoutEmbeddedStruct.RegisteredDevice
		*o = PowerControlState(varPowerControlState)
	} else {
		return err
	}

	varPowerControlState := _PowerControlState{}

	err = json.Unmarshal(bytes, &varPowerControlState)
	if err == nil {
		o.MoBaseMo = varPowerControlState.MoBaseMo
	} else {
		return err
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "ClassId")
		delete(additionalProperties, "ObjectType")
		delete(additionalProperties, "AllocatedPower")
		delete(additionalProperties, "GridMaxPower")
		delete(additionalProperties, "MaxRequiredPower")
		delete(additionalProperties, "MinRequiredPower")
		delete(additionalProperties, "N1MaxPower")
		delete(additionalProperties, "N2MaxPower")
		delete(additionalProperties, "NonRedundantMaxPower")
		delete(additionalProperties, "EquipmentChassis")
		delete(additionalProperties, "RegisteredDevice")

		// remove fields from embedded structs
		reflectMoBaseMo := reflect.ValueOf(o.MoBaseMo)
		for i := 0; i < reflectMoBaseMo.Type().NumField(); i++ {
			t := reflectMoBaseMo.Type().Field(i)

			if jsonTag := t.Tag.Get("json"); jsonTag != "" {
				fieldName := ""
				if commaIdx := strings.Index(jsonTag, ","); commaIdx > 0 {
					fieldName = jsonTag[:commaIdx]
				} else {
					fieldName = jsonTag
				}
				if fieldName != "AdditionalProperties" {
					delete(additionalProperties, fieldName)
				}
			}
		}

		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullablePowerControlState struct {
	value *PowerControlState
	isSet bool
}

func (v NullablePowerControlState) Get() *PowerControlState {
	return v.value
}

func (v *NullablePowerControlState) Set(val *PowerControlState) {
	v.value = val
	v.isSet = true
}

func (v NullablePowerControlState) IsSet() bool {
	return v.isSet
}

func (v *NullablePowerControlState) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePowerControlState(val *PowerControlState) *NullablePowerControlState {
	return &NullablePowerControlState{value: val, isSet: true}
}

func (v NullablePowerControlState) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePowerControlState) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
