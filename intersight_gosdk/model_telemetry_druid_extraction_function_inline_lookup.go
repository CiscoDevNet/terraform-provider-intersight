/*
Cisco Intersight

Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations. The Intersight OpenAPI document defines the complete set of properties that are returned in the HTTP response. From that perspective, a client can expect that no additional properties are returned, unless these properties are explicitly defined in the OpenAPI document. However, when a client uses an older version of the Intersight OpenAPI document, the server may send additional properties because the software is more recent than the client. In that case, the client may receive properties that it does not know about. Some generated SDKs perform a strict validation of the HTTP response body against the OpenAPI document.

API version: 1.0.11-18775
Contact: intersight@cisco.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package intersight

import (
	"encoding/json"
	"fmt"
)

// checks if the TelemetryDruidExtractionFunctionInlineLookup type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TelemetryDruidExtractionFunctionInlineLookup{}

// TelemetryDruidExtractionFunctionInlineLookup Lookups are a concept in Druid where dimension values are (optionally) replaced with new values. The \"lookup\" extraction function lets you specify an inline lookup. A null dimension value can be mapped to a specific value by specifying the empty string as the key in the lookup data. This allows distinguishing between a null dimension and a lookup resulting in a null.
type TelemetryDruidExtractionFunctionInlineLookup struct {
	Type   string                                                   `json:"type"`
	Lookup *TelemetryDruidExtractionFunctionInlineLookupAllOfLookup `json:"lookup,omitempty"`
	// Provides a hint how to handle missing values. Setting retainMissingValue to true will use the dimension's original value if it is not found in the lookup. The default values are replaceMissingValueWith = null and retainMissingValue = false which causes missing values to be treated as missing. It is illegal to set retainMissingValue = true and also specify a replaceMissingValueWith.
	RetainMissingValue *bool `json:"retainMissingValue,omitempty"`
	// Provides a hint how to handle missing values. Setting replaceMissingValueWith to \"\" has the same effect as setting it to null or omitting the property.
	ReplaceMissingValueWith *string `json:"replaceMissingValueWith,omitempty"`
	// Override the lookup's own sense of whether or not it is injective.
	Injective *bool `json:"injective,omitempty"`
	// Allow optimization of lookup based extraction filter (by default optimize = true). The optimization layer will run on the Broker and it will rewrite the extraction filter as clause of selector filters.
	Optimize             *bool `json:"optimize,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _TelemetryDruidExtractionFunctionInlineLookup TelemetryDruidExtractionFunctionInlineLookup

// NewTelemetryDruidExtractionFunctionInlineLookup instantiates a new TelemetryDruidExtractionFunctionInlineLookup object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTelemetryDruidExtractionFunctionInlineLookup(type_ string) *TelemetryDruidExtractionFunctionInlineLookup {
	this := TelemetryDruidExtractionFunctionInlineLookup{}
	this.Type = type_
	return &this
}

// NewTelemetryDruidExtractionFunctionInlineLookupWithDefaults instantiates a new TelemetryDruidExtractionFunctionInlineLookup object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTelemetryDruidExtractionFunctionInlineLookupWithDefaults() *TelemetryDruidExtractionFunctionInlineLookup {
	this := TelemetryDruidExtractionFunctionInlineLookup{}
	return &this
}

// GetType returns the Type field value
func (o *TelemetryDruidExtractionFunctionInlineLookup) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *TelemetryDruidExtractionFunctionInlineLookup) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *TelemetryDruidExtractionFunctionInlineLookup) SetType(v string) {
	o.Type = v
}

// GetLookup returns the Lookup field value if set, zero value otherwise.
func (o *TelemetryDruidExtractionFunctionInlineLookup) GetLookup() TelemetryDruidExtractionFunctionInlineLookupAllOfLookup {
	if o == nil || IsNil(o.Lookup) {
		var ret TelemetryDruidExtractionFunctionInlineLookupAllOfLookup
		return ret
	}
	return *o.Lookup
}

// GetLookupOk returns a tuple with the Lookup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TelemetryDruidExtractionFunctionInlineLookup) GetLookupOk() (*TelemetryDruidExtractionFunctionInlineLookupAllOfLookup, bool) {
	if o == nil || IsNil(o.Lookup) {
		return nil, false
	}
	return o.Lookup, true
}

// HasLookup returns a boolean if a field has been set.
func (o *TelemetryDruidExtractionFunctionInlineLookup) HasLookup() bool {
	if o != nil && !IsNil(o.Lookup) {
		return true
	}

	return false
}

// SetLookup gets a reference to the given TelemetryDruidExtractionFunctionInlineLookupAllOfLookup and assigns it to the Lookup field.
func (o *TelemetryDruidExtractionFunctionInlineLookup) SetLookup(v TelemetryDruidExtractionFunctionInlineLookupAllOfLookup) {
	o.Lookup = &v
}

// GetRetainMissingValue returns the RetainMissingValue field value if set, zero value otherwise.
func (o *TelemetryDruidExtractionFunctionInlineLookup) GetRetainMissingValue() bool {
	if o == nil || IsNil(o.RetainMissingValue) {
		var ret bool
		return ret
	}
	return *o.RetainMissingValue
}

// GetRetainMissingValueOk returns a tuple with the RetainMissingValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TelemetryDruidExtractionFunctionInlineLookup) GetRetainMissingValueOk() (*bool, bool) {
	if o == nil || IsNil(o.RetainMissingValue) {
		return nil, false
	}
	return o.RetainMissingValue, true
}

// HasRetainMissingValue returns a boolean if a field has been set.
func (o *TelemetryDruidExtractionFunctionInlineLookup) HasRetainMissingValue() bool {
	if o != nil && !IsNil(o.RetainMissingValue) {
		return true
	}

	return false
}

// SetRetainMissingValue gets a reference to the given bool and assigns it to the RetainMissingValue field.
func (o *TelemetryDruidExtractionFunctionInlineLookup) SetRetainMissingValue(v bool) {
	o.RetainMissingValue = &v
}

// GetReplaceMissingValueWith returns the ReplaceMissingValueWith field value if set, zero value otherwise.
func (o *TelemetryDruidExtractionFunctionInlineLookup) GetReplaceMissingValueWith() string {
	if o == nil || IsNil(o.ReplaceMissingValueWith) {
		var ret string
		return ret
	}
	return *o.ReplaceMissingValueWith
}

// GetReplaceMissingValueWithOk returns a tuple with the ReplaceMissingValueWith field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TelemetryDruidExtractionFunctionInlineLookup) GetReplaceMissingValueWithOk() (*string, bool) {
	if o == nil || IsNil(o.ReplaceMissingValueWith) {
		return nil, false
	}
	return o.ReplaceMissingValueWith, true
}

// HasReplaceMissingValueWith returns a boolean if a field has been set.
func (o *TelemetryDruidExtractionFunctionInlineLookup) HasReplaceMissingValueWith() bool {
	if o != nil && !IsNil(o.ReplaceMissingValueWith) {
		return true
	}

	return false
}

// SetReplaceMissingValueWith gets a reference to the given string and assigns it to the ReplaceMissingValueWith field.
func (o *TelemetryDruidExtractionFunctionInlineLookup) SetReplaceMissingValueWith(v string) {
	o.ReplaceMissingValueWith = &v
}

// GetInjective returns the Injective field value if set, zero value otherwise.
func (o *TelemetryDruidExtractionFunctionInlineLookup) GetInjective() bool {
	if o == nil || IsNil(o.Injective) {
		var ret bool
		return ret
	}
	return *o.Injective
}

// GetInjectiveOk returns a tuple with the Injective field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TelemetryDruidExtractionFunctionInlineLookup) GetInjectiveOk() (*bool, bool) {
	if o == nil || IsNil(o.Injective) {
		return nil, false
	}
	return o.Injective, true
}

// HasInjective returns a boolean if a field has been set.
func (o *TelemetryDruidExtractionFunctionInlineLookup) HasInjective() bool {
	if o != nil && !IsNil(o.Injective) {
		return true
	}

	return false
}

// SetInjective gets a reference to the given bool and assigns it to the Injective field.
func (o *TelemetryDruidExtractionFunctionInlineLookup) SetInjective(v bool) {
	o.Injective = &v
}

// GetOptimize returns the Optimize field value if set, zero value otherwise.
func (o *TelemetryDruidExtractionFunctionInlineLookup) GetOptimize() bool {
	if o == nil || IsNil(o.Optimize) {
		var ret bool
		return ret
	}
	return *o.Optimize
}

// GetOptimizeOk returns a tuple with the Optimize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TelemetryDruidExtractionFunctionInlineLookup) GetOptimizeOk() (*bool, bool) {
	if o == nil || IsNil(o.Optimize) {
		return nil, false
	}
	return o.Optimize, true
}

// HasOptimize returns a boolean if a field has been set.
func (o *TelemetryDruidExtractionFunctionInlineLookup) HasOptimize() bool {
	if o != nil && !IsNil(o.Optimize) {
		return true
	}

	return false
}

// SetOptimize gets a reference to the given bool and assigns it to the Optimize field.
func (o *TelemetryDruidExtractionFunctionInlineLookup) SetOptimize(v bool) {
	o.Optimize = &v
}

func (o TelemetryDruidExtractionFunctionInlineLookup) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TelemetryDruidExtractionFunctionInlineLookup) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["type"] = o.Type
	if !IsNil(o.Lookup) {
		toSerialize["lookup"] = o.Lookup
	}
	if !IsNil(o.RetainMissingValue) {
		toSerialize["retainMissingValue"] = o.RetainMissingValue
	}
	if !IsNil(o.ReplaceMissingValueWith) {
		toSerialize["replaceMissingValueWith"] = o.ReplaceMissingValueWith
	}
	if !IsNil(o.Injective) {
		toSerialize["injective"] = o.Injective
	}
	if !IsNil(o.Optimize) {
		toSerialize["optimize"] = o.Optimize
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *TelemetryDruidExtractionFunctionInlineLookup) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"type",
	}

	// defaultValueFuncMap captures the default values for required properties.
	// These values are used when required properties are missing from the payload.
	defaultValueFuncMap := map[string]func() interface{}{}
	var defaultValueApplied bool
	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			if _, ok := defaultValueFuncMap[requiredProperty]; ok {
				allProperties[requiredProperty] = defaultValueFuncMap[requiredProperty]()
				defaultValueApplied = true
			}
		}
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	if defaultValueApplied {
		data, err = json.Marshal(allProperties)
		if err != nil {
			return err
		}
	}
	varTelemetryDruidExtractionFunctionInlineLookup := _TelemetryDruidExtractionFunctionInlineLookup{}

	err = json.Unmarshal(data, &varTelemetryDruidExtractionFunctionInlineLookup)

	if err != nil {
		return err
	}

	*o = TelemetryDruidExtractionFunctionInlineLookup(varTelemetryDruidExtractionFunctionInlineLookup)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "type")
		delete(additionalProperties, "lookup")
		delete(additionalProperties, "retainMissingValue")
		delete(additionalProperties, "replaceMissingValueWith")
		delete(additionalProperties, "injective")
		delete(additionalProperties, "optimize")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableTelemetryDruidExtractionFunctionInlineLookup struct {
	value *TelemetryDruidExtractionFunctionInlineLookup
	isSet bool
}

func (v NullableTelemetryDruidExtractionFunctionInlineLookup) Get() *TelemetryDruidExtractionFunctionInlineLookup {
	return v.value
}

func (v *NullableTelemetryDruidExtractionFunctionInlineLookup) Set(val *TelemetryDruidExtractionFunctionInlineLookup) {
	v.value = val
	v.isSet = true
}

func (v NullableTelemetryDruidExtractionFunctionInlineLookup) IsSet() bool {
	return v.isSet
}

func (v *NullableTelemetryDruidExtractionFunctionInlineLookup) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTelemetryDruidExtractionFunctionInlineLookup(val *TelemetryDruidExtractionFunctionInlineLookup) *NullableTelemetryDruidExtractionFunctionInlineLookup {
	return &NullableTelemetryDruidExtractionFunctionInlineLookup{value: val, isSet: true}
}

func (v NullableTelemetryDruidExtractionFunctionInlineLookup) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTelemetryDruidExtractionFunctionInlineLookup) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
