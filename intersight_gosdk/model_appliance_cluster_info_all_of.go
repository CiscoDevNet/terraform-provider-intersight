/*
Cisco Intersight

Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations. The Intersight OpenAPI document defines the complete set of properties that are returned in the HTTP response. From that perspective, a client can expect that no additional properties are returned, unless these properties are explicitly defined in the OpenAPI document. However, when a client uses an older version of the Intersight OpenAPI document, the server may send additional properties because the software is more recent than the client. In that case, the client may receive properties that it does not know about. Some generated SDKs perform a strict validation of the HTTP response body against the OpenAPI document.

API version: 1.0.11-14237
Contact: intersight@cisco.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package intersight

import (
	"encoding/json"
)

// ApplianceClusterInfoAllOf Definition of the list of properties defined in 'appliance.ClusterInfo', excluding properties defined in parent classes.
type ApplianceClusterInfoAllOf struct {
	// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.
	ClassId string `json:"ClassId"`
	// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
	ObjectType string `json:"ObjectType"`
	// The deployment size of the node requiring to join cluster.
	DeploymentSize *string `json:"DeploymentSize,omitempty"`
	// Default gateway configured on the peer node.
	Gateway *string `json:"Gateway,omitempty"`
	// Publicly accessible IP of the peer node.
	Hostip *string `json:"Hostip,omitempty"`
	// Publicly accessible FQDN of the peer node.
	Hostname *string `json:"Hostname,omitempty"`
	// The public key of peer host.
	Peerkey *string `json:"Peerkey,omitempty"`
	// Public key returned to the client.
	Responsekey *string `json:"Responsekey,omitempty"`
	// The status of the cluster join process. * `Unknown` - The status of the appliance node is unknown. * `Operational` - The appliance node is operational. * `Impaired` - The appliance node is impaired. * `AttentionNeeded` - The appliance node needs attention. * `ReadyToJoin` - The node is ready to be added to a standalone Intersight Appliance to form a cluster. * `OutOfService` - The user has taken this node (part of a cluster) to out of service. * `ReadyForReplacement` - The cluster node is ready to be replaced. * `ReplacementInProgress` - The cluster node replacement is in progress. * `ReplacementFailed` - There was a failure during the cluster node replacement.
	Status *string `json:"Status,omitempty"`
	// Subnet Mask of the peer node.
	Subnetmask *string `json:"Subnetmask,omitempty"`
	// The UUID of the peer appliance.
	Uuid                 *string                 `json:"Uuid,omitempty"`
	Account              *IamAccountRelationship `json:"Account,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ApplianceClusterInfoAllOf ApplianceClusterInfoAllOf

// NewApplianceClusterInfoAllOf instantiates a new ApplianceClusterInfoAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApplianceClusterInfoAllOf(classId string, objectType string) *ApplianceClusterInfoAllOf {
	this := ApplianceClusterInfoAllOf{}
	this.ClassId = classId
	this.ObjectType = objectType
	return &this
}

// NewApplianceClusterInfoAllOfWithDefaults instantiates a new ApplianceClusterInfoAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApplianceClusterInfoAllOfWithDefaults() *ApplianceClusterInfoAllOf {
	this := ApplianceClusterInfoAllOf{}
	var classId string = "appliance.ClusterInfo"
	this.ClassId = classId
	var objectType string = "appliance.ClusterInfo"
	this.ObjectType = objectType
	return &this
}

// GetClassId returns the ClassId field value
func (o *ApplianceClusterInfoAllOf) GetClassId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ClassId
}

// GetClassIdOk returns a tuple with the ClassId field value
// and a boolean to check if the value has been set.
func (o *ApplianceClusterInfoAllOf) GetClassIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ClassId, true
}

// SetClassId sets field value
func (o *ApplianceClusterInfoAllOf) SetClassId(v string) {
	o.ClassId = v
}

// GetObjectType returns the ObjectType field value
func (o *ApplianceClusterInfoAllOf) GetObjectType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ObjectType
}

// GetObjectTypeOk returns a tuple with the ObjectType field value
// and a boolean to check if the value has been set.
func (o *ApplianceClusterInfoAllOf) GetObjectTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ObjectType, true
}

// SetObjectType sets field value
func (o *ApplianceClusterInfoAllOf) SetObjectType(v string) {
	o.ObjectType = v
}

// GetDeploymentSize returns the DeploymentSize field value if set, zero value otherwise.
func (o *ApplianceClusterInfoAllOf) GetDeploymentSize() string {
	if o == nil || o.DeploymentSize == nil {
		var ret string
		return ret
	}
	return *o.DeploymentSize
}

// GetDeploymentSizeOk returns a tuple with the DeploymentSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplianceClusterInfoAllOf) GetDeploymentSizeOk() (*string, bool) {
	if o == nil || o.DeploymentSize == nil {
		return nil, false
	}
	return o.DeploymentSize, true
}

// HasDeploymentSize returns a boolean if a field has been set.
func (o *ApplianceClusterInfoAllOf) HasDeploymentSize() bool {
	if o != nil && o.DeploymentSize != nil {
		return true
	}

	return false
}

// SetDeploymentSize gets a reference to the given string and assigns it to the DeploymentSize field.
func (o *ApplianceClusterInfoAllOf) SetDeploymentSize(v string) {
	o.DeploymentSize = &v
}

// GetGateway returns the Gateway field value if set, zero value otherwise.
func (o *ApplianceClusterInfoAllOf) GetGateway() string {
	if o == nil || o.Gateway == nil {
		var ret string
		return ret
	}
	return *o.Gateway
}

// GetGatewayOk returns a tuple with the Gateway field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplianceClusterInfoAllOf) GetGatewayOk() (*string, bool) {
	if o == nil || o.Gateway == nil {
		return nil, false
	}
	return o.Gateway, true
}

// HasGateway returns a boolean if a field has been set.
func (o *ApplianceClusterInfoAllOf) HasGateway() bool {
	if o != nil && o.Gateway != nil {
		return true
	}

	return false
}

// SetGateway gets a reference to the given string and assigns it to the Gateway field.
func (o *ApplianceClusterInfoAllOf) SetGateway(v string) {
	o.Gateway = &v
}

// GetHostip returns the Hostip field value if set, zero value otherwise.
func (o *ApplianceClusterInfoAllOf) GetHostip() string {
	if o == nil || o.Hostip == nil {
		var ret string
		return ret
	}
	return *o.Hostip
}

// GetHostipOk returns a tuple with the Hostip field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplianceClusterInfoAllOf) GetHostipOk() (*string, bool) {
	if o == nil || o.Hostip == nil {
		return nil, false
	}
	return o.Hostip, true
}

// HasHostip returns a boolean if a field has been set.
func (o *ApplianceClusterInfoAllOf) HasHostip() bool {
	if o != nil && o.Hostip != nil {
		return true
	}

	return false
}

// SetHostip gets a reference to the given string and assigns it to the Hostip field.
func (o *ApplianceClusterInfoAllOf) SetHostip(v string) {
	o.Hostip = &v
}

// GetHostname returns the Hostname field value if set, zero value otherwise.
func (o *ApplianceClusterInfoAllOf) GetHostname() string {
	if o == nil || o.Hostname == nil {
		var ret string
		return ret
	}
	return *o.Hostname
}

// GetHostnameOk returns a tuple with the Hostname field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplianceClusterInfoAllOf) GetHostnameOk() (*string, bool) {
	if o == nil || o.Hostname == nil {
		return nil, false
	}
	return o.Hostname, true
}

// HasHostname returns a boolean if a field has been set.
func (o *ApplianceClusterInfoAllOf) HasHostname() bool {
	if o != nil && o.Hostname != nil {
		return true
	}

	return false
}

// SetHostname gets a reference to the given string and assigns it to the Hostname field.
func (o *ApplianceClusterInfoAllOf) SetHostname(v string) {
	o.Hostname = &v
}

// GetPeerkey returns the Peerkey field value if set, zero value otherwise.
func (o *ApplianceClusterInfoAllOf) GetPeerkey() string {
	if o == nil || o.Peerkey == nil {
		var ret string
		return ret
	}
	return *o.Peerkey
}

// GetPeerkeyOk returns a tuple with the Peerkey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplianceClusterInfoAllOf) GetPeerkeyOk() (*string, bool) {
	if o == nil || o.Peerkey == nil {
		return nil, false
	}
	return o.Peerkey, true
}

// HasPeerkey returns a boolean if a field has been set.
func (o *ApplianceClusterInfoAllOf) HasPeerkey() bool {
	if o != nil && o.Peerkey != nil {
		return true
	}

	return false
}

// SetPeerkey gets a reference to the given string and assigns it to the Peerkey field.
func (o *ApplianceClusterInfoAllOf) SetPeerkey(v string) {
	o.Peerkey = &v
}

// GetResponsekey returns the Responsekey field value if set, zero value otherwise.
func (o *ApplianceClusterInfoAllOf) GetResponsekey() string {
	if o == nil || o.Responsekey == nil {
		var ret string
		return ret
	}
	return *o.Responsekey
}

// GetResponsekeyOk returns a tuple with the Responsekey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplianceClusterInfoAllOf) GetResponsekeyOk() (*string, bool) {
	if o == nil || o.Responsekey == nil {
		return nil, false
	}
	return o.Responsekey, true
}

// HasResponsekey returns a boolean if a field has been set.
func (o *ApplianceClusterInfoAllOf) HasResponsekey() bool {
	if o != nil && o.Responsekey != nil {
		return true
	}

	return false
}

// SetResponsekey gets a reference to the given string and assigns it to the Responsekey field.
func (o *ApplianceClusterInfoAllOf) SetResponsekey(v string) {
	o.Responsekey = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *ApplianceClusterInfoAllOf) GetStatus() string {
	if o == nil || o.Status == nil {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplianceClusterInfoAllOf) GetStatusOk() (*string, bool) {
	if o == nil || o.Status == nil {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *ApplianceClusterInfoAllOf) HasStatus() bool {
	if o != nil && o.Status != nil {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *ApplianceClusterInfoAllOf) SetStatus(v string) {
	o.Status = &v
}

// GetSubnetmask returns the Subnetmask field value if set, zero value otherwise.
func (o *ApplianceClusterInfoAllOf) GetSubnetmask() string {
	if o == nil || o.Subnetmask == nil {
		var ret string
		return ret
	}
	return *o.Subnetmask
}

// GetSubnetmaskOk returns a tuple with the Subnetmask field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplianceClusterInfoAllOf) GetSubnetmaskOk() (*string, bool) {
	if o == nil || o.Subnetmask == nil {
		return nil, false
	}
	return o.Subnetmask, true
}

// HasSubnetmask returns a boolean if a field has been set.
func (o *ApplianceClusterInfoAllOf) HasSubnetmask() bool {
	if o != nil && o.Subnetmask != nil {
		return true
	}

	return false
}

// SetSubnetmask gets a reference to the given string and assigns it to the Subnetmask field.
func (o *ApplianceClusterInfoAllOf) SetSubnetmask(v string) {
	o.Subnetmask = &v
}

// GetUuid returns the Uuid field value if set, zero value otherwise.
func (o *ApplianceClusterInfoAllOf) GetUuid() string {
	if o == nil || o.Uuid == nil {
		var ret string
		return ret
	}
	return *o.Uuid
}

// GetUuidOk returns a tuple with the Uuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplianceClusterInfoAllOf) GetUuidOk() (*string, bool) {
	if o == nil || o.Uuid == nil {
		return nil, false
	}
	return o.Uuid, true
}

// HasUuid returns a boolean if a field has been set.
func (o *ApplianceClusterInfoAllOf) HasUuid() bool {
	if o != nil && o.Uuid != nil {
		return true
	}

	return false
}

// SetUuid gets a reference to the given string and assigns it to the Uuid field.
func (o *ApplianceClusterInfoAllOf) SetUuid(v string) {
	o.Uuid = &v
}

// GetAccount returns the Account field value if set, zero value otherwise.
func (o *ApplianceClusterInfoAllOf) GetAccount() IamAccountRelationship {
	if o == nil || o.Account == nil {
		var ret IamAccountRelationship
		return ret
	}
	return *o.Account
}

// GetAccountOk returns a tuple with the Account field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplianceClusterInfoAllOf) GetAccountOk() (*IamAccountRelationship, bool) {
	if o == nil || o.Account == nil {
		return nil, false
	}
	return o.Account, true
}

// HasAccount returns a boolean if a field has been set.
func (o *ApplianceClusterInfoAllOf) HasAccount() bool {
	if o != nil && o.Account != nil {
		return true
	}

	return false
}

// SetAccount gets a reference to the given IamAccountRelationship and assigns it to the Account field.
func (o *ApplianceClusterInfoAllOf) SetAccount(v IamAccountRelationship) {
	o.Account = &v
}

func (o ApplianceClusterInfoAllOf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["ClassId"] = o.ClassId
	}
	if true {
		toSerialize["ObjectType"] = o.ObjectType
	}
	if o.DeploymentSize != nil {
		toSerialize["DeploymentSize"] = o.DeploymentSize
	}
	if o.Gateway != nil {
		toSerialize["Gateway"] = o.Gateway
	}
	if o.Hostip != nil {
		toSerialize["Hostip"] = o.Hostip
	}
	if o.Hostname != nil {
		toSerialize["Hostname"] = o.Hostname
	}
	if o.Peerkey != nil {
		toSerialize["Peerkey"] = o.Peerkey
	}
	if o.Responsekey != nil {
		toSerialize["Responsekey"] = o.Responsekey
	}
	if o.Status != nil {
		toSerialize["Status"] = o.Status
	}
	if o.Subnetmask != nil {
		toSerialize["Subnetmask"] = o.Subnetmask
	}
	if o.Uuid != nil {
		toSerialize["Uuid"] = o.Uuid
	}
	if o.Account != nil {
		toSerialize["Account"] = o.Account
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *ApplianceClusterInfoAllOf) UnmarshalJSON(bytes []byte) (err error) {
	varApplianceClusterInfoAllOf := _ApplianceClusterInfoAllOf{}

	if err = json.Unmarshal(bytes, &varApplianceClusterInfoAllOf); err == nil {
		*o = ApplianceClusterInfoAllOf(varApplianceClusterInfoAllOf)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "ClassId")
		delete(additionalProperties, "ObjectType")
		delete(additionalProperties, "DeploymentSize")
		delete(additionalProperties, "Gateway")
		delete(additionalProperties, "Hostip")
		delete(additionalProperties, "Hostname")
		delete(additionalProperties, "Peerkey")
		delete(additionalProperties, "Responsekey")
		delete(additionalProperties, "Status")
		delete(additionalProperties, "Subnetmask")
		delete(additionalProperties, "Uuid")
		delete(additionalProperties, "Account")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableApplianceClusterInfoAllOf struct {
	value *ApplianceClusterInfoAllOf
	isSet bool
}

func (v NullableApplianceClusterInfoAllOf) Get() *ApplianceClusterInfoAllOf {
	return v.value
}

func (v *NullableApplianceClusterInfoAllOf) Set(val *ApplianceClusterInfoAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableApplianceClusterInfoAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableApplianceClusterInfoAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApplianceClusterInfoAllOf(val *ApplianceClusterInfoAllOf) *NullableApplianceClusterInfoAllOf {
	return &NullableApplianceClusterInfoAllOf{value: val, isSet: true}
}

func (v NullableApplianceClusterInfoAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApplianceClusterInfoAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
