/*
Cisco Intersight

Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations. The Intersight OpenAPI document defines the complete set of properties that are returned in the HTTP response. From that perspective, a client can expect that no additional properties are returned, unless these properties are explicitly defined in the OpenAPI document. However, when a client uses an older version of the Intersight OpenAPI document, the server may send additional properties because the software is more recent than the client. In that case, the client may receive properties that it does not know about. Some generated SDKs perform a strict validation of the HTTP response body against the OpenAPI document.

API version: 1.0.11-2025092610
Contact: intersight@cisco.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package intersight

import (
	"encoding/json"
	"fmt"
	"reflect"
	"strings"
)

// checks if the StoragePureDirectoryQuota type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &StoragePureDirectoryQuota{}

// StoragePureDirectoryQuota Managed directory quotas are created by adding NFS or SMB quota policies to managed directories.
type StoragePureDirectoryQuota struct {
	MoBaseMo
	// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.
	ClassId string `json:"ClassId"`
	// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
	ObjectType string `json:"ObjectType"`
	// Returns a value of true if the managed directory of the export has been destroyed and is pending eradication. The export can be recovered by recovering the destroyed managed directory.
	Destroyed *bool `json:"Destroyed,omitempty"`
	// Absolute path of the managed directory in the file system.
	DirectoryName *string `json:"DirectoryName,omitempty"`
	// Absolute path of the managed directory in the file system.
	DirectoryResourceType *string `json:"DirectoryResourceType,omitempty"`
	// Returns a value of true if the export policy that manages this export is enabled.
	Enabled *bool `json:"Enabled,omitempty"`
	// The export policy that manages this export. An export can be managed by at most one export policy.
	PolicyName *string `json:"PolicyName,omitempty"`
	// The export policy that manages this export. An export can be managed by at most one export policy.
	PolicyResourceType   *string                                        `json:"PolicyResourceType,omitempty"`
	Array                NullableStoragePureArrayRelationship           `json:"Array,omitempty"`
	Directory            NullableStoragePureDirectoryRelationship       `json:"Directory,omitempty"`
	Policy               NullableStoragePureDirectoryPolicyRelationship `json:"Policy,omitempty"`
	RegisteredDevice     NullableAssetDeviceRegistrationRelationship    `json:"RegisteredDevice,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _StoragePureDirectoryQuota StoragePureDirectoryQuota

// NewStoragePureDirectoryQuota instantiates a new StoragePureDirectoryQuota object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStoragePureDirectoryQuota(classId string, objectType string) *StoragePureDirectoryQuota {
	this := StoragePureDirectoryQuota{}
	this.ClassId = classId
	this.ObjectType = objectType
	return &this
}

// NewStoragePureDirectoryQuotaWithDefaults instantiates a new StoragePureDirectoryQuota object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStoragePureDirectoryQuotaWithDefaults() *StoragePureDirectoryQuota {
	this := StoragePureDirectoryQuota{}
	var classId string = "storage.PureDirectoryQuota"
	this.ClassId = classId
	var objectType string = "storage.PureDirectoryQuota"
	this.ObjectType = objectType
	return &this
}

// GetClassId returns the ClassId field value
func (o *StoragePureDirectoryQuota) GetClassId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ClassId
}

// GetClassIdOk returns a tuple with the ClassId field value
// and a boolean to check if the value has been set.
func (o *StoragePureDirectoryQuota) GetClassIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ClassId, true
}

// SetClassId sets field value
func (o *StoragePureDirectoryQuota) SetClassId(v string) {
	o.ClassId = v
}

// GetDefaultClassId returns the default value "storage.PureDirectoryQuota" of the ClassId field.
func (o *StoragePureDirectoryQuota) GetDefaultClassId() interface{} {
	return "storage.PureDirectoryQuota"
}

// GetObjectType returns the ObjectType field value
func (o *StoragePureDirectoryQuota) GetObjectType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ObjectType
}

// GetObjectTypeOk returns a tuple with the ObjectType field value
// and a boolean to check if the value has been set.
func (o *StoragePureDirectoryQuota) GetObjectTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ObjectType, true
}

// SetObjectType sets field value
func (o *StoragePureDirectoryQuota) SetObjectType(v string) {
	o.ObjectType = v
}

// GetDefaultObjectType returns the default value "storage.PureDirectoryQuota" of the ObjectType field.
func (o *StoragePureDirectoryQuota) GetDefaultObjectType() interface{} {
	return "storage.PureDirectoryQuota"
}

// GetDestroyed returns the Destroyed field value if set, zero value otherwise.
func (o *StoragePureDirectoryQuota) GetDestroyed() bool {
	if o == nil || IsNil(o.Destroyed) {
		var ret bool
		return ret
	}
	return *o.Destroyed
}

// GetDestroyedOk returns a tuple with the Destroyed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StoragePureDirectoryQuota) GetDestroyedOk() (*bool, bool) {
	if o == nil || IsNil(o.Destroyed) {
		return nil, false
	}
	return o.Destroyed, true
}

// HasDestroyed returns a boolean if a field has been set.
func (o *StoragePureDirectoryQuota) HasDestroyed() bool {
	if o != nil && !IsNil(o.Destroyed) {
		return true
	}

	return false
}

// SetDestroyed gets a reference to the given bool and assigns it to the Destroyed field.
func (o *StoragePureDirectoryQuota) SetDestroyed(v bool) {
	o.Destroyed = &v
}

// GetDirectoryName returns the DirectoryName field value if set, zero value otherwise.
func (o *StoragePureDirectoryQuota) GetDirectoryName() string {
	if o == nil || IsNil(o.DirectoryName) {
		var ret string
		return ret
	}
	return *o.DirectoryName
}

// GetDirectoryNameOk returns a tuple with the DirectoryName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StoragePureDirectoryQuota) GetDirectoryNameOk() (*string, bool) {
	if o == nil || IsNil(o.DirectoryName) {
		return nil, false
	}
	return o.DirectoryName, true
}

// HasDirectoryName returns a boolean if a field has been set.
func (o *StoragePureDirectoryQuota) HasDirectoryName() bool {
	if o != nil && !IsNil(o.DirectoryName) {
		return true
	}

	return false
}

// SetDirectoryName gets a reference to the given string and assigns it to the DirectoryName field.
func (o *StoragePureDirectoryQuota) SetDirectoryName(v string) {
	o.DirectoryName = &v
}

// GetDirectoryResourceType returns the DirectoryResourceType field value if set, zero value otherwise.
func (o *StoragePureDirectoryQuota) GetDirectoryResourceType() string {
	if o == nil || IsNil(o.DirectoryResourceType) {
		var ret string
		return ret
	}
	return *o.DirectoryResourceType
}

// GetDirectoryResourceTypeOk returns a tuple with the DirectoryResourceType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StoragePureDirectoryQuota) GetDirectoryResourceTypeOk() (*string, bool) {
	if o == nil || IsNil(o.DirectoryResourceType) {
		return nil, false
	}
	return o.DirectoryResourceType, true
}

// HasDirectoryResourceType returns a boolean if a field has been set.
func (o *StoragePureDirectoryQuota) HasDirectoryResourceType() bool {
	if o != nil && !IsNil(o.DirectoryResourceType) {
		return true
	}

	return false
}

// SetDirectoryResourceType gets a reference to the given string and assigns it to the DirectoryResourceType field.
func (o *StoragePureDirectoryQuota) SetDirectoryResourceType(v string) {
	o.DirectoryResourceType = &v
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *StoragePureDirectoryQuota) GetEnabled() bool {
	if o == nil || IsNil(o.Enabled) {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StoragePureDirectoryQuota) GetEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.Enabled) {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *StoragePureDirectoryQuota) HasEnabled() bool {
	if o != nil && !IsNil(o.Enabled) {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *StoragePureDirectoryQuota) SetEnabled(v bool) {
	o.Enabled = &v
}

// GetPolicyName returns the PolicyName field value if set, zero value otherwise.
func (o *StoragePureDirectoryQuota) GetPolicyName() string {
	if o == nil || IsNil(o.PolicyName) {
		var ret string
		return ret
	}
	return *o.PolicyName
}

// GetPolicyNameOk returns a tuple with the PolicyName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StoragePureDirectoryQuota) GetPolicyNameOk() (*string, bool) {
	if o == nil || IsNil(o.PolicyName) {
		return nil, false
	}
	return o.PolicyName, true
}

// HasPolicyName returns a boolean if a field has been set.
func (o *StoragePureDirectoryQuota) HasPolicyName() bool {
	if o != nil && !IsNil(o.PolicyName) {
		return true
	}

	return false
}

// SetPolicyName gets a reference to the given string and assigns it to the PolicyName field.
func (o *StoragePureDirectoryQuota) SetPolicyName(v string) {
	o.PolicyName = &v
}

// GetPolicyResourceType returns the PolicyResourceType field value if set, zero value otherwise.
func (o *StoragePureDirectoryQuota) GetPolicyResourceType() string {
	if o == nil || IsNil(o.PolicyResourceType) {
		var ret string
		return ret
	}
	return *o.PolicyResourceType
}

// GetPolicyResourceTypeOk returns a tuple with the PolicyResourceType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StoragePureDirectoryQuota) GetPolicyResourceTypeOk() (*string, bool) {
	if o == nil || IsNil(o.PolicyResourceType) {
		return nil, false
	}
	return o.PolicyResourceType, true
}

// HasPolicyResourceType returns a boolean if a field has been set.
func (o *StoragePureDirectoryQuota) HasPolicyResourceType() bool {
	if o != nil && !IsNil(o.PolicyResourceType) {
		return true
	}

	return false
}

// SetPolicyResourceType gets a reference to the given string and assigns it to the PolicyResourceType field.
func (o *StoragePureDirectoryQuota) SetPolicyResourceType(v string) {
	o.PolicyResourceType = &v
}

// GetArray returns the Array field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *StoragePureDirectoryQuota) GetArray() StoragePureArrayRelationship {
	if o == nil || IsNil(o.Array.Get()) {
		var ret StoragePureArrayRelationship
		return ret
	}
	return *o.Array.Get()
}

// GetArrayOk returns a tuple with the Array field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *StoragePureDirectoryQuota) GetArrayOk() (*StoragePureArrayRelationship, bool) {
	if o == nil {
		return nil, false
	}
	return o.Array.Get(), o.Array.IsSet()
}

// HasArray returns a boolean if a field has been set.
func (o *StoragePureDirectoryQuota) HasArray() bool {
	if o != nil && o.Array.IsSet() {
		return true
	}

	return false
}

// SetArray gets a reference to the given NullableStoragePureArrayRelationship and assigns it to the Array field.
func (o *StoragePureDirectoryQuota) SetArray(v StoragePureArrayRelationship) {
	o.Array.Set(&v)
}

// SetArrayNil sets the value for Array to be an explicit nil
func (o *StoragePureDirectoryQuota) SetArrayNil() {
	o.Array.Set(nil)
}

// UnsetArray ensures that no value is present for Array, not even an explicit nil
func (o *StoragePureDirectoryQuota) UnsetArray() {
	o.Array.Unset()
}

// GetDirectory returns the Directory field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *StoragePureDirectoryQuota) GetDirectory() StoragePureDirectoryRelationship {
	if o == nil || IsNil(o.Directory.Get()) {
		var ret StoragePureDirectoryRelationship
		return ret
	}
	return *o.Directory.Get()
}

// GetDirectoryOk returns a tuple with the Directory field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *StoragePureDirectoryQuota) GetDirectoryOk() (*StoragePureDirectoryRelationship, bool) {
	if o == nil {
		return nil, false
	}
	return o.Directory.Get(), o.Directory.IsSet()
}

// HasDirectory returns a boolean if a field has been set.
func (o *StoragePureDirectoryQuota) HasDirectory() bool {
	if o != nil && o.Directory.IsSet() {
		return true
	}

	return false
}

// SetDirectory gets a reference to the given NullableStoragePureDirectoryRelationship and assigns it to the Directory field.
func (o *StoragePureDirectoryQuota) SetDirectory(v StoragePureDirectoryRelationship) {
	o.Directory.Set(&v)
}

// SetDirectoryNil sets the value for Directory to be an explicit nil
func (o *StoragePureDirectoryQuota) SetDirectoryNil() {
	o.Directory.Set(nil)
}

// UnsetDirectory ensures that no value is present for Directory, not even an explicit nil
func (o *StoragePureDirectoryQuota) UnsetDirectory() {
	o.Directory.Unset()
}

// GetPolicy returns the Policy field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *StoragePureDirectoryQuota) GetPolicy() StoragePureDirectoryPolicyRelationship {
	if o == nil || IsNil(o.Policy.Get()) {
		var ret StoragePureDirectoryPolicyRelationship
		return ret
	}
	return *o.Policy.Get()
}

// GetPolicyOk returns a tuple with the Policy field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *StoragePureDirectoryQuota) GetPolicyOk() (*StoragePureDirectoryPolicyRelationship, bool) {
	if o == nil {
		return nil, false
	}
	return o.Policy.Get(), o.Policy.IsSet()
}

// HasPolicy returns a boolean if a field has been set.
func (o *StoragePureDirectoryQuota) HasPolicy() bool {
	if o != nil && o.Policy.IsSet() {
		return true
	}

	return false
}

// SetPolicy gets a reference to the given NullableStoragePureDirectoryPolicyRelationship and assigns it to the Policy field.
func (o *StoragePureDirectoryQuota) SetPolicy(v StoragePureDirectoryPolicyRelationship) {
	o.Policy.Set(&v)
}

// SetPolicyNil sets the value for Policy to be an explicit nil
func (o *StoragePureDirectoryQuota) SetPolicyNil() {
	o.Policy.Set(nil)
}

// UnsetPolicy ensures that no value is present for Policy, not even an explicit nil
func (o *StoragePureDirectoryQuota) UnsetPolicy() {
	o.Policy.Unset()
}

// GetRegisteredDevice returns the RegisteredDevice field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *StoragePureDirectoryQuota) GetRegisteredDevice() AssetDeviceRegistrationRelationship {
	if o == nil || IsNil(o.RegisteredDevice.Get()) {
		var ret AssetDeviceRegistrationRelationship
		return ret
	}
	return *o.RegisteredDevice.Get()
}

// GetRegisteredDeviceOk returns a tuple with the RegisteredDevice field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *StoragePureDirectoryQuota) GetRegisteredDeviceOk() (*AssetDeviceRegistrationRelationship, bool) {
	if o == nil {
		return nil, false
	}
	return o.RegisteredDevice.Get(), o.RegisteredDevice.IsSet()
}

// HasRegisteredDevice returns a boolean if a field has been set.
func (o *StoragePureDirectoryQuota) HasRegisteredDevice() bool {
	if o != nil && o.RegisteredDevice.IsSet() {
		return true
	}

	return false
}

// SetRegisteredDevice gets a reference to the given NullableAssetDeviceRegistrationRelationship and assigns it to the RegisteredDevice field.
func (o *StoragePureDirectoryQuota) SetRegisteredDevice(v AssetDeviceRegistrationRelationship) {
	o.RegisteredDevice.Set(&v)
}

// SetRegisteredDeviceNil sets the value for RegisteredDevice to be an explicit nil
func (o *StoragePureDirectoryQuota) SetRegisteredDeviceNil() {
	o.RegisteredDevice.Set(nil)
}

// UnsetRegisteredDevice ensures that no value is present for RegisteredDevice, not even an explicit nil
func (o *StoragePureDirectoryQuota) UnsetRegisteredDevice() {
	o.RegisteredDevice.Unset()
}

func (o StoragePureDirectoryQuota) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o StoragePureDirectoryQuota) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	serializedMoBaseMo, errMoBaseMo := json.Marshal(o.MoBaseMo)
	if errMoBaseMo != nil {
		return map[string]interface{}{}, errMoBaseMo
	}
	errMoBaseMo = json.Unmarshal([]byte(serializedMoBaseMo), &toSerialize)
	if errMoBaseMo != nil {
		return map[string]interface{}{}, errMoBaseMo
	}
	if _, exists := toSerialize["ClassId"]; !exists {
		toSerialize["ClassId"] = o.GetDefaultClassId()
	}
	toSerialize["ClassId"] = o.ClassId
	if _, exists := toSerialize["ObjectType"]; !exists {
		toSerialize["ObjectType"] = o.GetDefaultObjectType()
	}
	toSerialize["ObjectType"] = o.ObjectType
	if !IsNil(o.Destroyed) {
		toSerialize["Destroyed"] = o.Destroyed
	}
	if !IsNil(o.DirectoryName) {
		toSerialize["DirectoryName"] = o.DirectoryName
	}
	if !IsNil(o.DirectoryResourceType) {
		toSerialize["DirectoryResourceType"] = o.DirectoryResourceType
	}
	if !IsNil(o.Enabled) {
		toSerialize["Enabled"] = o.Enabled
	}
	if !IsNil(o.PolicyName) {
		toSerialize["PolicyName"] = o.PolicyName
	}
	if !IsNil(o.PolicyResourceType) {
		toSerialize["PolicyResourceType"] = o.PolicyResourceType
	}
	if o.Array.IsSet() {
		toSerialize["Array"] = o.Array.Get()
	}
	if o.Directory.IsSet() {
		toSerialize["Directory"] = o.Directory.Get()
	}
	if o.Policy.IsSet() {
		toSerialize["Policy"] = o.Policy.Get()
	}
	if o.RegisteredDevice.IsSet() {
		toSerialize["RegisteredDevice"] = o.RegisteredDevice.Get()
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *StoragePureDirectoryQuota) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"ClassId",
		"ObjectType",
	}

	// defaultValueFuncMap captures the default values for required properties.
	// These values are used when required properties are missing from the payload.
	defaultValueFuncMap := map[string]func() interface{}{
		"ClassId":    o.GetDefaultClassId,
		"ObjectType": o.GetDefaultObjectType,
	}
	var defaultValueApplied bool
	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			if _, ok := defaultValueFuncMap[requiredProperty]; ok {
				allProperties[requiredProperty] = defaultValueFuncMap[requiredProperty]()
				defaultValueApplied = true
			}
		}
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	if defaultValueApplied {
		data, err = json.Marshal(allProperties)
		if err != nil {
			return err
		}
	}
	type StoragePureDirectoryQuotaWithoutEmbeddedStruct struct {
		// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.
		ClassId string `json:"ClassId"`
		// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
		ObjectType string `json:"ObjectType"`
		// Returns a value of true if the managed directory of the export has been destroyed and is pending eradication. The export can be recovered by recovering the destroyed managed directory.
		Destroyed *bool `json:"Destroyed,omitempty"`
		// Absolute path of the managed directory in the file system.
		DirectoryName *string `json:"DirectoryName,omitempty"`
		// Absolute path of the managed directory in the file system.
		DirectoryResourceType *string `json:"DirectoryResourceType,omitempty"`
		// Returns a value of true if the export policy that manages this export is enabled.
		Enabled *bool `json:"Enabled,omitempty"`
		// The export policy that manages this export. An export can be managed by at most one export policy.
		PolicyName *string `json:"PolicyName,omitempty"`
		// The export policy that manages this export. An export can be managed by at most one export policy.
		PolicyResourceType *string                                        `json:"PolicyResourceType,omitempty"`
		Array              NullableStoragePureArrayRelationship           `json:"Array,omitempty"`
		Directory          NullableStoragePureDirectoryRelationship       `json:"Directory,omitempty"`
		Policy             NullableStoragePureDirectoryPolicyRelationship `json:"Policy,omitempty"`
		RegisteredDevice   NullableAssetDeviceRegistrationRelationship    `json:"RegisteredDevice,omitempty"`
	}

	varStoragePureDirectoryQuotaWithoutEmbeddedStruct := StoragePureDirectoryQuotaWithoutEmbeddedStruct{}

	err = json.Unmarshal(data, &varStoragePureDirectoryQuotaWithoutEmbeddedStruct)
	if err == nil {
		varStoragePureDirectoryQuota := _StoragePureDirectoryQuota{}
		varStoragePureDirectoryQuota.ClassId = varStoragePureDirectoryQuotaWithoutEmbeddedStruct.ClassId
		varStoragePureDirectoryQuota.ObjectType = varStoragePureDirectoryQuotaWithoutEmbeddedStruct.ObjectType
		varStoragePureDirectoryQuota.Destroyed = varStoragePureDirectoryQuotaWithoutEmbeddedStruct.Destroyed
		varStoragePureDirectoryQuota.DirectoryName = varStoragePureDirectoryQuotaWithoutEmbeddedStruct.DirectoryName
		varStoragePureDirectoryQuota.DirectoryResourceType = varStoragePureDirectoryQuotaWithoutEmbeddedStruct.DirectoryResourceType
		varStoragePureDirectoryQuota.Enabled = varStoragePureDirectoryQuotaWithoutEmbeddedStruct.Enabled
		varStoragePureDirectoryQuota.PolicyName = varStoragePureDirectoryQuotaWithoutEmbeddedStruct.PolicyName
		varStoragePureDirectoryQuota.PolicyResourceType = varStoragePureDirectoryQuotaWithoutEmbeddedStruct.PolicyResourceType
		varStoragePureDirectoryQuota.Array = varStoragePureDirectoryQuotaWithoutEmbeddedStruct.Array
		varStoragePureDirectoryQuota.Directory = varStoragePureDirectoryQuotaWithoutEmbeddedStruct.Directory
		varStoragePureDirectoryQuota.Policy = varStoragePureDirectoryQuotaWithoutEmbeddedStruct.Policy
		varStoragePureDirectoryQuota.RegisteredDevice = varStoragePureDirectoryQuotaWithoutEmbeddedStruct.RegisteredDevice
		*o = StoragePureDirectoryQuota(varStoragePureDirectoryQuota)
	} else {
		return err
	}

	varStoragePureDirectoryQuota := _StoragePureDirectoryQuota{}

	err = json.Unmarshal(data, &varStoragePureDirectoryQuota)
	if err == nil {
		o.MoBaseMo = varStoragePureDirectoryQuota.MoBaseMo
	} else {
		return err
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "ClassId")
		delete(additionalProperties, "ObjectType")
		delete(additionalProperties, "Destroyed")
		delete(additionalProperties, "DirectoryName")
		delete(additionalProperties, "DirectoryResourceType")
		delete(additionalProperties, "Enabled")
		delete(additionalProperties, "PolicyName")
		delete(additionalProperties, "PolicyResourceType")
		delete(additionalProperties, "Array")
		delete(additionalProperties, "Directory")
		delete(additionalProperties, "Policy")
		delete(additionalProperties, "RegisteredDevice")

		// remove fields from embedded structs
		reflectMoBaseMo := reflect.ValueOf(o.MoBaseMo)
		for i := 0; i < reflectMoBaseMo.Type().NumField(); i++ {
			t := reflectMoBaseMo.Type().Field(i)

			if jsonTag := t.Tag.Get("json"); jsonTag != "" {
				fieldName := ""
				if commaIdx := strings.Index(jsonTag, ","); commaIdx > 0 {
					fieldName = jsonTag[:commaIdx]
				} else {
					fieldName = jsonTag
				}
				if fieldName != "AdditionalProperties" {
					delete(additionalProperties, fieldName)
				}
			}
		}

		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableStoragePureDirectoryQuota struct {
	value *StoragePureDirectoryQuota
	isSet bool
}

func (v NullableStoragePureDirectoryQuota) Get() *StoragePureDirectoryQuota {
	return v.value
}

func (v *NullableStoragePureDirectoryQuota) Set(val *StoragePureDirectoryQuota) {
	v.value = val
	v.isSet = true
}

func (v NullableStoragePureDirectoryQuota) IsSet() bool {
	return v.isSet
}

func (v *NullableStoragePureDirectoryQuota) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStoragePureDirectoryQuota(val *StoragePureDirectoryQuota) *NullableStoragePureDirectoryQuota {
	return &NullableStoragePureDirectoryQuota{value: val, isSet: true}
}

func (v NullableStoragePureDirectoryQuota) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStoragePureDirectoryQuota) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
