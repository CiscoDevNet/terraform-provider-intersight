/*
Cisco Intersight

Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations. The Intersight OpenAPI document defines the complete set of properties that are returned in the HTTP response. From that perspective, a client can expect that no additional properties are returned, unless these properties are explicitly defined in the OpenAPI document. However, when a client uses an older version of the Intersight OpenAPI document, the server may send additional properties because the software is more recent than the client. In that case, the client may receive properties that it does not know about. Some generated SDKs perform a strict validation of the HTTP response body against the OpenAPI document.

API version: 1.0.11-18775
Contact: intersight@cisco.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package intersight

import (
	"encoding/json"
	"fmt"
	"reflect"
	"strings"
)

// checks if the StorageNetAppBaseDisk type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &StorageNetAppBaseDisk{}

// StorageNetAppBaseDisk NetApp base disk is a storage array disk.
type StorageNetAppBaseDisk struct {
	StorageBaseArrayDisk
	// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.
	ClassId string `json:"ClassId"`
	// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
	ObjectType string `json:"ObjectType"`
	// The NetApp base disk model.
	BaseDiskModel *string `json:"BaseDiskModel,omitempty"`
	// Unique identity of the device.
	ClusterUuid *string `json:"ClusterUuid,omitempty" validate:"regexp=^$|^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"`
	// Supported container type for NetApp disk. * `Unknown` - Default container type is currently unknown. * `Aggregate` - Disk is used as a physical disk in an aggregate. * `Broken` - Disk is in a broken pool. * `Label Maintenance` - Disk is in online label maintenance list. * `Foreign` - Array LUN has been marked foreign. * `Maintenance` - Disk is in maintenance center. * `Mediator` - A mediator disk is a disk used on non-shared HA systems hosted by an external node which is used to communicate the viability of the storage failover between non-shared HA nodes. * `Shared` - Disk is partitioned or in a storage pool. * `Remote` - Disk belongs to a remote cluster. * `Spare` - The disk is a spare disk. * `Unassigned` - Disk ownership has not been assigned. * `Unsupported` - The disk is not supported.
	ContainerType *string `json:"ContainerType,omitempty"`
	// NetApp base disk shelf bay.
	DiskBay *int64 `json:"DiskBay,omitempty"`
	// NetApp base disk serial number.
	DiskSerialNumber *string `json:"DiskSerialNumber,omitempty"`
	// NetApp base disk shelf id.
	DiskShelfId *string `json:"DiskShelfId,omitempty"`
	// NetApp base disk shelf model.
	DiskShelfModel *string `json:"DiskShelfModel,omitempty"`
	// NetApp base disk shelf name.
	DiskShelfName *string `json:"DiskShelfName,omitempty"`
	// The type of the NetApp disk. * `Unknown` - Default unknown disk type. * `SSDNVM` - Solid state disk with Non-Volatile Memory Express protocol enabled. * `ATA` - Advanced Technology Attachment is a type of disk drive that integrates the drive controller directly on the drive itself. * `FCAL` - For the FC-AL disk connection type, disk shelves are connected to the controller in a loop. * `BSAS` - Bridged SAS-SATA disks with added hardware to enable them to be plugged into a SAS-connected storage shelf. * `FSAS` - Near Line SAS. NL-SAS drives are enterprise SATA drives with a SAS interface, head, media, and rotational speed of traditional enterprise-class SATA drives with the fully capable SAS interface typical for classic SAS drives. * `LUN` - Logical Unit Number refers to a logical disk. * `SAS` - Storage disk with serial attached SCSI. * `MSATA` - SATA disk in multi-disk carrier storage shelf. * `SSD` - Storage disk with Solid state disk. * `VMDISK` - Virtual machine Data Disk.
	DiskType *string `json:"DiskType,omitempty"`
	// The node name for the disk.
	NodeName *string `json:"NodeName,omitempty"`
	// Current state of the NetApp disk. * `Present` - Storage disk state type is present. * `Copy` - Storage disk state type is copy. * `Broken` - Storage disk state type is broken. * `Maintenance` - Storage disk state type is maintenance. * `Partner` - Storage disk state type is partner. * `Pending` - Storage disk state type is pending. * `Reconstructing` - Storage disk state type is reconstructing. * `Removed` - Storage disk state type is removed. * `Spare` - Storage disk state type is spare. * `Unfail` - Storage disk state type is unfail. * `Zeroing` - Storage disk state type is zeroing.
	State *string `json:"State,omitempty"`
	// Universally unique identifier of the NetApp Disk.
	Uuid            *string                                  `json:"Uuid,omitempty" validate:"regexp=^$|^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"`
	Array           NullableStorageNetAppClusterRelationship `json:"Array,omitempty"`
	ArrayController NullableStorageNetAppNodeRelationship    `json:"ArrayController,omitempty"`
	// An array of relationships to storageNetAppAggregate resources.
	DiskPool []StorageNetAppAggregateRelationship `json:"DiskPool,omitempty"`
	// An array of relationships to storageNetAppDiskEvent resources.
	Events               []StorageNetAppDiskEventRelationship `json:"Events,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _StorageNetAppBaseDisk StorageNetAppBaseDisk

// NewStorageNetAppBaseDisk instantiates a new StorageNetAppBaseDisk object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStorageNetAppBaseDisk(classId string, objectType string) *StorageNetAppBaseDisk {
	this := StorageNetAppBaseDisk{}
	this.ClassId = classId
	this.ObjectType = objectType
	return &this
}

// NewStorageNetAppBaseDiskWithDefaults instantiates a new StorageNetAppBaseDisk object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStorageNetAppBaseDiskWithDefaults() *StorageNetAppBaseDisk {
	this := StorageNetAppBaseDisk{}
	var classId string = "storage.NetAppBaseDisk"
	this.ClassId = classId
	var objectType string = "storage.NetAppBaseDisk"
	this.ObjectType = objectType
	return &this
}

// GetClassId returns the ClassId field value
func (o *StorageNetAppBaseDisk) GetClassId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ClassId
}

// GetClassIdOk returns a tuple with the ClassId field value
// and a boolean to check if the value has been set.
func (o *StorageNetAppBaseDisk) GetClassIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ClassId, true
}

// SetClassId sets field value
func (o *StorageNetAppBaseDisk) SetClassId(v string) {
	o.ClassId = v
}

// GetDefaultClassId returns the default value "storage.NetAppBaseDisk" of the ClassId field.
func (o *StorageNetAppBaseDisk) GetDefaultClassId() interface{} {
	return "storage.NetAppBaseDisk"
}

// GetObjectType returns the ObjectType field value
func (o *StorageNetAppBaseDisk) GetObjectType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ObjectType
}

// GetObjectTypeOk returns a tuple with the ObjectType field value
// and a boolean to check if the value has been set.
func (o *StorageNetAppBaseDisk) GetObjectTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ObjectType, true
}

// SetObjectType sets field value
func (o *StorageNetAppBaseDisk) SetObjectType(v string) {
	o.ObjectType = v
}

// GetDefaultObjectType returns the default value "storage.NetAppBaseDisk" of the ObjectType field.
func (o *StorageNetAppBaseDisk) GetDefaultObjectType() interface{} {
	return "storage.NetAppBaseDisk"
}

// GetBaseDiskModel returns the BaseDiskModel field value if set, zero value otherwise.
func (o *StorageNetAppBaseDisk) GetBaseDiskModel() string {
	if o == nil || IsNil(o.BaseDiskModel) {
		var ret string
		return ret
	}
	return *o.BaseDiskModel
}

// GetBaseDiskModelOk returns a tuple with the BaseDiskModel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageNetAppBaseDisk) GetBaseDiskModelOk() (*string, bool) {
	if o == nil || IsNil(o.BaseDiskModel) {
		return nil, false
	}
	return o.BaseDiskModel, true
}

// HasBaseDiskModel returns a boolean if a field has been set.
func (o *StorageNetAppBaseDisk) HasBaseDiskModel() bool {
	if o != nil && !IsNil(o.BaseDiskModel) {
		return true
	}

	return false
}

// SetBaseDiskModel gets a reference to the given string and assigns it to the BaseDiskModel field.
func (o *StorageNetAppBaseDisk) SetBaseDiskModel(v string) {
	o.BaseDiskModel = &v
}

// GetClusterUuid returns the ClusterUuid field value if set, zero value otherwise.
func (o *StorageNetAppBaseDisk) GetClusterUuid() string {
	if o == nil || IsNil(o.ClusterUuid) {
		var ret string
		return ret
	}
	return *o.ClusterUuid
}

// GetClusterUuidOk returns a tuple with the ClusterUuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageNetAppBaseDisk) GetClusterUuidOk() (*string, bool) {
	if o == nil || IsNil(o.ClusterUuid) {
		return nil, false
	}
	return o.ClusterUuid, true
}

// HasClusterUuid returns a boolean if a field has been set.
func (o *StorageNetAppBaseDisk) HasClusterUuid() bool {
	if o != nil && !IsNil(o.ClusterUuid) {
		return true
	}

	return false
}

// SetClusterUuid gets a reference to the given string and assigns it to the ClusterUuid field.
func (o *StorageNetAppBaseDisk) SetClusterUuid(v string) {
	o.ClusterUuid = &v
}

// GetContainerType returns the ContainerType field value if set, zero value otherwise.
func (o *StorageNetAppBaseDisk) GetContainerType() string {
	if o == nil || IsNil(o.ContainerType) {
		var ret string
		return ret
	}
	return *o.ContainerType
}

// GetContainerTypeOk returns a tuple with the ContainerType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageNetAppBaseDisk) GetContainerTypeOk() (*string, bool) {
	if o == nil || IsNil(o.ContainerType) {
		return nil, false
	}
	return o.ContainerType, true
}

// HasContainerType returns a boolean if a field has been set.
func (o *StorageNetAppBaseDisk) HasContainerType() bool {
	if o != nil && !IsNil(o.ContainerType) {
		return true
	}

	return false
}

// SetContainerType gets a reference to the given string and assigns it to the ContainerType field.
func (o *StorageNetAppBaseDisk) SetContainerType(v string) {
	o.ContainerType = &v
}

// GetDiskBay returns the DiskBay field value if set, zero value otherwise.
func (o *StorageNetAppBaseDisk) GetDiskBay() int64 {
	if o == nil || IsNil(o.DiskBay) {
		var ret int64
		return ret
	}
	return *o.DiskBay
}

// GetDiskBayOk returns a tuple with the DiskBay field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageNetAppBaseDisk) GetDiskBayOk() (*int64, bool) {
	if o == nil || IsNil(o.DiskBay) {
		return nil, false
	}
	return o.DiskBay, true
}

// HasDiskBay returns a boolean if a field has been set.
func (o *StorageNetAppBaseDisk) HasDiskBay() bool {
	if o != nil && !IsNil(o.DiskBay) {
		return true
	}

	return false
}

// SetDiskBay gets a reference to the given int64 and assigns it to the DiskBay field.
func (o *StorageNetAppBaseDisk) SetDiskBay(v int64) {
	o.DiskBay = &v
}

// GetDiskSerialNumber returns the DiskSerialNumber field value if set, zero value otherwise.
func (o *StorageNetAppBaseDisk) GetDiskSerialNumber() string {
	if o == nil || IsNil(o.DiskSerialNumber) {
		var ret string
		return ret
	}
	return *o.DiskSerialNumber
}

// GetDiskSerialNumberOk returns a tuple with the DiskSerialNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageNetAppBaseDisk) GetDiskSerialNumberOk() (*string, bool) {
	if o == nil || IsNil(o.DiskSerialNumber) {
		return nil, false
	}
	return o.DiskSerialNumber, true
}

// HasDiskSerialNumber returns a boolean if a field has been set.
func (o *StorageNetAppBaseDisk) HasDiskSerialNumber() bool {
	if o != nil && !IsNil(o.DiskSerialNumber) {
		return true
	}

	return false
}

// SetDiskSerialNumber gets a reference to the given string and assigns it to the DiskSerialNumber field.
func (o *StorageNetAppBaseDisk) SetDiskSerialNumber(v string) {
	o.DiskSerialNumber = &v
}

// GetDiskShelfId returns the DiskShelfId field value if set, zero value otherwise.
func (o *StorageNetAppBaseDisk) GetDiskShelfId() string {
	if o == nil || IsNil(o.DiskShelfId) {
		var ret string
		return ret
	}
	return *o.DiskShelfId
}

// GetDiskShelfIdOk returns a tuple with the DiskShelfId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageNetAppBaseDisk) GetDiskShelfIdOk() (*string, bool) {
	if o == nil || IsNil(o.DiskShelfId) {
		return nil, false
	}
	return o.DiskShelfId, true
}

// HasDiskShelfId returns a boolean if a field has been set.
func (o *StorageNetAppBaseDisk) HasDiskShelfId() bool {
	if o != nil && !IsNil(o.DiskShelfId) {
		return true
	}

	return false
}

// SetDiskShelfId gets a reference to the given string and assigns it to the DiskShelfId field.
func (o *StorageNetAppBaseDisk) SetDiskShelfId(v string) {
	o.DiskShelfId = &v
}

// GetDiskShelfModel returns the DiskShelfModel field value if set, zero value otherwise.
func (o *StorageNetAppBaseDisk) GetDiskShelfModel() string {
	if o == nil || IsNil(o.DiskShelfModel) {
		var ret string
		return ret
	}
	return *o.DiskShelfModel
}

// GetDiskShelfModelOk returns a tuple with the DiskShelfModel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageNetAppBaseDisk) GetDiskShelfModelOk() (*string, bool) {
	if o == nil || IsNil(o.DiskShelfModel) {
		return nil, false
	}
	return o.DiskShelfModel, true
}

// HasDiskShelfModel returns a boolean if a field has been set.
func (o *StorageNetAppBaseDisk) HasDiskShelfModel() bool {
	if o != nil && !IsNil(o.DiskShelfModel) {
		return true
	}

	return false
}

// SetDiskShelfModel gets a reference to the given string and assigns it to the DiskShelfModel field.
func (o *StorageNetAppBaseDisk) SetDiskShelfModel(v string) {
	o.DiskShelfModel = &v
}

// GetDiskShelfName returns the DiskShelfName field value if set, zero value otherwise.
func (o *StorageNetAppBaseDisk) GetDiskShelfName() string {
	if o == nil || IsNil(o.DiskShelfName) {
		var ret string
		return ret
	}
	return *o.DiskShelfName
}

// GetDiskShelfNameOk returns a tuple with the DiskShelfName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageNetAppBaseDisk) GetDiskShelfNameOk() (*string, bool) {
	if o == nil || IsNil(o.DiskShelfName) {
		return nil, false
	}
	return o.DiskShelfName, true
}

// HasDiskShelfName returns a boolean if a field has been set.
func (o *StorageNetAppBaseDisk) HasDiskShelfName() bool {
	if o != nil && !IsNil(o.DiskShelfName) {
		return true
	}

	return false
}

// SetDiskShelfName gets a reference to the given string and assigns it to the DiskShelfName field.
func (o *StorageNetAppBaseDisk) SetDiskShelfName(v string) {
	o.DiskShelfName = &v
}

// GetDiskType returns the DiskType field value if set, zero value otherwise.
func (o *StorageNetAppBaseDisk) GetDiskType() string {
	if o == nil || IsNil(o.DiskType) {
		var ret string
		return ret
	}
	return *o.DiskType
}

// GetDiskTypeOk returns a tuple with the DiskType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageNetAppBaseDisk) GetDiskTypeOk() (*string, bool) {
	if o == nil || IsNil(o.DiskType) {
		return nil, false
	}
	return o.DiskType, true
}

// HasDiskType returns a boolean if a field has been set.
func (o *StorageNetAppBaseDisk) HasDiskType() bool {
	if o != nil && !IsNil(o.DiskType) {
		return true
	}

	return false
}

// SetDiskType gets a reference to the given string and assigns it to the DiskType field.
func (o *StorageNetAppBaseDisk) SetDiskType(v string) {
	o.DiskType = &v
}

// GetNodeName returns the NodeName field value if set, zero value otherwise.
func (o *StorageNetAppBaseDisk) GetNodeName() string {
	if o == nil || IsNil(o.NodeName) {
		var ret string
		return ret
	}
	return *o.NodeName
}

// GetNodeNameOk returns a tuple with the NodeName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageNetAppBaseDisk) GetNodeNameOk() (*string, bool) {
	if o == nil || IsNil(o.NodeName) {
		return nil, false
	}
	return o.NodeName, true
}

// HasNodeName returns a boolean if a field has been set.
func (o *StorageNetAppBaseDisk) HasNodeName() bool {
	if o != nil && !IsNil(o.NodeName) {
		return true
	}

	return false
}

// SetNodeName gets a reference to the given string and assigns it to the NodeName field.
func (o *StorageNetAppBaseDisk) SetNodeName(v string) {
	o.NodeName = &v
}

// GetState returns the State field value if set, zero value otherwise.
func (o *StorageNetAppBaseDisk) GetState() string {
	if o == nil || IsNil(o.State) {
		var ret string
		return ret
	}
	return *o.State
}

// GetStateOk returns a tuple with the State field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageNetAppBaseDisk) GetStateOk() (*string, bool) {
	if o == nil || IsNil(o.State) {
		return nil, false
	}
	return o.State, true
}

// HasState returns a boolean if a field has been set.
func (o *StorageNetAppBaseDisk) HasState() bool {
	if o != nil && !IsNil(o.State) {
		return true
	}

	return false
}

// SetState gets a reference to the given string and assigns it to the State field.
func (o *StorageNetAppBaseDisk) SetState(v string) {
	o.State = &v
}

// GetUuid returns the Uuid field value if set, zero value otherwise.
func (o *StorageNetAppBaseDisk) GetUuid() string {
	if o == nil || IsNil(o.Uuid) {
		var ret string
		return ret
	}
	return *o.Uuid
}

// GetUuidOk returns a tuple with the Uuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageNetAppBaseDisk) GetUuidOk() (*string, bool) {
	if o == nil || IsNil(o.Uuid) {
		return nil, false
	}
	return o.Uuid, true
}

// HasUuid returns a boolean if a field has been set.
func (o *StorageNetAppBaseDisk) HasUuid() bool {
	if o != nil && !IsNil(o.Uuid) {
		return true
	}

	return false
}

// SetUuid gets a reference to the given string and assigns it to the Uuid field.
func (o *StorageNetAppBaseDisk) SetUuid(v string) {
	o.Uuid = &v
}

// GetArray returns the Array field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *StorageNetAppBaseDisk) GetArray() StorageNetAppClusterRelationship {
	if o == nil || IsNil(o.Array.Get()) {
		var ret StorageNetAppClusterRelationship
		return ret
	}
	return *o.Array.Get()
}

// GetArrayOk returns a tuple with the Array field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *StorageNetAppBaseDisk) GetArrayOk() (*StorageNetAppClusterRelationship, bool) {
	if o == nil {
		return nil, false
	}
	return o.Array.Get(), o.Array.IsSet()
}

// HasArray returns a boolean if a field has been set.
func (o *StorageNetAppBaseDisk) HasArray() bool {
	if o != nil && o.Array.IsSet() {
		return true
	}

	return false
}

// SetArray gets a reference to the given NullableStorageNetAppClusterRelationship and assigns it to the Array field.
func (o *StorageNetAppBaseDisk) SetArray(v StorageNetAppClusterRelationship) {
	o.Array.Set(&v)
}

// SetArrayNil sets the value for Array to be an explicit nil
func (o *StorageNetAppBaseDisk) SetArrayNil() {
	o.Array.Set(nil)
}

// UnsetArray ensures that no value is present for Array, not even an explicit nil
func (o *StorageNetAppBaseDisk) UnsetArray() {
	o.Array.Unset()
}

// GetArrayController returns the ArrayController field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *StorageNetAppBaseDisk) GetArrayController() StorageNetAppNodeRelationship {
	if o == nil || IsNil(o.ArrayController.Get()) {
		var ret StorageNetAppNodeRelationship
		return ret
	}
	return *o.ArrayController.Get()
}

// GetArrayControllerOk returns a tuple with the ArrayController field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *StorageNetAppBaseDisk) GetArrayControllerOk() (*StorageNetAppNodeRelationship, bool) {
	if o == nil {
		return nil, false
	}
	return o.ArrayController.Get(), o.ArrayController.IsSet()
}

// HasArrayController returns a boolean if a field has been set.
func (o *StorageNetAppBaseDisk) HasArrayController() bool {
	if o != nil && o.ArrayController.IsSet() {
		return true
	}

	return false
}

// SetArrayController gets a reference to the given NullableStorageNetAppNodeRelationship and assigns it to the ArrayController field.
func (o *StorageNetAppBaseDisk) SetArrayController(v StorageNetAppNodeRelationship) {
	o.ArrayController.Set(&v)
}

// SetArrayControllerNil sets the value for ArrayController to be an explicit nil
func (o *StorageNetAppBaseDisk) SetArrayControllerNil() {
	o.ArrayController.Set(nil)
}

// UnsetArrayController ensures that no value is present for ArrayController, not even an explicit nil
func (o *StorageNetAppBaseDisk) UnsetArrayController() {
	o.ArrayController.Unset()
}

// GetDiskPool returns the DiskPool field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *StorageNetAppBaseDisk) GetDiskPool() []StorageNetAppAggregateRelationship {
	if o == nil {
		var ret []StorageNetAppAggregateRelationship
		return ret
	}
	return o.DiskPool
}

// GetDiskPoolOk returns a tuple with the DiskPool field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *StorageNetAppBaseDisk) GetDiskPoolOk() ([]StorageNetAppAggregateRelationship, bool) {
	if o == nil || IsNil(o.DiskPool) {
		return nil, false
	}
	return o.DiskPool, true
}

// HasDiskPool returns a boolean if a field has been set.
func (o *StorageNetAppBaseDisk) HasDiskPool() bool {
	if o != nil && !IsNil(o.DiskPool) {
		return true
	}

	return false
}

// SetDiskPool gets a reference to the given []StorageNetAppAggregateRelationship and assigns it to the DiskPool field.
func (o *StorageNetAppBaseDisk) SetDiskPool(v []StorageNetAppAggregateRelationship) {
	o.DiskPool = v
}

// GetEvents returns the Events field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *StorageNetAppBaseDisk) GetEvents() []StorageNetAppDiskEventRelationship {
	if o == nil {
		var ret []StorageNetAppDiskEventRelationship
		return ret
	}
	return o.Events
}

// GetEventsOk returns a tuple with the Events field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *StorageNetAppBaseDisk) GetEventsOk() ([]StorageNetAppDiskEventRelationship, bool) {
	if o == nil || IsNil(o.Events) {
		return nil, false
	}
	return o.Events, true
}

// HasEvents returns a boolean if a field has been set.
func (o *StorageNetAppBaseDisk) HasEvents() bool {
	if o != nil && !IsNil(o.Events) {
		return true
	}

	return false
}

// SetEvents gets a reference to the given []StorageNetAppDiskEventRelationship and assigns it to the Events field.
func (o *StorageNetAppBaseDisk) SetEvents(v []StorageNetAppDiskEventRelationship) {
	o.Events = v
}

func (o StorageNetAppBaseDisk) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o StorageNetAppBaseDisk) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	serializedStorageBaseArrayDisk, errStorageBaseArrayDisk := json.Marshal(o.StorageBaseArrayDisk)
	if errStorageBaseArrayDisk != nil {
		return map[string]interface{}{}, errStorageBaseArrayDisk
	}
	errStorageBaseArrayDisk = json.Unmarshal([]byte(serializedStorageBaseArrayDisk), &toSerialize)
	if errStorageBaseArrayDisk != nil {
		return map[string]interface{}{}, errStorageBaseArrayDisk
	}
	if _, exists := toSerialize["ClassId"]; !exists {
		toSerialize["ClassId"] = o.GetDefaultClassId()
	}
	toSerialize["ClassId"] = o.ClassId
	if _, exists := toSerialize["ObjectType"]; !exists {
		toSerialize["ObjectType"] = o.GetDefaultObjectType()
	}
	toSerialize["ObjectType"] = o.ObjectType
	if !IsNil(o.BaseDiskModel) {
		toSerialize["BaseDiskModel"] = o.BaseDiskModel
	}
	if !IsNil(o.ClusterUuid) {
		toSerialize["ClusterUuid"] = o.ClusterUuid
	}
	if !IsNil(o.ContainerType) {
		toSerialize["ContainerType"] = o.ContainerType
	}
	if !IsNil(o.DiskBay) {
		toSerialize["DiskBay"] = o.DiskBay
	}
	if !IsNil(o.DiskSerialNumber) {
		toSerialize["DiskSerialNumber"] = o.DiskSerialNumber
	}
	if !IsNil(o.DiskShelfId) {
		toSerialize["DiskShelfId"] = o.DiskShelfId
	}
	if !IsNil(o.DiskShelfModel) {
		toSerialize["DiskShelfModel"] = o.DiskShelfModel
	}
	if !IsNil(o.DiskShelfName) {
		toSerialize["DiskShelfName"] = o.DiskShelfName
	}
	if !IsNil(o.DiskType) {
		toSerialize["DiskType"] = o.DiskType
	}
	if !IsNil(o.NodeName) {
		toSerialize["NodeName"] = o.NodeName
	}
	if !IsNil(o.State) {
		toSerialize["State"] = o.State
	}
	if !IsNil(o.Uuid) {
		toSerialize["Uuid"] = o.Uuid
	}
	if o.Array.IsSet() {
		toSerialize["Array"] = o.Array.Get()
	}
	if o.ArrayController.IsSet() {
		toSerialize["ArrayController"] = o.ArrayController.Get()
	}
	if o.DiskPool != nil {
		toSerialize["DiskPool"] = o.DiskPool
	}
	if o.Events != nil {
		toSerialize["Events"] = o.Events
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *StorageNetAppBaseDisk) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"ClassId",
		"ObjectType",
	}

	// defaultValueFuncMap captures the default values for required properties.
	// These values are used when required properties are missing from the payload.
	defaultValueFuncMap := map[string]func() interface{}{
		"ClassId":    o.GetDefaultClassId,
		"ObjectType": o.GetDefaultObjectType,
	}
	var defaultValueApplied bool
	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			if _, ok := defaultValueFuncMap[requiredProperty]; ok {
				allProperties[requiredProperty] = defaultValueFuncMap[requiredProperty]()
				defaultValueApplied = true
			}
		}
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	if defaultValueApplied {
		data, err = json.Marshal(allProperties)
		if err != nil {
			return err
		}
	}
	type StorageNetAppBaseDiskWithoutEmbeddedStruct struct {
		// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.
		ClassId string `json:"ClassId"`
		// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
		ObjectType string `json:"ObjectType"`
		// The NetApp base disk model.
		BaseDiskModel *string `json:"BaseDiskModel,omitempty"`
		// Unique identity of the device.
		ClusterUuid *string `json:"ClusterUuid,omitempty" validate:"regexp=^$|^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"`
		// Supported container type for NetApp disk. * `Unknown` - Default container type is currently unknown. * `Aggregate` - Disk is used as a physical disk in an aggregate. * `Broken` - Disk is in a broken pool. * `Label Maintenance` - Disk is in online label maintenance list. * `Foreign` - Array LUN has been marked foreign. * `Maintenance` - Disk is in maintenance center. * `Mediator` - A mediator disk is a disk used on non-shared HA systems hosted by an external node which is used to communicate the viability of the storage failover between non-shared HA nodes. * `Shared` - Disk is partitioned or in a storage pool. * `Remote` - Disk belongs to a remote cluster. * `Spare` - The disk is a spare disk. * `Unassigned` - Disk ownership has not been assigned. * `Unsupported` - The disk is not supported.
		ContainerType *string `json:"ContainerType,omitempty"`
		// NetApp base disk shelf bay.
		DiskBay *int64 `json:"DiskBay,omitempty"`
		// NetApp base disk serial number.
		DiskSerialNumber *string `json:"DiskSerialNumber,omitempty"`
		// NetApp base disk shelf id.
		DiskShelfId *string `json:"DiskShelfId,omitempty"`
		// NetApp base disk shelf model.
		DiskShelfModel *string `json:"DiskShelfModel,omitempty"`
		// NetApp base disk shelf name.
		DiskShelfName *string `json:"DiskShelfName,omitempty"`
		// The type of the NetApp disk. * `Unknown` - Default unknown disk type. * `SSDNVM` - Solid state disk with Non-Volatile Memory Express protocol enabled. * `ATA` - Advanced Technology Attachment is a type of disk drive that integrates the drive controller directly on the drive itself. * `FCAL` - For the FC-AL disk connection type, disk shelves are connected to the controller in a loop. * `BSAS` - Bridged SAS-SATA disks with added hardware to enable them to be plugged into a SAS-connected storage shelf. * `FSAS` - Near Line SAS. NL-SAS drives are enterprise SATA drives with a SAS interface, head, media, and rotational speed of traditional enterprise-class SATA drives with the fully capable SAS interface typical for classic SAS drives. * `LUN` - Logical Unit Number refers to a logical disk. * `SAS` - Storage disk with serial attached SCSI. * `MSATA` - SATA disk in multi-disk carrier storage shelf. * `SSD` - Storage disk with Solid state disk. * `VMDISK` - Virtual machine Data Disk.
		DiskType *string `json:"DiskType,omitempty"`
		// The node name for the disk.
		NodeName *string `json:"NodeName,omitempty"`
		// Current state of the NetApp disk. * `Present` - Storage disk state type is present. * `Copy` - Storage disk state type is copy. * `Broken` - Storage disk state type is broken. * `Maintenance` - Storage disk state type is maintenance. * `Partner` - Storage disk state type is partner. * `Pending` - Storage disk state type is pending. * `Reconstructing` - Storage disk state type is reconstructing. * `Removed` - Storage disk state type is removed. * `Spare` - Storage disk state type is spare. * `Unfail` - Storage disk state type is unfail. * `Zeroing` - Storage disk state type is zeroing.
		State *string `json:"State,omitempty"`
		// Universally unique identifier of the NetApp Disk.
		Uuid            *string                                  `json:"Uuid,omitempty" validate:"regexp=^$|^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"`
		Array           NullableStorageNetAppClusterRelationship `json:"Array,omitempty"`
		ArrayController NullableStorageNetAppNodeRelationship    `json:"ArrayController,omitempty"`
		// An array of relationships to storageNetAppAggregate resources.
		DiskPool []StorageNetAppAggregateRelationship `json:"DiskPool,omitempty"`
		// An array of relationships to storageNetAppDiskEvent resources.
		Events []StorageNetAppDiskEventRelationship `json:"Events,omitempty"`
	}

	varStorageNetAppBaseDiskWithoutEmbeddedStruct := StorageNetAppBaseDiskWithoutEmbeddedStruct{}

	err = json.Unmarshal(data, &varStorageNetAppBaseDiskWithoutEmbeddedStruct)
	if err == nil {
		varStorageNetAppBaseDisk := _StorageNetAppBaseDisk{}
		varStorageNetAppBaseDisk.ClassId = varStorageNetAppBaseDiskWithoutEmbeddedStruct.ClassId
		varStorageNetAppBaseDisk.ObjectType = varStorageNetAppBaseDiskWithoutEmbeddedStruct.ObjectType
		varStorageNetAppBaseDisk.BaseDiskModel = varStorageNetAppBaseDiskWithoutEmbeddedStruct.BaseDiskModel
		varStorageNetAppBaseDisk.ClusterUuid = varStorageNetAppBaseDiskWithoutEmbeddedStruct.ClusterUuid
		varStorageNetAppBaseDisk.ContainerType = varStorageNetAppBaseDiskWithoutEmbeddedStruct.ContainerType
		varStorageNetAppBaseDisk.DiskBay = varStorageNetAppBaseDiskWithoutEmbeddedStruct.DiskBay
		varStorageNetAppBaseDisk.DiskSerialNumber = varStorageNetAppBaseDiskWithoutEmbeddedStruct.DiskSerialNumber
		varStorageNetAppBaseDisk.DiskShelfId = varStorageNetAppBaseDiskWithoutEmbeddedStruct.DiskShelfId
		varStorageNetAppBaseDisk.DiskShelfModel = varStorageNetAppBaseDiskWithoutEmbeddedStruct.DiskShelfModel
		varStorageNetAppBaseDisk.DiskShelfName = varStorageNetAppBaseDiskWithoutEmbeddedStruct.DiskShelfName
		varStorageNetAppBaseDisk.DiskType = varStorageNetAppBaseDiskWithoutEmbeddedStruct.DiskType
		varStorageNetAppBaseDisk.NodeName = varStorageNetAppBaseDiskWithoutEmbeddedStruct.NodeName
		varStorageNetAppBaseDisk.State = varStorageNetAppBaseDiskWithoutEmbeddedStruct.State
		varStorageNetAppBaseDisk.Uuid = varStorageNetAppBaseDiskWithoutEmbeddedStruct.Uuid
		varStorageNetAppBaseDisk.Array = varStorageNetAppBaseDiskWithoutEmbeddedStruct.Array
		varStorageNetAppBaseDisk.ArrayController = varStorageNetAppBaseDiskWithoutEmbeddedStruct.ArrayController
		varStorageNetAppBaseDisk.DiskPool = varStorageNetAppBaseDiskWithoutEmbeddedStruct.DiskPool
		varStorageNetAppBaseDisk.Events = varStorageNetAppBaseDiskWithoutEmbeddedStruct.Events
		*o = StorageNetAppBaseDisk(varStorageNetAppBaseDisk)
	} else {
		return err
	}

	varStorageNetAppBaseDisk := _StorageNetAppBaseDisk{}

	err = json.Unmarshal(data, &varStorageNetAppBaseDisk)
	if err == nil {
		o.StorageBaseArrayDisk = varStorageNetAppBaseDisk.StorageBaseArrayDisk
	} else {
		return err
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "ClassId")
		delete(additionalProperties, "ObjectType")
		delete(additionalProperties, "BaseDiskModel")
		delete(additionalProperties, "ClusterUuid")
		delete(additionalProperties, "ContainerType")
		delete(additionalProperties, "DiskBay")
		delete(additionalProperties, "DiskSerialNumber")
		delete(additionalProperties, "DiskShelfId")
		delete(additionalProperties, "DiskShelfModel")
		delete(additionalProperties, "DiskShelfName")
		delete(additionalProperties, "DiskType")
		delete(additionalProperties, "NodeName")
		delete(additionalProperties, "State")
		delete(additionalProperties, "Uuid")
		delete(additionalProperties, "Array")
		delete(additionalProperties, "ArrayController")
		delete(additionalProperties, "DiskPool")
		delete(additionalProperties, "Events")

		// remove fields from embedded structs
		reflectStorageBaseArrayDisk := reflect.ValueOf(o.StorageBaseArrayDisk)
		for i := 0; i < reflectStorageBaseArrayDisk.Type().NumField(); i++ {
			t := reflectStorageBaseArrayDisk.Type().Field(i)

			if jsonTag := t.Tag.Get("json"); jsonTag != "" {
				fieldName := ""
				if commaIdx := strings.Index(jsonTag, ","); commaIdx > 0 {
					fieldName = jsonTag[:commaIdx]
				} else {
					fieldName = jsonTag
				}
				if fieldName != "AdditionalProperties" {
					delete(additionalProperties, fieldName)
				}
			}
		}

		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableStorageNetAppBaseDisk struct {
	value *StorageNetAppBaseDisk
	isSet bool
}

func (v NullableStorageNetAppBaseDisk) Get() *StorageNetAppBaseDisk {
	return v.value
}

func (v *NullableStorageNetAppBaseDisk) Set(val *StorageNetAppBaseDisk) {
	v.value = val
	v.isSet = true
}

func (v NullableStorageNetAppBaseDisk) IsSet() bool {
	return v.isSet
}

func (v *NullableStorageNetAppBaseDisk) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStorageNetAppBaseDisk(val *StorageNetAppBaseDisk) *NullableStorageNetAppBaseDisk {
	return &NullableStorageNetAppBaseDisk{value: val, isSet: true}
}

func (v NullableStorageNetAppBaseDisk) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStorageNetAppBaseDisk) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
