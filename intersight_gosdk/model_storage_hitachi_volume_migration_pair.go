/*
Cisco Intersight

Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations. The Intersight OpenAPI document defines the complete set of properties that are returned in the HTTP response. From that perspective, a client can expect that no additional properties are returned, unless these properties are explicitly defined in the OpenAPI document. However, when a client uses an older version of the Intersight OpenAPI document, the server may send additional properties because the software is more recent than the client. In that case, the client may receive properties that it does not know about. Some generated SDKs perform a strict validation of the HTTP response body against the OpenAPI document.

API version: 1.0.11-14828
Contact: intersight@cisco.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package intersight

import (
	"encoding/json"
	"reflect"
	"strings"
)

// StorageHitachiVolumeMigrationPair A copy pair to be used for Volume Migration in Hitachi storage array.
type StorageHitachiVolumeMigrationPair struct {
	MoBaseMo
	// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.
	ClassId string `json:"ClassId"`
	// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
	ObjectType string `json:"ObjectType"`
	// Copy mode. NotSynchronized or VolumeMigration is stored.
	CopyMode *string `json:"CopyMode,omitempty"`
	// Object ID of the pair. The following informations of pair are output, separated by commas. <copy group name>, <device group name for the P-VOL (source volume)>, <device group name for the S-VOL (target volume)>, <name of the pair>.
	LocalCloneCopypairId *string `json:"LocalCloneCopypairId,omitempty"`
	// LDEV number of the P-VOL (source volume) with a decimal (base 10) number.
	PvolLdevId *int64 `json:"PvolLdevId,omitempty"`
	// Pair volume status of the P-VOL.
	PvolStatus *string `json:"PvolStatus,omitempty"`
	// LDEV number of the S-VOL (target volume) with a decimal (base 10) number.
	SvolLdevId *int64 `json:"SvolLdevId,omitempty"`
	// Pair volume status of the S-VOL.
	SvolStatus           *string                              `json:"SvolStatus,omitempty"`
	Array                *StorageHitachiArrayRelationship     `json:"Array,omitempty"`
	RegisteredDevice     *AssetDeviceRegistrationRelationship `json:"RegisteredDevice,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _StorageHitachiVolumeMigrationPair StorageHitachiVolumeMigrationPair

// NewStorageHitachiVolumeMigrationPair instantiates a new StorageHitachiVolumeMigrationPair object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStorageHitachiVolumeMigrationPair(classId string, objectType string) *StorageHitachiVolumeMigrationPair {
	this := StorageHitachiVolumeMigrationPair{}
	this.ClassId = classId
	this.ObjectType = objectType
	return &this
}

// NewStorageHitachiVolumeMigrationPairWithDefaults instantiates a new StorageHitachiVolumeMigrationPair object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStorageHitachiVolumeMigrationPairWithDefaults() *StorageHitachiVolumeMigrationPair {
	this := StorageHitachiVolumeMigrationPair{}
	var classId string = "storage.HitachiVolumeMigrationPair"
	this.ClassId = classId
	var objectType string = "storage.HitachiVolumeMigrationPair"
	this.ObjectType = objectType
	return &this
}

// GetClassId returns the ClassId field value
func (o *StorageHitachiVolumeMigrationPair) GetClassId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ClassId
}

// GetClassIdOk returns a tuple with the ClassId field value
// and a boolean to check if the value has been set.
func (o *StorageHitachiVolumeMigrationPair) GetClassIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ClassId, true
}

// SetClassId sets field value
func (o *StorageHitachiVolumeMigrationPair) SetClassId(v string) {
	o.ClassId = v
}

// GetObjectType returns the ObjectType field value
func (o *StorageHitachiVolumeMigrationPair) GetObjectType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ObjectType
}

// GetObjectTypeOk returns a tuple with the ObjectType field value
// and a boolean to check if the value has been set.
func (o *StorageHitachiVolumeMigrationPair) GetObjectTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ObjectType, true
}

// SetObjectType sets field value
func (o *StorageHitachiVolumeMigrationPair) SetObjectType(v string) {
	o.ObjectType = v
}

// GetCopyMode returns the CopyMode field value if set, zero value otherwise.
func (o *StorageHitachiVolumeMigrationPair) GetCopyMode() string {
	if o == nil || o.CopyMode == nil {
		var ret string
		return ret
	}
	return *o.CopyMode
}

// GetCopyModeOk returns a tuple with the CopyMode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageHitachiVolumeMigrationPair) GetCopyModeOk() (*string, bool) {
	if o == nil || o.CopyMode == nil {
		return nil, false
	}
	return o.CopyMode, true
}

// HasCopyMode returns a boolean if a field has been set.
func (o *StorageHitachiVolumeMigrationPair) HasCopyMode() bool {
	if o != nil && o.CopyMode != nil {
		return true
	}

	return false
}

// SetCopyMode gets a reference to the given string and assigns it to the CopyMode field.
func (o *StorageHitachiVolumeMigrationPair) SetCopyMode(v string) {
	o.CopyMode = &v
}

// GetLocalCloneCopypairId returns the LocalCloneCopypairId field value if set, zero value otherwise.
func (o *StorageHitachiVolumeMigrationPair) GetLocalCloneCopypairId() string {
	if o == nil || o.LocalCloneCopypairId == nil {
		var ret string
		return ret
	}
	return *o.LocalCloneCopypairId
}

// GetLocalCloneCopypairIdOk returns a tuple with the LocalCloneCopypairId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageHitachiVolumeMigrationPair) GetLocalCloneCopypairIdOk() (*string, bool) {
	if o == nil || o.LocalCloneCopypairId == nil {
		return nil, false
	}
	return o.LocalCloneCopypairId, true
}

// HasLocalCloneCopypairId returns a boolean if a field has been set.
func (o *StorageHitachiVolumeMigrationPair) HasLocalCloneCopypairId() bool {
	if o != nil && o.LocalCloneCopypairId != nil {
		return true
	}

	return false
}

// SetLocalCloneCopypairId gets a reference to the given string and assigns it to the LocalCloneCopypairId field.
func (o *StorageHitachiVolumeMigrationPair) SetLocalCloneCopypairId(v string) {
	o.LocalCloneCopypairId = &v
}

// GetPvolLdevId returns the PvolLdevId field value if set, zero value otherwise.
func (o *StorageHitachiVolumeMigrationPair) GetPvolLdevId() int64 {
	if o == nil || o.PvolLdevId == nil {
		var ret int64
		return ret
	}
	return *o.PvolLdevId
}

// GetPvolLdevIdOk returns a tuple with the PvolLdevId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageHitachiVolumeMigrationPair) GetPvolLdevIdOk() (*int64, bool) {
	if o == nil || o.PvolLdevId == nil {
		return nil, false
	}
	return o.PvolLdevId, true
}

// HasPvolLdevId returns a boolean if a field has been set.
func (o *StorageHitachiVolumeMigrationPair) HasPvolLdevId() bool {
	if o != nil && o.PvolLdevId != nil {
		return true
	}

	return false
}

// SetPvolLdevId gets a reference to the given int64 and assigns it to the PvolLdevId field.
func (o *StorageHitachiVolumeMigrationPair) SetPvolLdevId(v int64) {
	o.PvolLdevId = &v
}

// GetPvolStatus returns the PvolStatus field value if set, zero value otherwise.
func (o *StorageHitachiVolumeMigrationPair) GetPvolStatus() string {
	if o == nil || o.PvolStatus == nil {
		var ret string
		return ret
	}
	return *o.PvolStatus
}

// GetPvolStatusOk returns a tuple with the PvolStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageHitachiVolumeMigrationPair) GetPvolStatusOk() (*string, bool) {
	if o == nil || o.PvolStatus == nil {
		return nil, false
	}
	return o.PvolStatus, true
}

// HasPvolStatus returns a boolean if a field has been set.
func (o *StorageHitachiVolumeMigrationPair) HasPvolStatus() bool {
	if o != nil && o.PvolStatus != nil {
		return true
	}

	return false
}

// SetPvolStatus gets a reference to the given string and assigns it to the PvolStatus field.
func (o *StorageHitachiVolumeMigrationPair) SetPvolStatus(v string) {
	o.PvolStatus = &v
}

// GetSvolLdevId returns the SvolLdevId field value if set, zero value otherwise.
func (o *StorageHitachiVolumeMigrationPair) GetSvolLdevId() int64 {
	if o == nil || o.SvolLdevId == nil {
		var ret int64
		return ret
	}
	return *o.SvolLdevId
}

// GetSvolLdevIdOk returns a tuple with the SvolLdevId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageHitachiVolumeMigrationPair) GetSvolLdevIdOk() (*int64, bool) {
	if o == nil || o.SvolLdevId == nil {
		return nil, false
	}
	return o.SvolLdevId, true
}

// HasSvolLdevId returns a boolean if a field has been set.
func (o *StorageHitachiVolumeMigrationPair) HasSvolLdevId() bool {
	if o != nil && o.SvolLdevId != nil {
		return true
	}

	return false
}

// SetSvolLdevId gets a reference to the given int64 and assigns it to the SvolLdevId field.
func (o *StorageHitachiVolumeMigrationPair) SetSvolLdevId(v int64) {
	o.SvolLdevId = &v
}

// GetSvolStatus returns the SvolStatus field value if set, zero value otherwise.
func (o *StorageHitachiVolumeMigrationPair) GetSvolStatus() string {
	if o == nil || o.SvolStatus == nil {
		var ret string
		return ret
	}
	return *o.SvolStatus
}

// GetSvolStatusOk returns a tuple with the SvolStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageHitachiVolumeMigrationPair) GetSvolStatusOk() (*string, bool) {
	if o == nil || o.SvolStatus == nil {
		return nil, false
	}
	return o.SvolStatus, true
}

// HasSvolStatus returns a boolean if a field has been set.
func (o *StorageHitachiVolumeMigrationPair) HasSvolStatus() bool {
	if o != nil && o.SvolStatus != nil {
		return true
	}

	return false
}

// SetSvolStatus gets a reference to the given string and assigns it to the SvolStatus field.
func (o *StorageHitachiVolumeMigrationPair) SetSvolStatus(v string) {
	o.SvolStatus = &v
}

// GetArray returns the Array field value if set, zero value otherwise.
func (o *StorageHitachiVolumeMigrationPair) GetArray() StorageHitachiArrayRelationship {
	if o == nil || o.Array == nil {
		var ret StorageHitachiArrayRelationship
		return ret
	}
	return *o.Array
}

// GetArrayOk returns a tuple with the Array field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageHitachiVolumeMigrationPair) GetArrayOk() (*StorageHitachiArrayRelationship, bool) {
	if o == nil || o.Array == nil {
		return nil, false
	}
	return o.Array, true
}

// HasArray returns a boolean if a field has been set.
func (o *StorageHitachiVolumeMigrationPair) HasArray() bool {
	if o != nil && o.Array != nil {
		return true
	}

	return false
}

// SetArray gets a reference to the given StorageHitachiArrayRelationship and assigns it to the Array field.
func (o *StorageHitachiVolumeMigrationPair) SetArray(v StorageHitachiArrayRelationship) {
	o.Array = &v
}

// GetRegisteredDevice returns the RegisteredDevice field value if set, zero value otherwise.
func (o *StorageHitachiVolumeMigrationPair) GetRegisteredDevice() AssetDeviceRegistrationRelationship {
	if o == nil || o.RegisteredDevice == nil {
		var ret AssetDeviceRegistrationRelationship
		return ret
	}
	return *o.RegisteredDevice
}

// GetRegisteredDeviceOk returns a tuple with the RegisteredDevice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageHitachiVolumeMigrationPair) GetRegisteredDeviceOk() (*AssetDeviceRegistrationRelationship, bool) {
	if o == nil || o.RegisteredDevice == nil {
		return nil, false
	}
	return o.RegisteredDevice, true
}

// HasRegisteredDevice returns a boolean if a field has been set.
func (o *StorageHitachiVolumeMigrationPair) HasRegisteredDevice() bool {
	if o != nil && o.RegisteredDevice != nil {
		return true
	}

	return false
}

// SetRegisteredDevice gets a reference to the given AssetDeviceRegistrationRelationship and assigns it to the RegisteredDevice field.
func (o *StorageHitachiVolumeMigrationPair) SetRegisteredDevice(v AssetDeviceRegistrationRelationship) {
	o.RegisteredDevice = &v
}

func (o StorageHitachiVolumeMigrationPair) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	serializedMoBaseMo, errMoBaseMo := json.Marshal(o.MoBaseMo)
	if errMoBaseMo != nil {
		return []byte{}, errMoBaseMo
	}
	errMoBaseMo = json.Unmarshal([]byte(serializedMoBaseMo), &toSerialize)
	if errMoBaseMo != nil {
		return []byte{}, errMoBaseMo
	}
	if true {
		toSerialize["ClassId"] = o.ClassId
	}
	if true {
		toSerialize["ObjectType"] = o.ObjectType
	}
	if o.CopyMode != nil {
		toSerialize["CopyMode"] = o.CopyMode
	}
	if o.LocalCloneCopypairId != nil {
		toSerialize["LocalCloneCopypairId"] = o.LocalCloneCopypairId
	}
	if o.PvolLdevId != nil {
		toSerialize["PvolLdevId"] = o.PvolLdevId
	}
	if o.PvolStatus != nil {
		toSerialize["PvolStatus"] = o.PvolStatus
	}
	if o.SvolLdevId != nil {
		toSerialize["SvolLdevId"] = o.SvolLdevId
	}
	if o.SvolStatus != nil {
		toSerialize["SvolStatus"] = o.SvolStatus
	}
	if o.Array != nil {
		toSerialize["Array"] = o.Array
	}
	if o.RegisteredDevice != nil {
		toSerialize["RegisteredDevice"] = o.RegisteredDevice
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *StorageHitachiVolumeMigrationPair) UnmarshalJSON(bytes []byte) (err error) {
	type StorageHitachiVolumeMigrationPairWithoutEmbeddedStruct struct {
		// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.
		ClassId string `json:"ClassId"`
		// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
		ObjectType string `json:"ObjectType"`
		// Copy mode. NotSynchronized or VolumeMigration is stored.
		CopyMode *string `json:"CopyMode,omitempty"`
		// Object ID of the pair. The following informations of pair are output, separated by commas. <copy group name>, <device group name for the P-VOL (source volume)>, <device group name for the S-VOL (target volume)>, <name of the pair>.
		LocalCloneCopypairId *string `json:"LocalCloneCopypairId,omitempty"`
		// LDEV number of the P-VOL (source volume) with a decimal (base 10) number.
		PvolLdevId *int64 `json:"PvolLdevId,omitempty"`
		// Pair volume status of the P-VOL.
		PvolStatus *string `json:"PvolStatus,omitempty"`
		// LDEV number of the S-VOL (target volume) with a decimal (base 10) number.
		SvolLdevId *int64 `json:"SvolLdevId,omitempty"`
		// Pair volume status of the S-VOL.
		SvolStatus       *string                              `json:"SvolStatus,omitempty"`
		Array            *StorageHitachiArrayRelationship     `json:"Array,omitempty"`
		RegisteredDevice *AssetDeviceRegistrationRelationship `json:"RegisteredDevice,omitempty"`
	}

	varStorageHitachiVolumeMigrationPairWithoutEmbeddedStruct := StorageHitachiVolumeMigrationPairWithoutEmbeddedStruct{}

	err = json.Unmarshal(bytes, &varStorageHitachiVolumeMigrationPairWithoutEmbeddedStruct)
	if err == nil {
		varStorageHitachiVolumeMigrationPair := _StorageHitachiVolumeMigrationPair{}
		varStorageHitachiVolumeMigrationPair.ClassId = varStorageHitachiVolumeMigrationPairWithoutEmbeddedStruct.ClassId
		varStorageHitachiVolumeMigrationPair.ObjectType = varStorageHitachiVolumeMigrationPairWithoutEmbeddedStruct.ObjectType
		varStorageHitachiVolumeMigrationPair.CopyMode = varStorageHitachiVolumeMigrationPairWithoutEmbeddedStruct.CopyMode
		varStorageHitachiVolumeMigrationPair.LocalCloneCopypairId = varStorageHitachiVolumeMigrationPairWithoutEmbeddedStruct.LocalCloneCopypairId
		varStorageHitachiVolumeMigrationPair.PvolLdevId = varStorageHitachiVolumeMigrationPairWithoutEmbeddedStruct.PvolLdevId
		varStorageHitachiVolumeMigrationPair.PvolStatus = varStorageHitachiVolumeMigrationPairWithoutEmbeddedStruct.PvolStatus
		varStorageHitachiVolumeMigrationPair.SvolLdevId = varStorageHitachiVolumeMigrationPairWithoutEmbeddedStruct.SvolLdevId
		varStorageHitachiVolumeMigrationPair.SvolStatus = varStorageHitachiVolumeMigrationPairWithoutEmbeddedStruct.SvolStatus
		varStorageHitachiVolumeMigrationPair.Array = varStorageHitachiVolumeMigrationPairWithoutEmbeddedStruct.Array
		varStorageHitachiVolumeMigrationPair.RegisteredDevice = varStorageHitachiVolumeMigrationPairWithoutEmbeddedStruct.RegisteredDevice
		*o = StorageHitachiVolumeMigrationPair(varStorageHitachiVolumeMigrationPair)
	} else {
		return err
	}

	varStorageHitachiVolumeMigrationPair := _StorageHitachiVolumeMigrationPair{}

	err = json.Unmarshal(bytes, &varStorageHitachiVolumeMigrationPair)
	if err == nil {
		o.MoBaseMo = varStorageHitachiVolumeMigrationPair.MoBaseMo
	} else {
		return err
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "ClassId")
		delete(additionalProperties, "ObjectType")
		delete(additionalProperties, "CopyMode")
		delete(additionalProperties, "LocalCloneCopypairId")
		delete(additionalProperties, "PvolLdevId")
		delete(additionalProperties, "PvolStatus")
		delete(additionalProperties, "SvolLdevId")
		delete(additionalProperties, "SvolStatus")
		delete(additionalProperties, "Array")
		delete(additionalProperties, "RegisteredDevice")

		// remove fields from embedded structs
		reflectMoBaseMo := reflect.ValueOf(o.MoBaseMo)
		for i := 0; i < reflectMoBaseMo.Type().NumField(); i++ {
			t := reflectMoBaseMo.Type().Field(i)

			if jsonTag := t.Tag.Get("json"); jsonTag != "" {
				fieldName := ""
				if commaIdx := strings.Index(jsonTag, ","); commaIdx > 0 {
					fieldName = jsonTag[:commaIdx]
				} else {
					fieldName = jsonTag
				}
				if fieldName != "AdditionalProperties" {
					delete(additionalProperties, fieldName)
				}
			}
		}

		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableStorageHitachiVolumeMigrationPair struct {
	value *StorageHitachiVolumeMigrationPair
	isSet bool
}

func (v NullableStorageHitachiVolumeMigrationPair) Get() *StorageHitachiVolumeMigrationPair {
	return v.value
}

func (v *NullableStorageHitachiVolumeMigrationPair) Set(val *StorageHitachiVolumeMigrationPair) {
	v.value = val
	v.isSet = true
}

func (v NullableStorageHitachiVolumeMigrationPair) IsSet() bool {
	return v.isSet
}

func (v *NullableStorageHitachiVolumeMigrationPair) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStorageHitachiVolumeMigrationPair(val *StorageHitachiVolumeMigrationPair) *NullableStorageHitachiVolumeMigrationPair {
	return &NullableStorageHitachiVolumeMigrationPair{value: val, isSet: true}
}

func (v NullableStorageHitachiVolumeMigrationPair) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStorageHitachiVolumeMigrationPair) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
