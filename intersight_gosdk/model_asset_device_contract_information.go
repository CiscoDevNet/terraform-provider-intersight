/*
Cisco Intersight

Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations. The Intersight OpenAPI document defines the complete set of properties that are returned in the HTTP response. From that perspective, a client can expect that no additional properties are returned, unless these properties are explicitly defined in the OpenAPI document. However, when a client uses an older version of the Intersight OpenAPI document, the server may send additional properties because the software is more recent than the client. In that case, the client may receive properties that it does not know about. Some generated SDKs perform a strict validation of the HTTP response body against the OpenAPI document.

API version: 1.0.11-2024100405
Contact: intersight@cisco.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package intersight

import (
	"encoding/json"
	"fmt"
	"reflect"
	"strings"
	"time"
)

// checks if the AssetDeviceContractInformation type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AssetDeviceContractInformation{}

// AssetDeviceContractInformation Contains information about the Cisco device identified by a unique identifier like serial number. It also contains information about warranty, contract status, validity of the device. In future this object could be expanded to store Case, RMA, device topology details. We observe new asset.DeviceRegisteration and use it as a trigger for creating an instance of this object. Currently the data is restricted to Cisco Standalone IMC servers and Fabric Interconnects. Support for more product lines will be added in future.
type AssetDeviceContractInformation struct {
	MoBaseMo
	// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.
	ClassId string `json:"ClassId"`
	// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
	ObjectType string                           `json:"ObjectType"`
	Contract   NullableAssetContractInformation `json:"Contract,omitempty"`
	// Calculated contract status that is derived based on the service line status and contract end date. It is different from serviceLineStatus property. serviceLineStatus gives us ACTIVE, OVERDUE, EXPIRED. These are transformed into Active, Expiring Soon and Not Covered. * `Unknown` - The device's contract status cannot be determined. * `Not Covered` - The Cisco device does not have a valid support contract. * `Active` - The Cisco device is covered under a active support contract. * `Expiring Soon` - The contract for this Cisco device is going to expire in the next 30 days.
	ContractStatus *string `json:"ContractStatus,omitempty"`
	// Reason for contract status. In case of Not Covered, reason is either Terminated or Expired. * `` - There is no reason for the specified contract status. * `Line Item Expired` - The Cisco device does not have a valid support contract, it has expired. * `Line Item Terminated` - The Cisco device does not have a valid support contract, it has been terminated.
	ContractStatusReason *string `json:"ContractStatusReason,omitempty"`
	// If Contract details doesn't exists in CCW API response, we will retry couple of times based on threshold value Retry count will track the number of retry happens due to contract details unavailability.
	ContractUnavailableRetryCount *int64 `json:"ContractUnavailableRetryCount,omitempty"`
	// Date and time indicating when the contract data is last fetched from Cisco's Contract API successfully.
	ContractUpdatedTime *time.Time `json:"ContractUpdatedTime,omitempty"`
	// End date of the covered product line. The coverage end date is fetched from Cisco SN2INFO API.
	CoveredProductLineEndDate *string `json:"CoveredProductLineEndDate,omitempty"`
	// Unique identifier of the Cisco device. This information is used to query Cisco APIx SN2INFO and CCWR databases.
	DeviceId *string `json:"DeviceId,omitempty"`
	// Type used to classify the device in Cisco Intersight. Currently supported values are Server and FabricInterconnect. This will be expanded to support more types in future. * `None` - A default value to catch cases where device type is not correctly detected. * `CiscoUcsServer` - A device of type server. It includes Cisco IMC and UCS Managed servers. * `CiscoUcsFI` - A device of type Fabric Interconnect. It includes the various types of Cisco Fabric Interconnects supported by Cisco Intersight. * `CiscoUcsChassis` - A device of type Chassis. It includes various UCS chassis supported by Cisco Intersight. * `CiscoNexusSwitch` - A device of type Nexus switch. It includes various Nexus switches supported by Cisco Intersight. * `CiscoMDSSwitch` - A device of type MDS switch. It includes various MDS switches supported by Cisco Intersight.
	DeviceType            *string                          `json:"DeviceType,omitempty"`
	EndCustomer           NullableAssetCustomerInformation `json:"EndCustomer,omitempty"`
	EndUserGlobalUltimate NullableAssetGlobalUltimate      `json:"EndUserGlobalUltimate,omitempty"`
	// Validates if the device is a genuine Cisco device. Validated is done using the Cisco SN2INFO APIs.
	IsValid *bool `json:"IsValid,omitempty"`
	// Item type of this specific Cisco device. example \"Chassis\".
	ItemType *string `json:"ItemType,omitempty"`
	// The last date of hardware support for this device.
	LastDateOfSupport *time.Time `json:"LastDateOfSupport,omitempty"`
	// Maintenance purchase order number for the Cisco device.
	MaintenancePurchaseOrderNumber *string `json:"MaintenancePurchaseOrderNumber,omitempty"`
	// Maintenance sales order number for the Cisco device.
	MaintenanceSalesOrderNumber *string `json:"MaintenanceSalesOrderNumber,omitempty"`
	// The platform type of the Cisco device. * `` - An unrecognized platform type. * `APIC` - A Cisco Application Policy Infrastructure Controller (APIC) cluster. * `CAPIC` - A Cisco Cloud Application Policy Infrastructure Controller (Cloud APIC) instance. * `DCNM` - A Cisco Data Center Network Manager (DCNM) instance. * `UCSFI` - A Cisco UCS Fabric Interconnect that is managed by Cisco UCS Manager (UCSM). * `UCSFIISM` - A Cisco UCS Fabric Interconnect that is managed by Cisco Intersight. * `IMC` - A standalone Cisco UCS rack server (Deprecated). * `IMCM4` - A standalone Cisco UCS C-Series or S-Series M4 server. * `IMCM5` - A standalone Cisco UCS C-Series or S-Series M5 server. * `IMCRack` - A standalone Cisco UCS C-Series or S-Series M6 or newer server. * `UCSIOM` - A Cisco UCS Blade Chassis I/O Module (IOM). * `HX` - A Cisco HyperFlex (HX) cluster. * `UCSD` - A Cisco UCS Director (UCSD) instance. * `IntersightAppliance` - A Cisco Intersight Connected Virtual Appliance instance. * `IntersightAssist` - A Cisco Intersight Assist instance. * `PureStorageFlashArray` - A Pure Storage FlashArray that is managed using Cisco Intersight Assist. Cisco Intersight Workload Optimizer and storage management features are supported on this device. * `NexusDevice` - A Cisco Nexus Network Switch that is managed using Cisco Intersight Assist. * `ACISwitch` - A Cisco Nexus Network Switch with the embedded Device Connector and is a part of the Cisco ACI fabric. * `NexusSwitch` - A standalone Cisco Nexus Network Switch with the embedded Device Connector. * `MDSSwitch` - A Cisco MDS Switch that is managed using the embedded Device Connector. * `MDSDevice` - A Cisco MDS Switch that is managed using Cisco Intersight Assist. * `UCSC890` - A standalone Cisco UCS C890 server managed using Cisco Intersight Assist. * `RedfishServer` - A generic target type for servers that support Redfish APIs and is managed using Cisco Intersight Assist. Support is limited to HPE and Dell Servers. * `NetAppOntap` - A Netapp ONTAP Storage system that is managed using Cisco Intersight Assist. Cisco Intersight Workload Optimizer features are supported on this device. * `NetAppActiveIqUnifiedManager` - A NetApp Active IQ Unified Manager (AIQUM) that is managed using Cisco Intersight Assist. * `EmcScaleIo` - An EMC ScaleIO Software Defined Storage system that is managed using Cisco Intersight Assist. Cisco Intersight Workload Optimizer features are supported on this device. * `EmcVmax` - An EMC VMAX 2 or 3 series enterprise storage array that is managed using Cisco Intersight Assist. Cisco Intersight Workload Optimizer features are supported on this device. * `EmcVplex` - An EMC VPLEX virtual storage system that is managed using Cisco Intersight Assist. Cisco Intersight Workload Optimizer features are supported on this device. * `EmcXtremIo` - An EMC XtremIO SSD storage system that is managed using Cisco Intersight Assist. Cisco Intersight Workload Optimizer features are supported on this device. * `VmwareVcenter` - A VMware vCenter instance that is managed using Cisco Intersight Assist. Cisco Intersight Workload Optimizer and Virtualization features are supported on this hypervisor. * `MicrosoftHyperV` - A Microsoft Hyper-V host that is managed using Cisco Intersight Assist. Optionally, other hosts in the cluster can be discovered through this host. Cisco Intersight Workload Optimizer features are supported on this hypervisor. * `AppDynamics` - An AppDynamics controller running in a SaaS or on-prem datacenter. On-prem AppDynamics instance is managed using Cisco Intersight Assist. Cisco Intersight Workload Optimizer features are supported on this controller. * `Dynatrace` - A Dynatrace Server instance running in a SaaS or on-prem datacenter. On-prem Dynatrace instance is managed using Cisco Intersight Assist. Cisco Intersight Workload Optimizer features are supported on this server. * `NewRelic` - A NewRelic user account. The NewRelic instance monitors the application infrastructure. Cisco Intersight Workload Optimizer features are supported on this server. * `ServiceNow` - A cloud-based workflow automation platform that enables enterprise organizations to improve operational efficiencies by streamlining and automating routine work tasks. * `Umbrella` - Umbrella cloud target that discovers and monitors an organization. It discovers entities like Datacenters, Devices, Tunnels, Networks, etc. * `CloudFoundry` - An open source cloud platform on which developers can build, deploy, run and scale applications. * `MicrosoftAzureApplicationInsights` - A feature of Azure Monitor, is an extensible Application Performance Management service for developers and DevOps professionals to monitor their live applications. * `OpenStack` - An OpenStack target manages Virtual Machines, Physical Machines, Datacenters and Virtual Datacenters using different OpenStack services as administrative endpoints. * `MicrosoftSqlServer` - A Microsoft SQL database server that is managed using Cisco Intersight Assist. Cisco Intersight Workload Optimizer features are supported on this database. * `MySqlServer` - A MySQL database server that is managed using Cisco Intersight Assist. Cisco Intersight Workload Optimizer features are supported on this database. * `OracleDatabaseServer` - An Oracle database server that is managed using Cisco Intersight Assist. Cisco Intersight Workload Optimizer features are supported on this database. * `IBMWebSphereApplicationServer` - An IBM WebSphere Application server that is managed using Cisco Intersight Assist. Cisco Intersight Workload Optimizer features are supported on this application server. * `OracleWebLogicServer` - Oracle WebLogic Server is a unified and extensible platform for developing, deploying and running enterprise applications, such as Java, for on-premises and in the cloud. WebLogic Server offers a robust, mature, and scalable implementation of Java Enterprise Edition (EE) and Jakarta EE. * `ApacheTomcatServer` - An Apache Tomcat server that is managed using Cisco Intersight Assist. Cisco Intersight Workload Optimizer features are supported on this server. * `JavaVirtualMachine` - A JVM Application with JMX configured that is managed using Cisco Intersight Assist. Cisco Intersight Workload Optimizer features are supported on this application. * `RedHatJBossApplicationServer` - JBoss Application Server is an open-source, cross-platform Java application server developed by JBoss, a division of Red Hat Inc. It is an open-source implementation of Java 2 Enterprise Edition (J2EE) that is used for implementing Java applications and other Web-based applications and software. * `Kubernetes` - A Kubernetes cluster that runs containerized applications, with Kubernetes Collector installed. Cisco Intersight Workload Optimizer features are supported on Kubernetes cluster. * `AmazonWebService` - An Amazon Web Service cloud account. Cisco Intersight Workload Optimizer and Virtualization features are supported on this cloud. * `AmazonWebServiceBilling` - An Amazon Web Service cloud billing account used to retrieve billing information stored in S3 bucket. Cisco Intersight Workload Optimizer features are supported on this cloud. * `GoogleCloudPlatform` - A Google Cloud Platform service account with access to one or more projects. Cisco Intersight Workload Optimizer features are supported on this cloud. * `GoogleCloudPlatformBilling` - A Google Cloud Platform service account used to retrieve billing information from BigQuery. Cisco Intersight Workload Optimizer features are supported on this cloud. * `MicrosoftAzureServicePrincipal` - A Microsoft Azure Service Principal account with access to Azure subscriptions. Cisco Intersight Workload Optimizer features are supported on this cloud. * `MicrosoftAzureEnterpriseAgreement` - A Microsoft Azure Enterprise Agreement enrolment used to retrieve pricing and billing information. Cisco Intersight Workload Optimizer features are supported on this cloud. * `MicrosoftAzureBilling` - A Microsoft Azure Service Principal account with access to billing information. Cisco Intersight Workload Optimizer features are supported on this cloud. * `DellCompellent` - A Dell EMC SC Series (Compellent) storage system that is managed using Cisco Intersight Assist. Cisco Intersight Workload Optimizer features are supported on this device. * `HPE3Par` - A HPE 3PAR StoreServ system that is managed using Cisco Intersight Assist. Cisco Intersight Workload Optimizer features are supported on this device. * `RedHatEnterpriseVirtualization` - A Red Hat Enterprise Virtualization Hypervisor system that manages Virtual Machines. * `NutanixAcropolis` - A Nutanix Acropolis cluster that is managed using Cisco Intersight Assist. Cisco Intersight Workload Optimizer features are supported on this cluster. * `NutanixPrismCentral` - A Nutanix Prism Central cluster. Prism central is a virtual appliance for managing Nutanix clusters and services. * `HPEOneView` - A HPE OneView system that is managed using Cisco Intersight Assist. Cisco Intersight Workload Optimizer features are supported on this system. * `ServiceEngine` - Cisco Application Services Engine. Cisco Application Services Engine is a platform to deploy and manage applications. * `HitachiVirtualStoragePlatform` - A Hitachi Virtual Storage Platform (Hitachi VSP) that is managed using Cisco Intersight Assist. * `GenericTarget` - A generic third-party target supported only in Partner Integration Appliance. This target type is used for development purposes and will not be supported in production environment. * `IMCBlade` - A Cisco UCS blade server managed by Cisco Intersight. * `TerraformCloud` - A Terraform Cloud Business Tier account. * `TerraformAgent` - A Terraform Cloud Agent that will be deployed on Cisco Intersight Assist. The agent can be used to plan and apply Terraform runs from a Terraform Cloud workspace. * `CustomTarget` - CustomTarget is deprecated. Use HTTPEndpoint type to claim HTTP endpoints. * `AnsibleEndpoint` - An external endpoint that is added as a target which can be accessed through Ansible in Intersight Cloud Orchestrator automation workflows. * `HTTPEndpoint` - An HTTP endpoint that can be accessed in Intersight Orchestrator workflows directly or using Cisco Intersight Assist. Authentication Schemes supported are Basic and Bearer Token. * `SSHEndpoint` - An SSH endpoint that can be accessed in Intersight Orchestrator workflows using Cisco Intersight Assist. * `CiscoCatalyst` - A Cisco Catalyst networking switch device. * `PowerShellEndpoint` - A Windows operating system server on which PowerShell scripts can be executed using Cisco Intersight Assist. * `CiscoDNAC` - A Cisco Digital Network Architecture (DNA) Center appliance. * `CiscoFMC` - A Cisco Secure Firewall Management Center. * `ViptelaCloud` - A Cisco Viptela SD-WAN Cloud. * `MerakiCloud` - A Cisco Meraki Organization. * `CiscoISE` - A Cisco Identity Services Engine (ISE) target.
	PlatformType *string                         `json:"PlatformType,omitempty"`
	Product      NullableAssetProductInformation `json:"Product,omitempty"`
	// Purchase order number for the Cisco device. It is a unique number assigned for every purchase.
	PurchaseOrderNumber    *string                     `json:"PurchaseOrderNumber,omitempty"`
	ResellerGlobalUltimate NullableAssetGlobalUltimate `json:"ResellerGlobalUltimate,omitempty"`
	// Sales order number for the Cisco device. It is a unique number assigned for every sale.
	SalesOrderNumber *string `json:"SalesOrderNumber,omitempty"`
	// The type of service contract that covers the Cisco device.
	ServiceDescription *string `json:"ServiceDescription,omitempty"`
	// End date for the Cisco service contract that covers this Cisco device.
	ServiceEndDate *time.Time `json:"ServiceEndDate,omitempty"`
	// The type of service contract that covers the Cisco device.
	ServiceLevel *string `json:"ServiceLevel,omitempty"`
	// The SKU of the service contract that covers the Cisco device.
	ServiceSku *string `json:"ServiceSku,omitempty"`
	// Start date for the Cisco service contract that covers this Cisco device.
	ServiceStartDate *time.Time `json:"ServiceStartDate,omitempty"`
	// Internal property used for triggering and tracking actions for contract information. * `Update` - Sn2Info/Contract information needs to be updated. * `OK` - Sn2Info/Contract information was fetched succcessfuly and updated. * `Failed` - Sn2Info/Contract information was not available  or failed while fetching. * `Retry` - Sn2Info/Contract information update failed and will be retried later.
	StateContract *string `json:"StateContract,omitempty"`
	// End date for the warranty that covers the Cisco device.
	WarrantyEndDate *string `json:"WarrantyEndDate,omitempty"`
	// Type of warranty that covers the Cisco device.
	WarrantyType         *string                                     `json:"WarrantyType,omitempty"`
	RegisteredDevice     NullableAssetDeviceRegistrationRelationship `json:"RegisteredDevice,omitempty"`
	Source               NullableMoBaseMoRelationship                `json:"Source,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _AssetDeviceContractInformation AssetDeviceContractInformation

// NewAssetDeviceContractInformation instantiates a new AssetDeviceContractInformation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAssetDeviceContractInformation(classId string, objectType string) *AssetDeviceContractInformation {
	this := AssetDeviceContractInformation{}
	this.ClassId = classId
	this.ObjectType = objectType
	var stateContract string = "Update"
	this.StateContract = &stateContract
	return &this
}

// NewAssetDeviceContractInformationWithDefaults instantiates a new AssetDeviceContractInformation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAssetDeviceContractInformationWithDefaults() *AssetDeviceContractInformation {
	this := AssetDeviceContractInformation{}
	var classId string = "asset.DeviceContractInformation"
	this.ClassId = classId
	var objectType string = "asset.DeviceContractInformation"
	this.ObjectType = objectType
	var stateContract string = "Update"
	this.StateContract = &stateContract
	return &this
}

// GetClassId returns the ClassId field value
func (o *AssetDeviceContractInformation) GetClassId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ClassId
}

// GetClassIdOk returns a tuple with the ClassId field value
// and a boolean to check if the value has been set.
func (o *AssetDeviceContractInformation) GetClassIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ClassId, true
}

// SetClassId sets field value
func (o *AssetDeviceContractInformation) SetClassId(v string) {
	o.ClassId = v
}

// GetDefaultClassId returns the default value "asset.DeviceContractInformation" of the ClassId field.
func (o *AssetDeviceContractInformation) GetDefaultClassId() interface{} {
	return "asset.DeviceContractInformation"
}

// GetObjectType returns the ObjectType field value
func (o *AssetDeviceContractInformation) GetObjectType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ObjectType
}

// GetObjectTypeOk returns a tuple with the ObjectType field value
// and a boolean to check if the value has been set.
func (o *AssetDeviceContractInformation) GetObjectTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ObjectType, true
}

// SetObjectType sets field value
func (o *AssetDeviceContractInformation) SetObjectType(v string) {
	o.ObjectType = v
}

// GetDefaultObjectType returns the default value "asset.DeviceContractInformation" of the ObjectType field.
func (o *AssetDeviceContractInformation) GetDefaultObjectType() interface{} {
	return "asset.DeviceContractInformation"
}

// GetContract returns the Contract field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AssetDeviceContractInformation) GetContract() AssetContractInformation {
	if o == nil || IsNil(o.Contract.Get()) {
		var ret AssetContractInformation
		return ret
	}
	return *o.Contract.Get()
}

// GetContractOk returns a tuple with the Contract field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AssetDeviceContractInformation) GetContractOk() (*AssetContractInformation, bool) {
	if o == nil {
		return nil, false
	}
	return o.Contract.Get(), o.Contract.IsSet()
}

// HasContract returns a boolean if a field has been set.
func (o *AssetDeviceContractInformation) HasContract() bool {
	if o != nil && o.Contract.IsSet() {
		return true
	}

	return false
}

// SetContract gets a reference to the given NullableAssetContractInformation and assigns it to the Contract field.
func (o *AssetDeviceContractInformation) SetContract(v AssetContractInformation) {
	o.Contract.Set(&v)
}

// SetContractNil sets the value for Contract to be an explicit nil
func (o *AssetDeviceContractInformation) SetContractNil() {
	o.Contract.Set(nil)
}

// UnsetContract ensures that no value is present for Contract, not even an explicit nil
func (o *AssetDeviceContractInformation) UnsetContract() {
	o.Contract.Unset()
}

// GetContractStatus returns the ContractStatus field value if set, zero value otherwise.
func (o *AssetDeviceContractInformation) GetContractStatus() string {
	if o == nil || IsNil(o.ContractStatus) {
		var ret string
		return ret
	}
	return *o.ContractStatus
}

// GetContractStatusOk returns a tuple with the ContractStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AssetDeviceContractInformation) GetContractStatusOk() (*string, bool) {
	if o == nil || IsNil(o.ContractStatus) {
		return nil, false
	}
	return o.ContractStatus, true
}

// HasContractStatus returns a boolean if a field has been set.
func (o *AssetDeviceContractInformation) HasContractStatus() bool {
	if o != nil && !IsNil(o.ContractStatus) {
		return true
	}

	return false
}

// SetContractStatus gets a reference to the given string and assigns it to the ContractStatus field.
func (o *AssetDeviceContractInformation) SetContractStatus(v string) {
	o.ContractStatus = &v
}

// GetContractStatusReason returns the ContractStatusReason field value if set, zero value otherwise.
func (o *AssetDeviceContractInformation) GetContractStatusReason() string {
	if o == nil || IsNil(o.ContractStatusReason) {
		var ret string
		return ret
	}
	return *o.ContractStatusReason
}

// GetContractStatusReasonOk returns a tuple with the ContractStatusReason field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AssetDeviceContractInformation) GetContractStatusReasonOk() (*string, bool) {
	if o == nil || IsNil(o.ContractStatusReason) {
		return nil, false
	}
	return o.ContractStatusReason, true
}

// HasContractStatusReason returns a boolean if a field has been set.
func (o *AssetDeviceContractInformation) HasContractStatusReason() bool {
	if o != nil && !IsNil(o.ContractStatusReason) {
		return true
	}

	return false
}

// SetContractStatusReason gets a reference to the given string and assigns it to the ContractStatusReason field.
func (o *AssetDeviceContractInformation) SetContractStatusReason(v string) {
	o.ContractStatusReason = &v
}

// GetContractUnavailableRetryCount returns the ContractUnavailableRetryCount field value if set, zero value otherwise.
func (o *AssetDeviceContractInformation) GetContractUnavailableRetryCount() int64 {
	if o == nil || IsNil(o.ContractUnavailableRetryCount) {
		var ret int64
		return ret
	}
	return *o.ContractUnavailableRetryCount
}

// GetContractUnavailableRetryCountOk returns a tuple with the ContractUnavailableRetryCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AssetDeviceContractInformation) GetContractUnavailableRetryCountOk() (*int64, bool) {
	if o == nil || IsNil(o.ContractUnavailableRetryCount) {
		return nil, false
	}
	return o.ContractUnavailableRetryCount, true
}

// HasContractUnavailableRetryCount returns a boolean if a field has been set.
func (o *AssetDeviceContractInformation) HasContractUnavailableRetryCount() bool {
	if o != nil && !IsNil(o.ContractUnavailableRetryCount) {
		return true
	}

	return false
}

// SetContractUnavailableRetryCount gets a reference to the given int64 and assigns it to the ContractUnavailableRetryCount field.
func (o *AssetDeviceContractInformation) SetContractUnavailableRetryCount(v int64) {
	o.ContractUnavailableRetryCount = &v
}

// GetContractUpdatedTime returns the ContractUpdatedTime field value if set, zero value otherwise.
func (o *AssetDeviceContractInformation) GetContractUpdatedTime() time.Time {
	if o == nil || IsNil(o.ContractUpdatedTime) {
		var ret time.Time
		return ret
	}
	return *o.ContractUpdatedTime
}

// GetContractUpdatedTimeOk returns a tuple with the ContractUpdatedTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AssetDeviceContractInformation) GetContractUpdatedTimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.ContractUpdatedTime) {
		return nil, false
	}
	return o.ContractUpdatedTime, true
}

// HasContractUpdatedTime returns a boolean if a field has been set.
func (o *AssetDeviceContractInformation) HasContractUpdatedTime() bool {
	if o != nil && !IsNil(o.ContractUpdatedTime) {
		return true
	}

	return false
}

// SetContractUpdatedTime gets a reference to the given time.Time and assigns it to the ContractUpdatedTime field.
func (o *AssetDeviceContractInformation) SetContractUpdatedTime(v time.Time) {
	o.ContractUpdatedTime = &v
}

// GetCoveredProductLineEndDate returns the CoveredProductLineEndDate field value if set, zero value otherwise.
func (o *AssetDeviceContractInformation) GetCoveredProductLineEndDate() string {
	if o == nil || IsNil(o.CoveredProductLineEndDate) {
		var ret string
		return ret
	}
	return *o.CoveredProductLineEndDate
}

// GetCoveredProductLineEndDateOk returns a tuple with the CoveredProductLineEndDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AssetDeviceContractInformation) GetCoveredProductLineEndDateOk() (*string, bool) {
	if o == nil || IsNil(o.CoveredProductLineEndDate) {
		return nil, false
	}
	return o.CoveredProductLineEndDate, true
}

// HasCoveredProductLineEndDate returns a boolean if a field has been set.
func (o *AssetDeviceContractInformation) HasCoveredProductLineEndDate() bool {
	if o != nil && !IsNil(o.CoveredProductLineEndDate) {
		return true
	}

	return false
}

// SetCoveredProductLineEndDate gets a reference to the given string and assigns it to the CoveredProductLineEndDate field.
func (o *AssetDeviceContractInformation) SetCoveredProductLineEndDate(v string) {
	o.CoveredProductLineEndDate = &v
}

// GetDeviceId returns the DeviceId field value if set, zero value otherwise.
func (o *AssetDeviceContractInformation) GetDeviceId() string {
	if o == nil || IsNil(o.DeviceId) {
		var ret string
		return ret
	}
	return *o.DeviceId
}

// GetDeviceIdOk returns a tuple with the DeviceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AssetDeviceContractInformation) GetDeviceIdOk() (*string, bool) {
	if o == nil || IsNil(o.DeviceId) {
		return nil, false
	}
	return o.DeviceId, true
}

// HasDeviceId returns a boolean if a field has been set.
func (o *AssetDeviceContractInformation) HasDeviceId() bool {
	if o != nil && !IsNil(o.DeviceId) {
		return true
	}

	return false
}

// SetDeviceId gets a reference to the given string and assigns it to the DeviceId field.
func (o *AssetDeviceContractInformation) SetDeviceId(v string) {
	o.DeviceId = &v
}

// GetDeviceType returns the DeviceType field value if set, zero value otherwise.
func (o *AssetDeviceContractInformation) GetDeviceType() string {
	if o == nil || IsNil(o.DeviceType) {
		var ret string
		return ret
	}
	return *o.DeviceType
}

// GetDeviceTypeOk returns a tuple with the DeviceType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AssetDeviceContractInformation) GetDeviceTypeOk() (*string, bool) {
	if o == nil || IsNil(o.DeviceType) {
		return nil, false
	}
	return o.DeviceType, true
}

// HasDeviceType returns a boolean if a field has been set.
func (o *AssetDeviceContractInformation) HasDeviceType() bool {
	if o != nil && !IsNil(o.DeviceType) {
		return true
	}

	return false
}

// SetDeviceType gets a reference to the given string and assigns it to the DeviceType field.
func (o *AssetDeviceContractInformation) SetDeviceType(v string) {
	o.DeviceType = &v
}

// GetEndCustomer returns the EndCustomer field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AssetDeviceContractInformation) GetEndCustomer() AssetCustomerInformation {
	if o == nil || IsNil(o.EndCustomer.Get()) {
		var ret AssetCustomerInformation
		return ret
	}
	return *o.EndCustomer.Get()
}

// GetEndCustomerOk returns a tuple with the EndCustomer field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AssetDeviceContractInformation) GetEndCustomerOk() (*AssetCustomerInformation, bool) {
	if o == nil {
		return nil, false
	}
	return o.EndCustomer.Get(), o.EndCustomer.IsSet()
}

// HasEndCustomer returns a boolean if a field has been set.
func (o *AssetDeviceContractInformation) HasEndCustomer() bool {
	if o != nil && o.EndCustomer.IsSet() {
		return true
	}

	return false
}

// SetEndCustomer gets a reference to the given NullableAssetCustomerInformation and assigns it to the EndCustomer field.
func (o *AssetDeviceContractInformation) SetEndCustomer(v AssetCustomerInformation) {
	o.EndCustomer.Set(&v)
}

// SetEndCustomerNil sets the value for EndCustomer to be an explicit nil
func (o *AssetDeviceContractInformation) SetEndCustomerNil() {
	o.EndCustomer.Set(nil)
}

// UnsetEndCustomer ensures that no value is present for EndCustomer, not even an explicit nil
func (o *AssetDeviceContractInformation) UnsetEndCustomer() {
	o.EndCustomer.Unset()
}

// GetEndUserGlobalUltimate returns the EndUserGlobalUltimate field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AssetDeviceContractInformation) GetEndUserGlobalUltimate() AssetGlobalUltimate {
	if o == nil || IsNil(o.EndUserGlobalUltimate.Get()) {
		var ret AssetGlobalUltimate
		return ret
	}
	return *o.EndUserGlobalUltimate.Get()
}

// GetEndUserGlobalUltimateOk returns a tuple with the EndUserGlobalUltimate field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AssetDeviceContractInformation) GetEndUserGlobalUltimateOk() (*AssetGlobalUltimate, bool) {
	if o == nil {
		return nil, false
	}
	return o.EndUserGlobalUltimate.Get(), o.EndUserGlobalUltimate.IsSet()
}

// HasEndUserGlobalUltimate returns a boolean if a field has been set.
func (o *AssetDeviceContractInformation) HasEndUserGlobalUltimate() bool {
	if o != nil && o.EndUserGlobalUltimate.IsSet() {
		return true
	}

	return false
}

// SetEndUserGlobalUltimate gets a reference to the given NullableAssetGlobalUltimate and assigns it to the EndUserGlobalUltimate field.
func (o *AssetDeviceContractInformation) SetEndUserGlobalUltimate(v AssetGlobalUltimate) {
	o.EndUserGlobalUltimate.Set(&v)
}

// SetEndUserGlobalUltimateNil sets the value for EndUserGlobalUltimate to be an explicit nil
func (o *AssetDeviceContractInformation) SetEndUserGlobalUltimateNil() {
	o.EndUserGlobalUltimate.Set(nil)
}

// UnsetEndUserGlobalUltimate ensures that no value is present for EndUserGlobalUltimate, not even an explicit nil
func (o *AssetDeviceContractInformation) UnsetEndUserGlobalUltimate() {
	o.EndUserGlobalUltimate.Unset()
}

// GetIsValid returns the IsValid field value if set, zero value otherwise.
func (o *AssetDeviceContractInformation) GetIsValid() bool {
	if o == nil || IsNil(o.IsValid) {
		var ret bool
		return ret
	}
	return *o.IsValid
}

// GetIsValidOk returns a tuple with the IsValid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AssetDeviceContractInformation) GetIsValidOk() (*bool, bool) {
	if o == nil || IsNil(o.IsValid) {
		return nil, false
	}
	return o.IsValid, true
}

// HasIsValid returns a boolean if a field has been set.
func (o *AssetDeviceContractInformation) HasIsValid() bool {
	if o != nil && !IsNil(o.IsValid) {
		return true
	}

	return false
}

// SetIsValid gets a reference to the given bool and assigns it to the IsValid field.
func (o *AssetDeviceContractInformation) SetIsValid(v bool) {
	o.IsValid = &v
}

// GetItemType returns the ItemType field value if set, zero value otherwise.
func (o *AssetDeviceContractInformation) GetItemType() string {
	if o == nil || IsNil(o.ItemType) {
		var ret string
		return ret
	}
	return *o.ItemType
}

// GetItemTypeOk returns a tuple with the ItemType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AssetDeviceContractInformation) GetItemTypeOk() (*string, bool) {
	if o == nil || IsNil(o.ItemType) {
		return nil, false
	}
	return o.ItemType, true
}

// HasItemType returns a boolean if a field has been set.
func (o *AssetDeviceContractInformation) HasItemType() bool {
	if o != nil && !IsNil(o.ItemType) {
		return true
	}

	return false
}

// SetItemType gets a reference to the given string and assigns it to the ItemType field.
func (o *AssetDeviceContractInformation) SetItemType(v string) {
	o.ItemType = &v
}

// GetLastDateOfSupport returns the LastDateOfSupport field value if set, zero value otherwise.
func (o *AssetDeviceContractInformation) GetLastDateOfSupport() time.Time {
	if o == nil || IsNil(o.LastDateOfSupport) {
		var ret time.Time
		return ret
	}
	return *o.LastDateOfSupport
}

// GetLastDateOfSupportOk returns a tuple with the LastDateOfSupport field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AssetDeviceContractInformation) GetLastDateOfSupportOk() (*time.Time, bool) {
	if o == nil || IsNil(o.LastDateOfSupport) {
		return nil, false
	}
	return o.LastDateOfSupport, true
}

// HasLastDateOfSupport returns a boolean if a field has been set.
func (o *AssetDeviceContractInformation) HasLastDateOfSupport() bool {
	if o != nil && !IsNil(o.LastDateOfSupport) {
		return true
	}

	return false
}

// SetLastDateOfSupport gets a reference to the given time.Time and assigns it to the LastDateOfSupport field.
func (o *AssetDeviceContractInformation) SetLastDateOfSupport(v time.Time) {
	o.LastDateOfSupport = &v
}

// GetMaintenancePurchaseOrderNumber returns the MaintenancePurchaseOrderNumber field value if set, zero value otherwise.
func (o *AssetDeviceContractInformation) GetMaintenancePurchaseOrderNumber() string {
	if o == nil || IsNil(o.MaintenancePurchaseOrderNumber) {
		var ret string
		return ret
	}
	return *o.MaintenancePurchaseOrderNumber
}

// GetMaintenancePurchaseOrderNumberOk returns a tuple with the MaintenancePurchaseOrderNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AssetDeviceContractInformation) GetMaintenancePurchaseOrderNumberOk() (*string, bool) {
	if o == nil || IsNil(o.MaintenancePurchaseOrderNumber) {
		return nil, false
	}
	return o.MaintenancePurchaseOrderNumber, true
}

// HasMaintenancePurchaseOrderNumber returns a boolean if a field has been set.
func (o *AssetDeviceContractInformation) HasMaintenancePurchaseOrderNumber() bool {
	if o != nil && !IsNil(o.MaintenancePurchaseOrderNumber) {
		return true
	}

	return false
}

// SetMaintenancePurchaseOrderNumber gets a reference to the given string and assigns it to the MaintenancePurchaseOrderNumber field.
func (o *AssetDeviceContractInformation) SetMaintenancePurchaseOrderNumber(v string) {
	o.MaintenancePurchaseOrderNumber = &v
}

// GetMaintenanceSalesOrderNumber returns the MaintenanceSalesOrderNumber field value if set, zero value otherwise.
func (o *AssetDeviceContractInformation) GetMaintenanceSalesOrderNumber() string {
	if o == nil || IsNil(o.MaintenanceSalesOrderNumber) {
		var ret string
		return ret
	}
	return *o.MaintenanceSalesOrderNumber
}

// GetMaintenanceSalesOrderNumberOk returns a tuple with the MaintenanceSalesOrderNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AssetDeviceContractInformation) GetMaintenanceSalesOrderNumberOk() (*string, bool) {
	if o == nil || IsNil(o.MaintenanceSalesOrderNumber) {
		return nil, false
	}
	return o.MaintenanceSalesOrderNumber, true
}

// HasMaintenanceSalesOrderNumber returns a boolean if a field has been set.
func (o *AssetDeviceContractInformation) HasMaintenanceSalesOrderNumber() bool {
	if o != nil && !IsNil(o.MaintenanceSalesOrderNumber) {
		return true
	}

	return false
}

// SetMaintenanceSalesOrderNumber gets a reference to the given string and assigns it to the MaintenanceSalesOrderNumber field.
func (o *AssetDeviceContractInformation) SetMaintenanceSalesOrderNumber(v string) {
	o.MaintenanceSalesOrderNumber = &v
}

// GetPlatformType returns the PlatformType field value if set, zero value otherwise.
func (o *AssetDeviceContractInformation) GetPlatformType() string {
	if o == nil || IsNil(o.PlatformType) {
		var ret string
		return ret
	}
	return *o.PlatformType
}

// GetPlatformTypeOk returns a tuple with the PlatformType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AssetDeviceContractInformation) GetPlatformTypeOk() (*string, bool) {
	if o == nil || IsNil(o.PlatformType) {
		return nil, false
	}
	return o.PlatformType, true
}

// HasPlatformType returns a boolean if a field has been set.
func (o *AssetDeviceContractInformation) HasPlatformType() bool {
	if o != nil && !IsNil(o.PlatformType) {
		return true
	}

	return false
}

// SetPlatformType gets a reference to the given string and assigns it to the PlatformType field.
func (o *AssetDeviceContractInformation) SetPlatformType(v string) {
	o.PlatformType = &v
}

// GetProduct returns the Product field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AssetDeviceContractInformation) GetProduct() AssetProductInformation {
	if o == nil || IsNil(o.Product.Get()) {
		var ret AssetProductInformation
		return ret
	}
	return *o.Product.Get()
}

// GetProductOk returns a tuple with the Product field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AssetDeviceContractInformation) GetProductOk() (*AssetProductInformation, bool) {
	if o == nil {
		return nil, false
	}
	return o.Product.Get(), o.Product.IsSet()
}

// HasProduct returns a boolean if a field has been set.
func (o *AssetDeviceContractInformation) HasProduct() bool {
	if o != nil && o.Product.IsSet() {
		return true
	}

	return false
}

// SetProduct gets a reference to the given NullableAssetProductInformation and assigns it to the Product field.
func (o *AssetDeviceContractInformation) SetProduct(v AssetProductInformation) {
	o.Product.Set(&v)
}

// SetProductNil sets the value for Product to be an explicit nil
func (o *AssetDeviceContractInformation) SetProductNil() {
	o.Product.Set(nil)
}

// UnsetProduct ensures that no value is present for Product, not even an explicit nil
func (o *AssetDeviceContractInformation) UnsetProduct() {
	o.Product.Unset()
}

// GetPurchaseOrderNumber returns the PurchaseOrderNumber field value if set, zero value otherwise.
func (o *AssetDeviceContractInformation) GetPurchaseOrderNumber() string {
	if o == nil || IsNil(o.PurchaseOrderNumber) {
		var ret string
		return ret
	}
	return *o.PurchaseOrderNumber
}

// GetPurchaseOrderNumberOk returns a tuple with the PurchaseOrderNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AssetDeviceContractInformation) GetPurchaseOrderNumberOk() (*string, bool) {
	if o == nil || IsNil(o.PurchaseOrderNumber) {
		return nil, false
	}
	return o.PurchaseOrderNumber, true
}

// HasPurchaseOrderNumber returns a boolean if a field has been set.
func (o *AssetDeviceContractInformation) HasPurchaseOrderNumber() bool {
	if o != nil && !IsNil(o.PurchaseOrderNumber) {
		return true
	}

	return false
}

// SetPurchaseOrderNumber gets a reference to the given string and assigns it to the PurchaseOrderNumber field.
func (o *AssetDeviceContractInformation) SetPurchaseOrderNumber(v string) {
	o.PurchaseOrderNumber = &v
}

// GetResellerGlobalUltimate returns the ResellerGlobalUltimate field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AssetDeviceContractInformation) GetResellerGlobalUltimate() AssetGlobalUltimate {
	if o == nil || IsNil(o.ResellerGlobalUltimate.Get()) {
		var ret AssetGlobalUltimate
		return ret
	}
	return *o.ResellerGlobalUltimate.Get()
}

// GetResellerGlobalUltimateOk returns a tuple with the ResellerGlobalUltimate field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AssetDeviceContractInformation) GetResellerGlobalUltimateOk() (*AssetGlobalUltimate, bool) {
	if o == nil {
		return nil, false
	}
	return o.ResellerGlobalUltimate.Get(), o.ResellerGlobalUltimate.IsSet()
}

// HasResellerGlobalUltimate returns a boolean if a field has been set.
func (o *AssetDeviceContractInformation) HasResellerGlobalUltimate() bool {
	if o != nil && o.ResellerGlobalUltimate.IsSet() {
		return true
	}

	return false
}

// SetResellerGlobalUltimate gets a reference to the given NullableAssetGlobalUltimate and assigns it to the ResellerGlobalUltimate field.
func (o *AssetDeviceContractInformation) SetResellerGlobalUltimate(v AssetGlobalUltimate) {
	o.ResellerGlobalUltimate.Set(&v)
}

// SetResellerGlobalUltimateNil sets the value for ResellerGlobalUltimate to be an explicit nil
func (o *AssetDeviceContractInformation) SetResellerGlobalUltimateNil() {
	o.ResellerGlobalUltimate.Set(nil)
}

// UnsetResellerGlobalUltimate ensures that no value is present for ResellerGlobalUltimate, not even an explicit nil
func (o *AssetDeviceContractInformation) UnsetResellerGlobalUltimate() {
	o.ResellerGlobalUltimate.Unset()
}

// GetSalesOrderNumber returns the SalesOrderNumber field value if set, zero value otherwise.
func (o *AssetDeviceContractInformation) GetSalesOrderNumber() string {
	if o == nil || IsNil(o.SalesOrderNumber) {
		var ret string
		return ret
	}
	return *o.SalesOrderNumber
}

// GetSalesOrderNumberOk returns a tuple with the SalesOrderNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AssetDeviceContractInformation) GetSalesOrderNumberOk() (*string, bool) {
	if o == nil || IsNil(o.SalesOrderNumber) {
		return nil, false
	}
	return o.SalesOrderNumber, true
}

// HasSalesOrderNumber returns a boolean if a field has been set.
func (o *AssetDeviceContractInformation) HasSalesOrderNumber() bool {
	if o != nil && !IsNil(o.SalesOrderNumber) {
		return true
	}

	return false
}

// SetSalesOrderNumber gets a reference to the given string and assigns it to the SalesOrderNumber field.
func (o *AssetDeviceContractInformation) SetSalesOrderNumber(v string) {
	o.SalesOrderNumber = &v
}

// GetServiceDescription returns the ServiceDescription field value if set, zero value otherwise.
func (o *AssetDeviceContractInformation) GetServiceDescription() string {
	if o == nil || IsNil(o.ServiceDescription) {
		var ret string
		return ret
	}
	return *o.ServiceDescription
}

// GetServiceDescriptionOk returns a tuple with the ServiceDescription field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AssetDeviceContractInformation) GetServiceDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.ServiceDescription) {
		return nil, false
	}
	return o.ServiceDescription, true
}

// HasServiceDescription returns a boolean if a field has been set.
func (o *AssetDeviceContractInformation) HasServiceDescription() bool {
	if o != nil && !IsNil(o.ServiceDescription) {
		return true
	}

	return false
}

// SetServiceDescription gets a reference to the given string and assigns it to the ServiceDescription field.
func (o *AssetDeviceContractInformation) SetServiceDescription(v string) {
	o.ServiceDescription = &v
}

// GetServiceEndDate returns the ServiceEndDate field value if set, zero value otherwise.
func (o *AssetDeviceContractInformation) GetServiceEndDate() time.Time {
	if o == nil || IsNil(o.ServiceEndDate) {
		var ret time.Time
		return ret
	}
	return *o.ServiceEndDate
}

// GetServiceEndDateOk returns a tuple with the ServiceEndDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AssetDeviceContractInformation) GetServiceEndDateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.ServiceEndDate) {
		return nil, false
	}
	return o.ServiceEndDate, true
}

// HasServiceEndDate returns a boolean if a field has been set.
func (o *AssetDeviceContractInformation) HasServiceEndDate() bool {
	if o != nil && !IsNil(o.ServiceEndDate) {
		return true
	}

	return false
}

// SetServiceEndDate gets a reference to the given time.Time and assigns it to the ServiceEndDate field.
func (o *AssetDeviceContractInformation) SetServiceEndDate(v time.Time) {
	o.ServiceEndDate = &v
}

// GetServiceLevel returns the ServiceLevel field value if set, zero value otherwise.
func (o *AssetDeviceContractInformation) GetServiceLevel() string {
	if o == nil || IsNil(o.ServiceLevel) {
		var ret string
		return ret
	}
	return *o.ServiceLevel
}

// GetServiceLevelOk returns a tuple with the ServiceLevel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AssetDeviceContractInformation) GetServiceLevelOk() (*string, bool) {
	if o == nil || IsNil(o.ServiceLevel) {
		return nil, false
	}
	return o.ServiceLevel, true
}

// HasServiceLevel returns a boolean if a field has been set.
func (o *AssetDeviceContractInformation) HasServiceLevel() bool {
	if o != nil && !IsNil(o.ServiceLevel) {
		return true
	}

	return false
}

// SetServiceLevel gets a reference to the given string and assigns it to the ServiceLevel field.
func (o *AssetDeviceContractInformation) SetServiceLevel(v string) {
	o.ServiceLevel = &v
}

// GetServiceSku returns the ServiceSku field value if set, zero value otherwise.
func (o *AssetDeviceContractInformation) GetServiceSku() string {
	if o == nil || IsNil(o.ServiceSku) {
		var ret string
		return ret
	}
	return *o.ServiceSku
}

// GetServiceSkuOk returns a tuple with the ServiceSku field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AssetDeviceContractInformation) GetServiceSkuOk() (*string, bool) {
	if o == nil || IsNil(o.ServiceSku) {
		return nil, false
	}
	return o.ServiceSku, true
}

// HasServiceSku returns a boolean if a field has been set.
func (o *AssetDeviceContractInformation) HasServiceSku() bool {
	if o != nil && !IsNil(o.ServiceSku) {
		return true
	}

	return false
}

// SetServiceSku gets a reference to the given string and assigns it to the ServiceSku field.
func (o *AssetDeviceContractInformation) SetServiceSku(v string) {
	o.ServiceSku = &v
}

// GetServiceStartDate returns the ServiceStartDate field value if set, zero value otherwise.
func (o *AssetDeviceContractInformation) GetServiceStartDate() time.Time {
	if o == nil || IsNil(o.ServiceStartDate) {
		var ret time.Time
		return ret
	}
	return *o.ServiceStartDate
}

// GetServiceStartDateOk returns a tuple with the ServiceStartDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AssetDeviceContractInformation) GetServiceStartDateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.ServiceStartDate) {
		return nil, false
	}
	return o.ServiceStartDate, true
}

// HasServiceStartDate returns a boolean if a field has been set.
func (o *AssetDeviceContractInformation) HasServiceStartDate() bool {
	if o != nil && !IsNil(o.ServiceStartDate) {
		return true
	}

	return false
}

// SetServiceStartDate gets a reference to the given time.Time and assigns it to the ServiceStartDate field.
func (o *AssetDeviceContractInformation) SetServiceStartDate(v time.Time) {
	o.ServiceStartDate = &v
}

// GetStateContract returns the StateContract field value if set, zero value otherwise.
func (o *AssetDeviceContractInformation) GetStateContract() string {
	if o == nil || IsNil(o.StateContract) {
		var ret string
		return ret
	}
	return *o.StateContract
}

// GetStateContractOk returns a tuple with the StateContract field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AssetDeviceContractInformation) GetStateContractOk() (*string, bool) {
	if o == nil || IsNil(o.StateContract) {
		return nil, false
	}
	return o.StateContract, true
}

// HasStateContract returns a boolean if a field has been set.
func (o *AssetDeviceContractInformation) HasStateContract() bool {
	if o != nil && !IsNil(o.StateContract) {
		return true
	}

	return false
}

// SetStateContract gets a reference to the given string and assigns it to the StateContract field.
func (o *AssetDeviceContractInformation) SetStateContract(v string) {
	o.StateContract = &v
}

// GetWarrantyEndDate returns the WarrantyEndDate field value if set, zero value otherwise.
func (o *AssetDeviceContractInformation) GetWarrantyEndDate() string {
	if o == nil || IsNil(o.WarrantyEndDate) {
		var ret string
		return ret
	}
	return *o.WarrantyEndDate
}

// GetWarrantyEndDateOk returns a tuple with the WarrantyEndDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AssetDeviceContractInformation) GetWarrantyEndDateOk() (*string, bool) {
	if o == nil || IsNil(o.WarrantyEndDate) {
		return nil, false
	}
	return o.WarrantyEndDate, true
}

// HasWarrantyEndDate returns a boolean if a field has been set.
func (o *AssetDeviceContractInformation) HasWarrantyEndDate() bool {
	if o != nil && !IsNil(o.WarrantyEndDate) {
		return true
	}

	return false
}

// SetWarrantyEndDate gets a reference to the given string and assigns it to the WarrantyEndDate field.
func (o *AssetDeviceContractInformation) SetWarrantyEndDate(v string) {
	o.WarrantyEndDate = &v
}

// GetWarrantyType returns the WarrantyType field value if set, zero value otherwise.
func (o *AssetDeviceContractInformation) GetWarrantyType() string {
	if o == nil || IsNil(o.WarrantyType) {
		var ret string
		return ret
	}
	return *o.WarrantyType
}

// GetWarrantyTypeOk returns a tuple with the WarrantyType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AssetDeviceContractInformation) GetWarrantyTypeOk() (*string, bool) {
	if o == nil || IsNil(o.WarrantyType) {
		return nil, false
	}
	return o.WarrantyType, true
}

// HasWarrantyType returns a boolean if a field has been set.
func (o *AssetDeviceContractInformation) HasWarrantyType() bool {
	if o != nil && !IsNil(o.WarrantyType) {
		return true
	}

	return false
}

// SetWarrantyType gets a reference to the given string and assigns it to the WarrantyType field.
func (o *AssetDeviceContractInformation) SetWarrantyType(v string) {
	o.WarrantyType = &v
}

// GetRegisteredDevice returns the RegisteredDevice field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AssetDeviceContractInformation) GetRegisteredDevice() AssetDeviceRegistrationRelationship {
	if o == nil || IsNil(o.RegisteredDevice.Get()) {
		var ret AssetDeviceRegistrationRelationship
		return ret
	}
	return *o.RegisteredDevice.Get()
}

// GetRegisteredDeviceOk returns a tuple with the RegisteredDevice field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AssetDeviceContractInformation) GetRegisteredDeviceOk() (*AssetDeviceRegistrationRelationship, bool) {
	if o == nil {
		return nil, false
	}
	return o.RegisteredDevice.Get(), o.RegisteredDevice.IsSet()
}

// HasRegisteredDevice returns a boolean if a field has been set.
func (o *AssetDeviceContractInformation) HasRegisteredDevice() bool {
	if o != nil && o.RegisteredDevice.IsSet() {
		return true
	}

	return false
}

// SetRegisteredDevice gets a reference to the given NullableAssetDeviceRegistrationRelationship and assigns it to the RegisteredDevice field.
func (o *AssetDeviceContractInformation) SetRegisteredDevice(v AssetDeviceRegistrationRelationship) {
	o.RegisteredDevice.Set(&v)
}

// SetRegisteredDeviceNil sets the value for RegisteredDevice to be an explicit nil
func (o *AssetDeviceContractInformation) SetRegisteredDeviceNil() {
	o.RegisteredDevice.Set(nil)
}

// UnsetRegisteredDevice ensures that no value is present for RegisteredDevice, not even an explicit nil
func (o *AssetDeviceContractInformation) UnsetRegisteredDevice() {
	o.RegisteredDevice.Unset()
}

// GetSource returns the Source field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AssetDeviceContractInformation) GetSource() MoBaseMoRelationship {
	if o == nil || IsNil(o.Source.Get()) {
		var ret MoBaseMoRelationship
		return ret
	}
	return *o.Source.Get()
}

// GetSourceOk returns a tuple with the Source field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AssetDeviceContractInformation) GetSourceOk() (*MoBaseMoRelationship, bool) {
	if o == nil {
		return nil, false
	}
	return o.Source.Get(), o.Source.IsSet()
}

// HasSource returns a boolean if a field has been set.
func (o *AssetDeviceContractInformation) HasSource() bool {
	if o != nil && o.Source.IsSet() {
		return true
	}

	return false
}

// SetSource gets a reference to the given NullableMoBaseMoRelationship and assigns it to the Source field.
func (o *AssetDeviceContractInformation) SetSource(v MoBaseMoRelationship) {
	o.Source.Set(&v)
}

// SetSourceNil sets the value for Source to be an explicit nil
func (o *AssetDeviceContractInformation) SetSourceNil() {
	o.Source.Set(nil)
}

// UnsetSource ensures that no value is present for Source, not even an explicit nil
func (o *AssetDeviceContractInformation) UnsetSource() {
	o.Source.Unset()
}

func (o AssetDeviceContractInformation) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AssetDeviceContractInformation) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	serializedMoBaseMo, errMoBaseMo := json.Marshal(o.MoBaseMo)
	if errMoBaseMo != nil {
		return map[string]interface{}{}, errMoBaseMo
	}
	errMoBaseMo = json.Unmarshal([]byte(serializedMoBaseMo), &toSerialize)
	if errMoBaseMo != nil {
		return map[string]interface{}{}, errMoBaseMo
	}
	if _, exists := toSerialize["ClassId"]; !exists {
		toSerialize["ClassId"] = o.GetDefaultClassId()
	}
	toSerialize["ClassId"] = o.ClassId
	if _, exists := toSerialize["ObjectType"]; !exists {
		toSerialize["ObjectType"] = o.GetDefaultObjectType()
	}
	toSerialize["ObjectType"] = o.ObjectType
	if o.Contract.IsSet() {
		toSerialize["Contract"] = o.Contract.Get()
	}
	if !IsNil(o.ContractStatus) {
		toSerialize["ContractStatus"] = o.ContractStatus
	}
	if !IsNil(o.ContractStatusReason) {
		toSerialize["ContractStatusReason"] = o.ContractStatusReason
	}
	if !IsNil(o.ContractUnavailableRetryCount) {
		toSerialize["ContractUnavailableRetryCount"] = o.ContractUnavailableRetryCount
	}
	if !IsNil(o.ContractUpdatedTime) {
		toSerialize["ContractUpdatedTime"] = o.ContractUpdatedTime
	}
	if !IsNil(o.CoveredProductLineEndDate) {
		toSerialize["CoveredProductLineEndDate"] = o.CoveredProductLineEndDate
	}
	if !IsNil(o.DeviceId) {
		toSerialize["DeviceId"] = o.DeviceId
	}
	if !IsNil(o.DeviceType) {
		toSerialize["DeviceType"] = o.DeviceType
	}
	if o.EndCustomer.IsSet() {
		toSerialize["EndCustomer"] = o.EndCustomer.Get()
	}
	if o.EndUserGlobalUltimate.IsSet() {
		toSerialize["EndUserGlobalUltimate"] = o.EndUserGlobalUltimate.Get()
	}
	if !IsNil(o.IsValid) {
		toSerialize["IsValid"] = o.IsValid
	}
	if !IsNil(o.ItemType) {
		toSerialize["ItemType"] = o.ItemType
	}
	if !IsNil(o.LastDateOfSupport) {
		toSerialize["LastDateOfSupport"] = o.LastDateOfSupport
	}
	if !IsNil(o.MaintenancePurchaseOrderNumber) {
		toSerialize["MaintenancePurchaseOrderNumber"] = o.MaintenancePurchaseOrderNumber
	}
	if !IsNil(o.MaintenanceSalesOrderNumber) {
		toSerialize["MaintenanceSalesOrderNumber"] = o.MaintenanceSalesOrderNumber
	}
	if !IsNil(o.PlatformType) {
		toSerialize["PlatformType"] = o.PlatformType
	}
	if o.Product.IsSet() {
		toSerialize["Product"] = o.Product.Get()
	}
	if !IsNil(o.PurchaseOrderNumber) {
		toSerialize["PurchaseOrderNumber"] = o.PurchaseOrderNumber
	}
	if o.ResellerGlobalUltimate.IsSet() {
		toSerialize["ResellerGlobalUltimate"] = o.ResellerGlobalUltimate.Get()
	}
	if !IsNil(o.SalesOrderNumber) {
		toSerialize["SalesOrderNumber"] = o.SalesOrderNumber
	}
	if !IsNil(o.ServiceDescription) {
		toSerialize["ServiceDescription"] = o.ServiceDescription
	}
	if !IsNil(o.ServiceEndDate) {
		toSerialize["ServiceEndDate"] = o.ServiceEndDate
	}
	if !IsNil(o.ServiceLevel) {
		toSerialize["ServiceLevel"] = o.ServiceLevel
	}
	if !IsNil(o.ServiceSku) {
		toSerialize["ServiceSku"] = o.ServiceSku
	}
	if !IsNil(o.ServiceStartDate) {
		toSerialize["ServiceStartDate"] = o.ServiceStartDate
	}
	if !IsNil(o.StateContract) {
		toSerialize["StateContract"] = o.StateContract
	}
	if !IsNil(o.WarrantyEndDate) {
		toSerialize["WarrantyEndDate"] = o.WarrantyEndDate
	}
	if !IsNil(o.WarrantyType) {
		toSerialize["WarrantyType"] = o.WarrantyType
	}
	if o.RegisteredDevice.IsSet() {
		toSerialize["RegisteredDevice"] = o.RegisteredDevice.Get()
	}
	if o.Source.IsSet() {
		toSerialize["Source"] = o.Source.Get()
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *AssetDeviceContractInformation) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"ClassId",
		"ObjectType",
	}

	// defaultValueFuncMap captures the default values for required properties.
	// These values are used when required properties are missing from the payload.
	defaultValueFuncMap := map[string]func() interface{}{
		"ClassId":    o.GetDefaultClassId,
		"ObjectType": o.GetDefaultObjectType,
	}
	var defaultValueApplied bool
	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			if _, ok := defaultValueFuncMap[requiredProperty]; ok {
				allProperties[requiredProperty] = defaultValueFuncMap[requiredProperty]()
				defaultValueApplied = true
			}
		}
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	if defaultValueApplied {
		data, err = json.Marshal(allProperties)
		if err != nil {
			return err
		}
	}
	type AssetDeviceContractInformationWithoutEmbeddedStruct struct {
		// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.
		ClassId string `json:"ClassId"`
		// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
		ObjectType string                           `json:"ObjectType"`
		Contract   NullableAssetContractInformation `json:"Contract,omitempty"`
		// Calculated contract status that is derived based on the service line status and contract end date. It is different from serviceLineStatus property. serviceLineStatus gives us ACTIVE, OVERDUE, EXPIRED. These are transformed into Active, Expiring Soon and Not Covered. * `Unknown` - The device's contract status cannot be determined. * `Not Covered` - The Cisco device does not have a valid support contract. * `Active` - The Cisco device is covered under a active support contract. * `Expiring Soon` - The contract for this Cisco device is going to expire in the next 30 days.
		ContractStatus *string `json:"ContractStatus,omitempty"`
		// Reason for contract status. In case of Not Covered, reason is either Terminated or Expired. * `` - There is no reason for the specified contract status. * `Line Item Expired` - The Cisco device does not have a valid support contract, it has expired. * `Line Item Terminated` - The Cisco device does not have a valid support contract, it has been terminated.
		ContractStatusReason *string `json:"ContractStatusReason,omitempty"`
		// If Contract details doesn't exists in CCW API response, we will retry couple of times based on threshold value Retry count will track the number of retry happens due to contract details unavailability.
		ContractUnavailableRetryCount *int64 `json:"ContractUnavailableRetryCount,omitempty"`
		// Date and time indicating when the contract data is last fetched from Cisco's Contract API successfully.
		ContractUpdatedTime *time.Time `json:"ContractUpdatedTime,omitempty"`
		// End date of the covered product line. The coverage end date is fetched from Cisco SN2INFO API.
		CoveredProductLineEndDate *string `json:"CoveredProductLineEndDate,omitempty"`
		// Unique identifier of the Cisco device. This information is used to query Cisco APIx SN2INFO and CCWR databases.
		DeviceId *string `json:"DeviceId,omitempty"`
		// Type used to classify the device in Cisco Intersight. Currently supported values are Server and FabricInterconnect. This will be expanded to support more types in future. * `None` - A default value to catch cases where device type is not correctly detected. * `CiscoUcsServer` - A device of type server. It includes Cisco IMC and UCS Managed servers. * `CiscoUcsFI` - A device of type Fabric Interconnect. It includes the various types of Cisco Fabric Interconnects supported by Cisco Intersight. * `CiscoUcsChassis` - A device of type Chassis. It includes various UCS chassis supported by Cisco Intersight. * `CiscoNexusSwitch` - A device of type Nexus switch. It includes various Nexus switches supported by Cisco Intersight. * `CiscoMDSSwitch` - A device of type MDS switch. It includes various MDS switches supported by Cisco Intersight.
		DeviceType            *string                          `json:"DeviceType,omitempty"`
		EndCustomer           NullableAssetCustomerInformation `json:"EndCustomer,omitempty"`
		EndUserGlobalUltimate NullableAssetGlobalUltimate      `json:"EndUserGlobalUltimate,omitempty"`
		// Validates if the device is a genuine Cisco device. Validated is done using the Cisco SN2INFO APIs.
		IsValid *bool `json:"IsValid,omitempty"`
		// Item type of this specific Cisco device. example \"Chassis\".
		ItemType *string `json:"ItemType,omitempty"`
		// The last date of hardware support for this device.
		LastDateOfSupport *time.Time `json:"LastDateOfSupport,omitempty"`
		// Maintenance purchase order number for the Cisco device.
		MaintenancePurchaseOrderNumber *string `json:"MaintenancePurchaseOrderNumber,omitempty"`
		// Maintenance sales order number for the Cisco device.
		MaintenanceSalesOrderNumber *string `json:"MaintenanceSalesOrderNumber,omitempty"`
		// The platform type of the Cisco device. * `` - An unrecognized platform type. * `APIC` - A Cisco Application Policy Infrastructure Controller (APIC) cluster. * `CAPIC` - A Cisco Cloud Application Policy Infrastructure Controller (Cloud APIC) instance. * `DCNM` - A Cisco Data Center Network Manager (DCNM) instance. * `UCSFI` - A Cisco UCS Fabric Interconnect that is managed by Cisco UCS Manager (UCSM). * `UCSFIISM` - A Cisco UCS Fabric Interconnect that is managed by Cisco Intersight. * `IMC` - A standalone Cisco UCS rack server (Deprecated). * `IMCM4` - A standalone Cisco UCS C-Series or S-Series M4 server. * `IMCM5` - A standalone Cisco UCS C-Series or S-Series M5 server. * `IMCRack` - A standalone Cisco UCS C-Series or S-Series M6 or newer server. * `UCSIOM` - A Cisco UCS Blade Chassis I/O Module (IOM). * `HX` - A Cisco HyperFlex (HX) cluster. * `UCSD` - A Cisco UCS Director (UCSD) instance. * `IntersightAppliance` - A Cisco Intersight Connected Virtual Appliance instance. * `IntersightAssist` - A Cisco Intersight Assist instance. * `PureStorageFlashArray` - A Pure Storage FlashArray that is managed using Cisco Intersight Assist. Cisco Intersight Workload Optimizer and storage management features are supported on this device. * `NexusDevice` - A Cisco Nexus Network Switch that is managed using Cisco Intersight Assist. * `ACISwitch` - A Cisco Nexus Network Switch with the embedded Device Connector and is a part of the Cisco ACI fabric. * `NexusSwitch` - A standalone Cisco Nexus Network Switch with the embedded Device Connector. * `MDSSwitch` - A Cisco MDS Switch that is managed using the embedded Device Connector. * `MDSDevice` - A Cisco MDS Switch that is managed using Cisco Intersight Assist. * `UCSC890` - A standalone Cisco UCS C890 server managed using Cisco Intersight Assist. * `RedfishServer` - A generic target type for servers that support Redfish APIs and is managed using Cisco Intersight Assist. Support is limited to HPE and Dell Servers. * `NetAppOntap` - A Netapp ONTAP Storage system that is managed using Cisco Intersight Assist. Cisco Intersight Workload Optimizer features are supported on this device. * `NetAppActiveIqUnifiedManager` - A NetApp Active IQ Unified Manager (AIQUM) that is managed using Cisco Intersight Assist. * `EmcScaleIo` - An EMC ScaleIO Software Defined Storage system that is managed using Cisco Intersight Assist. Cisco Intersight Workload Optimizer features are supported on this device. * `EmcVmax` - An EMC VMAX 2 or 3 series enterprise storage array that is managed using Cisco Intersight Assist. Cisco Intersight Workload Optimizer features are supported on this device. * `EmcVplex` - An EMC VPLEX virtual storage system that is managed using Cisco Intersight Assist. Cisco Intersight Workload Optimizer features are supported on this device. * `EmcXtremIo` - An EMC XtremIO SSD storage system that is managed using Cisco Intersight Assist. Cisco Intersight Workload Optimizer features are supported on this device. * `VmwareVcenter` - A VMware vCenter instance that is managed using Cisco Intersight Assist. Cisco Intersight Workload Optimizer and Virtualization features are supported on this hypervisor. * `MicrosoftHyperV` - A Microsoft Hyper-V host that is managed using Cisco Intersight Assist. Optionally, other hosts in the cluster can be discovered through this host. Cisco Intersight Workload Optimizer features are supported on this hypervisor. * `AppDynamics` - An AppDynamics controller running in a SaaS or on-prem datacenter. On-prem AppDynamics instance is managed using Cisco Intersight Assist. Cisco Intersight Workload Optimizer features are supported on this controller. * `Dynatrace` - A Dynatrace Server instance running in a SaaS or on-prem datacenter. On-prem Dynatrace instance is managed using Cisco Intersight Assist. Cisco Intersight Workload Optimizer features are supported on this server. * `NewRelic` - A NewRelic user account. The NewRelic instance monitors the application infrastructure. Cisco Intersight Workload Optimizer features are supported on this server. * `ServiceNow` - A cloud-based workflow automation platform that enables enterprise organizations to improve operational efficiencies by streamlining and automating routine work tasks. * `Umbrella` - Umbrella cloud target that discovers and monitors an organization. It discovers entities like Datacenters, Devices, Tunnels, Networks, etc. * `CloudFoundry` - An open source cloud platform on which developers can build, deploy, run and scale applications. * `MicrosoftAzureApplicationInsights` - A feature of Azure Monitor, is an extensible Application Performance Management service for developers and DevOps professionals to monitor their live applications. * `OpenStack` - An OpenStack target manages Virtual Machines, Physical Machines, Datacenters and Virtual Datacenters using different OpenStack services as administrative endpoints. * `MicrosoftSqlServer` - A Microsoft SQL database server that is managed using Cisco Intersight Assist. Cisco Intersight Workload Optimizer features are supported on this database. * `MySqlServer` - A MySQL database server that is managed using Cisco Intersight Assist. Cisco Intersight Workload Optimizer features are supported on this database. * `OracleDatabaseServer` - An Oracle database server that is managed using Cisco Intersight Assist. Cisco Intersight Workload Optimizer features are supported on this database. * `IBMWebSphereApplicationServer` - An IBM WebSphere Application server that is managed using Cisco Intersight Assist. Cisco Intersight Workload Optimizer features are supported on this application server. * `OracleWebLogicServer` - Oracle WebLogic Server is a unified and extensible platform for developing, deploying and running enterprise applications, such as Java, for on-premises and in the cloud. WebLogic Server offers a robust, mature, and scalable implementation of Java Enterprise Edition (EE) and Jakarta EE. * `ApacheTomcatServer` - An Apache Tomcat server that is managed using Cisco Intersight Assist. Cisco Intersight Workload Optimizer features are supported on this server. * `JavaVirtualMachine` - A JVM Application with JMX configured that is managed using Cisco Intersight Assist. Cisco Intersight Workload Optimizer features are supported on this application. * `RedHatJBossApplicationServer` - JBoss Application Server is an open-source, cross-platform Java application server developed by JBoss, a division of Red Hat Inc. It is an open-source implementation of Java 2 Enterprise Edition (J2EE) that is used for implementing Java applications and other Web-based applications and software. * `Kubernetes` - A Kubernetes cluster that runs containerized applications, with Kubernetes Collector installed. Cisco Intersight Workload Optimizer features are supported on Kubernetes cluster. * `AmazonWebService` - An Amazon Web Service cloud account. Cisco Intersight Workload Optimizer and Virtualization features are supported on this cloud. * `AmazonWebServiceBilling` - An Amazon Web Service cloud billing account used to retrieve billing information stored in S3 bucket. Cisco Intersight Workload Optimizer features are supported on this cloud. * `GoogleCloudPlatform` - A Google Cloud Platform service account with access to one or more projects. Cisco Intersight Workload Optimizer features are supported on this cloud. * `GoogleCloudPlatformBilling` - A Google Cloud Platform service account used to retrieve billing information from BigQuery. Cisco Intersight Workload Optimizer features are supported on this cloud. * `MicrosoftAzureServicePrincipal` - A Microsoft Azure Service Principal account with access to Azure subscriptions. Cisco Intersight Workload Optimizer features are supported on this cloud. * `MicrosoftAzureEnterpriseAgreement` - A Microsoft Azure Enterprise Agreement enrolment used to retrieve pricing and billing information. Cisco Intersight Workload Optimizer features are supported on this cloud. * `MicrosoftAzureBilling` - A Microsoft Azure Service Principal account with access to billing information. Cisco Intersight Workload Optimizer features are supported on this cloud. * `DellCompellent` - A Dell EMC SC Series (Compellent) storage system that is managed using Cisco Intersight Assist. Cisco Intersight Workload Optimizer features are supported on this device. * `HPE3Par` - A HPE 3PAR StoreServ system that is managed using Cisco Intersight Assist. Cisco Intersight Workload Optimizer features are supported on this device. * `RedHatEnterpriseVirtualization` - A Red Hat Enterprise Virtualization Hypervisor system that manages Virtual Machines. * `NutanixAcropolis` - A Nutanix Acropolis cluster that is managed using Cisco Intersight Assist. Cisco Intersight Workload Optimizer features are supported on this cluster. * `NutanixPrismCentral` - A Nutanix Prism Central cluster. Prism central is a virtual appliance for managing Nutanix clusters and services. * `HPEOneView` - A HPE OneView system that is managed using Cisco Intersight Assist. Cisco Intersight Workload Optimizer features are supported on this system. * `ServiceEngine` - Cisco Application Services Engine. Cisco Application Services Engine is a platform to deploy and manage applications. * `HitachiVirtualStoragePlatform` - A Hitachi Virtual Storage Platform (Hitachi VSP) that is managed using Cisco Intersight Assist. * `GenericTarget` - A generic third-party target supported only in Partner Integration Appliance. This target type is used for development purposes and will not be supported in production environment. * `IMCBlade` - A Cisco UCS blade server managed by Cisco Intersight. * `TerraformCloud` - A Terraform Cloud Business Tier account. * `TerraformAgent` - A Terraform Cloud Agent that will be deployed on Cisco Intersight Assist. The agent can be used to plan and apply Terraform runs from a Terraform Cloud workspace. * `CustomTarget` - CustomTarget is deprecated. Use HTTPEndpoint type to claim HTTP endpoints. * `AnsibleEndpoint` - An external endpoint that is added as a target which can be accessed through Ansible in Intersight Cloud Orchestrator automation workflows. * `HTTPEndpoint` - An HTTP endpoint that can be accessed in Intersight Orchestrator workflows directly or using Cisco Intersight Assist. Authentication Schemes supported are Basic and Bearer Token. * `SSHEndpoint` - An SSH endpoint that can be accessed in Intersight Orchestrator workflows using Cisco Intersight Assist. * `CiscoCatalyst` - A Cisco Catalyst networking switch device. * `PowerShellEndpoint` - A Windows operating system server on which PowerShell scripts can be executed using Cisco Intersight Assist. * `CiscoDNAC` - A Cisco Digital Network Architecture (DNA) Center appliance. * `CiscoFMC` - A Cisco Secure Firewall Management Center. * `ViptelaCloud` - A Cisco Viptela SD-WAN Cloud. * `MerakiCloud` - A Cisco Meraki Organization. * `CiscoISE` - A Cisco Identity Services Engine (ISE) target.
		PlatformType *string                         `json:"PlatformType,omitempty"`
		Product      NullableAssetProductInformation `json:"Product,omitempty"`
		// Purchase order number for the Cisco device. It is a unique number assigned for every purchase.
		PurchaseOrderNumber    *string                     `json:"PurchaseOrderNumber,omitempty"`
		ResellerGlobalUltimate NullableAssetGlobalUltimate `json:"ResellerGlobalUltimate,omitempty"`
		// Sales order number for the Cisco device. It is a unique number assigned for every sale.
		SalesOrderNumber *string `json:"SalesOrderNumber,omitempty"`
		// The type of service contract that covers the Cisco device.
		ServiceDescription *string `json:"ServiceDescription,omitempty"`
		// End date for the Cisco service contract that covers this Cisco device.
		ServiceEndDate *time.Time `json:"ServiceEndDate,omitempty"`
		// The type of service contract that covers the Cisco device.
		ServiceLevel *string `json:"ServiceLevel,omitempty"`
		// The SKU of the service contract that covers the Cisco device.
		ServiceSku *string `json:"ServiceSku,omitempty"`
		// Start date for the Cisco service contract that covers this Cisco device.
		ServiceStartDate *time.Time `json:"ServiceStartDate,omitempty"`
		// Internal property used for triggering and tracking actions for contract information. * `Update` - Sn2Info/Contract information needs to be updated. * `OK` - Sn2Info/Contract information was fetched succcessfuly and updated. * `Failed` - Sn2Info/Contract information was not available  or failed while fetching. * `Retry` - Sn2Info/Contract information update failed and will be retried later.
		StateContract *string `json:"StateContract,omitempty"`
		// End date for the warranty that covers the Cisco device.
		WarrantyEndDate *string `json:"WarrantyEndDate,omitempty"`
		// Type of warranty that covers the Cisco device.
		WarrantyType     *string                                     `json:"WarrantyType,omitempty"`
		RegisteredDevice NullableAssetDeviceRegistrationRelationship `json:"RegisteredDevice,omitempty"`
		Source           NullableMoBaseMoRelationship                `json:"Source,omitempty"`
	}

	varAssetDeviceContractInformationWithoutEmbeddedStruct := AssetDeviceContractInformationWithoutEmbeddedStruct{}

	err = json.Unmarshal(data, &varAssetDeviceContractInformationWithoutEmbeddedStruct)
	if err == nil {
		varAssetDeviceContractInformation := _AssetDeviceContractInformation{}
		varAssetDeviceContractInformation.ClassId = varAssetDeviceContractInformationWithoutEmbeddedStruct.ClassId
		varAssetDeviceContractInformation.ObjectType = varAssetDeviceContractInformationWithoutEmbeddedStruct.ObjectType
		varAssetDeviceContractInformation.Contract = varAssetDeviceContractInformationWithoutEmbeddedStruct.Contract
		varAssetDeviceContractInformation.ContractStatus = varAssetDeviceContractInformationWithoutEmbeddedStruct.ContractStatus
		varAssetDeviceContractInformation.ContractStatusReason = varAssetDeviceContractInformationWithoutEmbeddedStruct.ContractStatusReason
		varAssetDeviceContractInformation.ContractUnavailableRetryCount = varAssetDeviceContractInformationWithoutEmbeddedStruct.ContractUnavailableRetryCount
		varAssetDeviceContractInformation.ContractUpdatedTime = varAssetDeviceContractInformationWithoutEmbeddedStruct.ContractUpdatedTime
		varAssetDeviceContractInformation.CoveredProductLineEndDate = varAssetDeviceContractInformationWithoutEmbeddedStruct.CoveredProductLineEndDate
		varAssetDeviceContractInformation.DeviceId = varAssetDeviceContractInformationWithoutEmbeddedStruct.DeviceId
		varAssetDeviceContractInformation.DeviceType = varAssetDeviceContractInformationWithoutEmbeddedStruct.DeviceType
		varAssetDeviceContractInformation.EndCustomer = varAssetDeviceContractInformationWithoutEmbeddedStruct.EndCustomer
		varAssetDeviceContractInformation.EndUserGlobalUltimate = varAssetDeviceContractInformationWithoutEmbeddedStruct.EndUserGlobalUltimate
		varAssetDeviceContractInformation.IsValid = varAssetDeviceContractInformationWithoutEmbeddedStruct.IsValid
		varAssetDeviceContractInformation.ItemType = varAssetDeviceContractInformationWithoutEmbeddedStruct.ItemType
		varAssetDeviceContractInformation.LastDateOfSupport = varAssetDeviceContractInformationWithoutEmbeddedStruct.LastDateOfSupport
		varAssetDeviceContractInformation.MaintenancePurchaseOrderNumber = varAssetDeviceContractInformationWithoutEmbeddedStruct.MaintenancePurchaseOrderNumber
		varAssetDeviceContractInformation.MaintenanceSalesOrderNumber = varAssetDeviceContractInformationWithoutEmbeddedStruct.MaintenanceSalesOrderNumber
		varAssetDeviceContractInformation.PlatformType = varAssetDeviceContractInformationWithoutEmbeddedStruct.PlatformType
		varAssetDeviceContractInformation.Product = varAssetDeviceContractInformationWithoutEmbeddedStruct.Product
		varAssetDeviceContractInformation.PurchaseOrderNumber = varAssetDeviceContractInformationWithoutEmbeddedStruct.PurchaseOrderNumber
		varAssetDeviceContractInformation.ResellerGlobalUltimate = varAssetDeviceContractInformationWithoutEmbeddedStruct.ResellerGlobalUltimate
		varAssetDeviceContractInformation.SalesOrderNumber = varAssetDeviceContractInformationWithoutEmbeddedStruct.SalesOrderNumber
		varAssetDeviceContractInformation.ServiceDescription = varAssetDeviceContractInformationWithoutEmbeddedStruct.ServiceDescription
		varAssetDeviceContractInformation.ServiceEndDate = varAssetDeviceContractInformationWithoutEmbeddedStruct.ServiceEndDate
		varAssetDeviceContractInformation.ServiceLevel = varAssetDeviceContractInformationWithoutEmbeddedStruct.ServiceLevel
		varAssetDeviceContractInformation.ServiceSku = varAssetDeviceContractInformationWithoutEmbeddedStruct.ServiceSku
		varAssetDeviceContractInformation.ServiceStartDate = varAssetDeviceContractInformationWithoutEmbeddedStruct.ServiceStartDate
		varAssetDeviceContractInformation.StateContract = varAssetDeviceContractInformationWithoutEmbeddedStruct.StateContract
		varAssetDeviceContractInformation.WarrantyEndDate = varAssetDeviceContractInformationWithoutEmbeddedStruct.WarrantyEndDate
		varAssetDeviceContractInformation.WarrantyType = varAssetDeviceContractInformationWithoutEmbeddedStruct.WarrantyType
		varAssetDeviceContractInformation.RegisteredDevice = varAssetDeviceContractInformationWithoutEmbeddedStruct.RegisteredDevice
		varAssetDeviceContractInformation.Source = varAssetDeviceContractInformationWithoutEmbeddedStruct.Source
		*o = AssetDeviceContractInformation(varAssetDeviceContractInformation)
	} else {
		return err
	}

	varAssetDeviceContractInformation := _AssetDeviceContractInformation{}

	err = json.Unmarshal(data, &varAssetDeviceContractInformation)
	if err == nil {
		o.MoBaseMo = varAssetDeviceContractInformation.MoBaseMo
	} else {
		return err
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "ClassId")
		delete(additionalProperties, "ObjectType")
		delete(additionalProperties, "Contract")
		delete(additionalProperties, "ContractStatus")
		delete(additionalProperties, "ContractStatusReason")
		delete(additionalProperties, "ContractUnavailableRetryCount")
		delete(additionalProperties, "ContractUpdatedTime")
		delete(additionalProperties, "CoveredProductLineEndDate")
		delete(additionalProperties, "DeviceId")
		delete(additionalProperties, "DeviceType")
		delete(additionalProperties, "EndCustomer")
		delete(additionalProperties, "EndUserGlobalUltimate")
		delete(additionalProperties, "IsValid")
		delete(additionalProperties, "ItemType")
		delete(additionalProperties, "LastDateOfSupport")
		delete(additionalProperties, "MaintenancePurchaseOrderNumber")
		delete(additionalProperties, "MaintenanceSalesOrderNumber")
		delete(additionalProperties, "PlatformType")
		delete(additionalProperties, "Product")
		delete(additionalProperties, "PurchaseOrderNumber")
		delete(additionalProperties, "ResellerGlobalUltimate")
		delete(additionalProperties, "SalesOrderNumber")
		delete(additionalProperties, "ServiceDescription")
		delete(additionalProperties, "ServiceEndDate")
		delete(additionalProperties, "ServiceLevel")
		delete(additionalProperties, "ServiceSku")
		delete(additionalProperties, "ServiceStartDate")
		delete(additionalProperties, "StateContract")
		delete(additionalProperties, "WarrantyEndDate")
		delete(additionalProperties, "WarrantyType")
		delete(additionalProperties, "RegisteredDevice")
		delete(additionalProperties, "Source")

		// remove fields from embedded structs
		reflectMoBaseMo := reflect.ValueOf(o.MoBaseMo)
		for i := 0; i < reflectMoBaseMo.Type().NumField(); i++ {
			t := reflectMoBaseMo.Type().Field(i)

			if jsonTag := t.Tag.Get("json"); jsonTag != "" {
				fieldName := ""
				if commaIdx := strings.Index(jsonTag, ","); commaIdx > 0 {
					fieldName = jsonTag[:commaIdx]
				} else {
					fieldName = jsonTag
				}
				if fieldName != "AdditionalProperties" {
					delete(additionalProperties, fieldName)
				}
			}
		}

		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableAssetDeviceContractInformation struct {
	value *AssetDeviceContractInformation
	isSet bool
}

func (v NullableAssetDeviceContractInformation) Get() *AssetDeviceContractInformation {
	return v.value
}

func (v *NullableAssetDeviceContractInformation) Set(val *AssetDeviceContractInformation) {
	v.value = val
	v.isSet = true
}

func (v NullableAssetDeviceContractInformation) IsSet() bool {
	return v.isSet
}

func (v *NullableAssetDeviceContractInformation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAssetDeviceContractInformation(val *AssetDeviceContractInformation) *NullableAssetDeviceContractInformation {
	return &NullableAssetDeviceContractInformation{value: val, isSet: true}
}

func (v NullableAssetDeviceContractInformation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAssetDeviceContractInformation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
