/*
Cisco Intersight

Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations. The Intersight OpenAPI document defines the complete set of properties that are returned in the HTTP response. From that perspective, a client can expect that no additional properties are returned, unless these properties are explicitly defined in the OpenAPI document. However, when a client uses an older version of the Intersight OpenAPI document, the server may send additional properties because the software is more recent than the client. In that case, the client may receive properties that it does not know about. Some generated SDKs perform a strict validation of the HTTP response body against the OpenAPI document.

API version: 1.0.11-2024120409
Contact: intersight@cisco.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package intersight

import (
	"encoding/json"
	"fmt"
	"reflect"
	"strings"
)

// checks if the FunctionsRuntime type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FunctionsRuntime{}

// FunctionsRuntime The managed object which has info about language runtime.
type FunctionsRuntime struct {
	MoBaseMo
	// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.
	ClassId string `json:"ClassId"`
	// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
	ObjectType string `json:"ObjectType"`
	// Action against the Runtime. * `None` - No action is set, this is the default value for action field. * `Disable` - Disable an instance of a Runtime. * `Deprecate` - Deprecate an instance of a Runtime. * `FlagInsecure` - Flag an instance of a Runtime as insecure.
	Action *string `json:"Action,omitempty"`
	// Name of file containing function source code.
	CodeFileName *string `json:"CodeFileName,omitempty" validate:"regexp=^[a-zA-Z0-9]{1}[a-zA-Z0-9_.-]{0,63}$"`
	// Template to guide on how to compose code.
	CodeTemplate *string                     `json:"CodeTemplate,omitempty"`
	Components   []FunctionsRuntimeComponent `json:"Components,omitempty"`
	// The user identifier who created the language runtime.
	CreateUser *string `json:"CreateUser,omitempty"`
	// Indicate if this language runtime is deprecated.
	Deprecated *bool `json:"Deprecated,omitempty"`
	// Description of the language runtime.
	Description *string `json:"Description,omitempty"`
	// The display name of the language runtime. Display name can only contain letters (a-z, A-Z), numbers (0-9), hyphen (-), period (.), colon (:), space ( ) or an underscore (_).
	DisplayName *string `json:"DisplayName,omitempty" validate:"regexp=^[a-zA-Z0-9]{1}[\\\\sa-zA-Z0-9_.:-]{0,91}$"`
	// Indicate if this language runtime is enabled. If not, the runtime is not usable at all.
	Enabled *bool `json:"Enabled,omitempty"`
	// Indicate if this language runtime is insecure due to vulnerabilities.
	Insecure *bool `json:"Insecure,omitempty"`
	// The official name of the programming language. * `Python` - Python programming language.
	LanguageName *string `json:"LanguageName,omitempty"`
	// The version of the programming language.
	LanguageVersion *string `json:"LanguageVersion,omitempty" validate:"regexp=^[a-zA-Z0-9](.{0,62}\\\\S)?$"`
	// The user identifier who last updated the language runtime.
	ModUser *string `json:"ModUser,omitempty"`
	// The name of the language runtime. Name can only contain letters (a-z, A-Z), numbers (0-9), hyphen (-), period (.) or an underscore (_).
	Name *string `json:"Name,omitempty" validate:"regexp=^[a-zA-Z0-9]{1}[a-zA-Z0-9_.-]{0,63}$"`
	// A note to bring user's attention to the status of this language runtime.
	Note *string `json:"Note,omitempty"`
	// Path to the runtime file.
	RuntimeFilePath *string `json:"RuntimeFilePath,omitempty"`
	// Moid of Upload which represents the uploaded runtime file.
	RuntimeUploadMoid    *string                             `json:"RuntimeUploadMoid,omitempty"`
	Catalog              NullableWorkflowCatalogRelationship `json:"Catalog,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _FunctionsRuntime FunctionsRuntime

// NewFunctionsRuntime instantiates a new FunctionsRuntime object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFunctionsRuntime(classId string, objectType string) *FunctionsRuntime {
	this := FunctionsRuntime{}
	this.ClassId = classId
	this.ObjectType = objectType
	var action string = "None"
	this.Action = &action
	var languageName string = "Python"
	this.LanguageName = &languageName
	return &this
}

// NewFunctionsRuntimeWithDefaults instantiates a new FunctionsRuntime object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFunctionsRuntimeWithDefaults() *FunctionsRuntime {
	this := FunctionsRuntime{}
	var classId string = "functions.Runtime"
	this.ClassId = classId
	var objectType string = "functions.Runtime"
	this.ObjectType = objectType
	var action string = "None"
	this.Action = &action
	var languageName string = "Python"
	this.LanguageName = &languageName
	return &this
}

// GetClassId returns the ClassId field value
func (o *FunctionsRuntime) GetClassId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ClassId
}

// GetClassIdOk returns a tuple with the ClassId field value
// and a boolean to check if the value has been set.
func (o *FunctionsRuntime) GetClassIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ClassId, true
}

// SetClassId sets field value
func (o *FunctionsRuntime) SetClassId(v string) {
	o.ClassId = v
}

// GetDefaultClassId returns the default value "functions.Runtime" of the ClassId field.
func (o *FunctionsRuntime) GetDefaultClassId() interface{} {
	return "functions.Runtime"
}

// GetObjectType returns the ObjectType field value
func (o *FunctionsRuntime) GetObjectType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ObjectType
}

// GetObjectTypeOk returns a tuple with the ObjectType field value
// and a boolean to check if the value has been set.
func (o *FunctionsRuntime) GetObjectTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ObjectType, true
}

// SetObjectType sets field value
func (o *FunctionsRuntime) SetObjectType(v string) {
	o.ObjectType = v
}

// GetDefaultObjectType returns the default value "functions.Runtime" of the ObjectType field.
func (o *FunctionsRuntime) GetDefaultObjectType() interface{} {
	return "functions.Runtime"
}

// GetAction returns the Action field value if set, zero value otherwise.
func (o *FunctionsRuntime) GetAction() string {
	if o == nil || IsNil(o.Action) {
		var ret string
		return ret
	}
	return *o.Action
}

// GetActionOk returns a tuple with the Action field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FunctionsRuntime) GetActionOk() (*string, bool) {
	if o == nil || IsNil(o.Action) {
		return nil, false
	}
	return o.Action, true
}

// HasAction returns a boolean if a field has been set.
func (o *FunctionsRuntime) HasAction() bool {
	if o != nil && !IsNil(o.Action) {
		return true
	}

	return false
}

// SetAction gets a reference to the given string and assigns it to the Action field.
func (o *FunctionsRuntime) SetAction(v string) {
	o.Action = &v
}

// GetCodeFileName returns the CodeFileName field value if set, zero value otherwise.
func (o *FunctionsRuntime) GetCodeFileName() string {
	if o == nil || IsNil(o.CodeFileName) {
		var ret string
		return ret
	}
	return *o.CodeFileName
}

// GetCodeFileNameOk returns a tuple with the CodeFileName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FunctionsRuntime) GetCodeFileNameOk() (*string, bool) {
	if o == nil || IsNil(o.CodeFileName) {
		return nil, false
	}
	return o.CodeFileName, true
}

// HasCodeFileName returns a boolean if a field has been set.
func (o *FunctionsRuntime) HasCodeFileName() bool {
	if o != nil && !IsNil(o.CodeFileName) {
		return true
	}

	return false
}

// SetCodeFileName gets a reference to the given string and assigns it to the CodeFileName field.
func (o *FunctionsRuntime) SetCodeFileName(v string) {
	o.CodeFileName = &v
}

// GetCodeTemplate returns the CodeTemplate field value if set, zero value otherwise.
func (o *FunctionsRuntime) GetCodeTemplate() string {
	if o == nil || IsNil(o.CodeTemplate) {
		var ret string
		return ret
	}
	return *o.CodeTemplate
}

// GetCodeTemplateOk returns a tuple with the CodeTemplate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FunctionsRuntime) GetCodeTemplateOk() (*string, bool) {
	if o == nil || IsNil(o.CodeTemplate) {
		return nil, false
	}
	return o.CodeTemplate, true
}

// HasCodeTemplate returns a boolean if a field has been set.
func (o *FunctionsRuntime) HasCodeTemplate() bool {
	if o != nil && !IsNil(o.CodeTemplate) {
		return true
	}

	return false
}

// SetCodeTemplate gets a reference to the given string and assigns it to the CodeTemplate field.
func (o *FunctionsRuntime) SetCodeTemplate(v string) {
	o.CodeTemplate = &v
}

// GetComponents returns the Components field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FunctionsRuntime) GetComponents() []FunctionsRuntimeComponent {
	if o == nil {
		var ret []FunctionsRuntimeComponent
		return ret
	}
	return o.Components
}

// GetComponentsOk returns a tuple with the Components field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FunctionsRuntime) GetComponentsOk() ([]FunctionsRuntimeComponent, bool) {
	if o == nil || IsNil(o.Components) {
		return nil, false
	}
	return o.Components, true
}

// HasComponents returns a boolean if a field has been set.
func (o *FunctionsRuntime) HasComponents() bool {
	if o != nil && !IsNil(o.Components) {
		return true
	}

	return false
}

// SetComponents gets a reference to the given []FunctionsRuntimeComponent and assigns it to the Components field.
func (o *FunctionsRuntime) SetComponents(v []FunctionsRuntimeComponent) {
	o.Components = v
}

// GetCreateUser returns the CreateUser field value if set, zero value otherwise.
func (o *FunctionsRuntime) GetCreateUser() string {
	if o == nil || IsNil(o.CreateUser) {
		var ret string
		return ret
	}
	return *o.CreateUser
}

// GetCreateUserOk returns a tuple with the CreateUser field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FunctionsRuntime) GetCreateUserOk() (*string, bool) {
	if o == nil || IsNil(o.CreateUser) {
		return nil, false
	}
	return o.CreateUser, true
}

// HasCreateUser returns a boolean if a field has been set.
func (o *FunctionsRuntime) HasCreateUser() bool {
	if o != nil && !IsNil(o.CreateUser) {
		return true
	}

	return false
}

// SetCreateUser gets a reference to the given string and assigns it to the CreateUser field.
func (o *FunctionsRuntime) SetCreateUser(v string) {
	o.CreateUser = &v
}

// GetDeprecated returns the Deprecated field value if set, zero value otherwise.
func (o *FunctionsRuntime) GetDeprecated() bool {
	if o == nil || IsNil(o.Deprecated) {
		var ret bool
		return ret
	}
	return *o.Deprecated
}

// GetDeprecatedOk returns a tuple with the Deprecated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FunctionsRuntime) GetDeprecatedOk() (*bool, bool) {
	if o == nil || IsNil(o.Deprecated) {
		return nil, false
	}
	return o.Deprecated, true
}

// HasDeprecated returns a boolean if a field has been set.
func (o *FunctionsRuntime) HasDeprecated() bool {
	if o != nil && !IsNil(o.Deprecated) {
		return true
	}

	return false
}

// SetDeprecated gets a reference to the given bool and assigns it to the Deprecated field.
func (o *FunctionsRuntime) SetDeprecated(v bool) {
	o.Deprecated = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *FunctionsRuntime) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FunctionsRuntime) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *FunctionsRuntime) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *FunctionsRuntime) SetDescription(v string) {
	o.Description = &v
}

// GetDisplayName returns the DisplayName field value if set, zero value otherwise.
func (o *FunctionsRuntime) GetDisplayName() string {
	if o == nil || IsNil(o.DisplayName) {
		var ret string
		return ret
	}
	return *o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FunctionsRuntime) GetDisplayNameOk() (*string, bool) {
	if o == nil || IsNil(o.DisplayName) {
		return nil, false
	}
	return o.DisplayName, true
}

// HasDisplayName returns a boolean if a field has been set.
func (o *FunctionsRuntime) HasDisplayName() bool {
	if o != nil && !IsNil(o.DisplayName) {
		return true
	}

	return false
}

// SetDisplayName gets a reference to the given string and assigns it to the DisplayName field.
func (o *FunctionsRuntime) SetDisplayName(v string) {
	o.DisplayName = &v
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *FunctionsRuntime) GetEnabled() bool {
	if o == nil || IsNil(o.Enabled) {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FunctionsRuntime) GetEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.Enabled) {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *FunctionsRuntime) HasEnabled() bool {
	if o != nil && !IsNil(o.Enabled) {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *FunctionsRuntime) SetEnabled(v bool) {
	o.Enabled = &v
}

// GetInsecure returns the Insecure field value if set, zero value otherwise.
func (o *FunctionsRuntime) GetInsecure() bool {
	if o == nil || IsNil(o.Insecure) {
		var ret bool
		return ret
	}
	return *o.Insecure
}

// GetInsecureOk returns a tuple with the Insecure field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FunctionsRuntime) GetInsecureOk() (*bool, bool) {
	if o == nil || IsNil(o.Insecure) {
		return nil, false
	}
	return o.Insecure, true
}

// HasInsecure returns a boolean if a field has been set.
func (o *FunctionsRuntime) HasInsecure() bool {
	if o != nil && !IsNil(o.Insecure) {
		return true
	}

	return false
}

// SetInsecure gets a reference to the given bool and assigns it to the Insecure field.
func (o *FunctionsRuntime) SetInsecure(v bool) {
	o.Insecure = &v
}

// GetLanguageName returns the LanguageName field value if set, zero value otherwise.
func (o *FunctionsRuntime) GetLanguageName() string {
	if o == nil || IsNil(o.LanguageName) {
		var ret string
		return ret
	}
	return *o.LanguageName
}

// GetLanguageNameOk returns a tuple with the LanguageName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FunctionsRuntime) GetLanguageNameOk() (*string, bool) {
	if o == nil || IsNil(o.LanguageName) {
		return nil, false
	}
	return o.LanguageName, true
}

// HasLanguageName returns a boolean if a field has been set.
func (o *FunctionsRuntime) HasLanguageName() bool {
	if o != nil && !IsNil(o.LanguageName) {
		return true
	}

	return false
}

// SetLanguageName gets a reference to the given string and assigns it to the LanguageName field.
func (o *FunctionsRuntime) SetLanguageName(v string) {
	o.LanguageName = &v
}

// GetLanguageVersion returns the LanguageVersion field value if set, zero value otherwise.
func (o *FunctionsRuntime) GetLanguageVersion() string {
	if o == nil || IsNil(o.LanguageVersion) {
		var ret string
		return ret
	}
	return *o.LanguageVersion
}

// GetLanguageVersionOk returns a tuple with the LanguageVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FunctionsRuntime) GetLanguageVersionOk() (*string, bool) {
	if o == nil || IsNil(o.LanguageVersion) {
		return nil, false
	}
	return o.LanguageVersion, true
}

// HasLanguageVersion returns a boolean if a field has been set.
func (o *FunctionsRuntime) HasLanguageVersion() bool {
	if o != nil && !IsNil(o.LanguageVersion) {
		return true
	}

	return false
}

// SetLanguageVersion gets a reference to the given string and assigns it to the LanguageVersion field.
func (o *FunctionsRuntime) SetLanguageVersion(v string) {
	o.LanguageVersion = &v
}

// GetModUser returns the ModUser field value if set, zero value otherwise.
func (o *FunctionsRuntime) GetModUser() string {
	if o == nil || IsNil(o.ModUser) {
		var ret string
		return ret
	}
	return *o.ModUser
}

// GetModUserOk returns a tuple with the ModUser field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FunctionsRuntime) GetModUserOk() (*string, bool) {
	if o == nil || IsNil(o.ModUser) {
		return nil, false
	}
	return o.ModUser, true
}

// HasModUser returns a boolean if a field has been set.
func (o *FunctionsRuntime) HasModUser() bool {
	if o != nil && !IsNil(o.ModUser) {
		return true
	}

	return false
}

// SetModUser gets a reference to the given string and assigns it to the ModUser field.
func (o *FunctionsRuntime) SetModUser(v string) {
	o.ModUser = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *FunctionsRuntime) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FunctionsRuntime) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *FunctionsRuntime) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *FunctionsRuntime) SetName(v string) {
	o.Name = &v
}

// GetNote returns the Note field value if set, zero value otherwise.
func (o *FunctionsRuntime) GetNote() string {
	if o == nil || IsNil(o.Note) {
		var ret string
		return ret
	}
	return *o.Note
}

// GetNoteOk returns a tuple with the Note field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FunctionsRuntime) GetNoteOk() (*string, bool) {
	if o == nil || IsNil(o.Note) {
		return nil, false
	}
	return o.Note, true
}

// HasNote returns a boolean if a field has been set.
func (o *FunctionsRuntime) HasNote() bool {
	if o != nil && !IsNil(o.Note) {
		return true
	}

	return false
}

// SetNote gets a reference to the given string and assigns it to the Note field.
func (o *FunctionsRuntime) SetNote(v string) {
	o.Note = &v
}

// GetRuntimeFilePath returns the RuntimeFilePath field value if set, zero value otherwise.
func (o *FunctionsRuntime) GetRuntimeFilePath() string {
	if o == nil || IsNil(o.RuntimeFilePath) {
		var ret string
		return ret
	}
	return *o.RuntimeFilePath
}

// GetRuntimeFilePathOk returns a tuple with the RuntimeFilePath field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FunctionsRuntime) GetRuntimeFilePathOk() (*string, bool) {
	if o == nil || IsNil(o.RuntimeFilePath) {
		return nil, false
	}
	return o.RuntimeFilePath, true
}

// HasRuntimeFilePath returns a boolean if a field has been set.
func (o *FunctionsRuntime) HasRuntimeFilePath() bool {
	if o != nil && !IsNil(o.RuntimeFilePath) {
		return true
	}

	return false
}

// SetRuntimeFilePath gets a reference to the given string and assigns it to the RuntimeFilePath field.
func (o *FunctionsRuntime) SetRuntimeFilePath(v string) {
	o.RuntimeFilePath = &v
}

// GetRuntimeUploadMoid returns the RuntimeUploadMoid field value if set, zero value otherwise.
func (o *FunctionsRuntime) GetRuntimeUploadMoid() string {
	if o == nil || IsNil(o.RuntimeUploadMoid) {
		var ret string
		return ret
	}
	return *o.RuntimeUploadMoid
}

// GetRuntimeUploadMoidOk returns a tuple with the RuntimeUploadMoid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FunctionsRuntime) GetRuntimeUploadMoidOk() (*string, bool) {
	if o == nil || IsNil(o.RuntimeUploadMoid) {
		return nil, false
	}
	return o.RuntimeUploadMoid, true
}

// HasRuntimeUploadMoid returns a boolean if a field has been set.
func (o *FunctionsRuntime) HasRuntimeUploadMoid() bool {
	if o != nil && !IsNil(o.RuntimeUploadMoid) {
		return true
	}

	return false
}

// SetRuntimeUploadMoid gets a reference to the given string and assigns it to the RuntimeUploadMoid field.
func (o *FunctionsRuntime) SetRuntimeUploadMoid(v string) {
	o.RuntimeUploadMoid = &v
}

// GetCatalog returns the Catalog field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FunctionsRuntime) GetCatalog() WorkflowCatalogRelationship {
	if o == nil || IsNil(o.Catalog.Get()) {
		var ret WorkflowCatalogRelationship
		return ret
	}
	return *o.Catalog.Get()
}

// GetCatalogOk returns a tuple with the Catalog field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FunctionsRuntime) GetCatalogOk() (*WorkflowCatalogRelationship, bool) {
	if o == nil {
		return nil, false
	}
	return o.Catalog.Get(), o.Catalog.IsSet()
}

// HasCatalog returns a boolean if a field has been set.
func (o *FunctionsRuntime) HasCatalog() bool {
	if o != nil && o.Catalog.IsSet() {
		return true
	}

	return false
}

// SetCatalog gets a reference to the given NullableWorkflowCatalogRelationship and assigns it to the Catalog field.
func (o *FunctionsRuntime) SetCatalog(v WorkflowCatalogRelationship) {
	o.Catalog.Set(&v)
}

// SetCatalogNil sets the value for Catalog to be an explicit nil
func (o *FunctionsRuntime) SetCatalogNil() {
	o.Catalog.Set(nil)
}

// UnsetCatalog ensures that no value is present for Catalog, not even an explicit nil
func (o *FunctionsRuntime) UnsetCatalog() {
	o.Catalog.Unset()
}

func (o FunctionsRuntime) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FunctionsRuntime) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	serializedMoBaseMo, errMoBaseMo := json.Marshal(o.MoBaseMo)
	if errMoBaseMo != nil {
		return map[string]interface{}{}, errMoBaseMo
	}
	errMoBaseMo = json.Unmarshal([]byte(serializedMoBaseMo), &toSerialize)
	if errMoBaseMo != nil {
		return map[string]interface{}{}, errMoBaseMo
	}
	if _, exists := toSerialize["ClassId"]; !exists {
		toSerialize["ClassId"] = o.GetDefaultClassId()
	}
	toSerialize["ClassId"] = o.ClassId
	if _, exists := toSerialize["ObjectType"]; !exists {
		toSerialize["ObjectType"] = o.GetDefaultObjectType()
	}
	toSerialize["ObjectType"] = o.ObjectType
	if !IsNil(o.Action) {
		toSerialize["Action"] = o.Action
	}
	if !IsNil(o.CodeFileName) {
		toSerialize["CodeFileName"] = o.CodeFileName
	}
	if !IsNil(o.CodeTemplate) {
		toSerialize["CodeTemplate"] = o.CodeTemplate
	}
	if o.Components != nil {
		toSerialize["Components"] = o.Components
	}
	if !IsNil(o.CreateUser) {
		toSerialize["CreateUser"] = o.CreateUser
	}
	if !IsNil(o.Deprecated) {
		toSerialize["Deprecated"] = o.Deprecated
	}
	if !IsNil(o.Description) {
		toSerialize["Description"] = o.Description
	}
	if !IsNil(o.DisplayName) {
		toSerialize["DisplayName"] = o.DisplayName
	}
	if !IsNil(o.Enabled) {
		toSerialize["Enabled"] = o.Enabled
	}
	if !IsNil(o.Insecure) {
		toSerialize["Insecure"] = o.Insecure
	}
	if !IsNil(o.LanguageName) {
		toSerialize["LanguageName"] = o.LanguageName
	}
	if !IsNil(o.LanguageVersion) {
		toSerialize["LanguageVersion"] = o.LanguageVersion
	}
	if !IsNil(o.ModUser) {
		toSerialize["ModUser"] = o.ModUser
	}
	if !IsNil(o.Name) {
		toSerialize["Name"] = o.Name
	}
	if !IsNil(o.Note) {
		toSerialize["Note"] = o.Note
	}
	if !IsNil(o.RuntimeFilePath) {
		toSerialize["RuntimeFilePath"] = o.RuntimeFilePath
	}
	if !IsNil(o.RuntimeUploadMoid) {
		toSerialize["RuntimeUploadMoid"] = o.RuntimeUploadMoid
	}
	if o.Catalog.IsSet() {
		toSerialize["Catalog"] = o.Catalog.Get()
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *FunctionsRuntime) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"ClassId",
		"ObjectType",
	}

	// defaultValueFuncMap captures the default values for required properties.
	// These values are used when required properties are missing from the payload.
	defaultValueFuncMap := map[string]func() interface{}{
		"ClassId":    o.GetDefaultClassId,
		"ObjectType": o.GetDefaultObjectType,
	}
	var defaultValueApplied bool
	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			if _, ok := defaultValueFuncMap[requiredProperty]; ok {
				allProperties[requiredProperty] = defaultValueFuncMap[requiredProperty]()
				defaultValueApplied = true
			}
		}
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	if defaultValueApplied {
		data, err = json.Marshal(allProperties)
		if err != nil {
			return err
		}
	}
	type FunctionsRuntimeWithoutEmbeddedStruct struct {
		// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.
		ClassId string `json:"ClassId"`
		// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
		ObjectType string `json:"ObjectType"`
		// Action against the Runtime. * `None` - No action is set, this is the default value for action field. * `Disable` - Disable an instance of a Runtime. * `Deprecate` - Deprecate an instance of a Runtime. * `FlagInsecure` - Flag an instance of a Runtime as insecure.
		Action *string `json:"Action,omitempty"`
		// Name of file containing function source code.
		CodeFileName *string `json:"CodeFileName,omitempty" validate:"regexp=^[a-zA-Z0-9]{1}[a-zA-Z0-9_.-]{0,63}$"`
		// Template to guide on how to compose code.
		CodeTemplate *string                     `json:"CodeTemplate,omitempty"`
		Components   []FunctionsRuntimeComponent `json:"Components,omitempty"`
		// The user identifier who created the language runtime.
		CreateUser *string `json:"CreateUser,omitempty"`
		// Indicate if this language runtime is deprecated.
		Deprecated *bool `json:"Deprecated,omitempty"`
		// Description of the language runtime.
		Description *string `json:"Description,omitempty"`
		// The display name of the language runtime. Display name can only contain letters (a-z, A-Z), numbers (0-9), hyphen (-), period (.), colon (:), space ( ) or an underscore (_).
		DisplayName *string `json:"DisplayName,omitempty" validate:"regexp=^[a-zA-Z0-9]{1}[\\\\sa-zA-Z0-9_.:-]{0,91}$"`
		// Indicate if this language runtime is enabled. If not, the runtime is not usable at all.
		Enabled *bool `json:"Enabled,omitempty"`
		// Indicate if this language runtime is insecure due to vulnerabilities.
		Insecure *bool `json:"Insecure,omitempty"`
		// The official name of the programming language. * `Python` - Python programming language.
		LanguageName *string `json:"LanguageName,omitempty"`
		// The version of the programming language.
		LanguageVersion *string `json:"LanguageVersion,omitempty" validate:"regexp=^[a-zA-Z0-9](.{0,62}\\\\S)?$"`
		// The user identifier who last updated the language runtime.
		ModUser *string `json:"ModUser,omitempty"`
		// The name of the language runtime. Name can only contain letters (a-z, A-Z), numbers (0-9), hyphen (-), period (.) or an underscore (_).
		Name *string `json:"Name,omitempty" validate:"regexp=^[a-zA-Z0-9]{1}[a-zA-Z0-9_.-]{0,63}$"`
		// A note to bring user's attention to the status of this language runtime.
		Note *string `json:"Note,omitempty"`
		// Path to the runtime file.
		RuntimeFilePath *string `json:"RuntimeFilePath,omitempty"`
		// Moid of Upload which represents the uploaded runtime file.
		RuntimeUploadMoid *string                             `json:"RuntimeUploadMoid,omitempty"`
		Catalog           NullableWorkflowCatalogRelationship `json:"Catalog,omitempty"`
	}

	varFunctionsRuntimeWithoutEmbeddedStruct := FunctionsRuntimeWithoutEmbeddedStruct{}

	err = json.Unmarshal(data, &varFunctionsRuntimeWithoutEmbeddedStruct)
	if err == nil {
		varFunctionsRuntime := _FunctionsRuntime{}
		varFunctionsRuntime.ClassId = varFunctionsRuntimeWithoutEmbeddedStruct.ClassId
		varFunctionsRuntime.ObjectType = varFunctionsRuntimeWithoutEmbeddedStruct.ObjectType
		varFunctionsRuntime.Action = varFunctionsRuntimeWithoutEmbeddedStruct.Action
		varFunctionsRuntime.CodeFileName = varFunctionsRuntimeWithoutEmbeddedStruct.CodeFileName
		varFunctionsRuntime.CodeTemplate = varFunctionsRuntimeWithoutEmbeddedStruct.CodeTemplate
		varFunctionsRuntime.Components = varFunctionsRuntimeWithoutEmbeddedStruct.Components
		varFunctionsRuntime.CreateUser = varFunctionsRuntimeWithoutEmbeddedStruct.CreateUser
		varFunctionsRuntime.Deprecated = varFunctionsRuntimeWithoutEmbeddedStruct.Deprecated
		varFunctionsRuntime.Description = varFunctionsRuntimeWithoutEmbeddedStruct.Description
		varFunctionsRuntime.DisplayName = varFunctionsRuntimeWithoutEmbeddedStruct.DisplayName
		varFunctionsRuntime.Enabled = varFunctionsRuntimeWithoutEmbeddedStruct.Enabled
		varFunctionsRuntime.Insecure = varFunctionsRuntimeWithoutEmbeddedStruct.Insecure
		varFunctionsRuntime.LanguageName = varFunctionsRuntimeWithoutEmbeddedStruct.LanguageName
		varFunctionsRuntime.LanguageVersion = varFunctionsRuntimeWithoutEmbeddedStruct.LanguageVersion
		varFunctionsRuntime.ModUser = varFunctionsRuntimeWithoutEmbeddedStruct.ModUser
		varFunctionsRuntime.Name = varFunctionsRuntimeWithoutEmbeddedStruct.Name
		varFunctionsRuntime.Note = varFunctionsRuntimeWithoutEmbeddedStruct.Note
		varFunctionsRuntime.RuntimeFilePath = varFunctionsRuntimeWithoutEmbeddedStruct.RuntimeFilePath
		varFunctionsRuntime.RuntimeUploadMoid = varFunctionsRuntimeWithoutEmbeddedStruct.RuntimeUploadMoid
		varFunctionsRuntime.Catalog = varFunctionsRuntimeWithoutEmbeddedStruct.Catalog
		*o = FunctionsRuntime(varFunctionsRuntime)
	} else {
		return err
	}

	varFunctionsRuntime := _FunctionsRuntime{}

	err = json.Unmarshal(data, &varFunctionsRuntime)
	if err == nil {
		o.MoBaseMo = varFunctionsRuntime.MoBaseMo
	} else {
		return err
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "ClassId")
		delete(additionalProperties, "ObjectType")
		delete(additionalProperties, "Action")
		delete(additionalProperties, "CodeFileName")
		delete(additionalProperties, "CodeTemplate")
		delete(additionalProperties, "Components")
		delete(additionalProperties, "CreateUser")
		delete(additionalProperties, "Deprecated")
		delete(additionalProperties, "Description")
		delete(additionalProperties, "DisplayName")
		delete(additionalProperties, "Enabled")
		delete(additionalProperties, "Insecure")
		delete(additionalProperties, "LanguageName")
		delete(additionalProperties, "LanguageVersion")
		delete(additionalProperties, "ModUser")
		delete(additionalProperties, "Name")
		delete(additionalProperties, "Note")
		delete(additionalProperties, "RuntimeFilePath")
		delete(additionalProperties, "RuntimeUploadMoid")
		delete(additionalProperties, "Catalog")

		// remove fields from embedded structs
		reflectMoBaseMo := reflect.ValueOf(o.MoBaseMo)
		for i := 0; i < reflectMoBaseMo.Type().NumField(); i++ {
			t := reflectMoBaseMo.Type().Field(i)

			if jsonTag := t.Tag.Get("json"); jsonTag != "" {
				fieldName := ""
				if commaIdx := strings.Index(jsonTag, ","); commaIdx > 0 {
					fieldName = jsonTag[:commaIdx]
				} else {
					fieldName = jsonTag
				}
				if fieldName != "AdditionalProperties" {
					delete(additionalProperties, fieldName)
				}
			}
		}

		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableFunctionsRuntime struct {
	value *FunctionsRuntime
	isSet bool
}

func (v NullableFunctionsRuntime) Get() *FunctionsRuntime {
	return v.value
}

func (v *NullableFunctionsRuntime) Set(val *FunctionsRuntime) {
	v.value = val
	v.isSet = true
}

func (v NullableFunctionsRuntime) IsSet() bool {
	return v.isSet
}

func (v *NullableFunctionsRuntime) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFunctionsRuntime(val *FunctionsRuntime) *NullableFunctionsRuntime {
	return &NullableFunctionsRuntime{value: val, isSet: true}
}

func (v NullableFunctionsRuntime) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFunctionsRuntime) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
