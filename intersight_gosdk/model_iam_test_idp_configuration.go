/*
Cisco Intersight

Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations. The Intersight OpenAPI document defines the complete set of properties that are returned in the HTTP response. From that perspective, a client can expect that no additional properties are returned, unless these properties are explicitly defined in the OpenAPI document. However, when a client uses an older version of the Intersight OpenAPI document, the server may send additional properties because the software is more recent than the client. In that case, the client may receive properties that it does not know about. Some generated SDKs perform a strict validation of the HTTP response body against the OpenAPI document.

API version: 1.0.11-2025101412
Contact: intersight@cisco.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package intersight

import (
	"encoding/json"
	"fmt"
	"reflect"
	"strings"
)

// checks if the IamTestIdpConfiguration type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &IamTestIdpConfiguration{}

// IamTestIdpConfiguration API used to test an Intersight IdP configuration.
type IamTestIdpConfiguration struct {
	MoBaseMo
	// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.
	ClassId string `json:"ClassId"`
	// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
	ObjectType string `json:"ObjectType"`
	// Error returned by the IdP when the configuration test fails.
	ErrorDetails *string `json:"ErrorDetails,omitempty"`
	// Entity ID of the IdP whose configuration needs to be tested.
	IdpEntityId *string `json:"IdpEntityId,omitempty"`
	// Indicates whether the value of the 'password' property has been set.
	IsPasswordSet *bool `json:"IsPasswordSet,omitempty"`
	// Total number of groups of the user received from the IdP after successful authentication.
	NoOfGroups *int64 `json:"NoOfGroups,omitempty"`
	// The password of the test user for testing the IdP configuration settings. It can be any string that adheres to the following constraints. It can have character except spaces, tabs, line breaks. It cannot be more than 256 characters.
	Password *string `json:"Password,omitempty" validate:"regexp=^$|^\\\\S{3,256}$"`
	// IdP configuration test result. * `Unverified` - The IdP configuration is yet to be verified. * `Verified` - Successfully authenticated the user via the configured IdP and verified the configuration parameters. * `Pending` - Pending verification of the IdP configuration. * `Failed` - Could not authenticate the user via the configured IdP and verify its configuration.
	Status *string `json:"Status,omitempty"`
	// Trigger property used to initiate an IdP configuration test.
	TriggerTest *bool `json:"TriggerTest,omitempty"`
	// Email or userId of the test user for testing the IdP configuration settings.
	Username             *string                    "json:\"Username,omitempty\" validate:\"regexp=^$|^(?:[a-zA-Z0-9._-]{3,256}|[a-zA-Z0-9.!#$%&'*+\\/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*)$\""
	Idp                  NullableIamIdpRelationship `json:"Idp,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _IamTestIdpConfiguration IamTestIdpConfiguration

// NewIamTestIdpConfiguration instantiates a new IamTestIdpConfiguration object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIamTestIdpConfiguration(classId string, objectType string) *IamTestIdpConfiguration {
	this := IamTestIdpConfiguration{}
	this.ClassId = classId
	this.ObjectType = objectType
	return &this
}

// NewIamTestIdpConfigurationWithDefaults instantiates a new IamTestIdpConfiguration object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIamTestIdpConfigurationWithDefaults() *IamTestIdpConfiguration {
	this := IamTestIdpConfiguration{}
	var classId string = "iam.TestIdpConfiguration"
	this.ClassId = classId
	var objectType string = "iam.TestIdpConfiguration"
	this.ObjectType = objectType
	return &this
}

// GetClassId returns the ClassId field value
func (o *IamTestIdpConfiguration) GetClassId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ClassId
}

// GetClassIdOk returns a tuple with the ClassId field value
// and a boolean to check if the value has been set.
func (o *IamTestIdpConfiguration) GetClassIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ClassId, true
}

// SetClassId sets field value
func (o *IamTestIdpConfiguration) SetClassId(v string) {
	o.ClassId = v
}

// GetDefaultClassId returns the default value "iam.TestIdpConfiguration" of the ClassId field.
func (o *IamTestIdpConfiguration) GetDefaultClassId() interface{} {
	return "iam.TestIdpConfiguration"
}

// GetObjectType returns the ObjectType field value
func (o *IamTestIdpConfiguration) GetObjectType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ObjectType
}

// GetObjectTypeOk returns a tuple with the ObjectType field value
// and a boolean to check if the value has been set.
func (o *IamTestIdpConfiguration) GetObjectTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ObjectType, true
}

// SetObjectType sets field value
func (o *IamTestIdpConfiguration) SetObjectType(v string) {
	o.ObjectType = v
}

// GetDefaultObjectType returns the default value "iam.TestIdpConfiguration" of the ObjectType field.
func (o *IamTestIdpConfiguration) GetDefaultObjectType() interface{} {
	return "iam.TestIdpConfiguration"
}

// GetErrorDetails returns the ErrorDetails field value if set, zero value otherwise.
func (o *IamTestIdpConfiguration) GetErrorDetails() string {
	if o == nil || IsNil(o.ErrorDetails) {
		var ret string
		return ret
	}
	return *o.ErrorDetails
}

// GetErrorDetailsOk returns a tuple with the ErrorDetails field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IamTestIdpConfiguration) GetErrorDetailsOk() (*string, bool) {
	if o == nil || IsNil(o.ErrorDetails) {
		return nil, false
	}
	return o.ErrorDetails, true
}

// HasErrorDetails returns a boolean if a field has been set.
func (o *IamTestIdpConfiguration) HasErrorDetails() bool {
	if o != nil && !IsNil(o.ErrorDetails) {
		return true
	}

	return false
}

// SetErrorDetails gets a reference to the given string and assigns it to the ErrorDetails field.
func (o *IamTestIdpConfiguration) SetErrorDetails(v string) {
	o.ErrorDetails = &v
}

// GetIdpEntityId returns the IdpEntityId field value if set, zero value otherwise.
func (o *IamTestIdpConfiguration) GetIdpEntityId() string {
	if o == nil || IsNil(o.IdpEntityId) {
		var ret string
		return ret
	}
	return *o.IdpEntityId
}

// GetIdpEntityIdOk returns a tuple with the IdpEntityId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IamTestIdpConfiguration) GetIdpEntityIdOk() (*string, bool) {
	if o == nil || IsNil(o.IdpEntityId) {
		return nil, false
	}
	return o.IdpEntityId, true
}

// HasIdpEntityId returns a boolean if a field has been set.
func (o *IamTestIdpConfiguration) HasIdpEntityId() bool {
	if o != nil && !IsNil(o.IdpEntityId) {
		return true
	}

	return false
}

// SetIdpEntityId gets a reference to the given string and assigns it to the IdpEntityId field.
func (o *IamTestIdpConfiguration) SetIdpEntityId(v string) {
	o.IdpEntityId = &v
}

// GetIsPasswordSet returns the IsPasswordSet field value if set, zero value otherwise.
func (o *IamTestIdpConfiguration) GetIsPasswordSet() bool {
	if o == nil || IsNil(o.IsPasswordSet) {
		var ret bool
		return ret
	}
	return *o.IsPasswordSet
}

// GetIsPasswordSetOk returns a tuple with the IsPasswordSet field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IamTestIdpConfiguration) GetIsPasswordSetOk() (*bool, bool) {
	if o == nil || IsNil(o.IsPasswordSet) {
		return nil, false
	}
	return o.IsPasswordSet, true
}

// HasIsPasswordSet returns a boolean if a field has been set.
func (o *IamTestIdpConfiguration) HasIsPasswordSet() bool {
	if o != nil && !IsNil(o.IsPasswordSet) {
		return true
	}

	return false
}

// SetIsPasswordSet gets a reference to the given bool and assigns it to the IsPasswordSet field.
func (o *IamTestIdpConfiguration) SetIsPasswordSet(v bool) {
	o.IsPasswordSet = &v
}

// GetNoOfGroups returns the NoOfGroups field value if set, zero value otherwise.
func (o *IamTestIdpConfiguration) GetNoOfGroups() int64 {
	if o == nil || IsNil(o.NoOfGroups) {
		var ret int64
		return ret
	}
	return *o.NoOfGroups
}

// GetNoOfGroupsOk returns a tuple with the NoOfGroups field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IamTestIdpConfiguration) GetNoOfGroupsOk() (*int64, bool) {
	if o == nil || IsNil(o.NoOfGroups) {
		return nil, false
	}
	return o.NoOfGroups, true
}

// HasNoOfGroups returns a boolean if a field has been set.
func (o *IamTestIdpConfiguration) HasNoOfGroups() bool {
	if o != nil && !IsNil(o.NoOfGroups) {
		return true
	}

	return false
}

// SetNoOfGroups gets a reference to the given int64 and assigns it to the NoOfGroups field.
func (o *IamTestIdpConfiguration) SetNoOfGroups(v int64) {
	o.NoOfGroups = &v
}

// GetPassword returns the Password field value if set, zero value otherwise.
func (o *IamTestIdpConfiguration) GetPassword() string {
	if o == nil || IsNil(o.Password) {
		var ret string
		return ret
	}
	return *o.Password
}

// GetPasswordOk returns a tuple with the Password field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IamTestIdpConfiguration) GetPasswordOk() (*string, bool) {
	if o == nil || IsNil(o.Password) {
		return nil, false
	}
	return o.Password, true
}

// HasPassword returns a boolean if a field has been set.
func (o *IamTestIdpConfiguration) HasPassword() bool {
	if o != nil && !IsNil(o.Password) {
		return true
	}

	return false
}

// SetPassword gets a reference to the given string and assigns it to the Password field.
func (o *IamTestIdpConfiguration) SetPassword(v string) {
	o.Password = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *IamTestIdpConfiguration) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IamTestIdpConfiguration) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *IamTestIdpConfiguration) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *IamTestIdpConfiguration) SetStatus(v string) {
	o.Status = &v
}

// GetTriggerTest returns the TriggerTest field value if set, zero value otherwise.
func (o *IamTestIdpConfiguration) GetTriggerTest() bool {
	if o == nil || IsNil(o.TriggerTest) {
		var ret bool
		return ret
	}
	return *o.TriggerTest
}

// GetTriggerTestOk returns a tuple with the TriggerTest field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IamTestIdpConfiguration) GetTriggerTestOk() (*bool, bool) {
	if o == nil || IsNil(o.TriggerTest) {
		return nil, false
	}
	return o.TriggerTest, true
}

// HasTriggerTest returns a boolean if a field has been set.
func (o *IamTestIdpConfiguration) HasTriggerTest() bool {
	if o != nil && !IsNil(o.TriggerTest) {
		return true
	}

	return false
}

// SetTriggerTest gets a reference to the given bool and assigns it to the TriggerTest field.
func (o *IamTestIdpConfiguration) SetTriggerTest(v bool) {
	o.TriggerTest = &v
}

// GetUsername returns the Username field value if set, zero value otherwise.
func (o *IamTestIdpConfiguration) GetUsername() string {
	if o == nil || IsNil(o.Username) {
		var ret string
		return ret
	}
	return *o.Username
}

// GetUsernameOk returns a tuple with the Username field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IamTestIdpConfiguration) GetUsernameOk() (*string, bool) {
	if o == nil || IsNil(o.Username) {
		return nil, false
	}
	return o.Username, true
}

// HasUsername returns a boolean if a field has been set.
func (o *IamTestIdpConfiguration) HasUsername() bool {
	if o != nil && !IsNil(o.Username) {
		return true
	}

	return false
}

// SetUsername gets a reference to the given string and assigns it to the Username field.
func (o *IamTestIdpConfiguration) SetUsername(v string) {
	o.Username = &v
}

// GetIdp returns the Idp field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IamTestIdpConfiguration) GetIdp() IamIdpRelationship {
	if o == nil || IsNil(o.Idp.Get()) {
		var ret IamIdpRelationship
		return ret
	}
	return *o.Idp.Get()
}

// GetIdpOk returns a tuple with the Idp field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IamTestIdpConfiguration) GetIdpOk() (*IamIdpRelationship, bool) {
	if o == nil {
		return nil, false
	}
	return o.Idp.Get(), o.Idp.IsSet()
}

// HasIdp returns a boolean if a field has been set.
func (o *IamTestIdpConfiguration) HasIdp() bool {
	if o != nil && o.Idp.IsSet() {
		return true
	}

	return false
}

// SetIdp gets a reference to the given NullableIamIdpRelationship and assigns it to the Idp field.
func (o *IamTestIdpConfiguration) SetIdp(v IamIdpRelationship) {
	o.Idp.Set(&v)
}

// SetIdpNil sets the value for Idp to be an explicit nil
func (o *IamTestIdpConfiguration) SetIdpNil() {
	o.Idp.Set(nil)
}

// UnsetIdp ensures that no value is present for Idp, not even an explicit nil
func (o *IamTestIdpConfiguration) UnsetIdp() {
	o.Idp.Unset()
}

func (o IamTestIdpConfiguration) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IamTestIdpConfiguration) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	serializedMoBaseMo, errMoBaseMo := json.Marshal(o.MoBaseMo)
	if errMoBaseMo != nil {
		return map[string]interface{}{}, errMoBaseMo
	}
	errMoBaseMo = json.Unmarshal([]byte(serializedMoBaseMo), &toSerialize)
	if errMoBaseMo != nil {
		return map[string]interface{}{}, errMoBaseMo
	}
	if _, exists := toSerialize["ClassId"]; !exists {
		toSerialize["ClassId"] = o.GetDefaultClassId()
	}
	toSerialize["ClassId"] = o.ClassId
	if _, exists := toSerialize["ObjectType"]; !exists {
		toSerialize["ObjectType"] = o.GetDefaultObjectType()
	}
	toSerialize["ObjectType"] = o.ObjectType
	if !IsNil(o.ErrorDetails) {
		toSerialize["ErrorDetails"] = o.ErrorDetails
	}
	if !IsNil(o.IdpEntityId) {
		toSerialize["IdpEntityId"] = o.IdpEntityId
	}
	if !IsNil(o.IsPasswordSet) {
		toSerialize["IsPasswordSet"] = o.IsPasswordSet
	}
	if !IsNil(o.NoOfGroups) {
		toSerialize["NoOfGroups"] = o.NoOfGroups
	}
	if !IsNil(o.Password) {
		toSerialize["Password"] = o.Password
	}
	if !IsNil(o.Status) {
		toSerialize["Status"] = o.Status
	}
	if !IsNil(o.TriggerTest) {
		toSerialize["TriggerTest"] = o.TriggerTest
	}
	if !IsNil(o.Username) {
		toSerialize["Username"] = o.Username
	}
	if o.Idp.IsSet() {
		toSerialize["Idp"] = o.Idp.Get()
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *IamTestIdpConfiguration) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"ClassId",
		"ObjectType",
	}

	// defaultValueFuncMap captures the default values for required properties.
	// These values are used when required properties are missing from the payload.
	defaultValueFuncMap := map[string]func() interface{}{
		"ClassId":    o.GetDefaultClassId,
		"ObjectType": o.GetDefaultObjectType,
	}
	var defaultValueApplied bool
	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			if _, ok := defaultValueFuncMap[requiredProperty]; ok {
				allProperties[requiredProperty] = defaultValueFuncMap[requiredProperty]()
				defaultValueApplied = true
			}
		}
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	if defaultValueApplied {
		data, err = json.Marshal(allProperties)
		if err != nil {
			return err
		}
	}
	type IamTestIdpConfigurationWithoutEmbeddedStruct struct {
		// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.
		ClassId string `json:"ClassId"`
		// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
		ObjectType string `json:"ObjectType"`
		// Error returned by the IdP when the configuration test fails.
		ErrorDetails *string `json:"ErrorDetails,omitempty"`
		// Entity ID of the IdP whose configuration needs to be tested.
		IdpEntityId *string `json:"IdpEntityId,omitempty"`
		// Indicates whether the value of the 'password' property has been set.
		IsPasswordSet *bool `json:"IsPasswordSet,omitempty"`
		// Total number of groups of the user received from the IdP after successful authentication.
		NoOfGroups *int64 `json:"NoOfGroups,omitempty"`
		// The password of the test user for testing the IdP configuration settings. It can be any string that adheres to the following constraints. It can have character except spaces, tabs, line breaks. It cannot be more than 256 characters.
		Password *string `json:"Password,omitempty" validate:"regexp=^$|^\\\\S{3,256}$"`
		// IdP configuration test result. * `Unverified` - The IdP configuration is yet to be verified. * `Verified` - Successfully authenticated the user via the configured IdP and verified the configuration parameters. * `Pending` - Pending verification of the IdP configuration. * `Failed` - Could not authenticate the user via the configured IdP and verify its configuration.
		Status *string `json:"Status,omitempty"`
		// Trigger property used to initiate an IdP configuration test.
		TriggerTest *bool `json:"TriggerTest,omitempty"`
		// Email or userId of the test user for testing the IdP configuration settings.
		Username *string                    "json:\"Username,omitempty\" validate:\"regexp=^$|^(?:[a-zA-Z0-9._-]{3,256}|[a-zA-Z0-9.!#$%&'*+\\/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*)$\""
		Idp      NullableIamIdpRelationship `json:"Idp,omitempty"`
	}

	varIamTestIdpConfigurationWithoutEmbeddedStruct := IamTestIdpConfigurationWithoutEmbeddedStruct{}

	err = json.Unmarshal(data, &varIamTestIdpConfigurationWithoutEmbeddedStruct)
	if err == nil {
		varIamTestIdpConfiguration := _IamTestIdpConfiguration{}
		varIamTestIdpConfiguration.ClassId = varIamTestIdpConfigurationWithoutEmbeddedStruct.ClassId
		varIamTestIdpConfiguration.ObjectType = varIamTestIdpConfigurationWithoutEmbeddedStruct.ObjectType
		varIamTestIdpConfiguration.ErrorDetails = varIamTestIdpConfigurationWithoutEmbeddedStruct.ErrorDetails
		varIamTestIdpConfiguration.IdpEntityId = varIamTestIdpConfigurationWithoutEmbeddedStruct.IdpEntityId
		varIamTestIdpConfiguration.IsPasswordSet = varIamTestIdpConfigurationWithoutEmbeddedStruct.IsPasswordSet
		varIamTestIdpConfiguration.NoOfGroups = varIamTestIdpConfigurationWithoutEmbeddedStruct.NoOfGroups
		varIamTestIdpConfiguration.Password = varIamTestIdpConfigurationWithoutEmbeddedStruct.Password
		varIamTestIdpConfiguration.Status = varIamTestIdpConfigurationWithoutEmbeddedStruct.Status
		varIamTestIdpConfiguration.TriggerTest = varIamTestIdpConfigurationWithoutEmbeddedStruct.TriggerTest
		varIamTestIdpConfiguration.Username = varIamTestIdpConfigurationWithoutEmbeddedStruct.Username
		varIamTestIdpConfiguration.Idp = varIamTestIdpConfigurationWithoutEmbeddedStruct.Idp
		*o = IamTestIdpConfiguration(varIamTestIdpConfiguration)
	} else {
		return err
	}

	varIamTestIdpConfiguration := _IamTestIdpConfiguration{}

	err = json.Unmarshal(data, &varIamTestIdpConfiguration)
	if err == nil {
		o.MoBaseMo = varIamTestIdpConfiguration.MoBaseMo
	} else {
		return err
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "ClassId")
		delete(additionalProperties, "ObjectType")
		delete(additionalProperties, "ErrorDetails")
		delete(additionalProperties, "IdpEntityId")
		delete(additionalProperties, "IsPasswordSet")
		delete(additionalProperties, "NoOfGroups")
		delete(additionalProperties, "Password")
		delete(additionalProperties, "Status")
		delete(additionalProperties, "TriggerTest")
		delete(additionalProperties, "Username")
		delete(additionalProperties, "Idp")

		// remove fields from embedded structs
		reflectMoBaseMo := reflect.ValueOf(o.MoBaseMo)
		for i := 0; i < reflectMoBaseMo.Type().NumField(); i++ {
			t := reflectMoBaseMo.Type().Field(i)

			if jsonTag := t.Tag.Get("json"); jsonTag != "" {
				fieldName := ""
				if commaIdx := strings.Index(jsonTag, ","); commaIdx > 0 {
					fieldName = jsonTag[:commaIdx]
				} else {
					fieldName = jsonTag
				}
				if fieldName != "AdditionalProperties" {
					delete(additionalProperties, fieldName)
				}
			}
		}

		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableIamTestIdpConfiguration struct {
	value *IamTestIdpConfiguration
	isSet bool
}

func (v NullableIamTestIdpConfiguration) Get() *IamTestIdpConfiguration {
	return v.value
}

func (v *NullableIamTestIdpConfiguration) Set(val *IamTestIdpConfiguration) {
	v.value = val
	v.isSet = true
}

func (v NullableIamTestIdpConfiguration) IsSet() bool {
	return v.isSet
}

func (v *NullableIamTestIdpConfiguration) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIamTestIdpConfiguration(val *IamTestIdpConfiguration) *NullableIamTestIdpConfiguration {
	return &NullableIamTestIdpConfiguration{value: val, isSet: true}
}

func (v NullableIamTestIdpConfiguration) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIamTestIdpConfiguration) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
