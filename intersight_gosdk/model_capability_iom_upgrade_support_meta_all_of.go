/*
Cisco Intersight

Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations. The Intersight OpenAPI document defines the complete set of properties that are returned in the HTTP response. From that perspective, a client can expect that no additional properties are returned, unless these properties are explicitly defined in the OpenAPI document. However, when a client uses an older version of the Intersight OpenAPI document, the server may send additional properties because the software is more recent than the client. In that case, the client may receive properties that it does not know about. Some generated SDKs perform a strict validation of the HTTP response body against the OpenAPI document.

API version: 1.0.11-13376
Contact: intersight@cisco.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package intersight

import (
	"encoding/json"
)

// CapabilityIomUpgradeSupportMetaAllOf Definition of the list of properties defined in 'capability.IomUpgradeSupportMeta', excluding properties defined in parent classes.
type CapabilityIomUpgradeSupportMetaAllOf struct {
	// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.
	ClassId string `json:"ClassId"`
	// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
	ObjectType string `json:"ObjectType"`
	// Information related to the list of IOMs. Also provides additional information such as hardware name.
	Description *string `json:"Description,omitempty"`
	// Indicates if the IOM models have a Device Connector, which in turn allows direct upgrade requests to be sent to the IOM DC.
	DirectUpgrade *bool `json:"DirectUpgrade,omitempty"`
	// Series names of IOMs which will be supported in the firmware operation.
	SeriesId             *string  `json:"SeriesId,omitempty"`
	SupportedModels      []string `json:"SupportedModels,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _CapabilityIomUpgradeSupportMetaAllOf CapabilityIomUpgradeSupportMetaAllOf

// NewCapabilityIomUpgradeSupportMetaAllOf instantiates a new CapabilityIomUpgradeSupportMetaAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCapabilityIomUpgradeSupportMetaAllOf(classId string, objectType string) *CapabilityIomUpgradeSupportMetaAllOf {
	this := CapabilityIomUpgradeSupportMetaAllOf{}
	this.ClassId = classId
	this.ObjectType = objectType
	return &this
}

// NewCapabilityIomUpgradeSupportMetaAllOfWithDefaults instantiates a new CapabilityIomUpgradeSupportMetaAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCapabilityIomUpgradeSupportMetaAllOfWithDefaults() *CapabilityIomUpgradeSupportMetaAllOf {
	this := CapabilityIomUpgradeSupportMetaAllOf{}
	var classId string = "capability.IomUpgradeSupportMeta"
	this.ClassId = classId
	var objectType string = "capability.IomUpgradeSupportMeta"
	this.ObjectType = objectType
	return &this
}

// GetClassId returns the ClassId field value
func (o *CapabilityIomUpgradeSupportMetaAllOf) GetClassId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ClassId
}

// GetClassIdOk returns a tuple with the ClassId field value
// and a boolean to check if the value has been set.
func (o *CapabilityIomUpgradeSupportMetaAllOf) GetClassIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ClassId, true
}

// SetClassId sets field value
func (o *CapabilityIomUpgradeSupportMetaAllOf) SetClassId(v string) {
	o.ClassId = v
}

// GetObjectType returns the ObjectType field value
func (o *CapabilityIomUpgradeSupportMetaAllOf) GetObjectType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ObjectType
}

// GetObjectTypeOk returns a tuple with the ObjectType field value
// and a boolean to check if the value has been set.
func (o *CapabilityIomUpgradeSupportMetaAllOf) GetObjectTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ObjectType, true
}

// SetObjectType sets field value
func (o *CapabilityIomUpgradeSupportMetaAllOf) SetObjectType(v string) {
	o.ObjectType = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *CapabilityIomUpgradeSupportMetaAllOf) GetDescription() string {
	if o == nil || o.Description == nil {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CapabilityIomUpgradeSupportMetaAllOf) GetDescriptionOk() (*string, bool) {
	if o == nil || o.Description == nil {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *CapabilityIomUpgradeSupportMetaAllOf) HasDescription() bool {
	if o != nil && o.Description != nil {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *CapabilityIomUpgradeSupportMetaAllOf) SetDescription(v string) {
	o.Description = &v
}

// GetDirectUpgrade returns the DirectUpgrade field value if set, zero value otherwise.
func (o *CapabilityIomUpgradeSupportMetaAllOf) GetDirectUpgrade() bool {
	if o == nil || o.DirectUpgrade == nil {
		var ret bool
		return ret
	}
	return *o.DirectUpgrade
}

// GetDirectUpgradeOk returns a tuple with the DirectUpgrade field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CapabilityIomUpgradeSupportMetaAllOf) GetDirectUpgradeOk() (*bool, bool) {
	if o == nil || o.DirectUpgrade == nil {
		return nil, false
	}
	return o.DirectUpgrade, true
}

// HasDirectUpgrade returns a boolean if a field has been set.
func (o *CapabilityIomUpgradeSupportMetaAllOf) HasDirectUpgrade() bool {
	if o != nil && o.DirectUpgrade != nil {
		return true
	}

	return false
}

// SetDirectUpgrade gets a reference to the given bool and assigns it to the DirectUpgrade field.
func (o *CapabilityIomUpgradeSupportMetaAllOf) SetDirectUpgrade(v bool) {
	o.DirectUpgrade = &v
}

// GetSeriesId returns the SeriesId field value if set, zero value otherwise.
func (o *CapabilityIomUpgradeSupportMetaAllOf) GetSeriesId() string {
	if o == nil || o.SeriesId == nil {
		var ret string
		return ret
	}
	return *o.SeriesId
}

// GetSeriesIdOk returns a tuple with the SeriesId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CapabilityIomUpgradeSupportMetaAllOf) GetSeriesIdOk() (*string, bool) {
	if o == nil || o.SeriesId == nil {
		return nil, false
	}
	return o.SeriesId, true
}

// HasSeriesId returns a boolean if a field has been set.
func (o *CapabilityIomUpgradeSupportMetaAllOf) HasSeriesId() bool {
	if o != nil && o.SeriesId != nil {
		return true
	}

	return false
}

// SetSeriesId gets a reference to the given string and assigns it to the SeriesId field.
func (o *CapabilityIomUpgradeSupportMetaAllOf) SetSeriesId(v string) {
	o.SeriesId = &v
}

// GetSupportedModels returns the SupportedModels field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CapabilityIomUpgradeSupportMetaAllOf) GetSupportedModels() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.SupportedModels
}

// GetSupportedModelsOk returns a tuple with the SupportedModels field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CapabilityIomUpgradeSupportMetaAllOf) GetSupportedModelsOk() ([]string, bool) {
	if o == nil || o.SupportedModels == nil {
		return nil, false
	}
	return o.SupportedModels, true
}

// HasSupportedModels returns a boolean if a field has been set.
func (o *CapabilityIomUpgradeSupportMetaAllOf) HasSupportedModels() bool {
	if o != nil && o.SupportedModels != nil {
		return true
	}

	return false
}

// SetSupportedModels gets a reference to the given []string and assigns it to the SupportedModels field.
func (o *CapabilityIomUpgradeSupportMetaAllOf) SetSupportedModels(v []string) {
	o.SupportedModels = v
}

func (o CapabilityIomUpgradeSupportMetaAllOf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["ClassId"] = o.ClassId
	}
	if true {
		toSerialize["ObjectType"] = o.ObjectType
	}
	if o.Description != nil {
		toSerialize["Description"] = o.Description
	}
	if o.DirectUpgrade != nil {
		toSerialize["DirectUpgrade"] = o.DirectUpgrade
	}
	if o.SeriesId != nil {
		toSerialize["SeriesId"] = o.SeriesId
	}
	if o.SupportedModels != nil {
		toSerialize["SupportedModels"] = o.SupportedModels
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *CapabilityIomUpgradeSupportMetaAllOf) UnmarshalJSON(bytes []byte) (err error) {
	varCapabilityIomUpgradeSupportMetaAllOf := _CapabilityIomUpgradeSupportMetaAllOf{}

	if err = json.Unmarshal(bytes, &varCapabilityIomUpgradeSupportMetaAllOf); err == nil {
		*o = CapabilityIomUpgradeSupportMetaAllOf(varCapabilityIomUpgradeSupportMetaAllOf)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "ClassId")
		delete(additionalProperties, "ObjectType")
		delete(additionalProperties, "Description")
		delete(additionalProperties, "DirectUpgrade")
		delete(additionalProperties, "SeriesId")
		delete(additionalProperties, "SupportedModels")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableCapabilityIomUpgradeSupportMetaAllOf struct {
	value *CapabilityIomUpgradeSupportMetaAllOf
	isSet bool
}

func (v NullableCapabilityIomUpgradeSupportMetaAllOf) Get() *CapabilityIomUpgradeSupportMetaAllOf {
	return v.value
}

func (v *NullableCapabilityIomUpgradeSupportMetaAllOf) Set(val *CapabilityIomUpgradeSupportMetaAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableCapabilityIomUpgradeSupportMetaAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableCapabilityIomUpgradeSupportMetaAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCapabilityIomUpgradeSupportMetaAllOf(val *CapabilityIomUpgradeSupportMetaAllOf) *NullableCapabilityIomUpgradeSupportMetaAllOf {
	return &NullableCapabilityIomUpgradeSupportMetaAllOf{value: val, isSet: true}
}

func (v NullableCapabilityIomUpgradeSupportMetaAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCapabilityIomUpgradeSupportMetaAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
