/*
Cisco Intersight

Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations. The Intersight OpenAPI document defines the complete set of properties that are returned in the HTTP response. From that perspective, a client can expect that no additional properties are returned, unless these properties are explicitly defined in the OpenAPI document. However, when a client uses an older version of the Intersight OpenAPI document, the server may send additional properties because the software is more recent than the client. In that case, the client may receive properties that it does not know about. Some generated SDKs perform a strict validation of the HTTP response body against the OpenAPI document.

API version: 1.0.11-2024100405
Contact: intersight@cisco.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package intersight

import (
	"encoding/json"
	"fmt"
	"reflect"
	"strings"
)

// checks if the AdapterUnit type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AdapterUnit{}

// AdapterUnit The physical adapter present on a server.
type AdapterUnit struct {
	EquipmentBase
	// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.
	ClassId string `json:"ClassId"`
	// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
	ObjectType string `json:"ObjectType"`
	// Unique Identifier of an adapter Unit within a Rack Interface.
	AdapterId *string `json:"AdapterId,omitempty"`
	// Original Base Mac address of an adapter unit.
	BaseMacAddress *string `json:"BaseMacAddress,omitempty"`
	// Connectivity Status of adapter - A or B or AB.
	ConnectionStatus *string `json:"ConnectionStatus,omitempty"`
	// Cisco Integrated adapter or other type.
	Integrated *string  `json:"Integrated,omitempty"`
	OperReason []string `json:"OperReason,omitempty"`
	// Operational state of an adapter unit.
	OperState *string `json:"OperState,omitempty"`
	// Operability state of an adapter unit.
	Operability *string `json:"Operability,omitempty"`
	// Part number of an adapter unit.
	PartNumber *string `json:"PartNumber,omitempty"`
	// PCIe slot of the adapter in the server.
	PciSlot *string `json:"PciSlot,omitempty"`
	// Power state of an adapter unit.
	Power *string `json:"Power,omitempty"`
	// Thermal state of an adapter unit.
	Thermal *string `json:"Thermal,omitempty"`
	// Records the current state of communication between the Virtual Interface Card (VIC) and the Cisco Integrated Management Controller (CIMC) on the server. * `Not Applicable` - Set the state of VIC communication to Not Applicable for other Platforms. * `Yes` - VIC is reachable from CIMC. * `No` - VIC is not reachable from CIMC.
	VicCommunicable *string `json:"VicCommunicable,omitempty"`
	// Virtual Id of the adapter in the server.
	Vid                 *string                                  `json:"Vid,omitempty"`
	AdapterUnitExpander NullableAdapterUnitExpanderRelationship  `json:"AdapterUnitExpander,omitempty"`
	ComputeBlade        NullableComputeBladeRelationship         `json:"ComputeBlade,omitempty"`
	ComputeRackUnit     NullableComputeRackUnitRelationship      `json:"ComputeRackUnit,omitempty"`
	Controller          NullableManagementControllerRelationship `json:"Controller,omitempty"`
	// An array of relationships to adapterExtEthInterface resources.
	ExtEthIfs []AdapterExtEthInterfaceRelationship `json:"ExtEthIfs,omitempty"`
	// An array of relationships to adapterHostEthInterface resources.
	HostEthIfs []AdapterHostEthInterfaceRelationship `json:"HostEthIfs,omitempty"`
	// An array of relationships to adapterHostFcInterface resources.
	HostFcIfs []AdapterHostFcInterfaceRelationship `json:"HostFcIfs,omitempty"`
	// An array of relationships to adapterHostIscsiInterface resources.
	HostIscsiIfs         []AdapterHostIscsiInterfaceRelationship     `json:"HostIscsiIfs,omitempty"`
	InventoryDeviceInfo  NullableInventoryDeviceInfoRelationship     `json:"InventoryDeviceInfo,omitempty"`
	RegisteredDevice     NullableAssetDeviceRegistrationRelationship `json:"RegisteredDevice,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _AdapterUnit AdapterUnit

// NewAdapterUnit instantiates a new AdapterUnit object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAdapterUnit(classId string, objectType string) *AdapterUnit {
	this := AdapterUnit{}
	this.ClassId = classId
	this.ObjectType = objectType
	return &this
}

// NewAdapterUnitWithDefaults instantiates a new AdapterUnit object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAdapterUnitWithDefaults() *AdapterUnit {
	this := AdapterUnit{}
	var classId string = "adapter.Unit"
	this.ClassId = classId
	var objectType string = "adapter.Unit"
	this.ObjectType = objectType
	return &this
}

// GetClassId returns the ClassId field value
func (o *AdapterUnit) GetClassId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ClassId
}

// GetClassIdOk returns a tuple with the ClassId field value
// and a boolean to check if the value has been set.
func (o *AdapterUnit) GetClassIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ClassId, true
}

// SetClassId sets field value
func (o *AdapterUnit) SetClassId(v string) {
	o.ClassId = v
}

// GetDefaultClassId returns the default value "adapter.Unit" of the ClassId field.
func (o *AdapterUnit) GetDefaultClassId() interface{} {
	return "adapter.Unit"
}

// GetObjectType returns the ObjectType field value
func (o *AdapterUnit) GetObjectType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ObjectType
}

// GetObjectTypeOk returns a tuple with the ObjectType field value
// and a boolean to check if the value has been set.
func (o *AdapterUnit) GetObjectTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ObjectType, true
}

// SetObjectType sets field value
func (o *AdapterUnit) SetObjectType(v string) {
	o.ObjectType = v
}

// GetDefaultObjectType returns the default value "adapter.Unit" of the ObjectType field.
func (o *AdapterUnit) GetDefaultObjectType() interface{} {
	return "adapter.Unit"
}

// GetAdapterId returns the AdapterId field value if set, zero value otherwise.
func (o *AdapterUnit) GetAdapterId() string {
	if o == nil || IsNil(o.AdapterId) {
		var ret string
		return ret
	}
	return *o.AdapterId
}

// GetAdapterIdOk returns a tuple with the AdapterId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdapterUnit) GetAdapterIdOk() (*string, bool) {
	if o == nil || IsNil(o.AdapterId) {
		return nil, false
	}
	return o.AdapterId, true
}

// HasAdapterId returns a boolean if a field has been set.
func (o *AdapterUnit) HasAdapterId() bool {
	if o != nil && !IsNil(o.AdapterId) {
		return true
	}

	return false
}

// SetAdapterId gets a reference to the given string and assigns it to the AdapterId field.
func (o *AdapterUnit) SetAdapterId(v string) {
	o.AdapterId = &v
}

// GetBaseMacAddress returns the BaseMacAddress field value if set, zero value otherwise.
func (o *AdapterUnit) GetBaseMacAddress() string {
	if o == nil || IsNil(o.BaseMacAddress) {
		var ret string
		return ret
	}
	return *o.BaseMacAddress
}

// GetBaseMacAddressOk returns a tuple with the BaseMacAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdapterUnit) GetBaseMacAddressOk() (*string, bool) {
	if o == nil || IsNil(o.BaseMacAddress) {
		return nil, false
	}
	return o.BaseMacAddress, true
}

// HasBaseMacAddress returns a boolean if a field has been set.
func (o *AdapterUnit) HasBaseMacAddress() bool {
	if o != nil && !IsNil(o.BaseMacAddress) {
		return true
	}

	return false
}

// SetBaseMacAddress gets a reference to the given string and assigns it to the BaseMacAddress field.
func (o *AdapterUnit) SetBaseMacAddress(v string) {
	o.BaseMacAddress = &v
}

// GetConnectionStatus returns the ConnectionStatus field value if set, zero value otherwise.
func (o *AdapterUnit) GetConnectionStatus() string {
	if o == nil || IsNil(o.ConnectionStatus) {
		var ret string
		return ret
	}
	return *o.ConnectionStatus
}

// GetConnectionStatusOk returns a tuple with the ConnectionStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdapterUnit) GetConnectionStatusOk() (*string, bool) {
	if o == nil || IsNil(o.ConnectionStatus) {
		return nil, false
	}
	return o.ConnectionStatus, true
}

// HasConnectionStatus returns a boolean if a field has been set.
func (o *AdapterUnit) HasConnectionStatus() bool {
	if o != nil && !IsNil(o.ConnectionStatus) {
		return true
	}

	return false
}

// SetConnectionStatus gets a reference to the given string and assigns it to the ConnectionStatus field.
func (o *AdapterUnit) SetConnectionStatus(v string) {
	o.ConnectionStatus = &v
}

// GetIntegrated returns the Integrated field value if set, zero value otherwise.
func (o *AdapterUnit) GetIntegrated() string {
	if o == nil || IsNil(o.Integrated) {
		var ret string
		return ret
	}
	return *o.Integrated
}

// GetIntegratedOk returns a tuple with the Integrated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdapterUnit) GetIntegratedOk() (*string, bool) {
	if o == nil || IsNil(o.Integrated) {
		return nil, false
	}
	return o.Integrated, true
}

// HasIntegrated returns a boolean if a field has been set.
func (o *AdapterUnit) HasIntegrated() bool {
	if o != nil && !IsNil(o.Integrated) {
		return true
	}

	return false
}

// SetIntegrated gets a reference to the given string and assigns it to the Integrated field.
func (o *AdapterUnit) SetIntegrated(v string) {
	o.Integrated = &v
}

// GetOperReason returns the OperReason field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AdapterUnit) GetOperReason() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.OperReason
}

// GetOperReasonOk returns a tuple with the OperReason field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AdapterUnit) GetOperReasonOk() ([]string, bool) {
	if o == nil || IsNil(o.OperReason) {
		return nil, false
	}
	return o.OperReason, true
}

// HasOperReason returns a boolean if a field has been set.
func (o *AdapterUnit) HasOperReason() bool {
	if o != nil && !IsNil(o.OperReason) {
		return true
	}

	return false
}

// SetOperReason gets a reference to the given []string and assigns it to the OperReason field.
func (o *AdapterUnit) SetOperReason(v []string) {
	o.OperReason = v
}

// GetOperState returns the OperState field value if set, zero value otherwise.
func (o *AdapterUnit) GetOperState() string {
	if o == nil || IsNil(o.OperState) {
		var ret string
		return ret
	}
	return *o.OperState
}

// GetOperStateOk returns a tuple with the OperState field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdapterUnit) GetOperStateOk() (*string, bool) {
	if o == nil || IsNil(o.OperState) {
		return nil, false
	}
	return o.OperState, true
}

// HasOperState returns a boolean if a field has been set.
func (o *AdapterUnit) HasOperState() bool {
	if o != nil && !IsNil(o.OperState) {
		return true
	}

	return false
}

// SetOperState gets a reference to the given string and assigns it to the OperState field.
func (o *AdapterUnit) SetOperState(v string) {
	o.OperState = &v
}

// GetOperability returns the Operability field value if set, zero value otherwise.
func (o *AdapterUnit) GetOperability() string {
	if o == nil || IsNil(o.Operability) {
		var ret string
		return ret
	}
	return *o.Operability
}

// GetOperabilityOk returns a tuple with the Operability field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdapterUnit) GetOperabilityOk() (*string, bool) {
	if o == nil || IsNil(o.Operability) {
		return nil, false
	}
	return o.Operability, true
}

// HasOperability returns a boolean if a field has been set.
func (o *AdapterUnit) HasOperability() bool {
	if o != nil && !IsNil(o.Operability) {
		return true
	}

	return false
}

// SetOperability gets a reference to the given string and assigns it to the Operability field.
func (o *AdapterUnit) SetOperability(v string) {
	o.Operability = &v
}

// GetPartNumber returns the PartNumber field value if set, zero value otherwise.
func (o *AdapterUnit) GetPartNumber() string {
	if o == nil || IsNil(o.PartNumber) {
		var ret string
		return ret
	}
	return *o.PartNumber
}

// GetPartNumberOk returns a tuple with the PartNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdapterUnit) GetPartNumberOk() (*string, bool) {
	if o == nil || IsNil(o.PartNumber) {
		return nil, false
	}
	return o.PartNumber, true
}

// HasPartNumber returns a boolean if a field has been set.
func (o *AdapterUnit) HasPartNumber() bool {
	if o != nil && !IsNil(o.PartNumber) {
		return true
	}

	return false
}

// SetPartNumber gets a reference to the given string and assigns it to the PartNumber field.
func (o *AdapterUnit) SetPartNumber(v string) {
	o.PartNumber = &v
}

// GetPciSlot returns the PciSlot field value if set, zero value otherwise.
func (o *AdapterUnit) GetPciSlot() string {
	if o == nil || IsNil(o.PciSlot) {
		var ret string
		return ret
	}
	return *o.PciSlot
}

// GetPciSlotOk returns a tuple with the PciSlot field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdapterUnit) GetPciSlotOk() (*string, bool) {
	if o == nil || IsNil(o.PciSlot) {
		return nil, false
	}
	return o.PciSlot, true
}

// HasPciSlot returns a boolean if a field has been set.
func (o *AdapterUnit) HasPciSlot() bool {
	if o != nil && !IsNil(o.PciSlot) {
		return true
	}

	return false
}

// SetPciSlot gets a reference to the given string and assigns it to the PciSlot field.
func (o *AdapterUnit) SetPciSlot(v string) {
	o.PciSlot = &v
}

// GetPower returns the Power field value if set, zero value otherwise.
func (o *AdapterUnit) GetPower() string {
	if o == nil || IsNil(o.Power) {
		var ret string
		return ret
	}
	return *o.Power
}

// GetPowerOk returns a tuple with the Power field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdapterUnit) GetPowerOk() (*string, bool) {
	if o == nil || IsNil(o.Power) {
		return nil, false
	}
	return o.Power, true
}

// HasPower returns a boolean if a field has been set.
func (o *AdapterUnit) HasPower() bool {
	if o != nil && !IsNil(o.Power) {
		return true
	}

	return false
}

// SetPower gets a reference to the given string and assigns it to the Power field.
func (o *AdapterUnit) SetPower(v string) {
	o.Power = &v
}

// GetThermal returns the Thermal field value if set, zero value otherwise.
func (o *AdapterUnit) GetThermal() string {
	if o == nil || IsNil(o.Thermal) {
		var ret string
		return ret
	}
	return *o.Thermal
}

// GetThermalOk returns a tuple with the Thermal field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdapterUnit) GetThermalOk() (*string, bool) {
	if o == nil || IsNil(o.Thermal) {
		return nil, false
	}
	return o.Thermal, true
}

// HasThermal returns a boolean if a field has been set.
func (o *AdapterUnit) HasThermal() bool {
	if o != nil && !IsNil(o.Thermal) {
		return true
	}

	return false
}

// SetThermal gets a reference to the given string and assigns it to the Thermal field.
func (o *AdapterUnit) SetThermal(v string) {
	o.Thermal = &v
}

// GetVicCommunicable returns the VicCommunicable field value if set, zero value otherwise.
func (o *AdapterUnit) GetVicCommunicable() string {
	if o == nil || IsNil(o.VicCommunicable) {
		var ret string
		return ret
	}
	return *o.VicCommunicable
}

// GetVicCommunicableOk returns a tuple with the VicCommunicable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdapterUnit) GetVicCommunicableOk() (*string, bool) {
	if o == nil || IsNil(o.VicCommunicable) {
		return nil, false
	}
	return o.VicCommunicable, true
}

// HasVicCommunicable returns a boolean if a field has been set.
func (o *AdapterUnit) HasVicCommunicable() bool {
	if o != nil && !IsNil(o.VicCommunicable) {
		return true
	}

	return false
}

// SetVicCommunicable gets a reference to the given string and assigns it to the VicCommunicable field.
func (o *AdapterUnit) SetVicCommunicable(v string) {
	o.VicCommunicable = &v
}

// GetVid returns the Vid field value if set, zero value otherwise.
func (o *AdapterUnit) GetVid() string {
	if o == nil || IsNil(o.Vid) {
		var ret string
		return ret
	}
	return *o.Vid
}

// GetVidOk returns a tuple with the Vid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdapterUnit) GetVidOk() (*string, bool) {
	if o == nil || IsNil(o.Vid) {
		return nil, false
	}
	return o.Vid, true
}

// HasVid returns a boolean if a field has been set.
func (o *AdapterUnit) HasVid() bool {
	if o != nil && !IsNil(o.Vid) {
		return true
	}

	return false
}

// SetVid gets a reference to the given string and assigns it to the Vid field.
func (o *AdapterUnit) SetVid(v string) {
	o.Vid = &v
}

// GetAdapterUnitExpander returns the AdapterUnitExpander field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AdapterUnit) GetAdapterUnitExpander() AdapterUnitExpanderRelationship {
	if o == nil || IsNil(o.AdapterUnitExpander.Get()) {
		var ret AdapterUnitExpanderRelationship
		return ret
	}
	return *o.AdapterUnitExpander.Get()
}

// GetAdapterUnitExpanderOk returns a tuple with the AdapterUnitExpander field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AdapterUnit) GetAdapterUnitExpanderOk() (*AdapterUnitExpanderRelationship, bool) {
	if o == nil {
		return nil, false
	}
	return o.AdapterUnitExpander.Get(), o.AdapterUnitExpander.IsSet()
}

// HasAdapterUnitExpander returns a boolean if a field has been set.
func (o *AdapterUnit) HasAdapterUnitExpander() bool {
	if o != nil && o.AdapterUnitExpander.IsSet() {
		return true
	}

	return false
}

// SetAdapterUnitExpander gets a reference to the given NullableAdapterUnitExpanderRelationship and assigns it to the AdapterUnitExpander field.
func (o *AdapterUnit) SetAdapterUnitExpander(v AdapterUnitExpanderRelationship) {
	o.AdapterUnitExpander.Set(&v)
}

// SetAdapterUnitExpanderNil sets the value for AdapterUnitExpander to be an explicit nil
func (o *AdapterUnit) SetAdapterUnitExpanderNil() {
	o.AdapterUnitExpander.Set(nil)
}

// UnsetAdapterUnitExpander ensures that no value is present for AdapterUnitExpander, not even an explicit nil
func (o *AdapterUnit) UnsetAdapterUnitExpander() {
	o.AdapterUnitExpander.Unset()
}

// GetComputeBlade returns the ComputeBlade field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AdapterUnit) GetComputeBlade() ComputeBladeRelationship {
	if o == nil || IsNil(o.ComputeBlade.Get()) {
		var ret ComputeBladeRelationship
		return ret
	}
	return *o.ComputeBlade.Get()
}

// GetComputeBladeOk returns a tuple with the ComputeBlade field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AdapterUnit) GetComputeBladeOk() (*ComputeBladeRelationship, bool) {
	if o == nil {
		return nil, false
	}
	return o.ComputeBlade.Get(), o.ComputeBlade.IsSet()
}

// HasComputeBlade returns a boolean if a field has been set.
func (o *AdapterUnit) HasComputeBlade() bool {
	if o != nil && o.ComputeBlade.IsSet() {
		return true
	}

	return false
}

// SetComputeBlade gets a reference to the given NullableComputeBladeRelationship and assigns it to the ComputeBlade field.
func (o *AdapterUnit) SetComputeBlade(v ComputeBladeRelationship) {
	o.ComputeBlade.Set(&v)
}

// SetComputeBladeNil sets the value for ComputeBlade to be an explicit nil
func (o *AdapterUnit) SetComputeBladeNil() {
	o.ComputeBlade.Set(nil)
}

// UnsetComputeBlade ensures that no value is present for ComputeBlade, not even an explicit nil
func (o *AdapterUnit) UnsetComputeBlade() {
	o.ComputeBlade.Unset()
}

// GetComputeRackUnit returns the ComputeRackUnit field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AdapterUnit) GetComputeRackUnit() ComputeRackUnitRelationship {
	if o == nil || IsNil(o.ComputeRackUnit.Get()) {
		var ret ComputeRackUnitRelationship
		return ret
	}
	return *o.ComputeRackUnit.Get()
}

// GetComputeRackUnitOk returns a tuple with the ComputeRackUnit field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AdapterUnit) GetComputeRackUnitOk() (*ComputeRackUnitRelationship, bool) {
	if o == nil {
		return nil, false
	}
	return o.ComputeRackUnit.Get(), o.ComputeRackUnit.IsSet()
}

// HasComputeRackUnit returns a boolean if a field has been set.
func (o *AdapterUnit) HasComputeRackUnit() bool {
	if o != nil && o.ComputeRackUnit.IsSet() {
		return true
	}

	return false
}

// SetComputeRackUnit gets a reference to the given NullableComputeRackUnitRelationship and assigns it to the ComputeRackUnit field.
func (o *AdapterUnit) SetComputeRackUnit(v ComputeRackUnitRelationship) {
	o.ComputeRackUnit.Set(&v)
}

// SetComputeRackUnitNil sets the value for ComputeRackUnit to be an explicit nil
func (o *AdapterUnit) SetComputeRackUnitNil() {
	o.ComputeRackUnit.Set(nil)
}

// UnsetComputeRackUnit ensures that no value is present for ComputeRackUnit, not even an explicit nil
func (o *AdapterUnit) UnsetComputeRackUnit() {
	o.ComputeRackUnit.Unset()
}

// GetController returns the Controller field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AdapterUnit) GetController() ManagementControllerRelationship {
	if o == nil || IsNil(o.Controller.Get()) {
		var ret ManagementControllerRelationship
		return ret
	}
	return *o.Controller.Get()
}

// GetControllerOk returns a tuple with the Controller field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AdapterUnit) GetControllerOk() (*ManagementControllerRelationship, bool) {
	if o == nil {
		return nil, false
	}
	return o.Controller.Get(), o.Controller.IsSet()
}

// HasController returns a boolean if a field has been set.
func (o *AdapterUnit) HasController() bool {
	if o != nil && o.Controller.IsSet() {
		return true
	}

	return false
}

// SetController gets a reference to the given NullableManagementControllerRelationship and assigns it to the Controller field.
func (o *AdapterUnit) SetController(v ManagementControllerRelationship) {
	o.Controller.Set(&v)
}

// SetControllerNil sets the value for Controller to be an explicit nil
func (o *AdapterUnit) SetControllerNil() {
	o.Controller.Set(nil)
}

// UnsetController ensures that no value is present for Controller, not even an explicit nil
func (o *AdapterUnit) UnsetController() {
	o.Controller.Unset()
}

// GetExtEthIfs returns the ExtEthIfs field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AdapterUnit) GetExtEthIfs() []AdapterExtEthInterfaceRelationship {
	if o == nil {
		var ret []AdapterExtEthInterfaceRelationship
		return ret
	}
	return o.ExtEthIfs
}

// GetExtEthIfsOk returns a tuple with the ExtEthIfs field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AdapterUnit) GetExtEthIfsOk() ([]AdapterExtEthInterfaceRelationship, bool) {
	if o == nil || IsNil(o.ExtEthIfs) {
		return nil, false
	}
	return o.ExtEthIfs, true
}

// HasExtEthIfs returns a boolean if a field has been set.
func (o *AdapterUnit) HasExtEthIfs() bool {
	if o != nil && !IsNil(o.ExtEthIfs) {
		return true
	}

	return false
}

// SetExtEthIfs gets a reference to the given []AdapterExtEthInterfaceRelationship and assigns it to the ExtEthIfs field.
func (o *AdapterUnit) SetExtEthIfs(v []AdapterExtEthInterfaceRelationship) {
	o.ExtEthIfs = v
}

// GetHostEthIfs returns the HostEthIfs field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AdapterUnit) GetHostEthIfs() []AdapterHostEthInterfaceRelationship {
	if o == nil {
		var ret []AdapterHostEthInterfaceRelationship
		return ret
	}
	return o.HostEthIfs
}

// GetHostEthIfsOk returns a tuple with the HostEthIfs field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AdapterUnit) GetHostEthIfsOk() ([]AdapterHostEthInterfaceRelationship, bool) {
	if o == nil || IsNil(o.HostEthIfs) {
		return nil, false
	}
	return o.HostEthIfs, true
}

// HasHostEthIfs returns a boolean if a field has been set.
func (o *AdapterUnit) HasHostEthIfs() bool {
	if o != nil && !IsNil(o.HostEthIfs) {
		return true
	}

	return false
}

// SetHostEthIfs gets a reference to the given []AdapterHostEthInterfaceRelationship and assigns it to the HostEthIfs field.
func (o *AdapterUnit) SetHostEthIfs(v []AdapterHostEthInterfaceRelationship) {
	o.HostEthIfs = v
}

// GetHostFcIfs returns the HostFcIfs field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AdapterUnit) GetHostFcIfs() []AdapterHostFcInterfaceRelationship {
	if o == nil {
		var ret []AdapterHostFcInterfaceRelationship
		return ret
	}
	return o.HostFcIfs
}

// GetHostFcIfsOk returns a tuple with the HostFcIfs field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AdapterUnit) GetHostFcIfsOk() ([]AdapterHostFcInterfaceRelationship, bool) {
	if o == nil || IsNil(o.HostFcIfs) {
		return nil, false
	}
	return o.HostFcIfs, true
}

// HasHostFcIfs returns a boolean if a field has been set.
func (o *AdapterUnit) HasHostFcIfs() bool {
	if o != nil && !IsNil(o.HostFcIfs) {
		return true
	}

	return false
}

// SetHostFcIfs gets a reference to the given []AdapterHostFcInterfaceRelationship and assigns it to the HostFcIfs field.
func (o *AdapterUnit) SetHostFcIfs(v []AdapterHostFcInterfaceRelationship) {
	o.HostFcIfs = v
}

// GetHostIscsiIfs returns the HostIscsiIfs field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AdapterUnit) GetHostIscsiIfs() []AdapterHostIscsiInterfaceRelationship {
	if o == nil {
		var ret []AdapterHostIscsiInterfaceRelationship
		return ret
	}
	return o.HostIscsiIfs
}

// GetHostIscsiIfsOk returns a tuple with the HostIscsiIfs field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AdapterUnit) GetHostIscsiIfsOk() ([]AdapterHostIscsiInterfaceRelationship, bool) {
	if o == nil || IsNil(o.HostIscsiIfs) {
		return nil, false
	}
	return o.HostIscsiIfs, true
}

// HasHostIscsiIfs returns a boolean if a field has been set.
func (o *AdapterUnit) HasHostIscsiIfs() bool {
	if o != nil && !IsNil(o.HostIscsiIfs) {
		return true
	}

	return false
}

// SetHostIscsiIfs gets a reference to the given []AdapterHostIscsiInterfaceRelationship and assigns it to the HostIscsiIfs field.
func (o *AdapterUnit) SetHostIscsiIfs(v []AdapterHostIscsiInterfaceRelationship) {
	o.HostIscsiIfs = v
}

// GetInventoryDeviceInfo returns the InventoryDeviceInfo field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AdapterUnit) GetInventoryDeviceInfo() InventoryDeviceInfoRelationship {
	if o == nil || IsNil(o.InventoryDeviceInfo.Get()) {
		var ret InventoryDeviceInfoRelationship
		return ret
	}
	return *o.InventoryDeviceInfo.Get()
}

// GetInventoryDeviceInfoOk returns a tuple with the InventoryDeviceInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AdapterUnit) GetInventoryDeviceInfoOk() (*InventoryDeviceInfoRelationship, bool) {
	if o == nil {
		return nil, false
	}
	return o.InventoryDeviceInfo.Get(), o.InventoryDeviceInfo.IsSet()
}

// HasInventoryDeviceInfo returns a boolean if a field has been set.
func (o *AdapterUnit) HasInventoryDeviceInfo() bool {
	if o != nil && o.InventoryDeviceInfo.IsSet() {
		return true
	}

	return false
}

// SetInventoryDeviceInfo gets a reference to the given NullableInventoryDeviceInfoRelationship and assigns it to the InventoryDeviceInfo field.
func (o *AdapterUnit) SetInventoryDeviceInfo(v InventoryDeviceInfoRelationship) {
	o.InventoryDeviceInfo.Set(&v)
}

// SetInventoryDeviceInfoNil sets the value for InventoryDeviceInfo to be an explicit nil
func (o *AdapterUnit) SetInventoryDeviceInfoNil() {
	o.InventoryDeviceInfo.Set(nil)
}

// UnsetInventoryDeviceInfo ensures that no value is present for InventoryDeviceInfo, not even an explicit nil
func (o *AdapterUnit) UnsetInventoryDeviceInfo() {
	o.InventoryDeviceInfo.Unset()
}

// GetRegisteredDevice returns the RegisteredDevice field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AdapterUnit) GetRegisteredDevice() AssetDeviceRegistrationRelationship {
	if o == nil || IsNil(o.RegisteredDevice.Get()) {
		var ret AssetDeviceRegistrationRelationship
		return ret
	}
	return *o.RegisteredDevice.Get()
}

// GetRegisteredDeviceOk returns a tuple with the RegisteredDevice field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AdapterUnit) GetRegisteredDeviceOk() (*AssetDeviceRegistrationRelationship, bool) {
	if o == nil {
		return nil, false
	}
	return o.RegisteredDevice.Get(), o.RegisteredDevice.IsSet()
}

// HasRegisteredDevice returns a boolean if a field has been set.
func (o *AdapterUnit) HasRegisteredDevice() bool {
	if o != nil && o.RegisteredDevice.IsSet() {
		return true
	}

	return false
}

// SetRegisteredDevice gets a reference to the given NullableAssetDeviceRegistrationRelationship and assigns it to the RegisteredDevice field.
func (o *AdapterUnit) SetRegisteredDevice(v AssetDeviceRegistrationRelationship) {
	o.RegisteredDevice.Set(&v)
}

// SetRegisteredDeviceNil sets the value for RegisteredDevice to be an explicit nil
func (o *AdapterUnit) SetRegisteredDeviceNil() {
	o.RegisteredDevice.Set(nil)
}

// UnsetRegisteredDevice ensures that no value is present for RegisteredDevice, not even an explicit nil
func (o *AdapterUnit) UnsetRegisteredDevice() {
	o.RegisteredDevice.Unset()
}

func (o AdapterUnit) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AdapterUnit) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	serializedEquipmentBase, errEquipmentBase := json.Marshal(o.EquipmentBase)
	if errEquipmentBase != nil {
		return map[string]interface{}{}, errEquipmentBase
	}
	errEquipmentBase = json.Unmarshal([]byte(serializedEquipmentBase), &toSerialize)
	if errEquipmentBase != nil {
		return map[string]interface{}{}, errEquipmentBase
	}
	if _, exists := toSerialize["ClassId"]; !exists {
		toSerialize["ClassId"] = o.GetDefaultClassId()
	}
	toSerialize["ClassId"] = o.ClassId
	if _, exists := toSerialize["ObjectType"]; !exists {
		toSerialize["ObjectType"] = o.GetDefaultObjectType()
	}
	toSerialize["ObjectType"] = o.ObjectType
	if !IsNil(o.AdapterId) {
		toSerialize["AdapterId"] = o.AdapterId
	}
	if !IsNil(o.BaseMacAddress) {
		toSerialize["BaseMacAddress"] = o.BaseMacAddress
	}
	if !IsNil(o.ConnectionStatus) {
		toSerialize["ConnectionStatus"] = o.ConnectionStatus
	}
	if !IsNil(o.Integrated) {
		toSerialize["Integrated"] = o.Integrated
	}
	if o.OperReason != nil {
		toSerialize["OperReason"] = o.OperReason
	}
	if !IsNil(o.OperState) {
		toSerialize["OperState"] = o.OperState
	}
	if !IsNil(o.Operability) {
		toSerialize["Operability"] = o.Operability
	}
	if !IsNil(o.PartNumber) {
		toSerialize["PartNumber"] = o.PartNumber
	}
	if !IsNil(o.PciSlot) {
		toSerialize["PciSlot"] = o.PciSlot
	}
	if !IsNil(o.Power) {
		toSerialize["Power"] = o.Power
	}
	if !IsNil(o.Thermal) {
		toSerialize["Thermal"] = o.Thermal
	}
	if !IsNil(o.VicCommunicable) {
		toSerialize["VicCommunicable"] = o.VicCommunicable
	}
	if !IsNil(o.Vid) {
		toSerialize["Vid"] = o.Vid
	}
	if o.AdapterUnitExpander.IsSet() {
		toSerialize["AdapterUnitExpander"] = o.AdapterUnitExpander.Get()
	}
	if o.ComputeBlade.IsSet() {
		toSerialize["ComputeBlade"] = o.ComputeBlade.Get()
	}
	if o.ComputeRackUnit.IsSet() {
		toSerialize["ComputeRackUnit"] = o.ComputeRackUnit.Get()
	}
	if o.Controller.IsSet() {
		toSerialize["Controller"] = o.Controller.Get()
	}
	if o.ExtEthIfs != nil {
		toSerialize["ExtEthIfs"] = o.ExtEthIfs
	}
	if o.HostEthIfs != nil {
		toSerialize["HostEthIfs"] = o.HostEthIfs
	}
	if o.HostFcIfs != nil {
		toSerialize["HostFcIfs"] = o.HostFcIfs
	}
	if o.HostIscsiIfs != nil {
		toSerialize["HostIscsiIfs"] = o.HostIscsiIfs
	}
	if o.InventoryDeviceInfo.IsSet() {
		toSerialize["InventoryDeviceInfo"] = o.InventoryDeviceInfo.Get()
	}
	if o.RegisteredDevice.IsSet() {
		toSerialize["RegisteredDevice"] = o.RegisteredDevice.Get()
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *AdapterUnit) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"ClassId",
		"ObjectType",
	}

	// defaultValueFuncMap captures the default values for required properties.
	// These values are used when required properties are missing from the payload.
	defaultValueFuncMap := map[string]func() interface{}{
		"ClassId":    o.GetDefaultClassId,
		"ObjectType": o.GetDefaultObjectType,
	}
	var defaultValueApplied bool
	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			if _, ok := defaultValueFuncMap[requiredProperty]; ok {
				allProperties[requiredProperty] = defaultValueFuncMap[requiredProperty]()
				defaultValueApplied = true
			}
		}
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	if defaultValueApplied {
		data, err = json.Marshal(allProperties)
		if err != nil {
			return err
		}
	}
	type AdapterUnitWithoutEmbeddedStruct struct {
		// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.
		ClassId string `json:"ClassId"`
		// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
		ObjectType string `json:"ObjectType"`
		// Unique Identifier of an adapter Unit within a Rack Interface.
		AdapterId *string `json:"AdapterId,omitempty"`
		// Original Base Mac address of an adapter unit.
		BaseMacAddress *string `json:"BaseMacAddress,omitempty"`
		// Connectivity Status of adapter - A or B or AB.
		ConnectionStatus *string `json:"ConnectionStatus,omitempty"`
		// Cisco Integrated adapter or other type.
		Integrated *string  `json:"Integrated,omitempty"`
		OperReason []string `json:"OperReason,omitempty"`
		// Operational state of an adapter unit.
		OperState *string `json:"OperState,omitempty"`
		// Operability state of an adapter unit.
		Operability *string `json:"Operability,omitempty"`
		// Part number of an adapter unit.
		PartNumber *string `json:"PartNumber,omitempty"`
		// PCIe slot of the adapter in the server.
		PciSlot *string `json:"PciSlot,omitempty"`
		// Power state of an adapter unit.
		Power *string `json:"Power,omitempty"`
		// Thermal state of an adapter unit.
		Thermal *string `json:"Thermal,omitempty"`
		// Records the current state of communication between the Virtual Interface Card (VIC) and the Cisco Integrated Management Controller (CIMC) on the server. * `Not Applicable` - Set the state of VIC communication to Not Applicable for other Platforms. * `Yes` - VIC is reachable from CIMC. * `No` - VIC is not reachable from CIMC.
		VicCommunicable *string `json:"VicCommunicable,omitempty"`
		// Virtual Id of the adapter in the server.
		Vid                 *string                                  `json:"Vid,omitempty"`
		AdapterUnitExpander NullableAdapterUnitExpanderRelationship  `json:"AdapterUnitExpander,omitempty"`
		ComputeBlade        NullableComputeBladeRelationship         `json:"ComputeBlade,omitempty"`
		ComputeRackUnit     NullableComputeRackUnitRelationship      `json:"ComputeRackUnit,omitempty"`
		Controller          NullableManagementControllerRelationship `json:"Controller,omitempty"`
		// An array of relationships to adapterExtEthInterface resources.
		ExtEthIfs []AdapterExtEthInterfaceRelationship `json:"ExtEthIfs,omitempty"`
		// An array of relationships to adapterHostEthInterface resources.
		HostEthIfs []AdapterHostEthInterfaceRelationship `json:"HostEthIfs,omitempty"`
		// An array of relationships to adapterHostFcInterface resources.
		HostFcIfs []AdapterHostFcInterfaceRelationship `json:"HostFcIfs,omitempty"`
		// An array of relationships to adapterHostIscsiInterface resources.
		HostIscsiIfs        []AdapterHostIscsiInterfaceRelationship     `json:"HostIscsiIfs,omitempty"`
		InventoryDeviceInfo NullableInventoryDeviceInfoRelationship     `json:"InventoryDeviceInfo,omitempty"`
		RegisteredDevice    NullableAssetDeviceRegistrationRelationship `json:"RegisteredDevice,omitempty"`
	}

	varAdapterUnitWithoutEmbeddedStruct := AdapterUnitWithoutEmbeddedStruct{}

	err = json.Unmarshal(data, &varAdapterUnitWithoutEmbeddedStruct)
	if err == nil {
		varAdapterUnit := _AdapterUnit{}
		varAdapterUnit.ClassId = varAdapterUnitWithoutEmbeddedStruct.ClassId
		varAdapterUnit.ObjectType = varAdapterUnitWithoutEmbeddedStruct.ObjectType
		varAdapterUnit.AdapterId = varAdapterUnitWithoutEmbeddedStruct.AdapterId
		varAdapterUnit.BaseMacAddress = varAdapterUnitWithoutEmbeddedStruct.BaseMacAddress
		varAdapterUnit.ConnectionStatus = varAdapterUnitWithoutEmbeddedStruct.ConnectionStatus
		varAdapterUnit.Integrated = varAdapterUnitWithoutEmbeddedStruct.Integrated
		varAdapterUnit.OperReason = varAdapterUnitWithoutEmbeddedStruct.OperReason
		varAdapterUnit.OperState = varAdapterUnitWithoutEmbeddedStruct.OperState
		varAdapterUnit.Operability = varAdapterUnitWithoutEmbeddedStruct.Operability
		varAdapterUnit.PartNumber = varAdapterUnitWithoutEmbeddedStruct.PartNumber
		varAdapterUnit.PciSlot = varAdapterUnitWithoutEmbeddedStruct.PciSlot
		varAdapterUnit.Power = varAdapterUnitWithoutEmbeddedStruct.Power
		varAdapterUnit.Thermal = varAdapterUnitWithoutEmbeddedStruct.Thermal
		varAdapterUnit.VicCommunicable = varAdapterUnitWithoutEmbeddedStruct.VicCommunicable
		varAdapterUnit.Vid = varAdapterUnitWithoutEmbeddedStruct.Vid
		varAdapterUnit.AdapterUnitExpander = varAdapterUnitWithoutEmbeddedStruct.AdapterUnitExpander
		varAdapterUnit.ComputeBlade = varAdapterUnitWithoutEmbeddedStruct.ComputeBlade
		varAdapterUnit.ComputeRackUnit = varAdapterUnitWithoutEmbeddedStruct.ComputeRackUnit
		varAdapterUnit.Controller = varAdapterUnitWithoutEmbeddedStruct.Controller
		varAdapterUnit.ExtEthIfs = varAdapterUnitWithoutEmbeddedStruct.ExtEthIfs
		varAdapterUnit.HostEthIfs = varAdapterUnitWithoutEmbeddedStruct.HostEthIfs
		varAdapterUnit.HostFcIfs = varAdapterUnitWithoutEmbeddedStruct.HostFcIfs
		varAdapterUnit.HostIscsiIfs = varAdapterUnitWithoutEmbeddedStruct.HostIscsiIfs
		varAdapterUnit.InventoryDeviceInfo = varAdapterUnitWithoutEmbeddedStruct.InventoryDeviceInfo
		varAdapterUnit.RegisteredDevice = varAdapterUnitWithoutEmbeddedStruct.RegisteredDevice
		*o = AdapterUnit(varAdapterUnit)
	} else {
		return err
	}

	varAdapterUnit := _AdapterUnit{}

	err = json.Unmarshal(data, &varAdapterUnit)
	if err == nil {
		o.EquipmentBase = varAdapterUnit.EquipmentBase
	} else {
		return err
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "ClassId")
		delete(additionalProperties, "ObjectType")
		delete(additionalProperties, "AdapterId")
		delete(additionalProperties, "BaseMacAddress")
		delete(additionalProperties, "ConnectionStatus")
		delete(additionalProperties, "Integrated")
		delete(additionalProperties, "OperReason")
		delete(additionalProperties, "OperState")
		delete(additionalProperties, "Operability")
		delete(additionalProperties, "PartNumber")
		delete(additionalProperties, "PciSlot")
		delete(additionalProperties, "Power")
		delete(additionalProperties, "Thermal")
		delete(additionalProperties, "VicCommunicable")
		delete(additionalProperties, "Vid")
		delete(additionalProperties, "AdapterUnitExpander")
		delete(additionalProperties, "ComputeBlade")
		delete(additionalProperties, "ComputeRackUnit")
		delete(additionalProperties, "Controller")
		delete(additionalProperties, "ExtEthIfs")
		delete(additionalProperties, "HostEthIfs")
		delete(additionalProperties, "HostFcIfs")
		delete(additionalProperties, "HostIscsiIfs")
		delete(additionalProperties, "InventoryDeviceInfo")
		delete(additionalProperties, "RegisteredDevice")

		// remove fields from embedded structs
		reflectEquipmentBase := reflect.ValueOf(o.EquipmentBase)
		for i := 0; i < reflectEquipmentBase.Type().NumField(); i++ {
			t := reflectEquipmentBase.Type().Field(i)

			if jsonTag := t.Tag.Get("json"); jsonTag != "" {
				fieldName := ""
				if commaIdx := strings.Index(jsonTag, ","); commaIdx > 0 {
					fieldName = jsonTag[:commaIdx]
				} else {
					fieldName = jsonTag
				}
				if fieldName != "AdditionalProperties" {
					delete(additionalProperties, fieldName)
				}
			}
		}

		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableAdapterUnit struct {
	value *AdapterUnit
	isSet bool
}

func (v NullableAdapterUnit) Get() *AdapterUnit {
	return v.value
}

func (v *NullableAdapterUnit) Set(val *AdapterUnit) {
	v.value = val
	v.isSet = true
}

func (v NullableAdapterUnit) IsSet() bool {
	return v.isSet
}

func (v *NullableAdapterUnit) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAdapterUnit(val *AdapterUnit) *NullableAdapterUnit {
	return &NullableAdapterUnit{value: val, isSet: true}
}

func (v NullableAdapterUnit) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAdapterUnit) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
