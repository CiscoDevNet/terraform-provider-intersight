/*
Cisco Intersight

Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations. The Intersight OpenAPI document defines the complete set of properties that are returned in the HTTP response. From that perspective, a client can expect that no additional properties are returned, unless these properties are explicitly defined in the OpenAPI document. However, when a client uses an older version of the Intersight OpenAPI document, the server may send additional properties because the software is more recent than the client. In that case, the client may receive properties that it does not know about. Some generated SDKs perform a strict validation of the HTTP response body against the OpenAPI document.

API version: 1.0.11-13892
Contact: intersight@cisco.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package intersight

import (
	"encoding/json"
)

// HclServerHwCatalogInfoAllOf Definition of the list of properties defined in 'hcl.ServerHwCatalogInfo', excluding properties defined in parent classes.
type HclServerHwCatalogInfoAllOf struct {
	// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.
	ClassId string `json:"ClassId"`
	// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
	ObjectType  string          `json:"ObjectType"`
	Constraints []HclConstraint `json:"Constraints,omitempty"`
	// Display model of the server hardware. In many cases, the model string used in the catalog will be the hardware Cisco PID and the Intersight model string is a more user-friendly string with vendor information in it. This will be the user-friendly modal string to be used in Intersight.
	DisplayModel *string `json:"DisplayModel,omitempty"`
	// Identifier of specific tag.
	ExtId *string `json:"Ext_Id,omitempty"`
	// Model of the server hardware from the catalog file.
	Model *string `json:"Model,omitempty"`
	// Type of specific tag, required to choose the correct datatype while reading the value.
	Type *string `json:"Type,omitempty"`
	// Value of specific tag, having type as json.
	Value interface{} `json:"Value,omitempty"`
	// An array of relationships to hclServerHwCatalogInfo resources.
	ServerHwInfo         []HclServerHwCatalogInfoRelationship `json:"ServerHwInfo,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _HclServerHwCatalogInfoAllOf HclServerHwCatalogInfoAllOf

// NewHclServerHwCatalogInfoAllOf instantiates a new HclServerHwCatalogInfoAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHclServerHwCatalogInfoAllOf(classId string, objectType string) *HclServerHwCatalogInfoAllOf {
	this := HclServerHwCatalogInfoAllOf{}
	this.ClassId = classId
	this.ObjectType = objectType
	return &this
}

// NewHclServerHwCatalogInfoAllOfWithDefaults instantiates a new HclServerHwCatalogInfoAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHclServerHwCatalogInfoAllOfWithDefaults() *HclServerHwCatalogInfoAllOf {
	this := HclServerHwCatalogInfoAllOf{}
	var classId string = "hcl.ServerHwCatalogInfo"
	this.ClassId = classId
	var objectType string = "hcl.ServerHwCatalogInfo"
	this.ObjectType = objectType
	return &this
}

// GetClassId returns the ClassId field value
func (o *HclServerHwCatalogInfoAllOf) GetClassId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ClassId
}

// GetClassIdOk returns a tuple with the ClassId field value
// and a boolean to check if the value has been set.
func (o *HclServerHwCatalogInfoAllOf) GetClassIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ClassId, true
}

// SetClassId sets field value
func (o *HclServerHwCatalogInfoAllOf) SetClassId(v string) {
	o.ClassId = v
}

// GetObjectType returns the ObjectType field value
func (o *HclServerHwCatalogInfoAllOf) GetObjectType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ObjectType
}

// GetObjectTypeOk returns a tuple with the ObjectType field value
// and a boolean to check if the value has been set.
func (o *HclServerHwCatalogInfoAllOf) GetObjectTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ObjectType, true
}

// SetObjectType sets field value
func (o *HclServerHwCatalogInfoAllOf) SetObjectType(v string) {
	o.ObjectType = v
}

// GetConstraints returns the Constraints field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HclServerHwCatalogInfoAllOf) GetConstraints() []HclConstraint {
	if o == nil {
		var ret []HclConstraint
		return ret
	}
	return o.Constraints
}

// GetConstraintsOk returns a tuple with the Constraints field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HclServerHwCatalogInfoAllOf) GetConstraintsOk() ([]HclConstraint, bool) {
	if o == nil || o.Constraints == nil {
		return nil, false
	}
	return o.Constraints, true
}

// HasConstraints returns a boolean if a field has been set.
func (o *HclServerHwCatalogInfoAllOf) HasConstraints() bool {
	if o != nil && o.Constraints != nil {
		return true
	}

	return false
}

// SetConstraints gets a reference to the given []HclConstraint and assigns it to the Constraints field.
func (o *HclServerHwCatalogInfoAllOf) SetConstraints(v []HclConstraint) {
	o.Constraints = v
}

// GetDisplayModel returns the DisplayModel field value if set, zero value otherwise.
func (o *HclServerHwCatalogInfoAllOf) GetDisplayModel() string {
	if o == nil || o.DisplayModel == nil {
		var ret string
		return ret
	}
	return *o.DisplayModel
}

// GetDisplayModelOk returns a tuple with the DisplayModel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HclServerHwCatalogInfoAllOf) GetDisplayModelOk() (*string, bool) {
	if o == nil || o.DisplayModel == nil {
		return nil, false
	}
	return o.DisplayModel, true
}

// HasDisplayModel returns a boolean if a field has been set.
func (o *HclServerHwCatalogInfoAllOf) HasDisplayModel() bool {
	if o != nil && o.DisplayModel != nil {
		return true
	}

	return false
}

// SetDisplayModel gets a reference to the given string and assigns it to the DisplayModel field.
func (o *HclServerHwCatalogInfoAllOf) SetDisplayModel(v string) {
	o.DisplayModel = &v
}

// GetExtId returns the ExtId field value if set, zero value otherwise.
func (o *HclServerHwCatalogInfoAllOf) GetExtId() string {
	if o == nil || o.ExtId == nil {
		var ret string
		return ret
	}
	return *o.ExtId
}

// GetExtIdOk returns a tuple with the ExtId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HclServerHwCatalogInfoAllOf) GetExtIdOk() (*string, bool) {
	if o == nil || o.ExtId == nil {
		return nil, false
	}
	return o.ExtId, true
}

// HasExtId returns a boolean if a field has been set.
func (o *HclServerHwCatalogInfoAllOf) HasExtId() bool {
	if o != nil && o.ExtId != nil {
		return true
	}

	return false
}

// SetExtId gets a reference to the given string and assigns it to the ExtId field.
func (o *HclServerHwCatalogInfoAllOf) SetExtId(v string) {
	o.ExtId = &v
}

// GetModel returns the Model field value if set, zero value otherwise.
func (o *HclServerHwCatalogInfoAllOf) GetModel() string {
	if o == nil || o.Model == nil {
		var ret string
		return ret
	}
	return *o.Model
}

// GetModelOk returns a tuple with the Model field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HclServerHwCatalogInfoAllOf) GetModelOk() (*string, bool) {
	if o == nil || o.Model == nil {
		return nil, false
	}
	return o.Model, true
}

// HasModel returns a boolean if a field has been set.
func (o *HclServerHwCatalogInfoAllOf) HasModel() bool {
	if o != nil && o.Model != nil {
		return true
	}

	return false
}

// SetModel gets a reference to the given string and assigns it to the Model field.
func (o *HclServerHwCatalogInfoAllOf) SetModel(v string) {
	o.Model = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *HclServerHwCatalogInfoAllOf) GetType() string {
	if o == nil || o.Type == nil {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HclServerHwCatalogInfoAllOf) GetTypeOk() (*string, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *HclServerHwCatalogInfoAllOf) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *HclServerHwCatalogInfoAllOf) SetType(v string) {
	o.Type = &v
}

// GetValue returns the Value field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HclServerHwCatalogInfoAllOf) GetValue() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HclServerHwCatalogInfoAllOf) GetValueOk() (*interface{}, bool) {
	if o == nil || o.Value == nil {
		return nil, false
	}
	return &o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *HclServerHwCatalogInfoAllOf) HasValue() bool {
	if o != nil && o.Value != nil {
		return true
	}

	return false
}

// SetValue gets a reference to the given interface{} and assigns it to the Value field.
func (o *HclServerHwCatalogInfoAllOf) SetValue(v interface{}) {
	o.Value = v
}

// GetServerHwInfo returns the ServerHwInfo field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HclServerHwCatalogInfoAllOf) GetServerHwInfo() []HclServerHwCatalogInfoRelationship {
	if o == nil {
		var ret []HclServerHwCatalogInfoRelationship
		return ret
	}
	return o.ServerHwInfo
}

// GetServerHwInfoOk returns a tuple with the ServerHwInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HclServerHwCatalogInfoAllOf) GetServerHwInfoOk() ([]HclServerHwCatalogInfoRelationship, bool) {
	if o == nil || o.ServerHwInfo == nil {
		return nil, false
	}
	return o.ServerHwInfo, true
}

// HasServerHwInfo returns a boolean if a field has been set.
func (o *HclServerHwCatalogInfoAllOf) HasServerHwInfo() bool {
	if o != nil && o.ServerHwInfo != nil {
		return true
	}

	return false
}

// SetServerHwInfo gets a reference to the given []HclServerHwCatalogInfoRelationship and assigns it to the ServerHwInfo field.
func (o *HclServerHwCatalogInfoAllOf) SetServerHwInfo(v []HclServerHwCatalogInfoRelationship) {
	o.ServerHwInfo = v
}

func (o HclServerHwCatalogInfoAllOf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["ClassId"] = o.ClassId
	}
	if true {
		toSerialize["ObjectType"] = o.ObjectType
	}
	if o.Constraints != nil {
		toSerialize["Constraints"] = o.Constraints
	}
	if o.DisplayModel != nil {
		toSerialize["DisplayModel"] = o.DisplayModel
	}
	if o.ExtId != nil {
		toSerialize["Ext_Id"] = o.ExtId
	}
	if o.Model != nil {
		toSerialize["Model"] = o.Model
	}
	if o.Type != nil {
		toSerialize["Type"] = o.Type
	}
	if o.Value != nil {
		toSerialize["Value"] = o.Value
	}
	if o.ServerHwInfo != nil {
		toSerialize["ServerHwInfo"] = o.ServerHwInfo
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *HclServerHwCatalogInfoAllOf) UnmarshalJSON(bytes []byte) (err error) {
	varHclServerHwCatalogInfoAllOf := _HclServerHwCatalogInfoAllOf{}

	if err = json.Unmarshal(bytes, &varHclServerHwCatalogInfoAllOf); err == nil {
		*o = HclServerHwCatalogInfoAllOf(varHclServerHwCatalogInfoAllOf)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "ClassId")
		delete(additionalProperties, "ObjectType")
		delete(additionalProperties, "Constraints")
		delete(additionalProperties, "DisplayModel")
		delete(additionalProperties, "Ext_Id")
		delete(additionalProperties, "Model")
		delete(additionalProperties, "Type")
		delete(additionalProperties, "Value")
		delete(additionalProperties, "ServerHwInfo")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableHclServerHwCatalogInfoAllOf struct {
	value *HclServerHwCatalogInfoAllOf
	isSet bool
}

func (v NullableHclServerHwCatalogInfoAllOf) Get() *HclServerHwCatalogInfoAllOf {
	return v.value
}

func (v *NullableHclServerHwCatalogInfoAllOf) Set(val *HclServerHwCatalogInfoAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableHclServerHwCatalogInfoAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableHclServerHwCatalogInfoAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHclServerHwCatalogInfoAllOf(val *HclServerHwCatalogInfoAllOf) *NullableHclServerHwCatalogInfoAllOf {
	return &NullableHclServerHwCatalogInfoAllOf{value: val, isSet: true}
}

func (v NullableHclServerHwCatalogInfoAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHclServerHwCatalogInfoAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
