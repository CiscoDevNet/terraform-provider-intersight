/*
Cisco Intersight

Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations. The Intersight OpenAPI document defines the complete set of properties that are returned in the HTTP response. From that perspective, a client can expect that no additional properties are returned, unless these properties are explicitly defined in the OpenAPI document. However, when a client uses an older version of the Intersight OpenAPI document, the server may send additional properties because the software is more recent than the client. In that case, the client may receive properties that it does not know about. Some generated SDKs perform a strict validation of the HTTP response body against the OpenAPI document.

API version: 1.0.11-2024100405
Contact: intersight@cisco.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package intersight

import (
	"encoding/json"
	"fmt"
	"reflect"
	"strings"
	"time"
)

// checks if the MoVersionContext type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MoVersionContext{}

// MoVersionContext VersionContext contains the versioning info for an object.
type MoVersionContext struct {
	MoBaseComplexType
	// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.
	ClassId string `json:"ClassId"`
	// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
	ObjectType    string    `json:"ObjectType"`
	InterestedMos []MoMoRef `json:"InterestedMos,omitempty"`
	// The flag to indicate if snapshot is marked for deletion or not. If flag is set then snapshot will be removed after the successful deployment of the policy.
	MarkedForDeletion *bool    `json:"MarkedForDeletion,omitempty"`
	RefMo             *MoMoRef `json:"RefMo,omitempty"`
	// The time this versioned Managed Object was created.
	Timestamp *time.Time `json:"Timestamp,omitempty"`
	// The version of the Managed Object, e.g. an incrementing number or a hash id.
	Version *string `json:"Version,omitempty"`
	// Specifies type of version. Currently the only supported value is \"Configured\" that is used to keep track of snapshots of policies and profiles that are intended to be configured to target endpoints. * `Modified` - Version created every time an object is modified. * `Configured` - Version created every time an object is configured to the service profile. * `Deployed` - Version created for objects related to a service profile when it is deployed.
	VersionType          *string `json:"VersionType,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _MoVersionContext MoVersionContext

// NewMoVersionContext instantiates a new MoVersionContext object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMoVersionContext(classId string, objectType string) *MoVersionContext {
	this := MoVersionContext{}
	this.ClassId = classId
	this.ObjectType = objectType
	return &this
}

// NewMoVersionContextWithDefaults instantiates a new MoVersionContext object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMoVersionContextWithDefaults() *MoVersionContext {
	this := MoVersionContext{}
	var classId string = "mo.VersionContext"
	this.ClassId = classId
	var objectType string = "mo.VersionContext"
	this.ObjectType = objectType
	return &this
}

// GetClassId returns the ClassId field value
func (o *MoVersionContext) GetClassId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ClassId
}

// GetClassIdOk returns a tuple with the ClassId field value
// and a boolean to check if the value has been set.
func (o *MoVersionContext) GetClassIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ClassId, true
}

// SetClassId sets field value
func (o *MoVersionContext) SetClassId(v string) {
	o.ClassId = v
}

// GetDefaultClassId returns the default value "mo.VersionContext" of the ClassId field.
func (o *MoVersionContext) GetDefaultClassId() interface{} {
	return "mo.VersionContext"
}

// GetObjectType returns the ObjectType field value
func (o *MoVersionContext) GetObjectType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ObjectType
}

// GetObjectTypeOk returns a tuple with the ObjectType field value
// and a boolean to check if the value has been set.
func (o *MoVersionContext) GetObjectTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ObjectType, true
}

// SetObjectType sets field value
func (o *MoVersionContext) SetObjectType(v string) {
	o.ObjectType = v
}

// GetDefaultObjectType returns the default value "mo.VersionContext" of the ObjectType field.
func (o *MoVersionContext) GetDefaultObjectType() interface{} {
	return "mo.VersionContext"
}

// GetInterestedMos returns the InterestedMos field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MoVersionContext) GetInterestedMos() []MoMoRef {
	if o == nil {
		var ret []MoMoRef
		return ret
	}
	return o.InterestedMos
}

// GetInterestedMosOk returns a tuple with the InterestedMos field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MoVersionContext) GetInterestedMosOk() ([]MoMoRef, bool) {
	if o == nil || IsNil(o.InterestedMos) {
		return nil, false
	}
	return o.InterestedMos, true
}

// HasInterestedMos returns a boolean if a field has been set.
func (o *MoVersionContext) HasInterestedMos() bool {
	if o != nil && !IsNil(o.InterestedMos) {
		return true
	}

	return false
}

// SetInterestedMos gets a reference to the given []MoMoRef and assigns it to the InterestedMos field.
func (o *MoVersionContext) SetInterestedMos(v []MoMoRef) {
	o.InterestedMos = v
}

// GetMarkedForDeletion returns the MarkedForDeletion field value if set, zero value otherwise.
func (o *MoVersionContext) GetMarkedForDeletion() bool {
	if o == nil || IsNil(o.MarkedForDeletion) {
		var ret bool
		return ret
	}
	return *o.MarkedForDeletion
}

// GetMarkedForDeletionOk returns a tuple with the MarkedForDeletion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MoVersionContext) GetMarkedForDeletionOk() (*bool, bool) {
	if o == nil || IsNil(o.MarkedForDeletion) {
		return nil, false
	}
	return o.MarkedForDeletion, true
}

// HasMarkedForDeletion returns a boolean if a field has been set.
func (o *MoVersionContext) HasMarkedForDeletion() bool {
	if o != nil && !IsNil(o.MarkedForDeletion) {
		return true
	}

	return false
}

// SetMarkedForDeletion gets a reference to the given bool and assigns it to the MarkedForDeletion field.
func (o *MoVersionContext) SetMarkedForDeletion(v bool) {
	o.MarkedForDeletion = &v
}

// GetRefMo returns the RefMo field value if set, zero value otherwise.
func (o *MoVersionContext) GetRefMo() MoMoRef {
	if o == nil || IsNil(o.RefMo) {
		var ret MoMoRef
		return ret
	}
	return *o.RefMo
}

// GetRefMoOk returns a tuple with the RefMo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MoVersionContext) GetRefMoOk() (*MoMoRef, bool) {
	if o == nil || IsNil(o.RefMo) {
		return nil, false
	}
	return o.RefMo, true
}

// HasRefMo returns a boolean if a field has been set.
func (o *MoVersionContext) HasRefMo() bool {
	if o != nil && !IsNil(o.RefMo) {
		return true
	}

	return false
}

// SetRefMo gets a reference to the given MoMoRef and assigns it to the RefMo field.
func (o *MoVersionContext) SetRefMo(v MoMoRef) {
	o.RefMo = &v
}

// GetTimestamp returns the Timestamp field value if set, zero value otherwise.
func (o *MoVersionContext) GetTimestamp() time.Time {
	if o == nil || IsNil(o.Timestamp) {
		var ret time.Time
		return ret
	}
	return *o.Timestamp
}

// GetTimestampOk returns a tuple with the Timestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MoVersionContext) GetTimestampOk() (*time.Time, bool) {
	if o == nil || IsNil(o.Timestamp) {
		return nil, false
	}
	return o.Timestamp, true
}

// HasTimestamp returns a boolean if a field has been set.
func (o *MoVersionContext) HasTimestamp() bool {
	if o != nil && !IsNil(o.Timestamp) {
		return true
	}

	return false
}

// SetTimestamp gets a reference to the given time.Time and assigns it to the Timestamp field.
func (o *MoVersionContext) SetTimestamp(v time.Time) {
	o.Timestamp = &v
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *MoVersionContext) GetVersion() string {
	if o == nil || IsNil(o.Version) {
		var ret string
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MoVersionContext) GetVersionOk() (*string, bool) {
	if o == nil || IsNil(o.Version) {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *MoVersionContext) HasVersion() bool {
	if o != nil && !IsNil(o.Version) {
		return true
	}

	return false
}

// SetVersion gets a reference to the given string and assigns it to the Version field.
func (o *MoVersionContext) SetVersion(v string) {
	o.Version = &v
}

// GetVersionType returns the VersionType field value if set, zero value otherwise.
func (o *MoVersionContext) GetVersionType() string {
	if o == nil || IsNil(o.VersionType) {
		var ret string
		return ret
	}
	return *o.VersionType
}

// GetVersionTypeOk returns a tuple with the VersionType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MoVersionContext) GetVersionTypeOk() (*string, bool) {
	if o == nil || IsNil(o.VersionType) {
		return nil, false
	}
	return o.VersionType, true
}

// HasVersionType returns a boolean if a field has been set.
func (o *MoVersionContext) HasVersionType() bool {
	if o != nil && !IsNil(o.VersionType) {
		return true
	}

	return false
}

// SetVersionType gets a reference to the given string and assigns it to the VersionType field.
func (o *MoVersionContext) SetVersionType(v string) {
	o.VersionType = &v
}

func (o MoVersionContext) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MoVersionContext) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	serializedMoBaseComplexType, errMoBaseComplexType := json.Marshal(o.MoBaseComplexType)
	if errMoBaseComplexType != nil {
		return map[string]interface{}{}, errMoBaseComplexType
	}
	errMoBaseComplexType = json.Unmarshal([]byte(serializedMoBaseComplexType), &toSerialize)
	if errMoBaseComplexType != nil {
		return map[string]interface{}{}, errMoBaseComplexType
	}
	if _, exists := toSerialize["ClassId"]; !exists {
		toSerialize["ClassId"] = o.GetDefaultClassId()
	}
	toSerialize["ClassId"] = o.ClassId
	if _, exists := toSerialize["ObjectType"]; !exists {
		toSerialize["ObjectType"] = o.GetDefaultObjectType()
	}
	toSerialize["ObjectType"] = o.ObjectType
	if o.InterestedMos != nil {
		toSerialize["InterestedMos"] = o.InterestedMos
	}
	if !IsNil(o.MarkedForDeletion) {
		toSerialize["MarkedForDeletion"] = o.MarkedForDeletion
	}
	if !IsNil(o.RefMo) {
		toSerialize["RefMo"] = o.RefMo
	}
	if !IsNil(o.Timestamp) {
		toSerialize["Timestamp"] = o.Timestamp
	}
	if !IsNil(o.Version) {
		toSerialize["Version"] = o.Version
	}
	if !IsNil(o.VersionType) {
		toSerialize["VersionType"] = o.VersionType
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *MoVersionContext) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"ClassId",
		"ObjectType",
	}

	// defaultValueFuncMap captures the default values for required properties.
	// These values are used when required properties are missing from the payload.
	defaultValueFuncMap := map[string]func() interface{}{
		"ClassId":    o.GetDefaultClassId,
		"ObjectType": o.GetDefaultObjectType,
	}
	var defaultValueApplied bool
	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			if _, ok := defaultValueFuncMap[requiredProperty]; ok {
				allProperties[requiredProperty] = defaultValueFuncMap[requiredProperty]()
				defaultValueApplied = true
			}
		}
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	if defaultValueApplied {
		data, err = json.Marshal(allProperties)
		if err != nil {
			return err
		}
	}
	type MoVersionContextWithoutEmbeddedStruct struct {
		// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.
		ClassId string `json:"ClassId"`
		// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
		ObjectType    string    `json:"ObjectType"`
		InterestedMos []MoMoRef `json:"InterestedMos,omitempty"`
		// The flag to indicate if snapshot is marked for deletion or not. If flag is set then snapshot will be removed after the successful deployment of the policy.
		MarkedForDeletion *bool    `json:"MarkedForDeletion,omitempty"`
		RefMo             *MoMoRef `json:"RefMo,omitempty"`
		// The time this versioned Managed Object was created.
		Timestamp *time.Time `json:"Timestamp,omitempty"`
		// The version of the Managed Object, e.g. an incrementing number or a hash id.
		Version *string `json:"Version,omitempty"`
		// Specifies type of version. Currently the only supported value is \"Configured\" that is used to keep track of snapshots of policies and profiles that are intended to be configured to target endpoints. * `Modified` - Version created every time an object is modified. * `Configured` - Version created every time an object is configured to the service profile. * `Deployed` - Version created for objects related to a service profile when it is deployed.
		VersionType *string `json:"VersionType,omitempty"`
	}

	varMoVersionContextWithoutEmbeddedStruct := MoVersionContextWithoutEmbeddedStruct{}

	err = json.Unmarshal(data, &varMoVersionContextWithoutEmbeddedStruct)
	if err == nil {
		varMoVersionContext := _MoVersionContext{}
		varMoVersionContext.ClassId = varMoVersionContextWithoutEmbeddedStruct.ClassId
		varMoVersionContext.ObjectType = varMoVersionContextWithoutEmbeddedStruct.ObjectType
		varMoVersionContext.InterestedMos = varMoVersionContextWithoutEmbeddedStruct.InterestedMos
		varMoVersionContext.MarkedForDeletion = varMoVersionContextWithoutEmbeddedStruct.MarkedForDeletion
		varMoVersionContext.RefMo = varMoVersionContextWithoutEmbeddedStruct.RefMo
		varMoVersionContext.Timestamp = varMoVersionContextWithoutEmbeddedStruct.Timestamp
		varMoVersionContext.Version = varMoVersionContextWithoutEmbeddedStruct.Version
		varMoVersionContext.VersionType = varMoVersionContextWithoutEmbeddedStruct.VersionType
		*o = MoVersionContext(varMoVersionContext)
	} else {
		return err
	}

	varMoVersionContext := _MoVersionContext{}

	err = json.Unmarshal(data, &varMoVersionContext)
	if err == nil {
		o.MoBaseComplexType = varMoVersionContext.MoBaseComplexType
	} else {
		return err
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "ClassId")
		delete(additionalProperties, "ObjectType")
		delete(additionalProperties, "InterestedMos")
		delete(additionalProperties, "MarkedForDeletion")
		delete(additionalProperties, "RefMo")
		delete(additionalProperties, "Timestamp")
		delete(additionalProperties, "Version")
		delete(additionalProperties, "VersionType")

		// remove fields from embedded structs
		reflectMoBaseComplexType := reflect.ValueOf(o.MoBaseComplexType)
		for i := 0; i < reflectMoBaseComplexType.Type().NumField(); i++ {
			t := reflectMoBaseComplexType.Type().Field(i)

			if jsonTag := t.Tag.Get("json"); jsonTag != "" {
				fieldName := ""
				if commaIdx := strings.Index(jsonTag, ","); commaIdx > 0 {
					fieldName = jsonTag[:commaIdx]
				} else {
					fieldName = jsonTag
				}
				if fieldName != "AdditionalProperties" {
					delete(additionalProperties, fieldName)
				}
			}
		}

		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableMoVersionContext struct {
	value *MoVersionContext
	isSet bool
}

func (v NullableMoVersionContext) Get() *MoVersionContext {
	return v.value
}

func (v *NullableMoVersionContext) Set(val *MoVersionContext) {
	v.value = val
	v.isSet = true
}

func (v NullableMoVersionContext) IsSet() bool {
	return v.isSet
}

func (v *NullableMoVersionContext) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMoVersionContext(val *MoVersionContext) *NullableMoVersionContext {
	return &NullableMoVersionContext{value: val, isSet: true}
}

func (v NullableMoVersionContext) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMoVersionContext) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
