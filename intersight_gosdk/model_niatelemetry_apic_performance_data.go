/*
Cisco Intersight

Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations. The Intersight OpenAPI document defines the complete set of properties that are returned in the HTTP response. From that perspective, a client can expect that no additional properties are returned, unless these properties are explicitly defined in the OpenAPI document. However, when a client uses an older version of the Intersight OpenAPI document, the server may send additional properties because the software is more recent than the client. In that case, the client may receive properties that it does not know about. Some generated SDKs perform a strict validation of the HTTP response body against the OpenAPI document.

API version: 1.0.11-18775
Contact: intersight@cisco.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package intersight

import (
	"encoding/json"
	"fmt"
	"reflect"
	"strings"
)

// checks if the NiatelemetryApicPerformanceData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NiatelemetryApicPerformanceData{}

// NiatelemetryApicPerformanceData Object to capture apic health details.
type NiatelemetryApicPerformanceData struct {
	MoBaseMo
	// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.
	ClassId string `json:"ClassId"`
	// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
	ObjectType               string                                 `json:"ObjectType"`
	DigitalOpticalMonitoring []NiatelemetryDigitalOpticalMonitoring `json:"DigitalOpticalMonitoring,omitempty"`
	// Dn of the fabric nodes in the apic.
	Dn                             *string                                            `json:"Dn,omitempty"`
	EqptStorageFirmware            NullableNiatelemetryEqptStorageFirmware            `json:"EqptStorageFirmware,omitempty"`
	EqptcapacityPolUsage5min       NullableNiatelemetryEqptcapacityPolUsage5min       `json:"EqptcapacityPolUsage5min,omitempty"`
	EqptcapacityPrefixEntries15min NullableNiatelemetryEqptcapacityPrefixEntries15min `json:"EqptcapacityPrefixEntries15min,omitempty"`
	EqptcapacityPrefixEntries5min  NullableNiatelemetryEqptcapacityPrefixEntries5min  `json:"EqptcapacityPrefixEntries5min,omitempty"`
	// Health of the fabric nodes in the apic.
	NodeHealth      *int64                              `json:"NodeHealth,omitempty"`
	ProcSysCpu15min NullableNiatelemetryProcSysCpu15min `json:"ProcSysCpu15min,omitempty"`
	ProcSysCpu5min  NullableNiatelemetryProcSysCpu5min  `json:"ProcSysCpu5min,omitempty"`
	ProcSysMem15min NullableNiatelemetryProcSysMem15min `json:"ProcSysMem15min,omitempty"`
	ProcSysMem5min  NullableNiatelemetryProcSysMem5min  `json:"ProcSysMem5min,omitempty"`
	// Type of record DCNM / APIC / SE. This determines the type of platform where inventory was collected.
	RecordType *string `json:"RecordType,omitempty"`
	// Version of record being pushed. This determines what was the API version for data available from the device.
	RecordVersion *string `json:"RecordVersion,omitempty"`
	// Name of the APIC site from which this data is being collected..
	SiteName              *string                                     `json:"SiteName,omitempty"`
	SwitchDiskUtilization []NiatelemetrySwitchDiskUtilization         `json:"SwitchDiskUtilization,omitempty"`
	RegisteredDevice      NullableAssetDeviceRegistrationRelationship `json:"RegisteredDevice,omitempty"`
	AdditionalProperties  map[string]interface{}
}

type _NiatelemetryApicPerformanceData NiatelemetryApicPerformanceData

// NewNiatelemetryApicPerformanceData instantiates a new NiatelemetryApicPerformanceData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNiatelemetryApicPerformanceData(classId string, objectType string) *NiatelemetryApicPerformanceData {
	this := NiatelemetryApicPerformanceData{}
	this.ClassId = classId
	this.ObjectType = objectType
	return &this
}

// NewNiatelemetryApicPerformanceDataWithDefaults instantiates a new NiatelemetryApicPerformanceData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNiatelemetryApicPerformanceDataWithDefaults() *NiatelemetryApicPerformanceData {
	this := NiatelemetryApicPerformanceData{}
	var classId string = "niatelemetry.ApicPerformanceData"
	this.ClassId = classId
	var objectType string = "niatelemetry.ApicPerformanceData"
	this.ObjectType = objectType
	return &this
}

// GetClassId returns the ClassId field value
func (o *NiatelemetryApicPerformanceData) GetClassId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ClassId
}

// GetClassIdOk returns a tuple with the ClassId field value
// and a boolean to check if the value has been set.
func (o *NiatelemetryApicPerformanceData) GetClassIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ClassId, true
}

// SetClassId sets field value
func (o *NiatelemetryApicPerformanceData) SetClassId(v string) {
	o.ClassId = v
}

// GetDefaultClassId returns the default value "niatelemetry.ApicPerformanceData" of the ClassId field.
func (o *NiatelemetryApicPerformanceData) GetDefaultClassId() interface{} {
	return "niatelemetry.ApicPerformanceData"
}

// GetObjectType returns the ObjectType field value
func (o *NiatelemetryApicPerformanceData) GetObjectType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ObjectType
}

// GetObjectTypeOk returns a tuple with the ObjectType field value
// and a boolean to check if the value has been set.
func (o *NiatelemetryApicPerformanceData) GetObjectTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ObjectType, true
}

// SetObjectType sets field value
func (o *NiatelemetryApicPerformanceData) SetObjectType(v string) {
	o.ObjectType = v
}

// GetDefaultObjectType returns the default value "niatelemetry.ApicPerformanceData" of the ObjectType field.
func (o *NiatelemetryApicPerformanceData) GetDefaultObjectType() interface{} {
	return "niatelemetry.ApicPerformanceData"
}

// GetDigitalOpticalMonitoring returns the DigitalOpticalMonitoring field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NiatelemetryApicPerformanceData) GetDigitalOpticalMonitoring() []NiatelemetryDigitalOpticalMonitoring {
	if o == nil {
		var ret []NiatelemetryDigitalOpticalMonitoring
		return ret
	}
	return o.DigitalOpticalMonitoring
}

// GetDigitalOpticalMonitoringOk returns a tuple with the DigitalOpticalMonitoring field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NiatelemetryApicPerformanceData) GetDigitalOpticalMonitoringOk() ([]NiatelemetryDigitalOpticalMonitoring, bool) {
	if o == nil || IsNil(o.DigitalOpticalMonitoring) {
		return nil, false
	}
	return o.DigitalOpticalMonitoring, true
}

// HasDigitalOpticalMonitoring returns a boolean if a field has been set.
func (o *NiatelemetryApicPerformanceData) HasDigitalOpticalMonitoring() bool {
	if o != nil && !IsNil(o.DigitalOpticalMonitoring) {
		return true
	}

	return false
}

// SetDigitalOpticalMonitoring gets a reference to the given []NiatelemetryDigitalOpticalMonitoring and assigns it to the DigitalOpticalMonitoring field.
func (o *NiatelemetryApicPerformanceData) SetDigitalOpticalMonitoring(v []NiatelemetryDigitalOpticalMonitoring) {
	o.DigitalOpticalMonitoring = v
}

// GetDn returns the Dn field value if set, zero value otherwise.
func (o *NiatelemetryApicPerformanceData) GetDn() string {
	if o == nil || IsNil(o.Dn) {
		var ret string
		return ret
	}
	return *o.Dn
}

// GetDnOk returns a tuple with the Dn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NiatelemetryApicPerformanceData) GetDnOk() (*string, bool) {
	if o == nil || IsNil(o.Dn) {
		return nil, false
	}
	return o.Dn, true
}

// HasDn returns a boolean if a field has been set.
func (o *NiatelemetryApicPerformanceData) HasDn() bool {
	if o != nil && !IsNil(o.Dn) {
		return true
	}

	return false
}

// SetDn gets a reference to the given string and assigns it to the Dn field.
func (o *NiatelemetryApicPerformanceData) SetDn(v string) {
	o.Dn = &v
}

// GetEqptStorageFirmware returns the EqptStorageFirmware field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NiatelemetryApicPerformanceData) GetEqptStorageFirmware() NiatelemetryEqptStorageFirmware {
	if o == nil || IsNil(o.EqptStorageFirmware.Get()) {
		var ret NiatelemetryEqptStorageFirmware
		return ret
	}
	return *o.EqptStorageFirmware.Get()
}

// GetEqptStorageFirmwareOk returns a tuple with the EqptStorageFirmware field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NiatelemetryApicPerformanceData) GetEqptStorageFirmwareOk() (*NiatelemetryEqptStorageFirmware, bool) {
	if o == nil {
		return nil, false
	}
	return o.EqptStorageFirmware.Get(), o.EqptStorageFirmware.IsSet()
}

// HasEqptStorageFirmware returns a boolean if a field has been set.
func (o *NiatelemetryApicPerformanceData) HasEqptStorageFirmware() bool {
	if o != nil && o.EqptStorageFirmware.IsSet() {
		return true
	}

	return false
}

// SetEqptStorageFirmware gets a reference to the given NullableNiatelemetryEqptStorageFirmware and assigns it to the EqptStorageFirmware field.
func (o *NiatelemetryApicPerformanceData) SetEqptStorageFirmware(v NiatelemetryEqptStorageFirmware) {
	o.EqptStorageFirmware.Set(&v)
}

// SetEqptStorageFirmwareNil sets the value for EqptStorageFirmware to be an explicit nil
func (o *NiatelemetryApicPerformanceData) SetEqptStorageFirmwareNil() {
	o.EqptStorageFirmware.Set(nil)
}

// UnsetEqptStorageFirmware ensures that no value is present for EqptStorageFirmware, not even an explicit nil
func (o *NiatelemetryApicPerformanceData) UnsetEqptStorageFirmware() {
	o.EqptStorageFirmware.Unset()
}

// GetEqptcapacityPolUsage5min returns the EqptcapacityPolUsage5min field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NiatelemetryApicPerformanceData) GetEqptcapacityPolUsage5min() NiatelemetryEqptcapacityPolUsage5min {
	if o == nil || IsNil(o.EqptcapacityPolUsage5min.Get()) {
		var ret NiatelemetryEqptcapacityPolUsage5min
		return ret
	}
	return *o.EqptcapacityPolUsage5min.Get()
}

// GetEqptcapacityPolUsage5minOk returns a tuple with the EqptcapacityPolUsage5min field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NiatelemetryApicPerformanceData) GetEqptcapacityPolUsage5minOk() (*NiatelemetryEqptcapacityPolUsage5min, bool) {
	if o == nil {
		return nil, false
	}
	return o.EqptcapacityPolUsage5min.Get(), o.EqptcapacityPolUsage5min.IsSet()
}

// HasEqptcapacityPolUsage5min returns a boolean if a field has been set.
func (o *NiatelemetryApicPerformanceData) HasEqptcapacityPolUsage5min() bool {
	if o != nil && o.EqptcapacityPolUsage5min.IsSet() {
		return true
	}

	return false
}

// SetEqptcapacityPolUsage5min gets a reference to the given NullableNiatelemetryEqptcapacityPolUsage5min and assigns it to the EqptcapacityPolUsage5min field.
func (o *NiatelemetryApicPerformanceData) SetEqptcapacityPolUsage5min(v NiatelemetryEqptcapacityPolUsage5min) {
	o.EqptcapacityPolUsage5min.Set(&v)
}

// SetEqptcapacityPolUsage5minNil sets the value for EqptcapacityPolUsage5min to be an explicit nil
func (o *NiatelemetryApicPerformanceData) SetEqptcapacityPolUsage5minNil() {
	o.EqptcapacityPolUsage5min.Set(nil)
}

// UnsetEqptcapacityPolUsage5min ensures that no value is present for EqptcapacityPolUsage5min, not even an explicit nil
func (o *NiatelemetryApicPerformanceData) UnsetEqptcapacityPolUsage5min() {
	o.EqptcapacityPolUsage5min.Unset()
}

// GetEqptcapacityPrefixEntries15min returns the EqptcapacityPrefixEntries15min field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NiatelemetryApicPerformanceData) GetEqptcapacityPrefixEntries15min() NiatelemetryEqptcapacityPrefixEntries15min {
	if o == nil || IsNil(o.EqptcapacityPrefixEntries15min.Get()) {
		var ret NiatelemetryEqptcapacityPrefixEntries15min
		return ret
	}
	return *o.EqptcapacityPrefixEntries15min.Get()
}

// GetEqptcapacityPrefixEntries15minOk returns a tuple with the EqptcapacityPrefixEntries15min field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NiatelemetryApicPerformanceData) GetEqptcapacityPrefixEntries15minOk() (*NiatelemetryEqptcapacityPrefixEntries15min, bool) {
	if o == nil {
		return nil, false
	}
	return o.EqptcapacityPrefixEntries15min.Get(), o.EqptcapacityPrefixEntries15min.IsSet()
}

// HasEqptcapacityPrefixEntries15min returns a boolean if a field has been set.
func (o *NiatelemetryApicPerformanceData) HasEqptcapacityPrefixEntries15min() bool {
	if o != nil && o.EqptcapacityPrefixEntries15min.IsSet() {
		return true
	}

	return false
}

// SetEqptcapacityPrefixEntries15min gets a reference to the given NullableNiatelemetryEqptcapacityPrefixEntries15min and assigns it to the EqptcapacityPrefixEntries15min field.
func (o *NiatelemetryApicPerformanceData) SetEqptcapacityPrefixEntries15min(v NiatelemetryEqptcapacityPrefixEntries15min) {
	o.EqptcapacityPrefixEntries15min.Set(&v)
}

// SetEqptcapacityPrefixEntries15minNil sets the value for EqptcapacityPrefixEntries15min to be an explicit nil
func (o *NiatelemetryApicPerformanceData) SetEqptcapacityPrefixEntries15minNil() {
	o.EqptcapacityPrefixEntries15min.Set(nil)
}

// UnsetEqptcapacityPrefixEntries15min ensures that no value is present for EqptcapacityPrefixEntries15min, not even an explicit nil
func (o *NiatelemetryApicPerformanceData) UnsetEqptcapacityPrefixEntries15min() {
	o.EqptcapacityPrefixEntries15min.Unset()
}

// GetEqptcapacityPrefixEntries5min returns the EqptcapacityPrefixEntries5min field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NiatelemetryApicPerformanceData) GetEqptcapacityPrefixEntries5min() NiatelemetryEqptcapacityPrefixEntries5min {
	if o == nil || IsNil(o.EqptcapacityPrefixEntries5min.Get()) {
		var ret NiatelemetryEqptcapacityPrefixEntries5min
		return ret
	}
	return *o.EqptcapacityPrefixEntries5min.Get()
}

// GetEqptcapacityPrefixEntries5minOk returns a tuple with the EqptcapacityPrefixEntries5min field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NiatelemetryApicPerformanceData) GetEqptcapacityPrefixEntries5minOk() (*NiatelemetryEqptcapacityPrefixEntries5min, bool) {
	if o == nil {
		return nil, false
	}
	return o.EqptcapacityPrefixEntries5min.Get(), o.EqptcapacityPrefixEntries5min.IsSet()
}

// HasEqptcapacityPrefixEntries5min returns a boolean if a field has been set.
func (o *NiatelemetryApicPerformanceData) HasEqptcapacityPrefixEntries5min() bool {
	if o != nil && o.EqptcapacityPrefixEntries5min.IsSet() {
		return true
	}

	return false
}

// SetEqptcapacityPrefixEntries5min gets a reference to the given NullableNiatelemetryEqptcapacityPrefixEntries5min and assigns it to the EqptcapacityPrefixEntries5min field.
func (o *NiatelemetryApicPerformanceData) SetEqptcapacityPrefixEntries5min(v NiatelemetryEqptcapacityPrefixEntries5min) {
	o.EqptcapacityPrefixEntries5min.Set(&v)
}

// SetEqptcapacityPrefixEntries5minNil sets the value for EqptcapacityPrefixEntries5min to be an explicit nil
func (o *NiatelemetryApicPerformanceData) SetEqptcapacityPrefixEntries5minNil() {
	o.EqptcapacityPrefixEntries5min.Set(nil)
}

// UnsetEqptcapacityPrefixEntries5min ensures that no value is present for EqptcapacityPrefixEntries5min, not even an explicit nil
func (o *NiatelemetryApicPerformanceData) UnsetEqptcapacityPrefixEntries5min() {
	o.EqptcapacityPrefixEntries5min.Unset()
}

// GetNodeHealth returns the NodeHealth field value if set, zero value otherwise.
func (o *NiatelemetryApicPerformanceData) GetNodeHealth() int64 {
	if o == nil || IsNil(o.NodeHealth) {
		var ret int64
		return ret
	}
	return *o.NodeHealth
}

// GetNodeHealthOk returns a tuple with the NodeHealth field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NiatelemetryApicPerformanceData) GetNodeHealthOk() (*int64, bool) {
	if o == nil || IsNil(o.NodeHealth) {
		return nil, false
	}
	return o.NodeHealth, true
}

// HasNodeHealth returns a boolean if a field has been set.
func (o *NiatelemetryApicPerformanceData) HasNodeHealth() bool {
	if o != nil && !IsNil(o.NodeHealth) {
		return true
	}

	return false
}

// SetNodeHealth gets a reference to the given int64 and assigns it to the NodeHealth field.
func (o *NiatelemetryApicPerformanceData) SetNodeHealth(v int64) {
	o.NodeHealth = &v
}

// GetProcSysCpu15min returns the ProcSysCpu15min field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NiatelemetryApicPerformanceData) GetProcSysCpu15min() NiatelemetryProcSysCpu15min {
	if o == nil || IsNil(o.ProcSysCpu15min.Get()) {
		var ret NiatelemetryProcSysCpu15min
		return ret
	}
	return *o.ProcSysCpu15min.Get()
}

// GetProcSysCpu15minOk returns a tuple with the ProcSysCpu15min field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NiatelemetryApicPerformanceData) GetProcSysCpu15minOk() (*NiatelemetryProcSysCpu15min, bool) {
	if o == nil {
		return nil, false
	}
	return o.ProcSysCpu15min.Get(), o.ProcSysCpu15min.IsSet()
}

// HasProcSysCpu15min returns a boolean if a field has been set.
func (o *NiatelemetryApicPerformanceData) HasProcSysCpu15min() bool {
	if o != nil && o.ProcSysCpu15min.IsSet() {
		return true
	}

	return false
}

// SetProcSysCpu15min gets a reference to the given NullableNiatelemetryProcSysCpu15min and assigns it to the ProcSysCpu15min field.
func (o *NiatelemetryApicPerformanceData) SetProcSysCpu15min(v NiatelemetryProcSysCpu15min) {
	o.ProcSysCpu15min.Set(&v)
}

// SetProcSysCpu15minNil sets the value for ProcSysCpu15min to be an explicit nil
func (o *NiatelemetryApicPerformanceData) SetProcSysCpu15minNil() {
	o.ProcSysCpu15min.Set(nil)
}

// UnsetProcSysCpu15min ensures that no value is present for ProcSysCpu15min, not even an explicit nil
func (o *NiatelemetryApicPerformanceData) UnsetProcSysCpu15min() {
	o.ProcSysCpu15min.Unset()
}

// GetProcSysCpu5min returns the ProcSysCpu5min field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NiatelemetryApicPerformanceData) GetProcSysCpu5min() NiatelemetryProcSysCpu5min {
	if o == nil || IsNil(o.ProcSysCpu5min.Get()) {
		var ret NiatelemetryProcSysCpu5min
		return ret
	}
	return *o.ProcSysCpu5min.Get()
}

// GetProcSysCpu5minOk returns a tuple with the ProcSysCpu5min field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NiatelemetryApicPerformanceData) GetProcSysCpu5minOk() (*NiatelemetryProcSysCpu5min, bool) {
	if o == nil {
		return nil, false
	}
	return o.ProcSysCpu5min.Get(), o.ProcSysCpu5min.IsSet()
}

// HasProcSysCpu5min returns a boolean if a field has been set.
func (o *NiatelemetryApicPerformanceData) HasProcSysCpu5min() bool {
	if o != nil && o.ProcSysCpu5min.IsSet() {
		return true
	}

	return false
}

// SetProcSysCpu5min gets a reference to the given NullableNiatelemetryProcSysCpu5min and assigns it to the ProcSysCpu5min field.
func (o *NiatelemetryApicPerformanceData) SetProcSysCpu5min(v NiatelemetryProcSysCpu5min) {
	o.ProcSysCpu5min.Set(&v)
}

// SetProcSysCpu5minNil sets the value for ProcSysCpu5min to be an explicit nil
func (o *NiatelemetryApicPerformanceData) SetProcSysCpu5minNil() {
	o.ProcSysCpu5min.Set(nil)
}

// UnsetProcSysCpu5min ensures that no value is present for ProcSysCpu5min, not even an explicit nil
func (o *NiatelemetryApicPerformanceData) UnsetProcSysCpu5min() {
	o.ProcSysCpu5min.Unset()
}

// GetProcSysMem15min returns the ProcSysMem15min field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NiatelemetryApicPerformanceData) GetProcSysMem15min() NiatelemetryProcSysMem15min {
	if o == nil || IsNil(o.ProcSysMem15min.Get()) {
		var ret NiatelemetryProcSysMem15min
		return ret
	}
	return *o.ProcSysMem15min.Get()
}

// GetProcSysMem15minOk returns a tuple with the ProcSysMem15min field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NiatelemetryApicPerformanceData) GetProcSysMem15minOk() (*NiatelemetryProcSysMem15min, bool) {
	if o == nil {
		return nil, false
	}
	return o.ProcSysMem15min.Get(), o.ProcSysMem15min.IsSet()
}

// HasProcSysMem15min returns a boolean if a field has been set.
func (o *NiatelemetryApicPerformanceData) HasProcSysMem15min() bool {
	if o != nil && o.ProcSysMem15min.IsSet() {
		return true
	}

	return false
}

// SetProcSysMem15min gets a reference to the given NullableNiatelemetryProcSysMem15min and assigns it to the ProcSysMem15min field.
func (o *NiatelemetryApicPerformanceData) SetProcSysMem15min(v NiatelemetryProcSysMem15min) {
	o.ProcSysMem15min.Set(&v)
}

// SetProcSysMem15minNil sets the value for ProcSysMem15min to be an explicit nil
func (o *NiatelemetryApicPerformanceData) SetProcSysMem15minNil() {
	o.ProcSysMem15min.Set(nil)
}

// UnsetProcSysMem15min ensures that no value is present for ProcSysMem15min, not even an explicit nil
func (o *NiatelemetryApicPerformanceData) UnsetProcSysMem15min() {
	o.ProcSysMem15min.Unset()
}

// GetProcSysMem5min returns the ProcSysMem5min field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NiatelemetryApicPerformanceData) GetProcSysMem5min() NiatelemetryProcSysMem5min {
	if o == nil || IsNil(o.ProcSysMem5min.Get()) {
		var ret NiatelemetryProcSysMem5min
		return ret
	}
	return *o.ProcSysMem5min.Get()
}

// GetProcSysMem5minOk returns a tuple with the ProcSysMem5min field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NiatelemetryApicPerformanceData) GetProcSysMem5minOk() (*NiatelemetryProcSysMem5min, bool) {
	if o == nil {
		return nil, false
	}
	return o.ProcSysMem5min.Get(), o.ProcSysMem5min.IsSet()
}

// HasProcSysMem5min returns a boolean if a field has been set.
func (o *NiatelemetryApicPerformanceData) HasProcSysMem5min() bool {
	if o != nil && o.ProcSysMem5min.IsSet() {
		return true
	}

	return false
}

// SetProcSysMem5min gets a reference to the given NullableNiatelemetryProcSysMem5min and assigns it to the ProcSysMem5min field.
func (o *NiatelemetryApicPerformanceData) SetProcSysMem5min(v NiatelemetryProcSysMem5min) {
	o.ProcSysMem5min.Set(&v)
}

// SetProcSysMem5minNil sets the value for ProcSysMem5min to be an explicit nil
func (o *NiatelemetryApicPerformanceData) SetProcSysMem5minNil() {
	o.ProcSysMem5min.Set(nil)
}

// UnsetProcSysMem5min ensures that no value is present for ProcSysMem5min, not even an explicit nil
func (o *NiatelemetryApicPerformanceData) UnsetProcSysMem5min() {
	o.ProcSysMem5min.Unset()
}

// GetRecordType returns the RecordType field value if set, zero value otherwise.
func (o *NiatelemetryApicPerformanceData) GetRecordType() string {
	if o == nil || IsNil(o.RecordType) {
		var ret string
		return ret
	}
	return *o.RecordType
}

// GetRecordTypeOk returns a tuple with the RecordType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NiatelemetryApicPerformanceData) GetRecordTypeOk() (*string, bool) {
	if o == nil || IsNil(o.RecordType) {
		return nil, false
	}
	return o.RecordType, true
}

// HasRecordType returns a boolean if a field has been set.
func (o *NiatelemetryApicPerformanceData) HasRecordType() bool {
	if o != nil && !IsNil(o.RecordType) {
		return true
	}

	return false
}

// SetRecordType gets a reference to the given string and assigns it to the RecordType field.
func (o *NiatelemetryApicPerformanceData) SetRecordType(v string) {
	o.RecordType = &v
}

// GetRecordVersion returns the RecordVersion field value if set, zero value otherwise.
func (o *NiatelemetryApicPerformanceData) GetRecordVersion() string {
	if o == nil || IsNil(o.RecordVersion) {
		var ret string
		return ret
	}
	return *o.RecordVersion
}

// GetRecordVersionOk returns a tuple with the RecordVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NiatelemetryApicPerformanceData) GetRecordVersionOk() (*string, bool) {
	if o == nil || IsNil(o.RecordVersion) {
		return nil, false
	}
	return o.RecordVersion, true
}

// HasRecordVersion returns a boolean if a field has been set.
func (o *NiatelemetryApicPerformanceData) HasRecordVersion() bool {
	if o != nil && !IsNil(o.RecordVersion) {
		return true
	}

	return false
}

// SetRecordVersion gets a reference to the given string and assigns it to the RecordVersion field.
func (o *NiatelemetryApicPerformanceData) SetRecordVersion(v string) {
	o.RecordVersion = &v
}

// GetSiteName returns the SiteName field value if set, zero value otherwise.
func (o *NiatelemetryApicPerformanceData) GetSiteName() string {
	if o == nil || IsNil(o.SiteName) {
		var ret string
		return ret
	}
	return *o.SiteName
}

// GetSiteNameOk returns a tuple with the SiteName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NiatelemetryApicPerformanceData) GetSiteNameOk() (*string, bool) {
	if o == nil || IsNil(o.SiteName) {
		return nil, false
	}
	return o.SiteName, true
}

// HasSiteName returns a boolean if a field has been set.
func (o *NiatelemetryApicPerformanceData) HasSiteName() bool {
	if o != nil && !IsNil(o.SiteName) {
		return true
	}

	return false
}

// SetSiteName gets a reference to the given string and assigns it to the SiteName field.
func (o *NiatelemetryApicPerformanceData) SetSiteName(v string) {
	o.SiteName = &v
}

// GetSwitchDiskUtilization returns the SwitchDiskUtilization field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NiatelemetryApicPerformanceData) GetSwitchDiskUtilization() []NiatelemetrySwitchDiskUtilization {
	if o == nil {
		var ret []NiatelemetrySwitchDiskUtilization
		return ret
	}
	return o.SwitchDiskUtilization
}

// GetSwitchDiskUtilizationOk returns a tuple with the SwitchDiskUtilization field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NiatelemetryApicPerformanceData) GetSwitchDiskUtilizationOk() ([]NiatelemetrySwitchDiskUtilization, bool) {
	if o == nil || IsNil(o.SwitchDiskUtilization) {
		return nil, false
	}
	return o.SwitchDiskUtilization, true
}

// HasSwitchDiskUtilization returns a boolean if a field has been set.
func (o *NiatelemetryApicPerformanceData) HasSwitchDiskUtilization() bool {
	if o != nil && !IsNil(o.SwitchDiskUtilization) {
		return true
	}

	return false
}

// SetSwitchDiskUtilization gets a reference to the given []NiatelemetrySwitchDiskUtilization and assigns it to the SwitchDiskUtilization field.
func (o *NiatelemetryApicPerformanceData) SetSwitchDiskUtilization(v []NiatelemetrySwitchDiskUtilization) {
	o.SwitchDiskUtilization = v
}

// GetRegisteredDevice returns the RegisteredDevice field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NiatelemetryApicPerformanceData) GetRegisteredDevice() AssetDeviceRegistrationRelationship {
	if o == nil || IsNil(o.RegisteredDevice.Get()) {
		var ret AssetDeviceRegistrationRelationship
		return ret
	}
	return *o.RegisteredDevice.Get()
}

// GetRegisteredDeviceOk returns a tuple with the RegisteredDevice field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NiatelemetryApicPerformanceData) GetRegisteredDeviceOk() (*AssetDeviceRegistrationRelationship, bool) {
	if o == nil {
		return nil, false
	}
	return o.RegisteredDevice.Get(), o.RegisteredDevice.IsSet()
}

// HasRegisteredDevice returns a boolean if a field has been set.
func (o *NiatelemetryApicPerformanceData) HasRegisteredDevice() bool {
	if o != nil && o.RegisteredDevice.IsSet() {
		return true
	}

	return false
}

// SetRegisteredDevice gets a reference to the given NullableAssetDeviceRegistrationRelationship and assigns it to the RegisteredDevice field.
func (o *NiatelemetryApicPerformanceData) SetRegisteredDevice(v AssetDeviceRegistrationRelationship) {
	o.RegisteredDevice.Set(&v)
}

// SetRegisteredDeviceNil sets the value for RegisteredDevice to be an explicit nil
func (o *NiatelemetryApicPerformanceData) SetRegisteredDeviceNil() {
	o.RegisteredDevice.Set(nil)
}

// UnsetRegisteredDevice ensures that no value is present for RegisteredDevice, not even an explicit nil
func (o *NiatelemetryApicPerformanceData) UnsetRegisteredDevice() {
	o.RegisteredDevice.Unset()
}

func (o NiatelemetryApicPerformanceData) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NiatelemetryApicPerformanceData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	serializedMoBaseMo, errMoBaseMo := json.Marshal(o.MoBaseMo)
	if errMoBaseMo != nil {
		return map[string]interface{}{}, errMoBaseMo
	}
	errMoBaseMo = json.Unmarshal([]byte(serializedMoBaseMo), &toSerialize)
	if errMoBaseMo != nil {
		return map[string]interface{}{}, errMoBaseMo
	}
	if _, exists := toSerialize["ClassId"]; !exists {
		toSerialize["ClassId"] = o.GetDefaultClassId()
	}
	toSerialize["ClassId"] = o.ClassId
	if _, exists := toSerialize["ObjectType"]; !exists {
		toSerialize["ObjectType"] = o.GetDefaultObjectType()
	}
	toSerialize["ObjectType"] = o.ObjectType
	if o.DigitalOpticalMonitoring != nil {
		toSerialize["DigitalOpticalMonitoring"] = o.DigitalOpticalMonitoring
	}
	if !IsNil(o.Dn) {
		toSerialize["Dn"] = o.Dn
	}
	if o.EqptStorageFirmware.IsSet() {
		toSerialize["EqptStorageFirmware"] = o.EqptStorageFirmware.Get()
	}
	if o.EqptcapacityPolUsage5min.IsSet() {
		toSerialize["EqptcapacityPolUsage5min"] = o.EqptcapacityPolUsage5min.Get()
	}
	if o.EqptcapacityPrefixEntries15min.IsSet() {
		toSerialize["EqptcapacityPrefixEntries15min"] = o.EqptcapacityPrefixEntries15min.Get()
	}
	if o.EqptcapacityPrefixEntries5min.IsSet() {
		toSerialize["EqptcapacityPrefixEntries5min"] = o.EqptcapacityPrefixEntries5min.Get()
	}
	if !IsNil(o.NodeHealth) {
		toSerialize["NodeHealth"] = o.NodeHealth
	}
	if o.ProcSysCpu15min.IsSet() {
		toSerialize["ProcSysCpu15min"] = o.ProcSysCpu15min.Get()
	}
	if o.ProcSysCpu5min.IsSet() {
		toSerialize["ProcSysCpu5min"] = o.ProcSysCpu5min.Get()
	}
	if o.ProcSysMem15min.IsSet() {
		toSerialize["ProcSysMem15min"] = o.ProcSysMem15min.Get()
	}
	if o.ProcSysMem5min.IsSet() {
		toSerialize["ProcSysMem5min"] = o.ProcSysMem5min.Get()
	}
	if !IsNil(o.RecordType) {
		toSerialize["RecordType"] = o.RecordType
	}
	if !IsNil(o.RecordVersion) {
		toSerialize["RecordVersion"] = o.RecordVersion
	}
	if !IsNil(o.SiteName) {
		toSerialize["SiteName"] = o.SiteName
	}
	if o.SwitchDiskUtilization != nil {
		toSerialize["SwitchDiskUtilization"] = o.SwitchDiskUtilization
	}
	if o.RegisteredDevice.IsSet() {
		toSerialize["RegisteredDevice"] = o.RegisteredDevice.Get()
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *NiatelemetryApicPerformanceData) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"ClassId",
		"ObjectType",
	}

	// defaultValueFuncMap captures the default values for required properties.
	// These values are used when required properties are missing from the payload.
	defaultValueFuncMap := map[string]func() interface{}{
		"ClassId":    o.GetDefaultClassId,
		"ObjectType": o.GetDefaultObjectType,
	}
	var defaultValueApplied bool
	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			if _, ok := defaultValueFuncMap[requiredProperty]; ok {
				allProperties[requiredProperty] = defaultValueFuncMap[requiredProperty]()
				defaultValueApplied = true
			}
		}
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	if defaultValueApplied {
		data, err = json.Marshal(allProperties)
		if err != nil {
			return err
		}
	}
	type NiatelemetryApicPerformanceDataWithoutEmbeddedStruct struct {
		// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.
		ClassId string `json:"ClassId"`
		// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
		ObjectType               string                                 `json:"ObjectType"`
		DigitalOpticalMonitoring []NiatelemetryDigitalOpticalMonitoring `json:"DigitalOpticalMonitoring,omitempty"`
		// Dn of the fabric nodes in the apic.
		Dn                             *string                                            `json:"Dn,omitempty"`
		EqptStorageFirmware            NullableNiatelemetryEqptStorageFirmware            `json:"EqptStorageFirmware,omitempty"`
		EqptcapacityPolUsage5min       NullableNiatelemetryEqptcapacityPolUsage5min       `json:"EqptcapacityPolUsage5min,omitempty"`
		EqptcapacityPrefixEntries15min NullableNiatelemetryEqptcapacityPrefixEntries15min `json:"EqptcapacityPrefixEntries15min,omitempty"`
		EqptcapacityPrefixEntries5min  NullableNiatelemetryEqptcapacityPrefixEntries5min  `json:"EqptcapacityPrefixEntries5min,omitempty"`
		// Health of the fabric nodes in the apic.
		NodeHealth      *int64                              `json:"NodeHealth,omitempty"`
		ProcSysCpu15min NullableNiatelemetryProcSysCpu15min `json:"ProcSysCpu15min,omitempty"`
		ProcSysCpu5min  NullableNiatelemetryProcSysCpu5min  `json:"ProcSysCpu5min,omitempty"`
		ProcSysMem15min NullableNiatelemetryProcSysMem15min `json:"ProcSysMem15min,omitempty"`
		ProcSysMem5min  NullableNiatelemetryProcSysMem5min  `json:"ProcSysMem5min,omitempty"`
		// Type of record DCNM / APIC / SE. This determines the type of platform where inventory was collected.
		RecordType *string `json:"RecordType,omitempty"`
		// Version of record being pushed. This determines what was the API version for data available from the device.
		RecordVersion *string `json:"RecordVersion,omitempty"`
		// Name of the APIC site from which this data is being collected..
		SiteName              *string                                     `json:"SiteName,omitempty"`
		SwitchDiskUtilization []NiatelemetrySwitchDiskUtilization         `json:"SwitchDiskUtilization,omitempty"`
		RegisteredDevice      NullableAssetDeviceRegistrationRelationship `json:"RegisteredDevice,omitempty"`
	}

	varNiatelemetryApicPerformanceDataWithoutEmbeddedStruct := NiatelemetryApicPerformanceDataWithoutEmbeddedStruct{}

	err = json.Unmarshal(data, &varNiatelemetryApicPerformanceDataWithoutEmbeddedStruct)
	if err == nil {
		varNiatelemetryApicPerformanceData := _NiatelemetryApicPerformanceData{}
		varNiatelemetryApicPerformanceData.ClassId = varNiatelemetryApicPerformanceDataWithoutEmbeddedStruct.ClassId
		varNiatelemetryApicPerformanceData.ObjectType = varNiatelemetryApicPerformanceDataWithoutEmbeddedStruct.ObjectType
		varNiatelemetryApicPerformanceData.DigitalOpticalMonitoring = varNiatelemetryApicPerformanceDataWithoutEmbeddedStruct.DigitalOpticalMonitoring
		varNiatelemetryApicPerformanceData.Dn = varNiatelemetryApicPerformanceDataWithoutEmbeddedStruct.Dn
		varNiatelemetryApicPerformanceData.EqptStorageFirmware = varNiatelemetryApicPerformanceDataWithoutEmbeddedStruct.EqptStorageFirmware
		varNiatelemetryApicPerformanceData.EqptcapacityPolUsage5min = varNiatelemetryApicPerformanceDataWithoutEmbeddedStruct.EqptcapacityPolUsage5min
		varNiatelemetryApicPerformanceData.EqptcapacityPrefixEntries15min = varNiatelemetryApicPerformanceDataWithoutEmbeddedStruct.EqptcapacityPrefixEntries15min
		varNiatelemetryApicPerformanceData.EqptcapacityPrefixEntries5min = varNiatelemetryApicPerformanceDataWithoutEmbeddedStruct.EqptcapacityPrefixEntries5min
		varNiatelemetryApicPerformanceData.NodeHealth = varNiatelemetryApicPerformanceDataWithoutEmbeddedStruct.NodeHealth
		varNiatelemetryApicPerformanceData.ProcSysCpu15min = varNiatelemetryApicPerformanceDataWithoutEmbeddedStruct.ProcSysCpu15min
		varNiatelemetryApicPerformanceData.ProcSysCpu5min = varNiatelemetryApicPerformanceDataWithoutEmbeddedStruct.ProcSysCpu5min
		varNiatelemetryApicPerformanceData.ProcSysMem15min = varNiatelemetryApicPerformanceDataWithoutEmbeddedStruct.ProcSysMem15min
		varNiatelemetryApicPerformanceData.ProcSysMem5min = varNiatelemetryApicPerformanceDataWithoutEmbeddedStruct.ProcSysMem5min
		varNiatelemetryApicPerformanceData.RecordType = varNiatelemetryApicPerformanceDataWithoutEmbeddedStruct.RecordType
		varNiatelemetryApicPerformanceData.RecordVersion = varNiatelemetryApicPerformanceDataWithoutEmbeddedStruct.RecordVersion
		varNiatelemetryApicPerformanceData.SiteName = varNiatelemetryApicPerformanceDataWithoutEmbeddedStruct.SiteName
		varNiatelemetryApicPerformanceData.SwitchDiskUtilization = varNiatelemetryApicPerformanceDataWithoutEmbeddedStruct.SwitchDiskUtilization
		varNiatelemetryApicPerformanceData.RegisteredDevice = varNiatelemetryApicPerformanceDataWithoutEmbeddedStruct.RegisteredDevice
		*o = NiatelemetryApicPerformanceData(varNiatelemetryApicPerformanceData)
	} else {
		return err
	}

	varNiatelemetryApicPerformanceData := _NiatelemetryApicPerformanceData{}

	err = json.Unmarshal(data, &varNiatelemetryApicPerformanceData)
	if err == nil {
		o.MoBaseMo = varNiatelemetryApicPerformanceData.MoBaseMo
	} else {
		return err
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "ClassId")
		delete(additionalProperties, "ObjectType")
		delete(additionalProperties, "DigitalOpticalMonitoring")
		delete(additionalProperties, "Dn")
		delete(additionalProperties, "EqptStorageFirmware")
		delete(additionalProperties, "EqptcapacityPolUsage5min")
		delete(additionalProperties, "EqptcapacityPrefixEntries15min")
		delete(additionalProperties, "EqptcapacityPrefixEntries5min")
		delete(additionalProperties, "NodeHealth")
		delete(additionalProperties, "ProcSysCpu15min")
		delete(additionalProperties, "ProcSysCpu5min")
		delete(additionalProperties, "ProcSysMem15min")
		delete(additionalProperties, "ProcSysMem5min")
		delete(additionalProperties, "RecordType")
		delete(additionalProperties, "RecordVersion")
		delete(additionalProperties, "SiteName")
		delete(additionalProperties, "SwitchDiskUtilization")
		delete(additionalProperties, "RegisteredDevice")

		// remove fields from embedded structs
		reflectMoBaseMo := reflect.ValueOf(o.MoBaseMo)
		for i := 0; i < reflectMoBaseMo.Type().NumField(); i++ {
			t := reflectMoBaseMo.Type().Field(i)

			if jsonTag := t.Tag.Get("json"); jsonTag != "" {
				fieldName := ""
				if commaIdx := strings.Index(jsonTag, ","); commaIdx > 0 {
					fieldName = jsonTag[:commaIdx]
				} else {
					fieldName = jsonTag
				}
				if fieldName != "AdditionalProperties" {
					delete(additionalProperties, fieldName)
				}
			}
		}

		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableNiatelemetryApicPerformanceData struct {
	value *NiatelemetryApicPerformanceData
	isSet bool
}

func (v NullableNiatelemetryApicPerformanceData) Get() *NiatelemetryApicPerformanceData {
	return v.value
}

func (v *NullableNiatelemetryApicPerformanceData) Set(val *NiatelemetryApicPerformanceData) {
	v.value = val
	v.isSet = true
}

func (v NullableNiatelemetryApicPerformanceData) IsSet() bool {
	return v.isSet
}

func (v *NullableNiatelemetryApicPerformanceData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNiatelemetryApicPerformanceData(val *NiatelemetryApicPerformanceData) *NullableNiatelemetryApicPerformanceData {
	return &NullableNiatelemetryApicPerformanceData{value: val, isSet: true}
}

func (v NullableNiatelemetryApicPerformanceData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNiatelemetryApicPerformanceData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
