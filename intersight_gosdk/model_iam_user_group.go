/*
Cisco Intersight

Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations. The Intersight OpenAPI document defines the complete set of properties that are returned in the HTTP response. From that perspective, a client can expect that no additional properties are returned, unless these properties are explicitly defined in the OpenAPI document. However, when a client uses an older version of the Intersight OpenAPI document, the server may send additional properties because the software is more recent than the client. In that case, the client may receive properties that it does not know about. Some generated SDKs perform a strict validation of the HTTP response body against the OpenAPI document.

API version: 1.0.11-2025091920
Contact: intersight@cisco.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package intersight

import (
	"encoding/json"
	"fmt"
	"reflect"
	"strings"
	"time"
)

// checks if the IamUserGroup type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &IamUserGroup{}

// IamUserGroup User Group provides a way to assign permissions to a group of users based on the IdP attributes received after authentication.
type IamUserGroup struct {
	MoBaseMo
	// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.
	ClassId string `json:"ClassId"`
	// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
	ObjectType string `json:"ObjectType"`
	// AccessActivationTime indicates the activation time for the guest user's access to the Account.  Before this time, if guest user tries to login to the account, access the account will be denied.
	AccessActivationTime *time.Time `json:"AccessActivationTime,omitempty"`
	// AccessExpiryTime indicates the expiration time for the guest user's access to the Account. Its value can only be  assigned a date that falls within the range determined by the maximum expiration time configured for the  API entries. The AccessExpiry date can be edited to be earlier or later.
	AccessExpiryTime *time.Time `json:"AccessExpiryTime,omitempty"`
	// AccessLink using which the guest user uses to log in to Intersight.
	AccessLink *string `json:"AccessLink,omitempty"`
	// Group type determines the type of groups that is being associated with users. By default, Default User group will be used for associating dynamic user login. If the value of the User Group is set to guest, then this type of user group will be used for guest user login. * `Default` - Default User Group Type used for dynamic users login. * `Guest` - Guest User Group type used for guest users login.
	GroupType *string `json:"GroupType,omitempty"`
	// Instruction property holds detailed guidance and information intended for individuals  accessing the system as guest users. It holds the information to assist guests in navigating the platform,  understanding policies, and performing necessary actions to ensure a seamless and secure user experience.
	Instruction *string `json:"Instruction,omitempty"`
	// The name of the user group which the dynamic/or guest user belongs to.
	Name *string `json:"Name,omitempty"`
	// A random mixed character string which is unique per user groups. UniqueReferenceId is used as key for identifying the guest user groups.
	UniqueReferenceId *string                             `json:"UniqueReferenceId,omitempty"`
	Idp               NullableIamIdpRelationship          `json:"Idp,omitempty"`
	Idpreference      NullableIamIdpReferenceRelationship `json:"Idpreference,omitempty"`
	// An array of relationships to iamPermission resources.
	Permissions []IamPermissionRelationship              `json:"Permissions,omitempty"`
	Qualifier   NullableIamAbstractQualifierRelationship `json:"Qualifier,omitempty"`
	// An array of relationships to iamUser resources.
	Users                []IamUserRelationship `json:"Users,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _IamUserGroup IamUserGroup

// NewIamUserGroup instantiates a new IamUserGroup object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIamUserGroup(classId string, objectType string) *IamUserGroup {
	this := IamUserGroup{}
	this.ClassId = classId
	this.ObjectType = objectType
	var groupType string = "Default"
	this.GroupType = &groupType
	return &this
}

// NewIamUserGroupWithDefaults instantiates a new IamUserGroup object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIamUserGroupWithDefaults() *IamUserGroup {
	this := IamUserGroup{}
	var classId string = "iam.UserGroup"
	this.ClassId = classId
	var objectType string = "iam.UserGroup"
	this.ObjectType = objectType
	var groupType string = "Default"
	this.GroupType = &groupType
	return &this
}

// GetClassId returns the ClassId field value
func (o *IamUserGroup) GetClassId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ClassId
}

// GetClassIdOk returns a tuple with the ClassId field value
// and a boolean to check if the value has been set.
func (o *IamUserGroup) GetClassIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ClassId, true
}

// SetClassId sets field value
func (o *IamUserGroup) SetClassId(v string) {
	o.ClassId = v
}

// GetDefaultClassId returns the default value "iam.UserGroup" of the ClassId field.
func (o *IamUserGroup) GetDefaultClassId() interface{} {
	return "iam.UserGroup"
}

// GetObjectType returns the ObjectType field value
func (o *IamUserGroup) GetObjectType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ObjectType
}

// GetObjectTypeOk returns a tuple with the ObjectType field value
// and a boolean to check if the value has been set.
func (o *IamUserGroup) GetObjectTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ObjectType, true
}

// SetObjectType sets field value
func (o *IamUserGroup) SetObjectType(v string) {
	o.ObjectType = v
}

// GetDefaultObjectType returns the default value "iam.UserGroup" of the ObjectType field.
func (o *IamUserGroup) GetDefaultObjectType() interface{} {
	return "iam.UserGroup"
}

// GetAccessActivationTime returns the AccessActivationTime field value if set, zero value otherwise.
func (o *IamUserGroup) GetAccessActivationTime() time.Time {
	if o == nil || IsNil(o.AccessActivationTime) {
		var ret time.Time
		return ret
	}
	return *o.AccessActivationTime
}

// GetAccessActivationTimeOk returns a tuple with the AccessActivationTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IamUserGroup) GetAccessActivationTimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.AccessActivationTime) {
		return nil, false
	}
	return o.AccessActivationTime, true
}

// HasAccessActivationTime returns a boolean if a field has been set.
func (o *IamUserGroup) HasAccessActivationTime() bool {
	if o != nil && !IsNil(o.AccessActivationTime) {
		return true
	}

	return false
}

// SetAccessActivationTime gets a reference to the given time.Time and assigns it to the AccessActivationTime field.
func (o *IamUserGroup) SetAccessActivationTime(v time.Time) {
	o.AccessActivationTime = &v
}

// GetAccessExpiryTime returns the AccessExpiryTime field value if set, zero value otherwise.
func (o *IamUserGroup) GetAccessExpiryTime() time.Time {
	if o == nil || IsNil(o.AccessExpiryTime) {
		var ret time.Time
		return ret
	}
	return *o.AccessExpiryTime
}

// GetAccessExpiryTimeOk returns a tuple with the AccessExpiryTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IamUserGroup) GetAccessExpiryTimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.AccessExpiryTime) {
		return nil, false
	}
	return o.AccessExpiryTime, true
}

// HasAccessExpiryTime returns a boolean if a field has been set.
func (o *IamUserGroup) HasAccessExpiryTime() bool {
	if o != nil && !IsNil(o.AccessExpiryTime) {
		return true
	}

	return false
}

// SetAccessExpiryTime gets a reference to the given time.Time and assigns it to the AccessExpiryTime field.
func (o *IamUserGroup) SetAccessExpiryTime(v time.Time) {
	o.AccessExpiryTime = &v
}

// GetAccessLink returns the AccessLink field value if set, zero value otherwise.
func (o *IamUserGroup) GetAccessLink() string {
	if o == nil || IsNil(o.AccessLink) {
		var ret string
		return ret
	}
	return *o.AccessLink
}

// GetAccessLinkOk returns a tuple with the AccessLink field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IamUserGroup) GetAccessLinkOk() (*string, bool) {
	if o == nil || IsNil(o.AccessLink) {
		return nil, false
	}
	return o.AccessLink, true
}

// HasAccessLink returns a boolean if a field has been set.
func (o *IamUserGroup) HasAccessLink() bool {
	if o != nil && !IsNil(o.AccessLink) {
		return true
	}

	return false
}

// SetAccessLink gets a reference to the given string and assigns it to the AccessLink field.
func (o *IamUserGroup) SetAccessLink(v string) {
	o.AccessLink = &v
}

// GetGroupType returns the GroupType field value if set, zero value otherwise.
func (o *IamUserGroup) GetGroupType() string {
	if o == nil || IsNil(o.GroupType) {
		var ret string
		return ret
	}
	return *o.GroupType
}

// GetGroupTypeOk returns a tuple with the GroupType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IamUserGroup) GetGroupTypeOk() (*string, bool) {
	if o == nil || IsNil(o.GroupType) {
		return nil, false
	}
	return o.GroupType, true
}

// HasGroupType returns a boolean if a field has been set.
func (o *IamUserGroup) HasGroupType() bool {
	if o != nil && !IsNil(o.GroupType) {
		return true
	}

	return false
}

// SetGroupType gets a reference to the given string and assigns it to the GroupType field.
func (o *IamUserGroup) SetGroupType(v string) {
	o.GroupType = &v
}

// GetInstruction returns the Instruction field value if set, zero value otherwise.
func (o *IamUserGroup) GetInstruction() string {
	if o == nil || IsNil(o.Instruction) {
		var ret string
		return ret
	}
	return *o.Instruction
}

// GetInstructionOk returns a tuple with the Instruction field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IamUserGroup) GetInstructionOk() (*string, bool) {
	if o == nil || IsNil(o.Instruction) {
		return nil, false
	}
	return o.Instruction, true
}

// HasInstruction returns a boolean if a field has been set.
func (o *IamUserGroup) HasInstruction() bool {
	if o != nil && !IsNil(o.Instruction) {
		return true
	}

	return false
}

// SetInstruction gets a reference to the given string and assigns it to the Instruction field.
func (o *IamUserGroup) SetInstruction(v string) {
	o.Instruction = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *IamUserGroup) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IamUserGroup) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *IamUserGroup) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *IamUserGroup) SetName(v string) {
	o.Name = &v
}

// GetUniqueReferenceId returns the UniqueReferenceId field value if set, zero value otherwise.
func (o *IamUserGroup) GetUniqueReferenceId() string {
	if o == nil || IsNil(o.UniqueReferenceId) {
		var ret string
		return ret
	}
	return *o.UniqueReferenceId
}

// GetUniqueReferenceIdOk returns a tuple with the UniqueReferenceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IamUserGroup) GetUniqueReferenceIdOk() (*string, bool) {
	if o == nil || IsNil(o.UniqueReferenceId) {
		return nil, false
	}
	return o.UniqueReferenceId, true
}

// HasUniqueReferenceId returns a boolean if a field has been set.
func (o *IamUserGroup) HasUniqueReferenceId() bool {
	if o != nil && !IsNil(o.UniqueReferenceId) {
		return true
	}

	return false
}

// SetUniqueReferenceId gets a reference to the given string and assigns it to the UniqueReferenceId field.
func (o *IamUserGroup) SetUniqueReferenceId(v string) {
	o.UniqueReferenceId = &v
}

// GetIdp returns the Idp field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IamUserGroup) GetIdp() IamIdpRelationship {
	if o == nil || IsNil(o.Idp.Get()) {
		var ret IamIdpRelationship
		return ret
	}
	return *o.Idp.Get()
}

// GetIdpOk returns a tuple with the Idp field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IamUserGroup) GetIdpOk() (*IamIdpRelationship, bool) {
	if o == nil {
		return nil, false
	}
	return o.Idp.Get(), o.Idp.IsSet()
}

// HasIdp returns a boolean if a field has been set.
func (o *IamUserGroup) HasIdp() bool {
	if o != nil && o.Idp.IsSet() {
		return true
	}

	return false
}

// SetIdp gets a reference to the given NullableIamIdpRelationship and assigns it to the Idp field.
func (o *IamUserGroup) SetIdp(v IamIdpRelationship) {
	o.Idp.Set(&v)
}

// SetIdpNil sets the value for Idp to be an explicit nil
func (o *IamUserGroup) SetIdpNil() {
	o.Idp.Set(nil)
}

// UnsetIdp ensures that no value is present for Idp, not even an explicit nil
func (o *IamUserGroup) UnsetIdp() {
	o.Idp.Unset()
}

// GetIdpreference returns the Idpreference field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IamUserGroup) GetIdpreference() IamIdpReferenceRelationship {
	if o == nil || IsNil(o.Idpreference.Get()) {
		var ret IamIdpReferenceRelationship
		return ret
	}
	return *o.Idpreference.Get()
}

// GetIdpreferenceOk returns a tuple with the Idpreference field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IamUserGroup) GetIdpreferenceOk() (*IamIdpReferenceRelationship, bool) {
	if o == nil {
		return nil, false
	}
	return o.Idpreference.Get(), o.Idpreference.IsSet()
}

// HasIdpreference returns a boolean if a field has been set.
func (o *IamUserGroup) HasIdpreference() bool {
	if o != nil && o.Idpreference.IsSet() {
		return true
	}

	return false
}

// SetIdpreference gets a reference to the given NullableIamIdpReferenceRelationship and assigns it to the Idpreference field.
func (o *IamUserGroup) SetIdpreference(v IamIdpReferenceRelationship) {
	o.Idpreference.Set(&v)
}

// SetIdpreferenceNil sets the value for Idpreference to be an explicit nil
func (o *IamUserGroup) SetIdpreferenceNil() {
	o.Idpreference.Set(nil)
}

// UnsetIdpreference ensures that no value is present for Idpreference, not even an explicit nil
func (o *IamUserGroup) UnsetIdpreference() {
	o.Idpreference.Unset()
}

// GetPermissions returns the Permissions field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IamUserGroup) GetPermissions() []IamPermissionRelationship {
	if o == nil {
		var ret []IamPermissionRelationship
		return ret
	}
	return o.Permissions
}

// GetPermissionsOk returns a tuple with the Permissions field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IamUserGroup) GetPermissionsOk() ([]IamPermissionRelationship, bool) {
	if o == nil || IsNil(o.Permissions) {
		return nil, false
	}
	return o.Permissions, true
}

// HasPermissions returns a boolean if a field has been set.
func (o *IamUserGroup) HasPermissions() bool {
	if o != nil && !IsNil(o.Permissions) {
		return true
	}

	return false
}

// SetPermissions gets a reference to the given []IamPermissionRelationship and assigns it to the Permissions field.
func (o *IamUserGroup) SetPermissions(v []IamPermissionRelationship) {
	o.Permissions = v
}

// GetQualifier returns the Qualifier field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IamUserGroup) GetQualifier() IamAbstractQualifierRelationship {
	if o == nil || IsNil(o.Qualifier.Get()) {
		var ret IamAbstractQualifierRelationship
		return ret
	}
	return *o.Qualifier.Get()
}

// GetQualifierOk returns a tuple with the Qualifier field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IamUserGroup) GetQualifierOk() (*IamAbstractQualifierRelationship, bool) {
	if o == nil {
		return nil, false
	}
	return o.Qualifier.Get(), o.Qualifier.IsSet()
}

// HasQualifier returns a boolean if a field has been set.
func (o *IamUserGroup) HasQualifier() bool {
	if o != nil && o.Qualifier.IsSet() {
		return true
	}

	return false
}

// SetQualifier gets a reference to the given NullableIamAbstractQualifierRelationship and assigns it to the Qualifier field.
func (o *IamUserGroup) SetQualifier(v IamAbstractQualifierRelationship) {
	o.Qualifier.Set(&v)
}

// SetQualifierNil sets the value for Qualifier to be an explicit nil
func (o *IamUserGroup) SetQualifierNil() {
	o.Qualifier.Set(nil)
}

// UnsetQualifier ensures that no value is present for Qualifier, not even an explicit nil
func (o *IamUserGroup) UnsetQualifier() {
	o.Qualifier.Unset()
}

// GetUsers returns the Users field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IamUserGroup) GetUsers() []IamUserRelationship {
	if o == nil {
		var ret []IamUserRelationship
		return ret
	}
	return o.Users
}

// GetUsersOk returns a tuple with the Users field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IamUserGroup) GetUsersOk() ([]IamUserRelationship, bool) {
	if o == nil || IsNil(o.Users) {
		return nil, false
	}
	return o.Users, true
}

// HasUsers returns a boolean if a field has been set.
func (o *IamUserGroup) HasUsers() bool {
	if o != nil && !IsNil(o.Users) {
		return true
	}

	return false
}

// SetUsers gets a reference to the given []IamUserRelationship and assigns it to the Users field.
func (o *IamUserGroup) SetUsers(v []IamUserRelationship) {
	o.Users = v
}

func (o IamUserGroup) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IamUserGroup) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	serializedMoBaseMo, errMoBaseMo := json.Marshal(o.MoBaseMo)
	if errMoBaseMo != nil {
		return map[string]interface{}{}, errMoBaseMo
	}
	errMoBaseMo = json.Unmarshal([]byte(serializedMoBaseMo), &toSerialize)
	if errMoBaseMo != nil {
		return map[string]interface{}{}, errMoBaseMo
	}
	if _, exists := toSerialize["ClassId"]; !exists {
		toSerialize["ClassId"] = o.GetDefaultClassId()
	}
	toSerialize["ClassId"] = o.ClassId
	if _, exists := toSerialize["ObjectType"]; !exists {
		toSerialize["ObjectType"] = o.GetDefaultObjectType()
	}
	toSerialize["ObjectType"] = o.ObjectType
	if !IsNil(o.AccessActivationTime) {
		toSerialize["AccessActivationTime"] = o.AccessActivationTime
	}
	if !IsNil(o.AccessExpiryTime) {
		toSerialize["AccessExpiryTime"] = o.AccessExpiryTime
	}
	if !IsNil(o.AccessLink) {
		toSerialize["AccessLink"] = o.AccessLink
	}
	if !IsNil(o.GroupType) {
		toSerialize["GroupType"] = o.GroupType
	}
	if !IsNil(o.Instruction) {
		toSerialize["Instruction"] = o.Instruction
	}
	if !IsNil(o.Name) {
		toSerialize["Name"] = o.Name
	}
	if !IsNil(o.UniqueReferenceId) {
		toSerialize["UniqueReferenceId"] = o.UniqueReferenceId
	}
	if o.Idp.IsSet() {
		toSerialize["Idp"] = o.Idp.Get()
	}
	if o.Idpreference.IsSet() {
		toSerialize["Idpreference"] = o.Idpreference.Get()
	}
	if o.Permissions != nil {
		toSerialize["Permissions"] = o.Permissions
	}
	if o.Qualifier.IsSet() {
		toSerialize["Qualifier"] = o.Qualifier.Get()
	}
	if o.Users != nil {
		toSerialize["Users"] = o.Users
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *IamUserGroup) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"ClassId",
		"ObjectType",
	}

	// defaultValueFuncMap captures the default values for required properties.
	// These values are used when required properties are missing from the payload.
	defaultValueFuncMap := map[string]func() interface{}{
		"ClassId":    o.GetDefaultClassId,
		"ObjectType": o.GetDefaultObjectType,
	}
	var defaultValueApplied bool
	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			if _, ok := defaultValueFuncMap[requiredProperty]; ok {
				allProperties[requiredProperty] = defaultValueFuncMap[requiredProperty]()
				defaultValueApplied = true
			}
		}
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	if defaultValueApplied {
		data, err = json.Marshal(allProperties)
		if err != nil {
			return err
		}
	}
	type IamUserGroupWithoutEmbeddedStruct struct {
		// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.
		ClassId string `json:"ClassId"`
		// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
		ObjectType string `json:"ObjectType"`
		// AccessActivationTime indicates the activation time for the guest user's access to the Account.  Before this time, if guest user tries to login to the account, access the account will be denied.
		AccessActivationTime *time.Time `json:"AccessActivationTime,omitempty"`
		// AccessExpiryTime indicates the expiration time for the guest user's access to the Account. Its value can only be  assigned a date that falls within the range determined by the maximum expiration time configured for the  API entries. The AccessExpiry date can be edited to be earlier or later.
		AccessExpiryTime *time.Time `json:"AccessExpiryTime,omitempty"`
		// AccessLink using which the guest user uses to log in to Intersight.
		AccessLink *string `json:"AccessLink,omitempty"`
		// Group type determines the type of groups that is being associated with users. By default, Default User group will be used for associating dynamic user login. If the value of the User Group is set to guest, then this type of user group will be used for guest user login. * `Default` - Default User Group Type used for dynamic users login. * `Guest` - Guest User Group type used for guest users login.
		GroupType *string `json:"GroupType,omitempty"`
		// Instruction property holds detailed guidance and information intended for individuals  accessing the system as guest users. It holds the information to assist guests in navigating the platform,  understanding policies, and performing necessary actions to ensure a seamless and secure user experience.
		Instruction *string `json:"Instruction,omitempty"`
		// The name of the user group which the dynamic/or guest user belongs to.
		Name *string `json:"Name,omitempty"`
		// A random mixed character string which is unique per user groups. UniqueReferenceId is used as key for identifying the guest user groups.
		UniqueReferenceId *string                             `json:"UniqueReferenceId,omitempty"`
		Idp               NullableIamIdpRelationship          `json:"Idp,omitempty"`
		Idpreference      NullableIamIdpReferenceRelationship `json:"Idpreference,omitempty"`
		// An array of relationships to iamPermission resources.
		Permissions []IamPermissionRelationship              `json:"Permissions,omitempty"`
		Qualifier   NullableIamAbstractQualifierRelationship `json:"Qualifier,omitempty"`
		// An array of relationships to iamUser resources.
		Users []IamUserRelationship `json:"Users,omitempty"`
	}

	varIamUserGroupWithoutEmbeddedStruct := IamUserGroupWithoutEmbeddedStruct{}

	err = json.Unmarshal(data, &varIamUserGroupWithoutEmbeddedStruct)
	if err == nil {
		varIamUserGroup := _IamUserGroup{}
		varIamUserGroup.ClassId = varIamUserGroupWithoutEmbeddedStruct.ClassId
		varIamUserGroup.ObjectType = varIamUserGroupWithoutEmbeddedStruct.ObjectType
		varIamUserGroup.AccessActivationTime = varIamUserGroupWithoutEmbeddedStruct.AccessActivationTime
		varIamUserGroup.AccessExpiryTime = varIamUserGroupWithoutEmbeddedStruct.AccessExpiryTime
		varIamUserGroup.AccessLink = varIamUserGroupWithoutEmbeddedStruct.AccessLink
		varIamUserGroup.GroupType = varIamUserGroupWithoutEmbeddedStruct.GroupType
		varIamUserGroup.Instruction = varIamUserGroupWithoutEmbeddedStruct.Instruction
		varIamUserGroup.Name = varIamUserGroupWithoutEmbeddedStruct.Name
		varIamUserGroup.UniqueReferenceId = varIamUserGroupWithoutEmbeddedStruct.UniqueReferenceId
		varIamUserGroup.Idp = varIamUserGroupWithoutEmbeddedStruct.Idp
		varIamUserGroup.Idpreference = varIamUserGroupWithoutEmbeddedStruct.Idpreference
		varIamUserGroup.Permissions = varIamUserGroupWithoutEmbeddedStruct.Permissions
		varIamUserGroup.Qualifier = varIamUserGroupWithoutEmbeddedStruct.Qualifier
		varIamUserGroup.Users = varIamUserGroupWithoutEmbeddedStruct.Users
		*o = IamUserGroup(varIamUserGroup)
	} else {
		return err
	}

	varIamUserGroup := _IamUserGroup{}

	err = json.Unmarshal(data, &varIamUserGroup)
	if err == nil {
		o.MoBaseMo = varIamUserGroup.MoBaseMo
	} else {
		return err
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "ClassId")
		delete(additionalProperties, "ObjectType")
		delete(additionalProperties, "AccessActivationTime")
		delete(additionalProperties, "AccessExpiryTime")
		delete(additionalProperties, "AccessLink")
		delete(additionalProperties, "GroupType")
		delete(additionalProperties, "Instruction")
		delete(additionalProperties, "Name")
		delete(additionalProperties, "UniqueReferenceId")
		delete(additionalProperties, "Idp")
		delete(additionalProperties, "Idpreference")
		delete(additionalProperties, "Permissions")
		delete(additionalProperties, "Qualifier")
		delete(additionalProperties, "Users")

		// remove fields from embedded structs
		reflectMoBaseMo := reflect.ValueOf(o.MoBaseMo)
		for i := 0; i < reflectMoBaseMo.Type().NumField(); i++ {
			t := reflectMoBaseMo.Type().Field(i)

			if jsonTag := t.Tag.Get("json"); jsonTag != "" {
				fieldName := ""
				if commaIdx := strings.Index(jsonTag, ","); commaIdx > 0 {
					fieldName = jsonTag[:commaIdx]
				} else {
					fieldName = jsonTag
				}
				if fieldName != "AdditionalProperties" {
					delete(additionalProperties, fieldName)
				}
			}
		}

		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableIamUserGroup struct {
	value *IamUserGroup
	isSet bool
}

func (v NullableIamUserGroup) Get() *IamUserGroup {
	return v.value
}

func (v *NullableIamUserGroup) Set(val *IamUserGroup) {
	v.value = val
	v.isSet = true
}

func (v NullableIamUserGroup) IsSet() bool {
	return v.isSet
}

func (v *NullableIamUserGroup) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIamUserGroup(val *IamUserGroup) *NullableIamUserGroup {
	return &NullableIamUserGroup{value: val, isSet: true}
}

func (v NullableIamUserGroup) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIamUserGroup) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
