/*
Cisco Intersight

Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations. The Intersight OpenAPI document defines the complete set of properties that are returned in the HTTP response. From that perspective, a client can expect that no additional properties are returned, unless these properties are explicitly defined in the OpenAPI document. However, when a client uses an older version of the Intersight OpenAPI document, the server may send additional properties because the software is more recent than the client. In that case, the client may receive properties that it does not know about. Some generated SDKs perform a strict validation of the HTTP response body against the OpenAPI document.

API version: 1.0.11-18775
Contact: intersight@cisco.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package intersight

import (
	"encoding/json"
	"fmt"
	"reflect"
	"strings"
)

// checks if the EquipmentSwitchCard type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EquipmentSwitchCard{}

// EquipmentSwitchCard Fixed / Removable module on a Fabric Interconnect / Switch.
type EquipmentSwitchCard struct {
	EquipmentBase
	// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.
	ClassId string `json:"ClassId"`
	// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
	ObjectType string `json:"ObjectType"`
	// The starting (base) MAC address of the switch hardware like \"d0-e0-42-87-39-00\".
	BaseMac *string `json:"BaseMac,omitempty"`
	// Detailed description of this switch hardware.
	Description *string `json:"Description,omitempty"`
	// The ending MAC address of the switch hardware like \"d0-e0-42-87-39-5f\".
	EndMac *string `json:"EndMac,omitempty"`
	// The user configured Ethernet switching mode for this switch (End-Host or Switch). * `end-host` - In end-host mode, the fabric interconnects appear to the upstream devices as end hosts with multiple links.In this mode, the switch does not run Spanning Tree Protocol and avoids loops by following a set of rules for traffic forwarding.In case of ethernet switching mode - Ethernet end-host mode is also known as Ethernet host virtualizer. * `switch` - In switch mode, the switch runs Spanning Tree Protocol to avoid loops, and broadcast and multicast packets are handled in the traditional way.This is the traditional switch mode.
	EthernetSwitchingMode *string `json:"EthernetSwitchingMode,omitempty"`
	// The user configured FC switching mode for this switch (End-Host or Switch). * `end-host` - In end-host mode, the fabric interconnects appear to the upstream devices as end hosts with multiple links.In this mode, the switch does not run Spanning Tree Protocol and avoids loops by following a set of rules for traffic forwarding.In case of ethernet switching mode - Ethernet end-host mode is also known as Ethernet host virtualizer. * `switch` - In switch mode, the switch runs Spanning Tree Protocol to avoid loops, and broadcast and multicast packets are handled in the traditional way.This is the traditional switch mode.
	FcSwitchingMode *string `json:"FcSwitchingMode,omitempty"`
	// The Hardware version of the switch hardware.
	HwVersion *string `json:"HwVersion,omitempty"`
	// The name of the switch card like Line Card-1.
	Name *string `json:"Name,omitempty"`
	// Number of ports present in this switch hardware.
	NumPorts *int64 `json:"NumPorts,omitempty"`
	// Field specifies this Switch's Out-of-band IP address.
	OutOfBandIpAddress *string `json:"OutOfBandIpAddress,omitempty"`
	// Field specifies this Switch's default gateway for the out-of-band management interface.
	OutOfBandIpGateway *string `json:"OutOfBandIpGateway,omitempty"`
	// Field specifies the Netmask for this Switch's Out-of-band IP address.
	OutOfBandIpMask *string `json:"OutOfBandIpMask,omitempty"`
	// The MAC address of the Switch's out-of-band management interface.
	OutOfBandMac *string `json:"OutOfBandMac,omitempty"`
	// The part number of the switch hardware.
	PartNumber *string `json:"PartNumber,omitempty"`
	// Power state of the switch hardware. * `unknown` - The power state of the switch hardware is unknown. * `off` - The power state of the switch hardware is off. * `on` - The power state of the switch hardware is on. * `deny` - The power state of the switch hardware is deny. * `multi-boot-fail` - The power state of the switch hardware is multi-boot-fail.
	PowerState *string `json:"PowerState,omitempty"`
	// Slot identifier of the local Switch slot Interface.
	SlotId *int64 `json:"SlotId,omitempty"`
	// Operational state of the switch hardware.
	State *string `json:"State,omitempty"`
	// The connection status of the switch hardware like up/down. * `Down` - Connection status of the switch card is down. * `Up` - Connection status of the switch card is up.
	Status *string `json:"Status,omitempty"`
	// Switch Identifier that is local to a cluster.
	SwitchId *string `json:"SwitchId,omitempty"`
	// The Thermal status of the fabric interconnect. * `unknown` - The default state of the sensor (in case no data is received). * `ok` - State of the sensor indicating the sensor's temperature range is okay. * `upper-non-recoverable` - State of the sensor indicating that the temperature is extremely high above normal range. * `upper-critical` - State of the sensor indicating that the temperature is above normal range. * `upper-non-critical` - State of the sensor indicating that the temperature is a little above the normal range. * `lower-non-critical` - State of the sensor indicating that the temperature is a little below the normal range. * `lower-critical` - State of the sensor indicating that the temperature is below normal range. * `lower-non-recoverable` - State of the sensor indicating that the temperature is extremely below normal range.
	Thermal *string `json:"Thermal,omitempty"`
	// Type of the switch card based on the capability like 4 Gbps or 2 Gbps type etc.
	Type *string `json:"Type,omitempty"`
	// An array of relationships to fcPortChannel resources.
	FcPortChannels []FcPortChannelRelationship `json:"FcPortChannels,omitempty"`
	// An array of relationships to fcPhysicalPort resources.
	FcPorts             []FcPhysicalPortRelationship            `json:"FcPorts,omitempty"`
	InventoryDeviceInfo NullableInventoryDeviceInfoRelationship `json:"InventoryDeviceInfo,omitempty"`
	NetworkElement      NullableNetworkElementRelationship      `json:"NetworkElement,omitempty"`
	// An array of relationships to etherPortChannel resources.
	PortChannels []EtherPortChannelRelationship `json:"PortChannels,omitempty"`
	// An array of relationships to portGroup resources.
	PortGroups           []PortGroupRelationship                     `json:"PortGroups,omitempty"`
	RegisteredDevice     NullableAssetDeviceRegistrationRelationship `json:"RegisteredDevice,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _EquipmentSwitchCard EquipmentSwitchCard

// NewEquipmentSwitchCard instantiates a new EquipmentSwitchCard object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEquipmentSwitchCard(classId string, objectType string) *EquipmentSwitchCard {
	this := EquipmentSwitchCard{}
	this.ClassId = classId
	this.ObjectType = objectType
	var powerState string = "unknown"
	this.PowerState = &powerState
	var status string = "Down"
	this.Status = &status
	var thermal string = "unknown"
	this.Thermal = &thermal
	return &this
}

// NewEquipmentSwitchCardWithDefaults instantiates a new EquipmentSwitchCard object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEquipmentSwitchCardWithDefaults() *EquipmentSwitchCard {
	this := EquipmentSwitchCard{}
	var classId string = "equipment.SwitchCard"
	this.ClassId = classId
	var objectType string = "equipment.SwitchCard"
	this.ObjectType = objectType
	var powerState string = "unknown"
	this.PowerState = &powerState
	var status string = "Down"
	this.Status = &status
	var thermal string = "unknown"
	this.Thermal = &thermal
	return &this
}

// GetClassId returns the ClassId field value
func (o *EquipmentSwitchCard) GetClassId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ClassId
}

// GetClassIdOk returns a tuple with the ClassId field value
// and a boolean to check if the value has been set.
func (o *EquipmentSwitchCard) GetClassIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ClassId, true
}

// SetClassId sets field value
func (o *EquipmentSwitchCard) SetClassId(v string) {
	o.ClassId = v
}

// GetDefaultClassId returns the default value "equipment.SwitchCard" of the ClassId field.
func (o *EquipmentSwitchCard) GetDefaultClassId() interface{} {
	return "equipment.SwitchCard"
}

// GetObjectType returns the ObjectType field value
func (o *EquipmentSwitchCard) GetObjectType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ObjectType
}

// GetObjectTypeOk returns a tuple with the ObjectType field value
// and a boolean to check if the value has been set.
func (o *EquipmentSwitchCard) GetObjectTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ObjectType, true
}

// SetObjectType sets field value
func (o *EquipmentSwitchCard) SetObjectType(v string) {
	o.ObjectType = v
}

// GetDefaultObjectType returns the default value "equipment.SwitchCard" of the ObjectType field.
func (o *EquipmentSwitchCard) GetDefaultObjectType() interface{} {
	return "equipment.SwitchCard"
}

// GetBaseMac returns the BaseMac field value if set, zero value otherwise.
func (o *EquipmentSwitchCard) GetBaseMac() string {
	if o == nil || IsNil(o.BaseMac) {
		var ret string
		return ret
	}
	return *o.BaseMac
}

// GetBaseMacOk returns a tuple with the BaseMac field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EquipmentSwitchCard) GetBaseMacOk() (*string, bool) {
	if o == nil || IsNil(o.BaseMac) {
		return nil, false
	}
	return o.BaseMac, true
}

// HasBaseMac returns a boolean if a field has been set.
func (o *EquipmentSwitchCard) HasBaseMac() bool {
	if o != nil && !IsNil(o.BaseMac) {
		return true
	}

	return false
}

// SetBaseMac gets a reference to the given string and assigns it to the BaseMac field.
func (o *EquipmentSwitchCard) SetBaseMac(v string) {
	o.BaseMac = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *EquipmentSwitchCard) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EquipmentSwitchCard) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *EquipmentSwitchCard) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *EquipmentSwitchCard) SetDescription(v string) {
	o.Description = &v
}

// GetEndMac returns the EndMac field value if set, zero value otherwise.
func (o *EquipmentSwitchCard) GetEndMac() string {
	if o == nil || IsNil(o.EndMac) {
		var ret string
		return ret
	}
	return *o.EndMac
}

// GetEndMacOk returns a tuple with the EndMac field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EquipmentSwitchCard) GetEndMacOk() (*string, bool) {
	if o == nil || IsNil(o.EndMac) {
		return nil, false
	}
	return o.EndMac, true
}

// HasEndMac returns a boolean if a field has been set.
func (o *EquipmentSwitchCard) HasEndMac() bool {
	if o != nil && !IsNil(o.EndMac) {
		return true
	}

	return false
}

// SetEndMac gets a reference to the given string and assigns it to the EndMac field.
func (o *EquipmentSwitchCard) SetEndMac(v string) {
	o.EndMac = &v
}

// GetEthernetSwitchingMode returns the EthernetSwitchingMode field value if set, zero value otherwise.
func (o *EquipmentSwitchCard) GetEthernetSwitchingMode() string {
	if o == nil || IsNil(o.EthernetSwitchingMode) {
		var ret string
		return ret
	}
	return *o.EthernetSwitchingMode
}

// GetEthernetSwitchingModeOk returns a tuple with the EthernetSwitchingMode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EquipmentSwitchCard) GetEthernetSwitchingModeOk() (*string, bool) {
	if o == nil || IsNil(o.EthernetSwitchingMode) {
		return nil, false
	}
	return o.EthernetSwitchingMode, true
}

// HasEthernetSwitchingMode returns a boolean if a field has been set.
func (o *EquipmentSwitchCard) HasEthernetSwitchingMode() bool {
	if o != nil && !IsNil(o.EthernetSwitchingMode) {
		return true
	}

	return false
}

// SetEthernetSwitchingMode gets a reference to the given string and assigns it to the EthernetSwitchingMode field.
func (o *EquipmentSwitchCard) SetEthernetSwitchingMode(v string) {
	o.EthernetSwitchingMode = &v
}

// GetFcSwitchingMode returns the FcSwitchingMode field value if set, zero value otherwise.
func (o *EquipmentSwitchCard) GetFcSwitchingMode() string {
	if o == nil || IsNil(o.FcSwitchingMode) {
		var ret string
		return ret
	}
	return *o.FcSwitchingMode
}

// GetFcSwitchingModeOk returns a tuple with the FcSwitchingMode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EquipmentSwitchCard) GetFcSwitchingModeOk() (*string, bool) {
	if o == nil || IsNil(o.FcSwitchingMode) {
		return nil, false
	}
	return o.FcSwitchingMode, true
}

// HasFcSwitchingMode returns a boolean if a field has been set.
func (o *EquipmentSwitchCard) HasFcSwitchingMode() bool {
	if o != nil && !IsNil(o.FcSwitchingMode) {
		return true
	}

	return false
}

// SetFcSwitchingMode gets a reference to the given string and assigns it to the FcSwitchingMode field.
func (o *EquipmentSwitchCard) SetFcSwitchingMode(v string) {
	o.FcSwitchingMode = &v
}

// GetHwVersion returns the HwVersion field value if set, zero value otherwise.
func (o *EquipmentSwitchCard) GetHwVersion() string {
	if o == nil || IsNil(o.HwVersion) {
		var ret string
		return ret
	}
	return *o.HwVersion
}

// GetHwVersionOk returns a tuple with the HwVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EquipmentSwitchCard) GetHwVersionOk() (*string, bool) {
	if o == nil || IsNil(o.HwVersion) {
		return nil, false
	}
	return o.HwVersion, true
}

// HasHwVersion returns a boolean if a field has been set.
func (o *EquipmentSwitchCard) HasHwVersion() bool {
	if o != nil && !IsNil(o.HwVersion) {
		return true
	}

	return false
}

// SetHwVersion gets a reference to the given string and assigns it to the HwVersion field.
func (o *EquipmentSwitchCard) SetHwVersion(v string) {
	o.HwVersion = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *EquipmentSwitchCard) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EquipmentSwitchCard) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *EquipmentSwitchCard) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *EquipmentSwitchCard) SetName(v string) {
	o.Name = &v
}

// GetNumPorts returns the NumPorts field value if set, zero value otherwise.
func (o *EquipmentSwitchCard) GetNumPorts() int64 {
	if o == nil || IsNil(o.NumPorts) {
		var ret int64
		return ret
	}
	return *o.NumPorts
}

// GetNumPortsOk returns a tuple with the NumPorts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EquipmentSwitchCard) GetNumPortsOk() (*int64, bool) {
	if o == nil || IsNil(o.NumPorts) {
		return nil, false
	}
	return o.NumPorts, true
}

// HasNumPorts returns a boolean if a field has been set.
func (o *EquipmentSwitchCard) HasNumPorts() bool {
	if o != nil && !IsNil(o.NumPorts) {
		return true
	}

	return false
}

// SetNumPorts gets a reference to the given int64 and assigns it to the NumPorts field.
func (o *EquipmentSwitchCard) SetNumPorts(v int64) {
	o.NumPorts = &v
}

// GetOutOfBandIpAddress returns the OutOfBandIpAddress field value if set, zero value otherwise.
func (o *EquipmentSwitchCard) GetOutOfBandIpAddress() string {
	if o == nil || IsNil(o.OutOfBandIpAddress) {
		var ret string
		return ret
	}
	return *o.OutOfBandIpAddress
}

// GetOutOfBandIpAddressOk returns a tuple with the OutOfBandIpAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EquipmentSwitchCard) GetOutOfBandIpAddressOk() (*string, bool) {
	if o == nil || IsNil(o.OutOfBandIpAddress) {
		return nil, false
	}
	return o.OutOfBandIpAddress, true
}

// HasOutOfBandIpAddress returns a boolean if a field has been set.
func (o *EquipmentSwitchCard) HasOutOfBandIpAddress() bool {
	if o != nil && !IsNil(o.OutOfBandIpAddress) {
		return true
	}

	return false
}

// SetOutOfBandIpAddress gets a reference to the given string and assigns it to the OutOfBandIpAddress field.
func (o *EquipmentSwitchCard) SetOutOfBandIpAddress(v string) {
	o.OutOfBandIpAddress = &v
}

// GetOutOfBandIpGateway returns the OutOfBandIpGateway field value if set, zero value otherwise.
func (o *EquipmentSwitchCard) GetOutOfBandIpGateway() string {
	if o == nil || IsNil(o.OutOfBandIpGateway) {
		var ret string
		return ret
	}
	return *o.OutOfBandIpGateway
}

// GetOutOfBandIpGatewayOk returns a tuple with the OutOfBandIpGateway field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EquipmentSwitchCard) GetOutOfBandIpGatewayOk() (*string, bool) {
	if o == nil || IsNil(o.OutOfBandIpGateway) {
		return nil, false
	}
	return o.OutOfBandIpGateway, true
}

// HasOutOfBandIpGateway returns a boolean if a field has been set.
func (o *EquipmentSwitchCard) HasOutOfBandIpGateway() bool {
	if o != nil && !IsNil(o.OutOfBandIpGateway) {
		return true
	}

	return false
}

// SetOutOfBandIpGateway gets a reference to the given string and assigns it to the OutOfBandIpGateway field.
func (o *EquipmentSwitchCard) SetOutOfBandIpGateway(v string) {
	o.OutOfBandIpGateway = &v
}

// GetOutOfBandIpMask returns the OutOfBandIpMask field value if set, zero value otherwise.
func (o *EquipmentSwitchCard) GetOutOfBandIpMask() string {
	if o == nil || IsNil(o.OutOfBandIpMask) {
		var ret string
		return ret
	}
	return *o.OutOfBandIpMask
}

// GetOutOfBandIpMaskOk returns a tuple with the OutOfBandIpMask field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EquipmentSwitchCard) GetOutOfBandIpMaskOk() (*string, bool) {
	if o == nil || IsNil(o.OutOfBandIpMask) {
		return nil, false
	}
	return o.OutOfBandIpMask, true
}

// HasOutOfBandIpMask returns a boolean if a field has been set.
func (o *EquipmentSwitchCard) HasOutOfBandIpMask() bool {
	if o != nil && !IsNil(o.OutOfBandIpMask) {
		return true
	}

	return false
}

// SetOutOfBandIpMask gets a reference to the given string and assigns it to the OutOfBandIpMask field.
func (o *EquipmentSwitchCard) SetOutOfBandIpMask(v string) {
	o.OutOfBandIpMask = &v
}

// GetOutOfBandMac returns the OutOfBandMac field value if set, zero value otherwise.
func (o *EquipmentSwitchCard) GetOutOfBandMac() string {
	if o == nil || IsNil(o.OutOfBandMac) {
		var ret string
		return ret
	}
	return *o.OutOfBandMac
}

// GetOutOfBandMacOk returns a tuple with the OutOfBandMac field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EquipmentSwitchCard) GetOutOfBandMacOk() (*string, bool) {
	if o == nil || IsNil(o.OutOfBandMac) {
		return nil, false
	}
	return o.OutOfBandMac, true
}

// HasOutOfBandMac returns a boolean if a field has been set.
func (o *EquipmentSwitchCard) HasOutOfBandMac() bool {
	if o != nil && !IsNil(o.OutOfBandMac) {
		return true
	}

	return false
}

// SetOutOfBandMac gets a reference to the given string and assigns it to the OutOfBandMac field.
func (o *EquipmentSwitchCard) SetOutOfBandMac(v string) {
	o.OutOfBandMac = &v
}

// GetPartNumber returns the PartNumber field value if set, zero value otherwise.
func (o *EquipmentSwitchCard) GetPartNumber() string {
	if o == nil || IsNil(o.PartNumber) {
		var ret string
		return ret
	}
	return *o.PartNumber
}

// GetPartNumberOk returns a tuple with the PartNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EquipmentSwitchCard) GetPartNumberOk() (*string, bool) {
	if o == nil || IsNil(o.PartNumber) {
		return nil, false
	}
	return o.PartNumber, true
}

// HasPartNumber returns a boolean if a field has been set.
func (o *EquipmentSwitchCard) HasPartNumber() bool {
	if o != nil && !IsNil(o.PartNumber) {
		return true
	}

	return false
}

// SetPartNumber gets a reference to the given string and assigns it to the PartNumber field.
func (o *EquipmentSwitchCard) SetPartNumber(v string) {
	o.PartNumber = &v
}

// GetPowerState returns the PowerState field value if set, zero value otherwise.
func (o *EquipmentSwitchCard) GetPowerState() string {
	if o == nil || IsNil(o.PowerState) {
		var ret string
		return ret
	}
	return *o.PowerState
}

// GetPowerStateOk returns a tuple with the PowerState field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EquipmentSwitchCard) GetPowerStateOk() (*string, bool) {
	if o == nil || IsNil(o.PowerState) {
		return nil, false
	}
	return o.PowerState, true
}

// HasPowerState returns a boolean if a field has been set.
func (o *EquipmentSwitchCard) HasPowerState() bool {
	if o != nil && !IsNil(o.PowerState) {
		return true
	}

	return false
}

// SetPowerState gets a reference to the given string and assigns it to the PowerState field.
func (o *EquipmentSwitchCard) SetPowerState(v string) {
	o.PowerState = &v
}

// GetSlotId returns the SlotId field value if set, zero value otherwise.
func (o *EquipmentSwitchCard) GetSlotId() int64 {
	if o == nil || IsNil(o.SlotId) {
		var ret int64
		return ret
	}
	return *o.SlotId
}

// GetSlotIdOk returns a tuple with the SlotId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EquipmentSwitchCard) GetSlotIdOk() (*int64, bool) {
	if o == nil || IsNil(o.SlotId) {
		return nil, false
	}
	return o.SlotId, true
}

// HasSlotId returns a boolean if a field has been set.
func (o *EquipmentSwitchCard) HasSlotId() bool {
	if o != nil && !IsNil(o.SlotId) {
		return true
	}

	return false
}

// SetSlotId gets a reference to the given int64 and assigns it to the SlotId field.
func (o *EquipmentSwitchCard) SetSlotId(v int64) {
	o.SlotId = &v
}

// GetState returns the State field value if set, zero value otherwise.
func (o *EquipmentSwitchCard) GetState() string {
	if o == nil || IsNil(o.State) {
		var ret string
		return ret
	}
	return *o.State
}

// GetStateOk returns a tuple with the State field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EquipmentSwitchCard) GetStateOk() (*string, bool) {
	if o == nil || IsNil(o.State) {
		return nil, false
	}
	return o.State, true
}

// HasState returns a boolean if a field has been set.
func (o *EquipmentSwitchCard) HasState() bool {
	if o != nil && !IsNil(o.State) {
		return true
	}

	return false
}

// SetState gets a reference to the given string and assigns it to the State field.
func (o *EquipmentSwitchCard) SetState(v string) {
	o.State = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *EquipmentSwitchCard) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EquipmentSwitchCard) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *EquipmentSwitchCard) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *EquipmentSwitchCard) SetStatus(v string) {
	o.Status = &v
}

// GetSwitchId returns the SwitchId field value if set, zero value otherwise.
func (o *EquipmentSwitchCard) GetSwitchId() string {
	if o == nil || IsNil(o.SwitchId) {
		var ret string
		return ret
	}
	return *o.SwitchId
}

// GetSwitchIdOk returns a tuple with the SwitchId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EquipmentSwitchCard) GetSwitchIdOk() (*string, bool) {
	if o == nil || IsNil(o.SwitchId) {
		return nil, false
	}
	return o.SwitchId, true
}

// HasSwitchId returns a boolean if a field has been set.
func (o *EquipmentSwitchCard) HasSwitchId() bool {
	if o != nil && !IsNil(o.SwitchId) {
		return true
	}

	return false
}

// SetSwitchId gets a reference to the given string and assigns it to the SwitchId field.
func (o *EquipmentSwitchCard) SetSwitchId(v string) {
	o.SwitchId = &v
}

// GetThermal returns the Thermal field value if set, zero value otherwise.
func (o *EquipmentSwitchCard) GetThermal() string {
	if o == nil || IsNil(o.Thermal) {
		var ret string
		return ret
	}
	return *o.Thermal
}

// GetThermalOk returns a tuple with the Thermal field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EquipmentSwitchCard) GetThermalOk() (*string, bool) {
	if o == nil || IsNil(o.Thermal) {
		return nil, false
	}
	return o.Thermal, true
}

// HasThermal returns a boolean if a field has been set.
func (o *EquipmentSwitchCard) HasThermal() bool {
	if o != nil && !IsNil(o.Thermal) {
		return true
	}

	return false
}

// SetThermal gets a reference to the given string and assigns it to the Thermal field.
func (o *EquipmentSwitchCard) SetThermal(v string) {
	o.Thermal = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *EquipmentSwitchCard) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EquipmentSwitchCard) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *EquipmentSwitchCard) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *EquipmentSwitchCard) SetType(v string) {
	o.Type = &v
}

// GetFcPortChannels returns the FcPortChannels field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EquipmentSwitchCard) GetFcPortChannels() []FcPortChannelRelationship {
	if o == nil {
		var ret []FcPortChannelRelationship
		return ret
	}
	return o.FcPortChannels
}

// GetFcPortChannelsOk returns a tuple with the FcPortChannels field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EquipmentSwitchCard) GetFcPortChannelsOk() ([]FcPortChannelRelationship, bool) {
	if o == nil || IsNil(o.FcPortChannels) {
		return nil, false
	}
	return o.FcPortChannels, true
}

// HasFcPortChannels returns a boolean if a field has been set.
func (o *EquipmentSwitchCard) HasFcPortChannels() bool {
	if o != nil && !IsNil(o.FcPortChannels) {
		return true
	}

	return false
}

// SetFcPortChannels gets a reference to the given []FcPortChannelRelationship and assigns it to the FcPortChannels field.
func (o *EquipmentSwitchCard) SetFcPortChannels(v []FcPortChannelRelationship) {
	o.FcPortChannels = v
}

// GetFcPorts returns the FcPorts field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EquipmentSwitchCard) GetFcPorts() []FcPhysicalPortRelationship {
	if o == nil {
		var ret []FcPhysicalPortRelationship
		return ret
	}
	return o.FcPorts
}

// GetFcPortsOk returns a tuple with the FcPorts field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EquipmentSwitchCard) GetFcPortsOk() ([]FcPhysicalPortRelationship, bool) {
	if o == nil || IsNil(o.FcPorts) {
		return nil, false
	}
	return o.FcPorts, true
}

// HasFcPorts returns a boolean if a field has been set.
func (o *EquipmentSwitchCard) HasFcPorts() bool {
	if o != nil && !IsNil(o.FcPorts) {
		return true
	}

	return false
}

// SetFcPorts gets a reference to the given []FcPhysicalPortRelationship and assigns it to the FcPorts field.
func (o *EquipmentSwitchCard) SetFcPorts(v []FcPhysicalPortRelationship) {
	o.FcPorts = v
}

// GetInventoryDeviceInfo returns the InventoryDeviceInfo field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EquipmentSwitchCard) GetInventoryDeviceInfo() InventoryDeviceInfoRelationship {
	if o == nil || IsNil(o.InventoryDeviceInfo.Get()) {
		var ret InventoryDeviceInfoRelationship
		return ret
	}
	return *o.InventoryDeviceInfo.Get()
}

// GetInventoryDeviceInfoOk returns a tuple with the InventoryDeviceInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EquipmentSwitchCard) GetInventoryDeviceInfoOk() (*InventoryDeviceInfoRelationship, bool) {
	if o == nil {
		return nil, false
	}
	return o.InventoryDeviceInfo.Get(), o.InventoryDeviceInfo.IsSet()
}

// HasInventoryDeviceInfo returns a boolean if a field has been set.
func (o *EquipmentSwitchCard) HasInventoryDeviceInfo() bool {
	if o != nil && o.InventoryDeviceInfo.IsSet() {
		return true
	}

	return false
}

// SetInventoryDeviceInfo gets a reference to the given NullableInventoryDeviceInfoRelationship and assigns it to the InventoryDeviceInfo field.
func (o *EquipmentSwitchCard) SetInventoryDeviceInfo(v InventoryDeviceInfoRelationship) {
	o.InventoryDeviceInfo.Set(&v)
}

// SetInventoryDeviceInfoNil sets the value for InventoryDeviceInfo to be an explicit nil
func (o *EquipmentSwitchCard) SetInventoryDeviceInfoNil() {
	o.InventoryDeviceInfo.Set(nil)
}

// UnsetInventoryDeviceInfo ensures that no value is present for InventoryDeviceInfo, not even an explicit nil
func (o *EquipmentSwitchCard) UnsetInventoryDeviceInfo() {
	o.InventoryDeviceInfo.Unset()
}

// GetNetworkElement returns the NetworkElement field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EquipmentSwitchCard) GetNetworkElement() NetworkElementRelationship {
	if o == nil || IsNil(o.NetworkElement.Get()) {
		var ret NetworkElementRelationship
		return ret
	}
	return *o.NetworkElement.Get()
}

// GetNetworkElementOk returns a tuple with the NetworkElement field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EquipmentSwitchCard) GetNetworkElementOk() (*NetworkElementRelationship, bool) {
	if o == nil {
		return nil, false
	}
	return o.NetworkElement.Get(), o.NetworkElement.IsSet()
}

// HasNetworkElement returns a boolean if a field has been set.
func (o *EquipmentSwitchCard) HasNetworkElement() bool {
	if o != nil && o.NetworkElement.IsSet() {
		return true
	}

	return false
}

// SetNetworkElement gets a reference to the given NullableNetworkElementRelationship and assigns it to the NetworkElement field.
func (o *EquipmentSwitchCard) SetNetworkElement(v NetworkElementRelationship) {
	o.NetworkElement.Set(&v)
}

// SetNetworkElementNil sets the value for NetworkElement to be an explicit nil
func (o *EquipmentSwitchCard) SetNetworkElementNil() {
	o.NetworkElement.Set(nil)
}

// UnsetNetworkElement ensures that no value is present for NetworkElement, not even an explicit nil
func (o *EquipmentSwitchCard) UnsetNetworkElement() {
	o.NetworkElement.Unset()
}

// GetPortChannels returns the PortChannels field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EquipmentSwitchCard) GetPortChannels() []EtherPortChannelRelationship {
	if o == nil {
		var ret []EtherPortChannelRelationship
		return ret
	}
	return o.PortChannels
}

// GetPortChannelsOk returns a tuple with the PortChannels field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EquipmentSwitchCard) GetPortChannelsOk() ([]EtherPortChannelRelationship, bool) {
	if o == nil || IsNil(o.PortChannels) {
		return nil, false
	}
	return o.PortChannels, true
}

// HasPortChannels returns a boolean if a field has been set.
func (o *EquipmentSwitchCard) HasPortChannels() bool {
	if o != nil && !IsNil(o.PortChannels) {
		return true
	}

	return false
}

// SetPortChannels gets a reference to the given []EtherPortChannelRelationship and assigns it to the PortChannels field.
func (o *EquipmentSwitchCard) SetPortChannels(v []EtherPortChannelRelationship) {
	o.PortChannels = v
}

// GetPortGroups returns the PortGroups field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EquipmentSwitchCard) GetPortGroups() []PortGroupRelationship {
	if o == nil {
		var ret []PortGroupRelationship
		return ret
	}
	return o.PortGroups
}

// GetPortGroupsOk returns a tuple with the PortGroups field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EquipmentSwitchCard) GetPortGroupsOk() ([]PortGroupRelationship, bool) {
	if o == nil || IsNil(o.PortGroups) {
		return nil, false
	}
	return o.PortGroups, true
}

// HasPortGroups returns a boolean if a field has been set.
func (o *EquipmentSwitchCard) HasPortGroups() bool {
	if o != nil && !IsNil(o.PortGroups) {
		return true
	}

	return false
}

// SetPortGroups gets a reference to the given []PortGroupRelationship and assigns it to the PortGroups field.
func (o *EquipmentSwitchCard) SetPortGroups(v []PortGroupRelationship) {
	o.PortGroups = v
}

// GetRegisteredDevice returns the RegisteredDevice field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EquipmentSwitchCard) GetRegisteredDevice() AssetDeviceRegistrationRelationship {
	if o == nil || IsNil(o.RegisteredDevice.Get()) {
		var ret AssetDeviceRegistrationRelationship
		return ret
	}
	return *o.RegisteredDevice.Get()
}

// GetRegisteredDeviceOk returns a tuple with the RegisteredDevice field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EquipmentSwitchCard) GetRegisteredDeviceOk() (*AssetDeviceRegistrationRelationship, bool) {
	if o == nil {
		return nil, false
	}
	return o.RegisteredDevice.Get(), o.RegisteredDevice.IsSet()
}

// HasRegisteredDevice returns a boolean if a field has been set.
func (o *EquipmentSwitchCard) HasRegisteredDevice() bool {
	if o != nil && o.RegisteredDevice.IsSet() {
		return true
	}

	return false
}

// SetRegisteredDevice gets a reference to the given NullableAssetDeviceRegistrationRelationship and assigns it to the RegisteredDevice field.
func (o *EquipmentSwitchCard) SetRegisteredDevice(v AssetDeviceRegistrationRelationship) {
	o.RegisteredDevice.Set(&v)
}

// SetRegisteredDeviceNil sets the value for RegisteredDevice to be an explicit nil
func (o *EquipmentSwitchCard) SetRegisteredDeviceNil() {
	o.RegisteredDevice.Set(nil)
}

// UnsetRegisteredDevice ensures that no value is present for RegisteredDevice, not even an explicit nil
func (o *EquipmentSwitchCard) UnsetRegisteredDevice() {
	o.RegisteredDevice.Unset()
}

func (o EquipmentSwitchCard) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EquipmentSwitchCard) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	serializedEquipmentBase, errEquipmentBase := json.Marshal(o.EquipmentBase)
	if errEquipmentBase != nil {
		return map[string]interface{}{}, errEquipmentBase
	}
	errEquipmentBase = json.Unmarshal([]byte(serializedEquipmentBase), &toSerialize)
	if errEquipmentBase != nil {
		return map[string]interface{}{}, errEquipmentBase
	}
	if _, exists := toSerialize["ClassId"]; !exists {
		toSerialize["ClassId"] = o.GetDefaultClassId()
	}
	toSerialize["ClassId"] = o.ClassId
	if _, exists := toSerialize["ObjectType"]; !exists {
		toSerialize["ObjectType"] = o.GetDefaultObjectType()
	}
	toSerialize["ObjectType"] = o.ObjectType
	if !IsNil(o.BaseMac) {
		toSerialize["BaseMac"] = o.BaseMac
	}
	if !IsNil(o.Description) {
		toSerialize["Description"] = o.Description
	}
	if !IsNil(o.EndMac) {
		toSerialize["EndMac"] = o.EndMac
	}
	if !IsNil(o.EthernetSwitchingMode) {
		toSerialize["EthernetSwitchingMode"] = o.EthernetSwitchingMode
	}
	if !IsNil(o.FcSwitchingMode) {
		toSerialize["FcSwitchingMode"] = o.FcSwitchingMode
	}
	if !IsNil(o.HwVersion) {
		toSerialize["HwVersion"] = o.HwVersion
	}
	if !IsNil(o.Name) {
		toSerialize["Name"] = o.Name
	}
	if !IsNil(o.NumPorts) {
		toSerialize["NumPorts"] = o.NumPorts
	}
	if !IsNil(o.OutOfBandIpAddress) {
		toSerialize["OutOfBandIpAddress"] = o.OutOfBandIpAddress
	}
	if !IsNil(o.OutOfBandIpGateway) {
		toSerialize["OutOfBandIpGateway"] = o.OutOfBandIpGateway
	}
	if !IsNil(o.OutOfBandIpMask) {
		toSerialize["OutOfBandIpMask"] = o.OutOfBandIpMask
	}
	if !IsNil(o.OutOfBandMac) {
		toSerialize["OutOfBandMac"] = o.OutOfBandMac
	}
	if !IsNil(o.PartNumber) {
		toSerialize["PartNumber"] = o.PartNumber
	}
	if !IsNil(o.PowerState) {
		toSerialize["PowerState"] = o.PowerState
	}
	if !IsNil(o.SlotId) {
		toSerialize["SlotId"] = o.SlotId
	}
	if !IsNil(o.State) {
		toSerialize["State"] = o.State
	}
	if !IsNil(o.Status) {
		toSerialize["Status"] = o.Status
	}
	if !IsNil(o.SwitchId) {
		toSerialize["SwitchId"] = o.SwitchId
	}
	if !IsNil(o.Thermal) {
		toSerialize["Thermal"] = o.Thermal
	}
	if !IsNil(o.Type) {
		toSerialize["Type"] = o.Type
	}
	if o.FcPortChannels != nil {
		toSerialize["FcPortChannels"] = o.FcPortChannels
	}
	if o.FcPorts != nil {
		toSerialize["FcPorts"] = o.FcPorts
	}
	if o.InventoryDeviceInfo.IsSet() {
		toSerialize["InventoryDeviceInfo"] = o.InventoryDeviceInfo.Get()
	}
	if o.NetworkElement.IsSet() {
		toSerialize["NetworkElement"] = o.NetworkElement.Get()
	}
	if o.PortChannels != nil {
		toSerialize["PortChannels"] = o.PortChannels
	}
	if o.PortGroups != nil {
		toSerialize["PortGroups"] = o.PortGroups
	}
	if o.RegisteredDevice.IsSet() {
		toSerialize["RegisteredDevice"] = o.RegisteredDevice.Get()
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *EquipmentSwitchCard) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"ClassId",
		"ObjectType",
	}

	// defaultValueFuncMap captures the default values for required properties.
	// These values are used when required properties are missing from the payload.
	defaultValueFuncMap := map[string]func() interface{}{
		"ClassId":    o.GetDefaultClassId,
		"ObjectType": o.GetDefaultObjectType,
	}
	var defaultValueApplied bool
	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			if _, ok := defaultValueFuncMap[requiredProperty]; ok {
				allProperties[requiredProperty] = defaultValueFuncMap[requiredProperty]()
				defaultValueApplied = true
			}
		}
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	if defaultValueApplied {
		data, err = json.Marshal(allProperties)
		if err != nil {
			return err
		}
	}
	type EquipmentSwitchCardWithoutEmbeddedStruct struct {
		// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.
		ClassId string `json:"ClassId"`
		// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
		ObjectType string `json:"ObjectType"`
		// The starting (base) MAC address of the switch hardware like \"d0-e0-42-87-39-00\".
		BaseMac *string `json:"BaseMac,omitempty"`
		// Detailed description of this switch hardware.
		Description *string `json:"Description,omitempty"`
		// The ending MAC address of the switch hardware like \"d0-e0-42-87-39-5f\".
		EndMac *string `json:"EndMac,omitempty"`
		// The user configured Ethernet switching mode for this switch (End-Host or Switch). * `end-host` - In end-host mode, the fabric interconnects appear to the upstream devices as end hosts with multiple links.In this mode, the switch does not run Spanning Tree Protocol and avoids loops by following a set of rules for traffic forwarding.In case of ethernet switching mode - Ethernet end-host mode is also known as Ethernet host virtualizer. * `switch` - In switch mode, the switch runs Spanning Tree Protocol to avoid loops, and broadcast and multicast packets are handled in the traditional way.This is the traditional switch mode.
		EthernetSwitchingMode *string `json:"EthernetSwitchingMode,omitempty"`
		// The user configured FC switching mode for this switch (End-Host or Switch). * `end-host` - In end-host mode, the fabric interconnects appear to the upstream devices as end hosts with multiple links.In this mode, the switch does not run Spanning Tree Protocol and avoids loops by following a set of rules for traffic forwarding.In case of ethernet switching mode - Ethernet end-host mode is also known as Ethernet host virtualizer. * `switch` - In switch mode, the switch runs Spanning Tree Protocol to avoid loops, and broadcast and multicast packets are handled in the traditional way.This is the traditional switch mode.
		FcSwitchingMode *string `json:"FcSwitchingMode,omitempty"`
		// The Hardware version of the switch hardware.
		HwVersion *string `json:"HwVersion,omitempty"`
		// The name of the switch card like Line Card-1.
		Name *string `json:"Name,omitempty"`
		// Number of ports present in this switch hardware.
		NumPorts *int64 `json:"NumPorts,omitempty"`
		// Field specifies this Switch's Out-of-band IP address.
		OutOfBandIpAddress *string `json:"OutOfBandIpAddress,omitempty"`
		// Field specifies this Switch's default gateway for the out-of-band management interface.
		OutOfBandIpGateway *string `json:"OutOfBandIpGateway,omitempty"`
		// Field specifies the Netmask for this Switch's Out-of-band IP address.
		OutOfBandIpMask *string `json:"OutOfBandIpMask,omitempty"`
		// The MAC address of the Switch's out-of-band management interface.
		OutOfBandMac *string `json:"OutOfBandMac,omitempty"`
		// The part number of the switch hardware.
		PartNumber *string `json:"PartNumber,omitempty"`
		// Power state of the switch hardware. * `unknown` - The power state of the switch hardware is unknown. * `off` - The power state of the switch hardware is off. * `on` - The power state of the switch hardware is on. * `deny` - The power state of the switch hardware is deny. * `multi-boot-fail` - The power state of the switch hardware is multi-boot-fail.
		PowerState *string `json:"PowerState,omitempty"`
		// Slot identifier of the local Switch slot Interface.
		SlotId *int64 `json:"SlotId,omitempty"`
		// Operational state of the switch hardware.
		State *string `json:"State,omitempty"`
		// The connection status of the switch hardware like up/down. * `Down` - Connection status of the switch card is down. * `Up` - Connection status of the switch card is up.
		Status *string `json:"Status,omitempty"`
		// Switch Identifier that is local to a cluster.
		SwitchId *string `json:"SwitchId,omitempty"`
		// The Thermal status of the fabric interconnect. * `unknown` - The default state of the sensor (in case no data is received). * `ok` - State of the sensor indicating the sensor's temperature range is okay. * `upper-non-recoverable` - State of the sensor indicating that the temperature is extremely high above normal range. * `upper-critical` - State of the sensor indicating that the temperature is above normal range. * `upper-non-critical` - State of the sensor indicating that the temperature is a little above the normal range. * `lower-non-critical` - State of the sensor indicating that the temperature is a little below the normal range. * `lower-critical` - State of the sensor indicating that the temperature is below normal range. * `lower-non-recoverable` - State of the sensor indicating that the temperature is extremely below normal range.
		Thermal *string `json:"Thermal,omitempty"`
		// Type of the switch card based on the capability like 4 Gbps or 2 Gbps type etc.
		Type *string `json:"Type,omitempty"`
		// An array of relationships to fcPortChannel resources.
		FcPortChannels []FcPortChannelRelationship `json:"FcPortChannels,omitempty"`
		// An array of relationships to fcPhysicalPort resources.
		FcPorts             []FcPhysicalPortRelationship            `json:"FcPorts,omitempty"`
		InventoryDeviceInfo NullableInventoryDeviceInfoRelationship `json:"InventoryDeviceInfo,omitempty"`
		NetworkElement      NullableNetworkElementRelationship      `json:"NetworkElement,omitempty"`
		// An array of relationships to etherPortChannel resources.
		PortChannels []EtherPortChannelRelationship `json:"PortChannels,omitempty"`
		// An array of relationships to portGroup resources.
		PortGroups       []PortGroupRelationship                     `json:"PortGroups,omitempty"`
		RegisteredDevice NullableAssetDeviceRegistrationRelationship `json:"RegisteredDevice,omitempty"`
	}

	varEquipmentSwitchCardWithoutEmbeddedStruct := EquipmentSwitchCardWithoutEmbeddedStruct{}

	err = json.Unmarshal(data, &varEquipmentSwitchCardWithoutEmbeddedStruct)
	if err == nil {
		varEquipmentSwitchCard := _EquipmentSwitchCard{}
		varEquipmentSwitchCard.ClassId = varEquipmentSwitchCardWithoutEmbeddedStruct.ClassId
		varEquipmentSwitchCard.ObjectType = varEquipmentSwitchCardWithoutEmbeddedStruct.ObjectType
		varEquipmentSwitchCard.BaseMac = varEquipmentSwitchCardWithoutEmbeddedStruct.BaseMac
		varEquipmentSwitchCard.Description = varEquipmentSwitchCardWithoutEmbeddedStruct.Description
		varEquipmentSwitchCard.EndMac = varEquipmentSwitchCardWithoutEmbeddedStruct.EndMac
		varEquipmentSwitchCard.EthernetSwitchingMode = varEquipmentSwitchCardWithoutEmbeddedStruct.EthernetSwitchingMode
		varEquipmentSwitchCard.FcSwitchingMode = varEquipmentSwitchCardWithoutEmbeddedStruct.FcSwitchingMode
		varEquipmentSwitchCard.HwVersion = varEquipmentSwitchCardWithoutEmbeddedStruct.HwVersion
		varEquipmentSwitchCard.Name = varEquipmentSwitchCardWithoutEmbeddedStruct.Name
		varEquipmentSwitchCard.NumPorts = varEquipmentSwitchCardWithoutEmbeddedStruct.NumPorts
		varEquipmentSwitchCard.OutOfBandIpAddress = varEquipmentSwitchCardWithoutEmbeddedStruct.OutOfBandIpAddress
		varEquipmentSwitchCard.OutOfBandIpGateway = varEquipmentSwitchCardWithoutEmbeddedStruct.OutOfBandIpGateway
		varEquipmentSwitchCard.OutOfBandIpMask = varEquipmentSwitchCardWithoutEmbeddedStruct.OutOfBandIpMask
		varEquipmentSwitchCard.OutOfBandMac = varEquipmentSwitchCardWithoutEmbeddedStruct.OutOfBandMac
		varEquipmentSwitchCard.PartNumber = varEquipmentSwitchCardWithoutEmbeddedStruct.PartNumber
		varEquipmentSwitchCard.PowerState = varEquipmentSwitchCardWithoutEmbeddedStruct.PowerState
		varEquipmentSwitchCard.SlotId = varEquipmentSwitchCardWithoutEmbeddedStruct.SlotId
		varEquipmentSwitchCard.State = varEquipmentSwitchCardWithoutEmbeddedStruct.State
		varEquipmentSwitchCard.Status = varEquipmentSwitchCardWithoutEmbeddedStruct.Status
		varEquipmentSwitchCard.SwitchId = varEquipmentSwitchCardWithoutEmbeddedStruct.SwitchId
		varEquipmentSwitchCard.Thermal = varEquipmentSwitchCardWithoutEmbeddedStruct.Thermal
		varEquipmentSwitchCard.Type = varEquipmentSwitchCardWithoutEmbeddedStruct.Type
		varEquipmentSwitchCard.FcPortChannels = varEquipmentSwitchCardWithoutEmbeddedStruct.FcPortChannels
		varEquipmentSwitchCard.FcPorts = varEquipmentSwitchCardWithoutEmbeddedStruct.FcPorts
		varEquipmentSwitchCard.InventoryDeviceInfo = varEquipmentSwitchCardWithoutEmbeddedStruct.InventoryDeviceInfo
		varEquipmentSwitchCard.NetworkElement = varEquipmentSwitchCardWithoutEmbeddedStruct.NetworkElement
		varEquipmentSwitchCard.PortChannels = varEquipmentSwitchCardWithoutEmbeddedStruct.PortChannels
		varEquipmentSwitchCard.PortGroups = varEquipmentSwitchCardWithoutEmbeddedStruct.PortGroups
		varEquipmentSwitchCard.RegisteredDevice = varEquipmentSwitchCardWithoutEmbeddedStruct.RegisteredDevice
		*o = EquipmentSwitchCard(varEquipmentSwitchCard)
	} else {
		return err
	}

	varEquipmentSwitchCard := _EquipmentSwitchCard{}

	err = json.Unmarshal(data, &varEquipmentSwitchCard)
	if err == nil {
		o.EquipmentBase = varEquipmentSwitchCard.EquipmentBase
	} else {
		return err
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "ClassId")
		delete(additionalProperties, "ObjectType")
		delete(additionalProperties, "BaseMac")
		delete(additionalProperties, "Description")
		delete(additionalProperties, "EndMac")
		delete(additionalProperties, "EthernetSwitchingMode")
		delete(additionalProperties, "FcSwitchingMode")
		delete(additionalProperties, "HwVersion")
		delete(additionalProperties, "Name")
		delete(additionalProperties, "NumPorts")
		delete(additionalProperties, "OutOfBandIpAddress")
		delete(additionalProperties, "OutOfBandIpGateway")
		delete(additionalProperties, "OutOfBandIpMask")
		delete(additionalProperties, "OutOfBandMac")
		delete(additionalProperties, "PartNumber")
		delete(additionalProperties, "PowerState")
		delete(additionalProperties, "SlotId")
		delete(additionalProperties, "State")
		delete(additionalProperties, "Status")
		delete(additionalProperties, "SwitchId")
		delete(additionalProperties, "Thermal")
		delete(additionalProperties, "Type")
		delete(additionalProperties, "FcPortChannels")
		delete(additionalProperties, "FcPorts")
		delete(additionalProperties, "InventoryDeviceInfo")
		delete(additionalProperties, "NetworkElement")
		delete(additionalProperties, "PortChannels")
		delete(additionalProperties, "PortGroups")
		delete(additionalProperties, "RegisteredDevice")

		// remove fields from embedded structs
		reflectEquipmentBase := reflect.ValueOf(o.EquipmentBase)
		for i := 0; i < reflectEquipmentBase.Type().NumField(); i++ {
			t := reflectEquipmentBase.Type().Field(i)

			if jsonTag := t.Tag.Get("json"); jsonTag != "" {
				fieldName := ""
				if commaIdx := strings.Index(jsonTag, ","); commaIdx > 0 {
					fieldName = jsonTag[:commaIdx]
				} else {
					fieldName = jsonTag
				}
				if fieldName != "AdditionalProperties" {
					delete(additionalProperties, fieldName)
				}
			}
		}

		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableEquipmentSwitchCard struct {
	value *EquipmentSwitchCard
	isSet bool
}

func (v NullableEquipmentSwitchCard) Get() *EquipmentSwitchCard {
	return v.value
}

func (v *NullableEquipmentSwitchCard) Set(val *EquipmentSwitchCard) {
	v.value = val
	v.isSet = true
}

func (v NullableEquipmentSwitchCard) IsSet() bool {
	return v.isSet
}

func (v *NullableEquipmentSwitchCard) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEquipmentSwitchCard(val *EquipmentSwitchCard) *NullableEquipmentSwitchCard {
	return &NullableEquipmentSwitchCard{value: val, isSet: true}
}

func (v NullableEquipmentSwitchCard) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEquipmentSwitchCard) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
