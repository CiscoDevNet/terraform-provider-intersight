/*
Cisco Intersight

Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations. The Intersight OpenAPI document defines the complete set of properties that are returned in the HTTP response. From that perspective, a client can expect that no additional properties are returned, unless these properties are explicitly defined in the OpenAPI document. However, when a client uses an older version of the Intersight OpenAPI document, the server may send additional properties because the software is more recent than the client. In that case, the client may receive properties that it does not know about. Some generated SDKs perform a strict validation of the HTTP response body against the OpenAPI document.

API version: 1.0.11-18775
Contact: intersight@cisco.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package intersight

import (
	"encoding/json"
	"fmt"
	"reflect"
	"strings"
)

// checks if the VirtualizationBaseHostPciDevice type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VirtualizationBaseHostPciDevice{}

// VirtualizationBaseHostPciDevice Common attributes of a PCI device on a host.
type VirtualizationBaseHostPciDevice struct {
	VirtualizationBaseSourceDevice
	// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data. The enum values provides the list of concrete types that can be instantiated from this abstract type.
	ClassId string `json:"ClassId"`
	// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property. The enum values provides the list of concrete types that can be instantiated from this abstract type.
	ObjectType string `json:"ObjectType"`
	// The bus ID of this PCI device.
	Bus *int64 `json:"Bus,omitempty"`
	// The device ID of this PCI device.
	DeviceId *int64 `json:"DeviceId,omitempty"`
	// The device name of this PCI device.
	DeviceName *string `json:"DeviceName,omitempty"`
	// The function ID of this PCI device.
	Function *int64 `json:"Function,omitempty"`
	// The internally generated identity of this PCI device.
	Identity *string `json:"Identity,omitempty"`
	// Indicates if passthrough is active for this PCI device (meaning enabled + rebooted).
	PassthroughActive *bool `json:"PassthroughActive,omitempty"`
	// Indicates if passthrough feature is enabled for this PCI device. PCI passthrough feature enables you to access and manage hardware devices from a virtual machine. When PCI passthrough is configured, the PCI devices function as if they were physically attached to the guest operating system.
	PassthroughEnabled *bool `json:"PassthroughEnabled,omitempty"`
	// The class ID of this PCI device.
	PciClassId *int64 `json:"PciClassId,omitempty"`
	// The ID of this PCI device.
	PciId *string `json:"PciId,omitempty"`
	// The slot ID of this PCI device.
	Slot *int64 `json:"Slot,omitempty"`
	// The sub device ID of this PCI device.
	SubDeviceId *int64 `json:"SubDeviceId,omitempty"`
	// The sub vendor ID of this PCI device.
	SubVendorId *int64 `json:"SubVendorId,omitempty"`
	// The vendor ID of this PCI device.
	VendorId *int64 `json:"VendorId,omitempty"`
	// The vendor name of this PCI device.
	VendorName           *string                                       `json:"VendorName,omitempty"`
	Cluster              NullableVirtualizationBaseClusterRelationship `json:"Cluster,omitempty"`
	Host                 NullableVirtualizationBaseHostRelationship    `json:"Host,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _VirtualizationBaseHostPciDevice VirtualizationBaseHostPciDevice

// NewVirtualizationBaseHostPciDevice instantiates a new VirtualizationBaseHostPciDevice object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVirtualizationBaseHostPciDevice(classId string, objectType string) *VirtualizationBaseHostPciDevice {
	this := VirtualizationBaseHostPciDevice{}
	this.ClassId = classId
	this.ObjectType = objectType
	return &this
}

// NewVirtualizationBaseHostPciDeviceWithDefaults instantiates a new VirtualizationBaseHostPciDevice object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVirtualizationBaseHostPciDeviceWithDefaults() *VirtualizationBaseHostPciDevice {
	this := VirtualizationBaseHostPciDevice{}
	var classId string = "virtualization.VmwareHostGpu"
	this.ClassId = classId
	var objectType string = "virtualization.VmwareHostGpu"
	this.ObjectType = objectType
	return &this
}

// GetClassId returns the ClassId field value
func (o *VirtualizationBaseHostPciDevice) GetClassId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ClassId
}

// GetClassIdOk returns a tuple with the ClassId field value
// and a boolean to check if the value has been set.
func (o *VirtualizationBaseHostPciDevice) GetClassIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ClassId, true
}

// SetClassId sets field value
func (o *VirtualizationBaseHostPciDevice) SetClassId(v string) {
	o.ClassId = v
}

// GetDefaultClassId returns the default value "virtualization.VmwareHostGpu" of the ClassId field.
func (o *VirtualizationBaseHostPciDevice) GetDefaultClassId() interface{} {
	return "virtualization.VmwareHostGpu"
}

// GetObjectType returns the ObjectType field value
func (o *VirtualizationBaseHostPciDevice) GetObjectType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ObjectType
}

// GetObjectTypeOk returns a tuple with the ObjectType field value
// and a boolean to check if the value has been set.
func (o *VirtualizationBaseHostPciDevice) GetObjectTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ObjectType, true
}

// SetObjectType sets field value
func (o *VirtualizationBaseHostPciDevice) SetObjectType(v string) {
	o.ObjectType = v
}

// GetDefaultObjectType returns the default value "virtualization.VmwareHostGpu" of the ObjectType field.
func (o *VirtualizationBaseHostPciDevice) GetDefaultObjectType() interface{} {
	return "virtualization.VmwareHostGpu"
}

// GetBus returns the Bus field value if set, zero value otherwise.
func (o *VirtualizationBaseHostPciDevice) GetBus() int64 {
	if o == nil || IsNil(o.Bus) {
		var ret int64
		return ret
	}
	return *o.Bus
}

// GetBusOk returns a tuple with the Bus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualizationBaseHostPciDevice) GetBusOk() (*int64, bool) {
	if o == nil || IsNil(o.Bus) {
		return nil, false
	}
	return o.Bus, true
}

// HasBus returns a boolean if a field has been set.
func (o *VirtualizationBaseHostPciDevice) HasBus() bool {
	if o != nil && !IsNil(o.Bus) {
		return true
	}

	return false
}

// SetBus gets a reference to the given int64 and assigns it to the Bus field.
func (o *VirtualizationBaseHostPciDevice) SetBus(v int64) {
	o.Bus = &v
}

// GetDeviceId returns the DeviceId field value if set, zero value otherwise.
func (o *VirtualizationBaseHostPciDevice) GetDeviceId() int64 {
	if o == nil || IsNil(o.DeviceId) {
		var ret int64
		return ret
	}
	return *o.DeviceId
}

// GetDeviceIdOk returns a tuple with the DeviceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualizationBaseHostPciDevice) GetDeviceIdOk() (*int64, bool) {
	if o == nil || IsNil(o.DeviceId) {
		return nil, false
	}
	return o.DeviceId, true
}

// HasDeviceId returns a boolean if a field has been set.
func (o *VirtualizationBaseHostPciDevice) HasDeviceId() bool {
	if o != nil && !IsNil(o.DeviceId) {
		return true
	}

	return false
}

// SetDeviceId gets a reference to the given int64 and assigns it to the DeviceId field.
func (o *VirtualizationBaseHostPciDevice) SetDeviceId(v int64) {
	o.DeviceId = &v
}

// GetDeviceName returns the DeviceName field value if set, zero value otherwise.
func (o *VirtualizationBaseHostPciDevice) GetDeviceName() string {
	if o == nil || IsNil(o.DeviceName) {
		var ret string
		return ret
	}
	return *o.DeviceName
}

// GetDeviceNameOk returns a tuple with the DeviceName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualizationBaseHostPciDevice) GetDeviceNameOk() (*string, bool) {
	if o == nil || IsNil(o.DeviceName) {
		return nil, false
	}
	return o.DeviceName, true
}

// HasDeviceName returns a boolean if a field has been set.
func (o *VirtualizationBaseHostPciDevice) HasDeviceName() bool {
	if o != nil && !IsNil(o.DeviceName) {
		return true
	}

	return false
}

// SetDeviceName gets a reference to the given string and assigns it to the DeviceName field.
func (o *VirtualizationBaseHostPciDevice) SetDeviceName(v string) {
	o.DeviceName = &v
}

// GetFunction returns the Function field value if set, zero value otherwise.
func (o *VirtualizationBaseHostPciDevice) GetFunction() int64 {
	if o == nil || IsNil(o.Function) {
		var ret int64
		return ret
	}
	return *o.Function
}

// GetFunctionOk returns a tuple with the Function field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualizationBaseHostPciDevice) GetFunctionOk() (*int64, bool) {
	if o == nil || IsNil(o.Function) {
		return nil, false
	}
	return o.Function, true
}

// HasFunction returns a boolean if a field has been set.
func (o *VirtualizationBaseHostPciDevice) HasFunction() bool {
	if o != nil && !IsNil(o.Function) {
		return true
	}

	return false
}

// SetFunction gets a reference to the given int64 and assigns it to the Function field.
func (o *VirtualizationBaseHostPciDevice) SetFunction(v int64) {
	o.Function = &v
}

// GetIdentity returns the Identity field value if set, zero value otherwise.
func (o *VirtualizationBaseHostPciDevice) GetIdentity() string {
	if o == nil || IsNil(o.Identity) {
		var ret string
		return ret
	}
	return *o.Identity
}

// GetIdentityOk returns a tuple with the Identity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualizationBaseHostPciDevice) GetIdentityOk() (*string, bool) {
	if o == nil || IsNil(o.Identity) {
		return nil, false
	}
	return o.Identity, true
}

// HasIdentity returns a boolean if a field has been set.
func (o *VirtualizationBaseHostPciDevice) HasIdentity() bool {
	if o != nil && !IsNil(o.Identity) {
		return true
	}

	return false
}

// SetIdentity gets a reference to the given string and assigns it to the Identity field.
func (o *VirtualizationBaseHostPciDevice) SetIdentity(v string) {
	o.Identity = &v
}

// GetPassthroughActive returns the PassthroughActive field value if set, zero value otherwise.
func (o *VirtualizationBaseHostPciDevice) GetPassthroughActive() bool {
	if o == nil || IsNil(o.PassthroughActive) {
		var ret bool
		return ret
	}
	return *o.PassthroughActive
}

// GetPassthroughActiveOk returns a tuple with the PassthroughActive field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualizationBaseHostPciDevice) GetPassthroughActiveOk() (*bool, bool) {
	if o == nil || IsNil(o.PassthroughActive) {
		return nil, false
	}
	return o.PassthroughActive, true
}

// HasPassthroughActive returns a boolean if a field has been set.
func (o *VirtualizationBaseHostPciDevice) HasPassthroughActive() bool {
	if o != nil && !IsNil(o.PassthroughActive) {
		return true
	}

	return false
}

// SetPassthroughActive gets a reference to the given bool and assigns it to the PassthroughActive field.
func (o *VirtualizationBaseHostPciDevice) SetPassthroughActive(v bool) {
	o.PassthroughActive = &v
}

// GetPassthroughEnabled returns the PassthroughEnabled field value if set, zero value otherwise.
func (o *VirtualizationBaseHostPciDevice) GetPassthroughEnabled() bool {
	if o == nil || IsNil(o.PassthroughEnabled) {
		var ret bool
		return ret
	}
	return *o.PassthroughEnabled
}

// GetPassthroughEnabledOk returns a tuple with the PassthroughEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualizationBaseHostPciDevice) GetPassthroughEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.PassthroughEnabled) {
		return nil, false
	}
	return o.PassthroughEnabled, true
}

// HasPassthroughEnabled returns a boolean if a field has been set.
func (o *VirtualizationBaseHostPciDevice) HasPassthroughEnabled() bool {
	if o != nil && !IsNil(o.PassthroughEnabled) {
		return true
	}

	return false
}

// SetPassthroughEnabled gets a reference to the given bool and assigns it to the PassthroughEnabled field.
func (o *VirtualizationBaseHostPciDevice) SetPassthroughEnabled(v bool) {
	o.PassthroughEnabled = &v
}

// GetPciClassId returns the PciClassId field value if set, zero value otherwise.
func (o *VirtualizationBaseHostPciDevice) GetPciClassId() int64 {
	if o == nil || IsNil(o.PciClassId) {
		var ret int64
		return ret
	}
	return *o.PciClassId
}

// GetPciClassIdOk returns a tuple with the PciClassId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualizationBaseHostPciDevice) GetPciClassIdOk() (*int64, bool) {
	if o == nil || IsNil(o.PciClassId) {
		return nil, false
	}
	return o.PciClassId, true
}

// HasPciClassId returns a boolean if a field has been set.
func (o *VirtualizationBaseHostPciDevice) HasPciClassId() bool {
	if o != nil && !IsNil(o.PciClassId) {
		return true
	}

	return false
}

// SetPciClassId gets a reference to the given int64 and assigns it to the PciClassId field.
func (o *VirtualizationBaseHostPciDevice) SetPciClassId(v int64) {
	o.PciClassId = &v
}

// GetPciId returns the PciId field value if set, zero value otherwise.
func (o *VirtualizationBaseHostPciDevice) GetPciId() string {
	if o == nil || IsNil(o.PciId) {
		var ret string
		return ret
	}
	return *o.PciId
}

// GetPciIdOk returns a tuple with the PciId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualizationBaseHostPciDevice) GetPciIdOk() (*string, bool) {
	if o == nil || IsNil(o.PciId) {
		return nil, false
	}
	return o.PciId, true
}

// HasPciId returns a boolean if a field has been set.
func (o *VirtualizationBaseHostPciDevice) HasPciId() bool {
	if o != nil && !IsNil(o.PciId) {
		return true
	}

	return false
}

// SetPciId gets a reference to the given string and assigns it to the PciId field.
func (o *VirtualizationBaseHostPciDevice) SetPciId(v string) {
	o.PciId = &v
}

// GetSlot returns the Slot field value if set, zero value otherwise.
func (o *VirtualizationBaseHostPciDevice) GetSlot() int64 {
	if o == nil || IsNil(o.Slot) {
		var ret int64
		return ret
	}
	return *o.Slot
}

// GetSlotOk returns a tuple with the Slot field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualizationBaseHostPciDevice) GetSlotOk() (*int64, bool) {
	if o == nil || IsNil(o.Slot) {
		return nil, false
	}
	return o.Slot, true
}

// HasSlot returns a boolean if a field has been set.
func (o *VirtualizationBaseHostPciDevice) HasSlot() bool {
	if o != nil && !IsNil(o.Slot) {
		return true
	}

	return false
}

// SetSlot gets a reference to the given int64 and assigns it to the Slot field.
func (o *VirtualizationBaseHostPciDevice) SetSlot(v int64) {
	o.Slot = &v
}

// GetSubDeviceId returns the SubDeviceId field value if set, zero value otherwise.
func (o *VirtualizationBaseHostPciDevice) GetSubDeviceId() int64 {
	if o == nil || IsNil(o.SubDeviceId) {
		var ret int64
		return ret
	}
	return *o.SubDeviceId
}

// GetSubDeviceIdOk returns a tuple with the SubDeviceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualizationBaseHostPciDevice) GetSubDeviceIdOk() (*int64, bool) {
	if o == nil || IsNil(o.SubDeviceId) {
		return nil, false
	}
	return o.SubDeviceId, true
}

// HasSubDeviceId returns a boolean if a field has been set.
func (o *VirtualizationBaseHostPciDevice) HasSubDeviceId() bool {
	if o != nil && !IsNil(o.SubDeviceId) {
		return true
	}

	return false
}

// SetSubDeviceId gets a reference to the given int64 and assigns it to the SubDeviceId field.
func (o *VirtualizationBaseHostPciDevice) SetSubDeviceId(v int64) {
	o.SubDeviceId = &v
}

// GetSubVendorId returns the SubVendorId field value if set, zero value otherwise.
func (o *VirtualizationBaseHostPciDevice) GetSubVendorId() int64 {
	if o == nil || IsNil(o.SubVendorId) {
		var ret int64
		return ret
	}
	return *o.SubVendorId
}

// GetSubVendorIdOk returns a tuple with the SubVendorId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualizationBaseHostPciDevice) GetSubVendorIdOk() (*int64, bool) {
	if o == nil || IsNil(o.SubVendorId) {
		return nil, false
	}
	return o.SubVendorId, true
}

// HasSubVendorId returns a boolean if a field has been set.
func (o *VirtualizationBaseHostPciDevice) HasSubVendorId() bool {
	if o != nil && !IsNil(o.SubVendorId) {
		return true
	}

	return false
}

// SetSubVendorId gets a reference to the given int64 and assigns it to the SubVendorId field.
func (o *VirtualizationBaseHostPciDevice) SetSubVendorId(v int64) {
	o.SubVendorId = &v
}

// GetVendorId returns the VendorId field value if set, zero value otherwise.
func (o *VirtualizationBaseHostPciDevice) GetVendorId() int64 {
	if o == nil || IsNil(o.VendorId) {
		var ret int64
		return ret
	}
	return *o.VendorId
}

// GetVendorIdOk returns a tuple with the VendorId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualizationBaseHostPciDevice) GetVendorIdOk() (*int64, bool) {
	if o == nil || IsNil(o.VendorId) {
		return nil, false
	}
	return o.VendorId, true
}

// HasVendorId returns a boolean if a field has been set.
func (o *VirtualizationBaseHostPciDevice) HasVendorId() bool {
	if o != nil && !IsNil(o.VendorId) {
		return true
	}

	return false
}

// SetVendorId gets a reference to the given int64 and assigns it to the VendorId field.
func (o *VirtualizationBaseHostPciDevice) SetVendorId(v int64) {
	o.VendorId = &v
}

// GetVendorName returns the VendorName field value if set, zero value otherwise.
func (o *VirtualizationBaseHostPciDevice) GetVendorName() string {
	if o == nil || IsNil(o.VendorName) {
		var ret string
		return ret
	}
	return *o.VendorName
}

// GetVendorNameOk returns a tuple with the VendorName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualizationBaseHostPciDevice) GetVendorNameOk() (*string, bool) {
	if o == nil || IsNil(o.VendorName) {
		return nil, false
	}
	return o.VendorName, true
}

// HasVendorName returns a boolean if a field has been set.
func (o *VirtualizationBaseHostPciDevice) HasVendorName() bool {
	if o != nil && !IsNil(o.VendorName) {
		return true
	}

	return false
}

// SetVendorName gets a reference to the given string and assigns it to the VendorName field.
func (o *VirtualizationBaseHostPciDevice) SetVendorName(v string) {
	o.VendorName = &v
}

// GetCluster returns the Cluster field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VirtualizationBaseHostPciDevice) GetCluster() VirtualizationBaseClusterRelationship {
	if o == nil || IsNil(o.Cluster.Get()) {
		var ret VirtualizationBaseClusterRelationship
		return ret
	}
	return *o.Cluster.Get()
}

// GetClusterOk returns a tuple with the Cluster field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VirtualizationBaseHostPciDevice) GetClusterOk() (*VirtualizationBaseClusterRelationship, bool) {
	if o == nil {
		return nil, false
	}
	return o.Cluster.Get(), o.Cluster.IsSet()
}

// HasCluster returns a boolean if a field has been set.
func (o *VirtualizationBaseHostPciDevice) HasCluster() bool {
	if o != nil && o.Cluster.IsSet() {
		return true
	}

	return false
}

// SetCluster gets a reference to the given NullableVirtualizationBaseClusterRelationship and assigns it to the Cluster field.
func (o *VirtualizationBaseHostPciDevice) SetCluster(v VirtualizationBaseClusterRelationship) {
	o.Cluster.Set(&v)
}

// SetClusterNil sets the value for Cluster to be an explicit nil
func (o *VirtualizationBaseHostPciDevice) SetClusterNil() {
	o.Cluster.Set(nil)
}

// UnsetCluster ensures that no value is present for Cluster, not even an explicit nil
func (o *VirtualizationBaseHostPciDevice) UnsetCluster() {
	o.Cluster.Unset()
}

// GetHost returns the Host field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VirtualizationBaseHostPciDevice) GetHost() VirtualizationBaseHostRelationship {
	if o == nil || IsNil(o.Host.Get()) {
		var ret VirtualizationBaseHostRelationship
		return ret
	}
	return *o.Host.Get()
}

// GetHostOk returns a tuple with the Host field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VirtualizationBaseHostPciDevice) GetHostOk() (*VirtualizationBaseHostRelationship, bool) {
	if o == nil {
		return nil, false
	}
	return o.Host.Get(), o.Host.IsSet()
}

// HasHost returns a boolean if a field has been set.
func (o *VirtualizationBaseHostPciDevice) HasHost() bool {
	if o != nil && o.Host.IsSet() {
		return true
	}

	return false
}

// SetHost gets a reference to the given NullableVirtualizationBaseHostRelationship and assigns it to the Host field.
func (o *VirtualizationBaseHostPciDevice) SetHost(v VirtualizationBaseHostRelationship) {
	o.Host.Set(&v)
}

// SetHostNil sets the value for Host to be an explicit nil
func (o *VirtualizationBaseHostPciDevice) SetHostNil() {
	o.Host.Set(nil)
}

// UnsetHost ensures that no value is present for Host, not even an explicit nil
func (o *VirtualizationBaseHostPciDevice) UnsetHost() {
	o.Host.Unset()
}

func (o VirtualizationBaseHostPciDevice) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VirtualizationBaseHostPciDevice) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	serializedVirtualizationBaseSourceDevice, errVirtualizationBaseSourceDevice := json.Marshal(o.VirtualizationBaseSourceDevice)
	if errVirtualizationBaseSourceDevice != nil {
		return map[string]interface{}{}, errVirtualizationBaseSourceDevice
	}
	errVirtualizationBaseSourceDevice = json.Unmarshal([]byte(serializedVirtualizationBaseSourceDevice), &toSerialize)
	if errVirtualizationBaseSourceDevice != nil {
		return map[string]interface{}{}, errVirtualizationBaseSourceDevice
	}
	if _, exists := toSerialize["ClassId"]; !exists {
		toSerialize["ClassId"] = o.GetDefaultClassId()
	}
	toSerialize["ClassId"] = o.ClassId
	if _, exists := toSerialize["ObjectType"]; !exists {
		toSerialize["ObjectType"] = o.GetDefaultObjectType()
	}
	toSerialize["ObjectType"] = o.ObjectType
	if !IsNil(o.Bus) {
		toSerialize["Bus"] = o.Bus
	}
	if !IsNil(o.DeviceId) {
		toSerialize["DeviceId"] = o.DeviceId
	}
	if !IsNil(o.DeviceName) {
		toSerialize["DeviceName"] = o.DeviceName
	}
	if !IsNil(o.Function) {
		toSerialize["Function"] = o.Function
	}
	if !IsNil(o.Identity) {
		toSerialize["Identity"] = o.Identity
	}
	if !IsNil(o.PassthroughActive) {
		toSerialize["PassthroughActive"] = o.PassthroughActive
	}
	if !IsNil(o.PassthroughEnabled) {
		toSerialize["PassthroughEnabled"] = o.PassthroughEnabled
	}
	if !IsNil(o.PciClassId) {
		toSerialize["PciClassId"] = o.PciClassId
	}
	if !IsNil(o.PciId) {
		toSerialize["PciId"] = o.PciId
	}
	if !IsNil(o.Slot) {
		toSerialize["Slot"] = o.Slot
	}
	if !IsNil(o.SubDeviceId) {
		toSerialize["SubDeviceId"] = o.SubDeviceId
	}
	if !IsNil(o.SubVendorId) {
		toSerialize["SubVendorId"] = o.SubVendorId
	}
	if !IsNil(o.VendorId) {
		toSerialize["VendorId"] = o.VendorId
	}
	if !IsNil(o.VendorName) {
		toSerialize["VendorName"] = o.VendorName
	}
	if o.Cluster.IsSet() {
		toSerialize["Cluster"] = o.Cluster.Get()
	}
	if o.Host.IsSet() {
		toSerialize["Host"] = o.Host.Get()
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *VirtualizationBaseHostPciDevice) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"ClassId",
		"ObjectType",
	}

	// defaultValueFuncMap captures the default values for required properties.
	// These values are used when required properties are missing from the payload.
	defaultValueFuncMap := map[string]func() interface{}{
		"ClassId":    o.GetDefaultClassId,
		"ObjectType": o.GetDefaultObjectType,
	}
	var defaultValueApplied bool
	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			if _, ok := defaultValueFuncMap[requiredProperty]; ok {
				allProperties[requiredProperty] = defaultValueFuncMap[requiredProperty]()
				defaultValueApplied = true
			}
		}
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	if defaultValueApplied {
		data, err = json.Marshal(allProperties)
		if err != nil {
			return err
		}
	}
	type VirtualizationBaseHostPciDeviceWithoutEmbeddedStruct struct {
		// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data. The enum values provides the list of concrete types that can be instantiated from this abstract type.
		ClassId string `json:"ClassId"`
		// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property. The enum values provides the list of concrete types that can be instantiated from this abstract type.
		ObjectType string `json:"ObjectType"`
		// The bus ID of this PCI device.
		Bus *int64 `json:"Bus,omitempty"`
		// The device ID of this PCI device.
		DeviceId *int64 `json:"DeviceId,omitempty"`
		// The device name of this PCI device.
		DeviceName *string `json:"DeviceName,omitempty"`
		// The function ID of this PCI device.
		Function *int64 `json:"Function,omitempty"`
		// The internally generated identity of this PCI device.
		Identity *string `json:"Identity,omitempty"`
		// Indicates if passthrough is active for this PCI device (meaning enabled + rebooted).
		PassthroughActive *bool `json:"PassthroughActive,omitempty"`
		// Indicates if passthrough feature is enabled for this PCI device. PCI passthrough feature enables you to access and manage hardware devices from a virtual machine. When PCI passthrough is configured, the PCI devices function as if they were physically attached to the guest operating system.
		PassthroughEnabled *bool `json:"PassthroughEnabled,omitempty"`
		// The class ID of this PCI device.
		PciClassId *int64 `json:"PciClassId,omitempty"`
		// The ID of this PCI device.
		PciId *string `json:"PciId,omitempty"`
		// The slot ID of this PCI device.
		Slot *int64 `json:"Slot,omitempty"`
		// The sub device ID of this PCI device.
		SubDeviceId *int64 `json:"SubDeviceId,omitempty"`
		// The sub vendor ID of this PCI device.
		SubVendorId *int64 `json:"SubVendorId,omitempty"`
		// The vendor ID of this PCI device.
		VendorId *int64 `json:"VendorId,omitempty"`
		// The vendor name of this PCI device.
		VendorName *string                                       `json:"VendorName,omitempty"`
		Cluster    NullableVirtualizationBaseClusterRelationship `json:"Cluster,omitempty"`
		Host       NullableVirtualizationBaseHostRelationship    `json:"Host,omitempty"`
	}

	varVirtualizationBaseHostPciDeviceWithoutEmbeddedStruct := VirtualizationBaseHostPciDeviceWithoutEmbeddedStruct{}

	err = json.Unmarshal(data, &varVirtualizationBaseHostPciDeviceWithoutEmbeddedStruct)
	if err == nil {
		varVirtualizationBaseHostPciDevice := _VirtualizationBaseHostPciDevice{}
		varVirtualizationBaseHostPciDevice.ClassId = varVirtualizationBaseHostPciDeviceWithoutEmbeddedStruct.ClassId
		varVirtualizationBaseHostPciDevice.ObjectType = varVirtualizationBaseHostPciDeviceWithoutEmbeddedStruct.ObjectType
		varVirtualizationBaseHostPciDevice.Bus = varVirtualizationBaseHostPciDeviceWithoutEmbeddedStruct.Bus
		varVirtualizationBaseHostPciDevice.DeviceId = varVirtualizationBaseHostPciDeviceWithoutEmbeddedStruct.DeviceId
		varVirtualizationBaseHostPciDevice.DeviceName = varVirtualizationBaseHostPciDeviceWithoutEmbeddedStruct.DeviceName
		varVirtualizationBaseHostPciDevice.Function = varVirtualizationBaseHostPciDeviceWithoutEmbeddedStruct.Function
		varVirtualizationBaseHostPciDevice.Identity = varVirtualizationBaseHostPciDeviceWithoutEmbeddedStruct.Identity
		varVirtualizationBaseHostPciDevice.PassthroughActive = varVirtualizationBaseHostPciDeviceWithoutEmbeddedStruct.PassthroughActive
		varVirtualizationBaseHostPciDevice.PassthroughEnabled = varVirtualizationBaseHostPciDeviceWithoutEmbeddedStruct.PassthroughEnabled
		varVirtualizationBaseHostPciDevice.PciClassId = varVirtualizationBaseHostPciDeviceWithoutEmbeddedStruct.PciClassId
		varVirtualizationBaseHostPciDevice.PciId = varVirtualizationBaseHostPciDeviceWithoutEmbeddedStruct.PciId
		varVirtualizationBaseHostPciDevice.Slot = varVirtualizationBaseHostPciDeviceWithoutEmbeddedStruct.Slot
		varVirtualizationBaseHostPciDevice.SubDeviceId = varVirtualizationBaseHostPciDeviceWithoutEmbeddedStruct.SubDeviceId
		varVirtualizationBaseHostPciDevice.SubVendorId = varVirtualizationBaseHostPciDeviceWithoutEmbeddedStruct.SubVendorId
		varVirtualizationBaseHostPciDevice.VendorId = varVirtualizationBaseHostPciDeviceWithoutEmbeddedStruct.VendorId
		varVirtualizationBaseHostPciDevice.VendorName = varVirtualizationBaseHostPciDeviceWithoutEmbeddedStruct.VendorName
		varVirtualizationBaseHostPciDevice.Cluster = varVirtualizationBaseHostPciDeviceWithoutEmbeddedStruct.Cluster
		varVirtualizationBaseHostPciDevice.Host = varVirtualizationBaseHostPciDeviceWithoutEmbeddedStruct.Host
		*o = VirtualizationBaseHostPciDevice(varVirtualizationBaseHostPciDevice)
	} else {
		return err
	}

	varVirtualizationBaseHostPciDevice := _VirtualizationBaseHostPciDevice{}

	err = json.Unmarshal(data, &varVirtualizationBaseHostPciDevice)
	if err == nil {
		o.VirtualizationBaseSourceDevice = varVirtualizationBaseHostPciDevice.VirtualizationBaseSourceDevice
	} else {
		return err
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "ClassId")
		delete(additionalProperties, "ObjectType")
		delete(additionalProperties, "Bus")
		delete(additionalProperties, "DeviceId")
		delete(additionalProperties, "DeviceName")
		delete(additionalProperties, "Function")
		delete(additionalProperties, "Identity")
		delete(additionalProperties, "PassthroughActive")
		delete(additionalProperties, "PassthroughEnabled")
		delete(additionalProperties, "PciClassId")
		delete(additionalProperties, "PciId")
		delete(additionalProperties, "Slot")
		delete(additionalProperties, "SubDeviceId")
		delete(additionalProperties, "SubVendorId")
		delete(additionalProperties, "VendorId")
		delete(additionalProperties, "VendorName")
		delete(additionalProperties, "Cluster")
		delete(additionalProperties, "Host")

		// remove fields from embedded structs
		reflectVirtualizationBaseSourceDevice := reflect.ValueOf(o.VirtualizationBaseSourceDevice)
		for i := 0; i < reflectVirtualizationBaseSourceDevice.Type().NumField(); i++ {
			t := reflectVirtualizationBaseSourceDevice.Type().Field(i)

			if jsonTag := t.Tag.Get("json"); jsonTag != "" {
				fieldName := ""
				if commaIdx := strings.Index(jsonTag, ","); commaIdx > 0 {
					fieldName = jsonTag[:commaIdx]
				} else {
					fieldName = jsonTag
				}
				if fieldName != "AdditionalProperties" {
					delete(additionalProperties, fieldName)
				}
			}
		}

		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableVirtualizationBaseHostPciDevice struct {
	value *VirtualizationBaseHostPciDevice
	isSet bool
}

func (v NullableVirtualizationBaseHostPciDevice) Get() *VirtualizationBaseHostPciDevice {
	return v.value
}

func (v *NullableVirtualizationBaseHostPciDevice) Set(val *VirtualizationBaseHostPciDevice) {
	v.value = val
	v.isSet = true
}

func (v NullableVirtualizationBaseHostPciDevice) IsSet() bool {
	return v.isSet
}

func (v *NullableVirtualizationBaseHostPciDevice) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVirtualizationBaseHostPciDevice(val *VirtualizationBaseHostPciDevice) *NullableVirtualizationBaseHostPciDevice {
	return &NullableVirtualizationBaseHostPciDevice{value: val, isSet: true}
}

func (v NullableVirtualizationBaseHostPciDevice) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVirtualizationBaseHostPciDevice) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
