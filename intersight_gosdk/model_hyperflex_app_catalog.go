/*
Cisco Intersight

Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations. The Intersight OpenAPI document defines the complete set of properties that are returned in the HTTP response. From that perspective, a client can expect that no additional properties are returned, unless these properties are explicitly defined in the OpenAPI document. However, when a client uses an older version of the Intersight OpenAPI document, the server may send additional properties because the software is more recent than the client. In that case, the client may receive properties that it does not know about. Some generated SDKs perform a strict validation of the HTTP response body against the OpenAPI document.

API version: 1.0.11-18775
Contact: intersight@cisco.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package intersight

import (
	"encoding/json"
	"fmt"
	"reflect"
	"strings"
)

// checks if the HyperflexAppCatalog type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &HyperflexAppCatalog{}

// HyperflexAppCatalog A catalog for managing application settings for HyperFlex cluster configuration service.
type HyperflexAppCatalog struct {
	MoBaseMo
	// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.
	ClassId string `json:"ClassId"`
	// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
	ObjectType string `json:"ObjectType"`
	// The catalog version used in HyperFlex cluster configuration service.
	Version              *string                                           `json:"Version,omitempty"`
	FeatureLimitExternal NullableHyperflexFeatureLimitExternalRelationship `json:"FeatureLimitExternal,omitempty"`
	FeatureLimitInternal NullableHyperflexFeatureLimitInternalRelationship `json:"FeatureLimitInternal,omitempty"`
	// An array of relationships to hyperflexHxdpVersion resources.
	HxdpVersions []HyperflexHxdpVersionRelationship `json:"HxdpVersions,omitempty"`
	// An array of relationships to hyperflexCapabilityInfo resources.
	HyperflexCapabilityInfos []HyperflexCapabilityInfoRelationship `json:"HyperflexCapabilityInfos,omitempty"`
	// An array of relationships to hclHyperflexSoftwareCompatibilityInfo resources.
	HyperflexSoftwareCompatibilityInfos []HclHyperflexSoftwareCompatibilityInfoRelationship `json:"HyperflexSoftwareCompatibilityInfos,omitempty"`
	ServerFirmwareVersion               NullableHyperflexServerFirmwareVersionRelationship  `json:"ServerFirmwareVersion,omitempty"`
	ServerModel                         NullableHyperflexServerModelRelationship            `json:"ServerModel,omitempty"`
	// An array of relationships to hyperflexSoftwareDistributionEntry resources.
	SoftwareDistributions []HyperflexSoftwareDistributionEntryRelationship `json:"SoftwareDistributions,omitempty"`
	AdditionalProperties  map[string]interface{}
}

type _HyperflexAppCatalog HyperflexAppCatalog

// NewHyperflexAppCatalog instantiates a new HyperflexAppCatalog object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHyperflexAppCatalog(classId string, objectType string) *HyperflexAppCatalog {
	this := HyperflexAppCatalog{}
	this.ClassId = classId
	this.ObjectType = objectType
	return &this
}

// NewHyperflexAppCatalogWithDefaults instantiates a new HyperflexAppCatalog object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHyperflexAppCatalogWithDefaults() *HyperflexAppCatalog {
	this := HyperflexAppCatalog{}
	var classId string = "hyperflex.AppCatalog"
	this.ClassId = classId
	var objectType string = "hyperflex.AppCatalog"
	this.ObjectType = objectType
	return &this
}

// GetClassId returns the ClassId field value
func (o *HyperflexAppCatalog) GetClassId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ClassId
}

// GetClassIdOk returns a tuple with the ClassId field value
// and a boolean to check if the value has been set.
func (o *HyperflexAppCatalog) GetClassIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ClassId, true
}

// SetClassId sets field value
func (o *HyperflexAppCatalog) SetClassId(v string) {
	o.ClassId = v
}

// GetDefaultClassId returns the default value "hyperflex.AppCatalog" of the ClassId field.
func (o *HyperflexAppCatalog) GetDefaultClassId() interface{} {
	return "hyperflex.AppCatalog"
}

// GetObjectType returns the ObjectType field value
func (o *HyperflexAppCatalog) GetObjectType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ObjectType
}

// GetObjectTypeOk returns a tuple with the ObjectType field value
// and a boolean to check if the value has been set.
func (o *HyperflexAppCatalog) GetObjectTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ObjectType, true
}

// SetObjectType sets field value
func (o *HyperflexAppCatalog) SetObjectType(v string) {
	o.ObjectType = v
}

// GetDefaultObjectType returns the default value "hyperflex.AppCatalog" of the ObjectType field.
func (o *HyperflexAppCatalog) GetDefaultObjectType() interface{} {
	return "hyperflex.AppCatalog"
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *HyperflexAppCatalog) GetVersion() string {
	if o == nil || IsNil(o.Version) {
		var ret string
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HyperflexAppCatalog) GetVersionOk() (*string, bool) {
	if o == nil || IsNil(o.Version) {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *HyperflexAppCatalog) HasVersion() bool {
	if o != nil && !IsNil(o.Version) {
		return true
	}

	return false
}

// SetVersion gets a reference to the given string and assigns it to the Version field.
func (o *HyperflexAppCatalog) SetVersion(v string) {
	o.Version = &v
}

// GetFeatureLimitExternal returns the FeatureLimitExternal field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HyperflexAppCatalog) GetFeatureLimitExternal() HyperflexFeatureLimitExternalRelationship {
	if o == nil || IsNil(o.FeatureLimitExternal.Get()) {
		var ret HyperflexFeatureLimitExternalRelationship
		return ret
	}
	return *o.FeatureLimitExternal.Get()
}

// GetFeatureLimitExternalOk returns a tuple with the FeatureLimitExternal field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HyperflexAppCatalog) GetFeatureLimitExternalOk() (*HyperflexFeatureLimitExternalRelationship, bool) {
	if o == nil {
		return nil, false
	}
	return o.FeatureLimitExternal.Get(), o.FeatureLimitExternal.IsSet()
}

// HasFeatureLimitExternal returns a boolean if a field has been set.
func (o *HyperflexAppCatalog) HasFeatureLimitExternal() bool {
	if o != nil && o.FeatureLimitExternal.IsSet() {
		return true
	}

	return false
}

// SetFeatureLimitExternal gets a reference to the given NullableHyperflexFeatureLimitExternalRelationship and assigns it to the FeatureLimitExternal field.
func (o *HyperflexAppCatalog) SetFeatureLimitExternal(v HyperflexFeatureLimitExternalRelationship) {
	o.FeatureLimitExternal.Set(&v)
}

// SetFeatureLimitExternalNil sets the value for FeatureLimitExternal to be an explicit nil
func (o *HyperflexAppCatalog) SetFeatureLimitExternalNil() {
	o.FeatureLimitExternal.Set(nil)
}

// UnsetFeatureLimitExternal ensures that no value is present for FeatureLimitExternal, not even an explicit nil
func (o *HyperflexAppCatalog) UnsetFeatureLimitExternal() {
	o.FeatureLimitExternal.Unset()
}

// GetFeatureLimitInternal returns the FeatureLimitInternal field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HyperflexAppCatalog) GetFeatureLimitInternal() HyperflexFeatureLimitInternalRelationship {
	if o == nil || IsNil(o.FeatureLimitInternal.Get()) {
		var ret HyperflexFeatureLimitInternalRelationship
		return ret
	}
	return *o.FeatureLimitInternal.Get()
}

// GetFeatureLimitInternalOk returns a tuple with the FeatureLimitInternal field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HyperflexAppCatalog) GetFeatureLimitInternalOk() (*HyperflexFeatureLimitInternalRelationship, bool) {
	if o == nil {
		return nil, false
	}
	return o.FeatureLimitInternal.Get(), o.FeatureLimitInternal.IsSet()
}

// HasFeatureLimitInternal returns a boolean if a field has been set.
func (o *HyperflexAppCatalog) HasFeatureLimitInternal() bool {
	if o != nil && o.FeatureLimitInternal.IsSet() {
		return true
	}

	return false
}

// SetFeatureLimitInternal gets a reference to the given NullableHyperflexFeatureLimitInternalRelationship and assigns it to the FeatureLimitInternal field.
func (o *HyperflexAppCatalog) SetFeatureLimitInternal(v HyperflexFeatureLimitInternalRelationship) {
	o.FeatureLimitInternal.Set(&v)
}

// SetFeatureLimitInternalNil sets the value for FeatureLimitInternal to be an explicit nil
func (o *HyperflexAppCatalog) SetFeatureLimitInternalNil() {
	o.FeatureLimitInternal.Set(nil)
}

// UnsetFeatureLimitInternal ensures that no value is present for FeatureLimitInternal, not even an explicit nil
func (o *HyperflexAppCatalog) UnsetFeatureLimitInternal() {
	o.FeatureLimitInternal.Unset()
}

// GetHxdpVersions returns the HxdpVersions field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HyperflexAppCatalog) GetHxdpVersions() []HyperflexHxdpVersionRelationship {
	if o == nil {
		var ret []HyperflexHxdpVersionRelationship
		return ret
	}
	return o.HxdpVersions
}

// GetHxdpVersionsOk returns a tuple with the HxdpVersions field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HyperflexAppCatalog) GetHxdpVersionsOk() ([]HyperflexHxdpVersionRelationship, bool) {
	if o == nil || IsNil(o.HxdpVersions) {
		return nil, false
	}
	return o.HxdpVersions, true
}

// HasHxdpVersions returns a boolean if a field has been set.
func (o *HyperflexAppCatalog) HasHxdpVersions() bool {
	if o != nil && !IsNil(o.HxdpVersions) {
		return true
	}

	return false
}

// SetHxdpVersions gets a reference to the given []HyperflexHxdpVersionRelationship and assigns it to the HxdpVersions field.
func (o *HyperflexAppCatalog) SetHxdpVersions(v []HyperflexHxdpVersionRelationship) {
	o.HxdpVersions = v
}

// GetHyperflexCapabilityInfos returns the HyperflexCapabilityInfos field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HyperflexAppCatalog) GetHyperflexCapabilityInfos() []HyperflexCapabilityInfoRelationship {
	if o == nil {
		var ret []HyperflexCapabilityInfoRelationship
		return ret
	}
	return o.HyperflexCapabilityInfos
}

// GetHyperflexCapabilityInfosOk returns a tuple with the HyperflexCapabilityInfos field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HyperflexAppCatalog) GetHyperflexCapabilityInfosOk() ([]HyperflexCapabilityInfoRelationship, bool) {
	if o == nil || IsNil(o.HyperflexCapabilityInfos) {
		return nil, false
	}
	return o.HyperflexCapabilityInfos, true
}

// HasHyperflexCapabilityInfos returns a boolean if a field has been set.
func (o *HyperflexAppCatalog) HasHyperflexCapabilityInfos() bool {
	if o != nil && !IsNil(o.HyperflexCapabilityInfos) {
		return true
	}

	return false
}

// SetHyperflexCapabilityInfos gets a reference to the given []HyperflexCapabilityInfoRelationship and assigns it to the HyperflexCapabilityInfos field.
func (o *HyperflexAppCatalog) SetHyperflexCapabilityInfos(v []HyperflexCapabilityInfoRelationship) {
	o.HyperflexCapabilityInfos = v
}

// GetHyperflexSoftwareCompatibilityInfos returns the HyperflexSoftwareCompatibilityInfos field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HyperflexAppCatalog) GetHyperflexSoftwareCompatibilityInfos() []HclHyperflexSoftwareCompatibilityInfoRelationship {
	if o == nil {
		var ret []HclHyperflexSoftwareCompatibilityInfoRelationship
		return ret
	}
	return o.HyperflexSoftwareCompatibilityInfos
}

// GetHyperflexSoftwareCompatibilityInfosOk returns a tuple with the HyperflexSoftwareCompatibilityInfos field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HyperflexAppCatalog) GetHyperflexSoftwareCompatibilityInfosOk() ([]HclHyperflexSoftwareCompatibilityInfoRelationship, bool) {
	if o == nil || IsNil(o.HyperflexSoftwareCompatibilityInfos) {
		return nil, false
	}
	return o.HyperflexSoftwareCompatibilityInfos, true
}

// HasHyperflexSoftwareCompatibilityInfos returns a boolean if a field has been set.
func (o *HyperflexAppCatalog) HasHyperflexSoftwareCompatibilityInfos() bool {
	if o != nil && !IsNil(o.HyperflexSoftwareCompatibilityInfos) {
		return true
	}

	return false
}

// SetHyperflexSoftwareCompatibilityInfos gets a reference to the given []HclHyperflexSoftwareCompatibilityInfoRelationship and assigns it to the HyperflexSoftwareCompatibilityInfos field.
func (o *HyperflexAppCatalog) SetHyperflexSoftwareCompatibilityInfos(v []HclHyperflexSoftwareCompatibilityInfoRelationship) {
	o.HyperflexSoftwareCompatibilityInfos = v
}

// GetServerFirmwareVersion returns the ServerFirmwareVersion field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HyperflexAppCatalog) GetServerFirmwareVersion() HyperflexServerFirmwareVersionRelationship {
	if o == nil || IsNil(o.ServerFirmwareVersion.Get()) {
		var ret HyperflexServerFirmwareVersionRelationship
		return ret
	}
	return *o.ServerFirmwareVersion.Get()
}

// GetServerFirmwareVersionOk returns a tuple with the ServerFirmwareVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HyperflexAppCatalog) GetServerFirmwareVersionOk() (*HyperflexServerFirmwareVersionRelationship, bool) {
	if o == nil {
		return nil, false
	}
	return o.ServerFirmwareVersion.Get(), o.ServerFirmwareVersion.IsSet()
}

// HasServerFirmwareVersion returns a boolean if a field has been set.
func (o *HyperflexAppCatalog) HasServerFirmwareVersion() bool {
	if o != nil && o.ServerFirmwareVersion.IsSet() {
		return true
	}

	return false
}

// SetServerFirmwareVersion gets a reference to the given NullableHyperflexServerFirmwareVersionRelationship and assigns it to the ServerFirmwareVersion field.
func (o *HyperflexAppCatalog) SetServerFirmwareVersion(v HyperflexServerFirmwareVersionRelationship) {
	o.ServerFirmwareVersion.Set(&v)
}

// SetServerFirmwareVersionNil sets the value for ServerFirmwareVersion to be an explicit nil
func (o *HyperflexAppCatalog) SetServerFirmwareVersionNil() {
	o.ServerFirmwareVersion.Set(nil)
}

// UnsetServerFirmwareVersion ensures that no value is present for ServerFirmwareVersion, not even an explicit nil
func (o *HyperflexAppCatalog) UnsetServerFirmwareVersion() {
	o.ServerFirmwareVersion.Unset()
}

// GetServerModel returns the ServerModel field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HyperflexAppCatalog) GetServerModel() HyperflexServerModelRelationship {
	if o == nil || IsNil(o.ServerModel.Get()) {
		var ret HyperflexServerModelRelationship
		return ret
	}
	return *o.ServerModel.Get()
}

// GetServerModelOk returns a tuple with the ServerModel field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HyperflexAppCatalog) GetServerModelOk() (*HyperflexServerModelRelationship, bool) {
	if o == nil {
		return nil, false
	}
	return o.ServerModel.Get(), o.ServerModel.IsSet()
}

// HasServerModel returns a boolean if a field has been set.
func (o *HyperflexAppCatalog) HasServerModel() bool {
	if o != nil && o.ServerModel.IsSet() {
		return true
	}

	return false
}

// SetServerModel gets a reference to the given NullableHyperflexServerModelRelationship and assigns it to the ServerModel field.
func (o *HyperflexAppCatalog) SetServerModel(v HyperflexServerModelRelationship) {
	o.ServerModel.Set(&v)
}

// SetServerModelNil sets the value for ServerModel to be an explicit nil
func (o *HyperflexAppCatalog) SetServerModelNil() {
	o.ServerModel.Set(nil)
}

// UnsetServerModel ensures that no value is present for ServerModel, not even an explicit nil
func (o *HyperflexAppCatalog) UnsetServerModel() {
	o.ServerModel.Unset()
}

// GetSoftwareDistributions returns the SoftwareDistributions field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HyperflexAppCatalog) GetSoftwareDistributions() []HyperflexSoftwareDistributionEntryRelationship {
	if o == nil {
		var ret []HyperflexSoftwareDistributionEntryRelationship
		return ret
	}
	return o.SoftwareDistributions
}

// GetSoftwareDistributionsOk returns a tuple with the SoftwareDistributions field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HyperflexAppCatalog) GetSoftwareDistributionsOk() ([]HyperflexSoftwareDistributionEntryRelationship, bool) {
	if o == nil || IsNil(o.SoftwareDistributions) {
		return nil, false
	}
	return o.SoftwareDistributions, true
}

// HasSoftwareDistributions returns a boolean if a field has been set.
func (o *HyperflexAppCatalog) HasSoftwareDistributions() bool {
	if o != nil && !IsNil(o.SoftwareDistributions) {
		return true
	}

	return false
}

// SetSoftwareDistributions gets a reference to the given []HyperflexSoftwareDistributionEntryRelationship and assigns it to the SoftwareDistributions field.
func (o *HyperflexAppCatalog) SetSoftwareDistributions(v []HyperflexSoftwareDistributionEntryRelationship) {
	o.SoftwareDistributions = v
}

func (o HyperflexAppCatalog) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o HyperflexAppCatalog) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	serializedMoBaseMo, errMoBaseMo := json.Marshal(o.MoBaseMo)
	if errMoBaseMo != nil {
		return map[string]interface{}{}, errMoBaseMo
	}
	errMoBaseMo = json.Unmarshal([]byte(serializedMoBaseMo), &toSerialize)
	if errMoBaseMo != nil {
		return map[string]interface{}{}, errMoBaseMo
	}
	if _, exists := toSerialize["ClassId"]; !exists {
		toSerialize["ClassId"] = o.GetDefaultClassId()
	}
	toSerialize["ClassId"] = o.ClassId
	if _, exists := toSerialize["ObjectType"]; !exists {
		toSerialize["ObjectType"] = o.GetDefaultObjectType()
	}
	toSerialize["ObjectType"] = o.ObjectType
	if !IsNil(o.Version) {
		toSerialize["Version"] = o.Version
	}
	if o.FeatureLimitExternal.IsSet() {
		toSerialize["FeatureLimitExternal"] = o.FeatureLimitExternal.Get()
	}
	if o.FeatureLimitInternal.IsSet() {
		toSerialize["FeatureLimitInternal"] = o.FeatureLimitInternal.Get()
	}
	if o.HxdpVersions != nil {
		toSerialize["HxdpVersions"] = o.HxdpVersions
	}
	if o.HyperflexCapabilityInfos != nil {
		toSerialize["HyperflexCapabilityInfos"] = o.HyperflexCapabilityInfos
	}
	if o.HyperflexSoftwareCompatibilityInfos != nil {
		toSerialize["HyperflexSoftwareCompatibilityInfos"] = o.HyperflexSoftwareCompatibilityInfos
	}
	if o.ServerFirmwareVersion.IsSet() {
		toSerialize["ServerFirmwareVersion"] = o.ServerFirmwareVersion.Get()
	}
	if o.ServerModel.IsSet() {
		toSerialize["ServerModel"] = o.ServerModel.Get()
	}
	if o.SoftwareDistributions != nil {
		toSerialize["SoftwareDistributions"] = o.SoftwareDistributions
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *HyperflexAppCatalog) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"ClassId",
		"ObjectType",
	}

	// defaultValueFuncMap captures the default values for required properties.
	// These values are used when required properties are missing from the payload.
	defaultValueFuncMap := map[string]func() interface{}{
		"ClassId":    o.GetDefaultClassId,
		"ObjectType": o.GetDefaultObjectType,
	}
	var defaultValueApplied bool
	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			if _, ok := defaultValueFuncMap[requiredProperty]; ok {
				allProperties[requiredProperty] = defaultValueFuncMap[requiredProperty]()
				defaultValueApplied = true
			}
		}
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	if defaultValueApplied {
		data, err = json.Marshal(allProperties)
		if err != nil {
			return err
		}
	}
	type HyperflexAppCatalogWithoutEmbeddedStruct struct {
		// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.
		ClassId string `json:"ClassId"`
		// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
		ObjectType string `json:"ObjectType"`
		// The catalog version used in HyperFlex cluster configuration service.
		Version              *string                                           `json:"Version,omitempty"`
		FeatureLimitExternal NullableHyperflexFeatureLimitExternalRelationship `json:"FeatureLimitExternal,omitempty"`
		FeatureLimitInternal NullableHyperflexFeatureLimitInternalRelationship `json:"FeatureLimitInternal,omitempty"`
		// An array of relationships to hyperflexHxdpVersion resources.
		HxdpVersions []HyperflexHxdpVersionRelationship `json:"HxdpVersions,omitempty"`
		// An array of relationships to hyperflexCapabilityInfo resources.
		HyperflexCapabilityInfos []HyperflexCapabilityInfoRelationship `json:"HyperflexCapabilityInfos,omitempty"`
		// An array of relationships to hclHyperflexSoftwareCompatibilityInfo resources.
		HyperflexSoftwareCompatibilityInfos []HclHyperflexSoftwareCompatibilityInfoRelationship `json:"HyperflexSoftwareCompatibilityInfos,omitempty"`
		ServerFirmwareVersion               NullableHyperflexServerFirmwareVersionRelationship  `json:"ServerFirmwareVersion,omitempty"`
		ServerModel                         NullableHyperflexServerModelRelationship            `json:"ServerModel,omitempty"`
		// An array of relationships to hyperflexSoftwareDistributionEntry resources.
		SoftwareDistributions []HyperflexSoftwareDistributionEntryRelationship `json:"SoftwareDistributions,omitempty"`
	}

	varHyperflexAppCatalogWithoutEmbeddedStruct := HyperflexAppCatalogWithoutEmbeddedStruct{}

	err = json.Unmarshal(data, &varHyperflexAppCatalogWithoutEmbeddedStruct)
	if err == nil {
		varHyperflexAppCatalog := _HyperflexAppCatalog{}
		varHyperflexAppCatalog.ClassId = varHyperflexAppCatalogWithoutEmbeddedStruct.ClassId
		varHyperflexAppCatalog.ObjectType = varHyperflexAppCatalogWithoutEmbeddedStruct.ObjectType
		varHyperflexAppCatalog.Version = varHyperflexAppCatalogWithoutEmbeddedStruct.Version
		varHyperflexAppCatalog.FeatureLimitExternal = varHyperflexAppCatalogWithoutEmbeddedStruct.FeatureLimitExternal
		varHyperflexAppCatalog.FeatureLimitInternal = varHyperflexAppCatalogWithoutEmbeddedStruct.FeatureLimitInternal
		varHyperflexAppCatalog.HxdpVersions = varHyperflexAppCatalogWithoutEmbeddedStruct.HxdpVersions
		varHyperflexAppCatalog.HyperflexCapabilityInfos = varHyperflexAppCatalogWithoutEmbeddedStruct.HyperflexCapabilityInfos
		varHyperflexAppCatalog.HyperflexSoftwareCompatibilityInfos = varHyperflexAppCatalogWithoutEmbeddedStruct.HyperflexSoftwareCompatibilityInfos
		varHyperflexAppCatalog.ServerFirmwareVersion = varHyperflexAppCatalogWithoutEmbeddedStruct.ServerFirmwareVersion
		varHyperflexAppCatalog.ServerModel = varHyperflexAppCatalogWithoutEmbeddedStruct.ServerModel
		varHyperflexAppCatalog.SoftwareDistributions = varHyperflexAppCatalogWithoutEmbeddedStruct.SoftwareDistributions
		*o = HyperflexAppCatalog(varHyperflexAppCatalog)
	} else {
		return err
	}

	varHyperflexAppCatalog := _HyperflexAppCatalog{}

	err = json.Unmarshal(data, &varHyperflexAppCatalog)
	if err == nil {
		o.MoBaseMo = varHyperflexAppCatalog.MoBaseMo
	} else {
		return err
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "ClassId")
		delete(additionalProperties, "ObjectType")
		delete(additionalProperties, "Version")
		delete(additionalProperties, "FeatureLimitExternal")
		delete(additionalProperties, "FeatureLimitInternal")
		delete(additionalProperties, "HxdpVersions")
		delete(additionalProperties, "HyperflexCapabilityInfos")
		delete(additionalProperties, "HyperflexSoftwareCompatibilityInfos")
		delete(additionalProperties, "ServerFirmwareVersion")
		delete(additionalProperties, "ServerModel")
		delete(additionalProperties, "SoftwareDistributions")

		// remove fields from embedded structs
		reflectMoBaseMo := reflect.ValueOf(o.MoBaseMo)
		for i := 0; i < reflectMoBaseMo.Type().NumField(); i++ {
			t := reflectMoBaseMo.Type().Field(i)

			if jsonTag := t.Tag.Get("json"); jsonTag != "" {
				fieldName := ""
				if commaIdx := strings.Index(jsonTag, ","); commaIdx > 0 {
					fieldName = jsonTag[:commaIdx]
				} else {
					fieldName = jsonTag
				}
				if fieldName != "AdditionalProperties" {
					delete(additionalProperties, fieldName)
				}
			}
		}

		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableHyperflexAppCatalog struct {
	value *HyperflexAppCatalog
	isSet bool
}

func (v NullableHyperflexAppCatalog) Get() *HyperflexAppCatalog {
	return v.value
}

func (v *NullableHyperflexAppCatalog) Set(val *HyperflexAppCatalog) {
	v.value = val
	v.isSet = true
}

func (v NullableHyperflexAppCatalog) IsSet() bool {
	return v.isSet
}

func (v *NullableHyperflexAppCatalog) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHyperflexAppCatalog(val *HyperflexAppCatalog) *NullableHyperflexAppCatalog {
	return &NullableHyperflexAppCatalog{value: val, isSet: true}
}

func (v NullableHyperflexAppCatalog) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHyperflexAppCatalog) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
