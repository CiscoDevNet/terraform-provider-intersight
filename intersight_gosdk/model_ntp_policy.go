/*
Cisco Intersight

Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations. The Intersight OpenAPI document defines the complete set of properties that are returned in the HTTP response. From that perspective, a client can expect that no additional properties are returned, unless these properties are explicitly defined in the OpenAPI document. However, when a client uses an older version of the Intersight OpenAPI document, the server may send additional properties because the software is more recent than the client. In that case, the client may receive properties that it does not know about. Some generated SDKs perform a strict validation of the HTTP response body against the OpenAPI document.

API version: 1.0.11-18775
Contact: intersight@cisco.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package intersight

import (
	"encoding/json"
	"fmt"
	"reflect"
	"strings"
)

// checks if the NtpPolicy type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NtpPolicy{}

// NtpPolicy Policy to configure the NTP Servers.
type NtpPolicy struct {
	PolicyAbstractPolicy
	// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.
	ClassId string `json:"ClassId"`
	// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
	ObjectType              string             `json:"ObjectType"`
	AuthenticatedNtpServers []NtpAuthNtpServer `json:"AuthenticatedNtpServers,omitempty"`
	// State of NTP service on the endpoint.
	Enabled    *bool    `json:"Enabled,omitempty"`
	NtpServers []string `json:"NtpServers,omitempty"`
	// Timezone of services on the endpoint. * `Pacific/Niue` -  * `Africa/Abidjan` -  * `Africa/Accra` -  * `Africa/Addis_Ababa` -  * `Africa/Algiers` -  * `Africa/Asmara` -  * `Africa/Bamako` -  * `Africa/Bangui` -  * `Africa/Banjul` -  * `Africa/Bissau` -  * `Africa/Blantyre` -  * `Africa/Brazzaville` -  * `Africa/Bujumbura` -  * `Africa/Cairo` -  * `Africa/Casablanca` -  * `Africa/Ceuta` -  * `Africa/Conakry` -  * `Africa/Dakar` -  * `Africa/Dar_es_Salaam` -  * `Africa/Djibouti` -  * `Africa/Douala` -  * `Africa/El_Aaiun` -  * `Africa/Freetown` -  * `Africa/Gaborone` -  * `Africa/Harare` -  * `Africa/Johannesburg` -  * `Africa/Juba` -  * `Africa/Kampala` -  * `Africa/Khartoum` -  * `Africa/Kigali` -  * `Africa/Kinshasa` -  * `Africa/Lagos` -  * `Africa/Libreville` -  * `Africa/Lome` -  * `Africa/Luanda` -  * `Africa/Lubumbashi` -  * `Africa/Lusaka` -  * `Africa/Malabo` -  * `Africa/Maputo` -  * `Africa/Maseru` -  * `Africa/Mbabane` -  * `Africa/Mogadishu` -  * `Africa/Monrovia` -  * `Africa/Nairobi` -  * `Africa/Ndjamena` -  * `Africa/Niamey` -  * `Africa/Nouakchott` -  * `Africa/Ouagadougou` -  * `Africa/Porto-Novo` -  * `Africa/Sao_Tome` -  * `Africa/Tripoli` -  * `Africa/Tunis` -  * `Africa/Windhoek` -  * `America/Adak` -  * `America/Anchorage` -  * `America/Anguilla` -  * `America/Antigua` -  * `America/Araguaina` -  * `America/Argentina/Buenos_Aires` -  * `America/Argentina/Catamarca` -  * `America/Argentina/Cordoba` -  * `America/Argentina/Jujuy` -  * `America/Argentina/La_Rioja` -  * `America/Argentina/Mendoza` -  * `America/Argentina/Rio_Gallegos` -  * `America/Argentina/Salta` -  * `America/Argentina/San_Juan` -  * `America/Argentina/San_Luis` -  * `America/Argentina/Tucuman` -  * `America/Argentina/Ushuaia` -  * `America/Aruba` -  * `America/Asuncion` -  * `America/Atikokan` -  * `America/Bahia` -  * `America/Bahia_Banderas` -  * `America/Barbados` -  * `America/Belem` -  * `America/Belize` -  * `America/Blanc-Sablon` -  * `America/Boa_Vista` -  * `America/Bogota` -  * `America/Boise` -  * `America/Cambridge_Bay` -  * `America/Campo_Grande` -  * `America/Cancun` -  * `America/Caracas` -  * `America/Cayenne` -  * `America/Cayman` -  * `America/Chicago` -  * `America/Chihuahua` -  * `America/Costa_Rica` -  * `America/Creston` -  * `America/Cuiaba` -  * `America/Curacao` -  * `America/Danmarkshavn` -  * `America/Dawson` -  * `America/Dawson_Creek` -  * `America/Denver` -  * `America/Detroit` -  * `America/Dominica` -  * `America/Edmonton` -  * `America/Eirunepe` -  * `America/El_Salvador` -  * `America/Fortaleza` -  * `America/Glace_Bay` -  * `America/Godthab` -  * `America/Goose_Bay` -  * `America/Grand_Turk` -  * `America/Grenada` -  * `America/Guadeloupe` -  * `America/Guatemala` -  * `America/Guayaquil` -  * `America/Guyana` -  * `America/Halifax` -  * `America/Havana` -  * `America/Hermosillo` -  * `America/Indiana/Indianapolis` -  * `America/Indiana/Knox` -  * `America/Indiana/Marengo` -  * `America/Indiana/Petersburg` -  * `America/Indiana/Tell_City` -  * `America/Indiana/Vevay` -  * `America/Indiana/Vincennes` -  * `America/Indiana/Winamac` -  * `America/Inuvik` -  * `America/Iqaluit` -  * `America/Jamaica` -  * `America/Juneau` -  * `America/Kentucky/Louisville` -  * `America/Kentucky/Monticello` -  * `America/Kralendijk` -  * `America/La_Paz` -  * `America/Lima` -  * `America/Los_Angeles` -  * `America/Lower_Princes` -  * `America/Maceio` -  * `America/Managua` -  * `America/Manaus` -  * `America/Marigot` -  * `America/Martinique` -  * `America/Matamoros` -  * `America/Mazatlan` -  * `America/Menominee` -  * `America/Merida` -  * `America/Metlakatla` -  * `America/Mexico_City` -  * `America/Miquelon` -  * `America/Moncton` -  * `America/Monterrey` -  * `America/Montevideo` -  * `America/Montreal` -  * `America/Montserrat` -  * `America/Nassau` -  * `America/New_York` -  * `America/Nipigon` -  * `America/Nome` -  * `America/Noronha` -  * `America/North_Dakota/Beulah` -  * `America/North_Dakota/Center` -  * `America/North_Dakota/New_Salem` -  * `America/Ojinaga` -  * `America/Panama` -  * `America/Pangnirtung` -  * `America/Paramaribo` -  * `America/Phoenix` -  * `America/Port-au-Prince` -  * `America/Port_of_Spain` -  * `America/Porto_Velho` -  * `America/Puerto_Rico` -  * `America/Rainy_River` -  * `America/Rankin_Inlet` -  * `America/Recife` -  * `America/Regina` -  * `America/Resolute` -  * `America/Rio_Branco` -  * `America/Santa_Isabel` -  * `America/Santarem` -  * `America/Santiago` -  * `America/Santo_Domingo` -  * `America/Sao_Paulo` -  * `America/Scoresbysund` -  * `America/Shiprock` -  * `America/Sitka` -  * `America/St_Barthelemy` -  * `America/St_Johns` -  * `America/St_Kitts` -  * `America/St_Lucia` -  * `America/St_Thomas` -  * `America/St_Vincent` -  * `America/Swift_Current` -  * `America/Tegucigalpa` -  * `America/Thule` -  * `America/Thunder_Bay` -  * `America/Tijuana` -  * `America/Toronto` -  * `America/Tortola` -  * `America/Vancouver` -  * `America/Whitehorse` -  * `America/Winnipeg` -  * `America/Yakutat` -  * `America/Yellowknife` -  * `Antarctica/Casey` -  * `Antarctica/Davis` -  * `Antarctica/DumontDUrville` -  * `Antarctica/Macquarie` -  * `Antarctica/Mawson` -  * `Antarctica/McMurdo` -  * `Antarctica/Palmer` -  * `Antarctica/Rothera` -  * `Antarctica/South_Pole` -  * `Antarctica/Syowa` -  * `Antarctica/Troll` -  * `Antarctica/Vostok` -  * `Arctic/Longyearbyen` -  * `Asia/Aden` -  * `Asia/Almaty` -  * `Asia/Amman` -  * `Asia/Anadyr` -  * `Asia/Aqtau` -  * `Asia/Aqtobe` -  * `Asia/Ashgabat` -  * `Asia/Baghdad` -  * `Asia/Bahrain` -  * `Asia/Baku` -  * `Asia/Bangkok` -  * `Asia/Beirut` -  * `Asia/Bishkek` -  * `Asia/Brunei` -  * `Asia/Calcutta` -  * `Asia/Choibalsan` -  * `Asia/Chongqing` -  * `Asia/Colombo` -  * `Asia/Damascus` -  * `Asia/Dhaka` -  * `Asia/Dili` -  * `Asia/Dubai` -  * `Asia/Dushanbe` -  * `Asia/Gaza` -  * `Asia/Harbin` -  * `Asia/Hebron` -  * `Asia/Ho_Chi_Minh` -  * `Asia/Hong_Kong` -  * `Asia/Hovd` -  * `Asia/Irkutsk` -  * `Asia/Jakarta` -  * `Asia/Jayapura` -  * `Asia/Jerusalem` -  * `Asia/Kabul` -  * `Asia/Kamchatka` -  * `Asia/Karachi` -  * `Asia/Kashgar` -  * `Asia/Kathmandu` -  * `Asia/Katmandu` -  * `Asia/Khandyga` -  * `Asia/Kolkata` -  * `Asia/Krasnoyarsk` -  * `Asia/Kuala_Lumpur` -  * `Asia/Kuching` -  * `Asia/Kuwait` -  * `Asia/Macau` -  * `Asia/Magadan` -  * `Asia/Makassar` -  * `Asia/Manila` -  * `Asia/Muscat` -  * `Asia/Nicosia` -  * `Asia/Novokuznetsk` -  * `Asia/Novosibirsk` -  * `Asia/Omsk` -  * `Asia/Oral` -  * `Asia/Phnom_Penh` -  * `Asia/Pontianak` -  * `Asia/Pyongyang` -  * `Asia/Qatar` -  * `Asia/Qyzylorda` -  * `Asia/Rangoon` -  * `Asia/Riyadh` -  * `Asia/Saigon` -  * `Asia/Sakhalin` -  * `Asia/Samarkand` -  * `Asia/Seoul` -  * `Asia/Shanghai` -  * `Asia/Singapore` -  * `Asia/Taipei` -  * `Asia/Tashkent` -  * `Asia/Tbilisi` -  * `Asia/Tehran` -  * `Asia/Thimphu` -  * `Asia/Tokyo` -  * `Asia/Ulaanbaatar` -  * `Asia/Urumqi` -  * `Asia/Ust-Nera` -  * `Asia/Vientiane` -  * `Asia/Vladivostok` -  * `Asia/Yakutsk` -  * `Asia/Yekaterinburg` -  * `Asia/Yerevan` -  * `Atlantic/Azores` -  * `Atlantic/Bermuda` -  * `Atlantic/Canary` -  * `Atlantic/Cape_Verde` -  * `Atlantic/Faroe` -  * `Atlantic/Madeira` -  * `Atlantic/Reykjavik` -  * `Atlantic/South_Georgia` -  * `Atlantic/St_Helena` -  * `Atlantic/Stanley` -  * `Australia/Adelaide` -  * `Australia/Brisbane` -  * `Australia/Broken_Hill` -  * `Australia/Currie` -  * `Australia/Darwin` -  * `Australia/Eucla` -  * `Australia/Hobart` -  * `Australia/Lindeman` -  * `Australia/Lord_Howe` -  * `Australia/Melbourne` -  * `Australia/Perth` -  * `Australia/Sydney` -  * `Etc/GMT` -  * `Europe/Amsterdam` -  * `Europe/Andorra` -  * `Europe/Athens` -  * `Europe/Belgrade` -  * `Europe/Berlin` -  * `Europe/Bratislava` -  * `Europe/Brussels` -  * `Europe/Bucharest` -  * `Europe/Budapest` -  * `Europe/Busingen` -  * `Europe/Chisinau` -  * `Europe/Copenhagen` -  * `Europe/Dublin` -  * `Europe/Gibraltar` -  * `Europe/Guernsey` -  * `Europe/Helsinki` -  * `Europe/Isle_of_Man` -  * `Europe/Istanbul` -  * `Europe/Jersey` -  * `Europe/Kaliningrad` -  * `Europe/Kiev` -  * `Europe/Lisbon` -  * `Europe/Ljubljana` -  * `Europe/London` -  * `Europe/Luxembourg` -  * `Europe/Madrid` -  * `Europe/Malta` -  * `Europe/Mariehamn` -  * `Europe/Minsk` -  * `Europe/Monaco` -  * `Europe/Moscow` -  * `Europe/Oslo` -  * `Europe/Paris` -  * `Europe/Podgorica` -  * `Europe/Prague` -  * `Europe/Riga` -  * `Europe/Rome` -  * `Europe/Samara` -  * `Europe/San_Marino` -  * `Europe/Sarajevo` -  * `Europe/Simferopol` -  * `Europe/Skopje` -  * `Europe/Sofia` -  * `Europe/Stockholm` -  * `Europe/Tallinn` -  * `Europe/Tirane` -  * `Europe/Uzhgorod` -  * `Europe/Vaduz` -  * `Europe/Vatican` -  * `Europe/Vienna` -  * `Europe/Vilnius` -  * `Europe/Volgograd` -  * `Europe/Warsaw` -  * `Europe/Zagreb` -  * `Europe/Zaporozhye` -  * `Europe/Zurich` -  * `Indian/Antananarivo` -  * `Indian/Chagos` -  * `Indian/Christmas` -  * `Indian/Cocos` -  * `Indian/Comoro` -  * `Indian/Kerguelen` -  * `Indian/Mahe` -  * `Indian/Maldives` -  * `Indian/Mauritius` -  * `Indian/Mayotte` -  * `Indian/Reunion` -  * `Pacific/Apia` -  * `Pacific/Auckland` -  * `Pacific/Chatham` -  * `Pacific/Chuuk` -  * `Pacific/Easter` -  * `Pacific/Efate` -  * `Pacific/Enderbury` -  * `Pacific/Fakaofo` -  * `Pacific/Fiji` -  * `Pacific/Funafuti` -  * `Pacific/Galapagos` -  * `Pacific/Gambier` -  * `Pacific/Guadalcanal` -  * `Pacific/Guam` -  * `Pacific/Honolulu` -  * `Pacific/Johnston` -  * `Pacific/Kiritimati` -  * `Pacific/Kosrae` -  * `Pacific/Kwajalein` -  * `Pacific/Majuro` -  * `Pacific/Marquesas` -  * `Pacific/Midway` -  * `Pacific/Nauru` -  * `Pacific/Norfolk` -  * `Pacific/Noumea` -  * `Pacific/Pago_Pago` -  * `Pacific/Palau` -  * `Pacific/Pitcairn` -  * `Pacific/Pohnpei` -  * `Pacific/Port_Moresby` -  * `Pacific/Rarotonga` -  * `Pacific/Saipan` -  * `Pacific/Tahiti` -  * `Pacific/Tarawa` -  * `Pacific/Tongatapu` -  * `Pacific/Wake` -  * `Pacific/Wallis` -  * `UTC` -
	Timezone         *string                                      `json:"Timezone,omitempty"`
	ApplianceAccount NullableIamAccountRelationship               `json:"ApplianceAccount,omitempty"`
	Organization     NullableOrganizationOrganizationRelationship `json:"Organization,omitempty"`
	// An array of relationships to policyAbstractConfigProfile resources.
	Profiles             []PolicyAbstractConfigProfileRelationship `json:"Profiles,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _NtpPolicy NtpPolicy

// NewNtpPolicy instantiates a new NtpPolicy object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNtpPolicy(classId string, objectType string) *NtpPolicy {
	this := NtpPolicy{}
	this.ClassId = classId
	this.ObjectType = objectType
	var enabled bool = true
	this.Enabled = &enabled
	var timezone string = "Pacific/Niue"
	this.Timezone = &timezone
	return &this
}

// NewNtpPolicyWithDefaults instantiates a new NtpPolicy object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNtpPolicyWithDefaults() *NtpPolicy {
	this := NtpPolicy{}
	var classId string = "ntp.Policy"
	this.ClassId = classId
	var objectType string = "ntp.Policy"
	this.ObjectType = objectType
	var enabled bool = true
	this.Enabled = &enabled
	var timezone string = "Pacific/Niue"
	this.Timezone = &timezone
	return &this
}

// GetClassId returns the ClassId field value
func (o *NtpPolicy) GetClassId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ClassId
}

// GetClassIdOk returns a tuple with the ClassId field value
// and a boolean to check if the value has been set.
func (o *NtpPolicy) GetClassIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ClassId, true
}

// SetClassId sets field value
func (o *NtpPolicy) SetClassId(v string) {
	o.ClassId = v
}

// GetDefaultClassId returns the default value "ntp.Policy" of the ClassId field.
func (o *NtpPolicy) GetDefaultClassId() interface{} {
	return "ntp.Policy"
}

// GetObjectType returns the ObjectType field value
func (o *NtpPolicy) GetObjectType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ObjectType
}

// GetObjectTypeOk returns a tuple with the ObjectType field value
// and a boolean to check if the value has been set.
func (o *NtpPolicy) GetObjectTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ObjectType, true
}

// SetObjectType sets field value
func (o *NtpPolicy) SetObjectType(v string) {
	o.ObjectType = v
}

// GetDefaultObjectType returns the default value "ntp.Policy" of the ObjectType field.
func (o *NtpPolicy) GetDefaultObjectType() interface{} {
	return "ntp.Policy"
}

// GetAuthenticatedNtpServers returns the AuthenticatedNtpServers field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NtpPolicy) GetAuthenticatedNtpServers() []NtpAuthNtpServer {
	if o == nil {
		var ret []NtpAuthNtpServer
		return ret
	}
	return o.AuthenticatedNtpServers
}

// GetAuthenticatedNtpServersOk returns a tuple with the AuthenticatedNtpServers field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NtpPolicy) GetAuthenticatedNtpServersOk() ([]NtpAuthNtpServer, bool) {
	if o == nil || IsNil(o.AuthenticatedNtpServers) {
		return nil, false
	}
	return o.AuthenticatedNtpServers, true
}

// HasAuthenticatedNtpServers returns a boolean if a field has been set.
func (o *NtpPolicy) HasAuthenticatedNtpServers() bool {
	if o != nil && !IsNil(o.AuthenticatedNtpServers) {
		return true
	}

	return false
}

// SetAuthenticatedNtpServers gets a reference to the given []NtpAuthNtpServer and assigns it to the AuthenticatedNtpServers field.
func (o *NtpPolicy) SetAuthenticatedNtpServers(v []NtpAuthNtpServer) {
	o.AuthenticatedNtpServers = v
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *NtpPolicy) GetEnabled() bool {
	if o == nil || IsNil(o.Enabled) {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NtpPolicy) GetEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.Enabled) {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *NtpPolicy) HasEnabled() bool {
	if o != nil && !IsNil(o.Enabled) {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *NtpPolicy) SetEnabled(v bool) {
	o.Enabled = &v
}

// GetNtpServers returns the NtpServers field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NtpPolicy) GetNtpServers() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.NtpServers
}

// GetNtpServersOk returns a tuple with the NtpServers field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NtpPolicy) GetNtpServersOk() ([]string, bool) {
	if o == nil || IsNil(o.NtpServers) {
		return nil, false
	}
	return o.NtpServers, true
}

// HasNtpServers returns a boolean if a field has been set.
func (o *NtpPolicy) HasNtpServers() bool {
	if o != nil && !IsNil(o.NtpServers) {
		return true
	}

	return false
}

// SetNtpServers gets a reference to the given []string and assigns it to the NtpServers field.
func (o *NtpPolicy) SetNtpServers(v []string) {
	o.NtpServers = v
}

// GetTimezone returns the Timezone field value if set, zero value otherwise.
func (o *NtpPolicy) GetTimezone() string {
	if o == nil || IsNil(o.Timezone) {
		var ret string
		return ret
	}
	return *o.Timezone
}

// GetTimezoneOk returns a tuple with the Timezone field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NtpPolicy) GetTimezoneOk() (*string, bool) {
	if o == nil || IsNil(o.Timezone) {
		return nil, false
	}
	return o.Timezone, true
}

// HasTimezone returns a boolean if a field has been set.
func (o *NtpPolicy) HasTimezone() bool {
	if o != nil && !IsNil(o.Timezone) {
		return true
	}

	return false
}

// SetTimezone gets a reference to the given string and assigns it to the Timezone field.
func (o *NtpPolicy) SetTimezone(v string) {
	o.Timezone = &v
}

// GetApplianceAccount returns the ApplianceAccount field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NtpPolicy) GetApplianceAccount() IamAccountRelationship {
	if o == nil || IsNil(o.ApplianceAccount.Get()) {
		var ret IamAccountRelationship
		return ret
	}
	return *o.ApplianceAccount.Get()
}

// GetApplianceAccountOk returns a tuple with the ApplianceAccount field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NtpPolicy) GetApplianceAccountOk() (*IamAccountRelationship, bool) {
	if o == nil {
		return nil, false
	}
	return o.ApplianceAccount.Get(), o.ApplianceAccount.IsSet()
}

// HasApplianceAccount returns a boolean if a field has been set.
func (o *NtpPolicy) HasApplianceAccount() bool {
	if o != nil && o.ApplianceAccount.IsSet() {
		return true
	}

	return false
}

// SetApplianceAccount gets a reference to the given NullableIamAccountRelationship and assigns it to the ApplianceAccount field.
func (o *NtpPolicy) SetApplianceAccount(v IamAccountRelationship) {
	o.ApplianceAccount.Set(&v)
}

// SetApplianceAccountNil sets the value for ApplianceAccount to be an explicit nil
func (o *NtpPolicy) SetApplianceAccountNil() {
	o.ApplianceAccount.Set(nil)
}

// UnsetApplianceAccount ensures that no value is present for ApplianceAccount, not even an explicit nil
func (o *NtpPolicy) UnsetApplianceAccount() {
	o.ApplianceAccount.Unset()
}

// GetOrganization returns the Organization field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NtpPolicy) GetOrganization() OrganizationOrganizationRelationship {
	if o == nil || IsNil(o.Organization.Get()) {
		var ret OrganizationOrganizationRelationship
		return ret
	}
	return *o.Organization.Get()
}

// GetOrganizationOk returns a tuple with the Organization field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NtpPolicy) GetOrganizationOk() (*OrganizationOrganizationRelationship, bool) {
	if o == nil {
		return nil, false
	}
	return o.Organization.Get(), o.Organization.IsSet()
}

// HasOrganization returns a boolean if a field has been set.
func (o *NtpPolicy) HasOrganization() bool {
	if o != nil && o.Organization.IsSet() {
		return true
	}

	return false
}

// SetOrganization gets a reference to the given NullableOrganizationOrganizationRelationship and assigns it to the Organization field.
func (o *NtpPolicy) SetOrganization(v OrganizationOrganizationRelationship) {
	o.Organization.Set(&v)
}

// SetOrganizationNil sets the value for Organization to be an explicit nil
func (o *NtpPolicy) SetOrganizationNil() {
	o.Organization.Set(nil)
}

// UnsetOrganization ensures that no value is present for Organization, not even an explicit nil
func (o *NtpPolicy) UnsetOrganization() {
	o.Organization.Unset()
}

// GetProfiles returns the Profiles field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NtpPolicy) GetProfiles() []PolicyAbstractConfigProfileRelationship {
	if o == nil {
		var ret []PolicyAbstractConfigProfileRelationship
		return ret
	}
	return o.Profiles
}

// GetProfilesOk returns a tuple with the Profiles field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NtpPolicy) GetProfilesOk() ([]PolicyAbstractConfigProfileRelationship, bool) {
	if o == nil || IsNil(o.Profiles) {
		return nil, false
	}
	return o.Profiles, true
}

// HasProfiles returns a boolean if a field has been set.
func (o *NtpPolicy) HasProfiles() bool {
	if o != nil && !IsNil(o.Profiles) {
		return true
	}

	return false
}

// SetProfiles gets a reference to the given []PolicyAbstractConfigProfileRelationship and assigns it to the Profiles field.
func (o *NtpPolicy) SetProfiles(v []PolicyAbstractConfigProfileRelationship) {
	o.Profiles = v
}

func (o NtpPolicy) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NtpPolicy) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	serializedPolicyAbstractPolicy, errPolicyAbstractPolicy := json.Marshal(o.PolicyAbstractPolicy)
	if errPolicyAbstractPolicy != nil {
		return map[string]interface{}{}, errPolicyAbstractPolicy
	}
	errPolicyAbstractPolicy = json.Unmarshal([]byte(serializedPolicyAbstractPolicy), &toSerialize)
	if errPolicyAbstractPolicy != nil {
		return map[string]interface{}{}, errPolicyAbstractPolicy
	}
	if _, exists := toSerialize["ClassId"]; !exists {
		toSerialize["ClassId"] = o.GetDefaultClassId()
	}
	toSerialize["ClassId"] = o.ClassId
	if _, exists := toSerialize["ObjectType"]; !exists {
		toSerialize["ObjectType"] = o.GetDefaultObjectType()
	}
	toSerialize["ObjectType"] = o.ObjectType
	if o.AuthenticatedNtpServers != nil {
		toSerialize["AuthenticatedNtpServers"] = o.AuthenticatedNtpServers
	}
	if !IsNil(o.Enabled) {
		toSerialize["Enabled"] = o.Enabled
	}
	if o.NtpServers != nil {
		toSerialize["NtpServers"] = o.NtpServers
	}
	if !IsNil(o.Timezone) {
		toSerialize["Timezone"] = o.Timezone
	}
	if o.ApplianceAccount.IsSet() {
		toSerialize["ApplianceAccount"] = o.ApplianceAccount.Get()
	}
	if o.Organization.IsSet() {
		toSerialize["Organization"] = o.Organization.Get()
	}
	if o.Profiles != nil {
		toSerialize["Profiles"] = o.Profiles
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *NtpPolicy) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"ClassId",
		"ObjectType",
	}

	// defaultValueFuncMap captures the default values for required properties.
	// These values are used when required properties are missing from the payload.
	defaultValueFuncMap := map[string]func() interface{}{
		"ClassId":    o.GetDefaultClassId,
		"ObjectType": o.GetDefaultObjectType,
	}
	var defaultValueApplied bool
	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			if _, ok := defaultValueFuncMap[requiredProperty]; ok {
				allProperties[requiredProperty] = defaultValueFuncMap[requiredProperty]()
				defaultValueApplied = true
			}
		}
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	if defaultValueApplied {
		data, err = json.Marshal(allProperties)
		if err != nil {
			return err
		}
	}
	type NtpPolicyWithoutEmbeddedStruct struct {
		// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.
		ClassId string `json:"ClassId"`
		// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
		ObjectType              string             `json:"ObjectType"`
		AuthenticatedNtpServers []NtpAuthNtpServer `json:"AuthenticatedNtpServers,omitempty"`
		// State of NTP service on the endpoint.
		Enabled    *bool    `json:"Enabled,omitempty"`
		NtpServers []string `json:"NtpServers,omitempty"`
		// Timezone of services on the endpoint. * `Pacific/Niue` -  * `Africa/Abidjan` -  * `Africa/Accra` -  * `Africa/Addis_Ababa` -  * `Africa/Algiers` -  * `Africa/Asmara` -  * `Africa/Bamako` -  * `Africa/Bangui` -  * `Africa/Banjul` -  * `Africa/Bissau` -  * `Africa/Blantyre` -  * `Africa/Brazzaville` -  * `Africa/Bujumbura` -  * `Africa/Cairo` -  * `Africa/Casablanca` -  * `Africa/Ceuta` -  * `Africa/Conakry` -  * `Africa/Dakar` -  * `Africa/Dar_es_Salaam` -  * `Africa/Djibouti` -  * `Africa/Douala` -  * `Africa/El_Aaiun` -  * `Africa/Freetown` -  * `Africa/Gaborone` -  * `Africa/Harare` -  * `Africa/Johannesburg` -  * `Africa/Juba` -  * `Africa/Kampala` -  * `Africa/Khartoum` -  * `Africa/Kigali` -  * `Africa/Kinshasa` -  * `Africa/Lagos` -  * `Africa/Libreville` -  * `Africa/Lome` -  * `Africa/Luanda` -  * `Africa/Lubumbashi` -  * `Africa/Lusaka` -  * `Africa/Malabo` -  * `Africa/Maputo` -  * `Africa/Maseru` -  * `Africa/Mbabane` -  * `Africa/Mogadishu` -  * `Africa/Monrovia` -  * `Africa/Nairobi` -  * `Africa/Ndjamena` -  * `Africa/Niamey` -  * `Africa/Nouakchott` -  * `Africa/Ouagadougou` -  * `Africa/Porto-Novo` -  * `Africa/Sao_Tome` -  * `Africa/Tripoli` -  * `Africa/Tunis` -  * `Africa/Windhoek` -  * `America/Adak` -  * `America/Anchorage` -  * `America/Anguilla` -  * `America/Antigua` -  * `America/Araguaina` -  * `America/Argentina/Buenos_Aires` -  * `America/Argentina/Catamarca` -  * `America/Argentina/Cordoba` -  * `America/Argentina/Jujuy` -  * `America/Argentina/La_Rioja` -  * `America/Argentina/Mendoza` -  * `America/Argentina/Rio_Gallegos` -  * `America/Argentina/Salta` -  * `America/Argentina/San_Juan` -  * `America/Argentina/San_Luis` -  * `America/Argentina/Tucuman` -  * `America/Argentina/Ushuaia` -  * `America/Aruba` -  * `America/Asuncion` -  * `America/Atikokan` -  * `America/Bahia` -  * `America/Bahia_Banderas` -  * `America/Barbados` -  * `America/Belem` -  * `America/Belize` -  * `America/Blanc-Sablon` -  * `America/Boa_Vista` -  * `America/Bogota` -  * `America/Boise` -  * `America/Cambridge_Bay` -  * `America/Campo_Grande` -  * `America/Cancun` -  * `America/Caracas` -  * `America/Cayenne` -  * `America/Cayman` -  * `America/Chicago` -  * `America/Chihuahua` -  * `America/Costa_Rica` -  * `America/Creston` -  * `America/Cuiaba` -  * `America/Curacao` -  * `America/Danmarkshavn` -  * `America/Dawson` -  * `America/Dawson_Creek` -  * `America/Denver` -  * `America/Detroit` -  * `America/Dominica` -  * `America/Edmonton` -  * `America/Eirunepe` -  * `America/El_Salvador` -  * `America/Fortaleza` -  * `America/Glace_Bay` -  * `America/Godthab` -  * `America/Goose_Bay` -  * `America/Grand_Turk` -  * `America/Grenada` -  * `America/Guadeloupe` -  * `America/Guatemala` -  * `America/Guayaquil` -  * `America/Guyana` -  * `America/Halifax` -  * `America/Havana` -  * `America/Hermosillo` -  * `America/Indiana/Indianapolis` -  * `America/Indiana/Knox` -  * `America/Indiana/Marengo` -  * `America/Indiana/Petersburg` -  * `America/Indiana/Tell_City` -  * `America/Indiana/Vevay` -  * `America/Indiana/Vincennes` -  * `America/Indiana/Winamac` -  * `America/Inuvik` -  * `America/Iqaluit` -  * `America/Jamaica` -  * `America/Juneau` -  * `America/Kentucky/Louisville` -  * `America/Kentucky/Monticello` -  * `America/Kralendijk` -  * `America/La_Paz` -  * `America/Lima` -  * `America/Los_Angeles` -  * `America/Lower_Princes` -  * `America/Maceio` -  * `America/Managua` -  * `America/Manaus` -  * `America/Marigot` -  * `America/Martinique` -  * `America/Matamoros` -  * `America/Mazatlan` -  * `America/Menominee` -  * `America/Merida` -  * `America/Metlakatla` -  * `America/Mexico_City` -  * `America/Miquelon` -  * `America/Moncton` -  * `America/Monterrey` -  * `America/Montevideo` -  * `America/Montreal` -  * `America/Montserrat` -  * `America/Nassau` -  * `America/New_York` -  * `America/Nipigon` -  * `America/Nome` -  * `America/Noronha` -  * `America/North_Dakota/Beulah` -  * `America/North_Dakota/Center` -  * `America/North_Dakota/New_Salem` -  * `America/Ojinaga` -  * `America/Panama` -  * `America/Pangnirtung` -  * `America/Paramaribo` -  * `America/Phoenix` -  * `America/Port-au-Prince` -  * `America/Port_of_Spain` -  * `America/Porto_Velho` -  * `America/Puerto_Rico` -  * `America/Rainy_River` -  * `America/Rankin_Inlet` -  * `America/Recife` -  * `America/Regina` -  * `America/Resolute` -  * `America/Rio_Branco` -  * `America/Santa_Isabel` -  * `America/Santarem` -  * `America/Santiago` -  * `America/Santo_Domingo` -  * `America/Sao_Paulo` -  * `America/Scoresbysund` -  * `America/Shiprock` -  * `America/Sitka` -  * `America/St_Barthelemy` -  * `America/St_Johns` -  * `America/St_Kitts` -  * `America/St_Lucia` -  * `America/St_Thomas` -  * `America/St_Vincent` -  * `America/Swift_Current` -  * `America/Tegucigalpa` -  * `America/Thule` -  * `America/Thunder_Bay` -  * `America/Tijuana` -  * `America/Toronto` -  * `America/Tortola` -  * `America/Vancouver` -  * `America/Whitehorse` -  * `America/Winnipeg` -  * `America/Yakutat` -  * `America/Yellowknife` -  * `Antarctica/Casey` -  * `Antarctica/Davis` -  * `Antarctica/DumontDUrville` -  * `Antarctica/Macquarie` -  * `Antarctica/Mawson` -  * `Antarctica/McMurdo` -  * `Antarctica/Palmer` -  * `Antarctica/Rothera` -  * `Antarctica/South_Pole` -  * `Antarctica/Syowa` -  * `Antarctica/Troll` -  * `Antarctica/Vostok` -  * `Arctic/Longyearbyen` -  * `Asia/Aden` -  * `Asia/Almaty` -  * `Asia/Amman` -  * `Asia/Anadyr` -  * `Asia/Aqtau` -  * `Asia/Aqtobe` -  * `Asia/Ashgabat` -  * `Asia/Baghdad` -  * `Asia/Bahrain` -  * `Asia/Baku` -  * `Asia/Bangkok` -  * `Asia/Beirut` -  * `Asia/Bishkek` -  * `Asia/Brunei` -  * `Asia/Calcutta` -  * `Asia/Choibalsan` -  * `Asia/Chongqing` -  * `Asia/Colombo` -  * `Asia/Damascus` -  * `Asia/Dhaka` -  * `Asia/Dili` -  * `Asia/Dubai` -  * `Asia/Dushanbe` -  * `Asia/Gaza` -  * `Asia/Harbin` -  * `Asia/Hebron` -  * `Asia/Ho_Chi_Minh` -  * `Asia/Hong_Kong` -  * `Asia/Hovd` -  * `Asia/Irkutsk` -  * `Asia/Jakarta` -  * `Asia/Jayapura` -  * `Asia/Jerusalem` -  * `Asia/Kabul` -  * `Asia/Kamchatka` -  * `Asia/Karachi` -  * `Asia/Kashgar` -  * `Asia/Kathmandu` -  * `Asia/Katmandu` -  * `Asia/Khandyga` -  * `Asia/Kolkata` -  * `Asia/Krasnoyarsk` -  * `Asia/Kuala_Lumpur` -  * `Asia/Kuching` -  * `Asia/Kuwait` -  * `Asia/Macau` -  * `Asia/Magadan` -  * `Asia/Makassar` -  * `Asia/Manila` -  * `Asia/Muscat` -  * `Asia/Nicosia` -  * `Asia/Novokuznetsk` -  * `Asia/Novosibirsk` -  * `Asia/Omsk` -  * `Asia/Oral` -  * `Asia/Phnom_Penh` -  * `Asia/Pontianak` -  * `Asia/Pyongyang` -  * `Asia/Qatar` -  * `Asia/Qyzylorda` -  * `Asia/Rangoon` -  * `Asia/Riyadh` -  * `Asia/Saigon` -  * `Asia/Sakhalin` -  * `Asia/Samarkand` -  * `Asia/Seoul` -  * `Asia/Shanghai` -  * `Asia/Singapore` -  * `Asia/Taipei` -  * `Asia/Tashkent` -  * `Asia/Tbilisi` -  * `Asia/Tehran` -  * `Asia/Thimphu` -  * `Asia/Tokyo` -  * `Asia/Ulaanbaatar` -  * `Asia/Urumqi` -  * `Asia/Ust-Nera` -  * `Asia/Vientiane` -  * `Asia/Vladivostok` -  * `Asia/Yakutsk` -  * `Asia/Yekaterinburg` -  * `Asia/Yerevan` -  * `Atlantic/Azores` -  * `Atlantic/Bermuda` -  * `Atlantic/Canary` -  * `Atlantic/Cape_Verde` -  * `Atlantic/Faroe` -  * `Atlantic/Madeira` -  * `Atlantic/Reykjavik` -  * `Atlantic/South_Georgia` -  * `Atlantic/St_Helena` -  * `Atlantic/Stanley` -  * `Australia/Adelaide` -  * `Australia/Brisbane` -  * `Australia/Broken_Hill` -  * `Australia/Currie` -  * `Australia/Darwin` -  * `Australia/Eucla` -  * `Australia/Hobart` -  * `Australia/Lindeman` -  * `Australia/Lord_Howe` -  * `Australia/Melbourne` -  * `Australia/Perth` -  * `Australia/Sydney` -  * `Etc/GMT` -  * `Europe/Amsterdam` -  * `Europe/Andorra` -  * `Europe/Athens` -  * `Europe/Belgrade` -  * `Europe/Berlin` -  * `Europe/Bratislava` -  * `Europe/Brussels` -  * `Europe/Bucharest` -  * `Europe/Budapest` -  * `Europe/Busingen` -  * `Europe/Chisinau` -  * `Europe/Copenhagen` -  * `Europe/Dublin` -  * `Europe/Gibraltar` -  * `Europe/Guernsey` -  * `Europe/Helsinki` -  * `Europe/Isle_of_Man` -  * `Europe/Istanbul` -  * `Europe/Jersey` -  * `Europe/Kaliningrad` -  * `Europe/Kiev` -  * `Europe/Lisbon` -  * `Europe/Ljubljana` -  * `Europe/London` -  * `Europe/Luxembourg` -  * `Europe/Madrid` -  * `Europe/Malta` -  * `Europe/Mariehamn` -  * `Europe/Minsk` -  * `Europe/Monaco` -  * `Europe/Moscow` -  * `Europe/Oslo` -  * `Europe/Paris` -  * `Europe/Podgorica` -  * `Europe/Prague` -  * `Europe/Riga` -  * `Europe/Rome` -  * `Europe/Samara` -  * `Europe/San_Marino` -  * `Europe/Sarajevo` -  * `Europe/Simferopol` -  * `Europe/Skopje` -  * `Europe/Sofia` -  * `Europe/Stockholm` -  * `Europe/Tallinn` -  * `Europe/Tirane` -  * `Europe/Uzhgorod` -  * `Europe/Vaduz` -  * `Europe/Vatican` -  * `Europe/Vienna` -  * `Europe/Vilnius` -  * `Europe/Volgograd` -  * `Europe/Warsaw` -  * `Europe/Zagreb` -  * `Europe/Zaporozhye` -  * `Europe/Zurich` -  * `Indian/Antananarivo` -  * `Indian/Chagos` -  * `Indian/Christmas` -  * `Indian/Cocos` -  * `Indian/Comoro` -  * `Indian/Kerguelen` -  * `Indian/Mahe` -  * `Indian/Maldives` -  * `Indian/Mauritius` -  * `Indian/Mayotte` -  * `Indian/Reunion` -  * `Pacific/Apia` -  * `Pacific/Auckland` -  * `Pacific/Chatham` -  * `Pacific/Chuuk` -  * `Pacific/Easter` -  * `Pacific/Efate` -  * `Pacific/Enderbury` -  * `Pacific/Fakaofo` -  * `Pacific/Fiji` -  * `Pacific/Funafuti` -  * `Pacific/Galapagos` -  * `Pacific/Gambier` -  * `Pacific/Guadalcanal` -  * `Pacific/Guam` -  * `Pacific/Honolulu` -  * `Pacific/Johnston` -  * `Pacific/Kiritimati` -  * `Pacific/Kosrae` -  * `Pacific/Kwajalein` -  * `Pacific/Majuro` -  * `Pacific/Marquesas` -  * `Pacific/Midway` -  * `Pacific/Nauru` -  * `Pacific/Norfolk` -  * `Pacific/Noumea` -  * `Pacific/Pago_Pago` -  * `Pacific/Palau` -  * `Pacific/Pitcairn` -  * `Pacific/Pohnpei` -  * `Pacific/Port_Moresby` -  * `Pacific/Rarotonga` -  * `Pacific/Saipan` -  * `Pacific/Tahiti` -  * `Pacific/Tarawa` -  * `Pacific/Tongatapu` -  * `Pacific/Wake` -  * `Pacific/Wallis` -  * `UTC` -
		Timezone         *string                                      `json:"Timezone,omitempty"`
		ApplianceAccount NullableIamAccountRelationship               `json:"ApplianceAccount,omitempty"`
		Organization     NullableOrganizationOrganizationRelationship `json:"Organization,omitempty"`
		// An array of relationships to policyAbstractConfigProfile resources.
		Profiles []PolicyAbstractConfigProfileRelationship `json:"Profiles,omitempty"`
	}

	varNtpPolicyWithoutEmbeddedStruct := NtpPolicyWithoutEmbeddedStruct{}

	err = json.Unmarshal(data, &varNtpPolicyWithoutEmbeddedStruct)
	if err == nil {
		varNtpPolicy := _NtpPolicy{}
		varNtpPolicy.ClassId = varNtpPolicyWithoutEmbeddedStruct.ClassId
		varNtpPolicy.ObjectType = varNtpPolicyWithoutEmbeddedStruct.ObjectType
		varNtpPolicy.AuthenticatedNtpServers = varNtpPolicyWithoutEmbeddedStruct.AuthenticatedNtpServers
		varNtpPolicy.Enabled = varNtpPolicyWithoutEmbeddedStruct.Enabled
		varNtpPolicy.NtpServers = varNtpPolicyWithoutEmbeddedStruct.NtpServers
		varNtpPolicy.Timezone = varNtpPolicyWithoutEmbeddedStruct.Timezone
		varNtpPolicy.ApplianceAccount = varNtpPolicyWithoutEmbeddedStruct.ApplianceAccount
		varNtpPolicy.Organization = varNtpPolicyWithoutEmbeddedStruct.Organization
		varNtpPolicy.Profiles = varNtpPolicyWithoutEmbeddedStruct.Profiles
		*o = NtpPolicy(varNtpPolicy)
	} else {
		return err
	}

	varNtpPolicy := _NtpPolicy{}

	err = json.Unmarshal(data, &varNtpPolicy)
	if err == nil {
		o.PolicyAbstractPolicy = varNtpPolicy.PolicyAbstractPolicy
	} else {
		return err
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "ClassId")
		delete(additionalProperties, "ObjectType")
		delete(additionalProperties, "AuthenticatedNtpServers")
		delete(additionalProperties, "Enabled")
		delete(additionalProperties, "NtpServers")
		delete(additionalProperties, "Timezone")
		delete(additionalProperties, "ApplianceAccount")
		delete(additionalProperties, "Organization")
		delete(additionalProperties, "Profiles")

		// remove fields from embedded structs
		reflectPolicyAbstractPolicy := reflect.ValueOf(o.PolicyAbstractPolicy)
		for i := 0; i < reflectPolicyAbstractPolicy.Type().NumField(); i++ {
			t := reflectPolicyAbstractPolicy.Type().Field(i)

			if jsonTag := t.Tag.Get("json"); jsonTag != "" {
				fieldName := ""
				if commaIdx := strings.Index(jsonTag, ","); commaIdx > 0 {
					fieldName = jsonTag[:commaIdx]
				} else {
					fieldName = jsonTag
				}
				if fieldName != "AdditionalProperties" {
					delete(additionalProperties, fieldName)
				}
			}
		}

		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableNtpPolicy struct {
	value *NtpPolicy
	isSet bool
}

func (v NullableNtpPolicy) Get() *NtpPolicy {
	return v.value
}

func (v *NullableNtpPolicy) Set(val *NtpPolicy) {
	v.value = val
	v.isSet = true
}

func (v NullableNtpPolicy) IsSet() bool {
	return v.isSet
}

func (v *NullableNtpPolicy) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNtpPolicy(val *NtpPolicy) *NullableNtpPolicy {
	return &NullableNtpPolicy{value: val, isSet: true}
}

func (v NullableNtpPolicy) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNtpPolicy) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
