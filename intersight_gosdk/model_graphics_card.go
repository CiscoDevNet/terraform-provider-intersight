/*
Cisco Intersight

Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations. The Intersight OpenAPI document defines the complete set of properties that are returned in the HTTP response. From that perspective, a client can expect that no additional properties are returned, unless these properties are explicitly defined in the OpenAPI document. However, when a client uses an older version of the Intersight OpenAPI document, the server may send additional properties because the software is more recent than the client. In that case, the client may receive properties that it does not know about. Some generated SDKs perform a strict validation of the HTTP response body against the OpenAPI document.

API version: 1.0.11-2024100405
Contact: intersight@cisco.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package intersight

import (
	"encoding/json"
	"fmt"
	"reflect"
	"strings"
)

// checks if the GraphicsCard type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GraphicsCard{}

// GraphicsCard Graphics Card present in a server.
type GraphicsCard struct {
	EquipmentBase
	// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.
	ClassId string `json:"ClassId"`
	// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
	ObjectType string `json:"ObjectType"`
	// The id of the graphics card.
	CardId *int64 `json:"CardId,omitempty"`
	// This field displays the description of the Graphics Processing Unit.
	Description *string `json:"Description,omitempty"`
	// The device id of the graphics card.
	DeviceId *int64 `json:"DeviceId,omitempty"`
	// The expander slot information of the card.
	ExpanderSlot *string `json:"ExpanderSlot,omitempty"`
	// The firmware version of the graphics card.
	FirmwareVersion *string `json:"FirmwareVersion,omitempty"`
	// The identifier of the graphics processor unit.
	GpuId *string `json:"GpuId,omitempty"`
	// This field indicates whether the Graphics Processing Unit is supported on the server or not.
	IsPlatformSupported *bool `json:"IsPlatformSupported,omitempty"`
	// The current mode of the graphics card.
	Mode *string `json:"Mode,omitempty"`
	// The number of controllers under each card.
	NumGpus    *string  `json:"NumGpus,omitempty"`
	OperReason []string `json:"OperReason,omitempty"`
	// The current operational state of the graphics card.
	OperState *string `json:"OperState,omitempty"`
	// This field displays the part number of the Graphics Processing Unit.
	PartNumber *string `json:"PartNumber,omitempty"`
	// The PCI address of the graphics card.
	PciAddress *string `json:"PciAddress,omitempty"`
	// This list contains the PCI address of all controllers for corresponding card.
	PciAddressList *string `json:"PciAddressList,omitempty"`
	// The PCI slot name of the graphics card.
	PciSlot *string `json:"PciSlot,omitempty"`
	// This field displays the product ID of the Graphics Processing Unit.
	Pid *string `json:"Pid,omitempty"`
	// The sub device id of the graphics processor unit.
	SubDeviceId *int64 `json:"SubDeviceId,omitempty"`
	// The sub vendor id of the graphics processor unit.
	SubVendorId *int64 `json:"SubVendorId,omitempty"`
	// The vendor id of the graphics processor unit.
	VendorId        *int64                              `json:"VendorId,omitempty"`
	ComputeBlade    NullableComputeBladeRelationship    `json:"ComputeBlade,omitempty"`
	ComputeBoard    NullableComputeBoardRelationship    `json:"ComputeBoard,omitempty"`
	ComputeRackUnit NullableComputeRackUnitRelationship `json:"ComputeRackUnit,omitempty"`
	// An array of relationships to graphicsController resources.
	GraphicsControllers []GraphicsControllerRelationship            `json:"GraphicsControllers,omitempty"`
	InventoryDeviceInfo NullableInventoryDeviceInfoRelationship     `json:"InventoryDeviceInfo,omitempty"`
	PciDevice           NullablePciDeviceRelationship               `json:"PciDevice,omitempty"`
	PciNode             NullablePciNodeRelationship                 `json:"PciNode,omitempty"`
	RegisteredDevice    NullableAssetDeviceRegistrationRelationship `json:"RegisteredDevice,omitempty"`
	// An array of relationships to firmwareRunningFirmware resources.
	RunningFirmware      []FirmwareRunningFirmwareRelationship `json:"RunningFirmware,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _GraphicsCard GraphicsCard

// NewGraphicsCard instantiates a new GraphicsCard object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGraphicsCard(classId string, objectType string) *GraphicsCard {
	this := GraphicsCard{}
	this.ClassId = classId
	this.ObjectType = objectType
	return &this
}

// NewGraphicsCardWithDefaults instantiates a new GraphicsCard object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGraphicsCardWithDefaults() *GraphicsCard {
	this := GraphicsCard{}
	var classId string = "graphics.Card"
	this.ClassId = classId
	var objectType string = "graphics.Card"
	this.ObjectType = objectType
	return &this
}

// GetClassId returns the ClassId field value
func (o *GraphicsCard) GetClassId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ClassId
}

// GetClassIdOk returns a tuple with the ClassId field value
// and a boolean to check if the value has been set.
func (o *GraphicsCard) GetClassIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ClassId, true
}

// SetClassId sets field value
func (o *GraphicsCard) SetClassId(v string) {
	o.ClassId = v
}

// GetDefaultClassId returns the default value "graphics.Card" of the ClassId field.
func (o *GraphicsCard) GetDefaultClassId() interface{} {
	return "graphics.Card"
}

// GetObjectType returns the ObjectType field value
func (o *GraphicsCard) GetObjectType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ObjectType
}

// GetObjectTypeOk returns a tuple with the ObjectType field value
// and a boolean to check if the value has been set.
func (o *GraphicsCard) GetObjectTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ObjectType, true
}

// SetObjectType sets field value
func (o *GraphicsCard) SetObjectType(v string) {
	o.ObjectType = v
}

// GetDefaultObjectType returns the default value "graphics.Card" of the ObjectType field.
func (o *GraphicsCard) GetDefaultObjectType() interface{} {
	return "graphics.Card"
}

// GetCardId returns the CardId field value if set, zero value otherwise.
func (o *GraphicsCard) GetCardId() int64 {
	if o == nil || IsNil(o.CardId) {
		var ret int64
		return ret
	}
	return *o.CardId
}

// GetCardIdOk returns a tuple with the CardId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GraphicsCard) GetCardIdOk() (*int64, bool) {
	if o == nil || IsNil(o.CardId) {
		return nil, false
	}
	return o.CardId, true
}

// HasCardId returns a boolean if a field has been set.
func (o *GraphicsCard) HasCardId() bool {
	if o != nil && !IsNil(o.CardId) {
		return true
	}

	return false
}

// SetCardId gets a reference to the given int64 and assigns it to the CardId field.
func (o *GraphicsCard) SetCardId(v int64) {
	o.CardId = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *GraphicsCard) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GraphicsCard) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *GraphicsCard) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *GraphicsCard) SetDescription(v string) {
	o.Description = &v
}

// GetDeviceId returns the DeviceId field value if set, zero value otherwise.
func (o *GraphicsCard) GetDeviceId() int64 {
	if o == nil || IsNil(o.DeviceId) {
		var ret int64
		return ret
	}
	return *o.DeviceId
}

// GetDeviceIdOk returns a tuple with the DeviceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GraphicsCard) GetDeviceIdOk() (*int64, bool) {
	if o == nil || IsNil(o.DeviceId) {
		return nil, false
	}
	return o.DeviceId, true
}

// HasDeviceId returns a boolean if a field has been set.
func (o *GraphicsCard) HasDeviceId() bool {
	if o != nil && !IsNil(o.DeviceId) {
		return true
	}

	return false
}

// SetDeviceId gets a reference to the given int64 and assigns it to the DeviceId field.
func (o *GraphicsCard) SetDeviceId(v int64) {
	o.DeviceId = &v
}

// GetExpanderSlot returns the ExpanderSlot field value if set, zero value otherwise.
func (o *GraphicsCard) GetExpanderSlot() string {
	if o == nil || IsNil(o.ExpanderSlot) {
		var ret string
		return ret
	}
	return *o.ExpanderSlot
}

// GetExpanderSlotOk returns a tuple with the ExpanderSlot field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GraphicsCard) GetExpanderSlotOk() (*string, bool) {
	if o == nil || IsNil(o.ExpanderSlot) {
		return nil, false
	}
	return o.ExpanderSlot, true
}

// HasExpanderSlot returns a boolean if a field has been set.
func (o *GraphicsCard) HasExpanderSlot() bool {
	if o != nil && !IsNil(o.ExpanderSlot) {
		return true
	}

	return false
}

// SetExpanderSlot gets a reference to the given string and assigns it to the ExpanderSlot field.
func (o *GraphicsCard) SetExpanderSlot(v string) {
	o.ExpanderSlot = &v
}

// GetFirmwareVersion returns the FirmwareVersion field value if set, zero value otherwise.
func (o *GraphicsCard) GetFirmwareVersion() string {
	if o == nil || IsNil(o.FirmwareVersion) {
		var ret string
		return ret
	}
	return *o.FirmwareVersion
}

// GetFirmwareVersionOk returns a tuple with the FirmwareVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GraphicsCard) GetFirmwareVersionOk() (*string, bool) {
	if o == nil || IsNil(o.FirmwareVersion) {
		return nil, false
	}
	return o.FirmwareVersion, true
}

// HasFirmwareVersion returns a boolean if a field has been set.
func (o *GraphicsCard) HasFirmwareVersion() bool {
	if o != nil && !IsNil(o.FirmwareVersion) {
		return true
	}

	return false
}

// SetFirmwareVersion gets a reference to the given string and assigns it to the FirmwareVersion field.
func (o *GraphicsCard) SetFirmwareVersion(v string) {
	o.FirmwareVersion = &v
}

// GetGpuId returns the GpuId field value if set, zero value otherwise.
func (o *GraphicsCard) GetGpuId() string {
	if o == nil || IsNil(o.GpuId) {
		var ret string
		return ret
	}
	return *o.GpuId
}

// GetGpuIdOk returns a tuple with the GpuId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GraphicsCard) GetGpuIdOk() (*string, bool) {
	if o == nil || IsNil(o.GpuId) {
		return nil, false
	}
	return o.GpuId, true
}

// HasGpuId returns a boolean if a field has been set.
func (o *GraphicsCard) HasGpuId() bool {
	if o != nil && !IsNil(o.GpuId) {
		return true
	}

	return false
}

// SetGpuId gets a reference to the given string and assigns it to the GpuId field.
func (o *GraphicsCard) SetGpuId(v string) {
	o.GpuId = &v
}

// GetIsPlatformSupported returns the IsPlatformSupported field value if set, zero value otherwise.
func (o *GraphicsCard) GetIsPlatformSupported() bool {
	if o == nil || IsNil(o.IsPlatformSupported) {
		var ret bool
		return ret
	}
	return *o.IsPlatformSupported
}

// GetIsPlatformSupportedOk returns a tuple with the IsPlatformSupported field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GraphicsCard) GetIsPlatformSupportedOk() (*bool, bool) {
	if o == nil || IsNil(o.IsPlatformSupported) {
		return nil, false
	}
	return o.IsPlatformSupported, true
}

// HasIsPlatformSupported returns a boolean if a field has been set.
func (o *GraphicsCard) HasIsPlatformSupported() bool {
	if o != nil && !IsNil(o.IsPlatformSupported) {
		return true
	}

	return false
}

// SetIsPlatformSupported gets a reference to the given bool and assigns it to the IsPlatformSupported field.
func (o *GraphicsCard) SetIsPlatformSupported(v bool) {
	o.IsPlatformSupported = &v
}

// GetMode returns the Mode field value if set, zero value otherwise.
func (o *GraphicsCard) GetMode() string {
	if o == nil || IsNil(o.Mode) {
		var ret string
		return ret
	}
	return *o.Mode
}

// GetModeOk returns a tuple with the Mode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GraphicsCard) GetModeOk() (*string, bool) {
	if o == nil || IsNil(o.Mode) {
		return nil, false
	}
	return o.Mode, true
}

// HasMode returns a boolean if a field has been set.
func (o *GraphicsCard) HasMode() bool {
	if o != nil && !IsNil(o.Mode) {
		return true
	}

	return false
}

// SetMode gets a reference to the given string and assigns it to the Mode field.
func (o *GraphicsCard) SetMode(v string) {
	o.Mode = &v
}

// GetNumGpus returns the NumGpus field value if set, zero value otherwise.
func (o *GraphicsCard) GetNumGpus() string {
	if o == nil || IsNil(o.NumGpus) {
		var ret string
		return ret
	}
	return *o.NumGpus
}

// GetNumGpusOk returns a tuple with the NumGpus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GraphicsCard) GetNumGpusOk() (*string, bool) {
	if o == nil || IsNil(o.NumGpus) {
		return nil, false
	}
	return o.NumGpus, true
}

// HasNumGpus returns a boolean if a field has been set.
func (o *GraphicsCard) HasNumGpus() bool {
	if o != nil && !IsNil(o.NumGpus) {
		return true
	}

	return false
}

// SetNumGpus gets a reference to the given string and assigns it to the NumGpus field.
func (o *GraphicsCard) SetNumGpus(v string) {
	o.NumGpus = &v
}

// GetOperReason returns the OperReason field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *GraphicsCard) GetOperReason() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.OperReason
}

// GetOperReasonOk returns a tuple with the OperReason field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GraphicsCard) GetOperReasonOk() ([]string, bool) {
	if o == nil || IsNil(o.OperReason) {
		return nil, false
	}
	return o.OperReason, true
}

// HasOperReason returns a boolean if a field has been set.
func (o *GraphicsCard) HasOperReason() bool {
	if o != nil && !IsNil(o.OperReason) {
		return true
	}

	return false
}

// SetOperReason gets a reference to the given []string and assigns it to the OperReason field.
func (o *GraphicsCard) SetOperReason(v []string) {
	o.OperReason = v
}

// GetOperState returns the OperState field value if set, zero value otherwise.
func (o *GraphicsCard) GetOperState() string {
	if o == nil || IsNil(o.OperState) {
		var ret string
		return ret
	}
	return *o.OperState
}

// GetOperStateOk returns a tuple with the OperState field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GraphicsCard) GetOperStateOk() (*string, bool) {
	if o == nil || IsNil(o.OperState) {
		return nil, false
	}
	return o.OperState, true
}

// HasOperState returns a boolean if a field has been set.
func (o *GraphicsCard) HasOperState() bool {
	if o != nil && !IsNil(o.OperState) {
		return true
	}

	return false
}

// SetOperState gets a reference to the given string and assigns it to the OperState field.
func (o *GraphicsCard) SetOperState(v string) {
	o.OperState = &v
}

// GetPartNumber returns the PartNumber field value if set, zero value otherwise.
func (o *GraphicsCard) GetPartNumber() string {
	if o == nil || IsNil(o.PartNumber) {
		var ret string
		return ret
	}
	return *o.PartNumber
}

// GetPartNumberOk returns a tuple with the PartNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GraphicsCard) GetPartNumberOk() (*string, bool) {
	if o == nil || IsNil(o.PartNumber) {
		return nil, false
	}
	return o.PartNumber, true
}

// HasPartNumber returns a boolean if a field has been set.
func (o *GraphicsCard) HasPartNumber() bool {
	if o != nil && !IsNil(o.PartNumber) {
		return true
	}

	return false
}

// SetPartNumber gets a reference to the given string and assigns it to the PartNumber field.
func (o *GraphicsCard) SetPartNumber(v string) {
	o.PartNumber = &v
}

// GetPciAddress returns the PciAddress field value if set, zero value otherwise.
func (o *GraphicsCard) GetPciAddress() string {
	if o == nil || IsNil(o.PciAddress) {
		var ret string
		return ret
	}
	return *o.PciAddress
}

// GetPciAddressOk returns a tuple with the PciAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GraphicsCard) GetPciAddressOk() (*string, bool) {
	if o == nil || IsNil(o.PciAddress) {
		return nil, false
	}
	return o.PciAddress, true
}

// HasPciAddress returns a boolean if a field has been set.
func (o *GraphicsCard) HasPciAddress() bool {
	if o != nil && !IsNil(o.PciAddress) {
		return true
	}

	return false
}

// SetPciAddress gets a reference to the given string and assigns it to the PciAddress field.
func (o *GraphicsCard) SetPciAddress(v string) {
	o.PciAddress = &v
}

// GetPciAddressList returns the PciAddressList field value if set, zero value otherwise.
func (o *GraphicsCard) GetPciAddressList() string {
	if o == nil || IsNil(o.PciAddressList) {
		var ret string
		return ret
	}
	return *o.PciAddressList
}

// GetPciAddressListOk returns a tuple with the PciAddressList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GraphicsCard) GetPciAddressListOk() (*string, bool) {
	if o == nil || IsNil(o.PciAddressList) {
		return nil, false
	}
	return o.PciAddressList, true
}

// HasPciAddressList returns a boolean if a field has been set.
func (o *GraphicsCard) HasPciAddressList() bool {
	if o != nil && !IsNil(o.PciAddressList) {
		return true
	}

	return false
}

// SetPciAddressList gets a reference to the given string and assigns it to the PciAddressList field.
func (o *GraphicsCard) SetPciAddressList(v string) {
	o.PciAddressList = &v
}

// GetPciSlot returns the PciSlot field value if set, zero value otherwise.
func (o *GraphicsCard) GetPciSlot() string {
	if o == nil || IsNil(o.PciSlot) {
		var ret string
		return ret
	}
	return *o.PciSlot
}

// GetPciSlotOk returns a tuple with the PciSlot field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GraphicsCard) GetPciSlotOk() (*string, bool) {
	if o == nil || IsNil(o.PciSlot) {
		return nil, false
	}
	return o.PciSlot, true
}

// HasPciSlot returns a boolean if a field has been set.
func (o *GraphicsCard) HasPciSlot() bool {
	if o != nil && !IsNil(o.PciSlot) {
		return true
	}

	return false
}

// SetPciSlot gets a reference to the given string and assigns it to the PciSlot field.
func (o *GraphicsCard) SetPciSlot(v string) {
	o.PciSlot = &v
}

// GetPid returns the Pid field value if set, zero value otherwise.
func (o *GraphicsCard) GetPid() string {
	if o == nil || IsNil(o.Pid) {
		var ret string
		return ret
	}
	return *o.Pid
}

// GetPidOk returns a tuple with the Pid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GraphicsCard) GetPidOk() (*string, bool) {
	if o == nil || IsNil(o.Pid) {
		return nil, false
	}
	return o.Pid, true
}

// HasPid returns a boolean if a field has been set.
func (o *GraphicsCard) HasPid() bool {
	if o != nil && !IsNil(o.Pid) {
		return true
	}

	return false
}

// SetPid gets a reference to the given string and assigns it to the Pid field.
func (o *GraphicsCard) SetPid(v string) {
	o.Pid = &v
}

// GetSubDeviceId returns the SubDeviceId field value if set, zero value otherwise.
func (o *GraphicsCard) GetSubDeviceId() int64 {
	if o == nil || IsNil(o.SubDeviceId) {
		var ret int64
		return ret
	}
	return *o.SubDeviceId
}

// GetSubDeviceIdOk returns a tuple with the SubDeviceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GraphicsCard) GetSubDeviceIdOk() (*int64, bool) {
	if o == nil || IsNil(o.SubDeviceId) {
		return nil, false
	}
	return o.SubDeviceId, true
}

// HasSubDeviceId returns a boolean if a field has been set.
func (o *GraphicsCard) HasSubDeviceId() bool {
	if o != nil && !IsNil(o.SubDeviceId) {
		return true
	}

	return false
}

// SetSubDeviceId gets a reference to the given int64 and assigns it to the SubDeviceId field.
func (o *GraphicsCard) SetSubDeviceId(v int64) {
	o.SubDeviceId = &v
}

// GetSubVendorId returns the SubVendorId field value if set, zero value otherwise.
func (o *GraphicsCard) GetSubVendorId() int64 {
	if o == nil || IsNil(o.SubVendorId) {
		var ret int64
		return ret
	}
	return *o.SubVendorId
}

// GetSubVendorIdOk returns a tuple with the SubVendorId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GraphicsCard) GetSubVendorIdOk() (*int64, bool) {
	if o == nil || IsNil(o.SubVendorId) {
		return nil, false
	}
	return o.SubVendorId, true
}

// HasSubVendorId returns a boolean if a field has been set.
func (o *GraphicsCard) HasSubVendorId() bool {
	if o != nil && !IsNil(o.SubVendorId) {
		return true
	}

	return false
}

// SetSubVendorId gets a reference to the given int64 and assigns it to the SubVendorId field.
func (o *GraphicsCard) SetSubVendorId(v int64) {
	o.SubVendorId = &v
}

// GetVendorId returns the VendorId field value if set, zero value otherwise.
func (o *GraphicsCard) GetVendorId() int64 {
	if o == nil || IsNil(o.VendorId) {
		var ret int64
		return ret
	}
	return *o.VendorId
}

// GetVendorIdOk returns a tuple with the VendorId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GraphicsCard) GetVendorIdOk() (*int64, bool) {
	if o == nil || IsNil(o.VendorId) {
		return nil, false
	}
	return o.VendorId, true
}

// HasVendorId returns a boolean if a field has been set.
func (o *GraphicsCard) HasVendorId() bool {
	if o != nil && !IsNil(o.VendorId) {
		return true
	}

	return false
}

// SetVendorId gets a reference to the given int64 and assigns it to the VendorId field.
func (o *GraphicsCard) SetVendorId(v int64) {
	o.VendorId = &v
}

// GetComputeBlade returns the ComputeBlade field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *GraphicsCard) GetComputeBlade() ComputeBladeRelationship {
	if o == nil || IsNil(o.ComputeBlade.Get()) {
		var ret ComputeBladeRelationship
		return ret
	}
	return *o.ComputeBlade.Get()
}

// GetComputeBladeOk returns a tuple with the ComputeBlade field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GraphicsCard) GetComputeBladeOk() (*ComputeBladeRelationship, bool) {
	if o == nil {
		return nil, false
	}
	return o.ComputeBlade.Get(), o.ComputeBlade.IsSet()
}

// HasComputeBlade returns a boolean if a field has been set.
func (o *GraphicsCard) HasComputeBlade() bool {
	if o != nil && o.ComputeBlade.IsSet() {
		return true
	}

	return false
}

// SetComputeBlade gets a reference to the given NullableComputeBladeRelationship and assigns it to the ComputeBlade field.
func (o *GraphicsCard) SetComputeBlade(v ComputeBladeRelationship) {
	o.ComputeBlade.Set(&v)
}

// SetComputeBladeNil sets the value for ComputeBlade to be an explicit nil
func (o *GraphicsCard) SetComputeBladeNil() {
	o.ComputeBlade.Set(nil)
}

// UnsetComputeBlade ensures that no value is present for ComputeBlade, not even an explicit nil
func (o *GraphicsCard) UnsetComputeBlade() {
	o.ComputeBlade.Unset()
}

// GetComputeBoard returns the ComputeBoard field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *GraphicsCard) GetComputeBoard() ComputeBoardRelationship {
	if o == nil || IsNil(o.ComputeBoard.Get()) {
		var ret ComputeBoardRelationship
		return ret
	}
	return *o.ComputeBoard.Get()
}

// GetComputeBoardOk returns a tuple with the ComputeBoard field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GraphicsCard) GetComputeBoardOk() (*ComputeBoardRelationship, bool) {
	if o == nil {
		return nil, false
	}
	return o.ComputeBoard.Get(), o.ComputeBoard.IsSet()
}

// HasComputeBoard returns a boolean if a field has been set.
func (o *GraphicsCard) HasComputeBoard() bool {
	if o != nil && o.ComputeBoard.IsSet() {
		return true
	}

	return false
}

// SetComputeBoard gets a reference to the given NullableComputeBoardRelationship and assigns it to the ComputeBoard field.
func (o *GraphicsCard) SetComputeBoard(v ComputeBoardRelationship) {
	o.ComputeBoard.Set(&v)
}

// SetComputeBoardNil sets the value for ComputeBoard to be an explicit nil
func (o *GraphicsCard) SetComputeBoardNil() {
	o.ComputeBoard.Set(nil)
}

// UnsetComputeBoard ensures that no value is present for ComputeBoard, not even an explicit nil
func (o *GraphicsCard) UnsetComputeBoard() {
	o.ComputeBoard.Unset()
}

// GetComputeRackUnit returns the ComputeRackUnit field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *GraphicsCard) GetComputeRackUnit() ComputeRackUnitRelationship {
	if o == nil || IsNil(o.ComputeRackUnit.Get()) {
		var ret ComputeRackUnitRelationship
		return ret
	}
	return *o.ComputeRackUnit.Get()
}

// GetComputeRackUnitOk returns a tuple with the ComputeRackUnit field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GraphicsCard) GetComputeRackUnitOk() (*ComputeRackUnitRelationship, bool) {
	if o == nil {
		return nil, false
	}
	return o.ComputeRackUnit.Get(), o.ComputeRackUnit.IsSet()
}

// HasComputeRackUnit returns a boolean if a field has been set.
func (o *GraphicsCard) HasComputeRackUnit() bool {
	if o != nil && o.ComputeRackUnit.IsSet() {
		return true
	}

	return false
}

// SetComputeRackUnit gets a reference to the given NullableComputeRackUnitRelationship and assigns it to the ComputeRackUnit field.
func (o *GraphicsCard) SetComputeRackUnit(v ComputeRackUnitRelationship) {
	o.ComputeRackUnit.Set(&v)
}

// SetComputeRackUnitNil sets the value for ComputeRackUnit to be an explicit nil
func (o *GraphicsCard) SetComputeRackUnitNil() {
	o.ComputeRackUnit.Set(nil)
}

// UnsetComputeRackUnit ensures that no value is present for ComputeRackUnit, not even an explicit nil
func (o *GraphicsCard) UnsetComputeRackUnit() {
	o.ComputeRackUnit.Unset()
}

// GetGraphicsControllers returns the GraphicsControllers field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *GraphicsCard) GetGraphicsControllers() []GraphicsControllerRelationship {
	if o == nil {
		var ret []GraphicsControllerRelationship
		return ret
	}
	return o.GraphicsControllers
}

// GetGraphicsControllersOk returns a tuple with the GraphicsControllers field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GraphicsCard) GetGraphicsControllersOk() ([]GraphicsControllerRelationship, bool) {
	if o == nil || IsNil(o.GraphicsControllers) {
		return nil, false
	}
	return o.GraphicsControllers, true
}

// HasGraphicsControllers returns a boolean if a field has been set.
func (o *GraphicsCard) HasGraphicsControllers() bool {
	if o != nil && !IsNil(o.GraphicsControllers) {
		return true
	}

	return false
}

// SetGraphicsControllers gets a reference to the given []GraphicsControllerRelationship and assigns it to the GraphicsControllers field.
func (o *GraphicsCard) SetGraphicsControllers(v []GraphicsControllerRelationship) {
	o.GraphicsControllers = v
}

// GetInventoryDeviceInfo returns the InventoryDeviceInfo field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *GraphicsCard) GetInventoryDeviceInfo() InventoryDeviceInfoRelationship {
	if o == nil || IsNil(o.InventoryDeviceInfo.Get()) {
		var ret InventoryDeviceInfoRelationship
		return ret
	}
	return *o.InventoryDeviceInfo.Get()
}

// GetInventoryDeviceInfoOk returns a tuple with the InventoryDeviceInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GraphicsCard) GetInventoryDeviceInfoOk() (*InventoryDeviceInfoRelationship, bool) {
	if o == nil {
		return nil, false
	}
	return o.InventoryDeviceInfo.Get(), o.InventoryDeviceInfo.IsSet()
}

// HasInventoryDeviceInfo returns a boolean if a field has been set.
func (o *GraphicsCard) HasInventoryDeviceInfo() bool {
	if o != nil && o.InventoryDeviceInfo.IsSet() {
		return true
	}

	return false
}

// SetInventoryDeviceInfo gets a reference to the given NullableInventoryDeviceInfoRelationship and assigns it to the InventoryDeviceInfo field.
func (o *GraphicsCard) SetInventoryDeviceInfo(v InventoryDeviceInfoRelationship) {
	o.InventoryDeviceInfo.Set(&v)
}

// SetInventoryDeviceInfoNil sets the value for InventoryDeviceInfo to be an explicit nil
func (o *GraphicsCard) SetInventoryDeviceInfoNil() {
	o.InventoryDeviceInfo.Set(nil)
}

// UnsetInventoryDeviceInfo ensures that no value is present for InventoryDeviceInfo, not even an explicit nil
func (o *GraphicsCard) UnsetInventoryDeviceInfo() {
	o.InventoryDeviceInfo.Unset()
}

// GetPciDevice returns the PciDevice field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *GraphicsCard) GetPciDevice() PciDeviceRelationship {
	if o == nil || IsNil(o.PciDevice.Get()) {
		var ret PciDeviceRelationship
		return ret
	}
	return *o.PciDevice.Get()
}

// GetPciDeviceOk returns a tuple with the PciDevice field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GraphicsCard) GetPciDeviceOk() (*PciDeviceRelationship, bool) {
	if o == nil {
		return nil, false
	}
	return o.PciDevice.Get(), o.PciDevice.IsSet()
}

// HasPciDevice returns a boolean if a field has been set.
func (o *GraphicsCard) HasPciDevice() bool {
	if o != nil && o.PciDevice.IsSet() {
		return true
	}

	return false
}

// SetPciDevice gets a reference to the given NullablePciDeviceRelationship and assigns it to the PciDevice field.
func (o *GraphicsCard) SetPciDevice(v PciDeviceRelationship) {
	o.PciDevice.Set(&v)
}

// SetPciDeviceNil sets the value for PciDevice to be an explicit nil
func (o *GraphicsCard) SetPciDeviceNil() {
	o.PciDevice.Set(nil)
}

// UnsetPciDevice ensures that no value is present for PciDevice, not even an explicit nil
func (o *GraphicsCard) UnsetPciDevice() {
	o.PciDevice.Unset()
}

// GetPciNode returns the PciNode field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *GraphicsCard) GetPciNode() PciNodeRelationship {
	if o == nil || IsNil(o.PciNode.Get()) {
		var ret PciNodeRelationship
		return ret
	}
	return *o.PciNode.Get()
}

// GetPciNodeOk returns a tuple with the PciNode field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GraphicsCard) GetPciNodeOk() (*PciNodeRelationship, bool) {
	if o == nil {
		return nil, false
	}
	return o.PciNode.Get(), o.PciNode.IsSet()
}

// HasPciNode returns a boolean if a field has been set.
func (o *GraphicsCard) HasPciNode() bool {
	if o != nil && o.PciNode.IsSet() {
		return true
	}

	return false
}

// SetPciNode gets a reference to the given NullablePciNodeRelationship and assigns it to the PciNode field.
func (o *GraphicsCard) SetPciNode(v PciNodeRelationship) {
	o.PciNode.Set(&v)
}

// SetPciNodeNil sets the value for PciNode to be an explicit nil
func (o *GraphicsCard) SetPciNodeNil() {
	o.PciNode.Set(nil)
}

// UnsetPciNode ensures that no value is present for PciNode, not even an explicit nil
func (o *GraphicsCard) UnsetPciNode() {
	o.PciNode.Unset()
}

// GetRegisteredDevice returns the RegisteredDevice field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *GraphicsCard) GetRegisteredDevice() AssetDeviceRegistrationRelationship {
	if o == nil || IsNil(o.RegisteredDevice.Get()) {
		var ret AssetDeviceRegistrationRelationship
		return ret
	}
	return *o.RegisteredDevice.Get()
}

// GetRegisteredDeviceOk returns a tuple with the RegisteredDevice field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GraphicsCard) GetRegisteredDeviceOk() (*AssetDeviceRegistrationRelationship, bool) {
	if o == nil {
		return nil, false
	}
	return o.RegisteredDevice.Get(), o.RegisteredDevice.IsSet()
}

// HasRegisteredDevice returns a boolean if a field has been set.
func (o *GraphicsCard) HasRegisteredDevice() bool {
	if o != nil && o.RegisteredDevice.IsSet() {
		return true
	}

	return false
}

// SetRegisteredDevice gets a reference to the given NullableAssetDeviceRegistrationRelationship and assigns it to the RegisteredDevice field.
func (o *GraphicsCard) SetRegisteredDevice(v AssetDeviceRegistrationRelationship) {
	o.RegisteredDevice.Set(&v)
}

// SetRegisteredDeviceNil sets the value for RegisteredDevice to be an explicit nil
func (o *GraphicsCard) SetRegisteredDeviceNil() {
	o.RegisteredDevice.Set(nil)
}

// UnsetRegisteredDevice ensures that no value is present for RegisteredDevice, not even an explicit nil
func (o *GraphicsCard) UnsetRegisteredDevice() {
	o.RegisteredDevice.Unset()
}

// GetRunningFirmware returns the RunningFirmware field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *GraphicsCard) GetRunningFirmware() []FirmwareRunningFirmwareRelationship {
	if o == nil {
		var ret []FirmwareRunningFirmwareRelationship
		return ret
	}
	return o.RunningFirmware
}

// GetRunningFirmwareOk returns a tuple with the RunningFirmware field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GraphicsCard) GetRunningFirmwareOk() ([]FirmwareRunningFirmwareRelationship, bool) {
	if o == nil || IsNil(o.RunningFirmware) {
		return nil, false
	}
	return o.RunningFirmware, true
}

// HasRunningFirmware returns a boolean if a field has been set.
func (o *GraphicsCard) HasRunningFirmware() bool {
	if o != nil && !IsNil(o.RunningFirmware) {
		return true
	}

	return false
}

// SetRunningFirmware gets a reference to the given []FirmwareRunningFirmwareRelationship and assigns it to the RunningFirmware field.
func (o *GraphicsCard) SetRunningFirmware(v []FirmwareRunningFirmwareRelationship) {
	o.RunningFirmware = v
}

func (o GraphicsCard) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GraphicsCard) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	serializedEquipmentBase, errEquipmentBase := json.Marshal(o.EquipmentBase)
	if errEquipmentBase != nil {
		return map[string]interface{}{}, errEquipmentBase
	}
	errEquipmentBase = json.Unmarshal([]byte(serializedEquipmentBase), &toSerialize)
	if errEquipmentBase != nil {
		return map[string]interface{}{}, errEquipmentBase
	}
	if _, exists := toSerialize["ClassId"]; !exists {
		toSerialize["ClassId"] = o.GetDefaultClassId()
	}
	toSerialize["ClassId"] = o.ClassId
	if _, exists := toSerialize["ObjectType"]; !exists {
		toSerialize["ObjectType"] = o.GetDefaultObjectType()
	}
	toSerialize["ObjectType"] = o.ObjectType
	if !IsNil(o.CardId) {
		toSerialize["CardId"] = o.CardId
	}
	if !IsNil(o.Description) {
		toSerialize["Description"] = o.Description
	}
	if !IsNil(o.DeviceId) {
		toSerialize["DeviceId"] = o.DeviceId
	}
	if !IsNil(o.ExpanderSlot) {
		toSerialize["ExpanderSlot"] = o.ExpanderSlot
	}
	if !IsNil(o.FirmwareVersion) {
		toSerialize["FirmwareVersion"] = o.FirmwareVersion
	}
	if !IsNil(o.GpuId) {
		toSerialize["GpuId"] = o.GpuId
	}
	if !IsNil(o.IsPlatformSupported) {
		toSerialize["IsPlatformSupported"] = o.IsPlatformSupported
	}
	if !IsNil(o.Mode) {
		toSerialize["Mode"] = o.Mode
	}
	if !IsNil(o.NumGpus) {
		toSerialize["NumGpus"] = o.NumGpus
	}
	if o.OperReason != nil {
		toSerialize["OperReason"] = o.OperReason
	}
	if !IsNil(o.OperState) {
		toSerialize["OperState"] = o.OperState
	}
	if !IsNil(o.PartNumber) {
		toSerialize["PartNumber"] = o.PartNumber
	}
	if !IsNil(o.PciAddress) {
		toSerialize["PciAddress"] = o.PciAddress
	}
	if !IsNil(o.PciAddressList) {
		toSerialize["PciAddressList"] = o.PciAddressList
	}
	if !IsNil(o.PciSlot) {
		toSerialize["PciSlot"] = o.PciSlot
	}
	if !IsNil(o.Pid) {
		toSerialize["Pid"] = o.Pid
	}
	if !IsNil(o.SubDeviceId) {
		toSerialize["SubDeviceId"] = o.SubDeviceId
	}
	if !IsNil(o.SubVendorId) {
		toSerialize["SubVendorId"] = o.SubVendorId
	}
	if !IsNil(o.VendorId) {
		toSerialize["VendorId"] = o.VendorId
	}
	if o.ComputeBlade.IsSet() {
		toSerialize["ComputeBlade"] = o.ComputeBlade.Get()
	}
	if o.ComputeBoard.IsSet() {
		toSerialize["ComputeBoard"] = o.ComputeBoard.Get()
	}
	if o.ComputeRackUnit.IsSet() {
		toSerialize["ComputeRackUnit"] = o.ComputeRackUnit.Get()
	}
	if o.GraphicsControllers != nil {
		toSerialize["GraphicsControllers"] = o.GraphicsControllers
	}
	if o.InventoryDeviceInfo.IsSet() {
		toSerialize["InventoryDeviceInfo"] = o.InventoryDeviceInfo.Get()
	}
	if o.PciDevice.IsSet() {
		toSerialize["PciDevice"] = o.PciDevice.Get()
	}
	if o.PciNode.IsSet() {
		toSerialize["PciNode"] = o.PciNode.Get()
	}
	if o.RegisteredDevice.IsSet() {
		toSerialize["RegisteredDevice"] = o.RegisteredDevice.Get()
	}
	if o.RunningFirmware != nil {
		toSerialize["RunningFirmware"] = o.RunningFirmware
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *GraphicsCard) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"ClassId",
		"ObjectType",
	}

	// defaultValueFuncMap captures the default values for required properties.
	// These values are used when required properties are missing from the payload.
	defaultValueFuncMap := map[string]func() interface{}{
		"ClassId":    o.GetDefaultClassId,
		"ObjectType": o.GetDefaultObjectType,
	}
	var defaultValueApplied bool
	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			if _, ok := defaultValueFuncMap[requiredProperty]; ok {
				allProperties[requiredProperty] = defaultValueFuncMap[requiredProperty]()
				defaultValueApplied = true
			}
		}
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	if defaultValueApplied {
		data, err = json.Marshal(allProperties)
		if err != nil {
			return err
		}
	}
	type GraphicsCardWithoutEmbeddedStruct struct {
		// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.
		ClassId string `json:"ClassId"`
		// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
		ObjectType string `json:"ObjectType"`
		// The id of the graphics card.
		CardId *int64 `json:"CardId,omitempty"`
		// This field displays the description of the Graphics Processing Unit.
		Description *string `json:"Description,omitempty"`
		// The device id of the graphics card.
		DeviceId *int64 `json:"DeviceId,omitempty"`
		// The expander slot information of the card.
		ExpanderSlot *string `json:"ExpanderSlot,omitempty"`
		// The firmware version of the graphics card.
		FirmwareVersion *string `json:"FirmwareVersion,omitempty"`
		// The identifier of the graphics processor unit.
		GpuId *string `json:"GpuId,omitempty"`
		// This field indicates whether the Graphics Processing Unit is supported on the server or not.
		IsPlatformSupported *bool `json:"IsPlatformSupported,omitempty"`
		// The current mode of the graphics card.
		Mode *string `json:"Mode,omitempty"`
		// The number of controllers under each card.
		NumGpus    *string  `json:"NumGpus,omitempty"`
		OperReason []string `json:"OperReason,omitempty"`
		// The current operational state of the graphics card.
		OperState *string `json:"OperState,omitempty"`
		// This field displays the part number of the Graphics Processing Unit.
		PartNumber *string `json:"PartNumber,omitempty"`
		// The PCI address of the graphics card.
		PciAddress *string `json:"PciAddress,omitempty"`
		// This list contains the PCI address of all controllers for corresponding card.
		PciAddressList *string `json:"PciAddressList,omitempty"`
		// The PCI slot name of the graphics card.
		PciSlot *string `json:"PciSlot,omitempty"`
		// This field displays the product ID of the Graphics Processing Unit.
		Pid *string `json:"Pid,omitempty"`
		// The sub device id of the graphics processor unit.
		SubDeviceId *int64 `json:"SubDeviceId,omitempty"`
		// The sub vendor id of the graphics processor unit.
		SubVendorId *int64 `json:"SubVendorId,omitempty"`
		// The vendor id of the graphics processor unit.
		VendorId        *int64                              `json:"VendorId,omitempty"`
		ComputeBlade    NullableComputeBladeRelationship    `json:"ComputeBlade,omitempty"`
		ComputeBoard    NullableComputeBoardRelationship    `json:"ComputeBoard,omitempty"`
		ComputeRackUnit NullableComputeRackUnitRelationship `json:"ComputeRackUnit,omitempty"`
		// An array of relationships to graphicsController resources.
		GraphicsControllers []GraphicsControllerRelationship            `json:"GraphicsControllers,omitempty"`
		InventoryDeviceInfo NullableInventoryDeviceInfoRelationship     `json:"InventoryDeviceInfo,omitempty"`
		PciDevice           NullablePciDeviceRelationship               `json:"PciDevice,omitempty"`
		PciNode             NullablePciNodeRelationship                 `json:"PciNode,omitempty"`
		RegisteredDevice    NullableAssetDeviceRegistrationRelationship `json:"RegisteredDevice,omitempty"`
		// An array of relationships to firmwareRunningFirmware resources.
		RunningFirmware []FirmwareRunningFirmwareRelationship `json:"RunningFirmware,omitempty"`
	}

	varGraphicsCardWithoutEmbeddedStruct := GraphicsCardWithoutEmbeddedStruct{}

	err = json.Unmarshal(data, &varGraphicsCardWithoutEmbeddedStruct)
	if err == nil {
		varGraphicsCard := _GraphicsCard{}
		varGraphicsCard.ClassId = varGraphicsCardWithoutEmbeddedStruct.ClassId
		varGraphicsCard.ObjectType = varGraphicsCardWithoutEmbeddedStruct.ObjectType
		varGraphicsCard.CardId = varGraphicsCardWithoutEmbeddedStruct.CardId
		varGraphicsCard.Description = varGraphicsCardWithoutEmbeddedStruct.Description
		varGraphicsCard.DeviceId = varGraphicsCardWithoutEmbeddedStruct.DeviceId
		varGraphicsCard.ExpanderSlot = varGraphicsCardWithoutEmbeddedStruct.ExpanderSlot
		varGraphicsCard.FirmwareVersion = varGraphicsCardWithoutEmbeddedStruct.FirmwareVersion
		varGraphicsCard.GpuId = varGraphicsCardWithoutEmbeddedStruct.GpuId
		varGraphicsCard.IsPlatformSupported = varGraphicsCardWithoutEmbeddedStruct.IsPlatformSupported
		varGraphicsCard.Mode = varGraphicsCardWithoutEmbeddedStruct.Mode
		varGraphicsCard.NumGpus = varGraphicsCardWithoutEmbeddedStruct.NumGpus
		varGraphicsCard.OperReason = varGraphicsCardWithoutEmbeddedStruct.OperReason
		varGraphicsCard.OperState = varGraphicsCardWithoutEmbeddedStruct.OperState
		varGraphicsCard.PartNumber = varGraphicsCardWithoutEmbeddedStruct.PartNumber
		varGraphicsCard.PciAddress = varGraphicsCardWithoutEmbeddedStruct.PciAddress
		varGraphicsCard.PciAddressList = varGraphicsCardWithoutEmbeddedStruct.PciAddressList
		varGraphicsCard.PciSlot = varGraphicsCardWithoutEmbeddedStruct.PciSlot
		varGraphicsCard.Pid = varGraphicsCardWithoutEmbeddedStruct.Pid
		varGraphicsCard.SubDeviceId = varGraphicsCardWithoutEmbeddedStruct.SubDeviceId
		varGraphicsCard.SubVendorId = varGraphicsCardWithoutEmbeddedStruct.SubVendorId
		varGraphicsCard.VendorId = varGraphicsCardWithoutEmbeddedStruct.VendorId
		varGraphicsCard.ComputeBlade = varGraphicsCardWithoutEmbeddedStruct.ComputeBlade
		varGraphicsCard.ComputeBoard = varGraphicsCardWithoutEmbeddedStruct.ComputeBoard
		varGraphicsCard.ComputeRackUnit = varGraphicsCardWithoutEmbeddedStruct.ComputeRackUnit
		varGraphicsCard.GraphicsControllers = varGraphicsCardWithoutEmbeddedStruct.GraphicsControllers
		varGraphicsCard.InventoryDeviceInfo = varGraphicsCardWithoutEmbeddedStruct.InventoryDeviceInfo
		varGraphicsCard.PciDevice = varGraphicsCardWithoutEmbeddedStruct.PciDevice
		varGraphicsCard.PciNode = varGraphicsCardWithoutEmbeddedStruct.PciNode
		varGraphicsCard.RegisteredDevice = varGraphicsCardWithoutEmbeddedStruct.RegisteredDevice
		varGraphicsCard.RunningFirmware = varGraphicsCardWithoutEmbeddedStruct.RunningFirmware
		*o = GraphicsCard(varGraphicsCard)
	} else {
		return err
	}

	varGraphicsCard := _GraphicsCard{}

	err = json.Unmarshal(data, &varGraphicsCard)
	if err == nil {
		o.EquipmentBase = varGraphicsCard.EquipmentBase
	} else {
		return err
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "ClassId")
		delete(additionalProperties, "ObjectType")
		delete(additionalProperties, "CardId")
		delete(additionalProperties, "Description")
		delete(additionalProperties, "DeviceId")
		delete(additionalProperties, "ExpanderSlot")
		delete(additionalProperties, "FirmwareVersion")
		delete(additionalProperties, "GpuId")
		delete(additionalProperties, "IsPlatformSupported")
		delete(additionalProperties, "Mode")
		delete(additionalProperties, "NumGpus")
		delete(additionalProperties, "OperReason")
		delete(additionalProperties, "OperState")
		delete(additionalProperties, "PartNumber")
		delete(additionalProperties, "PciAddress")
		delete(additionalProperties, "PciAddressList")
		delete(additionalProperties, "PciSlot")
		delete(additionalProperties, "Pid")
		delete(additionalProperties, "SubDeviceId")
		delete(additionalProperties, "SubVendorId")
		delete(additionalProperties, "VendorId")
		delete(additionalProperties, "ComputeBlade")
		delete(additionalProperties, "ComputeBoard")
		delete(additionalProperties, "ComputeRackUnit")
		delete(additionalProperties, "GraphicsControllers")
		delete(additionalProperties, "InventoryDeviceInfo")
		delete(additionalProperties, "PciDevice")
		delete(additionalProperties, "PciNode")
		delete(additionalProperties, "RegisteredDevice")
		delete(additionalProperties, "RunningFirmware")

		// remove fields from embedded structs
		reflectEquipmentBase := reflect.ValueOf(o.EquipmentBase)
		for i := 0; i < reflectEquipmentBase.Type().NumField(); i++ {
			t := reflectEquipmentBase.Type().Field(i)

			if jsonTag := t.Tag.Get("json"); jsonTag != "" {
				fieldName := ""
				if commaIdx := strings.Index(jsonTag, ","); commaIdx > 0 {
					fieldName = jsonTag[:commaIdx]
				} else {
					fieldName = jsonTag
				}
				if fieldName != "AdditionalProperties" {
					delete(additionalProperties, fieldName)
				}
			}
		}

		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableGraphicsCard struct {
	value *GraphicsCard
	isSet bool
}

func (v NullableGraphicsCard) Get() *GraphicsCard {
	return v.value
}

func (v *NullableGraphicsCard) Set(val *GraphicsCard) {
	v.value = val
	v.isSet = true
}

func (v NullableGraphicsCard) IsSet() bool {
	return v.isSet
}

func (v *NullableGraphicsCard) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGraphicsCard(val *GraphicsCard) *NullableGraphicsCard {
	return &NullableGraphicsCard{value: val, isSet: true}
}

func (v NullableGraphicsCard) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGraphicsCard) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
