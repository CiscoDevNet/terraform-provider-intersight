/*
Cisco Intersight

Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations. The Intersight OpenAPI document defines the complete set of properties that are returned in the HTTP response. From that perspective, a client can expect that no additional properties are returned, unless these properties are explicitly defined in the OpenAPI document. However, when a client uses an older version of the Intersight OpenAPI document, the server may send additional properties because the software is more recent than the client. In that case, the client may receive properties that it does not know about. Some generated SDKs perform a strict validation of the HTTP response body against the OpenAPI document.

API version: 1.0.11-13515
Contact: intersight@cisco.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package intersight

import (
	"encoding/json"
	"reflect"
	"strings"
)

// StorageHitachiSnapshot A snapshot entity in Hitachi storage array.
type StorageHitachiSnapshot struct {
	MoBaseMo
	// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.
	ClassId string `json:"ClassId"`
	// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
	ObjectType string `json:"ObjectType"`
	// Concordance rate for pairs.
	ConcordanceRate *int64 `json:"ConcordanceRate,omitempty"`
	// Whether the pair was created in the consistency group mode (CTG mode).
	IsConsistencyGroup *bool `json:"IsConsistencyGroup,omitempty"`
	// Whether the pair can be a multistage pair.
	IsMultistageable *bool `json:"IsMultistageable,omitempty"`
	// MU number of the primary volume.
	MuNumber *int64 `json:"MuNumber,omitempty"`
	// Object ID of the pair for snapshot data.
	Name *string `json:"Name,omitempty"`
	// LDEV number of the primary volume.
	PvolLdevId *int64 `json:"PvolLdevId,omitempty"`
	// Name of the snapshot group that contains the pair for snapshot data.
	SnapshotGroupName *string `json:"SnapshotGroupName,omitempty"`
	// ID of the pool in which the snapshot data is created.
	SnapshotPoolId *int64 `json:"SnapshotPoolId,omitempty"`
	// Time when snapshot data was created.
	SplitTime *string `json:"SplitTime,omitempty"`
	// Pair status. Pair status changes according to the pair operation.
	Status *string `json:"Status,omitempty"`
	// LDEV number of the secondary volume.
	SvolLdevId           *int64                               `json:"SvolLdevId,omitempty"`
	Array                *StorageHitachiArrayRelationship     `json:"Array,omitempty"`
	RegisteredDevice     *AssetDeviceRegistrationRelationship `json:"RegisteredDevice,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _StorageHitachiSnapshot StorageHitachiSnapshot

// NewStorageHitachiSnapshot instantiates a new StorageHitachiSnapshot object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStorageHitachiSnapshot(classId string, objectType string) *StorageHitachiSnapshot {
	this := StorageHitachiSnapshot{}
	this.ClassId = classId
	this.ObjectType = objectType
	return &this
}

// NewStorageHitachiSnapshotWithDefaults instantiates a new StorageHitachiSnapshot object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStorageHitachiSnapshotWithDefaults() *StorageHitachiSnapshot {
	this := StorageHitachiSnapshot{}
	var classId string = "storage.HitachiSnapshot"
	this.ClassId = classId
	var objectType string = "storage.HitachiSnapshot"
	this.ObjectType = objectType
	return &this
}

// GetClassId returns the ClassId field value
func (o *StorageHitachiSnapshot) GetClassId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ClassId
}

// GetClassIdOk returns a tuple with the ClassId field value
// and a boolean to check if the value has been set.
func (o *StorageHitachiSnapshot) GetClassIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ClassId, true
}

// SetClassId sets field value
func (o *StorageHitachiSnapshot) SetClassId(v string) {
	o.ClassId = v
}

// GetObjectType returns the ObjectType field value
func (o *StorageHitachiSnapshot) GetObjectType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ObjectType
}

// GetObjectTypeOk returns a tuple with the ObjectType field value
// and a boolean to check if the value has been set.
func (o *StorageHitachiSnapshot) GetObjectTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ObjectType, true
}

// SetObjectType sets field value
func (o *StorageHitachiSnapshot) SetObjectType(v string) {
	o.ObjectType = v
}

// GetConcordanceRate returns the ConcordanceRate field value if set, zero value otherwise.
func (o *StorageHitachiSnapshot) GetConcordanceRate() int64 {
	if o == nil || o.ConcordanceRate == nil {
		var ret int64
		return ret
	}
	return *o.ConcordanceRate
}

// GetConcordanceRateOk returns a tuple with the ConcordanceRate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageHitachiSnapshot) GetConcordanceRateOk() (*int64, bool) {
	if o == nil || o.ConcordanceRate == nil {
		return nil, false
	}
	return o.ConcordanceRate, true
}

// HasConcordanceRate returns a boolean if a field has been set.
func (o *StorageHitachiSnapshot) HasConcordanceRate() bool {
	if o != nil && o.ConcordanceRate != nil {
		return true
	}

	return false
}

// SetConcordanceRate gets a reference to the given int64 and assigns it to the ConcordanceRate field.
func (o *StorageHitachiSnapshot) SetConcordanceRate(v int64) {
	o.ConcordanceRate = &v
}

// GetIsConsistencyGroup returns the IsConsistencyGroup field value if set, zero value otherwise.
func (o *StorageHitachiSnapshot) GetIsConsistencyGroup() bool {
	if o == nil || o.IsConsistencyGroup == nil {
		var ret bool
		return ret
	}
	return *o.IsConsistencyGroup
}

// GetIsConsistencyGroupOk returns a tuple with the IsConsistencyGroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageHitachiSnapshot) GetIsConsistencyGroupOk() (*bool, bool) {
	if o == nil || o.IsConsistencyGroup == nil {
		return nil, false
	}
	return o.IsConsistencyGroup, true
}

// HasIsConsistencyGroup returns a boolean if a field has been set.
func (o *StorageHitachiSnapshot) HasIsConsistencyGroup() bool {
	if o != nil && o.IsConsistencyGroup != nil {
		return true
	}

	return false
}

// SetIsConsistencyGroup gets a reference to the given bool and assigns it to the IsConsistencyGroup field.
func (o *StorageHitachiSnapshot) SetIsConsistencyGroup(v bool) {
	o.IsConsistencyGroup = &v
}

// GetIsMultistageable returns the IsMultistageable field value if set, zero value otherwise.
func (o *StorageHitachiSnapshot) GetIsMultistageable() bool {
	if o == nil || o.IsMultistageable == nil {
		var ret bool
		return ret
	}
	return *o.IsMultistageable
}

// GetIsMultistageableOk returns a tuple with the IsMultistageable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageHitachiSnapshot) GetIsMultistageableOk() (*bool, bool) {
	if o == nil || o.IsMultistageable == nil {
		return nil, false
	}
	return o.IsMultistageable, true
}

// HasIsMultistageable returns a boolean if a field has been set.
func (o *StorageHitachiSnapshot) HasIsMultistageable() bool {
	if o != nil && o.IsMultistageable != nil {
		return true
	}

	return false
}

// SetIsMultistageable gets a reference to the given bool and assigns it to the IsMultistageable field.
func (o *StorageHitachiSnapshot) SetIsMultistageable(v bool) {
	o.IsMultistageable = &v
}

// GetMuNumber returns the MuNumber field value if set, zero value otherwise.
func (o *StorageHitachiSnapshot) GetMuNumber() int64 {
	if o == nil || o.MuNumber == nil {
		var ret int64
		return ret
	}
	return *o.MuNumber
}

// GetMuNumberOk returns a tuple with the MuNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageHitachiSnapshot) GetMuNumberOk() (*int64, bool) {
	if o == nil || o.MuNumber == nil {
		return nil, false
	}
	return o.MuNumber, true
}

// HasMuNumber returns a boolean if a field has been set.
func (o *StorageHitachiSnapshot) HasMuNumber() bool {
	if o != nil && o.MuNumber != nil {
		return true
	}

	return false
}

// SetMuNumber gets a reference to the given int64 and assigns it to the MuNumber field.
func (o *StorageHitachiSnapshot) SetMuNumber(v int64) {
	o.MuNumber = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *StorageHitachiSnapshot) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageHitachiSnapshot) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *StorageHitachiSnapshot) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *StorageHitachiSnapshot) SetName(v string) {
	o.Name = &v
}

// GetPvolLdevId returns the PvolLdevId field value if set, zero value otherwise.
func (o *StorageHitachiSnapshot) GetPvolLdevId() int64 {
	if o == nil || o.PvolLdevId == nil {
		var ret int64
		return ret
	}
	return *o.PvolLdevId
}

// GetPvolLdevIdOk returns a tuple with the PvolLdevId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageHitachiSnapshot) GetPvolLdevIdOk() (*int64, bool) {
	if o == nil || o.PvolLdevId == nil {
		return nil, false
	}
	return o.PvolLdevId, true
}

// HasPvolLdevId returns a boolean if a field has been set.
func (o *StorageHitachiSnapshot) HasPvolLdevId() bool {
	if o != nil && o.PvolLdevId != nil {
		return true
	}

	return false
}

// SetPvolLdevId gets a reference to the given int64 and assigns it to the PvolLdevId field.
func (o *StorageHitachiSnapshot) SetPvolLdevId(v int64) {
	o.PvolLdevId = &v
}

// GetSnapshotGroupName returns the SnapshotGroupName field value if set, zero value otherwise.
func (o *StorageHitachiSnapshot) GetSnapshotGroupName() string {
	if o == nil || o.SnapshotGroupName == nil {
		var ret string
		return ret
	}
	return *o.SnapshotGroupName
}

// GetSnapshotGroupNameOk returns a tuple with the SnapshotGroupName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageHitachiSnapshot) GetSnapshotGroupNameOk() (*string, bool) {
	if o == nil || o.SnapshotGroupName == nil {
		return nil, false
	}
	return o.SnapshotGroupName, true
}

// HasSnapshotGroupName returns a boolean if a field has been set.
func (o *StorageHitachiSnapshot) HasSnapshotGroupName() bool {
	if o != nil && o.SnapshotGroupName != nil {
		return true
	}

	return false
}

// SetSnapshotGroupName gets a reference to the given string and assigns it to the SnapshotGroupName field.
func (o *StorageHitachiSnapshot) SetSnapshotGroupName(v string) {
	o.SnapshotGroupName = &v
}

// GetSnapshotPoolId returns the SnapshotPoolId field value if set, zero value otherwise.
func (o *StorageHitachiSnapshot) GetSnapshotPoolId() int64 {
	if o == nil || o.SnapshotPoolId == nil {
		var ret int64
		return ret
	}
	return *o.SnapshotPoolId
}

// GetSnapshotPoolIdOk returns a tuple with the SnapshotPoolId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageHitachiSnapshot) GetSnapshotPoolIdOk() (*int64, bool) {
	if o == nil || o.SnapshotPoolId == nil {
		return nil, false
	}
	return o.SnapshotPoolId, true
}

// HasSnapshotPoolId returns a boolean if a field has been set.
func (o *StorageHitachiSnapshot) HasSnapshotPoolId() bool {
	if o != nil && o.SnapshotPoolId != nil {
		return true
	}

	return false
}

// SetSnapshotPoolId gets a reference to the given int64 and assigns it to the SnapshotPoolId field.
func (o *StorageHitachiSnapshot) SetSnapshotPoolId(v int64) {
	o.SnapshotPoolId = &v
}

// GetSplitTime returns the SplitTime field value if set, zero value otherwise.
func (o *StorageHitachiSnapshot) GetSplitTime() string {
	if o == nil || o.SplitTime == nil {
		var ret string
		return ret
	}
	return *o.SplitTime
}

// GetSplitTimeOk returns a tuple with the SplitTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageHitachiSnapshot) GetSplitTimeOk() (*string, bool) {
	if o == nil || o.SplitTime == nil {
		return nil, false
	}
	return o.SplitTime, true
}

// HasSplitTime returns a boolean if a field has been set.
func (o *StorageHitachiSnapshot) HasSplitTime() bool {
	if o != nil && o.SplitTime != nil {
		return true
	}

	return false
}

// SetSplitTime gets a reference to the given string and assigns it to the SplitTime field.
func (o *StorageHitachiSnapshot) SetSplitTime(v string) {
	o.SplitTime = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *StorageHitachiSnapshot) GetStatus() string {
	if o == nil || o.Status == nil {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageHitachiSnapshot) GetStatusOk() (*string, bool) {
	if o == nil || o.Status == nil {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *StorageHitachiSnapshot) HasStatus() bool {
	if o != nil && o.Status != nil {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *StorageHitachiSnapshot) SetStatus(v string) {
	o.Status = &v
}

// GetSvolLdevId returns the SvolLdevId field value if set, zero value otherwise.
func (o *StorageHitachiSnapshot) GetSvolLdevId() int64 {
	if o == nil || o.SvolLdevId == nil {
		var ret int64
		return ret
	}
	return *o.SvolLdevId
}

// GetSvolLdevIdOk returns a tuple with the SvolLdevId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageHitachiSnapshot) GetSvolLdevIdOk() (*int64, bool) {
	if o == nil || o.SvolLdevId == nil {
		return nil, false
	}
	return o.SvolLdevId, true
}

// HasSvolLdevId returns a boolean if a field has been set.
func (o *StorageHitachiSnapshot) HasSvolLdevId() bool {
	if o != nil && o.SvolLdevId != nil {
		return true
	}

	return false
}

// SetSvolLdevId gets a reference to the given int64 and assigns it to the SvolLdevId field.
func (o *StorageHitachiSnapshot) SetSvolLdevId(v int64) {
	o.SvolLdevId = &v
}

// GetArray returns the Array field value if set, zero value otherwise.
func (o *StorageHitachiSnapshot) GetArray() StorageHitachiArrayRelationship {
	if o == nil || o.Array == nil {
		var ret StorageHitachiArrayRelationship
		return ret
	}
	return *o.Array
}

// GetArrayOk returns a tuple with the Array field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageHitachiSnapshot) GetArrayOk() (*StorageHitachiArrayRelationship, bool) {
	if o == nil || o.Array == nil {
		return nil, false
	}
	return o.Array, true
}

// HasArray returns a boolean if a field has been set.
func (o *StorageHitachiSnapshot) HasArray() bool {
	if o != nil && o.Array != nil {
		return true
	}

	return false
}

// SetArray gets a reference to the given StorageHitachiArrayRelationship and assigns it to the Array field.
func (o *StorageHitachiSnapshot) SetArray(v StorageHitachiArrayRelationship) {
	o.Array = &v
}

// GetRegisteredDevice returns the RegisteredDevice field value if set, zero value otherwise.
func (o *StorageHitachiSnapshot) GetRegisteredDevice() AssetDeviceRegistrationRelationship {
	if o == nil || o.RegisteredDevice == nil {
		var ret AssetDeviceRegistrationRelationship
		return ret
	}
	return *o.RegisteredDevice
}

// GetRegisteredDeviceOk returns a tuple with the RegisteredDevice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageHitachiSnapshot) GetRegisteredDeviceOk() (*AssetDeviceRegistrationRelationship, bool) {
	if o == nil || o.RegisteredDevice == nil {
		return nil, false
	}
	return o.RegisteredDevice, true
}

// HasRegisteredDevice returns a boolean if a field has been set.
func (o *StorageHitachiSnapshot) HasRegisteredDevice() bool {
	if o != nil && o.RegisteredDevice != nil {
		return true
	}

	return false
}

// SetRegisteredDevice gets a reference to the given AssetDeviceRegistrationRelationship and assigns it to the RegisteredDevice field.
func (o *StorageHitachiSnapshot) SetRegisteredDevice(v AssetDeviceRegistrationRelationship) {
	o.RegisteredDevice = &v
}

func (o StorageHitachiSnapshot) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	serializedMoBaseMo, errMoBaseMo := json.Marshal(o.MoBaseMo)
	if errMoBaseMo != nil {
		return []byte{}, errMoBaseMo
	}
	errMoBaseMo = json.Unmarshal([]byte(serializedMoBaseMo), &toSerialize)
	if errMoBaseMo != nil {
		return []byte{}, errMoBaseMo
	}
	if true {
		toSerialize["ClassId"] = o.ClassId
	}
	if true {
		toSerialize["ObjectType"] = o.ObjectType
	}
	if o.ConcordanceRate != nil {
		toSerialize["ConcordanceRate"] = o.ConcordanceRate
	}
	if o.IsConsistencyGroup != nil {
		toSerialize["IsConsistencyGroup"] = o.IsConsistencyGroup
	}
	if o.IsMultistageable != nil {
		toSerialize["IsMultistageable"] = o.IsMultistageable
	}
	if o.MuNumber != nil {
		toSerialize["MuNumber"] = o.MuNumber
	}
	if o.Name != nil {
		toSerialize["Name"] = o.Name
	}
	if o.PvolLdevId != nil {
		toSerialize["PvolLdevId"] = o.PvolLdevId
	}
	if o.SnapshotGroupName != nil {
		toSerialize["SnapshotGroupName"] = o.SnapshotGroupName
	}
	if o.SnapshotPoolId != nil {
		toSerialize["SnapshotPoolId"] = o.SnapshotPoolId
	}
	if o.SplitTime != nil {
		toSerialize["SplitTime"] = o.SplitTime
	}
	if o.Status != nil {
		toSerialize["Status"] = o.Status
	}
	if o.SvolLdevId != nil {
		toSerialize["SvolLdevId"] = o.SvolLdevId
	}
	if o.Array != nil {
		toSerialize["Array"] = o.Array
	}
	if o.RegisteredDevice != nil {
		toSerialize["RegisteredDevice"] = o.RegisteredDevice
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *StorageHitachiSnapshot) UnmarshalJSON(bytes []byte) (err error) {
	type StorageHitachiSnapshotWithoutEmbeddedStruct struct {
		// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.
		ClassId string `json:"ClassId"`
		// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
		ObjectType string `json:"ObjectType"`
		// Concordance rate for pairs.
		ConcordanceRate *int64 `json:"ConcordanceRate,omitempty"`
		// Whether the pair was created in the consistency group mode (CTG mode).
		IsConsistencyGroup *bool `json:"IsConsistencyGroup,omitempty"`
		// Whether the pair can be a multistage pair.
		IsMultistageable *bool `json:"IsMultistageable,omitempty"`
		// MU number of the primary volume.
		MuNumber *int64 `json:"MuNumber,omitempty"`
		// Object ID of the pair for snapshot data.
		Name *string `json:"Name,omitempty"`
		// LDEV number of the primary volume.
		PvolLdevId *int64 `json:"PvolLdevId,omitempty"`
		// Name of the snapshot group that contains the pair for snapshot data.
		SnapshotGroupName *string `json:"SnapshotGroupName,omitempty"`
		// ID of the pool in which the snapshot data is created.
		SnapshotPoolId *int64 `json:"SnapshotPoolId,omitempty"`
		// Time when snapshot data was created.
		SplitTime *string `json:"SplitTime,omitempty"`
		// Pair status. Pair status changes according to the pair operation.
		Status *string `json:"Status,omitempty"`
		// LDEV number of the secondary volume.
		SvolLdevId       *int64                               `json:"SvolLdevId,omitempty"`
		Array            *StorageHitachiArrayRelationship     `json:"Array,omitempty"`
		RegisteredDevice *AssetDeviceRegistrationRelationship `json:"RegisteredDevice,omitempty"`
	}

	varStorageHitachiSnapshotWithoutEmbeddedStruct := StorageHitachiSnapshotWithoutEmbeddedStruct{}

	err = json.Unmarshal(bytes, &varStorageHitachiSnapshotWithoutEmbeddedStruct)
	if err == nil {
		varStorageHitachiSnapshot := _StorageHitachiSnapshot{}
		varStorageHitachiSnapshot.ClassId = varStorageHitachiSnapshotWithoutEmbeddedStruct.ClassId
		varStorageHitachiSnapshot.ObjectType = varStorageHitachiSnapshotWithoutEmbeddedStruct.ObjectType
		varStorageHitachiSnapshot.ConcordanceRate = varStorageHitachiSnapshotWithoutEmbeddedStruct.ConcordanceRate
		varStorageHitachiSnapshot.IsConsistencyGroup = varStorageHitachiSnapshotWithoutEmbeddedStruct.IsConsistencyGroup
		varStorageHitachiSnapshot.IsMultistageable = varStorageHitachiSnapshotWithoutEmbeddedStruct.IsMultistageable
		varStorageHitachiSnapshot.MuNumber = varStorageHitachiSnapshotWithoutEmbeddedStruct.MuNumber
		varStorageHitachiSnapshot.Name = varStorageHitachiSnapshotWithoutEmbeddedStruct.Name
		varStorageHitachiSnapshot.PvolLdevId = varStorageHitachiSnapshotWithoutEmbeddedStruct.PvolLdevId
		varStorageHitachiSnapshot.SnapshotGroupName = varStorageHitachiSnapshotWithoutEmbeddedStruct.SnapshotGroupName
		varStorageHitachiSnapshot.SnapshotPoolId = varStorageHitachiSnapshotWithoutEmbeddedStruct.SnapshotPoolId
		varStorageHitachiSnapshot.SplitTime = varStorageHitachiSnapshotWithoutEmbeddedStruct.SplitTime
		varStorageHitachiSnapshot.Status = varStorageHitachiSnapshotWithoutEmbeddedStruct.Status
		varStorageHitachiSnapshot.SvolLdevId = varStorageHitachiSnapshotWithoutEmbeddedStruct.SvolLdevId
		varStorageHitachiSnapshot.Array = varStorageHitachiSnapshotWithoutEmbeddedStruct.Array
		varStorageHitachiSnapshot.RegisteredDevice = varStorageHitachiSnapshotWithoutEmbeddedStruct.RegisteredDevice
		*o = StorageHitachiSnapshot(varStorageHitachiSnapshot)
	} else {
		return err
	}

	varStorageHitachiSnapshot := _StorageHitachiSnapshot{}

	err = json.Unmarshal(bytes, &varStorageHitachiSnapshot)
	if err == nil {
		o.MoBaseMo = varStorageHitachiSnapshot.MoBaseMo
	} else {
		return err
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "ClassId")
		delete(additionalProperties, "ObjectType")
		delete(additionalProperties, "ConcordanceRate")
		delete(additionalProperties, "IsConsistencyGroup")
		delete(additionalProperties, "IsMultistageable")
		delete(additionalProperties, "MuNumber")
		delete(additionalProperties, "Name")
		delete(additionalProperties, "PvolLdevId")
		delete(additionalProperties, "SnapshotGroupName")
		delete(additionalProperties, "SnapshotPoolId")
		delete(additionalProperties, "SplitTime")
		delete(additionalProperties, "Status")
		delete(additionalProperties, "SvolLdevId")
		delete(additionalProperties, "Array")
		delete(additionalProperties, "RegisteredDevice")

		// remove fields from embedded structs
		reflectMoBaseMo := reflect.ValueOf(o.MoBaseMo)
		for i := 0; i < reflectMoBaseMo.Type().NumField(); i++ {
			t := reflectMoBaseMo.Type().Field(i)

			if jsonTag := t.Tag.Get("json"); jsonTag != "" {
				fieldName := ""
				if commaIdx := strings.Index(jsonTag, ","); commaIdx > 0 {
					fieldName = jsonTag[:commaIdx]
				} else {
					fieldName = jsonTag
				}
				if fieldName != "AdditionalProperties" {
					delete(additionalProperties, fieldName)
				}
			}
		}

		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableStorageHitachiSnapshot struct {
	value *StorageHitachiSnapshot
	isSet bool
}

func (v NullableStorageHitachiSnapshot) Get() *StorageHitachiSnapshot {
	return v.value
}

func (v *NullableStorageHitachiSnapshot) Set(val *StorageHitachiSnapshot) {
	v.value = val
	v.isSet = true
}

func (v NullableStorageHitachiSnapshot) IsSet() bool {
	return v.isSet
}

func (v *NullableStorageHitachiSnapshot) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStorageHitachiSnapshot(val *StorageHitachiSnapshot) *NullableStorageHitachiSnapshot {
	return &NullableStorageHitachiSnapshot{value: val, isSet: true}
}

func (v NullableStorageHitachiSnapshot) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStorageHitachiSnapshot) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
