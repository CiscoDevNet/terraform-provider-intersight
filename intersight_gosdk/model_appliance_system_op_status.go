/*
Cisco Intersight

Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations. The Intersight OpenAPI document defines the complete set of properties that are returned in the HTTP response. From that perspective, a client can expect that no additional properties are returned, unless these properties are explicitly defined in the OpenAPI document. However, when a client uses an older version of the Intersight OpenAPI document, the server may send additional properties because the software is more recent than the client. In that case, the client may receive properties that it does not know about. Some generated SDKs perform a strict validation of the HTTP response body against the OpenAPI document.

API version: 1.0.11-18775
Contact: intersight@cisco.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package intersight

import (
	"encoding/json"
	"fmt"
	"reflect"
	"strings"
)

// checks if the ApplianceSystemOpStatus type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ApplianceSystemOpStatus{}

// ApplianceSystemOpStatus Status of the Intersight Appliance.
type ApplianceSystemOpStatus struct {
	MoBaseMo
	// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.
	ClassId string `json:"ClassId"`
	// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
	ObjectType string `json:"ObjectType"`
	// Operational status of the Intersight Appliance. Operational status is based on the result of the status checks. If result of any check is Critical, then its value is Impaired. Otherwise, if result of any check is Warning, then its value is AttentionNeeded. If all checks are OK, then its value is Operational. * `Unknown` - The status of the appliance node is unknown. * `Operational` - The appliance node is operational. * `Impaired` - The appliance node is impaired. * `AttentionNeeded` - The appliance node needs attention. * `ReadyToJoin` - The node is ready to be added to a standalone Intersight Appliance to form a cluster. * `OutOfService` - The user has taken this node (part of a cluster) to out of service. * `ReadyForReplacement` - The cluster node is ready to be replaced. * `ReplacementInProgress` - The cluster node replacement is in progress. * `ReplacementFailed` - There was a failure during the cluster node replacement.
	OperationalStatus *string                        `json:"OperationalStatus,omitempty"`
	Account           NullableIamAccountRelationship `json:"Account,omitempty"`
	// An array of relationships to applianceAppOpStatus resources.
	AppOpStatuses []ApplianceAppOpStatusRelationship `json:"AppOpStatuses,omitempty"`
	// An array of relationships to applianceGroupOpStatus resources.
	GroupOpStatuses      []ApplianceGroupOpStatusRelationship        `json:"GroupOpStatuses,omitempty"`
	RegisteredDevice     NullableAssetDeviceRegistrationRelationship `json:"RegisteredDevice,omitempty"`
	SystemInfo           NullableApplianceSystemInfoRelationship     `json:"SystemInfo,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ApplianceSystemOpStatus ApplianceSystemOpStatus

// NewApplianceSystemOpStatus instantiates a new ApplianceSystemOpStatus object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApplianceSystemOpStatus(classId string, objectType string) *ApplianceSystemOpStatus {
	this := ApplianceSystemOpStatus{}
	this.ClassId = classId
	this.ObjectType = objectType
	return &this
}

// NewApplianceSystemOpStatusWithDefaults instantiates a new ApplianceSystemOpStatus object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApplianceSystemOpStatusWithDefaults() *ApplianceSystemOpStatus {
	this := ApplianceSystemOpStatus{}
	var classId string = "appliance.SystemOpStatus"
	this.ClassId = classId
	var objectType string = "appliance.SystemOpStatus"
	this.ObjectType = objectType
	return &this
}

// GetClassId returns the ClassId field value
func (o *ApplianceSystemOpStatus) GetClassId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ClassId
}

// GetClassIdOk returns a tuple with the ClassId field value
// and a boolean to check if the value has been set.
func (o *ApplianceSystemOpStatus) GetClassIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ClassId, true
}

// SetClassId sets field value
func (o *ApplianceSystemOpStatus) SetClassId(v string) {
	o.ClassId = v
}

// GetDefaultClassId returns the default value "appliance.SystemOpStatus" of the ClassId field.
func (o *ApplianceSystemOpStatus) GetDefaultClassId() interface{} {
	return "appliance.SystemOpStatus"
}

// GetObjectType returns the ObjectType field value
func (o *ApplianceSystemOpStatus) GetObjectType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ObjectType
}

// GetObjectTypeOk returns a tuple with the ObjectType field value
// and a boolean to check if the value has been set.
func (o *ApplianceSystemOpStatus) GetObjectTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ObjectType, true
}

// SetObjectType sets field value
func (o *ApplianceSystemOpStatus) SetObjectType(v string) {
	o.ObjectType = v
}

// GetDefaultObjectType returns the default value "appliance.SystemOpStatus" of the ObjectType field.
func (o *ApplianceSystemOpStatus) GetDefaultObjectType() interface{} {
	return "appliance.SystemOpStatus"
}

// GetOperationalStatus returns the OperationalStatus field value if set, zero value otherwise.
func (o *ApplianceSystemOpStatus) GetOperationalStatus() string {
	if o == nil || IsNil(o.OperationalStatus) {
		var ret string
		return ret
	}
	return *o.OperationalStatus
}

// GetOperationalStatusOk returns a tuple with the OperationalStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplianceSystemOpStatus) GetOperationalStatusOk() (*string, bool) {
	if o == nil || IsNil(o.OperationalStatus) {
		return nil, false
	}
	return o.OperationalStatus, true
}

// HasOperationalStatus returns a boolean if a field has been set.
func (o *ApplianceSystemOpStatus) HasOperationalStatus() bool {
	if o != nil && !IsNil(o.OperationalStatus) {
		return true
	}

	return false
}

// SetOperationalStatus gets a reference to the given string and assigns it to the OperationalStatus field.
func (o *ApplianceSystemOpStatus) SetOperationalStatus(v string) {
	o.OperationalStatus = &v
}

// GetAccount returns the Account field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ApplianceSystemOpStatus) GetAccount() IamAccountRelationship {
	if o == nil || IsNil(o.Account.Get()) {
		var ret IamAccountRelationship
		return ret
	}
	return *o.Account.Get()
}

// GetAccountOk returns a tuple with the Account field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ApplianceSystemOpStatus) GetAccountOk() (*IamAccountRelationship, bool) {
	if o == nil {
		return nil, false
	}
	return o.Account.Get(), o.Account.IsSet()
}

// HasAccount returns a boolean if a field has been set.
func (o *ApplianceSystemOpStatus) HasAccount() bool {
	if o != nil && o.Account.IsSet() {
		return true
	}

	return false
}

// SetAccount gets a reference to the given NullableIamAccountRelationship and assigns it to the Account field.
func (o *ApplianceSystemOpStatus) SetAccount(v IamAccountRelationship) {
	o.Account.Set(&v)
}

// SetAccountNil sets the value for Account to be an explicit nil
func (o *ApplianceSystemOpStatus) SetAccountNil() {
	o.Account.Set(nil)
}

// UnsetAccount ensures that no value is present for Account, not even an explicit nil
func (o *ApplianceSystemOpStatus) UnsetAccount() {
	o.Account.Unset()
}

// GetAppOpStatuses returns the AppOpStatuses field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ApplianceSystemOpStatus) GetAppOpStatuses() []ApplianceAppOpStatusRelationship {
	if o == nil {
		var ret []ApplianceAppOpStatusRelationship
		return ret
	}
	return o.AppOpStatuses
}

// GetAppOpStatusesOk returns a tuple with the AppOpStatuses field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ApplianceSystemOpStatus) GetAppOpStatusesOk() ([]ApplianceAppOpStatusRelationship, bool) {
	if o == nil || IsNil(o.AppOpStatuses) {
		return nil, false
	}
	return o.AppOpStatuses, true
}

// HasAppOpStatuses returns a boolean if a field has been set.
func (o *ApplianceSystemOpStatus) HasAppOpStatuses() bool {
	if o != nil && !IsNil(o.AppOpStatuses) {
		return true
	}

	return false
}

// SetAppOpStatuses gets a reference to the given []ApplianceAppOpStatusRelationship and assigns it to the AppOpStatuses field.
func (o *ApplianceSystemOpStatus) SetAppOpStatuses(v []ApplianceAppOpStatusRelationship) {
	o.AppOpStatuses = v
}

// GetGroupOpStatuses returns the GroupOpStatuses field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ApplianceSystemOpStatus) GetGroupOpStatuses() []ApplianceGroupOpStatusRelationship {
	if o == nil {
		var ret []ApplianceGroupOpStatusRelationship
		return ret
	}
	return o.GroupOpStatuses
}

// GetGroupOpStatusesOk returns a tuple with the GroupOpStatuses field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ApplianceSystemOpStatus) GetGroupOpStatusesOk() ([]ApplianceGroupOpStatusRelationship, bool) {
	if o == nil || IsNil(o.GroupOpStatuses) {
		return nil, false
	}
	return o.GroupOpStatuses, true
}

// HasGroupOpStatuses returns a boolean if a field has been set.
func (o *ApplianceSystemOpStatus) HasGroupOpStatuses() bool {
	if o != nil && !IsNil(o.GroupOpStatuses) {
		return true
	}

	return false
}

// SetGroupOpStatuses gets a reference to the given []ApplianceGroupOpStatusRelationship and assigns it to the GroupOpStatuses field.
func (o *ApplianceSystemOpStatus) SetGroupOpStatuses(v []ApplianceGroupOpStatusRelationship) {
	o.GroupOpStatuses = v
}

// GetRegisteredDevice returns the RegisteredDevice field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ApplianceSystemOpStatus) GetRegisteredDevice() AssetDeviceRegistrationRelationship {
	if o == nil || IsNil(o.RegisteredDevice.Get()) {
		var ret AssetDeviceRegistrationRelationship
		return ret
	}
	return *o.RegisteredDevice.Get()
}

// GetRegisteredDeviceOk returns a tuple with the RegisteredDevice field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ApplianceSystemOpStatus) GetRegisteredDeviceOk() (*AssetDeviceRegistrationRelationship, bool) {
	if o == nil {
		return nil, false
	}
	return o.RegisteredDevice.Get(), o.RegisteredDevice.IsSet()
}

// HasRegisteredDevice returns a boolean if a field has been set.
func (o *ApplianceSystemOpStatus) HasRegisteredDevice() bool {
	if o != nil && o.RegisteredDevice.IsSet() {
		return true
	}

	return false
}

// SetRegisteredDevice gets a reference to the given NullableAssetDeviceRegistrationRelationship and assigns it to the RegisteredDevice field.
func (o *ApplianceSystemOpStatus) SetRegisteredDevice(v AssetDeviceRegistrationRelationship) {
	o.RegisteredDevice.Set(&v)
}

// SetRegisteredDeviceNil sets the value for RegisteredDevice to be an explicit nil
func (o *ApplianceSystemOpStatus) SetRegisteredDeviceNil() {
	o.RegisteredDevice.Set(nil)
}

// UnsetRegisteredDevice ensures that no value is present for RegisteredDevice, not even an explicit nil
func (o *ApplianceSystemOpStatus) UnsetRegisteredDevice() {
	o.RegisteredDevice.Unset()
}

// GetSystemInfo returns the SystemInfo field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ApplianceSystemOpStatus) GetSystemInfo() ApplianceSystemInfoRelationship {
	if o == nil || IsNil(o.SystemInfo.Get()) {
		var ret ApplianceSystemInfoRelationship
		return ret
	}
	return *o.SystemInfo.Get()
}

// GetSystemInfoOk returns a tuple with the SystemInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ApplianceSystemOpStatus) GetSystemInfoOk() (*ApplianceSystemInfoRelationship, bool) {
	if o == nil {
		return nil, false
	}
	return o.SystemInfo.Get(), o.SystemInfo.IsSet()
}

// HasSystemInfo returns a boolean if a field has been set.
func (o *ApplianceSystemOpStatus) HasSystemInfo() bool {
	if o != nil && o.SystemInfo.IsSet() {
		return true
	}

	return false
}

// SetSystemInfo gets a reference to the given NullableApplianceSystemInfoRelationship and assigns it to the SystemInfo field.
func (o *ApplianceSystemOpStatus) SetSystemInfo(v ApplianceSystemInfoRelationship) {
	o.SystemInfo.Set(&v)
}

// SetSystemInfoNil sets the value for SystemInfo to be an explicit nil
func (o *ApplianceSystemOpStatus) SetSystemInfoNil() {
	o.SystemInfo.Set(nil)
}

// UnsetSystemInfo ensures that no value is present for SystemInfo, not even an explicit nil
func (o *ApplianceSystemOpStatus) UnsetSystemInfo() {
	o.SystemInfo.Unset()
}

func (o ApplianceSystemOpStatus) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ApplianceSystemOpStatus) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	serializedMoBaseMo, errMoBaseMo := json.Marshal(o.MoBaseMo)
	if errMoBaseMo != nil {
		return map[string]interface{}{}, errMoBaseMo
	}
	errMoBaseMo = json.Unmarshal([]byte(serializedMoBaseMo), &toSerialize)
	if errMoBaseMo != nil {
		return map[string]interface{}{}, errMoBaseMo
	}
	if _, exists := toSerialize["ClassId"]; !exists {
		toSerialize["ClassId"] = o.GetDefaultClassId()
	}
	toSerialize["ClassId"] = o.ClassId
	if _, exists := toSerialize["ObjectType"]; !exists {
		toSerialize["ObjectType"] = o.GetDefaultObjectType()
	}
	toSerialize["ObjectType"] = o.ObjectType
	if !IsNil(o.OperationalStatus) {
		toSerialize["OperationalStatus"] = o.OperationalStatus
	}
	if o.Account.IsSet() {
		toSerialize["Account"] = o.Account.Get()
	}
	if o.AppOpStatuses != nil {
		toSerialize["AppOpStatuses"] = o.AppOpStatuses
	}
	if o.GroupOpStatuses != nil {
		toSerialize["GroupOpStatuses"] = o.GroupOpStatuses
	}
	if o.RegisteredDevice.IsSet() {
		toSerialize["RegisteredDevice"] = o.RegisteredDevice.Get()
	}
	if o.SystemInfo.IsSet() {
		toSerialize["SystemInfo"] = o.SystemInfo.Get()
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ApplianceSystemOpStatus) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"ClassId",
		"ObjectType",
	}

	// defaultValueFuncMap captures the default values for required properties.
	// These values are used when required properties are missing from the payload.
	defaultValueFuncMap := map[string]func() interface{}{
		"ClassId":    o.GetDefaultClassId,
		"ObjectType": o.GetDefaultObjectType,
	}
	var defaultValueApplied bool
	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			if _, ok := defaultValueFuncMap[requiredProperty]; ok {
				allProperties[requiredProperty] = defaultValueFuncMap[requiredProperty]()
				defaultValueApplied = true
			}
		}
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	if defaultValueApplied {
		data, err = json.Marshal(allProperties)
		if err != nil {
			return err
		}
	}
	type ApplianceSystemOpStatusWithoutEmbeddedStruct struct {
		// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.
		ClassId string `json:"ClassId"`
		// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
		ObjectType string `json:"ObjectType"`
		// Operational status of the Intersight Appliance. Operational status is based on the result of the status checks. If result of any check is Critical, then its value is Impaired. Otherwise, if result of any check is Warning, then its value is AttentionNeeded. If all checks are OK, then its value is Operational. * `Unknown` - The status of the appliance node is unknown. * `Operational` - The appliance node is operational. * `Impaired` - The appliance node is impaired. * `AttentionNeeded` - The appliance node needs attention. * `ReadyToJoin` - The node is ready to be added to a standalone Intersight Appliance to form a cluster. * `OutOfService` - The user has taken this node (part of a cluster) to out of service. * `ReadyForReplacement` - The cluster node is ready to be replaced. * `ReplacementInProgress` - The cluster node replacement is in progress. * `ReplacementFailed` - There was a failure during the cluster node replacement.
		OperationalStatus *string                        `json:"OperationalStatus,omitempty"`
		Account           NullableIamAccountRelationship `json:"Account,omitempty"`
		// An array of relationships to applianceAppOpStatus resources.
		AppOpStatuses []ApplianceAppOpStatusRelationship `json:"AppOpStatuses,omitempty"`
		// An array of relationships to applianceGroupOpStatus resources.
		GroupOpStatuses  []ApplianceGroupOpStatusRelationship        `json:"GroupOpStatuses,omitempty"`
		RegisteredDevice NullableAssetDeviceRegistrationRelationship `json:"RegisteredDevice,omitempty"`
		SystemInfo       NullableApplianceSystemInfoRelationship     `json:"SystemInfo,omitempty"`
	}

	varApplianceSystemOpStatusWithoutEmbeddedStruct := ApplianceSystemOpStatusWithoutEmbeddedStruct{}

	err = json.Unmarshal(data, &varApplianceSystemOpStatusWithoutEmbeddedStruct)
	if err == nil {
		varApplianceSystemOpStatus := _ApplianceSystemOpStatus{}
		varApplianceSystemOpStatus.ClassId = varApplianceSystemOpStatusWithoutEmbeddedStruct.ClassId
		varApplianceSystemOpStatus.ObjectType = varApplianceSystemOpStatusWithoutEmbeddedStruct.ObjectType
		varApplianceSystemOpStatus.OperationalStatus = varApplianceSystemOpStatusWithoutEmbeddedStruct.OperationalStatus
		varApplianceSystemOpStatus.Account = varApplianceSystemOpStatusWithoutEmbeddedStruct.Account
		varApplianceSystemOpStatus.AppOpStatuses = varApplianceSystemOpStatusWithoutEmbeddedStruct.AppOpStatuses
		varApplianceSystemOpStatus.GroupOpStatuses = varApplianceSystemOpStatusWithoutEmbeddedStruct.GroupOpStatuses
		varApplianceSystemOpStatus.RegisteredDevice = varApplianceSystemOpStatusWithoutEmbeddedStruct.RegisteredDevice
		varApplianceSystemOpStatus.SystemInfo = varApplianceSystemOpStatusWithoutEmbeddedStruct.SystemInfo
		*o = ApplianceSystemOpStatus(varApplianceSystemOpStatus)
	} else {
		return err
	}

	varApplianceSystemOpStatus := _ApplianceSystemOpStatus{}

	err = json.Unmarshal(data, &varApplianceSystemOpStatus)
	if err == nil {
		o.MoBaseMo = varApplianceSystemOpStatus.MoBaseMo
	} else {
		return err
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "ClassId")
		delete(additionalProperties, "ObjectType")
		delete(additionalProperties, "OperationalStatus")
		delete(additionalProperties, "Account")
		delete(additionalProperties, "AppOpStatuses")
		delete(additionalProperties, "GroupOpStatuses")
		delete(additionalProperties, "RegisteredDevice")
		delete(additionalProperties, "SystemInfo")

		// remove fields from embedded structs
		reflectMoBaseMo := reflect.ValueOf(o.MoBaseMo)
		for i := 0; i < reflectMoBaseMo.Type().NumField(); i++ {
			t := reflectMoBaseMo.Type().Field(i)

			if jsonTag := t.Tag.Get("json"); jsonTag != "" {
				fieldName := ""
				if commaIdx := strings.Index(jsonTag, ","); commaIdx > 0 {
					fieldName = jsonTag[:commaIdx]
				} else {
					fieldName = jsonTag
				}
				if fieldName != "AdditionalProperties" {
					delete(additionalProperties, fieldName)
				}
			}
		}

		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableApplianceSystemOpStatus struct {
	value *ApplianceSystemOpStatus
	isSet bool
}

func (v NullableApplianceSystemOpStatus) Get() *ApplianceSystemOpStatus {
	return v.value
}

func (v *NullableApplianceSystemOpStatus) Set(val *ApplianceSystemOpStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableApplianceSystemOpStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableApplianceSystemOpStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApplianceSystemOpStatus(val *ApplianceSystemOpStatus) *NullableApplianceSystemOpStatus {
	return &NullableApplianceSystemOpStatus{value: val, isSet: true}
}

func (v NullableApplianceSystemOpStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApplianceSystemOpStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
