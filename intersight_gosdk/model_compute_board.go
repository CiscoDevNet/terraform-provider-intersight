/*
Cisco Intersight

Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations. The Intersight OpenAPI document defines the complete set of properties that are returned in the HTTP response. From that perspective, a client can expect that no additional properties are returned, unless these properties are explicitly defined in the OpenAPI document. However, when a client uses an older version of the Intersight OpenAPI document, the server may send additional properties because the software is more recent than the client. In that case, the client may receive properties that it does not know about. Some generated SDKs perform a strict validation of the HTTP response body against the OpenAPI document.

API version: 1.0.11-18775
Contact: intersight@cisco.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package intersight

import (
	"encoding/json"
	"fmt"
	"reflect"
	"strings"
)

// checks if the ComputeBoard type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ComputeBoard{}

// ComputeBoard Mother board of a server.
type ComputeBoard struct {
	EquipmentBase
	// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.
	ClassId string `json:"ClassId"`
	// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
	ObjectType string `json:"ObjectType"`
	// Unique identifier of the mother board present in the server.
	BoardId *int64 `json:"BoardId,omitempty"`
	// The type of central processing unit on the mother board.
	CpuTypeController *string `json:"CpuTypeController,omitempty"`
	// Current power state of the mother board of the server.
	OperPowerState  *string                             `json:"OperPowerState,omitempty"`
	OperReason      []string                            `json:"OperReason,omitempty"`
	ComputeBlade    NullableComputeBladeRelationship    `json:"ComputeBlade,omitempty"`
	ComputeRackUnit NullableComputeRackUnitRelationship `json:"ComputeRackUnit,omitempty"`
	// An array of relationships to equipmentTpm resources.
	EquipmentTpms []EquipmentTpmRelationship `json:"EquipmentTpms,omitempty"`
	// An array of relationships to graphicsCard resources.
	GraphicsCards []GraphicsCardRelationship `json:"GraphicsCards,omitempty"`
	// An array of relationships to equipmentHybridDriveSlot resources.
	HybridDriveSlots    []EquipmentHybridDriveSlotRelationship  `json:"HybridDriveSlots,omitempty"`
	InventoryDeviceInfo NullableInventoryDeviceInfoRelationship `json:"InventoryDeviceInfo,omitempty"`
	// An array of relationships to memoryArray resources.
	MemoryArrays []MemoryArrayRelationship `json:"MemoryArrays,omitempty"`
	// An array of relationships to pciCoprocessorCard resources.
	PciCoprocessorCards []PciCoprocessorCardRelationship `json:"PciCoprocessorCards,omitempty"`
	// An array of relationships to pciSwitch resources.
	PciSwitch                     []PciSwitchRelationship                                 `json:"PciSwitch,omitempty"`
	PersistentMemoryConfiguration NullableMemoryPersistentMemoryConfigurationRelationship `json:"PersistentMemoryConfiguration,omitempty"`
	// An array of relationships to processorUnit resources.
	Processors       []ProcessorUnitRelationship                 `json:"Processors,omitempty"`
	RegisteredDevice NullableAssetDeviceRegistrationRelationship `json:"RegisteredDevice,omitempty"`
	// An array of relationships to securityUnit resources.
	SecurityUnits []SecurityUnitRelationship `json:"SecurityUnits,omitempty"`
	// An array of relationships to storageControllerDrive resources.
	StorageControllerDrives []StorageControllerDriveRelationship `json:"StorageControllerDrives,omitempty"`
	// An array of relationships to storageController resources.
	StorageControllers []StorageControllerRelationship `json:"StorageControllers,omitempty"`
	// An array of relationships to storageFlexFlashController resources.
	StorageFlexFlashControllers []StorageFlexFlashControllerRelationship `json:"StorageFlexFlashControllers,omitempty"`
	// An array of relationships to storageFlexUtilController resources.
	StorageFlexUtilControllers []StorageFlexUtilControllerRelationship `json:"StorageFlexUtilControllers,omitempty"`
	AdditionalProperties       map[string]interface{}
}

type _ComputeBoard ComputeBoard

// NewComputeBoard instantiates a new ComputeBoard object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewComputeBoard(classId string, objectType string) *ComputeBoard {
	this := ComputeBoard{}
	this.ClassId = classId
	this.ObjectType = objectType
	return &this
}

// NewComputeBoardWithDefaults instantiates a new ComputeBoard object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewComputeBoardWithDefaults() *ComputeBoard {
	this := ComputeBoard{}
	var classId string = "compute.Board"
	this.ClassId = classId
	var objectType string = "compute.Board"
	this.ObjectType = objectType
	return &this
}

// GetClassId returns the ClassId field value
func (o *ComputeBoard) GetClassId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ClassId
}

// GetClassIdOk returns a tuple with the ClassId field value
// and a boolean to check if the value has been set.
func (o *ComputeBoard) GetClassIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ClassId, true
}

// SetClassId sets field value
func (o *ComputeBoard) SetClassId(v string) {
	o.ClassId = v
}

// GetDefaultClassId returns the default value "compute.Board" of the ClassId field.
func (o *ComputeBoard) GetDefaultClassId() interface{} {
	return "compute.Board"
}

// GetObjectType returns the ObjectType field value
func (o *ComputeBoard) GetObjectType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ObjectType
}

// GetObjectTypeOk returns a tuple with the ObjectType field value
// and a boolean to check if the value has been set.
func (o *ComputeBoard) GetObjectTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ObjectType, true
}

// SetObjectType sets field value
func (o *ComputeBoard) SetObjectType(v string) {
	o.ObjectType = v
}

// GetDefaultObjectType returns the default value "compute.Board" of the ObjectType field.
func (o *ComputeBoard) GetDefaultObjectType() interface{} {
	return "compute.Board"
}

// GetBoardId returns the BoardId field value if set, zero value otherwise.
func (o *ComputeBoard) GetBoardId() int64 {
	if o == nil || IsNil(o.BoardId) {
		var ret int64
		return ret
	}
	return *o.BoardId
}

// GetBoardIdOk returns a tuple with the BoardId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComputeBoard) GetBoardIdOk() (*int64, bool) {
	if o == nil || IsNil(o.BoardId) {
		return nil, false
	}
	return o.BoardId, true
}

// HasBoardId returns a boolean if a field has been set.
func (o *ComputeBoard) HasBoardId() bool {
	if o != nil && !IsNil(o.BoardId) {
		return true
	}

	return false
}

// SetBoardId gets a reference to the given int64 and assigns it to the BoardId field.
func (o *ComputeBoard) SetBoardId(v int64) {
	o.BoardId = &v
}

// GetCpuTypeController returns the CpuTypeController field value if set, zero value otherwise.
func (o *ComputeBoard) GetCpuTypeController() string {
	if o == nil || IsNil(o.CpuTypeController) {
		var ret string
		return ret
	}
	return *o.CpuTypeController
}

// GetCpuTypeControllerOk returns a tuple with the CpuTypeController field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComputeBoard) GetCpuTypeControllerOk() (*string, bool) {
	if o == nil || IsNil(o.CpuTypeController) {
		return nil, false
	}
	return o.CpuTypeController, true
}

// HasCpuTypeController returns a boolean if a field has been set.
func (o *ComputeBoard) HasCpuTypeController() bool {
	if o != nil && !IsNil(o.CpuTypeController) {
		return true
	}

	return false
}

// SetCpuTypeController gets a reference to the given string and assigns it to the CpuTypeController field.
func (o *ComputeBoard) SetCpuTypeController(v string) {
	o.CpuTypeController = &v
}

// GetOperPowerState returns the OperPowerState field value if set, zero value otherwise.
func (o *ComputeBoard) GetOperPowerState() string {
	if o == nil || IsNil(o.OperPowerState) {
		var ret string
		return ret
	}
	return *o.OperPowerState
}

// GetOperPowerStateOk returns a tuple with the OperPowerState field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComputeBoard) GetOperPowerStateOk() (*string, bool) {
	if o == nil || IsNil(o.OperPowerState) {
		return nil, false
	}
	return o.OperPowerState, true
}

// HasOperPowerState returns a boolean if a field has been set.
func (o *ComputeBoard) HasOperPowerState() bool {
	if o != nil && !IsNil(o.OperPowerState) {
		return true
	}

	return false
}

// SetOperPowerState gets a reference to the given string and assigns it to the OperPowerState field.
func (o *ComputeBoard) SetOperPowerState(v string) {
	o.OperPowerState = &v
}

// GetOperReason returns the OperReason field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ComputeBoard) GetOperReason() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.OperReason
}

// GetOperReasonOk returns a tuple with the OperReason field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ComputeBoard) GetOperReasonOk() ([]string, bool) {
	if o == nil || IsNil(o.OperReason) {
		return nil, false
	}
	return o.OperReason, true
}

// HasOperReason returns a boolean if a field has been set.
func (o *ComputeBoard) HasOperReason() bool {
	if o != nil && !IsNil(o.OperReason) {
		return true
	}

	return false
}

// SetOperReason gets a reference to the given []string and assigns it to the OperReason field.
func (o *ComputeBoard) SetOperReason(v []string) {
	o.OperReason = v
}

// GetComputeBlade returns the ComputeBlade field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ComputeBoard) GetComputeBlade() ComputeBladeRelationship {
	if o == nil || IsNil(o.ComputeBlade.Get()) {
		var ret ComputeBladeRelationship
		return ret
	}
	return *o.ComputeBlade.Get()
}

// GetComputeBladeOk returns a tuple with the ComputeBlade field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ComputeBoard) GetComputeBladeOk() (*ComputeBladeRelationship, bool) {
	if o == nil {
		return nil, false
	}
	return o.ComputeBlade.Get(), o.ComputeBlade.IsSet()
}

// HasComputeBlade returns a boolean if a field has been set.
func (o *ComputeBoard) HasComputeBlade() bool {
	if o != nil && o.ComputeBlade.IsSet() {
		return true
	}

	return false
}

// SetComputeBlade gets a reference to the given NullableComputeBladeRelationship and assigns it to the ComputeBlade field.
func (o *ComputeBoard) SetComputeBlade(v ComputeBladeRelationship) {
	o.ComputeBlade.Set(&v)
}

// SetComputeBladeNil sets the value for ComputeBlade to be an explicit nil
func (o *ComputeBoard) SetComputeBladeNil() {
	o.ComputeBlade.Set(nil)
}

// UnsetComputeBlade ensures that no value is present for ComputeBlade, not even an explicit nil
func (o *ComputeBoard) UnsetComputeBlade() {
	o.ComputeBlade.Unset()
}

// GetComputeRackUnit returns the ComputeRackUnit field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ComputeBoard) GetComputeRackUnit() ComputeRackUnitRelationship {
	if o == nil || IsNil(o.ComputeRackUnit.Get()) {
		var ret ComputeRackUnitRelationship
		return ret
	}
	return *o.ComputeRackUnit.Get()
}

// GetComputeRackUnitOk returns a tuple with the ComputeRackUnit field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ComputeBoard) GetComputeRackUnitOk() (*ComputeRackUnitRelationship, bool) {
	if o == nil {
		return nil, false
	}
	return o.ComputeRackUnit.Get(), o.ComputeRackUnit.IsSet()
}

// HasComputeRackUnit returns a boolean if a field has been set.
func (o *ComputeBoard) HasComputeRackUnit() bool {
	if o != nil && o.ComputeRackUnit.IsSet() {
		return true
	}

	return false
}

// SetComputeRackUnit gets a reference to the given NullableComputeRackUnitRelationship and assigns it to the ComputeRackUnit field.
func (o *ComputeBoard) SetComputeRackUnit(v ComputeRackUnitRelationship) {
	o.ComputeRackUnit.Set(&v)
}

// SetComputeRackUnitNil sets the value for ComputeRackUnit to be an explicit nil
func (o *ComputeBoard) SetComputeRackUnitNil() {
	o.ComputeRackUnit.Set(nil)
}

// UnsetComputeRackUnit ensures that no value is present for ComputeRackUnit, not even an explicit nil
func (o *ComputeBoard) UnsetComputeRackUnit() {
	o.ComputeRackUnit.Unset()
}

// GetEquipmentTpms returns the EquipmentTpms field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ComputeBoard) GetEquipmentTpms() []EquipmentTpmRelationship {
	if o == nil {
		var ret []EquipmentTpmRelationship
		return ret
	}
	return o.EquipmentTpms
}

// GetEquipmentTpmsOk returns a tuple with the EquipmentTpms field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ComputeBoard) GetEquipmentTpmsOk() ([]EquipmentTpmRelationship, bool) {
	if o == nil || IsNil(o.EquipmentTpms) {
		return nil, false
	}
	return o.EquipmentTpms, true
}

// HasEquipmentTpms returns a boolean if a field has been set.
func (o *ComputeBoard) HasEquipmentTpms() bool {
	if o != nil && !IsNil(o.EquipmentTpms) {
		return true
	}

	return false
}

// SetEquipmentTpms gets a reference to the given []EquipmentTpmRelationship and assigns it to the EquipmentTpms field.
func (o *ComputeBoard) SetEquipmentTpms(v []EquipmentTpmRelationship) {
	o.EquipmentTpms = v
}

// GetGraphicsCards returns the GraphicsCards field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ComputeBoard) GetGraphicsCards() []GraphicsCardRelationship {
	if o == nil {
		var ret []GraphicsCardRelationship
		return ret
	}
	return o.GraphicsCards
}

// GetGraphicsCardsOk returns a tuple with the GraphicsCards field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ComputeBoard) GetGraphicsCardsOk() ([]GraphicsCardRelationship, bool) {
	if o == nil || IsNil(o.GraphicsCards) {
		return nil, false
	}
	return o.GraphicsCards, true
}

// HasGraphicsCards returns a boolean if a field has been set.
func (o *ComputeBoard) HasGraphicsCards() bool {
	if o != nil && !IsNil(o.GraphicsCards) {
		return true
	}

	return false
}

// SetGraphicsCards gets a reference to the given []GraphicsCardRelationship and assigns it to the GraphicsCards field.
func (o *ComputeBoard) SetGraphicsCards(v []GraphicsCardRelationship) {
	o.GraphicsCards = v
}

// GetHybridDriveSlots returns the HybridDriveSlots field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ComputeBoard) GetHybridDriveSlots() []EquipmentHybridDriveSlotRelationship {
	if o == nil {
		var ret []EquipmentHybridDriveSlotRelationship
		return ret
	}
	return o.HybridDriveSlots
}

// GetHybridDriveSlotsOk returns a tuple with the HybridDriveSlots field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ComputeBoard) GetHybridDriveSlotsOk() ([]EquipmentHybridDriveSlotRelationship, bool) {
	if o == nil || IsNil(o.HybridDriveSlots) {
		return nil, false
	}
	return o.HybridDriveSlots, true
}

// HasHybridDriveSlots returns a boolean if a field has been set.
func (o *ComputeBoard) HasHybridDriveSlots() bool {
	if o != nil && !IsNil(o.HybridDriveSlots) {
		return true
	}

	return false
}

// SetHybridDriveSlots gets a reference to the given []EquipmentHybridDriveSlotRelationship and assigns it to the HybridDriveSlots field.
func (o *ComputeBoard) SetHybridDriveSlots(v []EquipmentHybridDriveSlotRelationship) {
	o.HybridDriveSlots = v
}

// GetInventoryDeviceInfo returns the InventoryDeviceInfo field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ComputeBoard) GetInventoryDeviceInfo() InventoryDeviceInfoRelationship {
	if o == nil || IsNil(o.InventoryDeviceInfo.Get()) {
		var ret InventoryDeviceInfoRelationship
		return ret
	}
	return *o.InventoryDeviceInfo.Get()
}

// GetInventoryDeviceInfoOk returns a tuple with the InventoryDeviceInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ComputeBoard) GetInventoryDeviceInfoOk() (*InventoryDeviceInfoRelationship, bool) {
	if o == nil {
		return nil, false
	}
	return o.InventoryDeviceInfo.Get(), o.InventoryDeviceInfo.IsSet()
}

// HasInventoryDeviceInfo returns a boolean if a field has been set.
func (o *ComputeBoard) HasInventoryDeviceInfo() bool {
	if o != nil && o.InventoryDeviceInfo.IsSet() {
		return true
	}

	return false
}

// SetInventoryDeviceInfo gets a reference to the given NullableInventoryDeviceInfoRelationship and assigns it to the InventoryDeviceInfo field.
func (o *ComputeBoard) SetInventoryDeviceInfo(v InventoryDeviceInfoRelationship) {
	o.InventoryDeviceInfo.Set(&v)
}

// SetInventoryDeviceInfoNil sets the value for InventoryDeviceInfo to be an explicit nil
func (o *ComputeBoard) SetInventoryDeviceInfoNil() {
	o.InventoryDeviceInfo.Set(nil)
}

// UnsetInventoryDeviceInfo ensures that no value is present for InventoryDeviceInfo, not even an explicit nil
func (o *ComputeBoard) UnsetInventoryDeviceInfo() {
	o.InventoryDeviceInfo.Unset()
}

// GetMemoryArrays returns the MemoryArrays field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ComputeBoard) GetMemoryArrays() []MemoryArrayRelationship {
	if o == nil {
		var ret []MemoryArrayRelationship
		return ret
	}
	return o.MemoryArrays
}

// GetMemoryArraysOk returns a tuple with the MemoryArrays field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ComputeBoard) GetMemoryArraysOk() ([]MemoryArrayRelationship, bool) {
	if o == nil || IsNil(o.MemoryArrays) {
		return nil, false
	}
	return o.MemoryArrays, true
}

// HasMemoryArrays returns a boolean if a field has been set.
func (o *ComputeBoard) HasMemoryArrays() bool {
	if o != nil && !IsNil(o.MemoryArrays) {
		return true
	}

	return false
}

// SetMemoryArrays gets a reference to the given []MemoryArrayRelationship and assigns it to the MemoryArrays field.
func (o *ComputeBoard) SetMemoryArrays(v []MemoryArrayRelationship) {
	o.MemoryArrays = v
}

// GetPciCoprocessorCards returns the PciCoprocessorCards field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ComputeBoard) GetPciCoprocessorCards() []PciCoprocessorCardRelationship {
	if o == nil {
		var ret []PciCoprocessorCardRelationship
		return ret
	}
	return o.PciCoprocessorCards
}

// GetPciCoprocessorCardsOk returns a tuple with the PciCoprocessorCards field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ComputeBoard) GetPciCoprocessorCardsOk() ([]PciCoprocessorCardRelationship, bool) {
	if o == nil || IsNil(o.PciCoprocessorCards) {
		return nil, false
	}
	return o.PciCoprocessorCards, true
}

// HasPciCoprocessorCards returns a boolean if a field has been set.
func (o *ComputeBoard) HasPciCoprocessorCards() bool {
	if o != nil && !IsNil(o.PciCoprocessorCards) {
		return true
	}

	return false
}

// SetPciCoprocessorCards gets a reference to the given []PciCoprocessorCardRelationship and assigns it to the PciCoprocessorCards field.
func (o *ComputeBoard) SetPciCoprocessorCards(v []PciCoprocessorCardRelationship) {
	o.PciCoprocessorCards = v
}

// GetPciSwitch returns the PciSwitch field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ComputeBoard) GetPciSwitch() []PciSwitchRelationship {
	if o == nil {
		var ret []PciSwitchRelationship
		return ret
	}
	return o.PciSwitch
}

// GetPciSwitchOk returns a tuple with the PciSwitch field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ComputeBoard) GetPciSwitchOk() ([]PciSwitchRelationship, bool) {
	if o == nil || IsNil(o.PciSwitch) {
		return nil, false
	}
	return o.PciSwitch, true
}

// HasPciSwitch returns a boolean if a field has been set.
func (o *ComputeBoard) HasPciSwitch() bool {
	if o != nil && !IsNil(o.PciSwitch) {
		return true
	}

	return false
}

// SetPciSwitch gets a reference to the given []PciSwitchRelationship and assigns it to the PciSwitch field.
func (o *ComputeBoard) SetPciSwitch(v []PciSwitchRelationship) {
	o.PciSwitch = v
}

// GetPersistentMemoryConfiguration returns the PersistentMemoryConfiguration field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ComputeBoard) GetPersistentMemoryConfiguration() MemoryPersistentMemoryConfigurationRelationship {
	if o == nil || IsNil(o.PersistentMemoryConfiguration.Get()) {
		var ret MemoryPersistentMemoryConfigurationRelationship
		return ret
	}
	return *o.PersistentMemoryConfiguration.Get()
}

// GetPersistentMemoryConfigurationOk returns a tuple with the PersistentMemoryConfiguration field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ComputeBoard) GetPersistentMemoryConfigurationOk() (*MemoryPersistentMemoryConfigurationRelationship, bool) {
	if o == nil {
		return nil, false
	}
	return o.PersistentMemoryConfiguration.Get(), o.PersistentMemoryConfiguration.IsSet()
}

// HasPersistentMemoryConfiguration returns a boolean if a field has been set.
func (o *ComputeBoard) HasPersistentMemoryConfiguration() bool {
	if o != nil && o.PersistentMemoryConfiguration.IsSet() {
		return true
	}

	return false
}

// SetPersistentMemoryConfiguration gets a reference to the given NullableMemoryPersistentMemoryConfigurationRelationship and assigns it to the PersistentMemoryConfiguration field.
func (o *ComputeBoard) SetPersistentMemoryConfiguration(v MemoryPersistentMemoryConfigurationRelationship) {
	o.PersistentMemoryConfiguration.Set(&v)
}

// SetPersistentMemoryConfigurationNil sets the value for PersistentMemoryConfiguration to be an explicit nil
func (o *ComputeBoard) SetPersistentMemoryConfigurationNil() {
	o.PersistentMemoryConfiguration.Set(nil)
}

// UnsetPersistentMemoryConfiguration ensures that no value is present for PersistentMemoryConfiguration, not even an explicit nil
func (o *ComputeBoard) UnsetPersistentMemoryConfiguration() {
	o.PersistentMemoryConfiguration.Unset()
}

// GetProcessors returns the Processors field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ComputeBoard) GetProcessors() []ProcessorUnitRelationship {
	if o == nil {
		var ret []ProcessorUnitRelationship
		return ret
	}
	return o.Processors
}

// GetProcessorsOk returns a tuple with the Processors field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ComputeBoard) GetProcessorsOk() ([]ProcessorUnitRelationship, bool) {
	if o == nil || IsNil(o.Processors) {
		return nil, false
	}
	return o.Processors, true
}

// HasProcessors returns a boolean if a field has been set.
func (o *ComputeBoard) HasProcessors() bool {
	if o != nil && !IsNil(o.Processors) {
		return true
	}

	return false
}

// SetProcessors gets a reference to the given []ProcessorUnitRelationship and assigns it to the Processors field.
func (o *ComputeBoard) SetProcessors(v []ProcessorUnitRelationship) {
	o.Processors = v
}

// GetRegisteredDevice returns the RegisteredDevice field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ComputeBoard) GetRegisteredDevice() AssetDeviceRegistrationRelationship {
	if o == nil || IsNil(o.RegisteredDevice.Get()) {
		var ret AssetDeviceRegistrationRelationship
		return ret
	}
	return *o.RegisteredDevice.Get()
}

// GetRegisteredDeviceOk returns a tuple with the RegisteredDevice field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ComputeBoard) GetRegisteredDeviceOk() (*AssetDeviceRegistrationRelationship, bool) {
	if o == nil {
		return nil, false
	}
	return o.RegisteredDevice.Get(), o.RegisteredDevice.IsSet()
}

// HasRegisteredDevice returns a boolean if a field has been set.
func (o *ComputeBoard) HasRegisteredDevice() bool {
	if o != nil && o.RegisteredDevice.IsSet() {
		return true
	}

	return false
}

// SetRegisteredDevice gets a reference to the given NullableAssetDeviceRegistrationRelationship and assigns it to the RegisteredDevice field.
func (o *ComputeBoard) SetRegisteredDevice(v AssetDeviceRegistrationRelationship) {
	o.RegisteredDevice.Set(&v)
}

// SetRegisteredDeviceNil sets the value for RegisteredDevice to be an explicit nil
func (o *ComputeBoard) SetRegisteredDeviceNil() {
	o.RegisteredDevice.Set(nil)
}

// UnsetRegisteredDevice ensures that no value is present for RegisteredDevice, not even an explicit nil
func (o *ComputeBoard) UnsetRegisteredDevice() {
	o.RegisteredDevice.Unset()
}

// GetSecurityUnits returns the SecurityUnits field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ComputeBoard) GetSecurityUnits() []SecurityUnitRelationship {
	if o == nil {
		var ret []SecurityUnitRelationship
		return ret
	}
	return o.SecurityUnits
}

// GetSecurityUnitsOk returns a tuple with the SecurityUnits field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ComputeBoard) GetSecurityUnitsOk() ([]SecurityUnitRelationship, bool) {
	if o == nil || IsNil(o.SecurityUnits) {
		return nil, false
	}
	return o.SecurityUnits, true
}

// HasSecurityUnits returns a boolean if a field has been set.
func (o *ComputeBoard) HasSecurityUnits() bool {
	if o != nil && !IsNil(o.SecurityUnits) {
		return true
	}

	return false
}

// SetSecurityUnits gets a reference to the given []SecurityUnitRelationship and assigns it to the SecurityUnits field.
func (o *ComputeBoard) SetSecurityUnits(v []SecurityUnitRelationship) {
	o.SecurityUnits = v
}

// GetStorageControllerDrives returns the StorageControllerDrives field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ComputeBoard) GetStorageControllerDrives() []StorageControllerDriveRelationship {
	if o == nil {
		var ret []StorageControllerDriveRelationship
		return ret
	}
	return o.StorageControllerDrives
}

// GetStorageControllerDrivesOk returns a tuple with the StorageControllerDrives field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ComputeBoard) GetStorageControllerDrivesOk() ([]StorageControllerDriveRelationship, bool) {
	if o == nil || IsNil(o.StorageControllerDrives) {
		return nil, false
	}
	return o.StorageControllerDrives, true
}

// HasStorageControllerDrives returns a boolean if a field has been set.
func (o *ComputeBoard) HasStorageControllerDrives() bool {
	if o != nil && !IsNil(o.StorageControllerDrives) {
		return true
	}

	return false
}

// SetStorageControllerDrives gets a reference to the given []StorageControllerDriveRelationship and assigns it to the StorageControllerDrives field.
func (o *ComputeBoard) SetStorageControllerDrives(v []StorageControllerDriveRelationship) {
	o.StorageControllerDrives = v
}

// GetStorageControllers returns the StorageControllers field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ComputeBoard) GetStorageControllers() []StorageControllerRelationship {
	if o == nil {
		var ret []StorageControllerRelationship
		return ret
	}
	return o.StorageControllers
}

// GetStorageControllersOk returns a tuple with the StorageControllers field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ComputeBoard) GetStorageControllersOk() ([]StorageControllerRelationship, bool) {
	if o == nil || IsNil(o.StorageControllers) {
		return nil, false
	}
	return o.StorageControllers, true
}

// HasStorageControllers returns a boolean if a field has been set.
func (o *ComputeBoard) HasStorageControllers() bool {
	if o != nil && !IsNil(o.StorageControllers) {
		return true
	}

	return false
}

// SetStorageControllers gets a reference to the given []StorageControllerRelationship and assigns it to the StorageControllers field.
func (o *ComputeBoard) SetStorageControllers(v []StorageControllerRelationship) {
	o.StorageControllers = v
}

// GetStorageFlexFlashControllers returns the StorageFlexFlashControllers field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ComputeBoard) GetStorageFlexFlashControllers() []StorageFlexFlashControllerRelationship {
	if o == nil {
		var ret []StorageFlexFlashControllerRelationship
		return ret
	}
	return o.StorageFlexFlashControllers
}

// GetStorageFlexFlashControllersOk returns a tuple with the StorageFlexFlashControllers field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ComputeBoard) GetStorageFlexFlashControllersOk() ([]StorageFlexFlashControllerRelationship, bool) {
	if o == nil || IsNil(o.StorageFlexFlashControllers) {
		return nil, false
	}
	return o.StorageFlexFlashControllers, true
}

// HasStorageFlexFlashControllers returns a boolean if a field has been set.
func (o *ComputeBoard) HasStorageFlexFlashControllers() bool {
	if o != nil && !IsNil(o.StorageFlexFlashControllers) {
		return true
	}

	return false
}

// SetStorageFlexFlashControllers gets a reference to the given []StorageFlexFlashControllerRelationship and assigns it to the StorageFlexFlashControllers field.
func (o *ComputeBoard) SetStorageFlexFlashControllers(v []StorageFlexFlashControllerRelationship) {
	o.StorageFlexFlashControllers = v
}

// GetStorageFlexUtilControllers returns the StorageFlexUtilControllers field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ComputeBoard) GetStorageFlexUtilControllers() []StorageFlexUtilControllerRelationship {
	if o == nil {
		var ret []StorageFlexUtilControllerRelationship
		return ret
	}
	return o.StorageFlexUtilControllers
}

// GetStorageFlexUtilControllersOk returns a tuple with the StorageFlexUtilControllers field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ComputeBoard) GetStorageFlexUtilControllersOk() ([]StorageFlexUtilControllerRelationship, bool) {
	if o == nil || IsNil(o.StorageFlexUtilControllers) {
		return nil, false
	}
	return o.StorageFlexUtilControllers, true
}

// HasStorageFlexUtilControllers returns a boolean if a field has been set.
func (o *ComputeBoard) HasStorageFlexUtilControllers() bool {
	if o != nil && !IsNil(o.StorageFlexUtilControllers) {
		return true
	}

	return false
}

// SetStorageFlexUtilControllers gets a reference to the given []StorageFlexUtilControllerRelationship and assigns it to the StorageFlexUtilControllers field.
func (o *ComputeBoard) SetStorageFlexUtilControllers(v []StorageFlexUtilControllerRelationship) {
	o.StorageFlexUtilControllers = v
}

func (o ComputeBoard) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ComputeBoard) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	serializedEquipmentBase, errEquipmentBase := json.Marshal(o.EquipmentBase)
	if errEquipmentBase != nil {
		return map[string]interface{}{}, errEquipmentBase
	}
	errEquipmentBase = json.Unmarshal([]byte(serializedEquipmentBase), &toSerialize)
	if errEquipmentBase != nil {
		return map[string]interface{}{}, errEquipmentBase
	}
	if _, exists := toSerialize["ClassId"]; !exists {
		toSerialize["ClassId"] = o.GetDefaultClassId()
	}
	toSerialize["ClassId"] = o.ClassId
	if _, exists := toSerialize["ObjectType"]; !exists {
		toSerialize["ObjectType"] = o.GetDefaultObjectType()
	}
	toSerialize["ObjectType"] = o.ObjectType
	if !IsNil(o.BoardId) {
		toSerialize["BoardId"] = o.BoardId
	}
	if !IsNil(o.CpuTypeController) {
		toSerialize["CpuTypeController"] = o.CpuTypeController
	}
	if !IsNil(o.OperPowerState) {
		toSerialize["OperPowerState"] = o.OperPowerState
	}
	if o.OperReason != nil {
		toSerialize["OperReason"] = o.OperReason
	}
	if o.ComputeBlade.IsSet() {
		toSerialize["ComputeBlade"] = o.ComputeBlade.Get()
	}
	if o.ComputeRackUnit.IsSet() {
		toSerialize["ComputeRackUnit"] = o.ComputeRackUnit.Get()
	}
	if o.EquipmentTpms != nil {
		toSerialize["EquipmentTpms"] = o.EquipmentTpms
	}
	if o.GraphicsCards != nil {
		toSerialize["GraphicsCards"] = o.GraphicsCards
	}
	if o.HybridDriveSlots != nil {
		toSerialize["HybridDriveSlots"] = o.HybridDriveSlots
	}
	if o.InventoryDeviceInfo.IsSet() {
		toSerialize["InventoryDeviceInfo"] = o.InventoryDeviceInfo.Get()
	}
	if o.MemoryArrays != nil {
		toSerialize["MemoryArrays"] = o.MemoryArrays
	}
	if o.PciCoprocessorCards != nil {
		toSerialize["PciCoprocessorCards"] = o.PciCoprocessorCards
	}
	if o.PciSwitch != nil {
		toSerialize["PciSwitch"] = o.PciSwitch
	}
	if o.PersistentMemoryConfiguration.IsSet() {
		toSerialize["PersistentMemoryConfiguration"] = o.PersistentMemoryConfiguration.Get()
	}
	if o.Processors != nil {
		toSerialize["Processors"] = o.Processors
	}
	if o.RegisteredDevice.IsSet() {
		toSerialize["RegisteredDevice"] = o.RegisteredDevice.Get()
	}
	if o.SecurityUnits != nil {
		toSerialize["SecurityUnits"] = o.SecurityUnits
	}
	if o.StorageControllerDrives != nil {
		toSerialize["StorageControllerDrives"] = o.StorageControllerDrives
	}
	if o.StorageControllers != nil {
		toSerialize["StorageControllers"] = o.StorageControllers
	}
	if o.StorageFlexFlashControllers != nil {
		toSerialize["StorageFlexFlashControllers"] = o.StorageFlexFlashControllers
	}
	if o.StorageFlexUtilControllers != nil {
		toSerialize["StorageFlexUtilControllers"] = o.StorageFlexUtilControllers
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ComputeBoard) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"ClassId",
		"ObjectType",
	}

	// defaultValueFuncMap captures the default values for required properties.
	// These values are used when required properties are missing from the payload.
	defaultValueFuncMap := map[string]func() interface{}{
		"ClassId":    o.GetDefaultClassId,
		"ObjectType": o.GetDefaultObjectType,
	}
	var defaultValueApplied bool
	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			if _, ok := defaultValueFuncMap[requiredProperty]; ok {
				allProperties[requiredProperty] = defaultValueFuncMap[requiredProperty]()
				defaultValueApplied = true
			}
		}
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	if defaultValueApplied {
		data, err = json.Marshal(allProperties)
		if err != nil {
			return err
		}
	}
	type ComputeBoardWithoutEmbeddedStruct struct {
		// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.
		ClassId string `json:"ClassId"`
		// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
		ObjectType string `json:"ObjectType"`
		// Unique identifier of the mother board present in the server.
		BoardId *int64 `json:"BoardId,omitempty"`
		// The type of central processing unit on the mother board.
		CpuTypeController *string `json:"CpuTypeController,omitempty"`
		// Current power state of the mother board of the server.
		OperPowerState  *string                             `json:"OperPowerState,omitempty"`
		OperReason      []string                            `json:"OperReason,omitempty"`
		ComputeBlade    NullableComputeBladeRelationship    `json:"ComputeBlade,omitempty"`
		ComputeRackUnit NullableComputeRackUnitRelationship `json:"ComputeRackUnit,omitempty"`
		// An array of relationships to equipmentTpm resources.
		EquipmentTpms []EquipmentTpmRelationship `json:"EquipmentTpms,omitempty"`
		// An array of relationships to graphicsCard resources.
		GraphicsCards []GraphicsCardRelationship `json:"GraphicsCards,omitempty"`
		// An array of relationships to equipmentHybridDriveSlot resources.
		HybridDriveSlots    []EquipmentHybridDriveSlotRelationship  `json:"HybridDriveSlots,omitempty"`
		InventoryDeviceInfo NullableInventoryDeviceInfoRelationship `json:"InventoryDeviceInfo,omitempty"`
		// An array of relationships to memoryArray resources.
		MemoryArrays []MemoryArrayRelationship `json:"MemoryArrays,omitempty"`
		// An array of relationships to pciCoprocessorCard resources.
		PciCoprocessorCards []PciCoprocessorCardRelationship `json:"PciCoprocessorCards,omitempty"`
		// An array of relationships to pciSwitch resources.
		PciSwitch                     []PciSwitchRelationship                                 `json:"PciSwitch,omitempty"`
		PersistentMemoryConfiguration NullableMemoryPersistentMemoryConfigurationRelationship `json:"PersistentMemoryConfiguration,omitempty"`
		// An array of relationships to processorUnit resources.
		Processors       []ProcessorUnitRelationship                 `json:"Processors,omitempty"`
		RegisteredDevice NullableAssetDeviceRegistrationRelationship `json:"RegisteredDevice,omitempty"`
		// An array of relationships to securityUnit resources.
		SecurityUnits []SecurityUnitRelationship `json:"SecurityUnits,omitempty"`
		// An array of relationships to storageControllerDrive resources.
		StorageControllerDrives []StorageControllerDriveRelationship `json:"StorageControllerDrives,omitempty"`
		// An array of relationships to storageController resources.
		StorageControllers []StorageControllerRelationship `json:"StorageControllers,omitempty"`
		// An array of relationships to storageFlexFlashController resources.
		StorageFlexFlashControllers []StorageFlexFlashControllerRelationship `json:"StorageFlexFlashControllers,omitempty"`
		// An array of relationships to storageFlexUtilController resources.
		StorageFlexUtilControllers []StorageFlexUtilControllerRelationship `json:"StorageFlexUtilControllers,omitempty"`
	}

	varComputeBoardWithoutEmbeddedStruct := ComputeBoardWithoutEmbeddedStruct{}

	err = json.Unmarshal(data, &varComputeBoardWithoutEmbeddedStruct)
	if err == nil {
		varComputeBoard := _ComputeBoard{}
		varComputeBoard.ClassId = varComputeBoardWithoutEmbeddedStruct.ClassId
		varComputeBoard.ObjectType = varComputeBoardWithoutEmbeddedStruct.ObjectType
		varComputeBoard.BoardId = varComputeBoardWithoutEmbeddedStruct.BoardId
		varComputeBoard.CpuTypeController = varComputeBoardWithoutEmbeddedStruct.CpuTypeController
		varComputeBoard.OperPowerState = varComputeBoardWithoutEmbeddedStruct.OperPowerState
		varComputeBoard.OperReason = varComputeBoardWithoutEmbeddedStruct.OperReason
		varComputeBoard.ComputeBlade = varComputeBoardWithoutEmbeddedStruct.ComputeBlade
		varComputeBoard.ComputeRackUnit = varComputeBoardWithoutEmbeddedStruct.ComputeRackUnit
		varComputeBoard.EquipmentTpms = varComputeBoardWithoutEmbeddedStruct.EquipmentTpms
		varComputeBoard.GraphicsCards = varComputeBoardWithoutEmbeddedStruct.GraphicsCards
		varComputeBoard.HybridDriveSlots = varComputeBoardWithoutEmbeddedStruct.HybridDriveSlots
		varComputeBoard.InventoryDeviceInfo = varComputeBoardWithoutEmbeddedStruct.InventoryDeviceInfo
		varComputeBoard.MemoryArrays = varComputeBoardWithoutEmbeddedStruct.MemoryArrays
		varComputeBoard.PciCoprocessorCards = varComputeBoardWithoutEmbeddedStruct.PciCoprocessorCards
		varComputeBoard.PciSwitch = varComputeBoardWithoutEmbeddedStruct.PciSwitch
		varComputeBoard.PersistentMemoryConfiguration = varComputeBoardWithoutEmbeddedStruct.PersistentMemoryConfiguration
		varComputeBoard.Processors = varComputeBoardWithoutEmbeddedStruct.Processors
		varComputeBoard.RegisteredDevice = varComputeBoardWithoutEmbeddedStruct.RegisteredDevice
		varComputeBoard.SecurityUnits = varComputeBoardWithoutEmbeddedStruct.SecurityUnits
		varComputeBoard.StorageControllerDrives = varComputeBoardWithoutEmbeddedStruct.StorageControllerDrives
		varComputeBoard.StorageControllers = varComputeBoardWithoutEmbeddedStruct.StorageControllers
		varComputeBoard.StorageFlexFlashControllers = varComputeBoardWithoutEmbeddedStruct.StorageFlexFlashControllers
		varComputeBoard.StorageFlexUtilControllers = varComputeBoardWithoutEmbeddedStruct.StorageFlexUtilControllers
		*o = ComputeBoard(varComputeBoard)
	} else {
		return err
	}

	varComputeBoard := _ComputeBoard{}

	err = json.Unmarshal(data, &varComputeBoard)
	if err == nil {
		o.EquipmentBase = varComputeBoard.EquipmentBase
	} else {
		return err
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "ClassId")
		delete(additionalProperties, "ObjectType")
		delete(additionalProperties, "BoardId")
		delete(additionalProperties, "CpuTypeController")
		delete(additionalProperties, "OperPowerState")
		delete(additionalProperties, "OperReason")
		delete(additionalProperties, "ComputeBlade")
		delete(additionalProperties, "ComputeRackUnit")
		delete(additionalProperties, "EquipmentTpms")
		delete(additionalProperties, "GraphicsCards")
		delete(additionalProperties, "HybridDriveSlots")
		delete(additionalProperties, "InventoryDeviceInfo")
		delete(additionalProperties, "MemoryArrays")
		delete(additionalProperties, "PciCoprocessorCards")
		delete(additionalProperties, "PciSwitch")
		delete(additionalProperties, "PersistentMemoryConfiguration")
		delete(additionalProperties, "Processors")
		delete(additionalProperties, "RegisteredDevice")
		delete(additionalProperties, "SecurityUnits")
		delete(additionalProperties, "StorageControllerDrives")
		delete(additionalProperties, "StorageControllers")
		delete(additionalProperties, "StorageFlexFlashControllers")
		delete(additionalProperties, "StorageFlexUtilControllers")

		// remove fields from embedded structs
		reflectEquipmentBase := reflect.ValueOf(o.EquipmentBase)
		for i := 0; i < reflectEquipmentBase.Type().NumField(); i++ {
			t := reflectEquipmentBase.Type().Field(i)

			if jsonTag := t.Tag.Get("json"); jsonTag != "" {
				fieldName := ""
				if commaIdx := strings.Index(jsonTag, ","); commaIdx > 0 {
					fieldName = jsonTag[:commaIdx]
				} else {
					fieldName = jsonTag
				}
				if fieldName != "AdditionalProperties" {
					delete(additionalProperties, fieldName)
				}
			}
		}

		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableComputeBoard struct {
	value *ComputeBoard
	isSet bool
}

func (v NullableComputeBoard) Get() *ComputeBoard {
	return v.value
}

func (v *NullableComputeBoard) Set(val *ComputeBoard) {
	v.value = val
	v.isSet = true
}

func (v NullableComputeBoard) IsSet() bool {
	return v.isSet
}

func (v *NullableComputeBoard) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableComputeBoard(val *ComputeBoard) *NullableComputeBoard {
	return &NullableComputeBoard{value: val, isSet: true}
}

func (v NullableComputeBoard) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableComputeBoard) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
