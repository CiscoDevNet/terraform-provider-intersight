/*
Cisco Intersight

Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations. The Intersight OpenAPI document defines the complete set of properties that are returned in the HTTP response. From that perspective, a client can expect that no additional properties are returned, unless these properties are explicitly defined in the OpenAPI document. However, when a client uses an older version of the Intersight OpenAPI document, the server may send additional properties because the software is more recent than the client. In that case, the client may receive properties that it does not know about. Some generated SDKs perform a strict validation of the HTTP response body against the OpenAPI document.

API version: 1.0.11-2025101412
Contact: intersight@cisco.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package intersight

import (
	"encoding/json"
	"fmt"
	"reflect"
	"strings"
)

// checks if the SoftwarerepositoryBaseDistributable type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SoftwarerepositoryBaseDistributable{}

// SoftwarerepositoryBaseDistributable An image distributed by Cisco.
type SoftwarerepositoryBaseDistributable struct {
	SoftwarerepositoryFile
	// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data. The enum values provides the list of concrete types that can be instantiated from this abstract type.
	ClassId string `json:"ClassId"`
	// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property. The enum values provides the list of concrete types that can be instantiated from this abstract type.
	ObjectType string `json:"ObjectType"`
	// The bundle type of the image, as published on cisco.com.
	BundleType *string `json:"BundleType,omitempty"`
	// The unique identifier for an image in a Cisco repository.
	Guid *string `json:"Guid,omitempty"`
	// The type of image which the distributable falls into according to the component it can upgrade. For e.g.; Standalone server, Intersight managed server, Unified Edge server. The field is used in private appliance mode, where image does not have description populated from CCO.
	ImageType *string `json:"ImageType,omitempty"`
	// The mdfid of the image provided by cisco.com.
	Mdfid *string `json:"Mdfid,omitempty"`
	// The endpoint model for which this firmware image is applicable.
	Model *string `json:"Model,omitempty"`
	// The platform type of the image.
	PlatformType *string `json:"PlatformType,omitempty"`
	// The build which is recommended by Cisco.
	RecommendedBuild *string `json:"RecommendedBuild,omitempty"`
	// The url for the release notes of this image.
	ReleaseNotesUrl *string `json:"ReleaseNotesUrl,omitempty"`
	// The software type id provided by cisco.com.
	SoftwareTypeId       *string                                       `json:"SoftwareTypeId,omitempty"`
	Release              NullableSoftwarerepositoryReleaseRelationship `json:"Release,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _SoftwarerepositoryBaseDistributable SoftwarerepositoryBaseDistributable

// NewSoftwarerepositoryBaseDistributable instantiates a new SoftwarerepositoryBaseDistributable object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSoftwarerepositoryBaseDistributable(classId string, objectType string) *SoftwarerepositoryBaseDistributable {
	this := SoftwarerepositoryBaseDistributable{}
	this.ClassId = classId
	this.ObjectType = objectType
	var importAction string = "None"
	this.ImportAction = &importAction
	return &this
}

// NewSoftwarerepositoryBaseDistributableWithDefaults instantiates a new SoftwarerepositoryBaseDistributable object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSoftwarerepositoryBaseDistributableWithDefaults() *SoftwarerepositoryBaseDistributable {
	this := SoftwarerepositoryBaseDistributable{}
	var classId string = "softwarerepository.OperatingSystemFile"
	this.ClassId = classId
	var objectType string = "softwarerepository.OperatingSystemFile"
	this.ObjectType = objectType
	return &this
}

// GetClassId returns the ClassId field value
func (o *SoftwarerepositoryBaseDistributable) GetClassId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ClassId
}

// GetClassIdOk returns a tuple with the ClassId field value
// and a boolean to check if the value has been set.
func (o *SoftwarerepositoryBaseDistributable) GetClassIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ClassId, true
}

// SetClassId sets field value
func (o *SoftwarerepositoryBaseDistributable) SetClassId(v string) {
	o.ClassId = v
}

// GetDefaultClassId returns the default value "softwarerepository.OperatingSystemFile" of the ClassId field.
func (o *SoftwarerepositoryBaseDistributable) GetDefaultClassId() interface{} {
	return "softwarerepository.OperatingSystemFile"
}

// GetObjectType returns the ObjectType field value
func (o *SoftwarerepositoryBaseDistributable) GetObjectType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ObjectType
}

// GetObjectTypeOk returns a tuple with the ObjectType field value
// and a boolean to check if the value has been set.
func (o *SoftwarerepositoryBaseDistributable) GetObjectTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ObjectType, true
}

// SetObjectType sets field value
func (o *SoftwarerepositoryBaseDistributable) SetObjectType(v string) {
	o.ObjectType = v
}

// GetDefaultObjectType returns the default value "softwarerepository.OperatingSystemFile" of the ObjectType field.
func (o *SoftwarerepositoryBaseDistributable) GetDefaultObjectType() interface{} {
	return "softwarerepository.OperatingSystemFile"
}

// GetBundleType returns the BundleType field value if set, zero value otherwise.
func (o *SoftwarerepositoryBaseDistributable) GetBundleType() string {
	if o == nil || IsNil(o.BundleType) {
		var ret string
		return ret
	}
	return *o.BundleType
}

// GetBundleTypeOk returns a tuple with the BundleType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SoftwarerepositoryBaseDistributable) GetBundleTypeOk() (*string, bool) {
	if o == nil || IsNil(o.BundleType) {
		return nil, false
	}
	return o.BundleType, true
}

// HasBundleType returns a boolean if a field has been set.
func (o *SoftwarerepositoryBaseDistributable) HasBundleType() bool {
	if o != nil && !IsNil(o.BundleType) {
		return true
	}

	return false
}

// SetBundleType gets a reference to the given string and assigns it to the BundleType field.
func (o *SoftwarerepositoryBaseDistributable) SetBundleType(v string) {
	o.BundleType = &v
}

// GetGuid returns the Guid field value if set, zero value otherwise.
func (o *SoftwarerepositoryBaseDistributable) GetGuid() string {
	if o == nil || IsNil(o.Guid) {
		var ret string
		return ret
	}
	return *o.Guid
}

// GetGuidOk returns a tuple with the Guid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SoftwarerepositoryBaseDistributable) GetGuidOk() (*string, bool) {
	if o == nil || IsNil(o.Guid) {
		return nil, false
	}
	return o.Guid, true
}

// HasGuid returns a boolean if a field has been set.
func (o *SoftwarerepositoryBaseDistributable) HasGuid() bool {
	if o != nil && !IsNil(o.Guid) {
		return true
	}

	return false
}

// SetGuid gets a reference to the given string and assigns it to the Guid field.
func (o *SoftwarerepositoryBaseDistributable) SetGuid(v string) {
	o.Guid = &v
}

// GetImageType returns the ImageType field value if set, zero value otherwise.
func (o *SoftwarerepositoryBaseDistributable) GetImageType() string {
	if o == nil || IsNil(o.ImageType) {
		var ret string
		return ret
	}
	return *o.ImageType
}

// GetImageTypeOk returns a tuple with the ImageType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SoftwarerepositoryBaseDistributable) GetImageTypeOk() (*string, bool) {
	if o == nil || IsNil(o.ImageType) {
		return nil, false
	}
	return o.ImageType, true
}

// HasImageType returns a boolean if a field has been set.
func (o *SoftwarerepositoryBaseDistributable) HasImageType() bool {
	if o != nil && !IsNil(o.ImageType) {
		return true
	}

	return false
}

// SetImageType gets a reference to the given string and assigns it to the ImageType field.
func (o *SoftwarerepositoryBaseDistributable) SetImageType(v string) {
	o.ImageType = &v
}

// GetMdfid returns the Mdfid field value if set, zero value otherwise.
func (o *SoftwarerepositoryBaseDistributable) GetMdfid() string {
	if o == nil || IsNil(o.Mdfid) {
		var ret string
		return ret
	}
	return *o.Mdfid
}

// GetMdfidOk returns a tuple with the Mdfid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SoftwarerepositoryBaseDistributable) GetMdfidOk() (*string, bool) {
	if o == nil || IsNil(o.Mdfid) {
		return nil, false
	}
	return o.Mdfid, true
}

// HasMdfid returns a boolean if a field has been set.
func (o *SoftwarerepositoryBaseDistributable) HasMdfid() bool {
	if o != nil && !IsNil(o.Mdfid) {
		return true
	}

	return false
}

// SetMdfid gets a reference to the given string and assigns it to the Mdfid field.
func (o *SoftwarerepositoryBaseDistributable) SetMdfid(v string) {
	o.Mdfid = &v
}

// GetModel returns the Model field value if set, zero value otherwise.
func (o *SoftwarerepositoryBaseDistributable) GetModel() string {
	if o == nil || IsNil(o.Model) {
		var ret string
		return ret
	}
	return *o.Model
}

// GetModelOk returns a tuple with the Model field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SoftwarerepositoryBaseDistributable) GetModelOk() (*string, bool) {
	if o == nil || IsNil(o.Model) {
		return nil, false
	}
	return o.Model, true
}

// HasModel returns a boolean if a field has been set.
func (o *SoftwarerepositoryBaseDistributable) HasModel() bool {
	if o != nil && !IsNil(o.Model) {
		return true
	}

	return false
}

// SetModel gets a reference to the given string and assigns it to the Model field.
func (o *SoftwarerepositoryBaseDistributable) SetModel(v string) {
	o.Model = &v
}

// GetPlatformType returns the PlatformType field value if set, zero value otherwise.
func (o *SoftwarerepositoryBaseDistributable) GetPlatformType() string {
	if o == nil || IsNil(o.PlatformType) {
		var ret string
		return ret
	}
	return *o.PlatformType
}

// GetPlatformTypeOk returns a tuple with the PlatformType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SoftwarerepositoryBaseDistributable) GetPlatformTypeOk() (*string, bool) {
	if o == nil || IsNil(o.PlatformType) {
		return nil, false
	}
	return o.PlatformType, true
}

// HasPlatformType returns a boolean if a field has been set.
func (o *SoftwarerepositoryBaseDistributable) HasPlatformType() bool {
	if o != nil && !IsNil(o.PlatformType) {
		return true
	}

	return false
}

// SetPlatformType gets a reference to the given string and assigns it to the PlatformType field.
func (o *SoftwarerepositoryBaseDistributable) SetPlatformType(v string) {
	o.PlatformType = &v
}

// GetRecommendedBuild returns the RecommendedBuild field value if set, zero value otherwise.
func (o *SoftwarerepositoryBaseDistributable) GetRecommendedBuild() string {
	if o == nil || IsNil(o.RecommendedBuild) {
		var ret string
		return ret
	}
	return *o.RecommendedBuild
}

// GetRecommendedBuildOk returns a tuple with the RecommendedBuild field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SoftwarerepositoryBaseDistributable) GetRecommendedBuildOk() (*string, bool) {
	if o == nil || IsNil(o.RecommendedBuild) {
		return nil, false
	}
	return o.RecommendedBuild, true
}

// HasRecommendedBuild returns a boolean if a field has been set.
func (o *SoftwarerepositoryBaseDistributable) HasRecommendedBuild() bool {
	if o != nil && !IsNil(o.RecommendedBuild) {
		return true
	}

	return false
}

// SetRecommendedBuild gets a reference to the given string and assigns it to the RecommendedBuild field.
func (o *SoftwarerepositoryBaseDistributable) SetRecommendedBuild(v string) {
	o.RecommendedBuild = &v
}

// GetReleaseNotesUrl returns the ReleaseNotesUrl field value if set, zero value otherwise.
func (o *SoftwarerepositoryBaseDistributable) GetReleaseNotesUrl() string {
	if o == nil || IsNil(o.ReleaseNotesUrl) {
		var ret string
		return ret
	}
	return *o.ReleaseNotesUrl
}

// GetReleaseNotesUrlOk returns a tuple with the ReleaseNotesUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SoftwarerepositoryBaseDistributable) GetReleaseNotesUrlOk() (*string, bool) {
	if o == nil || IsNil(o.ReleaseNotesUrl) {
		return nil, false
	}
	return o.ReleaseNotesUrl, true
}

// HasReleaseNotesUrl returns a boolean if a field has been set.
func (o *SoftwarerepositoryBaseDistributable) HasReleaseNotesUrl() bool {
	if o != nil && !IsNil(o.ReleaseNotesUrl) {
		return true
	}

	return false
}

// SetReleaseNotesUrl gets a reference to the given string and assigns it to the ReleaseNotesUrl field.
func (o *SoftwarerepositoryBaseDistributable) SetReleaseNotesUrl(v string) {
	o.ReleaseNotesUrl = &v
}

// GetSoftwareTypeId returns the SoftwareTypeId field value if set, zero value otherwise.
func (o *SoftwarerepositoryBaseDistributable) GetSoftwareTypeId() string {
	if o == nil || IsNil(o.SoftwareTypeId) {
		var ret string
		return ret
	}
	return *o.SoftwareTypeId
}

// GetSoftwareTypeIdOk returns a tuple with the SoftwareTypeId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SoftwarerepositoryBaseDistributable) GetSoftwareTypeIdOk() (*string, bool) {
	if o == nil || IsNil(o.SoftwareTypeId) {
		return nil, false
	}
	return o.SoftwareTypeId, true
}

// HasSoftwareTypeId returns a boolean if a field has been set.
func (o *SoftwarerepositoryBaseDistributable) HasSoftwareTypeId() bool {
	if o != nil && !IsNil(o.SoftwareTypeId) {
		return true
	}

	return false
}

// SetSoftwareTypeId gets a reference to the given string and assigns it to the SoftwareTypeId field.
func (o *SoftwarerepositoryBaseDistributable) SetSoftwareTypeId(v string) {
	o.SoftwareTypeId = &v
}

// GetRelease returns the Release field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SoftwarerepositoryBaseDistributable) GetRelease() SoftwarerepositoryReleaseRelationship {
	if o == nil || IsNil(o.Release.Get()) {
		var ret SoftwarerepositoryReleaseRelationship
		return ret
	}
	return *o.Release.Get()
}

// GetReleaseOk returns a tuple with the Release field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SoftwarerepositoryBaseDistributable) GetReleaseOk() (*SoftwarerepositoryReleaseRelationship, bool) {
	if o == nil {
		return nil, false
	}
	return o.Release.Get(), o.Release.IsSet()
}

// HasRelease returns a boolean if a field has been set.
func (o *SoftwarerepositoryBaseDistributable) HasRelease() bool {
	if o != nil && o.Release.IsSet() {
		return true
	}

	return false
}

// SetRelease gets a reference to the given NullableSoftwarerepositoryReleaseRelationship and assigns it to the Release field.
func (o *SoftwarerepositoryBaseDistributable) SetRelease(v SoftwarerepositoryReleaseRelationship) {
	o.Release.Set(&v)
}

// SetReleaseNil sets the value for Release to be an explicit nil
func (o *SoftwarerepositoryBaseDistributable) SetReleaseNil() {
	o.Release.Set(nil)
}

// UnsetRelease ensures that no value is present for Release, not even an explicit nil
func (o *SoftwarerepositoryBaseDistributable) UnsetRelease() {
	o.Release.Unset()
}

func (o SoftwarerepositoryBaseDistributable) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SoftwarerepositoryBaseDistributable) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	serializedSoftwarerepositoryFile, errSoftwarerepositoryFile := json.Marshal(o.SoftwarerepositoryFile)
	if errSoftwarerepositoryFile != nil {
		return map[string]interface{}{}, errSoftwarerepositoryFile
	}
	errSoftwarerepositoryFile = json.Unmarshal([]byte(serializedSoftwarerepositoryFile), &toSerialize)
	if errSoftwarerepositoryFile != nil {
		return map[string]interface{}{}, errSoftwarerepositoryFile
	}
	if _, exists := toSerialize["ClassId"]; !exists {
		toSerialize["ClassId"] = o.GetDefaultClassId()
	}
	toSerialize["ClassId"] = o.ClassId
	if _, exists := toSerialize["ObjectType"]; !exists {
		toSerialize["ObjectType"] = o.GetDefaultObjectType()
	}
	toSerialize["ObjectType"] = o.ObjectType
	if !IsNil(o.BundleType) {
		toSerialize["BundleType"] = o.BundleType
	}
	if !IsNil(o.Guid) {
		toSerialize["Guid"] = o.Guid
	}
	if !IsNil(o.ImageType) {
		toSerialize["ImageType"] = o.ImageType
	}
	if !IsNil(o.Mdfid) {
		toSerialize["Mdfid"] = o.Mdfid
	}
	if !IsNil(o.Model) {
		toSerialize["Model"] = o.Model
	}
	if !IsNil(o.PlatformType) {
		toSerialize["PlatformType"] = o.PlatformType
	}
	if !IsNil(o.RecommendedBuild) {
		toSerialize["RecommendedBuild"] = o.RecommendedBuild
	}
	if !IsNil(o.ReleaseNotesUrl) {
		toSerialize["ReleaseNotesUrl"] = o.ReleaseNotesUrl
	}
	if !IsNil(o.SoftwareTypeId) {
		toSerialize["SoftwareTypeId"] = o.SoftwareTypeId
	}
	if o.Release.IsSet() {
		toSerialize["Release"] = o.Release.Get()
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *SoftwarerepositoryBaseDistributable) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"ClassId",
		"ObjectType",
	}

	// defaultValueFuncMap captures the default values for required properties.
	// These values are used when required properties are missing from the payload.
	defaultValueFuncMap := map[string]func() interface{}{
		"ClassId":    o.GetDefaultClassId,
		"ObjectType": o.GetDefaultObjectType,
	}
	var defaultValueApplied bool
	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			if _, ok := defaultValueFuncMap[requiredProperty]; ok {
				allProperties[requiredProperty] = defaultValueFuncMap[requiredProperty]()
				defaultValueApplied = true
			}
		}
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	if defaultValueApplied {
		data, err = json.Marshal(allProperties)
		if err != nil {
			return err
		}
	}
	type SoftwarerepositoryBaseDistributableWithoutEmbeddedStruct struct {
		// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data. The enum values provides the list of concrete types that can be instantiated from this abstract type.
		ClassId string `json:"ClassId"`
		// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property. The enum values provides the list of concrete types that can be instantiated from this abstract type.
		ObjectType string `json:"ObjectType"`
		// The bundle type of the image, as published on cisco.com.
		BundleType *string `json:"BundleType,omitempty"`
		// The unique identifier for an image in a Cisco repository.
		Guid *string `json:"Guid,omitempty"`
		// The type of image which the distributable falls into according to the component it can upgrade. For e.g.; Standalone server, Intersight managed server, Unified Edge server. The field is used in private appliance mode, where image does not have description populated from CCO.
		ImageType *string `json:"ImageType,omitempty"`
		// The mdfid of the image provided by cisco.com.
		Mdfid *string `json:"Mdfid,omitempty"`
		// The endpoint model for which this firmware image is applicable.
		Model *string `json:"Model,omitempty"`
		// The platform type of the image.
		PlatformType *string `json:"PlatformType,omitempty"`
		// The build which is recommended by Cisco.
		RecommendedBuild *string `json:"RecommendedBuild,omitempty"`
		// The url for the release notes of this image.
		ReleaseNotesUrl *string `json:"ReleaseNotesUrl,omitempty"`
		// The software type id provided by cisco.com.
		SoftwareTypeId *string                                       `json:"SoftwareTypeId,omitempty"`
		Release        NullableSoftwarerepositoryReleaseRelationship `json:"Release,omitempty"`
	}

	varSoftwarerepositoryBaseDistributableWithoutEmbeddedStruct := SoftwarerepositoryBaseDistributableWithoutEmbeddedStruct{}

	err = json.Unmarshal(data, &varSoftwarerepositoryBaseDistributableWithoutEmbeddedStruct)
	if err == nil {
		varSoftwarerepositoryBaseDistributable := _SoftwarerepositoryBaseDistributable{}
		varSoftwarerepositoryBaseDistributable.ClassId = varSoftwarerepositoryBaseDistributableWithoutEmbeddedStruct.ClassId
		varSoftwarerepositoryBaseDistributable.ObjectType = varSoftwarerepositoryBaseDistributableWithoutEmbeddedStruct.ObjectType
		varSoftwarerepositoryBaseDistributable.BundleType = varSoftwarerepositoryBaseDistributableWithoutEmbeddedStruct.BundleType
		varSoftwarerepositoryBaseDistributable.Guid = varSoftwarerepositoryBaseDistributableWithoutEmbeddedStruct.Guid
		varSoftwarerepositoryBaseDistributable.ImageType = varSoftwarerepositoryBaseDistributableWithoutEmbeddedStruct.ImageType
		varSoftwarerepositoryBaseDistributable.Mdfid = varSoftwarerepositoryBaseDistributableWithoutEmbeddedStruct.Mdfid
		varSoftwarerepositoryBaseDistributable.Model = varSoftwarerepositoryBaseDistributableWithoutEmbeddedStruct.Model
		varSoftwarerepositoryBaseDistributable.PlatformType = varSoftwarerepositoryBaseDistributableWithoutEmbeddedStruct.PlatformType
		varSoftwarerepositoryBaseDistributable.RecommendedBuild = varSoftwarerepositoryBaseDistributableWithoutEmbeddedStruct.RecommendedBuild
		varSoftwarerepositoryBaseDistributable.ReleaseNotesUrl = varSoftwarerepositoryBaseDistributableWithoutEmbeddedStruct.ReleaseNotesUrl
		varSoftwarerepositoryBaseDistributable.SoftwareTypeId = varSoftwarerepositoryBaseDistributableWithoutEmbeddedStruct.SoftwareTypeId
		varSoftwarerepositoryBaseDistributable.Release = varSoftwarerepositoryBaseDistributableWithoutEmbeddedStruct.Release
		*o = SoftwarerepositoryBaseDistributable(varSoftwarerepositoryBaseDistributable)
	} else {
		return err
	}

	varSoftwarerepositoryBaseDistributable := _SoftwarerepositoryBaseDistributable{}

	err = json.Unmarshal(data, &varSoftwarerepositoryBaseDistributable)
	if err == nil {
		o.SoftwarerepositoryFile = varSoftwarerepositoryBaseDistributable.SoftwarerepositoryFile
	} else {
		return err
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "ClassId")
		delete(additionalProperties, "ObjectType")
		delete(additionalProperties, "BundleType")
		delete(additionalProperties, "Guid")
		delete(additionalProperties, "ImageType")
		delete(additionalProperties, "Mdfid")
		delete(additionalProperties, "Model")
		delete(additionalProperties, "PlatformType")
		delete(additionalProperties, "RecommendedBuild")
		delete(additionalProperties, "ReleaseNotesUrl")
		delete(additionalProperties, "SoftwareTypeId")
		delete(additionalProperties, "Release")

		// remove fields from embedded structs
		reflectSoftwarerepositoryFile := reflect.ValueOf(o.SoftwarerepositoryFile)
		for i := 0; i < reflectSoftwarerepositoryFile.Type().NumField(); i++ {
			t := reflectSoftwarerepositoryFile.Type().Field(i)

			if jsonTag := t.Tag.Get("json"); jsonTag != "" {
				fieldName := ""
				if commaIdx := strings.Index(jsonTag, ","); commaIdx > 0 {
					fieldName = jsonTag[:commaIdx]
				} else {
					fieldName = jsonTag
				}
				if fieldName != "AdditionalProperties" {
					delete(additionalProperties, fieldName)
				}
			}
		}

		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableSoftwarerepositoryBaseDistributable struct {
	value *SoftwarerepositoryBaseDistributable
	isSet bool
}

func (v NullableSoftwarerepositoryBaseDistributable) Get() *SoftwarerepositoryBaseDistributable {
	return v.value
}

func (v *NullableSoftwarerepositoryBaseDistributable) Set(val *SoftwarerepositoryBaseDistributable) {
	v.value = val
	v.isSet = true
}

func (v NullableSoftwarerepositoryBaseDistributable) IsSet() bool {
	return v.isSet
}

func (v *NullableSoftwarerepositoryBaseDistributable) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSoftwarerepositoryBaseDistributable(val *SoftwarerepositoryBaseDistributable) *NullableSoftwarerepositoryBaseDistributable {
	return &NullableSoftwarerepositoryBaseDistributable{value: val, isSet: true}
}

func (v NullableSoftwarerepositoryBaseDistributable) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSoftwarerepositoryBaseDistributable) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
