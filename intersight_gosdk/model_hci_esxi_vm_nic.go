/*
Cisco Intersight

Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations. The Intersight OpenAPI document defines the complete set of properties that are returned in the HTTP response. From that perspective, a client can expect that no additional properties are returned, unless these properties are explicitly defined in the OpenAPI document. However, when a client uses an older version of the Intersight OpenAPI document, the server may send additional properties because the software is more recent than the client. In that case, the client may receive properties that it does not know about. Some generated SDKs perform a strict validation of the HTTP response body against the OpenAPI document.

API version: 1.0.11-2025071017
Contact: intersight@cisco.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package intersight

import (
	"encoding/json"
	"fmt"
	"reflect"
	"strings"
)

// checks if the HciEsxiVmNic type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &HciEsxiVmNic{}

// HciEsxiVmNic A NIC associated with an ESXi VM.
type HciEsxiVmNic struct {
	MoBaseMo
	// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.
	ClassId string `json:"ClassId"`
	// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
	ObjectType string `json:"ObjectType"`
	// The adapter type of the NIC. Possible values are 'E1000', 'E1000E', 'VMXNET', 'VMXNET2', 'VMXNET3', 'PCNET32', 'SRIOV'.
	AdapterType *string        `json:"AdapterType,omitempty"`
	IpAddresses []HciIpAddress `json:"IpAddresses,omitempty"`
	// Indicates if the NIC is connected.
	IsConnected *bool `json:"IsConnected,omitempty"`
	// The MAC address of the NIC.
	MacAddress *string `json:"MacAddress,omitempty"`
	// The unique identifier of the NIC.
	NicExtId *string `json:"NicExtId,omitempty"`
	// The name of the port group.
	PortgroupName *string `json:"PortgroupName,omitempty"`
	// The unique identifier of the VM.
	VmExtId              *string                                     `json:"VmExtId,omitempty"`
	RegisteredDevice     NullableAssetDeviceRegistrationRelationship `json:"RegisteredDevice,omitempty"`
	Vm                   NullableHciEsxiVmRelationship               `json:"Vm,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _HciEsxiVmNic HciEsxiVmNic

// NewHciEsxiVmNic instantiates a new HciEsxiVmNic object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHciEsxiVmNic(classId string, objectType string) *HciEsxiVmNic {
	this := HciEsxiVmNic{}
	this.ClassId = classId
	this.ObjectType = objectType
	return &this
}

// NewHciEsxiVmNicWithDefaults instantiates a new HciEsxiVmNic object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHciEsxiVmNicWithDefaults() *HciEsxiVmNic {
	this := HciEsxiVmNic{}
	var classId string = "hci.EsxiVmNic"
	this.ClassId = classId
	var objectType string = "hci.EsxiVmNic"
	this.ObjectType = objectType
	return &this
}

// GetClassId returns the ClassId field value
func (o *HciEsxiVmNic) GetClassId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ClassId
}

// GetClassIdOk returns a tuple with the ClassId field value
// and a boolean to check if the value has been set.
func (o *HciEsxiVmNic) GetClassIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ClassId, true
}

// SetClassId sets field value
func (o *HciEsxiVmNic) SetClassId(v string) {
	o.ClassId = v
}

// GetDefaultClassId returns the default value "hci.EsxiVmNic" of the ClassId field.
func (o *HciEsxiVmNic) GetDefaultClassId() interface{} {
	return "hci.EsxiVmNic"
}

// GetObjectType returns the ObjectType field value
func (o *HciEsxiVmNic) GetObjectType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ObjectType
}

// GetObjectTypeOk returns a tuple with the ObjectType field value
// and a boolean to check if the value has been set.
func (o *HciEsxiVmNic) GetObjectTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ObjectType, true
}

// SetObjectType sets field value
func (o *HciEsxiVmNic) SetObjectType(v string) {
	o.ObjectType = v
}

// GetDefaultObjectType returns the default value "hci.EsxiVmNic" of the ObjectType field.
func (o *HciEsxiVmNic) GetDefaultObjectType() interface{} {
	return "hci.EsxiVmNic"
}

// GetAdapterType returns the AdapterType field value if set, zero value otherwise.
func (o *HciEsxiVmNic) GetAdapterType() string {
	if o == nil || IsNil(o.AdapterType) {
		var ret string
		return ret
	}
	return *o.AdapterType
}

// GetAdapterTypeOk returns a tuple with the AdapterType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HciEsxiVmNic) GetAdapterTypeOk() (*string, bool) {
	if o == nil || IsNil(o.AdapterType) {
		return nil, false
	}
	return o.AdapterType, true
}

// HasAdapterType returns a boolean if a field has been set.
func (o *HciEsxiVmNic) HasAdapterType() bool {
	if o != nil && !IsNil(o.AdapterType) {
		return true
	}

	return false
}

// SetAdapterType gets a reference to the given string and assigns it to the AdapterType field.
func (o *HciEsxiVmNic) SetAdapterType(v string) {
	o.AdapterType = &v
}

// GetIpAddresses returns the IpAddresses field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HciEsxiVmNic) GetIpAddresses() []HciIpAddress {
	if o == nil {
		var ret []HciIpAddress
		return ret
	}
	return o.IpAddresses
}

// GetIpAddressesOk returns a tuple with the IpAddresses field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HciEsxiVmNic) GetIpAddressesOk() ([]HciIpAddress, bool) {
	if o == nil || IsNil(o.IpAddresses) {
		return nil, false
	}
	return o.IpAddresses, true
}

// HasIpAddresses returns a boolean if a field has been set.
func (o *HciEsxiVmNic) HasIpAddresses() bool {
	if o != nil && !IsNil(o.IpAddresses) {
		return true
	}

	return false
}

// SetIpAddresses gets a reference to the given []HciIpAddress and assigns it to the IpAddresses field.
func (o *HciEsxiVmNic) SetIpAddresses(v []HciIpAddress) {
	o.IpAddresses = v
}

// GetIsConnected returns the IsConnected field value if set, zero value otherwise.
func (o *HciEsxiVmNic) GetIsConnected() bool {
	if o == nil || IsNil(o.IsConnected) {
		var ret bool
		return ret
	}
	return *o.IsConnected
}

// GetIsConnectedOk returns a tuple with the IsConnected field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HciEsxiVmNic) GetIsConnectedOk() (*bool, bool) {
	if o == nil || IsNil(o.IsConnected) {
		return nil, false
	}
	return o.IsConnected, true
}

// HasIsConnected returns a boolean if a field has been set.
func (o *HciEsxiVmNic) HasIsConnected() bool {
	if o != nil && !IsNil(o.IsConnected) {
		return true
	}

	return false
}

// SetIsConnected gets a reference to the given bool and assigns it to the IsConnected field.
func (o *HciEsxiVmNic) SetIsConnected(v bool) {
	o.IsConnected = &v
}

// GetMacAddress returns the MacAddress field value if set, zero value otherwise.
func (o *HciEsxiVmNic) GetMacAddress() string {
	if o == nil || IsNil(o.MacAddress) {
		var ret string
		return ret
	}
	return *o.MacAddress
}

// GetMacAddressOk returns a tuple with the MacAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HciEsxiVmNic) GetMacAddressOk() (*string, bool) {
	if o == nil || IsNil(o.MacAddress) {
		return nil, false
	}
	return o.MacAddress, true
}

// HasMacAddress returns a boolean if a field has been set.
func (o *HciEsxiVmNic) HasMacAddress() bool {
	if o != nil && !IsNil(o.MacAddress) {
		return true
	}

	return false
}

// SetMacAddress gets a reference to the given string and assigns it to the MacAddress field.
func (o *HciEsxiVmNic) SetMacAddress(v string) {
	o.MacAddress = &v
}

// GetNicExtId returns the NicExtId field value if set, zero value otherwise.
func (o *HciEsxiVmNic) GetNicExtId() string {
	if o == nil || IsNil(o.NicExtId) {
		var ret string
		return ret
	}
	return *o.NicExtId
}

// GetNicExtIdOk returns a tuple with the NicExtId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HciEsxiVmNic) GetNicExtIdOk() (*string, bool) {
	if o == nil || IsNil(o.NicExtId) {
		return nil, false
	}
	return o.NicExtId, true
}

// HasNicExtId returns a boolean if a field has been set.
func (o *HciEsxiVmNic) HasNicExtId() bool {
	if o != nil && !IsNil(o.NicExtId) {
		return true
	}

	return false
}

// SetNicExtId gets a reference to the given string and assigns it to the NicExtId field.
func (o *HciEsxiVmNic) SetNicExtId(v string) {
	o.NicExtId = &v
}

// GetPortgroupName returns the PortgroupName field value if set, zero value otherwise.
func (o *HciEsxiVmNic) GetPortgroupName() string {
	if o == nil || IsNil(o.PortgroupName) {
		var ret string
		return ret
	}
	return *o.PortgroupName
}

// GetPortgroupNameOk returns a tuple with the PortgroupName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HciEsxiVmNic) GetPortgroupNameOk() (*string, bool) {
	if o == nil || IsNil(o.PortgroupName) {
		return nil, false
	}
	return o.PortgroupName, true
}

// HasPortgroupName returns a boolean if a field has been set.
func (o *HciEsxiVmNic) HasPortgroupName() bool {
	if o != nil && !IsNil(o.PortgroupName) {
		return true
	}

	return false
}

// SetPortgroupName gets a reference to the given string and assigns it to the PortgroupName field.
func (o *HciEsxiVmNic) SetPortgroupName(v string) {
	o.PortgroupName = &v
}

// GetVmExtId returns the VmExtId field value if set, zero value otherwise.
func (o *HciEsxiVmNic) GetVmExtId() string {
	if o == nil || IsNil(o.VmExtId) {
		var ret string
		return ret
	}
	return *o.VmExtId
}

// GetVmExtIdOk returns a tuple with the VmExtId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HciEsxiVmNic) GetVmExtIdOk() (*string, bool) {
	if o == nil || IsNil(o.VmExtId) {
		return nil, false
	}
	return o.VmExtId, true
}

// HasVmExtId returns a boolean if a field has been set.
func (o *HciEsxiVmNic) HasVmExtId() bool {
	if o != nil && !IsNil(o.VmExtId) {
		return true
	}

	return false
}

// SetVmExtId gets a reference to the given string and assigns it to the VmExtId field.
func (o *HciEsxiVmNic) SetVmExtId(v string) {
	o.VmExtId = &v
}

// GetRegisteredDevice returns the RegisteredDevice field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HciEsxiVmNic) GetRegisteredDevice() AssetDeviceRegistrationRelationship {
	if o == nil || IsNil(o.RegisteredDevice.Get()) {
		var ret AssetDeviceRegistrationRelationship
		return ret
	}
	return *o.RegisteredDevice.Get()
}

// GetRegisteredDeviceOk returns a tuple with the RegisteredDevice field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HciEsxiVmNic) GetRegisteredDeviceOk() (*AssetDeviceRegistrationRelationship, bool) {
	if o == nil {
		return nil, false
	}
	return o.RegisteredDevice.Get(), o.RegisteredDevice.IsSet()
}

// HasRegisteredDevice returns a boolean if a field has been set.
func (o *HciEsxiVmNic) HasRegisteredDevice() bool {
	if o != nil && o.RegisteredDevice.IsSet() {
		return true
	}

	return false
}

// SetRegisteredDevice gets a reference to the given NullableAssetDeviceRegistrationRelationship and assigns it to the RegisteredDevice field.
func (o *HciEsxiVmNic) SetRegisteredDevice(v AssetDeviceRegistrationRelationship) {
	o.RegisteredDevice.Set(&v)
}

// SetRegisteredDeviceNil sets the value for RegisteredDevice to be an explicit nil
func (o *HciEsxiVmNic) SetRegisteredDeviceNil() {
	o.RegisteredDevice.Set(nil)
}

// UnsetRegisteredDevice ensures that no value is present for RegisteredDevice, not even an explicit nil
func (o *HciEsxiVmNic) UnsetRegisteredDevice() {
	o.RegisteredDevice.Unset()
}

// GetVm returns the Vm field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HciEsxiVmNic) GetVm() HciEsxiVmRelationship {
	if o == nil || IsNil(o.Vm.Get()) {
		var ret HciEsxiVmRelationship
		return ret
	}
	return *o.Vm.Get()
}

// GetVmOk returns a tuple with the Vm field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HciEsxiVmNic) GetVmOk() (*HciEsxiVmRelationship, bool) {
	if o == nil {
		return nil, false
	}
	return o.Vm.Get(), o.Vm.IsSet()
}

// HasVm returns a boolean if a field has been set.
func (o *HciEsxiVmNic) HasVm() bool {
	if o != nil && o.Vm.IsSet() {
		return true
	}

	return false
}

// SetVm gets a reference to the given NullableHciEsxiVmRelationship and assigns it to the Vm field.
func (o *HciEsxiVmNic) SetVm(v HciEsxiVmRelationship) {
	o.Vm.Set(&v)
}

// SetVmNil sets the value for Vm to be an explicit nil
func (o *HciEsxiVmNic) SetVmNil() {
	o.Vm.Set(nil)
}

// UnsetVm ensures that no value is present for Vm, not even an explicit nil
func (o *HciEsxiVmNic) UnsetVm() {
	o.Vm.Unset()
}

func (o HciEsxiVmNic) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o HciEsxiVmNic) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	serializedMoBaseMo, errMoBaseMo := json.Marshal(o.MoBaseMo)
	if errMoBaseMo != nil {
		return map[string]interface{}{}, errMoBaseMo
	}
	errMoBaseMo = json.Unmarshal([]byte(serializedMoBaseMo), &toSerialize)
	if errMoBaseMo != nil {
		return map[string]interface{}{}, errMoBaseMo
	}
	if _, exists := toSerialize["ClassId"]; !exists {
		toSerialize["ClassId"] = o.GetDefaultClassId()
	}
	toSerialize["ClassId"] = o.ClassId
	if _, exists := toSerialize["ObjectType"]; !exists {
		toSerialize["ObjectType"] = o.GetDefaultObjectType()
	}
	toSerialize["ObjectType"] = o.ObjectType
	if !IsNil(o.AdapterType) {
		toSerialize["AdapterType"] = o.AdapterType
	}
	if o.IpAddresses != nil {
		toSerialize["IpAddresses"] = o.IpAddresses
	}
	if !IsNil(o.IsConnected) {
		toSerialize["IsConnected"] = o.IsConnected
	}
	if !IsNil(o.MacAddress) {
		toSerialize["MacAddress"] = o.MacAddress
	}
	if !IsNil(o.NicExtId) {
		toSerialize["NicExtId"] = o.NicExtId
	}
	if !IsNil(o.PortgroupName) {
		toSerialize["PortgroupName"] = o.PortgroupName
	}
	if !IsNil(o.VmExtId) {
		toSerialize["VmExtId"] = o.VmExtId
	}
	if o.RegisteredDevice.IsSet() {
		toSerialize["RegisteredDevice"] = o.RegisteredDevice.Get()
	}
	if o.Vm.IsSet() {
		toSerialize["Vm"] = o.Vm.Get()
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *HciEsxiVmNic) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"ClassId",
		"ObjectType",
	}

	// defaultValueFuncMap captures the default values for required properties.
	// These values are used when required properties are missing from the payload.
	defaultValueFuncMap := map[string]func() interface{}{
		"ClassId":    o.GetDefaultClassId,
		"ObjectType": o.GetDefaultObjectType,
	}
	var defaultValueApplied bool
	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			if _, ok := defaultValueFuncMap[requiredProperty]; ok {
				allProperties[requiredProperty] = defaultValueFuncMap[requiredProperty]()
				defaultValueApplied = true
			}
		}
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	if defaultValueApplied {
		data, err = json.Marshal(allProperties)
		if err != nil {
			return err
		}
	}
	type HciEsxiVmNicWithoutEmbeddedStruct struct {
		// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.
		ClassId string `json:"ClassId"`
		// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
		ObjectType string `json:"ObjectType"`
		// The adapter type of the NIC. Possible values are 'E1000', 'E1000E', 'VMXNET', 'VMXNET2', 'VMXNET3', 'PCNET32', 'SRIOV'.
		AdapterType *string        `json:"AdapterType,omitempty"`
		IpAddresses []HciIpAddress `json:"IpAddresses,omitempty"`
		// Indicates if the NIC is connected.
		IsConnected *bool `json:"IsConnected,omitempty"`
		// The MAC address of the NIC.
		MacAddress *string `json:"MacAddress,omitempty"`
		// The unique identifier of the NIC.
		NicExtId *string `json:"NicExtId,omitempty"`
		// The name of the port group.
		PortgroupName *string `json:"PortgroupName,omitempty"`
		// The unique identifier of the VM.
		VmExtId          *string                                     `json:"VmExtId,omitempty"`
		RegisteredDevice NullableAssetDeviceRegistrationRelationship `json:"RegisteredDevice,omitempty"`
		Vm               NullableHciEsxiVmRelationship               `json:"Vm,omitempty"`
	}

	varHciEsxiVmNicWithoutEmbeddedStruct := HciEsxiVmNicWithoutEmbeddedStruct{}

	err = json.Unmarshal(data, &varHciEsxiVmNicWithoutEmbeddedStruct)
	if err == nil {
		varHciEsxiVmNic := _HciEsxiVmNic{}
		varHciEsxiVmNic.ClassId = varHciEsxiVmNicWithoutEmbeddedStruct.ClassId
		varHciEsxiVmNic.ObjectType = varHciEsxiVmNicWithoutEmbeddedStruct.ObjectType
		varHciEsxiVmNic.AdapterType = varHciEsxiVmNicWithoutEmbeddedStruct.AdapterType
		varHciEsxiVmNic.IpAddresses = varHciEsxiVmNicWithoutEmbeddedStruct.IpAddresses
		varHciEsxiVmNic.IsConnected = varHciEsxiVmNicWithoutEmbeddedStruct.IsConnected
		varHciEsxiVmNic.MacAddress = varHciEsxiVmNicWithoutEmbeddedStruct.MacAddress
		varHciEsxiVmNic.NicExtId = varHciEsxiVmNicWithoutEmbeddedStruct.NicExtId
		varHciEsxiVmNic.PortgroupName = varHciEsxiVmNicWithoutEmbeddedStruct.PortgroupName
		varHciEsxiVmNic.VmExtId = varHciEsxiVmNicWithoutEmbeddedStruct.VmExtId
		varHciEsxiVmNic.RegisteredDevice = varHciEsxiVmNicWithoutEmbeddedStruct.RegisteredDevice
		varHciEsxiVmNic.Vm = varHciEsxiVmNicWithoutEmbeddedStruct.Vm
		*o = HciEsxiVmNic(varHciEsxiVmNic)
	} else {
		return err
	}

	varHciEsxiVmNic := _HciEsxiVmNic{}

	err = json.Unmarshal(data, &varHciEsxiVmNic)
	if err == nil {
		o.MoBaseMo = varHciEsxiVmNic.MoBaseMo
	} else {
		return err
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "ClassId")
		delete(additionalProperties, "ObjectType")
		delete(additionalProperties, "AdapterType")
		delete(additionalProperties, "IpAddresses")
		delete(additionalProperties, "IsConnected")
		delete(additionalProperties, "MacAddress")
		delete(additionalProperties, "NicExtId")
		delete(additionalProperties, "PortgroupName")
		delete(additionalProperties, "VmExtId")
		delete(additionalProperties, "RegisteredDevice")
		delete(additionalProperties, "Vm")

		// remove fields from embedded structs
		reflectMoBaseMo := reflect.ValueOf(o.MoBaseMo)
		for i := 0; i < reflectMoBaseMo.Type().NumField(); i++ {
			t := reflectMoBaseMo.Type().Field(i)

			if jsonTag := t.Tag.Get("json"); jsonTag != "" {
				fieldName := ""
				if commaIdx := strings.Index(jsonTag, ","); commaIdx > 0 {
					fieldName = jsonTag[:commaIdx]
				} else {
					fieldName = jsonTag
				}
				if fieldName != "AdditionalProperties" {
					delete(additionalProperties, fieldName)
				}
			}
		}

		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableHciEsxiVmNic struct {
	value *HciEsxiVmNic
	isSet bool
}

func (v NullableHciEsxiVmNic) Get() *HciEsxiVmNic {
	return v.value
}

func (v *NullableHciEsxiVmNic) Set(val *HciEsxiVmNic) {
	v.value = val
	v.isSet = true
}

func (v NullableHciEsxiVmNic) IsSet() bool {
	return v.isSet
}

func (v *NullableHciEsxiVmNic) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHciEsxiVmNic(val *HciEsxiVmNic) *NullableHciEsxiVmNic {
	return &NullableHciEsxiVmNic{value: val, isSet: true}
}

func (v NullableHciEsxiVmNic) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHciEsxiVmNic) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
