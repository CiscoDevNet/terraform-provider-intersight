/*
 * Cisco Intersight
 *
 * Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations. The Intersight OpenAPI document defines the complete set of properties that are returned in the HTTP response. From that perspective, a client can expect that no additional properties are returned, unless these properties are explicitly defined in the OpenAPI document. However, when a client uses an older version of the Intersight OpenAPI document, the server may send additional properties because the software is more recent than the client. In that case, the client may receive properties that it does not know about. Some generated SDKs perform a strict validation of the HTTP response body against the OpenAPI document. This document was created on 2021-07-21T16:37:30Z.
 *
 * API version: 1.0.9-4403
 * Contact: intersight@cisco.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package intersight

import (
	"encoding/json"
	"reflect"
	"strings"
)

// ComputePhysicalSummary Consolidated view of Blades and RackUnits.
type ComputePhysicalSummary struct {
	ViewsView
	// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.
	ClassId string `json:"ClassId"`
	// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
	ObjectType string `json:"ObjectType"`
	// The desired power state of the server.
	AdminPowerState *string                     `json:"AdminPowerState,omitempty"`
	AlarmSummary    NullableComputeAlarmSummary `json:"AlarmSummary,omitempty"`
	// The user defined asset tag assigned to the server.
	AssetTag *string `json:"AssetTag,omitempty"`
	// The amount of memory available on the server.
	AvailableMemory *int64 `json:"AvailableMemory,omitempty"`
	// The BIOS POST completion status of the server.
	BiosPostComplete *bool `json:"BiosPostComplete,omitempty"`
	// The id of the chassis that the blade is located in.
	ChassisId *string `json:"ChassisId,omitempty"`
	// Connectivity Status of RackUnit to Switch - A or B or AB.
	ConnectionStatus *string `json:"ConnectionStatus,omitempty"`
	// CPU Capacity = Number of CPU Sockets x Enabled Cores x Speed (GHz).
	CpuCapacity *float32 `json:"CpuCapacity,omitempty"`
	// The database identifier of the registered device of an object.
	DeviceMoId *string `json:"DeviceMoId,omitempty"`
	// The Distinguished Name unambiguously identifies an object in the system.
	Dn *string `json:"Dn,omitempty"`
	// The fault summary for the server.
	FaultSummary *int64 `json:"FaultSummary,omitempty"`
	// The firmware version of the Cisco Integrated Management Controller (CIMC) for this server.
	Firmware *string `json:"Firmware,omitempty"`
	// The IPv4 address configured on the management interface of the Integrated Management Controller.
	Ipv4Address    *string            `json:"Ipv4Address,omitempty"`
	KvmIpAddresses []ComputeIpAddress `json:"KvmIpAddresses,omitempty"`
	// The management mode of the server. * `IntersightStandalone` - Intersight Standalone mode of operation. * `UCSM` - Unified Computing System Manager mode of operation. * `Intersight` - Intersight managed mode of operation.
	ManagementMode *string `json:"ManagementMode,omitempty"`
	// The maximum memory speed in MHz available on the server.
	MemorySpeed *string `json:"MemorySpeed,omitempty"`
	// Management address of the server.
	MgmtIpAddress *string `json:"MgmtIpAddress,omitempty"`
	// This field identifies the model of the given component.
	Model *string `json:"Model,omitempty"`
	// The name of the UCS Fabric Interconnect cluster or Cisco Integrated Management Controller (CIMC). When this server is attached to a UCS Fabric Interconnect, the value of this property is the name of the UCS Fabric Interconnect. When this server configured in standalone mode, the value of this property is the name of the Cisco Integrated Management Controller.
	Name *string `json:"Name,omitempty"`
	// The total number of network adapters present on the server.
	NumAdaptors *int64 `json:"NumAdaptors,omitempty"`
	// The total number of CPU cores present on the server.
	NumCpuCores *int64 `json:"NumCpuCores,omitempty"`
	// The total number of CPU cores enabled on the server.
	NumCpuCoresEnabled *int64 `json:"NumCpuCoresEnabled,omitempty"`
	// The total number of CPUs present on the server.
	NumCpus *int64 `json:"NumCpus,omitempty"`
	// The total number of vNICs which are visible to a host on the server.
	NumEthHostInterfaces *int64 `json:"NumEthHostInterfaces,omitempty"`
	// The total number of vHBAs which are visible to a host on the server.
	NumFcHostInterfaces *int64 `json:"NumFcHostInterfaces,omitempty"`
	// The total number of threads the server is capable of handling.
	NumThreads *int64 `json:"NumThreads,omitempty"`
	// The actual power state of the server.
	OperPowerState *string  `json:"OperPowerState,omitempty"`
	OperReason     []string `json:"OperReason,omitempty"`
	// The operational state of the server.
	OperState *string `json:"OperState,omitempty"`
	// The operability of the server.
	Operability *string `json:"Operability,omitempty"`
	// The platform type of the registered device - whether managed by UCSM or operating in standalone mode.
	PlatformType *string `json:"PlatformType,omitempty"`
	// This field identifies the presence (equipped) or absence of the given component.
	Presence *string `json:"Presence,omitempty"`
	// This field identifies the revision of the given component.
	Revision *string `json:"Revision,omitempty"`
	// The Relative Name uniquely identifies an object within a given context.
	Rn *string `json:"Rn,omitempty"`
	// The mode of the server that determines it is scaled.
	ScaledMode *string `json:"ScaledMode,omitempty"`
	// This field identifies the serial of the given component.
	Serial *string `json:"Serial,omitempty"`
	// RackUnit ID that uniquely identifies the server.
	ServerId *int64 `json:"ServerId,omitempty"`
	// The distinguished name of the service profile to which the server is associated to. It is applicable only for servers which are managed via UCSM.
	ServiceProfile *string `json:"ServiceProfile,omitempty"`
	// The slot number in the chassis that the blade is located in.
	SlotId *int64 `json:"SlotId,omitempty"`
	// The source object type of this view MO.
	SourceObjectType *string `json:"SourceObjectType,omitempty"`
	// To maintain the Topology workflow run status.
	TopologyScanStatus *string `json:"TopologyScanStatus,omitempty"`
	// The total memory available on the server.
	TotalMemory *int64 `json:"TotalMemory,omitempty"`
	// The user defined label assigned to the server.
	UserLabel *string `json:"UserLabel,omitempty"`
	// The universally unique identity of the server.
	Uuid *string `json:"Uuid,omitempty"`
	// This field identifies the vendor of the given component.
	Vendor               *string                              `json:"Vendor,omitempty"`
	InventoryDeviceInfo  *InventoryDeviceInfoRelationship     `json:"InventoryDeviceInfo,omitempty"`
	RegisteredDevice     *AssetDeviceRegistrationRelationship `json:"RegisteredDevice,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ComputePhysicalSummary ComputePhysicalSummary

// NewComputePhysicalSummary instantiates a new ComputePhysicalSummary object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewComputePhysicalSummary(classId string, objectType string) *ComputePhysicalSummary {
	this := ComputePhysicalSummary{}
	this.ClassId = classId
	this.ObjectType = objectType
	var managementMode string = "IntersightStandalone"
	this.ManagementMode = &managementMode
	return &this
}

// NewComputePhysicalSummaryWithDefaults instantiates a new ComputePhysicalSummary object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewComputePhysicalSummaryWithDefaults() *ComputePhysicalSummary {
	this := ComputePhysicalSummary{}
	var classId string = "compute.PhysicalSummary"
	this.ClassId = classId
	var objectType string = "compute.PhysicalSummary"
	this.ObjectType = objectType
	var managementMode string = "IntersightStandalone"
	this.ManagementMode = &managementMode
	return &this
}

// GetClassId returns the ClassId field value
func (o *ComputePhysicalSummary) GetClassId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ClassId
}

// GetClassIdOk returns a tuple with the ClassId field value
// and a boolean to check if the value has been set.
func (o *ComputePhysicalSummary) GetClassIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ClassId, true
}

// SetClassId sets field value
func (o *ComputePhysicalSummary) SetClassId(v string) {
	o.ClassId = v
}

// GetObjectType returns the ObjectType field value
func (o *ComputePhysicalSummary) GetObjectType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ObjectType
}

// GetObjectTypeOk returns a tuple with the ObjectType field value
// and a boolean to check if the value has been set.
func (o *ComputePhysicalSummary) GetObjectTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ObjectType, true
}

// SetObjectType sets field value
func (o *ComputePhysicalSummary) SetObjectType(v string) {
	o.ObjectType = v
}

// GetAdminPowerState returns the AdminPowerState field value if set, zero value otherwise.
func (o *ComputePhysicalSummary) GetAdminPowerState() string {
	if o == nil || o.AdminPowerState == nil {
		var ret string
		return ret
	}
	return *o.AdminPowerState
}

// GetAdminPowerStateOk returns a tuple with the AdminPowerState field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComputePhysicalSummary) GetAdminPowerStateOk() (*string, bool) {
	if o == nil || o.AdminPowerState == nil {
		return nil, false
	}
	return o.AdminPowerState, true
}

// HasAdminPowerState returns a boolean if a field has been set.
func (o *ComputePhysicalSummary) HasAdminPowerState() bool {
	if o != nil && o.AdminPowerState != nil {
		return true
	}

	return false
}

// SetAdminPowerState gets a reference to the given string and assigns it to the AdminPowerState field.
func (o *ComputePhysicalSummary) SetAdminPowerState(v string) {
	o.AdminPowerState = &v
}

// GetAlarmSummary returns the AlarmSummary field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ComputePhysicalSummary) GetAlarmSummary() ComputeAlarmSummary {
	if o == nil || o.AlarmSummary.Get() == nil {
		var ret ComputeAlarmSummary
		return ret
	}
	return *o.AlarmSummary.Get()
}

// GetAlarmSummaryOk returns a tuple with the AlarmSummary field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ComputePhysicalSummary) GetAlarmSummaryOk() (*ComputeAlarmSummary, bool) {
	if o == nil {
		return nil, false
	}
	return o.AlarmSummary.Get(), o.AlarmSummary.IsSet()
}

// HasAlarmSummary returns a boolean if a field has been set.
func (o *ComputePhysicalSummary) HasAlarmSummary() bool {
	if o != nil && o.AlarmSummary.IsSet() {
		return true
	}

	return false
}

// SetAlarmSummary gets a reference to the given NullableComputeAlarmSummary and assigns it to the AlarmSummary field.
func (o *ComputePhysicalSummary) SetAlarmSummary(v ComputeAlarmSummary) {
	o.AlarmSummary.Set(&v)
}

// SetAlarmSummaryNil sets the value for AlarmSummary to be an explicit nil
func (o *ComputePhysicalSummary) SetAlarmSummaryNil() {
	o.AlarmSummary.Set(nil)
}

// UnsetAlarmSummary ensures that no value is present for AlarmSummary, not even an explicit nil
func (o *ComputePhysicalSummary) UnsetAlarmSummary() {
	o.AlarmSummary.Unset()
}

// GetAssetTag returns the AssetTag field value if set, zero value otherwise.
func (o *ComputePhysicalSummary) GetAssetTag() string {
	if o == nil || o.AssetTag == nil {
		var ret string
		return ret
	}
	return *o.AssetTag
}

// GetAssetTagOk returns a tuple with the AssetTag field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComputePhysicalSummary) GetAssetTagOk() (*string, bool) {
	if o == nil || o.AssetTag == nil {
		return nil, false
	}
	return o.AssetTag, true
}

// HasAssetTag returns a boolean if a field has been set.
func (o *ComputePhysicalSummary) HasAssetTag() bool {
	if o != nil && o.AssetTag != nil {
		return true
	}

	return false
}

// SetAssetTag gets a reference to the given string and assigns it to the AssetTag field.
func (o *ComputePhysicalSummary) SetAssetTag(v string) {
	o.AssetTag = &v
}

// GetAvailableMemory returns the AvailableMemory field value if set, zero value otherwise.
func (o *ComputePhysicalSummary) GetAvailableMemory() int64 {
	if o == nil || o.AvailableMemory == nil {
		var ret int64
		return ret
	}
	return *o.AvailableMemory
}

// GetAvailableMemoryOk returns a tuple with the AvailableMemory field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComputePhysicalSummary) GetAvailableMemoryOk() (*int64, bool) {
	if o == nil || o.AvailableMemory == nil {
		return nil, false
	}
	return o.AvailableMemory, true
}

// HasAvailableMemory returns a boolean if a field has been set.
func (o *ComputePhysicalSummary) HasAvailableMemory() bool {
	if o != nil && o.AvailableMemory != nil {
		return true
	}

	return false
}

// SetAvailableMemory gets a reference to the given int64 and assigns it to the AvailableMemory field.
func (o *ComputePhysicalSummary) SetAvailableMemory(v int64) {
	o.AvailableMemory = &v
}

// GetBiosPostComplete returns the BiosPostComplete field value if set, zero value otherwise.
func (o *ComputePhysicalSummary) GetBiosPostComplete() bool {
	if o == nil || o.BiosPostComplete == nil {
		var ret bool
		return ret
	}
	return *o.BiosPostComplete
}

// GetBiosPostCompleteOk returns a tuple with the BiosPostComplete field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComputePhysicalSummary) GetBiosPostCompleteOk() (*bool, bool) {
	if o == nil || o.BiosPostComplete == nil {
		return nil, false
	}
	return o.BiosPostComplete, true
}

// HasBiosPostComplete returns a boolean if a field has been set.
func (o *ComputePhysicalSummary) HasBiosPostComplete() bool {
	if o != nil && o.BiosPostComplete != nil {
		return true
	}

	return false
}

// SetBiosPostComplete gets a reference to the given bool and assigns it to the BiosPostComplete field.
func (o *ComputePhysicalSummary) SetBiosPostComplete(v bool) {
	o.BiosPostComplete = &v
}

// GetChassisId returns the ChassisId field value if set, zero value otherwise.
func (o *ComputePhysicalSummary) GetChassisId() string {
	if o == nil || o.ChassisId == nil {
		var ret string
		return ret
	}
	return *o.ChassisId
}

// GetChassisIdOk returns a tuple with the ChassisId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComputePhysicalSummary) GetChassisIdOk() (*string, bool) {
	if o == nil || o.ChassisId == nil {
		return nil, false
	}
	return o.ChassisId, true
}

// HasChassisId returns a boolean if a field has been set.
func (o *ComputePhysicalSummary) HasChassisId() bool {
	if o != nil && o.ChassisId != nil {
		return true
	}

	return false
}

// SetChassisId gets a reference to the given string and assigns it to the ChassisId field.
func (o *ComputePhysicalSummary) SetChassisId(v string) {
	o.ChassisId = &v
}

// GetConnectionStatus returns the ConnectionStatus field value if set, zero value otherwise.
func (o *ComputePhysicalSummary) GetConnectionStatus() string {
	if o == nil || o.ConnectionStatus == nil {
		var ret string
		return ret
	}
	return *o.ConnectionStatus
}

// GetConnectionStatusOk returns a tuple with the ConnectionStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComputePhysicalSummary) GetConnectionStatusOk() (*string, bool) {
	if o == nil || o.ConnectionStatus == nil {
		return nil, false
	}
	return o.ConnectionStatus, true
}

// HasConnectionStatus returns a boolean if a field has been set.
func (o *ComputePhysicalSummary) HasConnectionStatus() bool {
	if o != nil && o.ConnectionStatus != nil {
		return true
	}

	return false
}

// SetConnectionStatus gets a reference to the given string and assigns it to the ConnectionStatus field.
func (o *ComputePhysicalSummary) SetConnectionStatus(v string) {
	o.ConnectionStatus = &v
}

// GetCpuCapacity returns the CpuCapacity field value if set, zero value otherwise.
func (o *ComputePhysicalSummary) GetCpuCapacity() float32 {
	if o == nil || o.CpuCapacity == nil {
		var ret float32
		return ret
	}
	return *o.CpuCapacity
}

// GetCpuCapacityOk returns a tuple with the CpuCapacity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComputePhysicalSummary) GetCpuCapacityOk() (*float32, bool) {
	if o == nil || o.CpuCapacity == nil {
		return nil, false
	}
	return o.CpuCapacity, true
}

// HasCpuCapacity returns a boolean if a field has been set.
func (o *ComputePhysicalSummary) HasCpuCapacity() bool {
	if o != nil && o.CpuCapacity != nil {
		return true
	}

	return false
}

// SetCpuCapacity gets a reference to the given float32 and assigns it to the CpuCapacity field.
func (o *ComputePhysicalSummary) SetCpuCapacity(v float32) {
	o.CpuCapacity = &v
}

// GetDeviceMoId returns the DeviceMoId field value if set, zero value otherwise.
func (o *ComputePhysicalSummary) GetDeviceMoId() string {
	if o == nil || o.DeviceMoId == nil {
		var ret string
		return ret
	}
	return *o.DeviceMoId
}

// GetDeviceMoIdOk returns a tuple with the DeviceMoId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComputePhysicalSummary) GetDeviceMoIdOk() (*string, bool) {
	if o == nil || o.DeviceMoId == nil {
		return nil, false
	}
	return o.DeviceMoId, true
}

// HasDeviceMoId returns a boolean if a field has been set.
func (o *ComputePhysicalSummary) HasDeviceMoId() bool {
	if o != nil && o.DeviceMoId != nil {
		return true
	}

	return false
}

// SetDeviceMoId gets a reference to the given string and assigns it to the DeviceMoId field.
func (o *ComputePhysicalSummary) SetDeviceMoId(v string) {
	o.DeviceMoId = &v
}

// GetDn returns the Dn field value if set, zero value otherwise.
func (o *ComputePhysicalSummary) GetDn() string {
	if o == nil || o.Dn == nil {
		var ret string
		return ret
	}
	return *o.Dn
}

// GetDnOk returns a tuple with the Dn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComputePhysicalSummary) GetDnOk() (*string, bool) {
	if o == nil || o.Dn == nil {
		return nil, false
	}
	return o.Dn, true
}

// HasDn returns a boolean if a field has been set.
func (o *ComputePhysicalSummary) HasDn() bool {
	if o != nil && o.Dn != nil {
		return true
	}

	return false
}

// SetDn gets a reference to the given string and assigns it to the Dn field.
func (o *ComputePhysicalSummary) SetDn(v string) {
	o.Dn = &v
}

// GetFaultSummary returns the FaultSummary field value if set, zero value otherwise.
func (o *ComputePhysicalSummary) GetFaultSummary() int64 {
	if o == nil || o.FaultSummary == nil {
		var ret int64
		return ret
	}
	return *o.FaultSummary
}

// GetFaultSummaryOk returns a tuple with the FaultSummary field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComputePhysicalSummary) GetFaultSummaryOk() (*int64, bool) {
	if o == nil || o.FaultSummary == nil {
		return nil, false
	}
	return o.FaultSummary, true
}

// HasFaultSummary returns a boolean if a field has been set.
func (o *ComputePhysicalSummary) HasFaultSummary() bool {
	if o != nil && o.FaultSummary != nil {
		return true
	}

	return false
}

// SetFaultSummary gets a reference to the given int64 and assigns it to the FaultSummary field.
func (o *ComputePhysicalSummary) SetFaultSummary(v int64) {
	o.FaultSummary = &v
}

// GetFirmware returns the Firmware field value if set, zero value otherwise.
func (o *ComputePhysicalSummary) GetFirmware() string {
	if o == nil || o.Firmware == nil {
		var ret string
		return ret
	}
	return *o.Firmware
}

// GetFirmwareOk returns a tuple with the Firmware field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComputePhysicalSummary) GetFirmwareOk() (*string, bool) {
	if o == nil || o.Firmware == nil {
		return nil, false
	}
	return o.Firmware, true
}

// HasFirmware returns a boolean if a field has been set.
func (o *ComputePhysicalSummary) HasFirmware() bool {
	if o != nil && o.Firmware != nil {
		return true
	}

	return false
}

// SetFirmware gets a reference to the given string and assigns it to the Firmware field.
func (o *ComputePhysicalSummary) SetFirmware(v string) {
	o.Firmware = &v
}

// GetIpv4Address returns the Ipv4Address field value if set, zero value otherwise.
func (o *ComputePhysicalSummary) GetIpv4Address() string {
	if o == nil || o.Ipv4Address == nil {
		var ret string
		return ret
	}
	return *o.Ipv4Address
}

// GetIpv4AddressOk returns a tuple with the Ipv4Address field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComputePhysicalSummary) GetIpv4AddressOk() (*string, bool) {
	if o == nil || o.Ipv4Address == nil {
		return nil, false
	}
	return o.Ipv4Address, true
}

// HasIpv4Address returns a boolean if a field has been set.
func (o *ComputePhysicalSummary) HasIpv4Address() bool {
	if o != nil && o.Ipv4Address != nil {
		return true
	}

	return false
}

// SetIpv4Address gets a reference to the given string and assigns it to the Ipv4Address field.
func (o *ComputePhysicalSummary) SetIpv4Address(v string) {
	o.Ipv4Address = &v
}

// GetKvmIpAddresses returns the KvmIpAddresses field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ComputePhysicalSummary) GetKvmIpAddresses() []ComputeIpAddress {
	if o == nil {
		var ret []ComputeIpAddress
		return ret
	}
	return o.KvmIpAddresses
}

// GetKvmIpAddressesOk returns a tuple with the KvmIpAddresses field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ComputePhysicalSummary) GetKvmIpAddressesOk() (*[]ComputeIpAddress, bool) {
	if o == nil || o.KvmIpAddresses == nil {
		return nil, false
	}
	return &o.KvmIpAddresses, true
}

// HasKvmIpAddresses returns a boolean if a field has been set.
func (o *ComputePhysicalSummary) HasKvmIpAddresses() bool {
	if o != nil && o.KvmIpAddresses != nil {
		return true
	}

	return false
}

// SetKvmIpAddresses gets a reference to the given []ComputeIpAddress and assigns it to the KvmIpAddresses field.
func (o *ComputePhysicalSummary) SetKvmIpAddresses(v []ComputeIpAddress) {
	o.KvmIpAddresses = v
}

// GetManagementMode returns the ManagementMode field value if set, zero value otherwise.
func (o *ComputePhysicalSummary) GetManagementMode() string {
	if o == nil || o.ManagementMode == nil {
		var ret string
		return ret
	}
	return *o.ManagementMode
}

// GetManagementModeOk returns a tuple with the ManagementMode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComputePhysicalSummary) GetManagementModeOk() (*string, bool) {
	if o == nil || o.ManagementMode == nil {
		return nil, false
	}
	return o.ManagementMode, true
}

// HasManagementMode returns a boolean if a field has been set.
func (o *ComputePhysicalSummary) HasManagementMode() bool {
	if o != nil && o.ManagementMode != nil {
		return true
	}

	return false
}

// SetManagementMode gets a reference to the given string and assigns it to the ManagementMode field.
func (o *ComputePhysicalSummary) SetManagementMode(v string) {
	o.ManagementMode = &v
}

// GetMemorySpeed returns the MemorySpeed field value if set, zero value otherwise.
func (o *ComputePhysicalSummary) GetMemorySpeed() string {
	if o == nil || o.MemorySpeed == nil {
		var ret string
		return ret
	}
	return *o.MemorySpeed
}

// GetMemorySpeedOk returns a tuple with the MemorySpeed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComputePhysicalSummary) GetMemorySpeedOk() (*string, bool) {
	if o == nil || o.MemorySpeed == nil {
		return nil, false
	}
	return o.MemorySpeed, true
}

// HasMemorySpeed returns a boolean if a field has been set.
func (o *ComputePhysicalSummary) HasMemorySpeed() bool {
	if o != nil && o.MemorySpeed != nil {
		return true
	}

	return false
}

// SetMemorySpeed gets a reference to the given string and assigns it to the MemorySpeed field.
func (o *ComputePhysicalSummary) SetMemorySpeed(v string) {
	o.MemorySpeed = &v
}

// GetMgmtIpAddress returns the MgmtIpAddress field value if set, zero value otherwise.
func (o *ComputePhysicalSummary) GetMgmtIpAddress() string {
	if o == nil || o.MgmtIpAddress == nil {
		var ret string
		return ret
	}
	return *o.MgmtIpAddress
}

// GetMgmtIpAddressOk returns a tuple with the MgmtIpAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComputePhysicalSummary) GetMgmtIpAddressOk() (*string, bool) {
	if o == nil || o.MgmtIpAddress == nil {
		return nil, false
	}
	return o.MgmtIpAddress, true
}

// HasMgmtIpAddress returns a boolean if a field has been set.
func (o *ComputePhysicalSummary) HasMgmtIpAddress() bool {
	if o != nil && o.MgmtIpAddress != nil {
		return true
	}

	return false
}

// SetMgmtIpAddress gets a reference to the given string and assigns it to the MgmtIpAddress field.
func (o *ComputePhysicalSummary) SetMgmtIpAddress(v string) {
	o.MgmtIpAddress = &v
}

// GetModel returns the Model field value if set, zero value otherwise.
func (o *ComputePhysicalSummary) GetModel() string {
	if o == nil || o.Model == nil {
		var ret string
		return ret
	}
	return *o.Model
}

// GetModelOk returns a tuple with the Model field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComputePhysicalSummary) GetModelOk() (*string, bool) {
	if o == nil || o.Model == nil {
		return nil, false
	}
	return o.Model, true
}

// HasModel returns a boolean if a field has been set.
func (o *ComputePhysicalSummary) HasModel() bool {
	if o != nil && o.Model != nil {
		return true
	}

	return false
}

// SetModel gets a reference to the given string and assigns it to the Model field.
func (o *ComputePhysicalSummary) SetModel(v string) {
	o.Model = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ComputePhysicalSummary) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComputePhysicalSummary) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ComputePhysicalSummary) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *ComputePhysicalSummary) SetName(v string) {
	o.Name = &v
}

// GetNumAdaptors returns the NumAdaptors field value if set, zero value otherwise.
func (o *ComputePhysicalSummary) GetNumAdaptors() int64 {
	if o == nil || o.NumAdaptors == nil {
		var ret int64
		return ret
	}
	return *o.NumAdaptors
}

// GetNumAdaptorsOk returns a tuple with the NumAdaptors field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComputePhysicalSummary) GetNumAdaptorsOk() (*int64, bool) {
	if o == nil || o.NumAdaptors == nil {
		return nil, false
	}
	return o.NumAdaptors, true
}

// HasNumAdaptors returns a boolean if a field has been set.
func (o *ComputePhysicalSummary) HasNumAdaptors() bool {
	if o != nil && o.NumAdaptors != nil {
		return true
	}

	return false
}

// SetNumAdaptors gets a reference to the given int64 and assigns it to the NumAdaptors field.
func (o *ComputePhysicalSummary) SetNumAdaptors(v int64) {
	o.NumAdaptors = &v
}

// GetNumCpuCores returns the NumCpuCores field value if set, zero value otherwise.
func (o *ComputePhysicalSummary) GetNumCpuCores() int64 {
	if o == nil || o.NumCpuCores == nil {
		var ret int64
		return ret
	}
	return *o.NumCpuCores
}

// GetNumCpuCoresOk returns a tuple with the NumCpuCores field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComputePhysicalSummary) GetNumCpuCoresOk() (*int64, bool) {
	if o == nil || o.NumCpuCores == nil {
		return nil, false
	}
	return o.NumCpuCores, true
}

// HasNumCpuCores returns a boolean if a field has been set.
func (o *ComputePhysicalSummary) HasNumCpuCores() bool {
	if o != nil && o.NumCpuCores != nil {
		return true
	}

	return false
}

// SetNumCpuCores gets a reference to the given int64 and assigns it to the NumCpuCores field.
func (o *ComputePhysicalSummary) SetNumCpuCores(v int64) {
	o.NumCpuCores = &v
}

// GetNumCpuCoresEnabled returns the NumCpuCoresEnabled field value if set, zero value otherwise.
func (o *ComputePhysicalSummary) GetNumCpuCoresEnabled() int64 {
	if o == nil || o.NumCpuCoresEnabled == nil {
		var ret int64
		return ret
	}
	return *o.NumCpuCoresEnabled
}

// GetNumCpuCoresEnabledOk returns a tuple with the NumCpuCoresEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComputePhysicalSummary) GetNumCpuCoresEnabledOk() (*int64, bool) {
	if o == nil || o.NumCpuCoresEnabled == nil {
		return nil, false
	}
	return o.NumCpuCoresEnabled, true
}

// HasNumCpuCoresEnabled returns a boolean if a field has been set.
func (o *ComputePhysicalSummary) HasNumCpuCoresEnabled() bool {
	if o != nil && o.NumCpuCoresEnabled != nil {
		return true
	}

	return false
}

// SetNumCpuCoresEnabled gets a reference to the given int64 and assigns it to the NumCpuCoresEnabled field.
func (o *ComputePhysicalSummary) SetNumCpuCoresEnabled(v int64) {
	o.NumCpuCoresEnabled = &v
}

// GetNumCpus returns the NumCpus field value if set, zero value otherwise.
func (o *ComputePhysicalSummary) GetNumCpus() int64 {
	if o == nil || o.NumCpus == nil {
		var ret int64
		return ret
	}
	return *o.NumCpus
}

// GetNumCpusOk returns a tuple with the NumCpus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComputePhysicalSummary) GetNumCpusOk() (*int64, bool) {
	if o == nil || o.NumCpus == nil {
		return nil, false
	}
	return o.NumCpus, true
}

// HasNumCpus returns a boolean if a field has been set.
func (o *ComputePhysicalSummary) HasNumCpus() bool {
	if o != nil && o.NumCpus != nil {
		return true
	}

	return false
}

// SetNumCpus gets a reference to the given int64 and assigns it to the NumCpus field.
func (o *ComputePhysicalSummary) SetNumCpus(v int64) {
	o.NumCpus = &v
}

// GetNumEthHostInterfaces returns the NumEthHostInterfaces field value if set, zero value otherwise.
func (o *ComputePhysicalSummary) GetNumEthHostInterfaces() int64 {
	if o == nil || o.NumEthHostInterfaces == nil {
		var ret int64
		return ret
	}
	return *o.NumEthHostInterfaces
}

// GetNumEthHostInterfacesOk returns a tuple with the NumEthHostInterfaces field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComputePhysicalSummary) GetNumEthHostInterfacesOk() (*int64, bool) {
	if o == nil || o.NumEthHostInterfaces == nil {
		return nil, false
	}
	return o.NumEthHostInterfaces, true
}

// HasNumEthHostInterfaces returns a boolean if a field has been set.
func (o *ComputePhysicalSummary) HasNumEthHostInterfaces() bool {
	if o != nil && o.NumEthHostInterfaces != nil {
		return true
	}

	return false
}

// SetNumEthHostInterfaces gets a reference to the given int64 and assigns it to the NumEthHostInterfaces field.
func (o *ComputePhysicalSummary) SetNumEthHostInterfaces(v int64) {
	o.NumEthHostInterfaces = &v
}

// GetNumFcHostInterfaces returns the NumFcHostInterfaces field value if set, zero value otherwise.
func (o *ComputePhysicalSummary) GetNumFcHostInterfaces() int64 {
	if o == nil || o.NumFcHostInterfaces == nil {
		var ret int64
		return ret
	}
	return *o.NumFcHostInterfaces
}

// GetNumFcHostInterfacesOk returns a tuple with the NumFcHostInterfaces field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComputePhysicalSummary) GetNumFcHostInterfacesOk() (*int64, bool) {
	if o == nil || o.NumFcHostInterfaces == nil {
		return nil, false
	}
	return o.NumFcHostInterfaces, true
}

// HasNumFcHostInterfaces returns a boolean if a field has been set.
func (o *ComputePhysicalSummary) HasNumFcHostInterfaces() bool {
	if o != nil && o.NumFcHostInterfaces != nil {
		return true
	}

	return false
}

// SetNumFcHostInterfaces gets a reference to the given int64 and assigns it to the NumFcHostInterfaces field.
func (o *ComputePhysicalSummary) SetNumFcHostInterfaces(v int64) {
	o.NumFcHostInterfaces = &v
}

// GetNumThreads returns the NumThreads field value if set, zero value otherwise.
func (o *ComputePhysicalSummary) GetNumThreads() int64 {
	if o == nil || o.NumThreads == nil {
		var ret int64
		return ret
	}
	return *o.NumThreads
}

// GetNumThreadsOk returns a tuple with the NumThreads field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComputePhysicalSummary) GetNumThreadsOk() (*int64, bool) {
	if o == nil || o.NumThreads == nil {
		return nil, false
	}
	return o.NumThreads, true
}

// HasNumThreads returns a boolean if a field has been set.
func (o *ComputePhysicalSummary) HasNumThreads() bool {
	if o != nil && o.NumThreads != nil {
		return true
	}

	return false
}

// SetNumThreads gets a reference to the given int64 and assigns it to the NumThreads field.
func (o *ComputePhysicalSummary) SetNumThreads(v int64) {
	o.NumThreads = &v
}

// GetOperPowerState returns the OperPowerState field value if set, zero value otherwise.
func (o *ComputePhysicalSummary) GetOperPowerState() string {
	if o == nil || o.OperPowerState == nil {
		var ret string
		return ret
	}
	return *o.OperPowerState
}

// GetOperPowerStateOk returns a tuple with the OperPowerState field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComputePhysicalSummary) GetOperPowerStateOk() (*string, bool) {
	if o == nil || o.OperPowerState == nil {
		return nil, false
	}
	return o.OperPowerState, true
}

// HasOperPowerState returns a boolean if a field has been set.
func (o *ComputePhysicalSummary) HasOperPowerState() bool {
	if o != nil && o.OperPowerState != nil {
		return true
	}

	return false
}

// SetOperPowerState gets a reference to the given string and assigns it to the OperPowerState field.
func (o *ComputePhysicalSummary) SetOperPowerState(v string) {
	o.OperPowerState = &v
}

// GetOperReason returns the OperReason field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ComputePhysicalSummary) GetOperReason() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.OperReason
}

// GetOperReasonOk returns a tuple with the OperReason field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ComputePhysicalSummary) GetOperReasonOk() (*[]string, bool) {
	if o == nil || o.OperReason == nil {
		return nil, false
	}
	return &o.OperReason, true
}

// HasOperReason returns a boolean if a field has been set.
func (o *ComputePhysicalSummary) HasOperReason() bool {
	if o != nil && o.OperReason != nil {
		return true
	}

	return false
}

// SetOperReason gets a reference to the given []string and assigns it to the OperReason field.
func (o *ComputePhysicalSummary) SetOperReason(v []string) {
	o.OperReason = v
}

// GetOperState returns the OperState field value if set, zero value otherwise.
func (o *ComputePhysicalSummary) GetOperState() string {
	if o == nil || o.OperState == nil {
		var ret string
		return ret
	}
	return *o.OperState
}

// GetOperStateOk returns a tuple with the OperState field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComputePhysicalSummary) GetOperStateOk() (*string, bool) {
	if o == nil || o.OperState == nil {
		return nil, false
	}
	return o.OperState, true
}

// HasOperState returns a boolean if a field has been set.
func (o *ComputePhysicalSummary) HasOperState() bool {
	if o != nil && o.OperState != nil {
		return true
	}

	return false
}

// SetOperState gets a reference to the given string and assigns it to the OperState field.
func (o *ComputePhysicalSummary) SetOperState(v string) {
	o.OperState = &v
}

// GetOperability returns the Operability field value if set, zero value otherwise.
func (o *ComputePhysicalSummary) GetOperability() string {
	if o == nil || o.Operability == nil {
		var ret string
		return ret
	}
	return *o.Operability
}

// GetOperabilityOk returns a tuple with the Operability field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComputePhysicalSummary) GetOperabilityOk() (*string, bool) {
	if o == nil || o.Operability == nil {
		return nil, false
	}
	return o.Operability, true
}

// HasOperability returns a boolean if a field has been set.
func (o *ComputePhysicalSummary) HasOperability() bool {
	if o != nil && o.Operability != nil {
		return true
	}

	return false
}

// SetOperability gets a reference to the given string and assigns it to the Operability field.
func (o *ComputePhysicalSummary) SetOperability(v string) {
	o.Operability = &v
}

// GetPlatformType returns the PlatformType field value if set, zero value otherwise.
func (o *ComputePhysicalSummary) GetPlatformType() string {
	if o == nil || o.PlatformType == nil {
		var ret string
		return ret
	}
	return *o.PlatformType
}

// GetPlatformTypeOk returns a tuple with the PlatformType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComputePhysicalSummary) GetPlatformTypeOk() (*string, bool) {
	if o == nil || o.PlatformType == nil {
		return nil, false
	}
	return o.PlatformType, true
}

// HasPlatformType returns a boolean if a field has been set.
func (o *ComputePhysicalSummary) HasPlatformType() bool {
	if o != nil && o.PlatformType != nil {
		return true
	}

	return false
}

// SetPlatformType gets a reference to the given string and assigns it to the PlatformType field.
func (o *ComputePhysicalSummary) SetPlatformType(v string) {
	o.PlatformType = &v
}

// GetPresence returns the Presence field value if set, zero value otherwise.
func (o *ComputePhysicalSummary) GetPresence() string {
	if o == nil || o.Presence == nil {
		var ret string
		return ret
	}
	return *o.Presence
}

// GetPresenceOk returns a tuple with the Presence field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComputePhysicalSummary) GetPresenceOk() (*string, bool) {
	if o == nil || o.Presence == nil {
		return nil, false
	}
	return o.Presence, true
}

// HasPresence returns a boolean if a field has been set.
func (o *ComputePhysicalSummary) HasPresence() bool {
	if o != nil && o.Presence != nil {
		return true
	}

	return false
}

// SetPresence gets a reference to the given string and assigns it to the Presence field.
func (o *ComputePhysicalSummary) SetPresence(v string) {
	o.Presence = &v
}

// GetRevision returns the Revision field value if set, zero value otherwise.
func (o *ComputePhysicalSummary) GetRevision() string {
	if o == nil || o.Revision == nil {
		var ret string
		return ret
	}
	return *o.Revision
}

// GetRevisionOk returns a tuple with the Revision field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComputePhysicalSummary) GetRevisionOk() (*string, bool) {
	if o == nil || o.Revision == nil {
		return nil, false
	}
	return o.Revision, true
}

// HasRevision returns a boolean if a field has been set.
func (o *ComputePhysicalSummary) HasRevision() bool {
	if o != nil && o.Revision != nil {
		return true
	}

	return false
}

// SetRevision gets a reference to the given string and assigns it to the Revision field.
func (o *ComputePhysicalSummary) SetRevision(v string) {
	o.Revision = &v
}

// GetRn returns the Rn field value if set, zero value otherwise.
func (o *ComputePhysicalSummary) GetRn() string {
	if o == nil || o.Rn == nil {
		var ret string
		return ret
	}
	return *o.Rn
}

// GetRnOk returns a tuple with the Rn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComputePhysicalSummary) GetRnOk() (*string, bool) {
	if o == nil || o.Rn == nil {
		return nil, false
	}
	return o.Rn, true
}

// HasRn returns a boolean if a field has been set.
func (o *ComputePhysicalSummary) HasRn() bool {
	if o != nil && o.Rn != nil {
		return true
	}

	return false
}

// SetRn gets a reference to the given string and assigns it to the Rn field.
func (o *ComputePhysicalSummary) SetRn(v string) {
	o.Rn = &v
}

// GetScaledMode returns the ScaledMode field value if set, zero value otherwise.
func (o *ComputePhysicalSummary) GetScaledMode() string {
	if o == nil || o.ScaledMode == nil {
		var ret string
		return ret
	}
	return *o.ScaledMode
}

// GetScaledModeOk returns a tuple with the ScaledMode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComputePhysicalSummary) GetScaledModeOk() (*string, bool) {
	if o == nil || o.ScaledMode == nil {
		return nil, false
	}
	return o.ScaledMode, true
}

// HasScaledMode returns a boolean if a field has been set.
func (o *ComputePhysicalSummary) HasScaledMode() bool {
	if o != nil && o.ScaledMode != nil {
		return true
	}

	return false
}

// SetScaledMode gets a reference to the given string and assigns it to the ScaledMode field.
func (o *ComputePhysicalSummary) SetScaledMode(v string) {
	o.ScaledMode = &v
}

// GetSerial returns the Serial field value if set, zero value otherwise.
func (o *ComputePhysicalSummary) GetSerial() string {
	if o == nil || o.Serial == nil {
		var ret string
		return ret
	}
	return *o.Serial
}

// GetSerialOk returns a tuple with the Serial field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComputePhysicalSummary) GetSerialOk() (*string, bool) {
	if o == nil || o.Serial == nil {
		return nil, false
	}
	return o.Serial, true
}

// HasSerial returns a boolean if a field has been set.
func (o *ComputePhysicalSummary) HasSerial() bool {
	if o != nil && o.Serial != nil {
		return true
	}

	return false
}

// SetSerial gets a reference to the given string and assigns it to the Serial field.
func (o *ComputePhysicalSummary) SetSerial(v string) {
	o.Serial = &v
}

// GetServerId returns the ServerId field value if set, zero value otherwise.
func (o *ComputePhysicalSummary) GetServerId() int64 {
	if o == nil || o.ServerId == nil {
		var ret int64
		return ret
	}
	return *o.ServerId
}

// GetServerIdOk returns a tuple with the ServerId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComputePhysicalSummary) GetServerIdOk() (*int64, bool) {
	if o == nil || o.ServerId == nil {
		return nil, false
	}
	return o.ServerId, true
}

// HasServerId returns a boolean if a field has been set.
func (o *ComputePhysicalSummary) HasServerId() bool {
	if o != nil && o.ServerId != nil {
		return true
	}

	return false
}

// SetServerId gets a reference to the given int64 and assigns it to the ServerId field.
func (o *ComputePhysicalSummary) SetServerId(v int64) {
	o.ServerId = &v
}

// GetServiceProfile returns the ServiceProfile field value if set, zero value otherwise.
func (o *ComputePhysicalSummary) GetServiceProfile() string {
	if o == nil || o.ServiceProfile == nil {
		var ret string
		return ret
	}
	return *o.ServiceProfile
}

// GetServiceProfileOk returns a tuple with the ServiceProfile field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComputePhysicalSummary) GetServiceProfileOk() (*string, bool) {
	if o == nil || o.ServiceProfile == nil {
		return nil, false
	}
	return o.ServiceProfile, true
}

// HasServiceProfile returns a boolean if a field has been set.
func (o *ComputePhysicalSummary) HasServiceProfile() bool {
	if o != nil && o.ServiceProfile != nil {
		return true
	}

	return false
}

// SetServiceProfile gets a reference to the given string and assigns it to the ServiceProfile field.
func (o *ComputePhysicalSummary) SetServiceProfile(v string) {
	o.ServiceProfile = &v
}

// GetSlotId returns the SlotId field value if set, zero value otherwise.
func (o *ComputePhysicalSummary) GetSlotId() int64 {
	if o == nil || o.SlotId == nil {
		var ret int64
		return ret
	}
	return *o.SlotId
}

// GetSlotIdOk returns a tuple with the SlotId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComputePhysicalSummary) GetSlotIdOk() (*int64, bool) {
	if o == nil || o.SlotId == nil {
		return nil, false
	}
	return o.SlotId, true
}

// HasSlotId returns a boolean if a field has been set.
func (o *ComputePhysicalSummary) HasSlotId() bool {
	if o != nil && o.SlotId != nil {
		return true
	}

	return false
}

// SetSlotId gets a reference to the given int64 and assigns it to the SlotId field.
func (o *ComputePhysicalSummary) SetSlotId(v int64) {
	o.SlotId = &v
}

// GetSourceObjectType returns the SourceObjectType field value if set, zero value otherwise.
func (o *ComputePhysicalSummary) GetSourceObjectType() string {
	if o == nil || o.SourceObjectType == nil {
		var ret string
		return ret
	}
	return *o.SourceObjectType
}

// GetSourceObjectTypeOk returns a tuple with the SourceObjectType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComputePhysicalSummary) GetSourceObjectTypeOk() (*string, bool) {
	if o == nil || o.SourceObjectType == nil {
		return nil, false
	}
	return o.SourceObjectType, true
}

// HasSourceObjectType returns a boolean if a field has been set.
func (o *ComputePhysicalSummary) HasSourceObjectType() bool {
	if o != nil && o.SourceObjectType != nil {
		return true
	}

	return false
}

// SetSourceObjectType gets a reference to the given string and assigns it to the SourceObjectType field.
func (o *ComputePhysicalSummary) SetSourceObjectType(v string) {
	o.SourceObjectType = &v
}

// GetTopologyScanStatus returns the TopologyScanStatus field value if set, zero value otherwise.
func (o *ComputePhysicalSummary) GetTopologyScanStatus() string {
	if o == nil || o.TopologyScanStatus == nil {
		var ret string
		return ret
	}
	return *o.TopologyScanStatus
}

// GetTopologyScanStatusOk returns a tuple with the TopologyScanStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComputePhysicalSummary) GetTopologyScanStatusOk() (*string, bool) {
	if o == nil || o.TopologyScanStatus == nil {
		return nil, false
	}
	return o.TopologyScanStatus, true
}

// HasTopologyScanStatus returns a boolean if a field has been set.
func (o *ComputePhysicalSummary) HasTopologyScanStatus() bool {
	if o != nil && o.TopologyScanStatus != nil {
		return true
	}

	return false
}

// SetTopologyScanStatus gets a reference to the given string and assigns it to the TopologyScanStatus field.
func (o *ComputePhysicalSummary) SetTopologyScanStatus(v string) {
	o.TopologyScanStatus = &v
}

// GetTotalMemory returns the TotalMemory field value if set, zero value otherwise.
func (o *ComputePhysicalSummary) GetTotalMemory() int64 {
	if o == nil || o.TotalMemory == nil {
		var ret int64
		return ret
	}
	return *o.TotalMemory
}

// GetTotalMemoryOk returns a tuple with the TotalMemory field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComputePhysicalSummary) GetTotalMemoryOk() (*int64, bool) {
	if o == nil || o.TotalMemory == nil {
		return nil, false
	}
	return o.TotalMemory, true
}

// HasTotalMemory returns a boolean if a field has been set.
func (o *ComputePhysicalSummary) HasTotalMemory() bool {
	if o != nil && o.TotalMemory != nil {
		return true
	}

	return false
}

// SetTotalMemory gets a reference to the given int64 and assigns it to the TotalMemory field.
func (o *ComputePhysicalSummary) SetTotalMemory(v int64) {
	o.TotalMemory = &v
}

// GetUserLabel returns the UserLabel field value if set, zero value otherwise.
func (o *ComputePhysicalSummary) GetUserLabel() string {
	if o == nil || o.UserLabel == nil {
		var ret string
		return ret
	}
	return *o.UserLabel
}

// GetUserLabelOk returns a tuple with the UserLabel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComputePhysicalSummary) GetUserLabelOk() (*string, bool) {
	if o == nil || o.UserLabel == nil {
		return nil, false
	}
	return o.UserLabel, true
}

// HasUserLabel returns a boolean if a field has been set.
func (o *ComputePhysicalSummary) HasUserLabel() bool {
	if o != nil && o.UserLabel != nil {
		return true
	}

	return false
}

// SetUserLabel gets a reference to the given string and assigns it to the UserLabel field.
func (o *ComputePhysicalSummary) SetUserLabel(v string) {
	o.UserLabel = &v
}

// GetUuid returns the Uuid field value if set, zero value otherwise.
func (o *ComputePhysicalSummary) GetUuid() string {
	if o == nil || o.Uuid == nil {
		var ret string
		return ret
	}
	return *o.Uuid
}

// GetUuidOk returns a tuple with the Uuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComputePhysicalSummary) GetUuidOk() (*string, bool) {
	if o == nil || o.Uuid == nil {
		return nil, false
	}
	return o.Uuid, true
}

// HasUuid returns a boolean if a field has been set.
func (o *ComputePhysicalSummary) HasUuid() bool {
	if o != nil && o.Uuid != nil {
		return true
	}

	return false
}

// SetUuid gets a reference to the given string and assigns it to the Uuid field.
func (o *ComputePhysicalSummary) SetUuid(v string) {
	o.Uuid = &v
}

// GetVendor returns the Vendor field value if set, zero value otherwise.
func (o *ComputePhysicalSummary) GetVendor() string {
	if o == nil || o.Vendor == nil {
		var ret string
		return ret
	}
	return *o.Vendor
}

// GetVendorOk returns a tuple with the Vendor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComputePhysicalSummary) GetVendorOk() (*string, bool) {
	if o == nil || o.Vendor == nil {
		return nil, false
	}
	return o.Vendor, true
}

// HasVendor returns a boolean if a field has been set.
func (o *ComputePhysicalSummary) HasVendor() bool {
	if o != nil && o.Vendor != nil {
		return true
	}

	return false
}

// SetVendor gets a reference to the given string and assigns it to the Vendor field.
func (o *ComputePhysicalSummary) SetVendor(v string) {
	o.Vendor = &v
}

// GetInventoryDeviceInfo returns the InventoryDeviceInfo field value if set, zero value otherwise.
func (o *ComputePhysicalSummary) GetInventoryDeviceInfo() InventoryDeviceInfoRelationship {
	if o == nil || o.InventoryDeviceInfo == nil {
		var ret InventoryDeviceInfoRelationship
		return ret
	}
	return *o.InventoryDeviceInfo
}

// GetInventoryDeviceInfoOk returns a tuple with the InventoryDeviceInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComputePhysicalSummary) GetInventoryDeviceInfoOk() (*InventoryDeviceInfoRelationship, bool) {
	if o == nil || o.InventoryDeviceInfo == nil {
		return nil, false
	}
	return o.InventoryDeviceInfo, true
}

// HasInventoryDeviceInfo returns a boolean if a field has been set.
func (o *ComputePhysicalSummary) HasInventoryDeviceInfo() bool {
	if o != nil && o.InventoryDeviceInfo != nil {
		return true
	}

	return false
}

// SetInventoryDeviceInfo gets a reference to the given InventoryDeviceInfoRelationship and assigns it to the InventoryDeviceInfo field.
func (o *ComputePhysicalSummary) SetInventoryDeviceInfo(v InventoryDeviceInfoRelationship) {
	o.InventoryDeviceInfo = &v
}

// GetRegisteredDevice returns the RegisteredDevice field value if set, zero value otherwise.
func (o *ComputePhysicalSummary) GetRegisteredDevice() AssetDeviceRegistrationRelationship {
	if o == nil || o.RegisteredDevice == nil {
		var ret AssetDeviceRegistrationRelationship
		return ret
	}
	return *o.RegisteredDevice
}

// GetRegisteredDeviceOk returns a tuple with the RegisteredDevice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComputePhysicalSummary) GetRegisteredDeviceOk() (*AssetDeviceRegistrationRelationship, bool) {
	if o == nil || o.RegisteredDevice == nil {
		return nil, false
	}
	return o.RegisteredDevice, true
}

// HasRegisteredDevice returns a boolean if a field has been set.
func (o *ComputePhysicalSummary) HasRegisteredDevice() bool {
	if o != nil && o.RegisteredDevice != nil {
		return true
	}

	return false
}

// SetRegisteredDevice gets a reference to the given AssetDeviceRegistrationRelationship and assigns it to the RegisteredDevice field.
func (o *ComputePhysicalSummary) SetRegisteredDevice(v AssetDeviceRegistrationRelationship) {
	o.RegisteredDevice = &v
}

func (o ComputePhysicalSummary) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	serializedViewsView, errViewsView := json.Marshal(o.ViewsView)
	if errViewsView != nil {
		return []byte{}, errViewsView
	}
	errViewsView = json.Unmarshal([]byte(serializedViewsView), &toSerialize)
	if errViewsView != nil {
		return []byte{}, errViewsView
	}
	if true {
		toSerialize["ClassId"] = o.ClassId
	}
	if true {
		toSerialize["ObjectType"] = o.ObjectType
	}
	if o.AdminPowerState != nil {
		toSerialize["AdminPowerState"] = o.AdminPowerState
	}
	if o.AlarmSummary.IsSet() {
		toSerialize["AlarmSummary"] = o.AlarmSummary.Get()
	}
	if o.AssetTag != nil {
		toSerialize["AssetTag"] = o.AssetTag
	}
	if o.AvailableMemory != nil {
		toSerialize["AvailableMemory"] = o.AvailableMemory
	}
	if o.BiosPostComplete != nil {
		toSerialize["BiosPostComplete"] = o.BiosPostComplete
	}
	if o.ChassisId != nil {
		toSerialize["ChassisId"] = o.ChassisId
	}
	if o.ConnectionStatus != nil {
		toSerialize["ConnectionStatus"] = o.ConnectionStatus
	}
	if o.CpuCapacity != nil {
		toSerialize["CpuCapacity"] = o.CpuCapacity
	}
	if o.DeviceMoId != nil {
		toSerialize["DeviceMoId"] = o.DeviceMoId
	}
	if o.Dn != nil {
		toSerialize["Dn"] = o.Dn
	}
	if o.FaultSummary != nil {
		toSerialize["FaultSummary"] = o.FaultSummary
	}
	if o.Firmware != nil {
		toSerialize["Firmware"] = o.Firmware
	}
	if o.Ipv4Address != nil {
		toSerialize["Ipv4Address"] = o.Ipv4Address
	}
	if o.KvmIpAddresses != nil {
		toSerialize["KvmIpAddresses"] = o.KvmIpAddresses
	}
	if o.ManagementMode != nil {
		toSerialize["ManagementMode"] = o.ManagementMode
	}
	if o.MemorySpeed != nil {
		toSerialize["MemorySpeed"] = o.MemorySpeed
	}
	if o.MgmtIpAddress != nil {
		toSerialize["MgmtIpAddress"] = o.MgmtIpAddress
	}
	if o.Model != nil {
		toSerialize["Model"] = o.Model
	}
	if o.Name != nil {
		toSerialize["Name"] = o.Name
	}
	if o.NumAdaptors != nil {
		toSerialize["NumAdaptors"] = o.NumAdaptors
	}
	if o.NumCpuCores != nil {
		toSerialize["NumCpuCores"] = o.NumCpuCores
	}
	if o.NumCpuCoresEnabled != nil {
		toSerialize["NumCpuCoresEnabled"] = o.NumCpuCoresEnabled
	}
	if o.NumCpus != nil {
		toSerialize["NumCpus"] = o.NumCpus
	}
	if o.NumEthHostInterfaces != nil {
		toSerialize["NumEthHostInterfaces"] = o.NumEthHostInterfaces
	}
	if o.NumFcHostInterfaces != nil {
		toSerialize["NumFcHostInterfaces"] = o.NumFcHostInterfaces
	}
	if o.NumThreads != nil {
		toSerialize["NumThreads"] = o.NumThreads
	}
	if o.OperPowerState != nil {
		toSerialize["OperPowerState"] = o.OperPowerState
	}
	if o.OperReason != nil {
		toSerialize["OperReason"] = o.OperReason
	}
	if o.OperState != nil {
		toSerialize["OperState"] = o.OperState
	}
	if o.Operability != nil {
		toSerialize["Operability"] = o.Operability
	}
	if o.PlatformType != nil {
		toSerialize["PlatformType"] = o.PlatformType
	}
	if o.Presence != nil {
		toSerialize["Presence"] = o.Presence
	}
	if o.Revision != nil {
		toSerialize["Revision"] = o.Revision
	}
	if o.Rn != nil {
		toSerialize["Rn"] = o.Rn
	}
	if o.ScaledMode != nil {
		toSerialize["ScaledMode"] = o.ScaledMode
	}
	if o.Serial != nil {
		toSerialize["Serial"] = o.Serial
	}
	if o.ServerId != nil {
		toSerialize["ServerId"] = o.ServerId
	}
	if o.ServiceProfile != nil {
		toSerialize["ServiceProfile"] = o.ServiceProfile
	}
	if o.SlotId != nil {
		toSerialize["SlotId"] = o.SlotId
	}
	if o.SourceObjectType != nil {
		toSerialize["SourceObjectType"] = o.SourceObjectType
	}
	if o.TopologyScanStatus != nil {
		toSerialize["TopologyScanStatus"] = o.TopologyScanStatus
	}
	if o.TotalMemory != nil {
		toSerialize["TotalMemory"] = o.TotalMemory
	}
	if o.UserLabel != nil {
		toSerialize["UserLabel"] = o.UserLabel
	}
	if o.Uuid != nil {
		toSerialize["Uuid"] = o.Uuid
	}
	if o.Vendor != nil {
		toSerialize["Vendor"] = o.Vendor
	}
	if o.InventoryDeviceInfo != nil {
		toSerialize["InventoryDeviceInfo"] = o.InventoryDeviceInfo
	}
	if o.RegisteredDevice != nil {
		toSerialize["RegisteredDevice"] = o.RegisteredDevice
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *ComputePhysicalSummary) UnmarshalJSON(bytes []byte) (err error) {
	type ComputePhysicalSummaryWithoutEmbeddedStruct struct {
		// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.
		ClassId string `json:"ClassId"`
		// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
		ObjectType string `json:"ObjectType"`
		// The desired power state of the server.
		AdminPowerState *string                     `json:"AdminPowerState,omitempty"`
		AlarmSummary    NullableComputeAlarmSummary `json:"AlarmSummary,omitempty"`
		// The user defined asset tag assigned to the server.
		AssetTag *string `json:"AssetTag,omitempty"`
		// The amount of memory available on the server.
		AvailableMemory *int64 `json:"AvailableMemory,omitempty"`
		// The BIOS POST completion status of the server.
		BiosPostComplete *bool `json:"BiosPostComplete,omitempty"`
		// The id of the chassis that the blade is located in.
		ChassisId *string `json:"ChassisId,omitempty"`
		// Connectivity Status of RackUnit to Switch - A or B or AB.
		ConnectionStatus *string `json:"ConnectionStatus,omitempty"`
		// CPU Capacity = Number of CPU Sockets x Enabled Cores x Speed (GHz).
		CpuCapacity *float32 `json:"CpuCapacity,omitempty"`
		// The database identifier of the registered device of an object.
		DeviceMoId *string `json:"DeviceMoId,omitempty"`
		// The Distinguished Name unambiguously identifies an object in the system.
		Dn *string `json:"Dn,omitempty"`
		// The fault summary for the server.
		FaultSummary *int64 `json:"FaultSummary,omitempty"`
		// The firmware version of the Cisco Integrated Management Controller (CIMC) for this server.
		Firmware *string `json:"Firmware,omitempty"`
		// The IPv4 address configured on the management interface of the Integrated Management Controller.
		Ipv4Address    *string            `json:"Ipv4Address,omitempty"`
		KvmIpAddresses []ComputeIpAddress `json:"KvmIpAddresses,omitempty"`
		// The management mode of the server. * `IntersightStandalone` - Intersight Standalone mode of operation. * `UCSM` - Unified Computing System Manager mode of operation. * `Intersight` - Intersight managed mode of operation.
		ManagementMode *string `json:"ManagementMode,omitempty"`
		// The maximum memory speed in MHz available on the server.
		MemorySpeed *string `json:"MemorySpeed,omitempty"`
		// Management address of the server.
		MgmtIpAddress *string `json:"MgmtIpAddress,omitempty"`
		// This field identifies the model of the given component.
		Model *string `json:"Model,omitempty"`
		// The name of the UCS Fabric Interconnect cluster or Cisco Integrated Management Controller (CIMC). When this server is attached to a UCS Fabric Interconnect, the value of this property is the name of the UCS Fabric Interconnect. When this server configured in standalone mode, the value of this property is the name of the Cisco Integrated Management Controller.
		Name *string `json:"Name,omitempty"`
		// The total number of network adapters present on the server.
		NumAdaptors *int64 `json:"NumAdaptors,omitempty"`
		// The total number of CPU cores present on the server.
		NumCpuCores *int64 `json:"NumCpuCores,omitempty"`
		// The total number of CPU cores enabled on the server.
		NumCpuCoresEnabled *int64 `json:"NumCpuCoresEnabled,omitempty"`
		// The total number of CPUs present on the server.
		NumCpus *int64 `json:"NumCpus,omitempty"`
		// The total number of vNICs which are visible to a host on the server.
		NumEthHostInterfaces *int64 `json:"NumEthHostInterfaces,omitempty"`
		// The total number of vHBAs which are visible to a host on the server.
		NumFcHostInterfaces *int64 `json:"NumFcHostInterfaces,omitempty"`
		// The total number of threads the server is capable of handling.
		NumThreads *int64 `json:"NumThreads,omitempty"`
		// The actual power state of the server.
		OperPowerState *string  `json:"OperPowerState,omitempty"`
		OperReason     []string `json:"OperReason,omitempty"`
		// The operational state of the server.
		OperState *string `json:"OperState,omitempty"`
		// The operability of the server.
		Operability *string `json:"Operability,omitempty"`
		// The platform type of the registered device - whether managed by UCSM or operating in standalone mode.
		PlatformType *string `json:"PlatformType,omitempty"`
		// This field identifies the presence (equipped) or absence of the given component.
		Presence *string `json:"Presence,omitempty"`
		// This field identifies the revision of the given component.
		Revision *string `json:"Revision,omitempty"`
		// The Relative Name uniquely identifies an object within a given context.
		Rn *string `json:"Rn,omitempty"`
		// The mode of the server that determines it is scaled.
		ScaledMode *string `json:"ScaledMode,omitempty"`
		// This field identifies the serial of the given component.
		Serial *string `json:"Serial,omitempty"`
		// RackUnit ID that uniquely identifies the server.
		ServerId *int64 `json:"ServerId,omitempty"`
		// The distinguished name of the service profile to which the server is associated to. It is applicable only for servers which are managed via UCSM.
		ServiceProfile *string `json:"ServiceProfile,omitempty"`
		// The slot number in the chassis that the blade is located in.
		SlotId *int64 `json:"SlotId,omitempty"`
		// The source object type of this view MO.
		SourceObjectType *string `json:"SourceObjectType,omitempty"`
		// To maintain the Topology workflow run status.
		TopologyScanStatus *string `json:"TopologyScanStatus,omitempty"`
		// The total memory available on the server.
		TotalMemory *int64 `json:"TotalMemory,omitempty"`
		// The user defined label assigned to the server.
		UserLabel *string `json:"UserLabel,omitempty"`
		// The universally unique identity of the server.
		Uuid *string `json:"Uuid,omitempty"`
		// This field identifies the vendor of the given component.
		Vendor              *string                              `json:"Vendor,omitempty"`
		InventoryDeviceInfo *InventoryDeviceInfoRelationship     `json:"InventoryDeviceInfo,omitempty"`
		RegisteredDevice    *AssetDeviceRegistrationRelationship `json:"RegisteredDevice,omitempty"`
	}

	varComputePhysicalSummaryWithoutEmbeddedStruct := ComputePhysicalSummaryWithoutEmbeddedStruct{}

	err = json.Unmarshal(bytes, &varComputePhysicalSummaryWithoutEmbeddedStruct)
	if err == nil {
		varComputePhysicalSummary := _ComputePhysicalSummary{}
		varComputePhysicalSummary.ClassId = varComputePhysicalSummaryWithoutEmbeddedStruct.ClassId
		varComputePhysicalSummary.ObjectType = varComputePhysicalSummaryWithoutEmbeddedStruct.ObjectType
		varComputePhysicalSummary.AdminPowerState = varComputePhysicalSummaryWithoutEmbeddedStruct.AdminPowerState
		varComputePhysicalSummary.AlarmSummary = varComputePhysicalSummaryWithoutEmbeddedStruct.AlarmSummary
		varComputePhysicalSummary.AssetTag = varComputePhysicalSummaryWithoutEmbeddedStruct.AssetTag
		varComputePhysicalSummary.AvailableMemory = varComputePhysicalSummaryWithoutEmbeddedStruct.AvailableMemory
		varComputePhysicalSummary.BiosPostComplete = varComputePhysicalSummaryWithoutEmbeddedStruct.BiosPostComplete
		varComputePhysicalSummary.ChassisId = varComputePhysicalSummaryWithoutEmbeddedStruct.ChassisId
		varComputePhysicalSummary.ConnectionStatus = varComputePhysicalSummaryWithoutEmbeddedStruct.ConnectionStatus
		varComputePhysicalSummary.CpuCapacity = varComputePhysicalSummaryWithoutEmbeddedStruct.CpuCapacity
		varComputePhysicalSummary.DeviceMoId = varComputePhysicalSummaryWithoutEmbeddedStruct.DeviceMoId
		varComputePhysicalSummary.Dn = varComputePhysicalSummaryWithoutEmbeddedStruct.Dn
		varComputePhysicalSummary.FaultSummary = varComputePhysicalSummaryWithoutEmbeddedStruct.FaultSummary
		varComputePhysicalSummary.Firmware = varComputePhysicalSummaryWithoutEmbeddedStruct.Firmware
		varComputePhysicalSummary.Ipv4Address = varComputePhysicalSummaryWithoutEmbeddedStruct.Ipv4Address
		varComputePhysicalSummary.KvmIpAddresses = varComputePhysicalSummaryWithoutEmbeddedStruct.KvmIpAddresses
		varComputePhysicalSummary.ManagementMode = varComputePhysicalSummaryWithoutEmbeddedStruct.ManagementMode
		varComputePhysicalSummary.MemorySpeed = varComputePhysicalSummaryWithoutEmbeddedStruct.MemorySpeed
		varComputePhysicalSummary.MgmtIpAddress = varComputePhysicalSummaryWithoutEmbeddedStruct.MgmtIpAddress
		varComputePhysicalSummary.Model = varComputePhysicalSummaryWithoutEmbeddedStruct.Model
		varComputePhysicalSummary.Name = varComputePhysicalSummaryWithoutEmbeddedStruct.Name
		varComputePhysicalSummary.NumAdaptors = varComputePhysicalSummaryWithoutEmbeddedStruct.NumAdaptors
		varComputePhysicalSummary.NumCpuCores = varComputePhysicalSummaryWithoutEmbeddedStruct.NumCpuCores
		varComputePhysicalSummary.NumCpuCoresEnabled = varComputePhysicalSummaryWithoutEmbeddedStruct.NumCpuCoresEnabled
		varComputePhysicalSummary.NumCpus = varComputePhysicalSummaryWithoutEmbeddedStruct.NumCpus
		varComputePhysicalSummary.NumEthHostInterfaces = varComputePhysicalSummaryWithoutEmbeddedStruct.NumEthHostInterfaces
		varComputePhysicalSummary.NumFcHostInterfaces = varComputePhysicalSummaryWithoutEmbeddedStruct.NumFcHostInterfaces
		varComputePhysicalSummary.NumThreads = varComputePhysicalSummaryWithoutEmbeddedStruct.NumThreads
		varComputePhysicalSummary.OperPowerState = varComputePhysicalSummaryWithoutEmbeddedStruct.OperPowerState
		varComputePhysicalSummary.OperReason = varComputePhysicalSummaryWithoutEmbeddedStruct.OperReason
		varComputePhysicalSummary.OperState = varComputePhysicalSummaryWithoutEmbeddedStruct.OperState
		varComputePhysicalSummary.Operability = varComputePhysicalSummaryWithoutEmbeddedStruct.Operability
		varComputePhysicalSummary.PlatformType = varComputePhysicalSummaryWithoutEmbeddedStruct.PlatformType
		varComputePhysicalSummary.Presence = varComputePhysicalSummaryWithoutEmbeddedStruct.Presence
		varComputePhysicalSummary.Revision = varComputePhysicalSummaryWithoutEmbeddedStruct.Revision
		varComputePhysicalSummary.Rn = varComputePhysicalSummaryWithoutEmbeddedStruct.Rn
		varComputePhysicalSummary.ScaledMode = varComputePhysicalSummaryWithoutEmbeddedStruct.ScaledMode
		varComputePhysicalSummary.Serial = varComputePhysicalSummaryWithoutEmbeddedStruct.Serial
		varComputePhysicalSummary.ServerId = varComputePhysicalSummaryWithoutEmbeddedStruct.ServerId
		varComputePhysicalSummary.ServiceProfile = varComputePhysicalSummaryWithoutEmbeddedStruct.ServiceProfile
		varComputePhysicalSummary.SlotId = varComputePhysicalSummaryWithoutEmbeddedStruct.SlotId
		varComputePhysicalSummary.SourceObjectType = varComputePhysicalSummaryWithoutEmbeddedStruct.SourceObjectType
		varComputePhysicalSummary.TopologyScanStatus = varComputePhysicalSummaryWithoutEmbeddedStruct.TopologyScanStatus
		varComputePhysicalSummary.TotalMemory = varComputePhysicalSummaryWithoutEmbeddedStruct.TotalMemory
		varComputePhysicalSummary.UserLabel = varComputePhysicalSummaryWithoutEmbeddedStruct.UserLabel
		varComputePhysicalSummary.Uuid = varComputePhysicalSummaryWithoutEmbeddedStruct.Uuid
		varComputePhysicalSummary.Vendor = varComputePhysicalSummaryWithoutEmbeddedStruct.Vendor
		varComputePhysicalSummary.InventoryDeviceInfo = varComputePhysicalSummaryWithoutEmbeddedStruct.InventoryDeviceInfo
		varComputePhysicalSummary.RegisteredDevice = varComputePhysicalSummaryWithoutEmbeddedStruct.RegisteredDevice
		*o = ComputePhysicalSummary(varComputePhysicalSummary)
	} else {
		return err
	}

	varComputePhysicalSummary := _ComputePhysicalSummary{}

	err = json.Unmarshal(bytes, &varComputePhysicalSummary)
	if err == nil {
		o.ViewsView = varComputePhysicalSummary.ViewsView
	} else {
		return err
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "ClassId")
		delete(additionalProperties, "ObjectType")
		delete(additionalProperties, "AdminPowerState")
		delete(additionalProperties, "AlarmSummary")
		delete(additionalProperties, "AssetTag")
		delete(additionalProperties, "AvailableMemory")
		delete(additionalProperties, "BiosPostComplete")
		delete(additionalProperties, "ChassisId")
		delete(additionalProperties, "ConnectionStatus")
		delete(additionalProperties, "CpuCapacity")
		delete(additionalProperties, "DeviceMoId")
		delete(additionalProperties, "Dn")
		delete(additionalProperties, "FaultSummary")
		delete(additionalProperties, "Firmware")
		delete(additionalProperties, "Ipv4Address")
		delete(additionalProperties, "KvmIpAddresses")
		delete(additionalProperties, "ManagementMode")
		delete(additionalProperties, "MemorySpeed")
		delete(additionalProperties, "MgmtIpAddress")
		delete(additionalProperties, "Model")
		delete(additionalProperties, "Name")
		delete(additionalProperties, "NumAdaptors")
		delete(additionalProperties, "NumCpuCores")
		delete(additionalProperties, "NumCpuCoresEnabled")
		delete(additionalProperties, "NumCpus")
		delete(additionalProperties, "NumEthHostInterfaces")
		delete(additionalProperties, "NumFcHostInterfaces")
		delete(additionalProperties, "NumThreads")
		delete(additionalProperties, "OperPowerState")
		delete(additionalProperties, "OperReason")
		delete(additionalProperties, "OperState")
		delete(additionalProperties, "Operability")
		delete(additionalProperties, "PlatformType")
		delete(additionalProperties, "Presence")
		delete(additionalProperties, "Revision")
		delete(additionalProperties, "Rn")
		delete(additionalProperties, "ScaledMode")
		delete(additionalProperties, "Serial")
		delete(additionalProperties, "ServerId")
		delete(additionalProperties, "ServiceProfile")
		delete(additionalProperties, "SlotId")
		delete(additionalProperties, "SourceObjectType")
		delete(additionalProperties, "TopologyScanStatus")
		delete(additionalProperties, "TotalMemory")
		delete(additionalProperties, "UserLabel")
		delete(additionalProperties, "Uuid")
		delete(additionalProperties, "Vendor")
		delete(additionalProperties, "InventoryDeviceInfo")
		delete(additionalProperties, "RegisteredDevice")

		// remove fields from embedded structs
		reflectViewsView := reflect.ValueOf(o.ViewsView)
		for i := 0; i < reflectViewsView.Type().NumField(); i++ {
			t := reflectViewsView.Type().Field(i)

			if jsonTag := t.Tag.Get("json"); jsonTag != "" {
				fieldName := ""
				if commaIdx := strings.Index(jsonTag, ","); commaIdx > 0 {
					fieldName = jsonTag[:commaIdx]
				} else {
					fieldName = jsonTag
				}
				if fieldName != "AdditionalProperties" {
					delete(additionalProperties, fieldName)
				}
			}
		}

		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableComputePhysicalSummary struct {
	value *ComputePhysicalSummary
	isSet bool
}

func (v NullableComputePhysicalSummary) Get() *ComputePhysicalSummary {
	return v.value
}

func (v *NullableComputePhysicalSummary) Set(val *ComputePhysicalSummary) {
	v.value = val
	v.isSet = true
}

func (v NullableComputePhysicalSummary) IsSet() bool {
	return v.isSet
}

func (v *NullableComputePhysicalSummary) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableComputePhysicalSummary(val *ComputePhysicalSummary) *NullableComputePhysicalSummary {
	return &NullableComputePhysicalSummary{value: val, isSet: true}
}

func (v NullableComputePhysicalSummary) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableComputePhysicalSummary) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
