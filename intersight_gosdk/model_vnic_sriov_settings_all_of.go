/*
Cisco Intersight

Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations. The Intersight OpenAPI document defines the complete set of properties that are returned in the HTTP response. From that perspective, a client can expect that no additional properties are returned, unless these properties are explicitly defined in the OpenAPI document. However, when a client uses an older version of the Intersight OpenAPI document, the server may send additional properties because the software is more recent than the client. In that case, the client may receive properties that it does not know about. Some generated SDKs perform a strict validation of the HTTP response body against the OpenAPI document.

API version: 1.0.11-16342
Contact: intersight@cisco.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package intersight

import (
	"encoding/json"
)

// VnicSriovSettingsAllOf Definition of the list of properties defined in 'vnic.SriovSettings', excluding properties defined in parent classes.
type VnicSriovSettingsAllOf struct {
	// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.
	ClassId string `json:"ClassId"`
	// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
	ObjectType string `json:"ObjectType"`
	// Completion Queue resources per Virtual Function (VF).
	CompCountPerVf *int64 `json:"CompCountPerVf,omitempty"`
	// If enabled, sets Single Root Input Output Virtualization (SR-IOV) on this vNIC.
	Enabled *bool `json:"Enabled,omitempty"`
	// Interrupt Count resources per Virtual Function (VF).
	IntCountPerVf *int64 `json:"IntCountPerVf,omitempty"`
	// Receive Queue resources per Virtual Function (VF).
	RxCountPerVf *int64 `json:"RxCountPerVf,omitempty"`
	// Transmit Queue resources per Virtual Function (VF).
	TxCountPerVf *int64 `json:"TxCountPerVf,omitempty"`
	// Number of Virtual Functions (VF) to be created for this vNIC. Valid values are 1 to 64 when SR-IOV is enabled.
	VfCount              *int64 `json:"VfCount,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _VnicSriovSettingsAllOf VnicSriovSettingsAllOf

// NewVnicSriovSettingsAllOf instantiates a new VnicSriovSettingsAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVnicSriovSettingsAllOf(classId string, objectType string) *VnicSriovSettingsAllOf {
	this := VnicSriovSettingsAllOf{}
	this.ClassId = classId
	this.ObjectType = objectType
	var compCountPerVf int64 = 5
	this.CompCountPerVf = &compCountPerVf
	var intCountPerVf int64 = 8
	this.IntCountPerVf = &intCountPerVf
	var rxCountPerVf int64 = 4
	this.RxCountPerVf = &rxCountPerVf
	var txCountPerVf int64 = 1
	this.TxCountPerVf = &txCountPerVf
	var vfCount int64 = 64
	this.VfCount = &vfCount
	return &this
}

// NewVnicSriovSettingsAllOfWithDefaults instantiates a new VnicSriovSettingsAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVnicSriovSettingsAllOfWithDefaults() *VnicSriovSettingsAllOf {
	this := VnicSriovSettingsAllOf{}
	var classId string = "vnic.SriovSettings"
	this.ClassId = classId
	var objectType string = "vnic.SriovSettings"
	this.ObjectType = objectType
	var compCountPerVf int64 = 5
	this.CompCountPerVf = &compCountPerVf
	var intCountPerVf int64 = 8
	this.IntCountPerVf = &intCountPerVf
	var rxCountPerVf int64 = 4
	this.RxCountPerVf = &rxCountPerVf
	var txCountPerVf int64 = 1
	this.TxCountPerVf = &txCountPerVf
	var vfCount int64 = 64
	this.VfCount = &vfCount
	return &this
}

// GetClassId returns the ClassId field value
func (o *VnicSriovSettingsAllOf) GetClassId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ClassId
}

// GetClassIdOk returns a tuple with the ClassId field value
// and a boolean to check if the value has been set.
func (o *VnicSriovSettingsAllOf) GetClassIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ClassId, true
}

// SetClassId sets field value
func (o *VnicSriovSettingsAllOf) SetClassId(v string) {
	o.ClassId = v
}

// GetObjectType returns the ObjectType field value
func (o *VnicSriovSettingsAllOf) GetObjectType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ObjectType
}

// GetObjectTypeOk returns a tuple with the ObjectType field value
// and a boolean to check if the value has been set.
func (o *VnicSriovSettingsAllOf) GetObjectTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ObjectType, true
}

// SetObjectType sets field value
func (o *VnicSriovSettingsAllOf) SetObjectType(v string) {
	o.ObjectType = v
}

// GetCompCountPerVf returns the CompCountPerVf field value if set, zero value otherwise.
func (o *VnicSriovSettingsAllOf) GetCompCountPerVf() int64 {
	if o == nil || o.CompCountPerVf == nil {
		var ret int64
		return ret
	}
	return *o.CompCountPerVf
}

// GetCompCountPerVfOk returns a tuple with the CompCountPerVf field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VnicSriovSettingsAllOf) GetCompCountPerVfOk() (*int64, bool) {
	if o == nil || o.CompCountPerVf == nil {
		return nil, false
	}
	return o.CompCountPerVf, true
}

// HasCompCountPerVf returns a boolean if a field has been set.
func (o *VnicSriovSettingsAllOf) HasCompCountPerVf() bool {
	if o != nil && o.CompCountPerVf != nil {
		return true
	}

	return false
}

// SetCompCountPerVf gets a reference to the given int64 and assigns it to the CompCountPerVf field.
func (o *VnicSriovSettingsAllOf) SetCompCountPerVf(v int64) {
	o.CompCountPerVf = &v
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *VnicSriovSettingsAllOf) GetEnabled() bool {
	if o == nil || o.Enabled == nil {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VnicSriovSettingsAllOf) GetEnabledOk() (*bool, bool) {
	if o == nil || o.Enabled == nil {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *VnicSriovSettingsAllOf) HasEnabled() bool {
	if o != nil && o.Enabled != nil {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *VnicSriovSettingsAllOf) SetEnabled(v bool) {
	o.Enabled = &v
}

// GetIntCountPerVf returns the IntCountPerVf field value if set, zero value otherwise.
func (o *VnicSriovSettingsAllOf) GetIntCountPerVf() int64 {
	if o == nil || o.IntCountPerVf == nil {
		var ret int64
		return ret
	}
	return *o.IntCountPerVf
}

// GetIntCountPerVfOk returns a tuple with the IntCountPerVf field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VnicSriovSettingsAllOf) GetIntCountPerVfOk() (*int64, bool) {
	if o == nil || o.IntCountPerVf == nil {
		return nil, false
	}
	return o.IntCountPerVf, true
}

// HasIntCountPerVf returns a boolean if a field has been set.
func (o *VnicSriovSettingsAllOf) HasIntCountPerVf() bool {
	if o != nil && o.IntCountPerVf != nil {
		return true
	}

	return false
}

// SetIntCountPerVf gets a reference to the given int64 and assigns it to the IntCountPerVf field.
func (o *VnicSriovSettingsAllOf) SetIntCountPerVf(v int64) {
	o.IntCountPerVf = &v
}

// GetRxCountPerVf returns the RxCountPerVf field value if set, zero value otherwise.
func (o *VnicSriovSettingsAllOf) GetRxCountPerVf() int64 {
	if o == nil || o.RxCountPerVf == nil {
		var ret int64
		return ret
	}
	return *o.RxCountPerVf
}

// GetRxCountPerVfOk returns a tuple with the RxCountPerVf field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VnicSriovSettingsAllOf) GetRxCountPerVfOk() (*int64, bool) {
	if o == nil || o.RxCountPerVf == nil {
		return nil, false
	}
	return o.RxCountPerVf, true
}

// HasRxCountPerVf returns a boolean if a field has been set.
func (o *VnicSriovSettingsAllOf) HasRxCountPerVf() bool {
	if o != nil && o.RxCountPerVf != nil {
		return true
	}

	return false
}

// SetRxCountPerVf gets a reference to the given int64 and assigns it to the RxCountPerVf field.
func (o *VnicSriovSettingsAllOf) SetRxCountPerVf(v int64) {
	o.RxCountPerVf = &v
}

// GetTxCountPerVf returns the TxCountPerVf field value if set, zero value otherwise.
func (o *VnicSriovSettingsAllOf) GetTxCountPerVf() int64 {
	if o == nil || o.TxCountPerVf == nil {
		var ret int64
		return ret
	}
	return *o.TxCountPerVf
}

// GetTxCountPerVfOk returns a tuple with the TxCountPerVf field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VnicSriovSettingsAllOf) GetTxCountPerVfOk() (*int64, bool) {
	if o == nil || o.TxCountPerVf == nil {
		return nil, false
	}
	return o.TxCountPerVf, true
}

// HasTxCountPerVf returns a boolean if a field has been set.
func (o *VnicSriovSettingsAllOf) HasTxCountPerVf() bool {
	if o != nil && o.TxCountPerVf != nil {
		return true
	}

	return false
}

// SetTxCountPerVf gets a reference to the given int64 and assigns it to the TxCountPerVf field.
func (o *VnicSriovSettingsAllOf) SetTxCountPerVf(v int64) {
	o.TxCountPerVf = &v
}

// GetVfCount returns the VfCount field value if set, zero value otherwise.
func (o *VnicSriovSettingsAllOf) GetVfCount() int64 {
	if o == nil || o.VfCount == nil {
		var ret int64
		return ret
	}
	return *o.VfCount
}

// GetVfCountOk returns a tuple with the VfCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VnicSriovSettingsAllOf) GetVfCountOk() (*int64, bool) {
	if o == nil || o.VfCount == nil {
		return nil, false
	}
	return o.VfCount, true
}

// HasVfCount returns a boolean if a field has been set.
func (o *VnicSriovSettingsAllOf) HasVfCount() bool {
	if o != nil && o.VfCount != nil {
		return true
	}

	return false
}

// SetVfCount gets a reference to the given int64 and assigns it to the VfCount field.
func (o *VnicSriovSettingsAllOf) SetVfCount(v int64) {
	o.VfCount = &v
}

func (o VnicSriovSettingsAllOf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["ClassId"] = o.ClassId
	}
	if true {
		toSerialize["ObjectType"] = o.ObjectType
	}
	if o.CompCountPerVf != nil {
		toSerialize["CompCountPerVf"] = o.CompCountPerVf
	}
	if o.Enabled != nil {
		toSerialize["Enabled"] = o.Enabled
	}
	if o.IntCountPerVf != nil {
		toSerialize["IntCountPerVf"] = o.IntCountPerVf
	}
	if o.RxCountPerVf != nil {
		toSerialize["RxCountPerVf"] = o.RxCountPerVf
	}
	if o.TxCountPerVf != nil {
		toSerialize["TxCountPerVf"] = o.TxCountPerVf
	}
	if o.VfCount != nil {
		toSerialize["VfCount"] = o.VfCount
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *VnicSriovSettingsAllOf) UnmarshalJSON(bytes []byte) (err error) {
	varVnicSriovSettingsAllOf := _VnicSriovSettingsAllOf{}

	if err = json.Unmarshal(bytes, &varVnicSriovSettingsAllOf); err == nil {
		*o = VnicSriovSettingsAllOf(varVnicSriovSettingsAllOf)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "ClassId")
		delete(additionalProperties, "ObjectType")
		delete(additionalProperties, "CompCountPerVf")
		delete(additionalProperties, "Enabled")
		delete(additionalProperties, "IntCountPerVf")
		delete(additionalProperties, "RxCountPerVf")
		delete(additionalProperties, "TxCountPerVf")
		delete(additionalProperties, "VfCount")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableVnicSriovSettingsAllOf struct {
	value *VnicSriovSettingsAllOf
	isSet bool
}

func (v NullableVnicSriovSettingsAllOf) Get() *VnicSriovSettingsAllOf {
	return v.value
}

func (v *NullableVnicSriovSettingsAllOf) Set(val *VnicSriovSettingsAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableVnicSriovSettingsAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableVnicSriovSettingsAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVnicSriovSettingsAllOf(val *VnicSriovSettingsAllOf) *NullableVnicSriovSettingsAllOf {
	return &NullableVnicSriovSettingsAllOf{value: val, isSet: true}
}

func (v NullableVnicSriovSettingsAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVnicSriovSettingsAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
