/*
Cisco Intersight

Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations. The Intersight OpenAPI document defines the complete set of properties that are returned in the HTTP response. From that perspective, a client can expect that no additional properties are returned, unless these properties are explicitly defined in the OpenAPI document. However, when a client uses an older version of the Intersight OpenAPI document, the server may send additional properties because the software is more recent than the client. In that case, the client may receive properties that it does not know about. Some generated SDKs perform a strict validation of the HTTP response body against the OpenAPI document.

API version: 1.0.11-2025091920
Contact: intersight@cisco.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package intersight

import (
	"encoding/json"
	"fmt"
	"reflect"
	"strings"
)

// checks if the FabricMacSecPolicy type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FabricMacSecPolicy{}

// FabricMacSecPolicy A placeholder for MACSec (Media Access Control Security) configuration parameters, Primary/Fallback key chain and EAPol (Extensible Authentication Protocol over LAN) configurations.
type FabricMacSecPolicy struct {
	PolicyAbstractPolicy
	// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.
	ClassId string `json:"ClassId"`
	// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
	ObjectType string `json:"ObjectType"`
	// Cipher suite to be used for MACsec encryption. * `GCM-AES-XPN-256` - An extended Cipher Suite of GCM-AES-256 used in MACsec (Media Access Control Security) that incorporates Extended Packet Numbering (XPN) for enhanced security and scalability. * `GCM-AES-128` - This Cipher Suite employs the Advanced Encryption Standard (AES) with a 128-bit key in Galois/Counter Mode, offering both encryption and authentication. * `GCM-AES-256` - This Cipher Suite utilizes Advanced Encryption Standard (AES) with a 256-bit key in Galois/Counter Mode, offering a higher level of security compared to GCM-AES-128 due to the larger key size. * `GCM-AES-XPN-128` - An extended Cipher Suite of GCM-AES-128  used in MACsec (Media Access Control Security) that incorporates Extended Packet Numbering (XPN) to enhance security and scalability.
	CipherSuite *string `json:"CipherSuite,omitempty"`
	// The MACsec confidentiality offset specifies the number of bytes starting from the frame header. MACsec encrypts only the bytes after the offset in a frame. * `CONF-OFFSET-0` - A value of 0 means the entire ethernet frame is encrypted. * `CONF-OFFSET-30` - The first 30 bytes of the ethernet frame are not encrypted, and the rest of the frame is encrypted. * `CONF-OFFSET-50` - The first 50 bytes of the ethernet frame are not encrypted, and the rest of the frame is encrypted.
	ConfidentialityOffset *string                   `json:"ConfidentialityOffset,omitempty"`
	FallbackKeyChain      NullableFabricSecKeyChain `json:"FallbackKeyChain,omitempty"`
	// Configures inclusion of the optional integrity check value (ICV) indicator as part of the transmitted MACsec key agreement protocol data unit (PDU).
	IncludeIcvIndicator *bool `json:"IncludeIcvIndicator,omitempty"`
	// The key server is selected by comparing key-server priority values during MACsec key agreement (MKA) message exchange between peer devices. Valid values range from 0 to 255. The lower the value, the higher the chance it will be selected as the key server.
	KeyServerPriority *int64                    `json:"KeyServerPriority,omitempty"`
	MacSecEaPol       NullableFabricMacSecEaPol `json:"MacSecEaPol,omitempty"`
	PrimaryKeyChain   NullableFabricSecKeyChain `json:"PrimaryKeyChain,omitempty"`
	// Defines the size of the replay protection window. It determines the number of packets that can be received out of order without being considered replay attacks.
	ReplayWindowSize *int64 `json:"ReplayWindowSize,omitempty"`
	// Time in seconds to force secure association key (SAK) rekey. Valid range is from 60 to 2592000 seconds when configured. When not configured, the SAK rekey interval is determined based on the interface speed.
	SakExpiryTime *int64 `json:"SakExpiryTime,omitempty"`
	// The security policy specifies the level of MACsec enforcement on network traffic passing through a given interface. Should secure allows unencrypted traffic to flow until the MACsec key agreement (MKA) session is secured. After the MKA session is secured, the policy switches to only allow encrypted traffic to flow. Must secure imposes only MACsec encrypted traffic to flow. Traffic will be dropped, until the MKA session is not secured. * `Should-secure` - Should secure allows unencrypted traffic to flow until the MACsec key agreement (MKA) session is secured. After the MKA session is secured, the policy switches to only allow encrypted traffic to flow. * `Must-secure` - Must secure imposes only MACsec encrypted traffic to flow. Traffic will be dropped, until the MKA session is not secured.
	SecurityPolicy       *string                                      `json:"SecurityPolicy,omitempty"`
	Organization         NullableOrganizationOrganizationRelationship `json:"Organization,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _FabricMacSecPolicy FabricMacSecPolicy

// NewFabricMacSecPolicy instantiates a new FabricMacSecPolicy object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFabricMacSecPolicy(classId string, objectType string) *FabricMacSecPolicy {
	this := FabricMacSecPolicy{}
	this.ClassId = classId
	this.ObjectType = objectType
	var cipherSuite string = "GCM-AES-XPN-256"
	this.CipherSuite = &cipherSuite
	var confidentialityOffset string = "CONF-OFFSET-0"
	this.ConfidentialityOffset = &confidentialityOffset
	var includeIcvIndicator bool = false
	this.IncludeIcvIndicator = &includeIcvIndicator
	var keyServerPriority int64 = 16
	this.KeyServerPriority = &keyServerPriority
	var replayWindowSize int64 = 148809600
	this.ReplayWindowSize = &replayWindowSize
	var securityPolicy string = "Should-secure"
	this.SecurityPolicy = &securityPolicy
	return &this
}

// NewFabricMacSecPolicyWithDefaults instantiates a new FabricMacSecPolicy object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFabricMacSecPolicyWithDefaults() *FabricMacSecPolicy {
	this := FabricMacSecPolicy{}
	var classId string = "fabric.MacSecPolicy"
	this.ClassId = classId
	var objectType string = "fabric.MacSecPolicy"
	this.ObjectType = objectType
	var cipherSuite string = "GCM-AES-XPN-256"
	this.CipherSuite = &cipherSuite
	var confidentialityOffset string = "CONF-OFFSET-0"
	this.ConfidentialityOffset = &confidentialityOffset
	var includeIcvIndicator bool = false
	this.IncludeIcvIndicator = &includeIcvIndicator
	var keyServerPriority int64 = 16
	this.KeyServerPriority = &keyServerPriority
	var replayWindowSize int64 = 148809600
	this.ReplayWindowSize = &replayWindowSize
	var securityPolicy string = "Should-secure"
	this.SecurityPolicy = &securityPolicy
	return &this
}

// GetClassId returns the ClassId field value
func (o *FabricMacSecPolicy) GetClassId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ClassId
}

// GetClassIdOk returns a tuple with the ClassId field value
// and a boolean to check if the value has been set.
func (o *FabricMacSecPolicy) GetClassIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ClassId, true
}

// SetClassId sets field value
func (o *FabricMacSecPolicy) SetClassId(v string) {
	o.ClassId = v
}

// GetDefaultClassId returns the default value "fabric.MacSecPolicy" of the ClassId field.
func (o *FabricMacSecPolicy) GetDefaultClassId() interface{} {
	return "fabric.MacSecPolicy"
}

// GetObjectType returns the ObjectType field value
func (o *FabricMacSecPolicy) GetObjectType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ObjectType
}

// GetObjectTypeOk returns a tuple with the ObjectType field value
// and a boolean to check if the value has been set.
func (o *FabricMacSecPolicy) GetObjectTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ObjectType, true
}

// SetObjectType sets field value
func (o *FabricMacSecPolicy) SetObjectType(v string) {
	o.ObjectType = v
}

// GetDefaultObjectType returns the default value "fabric.MacSecPolicy" of the ObjectType field.
func (o *FabricMacSecPolicy) GetDefaultObjectType() interface{} {
	return "fabric.MacSecPolicy"
}

// GetCipherSuite returns the CipherSuite field value if set, zero value otherwise.
func (o *FabricMacSecPolicy) GetCipherSuite() string {
	if o == nil || IsNil(o.CipherSuite) {
		var ret string
		return ret
	}
	return *o.CipherSuite
}

// GetCipherSuiteOk returns a tuple with the CipherSuite field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FabricMacSecPolicy) GetCipherSuiteOk() (*string, bool) {
	if o == nil || IsNil(o.CipherSuite) {
		return nil, false
	}
	return o.CipherSuite, true
}

// HasCipherSuite returns a boolean if a field has been set.
func (o *FabricMacSecPolicy) HasCipherSuite() bool {
	if o != nil && !IsNil(o.CipherSuite) {
		return true
	}

	return false
}

// SetCipherSuite gets a reference to the given string and assigns it to the CipherSuite field.
func (o *FabricMacSecPolicy) SetCipherSuite(v string) {
	o.CipherSuite = &v
}

// GetConfidentialityOffset returns the ConfidentialityOffset field value if set, zero value otherwise.
func (o *FabricMacSecPolicy) GetConfidentialityOffset() string {
	if o == nil || IsNil(o.ConfidentialityOffset) {
		var ret string
		return ret
	}
	return *o.ConfidentialityOffset
}

// GetConfidentialityOffsetOk returns a tuple with the ConfidentialityOffset field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FabricMacSecPolicy) GetConfidentialityOffsetOk() (*string, bool) {
	if o == nil || IsNil(o.ConfidentialityOffset) {
		return nil, false
	}
	return o.ConfidentialityOffset, true
}

// HasConfidentialityOffset returns a boolean if a field has been set.
func (o *FabricMacSecPolicy) HasConfidentialityOffset() bool {
	if o != nil && !IsNil(o.ConfidentialityOffset) {
		return true
	}

	return false
}

// SetConfidentialityOffset gets a reference to the given string and assigns it to the ConfidentialityOffset field.
func (o *FabricMacSecPolicy) SetConfidentialityOffset(v string) {
	o.ConfidentialityOffset = &v
}

// GetFallbackKeyChain returns the FallbackKeyChain field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FabricMacSecPolicy) GetFallbackKeyChain() FabricSecKeyChain {
	if o == nil || IsNil(o.FallbackKeyChain.Get()) {
		var ret FabricSecKeyChain
		return ret
	}
	return *o.FallbackKeyChain.Get()
}

// GetFallbackKeyChainOk returns a tuple with the FallbackKeyChain field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FabricMacSecPolicy) GetFallbackKeyChainOk() (*FabricSecKeyChain, bool) {
	if o == nil {
		return nil, false
	}
	return o.FallbackKeyChain.Get(), o.FallbackKeyChain.IsSet()
}

// HasFallbackKeyChain returns a boolean if a field has been set.
func (o *FabricMacSecPolicy) HasFallbackKeyChain() bool {
	if o != nil && o.FallbackKeyChain.IsSet() {
		return true
	}

	return false
}

// SetFallbackKeyChain gets a reference to the given NullableFabricSecKeyChain and assigns it to the FallbackKeyChain field.
func (o *FabricMacSecPolicy) SetFallbackKeyChain(v FabricSecKeyChain) {
	o.FallbackKeyChain.Set(&v)
}

// SetFallbackKeyChainNil sets the value for FallbackKeyChain to be an explicit nil
func (o *FabricMacSecPolicy) SetFallbackKeyChainNil() {
	o.FallbackKeyChain.Set(nil)
}

// UnsetFallbackKeyChain ensures that no value is present for FallbackKeyChain, not even an explicit nil
func (o *FabricMacSecPolicy) UnsetFallbackKeyChain() {
	o.FallbackKeyChain.Unset()
}

// GetIncludeIcvIndicator returns the IncludeIcvIndicator field value if set, zero value otherwise.
func (o *FabricMacSecPolicy) GetIncludeIcvIndicator() bool {
	if o == nil || IsNil(o.IncludeIcvIndicator) {
		var ret bool
		return ret
	}
	return *o.IncludeIcvIndicator
}

// GetIncludeIcvIndicatorOk returns a tuple with the IncludeIcvIndicator field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FabricMacSecPolicy) GetIncludeIcvIndicatorOk() (*bool, bool) {
	if o == nil || IsNil(o.IncludeIcvIndicator) {
		return nil, false
	}
	return o.IncludeIcvIndicator, true
}

// HasIncludeIcvIndicator returns a boolean if a field has been set.
func (o *FabricMacSecPolicy) HasIncludeIcvIndicator() bool {
	if o != nil && !IsNil(o.IncludeIcvIndicator) {
		return true
	}

	return false
}

// SetIncludeIcvIndicator gets a reference to the given bool and assigns it to the IncludeIcvIndicator field.
func (o *FabricMacSecPolicy) SetIncludeIcvIndicator(v bool) {
	o.IncludeIcvIndicator = &v
}

// GetKeyServerPriority returns the KeyServerPriority field value if set, zero value otherwise.
func (o *FabricMacSecPolicy) GetKeyServerPriority() int64 {
	if o == nil || IsNil(o.KeyServerPriority) {
		var ret int64
		return ret
	}
	return *o.KeyServerPriority
}

// GetKeyServerPriorityOk returns a tuple with the KeyServerPriority field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FabricMacSecPolicy) GetKeyServerPriorityOk() (*int64, bool) {
	if o == nil || IsNil(o.KeyServerPriority) {
		return nil, false
	}
	return o.KeyServerPriority, true
}

// HasKeyServerPriority returns a boolean if a field has been set.
func (o *FabricMacSecPolicy) HasKeyServerPriority() bool {
	if o != nil && !IsNil(o.KeyServerPriority) {
		return true
	}

	return false
}

// SetKeyServerPriority gets a reference to the given int64 and assigns it to the KeyServerPriority field.
func (o *FabricMacSecPolicy) SetKeyServerPriority(v int64) {
	o.KeyServerPriority = &v
}

// GetMacSecEaPol returns the MacSecEaPol field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FabricMacSecPolicy) GetMacSecEaPol() FabricMacSecEaPol {
	if o == nil || IsNil(o.MacSecEaPol.Get()) {
		var ret FabricMacSecEaPol
		return ret
	}
	return *o.MacSecEaPol.Get()
}

// GetMacSecEaPolOk returns a tuple with the MacSecEaPol field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FabricMacSecPolicy) GetMacSecEaPolOk() (*FabricMacSecEaPol, bool) {
	if o == nil {
		return nil, false
	}
	return o.MacSecEaPol.Get(), o.MacSecEaPol.IsSet()
}

// HasMacSecEaPol returns a boolean if a field has been set.
func (o *FabricMacSecPolicy) HasMacSecEaPol() bool {
	if o != nil && o.MacSecEaPol.IsSet() {
		return true
	}

	return false
}

// SetMacSecEaPol gets a reference to the given NullableFabricMacSecEaPol and assigns it to the MacSecEaPol field.
func (o *FabricMacSecPolicy) SetMacSecEaPol(v FabricMacSecEaPol) {
	o.MacSecEaPol.Set(&v)
}

// SetMacSecEaPolNil sets the value for MacSecEaPol to be an explicit nil
func (o *FabricMacSecPolicy) SetMacSecEaPolNil() {
	o.MacSecEaPol.Set(nil)
}

// UnsetMacSecEaPol ensures that no value is present for MacSecEaPol, not even an explicit nil
func (o *FabricMacSecPolicy) UnsetMacSecEaPol() {
	o.MacSecEaPol.Unset()
}

// GetPrimaryKeyChain returns the PrimaryKeyChain field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FabricMacSecPolicy) GetPrimaryKeyChain() FabricSecKeyChain {
	if o == nil || IsNil(o.PrimaryKeyChain.Get()) {
		var ret FabricSecKeyChain
		return ret
	}
	return *o.PrimaryKeyChain.Get()
}

// GetPrimaryKeyChainOk returns a tuple with the PrimaryKeyChain field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FabricMacSecPolicy) GetPrimaryKeyChainOk() (*FabricSecKeyChain, bool) {
	if o == nil {
		return nil, false
	}
	return o.PrimaryKeyChain.Get(), o.PrimaryKeyChain.IsSet()
}

// HasPrimaryKeyChain returns a boolean if a field has been set.
func (o *FabricMacSecPolicy) HasPrimaryKeyChain() bool {
	if o != nil && o.PrimaryKeyChain.IsSet() {
		return true
	}

	return false
}

// SetPrimaryKeyChain gets a reference to the given NullableFabricSecKeyChain and assigns it to the PrimaryKeyChain field.
func (o *FabricMacSecPolicy) SetPrimaryKeyChain(v FabricSecKeyChain) {
	o.PrimaryKeyChain.Set(&v)
}

// SetPrimaryKeyChainNil sets the value for PrimaryKeyChain to be an explicit nil
func (o *FabricMacSecPolicy) SetPrimaryKeyChainNil() {
	o.PrimaryKeyChain.Set(nil)
}

// UnsetPrimaryKeyChain ensures that no value is present for PrimaryKeyChain, not even an explicit nil
func (o *FabricMacSecPolicy) UnsetPrimaryKeyChain() {
	o.PrimaryKeyChain.Unset()
}

// GetReplayWindowSize returns the ReplayWindowSize field value if set, zero value otherwise.
func (o *FabricMacSecPolicy) GetReplayWindowSize() int64 {
	if o == nil || IsNil(o.ReplayWindowSize) {
		var ret int64
		return ret
	}
	return *o.ReplayWindowSize
}

// GetReplayWindowSizeOk returns a tuple with the ReplayWindowSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FabricMacSecPolicy) GetReplayWindowSizeOk() (*int64, bool) {
	if o == nil || IsNil(o.ReplayWindowSize) {
		return nil, false
	}
	return o.ReplayWindowSize, true
}

// HasReplayWindowSize returns a boolean if a field has been set.
func (o *FabricMacSecPolicy) HasReplayWindowSize() bool {
	if o != nil && !IsNil(o.ReplayWindowSize) {
		return true
	}

	return false
}

// SetReplayWindowSize gets a reference to the given int64 and assigns it to the ReplayWindowSize field.
func (o *FabricMacSecPolicy) SetReplayWindowSize(v int64) {
	o.ReplayWindowSize = &v
}

// GetSakExpiryTime returns the SakExpiryTime field value if set, zero value otherwise.
func (o *FabricMacSecPolicy) GetSakExpiryTime() int64 {
	if o == nil || IsNil(o.SakExpiryTime) {
		var ret int64
		return ret
	}
	return *o.SakExpiryTime
}

// GetSakExpiryTimeOk returns a tuple with the SakExpiryTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FabricMacSecPolicy) GetSakExpiryTimeOk() (*int64, bool) {
	if o == nil || IsNil(o.SakExpiryTime) {
		return nil, false
	}
	return o.SakExpiryTime, true
}

// HasSakExpiryTime returns a boolean if a field has been set.
func (o *FabricMacSecPolicy) HasSakExpiryTime() bool {
	if o != nil && !IsNil(o.SakExpiryTime) {
		return true
	}

	return false
}

// SetSakExpiryTime gets a reference to the given int64 and assigns it to the SakExpiryTime field.
func (o *FabricMacSecPolicy) SetSakExpiryTime(v int64) {
	o.SakExpiryTime = &v
}

// GetSecurityPolicy returns the SecurityPolicy field value if set, zero value otherwise.
func (o *FabricMacSecPolicy) GetSecurityPolicy() string {
	if o == nil || IsNil(o.SecurityPolicy) {
		var ret string
		return ret
	}
	return *o.SecurityPolicy
}

// GetSecurityPolicyOk returns a tuple with the SecurityPolicy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FabricMacSecPolicy) GetSecurityPolicyOk() (*string, bool) {
	if o == nil || IsNil(o.SecurityPolicy) {
		return nil, false
	}
	return o.SecurityPolicy, true
}

// HasSecurityPolicy returns a boolean if a field has been set.
func (o *FabricMacSecPolicy) HasSecurityPolicy() bool {
	if o != nil && !IsNil(o.SecurityPolicy) {
		return true
	}

	return false
}

// SetSecurityPolicy gets a reference to the given string and assigns it to the SecurityPolicy field.
func (o *FabricMacSecPolicy) SetSecurityPolicy(v string) {
	o.SecurityPolicy = &v
}

// GetOrganization returns the Organization field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FabricMacSecPolicy) GetOrganization() OrganizationOrganizationRelationship {
	if o == nil || IsNil(o.Organization.Get()) {
		var ret OrganizationOrganizationRelationship
		return ret
	}
	return *o.Organization.Get()
}

// GetOrganizationOk returns a tuple with the Organization field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FabricMacSecPolicy) GetOrganizationOk() (*OrganizationOrganizationRelationship, bool) {
	if o == nil {
		return nil, false
	}
	return o.Organization.Get(), o.Organization.IsSet()
}

// HasOrganization returns a boolean if a field has been set.
func (o *FabricMacSecPolicy) HasOrganization() bool {
	if o != nil && o.Organization.IsSet() {
		return true
	}

	return false
}

// SetOrganization gets a reference to the given NullableOrganizationOrganizationRelationship and assigns it to the Organization field.
func (o *FabricMacSecPolicy) SetOrganization(v OrganizationOrganizationRelationship) {
	o.Organization.Set(&v)
}

// SetOrganizationNil sets the value for Organization to be an explicit nil
func (o *FabricMacSecPolicy) SetOrganizationNil() {
	o.Organization.Set(nil)
}

// UnsetOrganization ensures that no value is present for Organization, not even an explicit nil
func (o *FabricMacSecPolicy) UnsetOrganization() {
	o.Organization.Unset()
}

func (o FabricMacSecPolicy) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FabricMacSecPolicy) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	serializedPolicyAbstractPolicy, errPolicyAbstractPolicy := json.Marshal(o.PolicyAbstractPolicy)
	if errPolicyAbstractPolicy != nil {
		return map[string]interface{}{}, errPolicyAbstractPolicy
	}
	errPolicyAbstractPolicy = json.Unmarshal([]byte(serializedPolicyAbstractPolicy), &toSerialize)
	if errPolicyAbstractPolicy != nil {
		return map[string]interface{}{}, errPolicyAbstractPolicy
	}
	if _, exists := toSerialize["ClassId"]; !exists {
		toSerialize["ClassId"] = o.GetDefaultClassId()
	}
	toSerialize["ClassId"] = o.ClassId
	if _, exists := toSerialize["ObjectType"]; !exists {
		toSerialize["ObjectType"] = o.GetDefaultObjectType()
	}
	toSerialize["ObjectType"] = o.ObjectType
	if !IsNil(o.CipherSuite) {
		toSerialize["CipherSuite"] = o.CipherSuite
	}
	if !IsNil(o.ConfidentialityOffset) {
		toSerialize["ConfidentialityOffset"] = o.ConfidentialityOffset
	}
	if o.FallbackKeyChain.IsSet() {
		toSerialize["FallbackKeyChain"] = o.FallbackKeyChain.Get()
	}
	if !IsNil(o.IncludeIcvIndicator) {
		toSerialize["IncludeIcvIndicator"] = o.IncludeIcvIndicator
	}
	if !IsNil(o.KeyServerPriority) {
		toSerialize["KeyServerPriority"] = o.KeyServerPriority
	}
	if o.MacSecEaPol.IsSet() {
		toSerialize["MacSecEaPol"] = o.MacSecEaPol.Get()
	}
	if o.PrimaryKeyChain.IsSet() {
		toSerialize["PrimaryKeyChain"] = o.PrimaryKeyChain.Get()
	}
	if !IsNil(o.ReplayWindowSize) {
		toSerialize["ReplayWindowSize"] = o.ReplayWindowSize
	}
	if !IsNil(o.SakExpiryTime) {
		toSerialize["SakExpiryTime"] = o.SakExpiryTime
	}
	if !IsNil(o.SecurityPolicy) {
		toSerialize["SecurityPolicy"] = o.SecurityPolicy
	}
	if o.Organization.IsSet() {
		toSerialize["Organization"] = o.Organization.Get()
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *FabricMacSecPolicy) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"ClassId",
		"ObjectType",
	}

	// defaultValueFuncMap captures the default values for required properties.
	// These values are used when required properties are missing from the payload.
	defaultValueFuncMap := map[string]func() interface{}{
		"ClassId":    o.GetDefaultClassId,
		"ObjectType": o.GetDefaultObjectType,
	}
	var defaultValueApplied bool
	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			if _, ok := defaultValueFuncMap[requiredProperty]; ok {
				allProperties[requiredProperty] = defaultValueFuncMap[requiredProperty]()
				defaultValueApplied = true
			}
		}
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	if defaultValueApplied {
		data, err = json.Marshal(allProperties)
		if err != nil {
			return err
		}
	}
	type FabricMacSecPolicyWithoutEmbeddedStruct struct {
		// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.
		ClassId string `json:"ClassId"`
		// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
		ObjectType string `json:"ObjectType"`
		// Cipher suite to be used for MACsec encryption. * `GCM-AES-XPN-256` - An extended Cipher Suite of GCM-AES-256 used in MACsec (Media Access Control Security) that incorporates Extended Packet Numbering (XPN) for enhanced security and scalability. * `GCM-AES-128` - This Cipher Suite employs the Advanced Encryption Standard (AES) with a 128-bit key in Galois/Counter Mode, offering both encryption and authentication. * `GCM-AES-256` - This Cipher Suite utilizes Advanced Encryption Standard (AES) with a 256-bit key in Galois/Counter Mode, offering a higher level of security compared to GCM-AES-128 due to the larger key size. * `GCM-AES-XPN-128` - An extended Cipher Suite of GCM-AES-128  used in MACsec (Media Access Control Security) that incorporates Extended Packet Numbering (XPN) to enhance security and scalability.
		CipherSuite *string `json:"CipherSuite,omitempty"`
		// The MACsec confidentiality offset specifies the number of bytes starting from the frame header. MACsec encrypts only the bytes after the offset in a frame. * `CONF-OFFSET-0` - A value of 0 means the entire ethernet frame is encrypted. * `CONF-OFFSET-30` - The first 30 bytes of the ethernet frame are not encrypted, and the rest of the frame is encrypted. * `CONF-OFFSET-50` - The first 50 bytes of the ethernet frame are not encrypted, and the rest of the frame is encrypted.
		ConfidentialityOffset *string                   `json:"ConfidentialityOffset,omitempty"`
		FallbackKeyChain      NullableFabricSecKeyChain `json:"FallbackKeyChain,omitempty"`
		// Configures inclusion of the optional integrity check value (ICV) indicator as part of the transmitted MACsec key agreement protocol data unit (PDU).
		IncludeIcvIndicator *bool `json:"IncludeIcvIndicator,omitempty"`
		// The key server is selected by comparing key-server priority values during MACsec key agreement (MKA) message exchange between peer devices. Valid values range from 0 to 255. The lower the value, the higher the chance it will be selected as the key server.
		KeyServerPriority *int64                    `json:"KeyServerPriority,omitempty"`
		MacSecEaPol       NullableFabricMacSecEaPol `json:"MacSecEaPol,omitempty"`
		PrimaryKeyChain   NullableFabricSecKeyChain `json:"PrimaryKeyChain,omitempty"`
		// Defines the size of the replay protection window. It determines the number of packets that can be received out of order without being considered replay attacks.
		ReplayWindowSize *int64 `json:"ReplayWindowSize,omitempty"`
		// Time in seconds to force secure association key (SAK) rekey. Valid range is from 60 to 2592000 seconds when configured. When not configured, the SAK rekey interval is determined based on the interface speed.
		SakExpiryTime *int64 `json:"SakExpiryTime,omitempty"`
		// The security policy specifies the level of MACsec enforcement on network traffic passing through a given interface. Should secure allows unencrypted traffic to flow until the MACsec key agreement (MKA) session is secured. After the MKA session is secured, the policy switches to only allow encrypted traffic to flow. Must secure imposes only MACsec encrypted traffic to flow. Traffic will be dropped, until the MKA session is not secured. * `Should-secure` - Should secure allows unencrypted traffic to flow until the MACsec key agreement (MKA) session is secured. After the MKA session is secured, the policy switches to only allow encrypted traffic to flow. * `Must-secure` - Must secure imposes only MACsec encrypted traffic to flow. Traffic will be dropped, until the MKA session is not secured.
		SecurityPolicy *string                                      `json:"SecurityPolicy,omitempty"`
		Organization   NullableOrganizationOrganizationRelationship `json:"Organization,omitempty"`
	}

	varFabricMacSecPolicyWithoutEmbeddedStruct := FabricMacSecPolicyWithoutEmbeddedStruct{}

	err = json.Unmarshal(data, &varFabricMacSecPolicyWithoutEmbeddedStruct)
	if err == nil {
		varFabricMacSecPolicy := _FabricMacSecPolicy{}
		varFabricMacSecPolicy.ClassId = varFabricMacSecPolicyWithoutEmbeddedStruct.ClassId
		varFabricMacSecPolicy.ObjectType = varFabricMacSecPolicyWithoutEmbeddedStruct.ObjectType
		varFabricMacSecPolicy.CipherSuite = varFabricMacSecPolicyWithoutEmbeddedStruct.CipherSuite
		varFabricMacSecPolicy.ConfidentialityOffset = varFabricMacSecPolicyWithoutEmbeddedStruct.ConfidentialityOffset
		varFabricMacSecPolicy.FallbackKeyChain = varFabricMacSecPolicyWithoutEmbeddedStruct.FallbackKeyChain
		varFabricMacSecPolicy.IncludeIcvIndicator = varFabricMacSecPolicyWithoutEmbeddedStruct.IncludeIcvIndicator
		varFabricMacSecPolicy.KeyServerPriority = varFabricMacSecPolicyWithoutEmbeddedStruct.KeyServerPriority
		varFabricMacSecPolicy.MacSecEaPol = varFabricMacSecPolicyWithoutEmbeddedStruct.MacSecEaPol
		varFabricMacSecPolicy.PrimaryKeyChain = varFabricMacSecPolicyWithoutEmbeddedStruct.PrimaryKeyChain
		varFabricMacSecPolicy.ReplayWindowSize = varFabricMacSecPolicyWithoutEmbeddedStruct.ReplayWindowSize
		varFabricMacSecPolicy.SakExpiryTime = varFabricMacSecPolicyWithoutEmbeddedStruct.SakExpiryTime
		varFabricMacSecPolicy.SecurityPolicy = varFabricMacSecPolicyWithoutEmbeddedStruct.SecurityPolicy
		varFabricMacSecPolicy.Organization = varFabricMacSecPolicyWithoutEmbeddedStruct.Organization
		*o = FabricMacSecPolicy(varFabricMacSecPolicy)
	} else {
		return err
	}

	varFabricMacSecPolicy := _FabricMacSecPolicy{}

	err = json.Unmarshal(data, &varFabricMacSecPolicy)
	if err == nil {
		o.PolicyAbstractPolicy = varFabricMacSecPolicy.PolicyAbstractPolicy
	} else {
		return err
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "ClassId")
		delete(additionalProperties, "ObjectType")
		delete(additionalProperties, "CipherSuite")
		delete(additionalProperties, "ConfidentialityOffset")
		delete(additionalProperties, "FallbackKeyChain")
		delete(additionalProperties, "IncludeIcvIndicator")
		delete(additionalProperties, "KeyServerPriority")
		delete(additionalProperties, "MacSecEaPol")
		delete(additionalProperties, "PrimaryKeyChain")
		delete(additionalProperties, "ReplayWindowSize")
		delete(additionalProperties, "SakExpiryTime")
		delete(additionalProperties, "SecurityPolicy")
		delete(additionalProperties, "Organization")

		// remove fields from embedded structs
		reflectPolicyAbstractPolicy := reflect.ValueOf(o.PolicyAbstractPolicy)
		for i := 0; i < reflectPolicyAbstractPolicy.Type().NumField(); i++ {
			t := reflectPolicyAbstractPolicy.Type().Field(i)

			if jsonTag := t.Tag.Get("json"); jsonTag != "" {
				fieldName := ""
				if commaIdx := strings.Index(jsonTag, ","); commaIdx > 0 {
					fieldName = jsonTag[:commaIdx]
				} else {
					fieldName = jsonTag
				}
				if fieldName != "AdditionalProperties" {
					delete(additionalProperties, fieldName)
				}
			}
		}

		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableFabricMacSecPolicy struct {
	value *FabricMacSecPolicy
	isSet bool
}

func (v NullableFabricMacSecPolicy) Get() *FabricMacSecPolicy {
	return v.value
}

func (v *NullableFabricMacSecPolicy) Set(val *FabricMacSecPolicy) {
	v.value = val
	v.isSet = true
}

func (v NullableFabricMacSecPolicy) IsSet() bool {
	return v.isSet
}

func (v *NullableFabricMacSecPolicy) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFabricMacSecPolicy(val *FabricMacSecPolicy) *NullableFabricMacSecPolicy {
	return &NullableFabricMacSecPolicy{value: val, isSet: true}
}

func (v NullableFabricMacSecPolicy) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFabricMacSecPolicy) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
