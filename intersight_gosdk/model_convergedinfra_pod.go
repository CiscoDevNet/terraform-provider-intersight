/*
Cisco Intersight

Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations. The Intersight OpenAPI document defines the complete set of properties that are returned in the HTTP response. From that perspective, a client can expect that no additional properties are returned, unless these properties are explicitly defined in the OpenAPI document. However, when a client uses an older version of the Intersight OpenAPI document, the server may send additional properties because the software is more recent than the client. In that case, the client may receive properties that it does not know about. Some generated SDKs perform a strict validation of the HTTP response body against the OpenAPI document.

API version: 1.0.11-2024100405
Contact: intersight@cisco.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package intersight

import (
	"encoding/json"
	"fmt"
	"reflect"
	"strings"
)

// checks if the ConvergedinfraPod type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ConvergedinfraPod{}

// ConvergedinfraPod A pod is unit of deployment of converged infrastructure. Contains inventory information related to the health, HCL, storage, nodes, etc. of the pod.
type ConvergedinfraPod struct {
	ConvergedinfraBasePod
	// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.
	ClassId string `json:"ClassId"`
	// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
	ObjectType string `json:"ObjectType"`
	// The deployment type for this integrated system. * `FlexPodInfra` - The deployment type for a pod is of Infrastructure. * `FlexPodNG` - The deployment type for a pod is of Nextgen type.
	DeploymentType *string `json:"DeploymentType,omitempty"`
	// The interoperability status for this solution pod. * `NotEvaluated` - The interoperability compliance for the component has not be checked. * `Approved` - The component is valid as per the interoperability compliance check. * `NotApproved` - The component is not valid as per the interoperability compliance check. * `Incomplete` - The interoperability compliance check could not be completed for the component due to incomplete data.
	InteropStatus        *string                                             `json:"InteropStatus,omitempty"`
	Summary              *ConvergedinfraPodSummary                           `json:"Summary,omitempty"`
	Organization         NullableOrganizationOrganizationRelationship        `json:"Organization,omitempty"`
	PodCompliance        NullableConvergedinfraPodComplianceInfoRelationship `json:"PodCompliance,omitempty"`
	PodResourceGroup     NullableResourceGroupRelationship                   `json:"PodResourceGroup,omitempty"`
	ServiceItemInstance  NullableWorkflowServiceItemInstanceRelationship     `json:"ServiceItemInstance,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ConvergedinfraPod ConvergedinfraPod

// NewConvergedinfraPod instantiates a new ConvergedinfraPod object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConvergedinfraPod(classId string, objectType string) *ConvergedinfraPod {
	this := ConvergedinfraPod{}
	this.ClassId = classId
	this.ObjectType = objectType
	var type_ string = "FlexPod"
	this.Type = &type_
	return &this
}

// NewConvergedinfraPodWithDefaults instantiates a new ConvergedinfraPod object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConvergedinfraPodWithDefaults() *ConvergedinfraPod {
	this := ConvergedinfraPod{}
	var classId string = "convergedinfra.Pod"
	this.ClassId = classId
	var objectType string = "convergedinfra.Pod"
	this.ObjectType = objectType
	return &this
}

// GetClassId returns the ClassId field value
func (o *ConvergedinfraPod) GetClassId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ClassId
}

// GetClassIdOk returns a tuple with the ClassId field value
// and a boolean to check if the value has been set.
func (o *ConvergedinfraPod) GetClassIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ClassId, true
}

// SetClassId sets field value
func (o *ConvergedinfraPod) SetClassId(v string) {
	o.ClassId = v
}

// GetDefaultClassId returns the default value "convergedinfra.Pod" of the ClassId field.
func (o *ConvergedinfraPod) GetDefaultClassId() interface{} {
	return "convergedinfra.Pod"
}

// GetObjectType returns the ObjectType field value
func (o *ConvergedinfraPod) GetObjectType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ObjectType
}

// GetObjectTypeOk returns a tuple with the ObjectType field value
// and a boolean to check if the value has been set.
func (o *ConvergedinfraPod) GetObjectTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ObjectType, true
}

// SetObjectType sets field value
func (o *ConvergedinfraPod) SetObjectType(v string) {
	o.ObjectType = v
}

// GetDefaultObjectType returns the default value "convergedinfra.Pod" of the ObjectType field.
func (o *ConvergedinfraPod) GetDefaultObjectType() interface{} {
	return "convergedinfra.Pod"
}

// GetDeploymentType returns the DeploymentType field value if set, zero value otherwise.
func (o *ConvergedinfraPod) GetDeploymentType() string {
	if o == nil || IsNil(o.DeploymentType) {
		var ret string
		return ret
	}
	return *o.DeploymentType
}

// GetDeploymentTypeOk returns a tuple with the DeploymentType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConvergedinfraPod) GetDeploymentTypeOk() (*string, bool) {
	if o == nil || IsNil(o.DeploymentType) {
		return nil, false
	}
	return o.DeploymentType, true
}

// HasDeploymentType returns a boolean if a field has been set.
func (o *ConvergedinfraPod) HasDeploymentType() bool {
	if o != nil && !IsNil(o.DeploymentType) {
		return true
	}

	return false
}

// SetDeploymentType gets a reference to the given string and assigns it to the DeploymentType field.
func (o *ConvergedinfraPod) SetDeploymentType(v string) {
	o.DeploymentType = &v
}

// GetInteropStatus returns the InteropStatus field value if set, zero value otherwise.
func (o *ConvergedinfraPod) GetInteropStatus() string {
	if o == nil || IsNil(o.InteropStatus) {
		var ret string
		return ret
	}
	return *o.InteropStatus
}

// GetInteropStatusOk returns a tuple with the InteropStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConvergedinfraPod) GetInteropStatusOk() (*string, bool) {
	if o == nil || IsNil(o.InteropStatus) {
		return nil, false
	}
	return o.InteropStatus, true
}

// HasInteropStatus returns a boolean if a field has been set.
func (o *ConvergedinfraPod) HasInteropStatus() bool {
	if o != nil && !IsNil(o.InteropStatus) {
		return true
	}

	return false
}

// SetInteropStatus gets a reference to the given string and assigns it to the InteropStatus field.
func (o *ConvergedinfraPod) SetInteropStatus(v string) {
	o.InteropStatus = &v
}

// GetSummary returns the Summary field value if set, zero value otherwise.
func (o *ConvergedinfraPod) GetSummary() ConvergedinfraPodSummary {
	if o == nil || IsNil(o.Summary) {
		var ret ConvergedinfraPodSummary
		return ret
	}
	return *o.Summary
}

// GetSummaryOk returns a tuple with the Summary field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConvergedinfraPod) GetSummaryOk() (*ConvergedinfraPodSummary, bool) {
	if o == nil || IsNil(o.Summary) {
		return nil, false
	}
	return o.Summary, true
}

// HasSummary returns a boolean if a field has been set.
func (o *ConvergedinfraPod) HasSummary() bool {
	if o != nil && !IsNil(o.Summary) {
		return true
	}

	return false
}

// SetSummary gets a reference to the given ConvergedinfraPodSummary and assigns it to the Summary field.
func (o *ConvergedinfraPod) SetSummary(v ConvergedinfraPodSummary) {
	o.Summary = &v
}

// GetOrganization returns the Organization field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ConvergedinfraPod) GetOrganization() OrganizationOrganizationRelationship {
	if o == nil || IsNil(o.Organization.Get()) {
		var ret OrganizationOrganizationRelationship
		return ret
	}
	return *o.Organization.Get()
}

// GetOrganizationOk returns a tuple with the Organization field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ConvergedinfraPod) GetOrganizationOk() (*OrganizationOrganizationRelationship, bool) {
	if o == nil {
		return nil, false
	}
	return o.Organization.Get(), o.Organization.IsSet()
}

// HasOrganization returns a boolean if a field has been set.
func (o *ConvergedinfraPod) HasOrganization() bool {
	if o != nil && o.Organization.IsSet() {
		return true
	}

	return false
}

// SetOrganization gets a reference to the given NullableOrganizationOrganizationRelationship and assigns it to the Organization field.
func (o *ConvergedinfraPod) SetOrganization(v OrganizationOrganizationRelationship) {
	o.Organization.Set(&v)
}

// SetOrganizationNil sets the value for Organization to be an explicit nil
func (o *ConvergedinfraPod) SetOrganizationNil() {
	o.Organization.Set(nil)
}

// UnsetOrganization ensures that no value is present for Organization, not even an explicit nil
func (o *ConvergedinfraPod) UnsetOrganization() {
	o.Organization.Unset()
}

// GetPodCompliance returns the PodCompliance field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ConvergedinfraPod) GetPodCompliance() ConvergedinfraPodComplianceInfoRelationship {
	if o == nil || IsNil(o.PodCompliance.Get()) {
		var ret ConvergedinfraPodComplianceInfoRelationship
		return ret
	}
	return *o.PodCompliance.Get()
}

// GetPodComplianceOk returns a tuple with the PodCompliance field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ConvergedinfraPod) GetPodComplianceOk() (*ConvergedinfraPodComplianceInfoRelationship, bool) {
	if o == nil {
		return nil, false
	}
	return o.PodCompliance.Get(), o.PodCompliance.IsSet()
}

// HasPodCompliance returns a boolean if a field has been set.
func (o *ConvergedinfraPod) HasPodCompliance() bool {
	if o != nil && o.PodCompliance.IsSet() {
		return true
	}

	return false
}

// SetPodCompliance gets a reference to the given NullableConvergedinfraPodComplianceInfoRelationship and assigns it to the PodCompliance field.
func (o *ConvergedinfraPod) SetPodCompliance(v ConvergedinfraPodComplianceInfoRelationship) {
	o.PodCompliance.Set(&v)
}

// SetPodComplianceNil sets the value for PodCompliance to be an explicit nil
func (o *ConvergedinfraPod) SetPodComplianceNil() {
	o.PodCompliance.Set(nil)
}

// UnsetPodCompliance ensures that no value is present for PodCompliance, not even an explicit nil
func (o *ConvergedinfraPod) UnsetPodCompliance() {
	o.PodCompliance.Unset()
}

// GetPodResourceGroup returns the PodResourceGroup field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ConvergedinfraPod) GetPodResourceGroup() ResourceGroupRelationship {
	if o == nil || IsNil(o.PodResourceGroup.Get()) {
		var ret ResourceGroupRelationship
		return ret
	}
	return *o.PodResourceGroup.Get()
}

// GetPodResourceGroupOk returns a tuple with the PodResourceGroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ConvergedinfraPod) GetPodResourceGroupOk() (*ResourceGroupRelationship, bool) {
	if o == nil {
		return nil, false
	}
	return o.PodResourceGroup.Get(), o.PodResourceGroup.IsSet()
}

// HasPodResourceGroup returns a boolean if a field has been set.
func (o *ConvergedinfraPod) HasPodResourceGroup() bool {
	if o != nil && o.PodResourceGroup.IsSet() {
		return true
	}

	return false
}

// SetPodResourceGroup gets a reference to the given NullableResourceGroupRelationship and assigns it to the PodResourceGroup field.
func (o *ConvergedinfraPod) SetPodResourceGroup(v ResourceGroupRelationship) {
	o.PodResourceGroup.Set(&v)
}

// SetPodResourceGroupNil sets the value for PodResourceGroup to be an explicit nil
func (o *ConvergedinfraPod) SetPodResourceGroupNil() {
	o.PodResourceGroup.Set(nil)
}

// UnsetPodResourceGroup ensures that no value is present for PodResourceGroup, not even an explicit nil
func (o *ConvergedinfraPod) UnsetPodResourceGroup() {
	o.PodResourceGroup.Unset()
}

// GetServiceItemInstance returns the ServiceItemInstance field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ConvergedinfraPod) GetServiceItemInstance() WorkflowServiceItemInstanceRelationship {
	if o == nil || IsNil(o.ServiceItemInstance.Get()) {
		var ret WorkflowServiceItemInstanceRelationship
		return ret
	}
	return *o.ServiceItemInstance.Get()
}

// GetServiceItemInstanceOk returns a tuple with the ServiceItemInstance field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ConvergedinfraPod) GetServiceItemInstanceOk() (*WorkflowServiceItemInstanceRelationship, bool) {
	if o == nil {
		return nil, false
	}
	return o.ServiceItemInstance.Get(), o.ServiceItemInstance.IsSet()
}

// HasServiceItemInstance returns a boolean if a field has been set.
func (o *ConvergedinfraPod) HasServiceItemInstance() bool {
	if o != nil && o.ServiceItemInstance.IsSet() {
		return true
	}

	return false
}

// SetServiceItemInstance gets a reference to the given NullableWorkflowServiceItemInstanceRelationship and assigns it to the ServiceItemInstance field.
func (o *ConvergedinfraPod) SetServiceItemInstance(v WorkflowServiceItemInstanceRelationship) {
	o.ServiceItemInstance.Set(&v)
}

// SetServiceItemInstanceNil sets the value for ServiceItemInstance to be an explicit nil
func (o *ConvergedinfraPod) SetServiceItemInstanceNil() {
	o.ServiceItemInstance.Set(nil)
}

// UnsetServiceItemInstance ensures that no value is present for ServiceItemInstance, not even an explicit nil
func (o *ConvergedinfraPod) UnsetServiceItemInstance() {
	o.ServiceItemInstance.Unset()
}

func (o ConvergedinfraPod) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ConvergedinfraPod) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	serializedConvergedinfraBasePod, errConvergedinfraBasePod := json.Marshal(o.ConvergedinfraBasePod)
	if errConvergedinfraBasePod != nil {
		return map[string]interface{}{}, errConvergedinfraBasePod
	}
	errConvergedinfraBasePod = json.Unmarshal([]byte(serializedConvergedinfraBasePod), &toSerialize)
	if errConvergedinfraBasePod != nil {
		return map[string]interface{}{}, errConvergedinfraBasePod
	}
	if _, exists := toSerialize["ClassId"]; !exists {
		toSerialize["ClassId"] = o.GetDefaultClassId()
	}
	toSerialize["ClassId"] = o.ClassId
	if _, exists := toSerialize["ObjectType"]; !exists {
		toSerialize["ObjectType"] = o.GetDefaultObjectType()
	}
	toSerialize["ObjectType"] = o.ObjectType
	if !IsNil(o.DeploymentType) {
		toSerialize["DeploymentType"] = o.DeploymentType
	}
	if !IsNil(o.InteropStatus) {
		toSerialize["InteropStatus"] = o.InteropStatus
	}
	if !IsNil(o.Summary) {
		toSerialize["Summary"] = o.Summary
	}
	if o.Organization.IsSet() {
		toSerialize["Organization"] = o.Organization.Get()
	}
	if o.PodCompliance.IsSet() {
		toSerialize["PodCompliance"] = o.PodCompliance.Get()
	}
	if o.PodResourceGroup.IsSet() {
		toSerialize["PodResourceGroup"] = o.PodResourceGroup.Get()
	}
	if o.ServiceItemInstance.IsSet() {
		toSerialize["ServiceItemInstance"] = o.ServiceItemInstance.Get()
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ConvergedinfraPod) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"ClassId",
		"ObjectType",
	}

	// defaultValueFuncMap captures the default values for required properties.
	// These values are used when required properties are missing from the payload.
	defaultValueFuncMap := map[string]func() interface{}{
		"ClassId":    o.GetDefaultClassId,
		"ObjectType": o.GetDefaultObjectType,
	}
	var defaultValueApplied bool
	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			if _, ok := defaultValueFuncMap[requiredProperty]; ok {
				allProperties[requiredProperty] = defaultValueFuncMap[requiredProperty]()
				defaultValueApplied = true
			}
		}
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	if defaultValueApplied {
		data, err = json.Marshal(allProperties)
		if err != nil {
			return err
		}
	}
	type ConvergedinfraPodWithoutEmbeddedStruct struct {
		// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.
		ClassId string `json:"ClassId"`
		// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
		ObjectType string `json:"ObjectType"`
		// The deployment type for this integrated system. * `FlexPodInfra` - The deployment type for a pod is of Infrastructure. * `FlexPodNG` - The deployment type for a pod is of Nextgen type.
		DeploymentType *string `json:"DeploymentType,omitempty"`
		// The interoperability status for this solution pod. * `NotEvaluated` - The interoperability compliance for the component has not be checked. * `Approved` - The component is valid as per the interoperability compliance check. * `NotApproved` - The component is not valid as per the interoperability compliance check. * `Incomplete` - The interoperability compliance check could not be completed for the component due to incomplete data.
		InteropStatus       *string                                             `json:"InteropStatus,omitempty"`
		Summary             *ConvergedinfraPodSummary                           `json:"Summary,omitempty"`
		Organization        NullableOrganizationOrganizationRelationship        `json:"Organization,omitempty"`
		PodCompliance       NullableConvergedinfraPodComplianceInfoRelationship `json:"PodCompliance,omitempty"`
		PodResourceGroup    NullableResourceGroupRelationship                   `json:"PodResourceGroup,omitempty"`
		ServiceItemInstance NullableWorkflowServiceItemInstanceRelationship     `json:"ServiceItemInstance,omitempty"`
	}

	varConvergedinfraPodWithoutEmbeddedStruct := ConvergedinfraPodWithoutEmbeddedStruct{}

	err = json.Unmarshal(data, &varConvergedinfraPodWithoutEmbeddedStruct)
	if err == nil {
		varConvergedinfraPod := _ConvergedinfraPod{}
		varConvergedinfraPod.ClassId = varConvergedinfraPodWithoutEmbeddedStruct.ClassId
		varConvergedinfraPod.ObjectType = varConvergedinfraPodWithoutEmbeddedStruct.ObjectType
		varConvergedinfraPod.DeploymentType = varConvergedinfraPodWithoutEmbeddedStruct.DeploymentType
		varConvergedinfraPod.InteropStatus = varConvergedinfraPodWithoutEmbeddedStruct.InteropStatus
		varConvergedinfraPod.Summary = varConvergedinfraPodWithoutEmbeddedStruct.Summary
		varConvergedinfraPod.Organization = varConvergedinfraPodWithoutEmbeddedStruct.Organization
		varConvergedinfraPod.PodCompliance = varConvergedinfraPodWithoutEmbeddedStruct.PodCompliance
		varConvergedinfraPod.PodResourceGroup = varConvergedinfraPodWithoutEmbeddedStruct.PodResourceGroup
		varConvergedinfraPod.ServiceItemInstance = varConvergedinfraPodWithoutEmbeddedStruct.ServiceItemInstance
		*o = ConvergedinfraPod(varConvergedinfraPod)
	} else {
		return err
	}

	varConvergedinfraPod := _ConvergedinfraPod{}

	err = json.Unmarshal(data, &varConvergedinfraPod)
	if err == nil {
		o.ConvergedinfraBasePod = varConvergedinfraPod.ConvergedinfraBasePod
	} else {
		return err
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "ClassId")
		delete(additionalProperties, "ObjectType")
		delete(additionalProperties, "DeploymentType")
		delete(additionalProperties, "InteropStatus")
		delete(additionalProperties, "Summary")
		delete(additionalProperties, "Organization")
		delete(additionalProperties, "PodCompliance")
		delete(additionalProperties, "PodResourceGroup")
		delete(additionalProperties, "ServiceItemInstance")

		// remove fields from embedded structs
		reflectConvergedinfraBasePod := reflect.ValueOf(o.ConvergedinfraBasePod)
		for i := 0; i < reflectConvergedinfraBasePod.Type().NumField(); i++ {
			t := reflectConvergedinfraBasePod.Type().Field(i)

			if jsonTag := t.Tag.Get("json"); jsonTag != "" {
				fieldName := ""
				if commaIdx := strings.Index(jsonTag, ","); commaIdx > 0 {
					fieldName = jsonTag[:commaIdx]
				} else {
					fieldName = jsonTag
				}
				if fieldName != "AdditionalProperties" {
					delete(additionalProperties, fieldName)
				}
			}
		}

		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableConvergedinfraPod struct {
	value *ConvergedinfraPod
	isSet bool
}

func (v NullableConvergedinfraPod) Get() *ConvergedinfraPod {
	return v.value
}

func (v *NullableConvergedinfraPod) Set(val *ConvergedinfraPod) {
	v.value = val
	v.isSet = true
}

func (v NullableConvergedinfraPod) IsSet() bool {
	return v.isSet
}

func (v *NullableConvergedinfraPod) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConvergedinfraPod(val *ConvergedinfraPod) *NullableConvergedinfraPod {
	return &NullableConvergedinfraPod{value: val, isSet: true}
}

func (v NullableConvergedinfraPod) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConvergedinfraPod) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
