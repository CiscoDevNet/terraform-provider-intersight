/*
 * Cisco Intersight
 *
 * Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations. The Intersight OpenAPI document defines the complete set of properties that are returned in the HTTP response. From that perspective, a client can expect that no additional properties are returned, unless these properties are explicitly defined in the OpenAPI document. However, when a client uses an older version of the Intersight OpenAPI document, the server may send additional properties because the software is more recent than the client. In that case, the client may receive properties that it does not know about. Some generated SDKs perform a strict validation of the HTTP response body against the OpenAPI document. This document was created on 2021-07-21T16:37:30Z.
 *
 * API version: 1.0.9-4403
 * Contact: intersight@cisco.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package intersight

import (
	"encoding/json"
	"reflect"
	"strings"
)

// ApplianceExternalSyslogSetting Configure External Syslog Server.
type ApplianceExternalSyslogSetting struct {
	MoBaseMo
	// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.
	ClassId string `json:"ClassId"`
	// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
	ObjectType string `json:"ObjectType"`
	// Enable or disable External Syslog Server.
	Enabled *bool `json:"Enabled,omitempty"`
	// Enable or disable exporting of Web Server access logs.
	ExportNginx *bool `json:"ExportNginx,omitempty"`
	// External Syslog Server Port for connection establishment.
	Port *int64 `json:"Port,omitempty"`
	// Protocol used to connect to external syslog server. * `TCP` - External Syslog messages sent over TCP. * `UDP` - External Syslog messages sent over UDP. * `TLS` - Secure External Syslog messages sent over TLS.
	Protocol *string `json:"Protocol,omitempty"`
	// External Syslog Server Address, can be IP address or hostname.
	Server               *string                 `json:"Server,omitempty"`
	Account              *IamAccountRelationship `json:"Account,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ApplianceExternalSyslogSetting ApplianceExternalSyslogSetting

// NewApplianceExternalSyslogSetting instantiates a new ApplianceExternalSyslogSetting object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApplianceExternalSyslogSetting(classId string, objectType string) *ApplianceExternalSyslogSetting {
	this := ApplianceExternalSyslogSetting{}
	this.ClassId = classId
	this.ObjectType = objectType
	var enabled bool = false
	this.Enabled = &enabled
	var exportNginx bool = false
	this.ExportNginx = &exportNginx
	var port int64 = 10514
	this.Port = &port
	var protocol string = "TCP"
	this.Protocol = &protocol
	return &this
}

// NewApplianceExternalSyslogSettingWithDefaults instantiates a new ApplianceExternalSyslogSetting object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApplianceExternalSyslogSettingWithDefaults() *ApplianceExternalSyslogSetting {
	this := ApplianceExternalSyslogSetting{}
	var classId string = "appliance.ExternalSyslogSetting"
	this.ClassId = classId
	var objectType string = "appliance.ExternalSyslogSetting"
	this.ObjectType = objectType
	var enabled bool = false
	this.Enabled = &enabled
	var exportNginx bool = false
	this.ExportNginx = &exportNginx
	var port int64 = 10514
	this.Port = &port
	var protocol string = "TCP"
	this.Protocol = &protocol
	return &this
}

// GetClassId returns the ClassId field value
func (o *ApplianceExternalSyslogSetting) GetClassId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ClassId
}

// GetClassIdOk returns a tuple with the ClassId field value
// and a boolean to check if the value has been set.
func (o *ApplianceExternalSyslogSetting) GetClassIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ClassId, true
}

// SetClassId sets field value
func (o *ApplianceExternalSyslogSetting) SetClassId(v string) {
	o.ClassId = v
}

// GetObjectType returns the ObjectType field value
func (o *ApplianceExternalSyslogSetting) GetObjectType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ObjectType
}

// GetObjectTypeOk returns a tuple with the ObjectType field value
// and a boolean to check if the value has been set.
func (o *ApplianceExternalSyslogSetting) GetObjectTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ObjectType, true
}

// SetObjectType sets field value
func (o *ApplianceExternalSyslogSetting) SetObjectType(v string) {
	o.ObjectType = v
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *ApplianceExternalSyslogSetting) GetEnabled() bool {
	if o == nil || o.Enabled == nil {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplianceExternalSyslogSetting) GetEnabledOk() (*bool, bool) {
	if o == nil || o.Enabled == nil {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *ApplianceExternalSyslogSetting) HasEnabled() bool {
	if o != nil && o.Enabled != nil {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *ApplianceExternalSyslogSetting) SetEnabled(v bool) {
	o.Enabled = &v
}

// GetExportNginx returns the ExportNginx field value if set, zero value otherwise.
func (o *ApplianceExternalSyslogSetting) GetExportNginx() bool {
	if o == nil || o.ExportNginx == nil {
		var ret bool
		return ret
	}
	return *o.ExportNginx
}

// GetExportNginxOk returns a tuple with the ExportNginx field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplianceExternalSyslogSetting) GetExportNginxOk() (*bool, bool) {
	if o == nil || o.ExportNginx == nil {
		return nil, false
	}
	return o.ExportNginx, true
}

// HasExportNginx returns a boolean if a field has been set.
func (o *ApplianceExternalSyslogSetting) HasExportNginx() bool {
	if o != nil && o.ExportNginx != nil {
		return true
	}

	return false
}

// SetExportNginx gets a reference to the given bool and assigns it to the ExportNginx field.
func (o *ApplianceExternalSyslogSetting) SetExportNginx(v bool) {
	o.ExportNginx = &v
}

// GetPort returns the Port field value if set, zero value otherwise.
func (o *ApplianceExternalSyslogSetting) GetPort() int64 {
	if o == nil || o.Port == nil {
		var ret int64
		return ret
	}
	return *o.Port
}

// GetPortOk returns a tuple with the Port field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplianceExternalSyslogSetting) GetPortOk() (*int64, bool) {
	if o == nil || o.Port == nil {
		return nil, false
	}
	return o.Port, true
}

// HasPort returns a boolean if a field has been set.
func (o *ApplianceExternalSyslogSetting) HasPort() bool {
	if o != nil && o.Port != nil {
		return true
	}

	return false
}

// SetPort gets a reference to the given int64 and assigns it to the Port field.
func (o *ApplianceExternalSyslogSetting) SetPort(v int64) {
	o.Port = &v
}

// GetProtocol returns the Protocol field value if set, zero value otherwise.
func (o *ApplianceExternalSyslogSetting) GetProtocol() string {
	if o == nil || o.Protocol == nil {
		var ret string
		return ret
	}
	return *o.Protocol
}

// GetProtocolOk returns a tuple with the Protocol field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplianceExternalSyslogSetting) GetProtocolOk() (*string, bool) {
	if o == nil || o.Protocol == nil {
		return nil, false
	}
	return o.Protocol, true
}

// HasProtocol returns a boolean if a field has been set.
func (o *ApplianceExternalSyslogSetting) HasProtocol() bool {
	if o != nil && o.Protocol != nil {
		return true
	}

	return false
}

// SetProtocol gets a reference to the given string and assigns it to the Protocol field.
func (o *ApplianceExternalSyslogSetting) SetProtocol(v string) {
	o.Protocol = &v
}

// GetServer returns the Server field value if set, zero value otherwise.
func (o *ApplianceExternalSyslogSetting) GetServer() string {
	if o == nil || o.Server == nil {
		var ret string
		return ret
	}
	return *o.Server
}

// GetServerOk returns a tuple with the Server field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplianceExternalSyslogSetting) GetServerOk() (*string, bool) {
	if o == nil || o.Server == nil {
		return nil, false
	}
	return o.Server, true
}

// HasServer returns a boolean if a field has been set.
func (o *ApplianceExternalSyslogSetting) HasServer() bool {
	if o != nil && o.Server != nil {
		return true
	}

	return false
}

// SetServer gets a reference to the given string and assigns it to the Server field.
func (o *ApplianceExternalSyslogSetting) SetServer(v string) {
	o.Server = &v
}

// GetAccount returns the Account field value if set, zero value otherwise.
func (o *ApplianceExternalSyslogSetting) GetAccount() IamAccountRelationship {
	if o == nil || o.Account == nil {
		var ret IamAccountRelationship
		return ret
	}
	return *o.Account
}

// GetAccountOk returns a tuple with the Account field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplianceExternalSyslogSetting) GetAccountOk() (*IamAccountRelationship, bool) {
	if o == nil || o.Account == nil {
		return nil, false
	}
	return o.Account, true
}

// HasAccount returns a boolean if a field has been set.
func (o *ApplianceExternalSyslogSetting) HasAccount() bool {
	if o != nil && o.Account != nil {
		return true
	}

	return false
}

// SetAccount gets a reference to the given IamAccountRelationship and assigns it to the Account field.
func (o *ApplianceExternalSyslogSetting) SetAccount(v IamAccountRelationship) {
	o.Account = &v
}

func (o ApplianceExternalSyslogSetting) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	serializedMoBaseMo, errMoBaseMo := json.Marshal(o.MoBaseMo)
	if errMoBaseMo != nil {
		return []byte{}, errMoBaseMo
	}
	errMoBaseMo = json.Unmarshal([]byte(serializedMoBaseMo), &toSerialize)
	if errMoBaseMo != nil {
		return []byte{}, errMoBaseMo
	}
	if true {
		toSerialize["ClassId"] = o.ClassId
	}
	if true {
		toSerialize["ObjectType"] = o.ObjectType
	}
	if o.Enabled != nil {
		toSerialize["Enabled"] = o.Enabled
	}
	if o.ExportNginx != nil {
		toSerialize["ExportNginx"] = o.ExportNginx
	}
	if o.Port != nil {
		toSerialize["Port"] = o.Port
	}
	if o.Protocol != nil {
		toSerialize["Protocol"] = o.Protocol
	}
	if o.Server != nil {
		toSerialize["Server"] = o.Server
	}
	if o.Account != nil {
		toSerialize["Account"] = o.Account
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *ApplianceExternalSyslogSetting) UnmarshalJSON(bytes []byte) (err error) {
	type ApplianceExternalSyslogSettingWithoutEmbeddedStruct struct {
		// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.
		ClassId string `json:"ClassId"`
		// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
		ObjectType string `json:"ObjectType"`
		// Enable or disable External Syslog Server.
		Enabled *bool `json:"Enabled,omitempty"`
		// Enable or disable exporting of Web Server access logs.
		ExportNginx *bool `json:"ExportNginx,omitempty"`
		// External Syslog Server Port for connection establishment.
		Port *int64 `json:"Port,omitempty"`
		// Protocol used to connect to external syslog server. * `TCP` - External Syslog messages sent over TCP. * `UDP` - External Syslog messages sent over UDP. * `TLS` - Secure External Syslog messages sent over TLS.
		Protocol *string `json:"Protocol,omitempty"`
		// External Syslog Server Address, can be IP address or hostname.
		Server  *string                 `json:"Server,omitempty"`
		Account *IamAccountRelationship `json:"Account,omitempty"`
	}

	varApplianceExternalSyslogSettingWithoutEmbeddedStruct := ApplianceExternalSyslogSettingWithoutEmbeddedStruct{}

	err = json.Unmarshal(bytes, &varApplianceExternalSyslogSettingWithoutEmbeddedStruct)
	if err == nil {
		varApplianceExternalSyslogSetting := _ApplianceExternalSyslogSetting{}
		varApplianceExternalSyslogSetting.ClassId = varApplianceExternalSyslogSettingWithoutEmbeddedStruct.ClassId
		varApplianceExternalSyslogSetting.ObjectType = varApplianceExternalSyslogSettingWithoutEmbeddedStruct.ObjectType
		varApplianceExternalSyslogSetting.Enabled = varApplianceExternalSyslogSettingWithoutEmbeddedStruct.Enabled
		varApplianceExternalSyslogSetting.ExportNginx = varApplianceExternalSyslogSettingWithoutEmbeddedStruct.ExportNginx
		varApplianceExternalSyslogSetting.Port = varApplianceExternalSyslogSettingWithoutEmbeddedStruct.Port
		varApplianceExternalSyslogSetting.Protocol = varApplianceExternalSyslogSettingWithoutEmbeddedStruct.Protocol
		varApplianceExternalSyslogSetting.Server = varApplianceExternalSyslogSettingWithoutEmbeddedStruct.Server
		varApplianceExternalSyslogSetting.Account = varApplianceExternalSyslogSettingWithoutEmbeddedStruct.Account
		*o = ApplianceExternalSyslogSetting(varApplianceExternalSyslogSetting)
	} else {
		return err
	}

	varApplianceExternalSyslogSetting := _ApplianceExternalSyslogSetting{}

	err = json.Unmarshal(bytes, &varApplianceExternalSyslogSetting)
	if err == nil {
		o.MoBaseMo = varApplianceExternalSyslogSetting.MoBaseMo
	} else {
		return err
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "ClassId")
		delete(additionalProperties, "ObjectType")
		delete(additionalProperties, "Enabled")
		delete(additionalProperties, "ExportNginx")
		delete(additionalProperties, "Port")
		delete(additionalProperties, "Protocol")
		delete(additionalProperties, "Server")
		delete(additionalProperties, "Account")

		// remove fields from embedded structs
		reflectMoBaseMo := reflect.ValueOf(o.MoBaseMo)
		for i := 0; i < reflectMoBaseMo.Type().NumField(); i++ {
			t := reflectMoBaseMo.Type().Field(i)

			if jsonTag := t.Tag.Get("json"); jsonTag != "" {
				fieldName := ""
				if commaIdx := strings.Index(jsonTag, ","); commaIdx > 0 {
					fieldName = jsonTag[:commaIdx]
				} else {
					fieldName = jsonTag
				}
				if fieldName != "AdditionalProperties" {
					delete(additionalProperties, fieldName)
				}
			}
		}

		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableApplianceExternalSyslogSetting struct {
	value *ApplianceExternalSyslogSetting
	isSet bool
}

func (v NullableApplianceExternalSyslogSetting) Get() *ApplianceExternalSyslogSetting {
	return v.value
}

func (v *NullableApplianceExternalSyslogSetting) Set(val *ApplianceExternalSyslogSetting) {
	v.value = val
	v.isSet = true
}

func (v NullableApplianceExternalSyslogSetting) IsSet() bool {
	return v.isSet
}

func (v *NullableApplianceExternalSyslogSetting) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApplianceExternalSyslogSetting(val *ApplianceExternalSyslogSetting) *NullableApplianceExternalSyslogSetting {
	return &NullableApplianceExternalSyslogSetting{value: val, isSet: true}
}

func (v NullableApplianceExternalSyslogSetting) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApplianceExternalSyslogSetting) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
