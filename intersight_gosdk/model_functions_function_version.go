/*
Cisco Intersight

Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations. The Intersight OpenAPI document defines the complete set of properties that are returned in the HTTP response. From that perspective, a client can expect that no additional properties are returned, unless these properties are explicitly defined in the OpenAPI document. However, when a client uses an older version of the Intersight OpenAPI document, the server may send additional properties because the software is more recent than the client. In that case, the client may receive properties that it does not know about. Some generated SDKs perform a strict validation of the HTTP response body against the OpenAPI document.

API version: 1.0.11-2024120409
Contact: intersight@cisco.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package intersight

import (
	"encoding/json"
	"fmt"
	"reflect"
	"strings"
)

// checks if the FunctionsFunctionVersion type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FunctionsFunctionVersion{}

// FunctionsFunctionVersion The managed object which has info about a specific version of custom function.
type FunctionsFunctionVersion struct {
	MoBaseMo
	// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.
	ClassId string `json:"ClassId"`
	// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
	ObjectType string `json:"ObjectType"`
	// Custom function code for Function MO.
	Code *string `json:"Code,omitempty"`
	// The user identifier who created the Function.
	CreateUser *string `json:"CreateUser,omitempty"`
	// When true this function version will be used in functions table. The very first function created with a name will be set as the default version.
	DefaultVersion *bool                               `json:"DefaultVersion,omitempty"`
	LastAction     NullableFunctionsFunctionLastAction `json:"LastAction,omitempty"`
	// The user identifier who last updated the Function.
	ModUser *string `json:"ModUser,omitempty"`
	// Current representation of the Function MO state. * `Saved` - Function is saved, yet to be built and deployed. * `Building` - Function is currently being built. * `Built` - The Function has been built and can now be deployed. * `Deploying` - The built Function is currently being deployed. * `Deployed` - The Function has been deployed. * `Undeploying` - The deployed function is being Undeployed. * `Deleting` - The Function is being deleted.
	State *string `json:"State,omitempty"`
	// The version of the function to support multiple versions.
	Version              *int64                                   `json:"Version,omitempty"`
	ActionExecution      NullableWorkflowWorkflowInfoRelationship `json:"ActionExecution,omitempty"`
	Function             NullableFunctionsFunctionRelationship    `json:"Function,omitempty"`
	Runtime              NullableFunctionsRuntimeRelationship     `json:"Runtime,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _FunctionsFunctionVersion FunctionsFunctionVersion

// NewFunctionsFunctionVersion instantiates a new FunctionsFunctionVersion object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFunctionsFunctionVersion(classId string, objectType string) *FunctionsFunctionVersion {
	this := FunctionsFunctionVersion{}
	this.ClassId = classId
	this.ObjectType = objectType
	return &this
}

// NewFunctionsFunctionVersionWithDefaults instantiates a new FunctionsFunctionVersion object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFunctionsFunctionVersionWithDefaults() *FunctionsFunctionVersion {
	this := FunctionsFunctionVersion{}
	var classId string = "functions.FunctionVersion"
	this.ClassId = classId
	var objectType string = "functions.FunctionVersion"
	this.ObjectType = objectType
	return &this
}

// GetClassId returns the ClassId field value
func (o *FunctionsFunctionVersion) GetClassId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ClassId
}

// GetClassIdOk returns a tuple with the ClassId field value
// and a boolean to check if the value has been set.
func (o *FunctionsFunctionVersion) GetClassIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ClassId, true
}

// SetClassId sets field value
func (o *FunctionsFunctionVersion) SetClassId(v string) {
	o.ClassId = v
}

// GetDefaultClassId returns the default value "functions.FunctionVersion" of the ClassId field.
func (o *FunctionsFunctionVersion) GetDefaultClassId() interface{} {
	return "functions.FunctionVersion"
}

// GetObjectType returns the ObjectType field value
func (o *FunctionsFunctionVersion) GetObjectType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ObjectType
}

// GetObjectTypeOk returns a tuple with the ObjectType field value
// and a boolean to check if the value has been set.
func (o *FunctionsFunctionVersion) GetObjectTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ObjectType, true
}

// SetObjectType sets field value
func (o *FunctionsFunctionVersion) SetObjectType(v string) {
	o.ObjectType = v
}

// GetDefaultObjectType returns the default value "functions.FunctionVersion" of the ObjectType field.
func (o *FunctionsFunctionVersion) GetDefaultObjectType() interface{} {
	return "functions.FunctionVersion"
}

// GetCode returns the Code field value if set, zero value otherwise.
func (o *FunctionsFunctionVersion) GetCode() string {
	if o == nil || IsNil(o.Code) {
		var ret string
		return ret
	}
	return *o.Code
}

// GetCodeOk returns a tuple with the Code field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FunctionsFunctionVersion) GetCodeOk() (*string, bool) {
	if o == nil || IsNil(o.Code) {
		return nil, false
	}
	return o.Code, true
}

// HasCode returns a boolean if a field has been set.
func (o *FunctionsFunctionVersion) HasCode() bool {
	if o != nil && !IsNil(o.Code) {
		return true
	}

	return false
}

// SetCode gets a reference to the given string and assigns it to the Code field.
func (o *FunctionsFunctionVersion) SetCode(v string) {
	o.Code = &v
}

// GetCreateUser returns the CreateUser field value if set, zero value otherwise.
func (o *FunctionsFunctionVersion) GetCreateUser() string {
	if o == nil || IsNil(o.CreateUser) {
		var ret string
		return ret
	}
	return *o.CreateUser
}

// GetCreateUserOk returns a tuple with the CreateUser field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FunctionsFunctionVersion) GetCreateUserOk() (*string, bool) {
	if o == nil || IsNil(o.CreateUser) {
		return nil, false
	}
	return o.CreateUser, true
}

// HasCreateUser returns a boolean if a field has been set.
func (o *FunctionsFunctionVersion) HasCreateUser() bool {
	if o != nil && !IsNil(o.CreateUser) {
		return true
	}

	return false
}

// SetCreateUser gets a reference to the given string and assigns it to the CreateUser field.
func (o *FunctionsFunctionVersion) SetCreateUser(v string) {
	o.CreateUser = &v
}

// GetDefaultVersion returns the DefaultVersion field value if set, zero value otherwise.
func (o *FunctionsFunctionVersion) GetDefaultVersion() bool {
	if o == nil || IsNil(o.DefaultVersion) {
		var ret bool
		return ret
	}
	return *o.DefaultVersion
}

// GetDefaultVersionOk returns a tuple with the DefaultVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FunctionsFunctionVersion) GetDefaultVersionOk() (*bool, bool) {
	if o == nil || IsNil(o.DefaultVersion) {
		return nil, false
	}
	return o.DefaultVersion, true
}

// HasDefaultVersion returns a boolean if a field has been set.
func (o *FunctionsFunctionVersion) HasDefaultVersion() bool {
	if o != nil && !IsNil(o.DefaultVersion) {
		return true
	}

	return false
}

// SetDefaultVersion gets a reference to the given bool and assigns it to the DefaultVersion field.
func (o *FunctionsFunctionVersion) SetDefaultVersion(v bool) {
	o.DefaultVersion = &v
}

// GetLastAction returns the LastAction field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FunctionsFunctionVersion) GetLastAction() FunctionsFunctionLastAction {
	if o == nil || IsNil(o.LastAction.Get()) {
		var ret FunctionsFunctionLastAction
		return ret
	}
	return *o.LastAction.Get()
}

// GetLastActionOk returns a tuple with the LastAction field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FunctionsFunctionVersion) GetLastActionOk() (*FunctionsFunctionLastAction, bool) {
	if o == nil {
		return nil, false
	}
	return o.LastAction.Get(), o.LastAction.IsSet()
}

// HasLastAction returns a boolean if a field has been set.
func (o *FunctionsFunctionVersion) HasLastAction() bool {
	if o != nil && o.LastAction.IsSet() {
		return true
	}

	return false
}

// SetLastAction gets a reference to the given NullableFunctionsFunctionLastAction and assigns it to the LastAction field.
func (o *FunctionsFunctionVersion) SetLastAction(v FunctionsFunctionLastAction) {
	o.LastAction.Set(&v)
}

// SetLastActionNil sets the value for LastAction to be an explicit nil
func (o *FunctionsFunctionVersion) SetLastActionNil() {
	o.LastAction.Set(nil)
}

// UnsetLastAction ensures that no value is present for LastAction, not even an explicit nil
func (o *FunctionsFunctionVersion) UnsetLastAction() {
	o.LastAction.Unset()
}

// GetModUser returns the ModUser field value if set, zero value otherwise.
func (o *FunctionsFunctionVersion) GetModUser() string {
	if o == nil || IsNil(o.ModUser) {
		var ret string
		return ret
	}
	return *o.ModUser
}

// GetModUserOk returns a tuple with the ModUser field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FunctionsFunctionVersion) GetModUserOk() (*string, bool) {
	if o == nil || IsNil(o.ModUser) {
		return nil, false
	}
	return o.ModUser, true
}

// HasModUser returns a boolean if a field has been set.
func (o *FunctionsFunctionVersion) HasModUser() bool {
	if o != nil && !IsNil(o.ModUser) {
		return true
	}

	return false
}

// SetModUser gets a reference to the given string and assigns it to the ModUser field.
func (o *FunctionsFunctionVersion) SetModUser(v string) {
	o.ModUser = &v
}

// GetState returns the State field value if set, zero value otherwise.
func (o *FunctionsFunctionVersion) GetState() string {
	if o == nil || IsNil(o.State) {
		var ret string
		return ret
	}
	return *o.State
}

// GetStateOk returns a tuple with the State field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FunctionsFunctionVersion) GetStateOk() (*string, bool) {
	if o == nil || IsNil(o.State) {
		return nil, false
	}
	return o.State, true
}

// HasState returns a boolean if a field has been set.
func (o *FunctionsFunctionVersion) HasState() bool {
	if o != nil && !IsNil(o.State) {
		return true
	}

	return false
}

// SetState gets a reference to the given string and assigns it to the State field.
func (o *FunctionsFunctionVersion) SetState(v string) {
	o.State = &v
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *FunctionsFunctionVersion) GetVersion() int64 {
	if o == nil || IsNil(o.Version) {
		var ret int64
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FunctionsFunctionVersion) GetVersionOk() (*int64, bool) {
	if o == nil || IsNil(o.Version) {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *FunctionsFunctionVersion) HasVersion() bool {
	if o != nil && !IsNil(o.Version) {
		return true
	}

	return false
}

// SetVersion gets a reference to the given int64 and assigns it to the Version field.
func (o *FunctionsFunctionVersion) SetVersion(v int64) {
	o.Version = &v
}

// GetActionExecution returns the ActionExecution field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FunctionsFunctionVersion) GetActionExecution() WorkflowWorkflowInfoRelationship {
	if o == nil || IsNil(o.ActionExecution.Get()) {
		var ret WorkflowWorkflowInfoRelationship
		return ret
	}
	return *o.ActionExecution.Get()
}

// GetActionExecutionOk returns a tuple with the ActionExecution field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FunctionsFunctionVersion) GetActionExecutionOk() (*WorkflowWorkflowInfoRelationship, bool) {
	if o == nil {
		return nil, false
	}
	return o.ActionExecution.Get(), o.ActionExecution.IsSet()
}

// HasActionExecution returns a boolean if a field has been set.
func (o *FunctionsFunctionVersion) HasActionExecution() bool {
	if o != nil && o.ActionExecution.IsSet() {
		return true
	}

	return false
}

// SetActionExecution gets a reference to the given NullableWorkflowWorkflowInfoRelationship and assigns it to the ActionExecution field.
func (o *FunctionsFunctionVersion) SetActionExecution(v WorkflowWorkflowInfoRelationship) {
	o.ActionExecution.Set(&v)
}

// SetActionExecutionNil sets the value for ActionExecution to be an explicit nil
func (o *FunctionsFunctionVersion) SetActionExecutionNil() {
	o.ActionExecution.Set(nil)
}

// UnsetActionExecution ensures that no value is present for ActionExecution, not even an explicit nil
func (o *FunctionsFunctionVersion) UnsetActionExecution() {
	o.ActionExecution.Unset()
}

// GetFunction returns the Function field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FunctionsFunctionVersion) GetFunction() FunctionsFunctionRelationship {
	if o == nil || IsNil(o.Function.Get()) {
		var ret FunctionsFunctionRelationship
		return ret
	}
	return *o.Function.Get()
}

// GetFunctionOk returns a tuple with the Function field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FunctionsFunctionVersion) GetFunctionOk() (*FunctionsFunctionRelationship, bool) {
	if o == nil {
		return nil, false
	}
	return o.Function.Get(), o.Function.IsSet()
}

// HasFunction returns a boolean if a field has been set.
func (o *FunctionsFunctionVersion) HasFunction() bool {
	if o != nil && o.Function.IsSet() {
		return true
	}

	return false
}

// SetFunction gets a reference to the given NullableFunctionsFunctionRelationship and assigns it to the Function field.
func (o *FunctionsFunctionVersion) SetFunction(v FunctionsFunctionRelationship) {
	o.Function.Set(&v)
}

// SetFunctionNil sets the value for Function to be an explicit nil
func (o *FunctionsFunctionVersion) SetFunctionNil() {
	o.Function.Set(nil)
}

// UnsetFunction ensures that no value is present for Function, not even an explicit nil
func (o *FunctionsFunctionVersion) UnsetFunction() {
	o.Function.Unset()
}

// GetRuntime returns the Runtime field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FunctionsFunctionVersion) GetRuntime() FunctionsRuntimeRelationship {
	if o == nil || IsNil(o.Runtime.Get()) {
		var ret FunctionsRuntimeRelationship
		return ret
	}
	return *o.Runtime.Get()
}

// GetRuntimeOk returns a tuple with the Runtime field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FunctionsFunctionVersion) GetRuntimeOk() (*FunctionsRuntimeRelationship, bool) {
	if o == nil {
		return nil, false
	}
	return o.Runtime.Get(), o.Runtime.IsSet()
}

// HasRuntime returns a boolean if a field has been set.
func (o *FunctionsFunctionVersion) HasRuntime() bool {
	if o != nil && o.Runtime.IsSet() {
		return true
	}

	return false
}

// SetRuntime gets a reference to the given NullableFunctionsRuntimeRelationship and assigns it to the Runtime field.
func (o *FunctionsFunctionVersion) SetRuntime(v FunctionsRuntimeRelationship) {
	o.Runtime.Set(&v)
}

// SetRuntimeNil sets the value for Runtime to be an explicit nil
func (o *FunctionsFunctionVersion) SetRuntimeNil() {
	o.Runtime.Set(nil)
}

// UnsetRuntime ensures that no value is present for Runtime, not even an explicit nil
func (o *FunctionsFunctionVersion) UnsetRuntime() {
	o.Runtime.Unset()
}

func (o FunctionsFunctionVersion) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FunctionsFunctionVersion) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	serializedMoBaseMo, errMoBaseMo := json.Marshal(o.MoBaseMo)
	if errMoBaseMo != nil {
		return map[string]interface{}{}, errMoBaseMo
	}
	errMoBaseMo = json.Unmarshal([]byte(serializedMoBaseMo), &toSerialize)
	if errMoBaseMo != nil {
		return map[string]interface{}{}, errMoBaseMo
	}
	if _, exists := toSerialize["ClassId"]; !exists {
		toSerialize["ClassId"] = o.GetDefaultClassId()
	}
	toSerialize["ClassId"] = o.ClassId
	if _, exists := toSerialize["ObjectType"]; !exists {
		toSerialize["ObjectType"] = o.GetDefaultObjectType()
	}
	toSerialize["ObjectType"] = o.ObjectType
	if !IsNil(o.Code) {
		toSerialize["Code"] = o.Code
	}
	if !IsNil(o.CreateUser) {
		toSerialize["CreateUser"] = o.CreateUser
	}
	if !IsNil(o.DefaultVersion) {
		toSerialize["DefaultVersion"] = o.DefaultVersion
	}
	if o.LastAction.IsSet() {
		toSerialize["LastAction"] = o.LastAction.Get()
	}
	if !IsNil(o.ModUser) {
		toSerialize["ModUser"] = o.ModUser
	}
	if !IsNil(o.State) {
		toSerialize["State"] = o.State
	}
	if !IsNil(o.Version) {
		toSerialize["Version"] = o.Version
	}
	if o.ActionExecution.IsSet() {
		toSerialize["ActionExecution"] = o.ActionExecution.Get()
	}
	if o.Function.IsSet() {
		toSerialize["Function"] = o.Function.Get()
	}
	if o.Runtime.IsSet() {
		toSerialize["Runtime"] = o.Runtime.Get()
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *FunctionsFunctionVersion) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"ClassId",
		"ObjectType",
	}

	// defaultValueFuncMap captures the default values for required properties.
	// These values are used when required properties are missing from the payload.
	defaultValueFuncMap := map[string]func() interface{}{
		"ClassId":    o.GetDefaultClassId,
		"ObjectType": o.GetDefaultObjectType,
	}
	var defaultValueApplied bool
	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			if _, ok := defaultValueFuncMap[requiredProperty]; ok {
				allProperties[requiredProperty] = defaultValueFuncMap[requiredProperty]()
				defaultValueApplied = true
			}
		}
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	if defaultValueApplied {
		data, err = json.Marshal(allProperties)
		if err != nil {
			return err
		}
	}
	type FunctionsFunctionVersionWithoutEmbeddedStruct struct {
		// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.
		ClassId string `json:"ClassId"`
		// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
		ObjectType string `json:"ObjectType"`
		// Custom function code for Function MO.
		Code *string `json:"Code,omitempty"`
		// The user identifier who created the Function.
		CreateUser *string `json:"CreateUser,omitempty"`
		// When true this function version will be used in functions table. The very first function created with a name will be set as the default version.
		DefaultVersion *bool                               `json:"DefaultVersion,omitempty"`
		LastAction     NullableFunctionsFunctionLastAction `json:"LastAction,omitempty"`
		// The user identifier who last updated the Function.
		ModUser *string `json:"ModUser,omitempty"`
		// Current representation of the Function MO state. * `Saved` - Function is saved, yet to be built and deployed. * `Building` - Function is currently being built. * `Built` - The Function has been built and can now be deployed. * `Deploying` - The built Function is currently being deployed. * `Deployed` - The Function has been deployed. * `Undeploying` - The deployed function is being Undeployed. * `Deleting` - The Function is being deleted.
		State *string `json:"State,omitempty"`
		// The version of the function to support multiple versions.
		Version         *int64                                   `json:"Version,omitempty"`
		ActionExecution NullableWorkflowWorkflowInfoRelationship `json:"ActionExecution,omitempty"`
		Function        NullableFunctionsFunctionRelationship    `json:"Function,omitempty"`
		Runtime         NullableFunctionsRuntimeRelationship     `json:"Runtime,omitempty"`
	}

	varFunctionsFunctionVersionWithoutEmbeddedStruct := FunctionsFunctionVersionWithoutEmbeddedStruct{}

	err = json.Unmarshal(data, &varFunctionsFunctionVersionWithoutEmbeddedStruct)
	if err == nil {
		varFunctionsFunctionVersion := _FunctionsFunctionVersion{}
		varFunctionsFunctionVersion.ClassId = varFunctionsFunctionVersionWithoutEmbeddedStruct.ClassId
		varFunctionsFunctionVersion.ObjectType = varFunctionsFunctionVersionWithoutEmbeddedStruct.ObjectType
		varFunctionsFunctionVersion.Code = varFunctionsFunctionVersionWithoutEmbeddedStruct.Code
		varFunctionsFunctionVersion.CreateUser = varFunctionsFunctionVersionWithoutEmbeddedStruct.CreateUser
		varFunctionsFunctionVersion.DefaultVersion = varFunctionsFunctionVersionWithoutEmbeddedStruct.DefaultVersion
		varFunctionsFunctionVersion.LastAction = varFunctionsFunctionVersionWithoutEmbeddedStruct.LastAction
		varFunctionsFunctionVersion.ModUser = varFunctionsFunctionVersionWithoutEmbeddedStruct.ModUser
		varFunctionsFunctionVersion.State = varFunctionsFunctionVersionWithoutEmbeddedStruct.State
		varFunctionsFunctionVersion.Version = varFunctionsFunctionVersionWithoutEmbeddedStruct.Version
		varFunctionsFunctionVersion.ActionExecution = varFunctionsFunctionVersionWithoutEmbeddedStruct.ActionExecution
		varFunctionsFunctionVersion.Function = varFunctionsFunctionVersionWithoutEmbeddedStruct.Function
		varFunctionsFunctionVersion.Runtime = varFunctionsFunctionVersionWithoutEmbeddedStruct.Runtime
		*o = FunctionsFunctionVersion(varFunctionsFunctionVersion)
	} else {
		return err
	}

	varFunctionsFunctionVersion := _FunctionsFunctionVersion{}

	err = json.Unmarshal(data, &varFunctionsFunctionVersion)
	if err == nil {
		o.MoBaseMo = varFunctionsFunctionVersion.MoBaseMo
	} else {
		return err
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "ClassId")
		delete(additionalProperties, "ObjectType")
		delete(additionalProperties, "Code")
		delete(additionalProperties, "CreateUser")
		delete(additionalProperties, "DefaultVersion")
		delete(additionalProperties, "LastAction")
		delete(additionalProperties, "ModUser")
		delete(additionalProperties, "State")
		delete(additionalProperties, "Version")
		delete(additionalProperties, "ActionExecution")
		delete(additionalProperties, "Function")
		delete(additionalProperties, "Runtime")

		// remove fields from embedded structs
		reflectMoBaseMo := reflect.ValueOf(o.MoBaseMo)
		for i := 0; i < reflectMoBaseMo.Type().NumField(); i++ {
			t := reflectMoBaseMo.Type().Field(i)

			if jsonTag := t.Tag.Get("json"); jsonTag != "" {
				fieldName := ""
				if commaIdx := strings.Index(jsonTag, ","); commaIdx > 0 {
					fieldName = jsonTag[:commaIdx]
				} else {
					fieldName = jsonTag
				}
				if fieldName != "AdditionalProperties" {
					delete(additionalProperties, fieldName)
				}
			}
		}

		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableFunctionsFunctionVersion struct {
	value *FunctionsFunctionVersion
	isSet bool
}

func (v NullableFunctionsFunctionVersion) Get() *FunctionsFunctionVersion {
	return v.value
}

func (v *NullableFunctionsFunctionVersion) Set(val *FunctionsFunctionVersion) {
	v.value = val
	v.isSet = true
}

func (v NullableFunctionsFunctionVersion) IsSet() bool {
	return v.isSet
}

func (v *NullableFunctionsFunctionVersion) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFunctionsFunctionVersion(val *FunctionsFunctionVersion) *NullableFunctionsFunctionVersion {
	return &NullableFunctionsFunctionVersion{value: val, isSet: true}
}

func (v NullableFunctionsFunctionVersion) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFunctionsFunctionVersion) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
