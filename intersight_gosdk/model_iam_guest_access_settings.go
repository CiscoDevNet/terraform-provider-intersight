/*
Cisco Intersight

Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations. The Intersight OpenAPI document defines the complete set of properties that are returned in the HTTP response. From that perspective, a client can expect that no additional properties are returned, unless these properties are explicitly defined in the OpenAPI document. However, when a client uses an older version of the Intersight OpenAPI document, the server may send additional properties because the software is more recent than the client. In that case, the client may receive properties that it does not know about. Some generated SDKs perform a strict validation of the HTTP response body against the OpenAPI document.

API version: 1.0.11-2025092610
Contact: intersight@cisco.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package intersight

import (
	"encoding/json"
	"fmt"
	"reflect"
	"strings"
)

// checks if the IamGuestAccessSettings type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &IamGuestAccessSettings{}

// IamGuestAccessSettings Stores account level settings for guest user access.
type IamGuestAccessSettings struct {
	MoBaseMo
	// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.
	ClassId string `json:"ClassId"`
	// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
	ObjectType         string   `json:"ObjectType"`
	AllowedDomainNames []string `json:"AllowedDomainNames,omitempty"`
	// Stores the maximum duration (in seconds) during which guest access link remains valid and accessible. It is the maximum value that is set  at the account level which account admin can configure. Any guest access link that is set with expiration time beyond this property will be disallowed. The default value is set to 604800 seconds (7 days).
	MaxGuestAccessLinkShelfLife *int64 `json:"MaxGuestAccessLinkShelfLife,omitempty"`
	// Stores an option for Account Admin to override IP Access Restriction if it is enabled in the Account. This option is used to disable IP Access restrictions for guest users logging in to the account, while restriction is enforced for other normal users (who are authenticated via SAML or LDAP).
	OverrideIpAccessRestriction *bool                                 `json:"OverrideIpAccessRestriction,omitempty"`
	ResourceLimits              NullableIamResourceLimitsRelationship `json:"ResourceLimits,omitempty"`
	AdditionalProperties        map[string]interface{}
}

type _IamGuestAccessSettings IamGuestAccessSettings

// NewIamGuestAccessSettings instantiates a new IamGuestAccessSettings object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIamGuestAccessSettings(classId string, objectType string) *IamGuestAccessSettings {
	this := IamGuestAccessSettings{}
	this.ClassId = classId
	this.ObjectType = objectType
	var maxGuestAccessLinkShelfLife int64 = 604800
	this.MaxGuestAccessLinkShelfLife = &maxGuestAccessLinkShelfLife
	return &this
}

// NewIamGuestAccessSettingsWithDefaults instantiates a new IamGuestAccessSettings object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIamGuestAccessSettingsWithDefaults() *IamGuestAccessSettings {
	this := IamGuestAccessSettings{}
	var classId string = "iam.GuestAccessSettings"
	this.ClassId = classId
	var objectType string = "iam.GuestAccessSettings"
	this.ObjectType = objectType
	var maxGuestAccessLinkShelfLife int64 = 604800
	this.MaxGuestAccessLinkShelfLife = &maxGuestAccessLinkShelfLife
	return &this
}

// GetClassId returns the ClassId field value
func (o *IamGuestAccessSettings) GetClassId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ClassId
}

// GetClassIdOk returns a tuple with the ClassId field value
// and a boolean to check if the value has been set.
func (o *IamGuestAccessSettings) GetClassIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ClassId, true
}

// SetClassId sets field value
func (o *IamGuestAccessSettings) SetClassId(v string) {
	o.ClassId = v
}

// GetDefaultClassId returns the default value "iam.GuestAccessSettings" of the ClassId field.
func (o *IamGuestAccessSettings) GetDefaultClassId() interface{} {
	return "iam.GuestAccessSettings"
}

// GetObjectType returns the ObjectType field value
func (o *IamGuestAccessSettings) GetObjectType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ObjectType
}

// GetObjectTypeOk returns a tuple with the ObjectType field value
// and a boolean to check if the value has been set.
func (o *IamGuestAccessSettings) GetObjectTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ObjectType, true
}

// SetObjectType sets field value
func (o *IamGuestAccessSettings) SetObjectType(v string) {
	o.ObjectType = v
}

// GetDefaultObjectType returns the default value "iam.GuestAccessSettings" of the ObjectType field.
func (o *IamGuestAccessSettings) GetDefaultObjectType() interface{} {
	return "iam.GuestAccessSettings"
}

// GetAllowedDomainNames returns the AllowedDomainNames field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IamGuestAccessSettings) GetAllowedDomainNames() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.AllowedDomainNames
}

// GetAllowedDomainNamesOk returns a tuple with the AllowedDomainNames field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IamGuestAccessSettings) GetAllowedDomainNamesOk() ([]string, bool) {
	if o == nil || IsNil(o.AllowedDomainNames) {
		return nil, false
	}
	return o.AllowedDomainNames, true
}

// HasAllowedDomainNames returns a boolean if a field has been set.
func (o *IamGuestAccessSettings) HasAllowedDomainNames() bool {
	if o != nil && !IsNil(o.AllowedDomainNames) {
		return true
	}

	return false
}

// SetAllowedDomainNames gets a reference to the given []string and assigns it to the AllowedDomainNames field.
func (o *IamGuestAccessSettings) SetAllowedDomainNames(v []string) {
	o.AllowedDomainNames = v
}

// GetMaxGuestAccessLinkShelfLife returns the MaxGuestAccessLinkShelfLife field value if set, zero value otherwise.
func (o *IamGuestAccessSettings) GetMaxGuestAccessLinkShelfLife() int64 {
	if o == nil || IsNil(o.MaxGuestAccessLinkShelfLife) {
		var ret int64
		return ret
	}
	return *o.MaxGuestAccessLinkShelfLife
}

// GetMaxGuestAccessLinkShelfLifeOk returns a tuple with the MaxGuestAccessLinkShelfLife field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IamGuestAccessSettings) GetMaxGuestAccessLinkShelfLifeOk() (*int64, bool) {
	if o == nil || IsNil(o.MaxGuestAccessLinkShelfLife) {
		return nil, false
	}
	return o.MaxGuestAccessLinkShelfLife, true
}

// HasMaxGuestAccessLinkShelfLife returns a boolean if a field has been set.
func (o *IamGuestAccessSettings) HasMaxGuestAccessLinkShelfLife() bool {
	if o != nil && !IsNil(o.MaxGuestAccessLinkShelfLife) {
		return true
	}

	return false
}

// SetMaxGuestAccessLinkShelfLife gets a reference to the given int64 and assigns it to the MaxGuestAccessLinkShelfLife field.
func (o *IamGuestAccessSettings) SetMaxGuestAccessLinkShelfLife(v int64) {
	o.MaxGuestAccessLinkShelfLife = &v
}

// GetOverrideIpAccessRestriction returns the OverrideIpAccessRestriction field value if set, zero value otherwise.
func (o *IamGuestAccessSettings) GetOverrideIpAccessRestriction() bool {
	if o == nil || IsNil(o.OverrideIpAccessRestriction) {
		var ret bool
		return ret
	}
	return *o.OverrideIpAccessRestriction
}

// GetOverrideIpAccessRestrictionOk returns a tuple with the OverrideIpAccessRestriction field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IamGuestAccessSettings) GetOverrideIpAccessRestrictionOk() (*bool, bool) {
	if o == nil || IsNil(o.OverrideIpAccessRestriction) {
		return nil, false
	}
	return o.OverrideIpAccessRestriction, true
}

// HasOverrideIpAccessRestriction returns a boolean if a field has been set.
func (o *IamGuestAccessSettings) HasOverrideIpAccessRestriction() bool {
	if o != nil && !IsNil(o.OverrideIpAccessRestriction) {
		return true
	}

	return false
}

// SetOverrideIpAccessRestriction gets a reference to the given bool and assigns it to the OverrideIpAccessRestriction field.
func (o *IamGuestAccessSettings) SetOverrideIpAccessRestriction(v bool) {
	o.OverrideIpAccessRestriction = &v
}

// GetResourceLimits returns the ResourceLimits field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IamGuestAccessSettings) GetResourceLimits() IamResourceLimitsRelationship {
	if o == nil || IsNil(o.ResourceLimits.Get()) {
		var ret IamResourceLimitsRelationship
		return ret
	}
	return *o.ResourceLimits.Get()
}

// GetResourceLimitsOk returns a tuple with the ResourceLimits field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IamGuestAccessSettings) GetResourceLimitsOk() (*IamResourceLimitsRelationship, bool) {
	if o == nil {
		return nil, false
	}
	return o.ResourceLimits.Get(), o.ResourceLimits.IsSet()
}

// HasResourceLimits returns a boolean if a field has been set.
func (o *IamGuestAccessSettings) HasResourceLimits() bool {
	if o != nil && o.ResourceLimits.IsSet() {
		return true
	}

	return false
}

// SetResourceLimits gets a reference to the given NullableIamResourceLimitsRelationship and assigns it to the ResourceLimits field.
func (o *IamGuestAccessSettings) SetResourceLimits(v IamResourceLimitsRelationship) {
	o.ResourceLimits.Set(&v)
}

// SetResourceLimitsNil sets the value for ResourceLimits to be an explicit nil
func (o *IamGuestAccessSettings) SetResourceLimitsNil() {
	o.ResourceLimits.Set(nil)
}

// UnsetResourceLimits ensures that no value is present for ResourceLimits, not even an explicit nil
func (o *IamGuestAccessSettings) UnsetResourceLimits() {
	o.ResourceLimits.Unset()
}

func (o IamGuestAccessSettings) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IamGuestAccessSettings) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	serializedMoBaseMo, errMoBaseMo := json.Marshal(o.MoBaseMo)
	if errMoBaseMo != nil {
		return map[string]interface{}{}, errMoBaseMo
	}
	errMoBaseMo = json.Unmarshal([]byte(serializedMoBaseMo), &toSerialize)
	if errMoBaseMo != nil {
		return map[string]interface{}{}, errMoBaseMo
	}
	if _, exists := toSerialize["ClassId"]; !exists {
		toSerialize["ClassId"] = o.GetDefaultClassId()
	}
	toSerialize["ClassId"] = o.ClassId
	if _, exists := toSerialize["ObjectType"]; !exists {
		toSerialize["ObjectType"] = o.GetDefaultObjectType()
	}
	toSerialize["ObjectType"] = o.ObjectType
	if o.AllowedDomainNames != nil {
		toSerialize["AllowedDomainNames"] = o.AllowedDomainNames
	}
	if !IsNil(o.MaxGuestAccessLinkShelfLife) {
		toSerialize["MaxGuestAccessLinkShelfLife"] = o.MaxGuestAccessLinkShelfLife
	}
	if !IsNil(o.OverrideIpAccessRestriction) {
		toSerialize["OverrideIpAccessRestriction"] = o.OverrideIpAccessRestriction
	}
	if o.ResourceLimits.IsSet() {
		toSerialize["ResourceLimits"] = o.ResourceLimits.Get()
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *IamGuestAccessSettings) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"ClassId",
		"ObjectType",
	}

	// defaultValueFuncMap captures the default values for required properties.
	// These values are used when required properties are missing from the payload.
	defaultValueFuncMap := map[string]func() interface{}{
		"ClassId":    o.GetDefaultClassId,
		"ObjectType": o.GetDefaultObjectType,
	}
	var defaultValueApplied bool
	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			if _, ok := defaultValueFuncMap[requiredProperty]; ok {
				allProperties[requiredProperty] = defaultValueFuncMap[requiredProperty]()
				defaultValueApplied = true
			}
		}
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	if defaultValueApplied {
		data, err = json.Marshal(allProperties)
		if err != nil {
			return err
		}
	}
	type IamGuestAccessSettingsWithoutEmbeddedStruct struct {
		// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.
		ClassId string `json:"ClassId"`
		// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
		ObjectType         string   `json:"ObjectType"`
		AllowedDomainNames []string `json:"AllowedDomainNames,omitempty"`
		// Stores the maximum duration (in seconds) during which guest access link remains valid and accessible. It is the maximum value that is set  at the account level which account admin can configure. Any guest access link that is set with expiration time beyond this property will be disallowed. The default value is set to 604800 seconds (7 days).
		MaxGuestAccessLinkShelfLife *int64 `json:"MaxGuestAccessLinkShelfLife,omitempty"`
		// Stores an option for Account Admin to override IP Access Restriction if it is enabled in the Account. This option is used to disable IP Access restrictions for guest users logging in to the account, while restriction is enforced for other normal users (who are authenticated via SAML or LDAP).
		OverrideIpAccessRestriction *bool                                 `json:"OverrideIpAccessRestriction,omitempty"`
		ResourceLimits              NullableIamResourceLimitsRelationship `json:"ResourceLimits,omitempty"`
	}

	varIamGuestAccessSettingsWithoutEmbeddedStruct := IamGuestAccessSettingsWithoutEmbeddedStruct{}

	err = json.Unmarshal(data, &varIamGuestAccessSettingsWithoutEmbeddedStruct)
	if err == nil {
		varIamGuestAccessSettings := _IamGuestAccessSettings{}
		varIamGuestAccessSettings.ClassId = varIamGuestAccessSettingsWithoutEmbeddedStruct.ClassId
		varIamGuestAccessSettings.ObjectType = varIamGuestAccessSettingsWithoutEmbeddedStruct.ObjectType
		varIamGuestAccessSettings.AllowedDomainNames = varIamGuestAccessSettingsWithoutEmbeddedStruct.AllowedDomainNames
		varIamGuestAccessSettings.MaxGuestAccessLinkShelfLife = varIamGuestAccessSettingsWithoutEmbeddedStruct.MaxGuestAccessLinkShelfLife
		varIamGuestAccessSettings.OverrideIpAccessRestriction = varIamGuestAccessSettingsWithoutEmbeddedStruct.OverrideIpAccessRestriction
		varIamGuestAccessSettings.ResourceLimits = varIamGuestAccessSettingsWithoutEmbeddedStruct.ResourceLimits
		*o = IamGuestAccessSettings(varIamGuestAccessSettings)
	} else {
		return err
	}

	varIamGuestAccessSettings := _IamGuestAccessSettings{}

	err = json.Unmarshal(data, &varIamGuestAccessSettings)
	if err == nil {
		o.MoBaseMo = varIamGuestAccessSettings.MoBaseMo
	} else {
		return err
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "ClassId")
		delete(additionalProperties, "ObjectType")
		delete(additionalProperties, "AllowedDomainNames")
		delete(additionalProperties, "MaxGuestAccessLinkShelfLife")
		delete(additionalProperties, "OverrideIpAccessRestriction")
		delete(additionalProperties, "ResourceLimits")

		// remove fields from embedded structs
		reflectMoBaseMo := reflect.ValueOf(o.MoBaseMo)
		for i := 0; i < reflectMoBaseMo.Type().NumField(); i++ {
			t := reflectMoBaseMo.Type().Field(i)

			if jsonTag := t.Tag.Get("json"); jsonTag != "" {
				fieldName := ""
				if commaIdx := strings.Index(jsonTag, ","); commaIdx > 0 {
					fieldName = jsonTag[:commaIdx]
				} else {
					fieldName = jsonTag
				}
				if fieldName != "AdditionalProperties" {
					delete(additionalProperties, fieldName)
				}
			}
		}

		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableIamGuestAccessSettings struct {
	value *IamGuestAccessSettings
	isSet bool
}

func (v NullableIamGuestAccessSettings) Get() *IamGuestAccessSettings {
	return v.value
}

func (v *NullableIamGuestAccessSettings) Set(val *IamGuestAccessSettings) {
	v.value = val
	v.isSet = true
}

func (v NullableIamGuestAccessSettings) IsSet() bool {
	return v.isSet
}

func (v *NullableIamGuestAccessSettings) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIamGuestAccessSettings(val *IamGuestAccessSettings) *NullableIamGuestAccessSettings {
	return &NullableIamGuestAccessSettings{value: val, isSet: true}
}

func (v NullableIamGuestAccessSettings) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIamGuestAccessSettings) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
