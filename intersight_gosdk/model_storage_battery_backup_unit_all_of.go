/*
Cisco Intersight

Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations. The Intersight OpenAPI document defines the complete set of properties that are returned in the HTTP response. From that perspective, a client can expect that no additional properties are returned, unless these properties are explicitly defined in the OpenAPI document. However, when a client uses an older version of the Intersight OpenAPI document, the server may send additional properties because the software is more recent than the client. In that case, the client may receive properties that it does not know about. Some generated SDKs perform a strict validation of the HTTP response body against the OpenAPI document.

API version: 1.0.11-14430
Contact: intersight@cisco.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package intersight

import (
	"encoding/json"
)

// StorageBatteryBackupUnitAllOf Definition of the list of properties defined in 'storage.BatteryBackupUnit', excluding properties defined in parent classes.
type StorageBatteryBackupUnitAllOf struct {
	// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.
	ClassId string `json:"ClassId"`
	// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
	ObjectType string `json:"ObjectType"`
	// This holds the capacitance (in percent) of the battery backup unit of the storage controller.
	CapacitanceInPercent *int64 `json:"CapacitanceInPercent,omitempty"`
	// This holds the charging state of the battery backup unit of the storage controller.
	ChargingState *string `json:"ChargingState,omitempty"`
	// This holds the current (in Amps) of the battery backup unit of the storage controller.
	CurrentInAmps *float32 `json:"CurrentInAmps,omitempty"`
	// This holds the design Capacity (in joules) of the battery backup unit of the storage controller.
	DesignCapacityInJoules *string `json:"DesignCapacityInJoules,omitempty"`
	// This holds the design volatage (in Volts) of the battery backup unit of the storage controller.
	DesignVoltageInVolts *float32 `json:"DesignVoltageInVolts,omitempty"`
	// This refers to the device name of the battery backup unit of the storage controller.
	DeviceName *string `json:"DeviceName,omitempty"`
	// This indicates whether the battery is present for the battery backup unit of the storage controller.
	IsBatteryPresent *bool `json:"IsBatteryPresent,omitempty"`
	// This indicates the capacitor for the battery backup unit of the storage controller.
	IsCapacitor *bool `json:"IsCapacitor,omitempty"`
	// This indicates learn cycle request of the battery backup unit of the storage controller.
	IsLearnCycleRequested *bool `json:"IsLearnCycleRequested,omitempty"`
	// This indicates the learn cycle transparent for the battery backup unit of the storage controller.
	IsLearnCycleTransparent *bool `json:"IsLearnCycleTransparent,omitempty"`
	// This indicates the temperature is high for the battery backup unit of the storage controller.
	IsTemperatureHigh *bool `json:"IsTemperatureHigh,omitempty"`
	// This indicates the voltage is Low for the battery backup unit of the storage controller.
	IsVoltageLow *bool `json:"IsVoltageLow,omitempty"`
	// This refers to learn cycle progress end time of the battery backup unit of the storage controller.
	LearnCycleProgressEndTimeStamp *string `json:"LearnCycleProgressEndTimeStamp,omitempty"`
	// This refers to learn cycle progress start time of the battery backup unit of the storage controller.
	LearnCycleProgressStartTimeStamp *string `json:"LearnCycleProgressStartTimeStamp,omitempty"`
	// This refers to learn cycle progress status of the battery backup unit of the storage controller.
	LearnCycleProgressStatus *string `json:"LearnCycleProgressStatus,omitempty"`
	// This refers to the learn mode of the battery backup unit of the storage controller.
	LearnMode *string `json:"LearnMode,omitempty"`
	// This refers to the manufacture date of the battery backup unit of the storage controller.
	ManufacturingDate *string `json:"ManufacturingDate,omitempty"`
	// This refers to the current module version of the battery backup unit of the storage controller.
	ModuleVersion *string `json:"ModuleVersion,omitempty"`
	// This refers to next learn cycle timestamp of the battery backup unit of the storage controller.
	NextLearnCycleTimeStamp *string `json:"NextLearnCycleTimeStamp,omitempty"`
	// This holds the pack energy (in joules) of the battery backup unit of the storage controller.
	PackEnergyInJoules *string `json:"PackEnergyInJoules,omitempty"`
	// This holds the remaining pool space (in percent) of the battery backup unit of the storage controller.
	RemainingPoolSpaceInPercent *int64 `json:"RemainingPoolSpaceInPercent,omitempty"`
	// This holds the current status of the battery backup unit of the storage controller.
	Status *string `json:"Status,omitempty"`
	// This holds the temperature (in Celsius) of the battery backup unit of the storage controller.
	TemperatureInCel *int64 `json:"TemperatureInCel,omitempty"`
	// This refers to the type of the battery backup unit of the storage controller.
	Type *string `json:"Type,omitempty"`
	// This holds the volatage (in Volts) of the battery backup unit of the storage controller.
	VoltageInVolts       *string                              `json:"VoltageInVolts,omitempty"`
	InventoryDeviceInfo  *InventoryDeviceInfoRelationship     `json:"InventoryDeviceInfo,omitempty"`
	RegisteredDevice     *AssetDeviceRegistrationRelationship `json:"RegisteredDevice,omitempty"`
	StorageController    *StorageControllerRelationship       `json:"StorageController,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _StorageBatteryBackupUnitAllOf StorageBatteryBackupUnitAllOf

// NewStorageBatteryBackupUnitAllOf instantiates a new StorageBatteryBackupUnitAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStorageBatteryBackupUnitAllOf(classId string, objectType string) *StorageBatteryBackupUnitAllOf {
	this := StorageBatteryBackupUnitAllOf{}
	this.ClassId = classId
	this.ObjectType = objectType
	return &this
}

// NewStorageBatteryBackupUnitAllOfWithDefaults instantiates a new StorageBatteryBackupUnitAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStorageBatteryBackupUnitAllOfWithDefaults() *StorageBatteryBackupUnitAllOf {
	this := StorageBatteryBackupUnitAllOf{}
	var classId string = "storage.BatteryBackupUnit"
	this.ClassId = classId
	var objectType string = "storage.BatteryBackupUnit"
	this.ObjectType = objectType
	return &this
}

// GetClassId returns the ClassId field value
func (o *StorageBatteryBackupUnitAllOf) GetClassId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ClassId
}

// GetClassIdOk returns a tuple with the ClassId field value
// and a boolean to check if the value has been set.
func (o *StorageBatteryBackupUnitAllOf) GetClassIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ClassId, true
}

// SetClassId sets field value
func (o *StorageBatteryBackupUnitAllOf) SetClassId(v string) {
	o.ClassId = v
}

// GetObjectType returns the ObjectType field value
func (o *StorageBatteryBackupUnitAllOf) GetObjectType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ObjectType
}

// GetObjectTypeOk returns a tuple with the ObjectType field value
// and a boolean to check if the value has been set.
func (o *StorageBatteryBackupUnitAllOf) GetObjectTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ObjectType, true
}

// SetObjectType sets field value
func (o *StorageBatteryBackupUnitAllOf) SetObjectType(v string) {
	o.ObjectType = v
}

// GetCapacitanceInPercent returns the CapacitanceInPercent field value if set, zero value otherwise.
func (o *StorageBatteryBackupUnitAllOf) GetCapacitanceInPercent() int64 {
	if o == nil || o.CapacitanceInPercent == nil {
		var ret int64
		return ret
	}
	return *o.CapacitanceInPercent
}

// GetCapacitanceInPercentOk returns a tuple with the CapacitanceInPercent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageBatteryBackupUnitAllOf) GetCapacitanceInPercentOk() (*int64, bool) {
	if o == nil || o.CapacitanceInPercent == nil {
		return nil, false
	}
	return o.CapacitanceInPercent, true
}

// HasCapacitanceInPercent returns a boolean if a field has been set.
func (o *StorageBatteryBackupUnitAllOf) HasCapacitanceInPercent() bool {
	if o != nil && o.CapacitanceInPercent != nil {
		return true
	}

	return false
}

// SetCapacitanceInPercent gets a reference to the given int64 and assigns it to the CapacitanceInPercent field.
func (o *StorageBatteryBackupUnitAllOf) SetCapacitanceInPercent(v int64) {
	o.CapacitanceInPercent = &v
}

// GetChargingState returns the ChargingState field value if set, zero value otherwise.
func (o *StorageBatteryBackupUnitAllOf) GetChargingState() string {
	if o == nil || o.ChargingState == nil {
		var ret string
		return ret
	}
	return *o.ChargingState
}

// GetChargingStateOk returns a tuple with the ChargingState field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageBatteryBackupUnitAllOf) GetChargingStateOk() (*string, bool) {
	if o == nil || o.ChargingState == nil {
		return nil, false
	}
	return o.ChargingState, true
}

// HasChargingState returns a boolean if a field has been set.
func (o *StorageBatteryBackupUnitAllOf) HasChargingState() bool {
	if o != nil && o.ChargingState != nil {
		return true
	}

	return false
}

// SetChargingState gets a reference to the given string and assigns it to the ChargingState field.
func (o *StorageBatteryBackupUnitAllOf) SetChargingState(v string) {
	o.ChargingState = &v
}

// GetCurrentInAmps returns the CurrentInAmps field value if set, zero value otherwise.
func (o *StorageBatteryBackupUnitAllOf) GetCurrentInAmps() float32 {
	if o == nil || o.CurrentInAmps == nil {
		var ret float32
		return ret
	}
	return *o.CurrentInAmps
}

// GetCurrentInAmpsOk returns a tuple with the CurrentInAmps field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageBatteryBackupUnitAllOf) GetCurrentInAmpsOk() (*float32, bool) {
	if o == nil || o.CurrentInAmps == nil {
		return nil, false
	}
	return o.CurrentInAmps, true
}

// HasCurrentInAmps returns a boolean if a field has been set.
func (o *StorageBatteryBackupUnitAllOf) HasCurrentInAmps() bool {
	if o != nil && o.CurrentInAmps != nil {
		return true
	}

	return false
}

// SetCurrentInAmps gets a reference to the given float32 and assigns it to the CurrentInAmps field.
func (o *StorageBatteryBackupUnitAllOf) SetCurrentInAmps(v float32) {
	o.CurrentInAmps = &v
}

// GetDesignCapacityInJoules returns the DesignCapacityInJoules field value if set, zero value otherwise.
func (o *StorageBatteryBackupUnitAllOf) GetDesignCapacityInJoules() string {
	if o == nil || o.DesignCapacityInJoules == nil {
		var ret string
		return ret
	}
	return *o.DesignCapacityInJoules
}

// GetDesignCapacityInJoulesOk returns a tuple with the DesignCapacityInJoules field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageBatteryBackupUnitAllOf) GetDesignCapacityInJoulesOk() (*string, bool) {
	if o == nil || o.DesignCapacityInJoules == nil {
		return nil, false
	}
	return o.DesignCapacityInJoules, true
}

// HasDesignCapacityInJoules returns a boolean if a field has been set.
func (o *StorageBatteryBackupUnitAllOf) HasDesignCapacityInJoules() bool {
	if o != nil && o.DesignCapacityInJoules != nil {
		return true
	}

	return false
}

// SetDesignCapacityInJoules gets a reference to the given string and assigns it to the DesignCapacityInJoules field.
func (o *StorageBatteryBackupUnitAllOf) SetDesignCapacityInJoules(v string) {
	o.DesignCapacityInJoules = &v
}

// GetDesignVoltageInVolts returns the DesignVoltageInVolts field value if set, zero value otherwise.
func (o *StorageBatteryBackupUnitAllOf) GetDesignVoltageInVolts() float32 {
	if o == nil || o.DesignVoltageInVolts == nil {
		var ret float32
		return ret
	}
	return *o.DesignVoltageInVolts
}

// GetDesignVoltageInVoltsOk returns a tuple with the DesignVoltageInVolts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageBatteryBackupUnitAllOf) GetDesignVoltageInVoltsOk() (*float32, bool) {
	if o == nil || o.DesignVoltageInVolts == nil {
		return nil, false
	}
	return o.DesignVoltageInVolts, true
}

// HasDesignVoltageInVolts returns a boolean if a field has been set.
func (o *StorageBatteryBackupUnitAllOf) HasDesignVoltageInVolts() bool {
	if o != nil && o.DesignVoltageInVolts != nil {
		return true
	}

	return false
}

// SetDesignVoltageInVolts gets a reference to the given float32 and assigns it to the DesignVoltageInVolts field.
func (o *StorageBatteryBackupUnitAllOf) SetDesignVoltageInVolts(v float32) {
	o.DesignVoltageInVolts = &v
}

// GetDeviceName returns the DeviceName field value if set, zero value otherwise.
func (o *StorageBatteryBackupUnitAllOf) GetDeviceName() string {
	if o == nil || o.DeviceName == nil {
		var ret string
		return ret
	}
	return *o.DeviceName
}

// GetDeviceNameOk returns a tuple with the DeviceName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageBatteryBackupUnitAllOf) GetDeviceNameOk() (*string, bool) {
	if o == nil || o.DeviceName == nil {
		return nil, false
	}
	return o.DeviceName, true
}

// HasDeviceName returns a boolean if a field has been set.
func (o *StorageBatteryBackupUnitAllOf) HasDeviceName() bool {
	if o != nil && o.DeviceName != nil {
		return true
	}

	return false
}

// SetDeviceName gets a reference to the given string and assigns it to the DeviceName field.
func (o *StorageBatteryBackupUnitAllOf) SetDeviceName(v string) {
	o.DeviceName = &v
}

// GetIsBatteryPresent returns the IsBatteryPresent field value if set, zero value otherwise.
func (o *StorageBatteryBackupUnitAllOf) GetIsBatteryPresent() bool {
	if o == nil || o.IsBatteryPresent == nil {
		var ret bool
		return ret
	}
	return *o.IsBatteryPresent
}

// GetIsBatteryPresentOk returns a tuple with the IsBatteryPresent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageBatteryBackupUnitAllOf) GetIsBatteryPresentOk() (*bool, bool) {
	if o == nil || o.IsBatteryPresent == nil {
		return nil, false
	}
	return o.IsBatteryPresent, true
}

// HasIsBatteryPresent returns a boolean if a field has been set.
func (o *StorageBatteryBackupUnitAllOf) HasIsBatteryPresent() bool {
	if o != nil && o.IsBatteryPresent != nil {
		return true
	}

	return false
}

// SetIsBatteryPresent gets a reference to the given bool and assigns it to the IsBatteryPresent field.
func (o *StorageBatteryBackupUnitAllOf) SetIsBatteryPresent(v bool) {
	o.IsBatteryPresent = &v
}

// GetIsCapacitor returns the IsCapacitor field value if set, zero value otherwise.
func (o *StorageBatteryBackupUnitAllOf) GetIsCapacitor() bool {
	if o == nil || o.IsCapacitor == nil {
		var ret bool
		return ret
	}
	return *o.IsCapacitor
}

// GetIsCapacitorOk returns a tuple with the IsCapacitor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageBatteryBackupUnitAllOf) GetIsCapacitorOk() (*bool, bool) {
	if o == nil || o.IsCapacitor == nil {
		return nil, false
	}
	return o.IsCapacitor, true
}

// HasIsCapacitor returns a boolean if a field has been set.
func (o *StorageBatteryBackupUnitAllOf) HasIsCapacitor() bool {
	if o != nil && o.IsCapacitor != nil {
		return true
	}

	return false
}

// SetIsCapacitor gets a reference to the given bool and assigns it to the IsCapacitor field.
func (o *StorageBatteryBackupUnitAllOf) SetIsCapacitor(v bool) {
	o.IsCapacitor = &v
}

// GetIsLearnCycleRequested returns the IsLearnCycleRequested field value if set, zero value otherwise.
func (o *StorageBatteryBackupUnitAllOf) GetIsLearnCycleRequested() bool {
	if o == nil || o.IsLearnCycleRequested == nil {
		var ret bool
		return ret
	}
	return *o.IsLearnCycleRequested
}

// GetIsLearnCycleRequestedOk returns a tuple with the IsLearnCycleRequested field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageBatteryBackupUnitAllOf) GetIsLearnCycleRequestedOk() (*bool, bool) {
	if o == nil || o.IsLearnCycleRequested == nil {
		return nil, false
	}
	return o.IsLearnCycleRequested, true
}

// HasIsLearnCycleRequested returns a boolean if a field has been set.
func (o *StorageBatteryBackupUnitAllOf) HasIsLearnCycleRequested() bool {
	if o != nil && o.IsLearnCycleRequested != nil {
		return true
	}

	return false
}

// SetIsLearnCycleRequested gets a reference to the given bool and assigns it to the IsLearnCycleRequested field.
func (o *StorageBatteryBackupUnitAllOf) SetIsLearnCycleRequested(v bool) {
	o.IsLearnCycleRequested = &v
}

// GetIsLearnCycleTransparent returns the IsLearnCycleTransparent field value if set, zero value otherwise.
func (o *StorageBatteryBackupUnitAllOf) GetIsLearnCycleTransparent() bool {
	if o == nil || o.IsLearnCycleTransparent == nil {
		var ret bool
		return ret
	}
	return *o.IsLearnCycleTransparent
}

// GetIsLearnCycleTransparentOk returns a tuple with the IsLearnCycleTransparent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageBatteryBackupUnitAllOf) GetIsLearnCycleTransparentOk() (*bool, bool) {
	if o == nil || o.IsLearnCycleTransparent == nil {
		return nil, false
	}
	return o.IsLearnCycleTransparent, true
}

// HasIsLearnCycleTransparent returns a boolean if a field has been set.
func (o *StorageBatteryBackupUnitAllOf) HasIsLearnCycleTransparent() bool {
	if o != nil && o.IsLearnCycleTransparent != nil {
		return true
	}

	return false
}

// SetIsLearnCycleTransparent gets a reference to the given bool and assigns it to the IsLearnCycleTransparent field.
func (o *StorageBatteryBackupUnitAllOf) SetIsLearnCycleTransparent(v bool) {
	o.IsLearnCycleTransparent = &v
}

// GetIsTemperatureHigh returns the IsTemperatureHigh field value if set, zero value otherwise.
func (o *StorageBatteryBackupUnitAllOf) GetIsTemperatureHigh() bool {
	if o == nil || o.IsTemperatureHigh == nil {
		var ret bool
		return ret
	}
	return *o.IsTemperatureHigh
}

// GetIsTemperatureHighOk returns a tuple with the IsTemperatureHigh field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageBatteryBackupUnitAllOf) GetIsTemperatureHighOk() (*bool, bool) {
	if o == nil || o.IsTemperatureHigh == nil {
		return nil, false
	}
	return o.IsTemperatureHigh, true
}

// HasIsTemperatureHigh returns a boolean if a field has been set.
func (o *StorageBatteryBackupUnitAllOf) HasIsTemperatureHigh() bool {
	if o != nil && o.IsTemperatureHigh != nil {
		return true
	}

	return false
}

// SetIsTemperatureHigh gets a reference to the given bool and assigns it to the IsTemperatureHigh field.
func (o *StorageBatteryBackupUnitAllOf) SetIsTemperatureHigh(v bool) {
	o.IsTemperatureHigh = &v
}

// GetIsVoltageLow returns the IsVoltageLow field value if set, zero value otherwise.
func (o *StorageBatteryBackupUnitAllOf) GetIsVoltageLow() bool {
	if o == nil || o.IsVoltageLow == nil {
		var ret bool
		return ret
	}
	return *o.IsVoltageLow
}

// GetIsVoltageLowOk returns a tuple with the IsVoltageLow field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageBatteryBackupUnitAllOf) GetIsVoltageLowOk() (*bool, bool) {
	if o == nil || o.IsVoltageLow == nil {
		return nil, false
	}
	return o.IsVoltageLow, true
}

// HasIsVoltageLow returns a boolean if a field has been set.
func (o *StorageBatteryBackupUnitAllOf) HasIsVoltageLow() bool {
	if o != nil && o.IsVoltageLow != nil {
		return true
	}

	return false
}

// SetIsVoltageLow gets a reference to the given bool and assigns it to the IsVoltageLow field.
func (o *StorageBatteryBackupUnitAllOf) SetIsVoltageLow(v bool) {
	o.IsVoltageLow = &v
}

// GetLearnCycleProgressEndTimeStamp returns the LearnCycleProgressEndTimeStamp field value if set, zero value otherwise.
func (o *StorageBatteryBackupUnitAllOf) GetLearnCycleProgressEndTimeStamp() string {
	if o == nil || o.LearnCycleProgressEndTimeStamp == nil {
		var ret string
		return ret
	}
	return *o.LearnCycleProgressEndTimeStamp
}

// GetLearnCycleProgressEndTimeStampOk returns a tuple with the LearnCycleProgressEndTimeStamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageBatteryBackupUnitAllOf) GetLearnCycleProgressEndTimeStampOk() (*string, bool) {
	if o == nil || o.LearnCycleProgressEndTimeStamp == nil {
		return nil, false
	}
	return o.LearnCycleProgressEndTimeStamp, true
}

// HasLearnCycleProgressEndTimeStamp returns a boolean if a field has been set.
func (o *StorageBatteryBackupUnitAllOf) HasLearnCycleProgressEndTimeStamp() bool {
	if o != nil && o.LearnCycleProgressEndTimeStamp != nil {
		return true
	}

	return false
}

// SetLearnCycleProgressEndTimeStamp gets a reference to the given string and assigns it to the LearnCycleProgressEndTimeStamp field.
func (o *StorageBatteryBackupUnitAllOf) SetLearnCycleProgressEndTimeStamp(v string) {
	o.LearnCycleProgressEndTimeStamp = &v
}

// GetLearnCycleProgressStartTimeStamp returns the LearnCycleProgressStartTimeStamp field value if set, zero value otherwise.
func (o *StorageBatteryBackupUnitAllOf) GetLearnCycleProgressStartTimeStamp() string {
	if o == nil || o.LearnCycleProgressStartTimeStamp == nil {
		var ret string
		return ret
	}
	return *o.LearnCycleProgressStartTimeStamp
}

// GetLearnCycleProgressStartTimeStampOk returns a tuple with the LearnCycleProgressStartTimeStamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageBatteryBackupUnitAllOf) GetLearnCycleProgressStartTimeStampOk() (*string, bool) {
	if o == nil || o.LearnCycleProgressStartTimeStamp == nil {
		return nil, false
	}
	return o.LearnCycleProgressStartTimeStamp, true
}

// HasLearnCycleProgressStartTimeStamp returns a boolean if a field has been set.
func (o *StorageBatteryBackupUnitAllOf) HasLearnCycleProgressStartTimeStamp() bool {
	if o != nil && o.LearnCycleProgressStartTimeStamp != nil {
		return true
	}

	return false
}

// SetLearnCycleProgressStartTimeStamp gets a reference to the given string and assigns it to the LearnCycleProgressStartTimeStamp field.
func (o *StorageBatteryBackupUnitAllOf) SetLearnCycleProgressStartTimeStamp(v string) {
	o.LearnCycleProgressStartTimeStamp = &v
}

// GetLearnCycleProgressStatus returns the LearnCycleProgressStatus field value if set, zero value otherwise.
func (o *StorageBatteryBackupUnitAllOf) GetLearnCycleProgressStatus() string {
	if o == nil || o.LearnCycleProgressStatus == nil {
		var ret string
		return ret
	}
	return *o.LearnCycleProgressStatus
}

// GetLearnCycleProgressStatusOk returns a tuple with the LearnCycleProgressStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageBatteryBackupUnitAllOf) GetLearnCycleProgressStatusOk() (*string, bool) {
	if o == nil || o.LearnCycleProgressStatus == nil {
		return nil, false
	}
	return o.LearnCycleProgressStatus, true
}

// HasLearnCycleProgressStatus returns a boolean if a field has been set.
func (o *StorageBatteryBackupUnitAllOf) HasLearnCycleProgressStatus() bool {
	if o != nil && o.LearnCycleProgressStatus != nil {
		return true
	}

	return false
}

// SetLearnCycleProgressStatus gets a reference to the given string and assigns it to the LearnCycleProgressStatus field.
func (o *StorageBatteryBackupUnitAllOf) SetLearnCycleProgressStatus(v string) {
	o.LearnCycleProgressStatus = &v
}

// GetLearnMode returns the LearnMode field value if set, zero value otherwise.
func (o *StorageBatteryBackupUnitAllOf) GetLearnMode() string {
	if o == nil || o.LearnMode == nil {
		var ret string
		return ret
	}
	return *o.LearnMode
}

// GetLearnModeOk returns a tuple with the LearnMode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageBatteryBackupUnitAllOf) GetLearnModeOk() (*string, bool) {
	if o == nil || o.LearnMode == nil {
		return nil, false
	}
	return o.LearnMode, true
}

// HasLearnMode returns a boolean if a field has been set.
func (o *StorageBatteryBackupUnitAllOf) HasLearnMode() bool {
	if o != nil && o.LearnMode != nil {
		return true
	}

	return false
}

// SetLearnMode gets a reference to the given string and assigns it to the LearnMode field.
func (o *StorageBatteryBackupUnitAllOf) SetLearnMode(v string) {
	o.LearnMode = &v
}

// GetManufacturingDate returns the ManufacturingDate field value if set, zero value otherwise.
func (o *StorageBatteryBackupUnitAllOf) GetManufacturingDate() string {
	if o == nil || o.ManufacturingDate == nil {
		var ret string
		return ret
	}
	return *o.ManufacturingDate
}

// GetManufacturingDateOk returns a tuple with the ManufacturingDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageBatteryBackupUnitAllOf) GetManufacturingDateOk() (*string, bool) {
	if o == nil || o.ManufacturingDate == nil {
		return nil, false
	}
	return o.ManufacturingDate, true
}

// HasManufacturingDate returns a boolean if a field has been set.
func (o *StorageBatteryBackupUnitAllOf) HasManufacturingDate() bool {
	if o != nil && o.ManufacturingDate != nil {
		return true
	}

	return false
}

// SetManufacturingDate gets a reference to the given string and assigns it to the ManufacturingDate field.
func (o *StorageBatteryBackupUnitAllOf) SetManufacturingDate(v string) {
	o.ManufacturingDate = &v
}

// GetModuleVersion returns the ModuleVersion field value if set, zero value otherwise.
func (o *StorageBatteryBackupUnitAllOf) GetModuleVersion() string {
	if o == nil || o.ModuleVersion == nil {
		var ret string
		return ret
	}
	return *o.ModuleVersion
}

// GetModuleVersionOk returns a tuple with the ModuleVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageBatteryBackupUnitAllOf) GetModuleVersionOk() (*string, bool) {
	if o == nil || o.ModuleVersion == nil {
		return nil, false
	}
	return o.ModuleVersion, true
}

// HasModuleVersion returns a boolean if a field has been set.
func (o *StorageBatteryBackupUnitAllOf) HasModuleVersion() bool {
	if o != nil && o.ModuleVersion != nil {
		return true
	}

	return false
}

// SetModuleVersion gets a reference to the given string and assigns it to the ModuleVersion field.
func (o *StorageBatteryBackupUnitAllOf) SetModuleVersion(v string) {
	o.ModuleVersion = &v
}

// GetNextLearnCycleTimeStamp returns the NextLearnCycleTimeStamp field value if set, zero value otherwise.
func (o *StorageBatteryBackupUnitAllOf) GetNextLearnCycleTimeStamp() string {
	if o == nil || o.NextLearnCycleTimeStamp == nil {
		var ret string
		return ret
	}
	return *o.NextLearnCycleTimeStamp
}

// GetNextLearnCycleTimeStampOk returns a tuple with the NextLearnCycleTimeStamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageBatteryBackupUnitAllOf) GetNextLearnCycleTimeStampOk() (*string, bool) {
	if o == nil || o.NextLearnCycleTimeStamp == nil {
		return nil, false
	}
	return o.NextLearnCycleTimeStamp, true
}

// HasNextLearnCycleTimeStamp returns a boolean if a field has been set.
func (o *StorageBatteryBackupUnitAllOf) HasNextLearnCycleTimeStamp() bool {
	if o != nil && o.NextLearnCycleTimeStamp != nil {
		return true
	}

	return false
}

// SetNextLearnCycleTimeStamp gets a reference to the given string and assigns it to the NextLearnCycleTimeStamp field.
func (o *StorageBatteryBackupUnitAllOf) SetNextLearnCycleTimeStamp(v string) {
	o.NextLearnCycleTimeStamp = &v
}

// GetPackEnergyInJoules returns the PackEnergyInJoules field value if set, zero value otherwise.
func (o *StorageBatteryBackupUnitAllOf) GetPackEnergyInJoules() string {
	if o == nil || o.PackEnergyInJoules == nil {
		var ret string
		return ret
	}
	return *o.PackEnergyInJoules
}

// GetPackEnergyInJoulesOk returns a tuple with the PackEnergyInJoules field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageBatteryBackupUnitAllOf) GetPackEnergyInJoulesOk() (*string, bool) {
	if o == nil || o.PackEnergyInJoules == nil {
		return nil, false
	}
	return o.PackEnergyInJoules, true
}

// HasPackEnergyInJoules returns a boolean if a field has been set.
func (o *StorageBatteryBackupUnitAllOf) HasPackEnergyInJoules() bool {
	if o != nil && o.PackEnergyInJoules != nil {
		return true
	}

	return false
}

// SetPackEnergyInJoules gets a reference to the given string and assigns it to the PackEnergyInJoules field.
func (o *StorageBatteryBackupUnitAllOf) SetPackEnergyInJoules(v string) {
	o.PackEnergyInJoules = &v
}

// GetRemainingPoolSpaceInPercent returns the RemainingPoolSpaceInPercent field value if set, zero value otherwise.
func (o *StorageBatteryBackupUnitAllOf) GetRemainingPoolSpaceInPercent() int64 {
	if o == nil || o.RemainingPoolSpaceInPercent == nil {
		var ret int64
		return ret
	}
	return *o.RemainingPoolSpaceInPercent
}

// GetRemainingPoolSpaceInPercentOk returns a tuple with the RemainingPoolSpaceInPercent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageBatteryBackupUnitAllOf) GetRemainingPoolSpaceInPercentOk() (*int64, bool) {
	if o == nil || o.RemainingPoolSpaceInPercent == nil {
		return nil, false
	}
	return o.RemainingPoolSpaceInPercent, true
}

// HasRemainingPoolSpaceInPercent returns a boolean if a field has been set.
func (o *StorageBatteryBackupUnitAllOf) HasRemainingPoolSpaceInPercent() bool {
	if o != nil && o.RemainingPoolSpaceInPercent != nil {
		return true
	}

	return false
}

// SetRemainingPoolSpaceInPercent gets a reference to the given int64 and assigns it to the RemainingPoolSpaceInPercent field.
func (o *StorageBatteryBackupUnitAllOf) SetRemainingPoolSpaceInPercent(v int64) {
	o.RemainingPoolSpaceInPercent = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *StorageBatteryBackupUnitAllOf) GetStatus() string {
	if o == nil || o.Status == nil {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageBatteryBackupUnitAllOf) GetStatusOk() (*string, bool) {
	if o == nil || o.Status == nil {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *StorageBatteryBackupUnitAllOf) HasStatus() bool {
	if o != nil && o.Status != nil {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *StorageBatteryBackupUnitAllOf) SetStatus(v string) {
	o.Status = &v
}

// GetTemperatureInCel returns the TemperatureInCel field value if set, zero value otherwise.
func (o *StorageBatteryBackupUnitAllOf) GetTemperatureInCel() int64 {
	if o == nil || o.TemperatureInCel == nil {
		var ret int64
		return ret
	}
	return *o.TemperatureInCel
}

// GetTemperatureInCelOk returns a tuple with the TemperatureInCel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageBatteryBackupUnitAllOf) GetTemperatureInCelOk() (*int64, bool) {
	if o == nil || o.TemperatureInCel == nil {
		return nil, false
	}
	return o.TemperatureInCel, true
}

// HasTemperatureInCel returns a boolean if a field has been set.
func (o *StorageBatteryBackupUnitAllOf) HasTemperatureInCel() bool {
	if o != nil && o.TemperatureInCel != nil {
		return true
	}

	return false
}

// SetTemperatureInCel gets a reference to the given int64 and assigns it to the TemperatureInCel field.
func (o *StorageBatteryBackupUnitAllOf) SetTemperatureInCel(v int64) {
	o.TemperatureInCel = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *StorageBatteryBackupUnitAllOf) GetType() string {
	if o == nil || o.Type == nil {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageBatteryBackupUnitAllOf) GetTypeOk() (*string, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *StorageBatteryBackupUnitAllOf) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *StorageBatteryBackupUnitAllOf) SetType(v string) {
	o.Type = &v
}

// GetVoltageInVolts returns the VoltageInVolts field value if set, zero value otherwise.
func (o *StorageBatteryBackupUnitAllOf) GetVoltageInVolts() string {
	if o == nil || o.VoltageInVolts == nil {
		var ret string
		return ret
	}
	return *o.VoltageInVolts
}

// GetVoltageInVoltsOk returns a tuple with the VoltageInVolts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageBatteryBackupUnitAllOf) GetVoltageInVoltsOk() (*string, bool) {
	if o == nil || o.VoltageInVolts == nil {
		return nil, false
	}
	return o.VoltageInVolts, true
}

// HasVoltageInVolts returns a boolean if a field has been set.
func (o *StorageBatteryBackupUnitAllOf) HasVoltageInVolts() bool {
	if o != nil && o.VoltageInVolts != nil {
		return true
	}

	return false
}

// SetVoltageInVolts gets a reference to the given string and assigns it to the VoltageInVolts field.
func (o *StorageBatteryBackupUnitAllOf) SetVoltageInVolts(v string) {
	o.VoltageInVolts = &v
}

// GetInventoryDeviceInfo returns the InventoryDeviceInfo field value if set, zero value otherwise.
func (o *StorageBatteryBackupUnitAllOf) GetInventoryDeviceInfo() InventoryDeviceInfoRelationship {
	if o == nil || o.InventoryDeviceInfo == nil {
		var ret InventoryDeviceInfoRelationship
		return ret
	}
	return *o.InventoryDeviceInfo
}

// GetInventoryDeviceInfoOk returns a tuple with the InventoryDeviceInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageBatteryBackupUnitAllOf) GetInventoryDeviceInfoOk() (*InventoryDeviceInfoRelationship, bool) {
	if o == nil || o.InventoryDeviceInfo == nil {
		return nil, false
	}
	return o.InventoryDeviceInfo, true
}

// HasInventoryDeviceInfo returns a boolean if a field has been set.
func (o *StorageBatteryBackupUnitAllOf) HasInventoryDeviceInfo() bool {
	if o != nil && o.InventoryDeviceInfo != nil {
		return true
	}

	return false
}

// SetInventoryDeviceInfo gets a reference to the given InventoryDeviceInfoRelationship and assigns it to the InventoryDeviceInfo field.
func (o *StorageBatteryBackupUnitAllOf) SetInventoryDeviceInfo(v InventoryDeviceInfoRelationship) {
	o.InventoryDeviceInfo = &v
}

// GetRegisteredDevice returns the RegisteredDevice field value if set, zero value otherwise.
func (o *StorageBatteryBackupUnitAllOf) GetRegisteredDevice() AssetDeviceRegistrationRelationship {
	if o == nil || o.RegisteredDevice == nil {
		var ret AssetDeviceRegistrationRelationship
		return ret
	}
	return *o.RegisteredDevice
}

// GetRegisteredDeviceOk returns a tuple with the RegisteredDevice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageBatteryBackupUnitAllOf) GetRegisteredDeviceOk() (*AssetDeviceRegistrationRelationship, bool) {
	if o == nil || o.RegisteredDevice == nil {
		return nil, false
	}
	return o.RegisteredDevice, true
}

// HasRegisteredDevice returns a boolean if a field has been set.
func (o *StorageBatteryBackupUnitAllOf) HasRegisteredDevice() bool {
	if o != nil && o.RegisteredDevice != nil {
		return true
	}

	return false
}

// SetRegisteredDevice gets a reference to the given AssetDeviceRegistrationRelationship and assigns it to the RegisteredDevice field.
func (o *StorageBatteryBackupUnitAllOf) SetRegisteredDevice(v AssetDeviceRegistrationRelationship) {
	o.RegisteredDevice = &v
}

// GetStorageController returns the StorageController field value if set, zero value otherwise.
func (o *StorageBatteryBackupUnitAllOf) GetStorageController() StorageControllerRelationship {
	if o == nil || o.StorageController == nil {
		var ret StorageControllerRelationship
		return ret
	}
	return *o.StorageController
}

// GetStorageControllerOk returns a tuple with the StorageController field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageBatteryBackupUnitAllOf) GetStorageControllerOk() (*StorageControllerRelationship, bool) {
	if o == nil || o.StorageController == nil {
		return nil, false
	}
	return o.StorageController, true
}

// HasStorageController returns a boolean if a field has been set.
func (o *StorageBatteryBackupUnitAllOf) HasStorageController() bool {
	if o != nil && o.StorageController != nil {
		return true
	}

	return false
}

// SetStorageController gets a reference to the given StorageControllerRelationship and assigns it to the StorageController field.
func (o *StorageBatteryBackupUnitAllOf) SetStorageController(v StorageControllerRelationship) {
	o.StorageController = &v
}

func (o StorageBatteryBackupUnitAllOf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["ClassId"] = o.ClassId
	}
	if true {
		toSerialize["ObjectType"] = o.ObjectType
	}
	if o.CapacitanceInPercent != nil {
		toSerialize["CapacitanceInPercent"] = o.CapacitanceInPercent
	}
	if o.ChargingState != nil {
		toSerialize["ChargingState"] = o.ChargingState
	}
	if o.CurrentInAmps != nil {
		toSerialize["CurrentInAmps"] = o.CurrentInAmps
	}
	if o.DesignCapacityInJoules != nil {
		toSerialize["DesignCapacityInJoules"] = o.DesignCapacityInJoules
	}
	if o.DesignVoltageInVolts != nil {
		toSerialize["DesignVoltageInVolts"] = o.DesignVoltageInVolts
	}
	if o.DeviceName != nil {
		toSerialize["DeviceName"] = o.DeviceName
	}
	if o.IsBatteryPresent != nil {
		toSerialize["IsBatteryPresent"] = o.IsBatteryPresent
	}
	if o.IsCapacitor != nil {
		toSerialize["IsCapacitor"] = o.IsCapacitor
	}
	if o.IsLearnCycleRequested != nil {
		toSerialize["IsLearnCycleRequested"] = o.IsLearnCycleRequested
	}
	if o.IsLearnCycleTransparent != nil {
		toSerialize["IsLearnCycleTransparent"] = o.IsLearnCycleTransparent
	}
	if o.IsTemperatureHigh != nil {
		toSerialize["IsTemperatureHigh"] = o.IsTemperatureHigh
	}
	if o.IsVoltageLow != nil {
		toSerialize["IsVoltageLow"] = o.IsVoltageLow
	}
	if o.LearnCycleProgressEndTimeStamp != nil {
		toSerialize["LearnCycleProgressEndTimeStamp"] = o.LearnCycleProgressEndTimeStamp
	}
	if o.LearnCycleProgressStartTimeStamp != nil {
		toSerialize["LearnCycleProgressStartTimeStamp"] = o.LearnCycleProgressStartTimeStamp
	}
	if o.LearnCycleProgressStatus != nil {
		toSerialize["LearnCycleProgressStatus"] = o.LearnCycleProgressStatus
	}
	if o.LearnMode != nil {
		toSerialize["LearnMode"] = o.LearnMode
	}
	if o.ManufacturingDate != nil {
		toSerialize["ManufacturingDate"] = o.ManufacturingDate
	}
	if o.ModuleVersion != nil {
		toSerialize["ModuleVersion"] = o.ModuleVersion
	}
	if o.NextLearnCycleTimeStamp != nil {
		toSerialize["NextLearnCycleTimeStamp"] = o.NextLearnCycleTimeStamp
	}
	if o.PackEnergyInJoules != nil {
		toSerialize["PackEnergyInJoules"] = o.PackEnergyInJoules
	}
	if o.RemainingPoolSpaceInPercent != nil {
		toSerialize["RemainingPoolSpaceInPercent"] = o.RemainingPoolSpaceInPercent
	}
	if o.Status != nil {
		toSerialize["Status"] = o.Status
	}
	if o.TemperatureInCel != nil {
		toSerialize["TemperatureInCel"] = o.TemperatureInCel
	}
	if o.Type != nil {
		toSerialize["Type"] = o.Type
	}
	if o.VoltageInVolts != nil {
		toSerialize["VoltageInVolts"] = o.VoltageInVolts
	}
	if o.InventoryDeviceInfo != nil {
		toSerialize["InventoryDeviceInfo"] = o.InventoryDeviceInfo
	}
	if o.RegisteredDevice != nil {
		toSerialize["RegisteredDevice"] = o.RegisteredDevice
	}
	if o.StorageController != nil {
		toSerialize["StorageController"] = o.StorageController
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *StorageBatteryBackupUnitAllOf) UnmarshalJSON(bytes []byte) (err error) {
	varStorageBatteryBackupUnitAllOf := _StorageBatteryBackupUnitAllOf{}

	if err = json.Unmarshal(bytes, &varStorageBatteryBackupUnitAllOf); err == nil {
		*o = StorageBatteryBackupUnitAllOf(varStorageBatteryBackupUnitAllOf)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "ClassId")
		delete(additionalProperties, "ObjectType")
		delete(additionalProperties, "CapacitanceInPercent")
		delete(additionalProperties, "ChargingState")
		delete(additionalProperties, "CurrentInAmps")
		delete(additionalProperties, "DesignCapacityInJoules")
		delete(additionalProperties, "DesignVoltageInVolts")
		delete(additionalProperties, "DeviceName")
		delete(additionalProperties, "IsBatteryPresent")
		delete(additionalProperties, "IsCapacitor")
		delete(additionalProperties, "IsLearnCycleRequested")
		delete(additionalProperties, "IsLearnCycleTransparent")
		delete(additionalProperties, "IsTemperatureHigh")
		delete(additionalProperties, "IsVoltageLow")
		delete(additionalProperties, "LearnCycleProgressEndTimeStamp")
		delete(additionalProperties, "LearnCycleProgressStartTimeStamp")
		delete(additionalProperties, "LearnCycleProgressStatus")
		delete(additionalProperties, "LearnMode")
		delete(additionalProperties, "ManufacturingDate")
		delete(additionalProperties, "ModuleVersion")
		delete(additionalProperties, "NextLearnCycleTimeStamp")
		delete(additionalProperties, "PackEnergyInJoules")
		delete(additionalProperties, "RemainingPoolSpaceInPercent")
		delete(additionalProperties, "Status")
		delete(additionalProperties, "TemperatureInCel")
		delete(additionalProperties, "Type")
		delete(additionalProperties, "VoltageInVolts")
		delete(additionalProperties, "InventoryDeviceInfo")
		delete(additionalProperties, "RegisteredDevice")
		delete(additionalProperties, "StorageController")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableStorageBatteryBackupUnitAllOf struct {
	value *StorageBatteryBackupUnitAllOf
	isSet bool
}

func (v NullableStorageBatteryBackupUnitAllOf) Get() *StorageBatteryBackupUnitAllOf {
	return v.value
}

func (v *NullableStorageBatteryBackupUnitAllOf) Set(val *StorageBatteryBackupUnitAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableStorageBatteryBackupUnitAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableStorageBatteryBackupUnitAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStorageBatteryBackupUnitAllOf(val *StorageBatteryBackupUnitAllOf) *NullableStorageBatteryBackupUnitAllOf {
	return &NullableStorageBatteryBackupUnitAllOf{value: val, isSet: true}
}

func (v NullableStorageBatteryBackupUnitAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStorageBatteryBackupUnitAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
