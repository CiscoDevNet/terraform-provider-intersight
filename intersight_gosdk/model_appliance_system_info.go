/*
Cisco Intersight

Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations. The Intersight OpenAPI document defines the complete set of properties that are returned in the HTTP response. From that perspective, a client can expect that no additional properties are returned, unless these properties are explicitly defined in the OpenAPI document. However, when a client uses an older version of the Intersight OpenAPI document, the server may send additional properties because the software is more recent than the client. In that case, the client may receive properties that it does not know about. Some generated SDKs perform a strict validation of the HTTP response body against the OpenAPI document.

API version: 1.0.11-2024100405
Contact: intersight@cisco.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package intersight

import (
	"encoding/json"
	"fmt"
	"reflect"
	"strings"
)

// checks if the ApplianceSystemInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ApplianceSystemInfo{}

// ApplianceSystemInfo The Intersight Appliance's system information. SystemInfo is a singleton managed object created during the Intersight Appliance setup. The Intersight Appliance updates the SystemInfo managed object with up to date cluster status information periodically.
type ApplianceSystemInfo struct {
	MoBaseMo
	// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.
	ClassId string `json:"ClassId"`
	// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
	ObjectType string `json:"ObjectType"`
	// Connection state of the Intersight Appliance to the Intersight. * `` - The target details have been persisted but Intersight has not yet attempted to connect to the target. * `Connected` - Intersight is able to establish a connection to the target and initiate management activities. * `NotConnected` - Intersight is unable to establish a connection to the target. * `ClaimInProgress` - Claim of the target is in progress. A connection to the target has not been fully established. * `UnclaimInProgress` - Unclaim of the target is in progress. Intersight is able to connect to the target and all management operations are supported. * `Unclaimed` - The device was un-claimed from the users account by an Administrator of the device. Also indicates the failure to claim Targets of type HTTP Endpoint in Intersight. * `Claimed` - Target of type HTTP Endpoint is successfully claimed in Intersight. Currently no validation is performed to verify the Target connectivity from Intersight at the time of creation. However invoking API from Intersight Orchestrator fails if this Target is not reachable from Intersight or if Target API credentials are incorrect.
	CloudConnStatus *string `json:"CloudConnStatus,omitempty"`
	// Current status of cluster operation on the Intersight Appliance. * `none` - The Intersight Appliance is running in standalone mode. * `active` - The Intersight Appliance is running as part of a cluster. * `pending` - The Intersight Appliance is currently forming a cluster. * `failed` - The Intersight Appliance failed to form a cluster.
	ClusterStatus *string `json:"ClusterStatus,omitempty"`
	// Current running deployment size for the Intersight Appliance cluster. Eg. small, medium, large etc.
	DeploymentSize *string `json:"DeploymentSize,omitempty"`
	// Publicly accessible FQDN of the Intersight Appliance.
	Hostname *string `json:"Hostname,omitempty"`
	// Indicates that the setup initialization process has been completed.
	InitDone *bool `json:"InitDone,omitempty"`
	// Publicly accessible IP address of the Intersight Appliance.
	IpAddress *string `json:"IpAddress,omitempty"`
	// Specifies whether this Intersight Appliance is using a virtual ip address.
	IsVirtualIp *bool `json:"IsVirtualIp,omitempty"`
	// Operational status of the Intersight Appliance cluster. * `Unknown` - The status of the appliance node is unknown. * `Operational` - The appliance node is operational. * `Impaired` - The appliance node is impaired. * `AttentionNeeded` - The appliance node needs attention. * `ReadyToJoin` - The node is ready to be added to a standalone Intersight Appliance to form a cluster. * `OutOfService` - The user has taken this node (part of a cluster) to out of service. * `ReadyForReplacement` - The cluster node is ready to be replaced. * `ReplacementInProgress` - The cluster node replacement is in progress. * `ReplacementFailed` - There was a failure during the cluster node replacement.
	OperationalStatus *string `json:"OperationalStatus,omitempty"`
	// SerialId of the Intersight Appliance. SerialId is generated when the Intersight Appliance is setup. It is a unique UUID string, and serialId will not change for the life time of the Intersight Appliance.
	SerialId *string `json:"SerialId,omitempty"`
	// Timezone of the Intersight Appliance. * `Pacific/Niue` -  * `Africa/Abidjan` -  * `Africa/Accra` -  * `Africa/Addis_Ababa` -  * `Africa/Algiers` -  * `Africa/Asmara` -  * `Africa/Bamako` -  * `Africa/Bangui` -  * `Africa/Banjul` -  * `Africa/Bissau` -  * `Africa/Blantyre` -  * `Africa/Brazzaville` -  * `Africa/Bujumbura` -  * `Africa/Cairo` -  * `Africa/Casablanca` -  * `Africa/Ceuta` -  * `Africa/Conakry` -  * `Africa/Dakar` -  * `Africa/Dar_es_Salaam` -  * `Africa/Djibouti` -  * `Africa/Douala` -  * `Africa/El_Aaiun` -  * `Africa/Freetown` -  * `Africa/Gaborone` -  * `Africa/Harare` -  * `Africa/Johannesburg` -  * `Africa/Juba` -  * `Africa/Kampala` -  * `Africa/Khartoum` -  * `Africa/Kigali` -  * `Africa/Kinshasa` -  * `Africa/Lagos` -  * `Africa/Libreville` -  * `Africa/Lome` -  * `Africa/Luanda` -  * `Africa/Lubumbashi` -  * `Africa/Lusaka` -  * `Africa/Malabo` -  * `Africa/Maputo` -  * `Africa/Maseru` -  * `Africa/Mbabane` -  * `Africa/Mogadishu` -  * `Africa/Monrovia` -  * `Africa/Nairobi` -  * `Africa/Ndjamena` -  * `Africa/Niamey` -  * `Africa/Nouakchott` -  * `Africa/Ouagadougou` -  * `Africa/Porto-Novo` -  * `Africa/Sao_Tome` -  * `Africa/Tripoli` -  * `Africa/Tunis` -  * `Africa/Windhoek` -  * `America/Adak` -  * `America/Anchorage` -  * `America/Anguilla` -  * `America/Antigua` -  * `America/Araguaina` -  * `America/Argentina/Buenos_Aires` -  * `America/Argentina/Catamarca` -  * `America/Argentina/Cordoba` -  * `America/Argentina/Jujuy` -  * `America/Argentina/La_Rioja` -  * `America/Argentina/Mendoza` -  * `America/Argentina/Rio_Gallegos` -  * `America/Argentina/Salta` -  * `America/Argentina/San_Juan` -  * `America/Argentina/San_Luis` -  * `America/Argentina/Tucuman` -  * `America/Argentina/Ushuaia` -  * `America/Aruba` -  * `America/Asuncion` -  * `America/Atikokan` -  * `America/Bahia` -  * `America/Bahia_Banderas` -  * `America/Barbados` -  * `America/Belem` -  * `America/Belize` -  * `America/Blanc-Sablon` -  * `America/Boa_Vista` -  * `America/Bogota` -  * `America/Boise` -  * `America/Cambridge_Bay` -  * `America/Campo_Grande` -  * `America/Cancun` -  * `America/Caracas` -  * `America/Cayenne` -  * `America/Cayman` -  * `America/Chicago` -  * `America/Chihuahua` -  * `America/Costa_Rica` -  * `America/Creston` -  * `America/Cuiaba` -  * `America/Curacao` -  * `America/Danmarkshavn` -  * `America/Dawson` -  * `America/Dawson_Creek` -  * `America/Denver` -  * `America/Detroit` -  * `America/Dominica` -  * `America/Edmonton` -  * `America/Eirunepe` -  * `America/El_Salvador` -  * `America/Fortaleza` -  * `America/Glace_Bay` -  * `America/Godthab` -  * `America/Goose_Bay` -  * `America/Grand_Turk` -  * `America/Grenada` -  * `America/Guadeloupe` -  * `America/Guatemala` -  * `America/Guayaquil` -  * `America/Guyana` -  * `America/Halifax` -  * `America/Havana` -  * `America/Hermosillo` -  * `America/Indiana/Indianapolis` -  * `America/Indiana/Knox` -  * `America/Indiana/Marengo` -  * `America/Indiana/Petersburg` -  * `America/Indiana/Tell_City` -  * `America/Indiana/Vevay` -  * `America/Indiana/Vincennes` -  * `America/Indiana/Winamac` -  * `America/Inuvik` -  * `America/Iqaluit` -  * `America/Jamaica` -  * `America/Juneau` -  * `America/Kentucky/Louisville` -  * `America/Kentucky/Monticello` -  * `America/Kralendijk` -  * `America/La_Paz` -  * `America/Lima` -  * `America/Los_Angeles` -  * `America/Lower_Princes` -  * `America/Maceio` -  * `America/Managua` -  * `America/Manaus` -  * `America/Marigot` -  * `America/Martinique` -  * `America/Matamoros` -  * `America/Mazatlan` -  * `America/Menominee` -  * `America/Merida` -  * `America/Metlakatla` -  * `America/Mexico_City` -  * `America/Miquelon` -  * `America/Moncton` -  * `America/Monterrey` -  * `America/Montevideo` -  * `America/Montreal` -  * `America/Montserrat` -  * `America/Nassau` -  * `America/New_York` -  * `America/Nipigon` -  * `America/Nome` -  * `America/Noronha` -  * `America/North_Dakota/Beulah` -  * `America/North_Dakota/Center` -  * `America/North_Dakota/New_Salem` -  * `America/Ojinaga` -  * `America/Panama` -  * `America/Pangnirtung` -  * `America/Paramaribo` -  * `America/Phoenix` -  * `America/Port-au-Prince` -  * `America/Port_of_Spain` -  * `America/Porto_Velho` -  * `America/Puerto_Rico` -  * `America/Rainy_River` -  * `America/Rankin_Inlet` -  * `America/Recife` -  * `America/Regina` -  * `America/Resolute` -  * `America/Rio_Branco` -  * `America/Santa_Isabel` -  * `America/Santarem` -  * `America/Santiago` -  * `America/Santo_Domingo` -  * `America/Sao_Paulo` -  * `America/Scoresbysund` -  * `America/Shiprock` -  * `America/Sitka` -  * `America/St_Barthelemy` -  * `America/St_Johns` -  * `America/St_Kitts` -  * `America/St_Lucia` -  * `America/St_Thomas` -  * `America/St_Vincent` -  * `America/Swift_Current` -  * `America/Tegucigalpa` -  * `America/Thule` -  * `America/Thunder_Bay` -  * `America/Tijuana` -  * `America/Toronto` -  * `America/Tortola` -  * `America/Vancouver` -  * `America/Whitehorse` -  * `America/Winnipeg` -  * `America/Yakutat` -  * `America/Yellowknife` -  * `Antarctica/Casey` -  * `Antarctica/Davis` -  * `Antarctica/DumontDUrville` -  * `Antarctica/Macquarie` -  * `Antarctica/Mawson` -  * `Antarctica/McMurdo` -  * `Antarctica/Palmer` -  * `Antarctica/Rothera` -  * `Antarctica/South_Pole` -  * `Antarctica/Syowa` -  * `Antarctica/Troll` -  * `Antarctica/Vostok` -  * `Arctic/Longyearbyen` -  * `Asia/Aden` -  * `Asia/Almaty` -  * `Asia/Amman` -  * `Asia/Anadyr` -  * `Asia/Aqtau` -  * `Asia/Aqtobe` -  * `Asia/Ashgabat` -  * `Asia/Baghdad` -  * `Asia/Bahrain` -  * `Asia/Baku` -  * `Asia/Bangkok` -  * `Asia/Beirut` -  * `Asia/Bishkek` -  * `Asia/Brunei` -  * `Asia/Calcutta` -  * `Asia/Choibalsan` -  * `Asia/Chongqing` -  * `Asia/Colombo` -  * `Asia/Damascus` -  * `Asia/Dhaka` -  * `Asia/Dili` -  * `Asia/Dubai` -  * `Asia/Dushanbe` -  * `Asia/Gaza` -  * `Asia/Harbin` -  * `Asia/Hebron` -  * `Asia/Ho_Chi_Minh` -  * `Asia/Hong_Kong` -  * `Asia/Hovd` -  * `Asia/Irkutsk` -  * `Asia/Jakarta` -  * `Asia/Jayapura` -  * `Asia/Jerusalem` -  * `Asia/Kabul` -  * `Asia/Kamchatka` -  * `Asia/Karachi` -  * `Asia/Kashgar` -  * `Asia/Kathmandu` -  * `Asia/Katmandu` -  * `Asia/Khandyga` -  * `Asia/Kolkata` -  * `Asia/Krasnoyarsk` -  * `Asia/Kuala_Lumpur` -  * `Asia/Kuching` -  * `Asia/Kuwait` -  * `Asia/Macau` -  * `Asia/Magadan` -  * `Asia/Makassar` -  * `Asia/Manila` -  * `Asia/Muscat` -  * `Asia/Nicosia` -  * `Asia/Novokuznetsk` -  * `Asia/Novosibirsk` -  * `Asia/Omsk` -  * `Asia/Oral` -  * `Asia/Phnom_Penh` -  * `Asia/Pontianak` -  * `Asia/Pyongyang` -  * `Asia/Qatar` -  * `Asia/Qyzylorda` -  * `Asia/Rangoon` -  * `Asia/Riyadh` -  * `Asia/Saigon` -  * `Asia/Sakhalin` -  * `Asia/Samarkand` -  * `Asia/Seoul` -  * `Asia/Shanghai` -  * `Asia/Singapore` -  * `Asia/Taipei` -  * `Asia/Tashkent` -  * `Asia/Tbilisi` -  * `Asia/Tehran` -  * `Asia/Thimphu` -  * `Asia/Tokyo` -  * `Asia/Ulaanbaatar` -  * `Asia/Urumqi` -  * `Asia/Ust-Nera` -  * `Asia/Vientiane` -  * `Asia/Vladivostok` -  * `Asia/Yakutsk` -  * `Asia/Yekaterinburg` -  * `Asia/Yerevan` -  * `Atlantic/Azores` -  * `Atlantic/Bermuda` -  * `Atlantic/Canary` -  * `Atlantic/Cape_Verde` -  * `Atlantic/Faroe` -  * `Atlantic/Madeira` -  * `Atlantic/Reykjavik` -  * `Atlantic/South_Georgia` -  * `Atlantic/St_Helena` -  * `Atlantic/Stanley` -  * `Australia/Adelaide` -  * `Australia/Brisbane` -  * `Australia/Broken_Hill` -  * `Australia/Currie` -  * `Australia/Darwin` -  * `Australia/Eucla` -  * `Australia/Hobart` -  * `Australia/Lindeman` -  * `Australia/Lord_Howe` -  * `Australia/Melbourne` -  * `Australia/Perth` -  * `Australia/Sydney` -  * `Etc/GMT` -  * `Europe/Amsterdam` -  * `Europe/Andorra` -  * `Europe/Athens` -  * `Europe/Belgrade` -  * `Europe/Berlin` -  * `Europe/Bratislava` -  * `Europe/Brussels` -  * `Europe/Bucharest` -  * `Europe/Budapest` -  * `Europe/Busingen` -  * `Europe/Chisinau` -  * `Europe/Copenhagen` -  * `Europe/Dublin` -  * `Europe/Gibraltar` -  * `Europe/Guernsey` -  * `Europe/Helsinki` -  * `Europe/Isle_of_Man` -  * `Europe/Istanbul` -  * `Europe/Jersey` -  * `Europe/Kaliningrad` -  * `Europe/Kiev` -  * `Europe/Lisbon` -  * `Europe/Ljubljana` -  * `Europe/London` -  * `Europe/Luxembourg` -  * `Europe/Madrid` -  * `Europe/Malta` -  * `Europe/Mariehamn` -  * `Europe/Minsk` -  * `Europe/Monaco` -  * `Europe/Moscow` -  * `Europe/Oslo` -  * `Europe/Paris` -  * `Europe/Podgorica` -  * `Europe/Prague` -  * `Europe/Riga` -  * `Europe/Rome` -  * `Europe/Samara` -  * `Europe/San_Marino` -  * `Europe/Sarajevo` -  * `Europe/Simferopol` -  * `Europe/Skopje` -  * `Europe/Sofia` -  * `Europe/Stockholm` -  * `Europe/Tallinn` -  * `Europe/Tirane` -  * `Europe/Uzhgorod` -  * `Europe/Vaduz` -  * `Europe/Vatican` -  * `Europe/Vienna` -  * `Europe/Vilnius` -  * `Europe/Volgograd` -  * `Europe/Warsaw` -  * `Europe/Zagreb` -  * `Europe/Zaporozhye` -  * `Europe/Zurich` -  * `Indian/Antananarivo` -  * `Indian/Chagos` -  * `Indian/Christmas` -  * `Indian/Cocos` -  * `Indian/Comoro` -  * `Indian/Kerguelen` -  * `Indian/Mahe` -  * `Indian/Maldives` -  * `Indian/Mauritius` -  * `Indian/Mayotte` -  * `Indian/Reunion` -  * `Pacific/Apia` -  * `Pacific/Auckland` -  * `Pacific/Chatham` -  * `Pacific/Chuuk` -  * `Pacific/Easter` -  * `Pacific/Efate` -  * `Pacific/Enderbury` -  * `Pacific/Fakaofo` -  * `Pacific/Fiji` -  * `Pacific/Funafuti` -  * `Pacific/Galapagos` -  * `Pacific/Gambier` -  * `Pacific/Guadalcanal` -  * `Pacific/Guam` -  * `Pacific/Honolulu` -  * `Pacific/Johnston` -  * `Pacific/Kiritimati` -  * `Pacific/Kosrae` -  * `Pacific/Kwajalein` -  * `Pacific/Majuro` -  * `Pacific/Marquesas` -  * `Pacific/Midway` -  * `Pacific/Nauru` -  * `Pacific/Norfolk` -  * `Pacific/Noumea` -  * `Pacific/Pago_Pago` -  * `Pacific/Palau` -  * `Pacific/Pitcairn` -  * `Pacific/Pohnpei` -  * `Pacific/Port_Moresby` -  * `Pacific/Rarotonga` -  * `Pacific/Saipan` -  * `Pacific/Tahiti` -  * `Pacific/Tarawa` -  * `Pacific/Tongatapu` -  * `Pacific/Wake` -  * `Pacific/Wallis` -  * `UTC` -
	TimeZone *string `json:"TimeZone,omitempty"`
	// Current software version of the Intersight Appliance.
	Version              *string `json:"Version,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ApplianceSystemInfo ApplianceSystemInfo

// NewApplianceSystemInfo instantiates a new ApplianceSystemInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApplianceSystemInfo(classId string, objectType string) *ApplianceSystemInfo {
	this := ApplianceSystemInfo{}
	this.ClassId = classId
	this.ObjectType = objectType
	var timeZone string = "Pacific/Niue"
	this.TimeZone = &timeZone
	return &this
}

// NewApplianceSystemInfoWithDefaults instantiates a new ApplianceSystemInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApplianceSystemInfoWithDefaults() *ApplianceSystemInfo {
	this := ApplianceSystemInfo{}
	var classId string = "appliance.SystemInfo"
	this.ClassId = classId
	var objectType string = "appliance.SystemInfo"
	this.ObjectType = objectType
	var timeZone string = "Pacific/Niue"
	this.TimeZone = &timeZone
	return &this
}

// GetClassId returns the ClassId field value
func (o *ApplianceSystemInfo) GetClassId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ClassId
}

// GetClassIdOk returns a tuple with the ClassId field value
// and a boolean to check if the value has been set.
func (o *ApplianceSystemInfo) GetClassIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ClassId, true
}

// SetClassId sets field value
func (o *ApplianceSystemInfo) SetClassId(v string) {
	o.ClassId = v
}

// GetDefaultClassId returns the default value "appliance.SystemInfo" of the ClassId field.
func (o *ApplianceSystemInfo) GetDefaultClassId() interface{} {
	return "appliance.SystemInfo"
}

// GetObjectType returns the ObjectType field value
func (o *ApplianceSystemInfo) GetObjectType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ObjectType
}

// GetObjectTypeOk returns a tuple with the ObjectType field value
// and a boolean to check if the value has been set.
func (o *ApplianceSystemInfo) GetObjectTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ObjectType, true
}

// SetObjectType sets field value
func (o *ApplianceSystemInfo) SetObjectType(v string) {
	o.ObjectType = v
}

// GetDefaultObjectType returns the default value "appliance.SystemInfo" of the ObjectType field.
func (o *ApplianceSystemInfo) GetDefaultObjectType() interface{} {
	return "appliance.SystemInfo"
}

// GetCloudConnStatus returns the CloudConnStatus field value if set, zero value otherwise.
func (o *ApplianceSystemInfo) GetCloudConnStatus() string {
	if o == nil || IsNil(o.CloudConnStatus) {
		var ret string
		return ret
	}
	return *o.CloudConnStatus
}

// GetCloudConnStatusOk returns a tuple with the CloudConnStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplianceSystemInfo) GetCloudConnStatusOk() (*string, bool) {
	if o == nil || IsNil(o.CloudConnStatus) {
		return nil, false
	}
	return o.CloudConnStatus, true
}

// HasCloudConnStatus returns a boolean if a field has been set.
func (o *ApplianceSystemInfo) HasCloudConnStatus() bool {
	if o != nil && !IsNil(o.CloudConnStatus) {
		return true
	}

	return false
}

// SetCloudConnStatus gets a reference to the given string and assigns it to the CloudConnStatus field.
func (o *ApplianceSystemInfo) SetCloudConnStatus(v string) {
	o.CloudConnStatus = &v
}

// GetClusterStatus returns the ClusterStatus field value if set, zero value otherwise.
func (o *ApplianceSystemInfo) GetClusterStatus() string {
	if o == nil || IsNil(o.ClusterStatus) {
		var ret string
		return ret
	}
	return *o.ClusterStatus
}

// GetClusterStatusOk returns a tuple with the ClusterStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplianceSystemInfo) GetClusterStatusOk() (*string, bool) {
	if o == nil || IsNil(o.ClusterStatus) {
		return nil, false
	}
	return o.ClusterStatus, true
}

// HasClusterStatus returns a boolean if a field has been set.
func (o *ApplianceSystemInfo) HasClusterStatus() bool {
	if o != nil && !IsNil(o.ClusterStatus) {
		return true
	}

	return false
}

// SetClusterStatus gets a reference to the given string and assigns it to the ClusterStatus field.
func (o *ApplianceSystemInfo) SetClusterStatus(v string) {
	o.ClusterStatus = &v
}

// GetDeploymentSize returns the DeploymentSize field value if set, zero value otherwise.
func (o *ApplianceSystemInfo) GetDeploymentSize() string {
	if o == nil || IsNil(o.DeploymentSize) {
		var ret string
		return ret
	}
	return *o.DeploymentSize
}

// GetDeploymentSizeOk returns a tuple with the DeploymentSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplianceSystemInfo) GetDeploymentSizeOk() (*string, bool) {
	if o == nil || IsNil(o.DeploymentSize) {
		return nil, false
	}
	return o.DeploymentSize, true
}

// HasDeploymentSize returns a boolean if a field has been set.
func (o *ApplianceSystemInfo) HasDeploymentSize() bool {
	if o != nil && !IsNil(o.DeploymentSize) {
		return true
	}

	return false
}

// SetDeploymentSize gets a reference to the given string and assigns it to the DeploymentSize field.
func (o *ApplianceSystemInfo) SetDeploymentSize(v string) {
	o.DeploymentSize = &v
}

// GetHostname returns the Hostname field value if set, zero value otherwise.
func (o *ApplianceSystemInfo) GetHostname() string {
	if o == nil || IsNil(o.Hostname) {
		var ret string
		return ret
	}
	return *o.Hostname
}

// GetHostnameOk returns a tuple with the Hostname field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplianceSystemInfo) GetHostnameOk() (*string, bool) {
	if o == nil || IsNil(o.Hostname) {
		return nil, false
	}
	return o.Hostname, true
}

// HasHostname returns a boolean if a field has been set.
func (o *ApplianceSystemInfo) HasHostname() bool {
	if o != nil && !IsNil(o.Hostname) {
		return true
	}

	return false
}

// SetHostname gets a reference to the given string and assigns it to the Hostname field.
func (o *ApplianceSystemInfo) SetHostname(v string) {
	o.Hostname = &v
}

// GetInitDone returns the InitDone field value if set, zero value otherwise.
func (o *ApplianceSystemInfo) GetInitDone() bool {
	if o == nil || IsNil(o.InitDone) {
		var ret bool
		return ret
	}
	return *o.InitDone
}

// GetInitDoneOk returns a tuple with the InitDone field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplianceSystemInfo) GetInitDoneOk() (*bool, bool) {
	if o == nil || IsNil(o.InitDone) {
		return nil, false
	}
	return o.InitDone, true
}

// HasInitDone returns a boolean if a field has been set.
func (o *ApplianceSystemInfo) HasInitDone() bool {
	if o != nil && !IsNil(o.InitDone) {
		return true
	}

	return false
}

// SetInitDone gets a reference to the given bool and assigns it to the InitDone field.
func (o *ApplianceSystemInfo) SetInitDone(v bool) {
	o.InitDone = &v
}

// GetIpAddress returns the IpAddress field value if set, zero value otherwise.
func (o *ApplianceSystemInfo) GetIpAddress() string {
	if o == nil || IsNil(o.IpAddress) {
		var ret string
		return ret
	}
	return *o.IpAddress
}

// GetIpAddressOk returns a tuple with the IpAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplianceSystemInfo) GetIpAddressOk() (*string, bool) {
	if o == nil || IsNil(o.IpAddress) {
		return nil, false
	}
	return o.IpAddress, true
}

// HasIpAddress returns a boolean if a field has been set.
func (o *ApplianceSystemInfo) HasIpAddress() bool {
	if o != nil && !IsNil(o.IpAddress) {
		return true
	}

	return false
}

// SetIpAddress gets a reference to the given string and assigns it to the IpAddress field.
func (o *ApplianceSystemInfo) SetIpAddress(v string) {
	o.IpAddress = &v
}

// GetIsVirtualIp returns the IsVirtualIp field value if set, zero value otherwise.
func (o *ApplianceSystemInfo) GetIsVirtualIp() bool {
	if o == nil || IsNil(o.IsVirtualIp) {
		var ret bool
		return ret
	}
	return *o.IsVirtualIp
}

// GetIsVirtualIpOk returns a tuple with the IsVirtualIp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplianceSystemInfo) GetIsVirtualIpOk() (*bool, bool) {
	if o == nil || IsNil(o.IsVirtualIp) {
		return nil, false
	}
	return o.IsVirtualIp, true
}

// HasIsVirtualIp returns a boolean if a field has been set.
func (o *ApplianceSystemInfo) HasIsVirtualIp() bool {
	if o != nil && !IsNil(o.IsVirtualIp) {
		return true
	}

	return false
}

// SetIsVirtualIp gets a reference to the given bool and assigns it to the IsVirtualIp field.
func (o *ApplianceSystemInfo) SetIsVirtualIp(v bool) {
	o.IsVirtualIp = &v
}

// GetOperationalStatus returns the OperationalStatus field value if set, zero value otherwise.
func (o *ApplianceSystemInfo) GetOperationalStatus() string {
	if o == nil || IsNil(o.OperationalStatus) {
		var ret string
		return ret
	}
	return *o.OperationalStatus
}

// GetOperationalStatusOk returns a tuple with the OperationalStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplianceSystemInfo) GetOperationalStatusOk() (*string, bool) {
	if o == nil || IsNil(o.OperationalStatus) {
		return nil, false
	}
	return o.OperationalStatus, true
}

// HasOperationalStatus returns a boolean if a field has been set.
func (o *ApplianceSystemInfo) HasOperationalStatus() bool {
	if o != nil && !IsNil(o.OperationalStatus) {
		return true
	}

	return false
}

// SetOperationalStatus gets a reference to the given string and assigns it to the OperationalStatus field.
func (o *ApplianceSystemInfo) SetOperationalStatus(v string) {
	o.OperationalStatus = &v
}

// GetSerialId returns the SerialId field value if set, zero value otherwise.
func (o *ApplianceSystemInfo) GetSerialId() string {
	if o == nil || IsNil(o.SerialId) {
		var ret string
		return ret
	}
	return *o.SerialId
}

// GetSerialIdOk returns a tuple with the SerialId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplianceSystemInfo) GetSerialIdOk() (*string, bool) {
	if o == nil || IsNil(o.SerialId) {
		return nil, false
	}
	return o.SerialId, true
}

// HasSerialId returns a boolean if a field has been set.
func (o *ApplianceSystemInfo) HasSerialId() bool {
	if o != nil && !IsNil(o.SerialId) {
		return true
	}

	return false
}

// SetSerialId gets a reference to the given string and assigns it to the SerialId field.
func (o *ApplianceSystemInfo) SetSerialId(v string) {
	o.SerialId = &v
}

// GetTimeZone returns the TimeZone field value if set, zero value otherwise.
func (o *ApplianceSystemInfo) GetTimeZone() string {
	if o == nil || IsNil(o.TimeZone) {
		var ret string
		return ret
	}
	return *o.TimeZone
}

// GetTimeZoneOk returns a tuple with the TimeZone field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplianceSystemInfo) GetTimeZoneOk() (*string, bool) {
	if o == nil || IsNil(o.TimeZone) {
		return nil, false
	}
	return o.TimeZone, true
}

// HasTimeZone returns a boolean if a field has been set.
func (o *ApplianceSystemInfo) HasTimeZone() bool {
	if o != nil && !IsNil(o.TimeZone) {
		return true
	}

	return false
}

// SetTimeZone gets a reference to the given string and assigns it to the TimeZone field.
func (o *ApplianceSystemInfo) SetTimeZone(v string) {
	o.TimeZone = &v
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *ApplianceSystemInfo) GetVersion() string {
	if o == nil || IsNil(o.Version) {
		var ret string
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplianceSystemInfo) GetVersionOk() (*string, bool) {
	if o == nil || IsNil(o.Version) {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *ApplianceSystemInfo) HasVersion() bool {
	if o != nil && !IsNil(o.Version) {
		return true
	}

	return false
}

// SetVersion gets a reference to the given string and assigns it to the Version field.
func (o *ApplianceSystemInfo) SetVersion(v string) {
	o.Version = &v
}

func (o ApplianceSystemInfo) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ApplianceSystemInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	serializedMoBaseMo, errMoBaseMo := json.Marshal(o.MoBaseMo)
	if errMoBaseMo != nil {
		return map[string]interface{}{}, errMoBaseMo
	}
	errMoBaseMo = json.Unmarshal([]byte(serializedMoBaseMo), &toSerialize)
	if errMoBaseMo != nil {
		return map[string]interface{}{}, errMoBaseMo
	}
	if _, exists := toSerialize["ClassId"]; !exists {
		toSerialize["ClassId"] = o.GetDefaultClassId()
	}
	toSerialize["ClassId"] = o.ClassId
	if _, exists := toSerialize["ObjectType"]; !exists {
		toSerialize["ObjectType"] = o.GetDefaultObjectType()
	}
	toSerialize["ObjectType"] = o.ObjectType
	if !IsNil(o.CloudConnStatus) {
		toSerialize["CloudConnStatus"] = o.CloudConnStatus
	}
	if !IsNil(o.ClusterStatus) {
		toSerialize["ClusterStatus"] = o.ClusterStatus
	}
	if !IsNil(o.DeploymentSize) {
		toSerialize["DeploymentSize"] = o.DeploymentSize
	}
	if !IsNil(o.Hostname) {
		toSerialize["Hostname"] = o.Hostname
	}
	if !IsNil(o.InitDone) {
		toSerialize["InitDone"] = o.InitDone
	}
	if !IsNil(o.IpAddress) {
		toSerialize["IpAddress"] = o.IpAddress
	}
	if !IsNil(o.IsVirtualIp) {
		toSerialize["IsVirtualIp"] = o.IsVirtualIp
	}
	if !IsNil(o.OperationalStatus) {
		toSerialize["OperationalStatus"] = o.OperationalStatus
	}
	if !IsNil(o.SerialId) {
		toSerialize["SerialId"] = o.SerialId
	}
	if !IsNil(o.TimeZone) {
		toSerialize["TimeZone"] = o.TimeZone
	}
	if !IsNil(o.Version) {
		toSerialize["Version"] = o.Version
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ApplianceSystemInfo) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"ClassId",
		"ObjectType",
	}

	// defaultValueFuncMap captures the default values for required properties.
	// These values are used when required properties are missing from the payload.
	defaultValueFuncMap := map[string]func() interface{}{
		"ClassId":    o.GetDefaultClassId,
		"ObjectType": o.GetDefaultObjectType,
	}
	var defaultValueApplied bool
	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			if _, ok := defaultValueFuncMap[requiredProperty]; ok {
				allProperties[requiredProperty] = defaultValueFuncMap[requiredProperty]()
				defaultValueApplied = true
			}
		}
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	if defaultValueApplied {
		data, err = json.Marshal(allProperties)
		if err != nil {
			return err
		}
	}
	type ApplianceSystemInfoWithoutEmbeddedStruct struct {
		// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.
		ClassId string `json:"ClassId"`
		// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
		ObjectType string `json:"ObjectType"`
		// Connection state of the Intersight Appliance to the Intersight. * `` - The target details have been persisted but Intersight has not yet attempted to connect to the target. * `Connected` - Intersight is able to establish a connection to the target and initiate management activities. * `NotConnected` - Intersight is unable to establish a connection to the target. * `ClaimInProgress` - Claim of the target is in progress. A connection to the target has not been fully established. * `UnclaimInProgress` - Unclaim of the target is in progress. Intersight is able to connect to the target and all management operations are supported. * `Unclaimed` - The device was un-claimed from the users account by an Administrator of the device. Also indicates the failure to claim Targets of type HTTP Endpoint in Intersight. * `Claimed` - Target of type HTTP Endpoint is successfully claimed in Intersight. Currently no validation is performed to verify the Target connectivity from Intersight at the time of creation. However invoking API from Intersight Orchestrator fails if this Target is not reachable from Intersight or if Target API credentials are incorrect.
		CloudConnStatus *string `json:"CloudConnStatus,omitempty"`
		// Current status of cluster operation on the Intersight Appliance. * `none` - The Intersight Appliance is running in standalone mode. * `active` - The Intersight Appliance is running as part of a cluster. * `pending` - The Intersight Appliance is currently forming a cluster. * `failed` - The Intersight Appliance failed to form a cluster.
		ClusterStatus *string `json:"ClusterStatus,omitempty"`
		// Current running deployment size for the Intersight Appliance cluster. Eg. small, medium, large etc.
		DeploymentSize *string `json:"DeploymentSize,omitempty"`
		// Publicly accessible FQDN of the Intersight Appliance.
		Hostname *string `json:"Hostname,omitempty"`
		// Indicates that the setup initialization process has been completed.
		InitDone *bool `json:"InitDone,omitempty"`
		// Publicly accessible IP address of the Intersight Appliance.
		IpAddress *string `json:"IpAddress,omitempty"`
		// Specifies whether this Intersight Appliance is using a virtual ip address.
		IsVirtualIp *bool `json:"IsVirtualIp,omitempty"`
		// Operational status of the Intersight Appliance cluster. * `Unknown` - The status of the appliance node is unknown. * `Operational` - The appliance node is operational. * `Impaired` - The appliance node is impaired. * `AttentionNeeded` - The appliance node needs attention. * `ReadyToJoin` - The node is ready to be added to a standalone Intersight Appliance to form a cluster. * `OutOfService` - The user has taken this node (part of a cluster) to out of service. * `ReadyForReplacement` - The cluster node is ready to be replaced. * `ReplacementInProgress` - The cluster node replacement is in progress. * `ReplacementFailed` - There was a failure during the cluster node replacement.
		OperationalStatus *string `json:"OperationalStatus,omitempty"`
		// SerialId of the Intersight Appliance. SerialId is generated when the Intersight Appliance is setup. It is a unique UUID string, and serialId will not change for the life time of the Intersight Appliance.
		SerialId *string `json:"SerialId,omitempty"`
		// Timezone of the Intersight Appliance. * `Pacific/Niue` -  * `Africa/Abidjan` -  * `Africa/Accra` -  * `Africa/Addis_Ababa` -  * `Africa/Algiers` -  * `Africa/Asmara` -  * `Africa/Bamako` -  * `Africa/Bangui` -  * `Africa/Banjul` -  * `Africa/Bissau` -  * `Africa/Blantyre` -  * `Africa/Brazzaville` -  * `Africa/Bujumbura` -  * `Africa/Cairo` -  * `Africa/Casablanca` -  * `Africa/Ceuta` -  * `Africa/Conakry` -  * `Africa/Dakar` -  * `Africa/Dar_es_Salaam` -  * `Africa/Djibouti` -  * `Africa/Douala` -  * `Africa/El_Aaiun` -  * `Africa/Freetown` -  * `Africa/Gaborone` -  * `Africa/Harare` -  * `Africa/Johannesburg` -  * `Africa/Juba` -  * `Africa/Kampala` -  * `Africa/Khartoum` -  * `Africa/Kigali` -  * `Africa/Kinshasa` -  * `Africa/Lagos` -  * `Africa/Libreville` -  * `Africa/Lome` -  * `Africa/Luanda` -  * `Africa/Lubumbashi` -  * `Africa/Lusaka` -  * `Africa/Malabo` -  * `Africa/Maputo` -  * `Africa/Maseru` -  * `Africa/Mbabane` -  * `Africa/Mogadishu` -  * `Africa/Monrovia` -  * `Africa/Nairobi` -  * `Africa/Ndjamena` -  * `Africa/Niamey` -  * `Africa/Nouakchott` -  * `Africa/Ouagadougou` -  * `Africa/Porto-Novo` -  * `Africa/Sao_Tome` -  * `Africa/Tripoli` -  * `Africa/Tunis` -  * `Africa/Windhoek` -  * `America/Adak` -  * `America/Anchorage` -  * `America/Anguilla` -  * `America/Antigua` -  * `America/Araguaina` -  * `America/Argentina/Buenos_Aires` -  * `America/Argentina/Catamarca` -  * `America/Argentina/Cordoba` -  * `America/Argentina/Jujuy` -  * `America/Argentina/La_Rioja` -  * `America/Argentina/Mendoza` -  * `America/Argentina/Rio_Gallegos` -  * `America/Argentina/Salta` -  * `America/Argentina/San_Juan` -  * `America/Argentina/San_Luis` -  * `America/Argentina/Tucuman` -  * `America/Argentina/Ushuaia` -  * `America/Aruba` -  * `America/Asuncion` -  * `America/Atikokan` -  * `America/Bahia` -  * `America/Bahia_Banderas` -  * `America/Barbados` -  * `America/Belem` -  * `America/Belize` -  * `America/Blanc-Sablon` -  * `America/Boa_Vista` -  * `America/Bogota` -  * `America/Boise` -  * `America/Cambridge_Bay` -  * `America/Campo_Grande` -  * `America/Cancun` -  * `America/Caracas` -  * `America/Cayenne` -  * `America/Cayman` -  * `America/Chicago` -  * `America/Chihuahua` -  * `America/Costa_Rica` -  * `America/Creston` -  * `America/Cuiaba` -  * `America/Curacao` -  * `America/Danmarkshavn` -  * `America/Dawson` -  * `America/Dawson_Creek` -  * `America/Denver` -  * `America/Detroit` -  * `America/Dominica` -  * `America/Edmonton` -  * `America/Eirunepe` -  * `America/El_Salvador` -  * `America/Fortaleza` -  * `America/Glace_Bay` -  * `America/Godthab` -  * `America/Goose_Bay` -  * `America/Grand_Turk` -  * `America/Grenada` -  * `America/Guadeloupe` -  * `America/Guatemala` -  * `America/Guayaquil` -  * `America/Guyana` -  * `America/Halifax` -  * `America/Havana` -  * `America/Hermosillo` -  * `America/Indiana/Indianapolis` -  * `America/Indiana/Knox` -  * `America/Indiana/Marengo` -  * `America/Indiana/Petersburg` -  * `America/Indiana/Tell_City` -  * `America/Indiana/Vevay` -  * `America/Indiana/Vincennes` -  * `America/Indiana/Winamac` -  * `America/Inuvik` -  * `America/Iqaluit` -  * `America/Jamaica` -  * `America/Juneau` -  * `America/Kentucky/Louisville` -  * `America/Kentucky/Monticello` -  * `America/Kralendijk` -  * `America/La_Paz` -  * `America/Lima` -  * `America/Los_Angeles` -  * `America/Lower_Princes` -  * `America/Maceio` -  * `America/Managua` -  * `America/Manaus` -  * `America/Marigot` -  * `America/Martinique` -  * `America/Matamoros` -  * `America/Mazatlan` -  * `America/Menominee` -  * `America/Merida` -  * `America/Metlakatla` -  * `America/Mexico_City` -  * `America/Miquelon` -  * `America/Moncton` -  * `America/Monterrey` -  * `America/Montevideo` -  * `America/Montreal` -  * `America/Montserrat` -  * `America/Nassau` -  * `America/New_York` -  * `America/Nipigon` -  * `America/Nome` -  * `America/Noronha` -  * `America/North_Dakota/Beulah` -  * `America/North_Dakota/Center` -  * `America/North_Dakota/New_Salem` -  * `America/Ojinaga` -  * `America/Panama` -  * `America/Pangnirtung` -  * `America/Paramaribo` -  * `America/Phoenix` -  * `America/Port-au-Prince` -  * `America/Port_of_Spain` -  * `America/Porto_Velho` -  * `America/Puerto_Rico` -  * `America/Rainy_River` -  * `America/Rankin_Inlet` -  * `America/Recife` -  * `America/Regina` -  * `America/Resolute` -  * `America/Rio_Branco` -  * `America/Santa_Isabel` -  * `America/Santarem` -  * `America/Santiago` -  * `America/Santo_Domingo` -  * `America/Sao_Paulo` -  * `America/Scoresbysund` -  * `America/Shiprock` -  * `America/Sitka` -  * `America/St_Barthelemy` -  * `America/St_Johns` -  * `America/St_Kitts` -  * `America/St_Lucia` -  * `America/St_Thomas` -  * `America/St_Vincent` -  * `America/Swift_Current` -  * `America/Tegucigalpa` -  * `America/Thule` -  * `America/Thunder_Bay` -  * `America/Tijuana` -  * `America/Toronto` -  * `America/Tortola` -  * `America/Vancouver` -  * `America/Whitehorse` -  * `America/Winnipeg` -  * `America/Yakutat` -  * `America/Yellowknife` -  * `Antarctica/Casey` -  * `Antarctica/Davis` -  * `Antarctica/DumontDUrville` -  * `Antarctica/Macquarie` -  * `Antarctica/Mawson` -  * `Antarctica/McMurdo` -  * `Antarctica/Palmer` -  * `Antarctica/Rothera` -  * `Antarctica/South_Pole` -  * `Antarctica/Syowa` -  * `Antarctica/Troll` -  * `Antarctica/Vostok` -  * `Arctic/Longyearbyen` -  * `Asia/Aden` -  * `Asia/Almaty` -  * `Asia/Amman` -  * `Asia/Anadyr` -  * `Asia/Aqtau` -  * `Asia/Aqtobe` -  * `Asia/Ashgabat` -  * `Asia/Baghdad` -  * `Asia/Bahrain` -  * `Asia/Baku` -  * `Asia/Bangkok` -  * `Asia/Beirut` -  * `Asia/Bishkek` -  * `Asia/Brunei` -  * `Asia/Calcutta` -  * `Asia/Choibalsan` -  * `Asia/Chongqing` -  * `Asia/Colombo` -  * `Asia/Damascus` -  * `Asia/Dhaka` -  * `Asia/Dili` -  * `Asia/Dubai` -  * `Asia/Dushanbe` -  * `Asia/Gaza` -  * `Asia/Harbin` -  * `Asia/Hebron` -  * `Asia/Ho_Chi_Minh` -  * `Asia/Hong_Kong` -  * `Asia/Hovd` -  * `Asia/Irkutsk` -  * `Asia/Jakarta` -  * `Asia/Jayapura` -  * `Asia/Jerusalem` -  * `Asia/Kabul` -  * `Asia/Kamchatka` -  * `Asia/Karachi` -  * `Asia/Kashgar` -  * `Asia/Kathmandu` -  * `Asia/Katmandu` -  * `Asia/Khandyga` -  * `Asia/Kolkata` -  * `Asia/Krasnoyarsk` -  * `Asia/Kuala_Lumpur` -  * `Asia/Kuching` -  * `Asia/Kuwait` -  * `Asia/Macau` -  * `Asia/Magadan` -  * `Asia/Makassar` -  * `Asia/Manila` -  * `Asia/Muscat` -  * `Asia/Nicosia` -  * `Asia/Novokuznetsk` -  * `Asia/Novosibirsk` -  * `Asia/Omsk` -  * `Asia/Oral` -  * `Asia/Phnom_Penh` -  * `Asia/Pontianak` -  * `Asia/Pyongyang` -  * `Asia/Qatar` -  * `Asia/Qyzylorda` -  * `Asia/Rangoon` -  * `Asia/Riyadh` -  * `Asia/Saigon` -  * `Asia/Sakhalin` -  * `Asia/Samarkand` -  * `Asia/Seoul` -  * `Asia/Shanghai` -  * `Asia/Singapore` -  * `Asia/Taipei` -  * `Asia/Tashkent` -  * `Asia/Tbilisi` -  * `Asia/Tehran` -  * `Asia/Thimphu` -  * `Asia/Tokyo` -  * `Asia/Ulaanbaatar` -  * `Asia/Urumqi` -  * `Asia/Ust-Nera` -  * `Asia/Vientiane` -  * `Asia/Vladivostok` -  * `Asia/Yakutsk` -  * `Asia/Yekaterinburg` -  * `Asia/Yerevan` -  * `Atlantic/Azores` -  * `Atlantic/Bermuda` -  * `Atlantic/Canary` -  * `Atlantic/Cape_Verde` -  * `Atlantic/Faroe` -  * `Atlantic/Madeira` -  * `Atlantic/Reykjavik` -  * `Atlantic/South_Georgia` -  * `Atlantic/St_Helena` -  * `Atlantic/Stanley` -  * `Australia/Adelaide` -  * `Australia/Brisbane` -  * `Australia/Broken_Hill` -  * `Australia/Currie` -  * `Australia/Darwin` -  * `Australia/Eucla` -  * `Australia/Hobart` -  * `Australia/Lindeman` -  * `Australia/Lord_Howe` -  * `Australia/Melbourne` -  * `Australia/Perth` -  * `Australia/Sydney` -  * `Etc/GMT` -  * `Europe/Amsterdam` -  * `Europe/Andorra` -  * `Europe/Athens` -  * `Europe/Belgrade` -  * `Europe/Berlin` -  * `Europe/Bratislava` -  * `Europe/Brussels` -  * `Europe/Bucharest` -  * `Europe/Budapest` -  * `Europe/Busingen` -  * `Europe/Chisinau` -  * `Europe/Copenhagen` -  * `Europe/Dublin` -  * `Europe/Gibraltar` -  * `Europe/Guernsey` -  * `Europe/Helsinki` -  * `Europe/Isle_of_Man` -  * `Europe/Istanbul` -  * `Europe/Jersey` -  * `Europe/Kaliningrad` -  * `Europe/Kiev` -  * `Europe/Lisbon` -  * `Europe/Ljubljana` -  * `Europe/London` -  * `Europe/Luxembourg` -  * `Europe/Madrid` -  * `Europe/Malta` -  * `Europe/Mariehamn` -  * `Europe/Minsk` -  * `Europe/Monaco` -  * `Europe/Moscow` -  * `Europe/Oslo` -  * `Europe/Paris` -  * `Europe/Podgorica` -  * `Europe/Prague` -  * `Europe/Riga` -  * `Europe/Rome` -  * `Europe/Samara` -  * `Europe/San_Marino` -  * `Europe/Sarajevo` -  * `Europe/Simferopol` -  * `Europe/Skopje` -  * `Europe/Sofia` -  * `Europe/Stockholm` -  * `Europe/Tallinn` -  * `Europe/Tirane` -  * `Europe/Uzhgorod` -  * `Europe/Vaduz` -  * `Europe/Vatican` -  * `Europe/Vienna` -  * `Europe/Vilnius` -  * `Europe/Volgograd` -  * `Europe/Warsaw` -  * `Europe/Zagreb` -  * `Europe/Zaporozhye` -  * `Europe/Zurich` -  * `Indian/Antananarivo` -  * `Indian/Chagos` -  * `Indian/Christmas` -  * `Indian/Cocos` -  * `Indian/Comoro` -  * `Indian/Kerguelen` -  * `Indian/Mahe` -  * `Indian/Maldives` -  * `Indian/Mauritius` -  * `Indian/Mayotte` -  * `Indian/Reunion` -  * `Pacific/Apia` -  * `Pacific/Auckland` -  * `Pacific/Chatham` -  * `Pacific/Chuuk` -  * `Pacific/Easter` -  * `Pacific/Efate` -  * `Pacific/Enderbury` -  * `Pacific/Fakaofo` -  * `Pacific/Fiji` -  * `Pacific/Funafuti` -  * `Pacific/Galapagos` -  * `Pacific/Gambier` -  * `Pacific/Guadalcanal` -  * `Pacific/Guam` -  * `Pacific/Honolulu` -  * `Pacific/Johnston` -  * `Pacific/Kiritimati` -  * `Pacific/Kosrae` -  * `Pacific/Kwajalein` -  * `Pacific/Majuro` -  * `Pacific/Marquesas` -  * `Pacific/Midway` -  * `Pacific/Nauru` -  * `Pacific/Norfolk` -  * `Pacific/Noumea` -  * `Pacific/Pago_Pago` -  * `Pacific/Palau` -  * `Pacific/Pitcairn` -  * `Pacific/Pohnpei` -  * `Pacific/Port_Moresby` -  * `Pacific/Rarotonga` -  * `Pacific/Saipan` -  * `Pacific/Tahiti` -  * `Pacific/Tarawa` -  * `Pacific/Tongatapu` -  * `Pacific/Wake` -  * `Pacific/Wallis` -  * `UTC` -
		TimeZone *string `json:"TimeZone,omitempty"`
		// Current software version of the Intersight Appliance.
		Version *string `json:"Version,omitempty"`
	}

	varApplianceSystemInfoWithoutEmbeddedStruct := ApplianceSystemInfoWithoutEmbeddedStruct{}

	err = json.Unmarshal(data, &varApplianceSystemInfoWithoutEmbeddedStruct)
	if err == nil {
		varApplianceSystemInfo := _ApplianceSystemInfo{}
		varApplianceSystemInfo.ClassId = varApplianceSystemInfoWithoutEmbeddedStruct.ClassId
		varApplianceSystemInfo.ObjectType = varApplianceSystemInfoWithoutEmbeddedStruct.ObjectType
		varApplianceSystemInfo.CloudConnStatus = varApplianceSystemInfoWithoutEmbeddedStruct.CloudConnStatus
		varApplianceSystemInfo.ClusterStatus = varApplianceSystemInfoWithoutEmbeddedStruct.ClusterStatus
		varApplianceSystemInfo.DeploymentSize = varApplianceSystemInfoWithoutEmbeddedStruct.DeploymentSize
		varApplianceSystemInfo.Hostname = varApplianceSystemInfoWithoutEmbeddedStruct.Hostname
		varApplianceSystemInfo.InitDone = varApplianceSystemInfoWithoutEmbeddedStruct.InitDone
		varApplianceSystemInfo.IpAddress = varApplianceSystemInfoWithoutEmbeddedStruct.IpAddress
		varApplianceSystemInfo.IsVirtualIp = varApplianceSystemInfoWithoutEmbeddedStruct.IsVirtualIp
		varApplianceSystemInfo.OperationalStatus = varApplianceSystemInfoWithoutEmbeddedStruct.OperationalStatus
		varApplianceSystemInfo.SerialId = varApplianceSystemInfoWithoutEmbeddedStruct.SerialId
		varApplianceSystemInfo.TimeZone = varApplianceSystemInfoWithoutEmbeddedStruct.TimeZone
		varApplianceSystemInfo.Version = varApplianceSystemInfoWithoutEmbeddedStruct.Version
		*o = ApplianceSystemInfo(varApplianceSystemInfo)
	} else {
		return err
	}

	varApplianceSystemInfo := _ApplianceSystemInfo{}

	err = json.Unmarshal(data, &varApplianceSystemInfo)
	if err == nil {
		o.MoBaseMo = varApplianceSystemInfo.MoBaseMo
	} else {
		return err
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "ClassId")
		delete(additionalProperties, "ObjectType")
		delete(additionalProperties, "CloudConnStatus")
		delete(additionalProperties, "ClusterStatus")
		delete(additionalProperties, "DeploymentSize")
		delete(additionalProperties, "Hostname")
		delete(additionalProperties, "InitDone")
		delete(additionalProperties, "IpAddress")
		delete(additionalProperties, "IsVirtualIp")
		delete(additionalProperties, "OperationalStatus")
		delete(additionalProperties, "SerialId")
		delete(additionalProperties, "TimeZone")
		delete(additionalProperties, "Version")

		// remove fields from embedded structs
		reflectMoBaseMo := reflect.ValueOf(o.MoBaseMo)
		for i := 0; i < reflectMoBaseMo.Type().NumField(); i++ {
			t := reflectMoBaseMo.Type().Field(i)

			if jsonTag := t.Tag.Get("json"); jsonTag != "" {
				fieldName := ""
				if commaIdx := strings.Index(jsonTag, ","); commaIdx > 0 {
					fieldName = jsonTag[:commaIdx]
				} else {
					fieldName = jsonTag
				}
				if fieldName != "AdditionalProperties" {
					delete(additionalProperties, fieldName)
				}
			}
		}

		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableApplianceSystemInfo struct {
	value *ApplianceSystemInfo
	isSet bool
}

func (v NullableApplianceSystemInfo) Get() *ApplianceSystemInfo {
	return v.value
}

func (v *NullableApplianceSystemInfo) Set(val *ApplianceSystemInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableApplianceSystemInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableApplianceSystemInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApplianceSystemInfo(val *ApplianceSystemInfo) *NullableApplianceSystemInfo {
	return &NullableApplianceSystemInfo{value: val, isSet: true}
}

func (v NullableApplianceSystemInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApplianceSystemInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
