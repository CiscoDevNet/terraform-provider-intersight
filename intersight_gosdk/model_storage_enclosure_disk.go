/*
Cisco Intersight

Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations. The Intersight OpenAPI document defines the complete set of properties that are returned in the HTTP response. From that perspective, a client can expect that no additional properties are returned, unless these properties are explicitly defined in the OpenAPI document. However, when a client uses an older version of the Intersight OpenAPI document, the server may send additional properties because the software is more recent than the client. In that case, the client may receive properties that it does not know about. Some generated SDKs perform a strict validation of the HTTP response body against the OpenAPI document.

API version: 1.0.11-2024100405
Contact: intersight@cisco.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package intersight

import (
	"encoding/json"
	"fmt"
	"reflect"
	"strings"
)

// checks if the StorageEnclosureDisk type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &StorageEnclosureDisk{}

// StorageEnclosureDisk Physical Disk on the enclosure.
type StorageEnclosureDisk struct {
	EquipmentBase
	// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.
	ClassId string `json:"ClassId"`
	// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
	ObjectType string `json:"ObjectType"`
	// The block size of the physical disk in bytes.
	BlockSize *string `json:"BlockSize,omitempty"`
	// This field represents the disk Id in the storage enclosure.
	DiskId *string `json:"DiskId,omitempty"`
	// This field identifies the current disk configuration applied in the physical disk.
	DiskState *string `json:"DiskState,omitempty"`
	// The current health state of the enclosure disk.
	Health *string `json:"Health,omitempty"`
	// The number of blocks present on the physical disk.
	NumBlocks *string `json:"NumBlocks,omitempty"`
	// This field identifies the Product ID for physicalDisk.
	Pid *string `json:"Pid,omitempty"`
	// This field identifies the SAS address assigned to the disk SAS port-1.
	SasAddress1 *string `json:"SasAddress1,omitempty"`
	// This field identifies the SAS address assigned to the disk SAS port-2.
	SasAddress2 *string `json:"SasAddress2,omitempty"`
	// The size of the physical disk in MB.
	Size                 *string                                     `json:"Size,omitempty"`
	InventoryDeviceInfo  NullableInventoryDeviceInfoRelationship     `json:"InventoryDeviceInfo,omitempty"`
	PhysicalDisk         NullableStoragePhysicalDiskRelationship     `json:"PhysicalDisk,omitempty"`
	RegisteredDevice     NullableAssetDeviceRegistrationRelationship `json:"RegisteredDevice,omitempty"`
	StorageEnclosure     NullableStorageEnclosureRelationship        `json:"StorageEnclosure,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _StorageEnclosureDisk StorageEnclosureDisk

// NewStorageEnclosureDisk instantiates a new StorageEnclosureDisk object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStorageEnclosureDisk(classId string, objectType string) *StorageEnclosureDisk {
	this := StorageEnclosureDisk{}
	this.ClassId = classId
	this.ObjectType = objectType
	return &this
}

// NewStorageEnclosureDiskWithDefaults instantiates a new StorageEnclosureDisk object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStorageEnclosureDiskWithDefaults() *StorageEnclosureDisk {
	this := StorageEnclosureDisk{}
	var classId string = "storage.EnclosureDisk"
	this.ClassId = classId
	var objectType string = "storage.EnclosureDisk"
	this.ObjectType = objectType
	return &this
}

// GetClassId returns the ClassId field value
func (o *StorageEnclosureDisk) GetClassId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ClassId
}

// GetClassIdOk returns a tuple with the ClassId field value
// and a boolean to check if the value has been set.
func (o *StorageEnclosureDisk) GetClassIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ClassId, true
}

// SetClassId sets field value
func (o *StorageEnclosureDisk) SetClassId(v string) {
	o.ClassId = v
}

// GetDefaultClassId returns the default value "storage.EnclosureDisk" of the ClassId field.
func (o *StorageEnclosureDisk) GetDefaultClassId() interface{} {
	return "storage.EnclosureDisk"
}

// GetObjectType returns the ObjectType field value
func (o *StorageEnclosureDisk) GetObjectType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ObjectType
}

// GetObjectTypeOk returns a tuple with the ObjectType field value
// and a boolean to check if the value has been set.
func (o *StorageEnclosureDisk) GetObjectTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ObjectType, true
}

// SetObjectType sets field value
func (o *StorageEnclosureDisk) SetObjectType(v string) {
	o.ObjectType = v
}

// GetDefaultObjectType returns the default value "storage.EnclosureDisk" of the ObjectType field.
func (o *StorageEnclosureDisk) GetDefaultObjectType() interface{} {
	return "storage.EnclosureDisk"
}

// GetBlockSize returns the BlockSize field value if set, zero value otherwise.
func (o *StorageEnclosureDisk) GetBlockSize() string {
	if o == nil || IsNil(o.BlockSize) {
		var ret string
		return ret
	}
	return *o.BlockSize
}

// GetBlockSizeOk returns a tuple with the BlockSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageEnclosureDisk) GetBlockSizeOk() (*string, bool) {
	if o == nil || IsNil(o.BlockSize) {
		return nil, false
	}
	return o.BlockSize, true
}

// HasBlockSize returns a boolean if a field has been set.
func (o *StorageEnclosureDisk) HasBlockSize() bool {
	if o != nil && !IsNil(o.BlockSize) {
		return true
	}

	return false
}

// SetBlockSize gets a reference to the given string and assigns it to the BlockSize field.
func (o *StorageEnclosureDisk) SetBlockSize(v string) {
	o.BlockSize = &v
}

// GetDiskId returns the DiskId field value if set, zero value otherwise.
func (o *StorageEnclosureDisk) GetDiskId() string {
	if o == nil || IsNil(o.DiskId) {
		var ret string
		return ret
	}
	return *o.DiskId
}

// GetDiskIdOk returns a tuple with the DiskId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageEnclosureDisk) GetDiskIdOk() (*string, bool) {
	if o == nil || IsNil(o.DiskId) {
		return nil, false
	}
	return o.DiskId, true
}

// HasDiskId returns a boolean if a field has been set.
func (o *StorageEnclosureDisk) HasDiskId() bool {
	if o != nil && !IsNil(o.DiskId) {
		return true
	}

	return false
}

// SetDiskId gets a reference to the given string and assigns it to the DiskId field.
func (o *StorageEnclosureDisk) SetDiskId(v string) {
	o.DiskId = &v
}

// GetDiskState returns the DiskState field value if set, zero value otherwise.
func (o *StorageEnclosureDisk) GetDiskState() string {
	if o == nil || IsNil(o.DiskState) {
		var ret string
		return ret
	}
	return *o.DiskState
}

// GetDiskStateOk returns a tuple with the DiskState field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageEnclosureDisk) GetDiskStateOk() (*string, bool) {
	if o == nil || IsNil(o.DiskState) {
		return nil, false
	}
	return o.DiskState, true
}

// HasDiskState returns a boolean if a field has been set.
func (o *StorageEnclosureDisk) HasDiskState() bool {
	if o != nil && !IsNil(o.DiskState) {
		return true
	}

	return false
}

// SetDiskState gets a reference to the given string and assigns it to the DiskState field.
func (o *StorageEnclosureDisk) SetDiskState(v string) {
	o.DiskState = &v
}

// GetHealth returns the Health field value if set, zero value otherwise.
func (o *StorageEnclosureDisk) GetHealth() string {
	if o == nil || IsNil(o.Health) {
		var ret string
		return ret
	}
	return *o.Health
}

// GetHealthOk returns a tuple with the Health field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageEnclosureDisk) GetHealthOk() (*string, bool) {
	if o == nil || IsNil(o.Health) {
		return nil, false
	}
	return o.Health, true
}

// HasHealth returns a boolean if a field has been set.
func (o *StorageEnclosureDisk) HasHealth() bool {
	if o != nil && !IsNil(o.Health) {
		return true
	}

	return false
}

// SetHealth gets a reference to the given string and assigns it to the Health field.
func (o *StorageEnclosureDisk) SetHealth(v string) {
	o.Health = &v
}

// GetNumBlocks returns the NumBlocks field value if set, zero value otherwise.
func (o *StorageEnclosureDisk) GetNumBlocks() string {
	if o == nil || IsNil(o.NumBlocks) {
		var ret string
		return ret
	}
	return *o.NumBlocks
}

// GetNumBlocksOk returns a tuple with the NumBlocks field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageEnclosureDisk) GetNumBlocksOk() (*string, bool) {
	if o == nil || IsNil(o.NumBlocks) {
		return nil, false
	}
	return o.NumBlocks, true
}

// HasNumBlocks returns a boolean if a field has been set.
func (o *StorageEnclosureDisk) HasNumBlocks() bool {
	if o != nil && !IsNil(o.NumBlocks) {
		return true
	}

	return false
}

// SetNumBlocks gets a reference to the given string and assigns it to the NumBlocks field.
func (o *StorageEnclosureDisk) SetNumBlocks(v string) {
	o.NumBlocks = &v
}

// GetPid returns the Pid field value if set, zero value otherwise.
func (o *StorageEnclosureDisk) GetPid() string {
	if o == nil || IsNil(o.Pid) {
		var ret string
		return ret
	}
	return *o.Pid
}

// GetPidOk returns a tuple with the Pid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageEnclosureDisk) GetPidOk() (*string, bool) {
	if o == nil || IsNil(o.Pid) {
		return nil, false
	}
	return o.Pid, true
}

// HasPid returns a boolean if a field has been set.
func (o *StorageEnclosureDisk) HasPid() bool {
	if o != nil && !IsNil(o.Pid) {
		return true
	}

	return false
}

// SetPid gets a reference to the given string and assigns it to the Pid field.
func (o *StorageEnclosureDisk) SetPid(v string) {
	o.Pid = &v
}

// GetSasAddress1 returns the SasAddress1 field value if set, zero value otherwise.
func (o *StorageEnclosureDisk) GetSasAddress1() string {
	if o == nil || IsNil(o.SasAddress1) {
		var ret string
		return ret
	}
	return *o.SasAddress1
}

// GetSasAddress1Ok returns a tuple with the SasAddress1 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageEnclosureDisk) GetSasAddress1Ok() (*string, bool) {
	if o == nil || IsNil(o.SasAddress1) {
		return nil, false
	}
	return o.SasAddress1, true
}

// HasSasAddress1 returns a boolean if a field has been set.
func (o *StorageEnclosureDisk) HasSasAddress1() bool {
	if o != nil && !IsNil(o.SasAddress1) {
		return true
	}

	return false
}

// SetSasAddress1 gets a reference to the given string and assigns it to the SasAddress1 field.
func (o *StorageEnclosureDisk) SetSasAddress1(v string) {
	o.SasAddress1 = &v
}

// GetSasAddress2 returns the SasAddress2 field value if set, zero value otherwise.
func (o *StorageEnclosureDisk) GetSasAddress2() string {
	if o == nil || IsNil(o.SasAddress2) {
		var ret string
		return ret
	}
	return *o.SasAddress2
}

// GetSasAddress2Ok returns a tuple with the SasAddress2 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageEnclosureDisk) GetSasAddress2Ok() (*string, bool) {
	if o == nil || IsNil(o.SasAddress2) {
		return nil, false
	}
	return o.SasAddress2, true
}

// HasSasAddress2 returns a boolean if a field has been set.
func (o *StorageEnclosureDisk) HasSasAddress2() bool {
	if o != nil && !IsNil(o.SasAddress2) {
		return true
	}

	return false
}

// SetSasAddress2 gets a reference to the given string and assigns it to the SasAddress2 field.
func (o *StorageEnclosureDisk) SetSasAddress2(v string) {
	o.SasAddress2 = &v
}

// GetSize returns the Size field value if set, zero value otherwise.
func (o *StorageEnclosureDisk) GetSize() string {
	if o == nil || IsNil(o.Size) {
		var ret string
		return ret
	}
	return *o.Size
}

// GetSizeOk returns a tuple with the Size field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageEnclosureDisk) GetSizeOk() (*string, bool) {
	if o == nil || IsNil(o.Size) {
		return nil, false
	}
	return o.Size, true
}

// HasSize returns a boolean if a field has been set.
func (o *StorageEnclosureDisk) HasSize() bool {
	if o != nil && !IsNil(o.Size) {
		return true
	}

	return false
}

// SetSize gets a reference to the given string and assigns it to the Size field.
func (o *StorageEnclosureDisk) SetSize(v string) {
	o.Size = &v
}

// GetInventoryDeviceInfo returns the InventoryDeviceInfo field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *StorageEnclosureDisk) GetInventoryDeviceInfo() InventoryDeviceInfoRelationship {
	if o == nil || IsNil(o.InventoryDeviceInfo.Get()) {
		var ret InventoryDeviceInfoRelationship
		return ret
	}
	return *o.InventoryDeviceInfo.Get()
}

// GetInventoryDeviceInfoOk returns a tuple with the InventoryDeviceInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *StorageEnclosureDisk) GetInventoryDeviceInfoOk() (*InventoryDeviceInfoRelationship, bool) {
	if o == nil {
		return nil, false
	}
	return o.InventoryDeviceInfo.Get(), o.InventoryDeviceInfo.IsSet()
}

// HasInventoryDeviceInfo returns a boolean if a field has been set.
func (o *StorageEnclosureDisk) HasInventoryDeviceInfo() bool {
	if o != nil && o.InventoryDeviceInfo.IsSet() {
		return true
	}

	return false
}

// SetInventoryDeviceInfo gets a reference to the given NullableInventoryDeviceInfoRelationship and assigns it to the InventoryDeviceInfo field.
func (o *StorageEnclosureDisk) SetInventoryDeviceInfo(v InventoryDeviceInfoRelationship) {
	o.InventoryDeviceInfo.Set(&v)
}

// SetInventoryDeviceInfoNil sets the value for InventoryDeviceInfo to be an explicit nil
func (o *StorageEnclosureDisk) SetInventoryDeviceInfoNil() {
	o.InventoryDeviceInfo.Set(nil)
}

// UnsetInventoryDeviceInfo ensures that no value is present for InventoryDeviceInfo, not even an explicit nil
func (o *StorageEnclosureDisk) UnsetInventoryDeviceInfo() {
	o.InventoryDeviceInfo.Unset()
}

// GetPhysicalDisk returns the PhysicalDisk field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *StorageEnclosureDisk) GetPhysicalDisk() StoragePhysicalDiskRelationship {
	if o == nil || IsNil(o.PhysicalDisk.Get()) {
		var ret StoragePhysicalDiskRelationship
		return ret
	}
	return *o.PhysicalDisk.Get()
}

// GetPhysicalDiskOk returns a tuple with the PhysicalDisk field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *StorageEnclosureDisk) GetPhysicalDiskOk() (*StoragePhysicalDiskRelationship, bool) {
	if o == nil {
		return nil, false
	}
	return o.PhysicalDisk.Get(), o.PhysicalDisk.IsSet()
}

// HasPhysicalDisk returns a boolean if a field has been set.
func (o *StorageEnclosureDisk) HasPhysicalDisk() bool {
	if o != nil && o.PhysicalDisk.IsSet() {
		return true
	}

	return false
}

// SetPhysicalDisk gets a reference to the given NullableStoragePhysicalDiskRelationship and assigns it to the PhysicalDisk field.
func (o *StorageEnclosureDisk) SetPhysicalDisk(v StoragePhysicalDiskRelationship) {
	o.PhysicalDisk.Set(&v)
}

// SetPhysicalDiskNil sets the value for PhysicalDisk to be an explicit nil
func (o *StorageEnclosureDisk) SetPhysicalDiskNil() {
	o.PhysicalDisk.Set(nil)
}

// UnsetPhysicalDisk ensures that no value is present for PhysicalDisk, not even an explicit nil
func (o *StorageEnclosureDisk) UnsetPhysicalDisk() {
	o.PhysicalDisk.Unset()
}

// GetRegisteredDevice returns the RegisteredDevice field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *StorageEnclosureDisk) GetRegisteredDevice() AssetDeviceRegistrationRelationship {
	if o == nil || IsNil(o.RegisteredDevice.Get()) {
		var ret AssetDeviceRegistrationRelationship
		return ret
	}
	return *o.RegisteredDevice.Get()
}

// GetRegisteredDeviceOk returns a tuple with the RegisteredDevice field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *StorageEnclosureDisk) GetRegisteredDeviceOk() (*AssetDeviceRegistrationRelationship, bool) {
	if o == nil {
		return nil, false
	}
	return o.RegisteredDevice.Get(), o.RegisteredDevice.IsSet()
}

// HasRegisteredDevice returns a boolean if a field has been set.
func (o *StorageEnclosureDisk) HasRegisteredDevice() bool {
	if o != nil && o.RegisteredDevice.IsSet() {
		return true
	}

	return false
}

// SetRegisteredDevice gets a reference to the given NullableAssetDeviceRegistrationRelationship and assigns it to the RegisteredDevice field.
func (o *StorageEnclosureDisk) SetRegisteredDevice(v AssetDeviceRegistrationRelationship) {
	o.RegisteredDevice.Set(&v)
}

// SetRegisteredDeviceNil sets the value for RegisteredDevice to be an explicit nil
func (o *StorageEnclosureDisk) SetRegisteredDeviceNil() {
	o.RegisteredDevice.Set(nil)
}

// UnsetRegisteredDevice ensures that no value is present for RegisteredDevice, not even an explicit nil
func (o *StorageEnclosureDisk) UnsetRegisteredDevice() {
	o.RegisteredDevice.Unset()
}

// GetStorageEnclosure returns the StorageEnclosure field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *StorageEnclosureDisk) GetStorageEnclosure() StorageEnclosureRelationship {
	if o == nil || IsNil(o.StorageEnclosure.Get()) {
		var ret StorageEnclosureRelationship
		return ret
	}
	return *o.StorageEnclosure.Get()
}

// GetStorageEnclosureOk returns a tuple with the StorageEnclosure field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *StorageEnclosureDisk) GetStorageEnclosureOk() (*StorageEnclosureRelationship, bool) {
	if o == nil {
		return nil, false
	}
	return o.StorageEnclosure.Get(), o.StorageEnclosure.IsSet()
}

// HasStorageEnclosure returns a boolean if a field has been set.
func (o *StorageEnclosureDisk) HasStorageEnclosure() bool {
	if o != nil && o.StorageEnclosure.IsSet() {
		return true
	}

	return false
}

// SetStorageEnclosure gets a reference to the given NullableStorageEnclosureRelationship and assigns it to the StorageEnclosure field.
func (o *StorageEnclosureDisk) SetStorageEnclosure(v StorageEnclosureRelationship) {
	o.StorageEnclosure.Set(&v)
}

// SetStorageEnclosureNil sets the value for StorageEnclosure to be an explicit nil
func (o *StorageEnclosureDisk) SetStorageEnclosureNil() {
	o.StorageEnclosure.Set(nil)
}

// UnsetStorageEnclosure ensures that no value is present for StorageEnclosure, not even an explicit nil
func (o *StorageEnclosureDisk) UnsetStorageEnclosure() {
	o.StorageEnclosure.Unset()
}

func (o StorageEnclosureDisk) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o StorageEnclosureDisk) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	serializedEquipmentBase, errEquipmentBase := json.Marshal(o.EquipmentBase)
	if errEquipmentBase != nil {
		return map[string]interface{}{}, errEquipmentBase
	}
	errEquipmentBase = json.Unmarshal([]byte(serializedEquipmentBase), &toSerialize)
	if errEquipmentBase != nil {
		return map[string]interface{}{}, errEquipmentBase
	}
	if _, exists := toSerialize["ClassId"]; !exists {
		toSerialize["ClassId"] = o.GetDefaultClassId()
	}
	toSerialize["ClassId"] = o.ClassId
	if _, exists := toSerialize["ObjectType"]; !exists {
		toSerialize["ObjectType"] = o.GetDefaultObjectType()
	}
	toSerialize["ObjectType"] = o.ObjectType
	if !IsNil(o.BlockSize) {
		toSerialize["BlockSize"] = o.BlockSize
	}
	if !IsNil(o.DiskId) {
		toSerialize["DiskId"] = o.DiskId
	}
	if !IsNil(o.DiskState) {
		toSerialize["DiskState"] = o.DiskState
	}
	if !IsNil(o.Health) {
		toSerialize["Health"] = o.Health
	}
	if !IsNil(o.NumBlocks) {
		toSerialize["NumBlocks"] = o.NumBlocks
	}
	if !IsNil(o.Pid) {
		toSerialize["Pid"] = o.Pid
	}
	if !IsNil(o.SasAddress1) {
		toSerialize["SasAddress1"] = o.SasAddress1
	}
	if !IsNil(o.SasAddress2) {
		toSerialize["SasAddress2"] = o.SasAddress2
	}
	if !IsNil(o.Size) {
		toSerialize["Size"] = o.Size
	}
	if o.InventoryDeviceInfo.IsSet() {
		toSerialize["InventoryDeviceInfo"] = o.InventoryDeviceInfo.Get()
	}
	if o.PhysicalDisk.IsSet() {
		toSerialize["PhysicalDisk"] = o.PhysicalDisk.Get()
	}
	if o.RegisteredDevice.IsSet() {
		toSerialize["RegisteredDevice"] = o.RegisteredDevice.Get()
	}
	if o.StorageEnclosure.IsSet() {
		toSerialize["StorageEnclosure"] = o.StorageEnclosure.Get()
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *StorageEnclosureDisk) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"ClassId",
		"ObjectType",
	}

	// defaultValueFuncMap captures the default values for required properties.
	// These values are used when required properties are missing from the payload.
	defaultValueFuncMap := map[string]func() interface{}{
		"ClassId":    o.GetDefaultClassId,
		"ObjectType": o.GetDefaultObjectType,
	}
	var defaultValueApplied bool
	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			if _, ok := defaultValueFuncMap[requiredProperty]; ok {
				allProperties[requiredProperty] = defaultValueFuncMap[requiredProperty]()
				defaultValueApplied = true
			}
		}
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	if defaultValueApplied {
		data, err = json.Marshal(allProperties)
		if err != nil {
			return err
		}
	}
	type StorageEnclosureDiskWithoutEmbeddedStruct struct {
		// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.
		ClassId string `json:"ClassId"`
		// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
		ObjectType string `json:"ObjectType"`
		// The block size of the physical disk in bytes.
		BlockSize *string `json:"BlockSize,omitempty"`
		// This field represents the disk Id in the storage enclosure.
		DiskId *string `json:"DiskId,omitempty"`
		// This field identifies the current disk configuration applied in the physical disk.
		DiskState *string `json:"DiskState,omitempty"`
		// The current health state of the enclosure disk.
		Health *string `json:"Health,omitempty"`
		// The number of blocks present on the physical disk.
		NumBlocks *string `json:"NumBlocks,omitempty"`
		// This field identifies the Product ID for physicalDisk.
		Pid *string `json:"Pid,omitempty"`
		// This field identifies the SAS address assigned to the disk SAS port-1.
		SasAddress1 *string `json:"SasAddress1,omitempty"`
		// This field identifies the SAS address assigned to the disk SAS port-2.
		SasAddress2 *string `json:"SasAddress2,omitempty"`
		// The size of the physical disk in MB.
		Size                *string                                     `json:"Size,omitempty"`
		InventoryDeviceInfo NullableInventoryDeviceInfoRelationship     `json:"InventoryDeviceInfo,omitempty"`
		PhysicalDisk        NullableStoragePhysicalDiskRelationship     `json:"PhysicalDisk,omitempty"`
		RegisteredDevice    NullableAssetDeviceRegistrationRelationship `json:"RegisteredDevice,omitempty"`
		StorageEnclosure    NullableStorageEnclosureRelationship        `json:"StorageEnclosure,omitempty"`
	}

	varStorageEnclosureDiskWithoutEmbeddedStruct := StorageEnclosureDiskWithoutEmbeddedStruct{}

	err = json.Unmarshal(data, &varStorageEnclosureDiskWithoutEmbeddedStruct)
	if err == nil {
		varStorageEnclosureDisk := _StorageEnclosureDisk{}
		varStorageEnclosureDisk.ClassId = varStorageEnclosureDiskWithoutEmbeddedStruct.ClassId
		varStorageEnclosureDisk.ObjectType = varStorageEnclosureDiskWithoutEmbeddedStruct.ObjectType
		varStorageEnclosureDisk.BlockSize = varStorageEnclosureDiskWithoutEmbeddedStruct.BlockSize
		varStorageEnclosureDisk.DiskId = varStorageEnclosureDiskWithoutEmbeddedStruct.DiskId
		varStorageEnclosureDisk.DiskState = varStorageEnclosureDiskWithoutEmbeddedStruct.DiskState
		varStorageEnclosureDisk.Health = varStorageEnclosureDiskWithoutEmbeddedStruct.Health
		varStorageEnclosureDisk.NumBlocks = varStorageEnclosureDiskWithoutEmbeddedStruct.NumBlocks
		varStorageEnclosureDisk.Pid = varStorageEnclosureDiskWithoutEmbeddedStruct.Pid
		varStorageEnclosureDisk.SasAddress1 = varStorageEnclosureDiskWithoutEmbeddedStruct.SasAddress1
		varStorageEnclosureDisk.SasAddress2 = varStorageEnclosureDiskWithoutEmbeddedStruct.SasAddress2
		varStorageEnclosureDisk.Size = varStorageEnclosureDiskWithoutEmbeddedStruct.Size
		varStorageEnclosureDisk.InventoryDeviceInfo = varStorageEnclosureDiskWithoutEmbeddedStruct.InventoryDeviceInfo
		varStorageEnclosureDisk.PhysicalDisk = varStorageEnclosureDiskWithoutEmbeddedStruct.PhysicalDisk
		varStorageEnclosureDisk.RegisteredDevice = varStorageEnclosureDiskWithoutEmbeddedStruct.RegisteredDevice
		varStorageEnclosureDisk.StorageEnclosure = varStorageEnclosureDiskWithoutEmbeddedStruct.StorageEnclosure
		*o = StorageEnclosureDisk(varStorageEnclosureDisk)
	} else {
		return err
	}

	varStorageEnclosureDisk := _StorageEnclosureDisk{}

	err = json.Unmarshal(data, &varStorageEnclosureDisk)
	if err == nil {
		o.EquipmentBase = varStorageEnclosureDisk.EquipmentBase
	} else {
		return err
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "ClassId")
		delete(additionalProperties, "ObjectType")
		delete(additionalProperties, "BlockSize")
		delete(additionalProperties, "DiskId")
		delete(additionalProperties, "DiskState")
		delete(additionalProperties, "Health")
		delete(additionalProperties, "NumBlocks")
		delete(additionalProperties, "Pid")
		delete(additionalProperties, "SasAddress1")
		delete(additionalProperties, "SasAddress2")
		delete(additionalProperties, "Size")
		delete(additionalProperties, "InventoryDeviceInfo")
		delete(additionalProperties, "PhysicalDisk")
		delete(additionalProperties, "RegisteredDevice")
		delete(additionalProperties, "StorageEnclosure")

		// remove fields from embedded structs
		reflectEquipmentBase := reflect.ValueOf(o.EquipmentBase)
		for i := 0; i < reflectEquipmentBase.Type().NumField(); i++ {
			t := reflectEquipmentBase.Type().Field(i)

			if jsonTag := t.Tag.Get("json"); jsonTag != "" {
				fieldName := ""
				if commaIdx := strings.Index(jsonTag, ","); commaIdx > 0 {
					fieldName = jsonTag[:commaIdx]
				} else {
					fieldName = jsonTag
				}
				if fieldName != "AdditionalProperties" {
					delete(additionalProperties, fieldName)
				}
			}
		}

		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableStorageEnclosureDisk struct {
	value *StorageEnclosureDisk
	isSet bool
}

func (v NullableStorageEnclosureDisk) Get() *StorageEnclosureDisk {
	return v.value
}

func (v *NullableStorageEnclosureDisk) Set(val *StorageEnclosureDisk) {
	v.value = val
	v.isSet = true
}

func (v NullableStorageEnclosureDisk) IsSet() bool {
	return v.isSet
}

func (v *NullableStorageEnclosureDisk) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStorageEnclosureDisk(val *StorageEnclosureDisk) *NullableStorageEnclosureDisk {
	return &NullableStorageEnclosureDisk{value: val, isSet: true}
}

func (v NullableStorageEnclosureDisk) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStorageEnclosureDisk) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
