/*
Cisco Intersight

Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations. The Intersight OpenAPI document defines the complete set of properties that are returned in the HTTP response. From that perspective, a client can expect that no additional properties are returned, unless these properties are explicitly defined in the OpenAPI document. However, when a client uses an older version of the Intersight OpenAPI document, the server may send additional properties because the software is more recent than the client. In that case, the client may receive properties that it does not know about. Some generated SDKs perform a strict validation of the HTTP response body against the OpenAPI document.

API version: 1.0.11-2025091920
Contact: intersight@cisco.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package intersight

import (
	"encoding/json"
	"fmt"
	"reflect"
	"strings"
)

// checks if the WorkloadWorkloadDeployment type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &WorkloadWorkloadDeployment{}

// WorkloadWorkloadDeployment A deployment for a workload definition within an Organization. All resources which match the qualification criteria given in Workload and deployment will be configured through this Workload Deployment.
type WorkloadWorkloadDeployment struct {
	MoBaseMo
	// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.
	ClassId string `json:"ClassId"`
	// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
	ObjectType string `json:"ObjectType"`
	// The action is performed on the deployment. * `None` - No changes have been made. * `PrepareToDeploy` - Marks the deployment as ready once the user has completed all changes and the deployment is in a valid state. Once the deployment is marked as PrepareToDeploy, workload instances will be created, but the actual deployment will occur as part of the deploy action. * `Deploy` - Initiates the process of pushing workload configuration to the instances based on the configured schedule. Once deployed, the deployment cannot be reverted to draft status. * `Suspend` - Suspends the deployment, preventing any further actions until it is resumed. Making changes to deployment configuration will not be pushed out. The deployment will not take any changes from the attached Workload when it is suspended. * `Retry` - Retries the deployment for all instances that previously failed. * `Resume` - Resumes a suspended deployment. Any changes made to the deployment when it was suspended or any changes made to the attached Workload will now be pushed out based on configured schedules.
	Action        *string                           `json:"Action,omitempty"`
	Blueprints    []WorkloadBlueprintInputReference `json:"Blueprints,omitempty"`
	ChangeDetails []WorkloadDeploymentChangeDetail  `json:"ChangeDetails,omitempty"`
	// The conformance status of the deployment. * `Ok` - The deployment conforms to the preferred version of the workload. * `NonConformant` - The deployment does not conform to the preferred version of the workload.
	Conformance *string `json:"Conformance,omitempty"`
	// A brief description of the deployment.
	Description *string `json:"Description,omitempty" validate:"regexp=^$|^[a-zA-Z0-9]+[\\\\x00-\\\\xFF]*$"`
	// The minimum digit count to format the instance index with leading zeros,  for example if the digit count is 4 and the start index is 1, then the  first instance will have a suffix 0001. If the number of instances created for the deployment exceeds the 9999, then the suffix will become a 5 digit number.
	DigitCount                 *int64                     `json:"DigitCount,omitempty"`
	InstanceConformanceSummary []WorkloadStateAggregation `json:"InstanceConformanceSummary,omitempty"`
	InstanceStatusSummary      []WorkloadStateAggregation `json:"InstanceStatusSummary,omitempty"`
	// The last action is performed on the deployment. * `None` - No changes have been made. * `PrepareToDeploy` - Marks the deployment as ready once the user has completed all changes and the deployment is in a valid state. Once the deployment is marked as PrepareToDeploy, workload instances will be created, but the actual deployment will occur as part of the deploy action. * `Deploy` - Initiates the process of pushing workload configuration to the instances based on the configured schedule. Once deployed, the deployment cannot be reverted to draft status. * `Suspend` - Suspends the deployment, preventing any further actions until it is resumed. Making changes to deployment configuration will not be pushed out. The deployment will not take any changes from the attached Workload when it is suspended. * `Retry` - Retries the deployment for all instances that previously failed. * `Resume` - Resumes a suspended deployment. Any changes made to the deployment when it was suspended or any changes made to the attached Workload will now be pushed out based on configured schedules.
	LastAction *string `json:"LastAction,omitempty"`
	// Tracks the last numeric index used for workload instances. The next instance index is derived by incrementing this value.
	LastInstanceIndex *int64 `json:"LastInstanceIndex,omitempty"`
	// The name for this Deployment. Name can only contain letters (a-z, A-Z), numbers (0-9), space, hyphen (-), or an underscore (_). The name must be unique within the organization.
	Name       *string                     `json:"Name,omitempty" validate:"regexp=^[a-zA-Z0-9][a-zA-Z0-9- _]{0,31}$"`
	Qualifiers []ResourceResourceQualifier `json:"Qualifiers,omitempty"`
	// A reference name is generated by the system based on the given name by replacing spaces and hyphen in name with underscore. This reference name is used internally and cannot be edited by users. It may only contain letters (a–z, A–Z), numbers (0–9), and underscores (_).
	RefName         *string                         `json:"RefName,omitempty" validate:"regexp=^$|^[a-zA-Z0-9][a-zA-Z0-9_]{0,31}$"`
	RolloutStrategy NullableWorkloadRolloutStrategy `json:"RolloutStrategy,omitempty"`
	// The starting index used to generate the suffix for the workload instance name.
	StartIndexForSuffix *int64 `json:"StartIndexForSuffix,omitempty"`
	// The status of the deployment. * `Draft` - The initial state of the deployment, indicating it is still being configured and not ready for deployment. * `ReadyToDeploy` - The deployment has passed validation checks and is ready to be deployed to instances. * `InProgress` - The initial deployment or changes in the deployment are in progress. * `Ok` - All associated instances have been successfully deployed. * `Failed` - One or more instances failed during initial deployment or changes in the deployment operations. * `ChangesScheduled` - The deployment has changes that need to be pushed to all associated instances. * `Suspended` - The deployment is suspended, preventing any further initial deployments or changes to deployment operations.
	Status                      *string                               `json:"Status,omitempty"`
	ValidationInformation       NullableWorkflowValidationInformation `json:"ValidationInformation,omitempty"`
	WorkloadDefinitionReference NullableWorkloadDefinitionMapper      `json:"WorkloadDefinitionReference,omitempty"`
	// The prefix to be used for naming workload instances created by this deployment. Prefix can only contain letters (a-z, A-Z), numbers (0-9), hyphen (-), or an underscore (_). This prefix must be unique within the organization.
	WorkloadInstancePrefix *string                                     `json:"WorkloadInstancePrefix,omitempty" validate:"regexp=^[a-zA-Z0-9][a-zA-Z0-9-_]{0,31}$"`
	DeploymentInput        NullableWorkloadDeploymentInputRelationship `json:"DeploymentInput,omitempty"`
	// An array of relationships to workloadDeploymentInput resources.
	DeploymentInputHistory []WorkloadDeploymentInputRelationship        `json:"DeploymentInputHistory,omitempty"`
	Organization           NullableOrganizationOrganizationRelationship `json:"Organization,omitempty"`
	// An array of relationships to resourceAbstractResourceQualificationPolicy resources.
	QualificationPolicies []ResourceAbstractResourceQualificationPolicyRelationship `json:"QualificationPolicies,omitempty"`
	ResourcePool          NullableResourcepoolPoolRelationship                      `json:"ResourcePool,omitempty"`
	SchedulePolicy        NullableSchedulerSchedulePolicyRelationship               `json:"SchedulePolicy,omitempty"`
	TaskSchedule          NullableSchedulerTaskScheduleRelationship                 `json:"TaskSchedule,omitempty"`
	WorkloadDefinition    NullableWorkloadWorkloadDefinitionRelationship            `json:"WorkloadDefinition,omitempty"`
	AdditionalProperties  map[string]interface{}
}

type _WorkloadWorkloadDeployment WorkloadWorkloadDeployment

// NewWorkloadWorkloadDeployment instantiates a new WorkloadWorkloadDeployment object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWorkloadWorkloadDeployment(classId string, objectType string) *WorkloadWorkloadDeployment {
	this := WorkloadWorkloadDeployment{}
	this.ClassId = classId
	this.ObjectType = objectType
	var action string = "None"
	this.Action = &action
	var digitCount int64 = 1
	this.DigitCount = &digitCount
	var startIndexForSuffix int64 = 1
	this.StartIndexForSuffix = &startIndexForSuffix
	return &this
}

// NewWorkloadWorkloadDeploymentWithDefaults instantiates a new WorkloadWorkloadDeployment object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWorkloadWorkloadDeploymentWithDefaults() *WorkloadWorkloadDeployment {
	this := WorkloadWorkloadDeployment{}
	var classId string = "workload.WorkloadDeployment"
	this.ClassId = classId
	var objectType string = "workload.WorkloadDeployment"
	this.ObjectType = objectType
	var action string = "None"
	this.Action = &action
	var digitCount int64 = 1
	this.DigitCount = &digitCount
	var startIndexForSuffix int64 = 1
	this.StartIndexForSuffix = &startIndexForSuffix
	return &this
}

// GetClassId returns the ClassId field value
func (o *WorkloadWorkloadDeployment) GetClassId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ClassId
}

// GetClassIdOk returns a tuple with the ClassId field value
// and a boolean to check if the value has been set.
func (o *WorkloadWorkloadDeployment) GetClassIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ClassId, true
}

// SetClassId sets field value
func (o *WorkloadWorkloadDeployment) SetClassId(v string) {
	o.ClassId = v
}

// GetDefaultClassId returns the default value "workload.WorkloadDeployment" of the ClassId field.
func (o *WorkloadWorkloadDeployment) GetDefaultClassId() interface{} {
	return "workload.WorkloadDeployment"
}

// GetObjectType returns the ObjectType field value
func (o *WorkloadWorkloadDeployment) GetObjectType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ObjectType
}

// GetObjectTypeOk returns a tuple with the ObjectType field value
// and a boolean to check if the value has been set.
func (o *WorkloadWorkloadDeployment) GetObjectTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ObjectType, true
}

// SetObjectType sets field value
func (o *WorkloadWorkloadDeployment) SetObjectType(v string) {
	o.ObjectType = v
}

// GetDefaultObjectType returns the default value "workload.WorkloadDeployment" of the ObjectType field.
func (o *WorkloadWorkloadDeployment) GetDefaultObjectType() interface{} {
	return "workload.WorkloadDeployment"
}

// GetAction returns the Action field value if set, zero value otherwise.
func (o *WorkloadWorkloadDeployment) GetAction() string {
	if o == nil || IsNil(o.Action) {
		var ret string
		return ret
	}
	return *o.Action
}

// GetActionOk returns a tuple with the Action field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkloadWorkloadDeployment) GetActionOk() (*string, bool) {
	if o == nil || IsNil(o.Action) {
		return nil, false
	}
	return o.Action, true
}

// HasAction returns a boolean if a field has been set.
func (o *WorkloadWorkloadDeployment) HasAction() bool {
	if o != nil && !IsNil(o.Action) {
		return true
	}

	return false
}

// SetAction gets a reference to the given string and assigns it to the Action field.
func (o *WorkloadWorkloadDeployment) SetAction(v string) {
	o.Action = &v
}

// GetBlueprints returns the Blueprints field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *WorkloadWorkloadDeployment) GetBlueprints() []WorkloadBlueprintInputReference {
	if o == nil {
		var ret []WorkloadBlueprintInputReference
		return ret
	}
	return o.Blueprints
}

// GetBlueprintsOk returns a tuple with the Blueprints field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *WorkloadWorkloadDeployment) GetBlueprintsOk() ([]WorkloadBlueprintInputReference, bool) {
	if o == nil || IsNil(o.Blueprints) {
		return nil, false
	}
	return o.Blueprints, true
}

// HasBlueprints returns a boolean if a field has been set.
func (o *WorkloadWorkloadDeployment) HasBlueprints() bool {
	if o != nil && !IsNil(o.Blueprints) {
		return true
	}

	return false
}

// SetBlueprints gets a reference to the given []WorkloadBlueprintInputReference and assigns it to the Blueprints field.
func (o *WorkloadWorkloadDeployment) SetBlueprints(v []WorkloadBlueprintInputReference) {
	o.Blueprints = v
}

// GetChangeDetails returns the ChangeDetails field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *WorkloadWorkloadDeployment) GetChangeDetails() []WorkloadDeploymentChangeDetail {
	if o == nil {
		var ret []WorkloadDeploymentChangeDetail
		return ret
	}
	return o.ChangeDetails
}

// GetChangeDetailsOk returns a tuple with the ChangeDetails field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *WorkloadWorkloadDeployment) GetChangeDetailsOk() ([]WorkloadDeploymentChangeDetail, bool) {
	if o == nil || IsNil(o.ChangeDetails) {
		return nil, false
	}
	return o.ChangeDetails, true
}

// HasChangeDetails returns a boolean if a field has been set.
func (o *WorkloadWorkloadDeployment) HasChangeDetails() bool {
	if o != nil && !IsNil(o.ChangeDetails) {
		return true
	}

	return false
}

// SetChangeDetails gets a reference to the given []WorkloadDeploymentChangeDetail and assigns it to the ChangeDetails field.
func (o *WorkloadWorkloadDeployment) SetChangeDetails(v []WorkloadDeploymentChangeDetail) {
	o.ChangeDetails = v
}

// GetConformance returns the Conformance field value if set, zero value otherwise.
func (o *WorkloadWorkloadDeployment) GetConformance() string {
	if o == nil || IsNil(o.Conformance) {
		var ret string
		return ret
	}
	return *o.Conformance
}

// GetConformanceOk returns a tuple with the Conformance field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkloadWorkloadDeployment) GetConformanceOk() (*string, bool) {
	if o == nil || IsNil(o.Conformance) {
		return nil, false
	}
	return o.Conformance, true
}

// HasConformance returns a boolean if a field has been set.
func (o *WorkloadWorkloadDeployment) HasConformance() bool {
	if o != nil && !IsNil(o.Conformance) {
		return true
	}

	return false
}

// SetConformance gets a reference to the given string and assigns it to the Conformance field.
func (o *WorkloadWorkloadDeployment) SetConformance(v string) {
	o.Conformance = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *WorkloadWorkloadDeployment) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkloadWorkloadDeployment) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *WorkloadWorkloadDeployment) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *WorkloadWorkloadDeployment) SetDescription(v string) {
	o.Description = &v
}

// GetDigitCount returns the DigitCount field value if set, zero value otherwise.
func (o *WorkloadWorkloadDeployment) GetDigitCount() int64 {
	if o == nil || IsNil(o.DigitCount) {
		var ret int64
		return ret
	}
	return *o.DigitCount
}

// GetDigitCountOk returns a tuple with the DigitCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkloadWorkloadDeployment) GetDigitCountOk() (*int64, bool) {
	if o == nil || IsNil(o.DigitCount) {
		return nil, false
	}
	return o.DigitCount, true
}

// HasDigitCount returns a boolean if a field has been set.
func (o *WorkloadWorkloadDeployment) HasDigitCount() bool {
	if o != nil && !IsNil(o.DigitCount) {
		return true
	}

	return false
}

// SetDigitCount gets a reference to the given int64 and assigns it to the DigitCount field.
func (o *WorkloadWorkloadDeployment) SetDigitCount(v int64) {
	o.DigitCount = &v
}

// GetInstanceConformanceSummary returns the InstanceConformanceSummary field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *WorkloadWorkloadDeployment) GetInstanceConformanceSummary() []WorkloadStateAggregation {
	if o == nil {
		var ret []WorkloadStateAggregation
		return ret
	}
	return o.InstanceConformanceSummary
}

// GetInstanceConformanceSummaryOk returns a tuple with the InstanceConformanceSummary field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *WorkloadWorkloadDeployment) GetInstanceConformanceSummaryOk() ([]WorkloadStateAggregation, bool) {
	if o == nil || IsNil(o.InstanceConformanceSummary) {
		return nil, false
	}
	return o.InstanceConformanceSummary, true
}

// HasInstanceConformanceSummary returns a boolean if a field has been set.
func (o *WorkloadWorkloadDeployment) HasInstanceConformanceSummary() bool {
	if o != nil && !IsNil(o.InstanceConformanceSummary) {
		return true
	}

	return false
}

// SetInstanceConformanceSummary gets a reference to the given []WorkloadStateAggregation and assigns it to the InstanceConformanceSummary field.
func (o *WorkloadWorkloadDeployment) SetInstanceConformanceSummary(v []WorkloadStateAggregation) {
	o.InstanceConformanceSummary = v
}

// GetInstanceStatusSummary returns the InstanceStatusSummary field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *WorkloadWorkloadDeployment) GetInstanceStatusSummary() []WorkloadStateAggregation {
	if o == nil {
		var ret []WorkloadStateAggregation
		return ret
	}
	return o.InstanceStatusSummary
}

// GetInstanceStatusSummaryOk returns a tuple with the InstanceStatusSummary field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *WorkloadWorkloadDeployment) GetInstanceStatusSummaryOk() ([]WorkloadStateAggregation, bool) {
	if o == nil || IsNil(o.InstanceStatusSummary) {
		return nil, false
	}
	return o.InstanceStatusSummary, true
}

// HasInstanceStatusSummary returns a boolean if a field has been set.
func (o *WorkloadWorkloadDeployment) HasInstanceStatusSummary() bool {
	if o != nil && !IsNil(o.InstanceStatusSummary) {
		return true
	}

	return false
}

// SetInstanceStatusSummary gets a reference to the given []WorkloadStateAggregation and assigns it to the InstanceStatusSummary field.
func (o *WorkloadWorkloadDeployment) SetInstanceStatusSummary(v []WorkloadStateAggregation) {
	o.InstanceStatusSummary = v
}

// GetLastAction returns the LastAction field value if set, zero value otherwise.
func (o *WorkloadWorkloadDeployment) GetLastAction() string {
	if o == nil || IsNil(o.LastAction) {
		var ret string
		return ret
	}
	return *o.LastAction
}

// GetLastActionOk returns a tuple with the LastAction field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkloadWorkloadDeployment) GetLastActionOk() (*string, bool) {
	if o == nil || IsNil(o.LastAction) {
		return nil, false
	}
	return o.LastAction, true
}

// HasLastAction returns a boolean if a field has been set.
func (o *WorkloadWorkloadDeployment) HasLastAction() bool {
	if o != nil && !IsNil(o.LastAction) {
		return true
	}

	return false
}

// SetLastAction gets a reference to the given string and assigns it to the LastAction field.
func (o *WorkloadWorkloadDeployment) SetLastAction(v string) {
	o.LastAction = &v
}

// GetLastInstanceIndex returns the LastInstanceIndex field value if set, zero value otherwise.
func (o *WorkloadWorkloadDeployment) GetLastInstanceIndex() int64 {
	if o == nil || IsNil(o.LastInstanceIndex) {
		var ret int64
		return ret
	}
	return *o.LastInstanceIndex
}

// GetLastInstanceIndexOk returns a tuple with the LastInstanceIndex field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkloadWorkloadDeployment) GetLastInstanceIndexOk() (*int64, bool) {
	if o == nil || IsNil(o.LastInstanceIndex) {
		return nil, false
	}
	return o.LastInstanceIndex, true
}

// HasLastInstanceIndex returns a boolean if a field has been set.
func (o *WorkloadWorkloadDeployment) HasLastInstanceIndex() bool {
	if o != nil && !IsNil(o.LastInstanceIndex) {
		return true
	}

	return false
}

// SetLastInstanceIndex gets a reference to the given int64 and assigns it to the LastInstanceIndex field.
func (o *WorkloadWorkloadDeployment) SetLastInstanceIndex(v int64) {
	o.LastInstanceIndex = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *WorkloadWorkloadDeployment) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkloadWorkloadDeployment) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *WorkloadWorkloadDeployment) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *WorkloadWorkloadDeployment) SetName(v string) {
	o.Name = &v
}

// GetQualifiers returns the Qualifiers field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *WorkloadWorkloadDeployment) GetQualifiers() []ResourceResourceQualifier {
	if o == nil {
		var ret []ResourceResourceQualifier
		return ret
	}
	return o.Qualifiers
}

// GetQualifiersOk returns a tuple with the Qualifiers field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *WorkloadWorkloadDeployment) GetQualifiersOk() ([]ResourceResourceQualifier, bool) {
	if o == nil || IsNil(o.Qualifiers) {
		return nil, false
	}
	return o.Qualifiers, true
}

// HasQualifiers returns a boolean if a field has been set.
func (o *WorkloadWorkloadDeployment) HasQualifiers() bool {
	if o != nil && !IsNil(o.Qualifiers) {
		return true
	}

	return false
}

// SetQualifiers gets a reference to the given []ResourceResourceQualifier and assigns it to the Qualifiers field.
func (o *WorkloadWorkloadDeployment) SetQualifiers(v []ResourceResourceQualifier) {
	o.Qualifiers = v
}

// GetRefName returns the RefName field value if set, zero value otherwise.
func (o *WorkloadWorkloadDeployment) GetRefName() string {
	if o == nil || IsNil(o.RefName) {
		var ret string
		return ret
	}
	return *o.RefName
}

// GetRefNameOk returns a tuple with the RefName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkloadWorkloadDeployment) GetRefNameOk() (*string, bool) {
	if o == nil || IsNil(o.RefName) {
		return nil, false
	}
	return o.RefName, true
}

// HasRefName returns a boolean if a field has been set.
func (o *WorkloadWorkloadDeployment) HasRefName() bool {
	if o != nil && !IsNil(o.RefName) {
		return true
	}

	return false
}

// SetRefName gets a reference to the given string and assigns it to the RefName field.
func (o *WorkloadWorkloadDeployment) SetRefName(v string) {
	o.RefName = &v
}

// GetRolloutStrategy returns the RolloutStrategy field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *WorkloadWorkloadDeployment) GetRolloutStrategy() WorkloadRolloutStrategy {
	if o == nil || IsNil(o.RolloutStrategy.Get()) {
		var ret WorkloadRolloutStrategy
		return ret
	}
	return *o.RolloutStrategy.Get()
}

// GetRolloutStrategyOk returns a tuple with the RolloutStrategy field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *WorkloadWorkloadDeployment) GetRolloutStrategyOk() (*WorkloadRolloutStrategy, bool) {
	if o == nil {
		return nil, false
	}
	return o.RolloutStrategy.Get(), o.RolloutStrategy.IsSet()
}

// HasRolloutStrategy returns a boolean if a field has been set.
func (o *WorkloadWorkloadDeployment) HasRolloutStrategy() bool {
	if o != nil && o.RolloutStrategy.IsSet() {
		return true
	}

	return false
}

// SetRolloutStrategy gets a reference to the given NullableWorkloadRolloutStrategy and assigns it to the RolloutStrategy field.
func (o *WorkloadWorkloadDeployment) SetRolloutStrategy(v WorkloadRolloutStrategy) {
	o.RolloutStrategy.Set(&v)
}

// SetRolloutStrategyNil sets the value for RolloutStrategy to be an explicit nil
func (o *WorkloadWorkloadDeployment) SetRolloutStrategyNil() {
	o.RolloutStrategy.Set(nil)
}

// UnsetRolloutStrategy ensures that no value is present for RolloutStrategy, not even an explicit nil
func (o *WorkloadWorkloadDeployment) UnsetRolloutStrategy() {
	o.RolloutStrategy.Unset()
}

// GetStartIndexForSuffix returns the StartIndexForSuffix field value if set, zero value otherwise.
func (o *WorkloadWorkloadDeployment) GetStartIndexForSuffix() int64 {
	if o == nil || IsNil(o.StartIndexForSuffix) {
		var ret int64
		return ret
	}
	return *o.StartIndexForSuffix
}

// GetStartIndexForSuffixOk returns a tuple with the StartIndexForSuffix field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkloadWorkloadDeployment) GetStartIndexForSuffixOk() (*int64, bool) {
	if o == nil || IsNil(o.StartIndexForSuffix) {
		return nil, false
	}
	return o.StartIndexForSuffix, true
}

// HasStartIndexForSuffix returns a boolean if a field has been set.
func (o *WorkloadWorkloadDeployment) HasStartIndexForSuffix() bool {
	if o != nil && !IsNil(o.StartIndexForSuffix) {
		return true
	}

	return false
}

// SetStartIndexForSuffix gets a reference to the given int64 and assigns it to the StartIndexForSuffix field.
func (o *WorkloadWorkloadDeployment) SetStartIndexForSuffix(v int64) {
	o.StartIndexForSuffix = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *WorkloadWorkloadDeployment) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkloadWorkloadDeployment) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *WorkloadWorkloadDeployment) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *WorkloadWorkloadDeployment) SetStatus(v string) {
	o.Status = &v
}

// GetValidationInformation returns the ValidationInformation field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *WorkloadWorkloadDeployment) GetValidationInformation() WorkflowValidationInformation {
	if o == nil || IsNil(o.ValidationInformation.Get()) {
		var ret WorkflowValidationInformation
		return ret
	}
	return *o.ValidationInformation.Get()
}

// GetValidationInformationOk returns a tuple with the ValidationInformation field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *WorkloadWorkloadDeployment) GetValidationInformationOk() (*WorkflowValidationInformation, bool) {
	if o == nil {
		return nil, false
	}
	return o.ValidationInformation.Get(), o.ValidationInformation.IsSet()
}

// HasValidationInformation returns a boolean if a field has been set.
func (o *WorkloadWorkloadDeployment) HasValidationInformation() bool {
	if o != nil && o.ValidationInformation.IsSet() {
		return true
	}

	return false
}

// SetValidationInformation gets a reference to the given NullableWorkflowValidationInformation and assigns it to the ValidationInformation field.
func (o *WorkloadWorkloadDeployment) SetValidationInformation(v WorkflowValidationInformation) {
	o.ValidationInformation.Set(&v)
}

// SetValidationInformationNil sets the value for ValidationInformation to be an explicit nil
func (o *WorkloadWorkloadDeployment) SetValidationInformationNil() {
	o.ValidationInformation.Set(nil)
}

// UnsetValidationInformation ensures that no value is present for ValidationInformation, not even an explicit nil
func (o *WorkloadWorkloadDeployment) UnsetValidationInformation() {
	o.ValidationInformation.Unset()
}

// GetWorkloadDefinitionReference returns the WorkloadDefinitionReference field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *WorkloadWorkloadDeployment) GetWorkloadDefinitionReference() WorkloadDefinitionMapper {
	if o == nil || IsNil(o.WorkloadDefinitionReference.Get()) {
		var ret WorkloadDefinitionMapper
		return ret
	}
	return *o.WorkloadDefinitionReference.Get()
}

// GetWorkloadDefinitionReferenceOk returns a tuple with the WorkloadDefinitionReference field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *WorkloadWorkloadDeployment) GetWorkloadDefinitionReferenceOk() (*WorkloadDefinitionMapper, bool) {
	if o == nil {
		return nil, false
	}
	return o.WorkloadDefinitionReference.Get(), o.WorkloadDefinitionReference.IsSet()
}

// HasWorkloadDefinitionReference returns a boolean if a field has been set.
func (o *WorkloadWorkloadDeployment) HasWorkloadDefinitionReference() bool {
	if o != nil && o.WorkloadDefinitionReference.IsSet() {
		return true
	}

	return false
}

// SetWorkloadDefinitionReference gets a reference to the given NullableWorkloadDefinitionMapper and assigns it to the WorkloadDefinitionReference field.
func (o *WorkloadWorkloadDeployment) SetWorkloadDefinitionReference(v WorkloadDefinitionMapper) {
	o.WorkloadDefinitionReference.Set(&v)
}

// SetWorkloadDefinitionReferenceNil sets the value for WorkloadDefinitionReference to be an explicit nil
func (o *WorkloadWorkloadDeployment) SetWorkloadDefinitionReferenceNil() {
	o.WorkloadDefinitionReference.Set(nil)
}

// UnsetWorkloadDefinitionReference ensures that no value is present for WorkloadDefinitionReference, not even an explicit nil
func (o *WorkloadWorkloadDeployment) UnsetWorkloadDefinitionReference() {
	o.WorkloadDefinitionReference.Unset()
}

// GetWorkloadInstancePrefix returns the WorkloadInstancePrefix field value if set, zero value otherwise.
func (o *WorkloadWorkloadDeployment) GetWorkloadInstancePrefix() string {
	if o == nil || IsNil(o.WorkloadInstancePrefix) {
		var ret string
		return ret
	}
	return *o.WorkloadInstancePrefix
}

// GetWorkloadInstancePrefixOk returns a tuple with the WorkloadInstancePrefix field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkloadWorkloadDeployment) GetWorkloadInstancePrefixOk() (*string, bool) {
	if o == nil || IsNil(o.WorkloadInstancePrefix) {
		return nil, false
	}
	return o.WorkloadInstancePrefix, true
}

// HasWorkloadInstancePrefix returns a boolean if a field has been set.
func (o *WorkloadWorkloadDeployment) HasWorkloadInstancePrefix() bool {
	if o != nil && !IsNil(o.WorkloadInstancePrefix) {
		return true
	}

	return false
}

// SetWorkloadInstancePrefix gets a reference to the given string and assigns it to the WorkloadInstancePrefix field.
func (o *WorkloadWorkloadDeployment) SetWorkloadInstancePrefix(v string) {
	o.WorkloadInstancePrefix = &v
}

// GetDeploymentInput returns the DeploymentInput field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *WorkloadWorkloadDeployment) GetDeploymentInput() WorkloadDeploymentInputRelationship {
	if o == nil || IsNil(o.DeploymentInput.Get()) {
		var ret WorkloadDeploymentInputRelationship
		return ret
	}
	return *o.DeploymentInput.Get()
}

// GetDeploymentInputOk returns a tuple with the DeploymentInput field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *WorkloadWorkloadDeployment) GetDeploymentInputOk() (*WorkloadDeploymentInputRelationship, bool) {
	if o == nil {
		return nil, false
	}
	return o.DeploymentInput.Get(), o.DeploymentInput.IsSet()
}

// HasDeploymentInput returns a boolean if a field has been set.
func (o *WorkloadWorkloadDeployment) HasDeploymentInput() bool {
	if o != nil && o.DeploymentInput.IsSet() {
		return true
	}

	return false
}

// SetDeploymentInput gets a reference to the given NullableWorkloadDeploymentInputRelationship and assigns it to the DeploymentInput field.
func (o *WorkloadWorkloadDeployment) SetDeploymentInput(v WorkloadDeploymentInputRelationship) {
	o.DeploymentInput.Set(&v)
}

// SetDeploymentInputNil sets the value for DeploymentInput to be an explicit nil
func (o *WorkloadWorkloadDeployment) SetDeploymentInputNil() {
	o.DeploymentInput.Set(nil)
}

// UnsetDeploymentInput ensures that no value is present for DeploymentInput, not even an explicit nil
func (o *WorkloadWorkloadDeployment) UnsetDeploymentInput() {
	o.DeploymentInput.Unset()
}

// GetDeploymentInputHistory returns the DeploymentInputHistory field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *WorkloadWorkloadDeployment) GetDeploymentInputHistory() []WorkloadDeploymentInputRelationship {
	if o == nil {
		var ret []WorkloadDeploymentInputRelationship
		return ret
	}
	return o.DeploymentInputHistory
}

// GetDeploymentInputHistoryOk returns a tuple with the DeploymentInputHistory field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *WorkloadWorkloadDeployment) GetDeploymentInputHistoryOk() ([]WorkloadDeploymentInputRelationship, bool) {
	if o == nil || IsNil(o.DeploymentInputHistory) {
		return nil, false
	}
	return o.DeploymentInputHistory, true
}

// HasDeploymentInputHistory returns a boolean if a field has been set.
func (o *WorkloadWorkloadDeployment) HasDeploymentInputHistory() bool {
	if o != nil && !IsNil(o.DeploymentInputHistory) {
		return true
	}

	return false
}

// SetDeploymentInputHistory gets a reference to the given []WorkloadDeploymentInputRelationship and assigns it to the DeploymentInputHistory field.
func (o *WorkloadWorkloadDeployment) SetDeploymentInputHistory(v []WorkloadDeploymentInputRelationship) {
	o.DeploymentInputHistory = v
}

// GetOrganization returns the Organization field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *WorkloadWorkloadDeployment) GetOrganization() OrganizationOrganizationRelationship {
	if o == nil || IsNil(o.Organization.Get()) {
		var ret OrganizationOrganizationRelationship
		return ret
	}
	return *o.Organization.Get()
}

// GetOrganizationOk returns a tuple with the Organization field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *WorkloadWorkloadDeployment) GetOrganizationOk() (*OrganizationOrganizationRelationship, bool) {
	if o == nil {
		return nil, false
	}
	return o.Organization.Get(), o.Organization.IsSet()
}

// HasOrganization returns a boolean if a field has been set.
func (o *WorkloadWorkloadDeployment) HasOrganization() bool {
	if o != nil && o.Organization.IsSet() {
		return true
	}

	return false
}

// SetOrganization gets a reference to the given NullableOrganizationOrganizationRelationship and assigns it to the Organization field.
func (o *WorkloadWorkloadDeployment) SetOrganization(v OrganizationOrganizationRelationship) {
	o.Organization.Set(&v)
}

// SetOrganizationNil sets the value for Organization to be an explicit nil
func (o *WorkloadWorkloadDeployment) SetOrganizationNil() {
	o.Organization.Set(nil)
}

// UnsetOrganization ensures that no value is present for Organization, not even an explicit nil
func (o *WorkloadWorkloadDeployment) UnsetOrganization() {
	o.Organization.Unset()
}

// GetQualificationPolicies returns the QualificationPolicies field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *WorkloadWorkloadDeployment) GetQualificationPolicies() []ResourceAbstractResourceQualificationPolicyRelationship {
	if o == nil {
		var ret []ResourceAbstractResourceQualificationPolicyRelationship
		return ret
	}
	return o.QualificationPolicies
}

// GetQualificationPoliciesOk returns a tuple with the QualificationPolicies field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *WorkloadWorkloadDeployment) GetQualificationPoliciesOk() ([]ResourceAbstractResourceQualificationPolicyRelationship, bool) {
	if o == nil || IsNil(o.QualificationPolicies) {
		return nil, false
	}
	return o.QualificationPolicies, true
}

// HasQualificationPolicies returns a boolean if a field has been set.
func (o *WorkloadWorkloadDeployment) HasQualificationPolicies() bool {
	if o != nil && !IsNil(o.QualificationPolicies) {
		return true
	}

	return false
}

// SetQualificationPolicies gets a reference to the given []ResourceAbstractResourceQualificationPolicyRelationship and assigns it to the QualificationPolicies field.
func (o *WorkloadWorkloadDeployment) SetQualificationPolicies(v []ResourceAbstractResourceQualificationPolicyRelationship) {
	o.QualificationPolicies = v
}

// GetResourcePool returns the ResourcePool field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *WorkloadWorkloadDeployment) GetResourcePool() ResourcepoolPoolRelationship {
	if o == nil || IsNil(o.ResourcePool.Get()) {
		var ret ResourcepoolPoolRelationship
		return ret
	}
	return *o.ResourcePool.Get()
}

// GetResourcePoolOk returns a tuple with the ResourcePool field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *WorkloadWorkloadDeployment) GetResourcePoolOk() (*ResourcepoolPoolRelationship, bool) {
	if o == nil {
		return nil, false
	}
	return o.ResourcePool.Get(), o.ResourcePool.IsSet()
}

// HasResourcePool returns a boolean if a field has been set.
func (o *WorkloadWorkloadDeployment) HasResourcePool() bool {
	if o != nil && o.ResourcePool.IsSet() {
		return true
	}

	return false
}

// SetResourcePool gets a reference to the given NullableResourcepoolPoolRelationship and assigns it to the ResourcePool field.
func (o *WorkloadWorkloadDeployment) SetResourcePool(v ResourcepoolPoolRelationship) {
	o.ResourcePool.Set(&v)
}

// SetResourcePoolNil sets the value for ResourcePool to be an explicit nil
func (o *WorkloadWorkloadDeployment) SetResourcePoolNil() {
	o.ResourcePool.Set(nil)
}

// UnsetResourcePool ensures that no value is present for ResourcePool, not even an explicit nil
func (o *WorkloadWorkloadDeployment) UnsetResourcePool() {
	o.ResourcePool.Unset()
}

// GetSchedulePolicy returns the SchedulePolicy field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *WorkloadWorkloadDeployment) GetSchedulePolicy() SchedulerSchedulePolicyRelationship {
	if o == nil || IsNil(o.SchedulePolicy.Get()) {
		var ret SchedulerSchedulePolicyRelationship
		return ret
	}
	return *o.SchedulePolicy.Get()
}

// GetSchedulePolicyOk returns a tuple with the SchedulePolicy field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *WorkloadWorkloadDeployment) GetSchedulePolicyOk() (*SchedulerSchedulePolicyRelationship, bool) {
	if o == nil {
		return nil, false
	}
	return o.SchedulePolicy.Get(), o.SchedulePolicy.IsSet()
}

// HasSchedulePolicy returns a boolean if a field has been set.
func (o *WorkloadWorkloadDeployment) HasSchedulePolicy() bool {
	if o != nil && o.SchedulePolicy.IsSet() {
		return true
	}

	return false
}

// SetSchedulePolicy gets a reference to the given NullableSchedulerSchedulePolicyRelationship and assigns it to the SchedulePolicy field.
func (o *WorkloadWorkloadDeployment) SetSchedulePolicy(v SchedulerSchedulePolicyRelationship) {
	o.SchedulePolicy.Set(&v)
}

// SetSchedulePolicyNil sets the value for SchedulePolicy to be an explicit nil
func (o *WorkloadWorkloadDeployment) SetSchedulePolicyNil() {
	o.SchedulePolicy.Set(nil)
}

// UnsetSchedulePolicy ensures that no value is present for SchedulePolicy, not even an explicit nil
func (o *WorkloadWorkloadDeployment) UnsetSchedulePolicy() {
	o.SchedulePolicy.Unset()
}

// GetTaskSchedule returns the TaskSchedule field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *WorkloadWorkloadDeployment) GetTaskSchedule() SchedulerTaskScheduleRelationship {
	if o == nil || IsNil(o.TaskSchedule.Get()) {
		var ret SchedulerTaskScheduleRelationship
		return ret
	}
	return *o.TaskSchedule.Get()
}

// GetTaskScheduleOk returns a tuple with the TaskSchedule field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *WorkloadWorkloadDeployment) GetTaskScheduleOk() (*SchedulerTaskScheduleRelationship, bool) {
	if o == nil {
		return nil, false
	}
	return o.TaskSchedule.Get(), o.TaskSchedule.IsSet()
}

// HasTaskSchedule returns a boolean if a field has been set.
func (o *WorkloadWorkloadDeployment) HasTaskSchedule() bool {
	if o != nil && o.TaskSchedule.IsSet() {
		return true
	}

	return false
}

// SetTaskSchedule gets a reference to the given NullableSchedulerTaskScheduleRelationship and assigns it to the TaskSchedule field.
func (o *WorkloadWorkloadDeployment) SetTaskSchedule(v SchedulerTaskScheduleRelationship) {
	o.TaskSchedule.Set(&v)
}

// SetTaskScheduleNil sets the value for TaskSchedule to be an explicit nil
func (o *WorkloadWorkloadDeployment) SetTaskScheduleNil() {
	o.TaskSchedule.Set(nil)
}

// UnsetTaskSchedule ensures that no value is present for TaskSchedule, not even an explicit nil
func (o *WorkloadWorkloadDeployment) UnsetTaskSchedule() {
	o.TaskSchedule.Unset()
}

// GetWorkloadDefinition returns the WorkloadDefinition field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *WorkloadWorkloadDeployment) GetWorkloadDefinition() WorkloadWorkloadDefinitionRelationship {
	if o == nil || IsNil(o.WorkloadDefinition.Get()) {
		var ret WorkloadWorkloadDefinitionRelationship
		return ret
	}
	return *o.WorkloadDefinition.Get()
}

// GetWorkloadDefinitionOk returns a tuple with the WorkloadDefinition field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *WorkloadWorkloadDeployment) GetWorkloadDefinitionOk() (*WorkloadWorkloadDefinitionRelationship, bool) {
	if o == nil {
		return nil, false
	}
	return o.WorkloadDefinition.Get(), o.WorkloadDefinition.IsSet()
}

// HasWorkloadDefinition returns a boolean if a field has been set.
func (o *WorkloadWorkloadDeployment) HasWorkloadDefinition() bool {
	if o != nil && o.WorkloadDefinition.IsSet() {
		return true
	}

	return false
}

// SetWorkloadDefinition gets a reference to the given NullableWorkloadWorkloadDefinitionRelationship and assigns it to the WorkloadDefinition field.
func (o *WorkloadWorkloadDeployment) SetWorkloadDefinition(v WorkloadWorkloadDefinitionRelationship) {
	o.WorkloadDefinition.Set(&v)
}

// SetWorkloadDefinitionNil sets the value for WorkloadDefinition to be an explicit nil
func (o *WorkloadWorkloadDeployment) SetWorkloadDefinitionNil() {
	o.WorkloadDefinition.Set(nil)
}

// UnsetWorkloadDefinition ensures that no value is present for WorkloadDefinition, not even an explicit nil
func (o *WorkloadWorkloadDeployment) UnsetWorkloadDefinition() {
	o.WorkloadDefinition.Unset()
}

func (o WorkloadWorkloadDeployment) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o WorkloadWorkloadDeployment) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	serializedMoBaseMo, errMoBaseMo := json.Marshal(o.MoBaseMo)
	if errMoBaseMo != nil {
		return map[string]interface{}{}, errMoBaseMo
	}
	errMoBaseMo = json.Unmarshal([]byte(serializedMoBaseMo), &toSerialize)
	if errMoBaseMo != nil {
		return map[string]interface{}{}, errMoBaseMo
	}
	if _, exists := toSerialize["ClassId"]; !exists {
		toSerialize["ClassId"] = o.GetDefaultClassId()
	}
	toSerialize["ClassId"] = o.ClassId
	if _, exists := toSerialize["ObjectType"]; !exists {
		toSerialize["ObjectType"] = o.GetDefaultObjectType()
	}
	toSerialize["ObjectType"] = o.ObjectType
	if !IsNil(o.Action) {
		toSerialize["Action"] = o.Action
	}
	if o.Blueprints != nil {
		toSerialize["Blueprints"] = o.Blueprints
	}
	if o.ChangeDetails != nil {
		toSerialize["ChangeDetails"] = o.ChangeDetails
	}
	if !IsNil(o.Conformance) {
		toSerialize["Conformance"] = o.Conformance
	}
	if !IsNil(o.Description) {
		toSerialize["Description"] = o.Description
	}
	if !IsNil(o.DigitCount) {
		toSerialize["DigitCount"] = o.DigitCount
	}
	if o.InstanceConformanceSummary != nil {
		toSerialize["InstanceConformanceSummary"] = o.InstanceConformanceSummary
	}
	if o.InstanceStatusSummary != nil {
		toSerialize["InstanceStatusSummary"] = o.InstanceStatusSummary
	}
	if !IsNil(o.LastAction) {
		toSerialize["LastAction"] = o.LastAction
	}
	if !IsNil(o.LastInstanceIndex) {
		toSerialize["LastInstanceIndex"] = o.LastInstanceIndex
	}
	if !IsNil(o.Name) {
		toSerialize["Name"] = o.Name
	}
	if o.Qualifiers != nil {
		toSerialize["Qualifiers"] = o.Qualifiers
	}
	if !IsNil(o.RefName) {
		toSerialize["RefName"] = o.RefName
	}
	if o.RolloutStrategy.IsSet() {
		toSerialize["RolloutStrategy"] = o.RolloutStrategy.Get()
	}
	if !IsNil(o.StartIndexForSuffix) {
		toSerialize["StartIndexForSuffix"] = o.StartIndexForSuffix
	}
	if !IsNil(o.Status) {
		toSerialize["Status"] = o.Status
	}
	if o.ValidationInformation.IsSet() {
		toSerialize["ValidationInformation"] = o.ValidationInformation.Get()
	}
	if o.WorkloadDefinitionReference.IsSet() {
		toSerialize["WorkloadDefinitionReference"] = o.WorkloadDefinitionReference.Get()
	}
	if !IsNil(o.WorkloadInstancePrefix) {
		toSerialize["WorkloadInstancePrefix"] = o.WorkloadInstancePrefix
	}
	if o.DeploymentInput.IsSet() {
		toSerialize["DeploymentInput"] = o.DeploymentInput.Get()
	}
	if o.DeploymentInputHistory != nil {
		toSerialize["DeploymentInputHistory"] = o.DeploymentInputHistory
	}
	if o.Organization.IsSet() {
		toSerialize["Organization"] = o.Organization.Get()
	}
	if o.QualificationPolicies != nil {
		toSerialize["QualificationPolicies"] = o.QualificationPolicies
	}
	if o.ResourcePool.IsSet() {
		toSerialize["ResourcePool"] = o.ResourcePool.Get()
	}
	if o.SchedulePolicy.IsSet() {
		toSerialize["SchedulePolicy"] = o.SchedulePolicy.Get()
	}
	if o.TaskSchedule.IsSet() {
		toSerialize["TaskSchedule"] = o.TaskSchedule.Get()
	}
	if o.WorkloadDefinition.IsSet() {
		toSerialize["WorkloadDefinition"] = o.WorkloadDefinition.Get()
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *WorkloadWorkloadDeployment) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"ClassId",
		"ObjectType",
	}

	// defaultValueFuncMap captures the default values for required properties.
	// These values are used when required properties are missing from the payload.
	defaultValueFuncMap := map[string]func() interface{}{
		"ClassId":    o.GetDefaultClassId,
		"ObjectType": o.GetDefaultObjectType,
	}
	var defaultValueApplied bool
	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			if _, ok := defaultValueFuncMap[requiredProperty]; ok {
				allProperties[requiredProperty] = defaultValueFuncMap[requiredProperty]()
				defaultValueApplied = true
			}
		}
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	if defaultValueApplied {
		data, err = json.Marshal(allProperties)
		if err != nil {
			return err
		}
	}
	type WorkloadWorkloadDeploymentWithoutEmbeddedStruct struct {
		// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.
		ClassId string `json:"ClassId"`
		// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
		ObjectType string `json:"ObjectType"`
		// The action is performed on the deployment. * `None` - No changes have been made. * `PrepareToDeploy` - Marks the deployment as ready once the user has completed all changes and the deployment is in a valid state. Once the deployment is marked as PrepareToDeploy, workload instances will be created, but the actual deployment will occur as part of the deploy action. * `Deploy` - Initiates the process of pushing workload configuration to the instances based on the configured schedule. Once deployed, the deployment cannot be reverted to draft status. * `Suspend` - Suspends the deployment, preventing any further actions until it is resumed. Making changes to deployment configuration will not be pushed out. The deployment will not take any changes from the attached Workload when it is suspended. * `Retry` - Retries the deployment for all instances that previously failed. * `Resume` - Resumes a suspended deployment. Any changes made to the deployment when it was suspended or any changes made to the attached Workload will now be pushed out based on configured schedules.
		Action        *string                           `json:"Action,omitempty"`
		Blueprints    []WorkloadBlueprintInputReference `json:"Blueprints,omitempty"`
		ChangeDetails []WorkloadDeploymentChangeDetail  `json:"ChangeDetails,omitempty"`
		// The conformance status of the deployment. * `Ok` - The deployment conforms to the preferred version of the workload. * `NonConformant` - The deployment does not conform to the preferred version of the workload.
		Conformance *string `json:"Conformance,omitempty"`
		// A brief description of the deployment.
		Description *string `json:"Description,omitempty" validate:"regexp=^$|^[a-zA-Z0-9]+[\\\\x00-\\\\xFF]*$"`
		// The minimum digit count to format the instance index with leading zeros,  for example if the digit count is 4 and the start index is 1, then the  first instance will have a suffix 0001. If the number of instances created for the deployment exceeds the 9999, then the suffix will become a 5 digit number.
		DigitCount                 *int64                     `json:"DigitCount,omitempty"`
		InstanceConformanceSummary []WorkloadStateAggregation `json:"InstanceConformanceSummary,omitempty"`
		InstanceStatusSummary      []WorkloadStateAggregation `json:"InstanceStatusSummary,omitempty"`
		// The last action is performed on the deployment. * `None` - No changes have been made. * `PrepareToDeploy` - Marks the deployment as ready once the user has completed all changes and the deployment is in a valid state. Once the deployment is marked as PrepareToDeploy, workload instances will be created, but the actual deployment will occur as part of the deploy action. * `Deploy` - Initiates the process of pushing workload configuration to the instances based on the configured schedule. Once deployed, the deployment cannot be reverted to draft status. * `Suspend` - Suspends the deployment, preventing any further actions until it is resumed. Making changes to deployment configuration will not be pushed out. The deployment will not take any changes from the attached Workload when it is suspended. * `Retry` - Retries the deployment for all instances that previously failed. * `Resume` - Resumes a suspended deployment. Any changes made to the deployment when it was suspended or any changes made to the attached Workload will now be pushed out based on configured schedules.
		LastAction *string `json:"LastAction,omitempty"`
		// Tracks the last numeric index used for workload instances. The next instance index is derived by incrementing this value.
		LastInstanceIndex *int64 `json:"LastInstanceIndex,omitempty"`
		// The name for this Deployment. Name can only contain letters (a-z, A-Z), numbers (0-9), space, hyphen (-), or an underscore (_). The name must be unique within the organization.
		Name       *string                     `json:"Name,omitempty" validate:"regexp=^[a-zA-Z0-9][a-zA-Z0-9- _]{0,31}$"`
		Qualifiers []ResourceResourceQualifier `json:"Qualifiers,omitempty"`
		// A reference name is generated by the system based on the given name by replacing spaces and hyphen in name with underscore. This reference name is used internally and cannot be edited by users. It may only contain letters (a–z, A–Z), numbers (0–9), and underscores (_).
		RefName         *string                         `json:"RefName,omitempty" validate:"regexp=^$|^[a-zA-Z0-9][a-zA-Z0-9_]{0,31}$"`
		RolloutStrategy NullableWorkloadRolloutStrategy `json:"RolloutStrategy,omitempty"`
		// The starting index used to generate the suffix for the workload instance name.
		StartIndexForSuffix *int64 `json:"StartIndexForSuffix,omitempty"`
		// The status of the deployment. * `Draft` - The initial state of the deployment, indicating it is still being configured and not ready for deployment. * `ReadyToDeploy` - The deployment has passed validation checks and is ready to be deployed to instances. * `InProgress` - The initial deployment or changes in the deployment are in progress. * `Ok` - All associated instances have been successfully deployed. * `Failed` - One or more instances failed during initial deployment or changes in the deployment operations. * `ChangesScheduled` - The deployment has changes that need to be pushed to all associated instances. * `Suspended` - The deployment is suspended, preventing any further initial deployments or changes to deployment operations.
		Status                      *string                               `json:"Status,omitempty"`
		ValidationInformation       NullableWorkflowValidationInformation `json:"ValidationInformation,omitempty"`
		WorkloadDefinitionReference NullableWorkloadDefinitionMapper      `json:"WorkloadDefinitionReference,omitempty"`
		// The prefix to be used for naming workload instances created by this deployment. Prefix can only contain letters (a-z, A-Z), numbers (0-9), hyphen (-), or an underscore (_). This prefix must be unique within the organization.
		WorkloadInstancePrefix *string                                     `json:"WorkloadInstancePrefix,omitempty" validate:"regexp=^[a-zA-Z0-9][a-zA-Z0-9-_]{0,31}$"`
		DeploymentInput        NullableWorkloadDeploymentInputRelationship `json:"DeploymentInput,omitempty"`
		// An array of relationships to workloadDeploymentInput resources.
		DeploymentInputHistory []WorkloadDeploymentInputRelationship        `json:"DeploymentInputHistory,omitempty"`
		Organization           NullableOrganizationOrganizationRelationship `json:"Organization,omitempty"`
		// An array of relationships to resourceAbstractResourceQualificationPolicy resources.
		QualificationPolicies []ResourceAbstractResourceQualificationPolicyRelationship `json:"QualificationPolicies,omitempty"`
		ResourcePool          NullableResourcepoolPoolRelationship                      `json:"ResourcePool,omitempty"`
		SchedulePolicy        NullableSchedulerSchedulePolicyRelationship               `json:"SchedulePolicy,omitempty"`
		TaskSchedule          NullableSchedulerTaskScheduleRelationship                 `json:"TaskSchedule,omitempty"`
		WorkloadDefinition    NullableWorkloadWorkloadDefinitionRelationship            `json:"WorkloadDefinition,omitempty"`
	}

	varWorkloadWorkloadDeploymentWithoutEmbeddedStruct := WorkloadWorkloadDeploymentWithoutEmbeddedStruct{}

	err = json.Unmarshal(data, &varWorkloadWorkloadDeploymentWithoutEmbeddedStruct)
	if err == nil {
		varWorkloadWorkloadDeployment := _WorkloadWorkloadDeployment{}
		varWorkloadWorkloadDeployment.ClassId = varWorkloadWorkloadDeploymentWithoutEmbeddedStruct.ClassId
		varWorkloadWorkloadDeployment.ObjectType = varWorkloadWorkloadDeploymentWithoutEmbeddedStruct.ObjectType
		varWorkloadWorkloadDeployment.Action = varWorkloadWorkloadDeploymentWithoutEmbeddedStruct.Action
		varWorkloadWorkloadDeployment.Blueprints = varWorkloadWorkloadDeploymentWithoutEmbeddedStruct.Blueprints
		varWorkloadWorkloadDeployment.ChangeDetails = varWorkloadWorkloadDeploymentWithoutEmbeddedStruct.ChangeDetails
		varWorkloadWorkloadDeployment.Conformance = varWorkloadWorkloadDeploymentWithoutEmbeddedStruct.Conformance
		varWorkloadWorkloadDeployment.Description = varWorkloadWorkloadDeploymentWithoutEmbeddedStruct.Description
		varWorkloadWorkloadDeployment.DigitCount = varWorkloadWorkloadDeploymentWithoutEmbeddedStruct.DigitCount
		varWorkloadWorkloadDeployment.InstanceConformanceSummary = varWorkloadWorkloadDeploymentWithoutEmbeddedStruct.InstanceConformanceSummary
		varWorkloadWorkloadDeployment.InstanceStatusSummary = varWorkloadWorkloadDeploymentWithoutEmbeddedStruct.InstanceStatusSummary
		varWorkloadWorkloadDeployment.LastAction = varWorkloadWorkloadDeploymentWithoutEmbeddedStruct.LastAction
		varWorkloadWorkloadDeployment.LastInstanceIndex = varWorkloadWorkloadDeploymentWithoutEmbeddedStruct.LastInstanceIndex
		varWorkloadWorkloadDeployment.Name = varWorkloadWorkloadDeploymentWithoutEmbeddedStruct.Name
		varWorkloadWorkloadDeployment.Qualifiers = varWorkloadWorkloadDeploymentWithoutEmbeddedStruct.Qualifiers
		varWorkloadWorkloadDeployment.RefName = varWorkloadWorkloadDeploymentWithoutEmbeddedStruct.RefName
		varWorkloadWorkloadDeployment.RolloutStrategy = varWorkloadWorkloadDeploymentWithoutEmbeddedStruct.RolloutStrategy
		varWorkloadWorkloadDeployment.StartIndexForSuffix = varWorkloadWorkloadDeploymentWithoutEmbeddedStruct.StartIndexForSuffix
		varWorkloadWorkloadDeployment.Status = varWorkloadWorkloadDeploymentWithoutEmbeddedStruct.Status
		varWorkloadWorkloadDeployment.ValidationInformation = varWorkloadWorkloadDeploymentWithoutEmbeddedStruct.ValidationInformation
		varWorkloadWorkloadDeployment.WorkloadDefinitionReference = varWorkloadWorkloadDeploymentWithoutEmbeddedStruct.WorkloadDefinitionReference
		varWorkloadWorkloadDeployment.WorkloadInstancePrefix = varWorkloadWorkloadDeploymentWithoutEmbeddedStruct.WorkloadInstancePrefix
		varWorkloadWorkloadDeployment.DeploymentInput = varWorkloadWorkloadDeploymentWithoutEmbeddedStruct.DeploymentInput
		varWorkloadWorkloadDeployment.DeploymentInputHistory = varWorkloadWorkloadDeploymentWithoutEmbeddedStruct.DeploymentInputHistory
		varWorkloadWorkloadDeployment.Organization = varWorkloadWorkloadDeploymentWithoutEmbeddedStruct.Organization
		varWorkloadWorkloadDeployment.QualificationPolicies = varWorkloadWorkloadDeploymentWithoutEmbeddedStruct.QualificationPolicies
		varWorkloadWorkloadDeployment.ResourcePool = varWorkloadWorkloadDeploymentWithoutEmbeddedStruct.ResourcePool
		varWorkloadWorkloadDeployment.SchedulePolicy = varWorkloadWorkloadDeploymentWithoutEmbeddedStruct.SchedulePolicy
		varWorkloadWorkloadDeployment.TaskSchedule = varWorkloadWorkloadDeploymentWithoutEmbeddedStruct.TaskSchedule
		varWorkloadWorkloadDeployment.WorkloadDefinition = varWorkloadWorkloadDeploymentWithoutEmbeddedStruct.WorkloadDefinition
		*o = WorkloadWorkloadDeployment(varWorkloadWorkloadDeployment)
	} else {
		return err
	}

	varWorkloadWorkloadDeployment := _WorkloadWorkloadDeployment{}

	err = json.Unmarshal(data, &varWorkloadWorkloadDeployment)
	if err == nil {
		o.MoBaseMo = varWorkloadWorkloadDeployment.MoBaseMo
	} else {
		return err
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "ClassId")
		delete(additionalProperties, "ObjectType")
		delete(additionalProperties, "Action")
		delete(additionalProperties, "Blueprints")
		delete(additionalProperties, "ChangeDetails")
		delete(additionalProperties, "Conformance")
		delete(additionalProperties, "Description")
		delete(additionalProperties, "DigitCount")
		delete(additionalProperties, "InstanceConformanceSummary")
		delete(additionalProperties, "InstanceStatusSummary")
		delete(additionalProperties, "LastAction")
		delete(additionalProperties, "LastInstanceIndex")
		delete(additionalProperties, "Name")
		delete(additionalProperties, "Qualifiers")
		delete(additionalProperties, "RefName")
		delete(additionalProperties, "RolloutStrategy")
		delete(additionalProperties, "StartIndexForSuffix")
		delete(additionalProperties, "Status")
		delete(additionalProperties, "ValidationInformation")
		delete(additionalProperties, "WorkloadDefinitionReference")
		delete(additionalProperties, "WorkloadInstancePrefix")
		delete(additionalProperties, "DeploymentInput")
		delete(additionalProperties, "DeploymentInputHistory")
		delete(additionalProperties, "Organization")
		delete(additionalProperties, "QualificationPolicies")
		delete(additionalProperties, "ResourcePool")
		delete(additionalProperties, "SchedulePolicy")
		delete(additionalProperties, "TaskSchedule")
		delete(additionalProperties, "WorkloadDefinition")

		// remove fields from embedded structs
		reflectMoBaseMo := reflect.ValueOf(o.MoBaseMo)
		for i := 0; i < reflectMoBaseMo.Type().NumField(); i++ {
			t := reflectMoBaseMo.Type().Field(i)

			if jsonTag := t.Tag.Get("json"); jsonTag != "" {
				fieldName := ""
				if commaIdx := strings.Index(jsonTag, ","); commaIdx > 0 {
					fieldName = jsonTag[:commaIdx]
				} else {
					fieldName = jsonTag
				}
				if fieldName != "AdditionalProperties" {
					delete(additionalProperties, fieldName)
				}
			}
		}

		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableWorkloadWorkloadDeployment struct {
	value *WorkloadWorkloadDeployment
	isSet bool
}

func (v NullableWorkloadWorkloadDeployment) Get() *WorkloadWorkloadDeployment {
	return v.value
}

func (v *NullableWorkloadWorkloadDeployment) Set(val *WorkloadWorkloadDeployment) {
	v.value = val
	v.isSet = true
}

func (v NullableWorkloadWorkloadDeployment) IsSet() bool {
	return v.isSet
}

func (v *NullableWorkloadWorkloadDeployment) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWorkloadWorkloadDeployment(val *WorkloadWorkloadDeployment) *NullableWorkloadWorkloadDeployment {
	return &NullableWorkloadWorkloadDeployment{value: val, isSet: true}
}

func (v NullableWorkloadWorkloadDeployment) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWorkloadWorkloadDeployment) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
