/*
Cisco Intersight

Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations. The Intersight OpenAPI document defines the complete set of properties that are returned in the HTTP response. From that perspective, a client can expect that no additional properties are returned, unless these properties are explicitly defined in the OpenAPI document. However, when a client uses an older version of the Intersight OpenAPI document, the server may send additional properties because the software is more recent than the client. In that case, the client may receive properties that it does not know about. Some generated SDKs perform a strict validation of the HTTP response body against the OpenAPI document.

API version: 1.0.11-2024120409
Contact: intersight@cisco.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package intersight

import (
	"encoding/json"
	"fmt"
	"reflect"
	"strings"
)

// checks if the FunctionsUpload type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FunctionsUpload{}

// FunctionsUpload The managed object which has info about uploaded file.
type FunctionsUpload struct {
	MoBaseMo
	// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.
	ClassId string `json:"ClassId"`
	// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
	ObjectType string `json:"ObjectType"`
	// Action against the Upload. * `None` - No action is set, this is the default value for action field. * `CompleteUploading` - Mark the instance of a Upload as uploaded.
	Action *string `json:"Action,omitempty"`
	// The user identifier who created the Upload.
	CreateUser *string `json:"CreateUser,omitempty"`
	// Description of the Upload.
	Description *string `json:"Description,omitempty"`
	// The file name of the Upload. File name can only contain letters (a-z, A-Z), numbers (0-9), hyphen (-), period (.) or an underscore (_).
	FileName *string `json:"FileName,omitempty" validate:"regexp=^[a-zA-Z0-9]{1}[a-zA-Z0-9_.-]{0,91}$"`
	// The size (in bytes) of the file.
	FileSize *int64 `json:"FileSize,omitempty"`
	// The user identifier who last updated the Upload.
	ModUser *string `json:"ModUser,omitempty"`
	// The name of the Upload. Name can only contain letters (a-z, A-Z), numbers (0-9), hyphen (-), period (.) or an underscore (_).
	Name *string `json:"Name,omitempty" validate:"regexp=^[a-zA-Z0-9]{1}[a-zA-Z0-9_.-]{0,63}$"`
	// The chunk size (in bytes) for each part of the file to be uploaded.
	PartSize *int64 `json:"PartSize,omitempty"`
	// Current representation of the state of Upload. * `Uploading` - File uploading is in progress. * `Uploaded` - File uploading is completed. * `Failed` - File uploading is failed.
	State                *string                                      `json:"State,omitempty"`
	UploadUrls           []string                                     `json:"UploadUrls,omitempty"`
	Organization         NullableOrganizationOrganizationRelationship `json:"Organization,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _FunctionsUpload FunctionsUpload

// NewFunctionsUpload instantiates a new FunctionsUpload object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFunctionsUpload(classId string, objectType string) *FunctionsUpload {
	this := FunctionsUpload{}
	this.ClassId = classId
	this.ObjectType = objectType
	var action string = "None"
	this.Action = &action
	var partSize int64 = 8388608
	this.PartSize = &partSize
	return &this
}

// NewFunctionsUploadWithDefaults instantiates a new FunctionsUpload object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFunctionsUploadWithDefaults() *FunctionsUpload {
	this := FunctionsUpload{}
	var classId string = "functions.Upload"
	this.ClassId = classId
	var objectType string = "functions.Upload"
	this.ObjectType = objectType
	var action string = "None"
	this.Action = &action
	var partSize int64 = 8388608
	this.PartSize = &partSize
	return &this
}

// GetClassId returns the ClassId field value
func (o *FunctionsUpload) GetClassId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ClassId
}

// GetClassIdOk returns a tuple with the ClassId field value
// and a boolean to check if the value has been set.
func (o *FunctionsUpload) GetClassIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ClassId, true
}

// SetClassId sets field value
func (o *FunctionsUpload) SetClassId(v string) {
	o.ClassId = v
}

// GetDefaultClassId returns the default value "functions.Upload" of the ClassId field.
func (o *FunctionsUpload) GetDefaultClassId() interface{} {
	return "functions.Upload"
}

// GetObjectType returns the ObjectType field value
func (o *FunctionsUpload) GetObjectType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ObjectType
}

// GetObjectTypeOk returns a tuple with the ObjectType field value
// and a boolean to check if the value has been set.
func (o *FunctionsUpload) GetObjectTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ObjectType, true
}

// SetObjectType sets field value
func (o *FunctionsUpload) SetObjectType(v string) {
	o.ObjectType = v
}

// GetDefaultObjectType returns the default value "functions.Upload" of the ObjectType field.
func (o *FunctionsUpload) GetDefaultObjectType() interface{} {
	return "functions.Upload"
}

// GetAction returns the Action field value if set, zero value otherwise.
func (o *FunctionsUpload) GetAction() string {
	if o == nil || IsNil(o.Action) {
		var ret string
		return ret
	}
	return *o.Action
}

// GetActionOk returns a tuple with the Action field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FunctionsUpload) GetActionOk() (*string, bool) {
	if o == nil || IsNil(o.Action) {
		return nil, false
	}
	return o.Action, true
}

// HasAction returns a boolean if a field has been set.
func (o *FunctionsUpload) HasAction() bool {
	if o != nil && !IsNil(o.Action) {
		return true
	}

	return false
}

// SetAction gets a reference to the given string and assigns it to the Action field.
func (o *FunctionsUpload) SetAction(v string) {
	o.Action = &v
}

// GetCreateUser returns the CreateUser field value if set, zero value otherwise.
func (o *FunctionsUpload) GetCreateUser() string {
	if o == nil || IsNil(o.CreateUser) {
		var ret string
		return ret
	}
	return *o.CreateUser
}

// GetCreateUserOk returns a tuple with the CreateUser field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FunctionsUpload) GetCreateUserOk() (*string, bool) {
	if o == nil || IsNil(o.CreateUser) {
		return nil, false
	}
	return o.CreateUser, true
}

// HasCreateUser returns a boolean if a field has been set.
func (o *FunctionsUpload) HasCreateUser() bool {
	if o != nil && !IsNil(o.CreateUser) {
		return true
	}

	return false
}

// SetCreateUser gets a reference to the given string and assigns it to the CreateUser field.
func (o *FunctionsUpload) SetCreateUser(v string) {
	o.CreateUser = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *FunctionsUpload) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FunctionsUpload) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *FunctionsUpload) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *FunctionsUpload) SetDescription(v string) {
	o.Description = &v
}

// GetFileName returns the FileName field value if set, zero value otherwise.
func (o *FunctionsUpload) GetFileName() string {
	if o == nil || IsNil(o.FileName) {
		var ret string
		return ret
	}
	return *o.FileName
}

// GetFileNameOk returns a tuple with the FileName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FunctionsUpload) GetFileNameOk() (*string, bool) {
	if o == nil || IsNil(o.FileName) {
		return nil, false
	}
	return o.FileName, true
}

// HasFileName returns a boolean if a field has been set.
func (o *FunctionsUpload) HasFileName() bool {
	if o != nil && !IsNil(o.FileName) {
		return true
	}

	return false
}

// SetFileName gets a reference to the given string and assigns it to the FileName field.
func (o *FunctionsUpload) SetFileName(v string) {
	o.FileName = &v
}

// GetFileSize returns the FileSize field value if set, zero value otherwise.
func (o *FunctionsUpload) GetFileSize() int64 {
	if o == nil || IsNil(o.FileSize) {
		var ret int64
		return ret
	}
	return *o.FileSize
}

// GetFileSizeOk returns a tuple with the FileSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FunctionsUpload) GetFileSizeOk() (*int64, bool) {
	if o == nil || IsNil(o.FileSize) {
		return nil, false
	}
	return o.FileSize, true
}

// HasFileSize returns a boolean if a field has been set.
func (o *FunctionsUpload) HasFileSize() bool {
	if o != nil && !IsNil(o.FileSize) {
		return true
	}

	return false
}

// SetFileSize gets a reference to the given int64 and assigns it to the FileSize field.
func (o *FunctionsUpload) SetFileSize(v int64) {
	o.FileSize = &v
}

// GetModUser returns the ModUser field value if set, zero value otherwise.
func (o *FunctionsUpload) GetModUser() string {
	if o == nil || IsNil(o.ModUser) {
		var ret string
		return ret
	}
	return *o.ModUser
}

// GetModUserOk returns a tuple with the ModUser field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FunctionsUpload) GetModUserOk() (*string, bool) {
	if o == nil || IsNil(o.ModUser) {
		return nil, false
	}
	return o.ModUser, true
}

// HasModUser returns a boolean if a field has been set.
func (o *FunctionsUpload) HasModUser() bool {
	if o != nil && !IsNil(o.ModUser) {
		return true
	}

	return false
}

// SetModUser gets a reference to the given string and assigns it to the ModUser field.
func (o *FunctionsUpload) SetModUser(v string) {
	o.ModUser = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *FunctionsUpload) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FunctionsUpload) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *FunctionsUpload) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *FunctionsUpload) SetName(v string) {
	o.Name = &v
}

// GetPartSize returns the PartSize field value if set, zero value otherwise.
func (o *FunctionsUpload) GetPartSize() int64 {
	if o == nil || IsNil(o.PartSize) {
		var ret int64
		return ret
	}
	return *o.PartSize
}

// GetPartSizeOk returns a tuple with the PartSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FunctionsUpload) GetPartSizeOk() (*int64, bool) {
	if o == nil || IsNil(o.PartSize) {
		return nil, false
	}
	return o.PartSize, true
}

// HasPartSize returns a boolean if a field has been set.
func (o *FunctionsUpload) HasPartSize() bool {
	if o != nil && !IsNil(o.PartSize) {
		return true
	}

	return false
}

// SetPartSize gets a reference to the given int64 and assigns it to the PartSize field.
func (o *FunctionsUpload) SetPartSize(v int64) {
	o.PartSize = &v
}

// GetState returns the State field value if set, zero value otherwise.
func (o *FunctionsUpload) GetState() string {
	if o == nil || IsNil(o.State) {
		var ret string
		return ret
	}
	return *o.State
}

// GetStateOk returns a tuple with the State field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FunctionsUpload) GetStateOk() (*string, bool) {
	if o == nil || IsNil(o.State) {
		return nil, false
	}
	return o.State, true
}

// HasState returns a boolean if a field has been set.
func (o *FunctionsUpload) HasState() bool {
	if o != nil && !IsNil(o.State) {
		return true
	}

	return false
}

// SetState gets a reference to the given string and assigns it to the State field.
func (o *FunctionsUpload) SetState(v string) {
	o.State = &v
}

// GetUploadUrls returns the UploadUrls field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FunctionsUpload) GetUploadUrls() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.UploadUrls
}

// GetUploadUrlsOk returns a tuple with the UploadUrls field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FunctionsUpload) GetUploadUrlsOk() ([]string, bool) {
	if o == nil || IsNil(o.UploadUrls) {
		return nil, false
	}
	return o.UploadUrls, true
}

// HasUploadUrls returns a boolean if a field has been set.
func (o *FunctionsUpload) HasUploadUrls() bool {
	if o != nil && !IsNil(o.UploadUrls) {
		return true
	}

	return false
}

// SetUploadUrls gets a reference to the given []string and assigns it to the UploadUrls field.
func (o *FunctionsUpload) SetUploadUrls(v []string) {
	o.UploadUrls = v
}

// GetOrganization returns the Organization field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FunctionsUpload) GetOrganization() OrganizationOrganizationRelationship {
	if o == nil || IsNil(o.Organization.Get()) {
		var ret OrganizationOrganizationRelationship
		return ret
	}
	return *o.Organization.Get()
}

// GetOrganizationOk returns a tuple with the Organization field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FunctionsUpload) GetOrganizationOk() (*OrganizationOrganizationRelationship, bool) {
	if o == nil {
		return nil, false
	}
	return o.Organization.Get(), o.Organization.IsSet()
}

// HasOrganization returns a boolean if a field has been set.
func (o *FunctionsUpload) HasOrganization() bool {
	if o != nil && o.Organization.IsSet() {
		return true
	}

	return false
}

// SetOrganization gets a reference to the given NullableOrganizationOrganizationRelationship and assigns it to the Organization field.
func (o *FunctionsUpload) SetOrganization(v OrganizationOrganizationRelationship) {
	o.Organization.Set(&v)
}

// SetOrganizationNil sets the value for Organization to be an explicit nil
func (o *FunctionsUpload) SetOrganizationNil() {
	o.Organization.Set(nil)
}

// UnsetOrganization ensures that no value is present for Organization, not even an explicit nil
func (o *FunctionsUpload) UnsetOrganization() {
	o.Organization.Unset()
}

func (o FunctionsUpload) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FunctionsUpload) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	serializedMoBaseMo, errMoBaseMo := json.Marshal(o.MoBaseMo)
	if errMoBaseMo != nil {
		return map[string]interface{}{}, errMoBaseMo
	}
	errMoBaseMo = json.Unmarshal([]byte(serializedMoBaseMo), &toSerialize)
	if errMoBaseMo != nil {
		return map[string]interface{}{}, errMoBaseMo
	}
	if _, exists := toSerialize["ClassId"]; !exists {
		toSerialize["ClassId"] = o.GetDefaultClassId()
	}
	toSerialize["ClassId"] = o.ClassId
	if _, exists := toSerialize["ObjectType"]; !exists {
		toSerialize["ObjectType"] = o.GetDefaultObjectType()
	}
	toSerialize["ObjectType"] = o.ObjectType
	if !IsNil(o.Action) {
		toSerialize["Action"] = o.Action
	}
	if !IsNil(o.CreateUser) {
		toSerialize["CreateUser"] = o.CreateUser
	}
	if !IsNil(o.Description) {
		toSerialize["Description"] = o.Description
	}
	if !IsNil(o.FileName) {
		toSerialize["FileName"] = o.FileName
	}
	if !IsNil(o.FileSize) {
		toSerialize["FileSize"] = o.FileSize
	}
	if !IsNil(o.ModUser) {
		toSerialize["ModUser"] = o.ModUser
	}
	if !IsNil(o.Name) {
		toSerialize["Name"] = o.Name
	}
	if !IsNil(o.PartSize) {
		toSerialize["PartSize"] = o.PartSize
	}
	if !IsNil(o.State) {
		toSerialize["State"] = o.State
	}
	if o.UploadUrls != nil {
		toSerialize["UploadUrls"] = o.UploadUrls
	}
	if o.Organization.IsSet() {
		toSerialize["Organization"] = o.Organization.Get()
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *FunctionsUpload) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"ClassId",
		"ObjectType",
	}

	// defaultValueFuncMap captures the default values for required properties.
	// These values are used when required properties are missing from the payload.
	defaultValueFuncMap := map[string]func() interface{}{
		"ClassId":    o.GetDefaultClassId,
		"ObjectType": o.GetDefaultObjectType,
	}
	var defaultValueApplied bool
	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			if _, ok := defaultValueFuncMap[requiredProperty]; ok {
				allProperties[requiredProperty] = defaultValueFuncMap[requiredProperty]()
				defaultValueApplied = true
			}
		}
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	if defaultValueApplied {
		data, err = json.Marshal(allProperties)
		if err != nil {
			return err
		}
	}
	type FunctionsUploadWithoutEmbeddedStruct struct {
		// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.
		ClassId string `json:"ClassId"`
		// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
		ObjectType string `json:"ObjectType"`
		// Action against the Upload. * `None` - No action is set, this is the default value for action field. * `CompleteUploading` - Mark the instance of a Upload as uploaded.
		Action *string `json:"Action,omitempty"`
		// The user identifier who created the Upload.
		CreateUser *string `json:"CreateUser,omitempty"`
		// Description of the Upload.
		Description *string `json:"Description,omitempty"`
		// The file name of the Upload. File name can only contain letters (a-z, A-Z), numbers (0-9), hyphen (-), period (.) or an underscore (_).
		FileName *string `json:"FileName,omitempty" validate:"regexp=^[a-zA-Z0-9]{1}[a-zA-Z0-9_.-]{0,91}$"`
		// The size (in bytes) of the file.
		FileSize *int64 `json:"FileSize,omitempty"`
		// The user identifier who last updated the Upload.
		ModUser *string `json:"ModUser,omitempty"`
		// The name of the Upload. Name can only contain letters (a-z, A-Z), numbers (0-9), hyphen (-), period (.) or an underscore (_).
		Name *string `json:"Name,omitempty" validate:"regexp=^[a-zA-Z0-9]{1}[a-zA-Z0-9_.-]{0,63}$"`
		// The chunk size (in bytes) for each part of the file to be uploaded.
		PartSize *int64 `json:"PartSize,omitempty"`
		// Current representation of the state of Upload. * `Uploading` - File uploading is in progress. * `Uploaded` - File uploading is completed. * `Failed` - File uploading is failed.
		State        *string                                      `json:"State,omitempty"`
		UploadUrls   []string                                     `json:"UploadUrls,omitempty"`
		Organization NullableOrganizationOrganizationRelationship `json:"Organization,omitempty"`
	}

	varFunctionsUploadWithoutEmbeddedStruct := FunctionsUploadWithoutEmbeddedStruct{}

	err = json.Unmarshal(data, &varFunctionsUploadWithoutEmbeddedStruct)
	if err == nil {
		varFunctionsUpload := _FunctionsUpload{}
		varFunctionsUpload.ClassId = varFunctionsUploadWithoutEmbeddedStruct.ClassId
		varFunctionsUpload.ObjectType = varFunctionsUploadWithoutEmbeddedStruct.ObjectType
		varFunctionsUpload.Action = varFunctionsUploadWithoutEmbeddedStruct.Action
		varFunctionsUpload.CreateUser = varFunctionsUploadWithoutEmbeddedStruct.CreateUser
		varFunctionsUpload.Description = varFunctionsUploadWithoutEmbeddedStruct.Description
		varFunctionsUpload.FileName = varFunctionsUploadWithoutEmbeddedStruct.FileName
		varFunctionsUpload.FileSize = varFunctionsUploadWithoutEmbeddedStruct.FileSize
		varFunctionsUpload.ModUser = varFunctionsUploadWithoutEmbeddedStruct.ModUser
		varFunctionsUpload.Name = varFunctionsUploadWithoutEmbeddedStruct.Name
		varFunctionsUpload.PartSize = varFunctionsUploadWithoutEmbeddedStruct.PartSize
		varFunctionsUpload.State = varFunctionsUploadWithoutEmbeddedStruct.State
		varFunctionsUpload.UploadUrls = varFunctionsUploadWithoutEmbeddedStruct.UploadUrls
		varFunctionsUpload.Organization = varFunctionsUploadWithoutEmbeddedStruct.Organization
		*o = FunctionsUpload(varFunctionsUpload)
	} else {
		return err
	}

	varFunctionsUpload := _FunctionsUpload{}

	err = json.Unmarshal(data, &varFunctionsUpload)
	if err == nil {
		o.MoBaseMo = varFunctionsUpload.MoBaseMo
	} else {
		return err
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "ClassId")
		delete(additionalProperties, "ObjectType")
		delete(additionalProperties, "Action")
		delete(additionalProperties, "CreateUser")
		delete(additionalProperties, "Description")
		delete(additionalProperties, "FileName")
		delete(additionalProperties, "FileSize")
		delete(additionalProperties, "ModUser")
		delete(additionalProperties, "Name")
		delete(additionalProperties, "PartSize")
		delete(additionalProperties, "State")
		delete(additionalProperties, "UploadUrls")
		delete(additionalProperties, "Organization")

		// remove fields from embedded structs
		reflectMoBaseMo := reflect.ValueOf(o.MoBaseMo)
		for i := 0; i < reflectMoBaseMo.Type().NumField(); i++ {
			t := reflectMoBaseMo.Type().Field(i)

			if jsonTag := t.Tag.Get("json"); jsonTag != "" {
				fieldName := ""
				if commaIdx := strings.Index(jsonTag, ","); commaIdx > 0 {
					fieldName = jsonTag[:commaIdx]
				} else {
					fieldName = jsonTag
				}
				if fieldName != "AdditionalProperties" {
					delete(additionalProperties, fieldName)
				}
			}
		}

		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableFunctionsUpload struct {
	value *FunctionsUpload
	isSet bool
}

func (v NullableFunctionsUpload) Get() *FunctionsUpload {
	return v.value
}

func (v *NullableFunctionsUpload) Set(val *FunctionsUpload) {
	v.value = val
	v.isSet = true
}

func (v NullableFunctionsUpload) IsSet() bool {
	return v.isSet
}

func (v *NullableFunctionsUpload) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFunctionsUpload(val *FunctionsUpload) *NullableFunctionsUpload {
	return &NullableFunctionsUpload{value: val, isSet: true}
}

func (v NullableFunctionsUpload) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFunctionsUpload) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
