/*
 * Cisco Intersight
 *
 * Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations. The Intersight OpenAPI document defines the complete set of properties that are returned in the HTTP response. From that perspective, a client can expect that no additional properties are returned, unless these properties are explicitly defined in the OpenAPI document. However, when a client uses an older version of the Intersight OpenAPI document, the server may send additional properties because the software is more recent than the client. In that case, the client may receive properties that it does not know about. Some generated SDKs perform a strict validation of the HTTP response body against the OpenAPI document. This document was created on 2021-07-21T16:37:30Z.
 *
 * API version: 1.0.9-4403
 * Contact: intersight@cisco.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package intersight

import (
	"encoding/json"
	"reflect"
	"strings"
)

// IamLdapPolicy LDAP Policy configurations.
type IamLdapPolicy struct {
	PolicyAbstractPolicy
	// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.
	ClassId string `json:"ClassId"`
	// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
	ObjectType     string                        `json:"ObjectType"`
	BaseProperties NullableIamLdapBaseProperties `json:"BaseProperties,omitempty"`
	DnsParameters  NullableIamLdapDnsParameters  `json:"DnsParameters,omitempty"`
	// Enables DNS to access LDAP servers.
	EnableDns *bool `json:"EnableDns,omitempty"`
	// LDAP server performs authentication.
	Enabled *bool `json:"Enabled,omitempty"`
	// Search precedence between local user database and LDAP user database. * `LocalUserDb` - Precedence is given to local user database while searching. * `LDAPUserDb` - Precedence is given to LADP user database while searching.
	UserSearchPrecedence *string                 `json:"UserSearchPrecedence,omitempty"`
	ApplianceAccount     *IamAccountRelationship `json:"ApplianceAccount,omitempty"`
	// An array of relationships to iamLdapGroup resources.
	Groups       []IamLdapGroupRelationship            `json:"Groups,omitempty"`
	Organization *OrganizationOrganizationRelationship `json:"Organization,omitempty"`
	// An array of relationships to policyAbstractConfigProfile resources.
	Profiles []PolicyAbstractConfigProfileRelationship `json:"Profiles,omitempty"`
	// An array of relationships to iamLdapProvider resources.
	Providers            []IamLdapProviderRelationship `json:"Providers,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _IamLdapPolicy IamLdapPolicy

// NewIamLdapPolicy instantiates a new IamLdapPolicy object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIamLdapPolicy(classId string, objectType string) *IamLdapPolicy {
	this := IamLdapPolicy{}
	this.ClassId = classId
	this.ObjectType = objectType
	var enabled bool = true
	this.Enabled = &enabled
	var userSearchPrecedence string = "LocalUserDb"
	this.UserSearchPrecedence = &userSearchPrecedence
	return &this
}

// NewIamLdapPolicyWithDefaults instantiates a new IamLdapPolicy object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIamLdapPolicyWithDefaults() *IamLdapPolicy {
	this := IamLdapPolicy{}
	var classId string = "iam.LdapPolicy"
	this.ClassId = classId
	var objectType string = "iam.LdapPolicy"
	this.ObjectType = objectType
	var enabled bool = true
	this.Enabled = &enabled
	var userSearchPrecedence string = "LocalUserDb"
	this.UserSearchPrecedence = &userSearchPrecedence
	return &this
}

// GetClassId returns the ClassId field value
func (o *IamLdapPolicy) GetClassId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ClassId
}

// GetClassIdOk returns a tuple with the ClassId field value
// and a boolean to check if the value has been set.
func (o *IamLdapPolicy) GetClassIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ClassId, true
}

// SetClassId sets field value
func (o *IamLdapPolicy) SetClassId(v string) {
	o.ClassId = v
}

// GetObjectType returns the ObjectType field value
func (o *IamLdapPolicy) GetObjectType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ObjectType
}

// GetObjectTypeOk returns a tuple with the ObjectType field value
// and a boolean to check if the value has been set.
func (o *IamLdapPolicy) GetObjectTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ObjectType, true
}

// SetObjectType sets field value
func (o *IamLdapPolicy) SetObjectType(v string) {
	o.ObjectType = v
}

// GetBaseProperties returns the BaseProperties field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IamLdapPolicy) GetBaseProperties() IamLdapBaseProperties {
	if o == nil || o.BaseProperties.Get() == nil {
		var ret IamLdapBaseProperties
		return ret
	}
	return *o.BaseProperties.Get()
}

// GetBasePropertiesOk returns a tuple with the BaseProperties field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IamLdapPolicy) GetBasePropertiesOk() (*IamLdapBaseProperties, bool) {
	if o == nil {
		return nil, false
	}
	return o.BaseProperties.Get(), o.BaseProperties.IsSet()
}

// HasBaseProperties returns a boolean if a field has been set.
func (o *IamLdapPolicy) HasBaseProperties() bool {
	if o != nil && o.BaseProperties.IsSet() {
		return true
	}

	return false
}

// SetBaseProperties gets a reference to the given NullableIamLdapBaseProperties and assigns it to the BaseProperties field.
func (o *IamLdapPolicy) SetBaseProperties(v IamLdapBaseProperties) {
	o.BaseProperties.Set(&v)
}

// SetBasePropertiesNil sets the value for BaseProperties to be an explicit nil
func (o *IamLdapPolicy) SetBasePropertiesNil() {
	o.BaseProperties.Set(nil)
}

// UnsetBaseProperties ensures that no value is present for BaseProperties, not even an explicit nil
func (o *IamLdapPolicy) UnsetBaseProperties() {
	o.BaseProperties.Unset()
}

// GetDnsParameters returns the DnsParameters field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IamLdapPolicy) GetDnsParameters() IamLdapDnsParameters {
	if o == nil || o.DnsParameters.Get() == nil {
		var ret IamLdapDnsParameters
		return ret
	}
	return *o.DnsParameters.Get()
}

// GetDnsParametersOk returns a tuple with the DnsParameters field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IamLdapPolicy) GetDnsParametersOk() (*IamLdapDnsParameters, bool) {
	if o == nil {
		return nil, false
	}
	return o.DnsParameters.Get(), o.DnsParameters.IsSet()
}

// HasDnsParameters returns a boolean if a field has been set.
func (o *IamLdapPolicy) HasDnsParameters() bool {
	if o != nil && o.DnsParameters.IsSet() {
		return true
	}

	return false
}

// SetDnsParameters gets a reference to the given NullableIamLdapDnsParameters and assigns it to the DnsParameters field.
func (o *IamLdapPolicy) SetDnsParameters(v IamLdapDnsParameters) {
	o.DnsParameters.Set(&v)
}

// SetDnsParametersNil sets the value for DnsParameters to be an explicit nil
func (o *IamLdapPolicy) SetDnsParametersNil() {
	o.DnsParameters.Set(nil)
}

// UnsetDnsParameters ensures that no value is present for DnsParameters, not even an explicit nil
func (o *IamLdapPolicy) UnsetDnsParameters() {
	o.DnsParameters.Unset()
}

// GetEnableDns returns the EnableDns field value if set, zero value otherwise.
func (o *IamLdapPolicy) GetEnableDns() bool {
	if o == nil || o.EnableDns == nil {
		var ret bool
		return ret
	}
	return *o.EnableDns
}

// GetEnableDnsOk returns a tuple with the EnableDns field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IamLdapPolicy) GetEnableDnsOk() (*bool, bool) {
	if o == nil || o.EnableDns == nil {
		return nil, false
	}
	return o.EnableDns, true
}

// HasEnableDns returns a boolean if a field has been set.
func (o *IamLdapPolicy) HasEnableDns() bool {
	if o != nil && o.EnableDns != nil {
		return true
	}

	return false
}

// SetEnableDns gets a reference to the given bool and assigns it to the EnableDns field.
func (o *IamLdapPolicy) SetEnableDns(v bool) {
	o.EnableDns = &v
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *IamLdapPolicy) GetEnabled() bool {
	if o == nil || o.Enabled == nil {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IamLdapPolicy) GetEnabledOk() (*bool, bool) {
	if o == nil || o.Enabled == nil {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *IamLdapPolicy) HasEnabled() bool {
	if o != nil && o.Enabled != nil {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *IamLdapPolicy) SetEnabled(v bool) {
	o.Enabled = &v
}

// GetUserSearchPrecedence returns the UserSearchPrecedence field value if set, zero value otherwise.
func (o *IamLdapPolicy) GetUserSearchPrecedence() string {
	if o == nil || o.UserSearchPrecedence == nil {
		var ret string
		return ret
	}
	return *o.UserSearchPrecedence
}

// GetUserSearchPrecedenceOk returns a tuple with the UserSearchPrecedence field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IamLdapPolicy) GetUserSearchPrecedenceOk() (*string, bool) {
	if o == nil || o.UserSearchPrecedence == nil {
		return nil, false
	}
	return o.UserSearchPrecedence, true
}

// HasUserSearchPrecedence returns a boolean if a field has been set.
func (o *IamLdapPolicy) HasUserSearchPrecedence() bool {
	if o != nil && o.UserSearchPrecedence != nil {
		return true
	}

	return false
}

// SetUserSearchPrecedence gets a reference to the given string and assigns it to the UserSearchPrecedence field.
func (o *IamLdapPolicy) SetUserSearchPrecedence(v string) {
	o.UserSearchPrecedence = &v
}

// GetApplianceAccount returns the ApplianceAccount field value if set, zero value otherwise.
func (o *IamLdapPolicy) GetApplianceAccount() IamAccountRelationship {
	if o == nil || o.ApplianceAccount == nil {
		var ret IamAccountRelationship
		return ret
	}
	return *o.ApplianceAccount
}

// GetApplianceAccountOk returns a tuple with the ApplianceAccount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IamLdapPolicy) GetApplianceAccountOk() (*IamAccountRelationship, bool) {
	if o == nil || o.ApplianceAccount == nil {
		return nil, false
	}
	return o.ApplianceAccount, true
}

// HasApplianceAccount returns a boolean if a field has been set.
func (o *IamLdapPolicy) HasApplianceAccount() bool {
	if o != nil && o.ApplianceAccount != nil {
		return true
	}

	return false
}

// SetApplianceAccount gets a reference to the given IamAccountRelationship and assigns it to the ApplianceAccount field.
func (o *IamLdapPolicy) SetApplianceAccount(v IamAccountRelationship) {
	o.ApplianceAccount = &v
}

// GetGroups returns the Groups field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IamLdapPolicy) GetGroups() []IamLdapGroupRelationship {
	if o == nil {
		var ret []IamLdapGroupRelationship
		return ret
	}
	return o.Groups
}

// GetGroupsOk returns a tuple with the Groups field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IamLdapPolicy) GetGroupsOk() (*[]IamLdapGroupRelationship, bool) {
	if o == nil || o.Groups == nil {
		return nil, false
	}
	return &o.Groups, true
}

// HasGroups returns a boolean if a field has been set.
func (o *IamLdapPolicy) HasGroups() bool {
	if o != nil && o.Groups != nil {
		return true
	}

	return false
}

// SetGroups gets a reference to the given []IamLdapGroupRelationship and assigns it to the Groups field.
func (o *IamLdapPolicy) SetGroups(v []IamLdapGroupRelationship) {
	o.Groups = v
}

// GetOrganization returns the Organization field value if set, zero value otherwise.
func (o *IamLdapPolicy) GetOrganization() OrganizationOrganizationRelationship {
	if o == nil || o.Organization == nil {
		var ret OrganizationOrganizationRelationship
		return ret
	}
	return *o.Organization
}

// GetOrganizationOk returns a tuple with the Organization field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IamLdapPolicy) GetOrganizationOk() (*OrganizationOrganizationRelationship, bool) {
	if o == nil || o.Organization == nil {
		return nil, false
	}
	return o.Organization, true
}

// HasOrganization returns a boolean if a field has been set.
func (o *IamLdapPolicy) HasOrganization() bool {
	if o != nil && o.Organization != nil {
		return true
	}

	return false
}

// SetOrganization gets a reference to the given OrganizationOrganizationRelationship and assigns it to the Organization field.
func (o *IamLdapPolicy) SetOrganization(v OrganizationOrganizationRelationship) {
	o.Organization = &v
}

// GetProfiles returns the Profiles field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IamLdapPolicy) GetProfiles() []PolicyAbstractConfigProfileRelationship {
	if o == nil {
		var ret []PolicyAbstractConfigProfileRelationship
		return ret
	}
	return o.Profiles
}

// GetProfilesOk returns a tuple with the Profiles field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IamLdapPolicy) GetProfilesOk() (*[]PolicyAbstractConfigProfileRelationship, bool) {
	if o == nil || o.Profiles == nil {
		return nil, false
	}
	return &o.Profiles, true
}

// HasProfiles returns a boolean if a field has been set.
func (o *IamLdapPolicy) HasProfiles() bool {
	if o != nil && o.Profiles != nil {
		return true
	}

	return false
}

// SetProfiles gets a reference to the given []PolicyAbstractConfigProfileRelationship and assigns it to the Profiles field.
func (o *IamLdapPolicy) SetProfiles(v []PolicyAbstractConfigProfileRelationship) {
	o.Profiles = v
}

// GetProviders returns the Providers field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IamLdapPolicy) GetProviders() []IamLdapProviderRelationship {
	if o == nil {
		var ret []IamLdapProviderRelationship
		return ret
	}
	return o.Providers
}

// GetProvidersOk returns a tuple with the Providers field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IamLdapPolicy) GetProvidersOk() (*[]IamLdapProviderRelationship, bool) {
	if o == nil || o.Providers == nil {
		return nil, false
	}
	return &o.Providers, true
}

// HasProviders returns a boolean if a field has been set.
func (o *IamLdapPolicy) HasProviders() bool {
	if o != nil && o.Providers != nil {
		return true
	}

	return false
}

// SetProviders gets a reference to the given []IamLdapProviderRelationship and assigns it to the Providers field.
func (o *IamLdapPolicy) SetProviders(v []IamLdapProviderRelationship) {
	o.Providers = v
}

func (o IamLdapPolicy) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	serializedPolicyAbstractPolicy, errPolicyAbstractPolicy := json.Marshal(o.PolicyAbstractPolicy)
	if errPolicyAbstractPolicy != nil {
		return []byte{}, errPolicyAbstractPolicy
	}
	errPolicyAbstractPolicy = json.Unmarshal([]byte(serializedPolicyAbstractPolicy), &toSerialize)
	if errPolicyAbstractPolicy != nil {
		return []byte{}, errPolicyAbstractPolicy
	}
	if true {
		toSerialize["ClassId"] = o.ClassId
	}
	if true {
		toSerialize["ObjectType"] = o.ObjectType
	}
	if o.BaseProperties.IsSet() {
		toSerialize["BaseProperties"] = o.BaseProperties.Get()
	}
	if o.DnsParameters.IsSet() {
		toSerialize["DnsParameters"] = o.DnsParameters.Get()
	}
	if o.EnableDns != nil {
		toSerialize["EnableDns"] = o.EnableDns
	}
	if o.Enabled != nil {
		toSerialize["Enabled"] = o.Enabled
	}
	if o.UserSearchPrecedence != nil {
		toSerialize["UserSearchPrecedence"] = o.UserSearchPrecedence
	}
	if o.ApplianceAccount != nil {
		toSerialize["ApplianceAccount"] = o.ApplianceAccount
	}
	if o.Groups != nil {
		toSerialize["Groups"] = o.Groups
	}
	if o.Organization != nil {
		toSerialize["Organization"] = o.Organization
	}
	if o.Profiles != nil {
		toSerialize["Profiles"] = o.Profiles
	}
	if o.Providers != nil {
		toSerialize["Providers"] = o.Providers
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *IamLdapPolicy) UnmarshalJSON(bytes []byte) (err error) {
	type IamLdapPolicyWithoutEmbeddedStruct struct {
		// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.
		ClassId string `json:"ClassId"`
		// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
		ObjectType     string                        `json:"ObjectType"`
		BaseProperties NullableIamLdapBaseProperties `json:"BaseProperties,omitempty"`
		DnsParameters  NullableIamLdapDnsParameters  `json:"DnsParameters,omitempty"`
		// Enables DNS to access LDAP servers.
		EnableDns *bool `json:"EnableDns,omitempty"`
		// LDAP server performs authentication.
		Enabled *bool `json:"Enabled,omitempty"`
		// Search precedence between local user database and LDAP user database. * `LocalUserDb` - Precedence is given to local user database while searching. * `LDAPUserDb` - Precedence is given to LADP user database while searching.
		UserSearchPrecedence *string                 `json:"UserSearchPrecedence,omitempty"`
		ApplianceAccount     *IamAccountRelationship `json:"ApplianceAccount,omitempty"`
		// An array of relationships to iamLdapGroup resources.
		Groups       []IamLdapGroupRelationship            `json:"Groups,omitempty"`
		Organization *OrganizationOrganizationRelationship `json:"Organization,omitempty"`
		// An array of relationships to policyAbstractConfigProfile resources.
		Profiles []PolicyAbstractConfigProfileRelationship `json:"Profiles,omitempty"`
		// An array of relationships to iamLdapProvider resources.
		Providers []IamLdapProviderRelationship `json:"Providers,omitempty"`
	}

	varIamLdapPolicyWithoutEmbeddedStruct := IamLdapPolicyWithoutEmbeddedStruct{}

	err = json.Unmarshal(bytes, &varIamLdapPolicyWithoutEmbeddedStruct)
	if err == nil {
		varIamLdapPolicy := _IamLdapPolicy{}
		varIamLdapPolicy.ClassId = varIamLdapPolicyWithoutEmbeddedStruct.ClassId
		varIamLdapPolicy.ObjectType = varIamLdapPolicyWithoutEmbeddedStruct.ObjectType
		varIamLdapPolicy.BaseProperties = varIamLdapPolicyWithoutEmbeddedStruct.BaseProperties
		varIamLdapPolicy.DnsParameters = varIamLdapPolicyWithoutEmbeddedStruct.DnsParameters
		varIamLdapPolicy.EnableDns = varIamLdapPolicyWithoutEmbeddedStruct.EnableDns
		varIamLdapPolicy.Enabled = varIamLdapPolicyWithoutEmbeddedStruct.Enabled
		varIamLdapPolicy.UserSearchPrecedence = varIamLdapPolicyWithoutEmbeddedStruct.UserSearchPrecedence
		varIamLdapPolicy.ApplianceAccount = varIamLdapPolicyWithoutEmbeddedStruct.ApplianceAccount
		varIamLdapPolicy.Groups = varIamLdapPolicyWithoutEmbeddedStruct.Groups
		varIamLdapPolicy.Organization = varIamLdapPolicyWithoutEmbeddedStruct.Organization
		varIamLdapPolicy.Profiles = varIamLdapPolicyWithoutEmbeddedStruct.Profiles
		varIamLdapPolicy.Providers = varIamLdapPolicyWithoutEmbeddedStruct.Providers
		*o = IamLdapPolicy(varIamLdapPolicy)
	} else {
		return err
	}

	varIamLdapPolicy := _IamLdapPolicy{}

	err = json.Unmarshal(bytes, &varIamLdapPolicy)
	if err == nil {
		o.PolicyAbstractPolicy = varIamLdapPolicy.PolicyAbstractPolicy
	} else {
		return err
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "ClassId")
		delete(additionalProperties, "ObjectType")
		delete(additionalProperties, "BaseProperties")
		delete(additionalProperties, "DnsParameters")
		delete(additionalProperties, "EnableDns")
		delete(additionalProperties, "Enabled")
		delete(additionalProperties, "UserSearchPrecedence")
		delete(additionalProperties, "ApplianceAccount")
		delete(additionalProperties, "Groups")
		delete(additionalProperties, "Organization")
		delete(additionalProperties, "Profiles")
		delete(additionalProperties, "Providers")

		// remove fields from embedded structs
		reflectPolicyAbstractPolicy := reflect.ValueOf(o.PolicyAbstractPolicy)
		for i := 0; i < reflectPolicyAbstractPolicy.Type().NumField(); i++ {
			t := reflectPolicyAbstractPolicy.Type().Field(i)

			if jsonTag := t.Tag.Get("json"); jsonTag != "" {
				fieldName := ""
				if commaIdx := strings.Index(jsonTag, ","); commaIdx > 0 {
					fieldName = jsonTag[:commaIdx]
				} else {
					fieldName = jsonTag
				}
				if fieldName != "AdditionalProperties" {
					delete(additionalProperties, fieldName)
				}
			}
		}

		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableIamLdapPolicy struct {
	value *IamLdapPolicy
	isSet bool
}

func (v NullableIamLdapPolicy) Get() *IamLdapPolicy {
	return v.value
}

func (v *NullableIamLdapPolicy) Set(val *IamLdapPolicy) {
	v.value = val
	v.isSet = true
}

func (v NullableIamLdapPolicy) IsSet() bool {
	return v.isSet
}

func (v *NullableIamLdapPolicy) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIamLdapPolicy(val *IamLdapPolicy) *NullableIamLdapPolicy {
	return &NullableIamLdapPolicy{value: val, isSet: true}
}

func (v NullableIamLdapPolicy) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIamLdapPolicy) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
