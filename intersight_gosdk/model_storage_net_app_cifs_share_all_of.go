/*
Cisco Intersight

Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations. The Intersight OpenAPI document defines the complete set of properties that are returned in the HTTP response. From that perspective, a client can expect that no additional properties are returned, unless these properties are explicitly defined in the OpenAPI document. However, when a client uses an older version of the Intersight OpenAPI document, the server may send additional properties because the software is more recent than the client. In that case, the client may receive properties that it does not know about. Some generated SDKs perform a strict validation of the HTTP response body against the OpenAPI document.

API version: 1.0.11-13892
Contact: intersight@cisco.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package intersight

import (
	"encoding/json"
)

// StorageNetAppCifsShareAllOf Definition of the list of properties defined in 'storage.NetAppCifsShare', excluding properties defined in parent classes.
type StorageNetAppCifsShareAllOf struct {
	// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.
	ClassId string `json:"ClassId"`
	// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
	ObjectType string `json:"ObjectType"`
	// Description of the CIFS share.
	Comment *string `json:"Comment,omitempty"`
	// Indicates that SMB encryption must be used when accessing the share.
	Encryption *string `json:"Encryption,omitempty"`
	// Indicates that the share is a home directory share, where the share and path names are dynamic.
	HomeDirectory *string `json:"HomeDirectory,omitempty"`
	// Name of the NetApp CIFS share.
	Name          *string                `json:"Name,omitempty"`
	NetAppCifsAcl []StorageNetAppCifsAcl `json:"NetAppCifsAcl,omitempty"`
	// The fully-qualified pathname in the owning SVM namespace that is shared through the share.
	Path *string `json:"Path,omitempty"`
	// The storage virtual machine name for the CIFS share.
	SvmName *string `json:"SvmName,omitempty"`
	// Unique identifier for the NetApp Storage Virtual Machine.
	SvmUuid              *string                             `json:"SvmUuid,omitempty"`
	StorageContainer     *StorageNetAppVolumeRelationship    `json:"StorageContainer,omitempty"`
	Tenant               *StorageNetAppStorageVmRelationship `json:"Tenant,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _StorageNetAppCifsShareAllOf StorageNetAppCifsShareAllOf

// NewStorageNetAppCifsShareAllOf instantiates a new StorageNetAppCifsShareAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStorageNetAppCifsShareAllOf(classId string, objectType string) *StorageNetAppCifsShareAllOf {
	this := StorageNetAppCifsShareAllOf{}
	this.ClassId = classId
	this.ObjectType = objectType
	return &this
}

// NewStorageNetAppCifsShareAllOfWithDefaults instantiates a new StorageNetAppCifsShareAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStorageNetAppCifsShareAllOfWithDefaults() *StorageNetAppCifsShareAllOf {
	this := StorageNetAppCifsShareAllOf{}
	var classId string = "storage.NetAppCifsShare"
	this.ClassId = classId
	var objectType string = "storage.NetAppCifsShare"
	this.ObjectType = objectType
	return &this
}

// GetClassId returns the ClassId field value
func (o *StorageNetAppCifsShareAllOf) GetClassId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ClassId
}

// GetClassIdOk returns a tuple with the ClassId field value
// and a boolean to check if the value has been set.
func (o *StorageNetAppCifsShareAllOf) GetClassIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ClassId, true
}

// SetClassId sets field value
func (o *StorageNetAppCifsShareAllOf) SetClassId(v string) {
	o.ClassId = v
}

// GetObjectType returns the ObjectType field value
func (o *StorageNetAppCifsShareAllOf) GetObjectType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ObjectType
}

// GetObjectTypeOk returns a tuple with the ObjectType field value
// and a boolean to check if the value has been set.
func (o *StorageNetAppCifsShareAllOf) GetObjectTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ObjectType, true
}

// SetObjectType sets field value
func (o *StorageNetAppCifsShareAllOf) SetObjectType(v string) {
	o.ObjectType = v
}

// GetComment returns the Comment field value if set, zero value otherwise.
func (o *StorageNetAppCifsShareAllOf) GetComment() string {
	if o == nil || o.Comment == nil {
		var ret string
		return ret
	}
	return *o.Comment
}

// GetCommentOk returns a tuple with the Comment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageNetAppCifsShareAllOf) GetCommentOk() (*string, bool) {
	if o == nil || o.Comment == nil {
		return nil, false
	}
	return o.Comment, true
}

// HasComment returns a boolean if a field has been set.
func (o *StorageNetAppCifsShareAllOf) HasComment() bool {
	if o != nil && o.Comment != nil {
		return true
	}

	return false
}

// SetComment gets a reference to the given string and assigns it to the Comment field.
func (o *StorageNetAppCifsShareAllOf) SetComment(v string) {
	o.Comment = &v
}

// GetEncryption returns the Encryption field value if set, zero value otherwise.
func (o *StorageNetAppCifsShareAllOf) GetEncryption() string {
	if o == nil || o.Encryption == nil {
		var ret string
		return ret
	}
	return *o.Encryption
}

// GetEncryptionOk returns a tuple with the Encryption field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageNetAppCifsShareAllOf) GetEncryptionOk() (*string, bool) {
	if o == nil || o.Encryption == nil {
		return nil, false
	}
	return o.Encryption, true
}

// HasEncryption returns a boolean if a field has been set.
func (o *StorageNetAppCifsShareAllOf) HasEncryption() bool {
	if o != nil && o.Encryption != nil {
		return true
	}

	return false
}

// SetEncryption gets a reference to the given string and assigns it to the Encryption field.
func (o *StorageNetAppCifsShareAllOf) SetEncryption(v string) {
	o.Encryption = &v
}

// GetHomeDirectory returns the HomeDirectory field value if set, zero value otherwise.
func (o *StorageNetAppCifsShareAllOf) GetHomeDirectory() string {
	if o == nil || o.HomeDirectory == nil {
		var ret string
		return ret
	}
	return *o.HomeDirectory
}

// GetHomeDirectoryOk returns a tuple with the HomeDirectory field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageNetAppCifsShareAllOf) GetHomeDirectoryOk() (*string, bool) {
	if o == nil || o.HomeDirectory == nil {
		return nil, false
	}
	return o.HomeDirectory, true
}

// HasHomeDirectory returns a boolean if a field has been set.
func (o *StorageNetAppCifsShareAllOf) HasHomeDirectory() bool {
	if o != nil && o.HomeDirectory != nil {
		return true
	}

	return false
}

// SetHomeDirectory gets a reference to the given string and assigns it to the HomeDirectory field.
func (o *StorageNetAppCifsShareAllOf) SetHomeDirectory(v string) {
	o.HomeDirectory = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *StorageNetAppCifsShareAllOf) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageNetAppCifsShareAllOf) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *StorageNetAppCifsShareAllOf) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *StorageNetAppCifsShareAllOf) SetName(v string) {
	o.Name = &v
}

// GetNetAppCifsAcl returns the NetAppCifsAcl field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *StorageNetAppCifsShareAllOf) GetNetAppCifsAcl() []StorageNetAppCifsAcl {
	if o == nil {
		var ret []StorageNetAppCifsAcl
		return ret
	}
	return o.NetAppCifsAcl
}

// GetNetAppCifsAclOk returns a tuple with the NetAppCifsAcl field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *StorageNetAppCifsShareAllOf) GetNetAppCifsAclOk() ([]StorageNetAppCifsAcl, bool) {
	if o == nil || o.NetAppCifsAcl == nil {
		return nil, false
	}
	return o.NetAppCifsAcl, true
}

// HasNetAppCifsAcl returns a boolean if a field has been set.
func (o *StorageNetAppCifsShareAllOf) HasNetAppCifsAcl() bool {
	if o != nil && o.NetAppCifsAcl != nil {
		return true
	}

	return false
}

// SetNetAppCifsAcl gets a reference to the given []StorageNetAppCifsAcl and assigns it to the NetAppCifsAcl field.
func (o *StorageNetAppCifsShareAllOf) SetNetAppCifsAcl(v []StorageNetAppCifsAcl) {
	o.NetAppCifsAcl = v
}

// GetPath returns the Path field value if set, zero value otherwise.
func (o *StorageNetAppCifsShareAllOf) GetPath() string {
	if o == nil || o.Path == nil {
		var ret string
		return ret
	}
	return *o.Path
}

// GetPathOk returns a tuple with the Path field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageNetAppCifsShareAllOf) GetPathOk() (*string, bool) {
	if o == nil || o.Path == nil {
		return nil, false
	}
	return o.Path, true
}

// HasPath returns a boolean if a field has been set.
func (o *StorageNetAppCifsShareAllOf) HasPath() bool {
	if o != nil && o.Path != nil {
		return true
	}

	return false
}

// SetPath gets a reference to the given string and assigns it to the Path field.
func (o *StorageNetAppCifsShareAllOf) SetPath(v string) {
	o.Path = &v
}

// GetSvmName returns the SvmName field value if set, zero value otherwise.
func (o *StorageNetAppCifsShareAllOf) GetSvmName() string {
	if o == nil || o.SvmName == nil {
		var ret string
		return ret
	}
	return *o.SvmName
}

// GetSvmNameOk returns a tuple with the SvmName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageNetAppCifsShareAllOf) GetSvmNameOk() (*string, bool) {
	if o == nil || o.SvmName == nil {
		return nil, false
	}
	return o.SvmName, true
}

// HasSvmName returns a boolean if a field has been set.
func (o *StorageNetAppCifsShareAllOf) HasSvmName() bool {
	if o != nil && o.SvmName != nil {
		return true
	}

	return false
}

// SetSvmName gets a reference to the given string and assigns it to the SvmName field.
func (o *StorageNetAppCifsShareAllOf) SetSvmName(v string) {
	o.SvmName = &v
}

// GetSvmUuid returns the SvmUuid field value if set, zero value otherwise.
func (o *StorageNetAppCifsShareAllOf) GetSvmUuid() string {
	if o == nil || o.SvmUuid == nil {
		var ret string
		return ret
	}
	return *o.SvmUuid
}

// GetSvmUuidOk returns a tuple with the SvmUuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageNetAppCifsShareAllOf) GetSvmUuidOk() (*string, bool) {
	if o == nil || o.SvmUuid == nil {
		return nil, false
	}
	return o.SvmUuid, true
}

// HasSvmUuid returns a boolean if a field has been set.
func (o *StorageNetAppCifsShareAllOf) HasSvmUuid() bool {
	if o != nil && o.SvmUuid != nil {
		return true
	}

	return false
}

// SetSvmUuid gets a reference to the given string and assigns it to the SvmUuid field.
func (o *StorageNetAppCifsShareAllOf) SetSvmUuid(v string) {
	o.SvmUuid = &v
}

// GetStorageContainer returns the StorageContainer field value if set, zero value otherwise.
func (o *StorageNetAppCifsShareAllOf) GetStorageContainer() StorageNetAppVolumeRelationship {
	if o == nil || o.StorageContainer == nil {
		var ret StorageNetAppVolumeRelationship
		return ret
	}
	return *o.StorageContainer
}

// GetStorageContainerOk returns a tuple with the StorageContainer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageNetAppCifsShareAllOf) GetStorageContainerOk() (*StorageNetAppVolumeRelationship, bool) {
	if o == nil || o.StorageContainer == nil {
		return nil, false
	}
	return o.StorageContainer, true
}

// HasStorageContainer returns a boolean if a field has been set.
func (o *StorageNetAppCifsShareAllOf) HasStorageContainer() bool {
	if o != nil && o.StorageContainer != nil {
		return true
	}

	return false
}

// SetStorageContainer gets a reference to the given StorageNetAppVolumeRelationship and assigns it to the StorageContainer field.
func (o *StorageNetAppCifsShareAllOf) SetStorageContainer(v StorageNetAppVolumeRelationship) {
	o.StorageContainer = &v
}

// GetTenant returns the Tenant field value if set, zero value otherwise.
func (o *StorageNetAppCifsShareAllOf) GetTenant() StorageNetAppStorageVmRelationship {
	if o == nil || o.Tenant == nil {
		var ret StorageNetAppStorageVmRelationship
		return ret
	}
	return *o.Tenant
}

// GetTenantOk returns a tuple with the Tenant field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageNetAppCifsShareAllOf) GetTenantOk() (*StorageNetAppStorageVmRelationship, bool) {
	if o == nil || o.Tenant == nil {
		return nil, false
	}
	return o.Tenant, true
}

// HasTenant returns a boolean if a field has been set.
func (o *StorageNetAppCifsShareAllOf) HasTenant() bool {
	if o != nil && o.Tenant != nil {
		return true
	}

	return false
}

// SetTenant gets a reference to the given StorageNetAppStorageVmRelationship and assigns it to the Tenant field.
func (o *StorageNetAppCifsShareAllOf) SetTenant(v StorageNetAppStorageVmRelationship) {
	o.Tenant = &v
}

func (o StorageNetAppCifsShareAllOf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["ClassId"] = o.ClassId
	}
	if true {
		toSerialize["ObjectType"] = o.ObjectType
	}
	if o.Comment != nil {
		toSerialize["Comment"] = o.Comment
	}
	if o.Encryption != nil {
		toSerialize["Encryption"] = o.Encryption
	}
	if o.HomeDirectory != nil {
		toSerialize["HomeDirectory"] = o.HomeDirectory
	}
	if o.Name != nil {
		toSerialize["Name"] = o.Name
	}
	if o.NetAppCifsAcl != nil {
		toSerialize["NetAppCifsAcl"] = o.NetAppCifsAcl
	}
	if o.Path != nil {
		toSerialize["Path"] = o.Path
	}
	if o.SvmName != nil {
		toSerialize["SvmName"] = o.SvmName
	}
	if o.SvmUuid != nil {
		toSerialize["SvmUuid"] = o.SvmUuid
	}
	if o.StorageContainer != nil {
		toSerialize["StorageContainer"] = o.StorageContainer
	}
	if o.Tenant != nil {
		toSerialize["Tenant"] = o.Tenant
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *StorageNetAppCifsShareAllOf) UnmarshalJSON(bytes []byte) (err error) {
	varStorageNetAppCifsShareAllOf := _StorageNetAppCifsShareAllOf{}

	if err = json.Unmarshal(bytes, &varStorageNetAppCifsShareAllOf); err == nil {
		*o = StorageNetAppCifsShareAllOf(varStorageNetAppCifsShareAllOf)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "ClassId")
		delete(additionalProperties, "ObjectType")
		delete(additionalProperties, "Comment")
		delete(additionalProperties, "Encryption")
		delete(additionalProperties, "HomeDirectory")
		delete(additionalProperties, "Name")
		delete(additionalProperties, "NetAppCifsAcl")
		delete(additionalProperties, "Path")
		delete(additionalProperties, "SvmName")
		delete(additionalProperties, "SvmUuid")
		delete(additionalProperties, "StorageContainer")
		delete(additionalProperties, "Tenant")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableStorageNetAppCifsShareAllOf struct {
	value *StorageNetAppCifsShareAllOf
	isSet bool
}

func (v NullableStorageNetAppCifsShareAllOf) Get() *StorageNetAppCifsShareAllOf {
	return v.value
}

func (v *NullableStorageNetAppCifsShareAllOf) Set(val *StorageNetAppCifsShareAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableStorageNetAppCifsShareAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableStorageNetAppCifsShareAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStorageNetAppCifsShareAllOf(val *StorageNetAppCifsShareAllOf) *NullableStorageNetAppCifsShareAllOf {
	return &NullableStorageNetAppCifsShareAllOf{value: val, isSet: true}
}

func (v NullableStorageNetAppCifsShareAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStorageNetAppCifsShareAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
