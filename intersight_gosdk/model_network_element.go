/*
Cisco Intersight

Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations. The Intersight OpenAPI document defines the complete set of properties that are returned in the HTTP response. From that perspective, a client can expect that no additional properties are returned, unless these properties are explicitly defined in the OpenAPI document. However, when a client uses an older version of the Intersight OpenAPI document, the server may send additional properties because the software is more recent than the client. In that case, the client may receive properties that it does not know about. Some generated SDKs perform a strict validation of the HTTP response body against the OpenAPI document.

API version: 1.0.11-14628
Contact: intersight@cisco.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package intersight

import (
	"encoding/json"
	"reflect"
	"strings"
)

// NetworkElement A Unified Computing Systems (UCS) Fabric Interconnect.
type NetworkElement struct {
	EquipmentBase
	// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.
	ClassId string `json:"ClassId"`
	// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
	ObjectType string `json:"ObjectType"`
	// Administratively configured state of Fabric Evacuation feature, for this switch.
	AdminEvacState *string `json:"AdminEvacState,omitempty"`
	// The administrative state of the network Element inband management interface.
	AdminInbandInterfaceState *string                     `json:"AdminInbandInterfaceState,omitempty"`
	AlarmSummary              NullableComputeAlarmSummary `json:"AlarmSummary,omitempty"`
	// Available memory (un-used) on this switch platform.
	AvailableMemory *string `json:"AvailableMemory,omitempty"`
	// Chassis IP of the switch.
	Chassis *string `json:"Chassis,omitempty"`
	// Configuration modified timestamp of the switch.
	ConfModTs *string `json:"ConfModTs,omitempty"`
	// Configuration modified backup timestamp of the switch.
	ConfModTsBackup *string `json:"ConfModTsBackup,omitempty"`
	// Connection status of the switch.
	ConnectionStatus *string `json:"ConnectionStatus,omitempty"`
	// The default domain name configured on the switch.
	DefaultDomain *string `json:"DefaultDomain,omitempty"`
	// The user configured Ethernet operational mode for this switch (End-Host or Switching).
	// Deprecated
	EthernetMode *string `json:"EthernetMode,omitempty"`
	// The user configured Ethernet operational mode for this switch (End-Host or Switching). * `end-host` - In end-host mode, the fabric interconnects appear to the upstream devices as end hosts with multiple links.In this mode, the switch does not run Spanning Tree Protocol and avoids loops by following a set of rules for traffic forwarding.In case of ethernet switching mode - Ethernet end-host mode is also known as Ethernet host virtualizer. * `switch` - In switch mode, the switch runs Spanning Tree Protocol to avoid loops, and broadcast and multicast packets are handled in the traditional way.This is the traditional switch mode.
	EthernetSwitchingMode *string `json:"EthernetSwitchingMode,omitempty"`
	// The fault summary of the network Element out-of-band management interface.
	// Deprecated
	FaultSummary *int64 `json:"FaultSummary,omitempty"`
	// The user configured FC operational mode for this switch (End-Host or Switching).
	// Deprecated
	FcMode *string `json:"FcMode,omitempty"`
	// The user configured FC operational mode for this switch (End-Host or Switching). * `end-host` - In end-host mode, the fabric interconnects appear to the upstream devices as end hosts with multiple links.In this mode, the switch does not run Spanning Tree Protocol and avoids loops by following a set of rules for traffic forwarding.In case of ethernet switching mode - Ethernet end-host mode is also known as Ethernet host virtualizer. * `switch` - In switch mode, the switch runs Spanning Tree Protocol to avoid loops, and broadcast and multicast packets are handled in the traditional way.This is the traditional switch mode.
	FcSwitchingMode *string `json:"FcSwitchingMode,omitempty"`
	// The IP address of the network Element inband management interface.
	InbandIpAddress *string `json:"InbandIpAddress,omitempty"`
	// The default gateway of the network Element inband management interface.
	InbandIpGateway *string `json:"InbandIpGateway,omitempty"`
	// The network mask of the network Element inband management interface.
	InbandIpMask *string `json:"InbandIpMask,omitempty"`
	// The VLAN ID of the network Element inband management interface.
	InbandVlan *int64 `json:"InbandVlan,omitempty"`
	// The intercluster link state of the switch. * `Unknown` - The operational state of the link is not known. * `Up` - The operational state of the link is up. * `Down` - The operational state of the link is down. * `Degraded` - The link is operational but degraded. This state is applicable to port channels when any one of the member links is down.
	InterClusterLinkState *string `json:"InterClusterLinkState,omitempty"`
	// The management mode of the fabric interconnect. * `IntersightStandalone` - Intersight Standalone mode of operation. * `UCSM` - Unified Computing System Manager mode of operation. * `Intersight` - Intersight managed mode of operation.
	ManagementMode *string `json:"ManagementMode,omitempty"`
	// Operational state of the Fabric Evacuation feature, for this switch.
	OperEvacState *string `json:"OperEvacState,omitempty"`
	// The switch's current overall operational/health state.
	Operability *string `json:"Operability,omitempty"`
	// The IP address of the network Element out-of-band management interface.
	OutOfBandIpAddress *string `json:"OutOfBandIpAddress,omitempty"`
	// The default gateway of the network Element out-of-band management interface.
	OutOfBandIpGateway *string `json:"OutOfBandIpGateway,omitempty"`
	// The network mask of the network Element out-of-band management interface.
	OutOfBandIpMask *string `json:"OutOfBandIpMask,omitempty"`
	// The IPv4 address of the network Element out-of-band management interface.
	OutOfBandIpv4Address *string `json:"OutOfBandIpv4Address,omitempty"`
	// The default IPv4 gateway of the network Element out-of-band management interface.
	OutOfBandIpv4Gateway *string `json:"OutOfBandIpv4Gateway,omitempty"`
	// The network mask of the network Element out-of-band management interface.
	OutOfBandIpv4Mask *string `json:"OutOfBandIpv4Mask,omitempty"`
	// The IPv6 address of the network Element out-of-band management interface.
	OutOfBandIpv6Address *string `json:"OutOfBandIpv6Address,omitempty"`
	// The default IPv6 gateway of the network Element out-of-band management interface.
	OutOfBandIpv6Gateway *string `json:"OutOfBandIpv6Gateway,omitempty"`
	// The network mask of the network Element out-of-band management interface.
	OutOfBandIpv6Prefix *string `json:"OutOfBandIpv6Prefix,omitempty"`
	// The MAC address of the network Element out-of-band management interface.
	OutOfBandMac *string `json:"OutOfBandMac,omitempty"`
	// Part number of the switch.
	PartNumber *string `json:"PartNumber,omitempty"`
	// The reserved VLAN start ID of the Network Element. A block of 128 VLANs are reserved for internal use and cannot be used for carrying network traffic.
	ReservedVlanStartId *int64 `json:"ReservedVlanStartId,omitempty"`
	// The status of the switch.
	Status *string `json:"Status,omitempty"`
	// The Switch Id of the network Element.
	SwitchId *string `json:"SwitchId,omitempty"`
	// The Switch type that the network element is a part of. * `FabricInterconnect` - The default Switch type of UCSM and IMM mode devices. * `NexusDevice` - Switch type of Nexus devices. * `MDSDevice` - Switch type of Nexus MDS devices.
	SwitchType *string `json:"SwitchType,omitempty"`
	// System up time of the switch.
	SystemUpTime *string `json:"SystemUpTime,omitempty"`
	// The Thermal status of the fabric interconnect. * `unknown` - The default state of the sensor (in case no data is received). * `ok` - State of the sensor indicating the sensor's temperature range is okay. * `upper-non-recoverable` - State of the sensor indicating that the temperature is extremely high above normal range. * `upper-critical` - State of the sensor indicating that the temperature is above normal range. * `upper-non-critical` - State of the sensor indicating that the temperature is a little above the normal range. * `lower-non-critical` - State of the sensor indicating that the temperature is a little below the normal range. * `lower-critical` - State of the sensor indicating that the temperature is below normal range. * `lower-non-recoverable` - State of the sensor indicating that the temperature is extremely below normal range.
	Thermal *string `json:"Thermal,omitempty"`
	// Total available memory on this switch platform.
	TotalMemory *int64 `json:"TotalMemory,omitempty"`
	// Firmware version of the switch.
	Version *string `json:"Version,omitempty"`
	// An array of relationships to equipmentSwitchCard resources.
	Cards []EquipmentSwitchCardRelationship `json:"Cards,omitempty"`
	// An array of relationships to networkDiscoveredNeighbor resources.
	CdpNeighbor []NetworkDiscoveredNeighborRelationship `json:"CdpNeighbor,omitempty"`
	// An array of relationships to consoleConsoleConfig resources.
	Console []ConsoleConsoleConfigRelationship `json:"Console,omitempty"`
	// An array of relationships to networkDns resources.
	Dns []NetworkDnsRelationship `json:"Dns,omitempty"`
	// An array of relationships to etherPortChannel resources.
	EtherPortChannels []EtherPortChannelRelationship `json:"EtherPortChannels,omitempty"`
	// An array of relationships to equipmentFanModule resources.
	Fanmodules []EquipmentFanModuleRelationship `json:"Fanmodules,omitempty"`
	// An array of relationships to fcPortChannel resources.
	FcPortChannels []FcPortChannelRelationship `json:"FcPortChannels,omitempty"`
	// An array of relationships to networkFeatureControl resources.
	FeatureControl []NetworkFeatureControlRelationship `json:"FeatureControl,omitempty"`
	// An array of relationships to networkInterfaceList resources.
	InterfaceList       []NetworkInterfaceListRelationship `json:"InterfaceList,omitempty"`
	InventoryDeviceInfo *InventoryDeviceInfoRelationship   `json:"InventoryDeviceInfo,omitempty"`
	// An array of relationships to networkLicenseFile resources.
	LicenseFile []NetworkLicenseFileRelationship `json:"LicenseFile,omitempty"`
	// An array of relationships to networkDiscoveredNeighbor resources.
	LldpNeighbor         []NetworkDiscoveredNeighborRelationship `json:"LldpNeighbor,omitempty"`
	LocatorLed           *EquipmentLocatorLedRelationship        `json:"LocatorLed,omitempty"`
	ManagementController *ManagementControllerRelationship       `json:"ManagementController,omitempty"`
	ManagementEntity     *ManagementEntityRelationship           `json:"ManagementEntity,omitempty"`
	NetworkFcZoneInfo    *NetworkFcZoneInfoRelationship          `json:"NetworkFcZoneInfo,omitempty"`
	NetworkVlanPortInfo  *NetworkVlanPortInfoRelationship        `json:"NetworkVlanPortInfo,omitempty"`
	// An array of relationships to ntpNtpServer resources.
	NtpServer []NtpNtpServerRelationship `json:"NtpServer,omitempty"`
	// An array of relationships to portMacBinding resources.
	PortMacBindings []PortMacBindingRelationship `json:"PortMacBindings,omitempty"`
	// An array of relationships to processorUnit resources.
	ProcessorUnit []ProcessorUnitRelationship `json:"ProcessorUnit,omitempty"`
	// An array of relationships to equipmentPsu resources.
	Psus             []EquipmentPsuRelationship           `json:"Psus,omitempty"`
	RegisteredDevice *AssetDeviceRegistrationRelationship `json:"RegisteredDevice,omitempty"`
	// An array of relationships to equipmentSensor resources.
	Sensors []EquipmentSensorRelationship `json:"Sensors,omitempty"`
	// An array of relationships to storageItem resources.
	StorageItems []StorageItemRelationship `json:"StorageItems,omitempty"`
	// An array of relationships to networkSupervisorCard resources.
	SupervisorCard      []NetworkSupervisorCardRelationship  `json:"SupervisorCard,omitempty"`
	TopSystem           *TopSystemRelationship               `json:"TopSystem,omitempty"`
	UcsmRunningFirmware *FirmwareRunningFirmwareRelationship `json:"UcsmRunningFirmware,omitempty"`
	// An array of relationships to networkVethernet resources.
	Veths []NetworkVethernetRelationship `json:"Veths,omitempty"`
	// An array of relationships to networkVfc resources.
	Vfcs      []NetworkVfcRelationship      `json:"Vfcs,omitempty"`
	VpcDomain *NetworkVpcDomainRelationship `json:"VpcDomain,omitempty"`
	// An array of relationships to networkVpcMember resources.
	VpcMember []NetworkVpcMemberRelationship `json:"VpcMember,omitempty"`
	// An array of relationships to networkVpcPeer resources.
	VpcPeer []NetworkVpcPeerRelationship `json:"VpcPeer,omitempty"`
	// An array of relationships to networkVrf resources.
	Vrf                  []NetworkVrfRelationship `json:"Vrf,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _NetworkElement NetworkElement

// NewNetworkElement instantiates a new NetworkElement object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNetworkElement(classId string, objectType string) *NetworkElement {
	this := NetworkElement{}
	this.ClassId = classId
	this.ObjectType = objectType
	var managementMode string = "IntersightStandalone"
	this.ManagementMode = &managementMode
	var thermal string = "unknown"
	this.Thermal = &thermal
	return &this
}

// NewNetworkElementWithDefaults instantiates a new NetworkElement object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNetworkElementWithDefaults() *NetworkElement {
	this := NetworkElement{}
	var classId string = "network.Element"
	this.ClassId = classId
	var objectType string = "network.Element"
	this.ObjectType = objectType
	var managementMode string = "IntersightStandalone"
	this.ManagementMode = &managementMode
	var thermal string = "unknown"
	this.Thermal = &thermal
	return &this
}

// GetClassId returns the ClassId field value
func (o *NetworkElement) GetClassId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ClassId
}

// GetClassIdOk returns a tuple with the ClassId field value
// and a boolean to check if the value has been set.
func (o *NetworkElement) GetClassIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ClassId, true
}

// SetClassId sets field value
func (o *NetworkElement) SetClassId(v string) {
	o.ClassId = v
}

// GetObjectType returns the ObjectType field value
func (o *NetworkElement) GetObjectType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ObjectType
}

// GetObjectTypeOk returns a tuple with the ObjectType field value
// and a boolean to check if the value has been set.
func (o *NetworkElement) GetObjectTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ObjectType, true
}

// SetObjectType sets field value
func (o *NetworkElement) SetObjectType(v string) {
	o.ObjectType = v
}

// GetAdminEvacState returns the AdminEvacState field value if set, zero value otherwise.
func (o *NetworkElement) GetAdminEvacState() string {
	if o == nil || o.AdminEvacState == nil {
		var ret string
		return ret
	}
	return *o.AdminEvacState
}

// GetAdminEvacStateOk returns a tuple with the AdminEvacState field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkElement) GetAdminEvacStateOk() (*string, bool) {
	if o == nil || o.AdminEvacState == nil {
		return nil, false
	}
	return o.AdminEvacState, true
}

// HasAdminEvacState returns a boolean if a field has been set.
func (o *NetworkElement) HasAdminEvacState() bool {
	if o != nil && o.AdminEvacState != nil {
		return true
	}

	return false
}

// SetAdminEvacState gets a reference to the given string and assigns it to the AdminEvacState field.
func (o *NetworkElement) SetAdminEvacState(v string) {
	o.AdminEvacState = &v
}

// GetAdminInbandInterfaceState returns the AdminInbandInterfaceState field value if set, zero value otherwise.
func (o *NetworkElement) GetAdminInbandInterfaceState() string {
	if o == nil || o.AdminInbandInterfaceState == nil {
		var ret string
		return ret
	}
	return *o.AdminInbandInterfaceState
}

// GetAdminInbandInterfaceStateOk returns a tuple with the AdminInbandInterfaceState field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkElement) GetAdminInbandInterfaceStateOk() (*string, bool) {
	if o == nil || o.AdminInbandInterfaceState == nil {
		return nil, false
	}
	return o.AdminInbandInterfaceState, true
}

// HasAdminInbandInterfaceState returns a boolean if a field has been set.
func (o *NetworkElement) HasAdminInbandInterfaceState() bool {
	if o != nil && o.AdminInbandInterfaceState != nil {
		return true
	}

	return false
}

// SetAdminInbandInterfaceState gets a reference to the given string and assigns it to the AdminInbandInterfaceState field.
func (o *NetworkElement) SetAdminInbandInterfaceState(v string) {
	o.AdminInbandInterfaceState = &v
}

// GetAlarmSummary returns the AlarmSummary field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NetworkElement) GetAlarmSummary() ComputeAlarmSummary {
	if o == nil || o.AlarmSummary.Get() == nil {
		var ret ComputeAlarmSummary
		return ret
	}
	return *o.AlarmSummary.Get()
}

// GetAlarmSummaryOk returns a tuple with the AlarmSummary field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NetworkElement) GetAlarmSummaryOk() (*ComputeAlarmSummary, bool) {
	if o == nil {
		return nil, false
	}
	return o.AlarmSummary.Get(), o.AlarmSummary.IsSet()
}

// HasAlarmSummary returns a boolean if a field has been set.
func (o *NetworkElement) HasAlarmSummary() bool {
	if o != nil && o.AlarmSummary.IsSet() {
		return true
	}

	return false
}

// SetAlarmSummary gets a reference to the given NullableComputeAlarmSummary and assigns it to the AlarmSummary field.
func (o *NetworkElement) SetAlarmSummary(v ComputeAlarmSummary) {
	o.AlarmSummary.Set(&v)
}

// SetAlarmSummaryNil sets the value for AlarmSummary to be an explicit nil
func (o *NetworkElement) SetAlarmSummaryNil() {
	o.AlarmSummary.Set(nil)
}

// UnsetAlarmSummary ensures that no value is present for AlarmSummary, not even an explicit nil
func (o *NetworkElement) UnsetAlarmSummary() {
	o.AlarmSummary.Unset()
}

// GetAvailableMemory returns the AvailableMemory field value if set, zero value otherwise.
func (o *NetworkElement) GetAvailableMemory() string {
	if o == nil || o.AvailableMemory == nil {
		var ret string
		return ret
	}
	return *o.AvailableMemory
}

// GetAvailableMemoryOk returns a tuple with the AvailableMemory field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkElement) GetAvailableMemoryOk() (*string, bool) {
	if o == nil || o.AvailableMemory == nil {
		return nil, false
	}
	return o.AvailableMemory, true
}

// HasAvailableMemory returns a boolean if a field has been set.
func (o *NetworkElement) HasAvailableMemory() bool {
	if o != nil && o.AvailableMemory != nil {
		return true
	}

	return false
}

// SetAvailableMemory gets a reference to the given string and assigns it to the AvailableMemory field.
func (o *NetworkElement) SetAvailableMemory(v string) {
	o.AvailableMemory = &v
}

// GetChassis returns the Chassis field value if set, zero value otherwise.
func (o *NetworkElement) GetChassis() string {
	if o == nil || o.Chassis == nil {
		var ret string
		return ret
	}
	return *o.Chassis
}

// GetChassisOk returns a tuple with the Chassis field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkElement) GetChassisOk() (*string, bool) {
	if o == nil || o.Chassis == nil {
		return nil, false
	}
	return o.Chassis, true
}

// HasChassis returns a boolean if a field has been set.
func (o *NetworkElement) HasChassis() bool {
	if o != nil && o.Chassis != nil {
		return true
	}

	return false
}

// SetChassis gets a reference to the given string and assigns it to the Chassis field.
func (o *NetworkElement) SetChassis(v string) {
	o.Chassis = &v
}

// GetConfModTs returns the ConfModTs field value if set, zero value otherwise.
func (o *NetworkElement) GetConfModTs() string {
	if o == nil || o.ConfModTs == nil {
		var ret string
		return ret
	}
	return *o.ConfModTs
}

// GetConfModTsOk returns a tuple with the ConfModTs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkElement) GetConfModTsOk() (*string, bool) {
	if o == nil || o.ConfModTs == nil {
		return nil, false
	}
	return o.ConfModTs, true
}

// HasConfModTs returns a boolean if a field has been set.
func (o *NetworkElement) HasConfModTs() bool {
	if o != nil && o.ConfModTs != nil {
		return true
	}

	return false
}

// SetConfModTs gets a reference to the given string and assigns it to the ConfModTs field.
func (o *NetworkElement) SetConfModTs(v string) {
	o.ConfModTs = &v
}

// GetConfModTsBackup returns the ConfModTsBackup field value if set, zero value otherwise.
func (o *NetworkElement) GetConfModTsBackup() string {
	if o == nil || o.ConfModTsBackup == nil {
		var ret string
		return ret
	}
	return *o.ConfModTsBackup
}

// GetConfModTsBackupOk returns a tuple with the ConfModTsBackup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkElement) GetConfModTsBackupOk() (*string, bool) {
	if o == nil || o.ConfModTsBackup == nil {
		return nil, false
	}
	return o.ConfModTsBackup, true
}

// HasConfModTsBackup returns a boolean if a field has been set.
func (o *NetworkElement) HasConfModTsBackup() bool {
	if o != nil && o.ConfModTsBackup != nil {
		return true
	}

	return false
}

// SetConfModTsBackup gets a reference to the given string and assigns it to the ConfModTsBackup field.
func (o *NetworkElement) SetConfModTsBackup(v string) {
	o.ConfModTsBackup = &v
}

// GetConnectionStatus returns the ConnectionStatus field value if set, zero value otherwise.
func (o *NetworkElement) GetConnectionStatus() string {
	if o == nil || o.ConnectionStatus == nil {
		var ret string
		return ret
	}
	return *o.ConnectionStatus
}

// GetConnectionStatusOk returns a tuple with the ConnectionStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkElement) GetConnectionStatusOk() (*string, bool) {
	if o == nil || o.ConnectionStatus == nil {
		return nil, false
	}
	return o.ConnectionStatus, true
}

// HasConnectionStatus returns a boolean if a field has been set.
func (o *NetworkElement) HasConnectionStatus() bool {
	if o != nil && o.ConnectionStatus != nil {
		return true
	}

	return false
}

// SetConnectionStatus gets a reference to the given string and assigns it to the ConnectionStatus field.
func (o *NetworkElement) SetConnectionStatus(v string) {
	o.ConnectionStatus = &v
}

// GetDefaultDomain returns the DefaultDomain field value if set, zero value otherwise.
func (o *NetworkElement) GetDefaultDomain() string {
	if o == nil || o.DefaultDomain == nil {
		var ret string
		return ret
	}
	return *o.DefaultDomain
}

// GetDefaultDomainOk returns a tuple with the DefaultDomain field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkElement) GetDefaultDomainOk() (*string, bool) {
	if o == nil || o.DefaultDomain == nil {
		return nil, false
	}
	return o.DefaultDomain, true
}

// HasDefaultDomain returns a boolean if a field has been set.
func (o *NetworkElement) HasDefaultDomain() bool {
	if o != nil && o.DefaultDomain != nil {
		return true
	}

	return false
}

// SetDefaultDomain gets a reference to the given string and assigns it to the DefaultDomain field.
func (o *NetworkElement) SetDefaultDomain(v string) {
	o.DefaultDomain = &v
}

// GetEthernetMode returns the EthernetMode field value if set, zero value otherwise.
// Deprecated
func (o *NetworkElement) GetEthernetMode() string {
	if o == nil || o.EthernetMode == nil {
		var ret string
		return ret
	}
	return *o.EthernetMode
}

// GetEthernetModeOk returns a tuple with the EthernetMode field value if set, nil otherwise
// and a boolean to check if the value has been set.
// Deprecated
func (o *NetworkElement) GetEthernetModeOk() (*string, bool) {
	if o == nil || o.EthernetMode == nil {
		return nil, false
	}
	return o.EthernetMode, true
}

// HasEthernetMode returns a boolean if a field has been set.
func (o *NetworkElement) HasEthernetMode() bool {
	if o != nil && o.EthernetMode != nil {
		return true
	}

	return false
}

// SetEthernetMode gets a reference to the given string and assigns it to the EthernetMode field.
// Deprecated
func (o *NetworkElement) SetEthernetMode(v string) {
	o.EthernetMode = &v
}

// GetEthernetSwitchingMode returns the EthernetSwitchingMode field value if set, zero value otherwise.
func (o *NetworkElement) GetEthernetSwitchingMode() string {
	if o == nil || o.EthernetSwitchingMode == nil {
		var ret string
		return ret
	}
	return *o.EthernetSwitchingMode
}

// GetEthernetSwitchingModeOk returns a tuple with the EthernetSwitchingMode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkElement) GetEthernetSwitchingModeOk() (*string, bool) {
	if o == nil || o.EthernetSwitchingMode == nil {
		return nil, false
	}
	return o.EthernetSwitchingMode, true
}

// HasEthernetSwitchingMode returns a boolean if a field has been set.
func (o *NetworkElement) HasEthernetSwitchingMode() bool {
	if o != nil && o.EthernetSwitchingMode != nil {
		return true
	}

	return false
}

// SetEthernetSwitchingMode gets a reference to the given string and assigns it to the EthernetSwitchingMode field.
func (o *NetworkElement) SetEthernetSwitchingMode(v string) {
	o.EthernetSwitchingMode = &v
}

// GetFaultSummary returns the FaultSummary field value if set, zero value otherwise.
// Deprecated
func (o *NetworkElement) GetFaultSummary() int64 {
	if o == nil || o.FaultSummary == nil {
		var ret int64
		return ret
	}
	return *o.FaultSummary
}

// GetFaultSummaryOk returns a tuple with the FaultSummary field value if set, nil otherwise
// and a boolean to check if the value has been set.
// Deprecated
func (o *NetworkElement) GetFaultSummaryOk() (*int64, bool) {
	if o == nil || o.FaultSummary == nil {
		return nil, false
	}
	return o.FaultSummary, true
}

// HasFaultSummary returns a boolean if a field has been set.
func (o *NetworkElement) HasFaultSummary() bool {
	if o != nil && o.FaultSummary != nil {
		return true
	}

	return false
}

// SetFaultSummary gets a reference to the given int64 and assigns it to the FaultSummary field.
// Deprecated
func (o *NetworkElement) SetFaultSummary(v int64) {
	o.FaultSummary = &v
}

// GetFcMode returns the FcMode field value if set, zero value otherwise.
// Deprecated
func (o *NetworkElement) GetFcMode() string {
	if o == nil || o.FcMode == nil {
		var ret string
		return ret
	}
	return *o.FcMode
}

// GetFcModeOk returns a tuple with the FcMode field value if set, nil otherwise
// and a boolean to check if the value has been set.
// Deprecated
func (o *NetworkElement) GetFcModeOk() (*string, bool) {
	if o == nil || o.FcMode == nil {
		return nil, false
	}
	return o.FcMode, true
}

// HasFcMode returns a boolean if a field has been set.
func (o *NetworkElement) HasFcMode() bool {
	if o != nil && o.FcMode != nil {
		return true
	}

	return false
}

// SetFcMode gets a reference to the given string and assigns it to the FcMode field.
// Deprecated
func (o *NetworkElement) SetFcMode(v string) {
	o.FcMode = &v
}

// GetFcSwitchingMode returns the FcSwitchingMode field value if set, zero value otherwise.
func (o *NetworkElement) GetFcSwitchingMode() string {
	if o == nil || o.FcSwitchingMode == nil {
		var ret string
		return ret
	}
	return *o.FcSwitchingMode
}

// GetFcSwitchingModeOk returns a tuple with the FcSwitchingMode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkElement) GetFcSwitchingModeOk() (*string, bool) {
	if o == nil || o.FcSwitchingMode == nil {
		return nil, false
	}
	return o.FcSwitchingMode, true
}

// HasFcSwitchingMode returns a boolean if a field has been set.
func (o *NetworkElement) HasFcSwitchingMode() bool {
	if o != nil && o.FcSwitchingMode != nil {
		return true
	}

	return false
}

// SetFcSwitchingMode gets a reference to the given string and assigns it to the FcSwitchingMode field.
func (o *NetworkElement) SetFcSwitchingMode(v string) {
	o.FcSwitchingMode = &v
}

// GetInbandIpAddress returns the InbandIpAddress field value if set, zero value otherwise.
func (o *NetworkElement) GetInbandIpAddress() string {
	if o == nil || o.InbandIpAddress == nil {
		var ret string
		return ret
	}
	return *o.InbandIpAddress
}

// GetInbandIpAddressOk returns a tuple with the InbandIpAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkElement) GetInbandIpAddressOk() (*string, bool) {
	if o == nil || o.InbandIpAddress == nil {
		return nil, false
	}
	return o.InbandIpAddress, true
}

// HasInbandIpAddress returns a boolean if a field has been set.
func (o *NetworkElement) HasInbandIpAddress() bool {
	if o != nil && o.InbandIpAddress != nil {
		return true
	}

	return false
}

// SetInbandIpAddress gets a reference to the given string and assigns it to the InbandIpAddress field.
func (o *NetworkElement) SetInbandIpAddress(v string) {
	o.InbandIpAddress = &v
}

// GetInbandIpGateway returns the InbandIpGateway field value if set, zero value otherwise.
func (o *NetworkElement) GetInbandIpGateway() string {
	if o == nil || o.InbandIpGateway == nil {
		var ret string
		return ret
	}
	return *o.InbandIpGateway
}

// GetInbandIpGatewayOk returns a tuple with the InbandIpGateway field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkElement) GetInbandIpGatewayOk() (*string, bool) {
	if o == nil || o.InbandIpGateway == nil {
		return nil, false
	}
	return o.InbandIpGateway, true
}

// HasInbandIpGateway returns a boolean if a field has been set.
func (o *NetworkElement) HasInbandIpGateway() bool {
	if o != nil && o.InbandIpGateway != nil {
		return true
	}

	return false
}

// SetInbandIpGateway gets a reference to the given string and assigns it to the InbandIpGateway field.
func (o *NetworkElement) SetInbandIpGateway(v string) {
	o.InbandIpGateway = &v
}

// GetInbandIpMask returns the InbandIpMask field value if set, zero value otherwise.
func (o *NetworkElement) GetInbandIpMask() string {
	if o == nil || o.InbandIpMask == nil {
		var ret string
		return ret
	}
	return *o.InbandIpMask
}

// GetInbandIpMaskOk returns a tuple with the InbandIpMask field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkElement) GetInbandIpMaskOk() (*string, bool) {
	if o == nil || o.InbandIpMask == nil {
		return nil, false
	}
	return o.InbandIpMask, true
}

// HasInbandIpMask returns a boolean if a field has been set.
func (o *NetworkElement) HasInbandIpMask() bool {
	if o != nil && o.InbandIpMask != nil {
		return true
	}

	return false
}

// SetInbandIpMask gets a reference to the given string and assigns it to the InbandIpMask field.
func (o *NetworkElement) SetInbandIpMask(v string) {
	o.InbandIpMask = &v
}

// GetInbandVlan returns the InbandVlan field value if set, zero value otherwise.
func (o *NetworkElement) GetInbandVlan() int64 {
	if o == nil || o.InbandVlan == nil {
		var ret int64
		return ret
	}
	return *o.InbandVlan
}

// GetInbandVlanOk returns a tuple with the InbandVlan field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkElement) GetInbandVlanOk() (*int64, bool) {
	if o == nil || o.InbandVlan == nil {
		return nil, false
	}
	return o.InbandVlan, true
}

// HasInbandVlan returns a boolean if a field has been set.
func (o *NetworkElement) HasInbandVlan() bool {
	if o != nil && o.InbandVlan != nil {
		return true
	}

	return false
}

// SetInbandVlan gets a reference to the given int64 and assigns it to the InbandVlan field.
func (o *NetworkElement) SetInbandVlan(v int64) {
	o.InbandVlan = &v
}

// GetInterClusterLinkState returns the InterClusterLinkState field value if set, zero value otherwise.
func (o *NetworkElement) GetInterClusterLinkState() string {
	if o == nil || o.InterClusterLinkState == nil {
		var ret string
		return ret
	}
	return *o.InterClusterLinkState
}

// GetInterClusterLinkStateOk returns a tuple with the InterClusterLinkState field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkElement) GetInterClusterLinkStateOk() (*string, bool) {
	if o == nil || o.InterClusterLinkState == nil {
		return nil, false
	}
	return o.InterClusterLinkState, true
}

// HasInterClusterLinkState returns a boolean if a field has been set.
func (o *NetworkElement) HasInterClusterLinkState() bool {
	if o != nil && o.InterClusterLinkState != nil {
		return true
	}

	return false
}

// SetInterClusterLinkState gets a reference to the given string and assigns it to the InterClusterLinkState field.
func (o *NetworkElement) SetInterClusterLinkState(v string) {
	o.InterClusterLinkState = &v
}

// GetManagementMode returns the ManagementMode field value if set, zero value otherwise.
func (o *NetworkElement) GetManagementMode() string {
	if o == nil || o.ManagementMode == nil {
		var ret string
		return ret
	}
	return *o.ManagementMode
}

// GetManagementModeOk returns a tuple with the ManagementMode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkElement) GetManagementModeOk() (*string, bool) {
	if o == nil || o.ManagementMode == nil {
		return nil, false
	}
	return o.ManagementMode, true
}

// HasManagementMode returns a boolean if a field has been set.
func (o *NetworkElement) HasManagementMode() bool {
	if o != nil && o.ManagementMode != nil {
		return true
	}

	return false
}

// SetManagementMode gets a reference to the given string and assigns it to the ManagementMode field.
func (o *NetworkElement) SetManagementMode(v string) {
	o.ManagementMode = &v
}

// GetOperEvacState returns the OperEvacState field value if set, zero value otherwise.
func (o *NetworkElement) GetOperEvacState() string {
	if o == nil || o.OperEvacState == nil {
		var ret string
		return ret
	}
	return *o.OperEvacState
}

// GetOperEvacStateOk returns a tuple with the OperEvacState field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkElement) GetOperEvacStateOk() (*string, bool) {
	if o == nil || o.OperEvacState == nil {
		return nil, false
	}
	return o.OperEvacState, true
}

// HasOperEvacState returns a boolean if a field has been set.
func (o *NetworkElement) HasOperEvacState() bool {
	if o != nil && o.OperEvacState != nil {
		return true
	}

	return false
}

// SetOperEvacState gets a reference to the given string and assigns it to the OperEvacState field.
func (o *NetworkElement) SetOperEvacState(v string) {
	o.OperEvacState = &v
}

// GetOperability returns the Operability field value if set, zero value otherwise.
func (o *NetworkElement) GetOperability() string {
	if o == nil || o.Operability == nil {
		var ret string
		return ret
	}
	return *o.Operability
}

// GetOperabilityOk returns a tuple with the Operability field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkElement) GetOperabilityOk() (*string, bool) {
	if o == nil || o.Operability == nil {
		return nil, false
	}
	return o.Operability, true
}

// HasOperability returns a boolean if a field has been set.
func (o *NetworkElement) HasOperability() bool {
	if o != nil && o.Operability != nil {
		return true
	}

	return false
}

// SetOperability gets a reference to the given string and assigns it to the Operability field.
func (o *NetworkElement) SetOperability(v string) {
	o.Operability = &v
}

// GetOutOfBandIpAddress returns the OutOfBandIpAddress field value if set, zero value otherwise.
func (o *NetworkElement) GetOutOfBandIpAddress() string {
	if o == nil || o.OutOfBandIpAddress == nil {
		var ret string
		return ret
	}
	return *o.OutOfBandIpAddress
}

// GetOutOfBandIpAddressOk returns a tuple with the OutOfBandIpAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkElement) GetOutOfBandIpAddressOk() (*string, bool) {
	if o == nil || o.OutOfBandIpAddress == nil {
		return nil, false
	}
	return o.OutOfBandIpAddress, true
}

// HasOutOfBandIpAddress returns a boolean if a field has been set.
func (o *NetworkElement) HasOutOfBandIpAddress() bool {
	if o != nil && o.OutOfBandIpAddress != nil {
		return true
	}

	return false
}

// SetOutOfBandIpAddress gets a reference to the given string and assigns it to the OutOfBandIpAddress field.
func (o *NetworkElement) SetOutOfBandIpAddress(v string) {
	o.OutOfBandIpAddress = &v
}

// GetOutOfBandIpGateway returns the OutOfBandIpGateway field value if set, zero value otherwise.
func (o *NetworkElement) GetOutOfBandIpGateway() string {
	if o == nil || o.OutOfBandIpGateway == nil {
		var ret string
		return ret
	}
	return *o.OutOfBandIpGateway
}

// GetOutOfBandIpGatewayOk returns a tuple with the OutOfBandIpGateway field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkElement) GetOutOfBandIpGatewayOk() (*string, bool) {
	if o == nil || o.OutOfBandIpGateway == nil {
		return nil, false
	}
	return o.OutOfBandIpGateway, true
}

// HasOutOfBandIpGateway returns a boolean if a field has been set.
func (o *NetworkElement) HasOutOfBandIpGateway() bool {
	if o != nil && o.OutOfBandIpGateway != nil {
		return true
	}

	return false
}

// SetOutOfBandIpGateway gets a reference to the given string and assigns it to the OutOfBandIpGateway field.
func (o *NetworkElement) SetOutOfBandIpGateway(v string) {
	o.OutOfBandIpGateway = &v
}

// GetOutOfBandIpMask returns the OutOfBandIpMask field value if set, zero value otherwise.
func (o *NetworkElement) GetOutOfBandIpMask() string {
	if o == nil || o.OutOfBandIpMask == nil {
		var ret string
		return ret
	}
	return *o.OutOfBandIpMask
}

// GetOutOfBandIpMaskOk returns a tuple with the OutOfBandIpMask field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkElement) GetOutOfBandIpMaskOk() (*string, bool) {
	if o == nil || o.OutOfBandIpMask == nil {
		return nil, false
	}
	return o.OutOfBandIpMask, true
}

// HasOutOfBandIpMask returns a boolean if a field has been set.
func (o *NetworkElement) HasOutOfBandIpMask() bool {
	if o != nil && o.OutOfBandIpMask != nil {
		return true
	}

	return false
}

// SetOutOfBandIpMask gets a reference to the given string and assigns it to the OutOfBandIpMask field.
func (o *NetworkElement) SetOutOfBandIpMask(v string) {
	o.OutOfBandIpMask = &v
}

// GetOutOfBandIpv4Address returns the OutOfBandIpv4Address field value if set, zero value otherwise.
func (o *NetworkElement) GetOutOfBandIpv4Address() string {
	if o == nil || o.OutOfBandIpv4Address == nil {
		var ret string
		return ret
	}
	return *o.OutOfBandIpv4Address
}

// GetOutOfBandIpv4AddressOk returns a tuple with the OutOfBandIpv4Address field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkElement) GetOutOfBandIpv4AddressOk() (*string, bool) {
	if o == nil || o.OutOfBandIpv4Address == nil {
		return nil, false
	}
	return o.OutOfBandIpv4Address, true
}

// HasOutOfBandIpv4Address returns a boolean if a field has been set.
func (o *NetworkElement) HasOutOfBandIpv4Address() bool {
	if o != nil && o.OutOfBandIpv4Address != nil {
		return true
	}

	return false
}

// SetOutOfBandIpv4Address gets a reference to the given string and assigns it to the OutOfBandIpv4Address field.
func (o *NetworkElement) SetOutOfBandIpv4Address(v string) {
	o.OutOfBandIpv4Address = &v
}

// GetOutOfBandIpv4Gateway returns the OutOfBandIpv4Gateway field value if set, zero value otherwise.
func (o *NetworkElement) GetOutOfBandIpv4Gateway() string {
	if o == nil || o.OutOfBandIpv4Gateway == nil {
		var ret string
		return ret
	}
	return *o.OutOfBandIpv4Gateway
}

// GetOutOfBandIpv4GatewayOk returns a tuple with the OutOfBandIpv4Gateway field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkElement) GetOutOfBandIpv4GatewayOk() (*string, bool) {
	if o == nil || o.OutOfBandIpv4Gateway == nil {
		return nil, false
	}
	return o.OutOfBandIpv4Gateway, true
}

// HasOutOfBandIpv4Gateway returns a boolean if a field has been set.
func (o *NetworkElement) HasOutOfBandIpv4Gateway() bool {
	if o != nil && o.OutOfBandIpv4Gateway != nil {
		return true
	}

	return false
}

// SetOutOfBandIpv4Gateway gets a reference to the given string and assigns it to the OutOfBandIpv4Gateway field.
func (o *NetworkElement) SetOutOfBandIpv4Gateway(v string) {
	o.OutOfBandIpv4Gateway = &v
}

// GetOutOfBandIpv4Mask returns the OutOfBandIpv4Mask field value if set, zero value otherwise.
func (o *NetworkElement) GetOutOfBandIpv4Mask() string {
	if o == nil || o.OutOfBandIpv4Mask == nil {
		var ret string
		return ret
	}
	return *o.OutOfBandIpv4Mask
}

// GetOutOfBandIpv4MaskOk returns a tuple with the OutOfBandIpv4Mask field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkElement) GetOutOfBandIpv4MaskOk() (*string, bool) {
	if o == nil || o.OutOfBandIpv4Mask == nil {
		return nil, false
	}
	return o.OutOfBandIpv4Mask, true
}

// HasOutOfBandIpv4Mask returns a boolean if a field has been set.
func (o *NetworkElement) HasOutOfBandIpv4Mask() bool {
	if o != nil && o.OutOfBandIpv4Mask != nil {
		return true
	}

	return false
}

// SetOutOfBandIpv4Mask gets a reference to the given string and assigns it to the OutOfBandIpv4Mask field.
func (o *NetworkElement) SetOutOfBandIpv4Mask(v string) {
	o.OutOfBandIpv4Mask = &v
}

// GetOutOfBandIpv6Address returns the OutOfBandIpv6Address field value if set, zero value otherwise.
func (o *NetworkElement) GetOutOfBandIpv6Address() string {
	if o == nil || o.OutOfBandIpv6Address == nil {
		var ret string
		return ret
	}
	return *o.OutOfBandIpv6Address
}

// GetOutOfBandIpv6AddressOk returns a tuple with the OutOfBandIpv6Address field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkElement) GetOutOfBandIpv6AddressOk() (*string, bool) {
	if o == nil || o.OutOfBandIpv6Address == nil {
		return nil, false
	}
	return o.OutOfBandIpv6Address, true
}

// HasOutOfBandIpv6Address returns a boolean if a field has been set.
func (o *NetworkElement) HasOutOfBandIpv6Address() bool {
	if o != nil && o.OutOfBandIpv6Address != nil {
		return true
	}

	return false
}

// SetOutOfBandIpv6Address gets a reference to the given string and assigns it to the OutOfBandIpv6Address field.
func (o *NetworkElement) SetOutOfBandIpv6Address(v string) {
	o.OutOfBandIpv6Address = &v
}

// GetOutOfBandIpv6Gateway returns the OutOfBandIpv6Gateway field value if set, zero value otherwise.
func (o *NetworkElement) GetOutOfBandIpv6Gateway() string {
	if o == nil || o.OutOfBandIpv6Gateway == nil {
		var ret string
		return ret
	}
	return *o.OutOfBandIpv6Gateway
}

// GetOutOfBandIpv6GatewayOk returns a tuple with the OutOfBandIpv6Gateway field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkElement) GetOutOfBandIpv6GatewayOk() (*string, bool) {
	if o == nil || o.OutOfBandIpv6Gateway == nil {
		return nil, false
	}
	return o.OutOfBandIpv6Gateway, true
}

// HasOutOfBandIpv6Gateway returns a boolean if a field has been set.
func (o *NetworkElement) HasOutOfBandIpv6Gateway() bool {
	if o != nil && o.OutOfBandIpv6Gateway != nil {
		return true
	}

	return false
}

// SetOutOfBandIpv6Gateway gets a reference to the given string and assigns it to the OutOfBandIpv6Gateway field.
func (o *NetworkElement) SetOutOfBandIpv6Gateway(v string) {
	o.OutOfBandIpv6Gateway = &v
}

// GetOutOfBandIpv6Prefix returns the OutOfBandIpv6Prefix field value if set, zero value otherwise.
func (o *NetworkElement) GetOutOfBandIpv6Prefix() string {
	if o == nil || o.OutOfBandIpv6Prefix == nil {
		var ret string
		return ret
	}
	return *o.OutOfBandIpv6Prefix
}

// GetOutOfBandIpv6PrefixOk returns a tuple with the OutOfBandIpv6Prefix field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkElement) GetOutOfBandIpv6PrefixOk() (*string, bool) {
	if o == nil || o.OutOfBandIpv6Prefix == nil {
		return nil, false
	}
	return o.OutOfBandIpv6Prefix, true
}

// HasOutOfBandIpv6Prefix returns a boolean if a field has been set.
func (o *NetworkElement) HasOutOfBandIpv6Prefix() bool {
	if o != nil && o.OutOfBandIpv6Prefix != nil {
		return true
	}

	return false
}

// SetOutOfBandIpv6Prefix gets a reference to the given string and assigns it to the OutOfBandIpv6Prefix field.
func (o *NetworkElement) SetOutOfBandIpv6Prefix(v string) {
	o.OutOfBandIpv6Prefix = &v
}

// GetOutOfBandMac returns the OutOfBandMac field value if set, zero value otherwise.
func (o *NetworkElement) GetOutOfBandMac() string {
	if o == nil || o.OutOfBandMac == nil {
		var ret string
		return ret
	}
	return *o.OutOfBandMac
}

// GetOutOfBandMacOk returns a tuple with the OutOfBandMac field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkElement) GetOutOfBandMacOk() (*string, bool) {
	if o == nil || o.OutOfBandMac == nil {
		return nil, false
	}
	return o.OutOfBandMac, true
}

// HasOutOfBandMac returns a boolean if a field has been set.
func (o *NetworkElement) HasOutOfBandMac() bool {
	if o != nil && o.OutOfBandMac != nil {
		return true
	}

	return false
}

// SetOutOfBandMac gets a reference to the given string and assigns it to the OutOfBandMac field.
func (o *NetworkElement) SetOutOfBandMac(v string) {
	o.OutOfBandMac = &v
}

// GetPartNumber returns the PartNumber field value if set, zero value otherwise.
func (o *NetworkElement) GetPartNumber() string {
	if o == nil || o.PartNumber == nil {
		var ret string
		return ret
	}
	return *o.PartNumber
}

// GetPartNumberOk returns a tuple with the PartNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkElement) GetPartNumberOk() (*string, bool) {
	if o == nil || o.PartNumber == nil {
		return nil, false
	}
	return o.PartNumber, true
}

// HasPartNumber returns a boolean if a field has been set.
func (o *NetworkElement) HasPartNumber() bool {
	if o != nil && o.PartNumber != nil {
		return true
	}

	return false
}

// SetPartNumber gets a reference to the given string and assigns it to the PartNumber field.
func (o *NetworkElement) SetPartNumber(v string) {
	o.PartNumber = &v
}

// GetReservedVlanStartId returns the ReservedVlanStartId field value if set, zero value otherwise.
func (o *NetworkElement) GetReservedVlanStartId() int64 {
	if o == nil || o.ReservedVlanStartId == nil {
		var ret int64
		return ret
	}
	return *o.ReservedVlanStartId
}

// GetReservedVlanStartIdOk returns a tuple with the ReservedVlanStartId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkElement) GetReservedVlanStartIdOk() (*int64, bool) {
	if o == nil || o.ReservedVlanStartId == nil {
		return nil, false
	}
	return o.ReservedVlanStartId, true
}

// HasReservedVlanStartId returns a boolean if a field has been set.
func (o *NetworkElement) HasReservedVlanStartId() bool {
	if o != nil && o.ReservedVlanStartId != nil {
		return true
	}

	return false
}

// SetReservedVlanStartId gets a reference to the given int64 and assigns it to the ReservedVlanStartId field.
func (o *NetworkElement) SetReservedVlanStartId(v int64) {
	o.ReservedVlanStartId = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *NetworkElement) GetStatus() string {
	if o == nil || o.Status == nil {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkElement) GetStatusOk() (*string, bool) {
	if o == nil || o.Status == nil {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *NetworkElement) HasStatus() bool {
	if o != nil && o.Status != nil {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *NetworkElement) SetStatus(v string) {
	o.Status = &v
}

// GetSwitchId returns the SwitchId field value if set, zero value otherwise.
func (o *NetworkElement) GetSwitchId() string {
	if o == nil || o.SwitchId == nil {
		var ret string
		return ret
	}
	return *o.SwitchId
}

// GetSwitchIdOk returns a tuple with the SwitchId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkElement) GetSwitchIdOk() (*string, bool) {
	if o == nil || o.SwitchId == nil {
		return nil, false
	}
	return o.SwitchId, true
}

// HasSwitchId returns a boolean if a field has been set.
func (o *NetworkElement) HasSwitchId() bool {
	if o != nil && o.SwitchId != nil {
		return true
	}

	return false
}

// SetSwitchId gets a reference to the given string and assigns it to the SwitchId field.
func (o *NetworkElement) SetSwitchId(v string) {
	o.SwitchId = &v
}

// GetSwitchType returns the SwitchType field value if set, zero value otherwise.
func (o *NetworkElement) GetSwitchType() string {
	if o == nil || o.SwitchType == nil {
		var ret string
		return ret
	}
	return *o.SwitchType
}

// GetSwitchTypeOk returns a tuple with the SwitchType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkElement) GetSwitchTypeOk() (*string, bool) {
	if o == nil || o.SwitchType == nil {
		return nil, false
	}
	return o.SwitchType, true
}

// HasSwitchType returns a boolean if a field has been set.
func (o *NetworkElement) HasSwitchType() bool {
	if o != nil && o.SwitchType != nil {
		return true
	}

	return false
}

// SetSwitchType gets a reference to the given string and assigns it to the SwitchType field.
func (o *NetworkElement) SetSwitchType(v string) {
	o.SwitchType = &v
}

// GetSystemUpTime returns the SystemUpTime field value if set, zero value otherwise.
func (o *NetworkElement) GetSystemUpTime() string {
	if o == nil || o.SystemUpTime == nil {
		var ret string
		return ret
	}
	return *o.SystemUpTime
}

// GetSystemUpTimeOk returns a tuple with the SystemUpTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkElement) GetSystemUpTimeOk() (*string, bool) {
	if o == nil || o.SystemUpTime == nil {
		return nil, false
	}
	return o.SystemUpTime, true
}

// HasSystemUpTime returns a boolean if a field has been set.
func (o *NetworkElement) HasSystemUpTime() bool {
	if o != nil && o.SystemUpTime != nil {
		return true
	}

	return false
}

// SetSystemUpTime gets a reference to the given string and assigns it to the SystemUpTime field.
func (o *NetworkElement) SetSystemUpTime(v string) {
	o.SystemUpTime = &v
}

// GetThermal returns the Thermal field value if set, zero value otherwise.
func (o *NetworkElement) GetThermal() string {
	if o == nil || o.Thermal == nil {
		var ret string
		return ret
	}
	return *o.Thermal
}

// GetThermalOk returns a tuple with the Thermal field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkElement) GetThermalOk() (*string, bool) {
	if o == nil || o.Thermal == nil {
		return nil, false
	}
	return o.Thermal, true
}

// HasThermal returns a boolean if a field has been set.
func (o *NetworkElement) HasThermal() bool {
	if o != nil && o.Thermal != nil {
		return true
	}

	return false
}

// SetThermal gets a reference to the given string and assigns it to the Thermal field.
func (o *NetworkElement) SetThermal(v string) {
	o.Thermal = &v
}

// GetTotalMemory returns the TotalMemory field value if set, zero value otherwise.
func (o *NetworkElement) GetTotalMemory() int64 {
	if o == nil || o.TotalMemory == nil {
		var ret int64
		return ret
	}
	return *o.TotalMemory
}

// GetTotalMemoryOk returns a tuple with the TotalMemory field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkElement) GetTotalMemoryOk() (*int64, bool) {
	if o == nil || o.TotalMemory == nil {
		return nil, false
	}
	return o.TotalMemory, true
}

// HasTotalMemory returns a boolean if a field has been set.
func (o *NetworkElement) HasTotalMemory() bool {
	if o != nil && o.TotalMemory != nil {
		return true
	}

	return false
}

// SetTotalMemory gets a reference to the given int64 and assigns it to the TotalMemory field.
func (o *NetworkElement) SetTotalMemory(v int64) {
	o.TotalMemory = &v
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *NetworkElement) GetVersion() string {
	if o == nil || o.Version == nil {
		var ret string
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkElement) GetVersionOk() (*string, bool) {
	if o == nil || o.Version == nil {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *NetworkElement) HasVersion() bool {
	if o != nil && o.Version != nil {
		return true
	}

	return false
}

// SetVersion gets a reference to the given string and assigns it to the Version field.
func (o *NetworkElement) SetVersion(v string) {
	o.Version = &v
}

// GetCards returns the Cards field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NetworkElement) GetCards() []EquipmentSwitchCardRelationship {
	if o == nil {
		var ret []EquipmentSwitchCardRelationship
		return ret
	}
	return o.Cards
}

// GetCardsOk returns a tuple with the Cards field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NetworkElement) GetCardsOk() ([]EquipmentSwitchCardRelationship, bool) {
	if o == nil || o.Cards == nil {
		return nil, false
	}
	return o.Cards, true
}

// HasCards returns a boolean if a field has been set.
func (o *NetworkElement) HasCards() bool {
	if o != nil && o.Cards != nil {
		return true
	}

	return false
}

// SetCards gets a reference to the given []EquipmentSwitchCardRelationship and assigns it to the Cards field.
func (o *NetworkElement) SetCards(v []EquipmentSwitchCardRelationship) {
	o.Cards = v
}

// GetCdpNeighbor returns the CdpNeighbor field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NetworkElement) GetCdpNeighbor() []NetworkDiscoveredNeighborRelationship {
	if o == nil {
		var ret []NetworkDiscoveredNeighborRelationship
		return ret
	}
	return o.CdpNeighbor
}

// GetCdpNeighborOk returns a tuple with the CdpNeighbor field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NetworkElement) GetCdpNeighborOk() ([]NetworkDiscoveredNeighborRelationship, bool) {
	if o == nil || o.CdpNeighbor == nil {
		return nil, false
	}
	return o.CdpNeighbor, true
}

// HasCdpNeighbor returns a boolean if a field has been set.
func (o *NetworkElement) HasCdpNeighbor() bool {
	if o != nil && o.CdpNeighbor != nil {
		return true
	}

	return false
}

// SetCdpNeighbor gets a reference to the given []NetworkDiscoveredNeighborRelationship and assigns it to the CdpNeighbor field.
func (o *NetworkElement) SetCdpNeighbor(v []NetworkDiscoveredNeighborRelationship) {
	o.CdpNeighbor = v
}

// GetConsole returns the Console field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NetworkElement) GetConsole() []ConsoleConsoleConfigRelationship {
	if o == nil {
		var ret []ConsoleConsoleConfigRelationship
		return ret
	}
	return o.Console
}

// GetConsoleOk returns a tuple with the Console field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NetworkElement) GetConsoleOk() ([]ConsoleConsoleConfigRelationship, bool) {
	if o == nil || o.Console == nil {
		return nil, false
	}
	return o.Console, true
}

// HasConsole returns a boolean if a field has been set.
func (o *NetworkElement) HasConsole() bool {
	if o != nil && o.Console != nil {
		return true
	}

	return false
}

// SetConsole gets a reference to the given []ConsoleConsoleConfigRelationship and assigns it to the Console field.
func (o *NetworkElement) SetConsole(v []ConsoleConsoleConfigRelationship) {
	o.Console = v
}

// GetDns returns the Dns field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NetworkElement) GetDns() []NetworkDnsRelationship {
	if o == nil {
		var ret []NetworkDnsRelationship
		return ret
	}
	return o.Dns
}

// GetDnsOk returns a tuple with the Dns field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NetworkElement) GetDnsOk() ([]NetworkDnsRelationship, bool) {
	if o == nil || o.Dns == nil {
		return nil, false
	}
	return o.Dns, true
}

// HasDns returns a boolean if a field has been set.
func (o *NetworkElement) HasDns() bool {
	if o != nil && o.Dns != nil {
		return true
	}

	return false
}

// SetDns gets a reference to the given []NetworkDnsRelationship and assigns it to the Dns field.
func (o *NetworkElement) SetDns(v []NetworkDnsRelationship) {
	o.Dns = v
}

// GetEtherPortChannels returns the EtherPortChannels field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NetworkElement) GetEtherPortChannels() []EtherPortChannelRelationship {
	if o == nil {
		var ret []EtherPortChannelRelationship
		return ret
	}
	return o.EtherPortChannels
}

// GetEtherPortChannelsOk returns a tuple with the EtherPortChannels field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NetworkElement) GetEtherPortChannelsOk() ([]EtherPortChannelRelationship, bool) {
	if o == nil || o.EtherPortChannels == nil {
		return nil, false
	}
	return o.EtherPortChannels, true
}

// HasEtherPortChannels returns a boolean if a field has been set.
func (o *NetworkElement) HasEtherPortChannels() bool {
	if o != nil && o.EtherPortChannels != nil {
		return true
	}

	return false
}

// SetEtherPortChannels gets a reference to the given []EtherPortChannelRelationship and assigns it to the EtherPortChannels field.
func (o *NetworkElement) SetEtherPortChannels(v []EtherPortChannelRelationship) {
	o.EtherPortChannels = v
}

// GetFanmodules returns the Fanmodules field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NetworkElement) GetFanmodules() []EquipmentFanModuleRelationship {
	if o == nil {
		var ret []EquipmentFanModuleRelationship
		return ret
	}
	return o.Fanmodules
}

// GetFanmodulesOk returns a tuple with the Fanmodules field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NetworkElement) GetFanmodulesOk() ([]EquipmentFanModuleRelationship, bool) {
	if o == nil || o.Fanmodules == nil {
		return nil, false
	}
	return o.Fanmodules, true
}

// HasFanmodules returns a boolean if a field has been set.
func (o *NetworkElement) HasFanmodules() bool {
	if o != nil && o.Fanmodules != nil {
		return true
	}

	return false
}

// SetFanmodules gets a reference to the given []EquipmentFanModuleRelationship and assigns it to the Fanmodules field.
func (o *NetworkElement) SetFanmodules(v []EquipmentFanModuleRelationship) {
	o.Fanmodules = v
}

// GetFcPortChannels returns the FcPortChannels field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NetworkElement) GetFcPortChannels() []FcPortChannelRelationship {
	if o == nil {
		var ret []FcPortChannelRelationship
		return ret
	}
	return o.FcPortChannels
}

// GetFcPortChannelsOk returns a tuple with the FcPortChannels field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NetworkElement) GetFcPortChannelsOk() ([]FcPortChannelRelationship, bool) {
	if o == nil || o.FcPortChannels == nil {
		return nil, false
	}
	return o.FcPortChannels, true
}

// HasFcPortChannels returns a boolean if a field has been set.
func (o *NetworkElement) HasFcPortChannels() bool {
	if o != nil && o.FcPortChannels != nil {
		return true
	}

	return false
}

// SetFcPortChannels gets a reference to the given []FcPortChannelRelationship and assigns it to the FcPortChannels field.
func (o *NetworkElement) SetFcPortChannels(v []FcPortChannelRelationship) {
	o.FcPortChannels = v
}

// GetFeatureControl returns the FeatureControl field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NetworkElement) GetFeatureControl() []NetworkFeatureControlRelationship {
	if o == nil {
		var ret []NetworkFeatureControlRelationship
		return ret
	}
	return o.FeatureControl
}

// GetFeatureControlOk returns a tuple with the FeatureControl field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NetworkElement) GetFeatureControlOk() ([]NetworkFeatureControlRelationship, bool) {
	if o == nil || o.FeatureControl == nil {
		return nil, false
	}
	return o.FeatureControl, true
}

// HasFeatureControl returns a boolean if a field has been set.
func (o *NetworkElement) HasFeatureControl() bool {
	if o != nil && o.FeatureControl != nil {
		return true
	}

	return false
}

// SetFeatureControl gets a reference to the given []NetworkFeatureControlRelationship and assigns it to the FeatureControl field.
func (o *NetworkElement) SetFeatureControl(v []NetworkFeatureControlRelationship) {
	o.FeatureControl = v
}

// GetInterfaceList returns the InterfaceList field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NetworkElement) GetInterfaceList() []NetworkInterfaceListRelationship {
	if o == nil {
		var ret []NetworkInterfaceListRelationship
		return ret
	}
	return o.InterfaceList
}

// GetInterfaceListOk returns a tuple with the InterfaceList field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NetworkElement) GetInterfaceListOk() ([]NetworkInterfaceListRelationship, bool) {
	if o == nil || o.InterfaceList == nil {
		return nil, false
	}
	return o.InterfaceList, true
}

// HasInterfaceList returns a boolean if a field has been set.
func (o *NetworkElement) HasInterfaceList() bool {
	if o != nil && o.InterfaceList != nil {
		return true
	}

	return false
}

// SetInterfaceList gets a reference to the given []NetworkInterfaceListRelationship and assigns it to the InterfaceList field.
func (o *NetworkElement) SetInterfaceList(v []NetworkInterfaceListRelationship) {
	o.InterfaceList = v
}

// GetInventoryDeviceInfo returns the InventoryDeviceInfo field value if set, zero value otherwise.
func (o *NetworkElement) GetInventoryDeviceInfo() InventoryDeviceInfoRelationship {
	if o == nil || o.InventoryDeviceInfo == nil {
		var ret InventoryDeviceInfoRelationship
		return ret
	}
	return *o.InventoryDeviceInfo
}

// GetInventoryDeviceInfoOk returns a tuple with the InventoryDeviceInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkElement) GetInventoryDeviceInfoOk() (*InventoryDeviceInfoRelationship, bool) {
	if o == nil || o.InventoryDeviceInfo == nil {
		return nil, false
	}
	return o.InventoryDeviceInfo, true
}

// HasInventoryDeviceInfo returns a boolean if a field has been set.
func (o *NetworkElement) HasInventoryDeviceInfo() bool {
	if o != nil && o.InventoryDeviceInfo != nil {
		return true
	}

	return false
}

// SetInventoryDeviceInfo gets a reference to the given InventoryDeviceInfoRelationship and assigns it to the InventoryDeviceInfo field.
func (o *NetworkElement) SetInventoryDeviceInfo(v InventoryDeviceInfoRelationship) {
	o.InventoryDeviceInfo = &v
}

// GetLicenseFile returns the LicenseFile field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NetworkElement) GetLicenseFile() []NetworkLicenseFileRelationship {
	if o == nil {
		var ret []NetworkLicenseFileRelationship
		return ret
	}
	return o.LicenseFile
}

// GetLicenseFileOk returns a tuple with the LicenseFile field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NetworkElement) GetLicenseFileOk() ([]NetworkLicenseFileRelationship, bool) {
	if o == nil || o.LicenseFile == nil {
		return nil, false
	}
	return o.LicenseFile, true
}

// HasLicenseFile returns a boolean if a field has been set.
func (o *NetworkElement) HasLicenseFile() bool {
	if o != nil && o.LicenseFile != nil {
		return true
	}

	return false
}

// SetLicenseFile gets a reference to the given []NetworkLicenseFileRelationship and assigns it to the LicenseFile field.
func (o *NetworkElement) SetLicenseFile(v []NetworkLicenseFileRelationship) {
	o.LicenseFile = v
}

// GetLldpNeighbor returns the LldpNeighbor field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NetworkElement) GetLldpNeighbor() []NetworkDiscoveredNeighborRelationship {
	if o == nil {
		var ret []NetworkDiscoveredNeighborRelationship
		return ret
	}
	return o.LldpNeighbor
}

// GetLldpNeighborOk returns a tuple with the LldpNeighbor field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NetworkElement) GetLldpNeighborOk() ([]NetworkDiscoveredNeighborRelationship, bool) {
	if o == nil || o.LldpNeighbor == nil {
		return nil, false
	}
	return o.LldpNeighbor, true
}

// HasLldpNeighbor returns a boolean if a field has been set.
func (o *NetworkElement) HasLldpNeighbor() bool {
	if o != nil && o.LldpNeighbor != nil {
		return true
	}

	return false
}

// SetLldpNeighbor gets a reference to the given []NetworkDiscoveredNeighborRelationship and assigns it to the LldpNeighbor field.
func (o *NetworkElement) SetLldpNeighbor(v []NetworkDiscoveredNeighborRelationship) {
	o.LldpNeighbor = v
}

// GetLocatorLed returns the LocatorLed field value if set, zero value otherwise.
func (o *NetworkElement) GetLocatorLed() EquipmentLocatorLedRelationship {
	if o == nil || o.LocatorLed == nil {
		var ret EquipmentLocatorLedRelationship
		return ret
	}
	return *o.LocatorLed
}

// GetLocatorLedOk returns a tuple with the LocatorLed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkElement) GetLocatorLedOk() (*EquipmentLocatorLedRelationship, bool) {
	if o == nil || o.LocatorLed == nil {
		return nil, false
	}
	return o.LocatorLed, true
}

// HasLocatorLed returns a boolean if a field has been set.
func (o *NetworkElement) HasLocatorLed() bool {
	if o != nil && o.LocatorLed != nil {
		return true
	}

	return false
}

// SetLocatorLed gets a reference to the given EquipmentLocatorLedRelationship and assigns it to the LocatorLed field.
func (o *NetworkElement) SetLocatorLed(v EquipmentLocatorLedRelationship) {
	o.LocatorLed = &v
}

// GetManagementController returns the ManagementController field value if set, zero value otherwise.
func (o *NetworkElement) GetManagementController() ManagementControllerRelationship {
	if o == nil || o.ManagementController == nil {
		var ret ManagementControllerRelationship
		return ret
	}
	return *o.ManagementController
}

// GetManagementControllerOk returns a tuple with the ManagementController field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkElement) GetManagementControllerOk() (*ManagementControllerRelationship, bool) {
	if o == nil || o.ManagementController == nil {
		return nil, false
	}
	return o.ManagementController, true
}

// HasManagementController returns a boolean if a field has been set.
func (o *NetworkElement) HasManagementController() bool {
	if o != nil && o.ManagementController != nil {
		return true
	}

	return false
}

// SetManagementController gets a reference to the given ManagementControllerRelationship and assigns it to the ManagementController field.
func (o *NetworkElement) SetManagementController(v ManagementControllerRelationship) {
	o.ManagementController = &v
}

// GetManagementEntity returns the ManagementEntity field value if set, zero value otherwise.
func (o *NetworkElement) GetManagementEntity() ManagementEntityRelationship {
	if o == nil || o.ManagementEntity == nil {
		var ret ManagementEntityRelationship
		return ret
	}
	return *o.ManagementEntity
}

// GetManagementEntityOk returns a tuple with the ManagementEntity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkElement) GetManagementEntityOk() (*ManagementEntityRelationship, bool) {
	if o == nil || o.ManagementEntity == nil {
		return nil, false
	}
	return o.ManagementEntity, true
}

// HasManagementEntity returns a boolean if a field has been set.
func (o *NetworkElement) HasManagementEntity() bool {
	if o != nil && o.ManagementEntity != nil {
		return true
	}

	return false
}

// SetManagementEntity gets a reference to the given ManagementEntityRelationship and assigns it to the ManagementEntity field.
func (o *NetworkElement) SetManagementEntity(v ManagementEntityRelationship) {
	o.ManagementEntity = &v
}

// GetNetworkFcZoneInfo returns the NetworkFcZoneInfo field value if set, zero value otherwise.
func (o *NetworkElement) GetNetworkFcZoneInfo() NetworkFcZoneInfoRelationship {
	if o == nil || o.NetworkFcZoneInfo == nil {
		var ret NetworkFcZoneInfoRelationship
		return ret
	}
	return *o.NetworkFcZoneInfo
}

// GetNetworkFcZoneInfoOk returns a tuple with the NetworkFcZoneInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkElement) GetNetworkFcZoneInfoOk() (*NetworkFcZoneInfoRelationship, bool) {
	if o == nil || o.NetworkFcZoneInfo == nil {
		return nil, false
	}
	return o.NetworkFcZoneInfo, true
}

// HasNetworkFcZoneInfo returns a boolean if a field has been set.
func (o *NetworkElement) HasNetworkFcZoneInfo() bool {
	if o != nil && o.NetworkFcZoneInfo != nil {
		return true
	}

	return false
}

// SetNetworkFcZoneInfo gets a reference to the given NetworkFcZoneInfoRelationship and assigns it to the NetworkFcZoneInfo field.
func (o *NetworkElement) SetNetworkFcZoneInfo(v NetworkFcZoneInfoRelationship) {
	o.NetworkFcZoneInfo = &v
}

// GetNetworkVlanPortInfo returns the NetworkVlanPortInfo field value if set, zero value otherwise.
func (o *NetworkElement) GetNetworkVlanPortInfo() NetworkVlanPortInfoRelationship {
	if o == nil || o.NetworkVlanPortInfo == nil {
		var ret NetworkVlanPortInfoRelationship
		return ret
	}
	return *o.NetworkVlanPortInfo
}

// GetNetworkVlanPortInfoOk returns a tuple with the NetworkVlanPortInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkElement) GetNetworkVlanPortInfoOk() (*NetworkVlanPortInfoRelationship, bool) {
	if o == nil || o.NetworkVlanPortInfo == nil {
		return nil, false
	}
	return o.NetworkVlanPortInfo, true
}

// HasNetworkVlanPortInfo returns a boolean if a field has been set.
func (o *NetworkElement) HasNetworkVlanPortInfo() bool {
	if o != nil && o.NetworkVlanPortInfo != nil {
		return true
	}

	return false
}

// SetNetworkVlanPortInfo gets a reference to the given NetworkVlanPortInfoRelationship and assigns it to the NetworkVlanPortInfo field.
func (o *NetworkElement) SetNetworkVlanPortInfo(v NetworkVlanPortInfoRelationship) {
	o.NetworkVlanPortInfo = &v
}

// GetNtpServer returns the NtpServer field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NetworkElement) GetNtpServer() []NtpNtpServerRelationship {
	if o == nil {
		var ret []NtpNtpServerRelationship
		return ret
	}
	return o.NtpServer
}

// GetNtpServerOk returns a tuple with the NtpServer field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NetworkElement) GetNtpServerOk() ([]NtpNtpServerRelationship, bool) {
	if o == nil || o.NtpServer == nil {
		return nil, false
	}
	return o.NtpServer, true
}

// HasNtpServer returns a boolean if a field has been set.
func (o *NetworkElement) HasNtpServer() bool {
	if o != nil && o.NtpServer != nil {
		return true
	}

	return false
}

// SetNtpServer gets a reference to the given []NtpNtpServerRelationship and assigns it to the NtpServer field.
func (o *NetworkElement) SetNtpServer(v []NtpNtpServerRelationship) {
	o.NtpServer = v
}

// GetPortMacBindings returns the PortMacBindings field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NetworkElement) GetPortMacBindings() []PortMacBindingRelationship {
	if o == nil {
		var ret []PortMacBindingRelationship
		return ret
	}
	return o.PortMacBindings
}

// GetPortMacBindingsOk returns a tuple with the PortMacBindings field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NetworkElement) GetPortMacBindingsOk() ([]PortMacBindingRelationship, bool) {
	if o == nil || o.PortMacBindings == nil {
		return nil, false
	}
	return o.PortMacBindings, true
}

// HasPortMacBindings returns a boolean if a field has been set.
func (o *NetworkElement) HasPortMacBindings() bool {
	if o != nil && o.PortMacBindings != nil {
		return true
	}

	return false
}

// SetPortMacBindings gets a reference to the given []PortMacBindingRelationship and assigns it to the PortMacBindings field.
func (o *NetworkElement) SetPortMacBindings(v []PortMacBindingRelationship) {
	o.PortMacBindings = v
}

// GetProcessorUnit returns the ProcessorUnit field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NetworkElement) GetProcessorUnit() []ProcessorUnitRelationship {
	if o == nil {
		var ret []ProcessorUnitRelationship
		return ret
	}
	return o.ProcessorUnit
}

// GetProcessorUnitOk returns a tuple with the ProcessorUnit field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NetworkElement) GetProcessorUnitOk() ([]ProcessorUnitRelationship, bool) {
	if o == nil || o.ProcessorUnit == nil {
		return nil, false
	}
	return o.ProcessorUnit, true
}

// HasProcessorUnit returns a boolean if a field has been set.
func (o *NetworkElement) HasProcessorUnit() bool {
	if o != nil && o.ProcessorUnit != nil {
		return true
	}

	return false
}

// SetProcessorUnit gets a reference to the given []ProcessorUnitRelationship and assigns it to the ProcessorUnit field.
func (o *NetworkElement) SetProcessorUnit(v []ProcessorUnitRelationship) {
	o.ProcessorUnit = v
}

// GetPsus returns the Psus field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NetworkElement) GetPsus() []EquipmentPsuRelationship {
	if o == nil {
		var ret []EquipmentPsuRelationship
		return ret
	}
	return o.Psus
}

// GetPsusOk returns a tuple with the Psus field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NetworkElement) GetPsusOk() ([]EquipmentPsuRelationship, bool) {
	if o == nil || o.Psus == nil {
		return nil, false
	}
	return o.Psus, true
}

// HasPsus returns a boolean if a field has been set.
func (o *NetworkElement) HasPsus() bool {
	if o != nil && o.Psus != nil {
		return true
	}

	return false
}

// SetPsus gets a reference to the given []EquipmentPsuRelationship and assigns it to the Psus field.
func (o *NetworkElement) SetPsus(v []EquipmentPsuRelationship) {
	o.Psus = v
}

// GetRegisteredDevice returns the RegisteredDevice field value if set, zero value otherwise.
func (o *NetworkElement) GetRegisteredDevice() AssetDeviceRegistrationRelationship {
	if o == nil || o.RegisteredDevice == nil {
		var ret AssetDeviceRegistrationRelationship
		return ret
	}
	return *o.RegisteredDevice
}

// GetRegisteredDeviceOk returns a tuple with the RegisteredDevice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkElement) GetRegisteredDeviceOk() (*AssetDeviceRegistrationRelationship, bool) {
	if o == nil || o.RegisteredDevice == nil {
		return nil, false
	}
	return o.RegisteredDevice, true
}

// HasRegisteredDevice returns a boolean if a field has been set.
func (o *NetworkElement) HasRegisteredDevice() bool {
	if o != nil && o.RegisteredDevice != nil {
		return true
	}

	return false
}

// SetRegisteredDevice gets a reference to the given AssetDeviceRegistrationRelationship and assigns it to the RegisteredDevice field.
func (o *NetworkElement) SetRegisteredDevice(v AssetDeviceRegistrationRelationship) {
	o.RegisteredDevice = &v
}

// GetSensors returns the Sensors field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NetworkElement) GetSensors() []EquipmentSensorRelationship {
	if o == nil {
		var ret []EquipmentSensorRelationship
		return ret
	}
	return o.Sensors
}

// GetSensorsOk returns a tuple with the Sensors field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NetworkElement) GetSensorsOk() ([]EquipmentSensorRelationship, bool) {
	if o == nil || o.Sensors == nil {
		return nil, false
	}
	return o.Sensors, true
}

// HasSensors returns a boolean if a field has been set.
func (o *NetworkElement) HasSensors() bool {
	if o != nil && o.Sensors != nil {
		return true
	}

	return false
}

// SetSensors gets a reference to the given []EquipmentSensorRelationship and assigns it to the Sensors field.
func (o *NetworkElement) SetSensors(v []EquipmentSensorRelationship) {
	o.Sensors = v
}

// GetStorageItems returns the StorageItems field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NetworkElement) GetStorageItems() []StorageItemRelationship {
	if o == nil {
		var ret []StorageItemRelationship
		return ret
	}
	return o.StorageItems
}

// GetStorageItemsOk returns a tuple with the StorageItems field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NetworkElement) GetStorageItemsOk() ([]StorageItemRelationship, bool) {
	if o == nil || o.StorageItems == nil {
		return nil, false
	}
	return o.StorageItems, true
}

// HasStorageItems returns a boolean if a field has been set.
func (o *NetworkElement) HasStorageItems() bool {
	if o != nil && o.StorageItems != nil {
		return true
	}

	return false
}

// SetStorageItems gets a reference to the given []StorageItemRelationship and assigns it to the StorageItems field.
func (o *NetworkElement) SetStorageItems(v []StorageItemRelationship) {
	o.StorageItems = v
}

// GetSupervisorCard returns the SupervisorCard field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NetworkElement) GetSupervisorCard() []NetworkSupervisorCardRelationship {
	if o == nil {
		var ret []NetworkSupervisorCardRelationship
		return ret
	}
	return o.SupervisorCard
}

// GetSupervisorCardOk returns a tuple with the SupervisorCard field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NetworkElement) GetSupervisorCardOk() ([]NetworkSupervisorCardRelationship, bool) {
	if o == nil || o.SupervisorCard == nil {
		return nil, false
	}
	return o.SupervisorCard, true
}

// HasSupervisorCard returns a boolean if a field has been set.
func (o *NetworkElement) HasSupervisorCard() bool {
	if o != nil && o.SupervisorCard != nil {
		return true
	}

	return false
}

// SetSupervisorCard gets a reference to the given []NetworkSupervisorCardRelationship and assigns it to the SupervisorCard field.
func (o *NetworkElement) SetSupervisorCard(v []NetworkSupervisorCardRelationship) {
	o.SupervisorCard = v
}

// GetTopSystem returns the TopSystem field value if set, zero value otherwise.
func (o *NetworkElement) GetTopSystem() TopSystemRelationship {
	if o == nil || o.TopSystem == nil {
		var ret TopSystemRelationship
		return ret
	}
	return *o.TopSystem
}

// GetTopSystemOk returns a tuple with the TopSystem field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkElement) GetTopSystemOk() (*TopSystemRelationship, bool) {
	if o == nil || o.TopSystem == nil {
		return nil, false
	}
	return o.TopSystem, true
}

// HasTopSystem returns a boolean if a field has been set.
func (o *NetworkElement) HasTopSystem() bool {
	if o != nil && o.TopSystem != nil {
		return true
	}

	return false
}

// SetTopSystem gets a reference to the given TopSystemRelationship and assigns it to the TopSystem field.
func (o *NetworkElement) SetTopSystem(v TopSystemRelationship) {
	o.TopSystem = &v
}

// GetUcsmRunningFirmware returns the UcsmRunningFirmware field value if set, zero value otherwise.
func (o *NetworkElement) GetUcsmRunningFirmware() FirmwareRunningFirmwareRelationship {
	if o == nil || o.UcsmRunningFirmware == nil {
		var ret FirmwareRunningFirmwareRelationship
		return ret
	}
	return *o.UcsmRunningFirmware
}

// GetUcsmRunningFirmwareOk returns a tuple with the UcsmRunningFirmware field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkElement) GetUcsmRunningFirmwareOk() (*FirmwareRunningFirmwareRelationship, bool) {
	if o == nil || o.UcsmRunningFirmware == nil {
		return nil, false
	}
	return o.UcsmRunningFirmware, true
}

// HasUcsmRunningFirmware returns a boolean if a field has been set.
func (o *NetworkElement) HasUcsmRunningFirmware() bool {
	if o != nil && o.UcsmRunningFirmware != nil {
		return true
	}

	return false
}

// SetUcsmRunningFirmware gets a reference to the given FirmwareRunningFirmwareRelationship and assigns it to the UcsmRunningFirmware field.
func (o *NetworkElement) SetUcsmRunningFirmware(v FirmwareRunningFirmwareRelationship) {
	o.UcsmRunningFirmware = &v
}

// GetVeths returns the Veths field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NetworkElement) GetVeths() []NetworkVethernetRelationship {
	if o == nil {
		var ret []NetworkVethernetRelationship
		return ret
	}
	return o.Veths
}

// GetVethsOk returns a tuple with the Veths field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NetworkElement) GetVethsOk() ([]NetworkVethernetRelationship, bool) {
	if o == nil || o.Veths == nil {
		return nil, false
	}
	return o.Veths, true
}

// HasVeths returns a boolean if a field has been set.
func (o *NetworkElement) HasVeths() bool {
	if o != nil && o.Veths != nil {
		return true
	}

	return false
}

// SetVeths gets a reference to the given []NetworkVethernetRelationship and assigns it to the Veths field.
func (o *NetworkElement) SetVeths(v []NetworkVethernetRelationship) {
	o.Veths = v
}

// GetVfcs returns the Vfcs field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NetworkElement) GetVfcs() []NetworkVfcRelationship {
	if o == nil {
		var ret []NetworkVfcRelationship
		return ret
	}
	return o.Vfcs
}

// GetVfcsOk returns a tuple with the Vfcs field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NetworkElement) GetVfcsOk() ([]NetworkVfcRelationship, bool) {
	if o == nil || o.Vfcs == nil {
		return nil, false
	}
	return o.Vfcs, true
}

// HasVfcs returns a boolean if a field has been set.
func (o *NetworkElement) HasVfcs() bool {
	if o != nil && o.Vfcs != nil {
		return true
	}

	return false
}

// SetVfcs gets a reference to the given []NetworkVfcRelationship and assigns it to the Vfcs field.
func (o *NetworkElement) SetVfcs(v []NetworkVfcRelationship) {
	o.Vfcs = v
}

// GetVpcDomain returns the VpcDomain field value if set, zero value otherwise.
func (o *NetworkElement) GetVpcDomain() NetworkVpcDomainRelationship {
	if o == nil || o.VpcDomain == nil {
		var ret NetworkVpcDomainRelationship
		return ret
	}
	return *o.VpcDomain
}

// GetVpcDomainOk returns a tuple with the VpcDomain field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkElement) GetVpcDomainOk() (*NetworkVpcDomainRelationship, bool) {
	if o == nil || o.VpcDomain == nil {
		return nil, false
	}
	return o.VpcDomain, true
}

// HasVpcDomain returns a boolean if a field has been set.
func (o *NetworkElement) HasVpcDomain() bool {
	if o != nil && o.VpcDomain != nil {
		return true
	}

	return false
}

// SetVpcDomain gets a reference to the given NetworkVpcDomainRelationship and assigns it to the VpcDomain field.
func (o *NetworkElement) SetVpcDomain(v NetworkVpcDomainRelationship) {
	o.VpcDomain = &v
}

// GetVpcMember returns the VpcMember field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NetworkElement) GetVpcMember() []NetworkVpcMemberRelationship {
	if o == nil {
		var ret []NetworkVpcMemberRelationship
		return ret
	}
	return o.VpcMember
}

// GetVpcMemberOk returns a tuple with the VpcMember field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NetworkElement) GetVpcMemberOk() ([]NetworkVpcMemberRelationship, bool) {
	if o == nil || o.VpcMember == nil {
		return nil, false
	}
	return o.VpcMember, true
}

// HasVpcMember returns a boolean if a field has been set.
func (o *NetworkElement) HasVpcMember() bool {
	if o != nil && o.VpcMember != nil {
		return true
	}

	return false
}

// SetVpcMember gets a reference to the given []NetworkVpcMemberRelationship and assigns it to the VpcMember field.
func (o *NetworkElement) SetVpcMember(v []NetworkVpcMemberRelationship) {
	o.VpcMember = v
}

// GetVpcPeer returns the VpcPeer field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NetworkElement) GetVpcPeer() []NetworkVpcPeerRelationship {
	if o == nil {
		var ret []NetworkVpcPeerRelationship
		return ret
	}
	return o.VpcPeer
}

// GetVpcPeerOk returns a tuple with the VpcPeer field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NetworkElement) GetVpcPeerOk() ([]NetworkVpcPeerRelationship, bool) {
	if o == nil || o.VpcPeer == nil {
		return nil, false
	}
	return o.VpcPeer, true
}

// HasVpcPeer returns a boolean if a field has been set.
func (o *NetworkElement) HasVpcPeer() bool {
	if o != nil && o.VpcPeer != nil {
		return true
	}

	return false
}

// SetVpcPeer gets a reference to the given []NetworkVpcPeerRelationship and assigns it to the VpcPeer field.
func (o *NetworkElement) SetVpcPeer(v []NetworkVpcPeerRelationship) {
	o.VpcPeer = v
}

// GetVrf returns the Vrf field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NetworkElement) GetVrf() []NetworkVrfRelationship {
	if o == nil {
		var ret []NetworkVrfRelationship
		return ret
	}
	return o.Vrf
}

// GetVrfOk returns a tuple with the Vrf field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NetworkElement) GetVrfOk() ([]NetworkVrfRelationship, bool) {
	if o == nil || o.Vrf == nil {
		return nil, false
	}
	return o.Vrf, true
}

// HasVrf returns a boolean if a field has been set.
func (o *NetworkElement) HasVrf() bool {
	if o != nil && o.Vrf != nil {
		return true
	}

	return false
}

// SetVrf gets a reference to the given []NetworkVrfRelationship and assigns it to the Vrf field.
func (o *NetworkElement) SetVrf(v []NetworkVrfRelationship) {
	o.Vrf = v
}

func (o NetworkElement) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	serializedEquipmentBase, errEquipmentBase := json.Marshal(o.EquipmentBase)
	if errEquipmentBase != nil {
		return []byte{}, errEquipmentBase
	}
	errEquipmentBase = json.Unmarshal([]byte(serializedEquipmentBase), &toSerialize)
	if errEquipmentBase != nil {
		return []byte{}, errEquipmentBase
	}
	if true {
		toSerialize["ClassId"] = o.ClassId
	}
	if true {
		toSerialize["ObjectType"] = o.ObjectType
	}
	if o.AdminEvacState != nil {
		toSerialize["AdminEvacState"] = o.AdminEvacState
	}
	if o.AdminInbandInterfaceState != nil {
		toSerialize["AdminInbandInterfaceState"] = o.AdminInbandInterfaceState
	}
	if o.AlarmSummary.IsSet() {
		toSerialize["AlarmSummary"] = o.AlarmSummary.Get()
	}
	if o.AvailableMemory != nil {
		toSerialize["AvailableMemory"] = o.AvailableMemory
	}
	if o.Chassis != nil {
		toSerialize["Chassis"] = o.Chassis
	}
	if o.ConfModTs != nil {
		toSerialize["ConfModTs"] = o.ConfModTs
	}
	if o.ConfModTsBackup != nil {
		toSerialize["ConfModTsBackup"] = o.ConfModTsBackup
	}
	if o.ConnectionStatus != nil {
		toSerialize["ConnectionStatus"] = o.ConnectionStatus
	}
	if o.DefaultDomain != nil {
		toSerialize["DefaultDomain"] = o.DefaultDomain
	}
	if o.EthernetMode != nil {
		toSerialize["EthernetMode"] = o.EthernetMode
	}
	if o.EthernetSwitchingMode != nil {
		toSerialize["EthernetSwitchingMode"] = o.EthernetSwitchingMode
	}
	if o.FaultSummary != nil {
		toSerialize["FaultSummary"] = o.FaultSummary
	}
	if o.FcMode != nil {
		toSerialize["FcMode"] = o.FcMode
	}
	if o.FcSwitchingMode != nil {
		toSerialize["FcSwitchingMode"] = o.FcSwitchingMode
	}
	if o.InbandIpAddress != nil {
		toSerialize["InbandIpAddress"] = o.InbandIpAddress
	}
	if o.InbandIpGateway != nil {
		toSerialize["InbandIpGateway"] = o.InbandIpGateway
	}
	if o.InbandIpMask != nil {
		toSerialize["InbandIpMask"] = o.InbandIpMask
	}
	if o.InbandVlan != nil {
		toSerialize["InbandVlan"] = o.InbandVlan
	}
	if o.InterClusterLinkState != nil {
		toSerialize["InterClusterLinkState"] = o.InterClusterLinkState
	}
	if o.ManagementMode != nil {
		toSerialize["ManagementMode"] = o.ManagementMode
	}
	if o.OperEvacState != nil {
		toSerialize["OperEvacState"] = o.OperEvacState
	}
	if o.Operability != nil {
		toSerialize["Operability"] = o.Operability
	}
	if o.OutOfBandIpAddress != nil {
		toSerialize["OutOfBandIpAddress"] = o.OutOfBandIpAddress
	}
	if o.OutOfBandIpGateway != nil {
		toSerialize["OutOfBandIpGateway"] = o.OutOfBandIpGateway
	}
	if o.OutOfBandIpMask != nil {
		toSerialize["OutOfBandIpMask"] = o.OutOfBandIpMask
	}
	if o.OutOfBandIpv4Address != nil {
		toSerialize["OutOfBandIpv4Address"] = o.OutOfBandIpv4Address
	}
	if o.OutOfBandIpv4Gateway != nil {
		toSerialize["OutOfBandIpv4Gateway"] = o.OutOfBandIpv4Gateway
	}
	if o.OutOfBandIpv4Mask != nil {
		toSerialize["OutOfBandIpv4Mask"] = o.OutOfBandIpv4Mask
	}
	if o.OutOfBandIpv6Address != nil {
		toSerialize["OutOfBandIpv6Address"] = o.OutOfBandIpv6Address
	}
	if o.OutOfBandIpv6Gateway != nil {
		toSerialize["OutOfBandIpv6Gateway"] = o.OutOfBandIpv6Gateway
	}
	if o.OutOfBandIpv6Prefix != nil {
		toSerialize["OutOfBandIpv6Prefix"] = o.OutOfBandIpv6Prefix
	}
	if o.OutOfBandMac != nil {
		toSerialize["OutOfBandMac"] = o.OutOfBandMac
	}
	if o.PartNumber != nil {
		toSerialize["PartNumber"] = o.PartNumber
	}
	if o.ReservedVlanStartId != nil {
		toSerialize["ReservedVlanStartId"] = o.ReservedVlanStartId
	}
	if o.Status != nil {
		toSerialize["Status"] = o.Status
	}
	if o.SwitchId != nil {
		toSerialize["SwitchId"] = o.SwitchId
	}
	if o.SwitchType != nil {
		toSerialize["SwitchType"] = o.SwitchType
	}
	if o.SystemUpTime != nil {
		toSerialize["SystemUpTime"] = o.SystemUpTime
	}
	if o.Thermal != nil {
		toSerialize["Thermal"] = o.Thermal
	}
	if o.TotalMemory != nil {
		toSerialize["TotalMemory"] = o.TotalMemory
	}
	if o.Version != nil {
		toSerialize["Version"] = o.Version
	}
	if o.Cards != nil {
		toSerialize["Cards"] = o.Cards
	}
	if o.CdpNeighbor != nil {
		toSerialize["CdpNeighbor"] = o.CdpNeighbor
	}
	if o.Console != nil {
		toSerialize["Console"] = o.Console
	}
	if o.Dns != nil {
		toSerialize["Dns"] = o.Dns
	}
	if o.EtherPortChannels != nil {
		toSerialize["EtherPortChannels"] = o.EtherPortChannels
	}
	if o.Fanmodules != nil {
		toSerialize["Fanmodules"] = o.Fanmodules
	}
	if o.FcPortChannels != nil {
		toSerialize["FcPortChannels"] = o.FcPortChannels
	}
	if o.FeatureControl != nil {
		toSerialize["FeatureControl"] = o.FeatureControl
	}
	if o.InterfaceList != nil {
		toSerialize["InterfaceList"] = o.InterfaceList
	}
	if o.InventoryDeviceInfo != nil {
		toSerialize["InventoryDeviceInfo"] = o.InventoryDeviceInfo
	}
	if o.LicenseFile != nil {
		toSerialize["LicenseFile"] = o.LicenseFile
	}
	if o.LldpNeighbor != nil {
		toSerialize["LldpNeighbor"] = o.LldpNeighbor
	}
	if o.LocatorLed != nil {
		toSerialize["LocatorLed"] = o.LocatorLed
	}
	if o.ManagementController != nil {
		toSerialize["ManagementController"] = o.ManagementController
	}
	if o.ManagementEntity != nil {
		toSerialize["ManagementEntity"] = o.ManagementEntity
	}
	if o.NetworkFcZoneInfo != nil {
		toSerialize["NetworkFcZoneInfo"] = o.NetworkFcZoneInfo
	}
	if o.NetworkVlanPortInfo != nil {
		toSerialize["NetworkVlanPortInfo"] = o.NetworkVlanPortInfo
	}
	if o.NtpServer != nil {
		toSerialize["NtpServer"] = o.NtpServer
	}
	if o.PortMacBindings != nil {
		toSerialize["PortMacBindings"] = o.PortMacBindings
	}
	if o.ProcessorUnit != nil {
		toSerialize["ProcessorUnit"] = o.ProcessorUnit
	}
	if o.Psus != nil {
		toSerialize["Psus"] = o.Psus
	}
	if o.RegisteredDevice != nil {
		toSerialize["RegisteredDevice"] = o.RegisteredDevice
	}
	if o.Sensors != nil {
		toSerialize["Sensors"] = o.Sensors
	}
	if o.StorageItems != nil {
		toSerialize["StorageItems"] = o.StorageItems
	}
	if o.SupervisorCard != nil {
		toSerialize["SupervisorCard"] = o.SupervisorCard
	}
	if o.TopSystem != nil {
		toSerialize["TopSystem"] = o.TopSystem
	}
	if o.UcsmRunningFirmware != nil {
		toSerialize["UcsmRunningFirmware"] = o.UcsmRunningFirmware
	}
	if o.Veths != nil {
		toSerialize["Veths"] = o.Veths
	}
	if o.Vfcs != nil {
		toSerialize["Vfcs"] = o.Vfcs
	}
	if o.VpcDomain != nil {
		toSerialize["VpcDomain"] = o.VpcDomain
	}
	if o.VpcMember != nil {
		toSerialize["VpcMember"] = o.VpcMember
	}
	if o.VpcPeer != nil {
		toSerialize["VpcPeer"] = o.VpcPeer
	}
	if o.Vrf != nil {
		toSerialize["Vrf"] = o.Vrf
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *NetworkElement) UnmarshalJSON(bytes []byte) (err error) {
	type NetworkElementWithoutEmbeddedStruct struct {
		// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.
		ClassId string `json:"ClassId"`
		// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
		ObjectType string `json:"ObjectType"`
		// Administratively configured state of Fabric Evacuation feature, for this switch.
		AdminEvacState *string `json:"AdminEvacState,omitempty"`
		// The administrative state of the network Element inband management interface.
		AdminInbandInterfaceState *string                     `json:"AdminInbandInterfaceState,omitempty"`
		AlarmSummary              NullableComputeAlarmSummary `json:"AlarmSummary,omitempty"`
		// Available memory (un-used) on this switch platform.
		AvailableMemory *string `json:"AvailableMemory,omitempty"`
		// Chassis IP of the switch.
		Chassis *string `json:"Chassis,omitempty"`
		// Configuration modified timestamp of the switch.
		ConfModTs *string `json:"ConfModTs,omitempty"`
		// Configuration modified backup timestamp of the switch.
		ConfModTsBackup *string `json:"ConfModTsBackup,omitempty"`
		// Connection status of the switch.
		ConnectionStatus *string `json:"ConnectionStatus,omitempty"`
		// The default domain name configured on the switch.
		DefaultDomain *string `json:"DefaultDomain,omitempty"`
		// The user configured Ethernet operational mode for this switch (End-Host or Switching).
		// Deprecated
		EthernetMode *string `json:"EthernetMode,omitempty"`
		// The user configured Ethernet operational mode for this switch (End-Host or Switching). * `end-host` - In end-host mode, the fabric interconnects appear to the upstream devices as end hosts with multiple links.In this mode, the switch does not run Spanning Tree Protocol and avoids loops by following a set of rules for traffic forwarding.In case of ethernet switching mode - Ethernet end-host mode is also known as Ethernet host virtualizer. * `switch` - In switch mode, the switch runs Spanning Tree Protocol to avoid loops, and broadcast and multicast packets are handled in the traditional way.This is the traditional switch mode.
		EthernetSwitchingMode *string `json:"EthernetSwitchingMode,omitempty"`
		// The fault summary of the network Element out-of-band management interface.
		// Deprecated
		FaultSummary *int64 `json:"FaultSummary,omitempty"`
		// The user configured FC operational mode for this switch (End-Host or Switching).
		// Deprecated
		FcMode *string `json:"FcMode,omitempty"`
		// The user configured FC operational mode for this switch (End-Host or Switching). * `end-host` - In end-host mode, the fabric interconnects appear to the upstream devices as end hosts with multiple links.In this mode, the switch does not run Spanning Tree Protocol and avoids loops by following a set of rules for traffic forwarding.In case of ethernet switching mode - Ethernet end-host mode is also known as Ethernet host virtualizer. * `switch` - In switch mode, the switch runs Spanning Tree Protocol to avoid loops, and broadcast and multicast packets are handled in the traditional way.This is the traditional switch mode.
		FcSwitchingMode *string `json:"FcSwitchingMode,omitempty"`
		// The IP address of the network Element inband management interface.
		InbandIpAddress *string `json:"InbandIpAddress,omitempty"`
		// The default gateway of the network Element inband management interface.
		InbandIpGateway *string `json:"InbandIpGateway,omitempty"`
		// The network mask of the network Element inband management interface.
		InbandIpMask *string `json:"InbandIpMask,omitempty"`
		// The VLAN ID of the network Element inband management interface.
		InbandVlan *int64 `json:"InbandVlan,omitempty"`
		// The intercluster link state of the switch. * `Unknown` - The operational state of the link is not known. * `Up` - The operational state of the link is up. * `Down` - The operational state of the link is down. * `Degraded` - The link is operational but degraded. This state is applicable to port channels when any one of the member links is down.
		InterClusterLinkState *string `json:"InterClusterLinkState,omitempty"`
		// The management mode of the fabric interconnect. * `IntersightStandalone` - Intersight Standalone mode of operation. * `UCSM` - Unified Computing System Manager mode of operation. * `Intersight` - Intersight managed mode of operation.
		ManagementMode *string `json:"ManagementMode,omitempty"`
		// Operational state of the Fabric Evacuation feature, for this switch.
		OperEvacState *string `json:"OperEvacState,omitempty"`
		// The switch's current overall operational/health state.
		Operability *string `json:"Operability,omitempty"`
		// The IP address of the network Element out-of-band management interface.
		OutOfBandIpAddress *string `json:"OutOfBandIpAddress,omitempty"`
		// The default gateway of the network Element out-of-band management interface.
		OutOfBandIpGateway *string `json:"OutOfBandIpGateway,omitempty"`
		// The network mask of the network Element out-of-band management interface.
		OutOfBandIpMask *string `json:"OutOfBandIpMask,omitempty"`
		// The IPv4 address of the network Element out-of-band management interface.
		OutOfBandIpv4Address *string `json:"OutOfBandIpv4Address,omitempty"`
		// The default IPv4 gateway of the network Element out-of-band management interface.
		OutOfBandIpv4Gateway *string `json:"OutOfBandIpv4Gateway,omitempty"`
		// The network mask of the network Element out-of-band management interface.
		OutOfBandIpv4Mask *string `json:"OutOfBandIpv4Mask,omitempty"`
		// The IPv6 address of the network Element out-of-band management interface.
		OutOfBandIpv6Address *string `json:"OutOfBandIpv6Address,omitempty"`
		// The default IPv6 gateway of the network Element out-of-band management interface.
		OutOfBandIpv6Gateway *string `json:"OutOfBandIpv6Gateway,omitempty"`
		// The network mask of the network Element out-of-band management interface.
		OutOfBandIpv6Prefix *string `json:"OutOfBandIpv6Prefix,omitempty"`
		// The MAC address of the network Element out-of-band management interface.
		OutOfBandMac *string `json:"OutOfBandMac,omitempty"`
		// Part number of the switch.
		PartNumber *string `json:"PartNumber,omitempty"`
		// The reserved VLAN start ID of the Network Element. A block of 128 VLANs are reserved for internal use and cannot be used for carrying network traffic.
		ReservedVlanStartId *int64 `json:"ReservedVlanStartId,omitempty"`
		// The status of the switch.
		Status *string `json:"Status,omitempty"`
		// The Switch Id of the network Element.
		SwitchId *string `json:"SwitchId,omitempty"`
		// The Switch type that the network element is a part of. * `FabricInterconnect` - The default Switch type of UCSM and IMM mode devices. * `NexusDevice` - Switch type of Nexus devices. * `MDSDevice` - Switch type of Nexus MDS devices.
		SwitchType *string `json:"SwitchType,omitempty"`
		// System up time of the switch.
		SystemUpTime *string `json:"SystemUpTime,omitempty"`
		// The Thermal status of the fabric interconnect. * `unknown` - The default state of the sensor (in case no data is received). * `ok` - State of the sensor indicating the sensor's temperature range is okay. * `upper-non-recoverable` - State of the sensor indicating that the temperature is extremely high above normal range. * `upper-critical` - State of the sensor indicating that the temperature is above normal range. * `upper-non-critical` - State of the sensor indicating that the temperature is a little above the normal range. * `lower-non-critical` - State of the sensor indicating that the temperature is a little below the normal range. * `lower-critical` - State of the sensor indicating that the temperature is below normal range. * `lower-non-recoverable` - State of the sensor indicating that the temperature is extremely below normal range.
		Thermal *string `json:"Thermal,omitempty"`
		// Total available memory on this switch platform.
		TotalMemory *int64 `json:"TotalMemory,omitempty"`
		// Firmware version of the switch.
		Version *string `json:"Version,omitempty"`
		// An array of relationships to equipmentSwitchCard resources.
		Cards []EquipmentSwitchCardRelationship `json:"Cards,omitempty"`
		// An array of relationships to networkDiscoveredNeighbor resources.
		CdpNeighbor []NetworkDiscoveredNeighborRelationship `json:"CdpNeighbor,omitempty"`
		// An array of relationships to consoleConsoleConfig resources.
		Console []ConsoleConsoleConfigRelationship `json:"Console,omitempty"`
		// An array of relationships to networkDns resources.
		Dns []NetworkDnsRelationship `json:"Dns,omitempty"`
		// An array of relationships to etherPortChannel resources.
		EtherPortChannels []EtherPortChannelRelationship `json:"EtherPortChannels,omitempty"`
		// An array of relationships to equipmentFanModule resources.
		Fanmodules []EquipmentFanModuleRelationship `json:"Fanmodules,omitempty"`
		// An array of relationships to fcPortChannel resources.
		FcPortChannels []FcPortChannelRelationship `json:"FcPortChannels,omitempty"`
		// An array of relationships to networkFeatureControl resources.
		FeatureControl []NetworkFeatureControlRelationship `json:"FeatureControl,omitempty"`
		// An array of relationships to networkInterfaceList resources.
		InterfaceList       []NetworkInterfaceListRelationship `json:"InterfaceList,omitempty"`
		InventoryDeviceInfo *InventoryDeviceInfoRelationship   `json:"InventoryDeviceInfo,omitempty"`
		// An array of relationships to networkLicenseFile resources.
		LicenseFile []NetworkLicenseFileRelationship `json:"LicenseFile,omitempty"`
		// An array of relationships to networkDiscoveredNeighbor resources.
		LldpNeighbor         []NetworkDiscoveredNeighborRelationship `json:"LldpNeighbor,omitempty"`
		LocatorLed           *EquipmentLocatorLedRelationship        `json:"LocatorLed,omitempty"`
		ManagementController *ManagementControllerRelationship       `json:"ManagementController,omitempty"`
		ManagementEntity     *ManagementEntityRelationship           `json:"ManagementEntity,omitempty"`
		NetworkFcZoneInfo    *NetworkFcZoneInfoRelationship          `json:"NetworkFcZoneInfo,omitempty"`
		NetworkVlanPortInfo  *NetworkVlanPortInfoRelationship        `json:"NetworkVlanPortInfo,omitempty"`
		// An array of relationships to ntpNtpServer resources.
		NtpServer []NtpNtpServerRelationship `json:"NtpServer,omitempty"`
		// An array of relationships to portMacBinding resources.
		PortMacBindings []PortMacBindingRelationship `json:"PortMacBindings,omitempty"`
		// An array of relationships to processorUnit resources.
		ProcessorUnit []ProcessorUnitRelationship `json:"ProcessorUnit,omitempty"`
		// An array of relationships to equipmentPsu resources.
		Psus             []EquipmentPsuRelationship           `json:"Psus,omitempty"`
		RegisteredDevice *AssetDeviceRegistrationRelationship `json:"RegisteredDevice,omitempty"`
		// An array of relationships to equipmentSensor resources.
		Sensors []EquipmentSensorRelationship `json:"Sensors,omitempty"`
		// An array of relationships to storageItem resources.
		StorageItems []StorageItemRelationship `json:"StorageItems,omitempty"`
		// An array of relationships to networkSupervisorCard resources.
		SupervisorCard      []NetworkSupervisorCardRelationship  `json:"SupervisorCard,omitempty"`
		TopSystem           *TopSystemRelationship               `json:"TopSystem,omitempty"`
		UcsmRunningFirmware *FirmwareRunningFirmwareRelationship `json:"UcsmRunningFirmware,omitempty"`
		// An array of relationships to networkVethernet resources.
		Veths []NetworkVethernetRelationship `json:"Veths,omitempty"`
		// An array of relationships to networkVfc resources.
		Vfcs      []NetworkVfcRelationship      `json:"Vfcs,omitempty"`
		VpcDomain *NetworkVpcDomainRelationship `json:"VpcDomain,omitempty"`
		// An array of relationships to networkVpcMember resources.
		VpcMember []NetworkVpcMemberRelationship `json:"VpcMember,omitempty"`
		// An array of relationships to networkVpcPeer resources.
		VpcPeer []NetworkVpcPeerRelationship `json:"VpcPeer,omitempty"`
		// An array of relationships to networkVrf resources.
		Vrf []NetworkVrfRelationship `json:"Vrf,omitempty"`
	}

	varNetworkElementWithoutEmbeddedStruct := NetworkElementWithoutEmbeddedStruct{}

	err = json.Unmarshal(bytes, &varNetworkElementWithoutEmbeddedStruct)
	if err == nil {
		varNetworkElement := _NetworkElement{}
		varNetworkElement.ClassId = varNetworkElementWithoutEmbeddedStruct.ClassId
		varNetworkElement.ObjectType = varNetworkElementWithoutEmbeddedStruct.ObjectType
		varNetworkElement.AdminEvacState = varNetworkElementWithoutEmbeddedStruct.AdminEvacState
		varNetworkElement.AdminInbandInterfaceState = varNetworkElementWithoutEmbeddedStruct.AdminInbandInterfaceState
		varNetworkElement.AlarmSummary = varNetworkElementWithoutEmbeddedStruct.AlarmSummary
		varNetworkElement.AvailableMemory = varNetworkElementWithoutEmbeddedStruct.AvailableMemory
		varNetworkElement.Chassis = varNetworkElementWithoutEmbeddedStruct.Chassis
		varNetworkElement.ConfModTs = varNetworkElementWithoutEmbeddedStruct.ConfModTs
		varNetworkElement.ConfModTsBackup = varNetworkElementWithoutEmbeddedStruct.ConfModTsBackup
		varNetworkElement.ConnectionStatus = varNetworkElementWithoutEmbeddedStruct.ConnectionStatus
		varNetworkElement.DefaultDomain = varNetworkElementWithoutEmbeddedStruct.DefaultDomain
		varNetworkElement.EthernetMode = varNetworkElementWithoutEmbeddedStruct.EthernetMode
		varNetworkElement.EthernetSwitchingMode = varNetworkElementWithoutEmbeddedStruct.EthernetSwitchingMode
		varNetworkElement.FaultSummary = varNetworkElementWithoutEmbeddedStruct.FaultSummary
		varNetworkElement.FcMode = varNetworkElementWithoutEmbeddedStruct.FcMode
		varNetworkElement.FcSwitchingMode = varNetworkElementWithoutEmbeddedStruct.FcSwitchingMode
		varNetworkElement.InbandIpAddress = varNetworkElementWithoutEmbeddedStruct.InbandIpAddress
		varNetworkElement.InbandIpGateway = varNetworkElementWithoutEmbeddedStruct.InbandIpGateway
		varNetworkElement.InbandIpMask = varNetworkElementWithoutEmbeddedStruct.InbandIpMask
		varNetworkElement.InbandVlan = varNetworkElementWithoutEmbeddedStruct.InbandVlan
		varNetworkElement.InterClusterLinkState = varNetworkElementWithoutEmbeddedStruct.InterClusterLinkState
		varNetworkElement.ManagementMode = varNetworkElementWithoutEmbeddedStruct.ManagementMode
		varNetworkElement.OperEvacState = varNetworkElementWithoutEmbeddedStruct.OperEvacState
		varNetworkElement.Operability = varNetworkElementWithoutEmbeddedStruct.Operability
		varNetworkElement.OutOfBandIpAddress = varNetworkElementWithoutEmbeddedStruct.OutOfBandIpAddress
		varNetworkElement.OutOfBandIpGateway = varNetworkElementWithoutEmbeddedStruct.OutOfBandIpGateway
		varNetworkElement.OutOfBandIpMask = varNetworkElementWithoutEmbeddedStruct.OutOfBandIpMask
		varNetworkElement.OutOfBandIpv4Address = varNetworkElementWithoutEmbeddedStruct.OutOfBandIpv4Address
		varNetworkElement.OutOfBandIpv4Gateway = varNetworkElementWithoutEmbeddedStruct.OutOfBandIpv4Gateway
		varNetworkElement.OutOfBandIpv4Mask = varNetworkElementWithoutEmbeddedStruct.OutOfBandIpv4Mask
		varNetworkElement.OutOfBandIpv6Address = varNetworkElementWithoutEmbeddedStruct.OutOfBandIpv6Address
		varNetworkElement.OutOfBandIpv6Gateway = varNetworkElementWithoutEmbeddedStruct.OutOfBandIpv6Gateway
		varNetworkElement.OutOfBandIpv6Prefix = varNetworkElementWithoutEmbeddedStruct.OutOfBandIpv6Prefix
		varNetworkElement.OutOfBandMac = varNetworkElementWithoutEmbeddedStruct.OutOfBandMac
		varNetworkElement.PartNumber = varNetworkElementWithoutEmbeddedStruct.PartNumber
		varNetworkElement.ReservedVlanStartId = varNetworkElementWithoutEmbeddedStruct.ReservedVlanStartId
		varNetworkElement.Status = varNetworkElementWithoutEmbeddedStruct.Status
		varNetworkElement.SwitchId = varNetworkElementWithoutEmbeddedStruct.SwitchId
		varNetworkElement.SwitchType = varNetworkElementWithoutEmbeddedStruct.SwitchType
		varNetworkElement.SystemUpTime = varNetworkElementWithoutEmbeddedStruct.SystemUpTime
		varNetworkElement.Thermal = varNetworkElementWithoutEmbeddedStruct.Thermal
		varNetworkElement.TotalMemory = varNetworkElementWithoutEmbeddedStruct.TotalMemory
		varNetworkElement.Version = varNetworkElementWithoutEmbeddedStruct.Version
		varNetworkElement.Cards = varNetworkElementWithoutEmbeddedStruct.Cards
		varNetworkElement.CdpNeighbor = varNetworkElementWithoutEmbeddedStruct.CdpNeighbor
		varNetworkElement.Console = varNetworkElementWithoutEmbeddedStruct.Console
		varNetworkElement.Dns = varNetworkElementWithoutEmbeddedStruct.Dns
		varNetworkElement.EtherPortChannels = varNetworkElementWithoutEmbeddedStruct.EtherPortChannels
		varNetworkElement.Fanmodules = varNetworkElementWithoutEmbeddedStruct.Fanmodules
		varNetworkElement.FcPortChannels = varNetworkElementWithoutEmbeddedStruct.FcPortChannels
		varNetworkElement.FeatureControl = varNetworkElementWithoutEmbeddedStruct.FeatureControl
		varNetworkElement.InterfaceList = varNetworkElementWithoutEmbeddedStruct.InterfaceList
		varNetworkElement.InventoryDeviceInfo = varNetworkElementWithoutEmbeddedStruct.InventoryDeviceInfo
		varNetworkElement.LicenseFile = varNetworkElementWithoutEmbeddedStruct.LicenseFile
		varNetworkElement.LldpNeighbor = varNetworkElementWithoutEmbeddedStruct.LldpNeighbor
		varNetworkElement.LocatorLed = varNetworkElementWithoutEmbeddedStruct.LocatorLed
		varNetworkElement.ManagementController = varNetworkElementWithoutEmbeddedStruct.ManagementController
		varNetworkElement.ManagementEntity = varNetworkElementWithoutEmbeddedStruct.ManagementEntity
		varNetworkElement.NetworkFcZoneInfo = varNetworkElementWithoutEmbeddedStruct.NetworkFcZoneInfo
		varNetworkElement.NetworkVlanPortInfo = varNetworkElementWithoutEmbeddedStruct.NetworkVlanPortInfo
		varNetworkElement.NtpServer = varNetworkElementWithoutEmbeddedStruct.NtpServer
		varNetworkElement.PortMacBindings = varNetworkElementWithoutEmbeddedStruct.PortMacBindings
		varNetworkElement.ProcessorUnit = varNetworkElementWithoutEmbeddedStruct.ProcessorUnit
		varNetworkElement.Psus = varNetworkElementWithoutEmbeddedStruct.Psus
		varNetworkElement.RegisteredDevice = varNetworkElementWithoutEmbeddedStruct.RegisteredDevice
		varNetworkElement.Sensors = varNetworkElementWithoutEmbeddedStruct.Sensors
		varNetworkElement.StorageItems = varNetworkElementWithoutEmbeddedStruct.StorageItems
		varNetworkElement.SupervisorCard = varNetworkElementWithoutEmbeddedStruct.SupervisorCard
		varNetworkElement.TopSystem = varNetworkElementWithoutEmbeddedStruct.TopSystem
		varNetworkElement.UcsmRunningFirmware = varNetworkElementWithoutEmbeddedStruct.UcsmRunningFirmware
		varNetworkElement.Veths = varNetworkElementWithoutEmbeddedStruct.Veths
		varNetworkElement.Vfcs = varNetworkElementWithoutEmbeddedStruct.Vfcs
		varNetworkElement.VpcDomain = varNetworkElementWithoutEmbeddedStruct.VpcDomain
		varNetworkElement.VpcMember = varNetworkElementWithoutEmbeddedStruct.VpcMember
		varNetworkElement.VpcPeer = varNetworkElementWithoutEmbeddedStruct.VpcPeer
		varNetworkElement.Vrf = varNetworkElementWithoutEmbeddedStruct.Vrf
		*o = NetworkElement(varNetworkElement)
	} else {
		return err
	}

	varNetworkElement := _NetworkElement{}

	err = json.Unmarshal(bytes, &varNetworkElement)
	if err == nil {
		o.EquipmentBase = varNetworkElement.EquipmentBase
	} else {
		return err
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "ClassId")
		delete(additionalProperties, "ObjectType")
		delete(additionalProperties, "AdminEvacState")
		delete(additionalProperties, "AdminInbandInterfaceState")
		delete(additionalProperties, "AlarmSummary")
		delete(additionalProperties, "AvailableMemory")
		delete(additionalProperties, "Chassis")
		delete(additionalProperties, "ConfModTs")
		delete(additionalProperties, "ConfModTsBackup")
		delete(additionalProperties, "ConnectionStatus")
		delete(additionalProperties, "DefaultDomain")
		delete(additionalProperties, "EthernetMode")
		delete(additionalProperties, "EthernetSwitchingMode")
		delete(additionalProperties, "FaultSummary")
		delete(additionalProperties, "FcMode")
		delete(additionalProperties, "FcSwitchingMode")
		delete(additionalProperties, "InbandIpAddress")
		delete(additionalProperties, "InbandIpGateway")
		delete(additionalProperties, "InbandIpMask")
		delete(additionalProperties, "InbandVlan")
		delete(additionalProperties, "InterClusterLinkState")
		delete(additionalProperties, "ManagementMode")
		delete(additionalProperties, "OperEvacState")
		delete(additionalProperties, "Operability")
		delete(additionalProperties, "OutOfBandIpAddress")
		delete(additionalProperties, "OutOfBandIpGateway")
		delete(additionalProperties, "OutOfBandIpMask")
		delete(additionalProperties, "OutOfBandIpv4Address")
		delete(additionalProperties, "OutOfBandIpv4Gateway")
		delete(additionalProperties, "OutOfBandIpv4Mask")
		delete(additionalProperties, "OutOfBandIpv6Address")
		delete(additionalProperties, "OutOfBandIpv6Gateway")
		delete(additionalProperties, "OutOfBandIpv6Prefix")
		delete(additionalProperties, "OutOfBandMac")
		delete(additionalProperties, "PartNumber")
		delete(additionalProperties, "ReservedVlanStartId")
		delete(additionalProperties, "Status")
		delete(additionalProperties, "SwitchId")
		delete(additionalProperties, "SwitchType")
		delete(additionalProperties, "SystemUpTime")
		delete(additionalProperties, "Thermal")
		delete(additionalProperties, "TotalMemory")
		delete(additionalProperties, "Version")
		delete(additionalProperties, "Cards")
		delete(additionalProperties, "CdpNeighbor")
		delete(additionalProperties, "Console")
		delete(additionalProperties, "Dns")
		delete(additionalProperties, "EtherPortChannels")
		delete(additionalProperties, "Fanmodules")
		delete(additionalProperties, "FcPortChannels")
		delete(additionalProperties, "FeatureControl")
		delete(additionalProperties, "InterfaceList")
		delete(additionalProperties, "InventoryDeviceInfo")
		delete(additionalProperties, "LicenseFile")
		delete(additionalProperties, "LldpNeighbor")
		delete(additionalProperties, "LocatorLed")
		delete(additionalProperties, "ManagementController")
		delete(additionalProperties, "ManagementEntity")
		delete(additionalProperties, "NetworkFcZoneInfo")
		delete(additionalProperties, "NetworkVlanPortInfo")
		delete(additionalProperties, "NtpServer")
		delete(additionalProperties, "PortMacBindings")
		delete(additionalProperties, "ProcessorUnit")
		delete(additionalProperties, "Psus")
		delete(additionalProperties, "RegisteredDevice")
		delete(additionalProperties, "Sensors")
		delete(additionalProperties, "StorageItems")
		delete(additionalProperties, "SupervisorCard")
		delete(additionalProperties, "TopSystem")
		delete(additionalProperties, "UcsmRunningFirmware")
		delete(additionalProperties, "Veths")
		delete(additionalProperties, "Vfcs")
		delete(additionalProperties, "VpcDomain")
		delete(additionalProperties, "VpcMember")
		delete(additionalProperties, "VpcPeer")
		delete(additionalProperties, "Vrf")

		// remove fields from embedded structs
		reflectEquipmentBase := reflect.ValueOf(o.EquipmentBase)
		for i := 0; i < reflectEquipmentBase.Type().NumField(); i++ {
			t := reflectEquipmentBase.Type().Field(i)

			if jsonTag := t.Tag.Get("json"); jsonTag != "" {
				fieldName := ""
				if commaIdx := strings.Index(jsonTag, ","); commaIdx > 0 {
					fieldName = jsonTag[:commaIdx]
				} else {
					fieldName = jsonTag
				}
				if fieldName != "AdditionalProperties" {
					delete(additionalProperties, fieldName)
				}
			}
		}

		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableNetworkElement struct {
	value *NetworkElement
	isSet bool
}

func (v NullableNetworkElement) Get() *NetworkElement {
	return v.value
}

func (v *NullableNetworkElement) Set(val *NetworkElement) {
	v.value = val
	v.isSet = true
}

func (v NullableNetworkElement) IsSet() bool {
	return v.isSet
}

func (v *NullableNetworkElement) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNetworkElement(val *NetworkElement) *NullableNetworkElement {
	return &NullableNetworkElement{value: val, isSet: true}
}

func (v NullableNetworkElement) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNetworkElement) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
