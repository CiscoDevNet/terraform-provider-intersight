/*
Cisco Intersight

Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations. The Intersight OpenAPI document defines the complete set of properties that are returned in the HTTP response. From that perspective, a client can expect that no additional properties are returned, unless these properties are explicitly defined in the OpenAPI document. However, when a client uses an older version of the Intersight OpenAPI document, the server may send additional properties because the software is more recent than the client. In that case, the client may receive properties that it does not know about. Some generated SDKs perform a strict validation of the HTTP response body against the OpenAPI document.

API version: 1.0.11-2024100405
Contact: intersight@cisco.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package intersight

import (
	"encoding/json"
	"fmt"
	"reflect"
	"strings"
)

// checks if the NiatelemetryNiaInventory type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NiatelemetryNiaInventory{}

// NiatelemetryNiaInventory Inventory object available per device scope. This common object holds a device level information.
type NiatelemetryNiaInventory struct {
	MoBaseMo
	// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.
	ClassId string `json:"ClassId"`
	// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
	ObjectType string `json:"ObjectType"`
	// Returns controller's IP address details.
	ControllerIpAddress *string `json:"ControllerIpAddress,omitempty"`
	// CPU usage of device being inventoried. This determines the percentage of CPU resources used.
	Cpu *float32 `json:"Cpu,omitempty"`
	// Last crash reset reason of device being inventoried. This determines the last reason for a device's restart due to crash of the system.
	CrashResetLogs *string `json:"CrashResetLogs,omitempty"`
	// Returns the value of the customerDeviceConnector field.
	CustomerDeviceConnector *string                  `json:"CustomerDeviceConnector,omitempty"`
	DcnmFanDetails          []NiatelemetryFanDetails `json:"DcnmFanDetails,omitempty"`
	// Returns the License state of the device.
	DcnmLicenseState *string `json:"DcnmLicenseState,omitempty"`
	// Returns the value of the deviceDiscovery field.
	DeviceDiscovery *string `json:"DeviceDiscovery,omitempty"`
	// Returns the device health.
	DeviceHealth *int64 `json:"DeviceHealth,omitempty"`
	// Returns the value of the deviceId field.
	DeviceId *string `json:"DeviceId,omitempty"`
	// Name of device being inventoried. The name the user assigns to the device is inventoried here.
	DeviceName *string `json:"DeviceName,omitempty"`
	// Type of device being inventoried. This determines whether the device is a controller, leaf or spine.
	DeviceType *string `json:"DeviceType,omitempty"`
	// Returns the device up time.
	DeviceUpTime *int64                       `json:"DeviceUpTime,omitempty"`
	Disk         NullableNiatelemetryDiskinfo `json:"Disk,omitempty"`
	// Dn for the inventories present.
	Dn *string `json:"Dn,omitempty"`
	// Name of the fabric of the device being inventoried.
	FabricName *string `json:"FabricName,omitempty"`
	// Number of fabric extendors utilized.
	FexCount *int64 `json:"FexCount,omitempty"`
	// Number of appliances as physical device that are wired into the cluster.
	InfraWiNodeCount *int64                         `json:"InfraWiNodeCount,omitempty"`
	Interface        []NiatelemetryInterfaceElement `json:"Interface,omitempty"`
	// The IP address of the device being inventoried.
	IpAddress *string `json:"IpAddress,omitempty"`
	// Flag to specify if the node is virtual.
	IsVirtualNode *string `json:"IsVirtualNode,omitempty"`
	// Returns the last reboot Time of the device.
	LastRebootTime *string `json:"LastRebootTime,omitempty"`
	// Returns the last reset reason of the device.
	LastResetReason *string `json:"LastResetReason,omitempty"`
	// Returns the License type of the device.
	LicenseType *string `json:"LicenseType,omitempty"`
	// Last log in time device being inventoried. This determines the last login time on the device.
	LogInTime *string `json:"LogInTime,omitempty"`
	// Last log out time of device being inventoried. This determines the last logout time on the device.
	LogOutTime *string `json:"LogOutTime,omitempty"`
	// Number of Macsec configured interfaces on a TOR.
	MacSecCount *int64 `json:"MacSecCount,omitempty"`
	// Number of Macsec configured interfaces on a Spine.
	MacSecFabCount *int64 `json:"MacSecFabCount,omitempty"`
	// Number of total Macsec configured interfaces for all nodes.
	MacsecTotalCount *int64 `json:"MacsecTotalCount,omitempty"`
	// Memory usage of device being inventoried. This determines the percentage of memory resources used.
	Memory *int64 `json:"Memory,omitempty"`
	// Returns if site has been onboarded to nexus cloud or not.
	NexusCloudMembershipStatus *bool `json:"NexusCloudMembershipStatus,omitempty"`
	// The ID of the device being inventoried.
	NodeId               *string                              `json:"NodeId,omitempty"`
	NxosBgpEvpn          NullableNiatelemetryNxosBgpEvpn      `json:"NxosBgpEvpn,omitempty"`
	NxosBgpMvpn          NullableNiatelemetryNxosBgpMvpn      `json:"NxosBgpMvpn,omitempty"`
	NxosBootflashDetails NullableNiatelemetryBootflashDetails `json:"NxosBootflashDetails,omitempty"`
	// Returns the status of dci interface configured.
	NxosDciInterfaceStatus *string                       `json:"NxosDciInterfaceStatus,omitempty"`
	NxosInterfaceBrief     NullableNiatelemetryInterface `json:"NxosInterfaceBrief,omitempty"`
	// Returns the value of the nxosNveInterface field.
	NxosNveInterfaceStatus *string                               `json:"NxosNveInterfaceStatus,omitempty"`
	NxosNvePacketCounters  NullableNiatelemetryNvePacketCounters `json:"NxosNvePacketCounters,omitempty"`
	NxosNveVni             NullableNiatelemetryNveVni            `json:"NxosNveVni,omitempty"`
	// Total number of ospf neighbors per switch in DCNM.
	NxosOspfNeighbors *int64 `json:"NxosOspfNeighbors,omitempty"`
	// Total number of pim neighbors per switch in DCNM.
	NxosPimNeighbors *string `json:"NxosPimNeighbors,omitempty"`
	// Returns the value of the nxosTelnet field.
	NxosTelnet *string `json:"NxosTelnet,omitempty"`
	// Total number of routes configured in the DCNM.
	NxosTotalRoutes *int64                      `json:"NxosTotalRoutes,omitempty"`
	NxosVtp         NullableNiatelemetryNxosVtp `json:"NxosVtp,omitempty"`
	// Type of record DCNM / APIC / SE / Nexus Switch. This determines the type of platform where inventory was collected.
	RecordType *string `json:"RecordType,omitempty"`
	// Version of record being pushed. This determines what was the API version for data available from the device.
	RecordVersion *string `json:"RecordVersion,omitempty"`
	// Total nuumber of v4 and v6 routes per node.
	RoutePrefixCount *int64 `json:"RoutePrefixCount,omitempty"`
	// Number of v4 routes per node.
	RoutePrefixV4Count *int64 `json:"RoutePrefixV4Count,omitempty"`
	// Number of v6 routes per node.
	RoutePrefixV6Count *int64 `json:"RoutePrefixV6Count,omitempty"`
	// Serial number of device being invetoried. The serial number is unique per device and will be used as the key.
	Serial *string `json:"Serial,omitempty"`
	// Name of fabric domain of the controller.
	SiteName *string `json:"SiteName,omitempty"`
	// Returns the uuid of the Nexus Cloud site associated to the inventory object.
	Siteuuid *string `json:"Siteuuid,omitempty"`
	// Returns the value of the smartAccountId/CustomerId field.
	SmartAccountId *int64 `json:"SmartAccountId,omitempty"`
	// Last software downloaded of device being inventoried. This determines if software download API was used.
	SoftwareDownload *string `json:"SoftwareDownload,omitempty"`
	// The amount of time that the device being inventoried been up.
	SystemUpTime *string `json:"SystemUpTime,omitempty"`
	// Software version of device being inventoried. The various software version values for each device are available on cisco.com.
	Version   *string                 `json:"Version,omitempty"`
	VniStatus []NiatelemetryVniStatus `json:"VniStatus,omitempty"`
	// The TEP IP address of the node's vPC peer, if present.
	VpcPeerIpAddress     *string                                         `json:"VpcPeerIpAddress,omitempty"`
	LicenseState         NullableNiatelemetryNiaLicenseStateRelationship `json:"LicenseState,omitempty"`
	RegisteredDevice     NullableAssetDeviceRegistrationRelationship     `json:"RegisteredDevice,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _NiatelemetryNiaInventory NiatelemetryNiaInventory

// NewNiatelemetryNiaInventory instantiates a new NiatelemetryNiaInventory object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNiatelemetryNiaInventory(classId string, objectType string) *NiatelemetryNiaInventory {
	this := NiatelemetryNiaInventory{}
	this.ClassId = classId
	this.ObjectType = objectType
	var nexusCloudMembershipStatus bool = false
	this.NexusCloudMembershipStatus = &nexusCloudMembershipStatus
	return &this
}

// NewNiatelemetryNiaInventoryWithDefaults instantiates a new NiatelemetryNiaInventory object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNiatelemetryNiaInventoryWithDefaults() *NiatelemetryNiaInventory {
	this := NiatelemetryNiaInventory{}
	var classId string = "niatelemetry.NiaInventory"
	this.ClassId = classId
	var objectType string = "niatelemetry.NiaInventory"
	this.ObjectType = objectType
	var nexusCloudMembershipStatus bool = false
	this.NexusCloudMembershipStatus = &nexusCloudMembershipStatus
	return &this
}

// GetClassId returns the ClassId field value
func (o *NiatelemetryNiaInventory) GetClassId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ClassId
}

// GetClassIdOk returns a tuple with the ClassId field value
// and a boolean to check if the value has been set.
func (o *NiatelemetryNiaInventory) GetClassIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ClassId, true
}

// SetClassId sets field value
func (o *NiatelemetryNiaInventory) SetClassId(v string) {
	o.ClassId = v
}

// GetDefaultClassId returns the default value "niatelemetry.NiaInventory" of the ClassId field.
func (o *NiatelemetryNiaInventory) GetDefaultClassId() interface{} {
	return "niatelemetry.NiaInventory"
}

// GetObjectType returns the ObjectType field value
func (o *NiatelemetryNiaInventory) GetObjectType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ObjectType
}

// GetObjectTypeOk returns a tuple with the ObjectType field value
// and a boolean to check if the value has been set.
func (o *NiatelemetryNiaInventory) GetObjectTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ObjectType, true
}

// SetObjectType sets field value
func (o *NiatelemetryNiaInventory) SetObjectType(v string) {
	o.ObjectType = v
}

// GetDefaultObjectType returns the default value "niatelemetry.NiaInventory" of the ObjectType field.
func (o *NiatelemetryNiaInventory) GetDefaultObjectType() interface{} {
	return "niatelemetry.NiaInventory"
}

// GetControllerIpAddress returns the ControllerIpAddress field value if set, zero value otherwise.
func (o *NiatelemetryNiaInventory) GetControllerIpAddress() string {
	if o == nil || IsNil(o.ControllerIpAddress) {
		var ret string
		return ret
	}
	return *o.ControllerIpAddress
}

// GetControllerIpAddressOk returns a tuple with the ControllerIpAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NiatelemetryNiaInventory) GetControllerIpAddressOk() (*string, bool) {
	if o == nil || IsNil(o.ControllerIpAddress) {
		return nil, false
	}
	return o.ControllerIpAddress, true
}

// HasControllerIpAddress returns a boolean if a field has been set.
func (o *NiatelemetryNiaInventory) HasControllerIpAddress() bool {
	if o != nil && !IsNil(o.ControllerIpAddress) {
		return true
	}

	return false
}

// SetControllerIpAddress gets a reference to the given string and assigns it to the ControllerIpAddress field.
func (o *NiatelemetryNiaInventory) SetControllerIpAddress(v string) {
	o.ControllerIpAddress = &v
}

// GetCpu returns the Cpu field value if set, zero value otherwise.
func (o *NiatelemetryNiaInventory) GetCpu() float32 {
	if o == nil || IsNil(o.Cpu) {
		var ret float32
		return ret
	}
	return *o.Cpu
}

// GetCpuOk returns a tuple with the Cpu field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NiatelemetryNiaInventory) GetCpuOk() (*float32, bool) {
	if o == nil || IsNil(o.Cpu) {
		return nil, false
	}
	return o.Cpu, true
}

// HasCpu returns a boolean if a field has been set.
func (o *NiatelemetryNiaInventory) HasCpu() bool {
	if o != nil && !IsNil(o.Cpu) {
		return true
	}

	return false
}

// SetCpu gets a reference to the given float32 and assigns it to the Cpu field.
func (o *NiatelemetryNiaInventory) SetCpu(v float32) {
	o.Cpu = &v
}

// GetCrashResetLogs returns the CrashResetLogs field value if set, zero value otherwise.
func (o *NiatelemetryNiaInventory) GetCrashResetLogs() string {
	if o == nil || IsNil(o.CrashResetLogs) {
		var ret string
		return ret
	}
	return *o.CrashResetLogs
}

// GetCrashResetLogsOk returns a tuple with the CrashResetLogs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NiatelemetryNiaInventory) GetCrashResetLogsOk() (*string, bool) {
	if o == nil || IsNil(o.CrashResetLogs) {
		return nil, false
	}
	return o.CrashResetLogs, true
}

// HasCrashResetLogs returns a boolean if a field has been set.
func (o *NiatelemetryNiaInventory) HasCrashResetLogs() bool {
	if o != nil && !IsNil(o.CrashResetLogs) {
		return true
	}

	return false
}

// SetCrashResetLogs gets a reference to the given string and assigns it to the CrashResetLogs field.
func (o *NiatelemetryNiaInventory) SetCrashResetLogs(v string) {
	o.CrashResetLogs = &v
}

// GetCustomerDeviceConnector returns the CustomerDeviceConnector field value if set, zero value otherwise.
func (o *NiatelemetryNiaInventory) GetCustomerDeviceConnector() string {
	if o == nil || IsNil(o.CustomerDeviceConnector) {
		var ret string
		return ret
	}
	return *o.CustomerDeviceConnector
}

// GetCustomerDeviceConnectorOk returns a tuple with the CustomerDeviceConnector field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NiatelemetryNiaInventory) GetCustomerDeviceConnectorOk() (*string, bool) {
	if o == nil || IsNil(o.CustomerDeviceConnector) {
		return nil, false
	}
	return o.CustomerDeviceConnector, true
}

// HasCustomerDeviceConnector returns a boolean if a field has been set.
func (o *NiatelemetryNiaInventory) HasCustomerDeviceConnector() bool {
	if o != nil && !IsNil(o.CustomerDeviceConnector) {
		return true
	}

	return false
}

// SetCustomerDeviceConnector gets a reference to the given string and assigns it to the CustomerDeviceConnector field.
func (o *NiatelemetryNiaInventory) SetCustomerDeviceConnector(v string) {
	o.CustomerDeviceConnector = &v
}

// GetDcnmFanDetails returns the DcnmFanDetails field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NiatelemetryNiaInventory) GetDcnmFanDetails() []NiatelemetryFanDetails {
	if o == nil {
		var ret []NiatelemetryFanDetails
		return ret
	}
	return o.DcnmFanDetails
}

// GetDcnmFanDetailsOk returns a tuple with the DcnmFanDetails field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NiatelemetryNiaInventory) GetDcnmFanDetailsOk() ([]NiatelemetryFanDetails, bool) {
	if o == nil || IsNil(o.DcnmFanDetails) {
		return nil, false
	}
	return o.DcnmFanDetails, true
}

// HasDcnmFanDetails returns a boolean if a field has been set.
func (o *NiatelemetryNiaInventory) HasDcnmFanDetails() bool {
	if o != nil && !IsNil(o.DcnmFanDetails) {
		return true
	}

	return false
}

// SetDcnmFanDetails gets a reference to the given []NiatelemetryFanDetails and assigns it to the DcnmFanDetails field.
func (o *NiatelemetryNiaInventory) SetDcnmFanDetails(v []NiatelemetryFanDetails) {
	o.DcnmFanDetails = v
}

// GetDcnmLicenseState returns the DcnmLicenseState field value if set, zero value otherwise.
func (o *NiatelemetryNiaInventory) GetDcnmLicenseState() string {
	if o == nil || IsNil(o.DcnmLicenseState) {
		var ret string
		return ret
	}
	return *o.DcnmLicenseState
}

// GetDcnmLicenseStateOk returns a tuple with the DcnmLicenseState field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NiatelemetryNiaInventory) GetDcnmLicenseStateOk() (*string, bool) {
	if o == nil || IsNil(o.DcnmLicenseState) {
		return nil, false
	}
	return o.DcnmLicenseState, true
}

// HasDcnmLicenseState returns a boolean if a field has been set.
func (o *NiatelemetryNiaInventory) HasDcnmLicenseState() bool {
	if o != nil && !IsNil(o.DcnmLicenseState) {
		return true
	}

	return false
}

// SetDcnmLicenseState gets a reference to the given string and assigns it to the DcnmLicenseState field.
func (o *NiatelemetryNiaInventory) SetDcnmLicenseState(v string) {
	o.DcnmLicenseState = &v
}

// GetDeviceDiscovery returns the DeviceDiscovery field value if set, zero value otherwise.
func (o *NiatelemetryNiaInventory) GetDeviceDiscovery() string {
	if o == nil || IsNil(o.DeviceDiscovery) {
		var ret string
		return ret
	}
	return *o.DeviceDiscovery
}

// GetDeviceDiscoveryOk returns a tuple with the DeviceDiscovery field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NiatelemetryNiaInventory) GetDeviceDiscoveryOk() (*string, bool) {
	if o == nil || IsNil(o.DeviceDiscovery) {
		return nil, false
	}
	return o.DeviceDiscovery, true
}

// HasDeviceDiscovery returns a boolean if a field has been set.
func (o *NiatelemetryNiaInventory) HasDeviceDiscovery() bool {
	if o != nil && !IsNil(o.DeviceDiscovery) {
		return true
	}

	return false
}

// SetDeviceDiscovery gets a reference to the given string and assigns it to the DeviceDiscovery field.
func (o *NiatelemetryNiaInventory) SetDeviceDiscovery(v string) {
	o.DeviceDiscovery = &v
}

// GetDeviceHealth returns the DeviceHealth field value if set, zero value otherwise.
func (o *NiatelemetryNiaInventory) GetDeviceHealth() int64 {
	if o == nil || IsNil(o.DeviceHealth) {
		var ret int64
		return ret
	}
	return *o.DeviceHealth
}

// GetDeviceHealthOk returns a tuple with the DeviceHealth field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NiatelemetryNiaInventory) GetDeviceHealthOk() (*int64, bool) {
	if o == nil || IsNil(o.DeviceHealth) {
		return nil, false
	}
	return o.DeviceHealth, true
}

// HasDeviceHealth returns a boolean if a field has been set.
func (o *NiatelemetryNiaInventory) HasDeviceHealth() bool {
	if o != nil && !IsNil(o.DeviceHealth) {
		return true
	}

	return false
}

// SetDeviceHealth gets a reference to the given int64 and assigns it to the DeviceHealth field.
func (o *NiatelemetryNiaInventory) SetDeviceHealth(v int64) {
	o.DeviceHealth = &v
}

// GetDeviceId returns the DeviceId field value if set, zero value otherwise.
func (o *NiatelemetryNiaInventory) GetDeviceId() string {
	if o == nil || IsNil(o.DeviceId) {
		var ret string
		return ret
	}
	return *o.DeviceId
}

// GetDeviceIdOk returns a tuple with the DeviceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NiatelemetryNiaInventory) GetDeviceIdOk() (*string, bool) {
	if o == nil || IsNil(o.DeviceId) {
		return nil, false
	}
	return o.DeviceId, true
}

// HasDeviceId returns a boolean if a field has been set.
func (o *NiatelemetryNiaInventory) HasDeviceId() bool {
	if o != nil && !IsNil(o.DeviceId) {
		return true
	}

	return false
}

// SetDeviceId gets a reference to the given string and assigns it to the DeviceId field.
func (o *NiatelemetryNiaInventory) SetDeviceId(v string) {
	o.DeviceId = &v
}

// GetDeviceName returns the DeviceName field value if set, zero value otherwise.
func (o *NiatelemetryNiaInventory) GetDeviceName() string {
	if o == nil || IsNil(o.DeviceName) {
		var ret string
		return ret
	}
	return *o.DeviceName
}

// GetDeviceNameOk returns a tuple with the DeviceName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NiatelemetryNiaInventory) GetDeviceNameOk() (*string, bool) {
	if o == nil || IsNil(o.DeviceName) {
		return nil, false
	}
	return o.DeviceName, true
}

// HasDeviceName returns a boolean if a field has been set.
func (o *NiatelemetryNiaInventory) HasDeviceName() bool {
	if o != nil && !IsNil(o.DeviceName) {
		return true
	}

	return false
}

// SetDeviceName gets a reference to the given string and assigns it to the DeviceName field.
func (o *NiatelemetryNiaInventory) SetDeviceName(v string) {
	o.DeviceName = &v
}

// GetDeviceType returns the DeviceType field value if set, zero value otherwise.
func (o *NiatelemetryNiaInventory) GetDeviceType() string {
	if o == nil || IsNil(o.DeviceType) {
		var ret string
		return ret
	}
	return *o.DeviceType
}

// GetDeviceTypeOk returns a tuple with the DeviceType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NiatelemetryNiaInventory) GetDeviceTypeOk() (*string, bool) {
	if o == nil || IsNil(o.DeviceType) {
		return nil, false
	}
	return o.DeviceType, true
}

// HasDeviceType returns a boolean if a field has been set.
func (o *NiatelemetryNiaInventory) HasDeviceType() bool {
	if o != nil && !IsNil(o.DeviceType) {
		return true
	}

	return false
}

// SetDeviceType gets a reference to the given string and assigns it to the DeviceType field.
func (o *NiatelemetryNiaInventory) SetDeviceType(v string) {
	o.DeviceType = &v
}

// GetDeviceUpTime returns the DeviceUpTime field value if set, zero value otherwise.
func (o *NiatelemetryNiaInventory) GetDeviceUpTime() int64 {
	if o == nil || IsNil(o.DeviceUpTime) {
		var ret int64
		return ret
	}
	return *o.DeviceUpTime
}

// GetDeviceUpTimeOk returns a tuple with the DeviceUpTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NiatelemetryNiaInventory) GetDeviceUpTimeOk() (*int64, bool) {
	if o == nil || IsNil(o.DeviceUpTime) {
		return nil, false
	}
	return o.DeviceUpTime, true
}

// HasDeviceUpTime returns a boolean if a field has been set.
func (o *NiatelemetryNiaInventory) HasDeviceUpTime() bool {
	if o != nil && !IsNil(o.DeviceUpTime) {
		return true
	}

	return false
}

// SetDeviceUpTime gets a reference to the given int64 and assigns it to the DeviceUpTime field.
func (o *NiatelemetryNiaInventory) SetDeviceUpTime(v int64) {
	o.DeviceUpTime = &v
}

// GetDisk returns the Disk field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NiatelemetryNiaInventory) GetDisk() NiatelemetryDiskinfo {
	if o == nil || IsNil(o.Disk.Get()) {
		var ret NiatelemetryDiskinfo
		return ret
	}
	return *o.Disk.Get()
}

// GetDiskOk returns a tuple with the Disk field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NiatelemetryNiaInventory) GetDiskOk() (*NiatelemetryDiskinfo, bool) {
	if o == nil {
		return nil, false
	}
	return o.Disk.Get(), o.Disk.IsSet()
}

// HasDisk returns a boolean if a field has been set.
func (o *NiatelemetryNiaInventory) HasDisk() bool {
	if o != nil && o.Disk.IsSet() {
		return true
	}

	return false
}

// SetDisk gets a reference to the given NullableNiatelemetryDiskinfo and assigns it to the Disk field.
func (o *NiatelemetryNiaInventory) SetDisk(v NiatelemetryDiskinfo) {
	o.Disk.Set(&v)
}

// SetDiskNil sets the value for Disk to be an explicit nil
func (o *NiatelemetryNiaInventory) SetDiskNil() {
	o.Disk.Set(nil)
}

// UnsetDisk ensures that no value is present for Disk, not even an explicit nil
func (o *NiatelemetryNiaInventory) UnsetDisk() {
	o.Disk.Unset()
}

// GetDn returns the Dn field value if set, zero value otherwise.
func (o *NiatelemetryNiaInventory) GetDn() string {
	if o == nil || IsNil(o.Dn) {
		var ret string
		return ret
	}
	return *o.Dn
}

// GetDnOk returns a tuple with the Dn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NiatelemetryNiaInventory) GetDnOk() (*string, bool) {
	if o == nil || IsNil(o.Dn) {
		return nil, false
	}
	return o.Dn, true
}

// HasDn returns a boolean if a field has been set.
func (o *NiatelemetryNiaInventory) HasDn() bool {
	if o != nil && !IsNil(o.Dn) {
		return true
	}

	return false
}

// SetDn gets a reference to the given string and assigns it to the Dn field.
func (o *NiatelemetryNiaInventory) SetDn(v string) {
	o.Dn = &v
}

// GetFabricName returns the FabricName field value if set, zero value otherwise.
func (o *NiatelemetryNiaInventory) GetFabricName() string {
	if o == nil || IsNil(o.FabricName) {
		var ret string
		return ret
	}
	return *o.FabricName
}

// GetFabricNameOk returns a tuple with the FabricName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NiatelemetryNiaInventory) GetFabricNameOk() (*string, bool) {
	if o == nil || IsNil(o.FabricName) {
		return nil, false
	}
	return o.FabricName, true
}

// HasFabricName returns a boolean if a field has been set.
func (o *NiatelemetryNiaInventory) HasFabricName() bool {
	if o != nil && !IsNil(o.FabricName) {
		return true
	}

	return false
}

// SetFabricName gets a reference to the given string and assigns it to the FabricName field.
func (o *NiatelemetryNiaInventory) SetFabricName(v string) {
	o.FabricName = &v
}

// GetFexCount returns the FexCount field value if set, zero value otherwise.
func (o *NiatelemetryNiaInventory) GetFexCount() int64 {
	if o == nil || IsNil(o.FexCount) {
		var ret int64
		return ret
	}
	return *o.FexCount
}

// GetFexCountOk returns a tuple with the FexCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NiatelemetryNiaInventory) GetFexCountOk() (*int64, bool) {
	if o == nil || IsNil(o.FexCount) {
		return nil, false
	}
	return o.FexCount, true
}

// HasFexCount returns a boolean if a field has been set.
func (o *NiatelemetryNiaInventory) HasFexCount() bool {
	if o != nil && !IsNil(o.FexCount) {
		return true
	}

	return false
}

// SetFexCount gets a reference to the given int64 and assigns it to the FexCount field.
func (o *NiatelemetryNiaInventory) SetFexCount(v int64) {
	o.FexCount = &v
}

// GetInfraWiNodeCount returns the InfraWiNodeCount field value if set, zero value otherwise.
func (o *NiatelemetryNiaInventory) GetInfraWiNodeCount() int64 {
	if o == nil || IsNil(o.InfraWiNodeCount) {
		var ret int64
		return ret
	}
	return *o.InfraWiNodeCount
}

// GetInfraWiNodeCountOk returns a tuple with the InfraWiNodeCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NiatelemetryNiaInventory) GetInfraWiNodeCountOk() (*int64, bool) {
	if o == nil || IsNil(o.InfraWiNodeCount) {
		return nil, false
	}
	return o.InfraWiNodeCount, true
}

// HasInfraWiNodeCount returns a boolean if a field has been set.
func (o *NiatelemetryNiaInventory) HasInfraWiNodeCount() bool {
	if o != nil && !IsNil(o.InfraWiNodeCount) {
		return true
	}

	return false
}

// SetInfraWiNodeCount gets a reference to the given int64 and assigns it to the InfraWiNodeCount field.
func (o *NiatelemetryNiaInventory) SetInfraWiNodeCount(v int64) {
	o.InfraWiNodeCount = &v
}

// GetInterface returns the Interface field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NiatelemetryNiaInventory) GetInterface() []NiatelemetryInterfaceElement {
	if o == nil {
		var ret []NiatelemetryInterfaceElement
		return ret
	}
	return o.Interface
}

// GetInterfaceOk returns a tuple with the Interface field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NiatelemetryNiaInventory) GetInterfaceOk() ([]NiatelemetryInterfaceElement, bool) {
	if o == nil || IsNil(o.Interface) {
		return nil, false
	}
	return o.Interface, true
}

// HasInterface returns a boolean if a field has been set.
func (o *NiatelemetryNiaInventory) HasInterface() bool {
	if o != nil && !IsNil(o.Interface) {
		return true
	}

	return false
}

// SetInterface gets a reference to the given []NiatelemetryInterfaceElement and assigns it to the Interface field.
func (o *NiatelemetryNiaInventory) SetInterface(v []NiatelemetryInterfaceElement) {
	o.Interface = v
}

// GetIpAddress returns the IpAddress field value if set, zero value otherwise.
func (o *NiatelemetryNiaInventory) GetIpAddress() string {
	if o == nil || IsNil(o.IpAddress) {
		var ret string
		return ret
	}
	return *o.IpAddress
}

// GetIpAddressOk returns a tuple with the IpAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NiatelemetryNiaInventory) GetIpAddressOk() (*string, bool) {
	if o == nil || IsNil(o.IpAddress) {
		return nil, false
	}
	return o.IpAddress, true
}

// HasIpAddress returns a boolean if a field has been set.
func (o *NiatelemetryNiaInventory) HasIpAddress() bool {
	if o != nil && !IsNil(o.IpAddress) {
		return true
	}

	return false
}

// SetIpAddress gets a reference to the given string and assigns it to the IpAddress field.
func (o *NiatelemetryNiaInventory) SetIpAddress(v string) {
	o.IpAddress = &v
}

// GetIsVirtualNode returns the IsVirtualNode field value if set, zero value otherwise.
func (o *NiatelemetryNiaInventory) GetIsVirtualNode() string {
	if o == nil || IsNil(o.IsVirtualNode) {
		var ret string
		return ret
	}
	return *o.IsVirtualNode
}

// GetIsVirtualNodeOk returns a tuple with the IsVirtualNode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NiatelemetryNiaInventory) GetIsVirtualNodeOk() (*string, bool) {
	if o == nil || IsNil(o.IsVirtualNode) {
		return nil, false
	}
	return o.IsVirtualNode, true
}

// HasIsVirtualNode returns a boolean if a field has been set.
func (o *NiatelemetryNiaInventory) HasIsVirtualNode() bool {
	if o != nil && !IsNil(o.IsVirtualNode) {
		return true
	}

	return false
}

// SetIsVirtualNode gets a reference to the given string and assigns it to the IsVirtualNode field.
func (o *NiatelemetryNiaInventory) SetIsVirtualNode(v string) {
	o.IsVirtualNode = &v
}

// GetLastRebootTime returns the LastRebootTime field value if set, zero value otherwise.
func (o *NiatelemetryNiaInventory) GetLastRebootTime() string {
	if o == nil || IsNil(o.LastRebootTime) {
		var ret string
		return ret
	}
	return *o.LastRebootTime
}

// GetLastRebootTimeOk returns a tuple with the LastRebootTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NiatelemetryNiaInventory) GetLastRebootTimeOk() (*string, bool) {
	if o == nil || IsNil(o.LastRebootTime) {
		return nil, false
	}
	return o.LastRebootTime, true
}

// HasLastRebootTime returns a boolean if a field has been set.
func (o *NiatelemetryNiaInventory) HasLastRebootTime() bool {
	if o != nil && !IsNil(o.LastRebootTime) {
		return true
	}

	return false
}

// SetLastRebootTime gets a reference to the given string and assigns it to the LastRebootTime field.
func (o *NiatelemetryNiaInventory) SetLastRebootTime(v string) {
	o.LastRebootTime = &v
}

// GetLastResetReason returns the LastResetReason field value if set, zero value otherwise.
func (o *NiatelemetryNiaInventory) GetLastResetReason() string {
	if o == nil || IsNil(o.LastResetReason) {
		var ret string
		return ret
	}
	return *o.LastResetReason
}

// GetLastResetReasonOk returns a tuple with the LastResetReason field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NiatelemetryNiaInventory) GetLastResetReasonOk() (*string, bool) {
	if o == nil || IsNil(o.LastResetReason) {
		return nil, false
	}
	return o.LastResetReason, true
}

// HasLastResetReason returns a boolean if a field has been set.
func (o *NiatelemetryNiaInventory) HasLastResetReason() bool {
	if o != nil && !IsNil(o.LastResetReason) {
		return true
	}

	return false
}

// SetLastResetReason gets a reference to the given string and assigns it to the LastResetReason field.
func (o *NiatelemetryNiaInventory) SetLastResetReason(v string) {
	o.LastResetReason = &v
}

// GetLicenseType returns the LicenseType field value if set, zero value otherwise.
func (o *NiatelemetryNiaInventory) GetLicenseType() string {
	if o == nil || IsNil(o.LicenseType) {
		var ret string
		return ret
	}
	return *o.LicenseType
}

// GetLicenseTypeOk returns a tuple with the LicenseType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NiatelemetryNiaInventory) GetLicenseTypeOk() (*string, bool) {
	if o == nil || IsNil(o.LicenseType) {
		return nil, false
	}
	return o.LicenseType, true
}

// HasLicenseType returns a boolean if a field has been set.
func (o *NiatelemetryNiaInventory) HasLicenseType() bool {
	if o != nil && !IsNil(o.LicenseType) {
		return true
	}

	return false
}

// SetLicenseType gets a reference to the given string and assigns it to the LicenseType field.
func (o *NiatelemetryNiaInventory) SetLicenseType(v string) {
	o.LicenseType = &v
}

// GetLogInTime returns the LogInTime field value if set, zero value otherwise.
func (o *NiatelemetryNiaInventory) GetLogInTime() string {
	if o == nil || IsNil(o.LogInTime) {
		var ret string
		return ret
	}
	return *o.LogInTime
}

// GetLogInTimeOk returns a tuple with the LogInTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NiatelemetryNiaInventory) GetLogInTimeOk() (*string, bool) {
	if o == nil || IsNil(o.LogInTime) {
		return nil, false
	}
	return o.LogInTime, true
}

// HasLogInTime returns a boolean if a field has been set.
func (o *NiatelemetryNiaInventory) HasLogInTime() bool {
	if o != nil && !IsNil(o.LogInTime) {
		return true
	}

	return false
}

// SetLogInTime gets a reference to the given string and assigns it to the LogInTime field.
func (o *NiatelemetryNiaInventory) SetLogInTime(v string) {
	o.LogInTime = &v
}

// GetLogOutTime returns the LogOutTime field value if set, zero value otherwise.
func (o *NiatelemetryNiaInventory) GetLogOutTime() string {
	if o == nil || IsNil(o.LogOutTime) {
		var ret string
		return ret
	}
	return *o.LogOutTime
}

// GetLogOutTimeOk returns a tuple with the LogOutTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NiatelemetryNiaInventory) GetLogOutTimeOk() (*string, bool) {
	if o == nil || IsNil(o.LogOutTime) {
		return nil, false
	}
	return o.LogOutTime, true
}

// HasLogOutTime returns a boolean if a field has been set.
func (o *NiatelemetryNiaInventory) HasLogOutTime() bool {
	if o != nil && !IsNil(o.LogOutTime) {
		return true
	}

	return false
}

// SetLogOutTime gets a reference to the given string and assigns it to the LogOutTime field.
func (o *NiatelemetryNiaInventory) SetLogOutTime(v string) {
	o.LogOutTime = &v
}

// GetMacSecCount returns the MacSecCount field value if set, zero value otherwise.
func (o *NiatelemetryNiaInventory) GetMacSecCount() int64 {
	if o == nil || IsNil(o.MacSecCount) {
		var ret int64
		return ret
	}
	return *o.MacSecCount
}

// GetMacSecCountOk returns a tuple with the MacSecCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NiatelemetryNiaInventory) GetMacSecCountOk() (*int64, bool) {
	if o == nil || IsNil(o.MacSecCount) {
		return nil, false
	}
	return o.MacSecCount, true
}

// HasMacSecCount returns a boolean if a field has been set.
func (o *NiatelemetryNiaInventory) HasMacSecCount() bool {
	if o != nil && !IsNil(o.MacSecCount) {
		return true
	}

	return false
}

// SetMacSecCount gets a reference to the given int64 and assigns it to the MacSecCount field.
func (o *NiatelemetryNiaInventory) SetMacSecCount(v int64) {
	o.MacSecCount = &v
}

// GetMacSecFabCount returns the MacSecFabCount field value if set, zero value otherwise.
func (o *NiatelemetryNiaInventory) GetMacSecFabCount() int64 {
	if o == nil || IsNil(o.MacSecFabCount) {
		var ret int64
		return ret
	}
	return *o.MacSecFabCount
}

// GetMacSecFabCountOk returns a tuple with the MacSecFabCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NiatelemetryNiaInventory) GetMacSecFabCountOk() (*int64, bool) {
	if o == nil || IsNil(o.MacSecFabCount) {
		return nil, false
	}
	return o.MacSecFabCount, true
}

// HasMacSecFabCount returns a boolean if a field has been set.
func (o *NiatelemetryNiaInventory) HasMacSecFabCount() bool {
	if o != nil && !IsNil(o.MacSecFabCount) {
		return true
	}

	return false
}

// SetMacSecFabCount gets a reference to the given int64 and assigns it to the MacSecFabCount field.
func (o *NiatelemetryNiaInventory) SetMacSecFabCount(v int64) {
	o.MacSecFabCount = &v
}

// GetMacsecTotalCount returns the MacsecTotalCount field value if set, zero value otherwise.
func (o *NiatelemetryNiaInventory) GetMacsecTotalCount() int64 {
	if o == nil || IsNil(o.MacsecTotalCount) {
		var ret int64
		return ret
	}
	return *o.MacsecTotalCount
}

// GetMacsecTotalCountOk returns a tuple with the MacsecTotalCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NiatelemetryNiaInventory) GetMacsecTotalCountOk() (*int64, bool) {
	if o == nil || IsNil(o.MacsecTotalCount) {
		return nil, false
	}
	return o.MacsecTotalCount, true
}

// HasMacsecTotalCount returns a boolean if a field has been set.
func (o *NiatelemetryNiaInventory) HasMacsecTotalCount() bool {
	if o != nil && !IsNil(o.MacsecTotalCount) {
		return true
	}

	return false
}

// SetMacsecTotalCount gets a reference to the given int64 and assigns it to the MacsecTotalCount field.
func (o *NiatelemetryNiaInventory) SetMacsecTotalCount(v int64) {
	o.MacsecTotalCount = &v
}

// GetMemory returns the Memory field value if set, zero value otherwise.
func (o *NiatelemetryNiaInventory) GetMemory() int64 {
	if o == nil || IsNil(o.Memory) {
		var ret int64
		return ret
	}
	return *o.Memory
}

// GetMemoryOk returns a tuple with the Memory field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NiatelemetryNiaInventory) GetMemoryOk() (*int64, bool) {
	if o == nil || IsNil(o.Memory) {
		return nil, false
	}
	return o.Memory, true
}

// HasMemory returns a boolean if a field has been set.
func (o *NiatelemetryNiaInventory) HasMemory() bool {
	if o != nil && !IsNil(o.Memory) {
		return true
	}

	return false
}

// SetMemory gets a reference to the given int64 and assigns it to the Memory field.
func (o *NiatelemetryNiaInventory) SetMemory(v int64) {
	o.Memory = &v
}

// GetNexusCloudMembershipStatus returns the NexusCloudMembershipStatus field value if set, zero value otherwise.
func (o *NiatelemetryNiaInventory) GetNexusCloudMembershipStatus() bool {
	if o == nil || IsNil(o.NexusCloudMembershipStatus) {
		var ret bool
		return ret
	}
	return *o.NexusCloudMembershipStatus
}

// GetNexusCloudMembershipStatusOk returns a tuple with the NexusCloudMembershipStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NiatelemetryNiaInventory) GetNexusCloudMembershipStatusOk() (*bool, bool) {
	if o == nil || IsNil(o.NexusCloudMembershipStatus) {
		return nil, false
	}
	return o.NexusCloudMembershipStatus, true
}

// HasNexusCloudMembershipStatus returns a boolean if a field has been set.
func (o *NiatelemetryNiaInventory) HasNexusCloudMembershipStatus() bool {
	if o != nil && !IsNil(o.NexusCloudMembershipStatus) {
		return true
	}

	return false
}

// SetNexusCloudMembershipStatus gets a reference to the given bool and assigns it to the NexusCloudMembershipStatus field.
func (o *NiatelemetryNiaInventory) SetNexusCloudMembershipStatus(v bool) {
	o.NexusCloudMembershipStatus = &v
}

// GetNodeId returns the NodeId field value if set, zero value otherwise.
func (o *NiatelemetryNiaInventory) GetNodeId() string {
	if o == nil || IsNil(o.NodeId) {
		var ret string
		return ret
	}
	return *o.NodeId
}

// GetNodeIdOk returns a tuple with the NodeId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NiatelemetryNiaInventory) GetNodeIdOk() (*string, bool) {
	if o == nil || IsNil(o.NodeId) {
		return nil, false
	}
	return o.NodeId, true
}

// HasNodeId returns a boolean if a field has been set.
func (o *NiatelemetryNiaInventory) HasNodeId() bool {
	if o != nil && !IsNil(o.NodeId) {
		return true
	}

	return false
}

// SetNodeId gets a reference to the given string and assigns it to the NodeId field.
func (o *NiatelemetryNiaInventory) SetNodeId(v string) {
	o.NodeId = &v
}

// GetNxosBgpEvpn returns the NxosBgpEvpn field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NiatelemetryNiaInventory) GetNxosBgpEvpn() NiatelemetryNxosBgpEvpn {
	if o == nil || IsNil(o.NxosBgpEvpn.Get()) {
		var ret NiatelemetryNxosBgpEvpn
		return ret
	}
	return *o.NxosBgpEvpn.Get()
}

// GetNxosBgpEvpnOk returns a tuple with the NxosBgpEvpn field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NiatelemetryNiaInventory) GetNxosBgpEvpnOk() (*NiatelemetryNxosBgpEvpn, bool) {
	if o == nil {
		return nil, false
	}
	return o.NxosBgpEvpn.Get(), o.NxosBgpEvpn.IsSet()
}

// HasNxosBgpEvpn returns a boolean if a field has been set.
func (o *NiatelemetryNiaInventory) HasNxosBgpEvpn() bool {
	if o != nil && o.NxosBgpEvpn.IsSet() {
		return true
	}

	return false
}

// SetNxosBgpEvpn gets a reference to the given NullableNiatelemetryNxosBgpEvpn and assigns it to the NxosBgpEvpn field.
func (o *NiatelemetryNiaInventory) SetNxosBgpEvpn(v NiatelemetryNxosBgpEvpn) {
	o.NxosBgpEvpn.Set(&v)
}

// SetNxosBgpEvpnNil sets the value for NxosBgpEvpn to be an explicit nil
func (o *NiatelemetryNiaInventory) SetNxosBgpEvpnNil() {
	o.NxosBgpEvpn.Set(nil)
}

// UnsetNxosBgpEvpn ensures that no value is present for NxosBgpEvpn, not even an explicit nil
func (o *NiatelemetryNiaInventory) UnsetNxosBgpEvpn() {
	o.NxosBgpEvpn.Unset()
}

// GetNxosBgpMvpn returns the NxosBgpMvpn field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NiatelemetryNiaInventory) GetNxosBgpMvpn() NiatelemetryNxosBgpMvpn {
	if o == nil || IsNil(o.NxosBgpMvpn.Get()) {
		var ret NiatelemetryNxosBgpMvpn
		return ret
	}
	return *o.NxosBgpMvpn.Get()
}

// GetNxosBgpMvpnOk returns a tuple with the NxosBgpMvpn field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NiatelemetryNiaInventory) GetNxosBgpMvpnOk() (*NiatelemetryNxosBgpMvpn, bool) {
	if o == nil {
		return nil, false
	}
	return o.NxosBgpMvpn.Get(), o.NxosBgpMvpn.IsSet()
}

// HasNxosBgpMvpn returns a boolean if a field has been set.
func (o *NiatelemetryNiaInventory) HasNxosBgpMvpn() bool {
	if o != nil && o.NxosBgpMvpn.IsSet() {
		return true
	}

	return false
}

// SetNxosBgpMvpn gets a reference to the given NullableNiatelemetryNxosBgpMvpn and assigns it to the NxosBgpMvpn field.
func (o *NiatelemetryNiaInventory) SetNxosBgpMvpn(v NiatelemetryNxosBgpMvpn) {
	o.NxosBgpMvpn.Set(&v)
}

// SetNxosBgpMvpnNil sets the value for NxosBgpMvpn to be an explicit nil
func (o *NiatelemetryNiaInventory) SetNxosBgpMvpnNil() {
	o.NxosBgpMvpn.Set(nil)
}

// UnsetNxosBgpMvpn ensures that no value is present for NxosBgpMvpn, not even an explicit nil
func (o *NiatelemetryNiaInventory) UnsetNxosBgpMvpn() {
	o.NxosBgpMvpn.Unset()
}

// GetNxosBootflashDetails returns the NxosBootflashDetails field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NiatelemetryNiaInventory) GetNxosBootflashDetails() NiatelemetryBootflashDetails {
	if o == nil || IsNil(o.NxosBootflashDetails.Get()) {
		var ret NiatelemetryBootflashDetails
		return ret
	}
	return *o.NxosBootflashDetails.Get()
}

// GetNxosBootflashDetailsOk returns a tuple with the NxosBootflashDetails field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NiatelemetryNiaInventory) GetNxosBootflashDetailsOk() (*NiatelemetryBootflashDetails, bool) {
	if o == nil {
		return nil, false
	}
	return o.NxosBootflashDetails.Get(), o.NxosBootflashDetails.IsSet()
}

// HasNxosBootflashDetails returns a boolean if a field has been set.
func (o *NiatelemetryNiaInventory) HasNxosBootflashDetails() bool {
	if o != nil && o.NxosBootflashDetails.IsSet() {
		return true
	}

	return false
}

// SetNxosBootflashDetails gets a reference to the given NullableNiatelemetryBootflashDetails and assigns it to the NxosBootflashDetails field.
func (o *NiatelemetryNiaInventory) SetNxosBootflashDetails(v NiatelemetryBootflashDetails) {
	o.NxosBootflashDetails.Set(&v)
}

// SetNxosBootflashDetailsNil sets the value for NxosBootflashDetails to be an explicit nil
func (o *NiatelemetryNiaInventory) SetNxosBootflashDetailsNil() {
	o.NxosBootflashDetails.Set(nil)
}

// UnsetNxosBootflashDetails ensures that no value is present for NxosBootflashDetails, not even an explicit nil
func (o *NiatelemetryNiaInventory) UnsetNxosBootflashDetails() {
	o.NxosBootflashDetails.Unset()
}

// GetNxosDciInterfaceStatus returns the NxosDciInterfaceStatus field value if set, zero value otherwise.
func (o *NiatelemetryNiaInventory) GetNxosDciInterfaceStatus() string {
	if o == nil || IsNil(o.NxosDciInterfaceStatus) {
		var ret string
		return ret
	}
	return *o.NxosDciInterfaceStatus
}

// GetNxosDciInterfaceStatusOk returns a tuple with the NxosDciInterfaceStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NiatelemetryNiaInventory) GetNxosDciInterfaceStatusOk() (*string, bool) {
	if o == nil || IsNil(o.NxosDciInterfaceStatus) {
		return nil, false
	}
	return o.NxosDciInterfaceStatus, true
}

// HasNxosDciInterfaceStatus returns a boolean if a field has been set.
func (o *NiatelemetryNiaInventory) HasNxosDciInterfaceStatus() bool {
	if o != nil && !IsNil(o.NxosDciInterfaceStatus) {
		return true
	}

	return false
}

// SetNxosDciInterfaceStatus gets a reference to the given string and assigns it to the NxosDciInterfaceStatus field.
func (o *NiatelemetryNiaInventory) SetNxosDciInterfaceStatus(v string) {
	o.NxosDciInterfaceStatus = &v
}

// GetNxosInterfaceBrief returns the NxosInterfaceBrief field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NiatelemetryNiaInventory) GetNxosInterfaceBrief() NiatelemetryInterface {
	if o == nil || IsNil(o.NxosInterfaceBrief.Get()) {
		var ret NiatelemetryInterface
		return ret
	}
	return *o.NxosInterfaceBrief.Get()
}

// GetNxosInterfaceBriefOk returns a tuple with the NxosInterfaceBrief field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NiatelemetryNiaInventory) GetNxosInterfaceBriefOk() (*NiatelemetryInterface, bool) {
	if o == nil {
		return nil, false
	}
	return o.NxosInterfaceBrief.Get(), o.NxosInterfaceBrief.IsSet()
}

// HasNxosInterfaceBrief returns a boolean if a field has been set.
func (o *NiatelemetryNiaInventory) HasNxosInterfaceBrief() bool {
	if o != nil && o.NxosInterfaceBrief.IsSet() {
		return true
	}

	return false
}

// SetNxosInterfaceBrief gets a reference to the given NullableNiatelemetryInterface and assigns it to the NxosInterfaceBrief field.
func (o *NiatelemetryNiaInventory) SetNxosInterfaceBrief(v NiatelemetryInterface) {
	o.NxosInterfaceBrief.Set(&v)
}

// SetNxosInterfaceBriefNil sets the value for NxosInterfaceBrief to be an explicit nil
func (o *NiatelemetryNiaInventory) SetNxosInterfaceBriefNil() {
	o.NxosInterfaceBrief.Set(nil)
}

// UnsetNxosInterfaceBrief ensures that no value is present for NxosInterfaceBrief, not even an explicit nil
func (o *NiatelemetryNiaInventory) UnsetNxosInterfaceBrief() {
	o.NxosInterfaceBrief.Unset()
}

// GetNxosNveInterfaceStatus returns the NxosNveInterfaceStatus field value if set, zero value otherwise.
func (o *NiatelemetryNiaInventory) GetNxosNveInterfaceStatus() string {
	if o == nil || IsNil(o.NxosNveInterfaceStatus) {
		var ret string
		return ret
	}
	return *o.NxosNveInterfaceStatus
}

// GetNxosNveInterfaceStatusOk returns a tuple with the NxosNveInterfaceStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NiatelemetryNiaInventory) GetNxosNveInterfaceStatusOk() (*string, bool) {
	if o == nil || IsNil(o.NxosNveInterfaceStatus) {
		return nil, false
	}
	return o.NxosNveInterfaceStatus, true
}

// HasNxosNveInterfaceStatus returns a boolean if a field has been set.
func (o *NiatelemetryNiaInventory) HasNxosNveInterfaceStatus() bool {
	if o != nil && !IsNil(o.NxosNveInterfaceStatus) {
		return true
	}

	return false
}

// SetNxosNveInterfaceStatus gets a reference to the given string and assigns it to the NxosNveInterfaceStatus field.
func (o *NiatelemetryNiaInventory) SetNxosNveInterfaceStatus(v string) {
	o.NxosNveInterfaceStatus = &v
}

// GetNxosNvePacketCounters returns the NxosNvePacketCounters field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NiatelemetryNiaInventory) GetNxosNvePacketCounters() NiatelemetryNvePacketCounters {
	if o == nil || IsNil(o.NxosNvePacketCounters.Get()) {
		var ret NiatelemetryNvePacketCounters
		return ret
	}
	return *o.NxosNvePacketCounters.Get()
}

// GetNxosNvePacketCountersOk returns a tuple with the NxosNvePacketCounters field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NiatelemetryNiaInventory) GetNxosNvePacketCountersOk() (*NiatelemetryNvePacketCounters, bool) {
	if o == nil {
		return nil, false
	}
	return o.NxosNvePacketCounters.Get(), o.NxosNvePacketCounters.IsSet()
}

// HasNxosNvePacketCounters returns a boolean if a field has been set.
func (o *NiatelemetryNiaInventory) HasNxosNvePacketCounters() bool {
	if o != nil && o.NxosNvePacketCounters.IsSet() {
		return true
	}

	return false
}

// SetNxosNvePacketCounters gets a reference to the given NullableNiatelemetryNvePacketCounters and assigns it to the NxosNvePacketCounters field.
func (o *NiatelemetryNiaInventory) SetNxosNvePacketCounters(v NiatelemetryNvePacketCounters) {
	o.NxosNvePacketCounters.Set(&v)
}

// SetNxosNvePacketCountersNil sets the value for NxosNvePacketCounters to be an explicit nil
func (o *NiatelemetryNiaInventory) SetNxosNvePacketCountersNil() {
	o.NxosNvePacketCounters.Set(nil)
}

// UnsetNxosNvePacketCounters ensures that no value is present for NxosNvePacketCounters, not even an explicit nil
func (o *NiatelemetryNiaInventory) UnsetNxosNvePacketCounters() {
	o.NxosNvePacketCounters.Unset()
}

// GetNxosNveVni returns the NxosNveVni field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NiatelemetryNiaInventory) GetNxosNveVni() NiatelemetryNveVni {
	if o == nil || IsNil(o.NxosNveVni.Get()) {
		var ret NiatelemetryNveVni
		return ret
	}
	return *o.NxosNveVni.Get()
}

// GetNxosNveVniOk returns a tuple with the NxosNveVni field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NiatelemetryNiaInventory) GetNxosNveVniOk() (*NiatelemetryNveVni, bool) {
	if o == nil {
		return nil, false
	}
	return o.NxosNveVni.Get(), o.NxosNveVni.IsSet()
}

// HasNxosNveVni returns a boolean if a field has been set.
func (o *NiatelemetryNiaInventory) HasNxosNveVni() bool {
	if o != nil && o.NxosNveVni.IsSet() {
		return true
	}

	return false
}

// SetNxosNveVni gets a reference to the given NullableNiatelemetryNveVni and assigns it to the NxosNveVni field.
func (o *NiatelemetryNiaInventory) SetNxosNveVni(v NiatelemetryNveVni) {
	o.NxosNveVni.Set(&v)
}

// SetNxosNveVniNil sets the value for NxosNveVni to be an explicit nil
func (o *NiatelemetryNiaInventory) SetNxosNveVniNil() {
	o.NxosNveVni.Set(nil)
}

// UnsetNxosNveVni ensures that no value is present for NxosNveVni, not even an explicit nil
func (o *NiatelemetryNiaInventory) UnsetNxosNveVni() {
	o.NxosNveVni.Unset()
}

// GetNxosOspfNeighbors returns the NxosOspfNeighbors field value if set, zero value otherwise.
func (o *NiatelemetryNiaInventory) GetNxosOspfNeighbors() int64 {
	if o == nil || IsNil(o.NxosOspfNeighbors) {
		var ret int64
		return ret
	}
	return *o.NxosOspfNeighbors
}

// GetNxosOspfNeighborsOk returns a tuple with the NxosOspfNeighbors field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NiatelemetryNiaInventory) GetNxosOspfNeighborsOk() (*int64, bool) {
	if o == nil || IsNil(o.NxosOspfNeighbors) {
		return nil, false
	}
	return o.NxosOspfNeighbors, true
}

// HasNxosOspfNeighbors returns a boolean if a field has been set.
func (o *NiatelemetryNiaInventory) HasNxosOspfNeighbors() bool {
	if o != nil && !IsNil(o.NxosOspfNeighbors) {
		return true
	}

	return false
}

// SetNxosOspfNeighbors gets a reference to the given int64 and assigns it to the NxosOspfNeighbors field.
func (o *NiatelemetryNiaInventory) SetNxosOspfNeighbors(v int64) {
	o.NxosOspfNeighbors = &v
}

// GetNxosPimNeighbors returns the NxosPimNeighbors field value if set, zero value otherwise.
func (o *NiatelemetryNiaInventory) GetNxosPimNeighbors() string {
	if o == nil || IsNil(o.NxosPimNeighbors) {
		var ret string
		return ret
	}
	return *o.NxosPimNeighbors
}

// GetNxosPimNeighborsOk returns a tuple with the NxosPimNeighbors field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NiatelemetryNiaInventory) GetNxosPimNeighborsOk() (*string, bool) {
	if o == nil || IsNil(o.NxosPimNeighbors) {
		return nil, false
	}
	return o.NxosPimNeighbors, true
}

// HasNxosPimNeighbors returns a boolean if a field has been set.
func (o *NiatelemetryNiaInventory) HasNxosPimNeighbors() bool {
	if o != nil && !IsNil(o.NxosPimNeighbors) {
		return true
	}

	return false
}

// SetNxosPimNeighbors gets a reference to the given string and assigns it to the NxosPimNeighbors field.
func (o *NiatelemetryNiaInventory) SetNxosPimNeighbors(v string) {
	o.NxosPimNeighbors = &v
}

// GetNxosTelnet returns the NxosTelnet field value if set, zero value otherwise.
func (o *NiatelemetryNiaInventory) GetNxosTelnet() string {
	if o == nil || IsNil(o.NxosTelnet) {
		var ret string
		return ret
	}
	return *o.NxosTelnet
}

// GetNxosTelnetOk returns a tuple with the NxosTelnet field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NiatelemetryNiaInventory) GetNxosTelnetOk() (*string, bool) {
	if o == nil || IsNil(o.NxosTelnet) {
		return nil, false
	}
	return o.NxosTelnet, true
}

// HasNxosTelnet returns a boolean if a field has been set.
func (o *NiatelemetryNiaInventory) HasNxosTelnet() bool {
	if o != nil && !IsNil(o.NxosTelnet) {
		return true
	}

	return false
}

// SetNxosTelnet gets a reference to the given string and assigns it to the NxosTelnet field.
func (o *NiatelemetryNiaInventory) SetNxosTelnet(v string) {
	o.NxosTelnet = &v
}

// GetNxosTotalRoutes returns the NxosTotalRoutes field value if set, zero value otherwise.
func (o *NiatelemetryNiaInventory) GetNxosTotalRoutes() int64 {
	if o == nil || IsNil(o.NxosTotalRoutes) {
		var ret int64
		return ret
	}
	return *o.NxosTotalRoutes
}

// GetNxosTotalRoutesOk returns a tuple with the NxosTotalRoutes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NiatelemetryNiaInventory) GetNxosTotalRoutesOk() (*int64, bool) {
	if o == nil || IsNil(o.NxosTotalRoutes) {
		return nil, false
	}
	return o.NxosTotalRoutes, true
}

// HasNxosTotalRoutes returns a boolean if a field has been set.
func (o *NiatelemetryNiaInventory) HasNxosTotalRoutes() bool {
	if o != nil && !IsNil(o.NxosTotalRoutes) {
		return true
	}

	return false
}

// SetNxosTotalRoutes gets a reference to the given int64 and assigns it to the NxosTotalRoutes field.
func (o *NiatelemetryNiaInventory) SetNxosTotalRoutes(v int64) {
	o.NxosTotalRoutes = &v
}

// GetNxosVtp returns the NxosVtp field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NiatelemetryNiaInventory) GetNxosVtp() NiatelemetryNxosVtp {
	if o == nil || IsNil(o.NxosVtp.Get()) {
		var ret NiatelemetryNxosVtp
		return ret
	}
	return *o.NxosVtp.Get()
}

// GetNxosVtpOk returns a tuple with the NxosVtp field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NiatelemetryNiaInventory) GetNxosVtpOk() (*NiatelemetryNxosVtp, bool) {
	if o == nil {
		return nil, false
	}
	return o.NxosVtp.Get(), o.NxosVtp.IsSet()
}

// HasNxosVtp returns a boolean if a field has been set.
func (o *NiatelemetryNiaInventory) HasNxosVtp() bool {
	if o != nil && o.NxosVtp.IsSet() {
		return true
	}

	return false
}

// SetNxosVtp gets a reference to the given NullableNiatelemetryNxosVtp and assigns it to the NxosVtp field.
func (o *NiatelemetryNiaInventory) SetNxosVtp(v NiatelemetryNxosVtp) {
	o.NxosVtp.Set(&v)
}

// SetNxosVtpNil sets the value for NxosVtp to be an explicit nil
func (o *NiatelemetryNiaInventory) SetNxosVtpNil() {
	o.NxosVtp.Set(nil)
}

// UnsetNxosVtp ensures that no value is present for NxosVtp, not even an explicit nil
func (o *NiatelemetryNiaInventory) UnsetNxosVtp() {
	o.NxosVtp.Unset()
}

// GetRecordType returns the RecordType field value if set, zero value otherwise.
func (o *NiatelemetryNiaInventory) GetRecordType() string {
	if o == nil || IsNil(o.RecordType) {
		var ret string
		return ret
	}
	return *o.RecordType
}

// GetRecordTypeOk returns a tuple with the RecordType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NiatelemetryNiaInventory) GetRecordTypeOk() (*string, bool) {
	if o == nil || IsNil(o.RecordType) {
		return nil, false
	}
	return o.RecordType, true
}

// HasRecordType returns a boolean if a field has been set.
func (o *NiatelemetryNiaInventory) HasRecordType() bool {
	if o != nil && !IsNil(o.RecordType) {
		return true
	}

	return false
}

// SetRecordType gets a reference to the given string and assigns it to the RecordType field.
func (o *NiatelemetryNiaInventory) SetRecordType(v string) {
	o.RecordType = &v
}

// GetRecordVersion returns the RecordVersion field value if set, zero value otherwise.
func (o *NiatelemetryNiaInventory) GetRecordVersion() string {
	if o == nil || IsNil(o.RecordVersion) {
		var ret string
		return ret
	}
	return *o.RecordVersion
}

// GetRecordVersionOk returns a tuple with the RecordVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NiatelemetryNiaInventory) GetRecordVersionOk() (*string, bool) {
	if o == nil || IsNil(o.RecordVersion) {
		return nil, false
	}
	return o.RecordVersion, true
}

// HasRecordVersion returns a boolean if a field has been set.
func (o *NiatelemetryNiaInventory) HasRecordVersion() bool {
	if o != nil && !IsNil(o.RecordVersion) {
		return true
	}

	return false
}

// SetRecordVersion gets a reference to the given string and assigns it to the RecordVersion field.
func (o *NiatelemetryNiaInventory) SetRecordVersion(v string) {
	o.RecordVersion = &v
}

// GetRoutePrefixCount returns the RoutePrefixCount field value if set, zero value otherwise.
func (o *NiatelemetryNiaInventory) GetRoutePrefixCount() int64 {
	if o == nil || IsNil(o.RoutePrefixCount) {
		var ret int64
		return ret
	}
	return *o.RoutePrefixCount
}

// GetRoutePrefixCountOk returns a tuple with the RoutePrefixCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NiatelemetryNiaInventory) GetRoutePrefixCountOk() (*int64, bool) {
	if o == nil || IsNil(o.RoutePrefixCount) {
		return nil, false
	}
	return o.RoutePrefixCount, true
}

// HasRoutePrefixCount returns a boolean if a field has been set.
func (o *NiatelemetryNiaInventory) HasRoutePrefixCount() bool {
	if o != nil && !IsNil(o.RoutePrefixCount) {
		return true
	}

	return false
}

// SetRoutePrefixCount gets a reference to the given int64 and assigns it to the RoutePrefixCount field.
func (o *NiatelemetryNiaInventory) SetRoutePrefixCount(v int64) {
	o.RoutePrefixCount = &v
}

// GetRoutePrefixV4Count returns the RoutePrefixV4Count field value if set, zero value otherwise.
func (o *NiatelemetryNiaInventory) GetRoutePrefixV4Count() int64 {
	if o == nil || IsNil(o.RoutePrefixV4Count) {
		var ret int64
		return ret
	}
	return *o.RoutePrefixV4Count
}

// GetRoutePrefixV4CountOk returns a tuple with the RoutePrefixV4Count field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NiatelemetryNiaInventory) GetRoutePrefixV4CountOk() (*int64, bool) {
	if o == nil || IsNil(o.RoutePrefixV4Count) {
		return nil, false
	}
	return o.RoutePrefixV4Count, true
}

// HasRoutePrefixV4Count returns a boolean if a field has been set.
func (o *NiatelemetryNiaInventory) HasRoutePrefixV4Count() bool {
	if o != nil && !IsNil(o.RoutePrefixV4Count) {
		return true
	}

	return false
}

// SetRoutePrefixV4Count gets a reference to the given int64 and assigns it to the RoutePrefixV4Count field.
func (o *NiatelemetryNiaInventory) SetRoutePrefixV4Count(v int64) {
	o.RoutePrefixV4Count = &v
}

// GetRoutePrefixV6Count returns the RoutePrefixV6Count field value if set, zero value otherwise.
func (o *NiatelemetryNiaInventory) GetRoutePrefixV6Count() int64 {
	if o == nil || IsNil(o.RoutePrefixV6Count) {
		var ret int64
		return ret
	}
	return *o.RoutePrefixV6Count
}

// GetRoutePrefixV6CountOk returns a tuple with the RoutePrefixV6Count field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NiatelemetryNiaInventory) GetRoutePrefixV6CountOk() (*int64, bool) {
	if o == nil || IsNil(o.RoutePrefixV6Count) {
		return nil, false
	}
	return o.RoutePrefixV6Count, true
}

// HasRoutePrefixV6Count returns a boolean if a field has been set.
func (o *NiatelemetryNiaInventory) HasRoutePrefixV6Count() bool {
	if o != nil && !IsNil(o.RoutePrefixV6Count) {
		return true
	}

	return false
}

// SetRoutePrefixV6Count gets a reference to the given int64 and assigns it to the RoutePrefixV6Count field.
func (o *NiatelemetryNiaInventory) SetRoutePrefixV6Count(v int64) {
	o.RoutePrefixV6Count = &v
}

// GetSerial returns the Serial field value if set, zero value otherwise.
func (o *NiatelemetryNiaInventory) GetSerial() string {
	if o == nil || IsNil(o.Serial) {
		var ret string
		return ret
	}
	return *o.Serial
}

// GetSerialOk returns a tuple with the Serial field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NiatelemetryNiaInventory) GetSerialOk() (*string, bool) {
	if o == nil || IsNil(o.Serial) {
		return nil, false
	}
	return o.Serial, true
}

// HasSerial returns a boolean if a field has been set.
func (o *NiatelemetryNiaInventory) HasSerial() bool {
	if o != nil && !IsNil(o.Serial) {
		return true
	}

	return false
}

// SetSerial gets a reference to the given string and assigns it to the Serial field.
func (o *NiatelemetryNiaInventory) SetSerial(v string) {
	o.Serial = &v
}

// GetSiteName returns the SiteName field value if set, zero value otherwise.
func (o *NiatelemetryNiaInventory) GetSiteName() string {
	if o == nil || IsNil(o.SiteName) {
		var ret string
		return ret
	}
	return *o.SiteName
}

// GetSiteNameOk returns a tuple with the SiteName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NiatelemetryNiaInventory) GetSiteNameOk() (*string, bool) {
	if o == nil || IsNil(o.SiteName) {
		return nil, false
	}
	return o.SiteName, true
}

// HasSiteName returns a boolean if a field has been set.
func (o *NiatelemetryNiaInventory) HasSiteName() bool {
	if o != nil && !IsNil(o.SiteName) {
		return true
	}

	return false
}

// SetSiteName gets a reference to the given string and assigns it to the SiteName field.
func (o *NiatelemetryNiaInventory) SetSiteName(v string) {
	o.SiteName = &v
}

// GetSiteuuid returns the Siteuuid field value if set, zero value otherwise.
func (o *NiatelemetryNiaInventory) GetSiteuuid() string {
	if o == nil || IsNil(o.Siteuuid) {
		var ret string
		return ret
	}
	return *o.Siteuuid
}

// GetSiteuuidOk returns a tuple with the Siteuuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NiatelemetryNiaInventory) GetSiteuuidOk() (*string, bool) {
	if o == nil || IsNil(o.Siteuuid) {
		return nil, false
	}
	return o.Siteuuid, true
}

// HasSiteuuid returns a boolean if a field has been set.
func (o *NiatelemetryNiaInventory) HasSiteuuid() bool {
	if o != nil && !IsNil(o.Siteuuid) {
		return true
	}

	return false
}

// SetSiteuuid gets a reference to the given string and assigns it to the Siteuuid field.
func (o *NiatelemetryNiaInventory) SetSiteuuid(v string) {
	o.Siteuuid = &v
}

// GetSmartAccountId returns the SmartAccountId field value if set, zero value otherwise.
func (o *NiatelemetryNiaInventory) GetSmartAccountId() int64 {
	if o == nil || IsNil(o.SmartAccountId) {
		var ret int64
		return ret
	}
	return *o.SmartAccountId
}

// GetSmartAccountIdOk returns a tuple with the SmartAccountId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NiatelemetryNiaInventory) GetSmartAccountIdOk() (*int64, bool) {
	if o == nil || IsNil(o.SmartAccountId) {
		return nil, false
	}
	return o.SmartAccountId, true
}

// HasSmartAccountId returns a boolean if a field has been set.
func (o *NiatelemetryNiaInventory) HasSmartAccountId() bool {
	if o != nil && !IsNil(o.SmartAccountId) {
		return true
	}

	return false
}

// SetSmartAccountId gets a reference to the given int64 and assigns it to the SmartAccountId field.
func (o *NiatelemetryNiaInventory) SetSmartAccountId(v int64) {
	o.SmartAccountId = &v
}

// GetSoftwareDownload returns the SoftwareDownload field value if set, zero value otherwise.
func (o *NiatelemetryNiaInventory) GetSoftwareDownload() string {
	if o == nil || IsNil(o.SoftwareDownload) {
		var ret string
		return ret
	}
	return *o.SoftwareDownload
}

// GetSoftwareDownloadOk returns a tuple with the SoftwareDownload field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NiatelemetryNiaInventory) GetSoftwareDownloadOk() (*string, bool) {
	if o == nil || IsNil(o.SoftwareDownload) {
		return nil, false
	}
	return o.SoftwareDownload, true
}

// HasSoftwareDownload returns a boolean if a field has been set.
func (o *NiatelemetryNiaInventory) HasSoftwareDownload() bool {
	if o != nil && !IsNil(o.SoftwareDownload) {
		return true
	}

	return false
}

// SetSoftwareDownload gets a reference to the given string and assigns it to the SoftwareDownload field.
func (o *NiatelemetryNiaInventory) SetSoftwareDownload(v string) {
	o.SoftwareDownload = &v
}

// GetSystemUpTime returns the SystemUpTime field value if set, zero value otherwise.
func (o *NiatelemetryNiaInventory) GetSystemUpTime() string {
	if o == nil || IsNil(o.SystemUpTime) {
		var ret string
		return ret
	}
	return *o.SystemUpTime
}

// GetSystemUpTimeOk returns a tuple with the SystemUpTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NiatelemetryNiaInventory) GetSystemUpTimeOk() (*string, bool) {
	if o == nil || IsNil(o.SystemUpTime) {
		return nil, false
	}
	return o.SystemUpTime, true
}

// HasSystemUpTime returns a boolean if a field has been set.
func (o *NiatelemetryNiaInventory) HasSystemUpTime() bool {
	if o != nil && !IsNil(o.SystemUpTime) {
		return true
	}

	return false
}

// SetSystemUpTime gets a reference to the given string and assigns it to the SystemUpTime field.
func (o *NiatelemetryNiaInventory) SetSystemUpTime(v string) {
	o.SystemUpTime = &v
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *NiatelemetryNiaInventory) GetVersion() string {
	if o == nil || IsNil(o.Version) {
		var ret string
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NiatelemetryNiaInventory) GetVersionOk() (*string, bool) {
	if o == nil || IsNil(o.Version) {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *NiatelemetryNiaInventory) HasVersion() bool {
	if o != nil && !IsNil(o.Version) {
		return true
	}

	return false
}

// SetVersion gets a reference to the given string and assigns it to the Version field.
func (o *NiatelemetryNiaInventory) SetVersion(v string) {
	o.Version = &v
}

// GetVniStatus returns the VniStatus field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NiatelemetryNiaInventory) GetVniStatus() []NiatelemetryVniStatus {
	if o == nil {
		var ret []NiatelemetryVniStatus
		return ret
	}
	return o.VniStatus
}

// GetVniStatusOk returns a tuple with the VniStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NiatelemetryNiaInventory) GetVniStatusOk() ([]NiatelemetryVniStatus, bool) {
	if o == nil || IsNil(o.VniStatus) {
		return nil, false
	}
	return o.VniStatus, true
}

// HasVniStatus returns a boolean if a field has been set.
func (o *NiatelemetryNiaInventory) HasVniStatus() bool {
	if o != nil && !IsNil(o.VniStatus) {
		return true
	}

	return false
}

// SetVniStatus gets a reference to the given []NiatelemetryVniStatus and assigns it to the VniStatus field.
func (o *NiatelemetryNiaInventory) SetVniStatus(v []NiatelemetryVniStatus) {
	o.VniStatus = v
}

// GetVpcPeerIpAddress returns the VpcPeerIpAddress field value if set, zero value otherwise.
func (o *NiatelemetryNiaInventory) GetVpcPeerIpAddress() string {
	if o == nil || IsNil(o.VpcPeerIpAddress) {
		var ret string
		return ret
	}
	return *o.VpcPeerIpAddress
}

// GetVpcPeerIpAddressOk returns a tuple with the VpcPeerIpAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NiatelemetryNiaInventory) GetVpcPeerIpAddressOk() (*string, bool) {
	if o == nil || IsNil(o.VpcPeerIpAddress) {
		return nil, false
	}
	return o.VpcPeerIpAddress, true
}

// HasVpcPeerIpAddress returns a boolean if a field has been set.
func (o *NiatelemetryNiaInventory) HasVpcPeerIpAddress() bool {
	if o != nil && !IsNil(o.VpcPeerIpAddress) {
		return true
	}

	return false
}

// SetVpcPeerIpAddress gets a reference to the given string and assigns it to the VpcPeerIpAddress field.
func (o *NiatelemetryNiaInventory) SetVpcPeerIpAddress(v string) {
	o.VpcPeerIpAddress = &v
}

// GetLicenseState returns the LicenseState field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NiatelemetryNiaInventory) GetLicenseState() NiatelemetryNiaLicenseStateRelationship {
	if o == nil || IsNil(o.LicenseState.Get()) {
		var ret NiatelemetryNiaLicenseStateRelationship
		return ret
	}
	return *o.LicenseState.Get()
}

// GetLicenseStateOk returns a tuple with the LicenseState field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NiatelemetryNiaInventory) GetLicenseStateOk() (*NiatelemetryNiaLicenseStateRelationship, bool) {
	if o == nil {
		return nil, false
	}
	return o.LicenseState.Get(), o.LicenseState.IsSet()
}

// HasLicenseState returns a boolean if a field has been set.
func (o *NiatelemetryNiaInventory) HasLicenseState() bool {
	if o != nil && o.LicenseState.IsSet() {
		return true
	}

	return false
}

// SetLicenseState gets a reference to the given NullableNiatelemetryNiaLicenseStateRelationship and assigns it to the LicenseState field.
func (o *NiatelemetryNiaInventory) SetLicenseState(v NiatelemetryNiaLicenseStateRelationship) {
	o.LicenseState.Set(&v)
}

// SetLicenseStateNil sets the value for LicenseState to be an explicit nil
func (o *NiatelemetryNiaInventory) SetLicenseStateNil() {
	o.LicenseState.Set(nil)
}

// UnsetLicenseState ensures that no value is present for LicenseState, not even an explicit nil
func (o *NiatelemetryNiaInventory) UnsetLicenseState() {
	o.LicenseState.Unset()
}

// GetRegisteredDevice returns the RegisteredDevice field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NiatelemetryNiaInventory) GetRegisteredDevice() AssetDeviceRegistrationRelationship {
	if o == nil || IsNil(o.RegisteredDevice.Get()) {
		var ret AssetDeviceRegistrationRelationship
		return ret
	}
	return *o.RegisteredDevice.Get()
}

// GetRegisteredDeviceOk returns a tuple with the RegisteredDevice field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NiatelemetryNiaInventory) GetRegisteredDeviceOk() (*AssetDeviceRegistrationRelationship, bool) {
	if o == nil {
		return nil, false
	}
	return o.RegisteredDevice.Get(), o.RegisteredDevice.IsSet()
}

// HasRegisteredDevice returns a boolean if a field has been set.
func (o *NiatelemetryNiaInventory) HasRegisteredDevice() bool {
	if o != nil && o.RegisteredDevice.IsSet() {
		return true
	}

	return false
}

// SetRegisteredDevice gets a reference to the given NullableAssetDeviceRegistrationRelationship and assigns it to the RegisteredDevice field.
func (o *NiatelemetryNiaInventory) SetRegisteredDevice(v AssetDeviceRegistrationRelationship) {
	o.RegisteredDevice.Set(&v)
}

// SetRegisteredDeviceNil sets the value for RegisteredDevice to be an explicit nil
func (o *NiatelemetryNiaInventory) SetRegisteredDeviceNil() {
	o.RegisteredDevice.Set(nil)
}

// UnsetRegisteredDevice ensures that no value is present for RegisteredDevice, not even an explicit nil
func (o *NiatelemetryNiaInventory) UnsetRegisteredDevice() {
	o.RegisteredDevice.Unset()
}

func (o NiatelemetryNiaInventory) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NiatelemetryNiaInventory) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	serializedMoBaseMo, errMoBaseMo := json.Marshal(o.MoBaseMo)
	if errMoBaseMo != nil {
		return map[string]interface{}{}, errMoBaseMo
	}
	errMoBaseMo = json.Unmarshal([]byte(serializedMoBaseMo), &toSerialize)
	if errMoBaseMo != nil {
		return map[string]interface{}{}, errMoBaseMo
	}
	if _, exists := toSerialize["ClassId"]; !exists {
		toSerialize["ClassId"] = o.GetDefaultClassId()
	}
	toSerialize["ClassId"] = o.ClassId
	if _, exists := toSerialize["ObjectType"]; !exists {
		toSerialize["ObjectType"] = o.GetDefaultObjectType()
	}
	toSerialize["ObjectType"] = o.ObjectType
	if !IsNil(o.ControllerIpAddress) {
		toSerialize["ControllerIpAddress"] = o.ControllerIpAddress
	}
	if !IsNil(o.Cpu) {
		toSerialize["Cpu"] = o.Cpu
	}
	if !IsNil(o.CrashResetLogs) {
		toSerialize["CrashResetLogs"] = o.CrashResetLogs
	}
	if !IsNil(o.CustomerDeviceConnector) {
		toSerialize["CustomerDeviceConnector"] = o.CustomerDeviceConnector
	}
	if o.DcnmFanDetails != nil {
		toSerialize["DcnmFanDetails"] = o.DcnmFanDetails
	}
	if !IsNil(o.DcnmLicenseState) {
		toSerialize["DcnmLicenseState"] = o.DcnmLicenseState
	}
	if !IsNil(o.DeviceDiscovery) {
		toSerialize["DeviceDiscovery"] = o.DeviceDiscovery
	}
	if !IsNil(o.DeviceHealth) {
		toSerialize["DeviceHealth"] = o.DeviceHealth
	}
	if !IsNil(o.DeviceId) {
		toSerialize["DeviceId"] = o.DeviceId
	}
	if !IsNil(o.DeviceName) {
		toSerialize["DeviceName"] = o.DeviceName
	}
	if !IsNil(o.DeviceType) {
		toSerialize["DeviceType"] = o.DeviceType
	}
	if !IsNil(o.DeviceUpTime) {
		toSerialize["DeviceUpTime"] = o.DeviceUpTime
	}
	if o.Disk.IsSet() {
		toSerialize["Disk"] = o.Disk.Get()
	}
	if !IsNil(o.Dn) {
		toSerialize["Dn"] = o.Dn
	}
	if !IsNil(o.FabricName) {
		toSerialize["FabricName"] = o.FabricName
	}
	if !IsNil(o.FexCount) {
		toSerialize["FexCount"] = o.FexCount
	}
	if !IsNil(o.InfraWiNodeCount) {
		toSerialize["InfraWiNodeCount"] = o.InfraWiNodeCount
	}
	if o.Interface != nil {
		toSerialize["Interface"] = o.Interface
	}
	if !IsNil(o.IpAddress) {
		toSerialize["IpAddress"] = o.IpAddress
	}
	if !IsNil(o.IsVirtualNode) {
		toSerialize["IsVirtualNode"] = o.IsVirtualNode
	}
	if !IsNil(o.LastRebootTime) {
		toSerialize["LastRebootTime"] = o.LastRebootTime
	}
	if !IsNil(o.LastResetReason) {
		toSerialize["LastResetReason"] = o.LastResetReason
	}
	if !IsNil(o.LicenseType) {
		toSerialize["LicenseType"] = o.LicenseType
	}
	if !IsNil(o.LogInTime) {
		toSerialize["LogInTime"] = o.LogInTime
	}
	if !IsNil(o.LogOutTime) {
		toSerialize["LogOutTime"] = o.LogOutTime
	}
	if !IsNil(o.MacSecCount) {
		toSerialize["MacSecCount"] = o.MacSecCount
	}
	if !IsNil(o.MacSecFabCount) {
		toSerialize["MacSecFabCount"] = o.MacSecFabCount
	}
	if !IsNil(o.MacsecTotalCount) {
		toSerialize["MacsecTotalCount"] = o.MacsecTotalCount
	}
	if !IsNil(o.Memory) {
		toSerialize["Memory"] = o.Memory
	}
	if !IsNil(o.NexusCloudMembershipStatus) {
		toSerialize["NexusCloudMembershipStatus"] = o.NexusCloudMembershipStatus
	}
	if !IsNil(o.NodeId) {
		toSerialize["NodeId"] = o.NodeId
	}
	if o.NxosBgpEvpn.IsSet() {
		toSerialize["NxosBgpEvpn"] = o.NxosBgpEvpn.Get()
	}
	if o.NxosBgpMvpn.IsSet() {
		toSerialize["NxosBgpMvpn"] = o.NxosBgpMvpn.Get()
	}
	if o.NxosBootflashDetails.IsSet() {
		toSerialize["NxosBootflashDetails"] = o.NxosBootflashDetails.Get()
	}
	if !IsNil(o.NxosDciInterfaceStatus) {
		toSerialize["NxosDciInterfaceStatus"] = o.NxosDciInterfaceStatus
	}
	if o.NxosInterfaceBrief.IsSet() {
		toSerialize["NxosInterfaceBrief"] = o.NxosInterfaceBrief.Get()
	}
	if !IsNil(o.NxosNveInterfaceStatus) {
		toSerialize["NxosNveInterfaceStatus"] = o.NxosNveInterfaceStatus
	}
	if o.NxosNvePacketCounters.IsSet() {
		toSerialize["NxosNvePacketCounters"] = o.NxosNvePacketCounters.Get()
	}
	if o.NxosNveVni.IsSet() {
		toSerialize["NxosNveVni"] = o.NxosNveVni.Get()
	}
	if !IsNil(o.NxosOspfNeighbors) {
		toSerialize["NxosOspfNeighbors"] = o.NxosOspfNeighbors
	}
	if !IsNil(o.NxosPimNeighbors) {
		toSerialize["NxosPimNeighbors"] = o.NxosPimNeighbors
	}
	if !IsNil(o.NxosTelnet) {
		toSerialize["NxosTelnet"] = o.NxosTelnet
	}
	if !IsNil(o.NxosTotalRoutes) {
		toSerialize["NxosTotalRoutes"] = o.NxosTotalRoutes
	}
	if o.NxosVtp.IsSet() {
		toSerialize["NxosVtp"] = o.NxosVtp.Get()
	}
	if !IsNil(o.RecordType) {
		toSerialize["RecordType"] = o.RecordType
	}
	if !IsNil(o.RecordVersion) {
		toSerialize["RecordVersion"] = o.RecordVersion
	}
	if !IsNil(o.RoutePrefixCount) {
		toSerialize["RoutePrefixCount"] = o.RoutePrefixCount
	}
	if !IsNil(o.RoutePrefixV4Count) {
		toSerialize["RoutePrefixV4Count"] = o.RoutePrefixV4Count
	}
	if !IsNil(o.RoutePrefixV6Count) {
		toSerialize["RoutePrefixV6Count"] = o.RoutePrefixV6Count
	}
	if !IsNil(o.Serial) {
		toSerialize["Serial"] = o.Serial
	}
	if !IsNil(o.SiteName) {
		toSerialize["SiteName"] = o.SiteName
	}
	if !IsNil(o.Siteuuid) {
		toSerialize["Siteuuid"] = o.Siteuuid
	}
	if !IsNil(o.SmartAccountId) {
		toSerialize["SmartAccountId"] = o.SmartAccountId
	}
	if !IsNil(o.SoftwareDownload) {
		toSerialize["SoftwareDownload"] = o.SoftwareDownload
	}
	if !IsNil(o.SystemUpTime) {
		toSerialize["SystemUpTime"] = o.SystemUpTime
	}
	if !IsNil(o.Version) {
		toSerialize["Version"] = o.Version
	}
	if o.VniStatus != nil {
		toSerialize["VniStatus"] = o.VniStatus
	}
	if !IsNil(o.VpcPeerIpAddress) {
		toSerialize["VpcPeerIpAddress"] = o.VpcPeerIpAddress
	}
	if o.LicenseState.IsSet() {
		toSerialize["LicenseState"] = o.LicenseState.Get()
	}
	if o.RegisteredDevice.IsSet() {
		toSerialize["RegisteredDevice"] = o.RegisteredDevice.Get()
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *NiatelemetryNiaInventory) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"ClassId",
		"ObjectType",
	}

	// defaultValueFuncMap captures the default values for required properties.
	// These values are used when required properties are missing from the payload.
	defaultValueFuncMap := map[string]func() interface{}{
		"ClassId":    o.GetDefaultClassId,
		"ObjectType": o.GetDefaultObjectType,
	}
	var defaultValueApplied bool
	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			if _, ok := defaultValueFuncMap[requiredProperty]; ok {
				allProperties[requiredProperty] = defaultValueFuncMap[requiredProperty]()
				defaultValueApplied = true
			}
		}
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	if defaultValueApplied {
		data, err = json.Marshal(allProperties)
		if err != nil {
			return err
		}
	}
	type NiatelemetryNiaInventoryWithoutEmbeddedStruct struct {
		// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.
		ClassId string `json:"ClassId"`
		// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
		ObjectType string `json:"ObjectType"`
		// Returns controller's IP address details.
		ControllerIpAddress *string `json:"ControllerIpAddress,omitempty"`
		// CPU usage of device being inventoried. This determines the percentage of CPU resources used.
		Cpu *float32 `json:"Cpu,omitempty"`
		// Last crash reset reason of device being inventoried. This determines the last reason for a device's restart due to crash of the system.
		CrashResetLogs *string `json:"CrashResetLogs,omitempty"`
		// Returns the value of the customerDeviceConnector field.
		CustomerDeviceConnector *string                  `json:"CustomerDeviceConnector,omitempty"`
		DcnmFanDetails          []NiatelemetryFanDetails `json:"DcnmFanDetails,omitempty"`
		// Returns the License state of the device.
		DcnmLicenseState *string `json:"DcnmLicenseState,omitempty"`
		// Returns the value of the deviceDiscovery field.
		DeviceDiscovery *string `json:"DeviceDiscovery,omitempty"`
		// Returns the device health.
		DeviceHealth *int64 `json:"DeviceHealth,omitempty"`
		// Returns the value of the deviceId field.
		DeviceId *string `json:"DeviceId,omitempty"`
		// Name of device being inventoried. The name the user assigns to the device is inventoried here.
		DeviceName *string `json:"DeviceName,omitempty"`
		// Type of device being inventoried. This determines whether the device is a controller, leaf or spine.
		DeviceType *string `json:"DeviceType,omitempty"`
		// Returns the device up time.
		DeviceUpTime *int64                       `json:"DeviceUpTime,omitempty"`
		Disk         NullableNiatelemetryDiskinfo `json:"Disk,omitempty"`
		// Dn for the inventories present.
		Dn *string `json:"Dn,omitempty"`
		// Name of the fabric of the device being inventoried.
		FabricName *string `json:"FabricName,omitempty"`
		// Number of fabric extendors utilized.
		FexCount *int64 `json:"FexCount,omitempty"`
		// Number of appliances as physical device that are wired into the cluster.
		InfraWiNodeCount *int64                         `json:"InfraWiNodeCount,omitempty"`
		Interface        []NiatelemetryInterfaceElement `json:"Interface,omitempty"`
		// The IP address of the device being inventoried.
		IpAddress *string `json:"IpAddress,omitempty"`
		// Flag to specify if the node is virtual.
		IsVirtualNode *string `json:"IsVirtualNode,omitempty"`
		// Returns the last reboot Time of the device.
		LastRebootTime *string `json:"LastRebootTime,omitempty"`
		// Returns the last reset reason of the device.
		LastResetReason *string `json:"LastResetReason,omitempty"`
		// Returns the License type of the device.
		LicenseType *string `json:"LicenseType,omitempty"`
		// Last log in time device being inventoried. This determines the last login time on the device.
		LogInTime *string `json:"LogInTime,omitempty"`
		// Last log out time of device being inventoried. This determines the last logout time on the device.
		LogOutTime *string `json:"LogOutTime,omitempty"`
		// Number of Macsec configured interfaces on a TOR.
		MacSecCount *int64 `json:"MacSecCount,omitempty"`
		// Number of Macsec configured interfaces on a Spine.
		MacSecFabCount *int64 `json:"MacSecFabCount,omitempty"`
		// Number of total Macsec configured interfaces for all nodes.
		MacsecTotalCount *int64 `json:"MacsecTotalCount,omitempty"`
		// Memory usage of device being inventoried. This determines the percentage of memory resources used.
		Memory *int64 `json:"Memory,omitempty"`
		// Returns if site has been onboarded to nexus cloud or not.
		NexusCloudMembershipStatus *bool `json:"NexusCloudMembershipStatus,omitempty"`
		// The ID of the device being inventoried.
		NodeId               *string                              `json:"NodeId,omitempty"`
		NxosBgpEvpn          NullableNiatelemetryNxosBgpEvpn      `json:"NxosBgpEvpn,omitempty"`
		NxosBgpMvpn          NullableNiatelemetryNxosBgpMvpn      `json:"NxosBgpMvpn,omitempty"`
		NxosBootflashDetails NullableNiatelemetryBootflashDetails `json:"NxosBootflashDetails,omitempty"`
		// Returns the status of dci interface configured.
		NxosDciInterfaceStatus *string                       `json:"NxosDciInterfaceStatus,omitempty"`
		NxosInterfaceBrief     NullableNiatelemetryInterface `json:"NxosInterfaceBrief,omitempty"`
		// Returns the value of the nxosNveInterface field.
		NxosNveInterfaceStatus *string                               `json:"NxosNveInterfaceStatus,omitempty"`
		NxosNvePacketCounters  NullableNiatelemetryNvePacketCounters `json:"NxosNvePacketCounters,omitempty"`
		NxosNveVni             NullableNiatelemetryNveVni            `json:"NxosNveVni,omitempty"`
		// Total number of ospf neighbors per switch in DCNM.
		NxosOspfNeighbors *int64 `json:"NxosOspfNeighbors,omitempty"`
		// Total number of pim neighbors per switch in DCNM.
		NxosPimNeighbors *string `json:"NxosPimNeighbors,omitempty"`
		// Returns the value of the nxosTelnet field.
		NxosTelnet *string `json:"NxosTelnet,omitempty"`
		// Total number of routes configured in the DCNM.
		NxosTotalRoutes *int64                      `json:"NxosTotalRoutes,omitempty"`
		NxosVtp         NullableNiatelemetryNxosVtp `json:"NxosVtp,omitempty"`
		// Type of record DCNM / APIC / SE / Nexus Switch. This determines the type of platform where inventory was collected.
		RecordType *string `json:"RecordType,omitempty"`
		// Version of record being pushed. This determines what was the API version for data available from the device.
		RecordVersion *string `json:"RecordVersion,omitempty"`
		// Total nuumber of v4 and v6 routes per node.
		RoutePrefixCount *int64 `json:"RoutePrefixCount,omitempty"`
		// Number of v4 routes per node.
		RoutePrefixV4Count *int64 `json:"RoutePrefixV4Count,omitempty"`
		// Number of v6 routes per node.
		RoutePrefixV6Count *int64 `json:"RoutePrefixV6Count,omitempty"`
		// Serial number of device being invetoried. The serial number is unique per device and will be used as the key.
		Serial *string `json:"Serial,omitempty"`
		// Name of fabric domain of the controller.
		SiteName *string `json:"SiteName,omitempty"`
		// Returns the uuid of the Nexus Cloud site associated to the inventory object.
		Siteuuid *string `json:"Siteuuid,omitempty"`
		// Returns the value of the smartAccountId/CustomerId field.
		SmartAccountId *int64 `json:"SmartAccountId,omitempty"`
		// Last software downloaded of device being inventoried. This determines if software download API was used.
		SoftwareDownload *string `json:"SoftwareDownload,omitempty"`
		// The amount of time that the device being inventoried been up.
		SystemUpTime *string `json:"SystemUpTime,omitempty"`
		// Software version of device being inventoried. The various software version values for each device are available on cisco.com.
		Version   *string                 `json:"Version,omitempty"`
		VniStatus []NiatelemetryVniStatus `json:"VniStatus,omitempty"`
		// The TEP IP address of the node's vPC peer, if present.
		VpcPeerIpAddress *string                                         `json:"VpcPeerIpAddress,omitempty"`
		LicenseState     NullableNiatelemetryNiaLicenseStateRelationship `json:"LicenseState,omitempty"`
		RegisteredDevice NullableAssetDeviceRegistrationRelationship     `json:"RegisteredDevice,omitempty"`
	}

	varNiatelemetryNiaInventoryWithoutEmbeddedStruct := NiatelemetryNiaInventoryWithoutEmbeddedStruct{}

	err = json.Unmarshal(data, &varNiatelemetryNiaInventoryWithoutEmbeddedStruct)
	if err == nil {
		varNiatelemetryNiaInventory := _NiatelemetryNiaInventory{}
		varNiatelemetryNiaInventory.ClassId = varNiatelemetryNiaInventoryWithoutEmbeddedStruct.ClassId
		varNiatelemetryNiaInventory.ObjectType = varNiatelemetryNiaInventoryWithoutEmbeddedStruct.ObjectType
		varNiatelemetryNiaInventory.ControllerIpAddress = varNiatelemetryNiaInventoryWithoutEmbeddedStruct.ControllerIpAddress
		varNiatelemetryNiaInventory.Cpu = varNiatelemetryNiaInventoryWithoutEmbeddedStruct.Cpu
		varNiatelemetryNiaInventory.CrashResetLogs = varNiatelemetryNiaInventoryWithoutEmbeddedStruct.CrashResetLogs
		varNiatelemetryNiaInventory.CustomerDeviceConnector = varNiatelemetryNiaInventoryWithoutEmbeddedStruct.CustomerDeviceConnector
		varNiatelemetryNiaInventory.DcnmFanDetails = varNiatelemetryNiaInventoryWithoutEmbeddedStruct.DcnmFanDetails
		varNiatelemetryNiaInventory.DcnmLicenseState = varNiatelemetryNiaInventoryWithoutEmbeddedStruct.DcnmLicenseState
		varNiatelemetryNiaInventory.DeviceDiscovery = varNiatelemetryNiaInventoryWithoutEmbeddedStruct.DeviceDiscovery
		varNiatelemetryNiaInventory.DeviceHealth = varNiatelemetryNiaInventoryWithoutEmbeddedStruct.DeviceHealth
		varNiatelemetryNiaInventory.DeviceId = varNiatelemetryNiaInventoryWithoutEmbeddedStruct.DeviceId
		varNiatelemetryNiaInventory.DeviceName = varNiatelemetryNiaInventoryWithoutEmbeddedStruct.DeviceName
		varNiatelemetryNiaInventory.DeviceType = varNiatelemetryNiaInventoryWithoutEmbeddedStruct.DeviceType
		varNiatelemetryNiaInventory.DeviceUpTime = varNiatelemetryNiaInventoryWithoutEmbeddedStruct.DeviceUpTime
		varNiatelemetryNiaInventory.Disk = varNiatelemetryNiaInventoryWithoutEmbeddedStruct.Disk
		varNiatelemetryNiaInventory.Dn = varNiatelemetryNiaInventoryWithoutEmbeddedStruct.Dn
		varNiatelemetryNiaInventory.FabricName = varNiatelemetryNiaInventoryWithoutEmbeddedStruct.FabricName
		varNiatelemetryNiaInventory.FexCount = varNiatelemetryNiaInventoryWithoutEmbeddedStruct.FexCount
		varNiatelemetryNiaInventory.InfraWiNodeCount = varNiatelemetryNiaInventoryWithoutEmbeddedStruct.InfraWiNodeCount
		varNiatelemetryNiaInventory.Interface = varNiatelemetryNiaInventoryWithoutEmbeddedStruct.Interface
		varNiatelemetryNiaInventory.IpAddress = varNiatelemetryNiaInventoryWithoutEmbeddedStruct.IpAddress
		varNiatelemetryNiaInventory.IsVirtualNode = varNiatelemetryNiaInventoryWithoutEmbeddedStruct.IsVirtualNode
		varNiatelemetryNiaInventory.LastRebootTime = varNiatelemetryNiaInventoryWithoutEmbeddedStruct.LastRebootTime
		varNiatelemetryNiaInventory.LastResetReason = varNiatelemetryNiaInventoryWithoutEmbeddedStruct.LastResetReason
		varNiatelemetryNiaInventory.LicenseType = varNiatelemetryNiaInventoryWithoutEmbeddedStruct.LicenseType
		varNiatelemetryNiaInventory.LogInTime = varNiatelemetryNiaInventoryWithoutEmbeddedStruct.LogInTime
		varNiatelemetryNiaInventory.LogOutTime = varNiatelemetryNiaInventoryWithoutEmbeddedStruct.LogOutTime
		varNiatelemetryNiaInventory.MacSecCount = varNiatelemetryNiaInventoryWithoutEmbeddedStruct.MacSecCount
		varNiatelemetryNiaInventory.MacSecFabCount = varNiatelemetryNiaInventoryWithoutEmbeddedStruct.MacSecFabCount
		varNiatelemetryNiaInventory.MacsecTotalCount = varNiatelemetryNiaInventoryWithoutEmbeddedStruct.MacsecTotalCount
		varNiatelemetryNiaInventory.Memory = varNiatelemetryNiaInventoryWithoutEmbeddedStruct.Memory
		varNiatelemetryNiaInventory.NexusCloudMembershipStatus = varNiatelemetryNiaInventoryWithoutEmbeddedStruct.NexusCloudMembershipStatus
		varNiatelemetryNiaInventory.NodeId = varNiatelemetryNiaInventoryWithoutEmbeddedStruct.NodeId
		varNiatelemetryNiaInventory.NxosBgpEvpn = varNiatelemetryNiaInventoryWithoutEmbeddedStruct.NxosBgpEvpn
		varNiatelemetryNiaInventory.NxosBgpMvpn = varNiatelemetryNiaInventoryWithoutEmbeddedStruct.NxosBgpMvpn
		varNiatelemetryNiaInventory.NxosBootflashDetails = varNiatelemetryNiaInventoryWithoutEmbeddedStruct.NxosBootflashDetails
		varNiatelemetryNiaInventory.NxosDciInterfaceStatus = varNiatelemetryNiaInventoryWithoutEmbeddedStruct.NxosDciInterfaceStatus
		varNiatelemetryNiaInventory.NxosInterfaceBrief = varNiatelemetryNiaInventoryWithoutEmbeddedStruct.NxosInterfaceBrief
		varNiatelemetryNiaInventory.NxosNveInterfaceStatus = varNiatelemetryNiaInventoryWithoutEmbeddedStruct.NxosNveInterfaceStatus
		varNiatelemetryNiaInventory.NxosNvePacketCounters = varNiatelemetryNiaInventoryWithoutEmbeddedStruct.NxosNvePacketCounters
		varNiatelemetryNiaInventory.NxosNveVni = varNiatelemetryNiaInventoryWithoutEmbeddedStruct.NxosNveVni
		varNiatelemetryNiaInventory.NxosOspfNeighbors = varNiatelemetryNiaInventoryWithoutEmbeddedStruct.NxosOspfNeighbors
		varNiatelemetryNiaInventory.NxosPimNeighbors = varNiatelemetryNiaInventoryWithoutEmbeddedStruct.NxosPimNeighbors
		varNiatelemetryNiaInventory.NxosTelnet = varNiatelemetryNiaInventoryWithoutEmbeddedStruct.NxosTelnet
		varNiatelemetryNiaInventory.NxosTotalRoutes = varNiatelemetryNiaInventoryWithoutEmbeddedStruct.NxosTotalRoutes
		varNiatelemetryNiaInventory.NxosVtp = varNiatelemetryNiaInventoryWithoutEmbeddedStruct.NxosVtp
		varNiatelemetryNiaInventory.RecordType = varNiatelemetryNiaInventoryWithoutEmbeddedStruct.RecordType
		varNiatelemetryNiaInventory.RecordVersion = varNiatelemetryNiaInventoryWithoutEmbeddedStruct.RecordVersion
		varNiatelemetryNiaInventory.RoutePrefixCount = varNiatelemetryNiaInventoryWithoutEmbeddedStruct.RoutePrefixCount
		varNiatelemetryNiaInventory.RoutePrefixV4Count = varNiatelemetryNiaInventoryWithoutEmbeddedStruct.RoutePrefixV4Count
		varNiatelemetryNiaInventory.RoutePrefixV6Count = varNiatelemetryNiaInventoryWithoutEmbeddedStruct.RoutePrefixV6Count
		varNiatelemetryNiaInventory.Serial = varNiatelemetryNiaInventoryWithoutEmbeddedStruct.Serial
		varNiatelemetryNiaInventory.SiteName = varNiatelemetryNiaInventoryWithoutEmbeddedStruct.SiteName
		varNiatelemetryNiaInventory.Siteuuid = varNiatelemetryNiaInventoryWithoutEmbeddedStruct.Siteuuid
		varNiatelemetryNiaInventory.SmartAccountId = varNiatelemetryNiaInventoryWithoutEmbeddedStruct.SmartAccountId
		varNiatelemetryNiaInventory.SoftwareDownload = varNiatelemetryNiaInventoryWithoutEmbeddedStruct.SoftwareDownload
		varNiatelemetryNiaInventory.SystemUpTime = varNiatelemetryNiaInventoryWithoutEmbeddedStruct.SystemUpTime
		varNiatelemetryNiaInventory.Version = varNiatelemetryNiaInventoryWithoutEmbeddedStruct.Version
		varNiatelemetryNiaInventory.VniStatus = varNiatelemetryNiaInventoryWithoutEmbeddedStruct.VniStatus
		varNiatelemetryNiaInventory.VpcPeerIpAddress = varNiatelemetryNiaInventoryWithoutEmbeddedStruct.VpcPeerIpAddress
		varNiatelemetryNiaInventory.LicenseState = varNiatelemetryNiaInventoryWithoutEmbeddedStruct.LicenseState
		varNiatelemetryNiaInventory.RegisteredDevice = varNiatelemetryNiaInventoryWithoutEmbeddedStruct.RegisteredDevice
		*o = NiatelemetryNiaInventory(varNiatelemetryNiaInventory)
	} else {
		return err
	}

	varNiatelemetryNiaInventory := _NiatelemetryNiaInventory{}

	err = json.Unmarshal(data, &varNiatelemetryNiaInventory)
	if err == nil {
		o.MoBaseMo = varNiatelemetryNiaInventory.MoBaseMo
	} else {
		return err
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "ClassId")
		delete(additionalProperties, "ObjectType")
		delete(additionalProperties, "ControllerIpAddress")
		delete(additionalProperties, "Cpu")
		delete(additionalProperties, "CrashResetLogs")
		delete(additionalProperties, "CustomerDeviceConnector")
		delete(additionalProperties, "DcnmFanDetails")
		delete(additionalProperties, "DcnmLicenseState")
		delete(additionalProperties, "DeviceDiscovery")
		delete(additionalProperties, "DeviceHealth")
		delete(additionalProperties, "DeviceId")
		delete(additionalProperties, "DeviceName")
		delete(additionalProperties, "DeviceType")
		delete(additionalProperties, "DeviceUpTime")
		delete(additionalProperties, "Disk")
		delete(additionalProperties, "Dn")
		delete(additionalProperties, "FabricName")
		delete(additionalProperties, "FexCount")
		delete(additionalProperties, "InfraWiNodeCount")
		delete(additionalProperties, "Interface")
		delete(additionalProperties, "IpAddress")
		delete(additionalProperties, "IsVirtualNode")
		delete(additionalProperties, "LastRebootTime")
		delete(additionalProperties, "LastResetReason")
		delete(additionalProperties, "LicenseType")
		delete(additionalProperties, "LogInTime")
		delete(additionalProperties, "LogOutTime")
		delete(additionalProperties, "MacSecCount")
		delete(additionalProperties, "MacSecFabCount")
		delete(additionalProperties, "MacsecTotalCount")
		delete(additionalProperties, "Memory")
		delete(additionalProperties, "NexusCloudMembershipStatus")
		delete(additionalProperties, "NodeId")
		delete(additionalProperties, "NxosBgpEvpn")
		delete(additionalProperties, "NxosBgpMvpn")
		delete(additionalProperties, "NxosBootflashDetails")
		delete(additionalProperties, "NxosDciInterfaceStatus")
		delete(additionalProperties, "NxosInterfaceBrief")
		delete(additionalProperties, "NxosNveInterfaceStatus")
		delete(additionalProperties, "NxosNvePacketCounters")
		delete(additionalProperties, "NxosNveVni")
		delete(additionalProperties, "NxosOspfNeighbors")
		delete(additionalProperties, "NxosPimNeighbors")
		delete(additionalProperties, "NxosTelnet")
		delete(additionalProperties, "NxosTotalRoutes")
		delete(additionalProperties, "NxosVtp")
		delete(additionalProperties, "RecordType")
		delete(additionalProperties, "RecordVersion")
		delete(additionalProperties, "RoutePrefixCount")
		delete(additionalProperties, "RoutePrefixV4Count")
		delete(additionalProperties, "RoutePrefixV6Count")
		delete(additionalProperties, "Serial")
		delete(additionalProperties, "SiteName")
		delete(additionalProperties, "Siteuuid")
		delete(additionalProperties, "SmartAccountId")
		delete(additionalProperties, "SoftwareDownload")
		delete(additionalProperties, "SystemUpTime")
		delete(additionalProperties, "Version")
		delete(additionalProperties, "VniStatus")
		delete(additionalProperties, "VpcPeerIpAddress")
		delete(additionalProperties, "LicenseState")
		delete(additionalProperties, "RegisteredDevice")

		// remove fields from embedded structs
		reflectMoBaseMo := reflect.ValueOf(o.MoBaseMo)
		for i := 0; i < reflectMoBaseMo.Type().NumField(); i++ {
			t := reflectMoBaseMo.Type().Field(i)

			if jsonTag := t.Tag.Get("json"); jsonTag != "" {
				fieldName := ""
				if commaIdx := strings.Index(jsonTag, ","); commaIdx > 0 {
					fieldName = jsonTag[:commaIdx]
				} else {
					fieldName = jsonTag
				}
				if fieldName != "AdditionalProperties" {
					delete(additionalProperties, fieldName)
				}
			}
		}

		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableNiatelemetryNiaInventory struct {
	value *NiatelemetryNiaInventory
	isSet bool
}

func (v NullableNiatelemetryNiaInventory) Get() *NiatelemetryNiaInventory {
	return v.value
}

func (v *NullableNiatelemetryNiaInventory) Set(val *NiatelemetryNiaInventory) {
	v.value = val
	v.isSet = true
}

func (v NullableNiatelemetryNiaInventory) IsSet() bool {
	return v.isSet
}

func (v *NullableNiatelemetryNiaInventory) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNiatelemetryNiaInventory(val *NiatelemetryNiaInventory) *NullableNiatelemetryNiaInventory {
	return &NullableNiatelemetryNiaInventory{value: val, isSet: true}
}

func (v NullableNiatelemetryNiaInventory) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNiatelemetryNiaInventory) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
