/*
Cisco Intersight

Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations. The Intersight OpenAPI document defines the complete set of properties that are returned in the HTTP response. From that perspective, a client can expect that no additional properties are returned, unless these properties are explicitly defined in the OpenAPI document. However, when a client uses an older version of the Intersight OpenAPI document, the server may send additional properties because the software is more recent than the client. In that case, the client may receive properties that it does not know about. Some generated SDKs perform a strict validation of the HTTP response body against the OpenAPI document.

API version: 1.0.11-18775
Contact: intersight@cisco.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package intersight

import (
	"encoding/json"
	"fmt"
	"reflect"
	"strings"
)

// checks if the VnicBaseEthIf type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VnicBaseEthIf{}

// VnicBaseEthIf A Vnic specifying configuration settings.
type VnicBaseEthIf struct {
	PolicyAbstractPolicyItem
	// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data. The enum values provides the list of concrete types that can be instantiated from this abstract type.
	ClassId string `json:"ClassId"`
	// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property. The enum values provides the list of concrete types that can be instantiated from this abstract type.
	ObjectType string          `json:"ObjectType"`
	Cdn        NullableVnicCdn `json:"Cdn,omitempty"`
	// Enabling failover ensures that traffic from the vNIC automatically fails over to the secondary Fabric Interconnect, in case the specified Fabric Interconnect path goes down. Failover applies only to Cisco VICs that are connected to a Fabric Interconnect cluster.
	FailoverEnabled *bool `json:"FailoverEnabled,omitempty"`
	// Pingroup name associated to vNIC for static pinning. LCP deploy will resolve pingroup name and fetches the correspoding uplink port/port channel to pin the vNIC traffic.
	PinGroupName                  *string                                           `json:"PinGroupName,omitempty" validate:"regexp=^$|^[a-zA-Z0-9_.:-]{1,64}$"`
	SriovSettings                 NullableVnicSriovSettings                         `json:"SriovSettings,omitempty"`
	UsnicSettings                 NullableVnicUsnicSettings                         `json:"UsnicSettings,omitempty"`
	VmqSettings                   NullableVnicVmqSettings                           `json:"VmqSettings,omitempty"`
	EthAdapterPolicy              NullableVnicEthAdapterPolicyRelationship          `json:"EthAdapterPolicy,omitempty"`
	EthNetworkPolicy              NullableVnicEthNetworkPolicyRelationship          `json:"EthNetworkPolicy,omitempty"`
	EthQosPolicy                  NullableVnicEthQosPolicyRelationship              `json:"EthQosPolicy,omitempty"`
	FabricEthNetworkControlPolicy NullableFabricEthNetworkControlPolicyRelationship `json:"FabricEthNetworkControlPolicy,omitempty"`
	// An array of relationships to fabricEthNetworkGroupPolicy resources.
	FabricEthNetworkGroupPolicy []FabricEthNetworkGroupPolicyRelationship `json:"FabricEthNetworkGroupPolicy,omitempty"`
	IscsiBootPolicy             NullableVnicIscsiBootPolicyRelationship   `json:"IscsiBootPolicy,omitempty"`
	MacPool                     NullableMacpoolPoolRelationship           `json:"MacPool,omitempty"`
	AdditionalProperties        map[string]interface{}
}

type _VnicBaseEthIf VnicBaseEthIf

// NewVnicBaseEthIf instantiates a new VnicBaseEthIf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVnicBaseEthIf(classId string, objectType string) *VnicBaseEthIf {
	this := VnicBaseEthIf{}
	this.ClassId = classId
	this.ObjectType = objectType
	var failoverEnabled bool = false
	this.FailoverEnabled = &failoverEnabled
	return &this
}

// NewVnicBaseEthIfWithDefaults instantiates a new VnicBaseEthIf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVnicBaseEthIfWithDefaults() *VnicBaseEthIf {
	this := VnicBaseEthIf{}
	var failoverEnabled bool = false
	this.FailoverEnabled = &failoverEnabled
	return &this
}

// GetClassId returns the ClassId field value
func (o *VnicBaseEthIf) GetClassId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ClassId
}

// GetClassIdOk returns a tuple with the ClassId field value
// and a boolean to check if the value has been set.
func (o *VnicBaseEthIf) GetClassIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ClassId, true
}

// SetClassId sets field value
func (o *VnicBaseEthIf) SetClassId(v string) {
	o.ClassId = v
}

// GetObjectType returns the ObjectType field value
func (o *VnicBaseEthIf) GetObjectType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ObjectType
}

// GetObjectTypeOk returns a tuple with the ObjectType field value
// and a boolean to check if the value has been set.
func (o *VnicBaseEthIf) GetObjectTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ObjectType, true
}

// SetObjectType sets field value
func (o *VnicBaseEthIf) SetObjectType(v string) {
	o.ObjectType = v
}

// GetCdn returns the Cdn field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VnicBaseEthIf) GetCdn() VnicCdn {
	if o == nil || IsNil(o.Cdn.Get()) {
		var ret VnicCdn
		return ret
	}
	return *o.Cdn.Get()
}

// GetCdnOk returns a tuple with the Cdn field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VnicBaseEthIf) GetCdnOk() (*VnicCdn, bool) {
	if o == nil {
		return nil, false
	}
	return o.Cdn.Get(), o.Cdn.IsSet()
}

// HasCdn returns a boolean if a field has been set.
func (o *VnicBaseEthIf) HasCdn() bool {
	if o != nil && o.Cdn.IsSet() {
		return true
	}

	return false
}

// SetCdn gets a reference to the given NullableVnicCdn and assigns it to the Cdn field.
func (o *VnicBaseEthIf) SetCdn(v VnicCdn) {
	o.Cdn.Set(&v)
}

// SetCdnNil sets the value for Cdn to be an explicit nil
func (o *VnicBaseEthIf) SetCdnNil() {
	o.Cdn.Set(nil)
}

// UnsetCdn ensures that no value is present for Cdn, not even an explicit nil
func (o *VnicBaseEthIf) UnsetCdn() {
	o.Cdn.Unset()
}

// GetFailoverEnabled returns the FailoverEnabled field value if set, zero value otherwise.
func (o *VnicBaseEthIf) GetFailoverEnabled() bool {
	if o == nil || IsNil(o.FailoverEnabled) {
		var ret bool
		return ret
	}
	return *o.FailoverEnabled
}

// GetFailoverEnabledOk returns a tuple with the FailoverEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VnicBaseEthIf) GetFailoverEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.FailoverEnabled) {
		return nil, false
	}
	return o.FailoverEnabled, true
}

// HasFailoverEnabled returns a boolean if a field has been set.
func (o *VnicBaseEthIf) HasFailoverEnabled() bool {
	if o != nil && !IsNil(o.FailoverEnabled) {
		return true
	}

	return false
}

// SetFailoverEnabled gets a reference to the given bool and assigns it to the FailoverEnabled field.
func (o *VnicBaseEthIf) SetFailoverEnabled(v bool) {
	o.FailoverEnabled = &v
}

// GetPinGroupName returns the PinGroupName field value if set, zero value otherwise.
func (o *VnicBaseEthIf) GetPinGroupName() string {
	if o == nil || IsNil(o.PinGroupName) {
		var ret string
		return ret
	}
	return *o.PinGroupName
}

// GetPinGroupNameOk returns a tuple with the PinGroupName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VnicBaseEthIf) GetPinGroupNameOk() (*string, bool) {
	if o == nil || IsNil(o.PinGroupName) {
		return nil, false
	}
	return o.PinGroupName, true
}

// HasPinGroupName returns a boolean if a field has been set.
func (o *VnicBaseEthIf) HasPinGroupName() bool {
	if o != nil && !IsNil(o.PinGroupName) {
		return true
	}

	return false
}

// SetPinGroupName gets a reference to the given string and assigns it to the PinGroupName field.
func (o *VnicBaseEthIf) SetPinGroupName(v string) {
	o.PinGroupName = &v
}

// GetSriovSettings returns the SriovSettings field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VnicBaseEthIf) GetSriovSettings() VnicSriovSettings {
	if o == nil || IsNil(o.SriovSettings.Get()) {
		var ret VnicSriovSettings
		return ret
	}
	return *o.SriovSettings.Get()
}

// GetSriovSettingsOk returns a tuple with the SriovSettings field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VnicBaseEthIf) GetSriovSettingsOk() (*VnicSriovSettings, bool) {
	if o == nil {
		return nil, false
	}
	return o.SriovSettings.Get(), o.SriovSettings.IsSet()
}

// HasSriovSettings returns a boolean if a field has been set.
func (o *VnicBaseEthIf) HasSriovSettings() bool {
	if o != nil && o.SriovSettings.IsSet() {
		return true
	}

	return false
}

// SetSriovSettings gets a reference to the given NullableVnicSriovSettings and assigns it to the SriovSettings field.
func (o *VnicBaseEthIf) SetSriovSettings(v VnicSriovSettings) {
	o.SriovSettings.Set(&v)
}

// SetSriovSettingsNil sets the value for SriovSettings to be an explicit nil
func (o *VnicBaseEthIf) SetSriovSettingsNil() {
	o.SriovSettings.Set(nil)
}

// UnsetSriovSettings ensures that no value is present for SriovSettings, not even an explicit nil
func (o *VnicBaseEthIf) UnsetSriovSettings() {
	o.SriovSettings.Unset()
}

// GetUsnicSettings returns the UsnicSettings field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VnicBaseEthIf) GetUsnicSettings() VnicUsnicSettings {
	if o == nil || IsNil(o.UsnicSettings.Get()) {
		var ret VnicUsnicSettings
		return ret
	}
	return *o.UsnicSettings.Get()
}

// GetUsnicSettingsOk returns a tuple with the UsnicSettings field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VnicBaseEthIf) GetUsnicSettingsOk() (*VnicUsnicSettings, bool) {
	if o == nil {
		return nil, false
	}
	return o.UsnicSettings.Get(), o.UsnicSettings.IsSet()
}

// HasUsnicSettings returns a boolean if a field has been set.
func (o *VnicBaseEthIf) HasUsnicSettings() bool {
	if o != nil && o.UsnicSettings.IsSet() {
		return true
	}

	return false
}

// SetUsnicSettings gets a reference to the given NullableVnicUsnicSettings and assigns it to the UsnicSettings field.
func (o *VnicBaseEthIf) SetUsnicSettings(v VnicUsnicSettings) {
	o.UsnicSettings.Set(&v)
}

// SetUsnicSettingsNil sets the value for UsnicSettings to be an explicit nil
func (o *VnicBaseEthIf) SetUsnicSettingsNil() {
	o.UsnicSettings.Set(nil)
}

// UnsetUsnicSettings ensures that no value is present for UsnicSettings, not even an explicit nil
func (o *VnicBaseEthIf) UnsetUsnicSettings() {
	o.UsnicSettings.Unset()
}

// GetVmqSettings returns the VmqSettings field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VnicBaseEthIf) GetVmqSettings() VnicVmqSettings {
	if o == nil || IsNil(o.VmqSettings.Get()) {
		var ret VnicVmqSettings
		return ret
	}
	return *o.VmqSettings.Get()
}

// GetVmqSettingsOk returns a tuple with the VmqSettings field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VnicBaseEthIf) GetVmqSettingsOk() (*VnicVmqSettings, bool) {
	if o == nil {
		return nil, false
	}
	return o.VmqSettings.Get(), o.VmqSettings.IsSet()
}

// HasVmqSettings returns a boolean if a field has been set.
func (o *VnicBaseEthIf) HasVmqSettings() bool {
	if o != nil && o.VmqSettings.IsSet() {
		return true
	}

	return false
}

// SetVmqSettings gets a reference to the given NullableVnicVmqSettings and assigns it to the VmqSettings field.
func (o *VnicBaseEthIf) SetVmqSettings(v VnicVmqSettings) {
	o.VmqSettings.Set(&v)
}

// SetVmqSettingsNil sets the value for VmqSettings to be an explicit nil
func (o *VnicBaseEthIf) SetVmqSettingsNil() {
	o.VmqSettings.Set(nil)
}

// UnsetVmqSettings ensures that no value is present for VmqSettings, not even an explicit nil
func (o *VnicBaseEthIf) UnsetVmqSettings() {
	o.VmqSettings.Unset()
}

// GetEthAdapterPolicy returns the EthAdapterPolicy field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VnicBaseEthIf) GetEthAdapterPolicy() VnicEthAdapterPolicyRelationship {
	if o == nil || IsNil(o.EthAdapterPolicy.Get()) {
		var ret VnicEthAdapterPolicyRelationship
		return ret
	}
	return *o.EthAdapterPolicy.Get()
}

// GetEthAdapterPolicyOk returns a tuple with the EthAdapterPolicy field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VnicBaseEthIf) GetEthAdapterPolicyOk() (*VnicEthAdapterPolicyRelationship, bool) {
	if o == nil {
		return nil, false
	}
	return o.EthAdapterPolicy.Get(), o.EthAdapterPolicy.IsSet()
}

// HasEthAdapterPolicy returns a boolean if a field has been set.
func (o *VnicBaseEthIf) HasEthAdapterPolicy() bool {
	if o != nil && o.EthAdapterPolicy.IsSet() {
		return true
	}

	return false
}

// SetEthAdapterPolicy gets a reference to the given NullableVnicEthAdapterPolicyRelationship and assigns it to the EthAdapterPolicy field.
func (o *VnicBaseEthIf) SetEthAdapterPolicy(v VnicEthAdapterPolicyRelationship) {
	o.EthAdapterPolicy.Set(&v)
}

// SetEthAdapterPolicyNil sets the value for EthAdapterPolicy to be an explicit nil
func (o *VnicBaseEthIf) SetEthAdapterPolicyNil() {
	o.EthAdapterPolicy.Set(nil)
}

// UnsetEthAdapterPolicy ensures that no value is present for EthAdapterPolicy, not even an explicit nil
func (o *VnicBaseEthIf) UnsetEthAdapterPolicy() {
	o.EthAdapterPolicy.Unset()
}

// GetEthNetworkPolicy returns the EthNetworkPolicy field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VnicBaseEthIf) GetEthNetworkPolicy() VnicEthNetworkPolicyRelationship {
	if o == nil || IsNil(o.EthNetworkPolicy.Get()) {
		var ret VnicEthNetworkPolicyRelationship
		return ret
	}
	return *o.EthNetworkPolicy.Get()
}

// GetEthNetworkPolicyOk returns a tuple with the EthNetworkPolicy field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VnicBaseEthIf) GetEthNetworkPolicyOk() (*VnicEthNetworkPolicyRelationship, bool) {
	if o == nil {
		return nil, false
	}
	return o.EthNetworkPolicy.Get(), o.EthNetworkPolicy.IsSet()
}

// HasEthNetworkPolicy returns a boolean if a field has been set.
func (o *VnicBaseEthIf) HasEthNetworkPolicy() bool {
	if o != nil && o.EthNetworkPolicy.IsSet() {
		return true
	}

	return false
}

// SetEthNetworkPolicy gets a reference to the given NullableVnicEthNetworkPolicyRelationship and assigns it to the EthNetworkPolicy field.
func (o *VnicBaseEthIf) SetEthNetworkPolicy(v VnicEthNetworkPolicyRelationship) {
	o.EthNetworkPolicy.Set(&v)
}

// SetEthNetworkPolicyNil sets the value for EthNetworkPolicy to be an explicit nil
func (o *VnicBaseEthIf) SetEthNetworkPolicyNil() {
	o.EthNetworkPolicy.Set(nil)
}

// UnsetEthNetworkPolicy ensures that no value is present for EthNetworkPolicy, not even an explicit nil
func (o *VnicBaseEthIf) UnsetEthNetworkPolicy() {
	o.EthNetworkPolicy.Unset()
}

// GetEthQosPolicy returns the EthQosPolicy field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VnicBaseEthIf) GetEthQosPolicy() VnicEthQosPolicyRelationship {
	if o == nil || IsNil(o.EthQosPolicy.Get()) {
		var ret VnicEthQosPolicyRelationship
		return ret
	}
	return *o.EthQosPolicy.Get()
}

// GetEthQosPolicyOk returns a tuple with the EthQosPolicy field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VnicBaseEthIf) GetEthQosPolicyOk() (*VnicEthQosPolicyRelationship, bool) {
	if o == nil {
		return nil, false
	}
	return o.EthQosPolicy.Get(), o.EthQosPolicy.IsSet()
}

// HasEthQosPolicy returns a boolean if a field has been set.
func (o *VnicBaseEthIf) HasEthQosPolicy() bool {
	if o != nil && o.EthQosPolicy.IsSet() {
		return true
	}

	return false
}

// SetEthQosPolicy gets a reference to the given NullableVnicEthQosPolicyRelationship and assigns it to the EthQosPolicy field.
func (o *VnicBaseEthIf) SetEthQosPolicy(v VnicEthQosPolicyRelationship) {
	o.EthQosPolicy.Set(&v)
}

// SetEthQosPolicyNil sets the value for EthQosPolicy to be an explicit nil
func (o *VnicBaseEthIf) SetEthQosPolicyNil() {
	o.EthQosPolicy.Set(nil)
}

// UnsetEthQosPolicy ensures that no value is present for EthQosPolicy, not even an explicit nil
func (o *VnicBaseEthIf) UnsetEthQosPolicy() {
	o.EthQosPolicy.Unset()
}

// GetFabricEthNetworkControlPolicy returns the FabricEthNetworkControlPolicy field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VnicBaseEthIf) GetFabricEthNetworkControlPolicy() FabricEthNetworkControlPolicyRelationship {
	if o == nil || IsNil(o.FabricEthNetworkControlPolicy.Get()) {
		var ret FabricEthNetworkControlPolicyRelationship
		return ret
	}
	return *o.FabricEthNetworkControlPolicy.Get()
}

// GetFabricEthNetworkControlPolicyOk returns a tuple with the FabricEthNetworkControlPolicy field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VnicBaseEthIf) GetFabricEthNetworkControlPolicyOk() (*FabricEthNetworkControlPolicyRelationship, bool) {
	if o == nil {
		return nil, false
	}
	return o.FabricEthNetworkControlPolicy.Get(), o.FabricEthNetworkControlPolicy.IsSet()
}

// HasFabricEthNetworkControlPolicy returns a boolean if a field has been set.
func (o *VnicBaseEthIf) HasFabricEthNetworkControlPolicy() bool {
	if o != nil && o.FabricEthNetworkControlPolicy.IsSet() {
		return true
	}

	return false
}

// SetFabricEthNetworkControlPolicy gets a reference to the given NullableFabricEthNetworkControlPolicyRelationship and assigns it to the FabricEthNetworkControlPolicy field.
func (o *VnicBaseEthIf) SetFabricEthNetworkControlPolicy(v FabricEthNetworkControlPolicyRelationship) {
	o.FabricEthNetworkControlPolicy.Set(&v)
}

// SetFabricEthNetworkControlPolicyNil sets the value for FabricEthNetworkControlPolicy to be an explicit nil
func (o *VnicBaseEthIf) SetFabricEthNetworkControlPolicyNil() {
	o.FabricEthNetworkControlPolicy.Set(nil)
}

// UnsetFabricEthNetworkControlPolicy ensures that no value is present for FabricEthNetworkControlPolicy, not even an explicit nil
func (o *VnicBaseEthIf) UnsetFabricEthNetworkControlPolicy() {
	o.FabricEthNetworkControlPolicy.Unset()
}

// GetFabricEthNetworkGroupPolicy returns the FabricEthNetworkGroupPolicy field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VnicBaseEthIf) GetFabricEthNetworkGroupPolicy() []FabricEthNetworkGroupPolicyRelationship {
	if o == nil {
		var ret []FabricEthNetworkGroupPolicyRelationship
		return ret
	}
	return o.FabricEthNetworkGroupPolicy
}

// GetFabricEthNetworkGroupPolicyOk returns a tuple with the FabricEthNetworkGroupPolicy field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VnicBaseEthIf) GetFabricEthNetworkGroupPolicyOk() ([]FabricEthNetworkGroupPolicyRelationship, bool) {
	if o == nil || IsNil(o.FabricEthNetworkGroupPolicy) {
		return nil, false
	}
	return o.FabricEthNetworkGroupPolicy, true
}

// HasFabricEthNetworkGroupPolicy returns a boolean if a field has been set.
func (o *VnicBaseEthIf) HasFabricEthNetworkGroupPolicy() bool {
	if o != nil && !IsNil(o.FabricEthNetworkGroupPolicy) {
		return true
	}

	return false
}

// SetFabricEthNetworkGroupPolicy gets a reference to the given []FabricEthNetworkGroupPolicyRelationship and assigns it to the FabricEthNetworkGroupPolicy field.
func (o *VnicBaseEthIf) SetFabricEthNetworkGroupPolicy(v []FabricEthNetworkGroupPolicyRelationship) {
	o.FabricEthNetworkGroupPolicy = v
}

// GetIscsiBootPolicy returns the IscsiBootPolicy field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VnicBaseEthIf) GetIscsiBootPolicy() VnicIscsiBootPolicyRelationship {
	if o == nil || IsNil(o.IscsiBootPolicy.Get()) {
		var ret VnicIscsiBootPolicyRelationship
		return ret
	}
	return *o.IscsiBootPolicy.Get()
}

// GetIscsiBootPolicyOk returns a tuple with the IscsiBootPolicy field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VnicBaseEthIf) GetIscsiBootPolicyOk() (*VnicIscsiBootPolicyRelationship, bool) {
	if o == nil {
		return nil, false
	}
	return o.IscsiBootPolicy.Get(), o.IscsiBootPolicy.IsSet()
}

// HasIscsiBootPolicy returns a boolean if a field has been set.
func (o *VnicBaseEthIf) HasIscsiBootPolicy() bool {
	if o != nil && o.IscsiBootPolicy.IsSet() {
		return true
	}

	return false
}

// SetIscsiBootPolicy gets a reference to the given NullableVnicIscsiBootPolicyRelationship and assigns it to the IscsiBootPolicy field.
func (o *VnicBaseEthIf) SetIscsiBootPolicy(v VnicIscsiBootPolicyRelationship) {
	o.IscsiBootPolicy.Set(&v)
}

// SetIscsiBootPolicyNil sets the value for IscsiBootPolicy to be an explicit nil
func (o *VnicBaseEthIf) SetIscsiBootPolicyNil() {
	o.IscsiBootPolicy.Set(nil)
}

// UnsetIscsiBootPolicy ensures that no value is present for IscsiBootPolicy, not even an explicit nil
func (o *VnicBaseEthIf) UnsetIscsiBootPolicy() {
	o.IscsiBootPolicy.Unset()
}

// GetMacPool returns the MacPool field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VnicBaseEthIf) GetMacPool() MacpoolPoolRelationship {
	if o == nil || IsNil(o.MacPool.Get()) {
		var ret MacpoolPoolRelationship
		return ret
	}
	return *o.MacPool.Get()
}

// GetMacPoolOk returns a tuple with the MacPool field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VnicBaseEthIf) GetMacPoolOk() (*MacpoolPoolRelationship, bool) {
	if o == nil {
		return nil, false
	}
	return o.MacPool.Get(), o.MacPool.IsSet()
}

// HasMacPool returns a boolean if a field has been set.
func (o *VnicBaseEthIf) HasMacPool() bool {
	if o != nil && o.MacPool.IsSet() {
		return true
	}

	return false
}

// SetMacPool gets a reference to the given NullableMacpoolPoolRelationship and assigns it to the MacPool field.
func (o *VnicBaseEthIf) SetMacPool(v MacpoolPoolRelationship) {
	o.MacPool.Set(&v)
}

// SetMacPoolNil sets the value for MacPool to be an explicit nil
func (o *VnicBaseEthIf) SetMacPoolNil() {
	o.MacPool.Set(nil)
}

// UnsetMacPool ensures that no value is present for MacPool, not even an explicit nil
func (o *VnicBaseEthIf) UnsetMacPool() {
	o.MacPool.Unset()
}

func (o VnicBaseEthIf) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VnicBaseEthIf) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	serializedPolicyAbstractPolicyItem, errPolicyAbstractPolicyItem := json.Marshal(o.PolicyAbstractPolicyItem)
	if errPolicyAbstractPolicyItem != nil {
		return map[string]interface{}{}, errPolicyAbstractPolicyItem
	}
	errPolicyAbstractPolicyItem = json.Unmarshal([]byte(serializedPolicyAbstractPolicyItem), &toSerialize)
	if errPolicyAbstractPolicyItem != nil {
		return map[string]interface{}{}, errPolicyAbstractPolicyItem
	}
	toSerialize["ClassId"] = o.ClassId
	toSerialize["ObjectType"] = o.ObjectType
	if o.Cdn.IsSet() {
		toSerialize["Cdn"] = o.Cdn.Get()
	}
	if !IsNil(o.FailoverEnabled) {
		toSerialize["FailoverEnabled"] = o.FailoverEnabled
	}
	if !IsNil(o.PinGroupName) {
		toSerialize["PinGroupName"] = o.PinGroupName
	}
	if o.SriovSettings.IsSet() {
		toSerialize["SriovSettings"] = o.SriovSettings.Get()
	}
	if o.UsnicSettings.IsSet() {
		toSerialize["UsnicSettings"] = o.UsnicSettings.Get()
	}
	if o.VmqSettings.IsSet() {
		toSerialize["VmqSettings"] = o.VmqSettings.Get()
	}
	if o.EthAdapterPolicy.IsSet() {
		toSerialize["EthAdapterPolicy"] = o.EthAdapterPolicy.Get()
	}
	if o.EthNetworkPolicy.IsSet() {
		toSerialize["EthNetworkPolicy"] = o.EthNetworkPolicy.Get()
	}
	if o.EthQosPolicy.IsSet() {
		toSerialize["EthQosPolicy"] = o.EthQosPolicy.Get()
	}
	if o.FabricEthNetworkControlPolicy.IsSet() {
		toSerialize["FabricEthNetworkControlPolicy"] = o.FabricEthNetworkControlPolicy.Get()
	}
	if o.FabricEthNetworkGroupPolicy != nil {
		toSerialize["FabricEthNetworkGroupPolicy"] = o.FabricEthNetworkGroupPolicy
	}
	if o.IscsiBootPolicy.IsSet() {
		toSerialize["IscsiBootPolicy"] = o.IscsiBootPolicy.Get()
	}
	if o.MacPool.IsSet() {
		toSerialize["MacPool"] = o.MacPool.Get()
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *VnicBaseEthIf) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"ClassId",
		"ObjectType",
	}

	// defaultValueFuncMap captures the default values for required properties.
	// These values are used when required properties are missing from the payload.
	defaultValueFuncMap := map[string]func() interface{}{}
	var defaultValueApplied bool
	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			if _, ok := defaultValueFuncMap[requiredProperty]; ok {
				allProperties[requiredProperty] = defaultValueFuncMap[requiredProperty]()
				defaultValueApplied = true
			}
		}
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	if defaultValueApplied {
		data, err = json.Marshal(allProperties)
		if err != nil {
			return err
		}
	}
	type VnicBaseEthIfWithoutEmbeddedStruct struct {
		// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data. The enum values provides the list of concrete types that can be instantiated from this abstract type.
		ClassId string `json:"ClassId"`
		// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property. The enum values provides the list of concrete types that can be instantiated from this abstract type.
		ObjectType string          `json:"ObjectType"`
		Cdn        NullableVnicCdn `json:"Cdn,omitempty"`
		// Enabling failover ensures that traffic from the vNIC automatically fails over to the secondary Fabric Interconnect, in case the specified Fabric Interconnect path goes down. Failover applies only to Cisco VICs that are connected to a Fabric Interconnect cluster.
		FailoverEnabled *bool `json:"FailoverEnabled,omitempty"`
		// Pingroup name associated to vNIC for static pinning. LCP deploy will resolve pingroup name and fetches the correspoding uplink port/port channel to pin the vNIC traffic.
		PinGroupName                  *string                                           `json:"PinGroupName,omitempty" validate:"regexp=^$|^[a-zA-Z0-9_.:-]{1,64}$"`
		SriovSettings                 NullableVnicSriovSettings                         `json:"SriovSettings,omitempty"`
		UsnicSettings                 NullableVnicUsnicSettings                         `json:"UsnicSettings,omitempty"`
		VmqSettings                   NullableVnicVmqSettings                           `json:"VmqSettings,omitempty"`
		EthAdapterPolicy              NullableVnicEthAdapterPolicyRelationship          `json:"EthAdapterPolicy,omitempty"`
		EthNetworkPolicy              NullableVnicEthNetworkPolicyRelationship          `json:"EthNetworkPolicy,omitempty"`
		EthQosPolicy                  NullableVnicEthQosPolicyRelationship              `json:"EthQosPolicy,omitempty"`
		FabricEthNetworkControlPolicy NullableFabricEthNetworkControlPolicyRelationship `json:"FabricEthNetworkControlPolicy,omitempty"`
		// An array of relationships to fabricEthNetworkGroupPolicy resources.
		FabricEthNetworkGroupPolicy []FabricEthNetworkGroupPolicyRelationship `json:"FabricEthNetworkGroupPolicy,omitempty"`
		IscsiBootPolicy             NullableVnicIscsiBootPolicyRelationship   `json:"IscsiBootPolicy,omitempty"`
		MacPool                     NullableMacpoolPoolRelationship           `json:"MacPool,omitempty"`
	}

	varVnicBaseEthIfWithoutEmbeddedStruct := VnicBaseEthIfWithoutEmbeddedStruct{}

	err = json.Unmarshal(data, &varVnicBaseEthIfWithoutEmbeddedStruct)
	if err == nil {
		varVnicBaseEthIf := _VnicBaseEthIf{}
		varVnicBaseEthIf.ClassId = varVnicBaseEthIfWithoutEmbeddedStruct.ClassId
		varVnicBaseEthIf.ObjectType = varVnicBaseEthIfWithoutEmbeddedStruct.ObjectType
		varVnicBaseEthIf.Cdn = varVnicBaseEthIfWithoutEmbeddedStruct.Cdn
		varVnicBaseEthIf.FailoverEnabled = varVnicBaseEthIfWithoutEmbeddedStruct.FailoverEnabled
		varVnicBaseEthIf.PinGroupName = varVnicBaseEthIfWithoutEmbeddedStruct.PinGroupName
		varVnicBaseEthIf.SriovSettings = varVnicBaseEthIfWithoutEmbeddedStruct.SriovSettings
		varVnicBaseEthIf.UsnicSettings = varVnicBaseEthIfWithoutEmbeddedStruct.UsnicSettings
		varVnicBaseEthIf.VmqSettings = varVnicBaseEthIfWithoutEmbeddedStruct.VmqSettings
		varVnicBaseEthIf.EthAdapterPolicy = varVnicBaseEthIfWithoutEmbeddedStruct.EthAdapterPolicy
		varVnicBaseEthIf.EthNetworkPolicy = varVnicBaseEthIfWithoutEmbeddedStruct.EthNetworkPolicy
		varVnicBaseEthIf.EthQosPolicy = varVnicBaseEthIfWithoutEmbeddedStruct.EthQosPolicy
		varVnicBaseEthIf.FabricEthNetworkControlPolicy = varVnicBaseEthIfWithoutEmbeddedStruct.FabricEthNetworkControlPolicy
		varVnicBaseEthIf.FabricEthNetworkGroupPolicy = varVnicBaseEthIfWithoutEmbeddedStruct.FabricEthNetworkGroupPolicy
		varVnicBaseEthIf.IscsiBootPolicy = varVnicBaseEthIfWithoutEmbeddedStruct.IscsiBootPolicy
		varVnicBaseEthIf.MacPool = varVnicBaseEthIfWithoutEmbeddedStruct.MacPool
		*o = VnicBaseEthIf(varVnicBaseEthIf)
	} else {
		return err
	}

	varVnicBaseEthIf := _VnicBaseEthIf{}

	err = json.Unmarshal(data, &varVnicBaseEthIf)
	if err == nil {
		o.PolicyAbstractPolicyItem = varVnicBaseEthIf.PolicyAbstractPolicyItem
	} else {
		return err
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "ClassId")
		delete(additionalProperties, "ObjectType")
		delete(additionalProperties, "Cdn")
		delete(additionalProperties, "FailoverEnabled")
		delete(additionalProperties, "PinGroupName")
		delete(additionalProperties, "SriovSettings")
		delete(additionalProperties, "UsnicSettings")
		delete(additionalProperties, "VmqSettings")
		delete(additionalProperties, "EthAdapterPolicy")
		delete(additionalProperties, "EthNetworkPolicy")
		delete(additionalProperties, "EthQosPolicy")
		delete(additionalProperties, "FabricEthNetworkControlPolicy")
		delete(additionalProperties, "FabricEthNetworkGroupPolicy")
		delete(additionalProperties, "IscsiBootPolicy")
		delete(additionalProperties, "MacPool")

		// remove fields from embedded structs
		reflectPolicyAbstractPolicyItem := reflect.ValueOf(o.PolicyAbstractPolicyItem)
		for i := 0; i < reflectPolicyAbstractPolicyItem.Type().NumField(); i++ {
			t := reflectPolicyAbstractPolicyItem.Type().Field(i)

			if jsonTag := t.Tag.Get("json"); jsonTag != "" {
				fieldName := ""
				if commaIdx := strings.Index(jsonTag, ","); commaIdx > 0 {
					fieldName = jsonTag[:commaIdx]
				} else {
					fieldName = jsonTag
				}
				if fieldName != "AdditionalProperties" {
					delete(additionalProperties, fieldName)
				}
			}
		}

		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableVnicBaseEthIf struct {
	value *VnicBaseEthIf
	isSet bool
}

func (v NullableVnicBaseEthIf) Get() *VnicBaseEthIf {
	return v.value
}

func (v *NullableVnicBaseEthIf) Set(val *VnicBaseEthIf) {
	v.value = val
	v.isSet = true
}

func (v NullableVnicBaseEthIf) IsSet() bool {
	return v.isSet
}

func (v *NullableVnicBaseEthIf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVnicBaseEthIf(val *VnicBaseEthIf) *NullableVnicBaseEthIf {
	return &NullableVnicBaseEthIf{value: val, isSet: true}
}

func (v NullableVnicBaseEthIf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVnicBaseEthIf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
