/*
Cisco Intersight

Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations. The Intersight OpenAPI document defines the complete set of properties that are returned in the HTTP response. From that perspective, a client can expect that no additional properties are returned, unless these properties are explicitly defined in the OpenAPI document. However, when a client uses an older version of the Intersight OpenAPI document, the server may send additional properties because the software is more recent than the client. In that case, the client may receive properties that it does not know about. Some generated SDKs perform a strict validation of the HTTP response body against the OpenAPI document.

API version: 1.0.11-2025101412
Contact: intersight@cisco.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package intersight

import (
	"encoding/json"
	"fmt"
	"reflect"
	"strings"
)

// checks if the EquipmentSharedGraphicsCard type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EquipmentSharedGraphicsCard{}

// EquipmentSharedGraphicsCard Graphics card within a PCIe node that can be shared by one or more servers.
type EquipmentSharedGraphicsCard struct {
	EquipmentBase
	// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.
	ClassId string `json:"ClassId"`
	// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
	ObjectType string `json:"ObjectType"`
	// The description of the GPU card.
	Description *string `json:"Description,omitempty"`
	// The unique device identifier assigned by the vendor to a specific model of GPU.
	DeviceId *int64 `json:"DeviceId,omitempty"`
	// The version of the GPU firmware.
	FirmwareVersion *string `json:"FirmwareVersion,omitempty"`
	// The identifier of the graphics card.
	GpuId      *string  `json:"GpuId,omitempty"`
	OperReason []string `json:"OperReason,omitempty"`
	// Operational state of graphics card.
	OperState *string `json:"OperState,omitempty"`
	// Part number identifier for the graphics card.
	PartNumber *string `json:"PartNumber,omitempty"`
	// PCIe slot of the GPU in the PCIe node.
	PciSlot *string `json:"PciSlot,omitempty"`
	// The unique product ID associated with the GPU card.
	Pid *string `json:"Pid,omitempty"`
	// The subsystem device identifier assigned by the subsystem vendor to a specific model of GPU.
	SubDeviceId *int64 `json:"SubDeviceId,omitempty"`
	// The unique vendor identifier assigned to the organization which integrates the GPU.
	SubVendorId *int64 `json:"SubVendorId,omitempty"`
	// The unique vendor identifier assigned to the manufacturer of the GPU.
	VendorId              *int64                                    `json:"VendorId,omitempty"`
	EquipmentInterconnect NullableEquipmentInterconnectRelationship `json:"EquipmentInterconnect,omitempty"`
	// An array of relationships to graphicsCard resources.
	GraphicsCards        []GraphicsCardRelationship                  `json:"GraphicsCards,omitempty"`
	PciEndpoint          NullablePciEndpointRelationship             `json:"PciEndpoint,omitempty"`
	PciNode              NullablePciNodeRelationship                 `json:"PciNode,omitempty"`
	RegisteredDevice     NullableAssetDeviceRegistrationRelationship `json:"RegisteredDevice,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _EquipmentSharedGraphicsCard EquipmentSharedGraphicsCard

// NewEquipmentSharedGraphicsCard instantiates a new EquipmentSharedGraphicsCard object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEquipmentSharedGraphicsCard(classId string, objectType string) *EquipmentSharedGraphicsCard {
	this := EquipmentSharedGraphicsCard{}
	this.ClassId = classId
	this.ObjectType = objectType
	return &this
}

// NewEquipmentSharedGraphicsCardWithDefaults instantiates a new EquipmentSharedGraphicsCard object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEquipmentSharedGraphicsCardWithDefaults() *EquipmentSharedGraphicsCard {
	this := EquipmentSharedGraphicsCard{}
	var classId string = "equipment.SharedGraphicsCard"
	this.ClassId = classId
	var objectType string = "equipment.SharedGraphicsCard"
	this.ObjectType = objectType
	return &this
}

// GetClassId returns the ClassId field value
func (o *EquipmentSharedGraphicsCard) GetClassId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ClassId
}

// GetClassIdOk returns a tuple with the ClassId field value
// and a boolean to check if the value has been set.
func (o *EquipmentSharedGraphicsCard) GetClassIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ClassId, true
}

// SetClassId sets field value
func (o *EquipmentSharedGraphicsCard) SetClassId(v string) {
	o.ClassId = v
}

// GetDefaultClassId returns the default value "equipment.SharedGraphicsCard" of the ClassId field.
func (o *EquipmentSharedGraphicsCard) GetDefaultClassId() interface{} {
	return "equipment.SharedGraphicsCard"
}

// GetObjectType returns the ObjectType field value
func (o *EquipmentSharedGraphicsCard) GetObjectType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ObjectType
}

// GetObjectTypeOk returns a tuple with the ObjectType field value
// and a boolean to check if the value has been set.
func (o *EquipmentSharedGraphicsCard) GetObjectTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ObjectType, true
}

// SetObjectType sets field value
func (o *EquipmentSharedGraphicsCard) SetObjectType(v string) {
	o.ObjectType = v
}

// GetDefaultObjectType returns the default value "equipment.SharedGraphicsCard" of the ObjectType field.
func (o *EquipmentSharedGraphicsCard) GetDefaultObjectType() interface{} {
	return "equipment.SharedGraphicsCard"
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *EquipmentSharedGraphicsCard) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EquipmentSharedGraphicsCard) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *EquipmentSharedGraphicsCard) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *EquipmentSharedGraphicsCard) SetDescription(v string) {
	o.Description = &v
}

// GetDeviceId returns the DeviceId field value if set, zero value otherwise.
func (o *EquipmentSharedGraphicsCard) GetDeviceId() int64 {
	if o == nil || IsNil(o.DeviceId) {
		var ret int64
		return ret
	}
	return *o.DeviceId
}

// GetDeviceIdOk returns a tuple with the DeviceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EquipmentSharedGraphicsCard) GetDeviceIdOk() (*int64, bool) {
	if o == nil || IsNil(o.DeviceId) {
		return nil, false
	}
	return o.DeviceId, true
}

// HasDeviceId returns a boolean if a field has been set.
func (o *EquipmentSharedGraphicsCard) HasDeviceId() bool {
	if o != nil && !IsNil(o.DeviceId) {
		return true
	}

	return false
}

// SetDeviceId gets a reference to the given int64 and assigns it to the DeviceId field.
func (o *EquipmentSharedGraphicsCard) SetDeviceId(v int64) {
	o.DeviceId = &v
}

// GetFirmwareVersion returns the FirmwareVersion field value if set, zero value otherwise.
func (o *EquipmentSharedGraphicsCard) GetFirmwareVersion() string {
	if o == nil || IsNil(o.FirmwareVersion) {
		var ret string
		return ret
	}
	return *o.FirmwareVersion
}

// GetFirmwareVersionOk returns a tuple with the FirmwareVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EquipmentSharedGraphicsCard) GetFirmwareVersionOk() (*string, bool) {
	if o == nil || IsNil(o.FirmwareVersion) {
		return nil, false
	}
	return o.FirmwareVersion, true
}

// HasFirmwareVersion returns a boolean if a field has been set.
func (o *EquipmentSharedGraphicsCard) HasFirmwareVersion() bool {
	if o != nil && !IsNil(o.FirmwareVersion) {
		return true
	}

	return false
}

// SetFirmwareVersion gets a reference to the given string and assigns it to the FirmwareVersion field.
func (o *EquipmentSharedGraphicsCard) SetFirmwareVersion(v string) {
	o.FirmwareVersion = &v
}

// GetGpuId returns the GpuId field value if set, zero value otherwise.
func (o *EquipmentSharedGraphicsCard) GetGpuId() string {
	if o == nil || IsNil(o.GpuId) {
		var ret string
		return ret
	}
	return *o.GpuId
}

// GetGpuIdOk returns a tuple with the GpuId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EquipmentSharedGraphicsCard) GetGpuIdOk() (*string, bool) {
	if o == nil || IsNil(o.GpuId) {
		return nil, false
	}
	return o.GpuId, true
}

// HasGpuId returns a boolean if a field has been set.
func (o *EquipmentSharedGraphicsCard) HasGpuId() bool {
	if o != nil && !IsNil(o.GpuId) {
		return true
	}

	return false
}

// SetGpuId gets a reference to the given string and assigns it to the GpuId field.
func (o *EquipmentSharedGraphicsCard) SetGpuId(v string) {
	o.GpuId = &v
}

// GetOperReason returns the OperReason field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EquipmentSharedGraphicsCard) GetOperReason() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.OperReason
}

// GetOperReasonOk returns a tuple with the OperReason field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EquipmentSharedGraphicsCard) GetOperReasonOk() ([]string, bool) {
	if o == nil || IsNil(o.OperReason) {
		return nil, false
	}
	return o.OperReason, true
}

// HasOperReason returns a boolean if a field has been set.
func (o *EquipmentSharedGraphicsCard) HasOperReason() bool {
	if o != nil && !IsNil(o.OperReason) {
		return true
	}

	return false
}

// SetOperReason gets a reference to the given []string and assigns it to the OperReason field.
func (o *EquipmentSharedGraphicsCard) SetOperReason(v []string) {
	o.OperReason = v
}

// GetOperState returns the OperState field value if set, zero value otherwise.
func (o *EquipmentSharedGraphicsCard) GetOperState() string {
	if o == nil || IsNil(o.OperState) {
		var ret string
		return ret
	}
	return *o.OperState
}

// GetOperStateOk returns a tuple with the OperState field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EquipmentSharedGraphicsCard) GetOperStateOk() (*string, bool) {
	if o == nil || IsNil(o.OperState) {
		return nil, false
	}
	return o.OperState, true
}

// HasOperState returns a boolean if a field has been set.
func (o *EquipmentSharedGraphicsCard) HasOperState() bool {
	if o != nil && !IsNil(o.OperState) {
		return true
	}

	return false
}

// SetOperState gets a reference to the given string and assigns it to the OperState field.
func (o *EquipmentSharedGraphicsCard) SetOperState(v string) {
	o.OperState = &v
}

// GetPartNumber returns the PartNumber field value if set, zero value otherwise.
func (o *EquipmentSharedGraphicsCard) GetPartNumber() string {
	if o == nil || IsNil(o.PartNumber) {
		var ret string
		return ret
	}
	return *o.PartNumber
}

// GetPartNumberOk returns a tuple with the PartNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EquipmentSharedGraphicsCard) GetPartNumberOk() (*string, bool) {
	if o == nil || IsNil(o.PartNumber) {
		return nil, false
	}
	return o.PartNumber, true
}

// HasPartNumber returns a boolean if a field has been set.
func (o *EquipmentSharedGraphicsCard) HasPartNumber() bool {
	if o != nil && !IsNil(o.PartNumber) {
		return true
	}

	return false
}

// SetPartNumber gets a reference to the given string and assigns it to the PartNumber field.
func (o *EquipmentSharedGraphicsCard) SetPartNumber(v string) {
	o.PartNumber = &v
}

// GetPciSlot returns the PciSlot field value if set, zero value otherwise.
func (o *EquipmentSharedGraphicsCard) GetPciSlot() string {
	if o == nil || IsNil(o.PciSlot) {
		var ret string
		return ret
	}
	return *o.PciSlot
}

// GetPciSlotOk returns a tuple with the PciSlot field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EquipmentSharedGraphicsCard) GetPciSlotOk() (*string, bool) {
	if o == nil || IsNil(o.PciSlot) {
		return nil, false
	}
	return o.PciSlot, true
}

// HasPciSlot returns a boolean if a field has been set.
func (o *EquipmentSharedGraphicsCard) HasPciSlot() bool {
	if o != nil && !IsNil(o.PciSlot) {
		return true
	}

	return false
}

// SetPciSlot gets a reference to the given string and assigns it to the PciSlot field.
func (o *EquipmentSharedGraphicsCard) SetPciSlot(v string) {
	o.PciSlot = &v
}

// GetPid returns the Pid field value if set, zero value otherwise.
func (o *EquipmentSharedGraphicsCard) GetPid() string {
	if o == nil || IsNil(o.Pid) {
		var ret string
		return ret
	}
	return *o.Pid
}

// GetPidOk returns a tuple with the Pid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EquipmentSharedGraphicsCard) GetPidOk() (*string, bool) {
	if o == nil || IsNil(o.Pid) {
		return nil, false
	}
	return o.Pid, true
}

// HasPid returns a boolean if a field has been set.
func (o *EquipmentSharedGraphicsCard) HasPid() bool {
	if o != nil && !IsNil(o.Pid) {
		return true
	}

	return false
}

// SetPid gets a reference to the given string and assigns it to the Pid field.
func (o *EquipmentSharedGraphicsCard) SetPid(v string) {
	o.Pid = &v
}

// GetSubDeviceId returns the SubDeviceId field value if set, zero value otherwise.
func (o *EquipmentSharedGraphicsCard) GetSubDeviceId() int64 {
	if o == nil || IsNil(o.SubDeviceId) {
		var ret int64
		return ret
	}
	return *o.SubDeviceId
}

// GetSubDeviceIdOk returns a tuple with the SubDeviceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EquipmentSharedGraphicsCard) GetSubDeviceIdOk() (*int64, bool) {
	if o == nil || IsNil(o.SubDeviceId) {
		return nil, false
	}
	return o.SubDeviceId, true
}

// HasSubDeviceId returns a boolean if a field has been set.
func (o *EquipmentSharedGraphicsCard) HasSubDeviceId() bool {
	if o != nil && !IsNil(o.SubDeviceId) {
		return true
	}

	return false
}

// SetSubDeviceId gets a reference to the given int64 and assigns it to the SubDeviceId field.
func (o *EquipmentSharedGraphicsCard) SetSubDeviceId(v int64) {
	o.SubDeviceId = &v
}

// GetSubVendorId returns the SubVendorId field value if set, zero value otherwise.
func (o *EquipmentSharedGraphicsCard) GetSubVendorId() int64 {
	if o == nil || IsNil(o.SubVendorId) {
		var ret int64
		return ret
	}
	return *o.SubVendorId
}

// GetSubVendorIdOk returns a tuple with the SubVendorId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EquipmentSharedGraphicsCard) GetSubVendorIdOk() (*int64, bool) {
	if o == nil || IsNil(o.SubVendorId) {
		return nil, false
	}
	return o.SubVendorId, true
}

// HasSubVendorId returns a boolean if a field has been set.
func (o *EquipmentSharedGraphicsCard) HasSubVendorId() bool {
	if o != nil && !IsNil(o.SubVendorId) {
		return true
	}

	return false
}

// SetSubVendorId gets a reference to the given int64 and assigns it to the SubVendorId field.
func (o *EquipmentSharedGraphicsCard) SetSubVendorId(v int64) {
	o.SubVendorId = &v
}

// GetVendorId returns the VendorId field value if set, zero value otherwise.
func (o *EquipmentSharedGraphicsCard) GetVendorId() int64 {
	if o == nil || IsNil(o.VendorId) {
		var ret int64
		return ret
	}
	return *o.VendorId
}

// GetVendorIdOk returns a tuple with the VendorId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EquipmentSharedGraphicsCard) GetVendorIdOk() (*int64, bool) {
	if o == nil || IsNil(o.VendorId) {
		return nil, false
	}
	return o.VendorId, true
}

// HasVendorId returns a boolean if a field has been set.
func (o *EquipmentSharedGraphicsCard) HasVendorId() bool {
	if o != nil && !IsNil(o.VendorId) {
		return true
	}

	return false
}

// SetVendorId gets a reference to the given int64 and assigns it to the VendorId field.
func (o *EquipmentSharedGraphicsCard) SetVendorId(v int64) {
	o.VendorId = &v
}

// GetEquipmentInterconnect returns the EquipmentInterconnect field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EquipmentSharedGraphicsCard) GetEquipmentInterconnect() EquipmentInterconnectRelationship {
	if o == nil || IsNil(o.EquipmentInterconnect.Get()) {
		var ret EquipmentInterconnectRelationship
		return ret
	}
	return *o.EquipmentInterconnect.Get()
}

// GetEquipmentInterconnectOk returns a tuple with the EquipmentInterconnect field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EquipmentSharedGraphicsCard) GetEquipmentInterconnectOk() (*EquipmentInterconnectRelationship, bool) {
	if o == nil {
		return nil, false
	}
	return o.EquipmentInterconnect.Get(), o.EquipmentInterconnect.IsSet()
}

// HasEquipmentInterconnect returns a boolean if a field has been set.
func (o *EquipmentSharedGraphicsCard) HasEquipmentInterconnect() bool {
	if o != nil && o.EquipmentInterconnect.IsSet() {
		return true
	}

	return false
}

// SetEquipmentInterconnect gets a reference to the given NullableEquipmentInterconnectRelationship and assigns it to the EquipmentInterconnect field.
func (o *EquipmentSharedGraphicsCard) SetEquipmentInterconnect(v EquipmentInterconnectRelationship) {
	o.EquipmentInterconnect.Set(&v)
}

// SetEquipmentInterconnectNil sets the value for EquipmentInterconnect to be an explicit nil
func (o *EquipmentSharedGraphicsCard) SetEquipmentInterconnectNil() {
	o.EquipmentInterconnect.Set(nil)
}

// UnsetEquipmentInterconnect ensures that no value is present for EquipmentInterconnect, not even an explicit nil
func (o *EquipmentSharedGraphicsCard) UnsetEquipmentInterconnect() {
	o.EquipmentInterconnect.Unset()
}

// GetGraphicsCards returns the GraphicsCards field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EquipmentSharedGraphicsCard) GetGraphicsCards() []GraphicsCardRelationship {
	if o == nil {
		var ret []GraphicsCardRelationship
		return ret
	}
	return o.GraphicsCards
}

// GetGraphicsCardsOk returns a tuple with the GraphicsCards field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EquipmentSharedGraphicsCard) GetGraphicsCardsOk() ([]GraphicsCardRelationship, bool) {
	if o == nil || IsNil(o.GraphicsCards) {
		return nil, false
	}
	return o.GraphicsCards, true
}

// HasGraphicsCards returns a boolean if a field has been set.
func (o *EquipmentSharedGraphicsCard) HasGraphicsCards() bool {
	if o != nil && !IsNil(o.GraphicsCards) {
		return true
	}

	return false
}

// SetGraphicsCards gets a reference to the given []GraphicsCardRelationship and assigns it to the GraphicsCards field.
func (o *EquipmentSharedGraphicsCard) SetGraphicsCards(v []GraphicsCardRelationship) {
	o.GraphicsCards = v
}

// GetPciEndpoint returns the PciEndpoint field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EquipmentSharedGraphicsCard) GetPciEndpoint() PciEndpointRelationship {
	if o == nil || IsNil(o.PciEndpoint.Get()) {
		var ret PciEndpointRelationship
		return ret
	}
	return *o.PciEndpoint.Get()
}

// GetPciEndpointOk returns a tuple with the PciEndpoint field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EquipmentSharedGraphicsCard) GetPciEndpointOk() (*PciEndpointRelationship, bool) {
	if o == nil {
		return nil, false
	}
	return o.PciEndpoint.Get(), o.PciEndpoint.IsSet()
}

// HasPciEndpoint returns a boolean if a field has been set.
func (o *EquipmentSharedGraphicsCard) HasPciEndpoint() bool {
	if o != nil && o.PciEndpoint.IsSet() {
		return true
	}

	return false
}

// SetPciEndpoint gets a reference to the given NullablePciEndpointRelationship and assigns it to the PciEndpoint field.
func (o *EquipmentSharedGraphicsCard) SetPciEndpoint(v PciEndpointRelationship) {
	o.PciEndpoint.Set(&v)
}

// SetPciEndpointNil sets the value for PciEndpoint to be an explicit nil
func (o *EquipmentSharedGraphicsCard) SetPciEndpointNil() {
	o.PciEndpoint.Set(nil)
}

// UnsetPciEndpoint ensures that no value is present for PciEndpoint, not even an explicit nil
func (o *EquipmentSharedGraphicsCard) UnsetPciEndpoint() {
	o.PciEndpoint.Unset()
}

// GetPciNode returns the PciNode field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EquipmentSharedGraphicsCard) GetPciNode() PciNodeRelationship {
	if o == nil || IsNil(o.PciNode.Get()) {
		var ret PciNodeRelationship
		return ret
	}
	return *o.PciNode.Get()
}

// GetPciNodeOk returns a tuple with the PciNode field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EquipmentSharedGraphicsCard) GetPciNodeOk() (*PciNodeRelationship, bool) {
	if o == nil {
		return nil, false
	}
	return o.PciNode.Get(), o.PciNode.IsSet()
}

// HasPciNode returns a boolean if a field has been set.
func (o *EquipmentSharedGraphicsCard) HasPciNode() bool {
	if o != nil && o.PciNode.IsSet() {
		return true
	}

	return false
}

// SetPciNode gets a reference to the given NullablePciNodeRelationship and assigns it to the PciNode field.
func (o *EquipmentSharedGraphicsCard) SetPciNode(v PciNodeRelationship) {
	o.PciNode.Set(&v)
}

// SetPciNodeNil sets the value for PciNode to be an explicit nil
func (o *EquipmentSharedGraphicsCard) SetPciNodeNil() {
	o.PciNode.Set(nil)
}

// UnsetPciNode ensures that no value is present for PciNode, not even an explicit nil
func (o *EquipmentSharedGraphicsCard) UnsetPciNode() {
	o.PciNode.Unset()
}

// GetRegisteredDevice returns the RegisteredDevice field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EquipmentSharedGraphicsCard) GetRegisteredDevice() AssetDeviceRegistrationRelationship {
	if o == nil || IsNil(o.RegisteredDevice.Get()) {
		var ret AssetDeviceRegistrationRelationship
		return ret
	}
	return *o.RegisteredDevice.Get()
}

// GetRegisteredDeviceOk returns a tuple with the RegisteredDevice field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EquipmentSharedGraphicsCard) GetRegisteredDeviceOk() (*AssetDeviceRegistrationRelationship, bool) {
	if o == nil {
		return nil, false
	}
	return o.RegisteredDevice.Get(), o.RegisteredDevice.IsSet()
}

// HasRegisteredDevice returns a boolean if a field has been set.
func (o *EquipmentSharedGraphicsCard) HasRegisteredDevice() bool {
	if o != nil && o.RegisteredDevice.IsSet() {
		return true
	}

	return false
}

// SetRegisteredDevice gets a reference to the given NullableAssetDeviceRegistrationRelationship and assigns it to the RegisteredDevice field.
func (o *EquipmentSharedGraphicsCard) SetRegisteredDevice(v AssetDeviceRegistrationRelationship) {
	o.RegisteredDevice.Set(&v)
}

// SetRegisteredDeviceNil sets the value for RegisteredDevice to be an explicit nil
func (o *EquipmentSharedGraphicsCard) SetRegisteredDeviceNil() {
	o.RegisteredDevice.Set(nil)
}

// UnsetRegisteredDevice ensures that no value is present for RegisteredDevice, not even an explicit nil
func (o *EquipmentSharedGraphicsCard) UnsetRegisteredDevice() {
	o.RegisteredDevice.Unset()
}

func (o EquipmentSharedGraphicsCard) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EquipmentSharedGraphicsCard) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	serializedEquipmentBase, errEquipmentBase := json.Marshal(o.EquipmentBase)
	if errEquipmentBase != nil {
		return map[string]interface{}{}, errEquipmentBase
	}
	errEquipmentBase = json.Unmarshal([]byte(serializedEquipmentBase), &toSerialize)
	if errEquipmentBase != nil {
		return map[string]interface{}{}, errEquipmentBase
	}
	if _, exists := toSerialize["ClassId"]; !exists {
		toSerialize["ClassId"] = o.GetDefaultClassId()
	}
	toSerialize["ClassId"] = o.ClassId
	if _, exists := toSerialize["ObjectType"]; !exists {
		toSerialize["ObjectType"] = o.GetDefaultObjectType()
	}
	toSerialize["ObjectType"] = o.ObjectType
	if !IsNil(o.Description) {
		toSerialize["Description"] = o.Description
	}
	if !IsNil(o.DeviceId) {
		toSerialize["DeviceId"] = o.DeviceId
	}
	if !IsNil(o.FirmwareVersion) {
		toSerialize["FirmwareVersion"] = o.FirmwareVersion
	}
	if !IsNil(o.GpuId) {
		toSerialize["GpuId"] = o.GpuId
	}
	if o.OperReason != nil {
		toSerialize["OperReason"] = o.OperReason
	}
	if !IsNil(o.OperState) {
		toSerialize["OperState"] = o.OperState
	}
	if !IsNil(o.PartNumber) {
		toSerialize["PartNumber"] = o.PartNumber
	}
	if !IsNil(o.PciSlot) {
		toSerialize["PciSlot"] = o.PciSlot
	}
	if !IsNil(o.Pid) {
		toSerialize["Pid"] = o.Pid
	}
	if !IsNil(o.SubDeviceId) {
		toSerialize["SubDeviceId"] = o.SubDeviceId
	}
	if !IsNil(o.SubVendorId) {
		toSerialize["SubVendorId"] = o.SubVendorId
	}
	if !IsNil(o.VendorId) {
		toSerialize["VendorId"] = o.VendorId
	}
	if o.EquipmentInterconnect.IsSet() {
		toSerialize["EquipmentInterconnect"] = o.EquipmentInterconnect.Get()
	}
	if o.GraphicsCards != nil {
		toSerialize["GraphicsCards"] = o.GraphicsCards
	}
	if o.PciEndpoint.IsSet() {
		toSerialize["PciEndpoint"] = o.PciEndpoint.Get()
	}
	if o.PciNode.IsSet() {
		toSerialize["PciNode"] = o.PciNode.Get()
	}
	if o.RegisteredDevice.IsSet() {
		toSerialize["RegisteredDevice"] = o.RegisteredDevice.Get()
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *EquipmentSharedGraphicsCard) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"ClassId",
		"ObjectType",
	}

	// defaultValueFuncMap captures the default values for required properties.
	// These values are used when required properties are missing from the payload.
	defaultValueFuncMap := map[string]func() interface{}{
		"ClassId":    o.GetDefaultClassId,
		"ObjectType": o.GetDefaultObjectType,
	}
	var defaultValueApplied bool
	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			if _, ok := defaultValueFuncMap[requiredProperty]; ok {
				allProperties[requiredProperty] = defaultValueFuncMap[requiredProperty]()
				defaultValueApplied = true
			}
		}
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	if defaultValueApplied {
		data, err = json.Marshal(allProperties)
		if err != nil {
			return err
		}
	}
	type EquipmentSharedGraphicsCardWithoutEmbeddedStruct struct {
		// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.
		ClassId string `json:"ClassId"`
		// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
		ObjectType string `json:"ObjectType"`
		// The description of the GPU card.
		Description *string `json:"Description,omitempty"`
		// The unique device identifier assigned by the vendor to a specific model of GPU.
		DeviceId *int64 `json:"DeviceId,omitempty"`
		// The version of the GPU firmware.
		FirmwareVersion *string `json:"FirmwareVersion,omitempty"`
		// The identifier of the graphics card.
		GpuId      *string  `json:"GpuId,omitempty"`
		OperReason []string `json:"OperReason,omitempty"`
		// Operational state of graphics card.
		OperState *string `json:"OperState,omitempty"`
		// Part number identifier for the graphics card.
		PartNumber *string `json:"PartNumber,omitempty"`
		// PCIe slot of the GPU in the PCIe node.
		PciSlot *string `json:"PciSlot,omitempty"`
		// The unique product ID associated with the GPU card.
		Pid *string `json:"Pid,omitempty"`
		// The subsystem device identifier assigned by the subsystem vendor to a specific model of GPU.
		SubDeviceId *int64 `json:"SubDeviceId,omitempty"`
		// The unique vendor identifier assigned to the organization which integrates the GPU.
		SubVendorId *int64 `json:"SubVendorId,omitempty"`
		// The unique vendor identifier assigned to the manufacturer of the GPU.
		VendorId              *int64                                    `json:"VendorId,omitempty"`
		EquipmentInterconnect NullableEquipmentInterconnectRelationship `json:"EquipmentInterconnect,omitempty"`
		// An array of relationships to graphicsCard resources.
		GraphicsCards    []GraphicsCardRelationship                  `json:"GraphicsCards,omitempty"`
		PciEndpoint      NullablePciEndpointRelationship             `json:"PciEndpoint,omitempty"`
		PciNode          NullablePciNodeRelationship                 `json:"PciNode,omitempty"`
		RegisteredDevice NullableAssetDeviceRegistrationRelationship `json:"RegisteredDevice,omitempty"`
	}

	varEquipmentSharedGraphicsCardWithoutEmbeddedStruct := EquipmentSharedGraphicsCardWithoutEmbeddedStruct{}

	err = json.Unmarshal(data, &varEquipmentSharedGraphicsCardWithoutEmbeddedStruct)
	if err == nil {
		varEquipmentSharedGraphicsCard := _EquipmentSharedGraphicsCard{}
		varEquipmentSharedGraphicsCard.ClassId = varEquipmentSharedGraphicsCardWithoutEmbeddedStruct.ClassId
		varEquipmentSharedGraphicsCard.ObjectType = varEquipmentSharedGraphicsCardWithoutEmbeddedStruct.ObjectType
		varEquipmentSharedGraphicsCard.Description = varEquipmentSharedGraphicsCardWithoutEmbeddedStruct.Description
		varEquipmentSharedGraphicsCard.DeviceId = varEquipmentSharedGraphicsCardWithoutEmbeddedStruct.DeviceId
		varEquipmentSharedGraphicsCard.FirmwareVersion = varEquipmentSharedGraphicsCardWithoutEmbeddedStruct.FirmwareVersion
		varEquipmentSharedGraphicsCard.GpuId = varEquipmentSharedGraphicsCardWithoutEmbeddedStruct.GpuId
		varEquipmentSharedGraphicsCard.OperReason = varEquipmentSharedGraphicsCardWithoutEmbeddedStruct.OperReason
		varEquipmentSharedGraphicsCard.OperState = varEquipmentSharedGraphicsCardWithoutEmbeddedStruct.OperState
		varEquipmentSharedGraphicsCard.PartNumber = varEquipmentSharedGraphicsCardWithoutEmbeddedStruct.PartNumber
		varEquipmentSharedGraphicsCard.PciSlot = varEquipmentSharedGraphicsCardWithoutEmbeddedStruct.PciSlot
		varEquipmentSharedGraphicsCard.Pid = varEquipmentSharedGraphicsCardWithoutEmbeddedStruct.Pid
		varEquipmentSharedGraphicsCard.SubDeviceId = varEquipmentSharedGraphicsCardWithoutEmbeddedStruct.SubDeviceId
		varEquipmentSharedGraphicsCard.SubVendorId = varEquipmentSharedGraphicsCardWithoutEmbeddedStruct.SubVendorId
		varEquipmentSharedGraphicsCard.VendorId = varEquipmentSharedGraphicsCardWithoutEmbeddedStruct.VendorId
		varEquipmentSharedGraphicsCard.EquipmentInterconnect = varEquipmentSharedGraphicsCardWithoutEmbeddedStruct.EquipmentInterconnect
		varEquipmentSharedGraphicsCard.GraphicsCards = varEquipmentSharedGraphicsCardWithoutEmbeddedStruct.GraphicsCards
		varEquipmentSharedGraphicsCard.PciEndpoint = varEquipmentSharedGraphicsCardWithoutEmbeddedStruct.PciEndpoint
		varEquipmentSharedGraphicsCard.PciNode = varEquipmentSharedGraphicsCardWithoutEmbeddedStruct.PciNode
		varEquipmentSharedGraphicsCard.RegisteredDevice = varEquipmentSharedGraphicsCardWithoutEmbeddedStruct.RegisteredDevice
		*o = EquipmentSharedGraphicsCard(varEquipmentSharedGraphicsCard)
	} else {
		return err
	}

	varEquipmentSharedGraphicsCard := _EquipmentSharedGraphicsCard{}

	err = json.Unmarshal(data, &varEquipmentSharedGraphicsCard)
	if err == nil {
		o.EquipmentBase = varEquipmentSharedGraphicsCard.EquipmentBase
	} else {
		return err
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "ClassId")
		delete(additionalProperties, "ObjectType")
		delete(additionalProperties, "Description")
		delete(additionalProperties, "DeviceId")
		delete(additionalProperties, "FirmwareVersion")
		delete(additionalProperties, "GpuId")
		delete(additionalProperties, "OperReason")
		delete(additionalProperties, "OperState")
		delete(additionalProperties, "PartNumber")
		delete(additionalProperties, "PciSlot")
		delete(additionalProperties, "Pid")
		delete(additionalProperties, "SubDeviceId")
		delete(additionalProperties, "SubVendorId")
		delete(additionalProperties, "VendorId")
		delete(additionalProperties, "EquipmentInterconnect")
		delete(additionalProperties, "GraphicsCards")
		delete(additionalProperties, "PciEndpoint")
		delete(additionalProperties, "PciNode")
		delete(additionalProperties, "RegisteredDevice")

		// remove fields from embedded structs
		reflectEquipmentBase := reflect.ValueOf(o.EquipmentBase)
		for i := 0; i < reflectEquipmentBase.Type().NumField(); i++ {
			t := reflectEquipmentBase.Type().Field(i)

			if jsonTag := t.Tag.Get("json"); jsonTag != "" {
				fieldName := ""
				if commaIdx := strings.Index(jsonTag, ","); commaIdx > 0 {
					fieldName = jsonTag[:commaIdx]
				} else {
					fieldName = jsonTag
				}
				if fieldName != "AdditionalProperties" {
					delete(additionalProperties, fieldName)
				}
			}
		}

		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableEquipmentSharedGraphicsCard struct {
	value *EquipmentSharedGraphicsCard
	isSet bool
}

func (v NullableEquipmentSharedGraphicsCard) Get() *EquipmentSharedGraphicsCard {
	return v.value
}

func (v *NullableEquipmentSharedGraphicsCard) Set(val *EquipmentSharedGraphicsCard) {
	v.value = val
	v.isSet = true
}

func (v NullableEquipmentSharedGraphicsCard) IsSet() bool {
	return v.isSet
}

func (v *NullableEquipmentSharedGraphicsCard) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEquipmentSharedGraphicsCard(val *EquipmentSharedGraphicsCard) *NullableEquipmentSharedGraphicsCard {
	return &NullableEquipmentSharedGraphicsCard{value: val, isSet: true}
}

func (v NullableEquipmentSharedGraphicsCard) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEquipmentSharedGraphicsCard) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
