/*
Cisco Intersight

Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations. The Intersight OpenAPI document defines the complete set of properties that are returned in the HTTP response. From that perspective, a client can expect that no additional properties are returned, unless these properties are explicitly defined in the OpenAPI document. However, when a client uses an older version of the Intersight OpenAPI document, the server may send additional properties because the software is more recent than the client. In that case, the client may receive properties that it does not know about. Some generated SDKs perform a strict validation of the HTTP response body against the OpenAPI document.

API version: 1.0.11-2024120409
Contact: intersight@cisco.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package intersight

import (
	"encoding/json"
	"fmt"
	"reflect"
	"strings"
)

// checks if the HciVirtualGpuConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &HciVirtualGpuConfig{}

// HciVirtualGpuConfig The configuration of a virtual GPU.
type HciVirtualGpuConfig struct {
	MoBaseComplexType
	// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.
	ClassId string `json:"ClassId"`
	// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
	ObjectType string `json:"ObjectType"`
	// Indicates if the virtual GPU is assignable.
	Assignable *int64 `json:"Assignable,omitempty"`
	// The device id of the virtual GPU.
	DeviceId *int64 `json:"DeviceId,omitempty"`
	// The name of the virtual GPU.
	DeviceName *string `json:"DeviceName,omitempty"`
	// The fraction of the virtual GPU.
	Fraction *int64 `json:"Fraction,omitempty"`
	// The frame buffer size of the virtual GPU.
	FrameBufferSizeBytes *int64 `json:"FrameBufferSizeBytes,omitempty"`
	// The guest driver version of the virtual GPU.
	GuestDriverVersion *string `json:"GuestDriverVersion,omitempty"`
	// Indicates if the virtual GPU is in use.
	InUse    *bool    `json:"InUse,omitempty"`
	Licenses []string `json:"Licenses,omitempty"`
	// The maximum resolution per display heads.
	MaxResolution *string `json:"MaxResolution,omitempty"`
	// The mode of the virtual GPU such as UNUSED, USED_FOR_PASSTHROUGH, USED_FOR_VIRTUAL.
	Mode *string `json:"Mode,omitempty"`
	// The NUMA node of the virtual GPU.
	NumaNode *string `json:"NumaNode,omitempty"`
	// The number of virtual display heads of the virtual GPU.
	NumberOfVirtualDisplayHeads *int64 `json:"NumberOfVirtualDisplayHeads,omitempty"`
	// The SBDF address of the virtual GPU.
	Sbdf *string `json:"Sbdf,omitempty"`
	// The type of the virtual GPU such as PASS_THROUGH_GRAPHICS, PASS_THROUGH_COMPUTE, VIRTUAL.
	Type *string `json:"Type,omitempty"`
	// The vendor name of the virtual GPU.
	VendorName           *string `json:"VendorName,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _HciVirtualGpuConfig HciVirtualGpuConfig

// NewHciVirtualGpuConfig instantiates a new HciVirtualGpuConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHciVirtualGpuConfig(classId string, objectType string) *HciVirtualGpuConfig {
	this := HciVirtualGpuConfig{}
	this.ClassId = classId
	this.ObjectType = objectType
	return &this
}

// NewHciVirtualGpuConfigWithDefaults instantiates a new HciVirtualGpuConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHciVirtualGpuConfigWithDefaults() *HciVirtualGpuConfig {
	this := HciVirtualGpuConfig{}
	var classId string = "hci.VirtualGpuConfig"
	this.ClassId = classId
	var objectType string = "hci.VirtualGpuConfig"
	this.ObjectType = objectType
	return &this
}

// GetClassId returns the ClassId field value
func (o *HciVirtualGpuConfig) GetClassId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ClassId
}

// GetClassIdOk returns a tuple with the ClassId field value
// and a boolean to check if the value has been set.
func (o *HciVirtualGpuConfig) GetClassIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ClassId, true
}

// SetClassId sets field value
func (o *HciVirtualGpuConfig) SetClassId(v string) {
	o.ClassId = v
}

// GetDefaultClassId returns the default value "hci.VirtualGpuConfig" of the ClassId field.
func (o *HciVirtualGpuConfig) GetDefaultClassId() interface{} {
	return "hci.VirtualGpuConfig"
}

// GetObjectType returns the ObjectType field value
func (o *HciVirtualGpuConfig) GetObjectType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ObjectType
}

// GetObjectTypeOk returns a tuple with the ObjectType field value
// and a boolean to check if the value has been set.
func (o *HciVirtualGpuConfig) GetObjectTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ObjectType, true
}

// SetObjectType sets field value
func (o *HciVirtualGpuConfig) SetObjectType(v string) {
	o.ObjectType = v
}

// GetDefaultObjectType returns the default value "hci.VirtualGpuConfig" of the ObjectType field.
func (o *HciVirtualGpuConfig) GetDefaultObjectType() interface{} {
	return "hci.VirtualGpuConfig"
}

// GetAssignable returns the Assignable field value if set, zero value otherwise.
func (o *HciVirtualGpuConfig) GetAssignable() int64 {
	if o == nil || IsNil(o.Assignable) {
		var ret int64
		return ret
	}
	return *o.Assignable
}

// GetAssignableOk returns a tuple with the Assignable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HciVirtualGpuConfig) GetAssignableOk() (*int64, bool) {
	if o == nil || IsNil(o.Assignable) {
		return nil, false
	}
	return o.Assignable, true
}

// HasAssignable returns a boolean if a field has been set.
func (o *HciVirtualGpuConfig) HasAssignable() bool {
	if o != nil && !IsNil(o.Assignable) {
		return true
	}

	return false
}

// SetAssignable gets a reference to the given int64 and assigns it to the Assignable field.
func (o *HciVirtualGpuConfig) SetAssignable(v int64) {
	o.Assignable = &v
}

// GetDeviceId returns the DeviceId field value if set, zero value otherwise.
func (o *HciVirtualGpuConfig) GetDeviceId() int64 {
	if o == nil || IsNil(o.DeviceId) {
		var ret int64
		return ret
	}
	return *o.DeviceId
}

// GetDeviceIdOk returns a tuple with the DeviceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HciVirtualGpuConfig) GetDeviceIdOk() (*int64, bool) {
	if o == nil || IsNil(o.DeviceId) {
		return nil, false
	}
	return o.DeviceId, true
}

// HasDeviceId returns a boolean if a field has been set.
func (o *HciVirtualGpuConfig) HasDeviceId() bool {
	if o != nil && !IsNil(o.DeviceId) {
		return true
	}

	return false
}

// SetDeviceId gets a reference to the given int64 and assigns it to the DeviceId field.
func (o *HciVirtualGpuConfig) SetDeviceId(v int64) {
	o.DeviceId = &v
}

// GetDeviceName returns the DeviceName field value if set, zero value otherwise.
func (o *HciVirtualGpuConfig) GetDeviceName() string {
	if o == nil || IsNil(o.DeviceName) {
		var ret string
		return ret
	}
	return *o.DeviceName
}

// GetDeviceNameOk returns a tuple with the DeviceName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HciVirtualGpuConfig) GetDeviceNameOk() (*string, bool) {
	if o == nil || IsNil(o.DeviceName) {
		return nil, false
	}
	return o.DeviceName, true
}

// HasDeviceName returns a boolean if a field has been set.
func (o *HciVirtualGpuConfig) HasDeviceName() bool {
	if o != nil && !IsNil(o.DeviceName) {
		return true
	}

	return false
}

// SetDeviceName gets a reference to the given string and assigns it to the DeviceName field.
func (o *HciVirtualGpuConfig) SetDeviceName(v string) {
	o.DeviceName = &v
}

// GetFraction returns the Fraction field value if set, zero value otherwise.
func (o *HciVirtualGpuConfig) GetFraction() int64 {
	if o == nil || IsNil(o.Fraction) {
		var ret int64
		return ret
	}
	return *o.Fraction
}

// GetFractionOk returns a tuple with the Fraction field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HciVirtualGpuConfig) GetFractionOk() (*int64, bool) {
	if o == nil || IsNil(o.Fraction) {
		return nil, false
	}
	return o.Fraction, true
}

// HasFraction returns a boolean if a field has been set.
func (o *HciVirtualGpuConfig) HasFraction() bool {
	if o != nil && !IsNil(o.Fraction) {
		return true
	}

	return false
}

// SetFraction gets a reference to the given int64 and assigns it to the Fraction field.
func (o *HciVirtualGpuConfig) SetFraction(v int64) {
	o.Fraction = &v
}

// GetFrameBufferSizeBytes returns the FrameBufferSizeBytes field value if set, zero value otherwise.
func (o *HciVirtualGpuConfig) GetFrameBufferSizeBytes() int64 {
	if o == nil || IsNil(o.FrameBufferSizeBytes) {
		var ret int64
		return ret
	}
	return *o.FrameBufferSizeBytes
}

// GetFrameBufferSizeBytesOk returns a tuple with the FrameBufferSizeBytes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HciVirtualGpuConfig) GetFrameBufferSizeBytesOk() (*int64, bool) {
	if o == nil || IsNil(o.FrameBufferSizeBytes) {
		return nil, false
	}
	return o.FrameBufferSizeBytes, true
}

// HasFrameBufferSizeBytes returns a boolean if a field has been set.
func (o *HciVirtualGpuConfig) HasFrameBufferSizeBytes() bool {
	if o != nil && !IsNil(o.FrameBufferSizeBytes) {
		return true
	}

	return false
}

// SetFrameBufferSizeBytes gets a reference to the given int64 and assigns it to the FrameBufferSizeBytes field.
func (o *HciVirtualGpuConfig) SetFrameBufferSizeBytes(v int64) {
	o.FrameBufferSizeBytes = &v
}

// GetGuestDriverVersion returns the GuestDriverVersion field value if set, zero value otherwise.
func (o *HciVirtualGpuConfig) GetGuestDriverVersion() string {
	if o == nil || IsNil(o.GuestDriverVersion) {
		var ret string
		return ret
	}
	return *o.GuestDriverVersion
}

// GetGuestDriverVersionOk returns a tuple with the GuestDriverVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HciVirtualGpuConfig) GetGuestDriverVersionOk() (*string, bool) {
	if o == nil || IsNil(o.GuestDriverVersion) {
		return nil, false
	}
	return o.GuestDriverVersion, true
}

// HasGuestDriverVersion returns a boolean if a field has been set.
func (o *HciVirtualGpuConfig) HasGuestDriverVersion() bool {
	if o != nil && !IsNil(o.GuestDriverVersion) {
		return true
	}

	return false
}

// SetGuestDriverVersion gets a reference to the given string and assigns it to the GuestDriverVersion field.
func (o *HciVirtualGpuConfig) SetGuestDriverVersion(v string) {
	o.GuestDriverVersion = &v
}

// GetInUse returns the InUse field value if set, zero value otherwise.
func (o *HciVirtualGpuConfig) GetInUse() bool {
	if o == nil || IsNil(o.InUse) {
		var ret bool
		return ret
	}
	return *o.InUse
}

// GetInUseOk returns a tuple with the InUse field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HciVirtualGpuConfig) GetInUseOk() (*bool, bool) {
	if o == nil || IsNil(o.InUse) {
		return nil, false
	}
	return o.InUse, true
}

// HasInUse returns a boolean if a field has been set.
func (o *HciVirtualGpuConfig) HasInUse() bool {
	if o != nil && !IsNil(o.InUse) {
		return true
	}

	return false
}

// SetInUse gets a reference to the given bool and assigns it to the InUse field.
func (o *HciVirtualGpuConfig) SetInUse(v bool) {
	o.InUse = &v
}

// GetLicenses returns the Licenses field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HciVirtualGpuConfig) GetLicenses() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.Licenses
}

// GetLicensesOk returns a tuple with the Licenses field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HciVirtualGpuConfig) GetLicensesOk() ([]string, bool) {
	if o == nil || IsNil(o.Licenses) {
		return nil, false
	}
	return o.Licenses, true
}

// HasLicenses returns a boolean if a field has been set.
func (o *HciVirtualGpuConfig) HasLicenses() bool {
	if o != nil && !IsNil(o.Licenses) {
		return true
	}

	return false
}

// SetLicenses gets a reference to the given []string and assigns it to the Licenses field.
func (o *HciVirtualGpuConfig) SetLicenses(v []string) {
	o.Licenses = v
}

// GetMaxResolution returns the MaxResolution field value if set, zero value otherwise.
func (o *HciVirtualGpuConfig) GetMaxResolution() string {
	if o == nil || IsNil(o.MaxResolution) {
		var ret string
		return ret
	}
	return *o.MaxResolution
}

// GetMaxResolutionOk returns a tuple with the MaxResolution field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HciVirtualGpuConfig) GetMaxResolutionOk() (*string, bool) {
	if o == nil || IsNil(o.MaxResolution) {
		return nil, false
	}
	return o.MaxResolution, true
}

// HasMaxResolution returns a boolean if a field has been set.
func (o *HciVirtualGpuConfig) HasMaxResolution() bool {
	if o != nil && !IsNil(o.MaxResolution) {
		return true
	}

	return false
}

// SetMaxResolution gets a reference to the given string and assigns it to the MaxResolution field.
func (o *HciVirtualGpuConfig) SetMaxResolution(v string) {
	o.MaxResolution = &v
}

// GetMode returns the Mode field value if set, zero value otherwise.
func (o *HciVirtualGpuConfig) GetMode() string {
	if o == nil || IsNil(o.Mode) {
		var ret string
		return ret
	}
	return *o.Mode
}

// GetModeOk returns a tuple with the Mode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HciVirtualGpuConfig) GetModeOk() (*string, bool) {
	if o == nil || IsNil(o.Mode) {
		return nil, false
	}
	return o.Mode, true
}

// HasMode returns a boolean if a field has been set.
func (o *HciVirtualGpuConfig) HasMode() bool {
	if o != nil && !IsNil(o.Mode) {
		return true
	}

	return false
}

// SetMode gets a reference to the given string and assigns it to the Mode field.
func (o *HciVirtualGpuConfig) SetMode(v string) {
	o.Mode = &v
}

// GetNumaNode returns the NumaNode field value if set, zero value otherwise.
func (o *HciVirtualGpuConfig) GetNumaNode() string {
	if o == nil || IsNil(o.NumaNode) {
		var ret string
		return ret
	}
	return *o.NumaNode
}

// GetNumaNodeOk returns a tuple with the NumaNode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HciVirtualGpuConfig) GetNumaNodeOk() (*string, bool) {
	if o == nil || IsNil(o.NumaNode) {
		return nil, false
	}
	return o.NumaNode, true
}

// HasNumaNode returns a boolean if a field has been set.
func (o *HciVirtualGpuConfig) HasNumaNode() bool {
	if o != nil && !IsNil(o.NumaNode) {
		return true
	}

	return false
}

// SetNumaNode gets a reference to the given string and assigns it to the NumaNode field.
func (o *HciVirtualGpuConfig) SetNumaNode(v string) {
	o.NumaNode = &v
}

// GetNumberOfVirtualDisplayHeads returns the NumberOfVirtualDisplayHeads field value if set, zero value otherwise.
func (o *HciVirtualGpuConfig) GetNumberOfVirtualDisplayHeads() int64 {
	if o == nil || IsNil(o.NumberOfVirtualDisplayHeads) {
		var ret int64
		return ret
	}
	return *o.NumberOfVirtualDisplayHeads
}

// GetNumberOfVirtualDisplayHeadsOk returns a tuple with the NumberOfVirtualDisplayHeads field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HciVirtualGpuConfig) GetNumberOfVirtualDisplayHeadsOk() (*int64, bool) {
	if o == nil || IsNil(o.NumberOfVirtualDisplayHeads) {
		return nil, false
	}
	return o.NumberOfVirtualDisplayHeads, true
}

// HasNumberOfVirtualDisplayHeads returns a boolean if a field has been set.
func (o *HciVirtualGpuConfig) HasNumberOfVirtualDisplayHeads() bool {
	if o != nil && !IsNil(o.NumberOfVirtualDisplayHeads) {
		return true
	}

	return false
}

// SetNumberOfVirtualDisplayHeads gets a reference to the given int64 and assigns it to the NumberOfVirtualDisplayHeads field.
func (o *HciVirtualGpuConfig) SetNumberOfVirtualDisplayHeads(v int64) {
	o.NumberOfVirtualDisplayHeads = &v
}

// GetSbdf returns the Sbdf field value if set, zero value otherwise.
func (o *HciVirtualGpuConfig) GetSbdf() string {
	if o == nil || IsNil(o.Sbdf) {
		var ret string
		return ret
	}
	return *o.Sbdf
}

// GetSbdfOk returns a tuple with the Sbdf field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HciVirtualGpuConfig) GetSbdfOk() (*string, bool) {
	if o == nil || IsNil(o.Sbdf) {
		return nil, false
	}
	return o.Sbdf, true
}

// HasSbdf returns a boolean if a field has been set.
func (o *HciVirtualGpuConfig) HasSbdf() bool {
	if o != nil && !IsNil(o.Sbdf) {
		return true
	}

	return false
}

// SetSbdf gets a reference to the given string and assigns it to the Sbdf field.
func (o *HciVirtualGpuConfig) SetSbdf(v string) {
	o.Sbdf = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *HciVirtualGpuConfig) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HciVirtualGpuConfig) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *HciVirtualGpuConfig) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *HciVirtualGpuConfig) SetType(v string) {
	o.Type = &v
}

// GetVendorName returns the VendorName field value if set, zero value otherwise.
func (o *HciVirtualGpuConfig) GetVendorName() string {
	if o == nil || IsNil(o.VendorName) {
		var ret string
		return ret
	}
	return *o.VendorName
}

// GetVendorNameOk returns a tuple with the VendorName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HciVirtualGpuConfig) GetVendorNameOk() (*string, bool) {
	if o == nil || IsNil(o.VendorName) {
		return nil, false
	}
	return o.VendorName, true
}

// HasVendorName returns a boolean if a field has been set.
func (o *HciVirtualGpuConfig) HasVendorName() bool {
	if o != nil && !IsNil(o.VendorName) {
		return true
	}

	return false
}

// SetVendorName gets a reference to the given string and assigns it to the VendorName field.
func (o *HciVirtualGpuConfig) SetVendorName(v string) {
	o.VendorName = &v
}

func (o HciVirtualGpuConfig) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o HciVirtualGpuConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	serializedMoBaseComplexType, errMoBaseComplexType := json.Marshal(o.MoBaseComplexType)
	if errMoBaseComplexType != nil {
		return map[string]interface{}{}, errMoBaseComplexType
	}
	errMoBaseComplexType = json.Unmarshal([]byte(serializedMoBaseComplexType), &toSerialize)
	if errMoBaseComplexType != nil {
		return map[string]interface{}{}, errMoBaseComplexType
	}
	if _, exists := toSerialize["ClassId"]; !exists {
		toSerialize["ClassId"] = o.GetDefaultClassId()
	}
	toSerialize["ClassId"] = o.ClassId
	if _, exists := toSerialize["ObjectType"]; !exists {
		toSerialize["ObjectType"] = o.GetDefaultObjectType()
	}
	toSerialize["ObjectType"] = o.ObjectType
	if !IsNil(o.Assignable) {
		toSerialize["Assignable"] = o.Assignable
	}
	if !IsNil(o.DeviceId) {
		toSerialize["DeviceId"] = o.DeviceId
	}
	if !IsNil(o.DeviceName) {
		toSerialize["DeviceName"] = o.DeviceName
	}
	if !IsNil(o.Fraction) {
		toSerialize["Fraction"] = o.Fraction
	}
	if !IsNil(o.FrameBufferSizeBytes) {
		toSerialize["FrameBufferSizeBytes"] = o.FrameBufferSizeBytes
	}
	if !IsNil(o.GuestDriverVersion) {
		toSerialize["GuestDriverVersion"] = o.GuestDriverVersion
	}
	if !IsNil(o.InUse) {
		toSerialize["InUse"] = o.InUse
	}
	if o.Licenses != nil {
		toSerialize["Licenses"] = o.Licenses
	}
	if !IsNil(o.MaxResolution) {
		toSerialize["MaxResolution"] = o.MaxResolution
	}
	if !IsNil(o.Mode) {
		toSerialize["Mode"] = o.Mode
	}
	if !IsNil(o.NumaNode) {
		toSerialize["NumaNode"] = o.NumaNode
	}
	if !IsNil(o.NumberOfVirtualDisplayHeads) {
		toSerialize["NumberOfVirtualDisplayHeads"] = o.NumberOfVirtualDisplayHeads
	}
	if !IsNil(o.Sbdf) {
		toSerialize["Sbdf"] = o.Sbdf
	}
	if !IsNil(o.Type) {
		toSerialize["Type"] = o.Type
	}
	if !IsNil(o.VendorName) {
		toSerialize["VendorName"] = o.VendorName
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *HciVirtualGpuConfig) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"ClassId",
		"ObjectType",
	}

	// defaultValueFuncMap captures the default values for required properties.
	// These values are used when required properties are missing from the payload.
	defaultValueFuncMap := map[string]func() interface{}{
		"ClassId":    o.GetDefaultClassId,
		"ObjectType": o.GetDefaultObjectType,
	}
	var defaultValueApplied bool
	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			if _, ok := defaultValueFuncMap[requiredProperty]; ok {
				allProperties[requiredProperty] = defaultValueFuncMap[requiredProperty]()
				defaultValueApplied = true
			}
		}
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	if defaultValueApplied {
		data, err = json.Marshal(allProperties)
		if err != nil {
			return err
		}
	}
	type HciVirtualGpuConfigWithoutEmbeddedStruct struct {
		// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.
		ClassId string `json:"ClassId"`
		// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
		ObjectType string `json:"ObjectType"`
		// Indicates if the virtual GPU is assignable.
		Assignable *int64 `json:"Assignable,omitempty"`
		// The device id of the virtual GPU.
		DeviceId *int64 `json:"DeviceId,omitempty"`
		// The name of the virtual GPU.
		DeviceName *string `json:"DeviceName,omitempty"`
		// The fraction of the virtual GPU.
		Fraction *int64 `json:"Fraction,omitempty"`
		// The frame buffer size of the virtual GPU.
		FrameBufferSizeBytes *int64 `json:"FrameBufferSizeBytes,omitempty"`
		// The guest driver version of the virtual GPU.
		GuestDriverVersion *string `json:"GuestDriverVersion,omitempty"`
		// Indicates if the virtual GPU is in use.
		InUse    *bool    `json:"InUse,omitempty"`
		Licenses []string `json:"Licenses,omitempty"`
		// The maximum resolution per display heads.
		MaxResolution *string `json:"MaxResolution,omitempty"`
		// The mode of the virtual GPU such as UNUSED, USED_FOR_PASSTHROUGH, USED_FOR_VIRTUAL.
		Mode *string `json:"Mode,omitempty"`
		// The NUMA node of the virtual GPU.
		NumaNode *string `json:"NumaNode,omitempty"`
		// The number of virtual display heads of the virtual GPU.
		NumberOfVirtualDisplayHeads *int64 `json:"NumberOfVirtualDisplayHeads,omitempty"`
		// The SBDF address of the virtual GPU.
		Sbdf *string `json:"Sbdf,omitempty"`
		// The type of the virtual GPU such as PASS_THROUGH_GRAPHICS, PASS_THROUGH_COMPUTE, VIRTUAL.
		Type *string `json:"Type,omitempty"`
		// The vendor name of the virtual GPU.
		VendorName *string `json:"VendorName,omitempty"`
	}

	varHciVirtualGpuConfigWithoutEmbeddedStruct := HciVirtualGpuConfigWithoutEmbeddedStruct{}

	err = json.Unmarshal(data, &varHciVirtualGpuConfigWithoutEmbeddedStruct)
	if err == nil {
		varHciVirtualGpuConfig := _HciVirtualGpuConfig{}
		varHciVirtualGpuConfig.ClassId = varHciVirtualGpuConfigWithoutEmbeddedStruct.ClassId
		varHciVirtualGpuConfig.ObjectType = varHciVirtualGpuConfigWithoutEmbeddedStruct.ObjectType
		varHciVirtualGpuConfig.Assignable = varHciVirtualGpuConfigWithoutEmbeddedStruct.Assignable
		varHciVirtualGpuConfig.DeviceId = varHciVirtualGpuConfigWithoutEmbeddedStruct.DeviceId
		varHciVirtualGpuConfig.DeviceName = varHciVirtualGpuConfigWithoutEmbeddedStruct.DeviceName
		varHciVirtualGpuConfig.Fraction = varHciVirtualGpuConfigWithoutEmbeddedStruct.Fraction
		varHciVirtualGpuConfig.FrameBufferSizeBytes = varHciVirtualGpuConfigWithoutEmbeddedStruct.FrameBufferSizeBytes
		varHciVirtualGpuConfig.GuestDriverVersion = varHciVirtualGpuConfigWithoutEmbeddedStruct.GuestDriverVersion
		varHciVirtualGpuConfig.InUse = varHciVirtualGpuConfigWithoutEmbeddedStruct.InUse
		varHciVirtualGpuConfig.Licenses = varHciVirtualGpuConfigWithoutEmbeddedStruct.Licenses
		varHciVirtualGpuConfig.MaxResolution = varHciVirtualGpuConfigWithoutEmbeddedStruct.MaxResolution
		varHciVirtualGpuConfig.Mode = varHciVirtualGpuConfigWithoutEmbeddedStruct.Mode
		varHciVirtualGpuConfig.NumaNode = varHciVirtualGpuConfigWithoutEmbeddedStruct.NumaNode
		varHciVirtualGpuConfig.NumberOfVirtualDisplayHeads = varHciVirtualGpuConfigWithoutEmbeddedStruct.NumberOfVirtualDisplayHeads
		varHciVirtualGpuConfig.Sbdf = varHciVirtualGpuConfigWithoutEmbeddedStruct.Sbdf
		varHciVirtualGpuConfig.Type = varHciVirtualGpuConfigWithoutEmbeddedStruct.Type
		varHciVirtualGpuConfig.VendorName = varHciVirtualGpuConfigWithoutEmbeddedStruct.VendorName
		*o = HciVirtualGpuConfig(varHciVirtualGpuConfig)
	} else {
		return err
	}

	varHciVirtualGpuConfig := _HciVirtualGpuConfig{}

	err = json.Unmarshal(data, &varHciVirtualGpuConfig)
	if err == nil {
		o.MoBaseComplexType = varHciVirtualGpuConfig.MoBaseComplexType
	} else {
		return err
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "ClassId")
		delete(additionalProperties, "ObjectType")
		delete(additionalProperties, "Assignable")
		delete(additionalProperties, "DeviceId")
		delete(additionalProperties, "DeviceName")
		delete(additionalProperties, "Fraction")
		delete(additionalProperties, "FrameBufferSizeBytes")
		delete(additionalProperties, "GuestDriverVersion")
		delete(additionalProperties, "InUse")
		delete(additionalProperties, "Licenses")
		delete(additionalProperties, "MaxResolution")
		delete(additionalProperties, "Mode")
		delete(additionalProperties, "NumaNode")
		delete(additionalProperties, "NumberOfVirtualDisplayHeads")
		delete(additionalProperties, "Sbdf")
		delete(additionalProperties, "Type")
		delete(additionalProperties, "VendorName")

		// remove fields from embedded structs
		reflectMoBaseComplexType := reflect.ValueOf(o.MoBaseComplexType)
		for i := 0; i < reflectMoBaseComplexType.Type().NumField(); i++ {
			t := reflectMoBaseComplexType.Type().Field(i)

			if jsonTag := t.Tag.Get("json"); jsonTag != "" {
				fieldName := ""
				if commaIdx := strings.Index(jsonTag, ","); commaIdx > 0 {
					fieldName = jsonTag[:commaIdx]
				} else {
					fieldName = jsonTag
				}
				if fieldName != "AdditionalProperties" {
					delete(additionalProperties, fieldName)
				}
			}
		}

		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableHciVirtualGpuConfig struct {
	value *HciVirtualGpuConfig
	isSet bool
}

func (v NullableHciVirtualGpuConfig) Get() *HciVirtualGpuConfig {
	return v.value
}

func (v *NullableHciVirtualGpuConfig) Set(val *HciVirtualGpuConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableHciVirtualGpuConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableHciVirtualGpuConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHciVirtualGpuConfig(val *HciVirtualGpuConfig) *NullableHciVirtualGpuConfig {
	return &NullableHciVirtualGpuConfig{value: val, isSet: true}
}

func (v NullableHciVirtualGpuConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHciVirtualGpuConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
