/*
Cisco Intersight

Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations. The Intersight OpenAPI document defines the complete set of properties that are returned in the HTTP response. From that perspective, a client can expect that no additional properties are returned, unless these properties are explicitly defined in the OpenAPI document. However, when a client uses an older version of the Intersight OpenAPI document, the server may send additional properties because the software is more recent than the client. In that case, the client may receive properties that it does not know about. Some generated SDKs perform a strict validation of the HTTP response body against the OpenAPI document.

API version: 1.0.11-2025091920
Contact: intersight@cisco.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package intersight

import (
	"encoding/json"
	"fmt"
	"reflect"
	"strings"
	"time"
)

// checks if the StoragePureDirectory type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &StoragePureDirectory{}

// StoragePureDirectory Important file system directories should be set up as managed directories. Managed directories can have policies attached to them. Managed directories differ from standard directories in that they provide space reporting and metrics.
type StoragePureDirectory struct {
	MoBaseMo
	// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.
	ClassId string `json:"ClassId"`
	// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
	ObjectType string `json:"ObjectType"`
	// The managed directory creation time, measured in milliseconds since the UNIX epoch.
	CreatedTime *time.Time `json:"CreatedTime,omitempty"`
	// The ratio of mapped sectors within a volume versus the amount of physical space the data occupies after data compression and deduplication. The data reduction ratio does not include thin provisioning savings. For example, a data reduction ratio of 5:1 means that for every 5 MB the host writes to the array, 1 MB is stored on the array's flash modules.
	DataReduction *int64 `json:"DataReduction,omitempty"`
	// A boolean value, if set to true, lists only destroyed objects that are in the eradication pending state. If set to false, lists only objects that are not destroyed.
	Destroyed *bool `json:"Destroyed,omitempty"`
	// The managed directory name without the file system name prefix.
	DirectoryName    *string  `json:"DirectoryName,omitempty"`
	ExportPolicyList []string `json:"ExportPolicyList,omitempty"`
	// Name of file syetem associated with the directory.
	FileSystemName *string `json:"FileSystemName,omitempty"`
	// Absolute path of the managed directory in the file system.
	MemberName *string `json:"MemberName,omitempty"`
	// Absolute path of the managed directory in the file system.
	MemberResourceType *string `json:"MemberResourceType,omitempty"`
	// A user-specified name. The name must be locally unique and can be changed.
	Name *string `json:"Name,omitempty"`
	// Absolute path of the managed directory in the file system.
	Path *string `json:"Path,omitempty"`
	// Absolute path of the managed directory in the file system.
	PolicyResourceType *string  `json:"PolicyResourceType,omitempty"`
	QuotaPolicyNames   []string `json:"QuotaPolicyNames,omitempty"`
	// The physical space occupied by data unique to one or more snapshots. Measured in bytes.
	Snapshots *int64 `json:"Snapshots,omitempty"`
	// The percentage of volume sectors that do not contain host-written data because the hosts have not written data to them or the sectors have been explicitly trimmed.
	ThinProvisioning *int64 `json:"ThinProvisioning,omitempty"`
	// The total physical space occupied by system, shared space, volume, and snapshot data. Measured in bytes.
	TotalPhysical *int64 `json:"TotalPhysical,omitempty"`
	// The ratio of provisioned sectors within a volume versus the amount of physical space the data occupies after reduction via data compression and deduplication and with thin provisioning savings. Total reduction is data reduction with thin provisioning savings. For example, a total reduction ratio of 10:1 means that for every 10 MB of provisioned space, 1 MB is stored on the array's flash modules.
	TotalReduction *int64 `json:"TotalReduction,omitempty"`
	// The total space contributed by customer data, measured in bytes.
	TotalUsed *int64 `json:"TotalUsed,omitempty"`
	// The unique physical space occupied by customer data. Unique physical space does not include shared space, snapshots, and internal array metadata. Measured in bytes. On Evergreen//One arrays, this is the effective space contributed by unique customer data, measured in bytes. Unique data does not include shared space, snapshots, and internal array metadata.
	Unique *int64                               `json:"Unique,omitempty"`
	Array  NullableStoragePureArrayRelationship `json:"Array,omitempty"`
	// An array of relationships to storagePureDirectoryExport resources.
	ExportPolicies []StoragePureDirectoryExportRelationship   `json:"ExportPolicies,omitempty"`
	FileSystems    NullableStoragePureFileSystemsRelationship `json:"FileSystems,omitempty"`
	// An array of relationships to storagePureDirectoryQuota resources.
	QuotaPolicies        []StoragePureDirectoryQuotaRelationship     `json:"QuotaPolicies,omitempty"`
	RegisteredDevice     NullableAssetDeviceRegistrationRelationship `json:"RegisteredDevice,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _StoragePureDirectory StoragePureDirectory

// NewStoragePureDirectory instantiates a new StoragePureDirectory object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStoragePureDirectory(classId string, objectType string) *StoragePureDirectory {
	this := StoragePureDirectory{}
	this.ClassId = classId
	this.ObjectType = objectType
	return &this
}

// NewStoragePureDirectoryWithDefaults instantiates a new StoragePureDirectory object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStoragePureDirectoryWithDefaults() *StoragePureDirectory {
	this := StoragePureDirectory{}
	var classId string = "storage.PureDirectory"
	this.ClassId = classId
	var objectType string = "storage.PureDirectory"
	this.ObjectType = objectType
	return &this
}

// GetClassId returns the ClassId field value
func (o *StoragePureDirectory) GetClassId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ClassId
}

// GetClassIdOk returns a tuple with the ClassId field value
// and a boolean to check if the value has been set.
func (o *StoragePureDirectory) GetClassIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ClassId, true
}

// SetClassId sets field value
func (o *StoragePureDirectory) SetClassId(v string) {
	o.ClassId = v
}

// GetDefaultClassId returns the default value "storage.PureDirectory" of the ClassId field.
func (o *StoragePureDirectory) GetDefaultClassId() interface{} {
	return "storage.PureDirectory"
}

// GetObjectType returns the ObjectType field value
func (o *StoragePureDirectory) GetObjectType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ObjectType
}

// GetObjectTypeOk returns a tuple with the ObjectType field value
// and a boolean to check if the value has been set.
func (o *StoragePureDirectory) GetObjectTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ObjectType, true
}

// SetObjectType sets field value
func (o *StoragePureDirectory) SetObjectType(v string) {
	o.ObjectType = v
}

// GetDefaultObjectType returns the default value "storage.PureDirectory" of the ObjectType field.
func (o *StoragePureDirectory) GetDefaultObjectType() interface{} {
	return "storage.PureDirectory"
}

// GetCreatedTime returns the CreatedTime field value if set, zero value otherwise.
func (o *StoragePureDirectory) GetCreatedTime() time.Time {
	if o == nil || IsNil(o.CreatedTime) {
		var ret time.Time
		return ret
	}
	return *o.CreatedTime
}

// GetCreatedTimeOk returns a tuple with the CreatedTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StoragePureDirectory) GetCreatedTimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.CreatedTime) {
		return nil, false
	}
	return o.CreatedTime, true
}

// HasCreatedTime returns a boolean if a field has been set.
func (o *StoragePureDirectory) HasCreatedTime() bool {
	if o != nil && !IsNil(o.CreatedTime) {
		return true
	}

	return false
}

// SetCreatedTime gets a reference to the given time.Time and assigns it to the CreatedTime field.
func (o *StoragePureDirectory) SetCreatedTime(v time.Time) {
	o.CreatedTime = &v
}

// GetDataReduction returns the DataReduction field value if set, zero value otherwise.
func (o *StoragePureDirectory) GetDataReduction() int64 {
	if o == nil || IsNil(o.DataReduction) {
		var ret int64
		return ret
	}
	return *o.DataReduction
}

// GetDataReductionOk returns a tuple with the DataReduction field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StoragePureDirectory) GetDataReductionOk() (*int64, bool) {
	if o == nil || IsNil(o.DataReduction) {
		return nil, false
	}
	return o.DataReduction, true
}

// HasDataReduction returns a boolean if a field has been set.
func (o *StoragePureDirectory) HasDataReduction() bool {
	if o != nil && !IsNil(o.DataReduction) {
		return true
	}

	return false
}

// SetDataReduction gets a reference to the given int64 and assigns it to the DataReduction field.
func (o *StoragePureDirectory) SetDataReduction(v int64) {
	o.DataReduction = &v
}

// GetDestroyed returns the Destroyed field value if set, zero value otherwise.
func (o *StoragePureDirectory) GetDestroyed() bool {
	if o == nil || IsNil(o.Destroyed) {
		var ret bool
		return ret
	}
	return *o.Destroyed
}

// GetDestroyedOk returns a tuple with the Destroyed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StoragePureDirectory) GetDestroyedOk() (*bool, bool) {
	if o == nil || IsNil(o.Destroyed) {
		return nil, false
	}
	return o.Destroyed, true
}

// HasDestroyed returns a boolean if a field has been set.
func (o *StoragePureDirectory) HasDestroyed() bool {
	if o != nil && !IsNil(o.Destroyed) {
		return true
	}

	return false
}

// SetDestroyed gets a reference to the given bool and assigns it to the Destroyed field.
func (o *StoragePureDirectory) SetDestroyed(v bool) {
	o.Destroyed = &v
}

// GetDirectoryName returns the DirectoryName field value if set, zero value otherwise.
func (o *StoragePureDirectory) GetDirectoryName() string {
	if o == nil || IsNil(o.DirectoryName) {
		var ret string
		return ret
	}
	return *o.DirectoryName
}

// GetDirectoryNameOk returns a tuple with the DirectoryName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StoragePureDirectory) GetDirectoryNameOk() (*string, bool) {
	if o == nil || IsNil(o.DirectoryName) {
		return nil, false
	}
	return o.DirectoryName, true
}

// HasDirectoryName returns a boolean if a field has been set.
func (o *StoragePureDirectory) HasDirectoryName() bool {
	if o != nil && !IsNil(o.DirectoryName) {
		return true
	}

	return false
}

// SetDirectoryName gets a reference to the given string and assigns it to the DirectoryName field.
func (o *StoragePureDirectory) SetDirectoryName(v string) {
	o.DirectoryName = &v
}

// GetExportPolicyList returns the ExportPolicyList field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *StoragePureDirectory) GetExportPolicyList() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.ExportPolicyList
}

// GetExportPolicyListOk returns a tuple with the ExportPolicyList field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *StoragePureDirectory) GetExportPolicyListOk() ([]string, bool) {
	if o == nil || IsNil(o.ExportPolicyList) {
		return nil, false
	}
	return o.ExportPolicyList, true
}

// HasExportPolicyList returns a boolean if a field has been set.
func (o *StoragePureDirectory) HasExportPolicyList() bool {
	if o != nil && !IsNil(o.ExportPolicyList) {
		return true
	}

	return false
}

// SetExportPolicyList gets a reference to the given []string and assigns it to the ExportPolicyList field.
func (o *StoragePureDirectory) SetExportPolicyList(v []string) {
	o.ExportPolicyList = v
}

// GetFileSystemName returns the FileSystemName field value if set, zero value otherwise.
func (o *StoragePureDirectory) GetFileSystemName() string {
	if o == nil || IsNil(o.FileSystemName) {
		var ret string
		return ret
	}
	return *o.FileSystemName
}

// GetFileSystemNameOk returns a tuple with the FileSystemName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StoragePureDirectory) GetFileSystemNameOk() (*string, bool) {
	if o == nil || IsNil(o.FileSystemName) {
		return nil, false
	}
	return o.FileSystemName, true
}

// HasFileSystemName returns a boolean if a field has been set.
func (o *StoragePureDirectory) HasFileSystemName() bool {
	if o != nil && !IsNil(o.FileSystemName) {
		return true
	}

	return false
}

// SetFileSystemName gets a reference to the given string and assigns it to the FileSystemName field.
func (o *StoragePureDirectory) SetFileSystemName(v string) {
	o.FileSystemName = &v
}

// GetMemberName returns the MemberName field value if set, zero value otherwise.
func (o *StoragePureDirectory) GetMemberName() string {
	if o == nil || IsNil(o.MemberName) {
		var ret string
		return ret
	}
	return *o.MemberName
}

// GetMemberNameOk returns a tuple with the MemberName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StoragePureDirectory) GetMemberNameOk() (*string, bool) {
	if o == nil || IsNil(o.MemberName) {
		return nil, false
	}
	return o.MemberName, true
}

// HasMemberName returns a boolean if a field has been set.
func (o *StoragePureDirectory) HasMemberName() bool {
	if o != nil && !IsNil(o.MemberName) {
		return true
	}

	return false
}

// SetMemberName gets a reference to the given string and assigns it to the MemberName field.
func (o *StoragePureDirectory) SetMemberName(v string) {
	o.MemberName = &v
}

// GetMemberResourceType returns the MemberResourceType field value if set, zero value otherwise.
func (o *StoragePureDirectory) GetMemberResourceType() string {
	if o == nil || IsNil(o.MemberResourceType) {
		var ret string
		return ret
	}
	return *o.MemberResourceType
}

// GetMemberResourceTypeOk returns a tuple with the MemberResourceType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StoragePureDirectory) GetMemberResourceTypeOk() (*string, bool) {
	if o == nil || IsNil(o.MemberResourceType) {
		return nil, false
	}
	return o.MemberResourceType, true
}

// HasMemberResourceType returns a boolean if a field has been set.
func (o *StoragePureDirectory) HasMemberResourceType() bool {
	if o != nil && !IsNil(o.MemberResourceType) {
		return true
	}

	return false
}

// SetMemberResourceType gets a reference to the given string and assigns it to the MemberResourceType field.
func (o *StoragePureDirectory) SetMemberResourceType(v string) {
	o.MemberResourceType = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *StoragePureDirectory) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StoragePureDirectory) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *StoragePureDirectory) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *StoragePureDirectory) SetName(v string) {
	o.Name = &v
}

// GetPath returns the Path field value if set, zero value otherwise.
func (o *StoragePureDirectory) GetPath() string {
	if o == nil || IsNil(o.Path) {
		var ret string
		return ret
	}
	return *o.Path
}

// GetPathOk returns a tuple with the Path field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StoragePureDirectory) GetPathOk() (*string, bool) {
	if o == nil || IsNil(o.Path) {
		return nil, false
	}
	return o.Path, true
}

// HasPath returns a boolean if a field has been set.
func (o *StoragePureDirectory) HasPath() bool {
	if o != nil && !IsNil(o.Path) {
		return true
	}

	return false
}

// SetPath gets a reference to the given string and assigns it to the Path field.
func (o *StoragePureDirectory) SetPath(v string) {
	o.Path = &v
}

// GetPolicyResourceType returns the PolicyResourceType field value if set, zero value otherwise.
func (o *StoragePureDirectory) GetPolicyResourceType() string {
	if o == nil || IsNil(o.PolicyResourceType) {
		var ret string
		return ret
	}
	return *o.PolicyResourceType
}

// GetPolicyResourceTypeOk returns a tuple with the PolicyResourceType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StoragePureDirectory) GetPolicyResourceTypeOk() (*string, bool) {
	if o == nil || IsNil(o.PolicyResourceType) {
		return nil, false
	}
	return o.PolicyResourceType, true
}

// HasPolicyResourceType returns a boolean if a field has been set.
func (o *StoragePureDirectory) HasPolicyResourceType() bool {
	if o != nil && !IsNil(o.PolicyResourceType) {
		return true
	}

	return false
}

// SetPolicyResourceType gets a reference to the given string and assigns it to the PolicyResourceType field.
func (o *StoragePureDirectory) SetPolicyResourceType(v string) {
	o.PolicyResourceType = &v
}

// GetQuotaPolicyNames returns the QuotaPolicyNames field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *StoragePureDirectory) GetQuotaPolicyNames() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.QuotaPolicyNames
}

// GetQuotaPolicyNamesOk returns a tuple with the QuotaPolicyNames field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *StoragePureDirectory) GetQuotaPolicyNamesOk() ([]string, bool) {
	if o == nil || IsNil(o.QuotaPolicyNames) {
		return nil, false
	}
	return o.QuotaPolicyNames, true
}

// HasQuotaPolicyNames returns a boolean if a field has been set.
func (o *StoragePureDirectory) HasQuotaPolicyNames() bool {
	if o != nil && !IsNil(o.QuotaPolicyNames) {
		return true
	}

	return false
}

// SetQuotaPolicyNames gets a reference to the given []string and assigns it to the QuotaPolicyNames field.
func (o *StoragePureDirectory) SetQuotaPolicyNames(v []string) {
	o.QuotaPolicyNames = v
}

// GetSnapshots returns the Snapshots field value if set, zero value otherwise.
func (o *StoragePureDirectory) GetSnapshots() int64 {
	if o == nil || IsNil(o.Snapshots) {
		var ret int64
		return ret
	}
	return *o.Snapshots
}

// GetSnapshotsOk returns a tuple with the Snapshots field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StoragePureDirectory) GetSnapshotsOk() (*int64, bool) {
	if o == nil || IsNil(o.Snapshots) {
		return nil, false
	}
	return o.Snapshots, true
}

// HasSnapshots returns a boolean if a field has been set.
func (o *StoragePureDirectory) HasSnapshots() bool {
	if o != nil && !IsNil(o.Snapshots) {
		return true
	}

	return false
}

// SetSnapshots gets a reference to the given int64 and assigns it to the Snapshots field.
func (o *StoragePureDirectory) SetSnapshots(v int64) {
	o.Snapshots = &v
}

// GetThinProvisioning returns the ThinProvisioning field value if set, zero value otherwise.
func (o *StoragePureDirectory) GetThinProvisioning() int64 {
	if o == nil || IsNil(o.ThinProvisioning) {
		var ret int64
		return ret
	}
	return *o.ThinProvisioning
}

// GetThinProvisioningOk returns a tuple with the ThinProvisioning field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StoragePureDirectory) GetThinProvisioningOk() (*int64, bool) {
	if o == nil || IsNil(o.ThinProvisioning) {
		return nil, false
	}
	return o.ThinProvisioning, true
}

// HasThinProvisioning returns a boolean if a field has been set.
func (o *StoragePureDirectory) HasThinProvisioning() bool {
	if o != nil && !IsNil(o.ThinProvisioning) {
		return true
	}

	return false
}

// SetThinProvisioning gets a reference to the given int64 and assigns it to the ThinProvisioning field.
func (o *StoragePureDirectory) SetThinProvisioning(v int64) {
	o.ThinProvisioning = &v
}

// GetTotalPhysical returns the TotalPhysical field value if set, zero value otherwise.
func (o *StoragePureDirectory) GetTotalPhysical() int64 {
	if o == nil || IsNil(o.TotalPhysical) {
		var ret int64
		return ret
	}
	return *o.TotalPhysical
}

// GetTotalPhysicalOk returns a tuple with the TotalPhysical field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StoragePureDirectory) GetTotalPhysicalOk() (*int64, bool) {
	if o == nil || IsNil(o.TotalPhysical) {
		return nil, false
	}
	return o.TotalPhysical, true
}

// HasTotalPhysical returns a boolean if a field has been set.
func (o *StoragePureDirectory) HasTotalPhysical() bool {
	if o != nil && !IsNil(o.TotalPhysical) {
		return true
	}

	return false
}

// SetTotalPhysical gets a reference to the given int64 and assigns it to the TotalPhysical field.
func (o *StoragePureDirectory) SetTotalPhysical(v int64) {
	o.TotalPhysical = &v
}

// GetTotalReduction returns the TotalReduction field value if set, zero value otherwise.
func (o *StoragePureDirectory) GetTotalReduction() int64 {
	if o == nil || IsNil(o.TotalReduction) {
		var ret int64
		return ret
	}
	return *o.TotalReduction
}

// GetTotalReductionOk returns a tuple with the TotalReduction field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StoragePureDirectory) GetTotalReductionOk() (*int64, bool) {
	if o == nil || IsNil(o.TotalReduction) {
		return nil, false
	}
	return o.TotalReduction, true
}

// HasTotalReduction returns a boolean if a field has been set.
func (o *StoragePureDirectory) HasTotalReduction() bool {
	if o != nil && !IsNil(o.TotalReduction) {
		return true
	}

	return false
}

// SetTotalReduction gets a reference to the given int64 and assigns it to the TotalReduction field.
func (o *StoragePureDirectory) SetTotalReduction(v int64) {
	o.TotalReduction = &v
}

// GetTotalUsed returns the TotalUsed field value if set, zero value otherwise.
func (o *StoragePureDirectory) GetTotalUsed() int64 {
	if o == nil || IsNil(o.TotalUsed) {
		var ret int64
		return ret
	}
	return *o.TotalUsed
}

// GetTotalUsedOk returns a tuple with the TotalUsed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StoragePureDirectory) GetTotalUsedOk() (*int64, bool) {
	if o == nil || IsNil(o.TotalUsed) {
		return nil, false
	}
	return o.TotalUsed, true
}

// HasTotalUsed returns a boolean if a field has been set.
func (o *StoragePureDirectory) HasTotalUsed() bool {
	if o != nil && !IsNil(o.TotalUsed) {
		return true
	}

	return false
}

// SetTotalUsed gets a reference to the given int64 and assigns it to the TotalUsed field.
func (o *StoragePureDirectory) SetTotalUsed(v int64) {
	o.TotalUsed = &v
}

// GetUnique returns the Unique field value if set, zero value otherwise.
func (o *StoragePureDirectory) GetUnique() int64 {
	if o == nil || IsNil(o.Unique) {
		var ret int64
		return ret
	}
	return *o.Unique
}

// GetUniqueOk returns a tuple with the Unique field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StoragePureDirectory) GetUniqueOk() (*int64, bool) {
	if o == nil || IsNil(o.Unique) {
		return nil, false
	}
	return o.Unique, true
}

// HasUnique returns a boolean if a field has been set.
func (o *StoragePureDirectory) HasUnique() bool {
	if o != nil && !IsNil(o.Unique) {
		return true
	}

	return false
}

// SetUnique gets a reference to the given int64 and assigns it to the Unique field.
func (o *StoragePureDirectory) SetUnique(v int64) {
	o.Unique = &v
}

// GetArray returns the Array field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *StoragePureDirectory) GetArray() StoragePureArrayRelationship {
	if o == nil || IsNil(o.Array.Get()) {
		var ret StoragePureArrayRelationship
		return ret
	}
	return *o.Array.Get()
}

// GetArrayOk returns a tuple with the Array field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *StoragePureDirectory) GetArrayOk() (*StoragePureArrayRelationship, bool) {
	if o == nil {
		return nil, false
	}
	return o.Array.Get(), o.Array.IsSet()
}

// HasArray returns a boolean if a field has been set.
func (o *StoragePureDirectory) HasArray() bool {
	if o != nil && o.Array.IsSet() {
		return true
	}

	return false
}

// SetArray gets a reference to the given NullableStoragePureArrayRelationship and assigns it to the Array field.
func (o *StoragePureDirectory) SetArray(v StoragePureArrayRelationship) {
	o.Array.Set(&v)
}

// SetArrayNil sets the value for Array to be an explicit nil
func (o *StoragePureDirectory) SetArrayNil() {
	o.Array.Set(nil)
}

// UnsetArray ensures that no value is present for Array, not even an explicit nil
func (o *StoragePureDirectory) UnsetArray() {
	o.Array.Unset()
}

// GetExportPolicies returns the ExportPolicies field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *StoragePureDirectory) GetExportPolicies() []StoragePureDirectoryExportRelationship {
	if o == nil {
		var ret []StoragePureDirectoryExportRelationship
		return ret
	}
	return o.ExportPolicies
}

// GetExportPoliciesOk returns a tuple with the ExportPolicies field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *StoragePureDirectory) GetExportPoliciesOk() ([]StoragePureDirectoryExportRelationship, bool) {
	if o == nil || IsNil(o.ExportPolicies) {
		return nil, false
	}
	return o.ExportPolicies, true
}

// HasExportPolicies returns a boolean if a field has been set.
func (o *StoragePureDirectory) HasExportPolicies() bool {
	if o != nil && !IsNil(o.ExportPolicies) {
		return true
	}

	return false
}

// SetExportPolicies gets a reference to the given []StoragePureDirectoryExportRelationship and assigns it to the ExportPolicies field.
func (o *StoragePureDirectory) SetExportPolicies(v []StoragePureDirectoryExportRelationship) {
	o.ExportPolicies = v
}

// GetFileSystems returns the FileSystems field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *StoragePureDirectory) GetFileSystems() StoragePureFileSystemsRelationship {
	if o == nil || IsNil(o.FileSystems.Get()) {
		var ret StoragePureFileSystemsRelationship
		return ret
	}
	return *o.FileSystems.Get()
}

// GetFileSystemsOk returns a tuple with the FileSystems field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *StoragePureDirectory) GetFileSystemsOk() (*StoragePureFileSystemsRelationship, bool) {
	if o == nil {
		return nil, false
	}
	return o.FileSystems.Get(), o.FileSystems.IsSet()
}

// HasFileSystems returns a boolean if a field has been set.
func (o *StoragePureDirectory) HasFileSystems() bool {
	if o != nil && o.FileSystems.IsSet() {
		return true
	}

	return false
}

// SetFileSystems gets a reference to the given NullableStoragePureFileSystemsRelationship and assigns it to the FileSystems field.
func (o *StoragePureDirectory) SetFileSystems(v StoragePureFileSystemsRelationship) {
	o.FileSystems.Set(&v)
}

// SetFileSystemsNil sets the value for FileSystems to be an explicit nil
func (o *StoragePureDirectory) SetFileSystemsNil() {
	o.FileSystems.Set(nil)
}

// UnsetFileSystems ensures that no value is present for FileSystems, not even an explicit nil
func (o *StoragePureDirectory) UnsetFileSystems() {
	o.FileSystems.Unset()
}

// GetQuotaPolicies returns the QuotaPolicies field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *StoragePureDirectory) GetQuotaPolicies() []StoragePureDirectoryQuotaRelationship {
	if o == nil {
		var ret []StoragePureDirectoryQuotaRelationship
		return ret
	}
	return o.QuotaPolicies
}

// GetQuotaPoliciesOk returns a tuple with the QuotaPolicies field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *StoragePureDirectory) GetQuotaPoliciesOk() ([]StoragePureDirectoryQuotaRelationship, bool) {
	if o == nil || IsNil(o.QuotaPolicies) {
		return nil, false
	}
	return o.QuotaPolicies, true
}

// HasQuotaPolicies returns a boolean if a field has been set.
func (o *StoragePureDirectory) HasQuotaPolicies() bool {
	if o != nil && !IsNil(o.QuotaPolicies) {
		return true
	}

	return false
}

// SetQuotaPolicies gets a reference to the given []StoragePureDirectoryQuotaRelationship and assigns it to the QuotaPolicies field.
func (o *StoragePureDirectory) SetQuotaPolicies(v []StoragePureDirectoryQuotaRelationship) {
	o.QuotaPolicies = v
}

// GetRegisteredDevice returns the RegisteredDevice field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *StoragePureDirectory) GetRegisteredDevice() AssetDeviceRegistrationRelationship {
	if o == nil || IsNil(o.RegisteredDevice.Get()) {
		var ret AssetDeviceRegistrationRelationship
		return ret
	}
	return *o.RegisteredDevice.Get()
}

// GetRegisteredDeviceOk returns a tuple with the RegisteredDevice field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *StoragePureDirectory) GetRegisteredDeviceOk() (*AssetDeviceRegistrationRelationship, bool) {
	if o == nil {
		return nil, false
	}
	return o.RegisteredDevice.Get(), o.RegisteredDevice.IsSet()
}

// HasRegisteredDevice returns a boolean if a field has been set.
func (o *StoragePureDirectory) HasRegisteredDevice() bool {
	if o != nil && o.RegisteredDevice.IsSet() {
		return true
	}

	return false
}

// SetRegisteredDevice gets a reference to the given NullableAssetDeviceRegistrationRelationship and assigns it to the RegisteredDevice field.
func (o *StoragePureDirectory) SetRegisteredDevice(v AssetDeviceRegistrationRelationship) {
	o.RegisteredDevice.Set(&v)
}

// SetRegisteredDeviceNil sets the value for RegisteredDevice to be an explicit nil
func (o *StoragePureDirectory) SetRegisteredDeviceNil() {
	o.RegisteredDevice.Set(nil)
}

// UnsetRegisteredDevice ensures that no value is present for RegisteredDevice, not even an explicit nil
func (o *StoragePureDirectory) UnsetRegisteredDevice() {
	o.RegisteredDevice.Unset()
}

func (o StoragePureDirectory) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o StoragePureDirectory) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	serializedMoBaseMo, errMoBaseMo := json.Marshal(o.MoBaseMo)
	if errMoBaseMo != nil {
		return map[string]interface{}{}, errMoBaseMo
	}
	errMoBaseMo = json.Unmarshal([]byte(serializedMoBaseMo), &toSerialize)
	if errMoBaseMo != nil {
		return map[string]interface{}{}, errMoBaseMo
	}
	if _, exists := toSerialize["ClassId"]; !exists {
		toSerialize["ClassId"] = o.GetDefaultClassId()
	}
	toSerialize["ClassId"] = o.ClassId
	if _, exists := toSerialize["ObjectType"]; !exists {
		toSerialize["ObjectType"] = o.GetDefaultObjectType()
	}
	toSerialize["ObjectType"] = o.ObjectType
	if !IsNil(o.CreatedTime) {
		toSerialize["CreatedTime"] = o.CreatedTime
	}
	if !IsNil(o.DataReduction) {
		toSerialize["DataReduction"] = o.DataReduction
	}
	if !IsNil(o.Destroyed) {
		toSerialize["Destroyed"] = o.Destroyed
	}
	if !IsNil(o.DirectoryName) {
		toSerialize["DirectoryName"] = o.DirectoryName
	}
	if o.ExportPolicyList != nil {
		toSerialize["ExportPolicyList"] = o.ExportPolicyList
	}
	if !IsNil(o.FileSystemName) {
		toSerialize["FileSystemName"] = o.FileSystemName
	}
	if !IsNil(o.MemberName) {
		toSerialize["MemberName"] = o.MemberName
	}
	if !IsNil(o.MemberResourceType) {
		toSerialize["MemberResourceType"] = o.MemberResourceType
	}
	if !IsNil(o.Name) {
		toSerialize["Name"] = o.Name
	}
	if !IsNil(o.Path) {
		toSerialize["Path"] = o.Path
	}
	if !IsNil(o.PolicyResourceType) {
		toSerialize["PolicyResourceType"] = o.PolicyResourceType
	}
	if o.QuotaPolicyNames != nil {
		toSerialize["QuotaPolicyNames"] = o.QuotaPolicyNames
	}
	if !IsNil(o.Snapshots) {
		toSerialize["Snapshots"] = o.Snapshots
	}
	if !IsNil(o.ThinProvisioning) {
		toSerialize["ThinProvisioning"] = o.ThinProvisioning
	}
	if !IsNil(o.TotalPhysical) {
		toSerialize["TotalPhysical"] = o.TotalPhysical
	}
	if !IsNil(o.TotalReduction) {
		toSerialize["TotalReduction"] = o.TotalReduction
	}
	if !IsNil(o.TotalUsed) {
		toSerialize["TotalUsed"] = o.TotalUsed
	}
	if !IsNil(o.Unique) {
		toSerialize["Unique"] = o.Unique
	}
	if o.Array.IsSet() {
		toSerialize["Array"] = o.Array.Get()
	}
	if o.ExportPolicies != nil {
		toSerialize["ExportPolicies"] = o.ExportPolicies
	}
	if o.FileSystems.IsSet() {
		toSerialize["FileSystems"] = o.FileSystems.Get()
	}
	if o.QuotaPolicies != nil {
		toSerialize["QuotaPolicies"] = o.QuotaPolicies
	}
	if o.RegisteredDevice.IsSet() {
		toSerialize["RegisteredDevice"] = o.RegisteredDevice.Get()
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *StoragePureDirectory) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"ClassId",
		"ObjectType",
	}

	// defaultValueFuncMap captures the default values for required properties.
	// These values are used when required properties are missing from the payload.
	defaultValueFuncMap := map[string]func() interface{}{
		"ClassId":    o.GetDefaultClassId,
		"ObjectType": o.GetDefaultObjectType,
	}
	var defaultValueApplied bool
	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			if _, ok := defaultValueFuncMap[requiredProperty]; ok {
				allProperties[requiredProperty] = defaultValueFuncMap[requiredProperty]()
				defaultValueApplied = true
			}
		}
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	if defaultValueApplied {
		data, err = json.Marshal(allProperties)
		if err != nil {
			return err
		}
	}
	type StoragePureDirectoryWithoutEmbeddedStruct struct {
		// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.
		ClassId string `json:"ClassId"`
		// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
		ObjectType string `json:"ObjectType"`
		// The managed directory creation time, measured in milliseconds since the UNIX epoch.
		CreatedTime *time.Time `json:"CreatedTime,omitempty"`
		// The ratio of mapped sectors within a volume versus the amount of physical space the data occupies after data compression and deduplication. The data reduction ratio does not include thin provisioning savings. For example, a data reduction ratio of 5:1 means that for every 5 MB the host writes to the array, 1 MB is stored on the array's flash modules.
		DataReduction *int64 `json:"DataReduction,omitempty"`
		// A boolean value, if set to true, lists only destroyed objects that are in the eradication pending state. If set to false, lists only objects that are not destroyed.
		Destroyed *bool `json:"Destroyed,omitempty"`
		// The managed directory name without the file system name prefix.
		DirectoryName    *string  `json:"DirectoryName,omitempty"`
		ExportPolicyList []string `json:"ExportPolicyList,omitempty"`
		// Name of file syetem associated with the directory.
		FileSystemName *string `json:"FileSystemName,omitempty"`
		// Absolute path of the managed directory in the file system.
		MemberName *string `json:"MemberName,omitempty"`
		// Absolute path of the managed directory in the file system.
		MemberResourceType *string `json:"MemberResourceType,omitempty"`
		// A user-specified name. The name must be locally unique and can be changed.
		Name *string `json:"Name,omitempty"`
		// Absolute path of the managed directory in the file system.
		Path *string `json:"Path,omitempty"`
		// Absolute path of the managed directory in the file system.
		PolicyResourceType *string  `json:"PolicyResourceType,omitempty"`
		QuotaPolicyNames   []string `json:"QuotaPolicyNames,omitempty"`
		// The physical space occupied by data unique to one or more snapshots. Measured in bytes.
		Snapshots *int64 `json:"Snapshots,omitempty"`
		// The percentage of volume sectors that do not contain host-written data because the hosts have not written data to them or the sectors have been explicitly trimmed.
		ThinProvisioning *int64 `json:"ThinProvisioning,omitempty"`
		// The total physical space occupied by system, shared space, volume, and snapshot data. Measured in bytes.
		TotalPhysical *int64 `json:"TotalPhysical,omitempty"`
		// The ratio of provisioned sectors within a volume versus the amount of physical space the data occupies after reduction via data compression and deduplication and with thin provisioning savings. Total reduction is data reduction with thin provisioning savings. For example, a total reduction ratio of 10:1 means that for every 10 MB of provisioned space, 1 MB is stored on the array's flash modules.
		TotalReduction *int64 `json:"TotalReduction,omitempty"`
		// The total space contributed by customer data, measured in bytes.
		TotalUsed *int64 `json:"TotalUsed,omitempty"`
		// The unique physical space occupied by customer data. Unique physical space does not include shared space, snapshots, and internal array metadata. Measured in bytes. On Evergreen//One arrays, this is the effective space contributed by unique customer data, measured in bytes. Unique data does not include shared space, snapshots, and internal array metadata.
		Unique *int64                               `json:"Unique,omitempty"`
		Array  NullableStoragePureArrayRelationship `json:"Array,omitempty"`
		// An array of relationships to storagePureDirectoryExport resources.
		ExportPolicies []StoragePureDirectoryExportRelationship   `json:"ExportPolicies,omitempty"`
		FileSystems    NullableStoragePureFileSystemsRelationship `json:"FileSystems,omitempty"`
		// An array of relationships to storagePureDirectoryQuota resources.
		QuotaPolicies    []StoragePureDirectoryQuotaRelationship     `json:"QuotaPolicies,omitempty"`
		RegisteredDevice NullableAssetDeviceRegistrationRelationship `json:"RegisteredDevice,omitempty"`
	}

	varStoragePureDirectoryWithoutEmbeddedStruct := StoragePureDirectoryWithoutEmbeddedStruct{}

	err = json.Unmarshal(data, &varStoragePureDirectoryWithoutEmbeddedStruct)
	if err == nil {
		varStoragePureDirectory := _StoragePureDirectory{}
		varStoragePureDirectory.ClassId = varStoragePureDirectoryWithoutEmbeddedStruct.ClassId
		varStoragePureDirectory.ObjectType = varStoragePureDirectoryWithoutEmbeddedStruct.ObjectType
		varStoragePureDirectory.CreatedTime = varStoragePureDirectoryWithoutEmbeddedStruct.CreatedTime
		varStoragePureDirectory.DataReduction = varStoragePureDirectoryWithoutEmbeddedStruct.DataReduction
		varStoragePureDirectory.Destroyed = varStoragePureDirectoryWithoutEmbeddedStruct.Destroyed
		varStoragePureDirectory.DirectoryName = varStoragePureDirectoryWithoutEmbeddedStruct.DirectoryName
		varStoragePureDirectory.ExportPolicyList = varStoragePureDirectoryWithoutEmbeddedStruct.ExportPolicyList
		varStoragePureDirectory.FileSystemName = varStoragePureDirectoryWithoutEmbeddedStruct.FileSystemName
		varStoragePureDirectory.MemberName = varStoragePureDirectoryWithoutEmbeddedStruct.MemberName
		varStoragePureDirectory.MemberResourceType = varStoragePureDirectoryWithoutEmbeddedStruct.MemberResourceType
		varStoragePureDirectory.Name = varStoragePureDirectoryWithoutEmbeddedStruct.Name
		varStoragePureDirectory.Path = varStoragePureDirectoryWithoutEmbeddedStruct.Path
		varStoragePureDirectory.PolicyResourceType = varStoragePureDirectoryWithoutEmbeddedStruct.PolicyResourceType
		varStoragePureDirectory.QuotaPolicyNames = varStoragePureDirectoryWithoutEmbeddedStruct.QuotaPolicyNames
		varStoragePureDirectory.Snapshots = varStoragePureDirectoryWithoutEmbeddedStruct.Snapshots
		varStoragePureDirectory.ThinProvisioning = varStoragePureDirectoryWithoutEmbeddedStruct.ThinProvisioning
		varStoragePureDirectory.TotalPhysical = varStoragePureDirectoryWithoutEmbeddedStruct.TotalPhysical
		varStoragePureDirectory.TotalReduction = varStoragePureDirectoryWithoutEmbeddedStruct.TotalReduction
		varStoragePureDirectory.TotalUsed = varStoragePureDirectoryWithoutEmbeddedStruct.TotalUsed
		varStoragePureDirectory.Unique = varStoragePureDirectoryWithoutEmbeddedStruct.Unique
		varStoragePureDirectory.Array = varStoragePureDirectoryWithoutEmbeddedStruct.Array
		varStoragePureDirectory.ExportPolicies = varStoragePureDirectoryWithoutEmbeddedStruct.ExportPolicies
		varStoragePureDirectory.FileSystems = varStoragePureDirectoryWithoutEmbeddedStruct.FileSystems
		varStoragePureDirectory.QuotaPolicies = varStoragePureDirectoryWithoutEmbeddedStruct.QuotaPolicies
		varStoragePureDirectory.RegisteredDevice = varStoragePureDirectoryWithoutEmbeddedStruct.RegisteredDevice
		*o = StoragePureDirectory(varStoragePureDirectory)
	} else {
		return err
	}

	varStoragePureDirectory := _StoragePureDirectory{}

	err = json.Unmarshal(data, &varStoragePureDirectory)
	if err == nil {
		o.MoBaseMo = varStoragePureDirectory.MoBaseMo
	} else {
		return err
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "ClassId")
		delete(additionalProperties, "ObjectType")
		delete(additionalProperties, "CreatedTime")
		delete(additionalProperties, "DataReduction")
		delete(additionalProperties, "Destroyed")
		delete(additionalProperties, "DirectoryName")
		delete(additionalProperties, "ExportPolicyList")
		delete(additionalProperties, "FileSystemName")
		delete(additionalProperties, "MemberName")
		delete(additionalProperties, "MemberResourceType")
		delete(additionalProperties, "Name")
		delete(additionalProperties, "Path")
		delete(additionalProperties, "PolicyResourceType")
		delete(additionalProperties, "QuotaPolicyNames")
		delete(additionalProperties, "Snapshots")
		delete(additionalProperties, "ThinProvisioning")
		delete(additionalProperties, "TotalPhysical")
		delete(additionalProperties, "TotalReduction")
		delete(additionalProperties, "TotalUsed")
		delete(additionalProperties, "Unique")
		delete(additionalProperties, "Array")
		delete(additionalProperties, "ExportPolicies")
		delete(additionalProperties, "FileSystems")
		delete(additionalProperties, "QuotaPolicies")
		delete(additionalProperties, "RegisteredDevice")

		// remove fields from embedded structs
		reflectMoBaseMo := reflect.ValueOf(o.MoBaseMo)
		for i := 0; i < reflectMoBaseMo.Type().NumField(); i++ {
			t := reflectMoBaseMo.Type().Field(i)

			if jsonTag := t.Tag.Get("json"); jsonTag != "" {
				fieldName := ""
				if commaIdx := strings.Index(jsonTag, ","); commaIdx > 0 {
					fieldName = jsonTag[:commaIdx]
				} else {
					fieldName = jsonTag
				}
				if fieldName != "AdditionalProperties" {
					delete(additionalProperties, fieldName)
				}
			}
		}

		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableStoragePureDirectory struct {
	value *StoragePureDirectory
	isSet bool
}

func (v NullableStoragePureDirectory) Get() *StoragePureDirectory {
	return v.value
}

func (v *NullableStoragePureDirectory) Set(val *StoragePureDirectory) {
	v.value = val
	v.isSet = true
}

func (v NullableStoragePureDirectory) IsSet() bool {
	return v.isSet
}

func (v *NullableStoragePureDirectory) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStoragePureDirectory(val *StoragePureDirectory) *NullableStoragePureDirectory {
	return &NullableStoragePureDirectory{value: val, isSet: true}
}

func (v NullableStoragePureDirectory) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStoragePureDirectory) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
