/*
Cisco Intersight

Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations. The Intersight OpenAPI document defines the complete set of properties that are returned in the HTTP response. From that perspective, a client can expect that no additional properties are returned, unless these properties are explicitly defined in the OpenAPI document. However, when a client uses an older version of the Intersight OpenAPI document, the server may send additional properties because the software is more recent than the client. In that case, the client may receive properties that it does not know about. Some generated SDKs perform a strict validation of the HTTP response body against the OpenAPI document.

API version: 1.0.9-6484
Contact: intersight@cisco.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package intersight

import (
	"encoding/json"
)

// HyperflexProtectedClusterAllOf Definition of the list of properties defined in 'hyperflex.ProtectedCluster', excluding properties defined in parent classes.
type HyperflexProtectedClusterAllOf struct {
	// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.
	ClassId string `json:"ClassId"`
	// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
	ObjectType string `json:"ObjectType"`
	// Version of the Hyperflex cluster.
	HxVersion *string `json:"HxVersion,omitempty"`
	// The version of hypervisor running on this cluster.
	HypervisorVersion *string `json:"HypervisorVersion,omitempty"`
	// Name of the protected datastore.
	ProtectedDatastoreName *string `json:"ProtectedDatastoreName,omitempty"`
	// Number of VMs protected on this cluster.
	ProtectedVmsCount *int64 `json:"ProtectedVmsCount,omitempty"`
	// Name of the source cluster.
	SourceClusterName *string `json:"SourceClusterName,omitempty"`
	// Name of the target cluster.
	TargetClusterName *string `json:"TargetClusterName,omitempty"`
	// Name of the target datastore.
	TargetDatastoreName *string `json:"TargetDatastoreName,omitempty"`
	// Percent usage of the datastore.
	TargetDatastoreUtilization *float32                                           `json:"TargetDatastoreUtilization,omitempty"`
	BackupPolicy               *HyperflexClusterBackupPolicyInventoryRelationship `json:"BackupPolicy,omitempty"`
	DatastoreStatistic         *HyperflexDatastoreStatisticRelationship           `json:"DatastoreStatistic,omitempty"`
	SrcCluster                 *HyperflexClusterRelationship                      `json:"SrcCluster,omitempty"`
	TgtCluster                 *HyperflexClusterRelationship                      `json:"TgtCluster,omitempty"`
	AdditionalProperties       map[string]interface{}
}

type _HyperflexProtectedClusterAllOf HyperflexProtectedClusterAllOf

// NewHyperflexProtectedClusterAllOf instantiates a new HyperflexProtectedClusterAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHyperflexProtectedClusterAllOf(classId string, objectType string) *HyperflexProtectedClusterAllOf {
	this := HyperflexProtectedClusterAllOf{}
	this.ClassId = classId
	this.ObjectType = objectType
	return &this
}

// NewHyperflexProtectedClusterAllOfWithDefaults instantiates a new HyperflexProtectedClusterAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHyperflexProtectedClusterAllOfWithDefaults() *HyperflexProtectedClusterAllOf {
	this := HyperflexProtectedClusterAllOf{}
	var classId string = "hyperflex.ProtectedCluster"
	this.ClassId = classId
	var objectType string = "hyperflex.ProtectedCluster"
	this.ObjectType = objectType
	return &this
}

// GetClassId returns the ClassId field value
func (o *HyperflexProtectedClusterAllOf) GetClassId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ClassId
}

// GetClassIdOk returns a tuple with the ClassId field value
// and a boolean to check if the value has been set.
func (o *HyperflexProtectedClusterAllOf) GetClassIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ClassId, true
}

// SetClassId sets field value
func (o *HyperflexProtectedClusterAllOf) SetClassId(v string) {
	o.ClassId = v
}

// GetObjectType returns the ObjectType field value
func (o *HyperflexProtectedClusterAllOf) GetObjectType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ObjectType
}

// GetObjectTypeOk returns a tuple with the ObjectType field value
// and a boolean to check if the value has been set.
func (o *HyperflexProtectedClusterAllOf) GetObjectTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ObjectType, true
}

// SetObjectType sets field value
func (o *HyperflexProtectedClusterAllOf) SetObjectType(v string) {
	o.ObjectType = v
}

// GetHxVersion returns the HxVersion field value if set, zero value otherwise.
func (o *HyperflexProtectedClusterAllOf) GetHxVersion() string {
	if o == nil || o.HxVersion == nil {
		var ret string
		return ret
	}
	return *o.HxVersion
}

// GetHxVersionOk returns a tuple with the HxVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HyperflexProtectedClusterAllOf) GetHxVersionOk() (*string, bool) {
	if o == nil || o.HxVersion == nil {
		return nil, false
	}
	return o.HxVersion, true
}

// HasHxVersion returns a boolean if a field has been set.
func (o *HyperflexProtectedClusterAllOf) HasHxVersion() bool {
	if o != nil && o.HxVersion != nil {
		return true
	}

	return false
}

// SetHxVersion gets a reference to the given string and assigns it to the HxVersion field.
func (o *HyperflexProtectedClusterAllOf) SetHxVersion(v string) {
	o.HxVersion = &v
}

// GetHypervisorVersion returns the HypervisorVersion field value if set, zero value otherwise.
func (o *HyperflexProtectedClusterAllOf) GetHypervisorVersion() string {
	if o == nil || o.HypervisorVersion == nil {
		var ret string
		return ret
	}
	return *o.HypervisorVersion
}

// GetHypervisorVersionOk returns a tuple with the HypervisorVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HyperflexProtectedClusterAllOf) GetHypervisorVersionOk() (*string, bool) {
	if o == nil || o.HypervisorVersion == nil {
		return nil, false
	}
	return o.HypervisorVersion, true
}

// HasHypervisorVersion returns a boolean if a field has been set.
func (o *HyperflexProtectedClusterAllOf) HasHypervisorVersion() bool {
	if o != nil && o.HypervisorVersion != nil {
		return true
	}

	return false
}

// SetHypervisorVersion gets a reference to the given string and assigns it to the HypervisorVersion field.
func (o *HyperflexProtectedClusterAllOf) SetHypervisorVersion(v string) {
	o.HypervisorVersion = &v
}

// GetProtectedDatastoreName returns the ProtectedDatastoreName field value if set, zero value otherwise.
func (o *HyperflexProtectedClusterAllOf) GetProtectedDatastoreName() string {
	if o == nil || o.ProtectedDatastoreName == nil {
		var ret string
		return ret
	}
	return *o.ProtectedDatastoreName
}

// GetProtectedDatastoreNameOk returns a tuple with the ProtectedDatastoreName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HyperflexProtectedClusterAllOf) GetProtectedDatastoreNameOk() (*string, bool) {
	if o == nil || o.ProtectedDatastoreName == nil {
		return nil, false
	}
	return o.ProtectedDatastoreName, true
}

// HasProtectedDatastoreName returns a boolean if a field has been set.
func (o *HyperflexProtectedClusterAllOf) HasProtectedDatastoreName() bool {
	if o != nil && o.ProtectedDatastoreName != nil {
		return true
	}

	return false
}

// SetProtectedDatastoreName gets a reference to the given string and assigns it to the ProtectedDatastoreName field.
func (o *HyperflexProtectedClusterAllOf) SetProtectedDatastoreName(v string) {
	o.ProtectedDatastoreName = &v
}

// GetProtectedVmsCount returns the ProtectedVmsCount field value if set, zero value otherwise.
func (o *HyperflexProtectedClusterAllOf) GetProtectedVmsCount() int64 {
	if o == nil || o.ProtectedVmsCount == nil {
		var ret int64
		return ret
	}
	return *o.ProtectedVmsCount
}

// GetProtectedVmsCountOk returns a tuple with the ProtectedVmsCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HyperflexProtectedClusterAllOf) GetProtectedVmsCountOk() (*int64, bool) {
	if o == nil || o.ProtectedVmsCount == nil {
		return nil, false
	}
	return o.ProtectedVmsCount, true
}

// HasProtectedVmsCount returns a boolean if a field has been set.
func (o *HyperflexProtectedClusterAllOf) HasProtectedVmsCount() bool {
	if o != nil && o.ProtectedVmsCount != nil {
		return true
	}

	return false
}

// SetProtectedVmsCount gets a reference to the given int64 and assigns it to the ProtectedVmsCount field.
func (o *HyperflexProtectedClusterAllOf) SetProtectedVmsCount(v int64) {
	o.ProtectedVmsCount = &v
}

// GetSourceClusterName returns the SourceClusterName field value if set, zero value otherwise.
func (o *HyperflexProtectedClusterAllOf) GetSourceClusterName() string {
	if o == nil || o.SourceClusterName == nil {
		var ret string
		return ret
	}
	return *o.SourceClusterName
}

// GetSourceClusterNameOk returns a tuple with the SourceClusterName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HyperflexProtectedClusterAllOf) GetSourceClusterNameOk() (*string, bool) {
	if o == nil || o.SourceClusterName == nil {
		return nil, false
	}
	return o.SourceClusterName, true
}

// HasSourceClusterName returns a boolean if a field has been set.
func (o *HyperflexProtectedClusterAllOf) HasSourceClusterName() bool {
	if o != nil && o.SourceClusterName != nil {
		return true
	}

	return false
}

// SetSourceClusterName gets a reference to the given string and assigns it to the SourceClusterName field.
func (o *HyperflexProtectedClusterAllOf) SetSourceClusterName(v string) {
	o.SourceClusterName = &v
}

// GetTargetClusterName returns the TargetClusterName field value if set, zero value otherwise.
func (o *HyperflexProtectedClusterAllOf) GetTargetClusterName() string {
	if o == nil || o.TargetClusterName == nil {
		var ret string
		return ret
	}
	return *o.TargetClusterName
}

// GetTargetClusterNameOk returns a tuple with the TargetClusterName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HyperflexProtectedClusterAllOf) GetTargetClusterNameOk() (*string, bool) {
	if o == nil || o.TargetClusterName == nil {
		return nil, false
	}
	return o.TargetClusterName, true
}

// HasTargetClusterName returns a boolean if a field has been set.
func (o *HyperflexProtectedClusterAllOf) HasTargetClusterName() bool {
	if o != nil && o.TargetClusterName != nil {
		return true
	}

	return false
}

// SetTargetClusterName gets a reference to the given string and assigns it to the TargetClusterName field.
func (o *HyperflexProtectedClusterAllOf) SetTargetClusterName(v string) {
	o.TargetClusterName = &v
}

// GetTargetDatastoreName returns the TargetDatastoreName field value if set, zero value otherwise.
func (o *HyperflexProtectedClusterAllOf) GetTargetDatastoreName() string {
	if o == nil || o.TargetDatastoreName == nil {
		var ret string
		return ret
	}
	return *o.TargetDatastoreName
}

// GetTargetDatastoreNameOk returns a tuple with the TargetDatastoreName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HyperflexProtectedClusterAllOf) GetTargetDatastoreNameOk() (*string, bool) {
	if o == nil || o.TargetDatastoreName == nil {
		return nil, false
	}
	return o.TargetDatastoreName, true
}

// HasTargetDatastoreName returns a boolean if a field has been set.
func (o *HyperflexProtectedClusterAllOf) HasTargetDatastoreName() bool {
	if o != nil && o.TargetDatastoreName != nil {
		return true
	}

	return false
}

// SetTargetDatastoreName gets a reference to the given string and assigns it to the TargetDatastoreName field.
func (o *HyperflexProtectedClusterAllOf) SetTargetDatastoreName(v string) {
	o.TargetDatastoreName = &v
}

// GetTargetDatastoreUtilization returns the TargetDatastoreUtilization field value if set, zero value otherwise.
func (o *HyperflexProtectedClusterAllOf) GetTargetDatastoreUtilization() float32 {
	if o == nil || o.TargetDatastoreUtilization == nil {
		var ret float32
		return ret
	}
	return *o.TargetDatastoreUtilization
}

// GetTargetDatastoreUtilizationOk returns a tuple with the TargetDatastoreUtilization field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HyperflexProtectedClusterAllOf) GetTargetDatastoreUtilizationOk() (*float32, bool) {
	if o == nil || o.TargetDatastoreUtilization == nil {
		return nil, false
	}
	return o.TargetDatastoreUtilization, true
}

// HasTargetDatastoreUtilization returns a boolean if a field has been set.
func (o *HyperflexProtectedClusterAllOf) HasTargetDatastoreUtilization() bool {
	if o != nil && o.TargetDatastoreUtilization != nil {
		return true
	}

	return false
}

// SetTargetDatastoreUtilization gets a reference to the given float32 and assigns it to the TargetDatastoreUtilization field.
func (o *HyperflexProtectedClusterAllOf) SetTargetDatastoreUtilization(v float32) {
	o.TargetDatastoreUtilization = &v
}

// GetBackupPolicy returns the BackupPolicy field value if set, zero value otherwise.
func (o *HyperflexProtectedClusterAllOf) GetBackupPolicy() HyperflexClusterBackupPolicyInventoryRelationship {
	if o == nil || o.BackupPolicy == nil {
		var ret HyperflexClusterBackupPolicyInventoryRelationship
		return ret
	}
	return *o.BackupPolicy
}

// GetBackupPolicyOk returns a tuple with the BackupPolicy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HyperflexProtectedClusterAllOf) GetBackupPolicyOk() (*HyperflexClusterBackupPolicyInventoryRelationship, bool) {
	if o == nil || o.BackupPolicy == nil {
		return nil, false
	}
	return o.BackupPolicy, true
}

// HasBackupPolicy returns a boolean if a field has been set.
func (o *HyperflexProtectedClusterAllOf) HasBackupPolicy() bool {
	if o != nil && o.BackupPolicy != nil {
		return true
	}

	return false
}

// SetBackupPolicy gets a reference to the given HyperflexClusterBackupPolicyInventoryRelationship and assigns it to the BackupPolicy field.
func (o *HyperflexProtectedClusterAllOf) SetBackupPolicy(v HyperflexClusterBackupPolicyInventoryRelationship) {
	o.BackupPolicy = &v
}

// GetDatastoreStatistic returns the DatastoreStatistic field value if set, zero value otherwise.
func (o *HyperflexProtectedClusterAllOf) GetDatastoreStatistic() HyperflexDatastoreStatisticRelationship {
	if o == nil || o.DatastoreStatistic == nil {
		var ret HyperflexDatastoreStatisticRelationship
		return ret
	}
	return *o.DatastoreStatistic
}

// GetDatastoreStatisticOk returns a tuple with the DatastoreStatistic field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HyperflexProtectedClusterAllOf) GetDatastoreStatisticOk() (*HyperflexDatastoreStatisticRelationship, bool) {
	if o == nil || o.DatastoreStatistic == nil {
		return nil, false
	}
	return o.DatastoreStatistic, true
}

// HasDatastoreStatistic returns a boolean if a field has been set.
func (o *HyperflexProtectedClusterAllOf) HasDatastoreStatistic() bool {
	if o != nil && o.DatastoreStatistic != nil {
		return true
	}

	return false
}

// SetDatastoreStatistic gets a reference to the given HyperflexDatastoreStatisticRelationship and assigns it to the DatastoreStatistic field.
func (o *HyperflexProtectedClusterAllOf) SetDatastoreStatistic(v HyperflexDatastoreStatisticRelationship) {
	o.DatastoreStatistic = &v
}

// GetSrcCluster returns the SrcCluster field value if set, zero value otherwise.
func (o *HyperflexProtectedClusterAllOf) GetSrcCluster() HyperflexClusterRelationship {
	if o == nil || o.SrcCluster == nil {
		var ret HyperflexClusterRelationship
		return ret
	}
	return *o.SrcCluster
}

// GetSrcClusterOk returns a tuple with the SrcCluster field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HyperflexProtectedClusterAllOf) GetSrcClusterOk() (*HyperflexClusterRelationship, bool) {
	if o == nil || o.SrcCluster == nil {
		return nil, false
	}
	return o.SrcCluster, true
}

// HasSrcCluster returns a boolean if a field has been set.
func (o *HyperflexProtectedClusterAllOf) HasSrcCluster() bool {
	if o != nil && o.SrcCluster != nil {
		return true
	}

	return false
}

// SetSrcCluster gets a reference to the given HyperflexClusterRelationship and assigns it to the SrcCluster field.
func (o *HyperflexProtectedClusterAllOf) SetSrcCluster(v HyperflexClusterRelationship) {
	o.SrcCluster = &v
}

// GetTgtCluster returns the TgtCluster field value if set, zero value otherwise.
func (o *HyperflexProtectedClusterAllOf) GetTgtCluster() HyperflexClusterRelationship {
	if o == nil || o.TgtCluster == nil {
		var ret HyperflexClusterRelationship
		return ret
	}
	return *o.TgtCluster
}

// GetTgtClusterOk returns a tuple with the TgtCluster field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HyperflexProtectedClusterAllOf) GetTgtClusterOk() (*HyperflexClusterRelationship, bool) {
	if o == nil || o.TgtCluster == nil {
		return nil, false
	}
	return o.TgtCluster, true
}

// HasTgtCluster returns a boolean if a field has been set.
func (o *HyperflexProtectedClusterAllOf) HasTgtCluster() bool {
	if o != nil && o.TgtCluster != nil {
		return true
	}

	return false
}

// SetTgtCluster gets a reference to the given HyperflexClusterRelationship and assigns it to the TgtCluster field.
func (o *HyperflexProtectedClusterAllOf) SetTgtCluster(v HyperflexClusterRelationship) {
	o.TgtCluster = &v
}

func (o HyperflexProtectedClusterAllOf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["ClassId"] = o.ClassId
	}
	if true {
		toSerialize["ObjectType"] = o.ObjectType
	}
	if o.HxVersion != nil {
		toSerialize["HxVersion"] = o.HxVersion
	}
	if o.HypervisorVersion != nil {
		toSerialize["HypervisorVersion"] = o.HypervisorVersion
	}
	if o.ProtectedDatastoreName != nil {
		toSerialize["ProtectedDatastoreName"] = o.ProtectedDatastoreName
	}
	if o.ProtectedVmsCount != nil {
		toSerialize["ProtectedVmsCount"] = o.ProtectedVmsCount
	}
	if o.SourceClusterName != nil {
		toSerialize["SourceClusterName"] = o.SourceClusterName
	}
	if o.TargetClusterName != nil {
		toSerialize["TargetClusterName"] = o.TargetClusterName
	}
	if o.TargetDatastoreName != nil {
		toSerialize["TargetDatastoreName"] = o.TargetDatastoreName
	}
	if o.TargetDatastoreUtilization != nil {
		toSerialize["TargetDatastoreUtilization"] = o.TargetDatastoreUtilization
	}
	if o.BackupPolicy != nil {
		toSerialize["BackupPolicy"] = o.BackupPolicy
	}
	if o.DatastoreStatistic != nil {
		toSerialize["DatastoreStatistic"] = o.DatastoreStatistic
	}
	if o.SrcCluster != nil {
		toSerialize["SrcCluster"] = o.SrcCluster
	}
	if o.TgtCluster != nil {
		toSerialize["TgtCluster"] = o.TgtCluster
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *HyperflexProtectedClusterAllOf) UnmarshalJSON(bytes []byte) (err error) {
	varHyperflexProtectedClusterAllOf := _HyperflexProtectedClusterAllOf{}

	if err = json.Unmarshal(bytes, &varHyperflexProtectedClusterAllOf); err == nil {
		*o = HyperflexProtectedClusterAllOf(varHyperflexProtectedClusterAllOf)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "ClassId")
		delete(additionalProperties, "ObjectType")
		delete(additionalProperties, "HxVersion")
		delete(additionalProperties, "HypervisorVersion")
		delete(additionalProperties, "ProtectedDatastoreName")
		delete(additionalProperties, "ProtectedVmsCount")
		delete(additionalProperties, "SourceClusterName")
		delete(additionalProperties, "TargetClusterName")
		delete(additionalProperties, "TargetDatastoreName")
		delete(additionalProperties, "TargetDatastoreUtilization")
		delete(additionalProperties, "BackupPolicy")
		delete(additionalProperties, "DatastoreStatistic")
		delete(additionalProperties, "SrcCluster")
		delete(additionalProperties, "TgtCluster")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableHyperflexProtectedClusterAllOf struct {
	value *HyperflexProtectedClusterAllOf
	isSet bool
}

func (v NullableHyperflexProtectedClusterAllOf) Get() *HyperflexProtectedClusterAllOf {
	return v.value
}

func (v *NullableHyperflexProtectedClusterAllOf) Set(val *HyperflexProtectedClusterAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableHyperflexProtectedClusterAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableHyperflexProtectedClusterAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHyperflexProtectedClusterAllOf(val *HyperflexProtectedClusterAllOf) *NullableHyperflexProtectedClusterAllOf {
	return &NullableHyperflexProtectedClusterAllOf{value: val, isSet: true}
}

func (v NullableHyperflexProtectedClusterAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHyperflexProtectedClusterAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
