/*
Cisco Intersight

Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations. The Intersight OpenAPI document defines the complete set of properties that are returned in the HTTP response. From that perspective, a client can expect that no additional properties are returned, unless these properties are explicitly defined in the OpenAPI document. However, when a client uses an older version of the Intersight OpenAPI document, the server may send additional properties because the software is more recent than the client. In that case, the client may receive properties that it does not know about. Some generated SDKs perform a strict validation of the HTTP response body against the OpenAPI document.

API version: 1.0.11-2024120409
Contact: intersight@cisco.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package intersight

import (
	"encoding/json"
	"fmt"
	"reflect"
	"strings"
	"time"
)

// checks if the HciAlarm type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &HciAlarm{}

// HciAlarm An alert from an HCI cluster reported from the Prism Central serviceability/Alerts API.
type HciAlarm struct {
	MoBaseMo
	// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.
	ClassId string `json:"ClassId"`
	// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
	ObjectType string `json:"ObjectType"`
	// The unique identifier for the alarm on the endpoint.
	AlarmExtId *string `json:"AlarmExtId,omitempty"`
	// The code for the reported alarm.
	AlertType *string `json:"AlertType,omitempty"`
	// The unique identifer for the cluster associated with the source entity on the endpoint.
	ClusterExtId *string `json:"ClusterExtId,omitempty"`
	// The status of the alarm. If an alarm is resolved, this value is set as true on the endpoint.
	IsResolved *bool `json:"IsResolved,omitempty"`
	// The description from the endpoint explaining the cause of the alarm.
	Message *string `json:"Message,omitempty"`
	// The time the alarm was acknowledged on the endpoint.
	OriginAcknowledgeTime *time.Time `json:"OriginAcknowledgeTime,omitempty"`
	// The time the alarm was created on the endpoint.
	OriginCreationTime *time.Time `json:"OriginCreationTime,omitempty"`
	// The acknowledgement status of the alert on the endpoint.
	OriginIsAcknowledged *bool               `json:"OriginIsAcknowledged,omitempty"`
	Parameters           []HciAlarmParameter `json:"Parameters,omitempty"`
	// The time the alarm was resolved on the endpoint.
	ResolvedTime *time.Time `json:"ResolvedTime,omitempty"`
	// The severity of the alarm. Valid values are Critical, Warning, Info. * `None` - The Enum value None represents that there is no severity. * `Info` - The Enum value Info represents the Informational level of severity. * `Critical` - The Enum value Critical represents the Critical level of severity. * `Warning` - The Enum value Warning represents the Warning level of severity. * `Cleared` - The Enum value Cleared represents that the alarm severity has been cleared.
	Severity *string `json:"Severity,omitempty"`
	// The unique identifer for the entity on the endpoint for which the alarm was raised.
	SourceEntityExtId *string `json:"SourceEntityExtId,omitempty"`
	// The name of the entity on the endpoint for which the alarm was raised.
	SourceEntityName *string `json:"SourceEntityName,omitempty"`
	// The object type for the entity corresponding to the objects inventoried.
	SourceEntityType *string `json:"SourceEntityType,omitempty"`
	// The title of the reported alarm.
	Title                *string                                     `json:"Title,omitempty"`
	Cluster              NullableHciClusterRelationship              `json:"Cluster,omitempty"`
	RegisteredDevice     NullableAssetDeviceRegistrationRelationship `json:"RegisteredDevice,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _HciAlarm HciAlarm

// NewHciAlarm instantiates a new HciAlarm object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHciAlarm(classId string, objectType string) *HciAlarm {
	this := HciAlarm{}
	this.ClassId = classId
	this.ObjectType = objectType
	return &this
}

// NewHciAlarmWithDefaults instantiates a new HciAlarm object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHciAlarmWithDefaults() *HciAlarm {
	this := HciAlarm{}
	var classId string = "hci.Alarm"
	this.ClassId = classId
	var objectType string = "hci.Alarm"
	this.ObjectType = objectType
	return &this
}

// GetClassId returns the ClassId field value
func (o *HciAlarm) GetClassId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ClassId
}

// GetClassIdOk returns a tuple with the ClassId field value
// and a boolean to check if the value has been set.
func (o *HciAlarm) GetClassIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ClassId, true
}

// SetClassId sets field value
func (o *HciAlarm) SetClassId(v string) {
	o.ClassId = v
}

// GetDefaultClassId returns the default value "hci.Alarm" of the ClassId field.
func (o *HciAlarm) GetDefaultClassId() interface{} {
	return "hci.Alarm"
}

// GetObjectType returns the ObjectType field value
func (o *HciAlarm) GetObjectType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ObjectType
}

// GetObjectTypeOk returns a tuple with the ObjectType field value
// and a boolean to check if the value has been set.
func (o *HciAlarm) GetObjectTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ObjectType, true
}

// SetObjectType sets field value
func (o *HciAlarm) SetObjectType(v string) {
	o.ObjectType = v
}

// GetDefaultObjectType returns the default value "hci.Alarm" of the ObjectType field.
func (o *HciAlarm) GetDefaultObjectType() interface{} {
	return "hci.Alarm"
}

// GetAlarmExtId returns the AlarmExtId field value if set, zero value otherwise.
func (o *HciAlarm) GetAlarmExtId() string {
	if o == nil || IsNil(o.AlarmExtId) {
		var ret string
		return ret
	}
	return *o.AlarmExtId
}

// GetAlarmExtIdOk returns a tuple with the AlarmExtId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HciAlarm) GetAlarmExtIdOk() (*string, bool) {
	if o == nil || IsNil(o.AlarmExtId) {
		return nil, false
	}
	return o.AlarmExtId, true
}

// HasAlarmExtId returns a boolean if a field has been set.
func (o *HciAlarm) HasAlarmExtId() bool {
	if o != nil && !IsNil(o.AlarmExtId) {
		return true
	}

	return false
}

// SetAlarmExtId gets a reference to the given string and assigns it to the AlarmExtId field.
func (o *HciAlarm) SetAlarmExtId(v string) {
	o.AlarmExtId = &v
}

// GetAlertType returns the AlertType field value if set, zero value otherwise.
func (o *HciAlarm) GetAlertType() string {
	if o == nil || IsNil(o.AlertType) {
		var ret string
		return ret
	}
	return *o.AlertType
}

// GetAlertTypeOk returns a tuple with the AlertType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HciAlarm) GetAlertTypeOk() (*string, bool) {
	if o == nil || IsNil(o.AlertType) {
		return nil, false
	}
	return o.AlertType, true
}

// HasAlertType returns a boolean if a field has been set.
func (o *HciAlarm) HasAlertType() bool {
	if o != nil && !IsNil(o.AlertType) {
		return true
	}

	return false
}

// SetAlertType gets a reference to the given string and assigns it to the AlertType field.
func (o *HciAlarm) SetAlertType(v string) {
	o.AlertType = &v
}

// GetClusterExtId returns the ClusterExtId field value if set, zero value otherwise.
func (o *HciAlarm) GetClusterExtId() string {
	if o == nil || IsNil(o.ClusterExtId) {
		var ret string
		return ret
	}
	return *o.ClusterExtId
}

// GetClusterExtIdOk returns a tuple with the ClusterExtId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HciAlarm) GetClusterExtIdOk() (*string, bool) {
	if o == nil || IsNil(o.ClusterExtId) {
		return nil, false
	}
	return o.ClusterExtId, true
}

// HasClusterExtId returns a boolean if a field has been set.
func (o *HciAlarm) HasClusterExtId() bool {
	if o != nil && !IsNil(o.ClusterExtId) {
		return true
	}

	return false
}

// SetClusterExtId gets a reference to the given string and assigns it to the ClusterExtId field.
func (o *HciAlarm) SetClusterExtId(v string) {
	o.ClusterExtId = &v
}

// GetIsResolved returns the IsResolved field value if set, zero value otherwise.
func (o *HciAlarm) GetIsResolved() bool {
	if o == nil || IsNil(o.IsResolved) {
		var ret bool
		return ret
	}
	return *o.IsResolved
}

// GetIsResolvedOk returns a tuple with the IsResolved field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HciAlarm) GetIsResolvedOk() (*bool, bool) {
	if o == nil || IsNil(o.IsResolved) {
		return nil, false
	}
	return o.IsResolved, true
}

// HasIsResolved returns a boolean if a field has been set.
func (o *HciAlarm) HasIsResolved() bool {
	if o != nil && !IsNil(o.IsResolved) {
		return true
	}

	return false
}

// SetIsResolved gets a reference to the given bool and assigns it to the IsResolved field.
func (o *HciAlarm) SetIsResolved(v bool) {
	o.IsResolved = &v
}

// GetMessage returns the Message field value if set, zero value otherwise.
func (o *HciAlarm) GetMessage() string {
	if o == nil || IsNil(o.Message) {
		var ret string
		return ret
	}
	return *o.Message
}

// GetMessageOk returns a tuple with the Message field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HciAlarm) GetMessageOk() (*string, bool) {
	if o == nil || IsNil(o.Message) {
		return nil, false
	}
	return o.Message, true
}

// HasMessage returns a boolean if a field has been set.
func (o *HciAlarm) HasMessage() bool {
	if o != nil && !IsNil(o.Message) {
		return true
	}

	return false
}

// SetMessage gets a reference to the given string and assigns it to the Message field.
func (o *HciAlarm) SetMessage(v string) {
	o.Message = &v
}

// GetOriginAcknowledgeTime returns the OriginAcknowledgeTime field value if set, zero value otherwise.
func (o *HciAlarm) GetOriginAcknowledgeTime() time.Time {
	if o == nil || IsNil(o.OriginAcknowledgeTime) {
		var ret time.Time
		return ret
	}
	return *o.OriginAcknowledgeTime
}

// GetOriginAcknowledgeTimeOk returns a tuple with the OriginAcknowledgeTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HciAlarm) GetOriginAcknowledgeTimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.OriginAcknowledgeTime) {
		return nil, false
	}
	return o.OriginAcknowledgeTime, true
}

// HasOriginAcknowledgeTime returns a boolean if a field has been set.
func (o *HciAlarm) HasOriginAcknowledgeTime() bool {
	if o != nil && !IsNil(o.OriginAcknowledgeTime) {
		return true
	}

	return false
}

// SetOriginAcknowledgeTime gets a reference to the given time.Time and assigns it to the OriginAcknowledgeTime field.
func (o *HciAlarm) SetOriginAcknowledgeTime(v time.Time) {
	o.OriginAcknowledgeTime = &v
}

// GetOriginCreationTime returns the OriginCreationTime field value if set, zero value otherwise.
func (o *HciAlarm) GetOriginCreationTime() time.Time {
	if o == nil || IsNil(o.OriginCreationTime) {
		var ret time.Time
		return ret
	}
	return *o.OriginCreationTime
}

// GetOriginCreationTimeOk returns a tuple with the OriginCreationTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HciAlarm) GetOriginCreationTimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.OriginCreationTime) {
		return nil, false
	}
	return o.OriginCreationTime, true
}

// HasOriginCreationTime returns a boolean if a field has been set.
func (o *HciAlarm) HasOriginCreationTime() bool {
	if o != nil && !IsNil(o.OriginCreationTime) {
		return true
	}

	return false
}

// SetOriginCreationTime gets a reference to the given time.Time and assigns it to the OriginCreationTime field.
func (o *HciAlarm) SetOriginCreationTime(v time.Time) {
	o.OriginCreationTime = &v
}

// GetOriginIsAcknowledged returns the OriginIsAcknowledged field value if set, zero value otherwise.
func (o *HciAlarm) GetOriginIsAcknowledged() bool {
	if o == nil || IsNil(o.OriginIsAcknowledged) {
		var ret bool
		return ret
	}
	return *o.OriginIsAcknowledged
}

// GetOriginIsAcknowledgedOk returns a tuple with the OriginIsAcknowledged field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HciAlarm) GetOriginIsAcknowledgedOk() (*bool, bool) {
	if o == nil || IsNil(o.OriginIsAcknowledged) {
		return nil, false
	}
	return o.OriginIsAcknowledged, true
}

// HasOriginIsAcknowledged returns a boolean if a field has been set.
func (o *HciAlarm) HasOriginIsAcknowledged() bool {
	if o != nil && !IsNil(o.OriginIsAcknowledged) {
		return true
	}

	return false
}

// SetOriginIsAcknowledged gets a reference to the given bool and assigns it to the OriginIsAcknowledged field.
func (o *HciAlarm) SetOriginIsAcknowledged(v bool) {
	o.OriginIsAcknowledged = &v
}

// GetParameters returns the Parameters field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HciAlarm) GetParameters() []HciAlarmParameter {
	if o == nil {
		var ret []HciAlarmParameter
		return ret
	}
	return o.Parameters
}

// GetParametersOk returns a tuple with the Parameters field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HciAlarm) GetParametersOk() ([]HciAlarmParameter, bool) {
	if o == nil || IsNil(o.Parameters) {
		return nil, false
	}
	return o.Parameters, true
}

// HasParameters returns a boolean if a field has been set.
func (o *HciAlarm) HasParameters() bool {
	if o != nil && !IsNil(o.Parameters) {
		return true
	}

	return false
}

// SetParameters gets a reference to the given []HciAlarmParameter and assigns it to the Parameters field.
func (o *HciAlarm) SetParameters(v []HciAlarmParameter) {
	o.Parameters = v
}

// GetResolvedTime returns the ResolvedTime field value if set, zero value otherwise.
func (o *HciAlarm) GetResolvedTime() time.Time {
	if o == nil || IsNil(o.ResolvedTime) {
		var ret time.Time
		return ret
	}
	return *o.ResolvedTime
}

// GetResolvedTimeOk returns a tuple with the ResolvedTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HciAlarm) GetResolvedTimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.ResolvedTime) {
		return nil, false
	}
	return o.ResolvedTime, true
}

// HasResolvedTime returns a boolean if a field has been set.
func (o *HciAlarm) HasResolvedTime() bool {
	if o != nil && !IsNil(o.ResolvedTime) {
		return true
	}

	return false
}

// SetResolvedTime gets a reference to the given time.Time and assigns it to the ResolvedTime field.
func (o *HciAlarm) SetResolvedTime(v time.Time) {
	o.ResolvedTime = &v
}

// GetSeverity returns the Severity field value if set, zero value otherwise.
func (o *HciAlarm) GetSeverity() string {
	if o == nil || IsNil(o.Severity) {
		var ret string
		return ret
	}
	return *o.Severity
}

// GetSeverityOk returns a tuple with the Severity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HciAlarm) GetSeverityOk() (*string, bool) {
	if o == nil || IsNil(o.Severity) {
		return nil, false
	}
	return o.Severity, true
}

// HasSeverity returns a boolean if a field has been set.
func (o *HciAlarm) HasSeverity() bool {
	if o != nil && !IsNil(o.Severity) {
		return true
	}

	return false
}

// SetSeverity gets a reference to the given string and assigns it to the Severity field.
func (o *HciAlarm) SetSeverity(v string) {
	o.Severity = &v
}

// GetSourceEntityExtId returns the SourceEntityExtId field value if set, zero value otherwise.
func (o *HciAlarm) GetSourceEntityExtId() string {
	if o == nil || IsNil(o.SourceEntityExtId) {
		var ret string
		return ret
	}
	return *o.SourceEntityExtId
}

// GetSourceEntityExtIdOk returns a tuple with the SourceEntityExtId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HciAlarm) GetSourceEntityExtIdOk() (*string, bool) {
	if o == nil || IsNil(o.SourceEntityExtId) {
		return nil, false
	}
	return o.SourceEntityExtId, true
}

// HasSourceEntityExtId returns a boolean if a field has been set.
func (o *HciAlarm) HasSourceEntityExtId() bool {
	if o != nil && !IsNil(o.SourceEntityExtId) {
		return true
	}

	return false
}

// SetSourceEntityExtId gets a reference to the given string and assigns it to the SourceEntityExtId field.
func (o *HciAlarm) SetSourceEntityExtId(v string) {
	o.SourceEntityExtId = &v
}

// GetSourceEntityName returns the SourceEntityName field value if set, zero value otherwise.
func (o *HciAlarm) GetSourceEntityName() string {
	if o == nil || IsNil(o.SourceEntityName) {
		var ret string
		return ret
	}
	return *o.SourceEntityName
}

// GetSourceEntityNameOk returns a tuple with the SourceEntityName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HciAlarm) GetSourceEntityNameOk() (*string, bool) {
	if o == nil || IsNil(o.SourceEntityName) {
		return nil, false
	}
	return o.SourceEntityName, true
}

// HasSourceEntityName returns a boolean if a field has been set.
func (o *HciAlarm) HasSourceEntityName() bool {
	if o != nil && !IsNil(o.SourceEntityName) {
		return true
	}

	return false
}

// SetSourceEntityName gets a reference to the given string and assigns it to the SourceEntityName field.
func (o *HciAlarm) SetSourceEntityName(v string) {
	o.SourceEntityName = &v
}

// GetSourceEntityType returns the SourceEntityType field value if set, zero value otherwise.
func (o *HciAlarm) GetSourceEntityType() string {
	if o == nil || IsNil(o.SourceEntityType) {
		var ret string
		return ret
	}
	return *o.SourceEntityType
}

// GetSourceEntityTypeOk returns a tuple with the SourceEntityType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HciAlarm) GetSourceEntityTypeOk() (*string, bool) {
	if o == nil || IsNil(o.SourceEntityType) {
		return nil, false
	}
	return o.SourceEntityType, true
}

// HasSourceEntityType returns a boolean if a field has been set.
func (o *HciAlarm) HasSourceEntityType() bool {
	if o != nil && !IsNil(o.SourceEntityType) {
		return true
	}

	return false
}

// SetSourceEntityType gets a reference to the given string and assigns it to the SourceEntityType field.
func (o *HciAlarm) SetSourceEntityType(v string) {
	o.SourceEntityType = &v
}

// GetTitle returns the Title field value if set, zero value otherwise.
func (o *HciAlarm) GetTitle() string {
	if o == nil || IsNil(o.Title) {
		var ret string
		return ret
	}
	return *o.Title
}

// GetTitleOk returns a tuple with the Title field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HciAlarm) GetTitleOk() (*string, bool) {
	if o == nil || IsNil(o.Title) {
		return nil, false
	}
	return o.Title, true
}

// HasTitle returns a boolean if a field has been set.
func (o *HciAlarm) HasTitle() bool {
	if o != nil && !IsNil(o.Title) {
		return true
	}

	return false
}

// SetTitle gets a reference to the given string and assigns it to the Title field.
func (o *HciAlarm) SetTitle(v string) {
	o.Title = &v
}

// GetCluster returns the Cluster field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HciAlarm) GetCluster() HciClusterRelationship {
	if o == nil || IsNil(o.Cluster.Get()) {
		var ret HciClusterRelationship
		return ret
	}
	return *o.Cluster.Get()
}

// GetClusterOk returns a tuple with the Cluster field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HciAlarm) GetClusterOk() (*HciClusterRelationship, bool) {
	if o == nil {
		return nil, false
	}
	return o.Cluster.Get(), o.Cluster.IsSet()
}

// HasCluster returns a boolean if a field has been set.
func (o *HciAlarm) HasCluster() bool {
	if o != nil && o.Cluster.IsSet() {
		return true
	}

	return false
}

// SetCluster gets a reference to the given NullableHciClusterRelationship and assigns it to the Cluster field.
func (o *HciAlarm) SetCluster(v HciClusterRelationship) {
	o.Cluster.Set(&v)
}

// SetClusterNil sets the value for Cluster to be an explicit nil
func (o *HciAlarm) SetClusterNil() {
	o.Cluster.Set(nil)
}

// UnsetCluster ensures that no value is present for Cluster, not even an explicit nil
func (o *HciAlarm) UnsetCluster() {
	o.Cluster.Unset()
}

// GetRegisteredDevice returns the RegisteredDevice field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HciAlarm) GetRegisteredDevice() AssetDeviceRegistrationRelationship {
	if o == nil || IsNil(o.RegisteredDevice.Get()) {
		var ret AssetDeviceRegistrationRelationship
		return ret
	}
	return *o.RegisteredDevice.Get()
}

// GetRegisteredDeviceOk returns a tuple with the RegisteredDevice field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HciAlarm) GetRegisteredDeviceOk() (*AssetDeviceRegistrationRelationship, bool) {
	if o == nil {
		return nil, false
	}
	return o.RegisteredDevice.Get(), o.RegisteredDevice.IsSet()
}

// HasRegisteredDevice returns a boolean if a field has been set.
func (o *HciAlarm) HasRegisteredDevice() bool {
	if o != nil && o.RegisteredDevice.IsSet() {
		return true
	}

	return false
}

// SetRegisteredDevice gets a reference to the given NullableAssetDeviceRegistrationRelationship and assigns it to the RegisteredDevice field.
func (o *HciAlarm) SetRegisteredDevice(v AssetDeviceRegistrationRelationship) {
	o.RegisteredDevice.Set(&v)
}

// SetRegisteredDeviceNil sets the value for RegisteredDevice to be an explicit nil
func (o *HciAlarm) SetRegisteredDeviceNil() {
	o.RegisteredDevice.Set(nil)
}

// UnsetRegisteredDevice ensures that no value is present for RegisteredDevice, not even an explicit nil
func (o *HciAlarm) UnsetRegisteredDevice() {
	o.RegisteredDevice.Unset()
}

func (o HciAlarm) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o HciAlarm) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	serializedMoBaseMo, errMoBaseMo := json.Marshal(o.MoBaseMo)
	if errMoBaseMo != nil {
		return map[string]interface{}{}, errMoBaseMo
	}
	errMoBaseMo = json.Unmarshal([]byte(serializedMoBaseMo), &toSerialize)
	if errMoBaseMo != nil {
		return map[string]interface{}{}, errMoBaseMo
	}
	if _, exists := toSerialize["ClassId"]; !exists {
		toSerialize["ClassId"] = o.GetDefaultClassId()
	}
	toSerialize["ClassId"] = o.ClassId
	if _, exists := toSerialize["ObjectType"]; !exists {
		toSerialize["ObjectType"] = o.GetDefaultObjectType()
	}
	toSerialize["ObjectType"] = o.ObjectType
	if !IsNil(o.AlarmExtId) {
		toSerialize["AlarmExtId"] = o.AlarmExtId
	}
	if !IsNil(o.AlertType) {
		toSerialize["AlertType"] = o.AlertType
	}
	if !IsNil(o.ClusterExtId) {
		toSerialize["ClusterExtId"] = o.ClusterExtId
	}
	if !IsNil(o.IsResolved) {
		toSerialize["IsResolved"] = o.IsResolved
	}
	if !IsNil(o.Message) {
		toSerialize["Message"] = o.Message
	}
	if !IsNil(o.OriginAcknowledgeTime) {
		toSerialize["OriginAcknowledgeTime"] = o.OriginAcknowledgeTime
	}
	if !IsNil(o.OriginCreationTime) {
		toSerialize["OriginCreationTime"] = o.OriginCreationTime
	}
	if !IsNil(o.OriginIsAcknowledged) {
		toSerialize["OriginIsAcknowledged"] = o.OriginIsAcknowledged
	}
	if o.Parameters != nil {
		toSerialize["Parameters"] = o.Parameters
	}
	if !IsNil(o.ResolvedTime) {
		toSerialize["ResolvedTime"] = o.ResolvedTime
	}
	if !IsNil(o.Severity) {
		toSerialize["Severity"] = o.Severity
	}
	if !IsNil(o.SourceEntityExtId) {
		toSerialize["SourceEntityExtId"] = o.SourceEntityExtId
	}
	if !IsNil(o.SourceEntityName) {
		toSerialize["SourceEntityName"] = o.SourceEntityName
	}
	if !IsNil(o.SourceEntityType) {
		toSerialize["SourceEntityType"] = o.SourceEntityType
	}
	if !IsNil(o.Title) {
		toSerialize["Title"] = o.Title
	}
	if o.Cluster.IsSet() {
		toSerialize["Cluster"] = o.Cluster.Get()
	}
	if o.RegisteredDevice.IsSet() {
		toSerialize["RegisteredDevice"] = o.RegisteredDevice.Get()
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *HciAlarm) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"ClassId",
		"ObjectType",
	}

	// defaultValueFuncMap captures the default values for required properties.
	// These values are used when required properties are missing from the payload.
	defaultValueFuncMap := map[string]func() interface{}{
		"ClassId":    o.GetDefaultClassId,
		"ObjectType": o.GetDefaultObjectType,
	}
	var defaultValueApplied bool
	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			if _, ok := defaultValueFuncMap[requiredProperty]; ok {
				allProperties[requiredProperty] = defaultValueFuncMap[requiredProperty]()
				defaultValueApplied = true
			}
		}
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	if defaultValueApplied {
		data, err = json.Marshal(allProperties)
		if err != nil {
			return err
		}
	}
	type HciAlarmWithoutEmbeddedStruct struct {
		// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.
		ClassId string `json:"ClassId"`
		// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
		ObjectType string `json:"ObjectType"`
		// The unique identifier for the alarm on the endpoint.
		AlarmExtId *string `json:"AlarmExtId,omitempty"`
		// The code for the reported alarm.
		AlertType *string `json:"AlertType,omitempty"`
		// The unique identifer for the cluster associated with the source entity on the endpoint.
		ClusterExtId *string `json:"ClusterExtId,omitempty"`
		// The status of the alarm. If an alarm is resolved, this value is set as true on the endpoint.
		IsResolved *bool `json:"IsResolved,omitempty"`
		// The description from the endpoint explaining the cause of the alarm.
		Message *string `json:"Message,omitempty"`
		// The time the alarm was acknowledged on the endpoint.
		OriginAcknowledgeTime *time.Time `json:"OriginAcknowledgeTime,omitempty"`
		// The time the alarm was created on the endpoint.
		OriginCreationTime *time.Time `json:"OriginCreationTime,omitempty"`
		// The acknowledgement status of the alert on the endpoint.
		OriginIsAcknowledged *bool               `json:"OriginIsAcknowledged,omitempty"`
		Parameters           []HciAlarmParameter `json:"Parameters,omitempty"`
		// The time the alarm was resolved on the endpoint.
		ResolvedTime *time.Time `json:"ResolvedTime,omitempty"`
		// The severity of the alarm. Valid values are Critical, Warning, Info. * `None` - The Enum value None represents that there is no severity. * `Info` - The Enum value Info represents the Informational level of severity. * `Critical` - The Enum value Critical represents the Critical level of severity. * `Warning` - The Enum value Warning represents the Warning level of severity. * `Cleared` - The Enum value Cleared represents that the alarm severity has been cleared.
		Severity *string `json:"Severity,omitempty"`
		// The unique identifer for the entity on the endpoint for which the alarm was raised.
		SourceEntityExtId *string `json:"SourceEntityExtId,omitempty"`
		// The name of the entity on the endpoint for which the alarm was raised.
		SourceEntityName *string `json:"SourceEntityName,omitempty"`
		// The object type for the entity corresponding to the objects inventoried.
		SourceEntityType *string `json:"SourceEntityType,omitempty"`
		// The title of the reported alarm.
		Title            *string                                     `json:"Title,omitempty"`
		Cluster          NullableHciClusterRelationship              `json:"Cluster,omitempty"`
		RegisteredDevice NullableAssetDeviceRegistrationRelationship `json:"RegisteredDevice,omitempty"`
	}

	varHciAlarmWithoutEmbeddedStruct := HciAlarmWithoutEmbeddedStruct{}

	err = json.Unmarshal(data, &varHciAlarmWithoutEmbeddedStruct)
	if err == nil {
		varHciAlarm := _HciAlarm{}
		varHciAlarm.ClassId = varHciAlarmWithoutEmbeddedStruct.ClassId
		varHciAlarm.ObjectType = varHciAlarmWithoutEmbeddedStruct.ObjectType
		varHciAlarm.AlarmExtId = varHciAlarmWithoutEmbeddedStruct.AlarmExtId
		varHciAlarm.AlertType = varHciAlarmWithoutEmbeddedStruct.AlertType
		varHciAlarm.ClusterExtId = varHciAlarmWithoutEmbeddedStruct.ClusterExtId
		varHciAlarm.IsResolved = varHciAlarmWithoutEmbeddedStruct.IsResolved
		varHciAlarm.Message = varHciAlarmWithoutEmbeddedStruct.Message
		varHciAlarm.OriginAcknowledgeTime = varHciAlarmWithoutEmbeddedStruct.OriginAcknowledgeTime
		varHciAlarm.OriginCreationTime = varHciAlarmWithoutEmbeddedStruct.OriginCreationTime
		varHciAlarm.OriginIsAcknowledged = varHciAlarmWithoutEmbeddedStruct.OriginIsAcknowledged
		varHciAlarm.Parameters = varHciAlarmWithoutEmbeddedStruct.Parameters
		varHciAlarm.ResolvedTime = varHciAlarmWithoutEmbeddedStruct.ResolvedTime
		varHciAlarm.Severity = varHciAlarmWithoutEmbeddedStruct.Severity
		varHciAlarm.SourceEntityExtId = varHciAlarmWithoutEmbeddedStruct.SourceEntityExtId
		varHciAlarm.SourceEntityName = varHciAlarmWithoutEmbeddedStruct.SourceEntityName
		varHciAlarm.SourceEntityType = varHciAlarmWithoutEmbeddedStruct.SourceEntityType
		varHciAlarm.Title = varHciAlarmWithoutEmbeddedStruct.Title
		varHciAlarm.Cluster = varHciAlarmWithoutEmbeddedStruct.Cluster
		varHciAlarm.RegisteredDevice = varHciAlarmWithoutEmbeddedStruct.RegisteredDevice
		*o = HciAlarm(varHciAlarm)
	} else {
		return err
	}

	varHciAlarm := _HciAlarm{}

	err = json.Unmarshal(data, &varHciAlarm)
	if err == nil {
		o.MoBaseMo = varHciAlarm.MoBaseMo
	} else {
		return err
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "ClassId")
		delete(additionalProperties, "ObjectType")
		delete(additionalProperties, "AlarmExtId")
		delete(additionalProperties, "AlertType")
		delete(additionalProperties, "ClusterExtId")
		delete(additionalProperties, "IsResolved")
		delete(additionalProperties, "Message")
		delete(additionalProperties, "OriginAcknowledgeTime")
		delete(additionalProperties, "OriginCreationTime")
		delete(additionalProperties, "OriginIsAcknowledged")
		delete(additionalProperties, "Parameters")
		delete(additionalProperties, "ResolvedTime")
		delete(additionalProperties, "Severity")
		delete(additionalProperties, "SourceEntityExtId")
		delete(additionalProperties, "SourceEntityName")
		delete(additionalProperties, "SourceEntityType")
		delete(additionalProperties, "Title")
		delete(additionalProperties, "Cluster")
		delete(additionalProperties, "RegisteredDevice")

		// remove fields from embedded structs
		reflectMoBaseMo := reflect.ValueOf(o.MoBaseMo)
		for i := 0; i < reflectMoBaseMo.Type().NumField(); i++ {
			t := reflectMoBaseMo.Type().Field(i)

			if jsonTag := t.Tag.Get("json"); jsonTag != "" {
				fieldName := ""
				if commaIdx := strings.Index(jsonTag, ","); commaIdx > 0 {
					fieldName = jsonTag[:commaIdx]
				} else {
					fieldName = jsonTag
				}
				if fieldName != "AdditionalProperties" {
					delete(additionalProperties, fieldName)
				}
			}
		}

		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableHciAlarm struct {
	value *HciAlarm
	isSet bool
}

func (v NullableHciAlarm) Get() *HciAlarm {
	return v.value
}

func (v *NullableHciAlarm) Set(val *HciAlarm) {
	v.value = val
	v.isSet = true
}

func (v NullableHciAlarm) IsSet() bool {
	return v.isSet
}

func (v *NullableHciAlarm) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHciAlarm(val *HciAlarm) *NullableHciAlarm {
	return &NullableHciAlarm{value: val, isSet: true}
}

func (v NullableHciAlarm) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHciAlarm) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
