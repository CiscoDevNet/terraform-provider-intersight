/*
Cisco Intersight

Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations. The Intersight OpenAPI document defines the complete set of properties that are returned in the HTTP response. From that perspective, a client can expect that no additional properties are returned, unless these properties are explicitly defined in the OpenAPI document. However, when a client uses an older version of the Intersight OpenAPI document, the server may send additional properties because the software is more recent than the client. In that case, the client may receive properties that it does not know about. Some generated SDKs perform a strict validation of the HTTP response body against the OpenAPI document.

API version: 1.0.11-2024100405
Contact: intersight@cisco.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package intersight

import (
	"encoding/json"
	"fmt"
)

// checks if the TelemetryDruidListFilteredVirtualColumn type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TelemetryDruidListFilteredVirtualColumn{}

// TelemetryDruidListFilteredVirtualColumn This virtual column provides an alternative way to use 'list filtered' dimension spec as a virtual column. It has optimized access to the underlying column value indexes that can provide a small performance improvement in some cases. Refer https://druid.apache.org/docs/latest/querying/dimensionspecs/#filtered-dimensionspecs for more details.
type TelemetryDruidListFilteredVirtualColumn struct {
	// The virtual-column type.
	Type string `json:"type"`
	// name of the virtual column.
	Name *string `json:"name,omitempty"`
	// Name of the multi-value string input column to filter.
	Delegate *string `json:"delegate,omitempty"`
	// Set of string value to allow or deny.
	Values []string `json:"values,omitempty"`
	// If set to true, the virtual column will allow only the values in the list. If set to false, the virtual column will provide all values except those specified.
	IsAllowList          *bool `json:"isAllowList,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _TelemetryDruidListFilteredVirtualColumn TelemetryDruidListFilteredVirtualColumn

// NewTelemetryDruidListFilteredVirtualColumn instantiates a new TelemetryDruidListFilteredVirtualColumn object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTelemetryDruidListFilteredVirtualColumn(type_ string) *TelemetryDruidListFilteredVirtualColumn {
	this := TelemetryDruidListFilteredVirtualColumn{}
	this.Type = type_
	var isAllowList bool = true
	this.IsAllowList = &isAllowList
	return &this
}

// NewTelemetryDruidListFilteredVirtualColumnWithDefaults instantiates a new TelemetryDruidListFilteredVirtualColumn object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTelemetryDruidListFilteredVirtualColumnWithDefaults() *TelemetryDruidListFilteredVirtualColumn {
	this := TelemetryDruidListFilteredVirtualColumn{}
	var isAllowList bool = true
	this.IsAllowList = &isAllowList
	return &this
}

// GetType returns the Type field value
func (o *TelemetryDruidListFilteredVirtualColumn) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *TelemetryDruidListFilteredVirtualColumn) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *TelemetryDruidListFilteredVirtualColumn) SetType(v string) {
	o.Type = v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *TelemetryDruidListFilteredVirtualColumn) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TelemetryDruidListFilteredVirtualColumn) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *TelemetryDruidListFilteredVirtualColumn) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *TelemetryDruidListFilteredVirtualColumn) SetName(v string) {
	o.Name = &v
}

// GetDelegate returns the Delegate field value if set, zero value otherwise.
func (o *TelemetryDruidListFilteredVirtualColumn) GetDelegate() string {
	if o == nil || IsNil(o.Delegate) {
		var ret string
		return ret
	}
	return *o.Delegate
}

// GetDelegateOk returns a tuple with the Delegate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TelemetryDruidListFilteredVirtualColumn) GetDelegateOk() (*string, bool) {
	if o == nil || IsNil(o.Delegate) {
		return nil, false
	}
	return o.Delegate, true
}

// HasDelegate returns a boolean if a field has been set.
func (o *TelemetryDruidListFilteredVirtualColumn) HasDelegate() bool {
	if o != nil && !IsNil(o.Delegate) {
		return true
	}

	return false
}

// SetDelegate gets a reference to the given string and assigns it to the Delegate field.
func (o *TelemetryDruidListFilteredVirtualColumn) SetDelegate(v string) {
	o.Delegate = &v
}

// GetValues returns the Values field value if set, zero value otherwise.
func (o *TelemetryDruidListFilteredVirtualColumn) GetValues() []string {
	if o == nil || IsNil(o.Values) {
		var ret []string
		return ret
	}
	return o.Values
}

// GetValuesOk returns a tuple with the Values field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TelemetryDruidListFilteredVirtualColumn) GetValuesOk() ([]string, bool) {
	if o == nil || IsNil(o.Values) {
		return nil, false
	}
	return o.Values, true
}

// HasValues returns a boolean if a field has been set.
func (o *TelemetryDruidListFilteredVirtualColumn) HasValues() bool {
	if o != nil && !IsNil(o.Values) {
		return true
	}

	return false
}

// SetValues gets a reference to the given []string and assigns it to the Values field.
func (o *TelemetryDruidListFilteredVirtualColumn) SetValues(v []string) {
	o.Values = v
}

// GetIsAllowList returns the IsAllowList field value if set, zero value otherwise.
func (o *TelemetryDruidListFilteredVirtualColumn) GetIsAllowList() bool {
	if o == nil || IsNil(o.IsAllowList) {
		var ret bool
		return ret
	}
	return *o.IsAllowList
}

// GetIsAllowListOk returns a tuple with the IsAllowList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TelemetryDruidListFilteredVirtualColumn) GetIsAllowListOk() (*bool, bool) {
	if o == nil || IsNil(o.IsAllowList) {
		return nil, false
	}
	return o.IsAllowList, true
}

// HasIsAllowList returns a boolean if a field has been set.
func (o *TelemetryDruidListFilteredVirtualColumn) HasIsAllowList() bool {
	if o != nil && !IsNil(o.IsAllowList) {
		return true
	}

	return false
}

// SetIsAllowList gets a reference to the given bool and assigns it to the IsAllowList field.
func (o *TelemetryDruidListFilteredVirtualColumn) SetIsAllowList(v bool) {
	o.IsAllowList = &v
}

func (o TelemetryDruidListFilteredVirtualColumn) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TelemetryDruidListFilteredVirtualColumn) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["type"] = o.Type
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Delegate) {
		toSerialize["delegate"] = o.Delegate
	}
	if !IsNil(o.Values) {
		toSerialize["values"] = o.Values
	}
	if !IsNil(o.IsAllowList) {
		toSerialize["isAllowList"] = o.IsAllowList
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *TelemetryDruidListFilteredVirtualColumn) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"type",
	}

	// defaultValueFuncMap captures the default values for required properties.
	// These values are used when required properties are missing from the payload.
	defaultValueFuncMap := map[string]func() interface{}{}
	var defaultValueApplied bool
	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			if _, ok := defaultValueFuncMap[requiredProperty]; ok {
				allProperties[requiredProperty] = defaultValueFuncMap[requiredProperty]()
				defaultValueApplied = true
			}
		}
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	if defaultValueApplied {
		data, err = json.Marshal(allProperties)
		if err != nil {
			return err
		}
	}
	varTelemetryDruidListFilteredVirtualColumn := _TelemetryDruidListFilteredVirtualColumn{}

	err = json.Unmarshal(data, &varTelemetryDruidListFilteredVirtualColumn)

	if err != nil {
		return err
	}

	*o = TelemetryDruidListFilteredVirtualColumn(varTelemetryDruidListFilteredVirtualColumn)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "type")
		delete(additionalProperties, "name")
		delete(additionalProperties, "delegate")
		delete(additionalProperties, "values")
		delete(additionalProperties, "isAllowList")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableTelemetryDruidListFilteredVirtualColumn struct {
	value *TelemetryDruidListFilteredVirtualColumn
	isSet bool
}

func (v NullableTelemetryDruidListFilteredVirtualColumn) Get() *TelemetryDruidListFilteredVirtualColumn {
	return v.value
}

func (v *NullableTelemetryDruidListFilteredVirtualColumn) Set(val *TelemetryDruidListFilteredVirtualColumn) {
	v.value = val
	v.isSet = true
}

func (v NullableTelemetryDruidListFilteredVirtualColumn) IsSet() bool {
	return v.isSet
}

func (v *NullableTelemetryDruidListFilteredVirtualColumn) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTelemetryDruidListFilteredVirtualColumn(val *TelemetryDruidListFilteredVirtualColumn) *NullableTelemetryDruidListFilteredVirtualColumn {
	return &NullableTelemetryDruidListFilteredVirtualColumn{value: val, isSet: true}
}

func (v NullableTelemetryDruidListFilteredVirtualColumn) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTelemetryDruidListFilteredVirtualColumn) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
