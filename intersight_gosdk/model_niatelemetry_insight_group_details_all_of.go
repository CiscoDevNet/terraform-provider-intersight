/*
Cisco Intersight

Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations. The Intersight OpenAPI document defines the complete set of properties that are returned in the HTTP response. From that perspective, a client can expect that no additional properties are returned, unless these properties are explicitly defined in the OpenAPI document. However, when a client uses an older version of the Intersight OpenAPI document, the server may send additional properties because the software is more recent than the client. In that case, the client may receive properties that it does not know about. Some generated SDKs perform a strict validation of the HTTP response body against the OpenAPI document.

API version: 1.0.9-5808
Contact: intersight@cisco.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package intersight

import (
	"encoding/json"
)

// NiatelemetryInsightGroupDetailsAllOf Definition of the list of properties defined in 'niatelemetry.InsightGroupDetails', excluding properties defined in parent classes.
type NiatelemetryInsightGroupDetailsAllOf struct {
	// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.
	ClassId string `json:"ClassId"`
	// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
	ObjectType string `json:"ObjectType"`
	// Alert rules count of the Insight group.
	AlertRulesCount *int64 `json:"AlertRulesCount,omitempty"`
	// Analysis setting status of the Insight group.
	AnalysisSettingsStatus *string `json:"AnalysisSettingsStatus,omitempty"`
	// Bug scan settings status of the Insight group.
	BugScanSettingsStatus *string `json:"BugScanSettingsStatus,omitempty"`
	// Delta analysis job count of the Insight group.
	DeltaAnalysisJobCount *int64 `json:"DeltaAnalysisJobCount,omitempty"`
	// Email settings count of the Insight group.
	EmailSettingsCount *int64 `json:"EmailSettingsCount,omitempty"`
	// Flow setting count of the Insight group.
	FlowSettingsCount *int64 `json:"FlowSettingsCount,omitempty"`
	// Name of the Insight group.
	GroupName    *string             `json:"GroupName,omitempty"`
	InsightSites []NiatelemetrySites `json:"InsightSites,omitempty"`
	// Kafka settings count of the Insight group.
	KafkaSettingsCount *int64 `json:"KafkaSettingsCount,omitempty"`
	// Microburst setting status of the Insight group.
	MicroBurstSettingsStatus *string `json:"MicroBurstSettingsStatus,omitempty"`
	// Prechange analysis count of the Insight group.
	PrechangeAnalysisCount *int64 `json:"PrechangeAnalysisCount,omitempty"`
	// TAC collection config count of the Insight group.
	TacCollectionConfigCount *int64                               `json:"TacCollectionConfigCount,omitempty"`
	RegisteredDevice         *AssetDeviceRegistrationRelationship `json:"RegisteredDevice,omitempty"`
	AdditionalProperties     map[string]interface{}
}

type _NiatelemetryInsightGroupDetailsAllOf NiatelemetryInsightGroupDetailsAllOf

// NewNiatelemetryInsightGroupDetailsAllOf instantiates a new NiatelemetryInsightGroupDetailsAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNiatelemetryInsightGroupDetailsAllOf(classId string, objectType string) *NiatelemetryInsightGroupDetailsAllOf {
	this := NiatelemetryInsightGroupDetailsAllOf{}
	this.ClassId = classId
	this.ObjectType = objectType
	return &this
}

// NewNiatelemetryInsightGroupDetailsAllOfWithDefaults instantiates a new NiatelemetryInsightGroupDetailsAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNiatelemetryInsightGroupDetailsAllOfWithDefaults() *NiatelemetryInsightGroupDetailsAllOf {
	this := NiatelemetryInsightGroupDetailsAllOf{}
	var classId string = "niatelemetry.InsightGroupDetails"
	this.ClassId = classId
	var objectType string = "niatelemetry.InsightGroupDetails"
	this.ObjectType = objectType
	return &this
}

// GetClassId returns the ClassId field value
func (o *NiatelemetryInsightGroupDetailsAllOf) GetClassId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ClassId
}

// GetClassIdOk returns a tuple with the ClassId field value
// and a boolean to check if the value has been set.
func (o *NiatelemetryInsightGroupDetailsAllOf) GetClassIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ClassId, true
}

// SetClassId sets field value
func (o *NiatelemetryInsightGroupDetailsAllOf) SetClassId(v string) {
	o.ClassId = v
}

// GetObjectType returns the ObjectType field value
func (o *NiatelemetryInsightGroupDetailsAllOf) GetObjectType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ObjectType
}

// GetObjectTypeOk returns a tuple with the ObjectType field value
// and a boolean to check if the value has been set.
func (o *NiatelemetryInsightGroupDetailsAllOf) GetObjectTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ObjectType, true
}

// SetObjectType sets field value
func (o *NiatelemetryInsightGroupDetailsAllOf) SetObjectType(v string) {
	o.ObjectType = v
}

// GetAlertRulesCount returns the AlertRulesCount field value if set, zero value otherwise.
func (o *NiatelemetryInsightGroupDetailsAllOf) GetAlertRulesCount() int64 {
	if o == nil || o.AlertRulesCount == nil {
		var ret int64
		return ret
	}
	return *o.AlertRulesCount
}

// GetAlertRulesCountOk returns a tuple with the AlertRulesCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NiatelemetryInsightGroupDetailsAllOf) GetAlertRulesCountOk() (*int64, bool) {
	if o == nil || o.AlertRulesCount == nil {
		return nil, false
	}
	return o.AlertRulesCount, true
}

// HasAlertRulesCount returns a boolean if a field has been set.
func (o *NiatelemetryInsightGroupDetailsAllOf) HasAlertRulesCount() bool {
	if o != nil && o.AlertRulesCount != nil {
		return true
	}

	return false
}

// SetAlertRulesCount gets a reference to the given int64 and assigns it to the AlertRulesCount field.
func (o *NiatelemetryInsightGroupDetailsAllOf) SetAlertRulesCount(v int64) {
	o.AlertRulesCount = &v
}

// GetAnalysisSettingsStatus returns the AnalysisSettingsStatus field value if set, zero value otherwise.
func (o *NiatelemetryInsightGroupDetailsAllOf) GetAnalysisSettingsStatus() string {
	if o == nil || o.AnalysisSettingsStatus == nil {
		var ret string
		return ret
	}
	return *o.AnalysisSettingsStatus
}

// GetAnalysisSettingsStatusOk returns a tuple with the AnalysisSettingsStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NiatelemetryInsightGroupDetailsAllOf) GetAnalysisSettingsStatusOk() (*string, bool) {
	if o == nil || o.AnalysisSettingsStatus == nil {
		return nil, false
	}
	return o.AnalysisSettingsStatus, true
}

// HasAnalysisSettingsStatus returns a boolean if a field has been set.
func (o *NiatelemetryInsightGroupDetailsAllOf) HasAnalysisSettingsStatus() bool {
	if o != nil && o.AnalysisSettingsStatus != nil {
		return true
	}

	return false
}

// SetAnalysisSettingsStatus gets a reference to the given string and assigns it to the AnalysisSettingsStatus field.
func (o *NiatelemetryInsightGroupDetailsAllOf) SetAnalysisSettingsStatus(v string) {
	o.AnalysisSettingsStatus = &v
}

// GetBugScanSettingsStatus returns the BugScanSettingsStatus field value if set, zero value otherwise.
func (o *NiatelemetryInsightGroupDetailsAllOf) GetBugScanSettingsStatus() string {
	if o == nil || o.BugScanSettingsStatus == nil {
		var ret string
		return ret
	}
	return *o.BugScanSettingsStatus
}

// GetBugScanSettingsStatusOk returns a tuple with the BugScanSettingsStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NiatelemetryInsightGroupDetailsAllOf) GetBugScanSettingsStatusOk() (*string, bool) {
	if o == nil || o.BugScanSettingsStatus == nil {
		return nil, false
	}
	return o.BugScanSettingsStatus, true
}

// HasBugScanSettingsStatus returns a boolean if a field has been set.
func (o *NiatelemetryInsightGroupDetailsAllOf) HasBugScanSettingsStatus() bool {
	if o != nil && o.BugScanSettingsStatus != nil {
		return true
	}

	return false
}

// SetBugScanSettingsStatus gets a reference to the given string and assigns it to the BugScanSettingsStatus field.
func (o *NiatelemetryInsightGroupDetailsAllOf) SetBugScanSettingsStatus(v string) {
	o.BugScanSettingsStatus = &v
}

// GetDeltaAnalysisJobCount returns the DeltaAnalysisJobCount field value if set, zero value otherwise.
func (o *NiatelemetryInsightGroupDetailsAllOf) GetDeltaAnalysisJobCount() int64 {
	if o == nil || o.DeltaAnalysisJobCount == nil {
		var ret int64
		return ret
	}
	return *o.DeltaAnalysisJobCount
}

// GetDeltaAnalysisJobCountOk returns a tuple with the DeltaAnalysisJobCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NiatelemetryInsightGroupDetailsAllOf) GetDeltaAnalysisJobCountOk() (*int64, bool) {
	if o == nil || o.DeltaAnalysisJobCount == nil {
		return nil, false
	}
	return o.DeltaAnalysisJobCount, true
}

// HasDeltaAnalysisJobCount returns a boolean if a field has been set.
func (o *NiatelemetryInsightGroupDetailsAllOf) HasDeltaAnalysisJobCount() bool {
	if o != nil && o.DeltaAnalysisJobCount != nil {
		return true
	}

	return false
}

// SetDeltaAnalysisJobCount gets a reference to the given int64 and assigns it to the DeltaAnalysisJobCount field.
func (o *NiatelemetryInsightGroupDetailsAllOf) SetDeltaAnalysisJobCount(v int64) {
	o.DeltaAnalysisJobCount = &v
}

// GetEmailSettingsCount returns the EmailSettingsCount field value if set, zero value otherwise.
func (o *NiatelemetryInsightGroupDetailsAllOf) GetEmailSettingsCount() int64 {
	if o == nil || o.EmailSettingsCount == nil {
		var ret int64
		return ret
	}
	return *o.EmailSettingsCount
}

// GetEmailSettingsCountOk returns a tuple with the EmailSettingsCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NiatelemetryInsightGroupDetailsAllOf) GetEmailSettingsCountOk() (*int64, bool) {
	if o == nil || o.EmailSettingsCount == nil {
		return nil, false
	}
	return o.EmailSettingsCount, true
}

// HasEmailSettingsCount returns a boolean if a field has been set.
func (o *NiatelemetryInsightGroupDetailsAllOf) HasEmailSettingsCount() bool {
	if o != nil && o.EmailSettingsCount != nil {
		return true
	}

	return false
}

// SetEmailSettingsCount gets a reference to the given int64 and assigns it to the EmailSettingsCount field.
func (o *NiatelemetryInsightGroupDetailsAllOf) SetEmailSettingsCount(v int64) {
	o.EmailSettingsCount = &v
}

// GetFlowSettingsCount returns the FlowSettingsCount field value if set, zero value otherwise.
func (o *NiatelemetryInsightGroupDetailsAllOf) GetFlowSettingsCount() int64 {
	if o == nil || o.FlowSettingsCount == nil {
		var ret int64
		return ret
	}
	return *o.FlowSettingsCount
}

// GetFlowSettingsCountOk returns a tuple with the FlowSettingsCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NiatelemetryInsightGroupDetailsAllOf) GetFlowSettingsCountOk() (*int64, bool) {
	if o == nil || o.FlowSettingsCount == nil {
		return nil, false
	}
	return o.FlowSettingsCount, true
}

// HasFlowSettingsCount returns a boolean if a field has been set.
func (o *NiatelemetryInsightGroupDetailsAllOf) HasFlowSettingsCount() bool {
	if o != nil && o.FlowSettingsCount != nil {
		return true
	}

	return false
}

// SetFlowSettingsCount gets a reference to the given int64 and assigns it to the FlowSettingsCount field.
func (o *NiatelemetryInsightGroupDetailsAllOf) SetFlowSettingsCount(v int64) {
	o.FlowSettingsCount = &v
}

// GetGroupName returns the GroupName field value if set, zero value otherwise.
func (o *NiatelemetryInsightGroupDetailsAllOf) GetGroupName() string {
	if o == nil || o.GroupName == nil {
		var ret string
		return ret
	}
	return *o.GroupName
}

// GetGroupNameOk returns a tuple with the GroupName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NiatelemetryInsightGroupDetailsAllOf) GetGroupNameOk() (*string, bool) {
	if o == nil || o.GroupName == nil {
		return nil, false
	}
	return o.GroupName, true
}

// HasGroupName returns a boolean if a field has been set.
func (o *NiatelemetryInsightGroupDetailsAllOf) HasGroupName() bool {
	if o != nil && o.GroupName != nil {
		return true
	}

	return false
}

// SetGroupName gets a reference to the given string and assigns it to the GroupName field.
func (o *NiatelemetryInsightGroupDetailsAllOf) SetGroupName(v string) {
	o.GroupName = &v
}

// GetInsightSites returns the InsightSites field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NiatelemetryInsightGroupDetailsAllOf) GetInsightSites() []NiatelemetrySites {
	if o == nil {
		var ret []NiatelemetrySites
		return ret
	}
	return o.InsightSites
}

// GetInsightSitesOk returns a tuple with the InsightSites field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NiatelemetryInsightGroupDetailsAllOf) GetInsightSitesOk() (*[]NiatelemetrySites, bool) {
	if o == nil || o.InsightSites == nil {
		return nil, false
	}
	return &o.InsightSites, true
}

// HasInsightSites returns a boolean if a field has been set.
func (o *NiatelemetryInsightGroupDetailsAllOf) HasInsightSites() bool {
	if o != nil && o.InsightSites != nil {
		return true
	}

	return false
}

// SetInsightSites gets a reference to the given []NiatelemetrySites and assigns it to the InsightSites field.
func (o *NiatelemetryInsightGroupDetailsAllOf) SetInsightSites(v []NiatelemetrySites) {
	o.InsightSites = v
}

// GetKafkaSettingsCount returns the KafkaSettingsCount field value if set, zero value otherwise.
func (o *NiatelemetryInsightGroupDetailsAllOf) GetKafkaSettingsCount() int64 {
	if o == nil || o.KafkaSettingsCount == nil {
		var ret int64
		return ret
	}
	return *o.KafkaSettingsCount
}

// GetKafkaSettingsCountOk returns a tuple with the KafkaSettingsCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NiatelemetryInsightGroupDetailsAllOf) GetKafkaSettingsCountOk() (*int64, bool) {
	if o == nil || o.KafkaSettingsCount == nil {
		return nil, false
	}
	return o.KafkaSettingsCount, true
}

// HasKafkaSettingsCount returns a boolean if a field has been set.
func (o *NiatelemetryInsightGroupDetailsAllOf) HasKafkaSettingsCount() bool {
	if o != nil && o.KafkaSettingsCount != nil {
		return true
	}

	return false
}

// SetKafkaSettingsCount gets a reference to the given int64 and assigns it to the KafkaSettingsCount field.
func (o *NiatelemetryInsightGroupDetailsAllOf) SetKafkaSettingsCount(v int64) {
	o.KafkaSettingsCount = &v
}

// GetMicroBurstSettingsStatus returns the MicroBurstSettingsStatus field value if set, zero value otherwise.
func (o *NiatelemetryInsightGroupDetailsAllOf) GetMicroBurstSettingsStatus() string {
	if o == nil || o.MicroBurstSettingsStatus == nil {
		var ret string
		return ret
	}
	return *o.MicroBurstSettingsStatus
}

// GetMicroBurstSettingsStatusOk returns a tuple with the MicroBurstSettingsStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NiatelemetryInsightGroupDetailsAllOf) GetMicroBurstSettingsStatusOk() (*string, bool) {
	if o == nil || o.MicroBurstSettingsStatus == nil {
		return nil, false
	}
	return o.MicroBurstSettingsStatus, true
}

// HasMicroBurstSettingsStatus returns a boolean if a field has been set.
func (o *NiatelemetryInsightGroupDetailsAllOf) HasMicroBurstSettingsStatus() bool {
	if o != nil && o.MicroBurstSettingsStatus != nil {
		return true
	}

	return false
}

// SetMicroBurstSettingsStatus gets a reference to the given string and assigns it to the MicroBurstSettingsStatus field.
func (o *NiatelemetryInsightGroupDetailsAllOf) SetMicroBurstSettingsStatus(v string) {
	o.MicroBurstSettingsStatus = &v
}

// GetPrechangeAnalysisCount returns the PrechangeAnalysisCount field value if set, zero value otherwise.
func (o *NiatelemetryInsightGroupDetailsAllOf) GetPrechangeAnalysisCount() int64 {
	if o == nil || o.PrechangeAnalysisCount == nil {
		var ret int64
		return ret
	}
	return *o.PrechangeAnalysisCount
}

// GetPrechangeAnalysisCountOk returns a tuple with the PrechangeAnalysisCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NiatelemetryInsightGroupDetailsAllOf) GetPrechangeAnalysisCountOk() (*int64, bool) {
	if o == nil || o.PrechangeAnalysisCount == nil {
		return nil, false
	}
	return o.PrechangeAnalysisCount, true
}

// HasPrechangeAnalysisCount returns a boolean if a field has been set.
func (o *NiatelemetryInsightGroupDetailsAllOf) HasPrechangeAnalysisCount() bool {
	if o != nil && o.PrechangeAnalysisCount != nil {
		return true
	}

	return false
}

// SetPrechangeAnalysisCount gets a reference to the given int64 and assigns it to the PrechangeAnalysisCount field.
func (o *NiatelemetryInsightGroupDetailsAllOf) SetPrechangeAnalysisCount(v int64) {
	o.PrechangeAnalysisCount = &v
}

// GetTacCollectionConfigCount returns the TacCollectionConfigCount field value if set, zero value otherwise.
func (o *NiatelemetryInsightGroupDetailsAllOf) GetTacCollectionConfigCount() int64 {
	if o == nil || o.TacCollectionConfigCount == nil {
		var ret int64
		return ret
	}
	return *o.TacCollectionConfigCount
}

// GetTacCollectionConfigCountOk returns a tuple with the TacCollectionConfigCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NiatelemetryInsightGroupDetailsAllOf) GetTacCollectionConfigCountOk() (*int64, bool) {
	if o == nil || o.TacCollectionConfigCount == nil {
		return nil, false
	}
	return o.TacCollectionConfigCount, true
}

// HasTacCollectionConfigCount returns a boolean if a field has been set.
func (o *NiatelemetryInsightGroupDetailsAllOf) HasTacCollectionConfigCount() bool {
	if o != nil && o.TacCollectionConfigCount != nil {
		return true
	}

	return false
}

// SetTacCollectionConfigCount gets a reference to the given int64 and assigns it to the TacCollectionConfigCount field.
func (o *NiatelemetryInsightGroupDetailsAllOf) SetTacCollectionConfigCount(v int64) {
	o.TacCollectionConfigCount = &v
}

// GetRegisteredDevice returns the RegisteredDevice field value if set, zero value otherwise.
func (o *NiatelemetryInsightGroupDetailsAllOf) GetRegisteredDevice() AssetDeviceRegistrationRelationship {
	if o == nil || o.RegisteredDevice == nil {
		var ret AssetDeviceRegistrationRelationship
		return ret
	}
	return *o.RegisteredDevice
}

// GetRegisteredDeviceOk returns a tuple with the RegisteredDevice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NiatelemetryInsightGroupDetailsAllOf) GetRegisteredDeviceOk() (*AssetDeviceRegistrationRelationship, bool) {
	if o == nil || o.RegisteredDevice == nil {
		return nil, false
	}
	return o.RegisteredDevice, true
}

// HasRegisteredDevice returns a boolean if a field has been set.
func (o *NiatelemetryInsightGroupDetailsAllOf) HasRegisteredDevice() bool {
	if o != nil && o.RegisteredDevice != nil {
		return true
	}

	return false
}

// SetRegisteredDevice gets a reference to the given AssetDeviceRegistrationRelationship and assigns it to the RegisteredDevice field.
func (o *NiatelemetryInsightGroupDetailsAllOf) SetRegisteredDevice(v AssetDeviceRegistrationRelationship) {
	o.RegisteredDevice = &v
}

func (o NiatelemetryInsightGroupDetailsAllOf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["ClassId"] = o.ClassId
	}
	if true {
		toSerialize["ObjectType"] = o.ObjectType
	}
	if o.AlertRulesCount != nil {
		toSerialize["AlertRulesCount"] = o.AlertRulesCount
	}
	if o.AnalysisSettingsStatus != nil {
		toSerialize["AnalysisSettingsStatus"] = o.AnalysisSettingsStatus
	}
	if o.BugScanSettingsStatus != nil {
		toSerialize["BugScanSettingsStatus"] = o.BugScanSettingsStatus
	}
	if o.DeltaAnalysisJobCount != nil {
		toSerialize["DeltaAnalysisJobCount"] = o.DeltaAnalysisJobCount
	}
	if o.EmailSettingsCount != nil {
		toSerialize["EmailSettingsCount"] = o.EmailSettingsCount
	}
	if o.FlowSettingsCount != nil {
		toSerialize["FlowSettingsCount"] = o.FlowSettingsCount
	}
	if o.GroupName != nil {
		toSerialize["GroupName"] = o.GroupName
	}
	if o.InsightSites != nil {
		toSerialize["InsightSites"] = o.InsightSites
	}
	if o.KafkaSettingsCount != nil {
		toSerialize["KafkaSettingsCount"] = o.KafkaSettingsCount
	}
	if o.MicroBurstSettingsStatus != nil {
		toSerialize["MicroBurstSettingsStatus"] = o.MicroBurstSettingsStatus
	}
	if o.PrechangeAnalysisCount != nil {
		toSerialize["PrechangeAnalysisCount"] = o.PrechangeAnalysisCount
	}
	if o.TacCollectionConfigCount != nil {
		toSerialize["TacCollectionConfigCount"] = o.TacCollectionConfigCount
	}
	if o.RegisteredDevice != nil {
		toSerialize["RegisteredDevice"] = o.RegisteredDevice
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *NiatelemetryInsightGroupDetailsAllOf) UnmarshalJSON(bytes []byte) (err error) {
	varNiatelemetryInsightGroupDetailsAllOf := _NiatelemetryInsightGroupDetailsAllOf{}

	if err = json.Unmarshal(bytes, &varNiatelemetryInsightGroupDetailsAllOf); err == nil {
		*o = NiatelemetryInsightGroupDetailsAllOf(varNiatelemetryInsightGroupDetailsAllOf)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "ClassId")
		delete(additionalProperties, "ObjectType")
		delete(additionalProperties, "AlertRulesCount")
		delete(additionalProperties, "AnalysisSettingsStatus")
		delete(additionalProperties, "BugScanSettingsStatus")
		delete(additionalProperties, "DeltaAnalysisJobCount")
		delete(additionalProperties, "EmailSettingsCount")
		delete(additionalProperties, "FlowSettingsCount")
		delete(additionalProperties, "GroupName")
		delete(additionalProperties, "InsightSites")
		delete(additionalProperties, "KafkaSettingsCount")
		delete(additionalProperties, "MicroBurstSettingsStatus")
		delete(additionalProperties, "PrechangeAnalysisCount")
		delete(additionalProperties, "TacCollectionConfigCount")
		delete(additionalProperties, "RegisteredDevice")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableNiatelemetryInsightGroupDetailsAllOf struct {
	value *NiatelemetryInsightGroupDetailsAllOf
	isSet bool
}

func (v NullableNiatelemetryInsightGroupDetailsAllOf) Get() *NiatelemetryInsightGroupDetailsAllOf {
	return v.value
}

func (v *NullableNiatelemetryInsightGroupDetailsAllOf) Set(val *NiatelemetryInsightGroupDetailsAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableNiatelemetryInsightGroupDetailsAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableNiatelemetryInsightGroupDetailsAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNiatelemetryInsightGroupDetailsAllOf(val *NiatelemetryInsightGroupDetailsAllOf) *NullableNiatelemetryInsightGroupDetailsAllOf {
	return &NullableNiatelemetryInsightGroupDetailsAllOf{value: val, isSet: true}
}

func (v NullableNiatelemetryInsightGroupDetailsAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNiatelemetryInsightGroupDetailsAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
