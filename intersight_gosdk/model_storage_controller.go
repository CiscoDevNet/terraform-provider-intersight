/*
 * Cisco Intersight
 *
 * Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations. The Intersight OpenAPI document defines the complete set of properties that are returned in the HTTP response. From that perspective, a client can expect that no additional properties are returned, unless these properties are explicitly defined in the OpenAPI document. However, when a client uses an older version of the Intersight OpenAPI document, the server may send additional properties because the software is more recent than the client. In that case, the client may receive properties that it does not know about. Some generated SDKs perform a strict validation of the HTTP response body against the OpenAPI document. This document was created on 2021-07-21T16:37:30Z.
 *
 * API version: 1.0.9-4403
 * Contact: intersight@cisco.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package intersight

import (
	"encoding/json"
	"reflect"
	"strings"
)

// StorageController Storage Controller present in a server.
type StorageController struct {
	EquipmentBase
	// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.
	ClassId string `json:"ClassId"`
	// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
	ObjectType string `json:"ObjectType"`
	// The flags for the storage controller.
	ControllerFlags *string `json:"ControllerFlags,omitempty"`
	// The Id of the storage controller.
	ControllerId *string `json:"ControllerId,omitempty"`
	// The current status of controller.
	ControllerStatus *string `json:"ControllerStatus,omitempty"`
	// Storage controller has detected disks in foreign config.
	ForeignConfigPresent *bool `json:"ForeignConfigPresent,omitempty"`
	// The hardware revision of controller.
	HwRevision *string `json:"HwRevision,omitempty"`
	// Interface types are Sas, Sata, PCH.
	InterfaceType *string `json:"InterfaceType,omitempty"`
	// Maximum virtual drives that can be created on this Storage Controller.
	MaxVolumesSupported *int64 `json:"MaxVolumesSupported,omitempty"`
	// The CIMC support for out-of-band configuration of controller.
	OobInterfaceSupported *string `json:"OobInterfaceSupported,omitempty"`
	// The current operational state of controller.
	OperState *string `json:"OperState,omitempty"`
	// Operability state of the storage controller.
	Operability *string `json:"Operability,omitempty"`
	// The current pci address of controller.
	PciAddr *string `json:"PciAddr,omitempty"`
	// The pci slot name for the controller.
	PciSlot *string `json:"PciSlot,omitempty"`
	// The RAID levels supported by controller.
	RaidSupport *string `json:"RaidSupport,omitempty"`
	// Logical volume or RAID rebuild rate of Storage Controller.
	RebuildRate *string `json:"RebuildRate,omitempty"`
	// Storage controller disk self encryption state.
	SelfEncryptEnabled *string `json:"SelfEncryptEnabled,omitempty"`
	// Controller types are Raid, FlexFlash.
	Type            *string                      `json:"Type,omitempty"`
	ComputeBlade    *ComputeBladeRelationship    `json:"ComputeBlade,omitempty"`
	ComputeBoard    *ComputeBoardRelationship    `json:"ComputeBoard,omitempty"`
	ComputeRackUnit *ComputeRackUnitRelationship `json:"ComputeRackUnit,omitempty"`
	// An array of relationships to storageDiskGroup resources.
	DiskGroup           []StorageDiskGroupRelationship   `json:"DiskGroup,omitempty"`
	DiskSlot            *StorageDiskSlotRelationship     `json:"DiskSlot,omitempty"`
	InventoryDeviceInfo *InventoryDeviceInfoRelationship `json:"InventoryDeviceInfo,omitempty"`
	// An array of relationships to storagePhysicalDiskExtension resources.
	PhysicalDiskExtensions []StoragePhysicalDiskExtensionRelationship `json:"PhysicalDiskExtensions,omitempty"`
	// An array of relationships to storagePhysicalDisk resources.
	PhysicalDisks    []StoragePhysicalDiskRelationship    `json:"PhysicalDisks,omitempty"`
	RegisteredDevice *AssetDeviceRegistrationRelationship `json:"RegisteredDevice,omitempty"`
	// An array of relationships to firmwareRunningFirmware resources.
	RunningFirmware []FirmwareRunningFirmwareRelationship `json:"RunningFirmware,omitempty"`
	// An array of relationships to storageVirtualDriveExtension resources.
	VirtualDriveExtensions []StorageVirtualDriveExtensionRelationship `json:"VirtualDriveExtensions,omitempty"`
	// An array of relationships to storageVirtualDrive resources.
	VirtualDrives        []StorageVirtualDriveRelationship `json:"VirtualDrives,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _StorageController StorageController

// NewStorageController instantiates a new StorageController object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStorageController(classId string, objectType string) *StorageController {
	this := StorageController{}
	this.ClassId = classId
	this.ObjectType = objectType
	return &this
}

// NewStorageControllerWithDefaults instantiates a new StorageController object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStorageControllerWithDefaults() *StorageController {
	this := StorageController{}
	var classId string = "storage.Controller"
	this.ClassId = classId
	var objectType string = "storage.Controller"
	this.ObjectType = objectType
	return &this
}

// GetClassId returns the ClassId field value
func (o *StorageController) GetClassId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ClassId
}

// GetClassIdOk returns a tuple with the ClassId field value
// and a boolean to check if the value has been set.
func (o *StorageController) GetClassIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ClassId, true
}

// SetClassId sets field value
func (o *StorageController) SetClassId(v string) {
	o.ClassId = v
}

// GetObjectType returns the ObjectType field value
func (o *StorageController) GetObjectType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ObjectType
}

// GetObjectTypeOk returns a tuple with the ObjectType field value
// and a boolean to check if the value has been set.
func (o *StorageController) GetObjectTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ObjectType, true
}

// SetObjectType sets field value
func (o *StorageController) SetObjectType(v string) {
	o.ObjectType = v
}

// GetControllerFlags returns the ControllerFlags field value if set, zero value otherwise.
func (o *StorageController) GetControllerFlags() string {
	if o == nil || o.ControllerFlags == nil {
		var ret string
		return ret
	}
	return *o.ControllerFlags
}

// GetControllerFlagsOk returns a tuple with the ControllerFlags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageController) GetControllerFlagsOk() (*string, bool) {
	if o == nil || o.ControllerFlags == nil {
		return nil, false
	}
	return o.ControllerFlags, true
}

// HasControllerFlags returns a boolean if a field has been set.
func (o *StorageController) HasControllerFlags() bool {
	if o != nil && o.ControllerFlags != nil {
		return true
	}

	return false
}

// SetControllerFlags gets a reference to the given string and assigns it to the ControllerFlags field.
func (o *StorageController) SetControllerFlags(v string) {
	o.ControllerFlags = &v
}

// GetControllerId returns the ControllerId field value if set, zero value otherwise.
func (o *StorageController) GetControllerId() string {
	if o == nil || o.ControllerId == nil {
		var ret string
		return ret
	}
	return *o.ControllerId
}

// GetControllerIdOk returns a tuple with the ControllerId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageController) GetControllerIdOk() (*string, bool) {
	if o == nil || o.ControllerId == nil {
		return nil, false
	}
	return o.ControllerId, true
}

// HasControllerId returns a boolean if a field has been set.
func (o *StorageController) HasControllerId() bool {
	if o != nil && o.ControllerId != nil {
		return true
	}

	return false
}

// SetControllerId gets a reference to the given string and assigns it to the ControllerId field.
func (o *StorageController) SetControllerId(v string) {
	o.ControllerId = &v
}

// GetControllerStatus returns the ControllerStatus field value if set, zero value otherwise.
func (o *StorageController) GetControllerStatus() string {
	if o == nil || o.ControllerStatus == nil {
		var ret string
		return ret
	}
	return *o.ControllerStatus
}

// GetControllerStatusOk returns a tuple with the ControllerStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageController) GetControllerStatusOk() (*string, bool) {
	if o == nil || o.ControllerStatus == nil {
		return nil, false
	}
	return o.ControllerStatus, true
}

// HasControllerStatus returns a boolean if a field has been set.
func (o *StorageController) HasControllerStatus() bool {
	if o != nil && o.ControllerStatus != nil {
		return true
	}

	return false
}

// SetControllerStatus gets a reference to the given string and assigns it to the ControllerStatus field.
func (o *StorageController) SetControllerStatus(v string) {
	o.ControllerStatus = &v
}

// GetForeignConfigPresent returns the ForeignConfigPresent field value if set, zero value otherwise.
func (o *StorageController) GetForeignConfigPresent() bool {
	if o == nil || o.ForeignConfigPresent == nil {
		var ret bool
		return ret
	}
	return *o.ForeignConfigPresent
}

// GetForeignConfigPresentOk returns a tuple with the ForeignConfigPresent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageController) GetForeignConfigPresentOk() (*bool, bool) {
	if o == nil || o.ForeignConfigPresent == nil {
		return nil, false
	}
	return o.ForeignConfigPresent, true
}

// HasForeignConfigPresent returns a boolean if a field has been set.
func (o *StorageController) HasForeignConfigPresent() bool {
	if o != nil && o.ForeignConfigPresent != nil {
		return true
	}

	return false
}

// SetForeignConfigPresent gets a reference to the given bool and assigns it to the ForeignConfigPresent field.
func (o *StorageController) SetForeignConfigPresent(v bool) {
	o.ForeignConfigPresent = &v
}

// GetHwRevision returns the HwRevision field value if set, zero value otherwise.
func (o *StorageController) GetHwRevision() string {
	if o == nil || o.HwRevision == nil {
		var ret string
		return ret
	}
	return *o.HwRevision
}

// GetHwRevisionOk returns a tuple with the HwRevision field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageController) GetHwRevisionOk() (*string, bool) {
	if o == nil || o.HwRevision == nil {
		return nil, false
	}
	return o.HwRevision, true
}

// HasHwRevision returns a boolean if a field has been set.
func (o *StorageController) HasHwRevision() bool {
	if o != nil && o.HwRevision != nil {
		return true
	}

	return false
}

// SetHwRevision gets a reference to the given string and assigns it to the HwRevision field.
func (o *StorageController) SetHwRevision(v string) {
	o.HwRevision = &v
}

// GetInterfaceType returns the InterfaceType field value if set, zero value otherwise.
func (o *StorageController) GetInterfaceType() string {
	if o == nil || o.InterfaceType == nil {
		var ret string
		return ret
	}
	return *o.InterfaceType
}

// GetInterfaceTypeOk returns a tuple with the InterfaceType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageController) GetInterfaceTypeOk() (*string, bool) {
	if o == nil || o.InterfaceType == nil {
		return nil, false
	}
	return o.InterfaceType, true
}

// HasInterfaceType returns a boolean if a field has been set.
func (o *StorageController) HasInterfaceType() bool {
	if o != nil && o.InterfaceType != nil {
		return true
	}

	return false
}

// SetInterfaceType gets a reference to the given string and assigns it to the InterfaceType field.
func (o *StorageController) SetInterfaceType(v string) {
	o.InterfaceType = &v
}

// GetMaxVolumesSupported returns the MaxVolumesSupported field value if set, zero value otherwise.
func (o *StorageController) GetMaxVolumesSupported() int64 {
	if o == nil || o.MaxVolumesSupported == nil {
		var ret int64
		return ret
	}
	return *o.MaxVolumesSupported
}

// GetMaxVolumesSupportedOk returns a tuple with the MaxVolumesSupported field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageController) GetMaxVolumesSupportedOk() (*int64, bool) {
	if o == nil || o.MaxVolumesSupported == nil {
		return nil, false
	}
	return o.MaxVolumesSupported, true
}

// HasMaxVolumesSupported returns a boolean if a field has been set.
func (o *StorageController) HasMaxVolumesSupported() bool {
	if o != nil && o.MaxVolumesSupported != nil {
		return true
	}

	return false
}

// SetMaxVolumesSupported gets a reference to the given int64 and assigns it to the MaxVolumesSupported field.
func (o *StorageController) SetMaxVolumesSupported(v int64) {
	o.MaxVolumesSupported = &v
}

// GetOobInterfaceSupported returns the OobInterfaceSupported field value if set, zero value otherwise.
func (o *StorageController) GetOobInterfaceSupported() string {
	if o == nil || o.OobInterfaceSupported == nil {
		var ret string
		return ret
	}
	return *o.OobInterfaceSupported
}

// GetOobInterfaceSupportedOk returns a tuple with the OobInterfaceSupported field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageController) GetOobInterfaceSupportedOk() (*string, bool) {
	if o == nil || o.OobInterfaceSupported == nil {
		return nil, false
	}
	return o.OobInterfaceSupported, true
}

// HasOobInterfaceSupported returns a boolean if a field has been set.
func (o *StorageController) HasOobInterfaceSupported() bool {
	if o != nil && o.OobInterfaceSupported != nil {
		return true
	}

	return false
}

// SetOobInterfaceSupported gets a reference to the given string and assigns it to the OobInterfaceSupported field.
func (o *StorageController) SetOobInterfaceSupported(v string) {
	o.OobInterfaceSupported = &v
}

// GetOperState returns the OperState field value if set, zero value otherwise.
func (o *StorageController) GetOperState() string {
	if o == nil || o.OperState == nil {
		var ret string
		return ret
	}
	return *o.OperState
}

// GetOperStateOk returns a tuple with the OperState field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageController) GetOperStateOk() (*string, bool) {
	if o == nil || o.OperState == nil {
		return nil, false
	}
	return o.OperState, true
}

// HasOperState returns a boolean if a field has been set.
func (o *StorageController) HasOperState() bool {
	if o != nil && o.OperState != nil {
		return true
	}

	return false
}

// SetOperState gets a reference to the given string and assigns it to the OperState field.
func (o *StorageController) SetOperState(v string) {
	o.OperState = &v
}

// GetOperability returns the Operability field value if set, zero value otherwise.
func (o *StorageController) GetOperability() string {
	if o == nil || o.Operability == nil {
		var ret string
		return ret
	}
	return *o.Operability
}

// GetOperabilityOk returns a tuple with the Operability field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageController) GetOperabilityOk() (*string, bool) {
	if o == nil || o.Operability == nil {
		return nil, false
	}
	return o.Operability, true
}

// HasOperability returns a boolean if a field has been set.
func (o *StorageController) HasOperability() bool {
	if o != nil && o.Operability != nil {
		return true
	}

	return false
}

// SetOperability gets a reference to the given string and assigns it to the Operability field.
func (o *StorageController) SetOperability(v string) {
	o.Operability = &v
}

// GetPciAddr returns the PciAddr field value if set, zero value otherwise.
func (o *StorageController) GetPciAddr() string {
	if o == nil || o.PciAddr == nil {
		var ret string
		return ret
	}
	return *o.PciAddr
}

// GetPciAddrOk returns a tuple with the PciAddr field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageController) GetPciAddrOk() (*string, bool) {
	if o == nil || o.PciAddr == nil {
		return nil, false
	}
	return o.PciAddr, true
}

// HasPciAddr returns a boolean if a field has been set.
func (o *StorageController) HasPciAddr() bool {
	if o != nil && o.PciAddr != nil {
		return true
	}

	return false
}

// SetPciAddr gets a reference to the given string and assigns it to the PciAddr field.
func (o *StorageController) SetPciAddr(v string) {
	o.PciAddr = &v
}

// GetPciSlot returns the PciSlot field value if set, zero value otherwise.
func (o *StorageController) GetPciSlot() string {
	if o == nil || o.PciSlot == nil {
		var ret string
		return ret
	}
	return *o.PciSlot
}

// GetPciSlotOk returns a tuple with the PciSlot field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageController) GetPciSlotOk() (*string, bool) {
	if o == nil || o.PciSlot == nil {
		return nil, false
	}
	return o.PciSlot, true
}

// HasPciSlot returns a boolean if a field has been set.
func (o *StorageController) HasPciSlot() bool {
	if o != nil && o.PciSlot != nil {
		return true
	}

	return false
}

// SetPciSlot gets a reference to the given string and assigns it to the PciSlot field.
func (o *StorageController) SetPciSlot(v string) {
	o.PciSlot = &v
}

// GetRaidSupport returns the RaidSupport field value if set, zero value otherwise.
func (o *StorageController) GetRaidSupport() string {
	if o == nil || o.RaidSupport == nil {
		var ret string
		return ret
	}
	return *o.RaidSupport
}

// GetRaidSupportOk returns a tuple with the RaidSupport field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageController) GetRaidSupportOk() (*string, bool) {
	if o == nil || o.RaidSupport == nil {
		return nil, false
	}
	return o.RaidSupport, true
}

// HasRaidSupport returns a boolean if a field has been set.
func (o *StorageController) HasRaidSupport() bool {
	if o != nil && o.RaidSupport != nil {
		return true
	}

	return false
}

// SetRaidSupport gets a reference to the given string and assigns it to the RaidSupport field.
func (o *StorageController) SetRaidSupport(v string) {
	o.RaidSupport = &v
}

// GetRebuildRate returns the RebuildRate field value if set, zero value otherwise.
func (o *StorageController) GetRebuildRate() string {
	if o == nil || o.RebuildRate == nil {
		var ret string
		return ret
	}
	return *o.RebuildRate
}

// GetRebuildRateOk returns a tuple with the RebuildRate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageController) GetRebuildRateOk() (*string, bool) {
	if o == nil || o.RebuildRate == nil {
		return nil, false
	}
	return o.RebuildRate, true
}

// HasRebuildRate returns a boolean if a field has been set.
func (o *StorageController) HasRebuildRate() bool {
	if o != nil && o.RebuildRate != nil {
		return true
	}

	return false
}

// SetRebuildRate gets a reference to the given string and assigns it to the RebuildRate field.
func (o *StorageController) SetRebuildRate(v string) {
	o.RebuildRate = &v
}

// GetSelfEncryptEnabled returns the SelfEncryptEnabled field value if set, zero value otherwise.
func (o *StorageController) GetSelfEncryptEnabled() string {
	if o == nil || o.SelfEncryptEnabled == nil {
		var ret string
		return ret
	}
	return *o.SelfEncryptEnabled
}

// GetSelfEncryptEnabledOk returns a tuple with the SelfEncryptEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageController) GetSelfEncryptEnabledOk() (*string, bool) {
	if o == nil || o.SelfEncryptEnabled == nil {
		return nil, false
	}
	return o.SelfEncryptEnabled, true
}

// HasSelfEncryptEnabled returns a boolean if a field has been set.
func (o *StorageController) HasSelfEncryptEnabled() bool {
	if o != nil && o.SelfEncryptEnabled != nil {
		return true
	}

	return false
}

// SetSelfEncryptEnabled gets a reference to the given string and assigns it to the SelfEncryptEnabled field.
func (o *StorageController) SetSelfEncryptEnabled(v string) {
	o.SelfEncryptEnabled = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *StorageController) GetType() string {
	if o == nil || o.Type == nil {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageController) GetTypeOk() (*string, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *StorageController) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *StorageController) SetType(v string) {
	o.Type = &v
}

// GetComputeBlade returns the ComputeBlade field value if set, zero value otherwise.
func (o *StorageController) GetComputeBlade() ComputeBladeRelationship {
	if o == nil || o.ComputeBlade == nil {
		var ret ComputeBladeRelationship
		return ret
	}
	return *o.ComputeBlade
}

// GetComputeBladeOk returns a tuple with the ComputeBlade field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageController) GetComputeBladeOk() (*ComputeBladeRelationship, bool) {
	if o == nil || o.ComputeBlade == nil {
		return nil, false
	}
	return o.ComputeBlade, true
}

// HasComputeBlade returns a boolean if a field has been set.
func (o *StorageController) HasComputeBlade() bool {
	if o != nil && o.ComputeBlade != nil {
		return true
	}

	return false
}

// SetComputeBlade gets a reference to the given ComputeBladeRelationship and assigns it to the ComputeBlade field.
func (o *StorageController) SetComputeBlade(v ComputeBladeRelationship) {
	o.ComputeBlade = &v
}

// GetComputeBoard returns the ComputeBoard field value if set, zero value otherwise.
func (o *StorageController) GetComputeBoard() ComputeBoardRelationship {
	if o == nil || o.ComputeBoard == nil {
		var ret ComputeBoardRelationship
		return ret
	}
	return *o.ComputeBoard
}

// GetComputeBoardOk returns a tuple with the ComputeBoard field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageController) GetComputeBoardOk() (*ComputeBoardRelationship, bool) {
	if o == nil || o.ComputeBoard == nil {
		return nil, false
	}
	return o.ComputeBoard, true
}

// HasComputeBoard returns a boolean if a field has been set.
func (o *StorageController) HasComputeBoard() bool {
	if o != nil && o.ComputeBoard != nil {
		return true
	}

	return false
}

// SetComputeBoard gets a reference to the given ComputeBoardRelationship and assigns it to the ComputeBoard field.
func (o *StorageController) SetComputeBoard(v ComputeBoardRelationship) {
	o.ComputeBoard = &v
}

// GetComputeRackUnit returns the ComputeRackUnit field value if set, zero value otherwise.
func (o *StorageController) GetComputeRackUnit() ComputeRackUnitRelationship {
	if o == nil || o.ComputeRackUnit == nil {
		var ret ComputeRackUnitRelationship
		return ret
	}
	return *o.ComputeRackUnit
}

// GetComputeRackUnitOk returns a tuple with the ComputeRackUnit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageController) GetComputeRackUnitOk() (*ComputeRackUnitRelationship, bool) {
	if o == nil || o.ComputeRackUnit == nil {
		return nil, false
	}
	return o.ComputeRackUnit, true
}

// HasComputeRackUnit returns a boolean if a field has been set.
func (o *StorageController) HasComputeRackUnit() bool {
	if o != nil && o.ComputeRackUnit != nil {
		return true
	}

	return false
}

// SetComputeRackUnit gets a reference to the given ComputeRackUnitRelationship and assigns it to the ComputeRackUnit field.
func (o *StorageController) SetComputeRackUnit(v ComputeRackUnitRelationship) {
	o.ComputeRackUnit = &v
}

// GetDiskGroup returns the DiskGroup field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *StorageController) GetDiskGroup() []StorageDiskGroupRelationship {
	if o == nil {
		var ret []StorageDiskGroupRelationship
		return ret
	}
	return o.DiskGroup
}

// GetDiskGroupOk returns a tuple with the DiskGroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *StorageController) GetDiskGroupOk() (*[]StorageDiskGroupRelationship, bool) {
	if o == nil || o.DiskGroup == nil {
		return nil, false
	}
	return &o.DiskGroup, true
}

// HasDiskGroup returns a boolean if a field has been set.
func (o *StorageController) HasDiskGroup() bool {
	if o != nil && o.DiskGroup != nil {
		return true
	}

	return false
}

// SetDiskGroup gets a reference to the given []StorageDiskGroupRelationship and assigns it to the DiskGroup field.
func (o *StorageController) SetDiskGroup(v []StorageDiskGroupRelationship) {
	o.DiskGroup = v
}

// GetDiskSlot returns the DiskSlot field value if set, zero value otherwise.
func (o *StorageController) GetDiskSlot() StorageDiskSlotRelationship {
	if o == nil || o.DiskSlot == nil {
		var ret StorageDiskSlotRelationship
		return ret
	}
	return *o.DiskSlot
}

// GetDiskSlotOk returns a tuple with the DiskSlot field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageController) GetDiskSlotOk() (*StorageDiskSlotRelationship, bool) {
	if o == nil || o.DiskSlot == nil {
		return nil, false
	}
	return o.DiskSlot, true
}

// HasDiskSlot returns a boolean if a field has been set.
func (o *StorageController) HasDiskSlot() bool {
	if o != nil && o.DiskSlot != nil {
		return true
	}

	return false
}

// SetDiskSlot gets a reference to the given StorageDiskSlotRelationship and assigns it to the DiskSlot field.
func (o *StorageController) SetDiskSlot(v StorageDiskSlotRelationship) {
	o.DiskSlot = &v
}

// GetInventoryDeviceInfo returns the InventoryDeviceInfo field value if set, zero value otherwise.
func (o *StorageController) GetInventoryDeviceInfo() InventoryDeviceInfoRelationship {
	if o == nil || o.InventoryDeviceInfo == nil {
		var ret InventoryDeviceInfoRelationship
		return ret
	}
	return *o.InventoryDeviceInfo
}

// GetInventoryDeviceInfoOk returns a tuple with the InventoryDeviceInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageController) GetInventoryDeviceInfoOk() (*InventoryDeviceInfoRelationship, bool) {
	if o == nil || o.InventoryDeviceInfo == nil {
		return nil, false
	}
	return o.InventoryDeviceInfo, true
}

// HasInventoryDeviceInfo returns a boolean if a field has been set.
func (o *StorageController) HasInventoryDeviceInfo() bool {
	if o != nil && o.InventoryDeviceInfo != nil {
		return true
	}

	return false
}

// SetInventoryDeviceInfo gets a reference to the given InventoryDeviceInfoRelationship and assigns it to the InventoryDeviceInfo field.
func (o *StorageController) SetInventoryDeviceInfo(v InventoryDeviceInfoRelationship) {
	o.InventoryDeviceInfo = &v
}

// GetPhysicalDiskExtensions returns the PhysicalDiskExtensions field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *StorageController) GetPhysicalDiskExtensions() []StoragePhysicalDiskExtensionRelationship {
	if o == nil {
		var ret []StoragePhysicalDiskExtensionRelationship
		return ret
	}
	return o.PhysicalDiskExtensions
}

// GetPhysicalDiskExtensionsOk returns a tuple with the PhysicalDiskExtensions field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *StorageController) GetPhysicalDiskExtensionsOk() (*[]StoragePhysicalDiskExtensionRelationship, bool) {
	if o == nil || o.PhysicalDiskExtensions == nil {
		return nil, false
	}
	return &o.PhysicalDiskExtensions, true
}

// HasPhysicalDiskExtensions returns a boolean if a field has been set.
func (o *StorageController) HasPhysicalDiskExtensions() bool {
	if o != nil && o.PhysicalDiskExtensions != nil {
		return true
	}

	return false
}

// SetPhysicalDiskExtensions gets a reference to the given []StoragePhysicalDiskExtensionRelationship and assigns it to the PhysicalDiskExtensions field.
func (o *StorageController) SetPhysicalDiskExtensions(v []StoragePhysicalDiskExtensionRelationship) {
	o.PhysicalDiskExtensions = v
}

// GetPhysicalDisks returns the PhysicalDisks field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *StorageController) GetPhysicalDisks() []StoragePhysicalDiskRelationship {
	if o == nil {
		var ret []StoragePhysicalDiskRelationship
		return ret
	}
	return o.PhysicalDisks
}

// GetPhysicalDisksOk returns a tuple with the PhysicalDisks field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *StorageController) GetPhysicalDisksOk() (*[]StoragePhysicalDiskRelationship, bool) {
	if o == nil || o.PhysicalDisks == nil {
		return nil, false
	}
	return &o.PhysicalDisks, true
}

// HasPhysicalDisks returns a boolean if a field has been set.
func (o *StorageController) HasPhysicalDisks() bool {
	if o != nil && o.PhysicalDisks != nil {
		return true
	}

	return false
}

// SetPhysicalDisks gets a reference to the given []StoragePhysicalDiskRelationship and assigns it to the PhysicalDisks field.
func (o *StorageController) SetPhysicalDisks(v []StoragePhysicalDiskRelationship) {
	o.PhysicalDisks = v
}

// GetRegisteredDevice returns the RegisteredDevice field value if set, zero value otherwise.
func (o *StorageController) GetRegisteredDevice() AssetDeviceRegistrationRelationship {
	if o == nil || o.RegisteredDevice == nil {
		var ret AssetDeviceRegistrationRelationship
		return ret
	}
	return *o.RegisteredDevice
}

// GetRegisteredDeviceOk returns a tuple with the RegisteredDevice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageController) GetRegisteredDeviceOk() (*AssetDeviceRegistrationRelationship, bool) {
	if o == nil || o.RegisteredDevice == nil {
		return nil, false
	}
	return o.RegisteredDevice, true
}

// HasRegisteredDevice returns a boolean if a field has been set.
func (o *StorageController) HasRegisteredDevice() bool {
	if o != nil && o.RegisteredDevice != nil {
		return true
	}

	return false
}

// SetRegisteredDevice gets a reference to the given AssetDeviceRegistrationRelationship and assigns it to the RegisteredDevice field.
func (o *StorageController) SetRegisteredDevice(v AssetDeviceRegistrationRelationship) {
	o.RegisteredDevice = &v
}

// GetRunningFirmware returns the RunningFirmware field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *StorageController) GetRunningFirmware() []FirmwareRunningFirmwareRelationship {
	if o == nil {
		var ret []FirmwareRunningFirmwareRelationship
		return ret
	}
	return o.RunningFirmware
}

// GetRunningFirmwareOk returns a tuple with the RunningFirmware field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *StorageController) GetRunningFirmwareOk() (*[]FirmwareRunningFirmwareRelationship, bool) {
	if o == nil || o.RunningFirmware == nil {
		return nil, false
	}
	return &o.RunningFirmware, true
}

// HasRunningFirmware returns a boolean if a field has been set.
func (o *StorageController) HasRunningFirmware() bool {
	if o != nil && o.RunningFirmware != nil {
		return true
	}

	return false
}

// SetRunningFirmware gets a reference to the given []FirmwareRunningFirmwareRelationship and assigns it to the RunningFirmware field.
func (o *StorageController) SetRunningFirmware(v []FirmwareRunningFirmwareRelationship) {
	o.RunningFirmware = v
}

// GetVirtualDriveExtensions returns the VirtualDriveExtensions field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *StorageController) GetVirtualDriveExtensions() []StorageVirtualDriveExtensionRelationship {
	if o == nil {
		var ret []StorageVirtualDriveExtensionRelationship
		return ret
	}
	return o.VirtualDriveExtensions
}

// GetVirtualDriveExtensionsOk returns a tuple with the VirtualDriveExtensions field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *StorageController) GetVirtualDriveExtensionsOk() (*[]StorageVirtualDriveExtensionRelationship, bool) {
	if o == nil || o.VirtualDriveExtensions == nil {
		return nil, false
	}
	return &o.VirtualDriveExtensions, true
}

// HasVirtualDriveExtensions returns a boolean if a field has been set.
func (o *StorageController) HasVirtualDriveExtensions() bool {
	if o != nil && o.VirtualDriveExtensions != nil {
		return true
	}

	return false
}

// SetVirtualDriveExtensions gets a reference to the given []StorageVirtualDriveExtensionRelationship and assigns it to the VirtualDriveExtensions field.
func (o *StorageController) SetVirtualDriveExtensions(v []StorageVirtualDriveExtensionRelationship) {
	o.VirtualDriveExtensions = v
}

// GetVirtualDrives returns the VirtualDrives field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *StorageController) GetVirtualDrives() []StorageVirtualDriveRelationship {
	if o == nil {
		var ret []StorageVirtualDriveRelationship
		return ret
	}
	return o.VirtualDrives
}

// GetVirtualDrivesOk returns a tuple with the VirtualDrives field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *StorageController) GetVirtualDrivesOk() (*[]StorageVirtualDriveRelationship, bool) {
	if o == nil || o.VirtualDrives == nil {
		return nil, false
	}
	return &o.VirtualDrives, true
}

// HasVirtualDrives returns a boolean if a field has been set.
func (o *StorageController) HasVirtualDrives() bool {
	if o != nil && o.VirtualDrives != nil {
		return true
	}

	return false
}

// SetVirtualDrives gets a reference to the given []StorageVirtualDriveRelationship and assigns it to the VirtualDrives field.
func (o *StorageController) SetVirtualDrives(v []StorageVirtualDriveRelationship) {
	o.VirtualDrives = v
}

func (o StorageController) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	serializedEquipmentBase, errEquipmentBase := json.Marshal(o.EquipmentBase)
	if errEquipmentBase != nil {
		return []byte{}, errEquipmentBase
	}
	errEquipmentBase = json.Unmarshal([]byte(serializedEquipmentBase), &toSerialize)
	if errEquipmentBase != nil {
		return []byte{}, errEquipmentBase
	}
	if true {
		toSerialize["ClassId"] = o.ClassId
	}
	if true {
		toSerialize["ObjectType"] = o.ObjectType
	}
	if o.ControllerFlags != nil {
		toSerialize["ControllerFlags"] = o.ControllerFlags
	}
	if o.ControllerId != nil {
		toSerialize["ControllerId"] = o.ControllerId
	}
	if o.ControllerStatus != nil {
		toSerialize["ControllerStatus"] = o.ControllerStatus
	}
	if o.ForeignConfigPresent != nil {
		toSerialize["ForeignConfigPresent"] = o.ForeignConfigPresent
	}
	if o.HwRevision != nil {
		toSerialize["HwRevision"] = o.HwRevision
	}
	if o.InterfaceType != nil {
		toSerialize["InterfaceType"] = o.InterfaceType
	}
	if o.MaxVolumesSupported != nil {
		toSerialize["MaxVolumesSupported"] = o.MaxVolumesSupported
	}
	if o.OobInterfaceSupported != nil {
		toSerialize["OobInterfaceSupported"] = o.OobInterfaceSupported
	}
	if o.OperState != nil {
		toSerialize["OperState"] = o.OperState
	}
	if o.Operability != nil {
		toSerialize["Operability"] = o.Operability
	}
	if o.PciAddr != nil {
		toSerialize["PciAddr"] = o.PciAddr
	}
	if o.PciSlot != nil {
		toSerialize["PciSlot"] = o.PciSlot
	}
	if o.RaidSupport != nil {
		toSerialize["RaidSupport"] = o.RaidSupport
	}
	if o.RebuildRate != nil {
		toSerialize["RebuildRate"] = o.RebuildRate
	}
	if o.SelfEncryptEnabled != nil {
		toSerialize["SelfEncryptEnabled"] = o.SelfEncryptEnabled
	}
	if o.Type != nil {
		toSerialize["Type"] = o.Type
	}
	if o.ComputeBlade != nil {
		toSerialize["ComputeBlade"] = o.ComputeBlade
	}
	if o.ComputeBoard != nil {
		toSerialize["ComputeBoard"] = o.ComputeBoard
	}
	if o.ComputeRackUnit != nil {
		toSerialize["ComputeRackUnit"] = o.ComputeRackUnit
	}
	if o.DiskGroup != nil {
		toSerialize["DiskGroup"] = o.DiskGroup
	}
	if o.DiskSlot != nil {
		toSerialize["DiskSlot"] = o.DiskSlot
	}
	if o.InventoryDeviceInfo != nil {
		toSerialize["InventoryDeviceInfo"] = o.InventoryDeviceInfo
	}
	if o.PhysicalDiskExtensions != nil {
		toSerialize["PhysicalDiskExtensions"] = o.PhysicalDiskExtensions
	}
	if o.PhysicalDisks != nil {
		toSerialize["PhysicalDisks"] = o.PhysicalDisks
	}
	if o.RegisteredDevice != nil {
		toSerialize["RegisteredDevice"] = o.RegisteredDevice
	}
	if o.RunningFirmware != nil {
		toSerialize["RunningFirmware"] = o.RunningFirmware
	}
	if o.VirtualDriveExtensions != nil {
		toSerialize["VirtualDriveExtensions"] = o.VirtualDriveExtensions
	}
	if o.VirtualDrives != nil {
		toSerialize["VirtualDrives"] = o.VirtualDrives
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *StorageController) UnmarshalJSON(bytes []byte) (err error) {
	type StorageControllerWithoutEmbeddedStruct struct {
		// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.
		ClassId string `json:"ClassId"`
		// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
		ObjectType string `json:"ObjectType"`
		// The flags for the storage controller.
		ControllerFlags *string `json:"ControllerFlags,omitempty"`
		// The Id of the storage controller.
		ControllerId *string `json:"ControllerId,omitempty"`
		// The current status of controller.
		ControllerStatus *string `json:"ControllerStatus,omitempty"`
		// Storage controller has detected disks in foreign config.
		ForeignConfigPresent *bool `json:"ForeignConfigPresent,omitempty"`
		// The hardware revision of controller.
		HwRevision *string `json:"HwRevision,omitempty"`
		// Interface types are Sas, Sata, PCH.
		InterfaceType *string `json:"InterfaceType,omitempty"`
		// Maximum virtual drives that can be created on this Storage Controller.
		MaxVolumesSupported *int64 `json:"MaxVolumesSupported,omitempty"`
		// The CIMC support for out-of-band configuration of controller.
		OobInterfaceSupported *string `json:"OobInterfaceSupported,omitempty"`
		// The current operational state of controller.
		OperState *string `json:"OperState,omitempty"`
		// Operability state of the storage controller.
		Operability *string `json:"Operability,omitempty"`
		// The current pci address of controller.
		PciAddr *string `json:"PciAddr,omitempty"`
		// The pci slot name for the controller.
		PciSlot *string `json:"PciSlot,omitempty"`
		// The RAID levels supported by controller.
		RaidSupport *string `json:"RaidSupport,omitempty"`
		// Logical volume or RAID rebuild rate of Storage Controller.
		RebuildRate *string `json:"RebuildRate,omitempty"`
		// Storage controller disk self encryption state.
		SelfEncryptEnabled *string `json:"SelfEncryptEnabled,omitempty"`
		// Controller types are Raid, FlexFlash.
		Type            *string                      `json:"Type,omitempty"`
		ComputeBlade    *ComputeBladeRelationship    `json:"ComputeBlade,omitempty"`
		ComputeBoard    *ComputeBoardRelationship    `json:"ComputeBoard,omitempty"`
		ComputeRackUnit *ComputeRackUnitRelationship `json:"ComputeRackUnit,omitempty"`
		// An array of relationships to storageDiskGroup resources.
		DiskGroup           []StorageDiskGroupRelationship   `json:"DiskGroup,omitempty"`
		DiskSlot            *StorageDiskSlotRelationship     `json:"DiskSlot,omitempty"`
		InventoryDeviceInfo *InventoryDeviceInfoRelationship `json:"InventoryDeviceInfo,omitempty"`
		// An array of relationships to storagePhysicalDiskExtension resources.
		PhysicalDiskExtensions []StoragePhysicalDiskExtensionRelationship `json:"PhysicalDiskExtensions,omitempty"`
		// An array of relationships to storagePhysicalDisk resources.
		PhysicalDisks    []StoragePhysicalDiskRelationship    `json:"PhysicalDisks,omitempty"`
		RegisteredDevice *AssetDeviceRegistrationRelationship `json:"RegisteredDevice,omitempty"`
		// An array of relationships to firmwareRunningFirmware resources.
		RunningFirmware []FirmwareRunningFirmwareRelationship `json:"RunningFirmware,omitempty"`
		// An array of relationships to storageVirtualDriveExtension resources.
		VirtualDriveExtensions []StorageVirtualDriveExtensionRelationship `json:"VirtualDriveExtensions,omitempty"`
		// An array of relationships to storageVirtualDrive resources.
		VirtualDrives []StorageVirtualDriveRelationship `json:"VirtualDrives,omitempty"`
	}

	varStorageControllerWithoutEmbeddedStruct := StorageControllerWithoutEmbeddedStruct{}

	err = json.Unmarshal(bytes, &varStorageControllerWithoutEmbeddedStruct)
	if err == nil {
		varStorageController := _StorageController{}
		varStorageController.ClassId = varStorageControllerWithoutEmbeddedStruct.ClassId
		varStorageController.ObjectType = varStorageControllerWithoutEmbeddedStruct.ObjectType
		varStorageController.ControllerFlags = varStorageControllerWithoutEmbeddedStruct.ControllerFlags
		varStorageController.ControllerId = varStorageControllerWithoutEmbeddedStruct.ControllerId
		varStorageController.ControllerStatus = varStorageControllerWithoutEmbeddedStruct.ControllerStatus
		varStorageController.ForeignConfigPresent = varStorageControllerWithoutEmbeddedStruct.ForeignConfigPresent
		varStorageController.HwRevision = varStorageControllerWithoutEmbeddedStruct.HwRevision
		varStorageController.InterfaceType = varStorageControllerWithoutEmbeddedStruct.InterfaceType
		varStorageController.MaxVolumesSupported = varStorageControllerWithoutEmbeddedStruct.MaxVolumesSupported
		varStorageController.OobInterfaceSupported = varStorageControllerWithoutEmbeddedStruct.OobInterfaceSupported
		varStorageController.OperState = varStorageControllerWithoutEmbeddedStruct.OperState
		varStorageController.Operability = varStorageControllerWithoutEmbeddedStruct.Operability
		varStorageController.PciAddr = varStorageControllerWithoutEmbeddedStruct.PciAddr
		varStorageController.PciSlot = varStorageControllerWithoutEmbeddedStruct.PciSlot
		varStorageController.RaidSupport = varStorageControllerWithoutEmbeddedStruct.RaidSupport
		varStorageController.RebuildRate = varStorageControllerWithoutEmbeddedStruct.RebuildRate
		varStorageController.SelfEncryptEnabled = varStorageControllerWithoutEmbeddedStruct.SelfEncryptEnabled
		varStorageController.Type = varStorageControllerWithoutEmbeddedStruct.Type
		varStorageController.ComputeBlade = varStorageControllerWithoutEmbeddedStruct.ComputeBlade
		varStorageController.ComputeBoard = varStorageControllerWithoutEmbeddedStruct.ComputeBoard
		varStorageController.ComputeRackUnit = varStorageControllerWithoutEmbeddedStruct.ComputeRackUnit
		varStorageController.DiskGroup = varStorageControllerWithoutEmbeddedStruct.DiskGroup
		varStorageController.DiskSlot = varStorageControllerWithoutEmbeddedStruct.DiskSlot
		varStorageController.InventoryDeviceInfo = varStorageControllerWithoutEmbeddedStruct.InventoryDeviceInfo
		varStorageController.PhysicalDiskExtensions = varStorageControllerWithoutEmbeddedStruct.PhysicalDiskExtensions
		varStorageController.PhysicalDisks = varStorageControllerWithoutEmbeddedStruct.PhysicalDisks
		varStorageController.RegisteredDevice = varStorageControllerWithoutEmbeddedStruct.RegisteredDevice
		varStorageController.RunningFirmware = varStorageControllerWithoutEmbeddedStruct.RunningFirmware
		varStorageController.VirtualDriveExtensions = varStorageControllerWithoutEmbeddedStruct.VirtualDriveExtensions
		varStorageController.VirtualDrives = varStorageControllerWithoutEmbeddedStruct.VirtualDrives
		*o = StorageController(varStorageController)
	} else {
		return err
	}

	varStorageController := _StorageController{}

	err = json.Unmarshal(bytes, &varStorageController)
	if err == nil {
		o.EquipmentBase = varStorageController.EquipmentBase
	} else {
		return err
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "ClassId")
		delete(additionalProperties, "ObjectType")
		delete(additionalProperties, "ControllerFlags")
		delete(additionalProperties, "ControllerId")
		delete(additionalProperties, "ControllerStatus")
		delete(additionalProperties, "ForeignConfigPresent")
		delete(additionalProperties, "HwRevision")
		delete(additionalProperties, "InterfaceType")
		delete(additionalProperties, "MaxVolumesSupported")
		delete(additionalProperties, "OobInterfaceSupported")
		delete(additionalProperties, "OperState")
		delete(additionalProperties, "Operability")
		delete(additionalProperties, "PciAddr")
		delete(additionalProperties, "PciSlot")
		delete(additionalProperties, "RaidSupport")
		delete(additionalProperties, "RebuildRate")
		delete(additionalProperties, "SelfEncryptEnabled")
		delete(additionalProperties, "Type")
		delete(additionalProperties, "ComputeBlade")
		delete(additionalProperties, "ComputeBoard")
		delete(additionalProperties, "ComputeRackUnit")
		delete(additionalProperties, "DiskGroup")
		delete(additionalProperties, "DiskSlot")
		delete(additionalProperties, "InventoryDeviceInfo")
		delete(additionalProperties, "PhysicalDiskExtensions")
		delete(additionalProperties, "PhysicalDisks")
		delete(additionalProperties, "RegisteredDevice")
		delete(additionalProperties, "RunningFirmware")
		delete(additionalProperties, "VirtualDriveExtensions")
		delete(additionalProperties, "VirtualDrives")

		// remove fields from embedded structs
		reflectEquipmentBase := reflect.ValueOf(o.EquipmentBase)
		for i := 0; i < reflectEquipmentBase.Type().NumField(); i++ {
			t := reflectEquipmentBase.Type().Field(i)

			if jsonTag := t.Tag.Get("json"); jsonTag != "" {
				fieldName := ""
				if commaIdx := strings.Index(jsonTag, ","); commaIdx > 0 {
					fieldName = jsonTag[:commaIdx]
				} else {
					fieldName = jsonTag
				}
				if fieldName != "AdditionalProperties" {
					delete(additionalProperties, fieldName)
				}
			}
		}

		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableStorageController struct {
	value *StorageController
	isSet bool
}

func (v NullableStorageController) Get() *StorageController {
	return v.value
}

func (v *NullableStorageController) Set(val *StorageController) {
	v.value = val
	v.isSet = true
}

func (v NullableStorageController) IsSet() bool {
	return v.isSet
}

func (v *NullableStorageController) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStorageController(val *StorageController) *NullableStorageController {
	return &NullableStorageController{value: val, isSet: true}
}

func (v NullableStorageController) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStorageController) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
