/*
Cisco Intersight

Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations. The Intersight OpenAPI document defines the complete set of properties that are returned in the HTTP response. From that perspective, a client can expect that no additional properties are returned, unless these properties are explicitly defined in the OpenAPI document. However, when a client uses an older version of the Intersight OpenAPI document, the server may send additional properties because the software is more recent than the client. In that case, the client may receive properties that it does not know about. Some generated SDKs perform a strict validation of the HTTP response body against the OpenAPI document.

API version: 1.0.11-14430
Contact: intersight@cisco.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package intersight

import (
	"encoding/json"
)

// StorageNetAppSnapMirrorRelationshipAllOf Definition of the list of properties defined in 'storage.NetAppSnapMirrorRelationship', excluding properties defined in parent classes.
type StorageNetAppSnapMirrorRelationshipAllOf struct {
	// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.
	ClassId string `json:"ClassId"`
	// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
	ObjectType string `json:"ObjectType"`
	// Path to the destination endpoint of a SnapMirror relationship. Examples: ONTAP FlexVol/FlexGroup - svm1:volume1; ONTAP SVM - svm1: ; ONTAP Consistency Group - svm1:/cg/cg_name.
	DestinationPath *string `json:"DestinationPath,omitempty"`
	// Whether the relationship is healthy or not.
	Healthy *string `json:"Healthy,omitempty"`
	// Time since the exported Snapshot copy was created.
	LagTime *string `json:"LagTime,omitempty"`
	// Name of the NetApp SnapMirror policy.
	PolicyName *string `json:"PolicyName,omitempty"`
	// SnapMirror policy type can be async, sync, or continuous.
	PolicyType *string `json:"PolicyType,omitempty"`
	// Uuid of the NetApp SnapMirror policy.
	PolicyUuid *string `json:"PolicyUuid,omitempty"`
	// Path to the source endpoint of a SnapMirror relationship. Examples: ONTAP FlexVol/FlexGroup - svm1:volume1; ONTAP SVM - svm1: ; ONTAP Consistency Group - svm1:/cg/cg_name.
	SourcePath *string `json:"SourcePath,omitempty"`
	// State of the relationship.
	State *string `json:"State,omitempty"`
	// Uuid of the NetApp SnapMirror relationship.
	Uuid                 *string                                        `json:"Uuid,omitempty"`
	Array                *StorageNetAppClusterRelationship              `json:"Array,omitempty"`
	DestinationTenant    *StorageNetAppStorageVmRelationship            `json:"DestinationTenant,omitempty"`
	Policy               *StorageNetAppBaseSnapMirrorPolicyRelationship `json:"Policy,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _StorageNetAppSnapMirrorRelationshipAllOf StorageNetAppSnapMirrorRelationshipAllOf

// NewStorageNetAppSnapMirrorRelationshipAllOf instantiates a new StorageNetAppSnapMirrorRelationshipAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStorageNetAppSnapMirrorRelationshipAllOf(classId string, objectType string) *StorageNetAppSnapMirrorRelationshipAllOf {
	this := StorageNetAppSnapMirrorRelationshipAllOf{}
	this.ClassId = classId
	this.ObjectType = objectType
	return &this
}

// NewStorageNetAppSnapMirrorRelationshipAllOfWithDefaults instantiates a new StorageNetAppSnapMirrorRelationshipAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStorageNetAppSnapMirrorRelationshipAllOfWithDefaults() *StorageNetAppSnapMirrorRelationshipAllOf {
	this := StorageNetAppSnapMirrorRelationshipAllOf{}
	var classId string = "storage.NetAppSnapMirrorRelationship"
	this.ClassId = classId
	var objectType string = "storage.NetAppSnapMirrorRelationship"
	this.ObjectType = objectType
	return &this
}

// GetClassId returns the ClassId field value
func (o *StorageNetAppSnapMirrorRelationshipAllOf) GetClassId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ClassId
}

// GetClassIdOk returns a tuple with the ClassId field value
// and a boolean to check if the value has been set.
func (o *StorageNetAppSnapMirrorRelationshipAllOf) GetClassIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ClassId, true
}

// SetClassId sets field value
func (o *StorageNetAppSnapMirrorRelationshipAllOf) SetClassId(v string) {
	o.ClassId = v
}

// GetObjectType returns the ObjectType field value
func (o *StorageNetAppSnapMirrorRelationshipAllOf) GetObjectType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ObjectType
}

// GetObjectTypeOk returns a tuple with the ObjectType field value
// and a boolean to check if the value has been set.
func (o *StorageNetAppSnapMirrorRelationshipAllOf) GetObjectTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ObjectType, true
}

// SetObjectType sets field value
func (o *StorageNetAppSnapMirrorRelationshipAllOf) SetObjectType(v string) {
	o.ObjectType = v
}

// GetDestinationPath returns the DestinationPath field value if set, zero value otherwise.
func (o *StorageNetAppSnapMirrorRelationshipAllOf) GetDestinationPath() string {
	if o == nil || o.DestinationPath == nil {
		var ret string
		return ret
	}
	return *o.DestinationPath
}

// GetDestinationPathOk returns a tuple with the DestinationPath field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageNetAppSnapMirrorRelationshipAllOf) GetDestinationPathOk() (*string, bool) {
	if o == nil || o.DestinationPath == nil {
		return nil, false
	}
	return o.DestinationPath, true
}

// HasDestinationPath returns a boolean if a field has been set.
func (o *StorageNetAppSnapMirrorRelationshipAllOf) HasDestinationPath() bool {
	if o != nil && o.DestinationPath != nil {
		return true
	}

	return false
}

// SetDestinationPath gets a reference to the given string and assigns it to the DestinationPath field.
func (o *StorageNetAppSnapMirrorRelationshipAllOf) SetDestinationPath(v string) {
	o.DestinationPath = &v
}

// GetHealthy returns the Healthy field value if set, zero value otherwise.
func (o *StorageNetAppSnapMirrorRelationshipAllOf) GetHealthy() string {
	if o == nil || o.Healthy == nil {
		var ret string
		return ret
	}
	return *o.Healthy
}

// GetHealthyOk returns a tuple with the Healthy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageNetAppSnapMirrorRelationshipAllOf) GetHealthyOk() (*string, bool) {
	if o == nil || o.Healthy == nil {
		return nil, false
	}
	return o.Healthy, true
}

// HasHealthy returns a boolean if a field has been set.
func (o *StorageNetAppSnapMirrorRelationshipAllOf) HasHealthy() bool {
	if o != nil && o.Healthy != nil {
		return true
	}

	return false
}

// SetHealthy gets a reference to the given string and assigns it to the Healthy field.
func (o *StorageNetAppSnapMirrorRelationshipAllOf) SetHealthy(v string) {
	o.Healthy = &v
}

// GetLagTime returns the LagTime field value if set, zero value otherwise.
func (o *StorageNetAppSnapMirrorRelationshipAllOf) GetLagTime() string {
	if o == nil || o.LagTime == nil {
		var ret string
		return ret
	}
	return *o.LagTime
}

// GetLagTimeOk returns a tuple with the LagTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageNetAppSnapMirrorRelationshipAllOf) GetLagTimeOk() (*string, bool) {
	if o == nil || o.LagTime == nil {
		return nil, false
	}
	return o.LagTime, true
}

// HasLagTime returns a boolean if a field has been set.
func (o *StorageNetAppSnapMirrorRelationshipAllOf) HasLagTime() bool {
	if o != nil && o.LagTime != nil {
		return true
	}

	return false
}

// SetLagTime gets a reference to the given string and assigns it to the LagTime field.
func (o *StorageNetAppSnapMirrorRelationshipAllOf) SetLagTime(v string) {
	o.LagTime = &v
}

// GetPolicyName returns the PolicyName field value if set, zero value otherwise.
func (o *StorageNetAppSnapMirrorRelationshipAllOf) GetPolicyName() string {
	if o == nil || o.PolicyName == nil {
		var ret string
		return ret
	}
	return *o.PolicyName
}

// GetPolicyNameOk returns a tuple with the PolicyName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageNetAppSnapMirrorRelationshipAllOf) GetPolicyNameOk() (*string, bool) {
	if o == nil || o.PolicyName == nil {
		return nil, false
	}
	return o.PolicyName, true
}

// HasPolicyName returns a boolean if a field has been set.
func (o *StorageNetAppSnapMirrorRelationshipAllOf) HasPolicyName() bool {
	if o != nil && o.PolicyName != nil {
		return true
	}

	return false
}

// SetPolicyName gets a reference to the given string and assigns it to the PolicyName field.
func (o *StorageNetAppSnapMirrorRelationshipAllOf) SetPolicyName(v string) {
	o.PolicyName = &v
}

// GetPolicyType returns the PolicyType field value if set, zero value otherwise.
func (o *StorageNetAppSnapMirrorRelationshipAllOf) GetPolicyType() string {
	if o == nil || o.PolicyType == nil {
		var ret string
		return ret
	}
	return *o.PolicyType
}

// GetPolicyTypeOk returns a tuple with the PolicyType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageNetAppSnapMirrorRelationshipAllOf) GetPolicyTypeOk() (*string, bool) {
	if o == nil || o.PolicyType == nil {
		return nil, false
	}
	return o.PolicyType, true
}

// HasPolicyType returns a boolean if a field has been set.
func (o *StorageNetAppSnapMirrorRelationshipAllOf) HasPolicyType() bool {
	if o != nil && o.PolicyType != nil {
		return true
	}

	return false
}

// SetPolicyType gets a reference to the given string and assigns it to the PolicyType field.
func (o *StorageNetAppSnapMirrorRelationshipAllOf) SetPolicyType(v string) {
	o.PolicyType = &v
}

// GetPolicyUuid returns the PolicyUuid field value if set, zero value otherwise.
func (o *StorageNetAppSnapMirrorRelationshipAllOf) GetPolicyUuid() string {
	if o == nil || o.PolicyUuid == nil {
		var ret string
		return ret
	}
	return *o.PolicyUuid
}

// GetPolicyUuidOk returns a tuple with the PolicyUuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageNetAppSnapMirrorRelationshipAllOf) GetPolicyUuidOk() (*string, bool) {
	if o == nil || o.PolicyUuid == nil {
		return nil, false
	}
	return o.PolicyUuid, true
}

// HasPolicyUuid returns a boolean if a field has been set.
func (o *StorageNetAppSnapMirrorRelationshipAllOf) HasPolicyUuid() bool {
	if o != nil && o.PolicyUuid != nil {
		return true
	}

	return false
}

// SetPolicyUuid gets a reference to the given string and assigns it to the PolicyUuid field.
func (o *StorageNetAppSnapMirrorRelationshipAllOf) SetPolicyUuid(v string) {
	o.PolicyUuid = &v
}

// GetSourcePath returns the SourcePath field value if set, zero value otherwise.
func (o *StorageNetAppSnapMirrorRelationshipAllOf) GetSourcePath() string {
	if o == nil || o.SourcePath == nil {
		var ret string
		return ret
	}
	return *o.SourcePath
}

// GetSourcePathOk returns a tuple with the SourcePath field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageNetAppSnapMirrorRelationshipAllOf) GetSourcePathOk() (*string, bool) {
	if o == nil || o.SourcePath == nil {
		return nil, false
	}
	return o.SourcePath, true
}

// HasSourcePath returns a boolean if a field has been set.
func (o *StorageNetAppSnapMirrorRelationshipAllOf) HasSourcePath() bool {
	if o != nil && o.SourcePath != nil {
		return true
	}

	return false
}

// SetSourcePath gets a reference to the given string and assigns it to the SourcePath field.
func (o *StorageNetAppSnapMirrorRelationshipAllOf) SetSourcePath(v string) {
	o.SourcePath = &v
}

// GetState returns the State field value if set, zero value otherwise.
func (o *StorageNetAppSnapMirrorRelationshipAllOf) GetState() string {
	if o == nil || o.State == nil {
		var ret string
		return ret
	}
	return *o.State
}

// GetStateOk returns a tuple with the State field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageNetAppSnapMirrorRelationshipAllOf) GetStateOk() (*string, bool) {
	if o == nil || o.State == nil {
		return nil, false
	}
	return o.State, true
}

// HasState returns a boolean if a field has been set.
func (o *StorageNetAppSnapMirrorRelationshipAllOf) HasState() bool {
	if o != nil && o.State != nil {
		return true
	}

	return false
}

// SetState gets a reference to the given string and assigns it to the State field.
func (o *StorageNetAppSnapMirrorRelationshipAllOf) SetState(v string) {
	o.State = &v
}

// GetUuid returns the Uuid field value if set, zero value otherwise.
func (o *StorageNetAppSnapMirrorRelationshipAllOf) GetUuid() string {
	if o == nil || o.Uuid == nil {
		var ret string
		return ret
	}
	return *o.Uuid
}

// GetUuidOk returns a tuple with the Uuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageNetAppSnapMirrorRelationshipAllOf) GetUuidOk() (*string, bool) {
	if o == nil || o.Uuid == nil {
		return nil, false
	}
	return o.Uuid, true
}

// HasUuid returns a boolean if a field has been set.
func (o *StorageNetAppSnapMirrorRelationshipAllOf) HasUuid() bool {
	if o != nil && o.Uuid != nil {
		return true
	}

	return false
}

// SetUuid gets a reference to the given string and assigns it to the Uuid field.
func (o *StorageNetAppSnapMirrorRelationshipAllOf) SetUuid(v string) {
	o.Uuid = &v
}

// GetArray returns the Array field value if set, zero value otherwise.
func (o *StorageNetAppSnapMirrorRelationshipAllOf) GetArray() StorageNetAppClusterRelationship {
	if o == nil || o.Array == nil {
		var ret StorageNetAppClusterRelationship
		return ret
	}
	return *o.Array
}

// GetArrayOk returns a tuple with the Array field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageNetAppSnapMirrorRelationshipAllOf) GetArrayOk() (*StorageNetAppClusterRelationship, bool) {
	if o == nil || o.Array == nil {
		return nil, false
	}
	return o.Array, true
}

// HasArray returns a boolean if a field has been set.
func (o *StorageNetAppSnapMirrorRelationshipAllOf) HasArray() bool {
	if o != nil && o.Array != nil {
		return true
	}

	return false
}

// SetArray gets a reference to the given StorageNetAppClusterRelationship and assigns it to the Array field.
func (o *StorageNetAppSnapMirrorRelationshipAllOf) SetArray(v StorageNetAppClusterRelationship) {
	o.Array = &v
}

// GetDestinationTenant returns the DestinationTenant field value if set, zero value otherwise.
func (o *StorageNetAppSnapMirrorRelationshipAllOf) GetDestinationTenant() StorageNetAppStorageVmRelationship {
	if o == nil || o.DestinationTenant == nil {
		var ret StorageNetAppStorageVmRelationship
		return ret
	}
	return *o.DestinationTenant
}

// GetDestinationTenantOk returns a tuple with the DestinationTenant field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageNetAppSnapMirrorRelationshipAllOf) GetDestinationTenantOk() (*StorageNetAppStorageVmRelationship, bool) {
	if o == nil || o.DestinationTenant == nil {
		return nil, false
	}
	return o.DestinationTenant, true
}

// HasDestinationTenant returns a boolean if a field has been set.
func (o *StorageNetAppSnapMirrorRelationshipAllOf) HasDestinationTenant() bool {
	if o != nil && o.DestinationTenant != nil {
		return true
	}

	return false
}

// SetDestinationTenant gets a reference to the given StorageNetAppStorageVmRelationship and assigns it to the DestinationTenant field.
func (o *StorageNetAppSnapMirrorRelationshipAllOf) SetDestinationTenant(v StorageNetAppStorageVmRelationship) {
	o.DestinationTenant = &v
}

// GetPolicy returns the Policy field value if set, zero value otherwise.
func (o *StorageNetAppSnapMirrorRelationshipAllOf) GetPolicy() StorageNetAppBaseSnapMirrorPolicyRelationship {
	if o == nil || o.Policy == nil {
		var ret StorageNetAppBaseSnapMirrorPolicyRelationship
		return ret
	}
	return *o.Policy
}

// GetPolicyOk returns a tuple with the Policy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageNetAppSnapMirrorRelationshipAllOf) GetPolicyOk() (*StorageNetAppBaseSnapMirrorPolicyRelationship, bool) {
	if o == nil || o.Policy == nil {
		return nil, false
	}
	return o.Policy, true
}

// HasPolicy returns a boolean if a field has been set.
func (o *StorageNetAppSnapMirrorRelationshipAllOf) HasPolicy() bool {
	if o != nil && o.Policy != nil {
		return true
	}

	return false
}

// SetPolicy gets a reference to the given StorageNetAppBaseSnapMirrorPolicyRelationship and assigns it to the Policy field.
func (o *StorageNetAppSnapMirrorRelationshipAllOf) SetPolicy(v StorageNetAppBaseSnapMirrorPolicyRelationship) {
	o.Policy = &v
}

func (o StorageNetAppSnapMirrorRelationshipAllOf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["ClassId"] = o.ClassId
	}
	if true {
		toSerialize["ObjectType"] = o.ObjectType
	}
	if o.DestinationPath != nil {
		toSerialize["DestinationPath"] = o.DestinationPath
	}
	if o.Healthy != nil {
		toSerialize["Healthy"] = o.Healthy
	}
	if o.LagTime != nil {
		toSerialize["LagTime"] = o.LagTime
	}
	if o.PolicyName != nil {
		toSerialize["PolicyName"] = o.PolicyName
	}
	if o.PolicyType != nil {
		toSerialize["PolicyType"] = o.PolicyType
	}
	if o.PolicyUuid != nil {
		toSerialize["PolicyUuid"] = o.PolicyUuid
	}
	if o.SourcePath != nil {
		toSerialize["SourcePath"] = o.SourcePath
	}
	if o.State != nil {
		toSerialize["State"] = o.State
	}
	if o.Uuid != nil {
		toSerialize["Uuid"] = o.Uuid
	}
	if o.Array != nil {
		toSerialize["Array"] = o.Array
	}
	if o.DestinationTenant != nil {
		toSerialize["DestinationTenant"] = o.DestinationTenant
	}
	if o.Policy != nil {
		toSerialize["Policy"] = o.Policy
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *StorageNetAppSnapMirrorRelationshipAllOf) UnmarshalJSON(bytes []byte) (err error) {
	varStorageNetAppSnapMirrorRelationshipAllOf := _StorageNetAppSnapMirrorRelationshipAllOf{}

	if err = json.Unmarshal(bytes, &varStorageNetAppSnapMirrorRelationshipAllOf); err == nil {
		*o = StorageNetAppSnapMirrorRelationshipAllOf(varStorageNetAppSnapMirrorRelationshipAllOf)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "ClassId")
		delete(additionalProperties, "ObjectType")
		delete(additionalProperties, "DestinationPath")
		delete(additionalProperties, "Healthy")
		delete(additionalProperties, "LagTime")
		delete(additionalProperties, "PolicyName")
		delete(additionalProperties, "PolicyType")
		delete(additionalProperties, "PolicyUuid")
		delete(additionalProperties, "SourcePath")
		delete(additionalProperties, "State")
		delete(additionalProperties, "Uuid")
		delete(additionalProperties, "Array")
		delete(additionalProperties, "DestinationTenant")
		delete(additionalProperties, "Policy")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableStorageNetAppSnapMirrorRelationshipAllOf struct {
	value *StorageNetAppSnapMirrorRelationshipAllOf
	isSet bool
}

func (v NullableStorageNetAppSnapMirrorRelationshipAllOf) Get() *StorageNetAppSnapMirrorRelationshipAllOf {
	return v.value
}

func (v *NullableStorageNetAppSnapMirrorRelationshipAllOf) Set(val *StorageNetAppSnapMirrorRelationshipAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableStorageNetAppSnapMirrorRelationshipAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableStorageNetAppSnapMirrorRelationshipAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStorageNetAppSnapMirrorRelationshipAllOf(val *StorageNetAppSnapMirrorRelationshipAllOf) *NullableStorageNetAppSnapMirrorRelationshipAllOf {
	return &NullableStorageNetAppSnapMirrorRelationshipAllOf{value: val, isSet: true}
}

func (v NullableStorageNetAppSnapMirrorRelationshipAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStorageNetAppSnapMirrorRelationshipAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
