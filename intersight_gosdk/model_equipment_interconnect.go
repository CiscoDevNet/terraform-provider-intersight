/*
Cisco Intersight

Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations. The Intersight OpenAPI document defines the complete set of properties that are returned in the HTTP response. From that perspective, a client can expect that no additional properties are returned, unless these properties are explicitly defined in the OpenAPI document. However, when a client uses an older version of the Intersight OpenAPI document, the server may send additional properties because the software is more recent than the client. In that case, the client may receive properties that it does not know about. Some generated SDKs perform a strict validation of the HTTP response body against the OpenAPI document.

API version: 1.0.11-2025101412
Contact: intersight@cisco.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package intersight

import (
	"encoding/json"
	"fmt"
	"reflect"
	"strings"
)

// checks if the EquipmentInterconnect type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EquipmentInterconnect{}

// EquipmentInterconnect Object representing a set of endpoints that are interconnected via some interconnectivity technology.
type EquipmentInterconnect struct {
	EquipmentBase
	// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.
	ClassId string `json:"ClassId"`
	// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
	ObjectType string `json:"ObjectType"`
	// The identifier of the interconnect.
	InterconnectId *string `json:"InterconnectId,omitempty"`
	// Type of interconnectivity provided by this interconnect. * `Unknown` - Interconnect type is unknown. * `NVLink` - Interconnect type is NVLink.
	InterconnectType *string                          `json:"InterconnectType,omitempty"`
	ComputeBoard     NullableComputeBoardRelationship `json:"ComputeBoard,omitempty"`
	// An array of relationships to graphicsCard resources.
	InterconnectedGraphicsCards []GraphicsCardRelationship `json:"InterconnectedGraphicsCards,omitempty"`
	// An array of relationships to equipmentSharedGraphicsCard resources.
	InterconnectedSharedGraphicsCards []EquipmentSharedGraphicsCardRelationship   `json:"InterconnectedSharedGraphicsCards,omitempty"`
	PciNode                           NullablePciNodeRelationship                 `json:"PciNode,omitempty"`
	RegisteredDevice                  NullableAssetDeviceRegistrationRelationship `json:"RegisteredDevice,omitempty"`
	AdditionalProperties              map[string]interface{}
}

type _EquipmentInterconnect EquipmentInterconnect

// NewEquipmentInterconnect instantiates a new EquipmentInterconnect object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEquipmentInterconnect(classId string, objectType string) *EquipmentInterconnect {
	this := EquipmentInterconnect{}
	this.ClassId = classId
	this.ObjectType = objectType
	return &this
}

// NewEquipmentInterconnectWithDefaults instantiates a new EquipmentInterconnect object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEquipmentInterconnectWithDefaults() *EquipmentInterconnect {
	this := EquipmentInterconnect{}
	var classId string = "equipment.Interconnect"
	this.ClassId = classId
	var objectType string = "equipment.Interconnect"
	this.ObjectType = objectType
	return &this
}

// GetClassId returns the ClassId field value
func (o *EquipmentInterconnect) GetClassId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ClassId
}

// GetClassIdOk returns a tuple with the ClassId field value
// and a boolean to check if the value has been set.
func (o *EquipmentInterconnect) GetClassIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ClassId, true
}

// SetClassId sets field value
func (o *EquipmentInterconnect) SetClassId(v string) {
	o.ClassId = v
}

// GetDefaultClassId returns the default value "equipment.Interconnect" of the ClassId field.
func (o *EquipmentInterconnect) GetDefaultClassId() interface{} {
	return "equipment.Interconnect"
}

// GetObjectType returns the ObjectType field value
func (o *EquipmentInterconnect) GetObjectType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ObjectType
}

// GetObjectTypeOk returns a tuple with the ObjectType field value
// and a boolean to check if the value has been set.
func (o *EquipmentInterconnect) GetObjectTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ObjectType, true
}

// SetObjectType sets field value
func (o *EquipmentInterconnect) SetObjectType(v string) {
	o.ObjectType = v
}

// GetDefaultObjectType returns the default value "equipment.Interconnect" of the ObjectType field.
func (o *EquipmentInterconnect) GetDefaultObjectType() interface{} {
	return "equipment.Interconnect"
}

// GetInterconnectId returns the InterconnectId field value if set, zero value otherwise.
func (o *EquipmentInterconnect) GetInterconnectId() string {
	if o == nil || IsNil(o.InterconnectId) {
		var ret string
		return ret
	}
	return *o.InterconnectId
}

// GetInterconnectIdOk returns a tuple with the InterconnectId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EquipmentInterconnect) GetInterconnectIdOk() (*string, bool) {
	if o == nil || IsNil(o.InterconnectId) {
		return nil, false
	}
	return o.InterconnectId, true
}

// HasInterconnectId returns a boolean if a field has been set.
func (o *EquipmentInterconnect) HasInterconnectId() bool {
	if o != nil && !IsNil(o.InterconnectId) {
		return true
	}

	return false
}

// SetInterconnectId gets a reference to the given string and assigns it to the InterconnectId field.
func (o *EquipmentInterconnect) SetInterconnectId(v string) {
	o.InterconnectId = &v
}

// GetInterconnectType returns the InterconnectType field value if set, zero value otherwise.
func (o *EquipmentInterconnect) GetInterconnectType() string {
	if o == nil || IsNil(o.InterconnectType) {
		var ret string
		return ret
	}
	return *o.InterconnectType
}

// GetInterconnectTypeOk returns a tuple with the InterconnectType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EquipmentInterconnect) GetInterconnectTypeOk() (*string, bool) {
	if o == nil || IsNil(o.InterconnectType) {
		return nil, false
	}
	return o.InterconnectType, true
}

// HasInterconnectType returns a boolean if a field has been set.
func (o *EquipmentInterconnect) HasInterconnectType() bool {
	if o != nil && !IsNil(o.InterconnectType) {
		return true
	}

	return false
}

// SetInterconnectType gets a reference to the given string and assigns it to the InterconnectType field.
func (o *EquipmentInterconnect) SetInterconnectType(v string) {
	o.InterconnectType = &v
}

// GetComputeBoard returns the ComputeBoard field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EquipmentInterconnect) GetComputeBoard() ComputeBoardRelationship {
	if o == nil || IsNil(o.ComputeBoard.Get()) {
		var ret ComputeBoardRelationship
		return ret
	}
	return *o.ComputeBoard.Get()
}

// GetComputeBoardOk returns a tuple with the ComputeBoard field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EquipmentInterconnect) GetComputeBoardOk() (*ComputeBoardRelationship, bool) {
	if o == nil {
		return nil, false
	}
	return o.ComputeBoard.Get(), o.ComputeBoard.IsSet()
}

// HasComputeBoard returns a boolean if a field has been set.
func (o *EquipmentInterconnect) HasComputeBoard() bool {
	if o != nil && o.ComputeBoard.IsSet() {
		return true
	}

	return false
}

// SetComputeBoard gets a reference to the given NullableComputeBoardRelationship and assigns it to the ComputeBoard field.
func (o *EquipmentInterconnect) SetComputeBoard(v ComputeBoardRelationship) {
	o.ComputeBoard.Set(&v)
}

// SetComputeBoardNil sets the value for ComputeBoard to be an explicit nil
func (o *EquipmentInterconnect) SetComputeBoardNil() {
	o.ComputeBoard.Set(nil)
}

// UnsetComputeBoard ensures that no value is present for ComputeBoard, not even an explicit nil
func (o *EquipmentInterconnect) UnsetComputeBoard() {
	o.ComputeBoard.Unset()
}

// GetInterconnectedGraphicsCards returns the InterconnectedGraphicsCards field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EquipmentInterconnect) GetInterconnectedGraphicsCards() []GraphicsCardRelationship {
	if o == nil {
		var ret []GraphicsCardRelationship
		return ret
	}
	return o.InterconnectedGraphicsCards
}

// GetInterconnectedGraphicsCardsOk returns a tuple with the InterconnectedGraphicsCards field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EquipmentInterconnect) GetInterconnectedGraphicsCardsOk() ([]GraphicsCardRelationship, bool) {
	if o == nil || IsNil(o.InterconnectedGraphicsCards) {
		return nil, false
	}
	return o.InterconnectedGraphicsCards, true
}

// HasInterconnectedGraphicsCards returns a boolean if a field has been set.
func (o *EquipmentInterconnect) HasInterconnectedGraphicsCards() bool {
	if o != nil && !IsNil(o.InterconnectedGraphicsCards) {
		return true
	}

	return false
}

// SetInterconnectedGraphicsCards gets a reference to the given []GraphicsCardRelationship and assigns it to the InterconnectedGraphicsCards field.
func (o *EquipmentInterconnect) SetInterconnectedGraphicsCards(v []GraphicsCardRelationship) {
	o.InterconnectedGraphicsCards = v
}

// GetInterconnectedSharedGraphicsCards returns the InterconnectedSharedGraphicsCards field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EquipmentInterconnect) GetInterconnectedSharedGraphicsCards() []EquipmentSharedGraphicsCardRelationship {
	if o == nil {
		var ret []EquipmentSharedGraphicsCardRelationship
		return ret
	}
	return o.InterconnectedSharedGraphicsCards
}

// GetInterconnectedSharedGraphicsCardsOk returns a tuple with the InterconnectedSharedGraphicsCards field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EquipmentInterconnect) GetInterconnectedSharedGraphicsCardsOk() ([]EquipmentSharedGraphicsCardRelationship, bool) {
	if o == nil || IsNil(o.InterconnectedSharedGraphicsCards) {
		return nil, false
	}
	return o.InterconnectedSharedGraphicsCards, true
}

// HasInterconnectedSharedGraphicsCards returns a boolean if a field has been set.
func (o *EquipmentInterconnect) HasInterconnectedSharedGraphicsCards() bool {
	if o != nil && !IsNil(o.InterconnectedSharedGraphicsCards) {
		return true
	}

	return false
}

// SetInterconnectedSharedGraphicsCards gets a reference to the given []EquipmentSharedGraphicsCardRelationship and assigns it to the InterconnectedSharedGraphicsCards field.
func (o *EquipmentInterconnect) SetInterconnectedSharedGraphicsCards(v []EquipmentSharedGraphicsCardRelationship) {
	o.InterconnectedSharedGraphicsCards = v
}

// GetPciNode returns the PciNode field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EquipmentInterconnect) GetPciNode() PciNodeRelationship {
	if o == nil || IsNil(o.PciNode.Get()) {
		var ret PciNodeRelationship
		return ret
	}
	return *o.PciNode.Get()
}

// GetPciNodeOk returns a tuple with the PciNode field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EquipmentInterconnect) GetPciNodeOk() (*PciNodeRelationship, bool) {
	if o == nil {
		return nil, false
	}
	return o.PciNode.Get(), o.PciNode.IsSet()
}

// HasPciNode returns a boolean if a field has been set.
func (o *EquipmentInterconnect) HasPciNode() bool {
	if o != nil && o.PciNode.IsSet() {
		return true
	}

	return false
}

// SetPciNode gets a reference to the given NullablePciNodeRelationship and assigns it to the PciNode field.
func (o *EquipmentInterconnect) SetPciNode(v PciNodeRelationship) {
	o.PciNode.Set(&v)
}

// SetPciNodeNil sets the value for PciNode to be an explicit nil
func (o *EquipmentInterconnect) SetPciNodeNil() {
	o.PciNode.Set(nil)
}

// UnsetPciNode ensures that no value is present for PciNode, not even an explicit nil
func (o *EquipmentInterconnect) UnsetPciNode() {
	o.PciNode.Unset()
}

// GetRegisteredDevice returns the RegisteredDevice field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EquipmentInterconnect) GetRegisteredDevice() AssetDeviceRegistrationRelationship {
	if o == nil || IsNil(o.RegisteredDevice.Get()) {
		var ret AssetDeviceRegistrationRelationship
		return ret
	}
	return *o.RegisteredDevice.Get()
}

// GetRegisteredDeviceOk returns a tuple with the RegisteredDevice field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EquipmentInterconnect) GetRegisteredDeviceOk() (*AssetDeviceRegistrationRelationship, bool) {
	if o == nil {
		return nil, false
	}
	return o.RegisteredDevice.Get(), o.RegisteredDevice.IsSet()
}

// HasRegisteredDevice returns a boolean if a field has been set.
func (o *EquipmentInterconnect) HasRegisteredDevice() bool {
	if o != nil && o.RegisteredDevice.IsSet() {
		return true
	}

	return false
}

// SetRegisteredDevice gets a reference to the given NullableAssetDeviceRegistrationRelationship and assigns it to the RegisteredDevice field.
func (o *EquipmentInterconnect) SetRegisteredDevice(v AssetDeviceRegistrationRelationship) {
	o.RegisteredDevice.Set(&v)
}

// SetRegisteredDeviceNil sets the value for RegisteredDevice to be an explicit nil
func (o *EquipmentInterconnect) SetRegisteredDeviceNil() {
	o.RegisteredDevice.Set(nil)
}

// UnsetRegisteredDevice ensures that no value is present for RegisteredDevice, not even an explicit nil
func (o *EquipmentInterconnect) UnsetRegisteredDevice() {
	o.RegisteredDevice.Unset()
}

func (o EquipmentInterconnect) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EquipmentInterconnect) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	serializedEquipmentBase, errEquipmentBase := json.Marshal(o.EquipmentBase)
	if errEquipmentBase != nil {
		return map[string]interface{}{}, errEquipmentBase
	}
	errEquipmentBase = json.Unmarshal([]byte(serializedEquipmentBase), &toSerialize)
	if errEquipmentBase != nil {
		return map[string]interface{}{}, errEquipmentBase
	}
	if _, exists := toSerialize["ClassId"]; !exists {
		toSerialize["ClassId"] = o.GetDefaultClassId()
	}
	toSerialize["ClassId"] = o.ClassId
	if _, exists := toSerialize["ObjectType"]; !exists {
		toSerialize["ObjectType"] = o.GetDefaultObjectType()
	}
	toSerialize["ObjectType"] = o.ObjectType
	if !IsNil(o.InterconnectId) {
		toSerialize["InterconnectId"] = o.InterconnectId
	}
	if !IsNil(o.InterconnectType) {
		toSerialize["InterconnectType"] = o.InterconnectType
	}
	if o.ComputeBoard.IsSet() {
		toSerialize["ComputeBoard"] = o.ComputeBoard.Get()
	}
	if o.InterconnectedGraphicsCards != nil {
		toSerialize["InterconnectedGraphicsCards"] = o.InterconnectedGraphicsCards
	}
	if o.InterconnectedSharedGraphicsCards != nil {
		toSerialize["InterconnectedSharedGraphicsCards"] = o.InterconnectedSharedGraphicsCards
	}
	if o.PciNode.IsSet() {
		toSerialize["PciNode"] = o.PciNode.Get()
	}
	if o.RegisteredDevice.IsSet() {
		toSerialize["RegisteredDevice"] = o.RegisteredDevice.Get()
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *EquipmentInterconnect) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"ClassId",
		"ObjectType",
	}

	// defaultValueFuncMap captures the default values for required properties.
	// These values are used when required properties are missing from the payload.
	defaultValueFuncMap := map[string]func() interface{}{
		"ClassId":    o.GetDefaultClassId,
		"ObjectType": o.GetDefaultObjectType,
	}
	var defaultValueApplied bool
	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			if _, ok := defaultValueFuncMap[requiredProperty]; ok {
				allProperties[requiredProperty] = defaultValueFuncMap[requiredProperty]()
				defaultValueApplied = true
			}
		}
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	if defaultValueApplied {
		data, err = json.Marshal(allProperties)
		if err != nil {
			return err
		}
	}
	type EquipmentInterconnectWithoutEmbeddedStruct struct {
		// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.
		ClassId string `json:"ClassId"`
		// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
		ObjectType string `json:"ObjectType"`
		// The identifier of the interconnect.
		InterconnectId *string `json:"InterconnectId,omitempty"`
		// Type of interconnectivity provided by this interconnect. * `Unknown` - Interconnect type is unknown. * `NVLink` - Interconnect type is NVLink.
		InterconnectType *string                          `json:"InterconnectType,omitempty"`
		ComputeBoard     NullableComputeBoardRelationship `json:"ComputeBoard,omitempty"`
		// An array of relationships to graphicsCard resources.
		InterconnectedGraphicsCards []GraphicsCardRelationship `json:"InterconnectedGraphicsCards,omitempty"`
		// An array of relationships to equipmentSharedGraphicsCard resources.
		InterconnectedSharedGraphicsCards []EquipmentSharedGraphicsCardRelationship   `json:"InterconnectedSharedGraphicsCards,omitempty"`
		PciNode                           NullablePciNodeRelationship                 `json:"PciNode,omitempty"`
		RegisteredDevice                  NullableAssetDeviceRegistrationRelationship `json:"RegisteredDevice,omitempty"`
	}

	varEquipmentInterconnectWithoutEmbeddedStruct := EquipmentInterconnectWithoutEmbeddedStruct{}

	err = json.Unmarshal(data, &varEquipmentInterconnectWithoutEmbeddedStruct)
	if err == nil {
		varEquipmentInterconnect := _EquipmentInterconnect{}
		varEquipmentInterconnect.ClassId = varEquipmentInterconnectWithoutEmbeddedStruct.ClassId
		varEquipmentInterconnect.ObjectType = varEquipmentInterconnectWithoutEmbeddedStruct.ObjectType
		varEquipmentInterconnect.InterconnectId = varEquipmentInterconnectWithoutEmbeddedStruct.InterconnectId
		varEquipmentInterconnect.InterconnectType = varEquipmentInterconnectWithoutEmbeddedStruct.InterconnectType
		varEquipmentInterconnect.ComputeBoard = varEquipmentInterconnectWithoutEmbeddedStruct.ComputeBoard
		varEquipmentInterconnect.InterconnectedGraphicsCards = varEquipmentInterconnectWithoutEmbeddedStruct.InterconnectedGraphicsCards
		varEquipmentInterconnect.InterconnectedSharedGraphicsCards = varEquipmentInterconnectWithoutEmbeddedStruct.InterconnectedSharedGraphicsCards
		varEquipmentInterconnect.PciNode = varEquipmentInterconnectWithoutEmbeddedStruct.PciNode
		varEquipmentInterconnect.RegisteredDevice = varEquipmentInterconnectWithoutEmbeddedStruct.RegisteredDevice
		*o = EquipmentInterconnect(varEquipmentInterconnect)
	} else {
		return err
	}

	varEquipmentInterconnect := _EquipmentInterconnect{}

	err = json.Unmarshal(data, &varEquipmentInterconnect)
	if err == nil {
		o.EquipmentBase = varEquipmentInterconnect.EquipmentBase
	} else {
		return err
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "ClassId")
		delete(additionalProperties, "ObjectType")
		delete(additionalProperties, "InterconnectId")
		delete(additionalProperties, "InterconnectType")
		delete(additionalProperties, "ComputeBoard")
		delete(additionalProperties, "InterconnectedGraphicsCards")
		delete(additionalProperties, "InterconnectedSharedGraphicsCards")
		delete(additionalProperties, "PciNode")
		delete(additionalProperties, "RegisteredDevice")

		// remove fields from embedded structs
		reflectEquipmentBase := reflect.ValueOf(o.EquipmentBase)
		for i := 0; i < reflectEquipmentBase.Type().NumField(); i++ {
			t := reflectEquipmentBase.Type().Field(i)

			if jsonTag := t.Tag.Get("json"); jsonTag != "" {
				fieldName := ""
				if commaIdx := strings.Index(jsonTag, ","); commaIdx > 0 {
					fieldName = jsonTag[:commaIdx]
				} else {
					fieldName = jsonTag
				}
				if fieldName != "AdditionalProperties" {
					delete(additionalProperties, fieldName)
				}
			}
		}

		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableEquipmentInterconnect struct {
	value *EquipmentInterconnect
	isSet bool
}

func (v NullableEquipmentInterconnect) Get() *EquipmentInterconnect {
	return v.value
}

func (v *NullableEquipmentInterconnect) Set(val *EquipmentInterconnect) {
	v.value = val
	v.isSet = true
}

func (v NullableEquipmentInterconnect) IsSet() bool {
	return v.isSet
}

func (v *NullableEquipmentInterconnect) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEquipmentInterconnect(val *EquipmentInterconnect) *NullableEquipmentInterconnect {
	return &NullableEquipmentInterconnect{value: val, isSet: true}
}

func (v NullableEquipmentInterconnect) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEquipmentInterconnect) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
