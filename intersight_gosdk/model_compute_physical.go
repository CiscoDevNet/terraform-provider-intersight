/*
 * Cisco Intersight
 *
 * Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations. The Intersight OpenAPI document defines the complete set of properties that are returned in the HTTP response. From that perspective, a client can expect that no additional properties are returned, unless these properties are explicitly defined in the OpenAPI document. However, when a client uses an older version of the Intersight OpenAPI document, the server may send additional properties because the software is more recent than the client. In that case, the client may receive properties that it does not know about. Some generated SDKs perform a strict validation of the HTTP response body against the OpenAPI document. This document was created on 2021-07-21T16:37:30Z.
 *
 * API version: 1.0.9-4403
 * Contact: intersight@cisco.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package intersight

import (
	"encoding/json"
	"reflect"
	"strings"
)

// ComputePhysical Abstract class for all physical servers.
type ComputePhysical struct {
	EquipmentBase
	// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data. The enum values provides the list of concrete types that can be instantiated from this abstract type.
	ClassId string `json:"ClassId"`
	// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property. The enum values provides the list of concrete types that can be instantiated from this abstract type.
	ObjectType string `json:"ObjectType"`
	// The desired power state of the server.
	AdminPowerState *string                     `json:"AdminPowerState,omitempty"`
	AlarmSummary    NullableComputeAlarmSummary `json:"AlarmSummary,omitempty"`
	// The user defined asset tag assigned to the server.
	AssetTag *string `json:"AssetTag,omitempty"`
	// The amount of memory available on the server.
	AvailableMemory *int64 `json:"AvailableMemory,omitempty"`
	// The BIOS POST completion status of the server.
	BiosPostComplete *bool `json:"BiosPostComplete,omitempty"`
	// The fault summary for the server.
	FaultSummary   *int64             `json:"FaultSummary,omitempty"`
	KvmIpAddresses []ComputeIpAddress `json:"KvmIpAddresses,omitempty"`
	// The management mode of the server. * `IntersightStandalone` - Intersight Standalone mode of operation. * `UCSM` - Unified Computing System Manager mode of operation. * `Intersight` - Intersight managed mode of operation.
	ManagementMode *string `json:"ManagementMode,omitempty"`
	// The maximum memory speed in MHz available on the server.
	MemorySpeed *string `json:"MemorySpeed,omitempty"`
	// Management address of the server.
	MgmtIpAddress *string `json:"MgmtIpAddress,omitempty"`
	// The total number of network adapters present on the server.
	NumAdaptors *int64 `json:"NumAdaptors,omitempty"`
	// The total number of CPU cores present on the server.
	NumCpuCores *int64 `json:"NumCpuCores,omitempty"`
	// The total number of CPU cores enabled on the server.
	NumCpuCoresEnabled *int64 `json:"NumCpuCoresEnabled,omitempty"`
	// The total number of CPUs present on the server.
	NumCpus *int64 `json:"NumCpus,omitempty"`
	// The total number of vNICs which are visible to a host on the server.
	NumEthHostInterfaces *int64 `json:"NumEthHostInterfaces,omitempty"`
	// The total number of vHBAs which are visible to a host on the server.
	NumFcHostInterfaces *int64 `json:"NumFcHostInterfaces,omitempty"`
	// The total number of threads the server is capable of handling.
	NumThreads *int64 `json:"NumThreads,omitempty"`
	// The actual power state of the server.
	OperPowerState *string  `json:"OperPowerState,omitempty"`
	OperReason     []string `json:"OperReason,omitempty"`
	// The operational state of the server.
	OperState *string `json:"OperState,omitempty"`
	// The operability of the server.
	Operability *string `json:"Operability,omitempty"`
	// The platform type of the registered device - whether managed by UCSM or operating in standalone mode.
	PlatformType *string `json:"PlatformType,omitempty"`
	// The distinguished name of the service profile to which the server is associated to. It is applicable only for servers which are managed via UCSM.
	ServiceProfile *string `json:"ServiceProfile,omitempty"`
	// The total memory available on the server.
	TotalMemory *int64 `json:"TotalMemory,omitempty"`
	// The user defined label assigned to the server.
	UserLabel *string `json:"UserLabel,omitempty"`
	// The universally unique identity of the server.
	Uuid *string `json:"Uuid,omitempty"`
	// An array of relationships to bootCddDevice resources.
	BootCddDevices         []BootCddDeviceRelationship         `json:"BootCddDevices,omitempty"`
	BootDeviceBootSecurity *BootDeviceBootSecurityRelationship `json:"BootDeviceBootSecurity,omitempty"`
	// An array of relationships to bootHddDevice resources.
	BootHddDevices []BootHddDeviceRelationship `json:"BootHddDevices,omitempty"`
	// An array of relationships to bootIscsiDevice resources.
	BootIscsiDevices []BootIscsiDeviceRelationship `json:"BootIscsiDevices,omitempty"`
	// An array of relationships to bootNvmeDevice resources.
	BootNvmeDevices []BootNvmeDeviceRelationship `json:"BootNvmeDevices,omitempty"`
	// An array of relationships to bootPchStorageDevice resources.
	BootPchStorageDevices []BootPchStorageDeviceRelationship `json:"BootPchStorageDevices,omitempty"`
	// An array of relationships to bootPxeDevice resources.
	BootPxeDevices []BootPxeDeviceRelationship `json:"BootPxeDevices,omitempty"`
	// An array of relationships to bootSanDevice resources.
	BootSanDevices []BootSanDeviceRelationship `json:"BootSanDevices,omitempty"`
	// An array of relationships to bootSdDevice resources.
	BootSdDevices []BootSdDeviceRelationship `json:"BootSdDevices,omitempty"`
	// An array of relationships to bootUefiShellDevice resources.
	BootUefiShellDevices []BootUefiShellDeviceRelationship `json:"BootUefiShellDevices,omitempty"`
	// An array of relationships to bootUsbDevice resources.
	BootUsbDevices []BootUsbDeviceRelationship `json:"BootUsbDevices,omitempty"`
	// An array of relationships to bootVmediaDevice resources.
	BootVmediaDevices    []BootVmediaDeviceRelationship         `json:"BootVmediaDevices,omitempty"`
	MgmtIdentity         *EquipmentPhysicalIdentityRelationship `json:"MgmtIdentity,omitempty"`
	Vmedia               *ComputeVmediaRelationship             `json:"Vmedia,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ComputePhysical ComputePhysical

// NewComputePhysical instantiates a new ComputePhysical object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewComputePhysical(classId string, objectType string) *ComputePhysical {
	this := ComputePhysical{}
	this.ClassId = classId
	this.ObjectType = objectType
	var managementMode string = "IntersightStandalone"
	this.ManagementMode = &managementMode
	return &this
}

// NewComputePhysicalWithDefaults instantiates a new ComputePhysical object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewComputePhysicalWithDefaults() *ComputePhysical {
	this := ComputePhysical{}
	var managementMode string = "IntersightStandalone"
	this.ManagementMode = &managementMode
	return &this
}

// GetClassId returns the ClassId field value
func (o *ComputePhysical) GetClassId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ClassId
}

// GetClassIdOk returns a tuple with the ClassId field value
// and a boolean to check if the value has been set.
func (o *ComputePhysical) GetClassIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ClassId, true
}

// SetClassId sets field value
func (o *ComputePhysical) SetClassId(v string) {
	o.ClassId = v
}

// GetObjectType returns the ObjectType field value
func (o *ComputePhysical) GetObjectType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ObjectType
}

// GetObjectTypeOk returns a tuple with the ObjectType field value
// and a boolean to check if the value has been set.
func (o *ComputePhysical) GetObjectTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ObjectType, true
}

// SetObjectType sets field value
func (o *ComputePhysical) SetObjectType(v string) {
	o.ObjectType = v
}

// GetAdminPowerState returns the AdminPowerState field value if set, zero value otherwise.
func (o *ComputePhysical) GetAdminPowerState() string {
	if o == nil || o.AdminPowerState == nil {
		var ret string
		return ret
	}
	return *o.AdminPowerState
}

// GetAdminPowerStateOk returns a tuple with the AdminPowerState field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComputePhysical) GetAdminPowerStateOk() (*string, bool) {
	if o == nil || o.AdminPowerState == nil {
		return nil, false
	}
	return o.AdminPowerState, true
}

// HasAdminPowerState returns a boolean if a field has been set.
func (o *ComputePhysical) HasAdminPowerState() bool {
	if o != nil && o.AdminPowerState != nil {
		return true
	}

	return false
}

// SetAdminPowerState gets a reference to the given string and assigns it to the AdminPowerState field.
func (o *ComputePhysical) SetAdminPowerState(v string) {
	o.AdminPowerState = &v
}

// GetAlarmSummary returns the AlarmSummary field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ComputePhysical) GetAlarmSummary() ComputeAlarmSummary {
	if o == nil || o.AlarmSummary.Get() == nil {
		var ret ComputeAlarmSummary
		return ret
	}
	return *o.AlarmSummary.Get()
}

// GetAlarmSummaryOk returns a tuple with the AlarmSummary field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ComputePhysical) GetAlarmSummaryOk() (*ComputeAlarmSummary, bool) {
	if o == nil {
		return nil, false
	}
	return o.AlarmSummary.Get(), o.AlarmSummary.IsSet()
}

// HasAlarmSummary returns a boolean if a field has been set.
func (o *ComputePhysical) HasAlarmSummary() bool {
	if o != nil && o.AlarmSummary.IsSet() {
		return true
	}

	return false
}

// SetAlarmSummary gets a reference to the given NullableComputeAlarmSummary and assigns it to the AlarmSummary field.
func (o *ComputePhysical) SetAlarmSummary(v ComputeAlarmSummary) {
	o.AlarmSummary.Set(&v)
}

// SetAlarmSummaryNil sets the value for AlarmSummary to be an explicit nil
func (o *ComputePhysical) SetAlarmSummaryNil() {
	o.AlarmSummary.Set(nil)
}

// UnsetAlarmSummary ensures that no value is present for AlarmSummary, not even an explicit nil
func (o *ComputePhysical) UnsetAlarmSummary() {
	o.AlarmSummary.Unset()
}

// GetAssetTag returns the AssetTag field value if set, zero value otherwise.
func (o *ComputePhysical) GetAssetTag() string {
	if o == nil || o.AssetTag == nil {
		var ret string
		return ret
	}
	return *o.AssetTag
}

// GetAssetTagOk returns a tuple with the AssetTag field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComputePhysical) GetAssetTagOk() (*string, bool) {
	if o == nil || o.AssetTag == nil {
		return nil, false
	}
	return o.AssetTag, true
}

// HasAssetTag returns a boolean if a field has been set.
func (o *ComputePhysical) HasAssetTag() bool {
	if o != nil && o.AssetTag != nil {
		return true
	}

	return false
}

// SetAssetTag gets a reference to the given string and assigns it to the AssetTag field.
func (o *ComputePhysical) SetAssetTag(v string) {
	o.AssetTag = &v
}

// GetAvailableMemory returns the AvailableMemory field value if set, zero value otherwise.
func (o *ComputePhysical) GetAvailableMemory() int64 {
	if o == nil || o.AvailableMemory == nil {
		var ret int64
		return ret
	}
	return *o.AvailableMemory
}

// GetAvailableMemoryOk returns a tuple with the AvailableMemory field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComputePhysical) GetAvailableMemoryOk() (*int64, bool) {
	if o == nil || o.AvailableMemory == nil {
		return nil, false
	}
	return o.AvailableMemory, true
}

// HasAvailableMemory returns a boolean if a field has been set.
func (o *ComputePhysical) HasAvailableMemory() bool {
	if o != nil && o.AvailableMemory != nil {
		return true
	}

	return false
}

// SetAvailableMemory gets a reference to the given int64 and assigns it to the AvailableMemory field.
func (o *ComputePhysical) SetAvailableMemory(v int64) {
	o.AvailableMemory = &v
}

// GetBiosPostComplete returns the BiosPostComplete field value if set, zero value otherwise.
func (o *ComputePhysical) GetBiosPostComplete() bool {
	if o == nil || o.BiosPostComplete == nil {
		var ret bool
		return ret
	}
	return *o.BiosPostComplete
}

// GetBiosPostCompleteOk returns a tuple with the BiosPostComplete field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComputePhysical) GetBiosPostCompleteOk() (*bool, bool) {
	if o == nil || o.BiosPostComplete == nil {
		return nil, false
	}
	return o.BiosPostComplete, true
}

// HasBiosPostComplete returns a boolean if a field has been set.
func (o *ComputePhysical) HasBiosPostComplete() bool {
	if o != nil && o.BiosPostComplete != nil {
		return true
	}

	return false
}

// SetBiosPostComplete gets a reference to the given bool and assigns it to the BiosPostComplete field.
func (o *ComputePhysical) SetBiosPostComplete(v bool) {
	o.BiosPostComplete = &v
}

// GetFaultSummary returns the FaultSummary field value if set, zero value otherwise.
func (o *ComputePhysical) GetFaultSummary() int64 {
	if o == nil || o.FaultSummary == nil {
		var ret int64
		return ret
	}
	return *o.FaultSummary
}

// GetFaultSummaryOk returns a tuple with the FaultSummary field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComputePhysical) GetFaultSummaryOk() (*int64, bool) {
	if o == nil || o.FaultSummary == nil {
		return nil, false
	}
	return o.FaultSummary, true
}

// HasFaultSummary returns a boolean if a field has been set.
func (o *ComputePhysical) HasFaultSummary() bool {
	if o != nil && o.FaultSummary != nil {
		return true
	}

	return false
}

// SetFaultSummary gets a reference to the given int64 and assigns it to the FaultSummary field.
func (o *ComputePhysical) SetFaultSummary(v int64) {
	o.FaultSummary = &v
}

// GetKvmIpAddresses returns the KvmIpAddresses field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ComputePhysical) GetKvmIpAddresses() []ComputeIpAddress {
	if o == nil {
		var ret []ComputeIpAddress
		return ret
	}
	return o.KvmIpAddresses
}

// GetKvmIpAddressesOk returns a tuple with the KvmIpAddresses field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ComputePhysical) GetKvmIpAddressesOk() (*[]ComputeIpAddress, bool) {
	if o == nil || o.KvmIpAddresses == nil {
		return nil, false
	}
	return &o.KvmIpAddresses, true
}

// HasKvmIpAddresses returns a boolean if a field has been set.
func (o *ComputePhysical) HasKvmIpAddresses() bool {
	if o != nil && o.KvmIpAddresses != nil {
		return true
	}

	return false
}

// SetKvmIpAddresses gets a reference to the given []ComputeIpAddress and assigns it to the KvmIpAddresses field.
func (o *ComputePhysical) SetKvmIpAddresses(v []ComputeIpAddress) {
	o.KvmIpAddresses = v
}

// GetManagementMode returns the ManagementMode field value if set, zero value otherwise.
func (o *ComputePhysical) GetManagementMode() string {
	if o == nil || o.ManagementMode == nil {
		var ret string
		return ret
	}
	return *o.ManagementMode
}

// GetManagementModeOk returns a tuple with the ManagementMode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComputePhysical) GetManagementModeOk() (*string, bool) {
	if o == nil || o.ManagementMode == nil {
		return nil, false
	}
	return o.ManagementMode, true
}

// HasManagementMode returns a boolean if a field has been set.
func (o *ComputePhysical) HasManagementMode() bool {
	if o != nil && o.ManagementMode != nil {
		return true
	}

	return false
}

// SetManagementMode gets a reference to the given string and assigns it to the ManagementMode field.
func (o *ComputePhysical) SetManagementMode(v string) {
	o.ManagementMode = &v
}

// GetMemorySpeed returns the MemorySpeed field value if set, zero value otherwise.
func (o *ComputePhysical) GetMemorySpeed() string {
	if o == nil || o.MemorySpeed == nil {
		var ret string
		return ret
	}
	return *o.MemorySpeed
}

// GetMemorySpeedOk returns a tuple with the MemorySpeed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComputePhysical) GetMemorySpeedOk() (*string, bool) {
	if o == nil || o.MemorySpeed == nil {
		return nil, false
	}
	return o.MemorySpeed, true
}

// HasMemorySpeed returns a boolean if a field has been set.
func (o *ComputePhysical) HasMemorySpeed() bool {
	if o != nil && o.MemorySpeed != nil {
		return true
	}

	return false
}

// SetMemorySpeed gets a reference to the given string and assigns it to the MemorySpeed field.
func (o *ComputePhysical) SetMemorySpeed(v string) {
	o.MemorySpeed = &v
}

// GetMgmtIpAddress returns the MgmtIpAddress field value if set, zero value otherwise.
func (o *ComputePhysical) GetMgmtIpAddress() string {
	if o == nil || o.MgmtIpAddress == nil {
		var ret string
		return ret
	}
	return *o.MgmtIpAddress
}

// GetMgmtIpAddressOk returns a tuple with the MgmtIpAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComputePhysical) GetMgmtIpAddressOk() (*string, bool) {
	if o == nil || o.MgmtIpAddress == nil {
		return nil, false
	}
	return o.MgmtIpAddress, true
}

// HasMgmtIpAddress returns a boolean if a field has been set.
func (o *ComputePhysical) HasMgmtIpAddress() bool {
	if o != nil && o.MgmtIpAddress != nil {
		return true
	}

	return false
}

// SetMgmtIpAddress gets a reference to the given string and assigns it to the MgmtIpAddress field.
func (o *ComputePhysical) SetMgmtIpAddress(v string) {
	o.MgmtIpAddress = &v
}

// GetNumAdaptors returns the NumAdaptors field value if set, zero value otherwise.
func (o *ComputePhysical) GetNumAdaptors() int64 {
	if o == nil || o.NumAdaptors == nil {
		var ret int64
		return ret
	}
	return *o.NumAdaptors
}

// GetNumAdaptorsOk returns a tuple with the NumAdaptors field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComputePhysical) GetNumAdaptorsOk() (*int64, bool) {
	if o == nil || o.NumAdaptors == nil {
		return nil, false
	}
	return o.NumAdaptors, true
}

// HasNumAdaptors returns a boolean if a field has been set.
func (o *ComputePhysical) HasNumAdaptors() bool {
	if o != nil && o.NumAdaptors != nil {
		return true
	}

	return false
}

// SetNumAdaptors gets a reference to the given int64 and assigns it to the NumAdaptors field.
func (o *ComputePhysical) SetNumAdaptors(v int64) {
	o.NumAdaptors = &v
}

// GetNumCpuCores returns the NumCpuCores field value if set, zero value otherwise.
func (o *ComputePhysical) GetNumCpuCores() int64 {
	if o == nil || o.NumCpuCores == nil {
		var ret int64
		return ret
	}
	return *o.NumCpuCores
}

// GetNumCpuCoresOk returns a tuple with the NumCpuCores field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComputePhysical) GetNumCpuCoresOk() (*int64, bool) {
	if o == nil || o.NumCpuCores == nil {
		return nil, false
	}
	return o.NumCpuCores, true
}

// HasNumCpuCores returns a boolean if a field has been set.
func (o *ComputePhysical) HasNumCpuCores() bool {
	if o != nil && o.NumCpuCores != nil {
		return true
	}

	return false
}

// SetNumCpuCores gets a reference to the given int64 and assigns it to the NumCpuCores field.
func (o *ComputePhysical) SetNumCpuCores(v int64) {
	o.NumCpuCores = &v
}

// GetNumCpuCoresEnabled returns the NumCpuCoresEnabled field value if set, zero value otherwise.
func (o *ComputePhysical) GetNumCpuCoresEnabled() int64 {
	if o == nil || o.NumCpuCoresEnabled == nil {
		var ret int64
		return ret
	}
	return *o.NumCpuCoresEnabled
}

// GetNumCpuCoresEnabledOk returns a tuple with the NumCpuCoresEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComputePhysical) GetNumCpuCoresEnabledOk() (*int64, bool) {
	if o == nil || o.NumCpuCoresEnabled == nil {
		return nil, false
	}
	return o.NumCpuCoresEnabled, true
}

// HasNumCpuCoresEnabled returns a boolean if a field has been set.
func (o *ComputePhysical) HasNumCpuCoresEnabled() bool {
	if o != nil && o.NumCpuCoresEnabled != nil {
		return true
	}

	return false
}

// SetNumCpuCoresEnabled gets a reference to the given int64 and assigns it to the NumCpuCoresEnabled field.
func (o *ComputePhysical) SetNumCpuCoresEnabled(v int64) {
	o.NumCpuCoresEnabled = &v
}

// GetNumCpus returns the NumCpus field value if set, zero value otherwise.
func (o *ComputePhysical) GetNumCpus() int64 {
	if o == nil || o.NumCpus == nil {
		var ret int64
		return ret
	}
	return *o.NumCpus
}

// GetNumCpusOk returns a tuple with the NumCpus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComputePhysical) GetNumCpusOk() (*int64, bool) {
	if o == nil || o.NumCpus == nil {
		return nil, false
	}
	return o.NumCpus, true
}

// HasNumCpus returns a boolean if a field has been set.
func (o *ComputePhysical) HasNumCpus() bool {
	if o != nil && o.NumCpus != nil {
		return true
	}

	return false
}

// SetNumCpus gets a reference to the given int64 and assigns it to the NumCpus field.
func (o *ComputePhysical) SetNumCpus(v int64) {
	o.NumCpus = &v
}

// GetNumEthHostInterfaces returns the NumEthHostInterfaces field value if set, zero value otherwise.
func (o *ComputePhysical) GetNumEthHostInterfaces() int64 {
	if o == nil || o.NumEthHostInterfaces == nil {
		var ret int64
		return ret
	}
	return *o.NumEthHostInterfaces
}

// GetNumEthHostInterfacesOk returns a tuple with the NumEthHostInterfaces field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComputePhysical) GetNumEthHostInterfacesOk() (*int64, bool) {
	if o == nil || o.NumEthHostInterfaces == nil {
		return nil, false
	}
	return o.NumEthHostInterfaces, true
}

// HasNumEthHostInterfaces returns a boolean if a field has been set.
func (o *ComputePhysical) HasNumEthHostInterfaces() bool {
	if o != nil && o.NumEthHostInterfaces != nil {
		return true
	}

	return false
}

// SetNumEthHostInterfaces gets a reference to the given int64 and assigns it to the NumEthHostInterfaces field.
func (o *ComputePhysical) SetNumEthHostInterfaces(v int64) {
	o.NumEthHostInterfaces = &v
}

// GetNumFcHostInterfaces returns the NumFcHostInterfaces field value if set, zero value otherwise.
func (o *ComputePhysical) GetNumFcHostInterfaces() int64 {
	if o == nil || o.NumFcHostInterfaces == nil {
		var ret int64
		return ret
	}
	return *o.NumFcHostInterfaces
}

// GetNumFcHostInterfacesOk returns a tuple with the NumFcHostInterfaces field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComputePhysical) GetNumFcHostInterfacesOk() (*int64, bool) {
	if o == nil || o.NumFcHostInterfaces == nil {
		return nil, false
	}
	return o.NumFcHostInterfaces, true
}

// HasNumFcHostInterfaces returns a boolean if a field has been set.
func (o *ComputePhysical) HasNumFcHostInterfaces() bool {
	if o != nil && o.NumFcHostInterfaces != nil {
		return true
	}

	return false
}

// SetNumFcHostInterfaces gets a reference to the given int64 and assigns it to the NumFcHostInterfaces field.
func (o *ComputePhysical) SetNumFcHostInterfaces(v int64) {
	o.NumFcHostInterfaces = &v
}

// GetNumThreads returns the NumThreads field value if set, zero value otherwise.
func (o *ComputePhysical) GetNumThreads() int64 {
	if o == nil || o.NumThreads == nil {
		var ret int64
		return ret
	}
	return *o.NumThreads
}

// GetNumThreadsOk returns a tuple with the NumThreads field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComputePhysical) GetNumThreadsOk() (*int64, bool) {
	if o == nil || o.NumThreads == nil {
		return nil, false
	}
	return o.NumThreads, true
}

// HasNumThreads returns a boolean if a field has been set.
func (o *ComputePhysical) HasNumThreads() bool {
	if o != nil && o.NumThreads != nil {
		return true
	}

	return false
}

// SetNumThreads gets a reference to the given int64 and assigns it to the NumThreads field.
func (o *ComputePhysical) SetNumThreads(v int64) {
	o.NumThreads = &v
}

// GetOperPowerState returns the OperPowerState field value if set, zero value otherwise.
func (o *ComputePhysical) GetOperPowerState() string {
	if o == nil || o.OperPowerState == nil {
		var ret string
		return ret
	}
	return *o.OperPowerState
}

// GetOperPowerStateOk returns a tuple with the OperPowerState field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComputePhysical) GetOperPowerStateOk() (*string, bool) {
	if o == nil || o.OperPowerState == nil {
		return nil, false
	}
	return o.OperPowerState, true
}

// HasOperPowerState returns a boolean if a field has been set.
func (o *ComputePhysical) HasOperPowerState() bool {
	if o != nil && o.OperPowerState != nil {
		return true
	}

	return false
}

// SetOperPowerState gets a reference to the given string and assigns it to the OperPowerState field.
func (o *ComputePhysical) SetOperPowerState(v string) {
	o.OperPowerState = &v
}

// GetOperReason returns the OperReason field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ComputePhysical) GetOperReason() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.OperReason
}

// GetOperReasonOk returns a tuple with the OperReason field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ComputePhysical) GetOperReasonOk() (*[]string, bool) {
	if o == nil || o.OperReason == nil {
		return nil, false
	}
	return &o.OperReason, true
}

// HasOperReason returns a boolean if a field has been set.
func (o *ComputePhysical) HasOperReason() bool {
	if o != nil && o.OperReason != nil {
		return true
	}

	return false
}

// SetOperReason gets a reference to the given []string and assigns it to the OperReason field.
func (o *ComputePhysical) SetOperReason(v []string) {
	o.OperReason = v
}

// GetOperState returns the OperState field value if set, zero value otherwise.
func (o *ComputePhysical) GetOperState() string {
	if o == nil || o.OperState == nil {
		var ret string
		return ret
	}
	return *o.OperState
}

// GetOperStateOk returns a tuple with the OperState field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComputePhysical) GetOperStateOk() (*string, bool) {
	if o == nil || o.OperState == nil {
		return nil, false
	}
	return o.OperState, true
}

// HasOperState returns a boolean if a field has been set.
func (o *ComputePhysical) HasOperState() bool {
	if o != nil && o.OperState != nil {
		return true
	}

	return false
}

// SetOperState gets a reference to the given string and assigns it to the OperState field.
func (o *ComputePhysical) SetOperState(v string) {
	o.OperState = &v
}

// GetOperability returns the Operability field value if set, zero value otherwise.
func (o *ComputePhysical) GetOperability() string {
	if o == nil || o.Operability == nil {
		var ret string
		return ret
	}
	return *o.Operability
}

// GetOperabilityOk returns a tuple with the Operability field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComputePhysical) GetOperabilityOk() (*string, bool) {
	if o == nil || o.Operability == nil {
		return nil, false
	}
	return o.Operability, true
}

// HasOperability returns a boolean if a field has been set.
func (o *ComputePhysical) HasOperability() bool {
	if o != nil && o.Operability != nil {
		return true
	}

	return false
}

// SetOperability gets a reference to the given string and assigns it to the Operability field.
func (o *ComputePhysical) SetOperability(v string) {
	o.Operability = &v
}

// GetPlatformType returns the PlatformType field value if set, zero value otherwise.
func (o *ComputePhysical) GetPlatformType() string {
	if o == nil || o.PlatformType == nil {
		var ret string
		return ret
	}
	return *o.PlatformType
}

// GetPlatformTypeOk returns a tuple with the PlatformType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComputePhysical) GetPlatformTypeOk() (*string, bool) {
	if o == nil || o.PlatformType == nil {
		return nil, false
	}
	return o.PlatformType, true
}

// HasPlatformType returns a boolean if a field has been set.
func (o *ComputePhysical) HasPlatformType() bool {
	if o != nil && o.PlatformType != nil {
		return true
	}

	return false
}

// SetPlatformType gets a reference to the given string and assigns it to the PlatformType field.
func (o *ComputePhysical) SetPlatformType(v string) {
	o.PlatformType = &v
}

// GetServiceProfile returns the ServiceProfile field value if set, zero value otherwise.
func (o *ComputePhysical) GetServiceProfile() string {
	if o == nil || o.ServiceProfile == nil {
		var ret string
		return ret
	}
	return *o.ServiceProfile
}

// GetServiceProfileOk returns a tuple with the ServiceProfile field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComputePhysical) GetServiceProfileOk() (*string, bool) {
	if o == nil || o.ServiceProfile == nil {
		return nil, false
	}
	return o.ServiceProfile, true
}

// HasServiceProfile returns a boolean if a field has been set.
func (o *ComputePhysical) HasServiceProfile() bool {
	if o != nil && o.ServiceProfile != nil {
		return true
	}

	return false
}

// SetServiceProfile gets a reference to the given string and assigns it to the ServiceProfile field.
func (o *ComputePhysical) SetServiceProfile(v string) {
	o.ServiceProfile = &v
}

// GetTotalMemory returns the TotalMemory field value if set, zero value otherwise.
func (o *ComputePhysical) GetTotalMemory() int64 {
	if o == nil || o.TotalMemory == nil {
		var ret int64
		return ret
	}
	return *o.TotalMemory
}

// GetTotalMemoryOk returns a tuple with the TotalMemory field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComputePhysical) GetTotalMemoryOk() (*int64, bool) {
	if o == nil || o.TotalMemory == nil {
		return nil, false
	}
	return o.TotalMemory, true
}

// HasTotalMemory returns a boolean if a field has been set.
func (o *ComputePhysical) HasTotalMemory() bool {
	if o != nil && o.TotalMemory != nil {
		return true
	}

	return false
}

// SetTotalMemory gets a reference to the given int64 and assigns it to the TotalMemory field.
func (o *ComputePhysical) SetTotalMemory(v int64) {
	o.TotalMemory = &v
}

// GetUserLabel returns the UserLabel field value if set, zero value otherwise.
func (o *ComputePhysical) GetUserLabel() string {
	if o == nil || o.UserLabel == nil {
		var ret string
		return ret
	}
	return *o.UserLabel
}

// GetUserLabelOk returns a tuple with the UserLabel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComputePhysical) GetUserLabelOk() (*string, bool) {
	if o == nil || o.UserLabel == nil {
		return nil, false
	}
	return o.UserLabel, true
}

// HasUserLabel returns a boolean if a field has been set.
func (o *ComputePhysical) HasUserLabel() bool {
	if o != nil && o.UserLabel != nil {
		return true
	}

	return false
}

// SetUserLabel gets a reference to the given string and assigns it to the UserLabel field.
func (o *ComputePhysical) SetUserLabel(v string) {
	o.UserLabel = &v
}

// GetUuid returns the Uuid field value if set, zero value otherwise.
func (o *ComputePhysical) GetUuid() string {
	if o == nil || o.Uuid == nil {
		var ret string
		return ret
	}
	return *o.Uuid
}

// GetUuidOk returns a tuple with the Uuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComputePhysical) GetUuidOk() (*string, bool) {
	if o == nil || o.Uuid == nil {
		return nil, false
	}
	return o.Uuid, true
}

// HasUuid returns a boolean if a field has been set.
func (o *ComputePhysical) HasUuid() bool {
	if o != nil && o.Uuid != nil {
		return true
	}

	return false
}

// SetUuid gets a reference to the given string and assigns it to the Uuid field.
func (o *ComputePhysical) SetUuid(v string) {
	o.Uuid = &v
}

// GetBootCddDevices returns the BootCddDevices field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ComputePhysical) GetBootCddDevices() []BootCddDeviceRelationship {
	if o == nil {
		var ret []BootCddDeviceRelationship
		return ret
	}
	return o.BootCddDevices
}

// GetBootCddDevicesOk returns a tuple with the BootCddDevices field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ComputePhysical) GetBootCddDevicesOk() (*[]BootCddDeviceRelationship, bool) {
	if o == nil || o.BootCddDevices == nil {
		return nil, false
	}
	return &o.BootCddDevices, true
}

// HasBootCddDevices returns a boolean if a field has been set.
func (o *ComputePhysical) HasBootCddDevices() bool {
	if o != nil && o.BootCddDevices != nil {
		return true
	}

	return false
}

// SetBootCddDevices gets a reference to the given []BootCddDeviceRelationship and assigns it to the BootCddDevices field.
func (o *ComputePhysical) SetBootCddDevices(v []BootCddDeviceRelationship) {
	o.BootCddDevices = v
}

// GetBootDeviceBootSecurity returns the BootDeviceBootSecurity field value if set, zero value otherwise.
func (o *ComputePhysical) GetBootDeviceBootSecurity() BootDeviceBootSecurityRelationship {
	if o == nil || o.BootDeviceBootSecurity == nil {
		var ret BootDeviceBootSecurityRelationship
		return ret
	}
	return *o.BootDeviceBootSecurity
}

// GetBootDeviceBootSecurityOk returns a tuple with the BootDeviceBootSecurity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComputePhysical) GetBootDeviceBootSecurityOk() (*BootDeviceBootSecurityRelationship, bool) {
	if o == nil || o.BootDeviceBootSecurity == nil {
		return nil, false
	}
	return o.BootDeviceBootSecurity, true
}

// HasBootDeviceBootSecurity returns a boolean if a field has been set.
func (o *ComputePhysical) HasBootDeviceBootSecurity() bool {
	if o != nil && o.BootDeviceBootSecurity != nil {
		return true
	}

	return false
}

// SetBootDeviceBootSecurity gets a reference to the given BootDeviceBootSecurityRelationship and assigns it to the BootDeviceBootSecurity field.
func (o *ComputePhysical) SetBootDeviceBootSecurity(v BootDeviceBootSecurityRelationship) {
	o.BootDeviceBootSecurity = &v
}

// GetBootHddDevices returns the BootHddDevices field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ComputePhysical) GetBootHddDevices() []BootHddDeviceRelationship {
	if o == nil {
		var ret []BootHddDeviceRelationship
		return ret
	}
	return o.BootHddDevices
}

// GetBootHddDevicesOk returns a tuple with the BootHddDevices field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ComputePhysical) GetBootHddDevicesOk() (*[]BootHddDeviceRelationship, bool) {
	if o == nil || o.BootHddDevices == nil {
		return nil, false
	}
	return &o.BootHddDevices, true
}

// HasBootHddDevices returns a boolean if a field has been set.
func (o *ComputePhysical) HasBootHddDevices() bool {
	if o != nil && o.BootHddDevices != nil {
		return true
	}

	return false
}

// SetBootHddDevices gets a reference to the given []BootHddDeviceRelationship and assigns it to the BootHddDevices field.
func (o *ComputePhysical) SetBootHddDevices(v []BootHddDeviceRelationship) {
	o.BootHddDevices = v
}

// GetBootIscsiDevices returns the BootIscsiDevices field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ComputePhysical) GetBootIscsiDevices() []BootIscsiDeviceRelationship {
	if o == nil {
		var ret []BootIscsiDeviceRelationship
		return ret
	}
	return o.BootIscsiDevices
}

// GetBootIscsiDevicesOk returns a tuple with the BootIscsiDevices field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ComputePhysical) GetBootIscsiDevicesOk() (*[]BootIscsiDeviceRelationship, bool) {
	if o == nil || o.BootIscsiDevices == nil {
		return nil, false
	}
	return &o.BootIscsiDevices, true
}

// HasBootIscsiDevices returns a boolean if a field has been set.
func (o *ComputePhysical) HasBootIscsiDevices() bool {
	if o != nil && o.BootIscsiDevices != nil {
		return true
	}

	return false
}

// SetBootIscsiDevices gets a reference to the given []BootIscsiDeviceRelationship and assigns it to the BootIscsiDevices field.
func (o *ComputePhysical) SetBootIscsiDevices(v []BootIscsiDeviceRelationship) {
	o.BootIscsiDevices = v
}

// GetBootNvmeDevices returns the BootNvmeDevices field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ComputePhysical) GetBootNvmeDevices() []BootNvmeDeviceRelationship {
	if o == nil {
		var ret []BootNvmeDeviceRelationship
		return ret
	}
	return o.BootNvmeDevices
}

// GetBootNvmeDevicesOk returns a tuple with the BootNvmeDevices field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ComputePhysical) GetBootNvmeDevicesOk() (*[]BootNvmeDeviceRelationship, bool) {
	if o == nil || o.BootNvmeDevices == nil {
		return nil, false
	}
	return &o.BootNvmeDevices, true
}

// HasBootNvmeDevices returns a boolean if a field has been set.
func (o *ComputePhysical) HasBootNvmeDevices() bool {
	if o != nil && o.BootNvmeDevices != nil {
		return true
	}

	return false
}

// SetBootNvmeDevices gets a reference to the given []BootNvmeDeviceRelationship and assigns it to the BootNvmeDevices field.
func (o *ComputePhysical) SetBootNvmeDevices(v []BootNvmeDeviceRelationship) {
	o.BootNvmeDevices = v
}

// GetBootPchStorageDevices returns the BootPchStorageDevices field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ComputePhysical) GetBootPchStorageDevices() []BootPchStorageDeviceRelationship {
	if o == nil {
		var ret []BootPchStorageDeviceRelationship
		return ret
	}
	return o.BootPchStorageDevices
}

// GetBootPchStorageDevicesOk returns a tuple with the BootPchStorageDevices field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ComputePhysical) GetBootPchStorageDevicesOk() (*[]BootPchStorageDeviceRelationship, bool) {
	if o == nil || o.BootPchStorageDevices == nil {
		return nil, false
	}
	return &o.BootPchStorageDevices, true
}

// HasBootPchStorageDevices returns a boolean if a field has been set.
func (o *ComputePhysical) HasBootPchStorageDevices() bool {
	if o != nil && o.BootPchStorageDevices != nil {
		return true
	}

	return false
}

// SetBootPchStorageDevices gets a reference to the given []BootPchStorageDeviceRelationship and assigns it to the BootPchStorageDevices field.
func (o *ComputePhysical) SetBootPchStorageDevices(v []BootPchStorageDeviceRelationship) {
	o.BootPchStorageDevices = v
}

// GetBootPxeDevices returns the BootPxeDevices field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ComputePhysical) GetBootPxeDevices() []BootPxeDeviceRelationship {
	if o == nil {
		var ret []BootPxeDeviceRelationship
		return ret
	}
	return o.BootPxeDevices
}

// GetBootPxeDevicesOk returns a tuple with the BootPxeDevices field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ComputePhysical) GetBootPxeDevicesOk() (*[]BootPxeDeviceRelationship, bool) {
	if o == nil || o.BootPxeDevices == nil {
		return nil, false
	}
	return &o.BootPxeDevices, true
}

// HasBootPxeDevices returns a boolean if a field has been set.
func (o *ComputePhysical) HasBootPxeDevices() bool {
	if o != nil && o.BootPxeDevices != nil {
		return true
	}

	return false
}

// SetBootPxeDevices gets a reference to the given []BootPxeDeviceRelationship and assigns it to the BootPxeDevices field.
func (o *ComputePhysical) SetBootPxeDevices(v []BootPxeDeviceRelationship) {
	o.BootPxeDevices = v
}

// GetBootSanDevices returns the BootSanDevices field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ComputePhysical) GetBootSanDevices() []BootSanDeviceRelationship {
	if o == nil {
		var ret []BootSanDeviceRelationship
		return ret
	}
	return o.BootSanDevices
}

// GetBootSanDevicesOk returns a tuple with the BootSanDevices field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ComputePhysical) GetBootSanDevicesOk() (*[]BootSanDeviceRelationship, bool) {
	if o == nil || o.BootSanDevices == nil {
		return nil, false
	}
	return &o.BootSanDevices, true
}

// HasBootSanDevices returns a boolean if a field has been set.
func (o *ComputePhysical) HasBootSanDevices() bool {
	if o != nil && o.BootSanDevices != nil {
		return true
	}

	return false
}

// SetBootSanDevices gets a reference to the given []BootSanDeviceRelationship and assigns it to the BootSanDevices field.
func (o *ComputePhysical) SetBootSanDevices(v []BootSanDeviceRelationship) {
	o.BootSanDevices = v
}

// GetBootSdDevices returns the BootSdDevices field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ComputePhysical) GetBootSdDevices() []BootSdDeviceRelationship {
	if o == nil {
		var ret []BootSdDeviceRelationship
		return ret
	}
	return o.BootSdDevices
}

// GetBootSdDevicesOk returns a tuple with the BootSdDevices field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ComputePhysical) GetBootSdDevicesOk() (*[]BootSdDeviceRelationship, bool) {
	if o == nil || o.BootSdDevices == nil {
		return nil, false
	}
	return &o.BootSdDevices, true
}

// HasBootSdDevices returns a boolean if a field has been set.
func (o *ComputePhysical) HasBootSdDevices() bool {
	if o != nil && o.BootSdDevices != nil {
		return true
	}

	return false
}

// SetBootSdDevices gets a reference to the given []BootSdDeviceRelationship and assigns it to the BootSdDevices field.
func (o *ComputePhysical) SetBootSdDevices(v []BootSdDeviceRelationship) {
	o.BootSdDevices = v
}

// GetBootUefiShellDevices returns the BootUefiShellDevices field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ComputePhysical) GetBootUefiShellDevices() []BootUefiShellDeviceRelationship {
	if o == nil {
		var ret []BootUefiShellDeviceRelationship
		return ret
	}
	return o.BootUefiShellDevices
}

// GetBootUefiShellDevicesOk returns a tuple with the BootUefiShellDevices field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ComputePhysical) GetBootUefiShellDevicesOk() (*[]BootUefiShellDeviceRelationship, bool) {
	if o == nil || o.BootUefiShellDevices == nil {
		return nil, false
	}
	return &o.BootUefiShellDevices, true
}

// HasBootUefiShellDevices returns a boolean if a field has been set.
func (o *ComputePhysical) HasBootUefiShellDevices() bool {
	if o != nil && o.BootUefiShellDevices != nil {
		return true
	}

	return false
}

// SetBootUefiShellDevices gets a reference to the given []BootUefiShellDeviceRelationship and assigns it to the BootUefiShellDevices field.
func (o *ComputePhysical) SetBootUefiShellDevices(v []BootUefiShellDeviceRelationship) {
	o.BootUefiShellDevices = v
}

// GetBootUsbDevices returns the BootUsbDevices field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ComputePhysical) GetBootUsbDevices() []BootUsbDeviceRelationship {
	if o == nil {
		var ret []BootUsbDeviceRelationship
		return ret
	}
	return o.BootUsbDevices
}

// GetBootUsbDevicesOk returns a tuple with the BootUsbDevices field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ComputePhysical) GetBootUsbDevicesOk() (*[]BootUsbDeviceRelationship, bool) {
	if o == nil || o.BootUsbDevices == nil {
		return nil, false
	}
	return &o.BootUsbDevices, true
}

// HasBootUsbDevices returns a boolean if a field has been set.
func (o *ComputePhysical) HasBootUsbDevices() bool {
	if o != nil && o.BootUsbDevices != nil {
		return true
	}

	return false
}

// SetBootUsbDevices gets a reference to the given []BootUsbDeviceRelationship and assigns it to the BootUsbDevices field.
func (o *ComputePhysical) SetBootUsbDevices(v []BootUsbDeviceRelationship) {
	o.BootUsbDevices = v
}

// GetBootVmediaDevices returns the BootVmediaDevices field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ComputePhysical) GetBootVmediaDevices() []BootVmediaDeviceRelationship {
	if o == nil {
		var ret []BootVmediaDeviceRelationship
		return ret
	}
	return o.BootVmediaDevices
}

// GetBootVmediaDevicesOk returns a tuple with the BootVmediaDevices field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ComputePhysical) GetBootVmediaDevicesOk() (*[]BootVmediaDeviceRelationship, bool) {
	if o == nil || o.BootVmediaDevices == nil {
		return nil, false
	}
	return &o.BootVmediaDevices, true
}

// HasBootVmediaDevices returns a boolean if a field has been set.
func (o *ComputePhysical) HasBootVmediaDevices() bool {
	if o != nil && o.BootVmediaDevices != nil {
		return true
	}

	return false
}

// SetBootVmediaDevices gets a reference to the given []BootVmediaDeviceRelationship and assigns it to the BootVmediaDevices field.
func (o *ComputePhysical) SetBootVmediaDevices(v []BootVmediaDeviceRelationship) {
	o.BootVmediaDevices = v
}

// GetMgmtIdentity returns the MgmtIdentity field value if set, zero value otherwise.
func (o *ComputePhysical) GetMgmtIdentity() EquipmentPhysicalIdentityRelationship {
	if o == nil || o.MgmtIdentity == nil {
		var ret EquipmentPhysicalIdentityRelationship
		return ret
	}
	return *o.MgmtIdentity
}

// GetMgmtIdentityOk returns a tuple with the MgmtIdentity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComputePhysical) GetMgmtIdentityOk() (*EquipmentPhysicalIdentityRelationship, bool) {
	if o == nil || o.MgmtIdentity == nil {
		return nil, false
	}
	return o.MgmtIdentity, true
}

// HasMgmtIdentity returns a boolean if a field has been set.
func (o *ComputePhysical) HasMgmtIdentity() bool {
	if o != nil && o.MgmtIdentity != nil {
		return true
	}

	return false
}

// SetMgmtIdentity gets a reference to the given EquipmentPhysicalIdentityRelationship and assigns it to the MgmtIdentity field.
func (o *ComputePhysical) SetMgmtIdentity(v EquipmentPhysicalIdentityRelationship) {
	o.MgmtIdentity = &v
}

// GetVmedia returns the Vmedia field value if set, zero value otherwise.
func (o *ComputePhysical) GetVmedia() ComputeVmediaRelationship {
	if o == nil || o.Vmedia == nil {
		var ret ComputeVmediaRelationship
		return ret
	}
	return *o.Vmedia
}

// GetVmediaOk returns a tuple with the Vmedia field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComputePhysical) GetVmediaOk() (*ComputeVmediaRelationship, bool) {
	if o == nil || o.Vmedia == nil {
		return nil, false
	}
	return o.Vmedia, true
}

// HasVmedia returns a boolean if a field has been set.
func (o *ComputePhysical) HasVmedia() bool {
	if o != nil && o.Vmedia != nil {
		return true
	}

	return false
}

// SetVmedia gets a reference to the given ComputeVmediaRelationship and assigns it to the Vmedia field.
func (o *ComputePhysical) SetVmedia(v ComputeVmediaRelationship) {
	o.Vmedia = &v
}

func (o ComputePhysical) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	serializedEquipmentBase, errEquipmentBase := json.Marshal(o.EquipmentBase)
	if errEquipmentBase != nil {
		return []byte{}, errEquipmentBase
	}
	errEquipmentBase = json.Unmarshal([]byte(serializedEquipmentBase), &toSerialize)
	if errEquipmentBase != nil {
		return []byte{}, errEquipmentBase
	}
	if true {
		toSerialize["ClassId"] = o.ClassId
	}
	if true {
		toSerialize["ObjectType"] = o.ObjectType
	}
	if o.AdminPowerState != nil {
		toSerialize["AdminPowerState"] = o.AdminPowerState
	}
	if o.AlarmSummary.IsSet() {
		toSerialize["AlarmSummary"] = o.AlarmSummary.Get()
	}
	if o.AssetTag != nil {
		toSerialize["AssetTag"] = o.AssetTag
	}
	if o.AvailableMemory != nil {
		toSerialize["AvailableMemory"] = o.AvailableMemory
	}
	if o.BiosPostComplete != nil {
		toSerialize["BiosPostComplete"] = o.BiosPostComplete
	}
	if o.FaultSummary != nil {
		toSerialize["FaultSummary"] = o.FaultSummary
	}
	if o.KvmIpAddresses != nil {
		toSerialize["KvmIpAddresses"] = o.KvmIpAddresses
	}
	if o.ManagementMode != nil {
		toSerialize["ManagementMode"] = o.ManagementMode
	}
	if o.MemorySpeed != nil {
		toSerialize["MemorySpeed"] = o.MemorySpeed
	}
	if o.MgmtIpAddress != nil {
		toSerialize["MgmtIpAddress"] = o.MgmtIpAddress
	}
	if o.NumAdaptors != nil {
		toSerialize["NumAdaptors"] = o.NumAdaptors
	}
	if o.NumCpuCores != nil {
		toSerialize["NumCpuCores"] = o.NumCpuCores
	}
	if o.NumCpuCoresEnabled != nil {
		toSerialize["NumCpuCoresEnabled"] = o.NumCpuCoresEnabled
	}
	if o.NumCpus != nil {
		toSerialize["NumCpus"] = o.NumCpus
	}
	if o.NumEthHostInterfaces != nil {
		toSerialize["NumEthHostInterfaces"] = o.NumEthHostInterfaces
	}
	if o.NumFcHostInterfaces != nil {
		toSerialize["NumFcHostInterfaces"] = o.NumFcHostInterfaces
	}
	if o.NumThreads != nil {
		toSerialize["NumThreads"] = o.NumThreads
	}
	if o.OperPowerState != nil {
		toSerialize["OperPowerState"] = o.OperPowerState
	}
	if o.OperReason != nil {
		toSerialize["OperReason"] = o.OperReason
	}
	if o.OperState != nil {
		toSerialize["OperState"] = o.OperState
	}
	if o.Operability != nil {
		toSerialize["Operability"] = o.Operability
	}
	if o.PlatformType != nil {
		toSerialize["PlatformType"] = o.PlatformType
	}
	if o.ServiceProfile != nil {
		toSerialize["ServiceProfile"] = o.ServiceProfile
	}
	if o.TotalMemory != nil {
		toSerialize["TotalMemory"] = o.TotalMemory
	}
	if o.UserLabel != nil {
		toSerialize["UserLabel"] = o.UserLabel
	}
	if o.Uuid != nil {
		toSerialize["Uuid"] = o.Uuid
	}
	if o.BootCddDevices != nil {
		toSerialize["BootCddDevices"] = o.BootCddDevices
	}
	if o.BootDeviceBootSecurity != nil {
		toSerialize["BootDeviceBootSecurity"] = o.BootDeviceBootSecurity
	}
	if o.BootHddDevices != nil {
		toSerialize["BootHddDevices"] = o.BootHddDevices
	}
	if o.BootIscsiDevices != nil {
		toSerialize["BootIscsiDevices"] = o.BootIscsiDevices
	}
	if o.BootNvmeDevices != nil {
		toSerialize["BootNvmeDevices"] = o.BootNvmeDevices
	}
	if o.BootPchStorageDevices != nil {
		toSerialize["BootPchStorageDevices"] = o.BootPchStorageDevices
	}
	if o.BootPxeDevices != nil {
		toSerialize["BootPxeDevices"] = o.BootPxeDevices
	}
	if o.BootSanDevices != nil {
		toSerialize["BootSanDevices"] = o.BootSanDevices
	}
	if o.BootSdDevices != nil {
		toSerialize["BootSdDevices"] = o.BootSdDevices
	}
	if o.BootUefiShellDevices != nil {
		toSerialize["BootUefiShellDevices"] = o.BootUefiShellDevices
	}
	if o.BootUsbDevices != nil {
		toSerialize["BootUsbDevices"] = o.BootUsbDevices
	}
	if o.BootVmediaDevices != nil {
		toSerialize["BootVmediaDevices"] = o.BootVmediaDevices
	}
	if o.MgmtIdentity != nil {
		toSerialize["MgmtIdentity"] = o.MgmtIdentity
	}
	if o.Vmedia != nil {
		toSerialize["Vmedia"] = o.Vmedia
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *ComputePhysical) UnmarshalJSON(bytes []byte) (err error) {
	type ComputePhysicalWithoutEmbeddedStruct struct {
		// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data. The enum values provides the list of concrete types that can be instantiated from this abstract type.
		ClassId string `json:"ClassId"`
		// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property. The enum values provides the list of concrete types that can be instantiated from this abstract type.
		ObjectType string `json:"ObjectType"`
		// The desired power state of the server.
		AdminPowerState *string                     `json:"AdminPowerState,omitempty"`
		AlarmSummary    NullableComputeAlarmSummary `json:"AlarmSummary,omitempty"`
		// The user defined asset tag assigned to the server.
		AssetTag *string `json:"AssetTag,omitempty"`
		// The amount of memory available on the server.
		AvailableMemory *int64 `json:"AvailableMemory,omitempty"`
		// The BIOS POST completion status of the server.
		BiosPostComplete *bool `json:"BiosPostComplete,omitempty"`
		// The fault summary for the server.
		FaultSummary   *int64             `json:"FaultSummary,omitempty"`
		KvmIpAddresses []ComputeIpAddress `json:"KvmIpAddresses,omitempty"`
		// The management mode of the server. * `IntersightStandalone` - Intersight Standalone mode of operation. * `UCSM` - Unified Computing System Manager mode of operation. * `Intersight` - Intersight managed mode of operation.
		ManagementMode *string `json:"ManagementMode,omitempty"`
		// The maximum memory speed in MHz available on the server.
		MemorySpeed *string `json:"MemorySpeed,omitempty"`
		// Management address of the server.
		MgmtIpAddress *string `json:"MgmtIpAddress,omitempty"`
		// The total number of network adapters present on the server.
		NumAdaptors *int64 `json:"NumAdaptors,omitempty"`
		// The total number of CPU cores present on the server.
		NumCpuCores *int64 `json:"NumCpuCores,omitempty"`
		// The total number of CPU cores enabled on the server.
		NumCpuCoresEnabled *int64 `json:"NumCpuCoresEnabled,omitempty"`
		// The total number of CPUs present on the server.
		NumCpus *int64 `json:"NumCpus,omitempty"`
		// The total number of vNICs which are visible to a host on the server.
		NumEthHostInterfaces *int64 `json:"NumEthHostInterfaces,omitempty"`
		// The total number of vHBAs which are visible to a host on the server.
		NumFcHostInterfaces *int64 `json:"NumFcHostInterfaces,omitempty"`
		// The total number of threads the server is capable of handling.
		NumThreads *int64 `json:"NumThreads,omitempty"`
		// The actual power state of the server.
		OperPowerState *string  `json:"OperPowerState,omitempty"`
		OperReason     []string `json:"OperReason,omitempty"`
		// The operational state of the server.
		OperState *string `json:"OperState,omitempty"`
		// The operability of the server.
		Operability *string `json:"Operability,omitempty"`
		// The platform type of the registered device - whether managed by UCSM or operating in standalone mode.
		PlatformType *string `json:"PlatformType,omitempty"`
		// The distinguished name of the service profile to which the server is associated to. It is applicable only for servers which are managed via UCSM.
		ServiceProfile *string `json:"ServiceProfile,omitempty"`
		// The total memory available on the server.
		TotalMemory *int64 `json:"TotalMemory,omitempty"`
		// The user defined label assigned to the server.
		UserLabel *string `json:"UserLabel,omitempty"`
		// The universally unique identity of the server.
		Uuid *string `json:"Uuid,omitempty"`
		// An array of relationships to bootCddDevice resources.
		BootCddDevices         []BootCddDeviceRelationship         `json:"BootCddDevices,omitempty"`
		BootDeviceBootSecurity *BootDeviceBootSecurityRelationship `json:"BootDeviceBootSecurity,omitempty"`
		// An array of relationships to bootHddDevice resources.
		BootHddDevices []BootHddDeviceRelationship `json:"BootHddDevices,omitempty"`
		// An array of relationships to bootIscsiDevice resources.
		BootIscsiDevices []BootIscsiDeviceRelationship `json:"BootIscsiDevices,omitempty"`
		// An array of relationships to bootNvmeDevice resources.
		BootNvmeDevices []BootNvmeDeviceRelationship `json:"BootNvmeDevices,omitempty"`
		// An array of relationships to bootPchStorageDevice resources.
		BootPchStorageDevices []BootPchStorageDeviceRelationship `json:"BootPchStorageDevices,omitempty"`
		// An array of relationships to bootPxeDevice resources.
		BootPxeDevices []BootPxeDeviceRelationship `json:"BootPxeDevices,omitempty"`
		// An array of relationships to bootSanDevice resources.
		BootSanDevices []BootSanDeviceRelationship `json:"BootSanDevices,omitempty"`
		// An array of relationships to bootSdDevice resources.
		BootSdDevices []BootSdDeviceRelationship `json:"BootSdDevices,omitempty"`
		// An array of relationships to bootUefiShellDevice resources.
		BootUefiShellDevices []BootUefiShellDeviceRelationship `json:"BootUefiShellDevices,omitempty"`
		// An array of relationships to bootUsbDevice resources.
		BootUsbDevices []BootUsbDeviceRelationship `json:"BootUsbDevices,omitempty"`
		// An array of relationships to bootVmediaDevice resources.
		BootVmediaDevices []BootVmediaDeviceRelationship         `json:"BootVmediaDevices,omitempty"`
		MgmtIdentity      *EquipmentPhysicalIdentityRelationship `json:"MgmtIdentity,omitempty"`
		Vmedia            *ComputeVmediaRelationship             `json:"Vmedia,omitempty"`
	}

	varComputePhysicalWithoutEmbeddedStruct := ComputePhysicalWithoutEmbeddedStruct{}

	err = json.Unmarshal(bytes, &varComputePhysicalWithoutEmbeddedStruct)
	if err == nil {
		varComputePhysical := _ComputePhysical{}
		varComputePhysical.ClassId = varComputePhysicalWithoutEmbeddedStruct.ClassId
		varComputePhysical.ObjectType = varComputePhysicalWithoutEmbeddedStruct.ObjectType
		varComputePhysical.AdminPowerState = varComputePhysicalWithoutEmbeddedStruct.AdminPowerState
		varComputePhysical.AlarmSummary = varComputePhysicalWithoutEmbeddedStruct.AlarmSummary
		varComputePhysical.AssetTag = varComputePhysicalWithoutEmbeddedStruct.AssetTag
		varComputePhysical.AvailableMemory = varComputePhysicalWithoutEmbeddedStruct.AvailableMemory
		varComputePhysical.BiosPostComplete = varComputePhysicalWithoutEmbeddedStruct.BiosPostComplete
		varComputePhysical.FaultSummary = varComputePhysicalWithoutEmbeddedStruct.FaultSummary
		varComputePhysical.KvmIpAddresses = varComputePhysicalWithoutEmbeddedStruct.KvmIpAddresses
		varComputePhysical.ManagementMode = varComputePhysicalWithoutEmbeddedStruct.ManagementMode
		varComputePhysical.MemorySpeed = varComputePhysicalWithoutEmbeddedStruct.MemorySpeed
		varComputePhysical.MgmtIpAddress = varComputePhysicalWithoutEmbeddedStruct.MgmtIpAddress
		varComputePhysical.NumAdaptors = varComputePhysicalWithoutEmbeddedStruct.NumAdaptors
		varComputePhysical.NumCpuCores = varComputePhysicalWithoutEmbeddedStruct.NumCpuCores
		varComputePhysical.NumCpuCoresEnabled = varComputePhysicalWithoutEmbeddedStruct.NumCpuCoresEnabled
		varComputePhysical.NumCpus = varComputePhysicalWithoutEmbeddedStruct.NumCpus
		varComputePhysical.NumEthHostInterfaces = varComputePhysicalWithoutEmbeddedStruct.NumEthHostInterfaces
		varComputePhysical.NumFcHostInterfaces = varComputePhysicalWithoutEmbeddedStruct.NumFcHostInterfaces
		varComputePhysical.NumThreads = varComputePhysicalWithoutEmbeddedStruct.NumThreads
		varComputePhysical.OperPowerState = varComputePhysicalWithoutEmbeddedStruct.OperPowerState
		varComputePhysical.OperReason = varComputePhysicalWithoutEmbeddedStruct.OperReason
		varComputePhysical.OperState = varComputePhysicalWithoutEmbeddedStruct.OperState
		varComputePhysical.Operability = varComputePhysicalWithoutEmbeddedStruct.Operability
		varComputePhysical.PlatformType = varComputePhysicalWithoutEmbeddedStruct.PlatformType
		varComputePhysical.ServiceProfile = varComputePhysicalWithoutEmbeddedStruct.ServiceProfile
		varComputePhysical.TotalMemory = varComputePhysicalWithoutEmbeddedStruct.TotalMemory
		varComputePhysical.UserLabel = varComputePhysicalWithoutEmbeddedStruct.UserLabel
		varComputePhysical.Uuid = varComputePhysicalWithoutEmbeddedStruct.Uuid
		varComputePhysical.BootCddDevices = varComputePhysicalWithoutEmbeddedStruct.BootCddDevices
		varComputePhysical.BootDeviceBootSecurity = varComputePhysicalWithoutEmbeddedStruct.BootDeviceBootSecurity
		varComputePhysical.BootHddDevices = varComputePhysicalWithoutEmbeddedStruct.BootHddDevices
		varComputePhysical.BootIscsiDevices = varComputePhysicalWithoutEmbeddedStruct.BootIscsiDevices
		varComputePhysical.BootNvmeDevices = varComputePhysicalWithoutEmbeddedStruct.BootNvmeDevices
		varComputePhysical.BootPchStorageDevices = varComputePhysicalWithoutEmbeddedStruct.BootPchStorageDevices
		varComputePhysical.BootPxeDevices = varComputePhysicalWithoutEmbeddedStruct.BootPxeDevices
		varComputePhysical.BootSanDevices = varComputePhysicalWithoutEmbeddedStruct.BootSanDevices
		varComputePhysical.BootSdDevices = varComputePhysicalWithoutEmbeddedStruct.BootSdDevices
		varComputePhysical.BootUefiShellDevices = varComputePhysicalWithoutEmbeddedStruct.BootUefiShellDevices
		varComputePhysical.BootUsbDevices = varComputePhysicalWithoutEmbeddedStruct.BootUsbDevices
		varComputePhysical.BootVmediaDevices = varComputePhysicalWithoutEmbeddedStruct.BootVmediaDevices
		varComputePhysical.MgmtIdentity = varComputePhysicalWithoutEmbeddedStruct.MgmtIdentity
		varComputePhysical.Vmedia = varComputePhysicalWithoutEmbeddedStruct.Vmedia
		*o = ComputePhysical(varComputePhysical)
	} else {
		return err
	}

	varComputePhysical := _ComputePhysical{}

	err = json.Unmarshal(bytes, &varComputePhysical)
	if err == nil {
		o.EquipmentBase = varComputePhysical.EquipmentBase
	} else {
		return err
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "ClassId")
		delete(additionalProperties, "ObjectType")
		delete(additionalProperties, "AdminPowerState")
		delete(additionalProperties, "AlarmSummary")
		delete(additionalProperties, "AssetTag")
		delete(additionalProperties, "AvailableMemory")
		delete(additionalProperties, "BiosPostComplete")
		delete(additionalProperties, "FaultSummary")
		delete(additionalProperties, "KvmIpAddresses")
		delete(additionalProperties, "ManagementMode")
		delete(additionalProperties, "MemorySpeed")
		delete(additionalProperties, "MgmtIpAddress")
		delete(additionalProperties, "NumAdaptors")
		delete(additionalProperties, "NumCpuCores")
		delete(additionalProperties, "NumCpuCoresEnabled")
		delete(additionalProperties, "NumCpus")
		delete(additionalProperties, "NumEthHostInterfaces")
		delete(additionalProperties, "NumFcHostInterfaces")
		delete(additionalProperties, "NumThreads")
		delete(additionalProperties, "OperPowerState")
		delete(additionalProperties, "OperReason")
		delete(additionalProperties, "OperState")
		delete(additionalProperties, "Operability")
		delete(additionalProperties, "PlatformType")
		delete(additionalProperties, "ServiceProfile")
		delete(additionalProperties, "TotalMemory")
		delete(additionalProperties, "UserLabel")
		delete(additionalProperties, "Uuid")
		delete(additionalProperties, "BootCddDevices")
		delete(additionalProperties, "BootDeviceBootSecurity")
		delete(additionalProperties, "BootHddDevices")
		delete(additionalProperties, "BootIscsiDevices")
		delete(additionalProperties, "BootNvmeDevices")
		delete(additionalProperties, "BootPchStorageDevices")
		delete(additionalProperties, "BootPxeDevices")
		delete(additionalProperties, "BootSanDevices")
		delete(additionalProperties, "BootSdDevices")
		delete(additionalProperties, "BootUefiShellDevices")
		delete(additionalProperties, "BootUsbDevices")
		delete(additionalProperties, "BootVmediaDevices")
		delete(additionalProperties, "MgmtIdentity")
		delete(additionalProperties, "Vmedia")

		// remove fields from embedded structs
		reflectEquipmentBase := reflect.ValueOf(o.EquipmentBase)
		for i := 0; i < reflectEquipmentBase.Type().NumField(); i++ {
			t := reflectEquipmentBase.Type().Field(i)

			if jsonTag := t.Tag.Get("json"); jsonTag != "" {
				fieldName := ""
				if commaIdx := strings.Index(jsonTag, ","); commaIdx > 0 {
					fieldName = jsonTag[:commaIdx]
				} else {
					fieldName = jsonTag
				}
				if fieldName != "AdditionalProperties" {
					delete(additionalProperties, fieldName)
				}
			}
		}

		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableComputePhysical struct {
	value *ComputePhysical
	isSet bool
}

func (v NullableComputePhysical) Get() *ComputePhysical {
	return v.value
}

func (v *NullableComputePhysical) Set(val *ComputePhysical) {
	v.value = val
	v.isSet = true
}

func (v NullableComputePhysical) IsSet() bool {
	return v.isSet
}

func (v *NullableComputePhysical) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableComputePhysical(val *ComputePhysical) *NullableComputePhysical {
	return &NullableComputePhysical{value: val, isSet: true}
}

func (v NullableComputePhysical) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableComputePhysical) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
