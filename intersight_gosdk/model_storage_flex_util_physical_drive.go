/*
Cisco Intersight

Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations. The Intersight OpenAPI document defines the complete set of properties that are returned in the HTTP response. From that perspective, a client can expect that no additional properties are returned, unless these properties are explicitly defined in the OpenAPI document. However, when a client uses an older version of the Intersight OpenAPI document, the server may send additional properties because the software is more recent than the client. In that case, the client may receive properties that it does not know about. Some generated SDKs perform a strict validation of the HTTP response body against the OpenAPI document.

API version: 1.0.11-2024100405
Contact: intersight@cisco.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package intersight

import (
	"encoding/json"
	"fmt"
	"reflect"
	"strings"
)

// checks if the StorageFlexUtilPhysicalDrive type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &StorageFlexUtilPhysicalDrive{}

// StorageFlexUtilPhysicalDrive Storage Flex Util Physical Drive.
type StorageFlexUtilPhysicalDrive struct {
	EquipmentBase
	// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.
	ClassId string `json:"ClassId"`
	// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
	ObjectType string `json:"ObjectType"`
	// Block size of the FlexUtil Physical drive.
	BlockSize *string `json:"BlockSize,omitempty"`
	// Capacity of the FlexUtil Physical drive.
	Capacity *string `json:"Capacity,omitempty"`
	// Type of the Physical Drive Controller.
	Controller *string `json:"Controller,omitempty"`
	// The number of drives enabled in the FlexUtil Physical Drive.
	DrivesEnabled *string `json:"DrivesEnabled,omitempty"`
	// Health of the FlexUtil Physical drive.
	Health *string `json:"Health,omitempty"`
	// Manufacturing date of the FlexUtil Physical Drive.
	ManufacturerDate *string `json:"ManufacturerDate,omitempty"`
	// Manufacturer identity of the FlexUtil Physical Drive.
	ManufacturerId *string `json:"ManufacturerId,omitempty"`
	// The OEM Identifier of the FlexUtil physical drive.
	OemId *string `json:"OemId,omitempty"`
	// The number of partitions present on the FlexUtil Physical Drive.
	PartitionCount *string `json:"PartitionCount,omitempty"`
	// Status of the FlexUtil Physical Drive.
	PdStatus *string `json:"PdStatus,omitempty"`
	// The type of physical drive. Example - microSD.
	PhysicalDrive *string `json:"PhysicalDrive,omitempty"`
	// Product name of the FlexUtil Physical Drive.
	ProductName *string `json:"ProductName,omitempty"`
	// Product revision of the FlexUtil Physical Drive.
	ProductRevision *string `json:"ProductRevision,omitempty"`
	// Read error count of the FlexUtil Physical Drive.
	ReadErrorCount *string `json:"ReadErrorCount,omitempty"`
	// Read error threshold for FlexUtil Physical Drive.
	ReadErrorThreshold *string `json:"ReadErrorThreshold,omitempty"`
	// Write access state of the FlexUtil Physical Drive.
	WriteEnabled *string `json:"WriteEnabled,omitempty"`
	// Write error count of the FlexUtil Physical Drive.
	WriteErrorCount *string `json:"WriteErrorCount,omitempty"`
	// Write error threshold for FlexUtil Physical Drive.
	WriteErrorThreshold       *string                                       `json:"WriteErrorThreshold,omitempty"`
	InventoryDeviceInfo       NullableInventoryDeviceInfoRelationship       `json:"InventoryDeviceInfo,omitempty"`
	RegisteredDevice          NullableAssetDeviceRegistrationRelationship   `json:"RegisteredDevice,omitempty"`
	StorageFlexUtilController NullableStorageFlexUtilControllerRelationship `json:"StorageFlexUtilController,omitempty"`
	AdditionalProperties      map[string]interface{}
}

type _StorageFlexUtilPhysicalDrive StorageFlexUtilPhysicalDrive

// NewStorageFlexUtilPhysicalDrive instantiates a new StorageFlexUtilPhysicalDrive object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStorageFlexUtilPhysicalDrive(classId string, objectType string) *StorageFlexUtilPhysicalDrive {
	this := StorageFlexUtilPhysicalDrive{}
	this.ClassId = classId
	this.ObjectType = objectType
	return &this
}

// NewStorageFlexUtilPhysicalDriveWithDefaults instantiates a new StorageFlexUtilPhysicalDrive object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStorageFlexUtilPhysicalDriveWithDefaults() *StorageFlexUtilPhysicalDrive {
	this := StorageFlexUtilPhysicalDrive{}
	var classId string = "storage.FlexUtilPhysicalDrive"
	this.ClassId = classId
	var objectType string = "storage.FlexUtilPhysicalDrive"
	this.ObjectType = objectType
	return &this
}

// GetClassId returns the ClassId field value
func (o *StorageFlexUtilPhysicalDrive) GetClassId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ClassId
}

// GetClassIdOk returns a tuple with the ClassId field value
// and a boolean to check if the value has been set.
func (o *StorageFlexUtilPhysicalDrive) GetClassIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ClassId, true
}

// SetClassId sets field value
func (o *StorageFlexUtilPhysicalDrive) SetClassId(v string) {
	o.ClassId = v
}

// GetDefaultClassId returns the default value "storage.FlexUtilPhysicalDrive" of the ClassId field.
func (o *StorageFlexUtilPhysicalDrive) GetDefaultClassId() interface{} {
	return "storage.FlexUtilPhysicalDrive"
}

// GetObjectType returns the ObjectType field value
func (o *StorageFlexUtilPhysicalDrive) GetObjectType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ObjectType
}

// GetObjectTypeOk returns a tuple with the ObjectType field value
// and a boolean to check if the value has been set.
func (o *StorageFlexUtilPhysicalDrive) GetObjectTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ObjectType, true
}

// SetObjectType sets field value
func (o *StorageFlexUtilPhysicalDrive) SetObjectType(v string) {
	o.ObjectType = v
}

// GetDefaultObjectType returns the default value "storage.FlexUtilPhysicalDrive" of the ObjectType field.
func (o *StorageFlexUtilPhysicalDrive) GetDefaultObjectType() interface{} {
	return "storage.FlexUtilPhysicalDrive"
}

// GetBlockSize returns the BlockSize field value if set, zero value otherwise.
func (o *StorageFlexUtilPhysicalDrive) GetBlockSize() string {
	if o == nil || IsNil(o.BlockSize) {
		var ret string
		return ret
	}
	return *o.BlockSize
}

// GetBlockSizeOk returns a tuple with the BlockSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageFlexUtilPhysicalDrive) GetBlockSizeOk() (*string, bool) {
	if o == nil || IsNil(o.BlockSize) {
		return nil, false
	}
	return o.BlockSize, true
}

// HasBlockSize returns a boolean if a field has been set.
func (o *StorageFlexUtilPhysicalDrive) HasBlockSize() bool {
	if o != nil && !IsNil(o.BlockSize) {
		return true
	}

	return false
}

// SetBlockSize gets a reference to the given string and assigns it to the BlockSize field.
func (o *StorageFlexUtilPhysicalDrive) SetBlockSize(v string) {
	o.BlockSize = &v
}

// GetCapacity returns the Capacity field value if set, zero value otherwise.
func (o *StorageFlexUtilPhysicalDrive) GetCapacity() string {
	if o == nil || IsNil(o.Capacity) {
		var ret string
		return ret
	}
	return *o.Capacity
}

// GetCapacityOk returns a tuple with the Capacity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageFlexUtilPhysicalDrive) GetCapacityOk() (*string, bool) {
	if o == nil || IsNil(o.Capacity) {
		return nil, false
	}
	return o.Capacity, true
}

// HasCapacity returns a boolean if a field has been set.
func (o *StorageFlexUtilPhysicalDrive) HasCapacity() bool {
	if o != nil && !IsNil(o.Capacity) {
		return true
	}

	return false
}

// SetCapacity gets a reference to the given string and assigns it to the Capacity field.
func (o *StorageFlexUtilPhysicalDrive) SetCapacity(v string) {
	o.Capacity = &v
}

// GetController returns the Controller field value if set, zero value otherwise.
func (o *StorageFlexUtilPhysicalDrive) GetController() string {
	if o == nil || IsNil(o.Controller) {
		var ret string
		return ret
	}
	return *o.Controller
}

// GetControllerOk returns a tuple with the Controller field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageFlexUtilPhysicalDrive) GetControllerOk() (*string, bool) {
	if o == nil || IsNil(o.Controller) {
		return nil, false
	}
	return o.Controller, true
}

// HasController returns a boolean if a field has been set.
func (o *StorageFlexUtilPhysicalDrive) HasController() bool {
	if o != nil && !IsNil(o.Controller) {
		return true
	}

	return false
}

// SetController gets a reference to the given string and assigns it to the Controller field.
func (o *StorageFlexUtilPhysicalDrive) SetController(v string) {
	o.Controller = &v
}

// GetDrivesEnabled returns the DrivesEnabled field value if set, zero value otherwise.
func (o *StorageFlexUtilPhysicalDrive) GetDrivesEnabled() string {
	if o == nil || IsNil(o.DrivesEnabled) {
		var ret string
		return ret
	}
	return *o.DrivesEnabled
}

// GetDrivesEnabledOk returns a tuple with the DrivesEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageFlexUtilPhysicalDrive) GetDrivesEnabledOk() (*string, bool) {
	if o == nil || IsNil(o.DrivesEnabled) {
		return nil, false
	}
	return o.DrivesEnabled, true
}

// HasDrivesEnabled returns a boolean if a field has been set.
func (o *StorageFlexUtilPhysicalDrive) HasDrivesEnabled() bool {
	if o != nil && !IsNil(o.DrivesEnabled) {
		return true
	}

	return false
}

// SetDrivesEnabled gets a reference to the given string and assigns it to the DrivesEnabled field.
func (o *StorageFlexUtilPhysicalDrive) SetDrivesEnabled(v string) {
	o.DrivesEnabled = &v
}

// GetHealth returns the Health field value if set, zero value otherwise.
func (o *StorageFlexUtilPhysicalDrive) GetHealth() string {
	if o == nil || IsNil(o.Health) {
		var ret string
		return ret
	}
	return *o.Health
}

// GetHealthOk returns a tuple with the Health field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageFlexUtilPhysicalDrive) GetHealthOk() (*string, bool) {
	if o == nil || IsNil(o.Health) {
		return nil, false
	}
	return o.Health, true
}

// HasHealth returns a boolean if a field has been set.
func (o *StorageFlexUtilPhysicalDrive) HasHealth() bool {
	if o != nil && !IsNil(o.Health) {
		return true
	}

	return false
}

// SetHealth gets a reference to the given string and assigns it to the Health field.
func (o *StorageFlexUtilPhysicalDrive) SetHealth(v string) {
	o.Health = &v
}

// GetManufacturerDate returns the ManufacturerDate field value if set, zero value otherwise.
func (o *StorageFlexUtilPhysicalDrive) GetManufacturerDate() string {
	if o == nil || IsNil(o.ManufacturerDate) {
		var ret string
		return ret
	}
	return *o.ManufacturerDate
}

// GetManufacturerDateOk returns a tuple with the ManufacturerDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageFlexUtilPhysicalDrive) GetManufacturerDateOk() (*string, bool) {
	if o == nil || IsNil(o.ManufacturerDate) {
		return nil, false
	}
	return o.ManufacturerDate, true
}

// HasManufacturerDate returns a boolean if a field has been set.
func (o *StorageFlexUtilPhysicalDrive) HasManufacturerDate() bool {
	if o != nil && !IsNil(o.ManufacturerDate) {
		return true
	}

	return false
}

// SetManufacturerDate gets a reference to the given string and assigns it to the ManufacturerDate field.
func (o *StorageFlexUtilPhysicalDrive) SetManufacturerDate(v string) {
	o.ManufacturerDate = &v
}

// GetManufacturerId returns the ManufacturerId field value if set, zero value otherwise.
func (o *StorageFlexUtilPhysicalDrive) GetManufacturerId() string {
	if o == nil || IsNil(o.ManufacturerId) {
		var ret string
		return ret
	}
	return *o.ManufacturerId
}

// GetManufacturerIdOk returns a tuple with the ManufacturerId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageFlexUtilPhysicalDrive) GetManufacturerIdOk() (*string, bool) {
	if o == nil || IsNil(o.ManufacturerId) {
		return nil, false
	}
	return o.ManufacturerId, true
}

// HasManufacturerId returns a boolean if a field has been set.
func (o *StorageFlexUtilPhysicalDrive) HasManufacturerId() bool {
	if o != nil && !IsNil(o.ManufacturerId) {
		return true
	}

	return false
}

// SetManufacturerId gets a reference to the given string and assigns it to the ManufacturerId field.
func (o *StorageFlexUtilPhysicalDrive) SetManufacturerId(v string) {
	o.ManufacturerId = &v
}

// GetOemId returns the OemId field value if set, zero value otherwise.
func (o *StorageFlexUtilPhysicalDrive) GetOemId() string {
	if o == nil || IsNil(o.OemId) {
		var ret string
		return ret
	}
	return *o.OemId
}

// GetOemIdOk returns a tuple with the OemId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageFlexUtilPhysicalDrive) GetOemIdOk() (*string, bool) {
	if o == nil || IsNil(o.OemId) {
		return nil, false
	}
	return o.OemId, true
}

// HasOemId returns a boolean if a field has been set.
func (o *StorageFlexUtilPhysicalDrive) HasOemId() bool {
	if o != nil && !IsNil(o.OemId) {
		return true
	}

	return false
}

// SetOemId gets a reference to the given string and assigns it to the OemId field.
func (o *StorageFlexUtilPhysicalDrive) SetOemId(v string) {
	o.OemId = &v
}

// GetPartitionCount returns the PartitionCount field value if set, zero value otherwise.
func (o *StorageFlexUtilPhysicalDrive) GetPartitionCount() string {
	if o == nil || IsNil(o.PartitionCount) {
		var ret string
		return ret
	}
	return *o.PartitionCount
}

// GetPartitionCountOk returns a tuple with the PartitionCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageFlexUtilPhysicalDrive) GetPartitionCountOk() (*string, bool) {
	if o == nil || IsNil(o.PartitionCount) {
		return nil, false
	}
	return o.PartitionCount, true
}

// HasPartitionCount returns a boolean if a field has been set.
func (o *StorageFlexUtilPhysicalDrive) HasPartitionCount() bool {
	if o != nil && !IsNil(o.PartitionCount) {
		return true
	}

	return false
}

// SetPartitionCount gets a reference to the given string and assigns it to the PartitionCount field.
func (o *StorageFlexUtilPhysicalDrive) SetPartitionCount(v string) {
	o.PartitionCount = &v
}

// GetPdStatus returns the PdStatus field value if set, zero value otherwise.
func (o *StorageFlexUtilPhysicalDrive) GetPdStatus() string {
	if o == nil || IsNil(o.PdStatus) {
		var ret string
		return ret
	}
	return *o.PdStatus
}

// GetPdStatusOk returns a tuple with the PdStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageFlexUtilPhysicalDrive) GetPdStatusOk() (*string, bool) {
	if o == nil || IsNil(o.PdStatus) {
		return nil, false
	}
	return o.PdStatus, true
}

// HasPdStatus returns a boolean if a field has been set.
func (o *StorageFlexUtilPhysicalDrive) HasPdStatus() bool {
	if o != nil && !IsNil(o.PdStatus) {
		return true
	}

	return false
}

// SetPdStatus gets a reference to the given string and assigns it to the PdStatus field.
func (o *StorageFlexUtilPhysicalDrive) SetPdStatus(v string) {
	o.PdStatus = &v
}

// GetPhysicalDrive returns the PhysicalDrive field value if set, zero value otherwise.
func (o *StorageFlexUtilPhysicalDrive) GetPhysicalDrive() string {
	if o == nil || IsNil(o.PhysicalDrive) {
		var ret string
		return ret
	}
	return *o.PhysicalDrive
}

// GetPhysicalDriveOk returns a tuple with the PhysicalDrive field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageFlexUtilPhysicalDrive) GetPhysicalDriveOk() (*string, bool) {
	if o == nil || IsNil(o.PhysicalDrive) {
		return nil, false
	}
	return o.PhysicalDrive, true
}

// HasPhysicalDrive returns a boolean if a field has been set.
func (o *StorageFlexUtilPhysicalDrive) HasPhysicalDrive() bool {
	if o != nil && !IsNil(o.PhysicalDrive) {
		return true
	}

	return false
}

// SetPhysicalDrive gets a reference to the given string and assigns it to the PhysicalDrive field.
func (o *StorageFlexUtilPhysicalDrive) SetPhysicalDrive(v string) {
	o.PhysicalDrive = &v
}

// GetProductName returns the ProductName field value if set, zero value otherwise.
func (o *StorageFlexUtilPhysicalDrive) GetProductName() string {
	if o == nil || IsNil(o.ProductName) {
		var ret string
		return ret
	}
	return *o.ProductName
}

// GetProductNameOk returns a tuple with the ProductName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageFlexUtilPhysicalDrive) GetProductNameOk() (*string, bool) {
	if o == nil || IsNil(o.ProductName) {
		return nil, false
	}
	return o.ProductName, true
}

// HasProductName returns a boolean if a field has been set.
func (o *StorageFlexUtilPhysicalDrive) HasProductName() bool {
	if o != nil && !IsNil(o.ProductName) {
		return true
	}

	return false
}

// SetProductName gets a reference to the given string and assigns it to the ProductName field.
func (o *StorageFlexUtilPhysicalDrive) SetProductName(v string) {
	o.ProductName = &v
}

// GetProductRevision returns the ProductRevision field value if set, zero value otherwise.
func (o *StorageFlexUtilPhysicalDrive) GetProductRevision() string {
	if o == nil || IsNil(o.ProductRevision) {
		var ret string
		return ret
	}
	return *o.ProductRevision
}

// GetProductRevisionOk returns a tuple with the ProductRevision field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageFlexUtilPhysicalDrive) GetProductRevisionOk() (*string, bool) {
	if o == nil || IsNil(o.ProductRevision) {
		return nil, false
	}
	return o.ProductRevision, true
}

// HasProductRevision returns a boolean if a field has been set.
func (o *StorageFlexUtilPhysicalDrive) HasProductRevision() bool {
	if o != nil && !IsNil(o.ProductRevision) {
		return true
	}

	return false
}

// SetProductRevision gets a reference to the given string and assigns it to the ProductRevision field.
func (o *StorageFlexUtilPhysicalDrive) SetProductRevision(v string) {
	o.ProductRevision = &v
}

// GetReadErrorCount returns the ReadErrorCount field value if set, zero value otherwise.
func (o *StorageFlexUtilPhysicalDrive) GetReadErrorCount() string {
	if o == nil || IsNil(o.ReadErrorCount) {
		var ret string
		return ret
	}
	return *o.ReadErrorCount
}

// GetReadErrorCountOk returns a tuple with the ReadErrorCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageFlexUtilPhysicalDrive) GetReadErrorCountOk() (*string, bool) {
	if o == nil || IsNil(o.ReadErrorCount) {
		return nil, false
	}
	return o.ReadErrorCount, true
}

// HasReadErrorCount returns a boolean if a field has been set.
func (o *StorageFlexUtilPhysicalDrive) HasReadErrorCount() bool {
	if o != nil && !IsNil(o.ReadErrorCount) {
		return true
	}

	return false
}

// SetReadErrorCount gets a reference to the given string and assigns it to the ReadErrorCount field.
func (o *StorageFlexUtilPhysicalDrive) SetReadErrorCount(v string) {
	o.ReadErrorCount = &v
}

// GetReadErrorThreshold returns the ReadErrorThreshold field value if set, zero value otherwise.
func (o *StorageFlexUtilPhysicalDrive) GetReadErrorThreshold() string {
	if o == nil || IsNil(o.ReadErrorThreshold) {
		var ret string
		return ret
	}
	return *o.ReadErrorThreshold
}

// GetReadErrorThresholdOk returns a tuple with the ReadErrorThreshold field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageFlexUtilPhysicalDrive) GetReadErrorThresholdOk() (*string, bool) {
	if o == nil || IsNil(o.ReadErrorThreshold) {
		return nil, false
	}
	return o.ReadErrorThreshold, true
}

// HasReadErrorThreshold returns a boolean if a field has been set.
func (o *StorageFlexUtilPhysicalDrive) HasReadErrorThreshold() bool {
	if o != nil && !IsNil(o.ReadErrorThreshold) {
		return true
	}

	return false
}

// SetReadErrorThreshold gets a reference to the given string and assigns it to the ReadErrorThreshold field.
func (o *StorageFlexUtilPhysicalDrive) SetReadErrorThreshold(v string) {
	o.ReadErrorThreshold = &v
}

// GetWriteEnabled returns the WriteEnabled field value if set, zero value otherwise.
func (o *StorageFlexUtilPhysicalDrive) GetWriteEnabled() string {
	if o == nil || IsNil(o.WriteEnabled) {
		var ret string
		return ret
	}
	return *o.WriteEnabled
}

// GetWriteEnabledOk returns a tuple with the WriteEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageFlexUtilPhysicalDrive) GetWriteEnabledOk() (*string, bool) {
	if o == nil || IsNil(o.WriteEnabled) {
		return nil, false
	}
	return o.WriteEnabled, true
}

// HasWriteEnabled returns a boolean if a field has been set.
func (o *StorageFlexUtilPhysicalDrive) HasWriteEnabled() bool {
	if o != nil && !IsNil(o.WriteEnabled) {
		return true
	}

	return false
}

// SetWriteEnabled gets a reference to the given string and assigns it to the WriteEnabled field.
func (o *StorageFlexUtilPhysicalDrive) SetWriteEnabled(v string) {
	o.WriteEnabled = &v
}

// GetWriteErrorCount returns the WriteErrorCount field value if set, zero value otherwise.
func (o *StorageFlexUtilPhysicalDrive) GetWriteErrorCount() string {
	if o == nil || IsNil(o.WriteErrorCount) {
		var ret string
		return ret
	}
	return *o.WriteErrorCount
}

// GetWriteErrorCountOk returns a tuple with the WriteErrorCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageFlexUtilPhysicalDrive) GetWriteErrorCountOk() (*string, bool) {
	if o == nil || IsNil(o.WriteErrorCount) {
		return nil, false
	}
	return o.WriteErrorCount, true
}

// HasWriteErrorCount returns a boolean if a field has been set.
func (o *StorageFlexUtilPhysicalDrive) HasWriteErrorCount() bool {
	if o != nil && !IsNil(o.WriteErrorCount) {
		return true
	}

	return false
}

// SetWriteErrorCount gets a reference to the given string and assigns it to the WriteErrorCount field.
func (o *StorageFlexUtilPhysicalDrive) SetWriteErrorCount(v string) {
	o.WriteErrorCount = &v
}

// GetWriteErrorThreshold returns the WriteErrorThreshold field value if set, zero value otherwise.
func (o *StorageFlexUtilPhysicalDrive) GetWriteErrorThreshold() string {
	if o == nil || IsNil(o.WriteErrorThreshold) {
		var ret string
		return ret
	}
	return *o.WriteErrorThreshold
}

// GetWriteErrorThresholdOk returns a tuple with the WriteErrorThreshold field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageFlexUtilPhysicalDrive) GetWriteErrorThresholdOk() (*string, bool) {
	if o == nil || IsNil(o.WriteErrorThreshold) {
		return nil, false
	}
	return o.WriteErrorThreshold, true
}

// HasWriteErrorThreshold returns a boolean if a field has been set.
func (o *StorageFlexUtilPhysicalDrive) HasWriteErrorThreshold() bool {
	if o != nil && !IsNil(o.WriteErrorThreshold) {
		return true
	}

	return false
}

// SetWriteErrorThreshold gets a reference to the given string and assigns it to the WriteErrorThreshold field.
func (o *StorageFlexUtilPhysicalDrive) SetWriteErrorThreshold(v string) {
	o.WriteErrorThreshold = &v
}

// GetInventoryDeviceInfo returns the InventoryDeviceInfo field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *StorageFlexUtilPhysicalDrive) GetInventoryDeviceInfo() InventoryDeviceInfoRelationship {
	if o == nil || IsNil(o.InventoryDeviceInfo.Get()) {
		var ret InventoryDeviceInfoRelationship
		return ret
	}
	return *o.InventoryDeviceInfo.Get()
}

// GetInventoryDeviceInfoOk returns a tuple with the InventoryDeviceInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *StorageFlexUtilPhysicalDrive) GetInventoryDeviceInfoOk() (*InventoryDeviceInfoRelationship, bool) {
	if o == nil {
		return nil, false
	}
	return o.InventoryDeviceInfo.Get(), o.InventoryDeviceInfo.IsSet()
}

// HasInventoryDeviceInfo returns a boolean if a field has been set.
func (o *StorageFlexUtilPhysicalDrive) HasInventoryDeviceInfo() bool {
	if o != nil && o.InventoryDeviceInfo.IsSet() {
		return true
	}

	return false
}

// SetInventoryDeviceInfo gets a reference to the given NullableInventoryDeviceInfoRelationship and assigns it to the InventoryDeviceInfo field.
func (o *StorageFlexUtilPhysicalDrive) SetInventoryDeviceInfo(v InventoryDeviceInfoRelationship) {
	o.InventoryDeviceInfo.Set(&v)
}

// SetInventoryDeviceInfoNil sets the value for InventoryDeviceInfo to be an explicit nil
func (o *StorageFlexUtilPhysicalDrive) SetInventoryDeviceInfoNil() {
	o.InventoryDeviceInfo.Set(nil)
}

// UnsetInventoryDeviceInfo ensures that no value is present for InventoryDeviceInfo, not even an explicit nil
func (o *StorageFlexUtilPhysicalDrive) UnsetInventoryDeviceInfo() {
	o.InventoryDeviceInfo.Unset()
}

// GetRegisteredDevice returns the RegisteredDevice field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *StorageFlexUtilPhysicalDrive) GetRegisteredDevice() AssetDeviceRegistrationRelationship {
	if o == nil || IsNil(o.RegisteredDevice.Get()) {
		var ret AssetDeviceRegistrationRelationship
		return ret
	}
	return *o.RegisteredDevice.Get()
}

// GetRegisteredDeviceOk returns a tuple with the RegisteredDevice field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *StorageFlexUtilPhysicalDrive) GetRegisteredDeviceOk() (*AssetDeviceRegistrationRelationship, bool) {
	if o == nil {
		return nil, false
	}
	return o.RegisteredDevice.Get(), o.RegisteredDevice.IsSet()
}

// HasRegisteredDevice returns a boolean if a field has been set.
func (o *StorageFlexUtilPhysicalDrive) HasRegisteredDevice() bool {
	if o != nil && o.RegisteredDevice.IsSet() {
		return true
	}

	return false
}

// SetRegisteredDevice gets a reference to the given NullableAssetDeviceRegistrationRelationship and assigns it to the RegisteredDevice field.
func (o *StorageFlexUtilPhysicalDrive) SetRegisteredDevice(v AssetDeviceRegistrationRelationship) {
	o.RegisteredDevice.Set(&v)
}

// SetRegisteredDeviceNil sets the value for RegisteredDevice to be an explicit nil
func (o *StorageFlexUtilPhysicalDrive) SetRegisteredDeviceNil() {
	o.RegisteredDevice.Set(nil)
}

// UnsetRegisteredDevice ensures that no value is present for RegisteredDevice, not even an explicit nil
func (o *StorageFlexUtilPhysicalDrive) UnsetRegisteredDevice() {
	o.RegisteredDevice.Unset()
}

// GetStorageFlexUtilController returns the StorageFlexUtilController field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *StorageFlexUtilPhysicalDrive) GetStorageFlexUtilController() StorageFlexUtilControllerRelationship {
	if o == nil || IsNil(o.StorageFlexUtilController.Get()) {
		var ret StorageFlexUtilControllerRelationship
		return ret
	}
	return *o.StorageFlexUtilController.Get()
}

// GetStorageFlexUtilControllerOk returns a tuple with the StorageFlexUtilController field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *StorageFlexUtilPhysicalDrive) GetStorageFlexUtilControllerOk() (*StorageFlexUtilControllerRelationship, bool) {
	if o == nil {
		return nil, false
	}
	return o.StorageFlexUtilController.Get(), o.StorageFlexUtilController.IsSet()
}

// HasStorageFlexUtilController returns a boolean if a field has been set.
func (o *StorageFlexUtilPhysicalDrive) HasStorageFlexUtilController() bool {
	if o != nil && o.StorageFlexUtilController.IsSet() {
		return true
	}

	return false
}

// SetStorageFlexUtilController gets a reference to the given NullableStorageFlexUtilControllerRelationship and assigns it to the StorageFlexUtilController field.
func (o *StorageFlexUtilPhysicalDrive) SetStorageFlexUtilController(v StorageFlexUtilControllerRelationship) {
	o.StorageFlexUtilController.Set(&v)
}

// SetStorageFlexUtilControllerNil sets the value for StorageFlexUtilController to be an explicit nil
func (o *StorageFlexUtilPhysicalDrive) SetStorageFlexUtilControllerNil() {
	o.StorageFlexUtilController.Set(nil)
}

// UnsetStorageFlexUtilController ensures that no value is present for StorageFlexUtilController, not even an explicit nil
func (o *StorageFlexUtilPhysicalDrive) UnsetStorageFlexUtilController() {
	o.StorageFlexUtilController.Unset()
}

func (o StorageFlexUtilPhysicalDrive) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o StorageFlexUtilPhysicalDrive) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	serializedEquipmentBase, errEquipmentBase := json.Marshal(o.EquipmentBase)
	if errEquipmentBase != nil {
		return map[string]interface{}{}, errEquipmentBase
	}
	errEquipmentBase = json.Unmarshal([]byte(serializedEquipmentBase), &toSerialize)
	if errEquipmentBase != nil {
		return map[string]interface{}{}, errEquipmentBase
	}
	if _, exists := toSerialize["ClassId"]; !exists {
		toSerialize["ClassId"] = o.GetDefaultClassId()
	}
	toSerialize["ClassId"] = o.ClassId
	if _, exists := toSerialize["ObjectType"]; !exists {
		toSerialize["ObjectType"] = o.GetDefaultObjectType()
	}
	toSerialize["ObjectType"] = o.ObjectType
	if !IsNil(o.BlockSize) {
		toSerialize["BlockSize"] = o.BlockSize
	}
	if !IsNil(o.Capacity) {
		toSerialize["Capacity"] = o.Capacity
	}
	if !IsNil(o.Controller) {
		toSerialize["Controller"] = o.Controller
	}
	if !IsNil(o.DrivesEnabled) {
		toSerialize["DrivesEnabled"] = o.DrivesEnabled
	}
	if !IsNil(o.Health) {
		toSerialize["Health"] = o.Health
	}
	if !IsNil(o.ManufacturerDate) {
		toSerialize["ManufacturerDate"] = o.ManufacturerDate
	}
	if !IsNil(o.ManufacturerId) {
		toSerialize["ManufacturerId"] = o.ManufacturerId
	}
	if !IsNil(o.OemId) {
		toSerialize["OemId"] = o.OemId
	}
	if !IsNil(o.PartitionCount) {
		toSerialize["PartitionCount"] = o.PartitionCount
	}
	if !IsNil(o.PdStatus) {
		toSerialize["PdStatus"] = o.PdStatus
	}
	if !IsNil(o.PhysicalDrive) {
		toSerialize["PhysicalDrive"] = o.PhysicalDrive
	}
	if !IsNil(o.ProductName) {
		toSerialize["ProductName"] = o.ProductName
	}
	if !IsNil(o.ProductRevision) {
		toSerialize["ProductRevision"] = o.ProductRevision
	}
	if !IsNil(o.ReadErrorCount) {
		toSerialize["ReadErrorCount"] = o.ReadErrorCount
	}
	if !IsNil(o.ReadErrorThreshold) {
		toSerialize["ReadErrorThreshold"] = o.ReadErrorThreshold
	}
	if !IsNil(o.WriteEnabled) {
		toSerialize["WriteEnabled"] = o.WriteEnabled
	}
	if !IsNil(o.WriteErrorCount) {
		toSerialize["WriteErrorCount"] = o.WriteErrorCount
	}
	if !IsNil(o.WriteErrorThreshold) {
		toSerialize["WriteErrorThreshold"] = o.WriteErrorThreshold
	}
	if o.InventoryDeviceInfo.IsSet() {
		toSerialize["InventoryDeviceInfo"] = o.InventoryDeviceInfo.Get()
	}
	if o.RegisteredDevice.IsSet() {
		toSerialize["RegisteredDevice"] = o.RegisteredDevice.Get()
	}
	if o.StorageFlexUtilController.IsSet() {
		toSerialize["StorageFlexUtilController"] = o.StorageFlexUtilController.Get()
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *StorageFlexUtilPhysicalDrive) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"ClassId",
		"ObjectType",
	}

	// defaultValueFuncMap captures the default values for required properties.
	// These values are used when required properties are missing from the payload.
	defaultValueFuncMap := map[string]func() interface{}{
		"ClassId":    o.GetDefaultClassId,
		"ObjectType": o.GetDefaultObjectType,
	}
	var defaultValueApplied bool
	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			if _, ok := defaultValueFuncMap[requiredProperty]; ok {
				allProperties[requiredProperty] = defaultValueFuncMap[requiredProperty]()
				defaultValueApplied = true
			}
		}
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	if defaultValueApplied {
		data, err = json.Marshal(allProperties)
		if err != nil {
			return err
		}
	}
	type StorageFlexUtilPhysicalDriveWithoutEmbeddedStruct struct {
		// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.
		ClassId string `json:"ClassId"`
		// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
		ObjectType string `json:"ObjectType"`
		// Block size of the FlexUtil Physical drive.
		BlockSize *string `json:"BlockSize,omitempty"`
		// Capacity of the FlexUtil Physical drive.
		Capacity *string `json:"Capacity,omitempty"`
		// Type of the Physical Drive Controller.
		Controller *string `json:"Controller,omitempty"`
		// The number of drives enabled in the FlexUtil Physical Drive.
		DrivesEnabled *string `json:"DrivesEnabled,omitempty"`
		// Health of the FlexUtil Physical drive.
		Health *string `json:"Health,omitempty"`
		// Manufacturing date of the FlexUtil Physical Drive.
		ManufacturerDate *string `json:"ManufacturerDate,omitempty"`
		// Manufacturer identity of the FlexUtil Physical Drive.
		ManufacturerId *string `json:"ManufacturerId,omitempty"`
		// The OEM Identifier of the FlexUtil physical drive.
		OemId *string `json:"OemId,omitempty"`
		// The number of partitions present on the FlexUtil Physical Drive.
		PartitionCount *string `json:"PartitionCount,omitempty"`
		// Status of the FlexUtil Physical Drive.
		PdStatus *string `json:"PdStatus,omitempty"`
		// The type of physical drive. Example - microSD.
		PhysicalDrive *string `json:"PhysicalDrive,omitempty"`
		// Product name of the FlexUtil Physical Drive.
		ProductName *string `json:"ProductName,omitempty"`
		// Product revision of the FlexUtil Physical Drive.
		ProductRevision *string `json:"ProductRevision,omitempty"`
		// Read error count of the FlexUtil Physical Drive.
		ReadErrorCount *string `json:"ReadErrorCount,omitempty"`
		// Read error threshold for FlexUtil Physical Drive.
		ReadErrorThreshold *string `json:"ReadErrorThreshold,omitempty"`
		// Write access state of the FlexUtil Physical Drive.
		WriteEnabled *string `json:"WriteEnabled,omitempty"`
		// Write error count of the FlexUtil Physical Drive.
		WriteErrorCount *string `json:"WriteErrorCount,omitempty"`
		// Write error threshold for FlexUtil Physical Drive.
		WriteErrorThreshold       *string                                       `json:"WriteErrorThreshold,omitempty"`
		InventoryDeviceInfo       NullableInventoryDeviceInfoRelationship       `json:"InventoryDeviceInfo,omitempty"`
		RegisteredDevice          NullableAssetDeviceRegistrationRelationship   `json:"RegisteredDevice,omitempty"`
		StorageFlexUtilController NullableStorageFlexUtilControllerRelationship `json:"StorageFlexUtilController,omitempty"`
	}

	varStorageFlexUtilPhysicalDriveWithoutEmbeddedStruct := StorageFlexUtilPhysicalDriveWithoutEmbeddedStruct{}

	err = json.Unmarshal(data, &varStorageFlexUtilPhysicalDriveWithoutEmbeddedStruct)
	if err == nil {
		varStorageFlexUtilPhysicalDrive := _StorageFlexUtilPhysicalDrive{}
		varStorageFlexUtilPhysicalDrive.ClassId = varStorageFlexUtilPhysicalDriveWithoutEmbeddedStruct.ClassId
		varStorageFlexUtilPhysicalDrive.ObjectType = varStorageFlexUtilPhysicalDriveWithoutEmbeddedStruct.ObjectType
		varStorageFlexUtilPhysicalDrive.BlockSize = varStorageFlexUtilPhysicalDriveWithoutEmbeddedStruct.BlockSize
		varStorageFlexUtilPhysicalDrive.Capacity = varStorageFlexUtilPhysicalDriveWithoutEmbeddedStruct.Capacity
		varStorageFlexUtilPhysicalDrive.Controller = varStorageFlexUtilPhysicalDriveWithoutEmbeddedStruct.Controller
		varStorageFlexUtilPhysicalDrive.DrivesEnabled = varStorageFlexUtilPhysicalDriveWithoutEmbeddedStruct.DrivesEnabled
		varStorageFlexUtilPhysicalDrive.Health = varStorageFlexUtilPhysicalDriveWithoutEmbeddedStruct.Health
		varStorageFlexUtilPhysicalDrive.ManufacturerDate = varStorageFlexUtilPhysicalDriveWithoutEmbeddedStruct.ManufacturerDate
		varStorageFlexUtilPhysicalDrive.ManufacturerId = varStorageFlexUtilPhysicalDriveWithoutEmbeddedStruct.ManufacturerId
		varStorageFlexUtilPhysicalDrive.OemId = varStorageFlexUtilPhysicalDriveWithoutEmbeddedStruct.OemId
		varStorageFlexUtilPhysicalDrive.PartitionCount = varStorageFlexUtilPhysicalDriveWithoutEmbeddedStruct.PartitionCount
		varStorageFlexUtilPhysicalDrive.PdStatus = varStorageFlexUtilPhysicalDriveWithoutEmbeddedStruct.PdStatus
		varStorageFlexUtilPhysicalDrive.PhysicalDrive = varStorageFlexUtilPhysicalDriveWithoutEmbeddedStruct.PhysicalDrive
		varStorageFlexUtilPhysicalDrive.ProductName = varStorageFlexUtilPhysicalDriveWithoutEmbeddedStruct.ProductName
		varStorageFlexUtilPhysicalDrive.ProductRevision = varStorageFlexUtilPhysicalDriveWithoutEmbeddedStruct.ProductRevision
		varStorageFlexUtilPhysicalDrive.ReadErrorCount = varStorageFlexUtilPhysicalDriveWithoutEmbeddedStruct.ReadErrorCount
		varStorageFlexUtilPhysicalDrive.ReadErrorThreshold = varStorageFlexUtilPhysicalDriveWithoutEmbeddedStruct.ReadErrorThreshold
		varStorageFlexUtilPhysicalDrive.WriteEnabled = varStorageFlexUtilPhysicalDriveWithoutEmbeddedStruct.WriteEnabled
		varStorageFlexUtilPhysicalDrive.WriteErrorCount = varStorageFlexUtilPhysicalDriveWithoutEmbeddedStruct.WriteErrorCount
		varStorageFlexUtilPhysicalDrive.WriteErrorThreshold = varStorageFlexUtilPhysicalDriveWithoutEmbeddedStruct.WriteErrorThreshold
		varStorageFlexUtilPhysicalDrive.InventoryDeviceInfo = varStorageFlexUtilPhysicalDriveWithoutEmbeddedStruct.InventoryDeviceInfo
		varStorageFlexUtilPhysicalDrive.RegisteredDevice = varStorageFlexUtilPhysicalDriveWithoutEmbeddedStruct.RegisteredDevice
		varStorageFlexUtilPhysicalDrive.StorageFlexUtilController = varStorageFlexUtilPhysicalDriveWithoutEmbeddedStruct.StorageFlexUtilController
		*o = StorageFlexUtilPhysicalDrive(varStorageFlexUtilPhysicalDrive)
	} else {
		return err
	}

	varStorageFlexUtilPhysicalDrive := _StorageFlexUtilPhysicalDrive{}

	err = json.Unmarshal(data, &varStorageFlexUtilPhysicalDrive)
	if err == nil {
		o.EquipmentBase = varStorageFlexUtilPhysicalDrive.EquipmentBase
	} else {
		return err
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "ClassId")
		delete(additionalProperties, "ObjectType")
		delete(additionalProperties, "BlockSize")
		delete(additionalProperties, "Capacity")
		delete(additionalProperties, "Controller")
		delete(additionalProperties, "DrivesEnabled")
		delete(additionalProperties, "Health")
		delete(additionalProperties, "ManufacturerDate")
		delete(additionalProperties, "ManufacturerId")
		delete(additionalProperties, "OemId")
		delete(additionalProperties, "PartitionCount")
		delete(additionalProperties, "PdStatus")
		delete(additionalProperties, "PhysicalDrive")
		delete(additionalProperties, "ProductName")
		delete(additionalProperties, "ProductRevision")
		delete(additionalProperties, "ReadErrorCount")
		delete(additionalProperties, "ReadErrorThreshold")
		delete(additionalProperties, "WriteEnabled")
		delete(additionalProperties, "WriteErrorCount")
		delete(additionalProperties, "WriteErrorThreshold")
		delete(additionalProperties, "InventoryDeviceInfo")
		delete(additionalProperties, "RegisteredDevice")
		delete(additionalProperties, "StorageFlexUtilController")

		// remove fields from embedded structs
		reflectEquipmentBase := reflect.ValueOf(o.EquipmentBase)
		for i := 0; i < reflectEquipmentBase.Type().NumField(); i++ {
			t := reflectEquipmentBase.Type().Field(i)

			if jsonTag := t.Tag.Get("json"); jsonTag != "" {
				fieldName := ""
				if commaIdx := strings.Index(jsonTag, ","); commaIdx > 0 {
					fieldName = jsonTag[:commaIdx]
				} else {
					fieldName = jsonTag
				}
				if fieldName != "AdditionalProperties" {
					delete(additionalProperties, fieldName)
				}
			}
		}

		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableStorageFlexUtilPhysicalDrive struct {
	value *StorageFlexUtilPhysicalDrive
	isSet bool
}

func (v NullableStorageFlexUtilPhysicalDrive) Get() *StorageFlexUtilPhysicalDrive {
	return v.value
}

func (v *NullableStorageFlexUtilPhysicalDrive) Set(val *StorageFlexUtilPhysicalDrive) {
	v.value = val
	v.isSet = true
}

func (v NullableStorageFlexUtilPhysicalDrive) IsSet() bool {
	return v.isSet
}

func (v *NullableStorageFlexUtilPhysicalDrive) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStorageFlexUtilPhysicalDrive(val *StorageFlexUtilPhysicalDrive) *NullableStorageFlexUtilPhysicalDrive {
	return &NullableStorageFlexUtilPhysicalDrive{value: val, isSet: true}
}

func (v NullableStorageFlexUtilPhysicalDrive) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStorageFlexUtilPhysicalDrive) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
