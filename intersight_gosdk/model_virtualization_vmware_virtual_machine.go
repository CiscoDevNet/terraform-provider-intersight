/*
 * Cisco Intersight
 *
 * Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations. The Intersight OpenAPI document defines the complete set of properties that are returned in the HTTP response. From that perspective, a client can expect that no additional properties are returned, unless these properties are explicitly defined in the OpenAPI document. However, when a client uses an older version of the Intersight OpenAPI document, the server may send additional properties because the software is more recent than the client. In that case, the client may receive properties that it does not know about. Some generated SDKs perform a strict validation of the HTTP response body against the OpenAPI document. This document was created on 2021-07-21T16:37:30Z.
 *
 * API version: 1.0.9-4403
 * Contact: intersight@cisco.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package intersight

import (
	"encoding/json"
	"reflect"
	"strings"
)

// VirtualizationVmwareVirtualMachine The VMware Virtual machine. It has details such as power state, IP address, resource consumption, etc. Basic elements come from the base class and VMware specific details are provided here.
type VirtualizationVmwareVirtualMachine struct {
	VirtualizationBaseVirtualMachine
	// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.
	ClassId string `json:"ClassId"`
	// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
	ObjectType string `json:"ObjectType"`
	// List of annotations provided to this VM by user. Can be long.
	Annotation *string `json:"Annotation,omitempty"`
	// The configuration name for this VM. This maybe the same as the guest hostname.
	ConfigName *string `json:"ConfigName,omitempty"`
	// Shows if virtual machine is connected to vCenter. Values are Connected, Disconnected, Orphaned, Inaccessible, and Invalid.
	ConnectionState *string `json:"ConnectionState,omitempty"`
	// Indicates if the capability to add CPUs to a running VM is enabled.
	CpuHotAddEnabled *bool                                       `json:"CpuHotAddEnabled,omitempty"`
	CpuShares        NullableVirtualizationVmwareVmCpuShareInfo  `json:"CpuShares,omitempty"`
	CpuSocketInfo    NullableVirtualizationVmwareVmCpuSocketInfo `json:"CpuSocketInfo,omitempty"`
	CustomAttributes []string                                    `json:"CustomAttributes,omitempty"`
	// Indicates how the VM will be powered off (soft, hard etc.).
	DefaultPowerOffType *string `json:"DefaultPowerOffType,omitempty"`
	// Shows if DHCP is used for IP/DNS on this VM.
	DhcpEnabled    *bool                                        `json:"DhcpEnabled,omitempty"`
	DiskCommitInfo NullableVirtualizationVmwareVmDiskCommitInfo `json:"DiskCommitInfo,omitempty"`
	DnsServerList  []string                                     `json:"DnsServerList,omitempty"`
	DnsSuffixList  []string                                     `json:"DnsSuffixList,omitempty"`
	// Additional custom configuration settings applied to this VM. It is a set of name-value pairs stored as json.
	ExtraConfig interface{} `json:"ExtraConfig,omitempty"`
	// The folder name associated with this VM.
	Folder *string `json:"Folder,omitempty"`
	// The state of the guest OS running on this VM. Could be running, not running etc. * `Unknown` - Indicates that the guest OS state cannot be determined. * `NotRunning` - Indicates that the guest OS is not running. * `Resetting` - Indicates that the guest OS is resetting. * `Running` - Indicates that the guest OS is running normally. * `ShuttingDown` - Indicates that the guest OS is shutting down. * `Standby` - Indicates that the guest OS is in standby mode.
	GuestState *string `json:"GuestState,omitempty"`
	// UUID assigned by vCenter to every VM.
	InstanceUuid *string `json:"InstanceUuid,omitempty"`
	// Inventory path to the VM. Example - /DC/vm/folder/VMName.
	InventoryPath *string `json:"InventoryPath,omitempty"`
	// If true, indicates that the entity refers to a template of a virtual machine and not a real virtual machine.
	IsTemplate *bool                                         `json:"IsTemplate,omitempty"`
	MacAddress []string                                      `json:"MacAddress,omitempty"`
	MemShares  NullableVirtualizationVmwareVmMemoryShareInfo `json:"MemShares,omitempty"`
	// Adding memory to a running VM.
	MemoryHotAddEnabled *bool `json:"MemoryHotAddEnabled,omitempty"`
	// Indicates how many networks are used by this VM.
	NetworkCount *int64   `json:"NetworkCount,omitempty"`
	PortGroups   []string `json:"PortGroups,omitempty"`
	// Shows if this is a protected VM. VMs can be in protection groups.
	ProtectedVm       *bool                                         `json:"ProtectedVm,omitempty"`
	RemoteDisplayInfo NullableVirtualizationVmwareRemoteDisplayInfo `json:"RemoteDisplayInfo,omitempty"`
	// Shows if support for a remote VNC access is enabled.
	RemoteDisplayVncEnabled *bool `json:"RemoteDisplayVncEnabled,omitempty"`
	// Name of the resource pool to which this VM belongs (optional).
	ResourcePool *string `json:"ResourcePool,omitempty"`
	// Who owns the resource pool.
	ResourcePoolOwner *string `json:"ResourcePoolOwner,omitempty"`
	// The parent of the current resource pool to which this VM belongs.
	ResourcePoolParent *string `json:"ResourcePoolParent,omitempty"`
	// Indicates if guest tools are running on this VM. Could be set to guestToolNotRunning or guestToolsRunning.
	ToolRunningStatus *string `json:"ToolRunningStatus,omitempty"`
	// The version of the guest tools, usually not specified.
	ToolsVersion             *string `json:"ToolsVersion,omitempty"`
	VirtualDisks             []int64 `json:"VirtualDisks,omitempty"`
	VirtualNetworkInterfaces []int64 `json:"VirtualNetworkInterfaces,omitempty"`
	// Shows the number of disks assigned to this VM.
	VmDiskCount *int64 `json:"VmDiskCount,omitempty"`
	// The operational state of the VM. Could be Available, Provisioned, Maintenance mode, Deleting, etc.
	VmOverallStatus *string `json:"VmOverallStatus,omitempty"`
	// Path to the vmx file of the VM. Example - [datastore3] VCSA-134/VCSA-134.vmx.
	VmPath *string `json:"VmPath,omitempty"`
	// Information about the version of this VM (vmx-09, vmx-11 etc.).
	VmVersion *string `json:"VmVersion,omitempty"`
	// How many vnics are present.
	VmVnicCount *int64 `json:"VmVnicCount,omitempty"`
	// Information related to the guest info's VNIC virtual device. It is a comma-separated list.
	VnicDeviceConfigId *string                                     `json:"VnicDeviceConfigId,omitempty"`
	Cluster            *VirtualizationVmwareClusterRelationship    `json:"Cluster,omitempty"`
	Datacenter         *VirtualizationVmwareDatacenterRelationship `json:"Datacenter,omitempty"`
	// An array of relationships to virtualizationVmwareDatastore resources.
	Datastores []VirtualizationVmwareDatastoreRelationship `json:"Datastores,omitempty"`
	Host       *VirtualizationVmwareHostRelationship       `json:"Host,omitempty"`
	// An array of relationships to virtualizationBaseNetwork resources.
	Networks             []VirtualizationBaseNetworkRelationship `json:"Networks,omitempty"`
	ParentFolder         *VirtualizationVmwareFolderRelationship `json:"ParentFolder,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _VirtualizationVmwareVirtualMachine VirtualizationVmwareVirtualMachine

// NewVirtualizationVmwareVirtualMachine instantiates a new VirtualizationVmwareVirtualMachine object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVirtualizationVmwareVirtualMachine(classId string, objectType string) *VirtualizationVmwareVirtualMachine {
	this := VirtualizationVmwareVirtualMachine{}
	this.ClassId = classId
	this.ObjectType = objectType
	var guestState string = "Unknown"
	this.GuestState = &guestState
	return &this
}

// NewVirtualizationVmwareVirtualMachineWithDefaults instantiates a new VirtualizationVmwareVirtualMachine object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVirtualizationVmwareVirtualMachineWithDefaults() *VirtualizationVmwareVirtualMachine {
	this := VirtualizationVmwareVirtualMachine{}
	var classId string = "virtualization.VmwareVirtualMachine"
	this.ClassId = classId
	var objectType string = "virtualization.VmwareVirtualMachine"
	this.ObjectType = objectType
	var guestState string = "Unknown"
	this.GuestState = &guestState
	return &this
}

// GetClassId returns the ClassId field value
func (o *VirtualizationVmwareVirtualMachine) GetClassId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ClassId
}

// GetClassIdOk returns a tuple with the ClassId field value
// and a boolean to check if the value has been set.
func (o *VirtualizationVmwareVirtualMachine) GetClassIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ClassId, true
}

// SetClassId sets field value
func (o *VirtualizationVmwareVirtualMachine) SetClassId(v string) {
	o.ClassId = v
}

// GetObjectType returns the ObjectType field value
func (o *VirtualizationVmwareVirtualMachine) GetObjectType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ObjectType
}

// GetObjectTypeOk returns a tuple with the ObjectType field value
// and a boolean to check if the value has been set.
func (o *VirtualizationVmwareVirtualMachine) GetObjectTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ObjectType, true
}

// SetObjectType sets field value
func (o *VirtualizationVmwareVirtualMachine) SetObjectType(v string) {
	o.ObjectType = v
}

// GetAnnotation returns the Annotation field value if set, zero value otherwise.
func (o *VirtualizationVmwareVirtualMachine) GetAnnotation() string {
	if o == nil || o.Annotation == nil {
		var ret string
		return ret
	}
	return *o.Annotation
}

// GetAnnotationOk returns a tuple with the Annotation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualizationVmwareVirtualMachine) GetAnnotationOk() (*string, bool) {
	if o == nil || o.Annotation == nil {
		return nil, false
	}
	return o.Annotation, true
}

// HasAnnotation returns a boolean if a field has been set.
func (o *VirtualizationVmwareVirtualMachine) HasAnnotation() bool {
	if o != nil && o.Annotation != nil {
		return true
	}

	return false
}

// SetAnnotation gets a reference to the given string and assigns it to the Annotation field.
func (o *VirtualizationVmwareVirtualMachine) SetAnnotation(v string) {
	o.Annotation = &v
}

// GetConfigName returns the ConfigName field value if set, zero value otherwise.
func (o *VirtualizationVmwareVirtualMachine) GetConfigName() string {
	if o == nil || o.ConfigName == nil {
		var ret string
		return ret
	}
	return *o.ConfigName
}

// GetConfigNameOk returns a tuple with the ConfigName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualizationVmwareVirtualMachine) GetConfigNameOk() (*string, bool) {
	if o == nil || o.ConfigName == nil {
		return nil, false
	}
	return o.ConfigName, true
}

// HasConfigName returns a boolean if a field has been set.
func (o *VirtualizationVmwareVirtualMachine) HasConfigName() bool {
	if o != nil && o.ConfigName != nil {
		return true
	}

	return false
}

// SetConfigName gets a reference to the given string and assigns it to the ConfigName field.
func (o *VirtualizationVmwareVirtualMachine) SetConfigName(v string) {
	o.ConfigName = &v
}

// GetConnectionState returns the ConnectionState field value if set, zero value otherwise.
func (o *VirtualizationVmwareVirtualMachine) GetConnectionState() string {
	if o == nil || o.ConnectionState == nil {
		var ret string
		return ret
	}
	return *o.ConnectionState
}

// GetConnectionStateOk returns a tuple with the ConnectionState field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualizationVmwareVirtualMachine) GetConnectionStateOk() (*string, bool) {
	if o == nil || o.ConnectionState == nil {
		return nil, false
	}
	return o.ConnectionState, true
}

// HasConnectionState returns a boolean if a field has been set.
func (o *VirtualizationVmwareVirtualMachine) HasConnectionState() bool {
	if o != nil && o.ConnectionState != nil {
		return true
	}

	return false
}

// SetConnectionState gets a reference to the given string and assigns it to the ConnectionState field.
func (o *VirtualizationVmwareVirtualMachine) SetConnectionState(v string) {
	o.ConnectionState = &v
}

// GetCpuHotAddEnabled returns the CpuHotAddEnabled field value if set, zero value otherwise.
func (o *VirtualizationVmwareVirtualMachine) GetCpuHotAddEnabled() bool {
	if o == nil || o.CpuHotAddEnabled == nil {
		var ret bool
		return ret
	}
	return *o.CpuHotAddEnabled
}

// GetCpuHotAddEnabledOk returns a tuple with the CpuHotAddEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualizationVmwareVirtualMachine) GetCpuHotAddEnabledOk() (*bool, bool) {
	if o == nil || o.CpuHotAddEnabled == nil {
		return nil, false
	}
	return o.CpuHotAddEnabled, true
}

// HasCpuHotAddEnabled returns a boolean if a field has been set.
func (o *VirtualizationVmwareVirtualMachine) HasCpuHotAddEnabled() bool {
	if o != nil && o.CpuHotAddEnabled != nil {
		return true
	}

	return false
}

// SetCpuHotAddEnabled gets a reference to the given bool and assigns it to the CpuHotAddEnabled field.
func (o *VirtualizationVmwareVirtualMachine) SetCpuHotAddEnabled(v bool) {
	o.CpuHotAddEnabled = &v
}

// GetCpuShares returns the CpuShares field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VirtualizationVmwareVirtualMachine) GetCpuShares() VirtualizationVmwareVmCpuShareInfo {
	if o == nil || o.CpuShares.Get() == nil {
		var ret VirtualizationVmwareVmCpuShareInfo
		return ret
	}
	return *o.CpuShares.Get()
}

// GetCpuSharesOk returns a tuple with the CpuShares field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VirtualizationVmwareVirtualMachine) GetCpuSharesOk() (*VirtualizationVmwareVmCpuShareInfo, bool) {
	if o == nil {
		return nil, false
	}
	return o.CpuShares.Get(), o.CpuShares.IsSet()
}

// HasCpuShares returns a boolean if a field has been set.
func (o *VirtualizationVmwareVirtualMachine) HasCpuShares() bool {
	if o != nil && o.CpuShares.IsSet() {
		return true
	}

	return false
}

// SetCpuShares gets a reference to the given NullableVirtualizationVmwareVmCpuShareInfo and assigns it to the CpuShares field.
func (o *VirtualizationVmwareVirtualMachine) SetCpuShares(v VirtualizationVmwareVmCpuShareInfo) {
	o.CpuShares.Set(&v)
}

// SetCpuSharesNil sets the value for CpuShares to be an explicit nil
func (o *VirtualizationVmwareVirtualMachine) SetCpuSharesNil() {
	o.CpuShares.Set(nil)
}

// UnsetCpuShares ensures that no value is present for CpuShares, not even an explicit nil
func (o *VirtualizationVmwareVirtualMachine) UnsetCpuShares() {
	o.CpuShares.Unset()
}

// GetCpuSocketInfo returns the CpuSocketInfo field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VirtualizationVmwareVirtualMachine) GetCpuSocketInfo() VirtualizationVmwareVmCpuSocketInfo {
	if o == nil || o.CpuSocketInfo.Get() == nil {
		var ret VirtualizationVmwareVmCpuSocketInfo
		return ret
	}
	return *o.CpuSocketInfo.Get()
}

// GetCpuSocketInfoOk returns a tuple with the CpuSocketInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VirtualizationVmwareVirtualMachine) GetCpuSocketInfoOk() (*VirtualizationVmwareVmCpuSocketInfo, bool) {
	if o == nil {
		return nil, false
	}
	return o.CpuSocketInfo.Get(), o.CpuSocketInfo.IsSet()
}

// HasCpuSocketInfo returns a boolean if a field has been set.
func (o *VirtualizationVmwareVirtualMachine) HasCpuSocketInfo() bool {
	if o != nil && o.CpuSocketInfo.IsSet() {
		return true
	}

	return false
}

// SetCpuSocketInfo gets a reference to the given NullableVirtualizationVmwareVmCpuSocketInfo and assigns it to the CpuSocketInfo field.
func (o *VirtualizationVmwareVirtualMachine) SetCpuSocketInfo(v VirtualizationVmwareVmCpuSocketInfo) {
	o.CpuSocketInfo.Set(&v)
}

// SetCpuSocketInfoNil sets the value for CpuSocketInfo to be an explicit nil
func (o *VirtualizationVmwareVirtualMachine) SetCpuSocketInfoNil() {
	o.CpuSocketInfo.Set(nil)
}

// UnsetCpuSocketInfo ensures that no value is present for CpuSocketInfo, not even an explicit nil
func (o *VirtualizationVmwareVirtualMachine) UnsetCpuSocketInfo() {
	o.CpuSocketInfo.Unset()
}

// GetCustomAttributes returns the CustomAttributes field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VirtualizationVmwareVirtualMachine) GetCustomAttributes() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.CustomAttributes
}

// GetCustomAttributesOk returns a tuple with the CustomAttributes field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VirtualizationVmwareVirtualMachine) GetCustomAttributesOk() (*[]string, bool) {
	if o == nil || o.CustomAttributes == nil {
		return nil, false
	}
	return &o.CustomAttributes, true
}

// HasCustomAttributes returns a boolean if a field has been set.
func (o *VirtualizationVmwareVirtualMachine) HasCustomAttributes() bool {
	if o != nil && o.CustomAttributes != nil {
		return true
	}

	return false
}

// SetCustomAttributes gets a reference to the given []string and assigns it to the CustomAttributes field.
func (o *VirtualizationVmwareVirtualMachine) SetCustomAttributes(v []string) {
	o.CustomAttributes = v
}

// GetDefaultPowerOffType returns the DefaultPowerOffType field value if set, zero value otherwise.
func (o *VirtualizationVmwareVirtualMachine) GetDefaultPowerOffType() string {
	if o == nil || o.DefaultPowerOffType == nil {
		var ret string
		return ret
	}
	return *o.DefaultPowerOffType
}

// GetDefaultPowerOffTypeOk returns a tuple with the DefaultPowerOffType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualizationVmwareVirtualMachine) GetDefaultPowerOffTypeOk() (*string, bool) {
	if o == nil || o.DefaultPowerOffType == nil {
		return nil, false
	}
	return o.DefaultPowerOffType, true
}

// HasDefaultPowerOffType returns a boolean if a field has been set.
func (o *VirtualizationVmwareVirtualMachine) HasDefaultPowerOffType() bool {
	if o != nil && o.DefaultPowerOffType != nil {
		return true
	}

	return false
}

// SetDefaultPowerOffType gets a reference to the given string and assigns it to the DefaultPowerOffType field.
func (o *VirtualizationVmwareVirtualMachine) SetDefaultPowerOffType(v string) {
	o.DefaultPowerOffType = &v
}

// GetDhcpEnabled returns the DhcpEnabled field value if set, zero value otherwise.
func (o *VirtualizationVmwareVirtualMachine) GetDhcpEnabled() bool {
	if o == nil || o.DhcpEnabled == nil {
		var ret bool
		return ret
	}
	return *o.DhcpEnabled
}

// GetDhcpEnabledOk returns a tuple with the DhcpEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualizationVmwareVirtualMachine) GetDhcpEnabledOk() (*bool, bool) {
	if o == nil || o.DhcpEnabled == nil {
		return nil, false
	}
	return o.DhcpEnabled, true
}

// HasDhcpEnabled returns a boolean if a field has been set.
func (o *VirtualizationVmwareVirtualMachine) HasDhcpEnabled() bool {
	if o != nil && o.DhcpEnabled != nil {
		return true
	}

	return false
}

// SetDhcpEnabled gets a reference to the given bool and assigns it to the DhcpEnabled field.
func (o *VirtualizationVmwareVirtualMachine) SetDhcpEnabled(v bool) {
	o.DhcpEnabled = &v
}

// GetDiskCommitInfo returns the DiskCommitInfo field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VirtualizationVmwareVirtualMachine) GetDiskCommitInfo() VirtualizationVmwareVmDiskCommitInfo {
	if o == nil || o.DiskCommitInfo.Get() == nil {
		var ret VirtualizationVmwareVmDiskCommitInfo
		return ret
	}
	return *o.DiskCommitInfo.Get()
}

// GetDiskCommitInfoOk returns a tuple with the DiskCommitInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VirtualizationVmwareVirtualMachine) GetDiskCommitInfoOk() (*VirtualizationVmwareVmDiskCommitInfo, bool) {
	if o == nil {
		return nil, false
	}
	return o.DiskCommitInfo.Get(), o.DiskCommitInfo.IsSet()
}

// HasDiskCommitInfo returns a boolean if a field has been set.
func (o *VirtualizationVmwareVirtualMachine) HasDiskCommitInfo() bool {
	if o != nil && o.DiskCommitInfo.IsSet() {
		return true
	}

	return false
}

// SetDiskCommitInfo gets a reference to the given NullableVirtualizationVmwareVmDiskCommitInfo and assigns it to the DiskCommitInfo field.
func (o *VirtualizationVmwareVirtualMachine) SetDiskCommitInfo(v VirtualizationVmwareVmDiskCommitInfo) {
	o.DiskCommitInfo.Set(&v)
}

// SetDiskCommitInfoNil sets the value for DiskCommitInfo to be an explicit nil
func (o *VirtualizationVmwareVirtualMachine) SetDiskCommitInfoNil() {
	o.DiskCommitInfo.Set(nil)
}

// UnsetDiskCommitInfo ensures that no value is present for DiskCommitInfo, not even an explicit nil
func (o *VirtualizationVmwareVirtualMachine) UnsetDiskCommitInfo() {
	o.DiskCommitInfo.Unset()
}

// GetDnsServerList returns the DnsServerList field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VirtualizationVmwareVirtualMachine) GetDnsServerList() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.DnsServerList
}

// GetDnsServerListOk returns a tuple with the DnsServerList field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VirtualizationVmwareVirtualMachine) GetDnsServerListOk() (*[]string, bool) {
	if o == nil || o.DnsServerList == nil {
		return nil, false
	}
	return &o.DnsServerList, true
}

// HasDnsServerList returns a boolean if a field has been set.
func (o *VirtualizationVmwareVirtualMachine) HasDnsServerList() bool {
	if o != nil && o.DnsServerList != nil {
		return true
	}

	return false
}

// SetDnsServerList gets a reference to the given []string and assigns it to the DnsServerList field.
func (o *VirtualizationVmwareVirtualMachine) SetDnsServerList(v []string) {
	o.DnsServerList = v
}

// GetDnsSuffixList returns the DnsSuffixList field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VirtualizationVmwareVirtualMachine) GetDnsSuffixList() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.DnsSuffixList
}

// GetDnsSuffixListOk returns a tuple with the DnsSuffixList field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VirtualizationVmwareVirtualMachine) GetDnsSuffixListOk() (*[]string, bool) {
	if o == nil || o.DnsSuffixList == nil {
		return nil, false
	}
	return &o.DnsSuffixList, true
}

// HasDnsSuffixList returns a boolean if a field has been set.
func (o *VirtualizationVmwareVirtualMachine) HasDnsSuffixList() bool {
	if o != nil && o.DnsSuffixList != nil {
		return true
	}

	return false
}

// SetDnsSuffixList gets a reference to the given []string and assigns it to the DnsSuffixList field.
func (o *VirtualizationVmwareVirtualMachine) SetDnsSuffixList(v []string) {
	o.DnsSuffixList = v
}

// GetExtraConfig returns the ExtraConfig field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VirtualizationVmwareVirtualMachine) GetExtraConfig() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.ExtraConfig
}

// GetExtraConfigOk returns a tuple with the ExtraConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VirtualizationVmwareVirtualMachine) GetExtraConfigOk() (*interface{}, bool) {
	if o == nil || o.ExtraConfig == nil {
		return nil, false
	}
	return &o.ExtraConfig, true
}

// HasExtraConfig returns a boolean if a field has been set.
func (o *VirtualizationVmwareVirtualMachine) HasExtraConfig() bool {
	if o != nil && o.ExtraConfig != nil {
		return true
	}

	return false
}

// SetExtraConfig gets a reference to the given interface{} and assigns it to the ExtraConfig field.
func (o *VirtualizationVmwareVirtualMachine) SetExtraConfig(v interface{}) {
	o.ExtraConfig = v
}

// GetFolder returns the Folder field value if set, zero value otherwise.
func (o *VirtualizationVmwareVirtualMachine) GetFolder() string {
	if o == nil || o.Folder == nil {
		var ret string
		return ret
	}
	return *o.Folder
}

// GetFolderOk returns a tuple with the Folder field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualizationVmwareVirtualMachine) GetFolderOk() (*string, bool) {
	if o == nil || o.Folder == nil {
		return nil, false
	}
	return o.Folder, true
}

// HasFolder returns a boolean if a field has been set.
func (o *VirtualizationVmwareVirtualMachine) HasFolder() bool {
	if o != nil && o.Folder != nil {
		return true
	}

	return false
}

// SetFolder gets a reference to the given string and assigns it to the Folder field.
func (o *VirtualizationVmwareVirtualMachine) SetFolder(v string) {
	o.Folder = &v
}

// GetGuestState returns the GuestState field value if set, zero value otherwise.
func (o *VirtualizationVmwareVirtualMachine) GetGuestState() string {
	if o == nil || o.GuestState == nil {
		var ret string
		return ret
	}
	return *o.GuestState
}

// GetGuestStateOk returns a tuple with the GuestState field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualizationVmwareVirtualMachine) GetGuestStateOk() (*string, bool) {
	if o == nil || o.GuestState == nil {
		return nil, false
	}
	return o.GuestState, true
}

// HasGuestState returns a boolean if a field has been set.
func (o *VirtualizationVmwareVirtualMachine) HasGuestState() bool {
	if o != nil && o.GuestState != nil {
		return true
	}

	return false
}

// SetGuestState gets a reference to the given string and assigns it to the GuestState field.
func (o *VirtualizationVmwareVirtualMachine) SetGuestState(v string) {
	o.GuestState = &v
}

// GetInstanceUuid returns the InstanceUuid field value if set, zero value otherwise.
func (o *VirtualizationVmwareVirtualMachine) GetInstanceUuid() string {
	if o == nil || o.InstanceUuid == nil {
		var ret string
		return ret
	}
	return *o.InstanceUuid
}

// GetInstanceUuidOk returns a tuple with the InstanceUuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualizationVmwareVirtualMachine) GetInstanceUuidOk() (*string, bool) {
	if o == nil || o.InstanceUuid == nil {
		return nil, false
	}
	return o.InstanceUuid, true
}

// HasInstanceUuid returns a boolean if a field has been set.
func (o *VirtualizationVmwareVirtualMachine) HasInstanceUuid() bool {
	if o != nil && o.InstanceUuid != nil {
		return true
	}

	return false
}

// SetInstanceUuid gets a reference to the given string and assigns it to the InstanceUuid field.
func (o *VirtualizationVmwareVirtualMachine) SetInstanceUuid(v string) {
	o.InstanceUuid = &v
}

// GetInventoryPath returns the InventoryPath field value if set, zero value otherwise.
func (o *VirtualizationVmwareVirtualMachine) GetInventoryPath() string {
	if o == nil || o.InventoryPath == nil {
		var ret string
		return ret
	}
	return *o.InventoryPath
}

// GetInventoryPathOk returns a tuple with the InventoryPath field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualizationVmwareVirtualMachine) GetInventoryPathOk() (*string, bool) {
	if o == nil || o.InventoryPath == nil {
		return nil, false
	}
	return o.InventoryPath, true
}

// HasInventoryPath returns a boolean if a field has been set.
func (o *VirtualizationVmwareVirtualMachine) HasInventoryPath() bool {
	if o != nil && o.InventoryPath != nil {
		return true
	}

	return false
}

// SetInventoryPath gets a reference to the given string and assigns it to the InventoryPath field.
func (o *VirtualizationVmwareVirtualMachine) SetInventoryPath(v string) {
	o.InventoryPath = &v
}

// GetIsTemplate returns the IsTemplate field value if set, zero value otherwise.
func (o *VirtualizationVmwareVirtualMachine) GetIsTemplate() bool {
	if o == nil || o.IsTemplate == nil {
		var ret bool
		return ret
	}
	return *o.IsTemplate
}

// GetIsTemplateOk returns a tuple with the IsTemplate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualizationVmwareVirtualMachine) GetIsTemplateOk() (*bool, bool) {
	if o == nil || o.IsTemplate == nil {
		return nil, false
	}
	return o.IsTemplate, true
}

// HasIsTemplate returns a boolean if a field has been set.
func (o *VirtualizationVmwareVirtualMachine) HasIsTemplate() bool {
	if o != nil && o.IsTemplate != nil {
		return true
	}

	return false
}

// SetIsTemplate gets a reference to the given bool and assigns it to the IsTemplate field.
func (o *VirtualizationVmwareVirtualMachine) SetIsTemplate(v bool) {
	o.IsTemplate = &v
}

// GetMacAddress returns the MacAddress field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VirtualizationVmwareVirtualMachine) GetMacAddress() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.MacAddress
}

// GetMacAddressOk returns a tuple with the MacAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VirtualizationVmwareVirtualMachine) GetMacAddressOk() (*[]string, bool) {
	if o == nil || o.MacAddress == nil {
		return nil, false
	}
	return &o.MacAddress, true
}

// HasMacAddress returns a boolean if a field has been set.
func (o *VirtualizationVmwareVirtualMachine) HasMacAddress() bool {
	if o != nil && o.MacAddress != nil {
		return true
	}

	return false
}

// SetMacAddress gets a reference to the given []string and assigns it to the MacAddress field.
func (o *VirtualizationVmwareVirtualMachine) SetMacAddress(v []string) {
	o.MacAddress = v
}

// GetMemShares returns the MemShares field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VirtualizationVmwareVirtualMachine) GetMemShares() VirtualizationVmwareVmMemoryShareInfo {
	if o == nil || o.MemShares.Get() == nil {
		var ret VirtualizationVmwareVmMemoryShareInfo
		return ret
	}
	return *o.MemShares.Get()
}

// GetMemSharesOk returns a tuple with the MemShares field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VirtualizationVmwareVirtualMachine) GetMemSharesOk() (*VirtualizationVmwareVmMemoryShareInfo, bool) {
	if o == nil {
		return nil, false
	}
	return o.MemShares.Get(), o.MemShares.IsSet()
}

// HasMemShares returns a boolean if a field has been set.
func (o *VirtualizationVmwareVirtualMachine) HasMemShares() bool {
	if o != nil && o.MemShares.IsSet() {
		return true
	}

	return false
}

// SetMemShares gets a reference to the given NullableVirtualizationVmwareVmMemoryShareInfo and assigns it to the MemShares field.
func (o *VirtualizationVmwareVirtualMachine) SetMemShares(v VirtualizationVmwareVmMemoryShareInfo) {
	o.MemShares.Set(&v)
}

// SetMemSharesNil sets the value for MemShares to be an explicit nil
func (o *VirtualizationVmwareVirtualMachine) SetMemSharesNil() {
	o.MemShares.Set(nil)
}

// UnsetMemShares ensures that no value is present for MemShares, not even an explicit nil
func (o *VirtualizationVmwareVirtualMachine) UnsetMemShares() {
	o.MemShares.Unset()
}

// GetMemoryHotAddEnabled returns the MemoryHotAddEnabled field value if set, zero value otherwise.
func (o *VirtualizationVmwareVirtualMachine) GetMemoryHotAddEnabled() bool {
	if o == nil || o.MemoryHotAddEnabled == nil {
		var ret bool
		return ret
	}
	return *o.MemoryHotAddEnabled
}

// GetMemoryHotAddEnabledOk returns a tuple with the MemoryHotAddEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualizationVmwareVirtualMachine) GetMemoryHotAddEnabledOk() (*bool, bool) {
	if o == nil || o.MemoryHotAddEnabled == nil {
		return nil, false
	}
	return o.MemoryHotAddEnabled, true
}

// HasMemoryHotAddEnabled returns a boolean if a field has been set.
func (o *VirtualizationVmwareVirtualMachine) HasMemoryHotAddEnabled() bool {
	if o != nil && o.MemoryHotAddEnabled != nil {
		return true
	}

	return false
}

// SetMemoryHotAddEnabled gets a reference to the given bool and assigns it to the MemoryHotAddEnabled field.
func (o *VirtualizationVmwareVirtualMachine) SetMemoryHotAddEnabled(v bool) {
	o.MemoryHotAddEnabled = &v
}

// GetNetworkCount returns the NetworkCount field value if set, zero value otherwise.
func (o *VirtualizationVmwareVirtualMachine) GetNetworkCount() int64 {
	if o == nil || o.NetworkCount == nil {
		var ret int64
		return ret
	}
	return *o.NetworkCount
}

// GetNetworkCountOk returns a tuple with the NetworkCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualizationVmwareVirtualMachine) GetNetworkCountOk() (*int64, bool) {
	if o == nil || o.NetworkCount == nil {
		return nil, false
	}
	return o.NetworkCount, true
}

// HasNetworkCount returns a boolean if a field has been set.
func (o *VirtualizationVmwareVirtualMachine) HasNetworkCount() bool {
	if o != nil && o.NetworkCount != nil {
		return true
	}

	return false
}

// SetNetworkCount gets a reference to the given int64 and assigns it to the NetworkCount field.
func (o *VirtualizationVmwareVirtualMachine) SetNetworkCount(v int64) {
	o.NetworkCount = &v
}

// GetPortGroups returns the PortGroups field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VirtualizationVmwareVirtualMachine) GetPortGroups() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.PortGroups
}

// GetPortGroupsOk returns a tuple with the PortGroups field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VirtualizationVmwareVirtualMachine) GetPortGroupsOk() (*[]string, bool) {
	if o == nil || o.PortGroups == nil {
		return nil, false
	}
	return &o.PortGroups, true
}

// HasPortGroups returns a boolean if a field has been set.
func (o *VirtualizationVmwareVirtualMachine) HasPortGroups() bool {
	if o != nil && o.PortGroups != nil {
		return true
	}

	return false
}

// SetPortGroups gets a reference to the given []string and assigns it to the PortGroups field.
func (o *VirtualizationVmwareVirtualMachine) SetPortGroups(v []string) {
	o.PortGroups = v
}

// GetProtectedVm returns the ProtectedVm field value if set, zero value otherwise.
func (o *VirtualizationVmwareVirtualMachine) GetProtectedVm() bool {
	if o == nil || o.ProtectedVm == nil {
		var ret bool
		return ret
	}
	return *o.ProtectedVm
}

// GetProtectedVmOk returns a tuple with the ProtectedVm field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualizationVmwareVirtualMachine) GetProtectedVmOk() (*bool, bool) {
	if o == nil || o.ProtectedVm == nil {
		return nil, false
	}
	return o.ProtectedVm, true
}

// HasProtectedVm returns a boolean if a field has been set.
func (o *VirtualizationVmwareVirtualMachine) HasProtectedVm() bool {
	if o != nil && o.ProtectedVm != nil {
		return true
	}

	return false
}

// SetProtectedVm gets a reference to the given bool and assigns it to the ProtectedVm field.
func (o *VirtualizationVmwareVirtualMachine) SetProtectedVm(v bool) {
	o.ProtectedVm = &v
}

// GetRemoteDisplayInfo returns the RemoteDisplayInfo field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VirtualizationVmwareVirtualMachine) GetRemoteDisplayInfo() VirtualizationVmwareRemoteDisplayInfo {
	if o == nil || o.RemoteDisplayInfo.Get() == nil {
		var ret VirtualizationVmwareRemoteDisplayInfo
		return ret
	}
	return *o.RemoteDisplayInfo.Get()
}

// GetRemoteDisplayInfoOk returns a tuple with the RemoteDisplayInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VirtualizationVmwareVirtualMachine) GetRemoteDisplayInfoOk() (*VirtualizationVmwareRemoteDisplayInfo, bool) {
	if o == nil {
		return nil, false
	}
	return o.RemoteDisplayInfo.Get(), o.RemoteDisplayInfo.IsSet()
}

// HasRemoteDisplayInfo returns a boolean if a field has been set.
func (o *VirtualizationVmwareVirtualMachine) HasRemoteDisplayInfo() bool {
	if o != nil && o.RemoteDisplayInfo.IsSet() {
		return true
	}

	return false
}

// SetRemoteDisplayInfo gets a reference to the given NullableVirtualizationVmwareRemoteDisplayInfo and assigns it to the RemoteDisplayInfo field.
func (o *VirtualizationVmwareVirtualMachine) SetRemoteDisplayInfo(v VirtualizationVmwareRemoteDisplayInfo) {
	o.RemoteDisplayInfo.Set(&v)
}

// SetRemoteDisplayInfoNil sets the value for RemoteDisplayInfo to be an explicit nil
func (o *VirtualizationVmwareVirtualMachine) SetRemoteDisplayInfoNil() {
	o.RemoteDisplayInfo.Set(nil)
}

// UnsetRemoteDisplayInfo ensures that no value is present for RemoteDisplayInfo, not even an explicit nil
func (o *VirtualizationVmwareVirtualMachine) UnsetRemoteDisplayInfo() {
	o.RemoteDisplayInfo.Unset()
}

// GetRemoteDisplayVncEnabled returns the RemoteDisplayVncEnabled field value if set, zero value otherwise.
func (o *VirtualizationVmwareVirtualMachine) GetRemoteDisplayVncEnabled() bool {
	if o == nil || o.RemoteDisplayVncEnabled == nil {
		var ret bool
		return ret
	}
	return *o.RemoteDisplayVncEnabled
}

// GetRemoteDisplayVncEnabledOk returns a tuple with the RemoteDisplayVncEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualizationVmwareVirtualMachine) GetRemoteDisplayVncEnabledOk() (*bool, bool) {
	if o == nil || o.RemoteDisplayVncEnabled == nil {
		return nil, false
	}
	return o.RemoteDisplayVncEnabled, true
}

// HasRemoteDisplayVncEnabled returns a boolean if a field has been set.
func (o *VirtualizationVmwareVirtualMachine) HasRemoteDisplayVncEnabled() bool {
	if o != nil && o.RemoteDisplayVncEnabled != nil {
		return true
	}

	return false
}

// SetRemoteDisplayVncEnabled gets a reference to the given bool and assigns it to the RemoteDisplayVncEnabled field.
func (o *VirtualizationVmwareVirtualMachine) SetRemoteDisplayVncEnabled(v bool) {
	o.RemoteDisplayVncEnabled = &v
}

// GetResourcePool returns the ResourcePool field value if set, zero value otherwise.
func (o *VirtualizationVmwareVirtualMachine) GetResourcePool() string {
	if o == nil || o.ResourcePool == nil {
		var ret string
		return ret
	}
	return *o.ResourcePool
}

// GetResourcePoolOk returns a tuple with the ResourcePool field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualizationVmwareVirtualMachine) GetResourcePoolOk() (*string, bool) {
	if o == nil || o.ResourcePool == nil {
		return nil, false
	}
	return o.ResourcePool, true
}

// HasResourcePool returns a boolean if a field has been set.
func (o *VirtualizationVmwareVirtualMachine) HasResourcePool() bool {
	if o != nil && o.ResourcePool != nil {
		return true
	}

	return false
}

// SetResourcePool gets a reference to the given string and assigns it to the ResourcePool field.
func (o *VirtualizationVmwareVirtualMachine) SetResourcePool(v string) {
	o.ResourcePool = &v
}

// GetResourcePoolOwner returns the ResourcePoolOwner field value if set, zero value otherwise.
func (o *VirtualizationVmwareVirtualMachine) GetResourcePoolOwner() string {
	if o == nil || o.ResourcePoolOwner == nil {
		var ret string
		return ret
	}
	return *o.ResourcePoolOwner
}

// GetResourcePoolOwnerOk returns a tuple with the ResourcePoolOwner field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualizationVmwareVirtualMachine) GetResourcePoolOwnerOk() (*string, bool) {
	if o == nil || o.ResourcePoolOwner == nil {
		return nil, false
	}
	return o.ResourcePoolOwner, true
}

// HasResourcePoolOwner returns a boolean if a field has been set.
func (o *VirtualizationVmwareVirtualMachine) HasResourcePoolOwner() bool {
	if o != nil && o.ResourcePoolOwner != nil {
		return true
	}

	return false
}

// SetResourcePoolOwner gets a reference to the given string and assigns it to the ResourcePoolOwner field.
func (o *VirtualizationVmwareVirtualMachine) SetResourcePoolOwner(v string) {
	o.ResourcePoolOwner = &v
}

// GetResourcePoolParent returns the ResourcePoolParent field value if set, zero value otherwise.
func (o *VirtualizationVmwareVirtualMachine) GetResourcePoolParent() string {
	if o == nil || o.ResourcePoolParent == nil {
		var ret string
		return ret
	}
	return *o.ResourcePoolParent
}

// GetResourcePoolParentOk returns a tuple with the ResourcePoolParent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualizationVmwareVirtualMachine) GetResourcePoolParentOk() (*string, bool) {
	if o == nil || o.ResourcePoolParent == nil {
		return nil, false
	}
	return o.ResourcePoolParent, true
}

// HasResourcePoolParent returns a boolean if a field has been set.
func (o *VirtualizationVmwareVirtualMachine) HasResourcePoolParent() bool {
	if o != nil && o.ResourcePoolParent != nil {
		return true
	}

	return false
}

// SetResourcePoolParent gets a reference to the given string and assigns it to the ResourcePoolParent field.
func (o *VirtualizationVmwareVirtualMachine) SetResourcePoolParent(v string) {
	o.ResourcePoolParent = &v
}

// GetToolRunningStatus returns the ToolRunningStatus field value if set, zero value otherwise.
func (o *VirtualizationVmwareVirtualMachine) GetToolRunningStatus() string {
	if o == nil || o.ToolRunningStatus == nil {
		var ret string
		return ret
	}
	return *o.ToolRunningStatus
}

// GetToolRunningStatusOk returns a tuple with the ToolRunningStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualizationVmwareVirtualMachine) GetToolRunningStatusOk() (*string, bool) {
	if o == nil || o.ToolRunningStatus == nil {
		return nil, false
	}
	return o.ToolRunningStatus, true
}

// HasToolRunningStatus returns a boolean if a field has been set.
func (o *VirtualizationVmwareVirtualMachine) HasToolRunningStatus() bool {
	if o != nil && o.ToolRunningStatus != nil {
		return true
	}

	return false
}

// SetToolRunningStatus gets a reference to the given string and assigns it to the ToolRunningStatus field.
func (o *VirtualizationVmwareVirtualMachine) SetToolRunningStatus(v string) {
	o.ToolRunningStatus = &v
}

// GetToolsVersion returns the ToolsVersion field value if set, zero value otherwise.
func (o *VirtualizationVmwareVirtualMachine) GetToolsVersion() string {
	if o == nil || o.ToolsVersion == nil {
		var ret string
		return ret
	}
	return *o.ToolsVersion
}

// GetToolsVersionOk returns a tuple with the ToolsVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualizationVmwareVirtualMachine) GetToolsVersionOk() (*string, bool) {
	if o == nil || o.ToolsVersion == nil {
		return nil, false
	}
	return o.ToolsVersion, true
}

// HasToolsVersion returns a boolean if a field has been set.
func (o *VirtualizationVmwareVirtualMachine) HasToolsVersion() bool {
	if o != nil && o.ToolsVersion != nil {
		return true
	}

	return false
}

// SetToolsVersion gets a reference to the given string and assigns it to the ToolsVersion field.
func (o *VirtualizationVmwareVirtualMachine) SetToolsVersion(v string) {
	o.ToolsVersion = &v
}

// GetVirtualDisks returns the VirtualDisks field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VirtualizationVmwareVirtualMachine) GetVirtualDisks() []int64 {
	if o == nil {
		var ret []int64
		return ret
	}
	return o.VirtualDisks
}

// GetVirtualDisksOk returns a tuple with the VirtualDisks field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VirtualizationVmwareVirtualMachine) GetVirtualDisksOk() (*[]int64, bool) {
	if o == nil || o.VirtualDisks == nil {
		return nil, false
	}
	return &o.VirtualDisks, true
}

// HasVirtualDisks returns a boolean if a field has been set.
func (o *VirtualizationVmwareVirtualMachine) HasVirtualDisks() bool {
	if o != nil && o.VirtualDisks != nil {
		return true
	}

	return false
}

// SetVirtualDisks gets a reference to the given []int64 and assigns it to the VirtualDisks field.
func (o *VirtualizationVmwareVirtualMachine) SetVirtualDisks(v []int64) {
	o.VirtualDisks = v
}

// GetVirtualNetworkInterfaces returns the VirtualNetworkInterfaces field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VirtualizationVmwareVirtualMachine) GetVirtualNetworkInterfaces() []int64 {
	if o == nil {
		var ret []int64
		return ret
	}
	return o.VirtualNetworkInterfaces
}

// GetVirtualNetworkInterfacesOk returns a tuple with the VirtualNetworkInterfaces field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VirtualizationVmwareVirtualMachine) GetVirtualNetworkInterfacesOk() (*[]int64, bool) {
	if o == nil || o.VirtualNetworkInterfaces == nil {
		return nil, false
	}
	return &o.VirtualNetworkInterfaces, true
}

// HasVirtualNetworkInterfaces returns a boolean if a field has been set.
func (o *VirtualizationVmwareVirtualMachine) HasVirtualNetworkInterfaces() bool {
	if o != nil && o.VirtualNetworkInterfaces != nil {
		return true
	}

	return false
}

// SetVirtualNetworkInterfaces gets a reference to the given []int64 and assigns it to the VirtualNetworkInterfaces field.
func (o *VirtualizationVmwareVirtualMachine) SetVirtualNetworkInterfaces(v []int64) {
	o.VirtualNetworkInterfaces = v
}

// GetVmDiskCount returns the VmDiskCount field value if set, zero value otherwise.
func (o *VirtualizationVmwareVirtualMachine) GetVmDiskCount() int64 {
	if o == nil || o.VmDiskCount == nil {
		var ret int64
		return ret
	}
	return *o.VmDiskCount
}

// GetVmDiskCountOk returns a tuple with the VmDiskCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualizationVmwareVirtualMachine) GetVmDiskCountOk() (*int64, bool) {
	if o == nil || o.VmDiskCount == nil {
		return nil, false
	}
	return o.VmDiskCount, true
}

// HasVmDiskCount returns a boolean if a field has been set.
func (o *VirtualizationVmwareVirtualMachine) HasVmDiskCount() bool {
	if o != nil && o.VmDiskCount != nil {
		return true
	}

	return false
}

// SetVmDiskCount gets a reference to the given int64 and assigns it to the VmDiskCount field.
func (o *VirtualizationVmwareVirtualMachine) SetVmDiskCount(v int64) {
	o.VmDiskCount = &v
}

// GetVmOverallStatus returns the VmOverallStatus field value if set, zero value otherwise.
func (o *VirtualizationVmwareVirtualMachine) GetVmOverallStatus() string {
	if o == nil || o.VmOverallStatus == nil {
		var ret string
		return ret
	}
	return *o.VmOverallStatus
}

// GetVmOverallStatusOk returns a tuple with the VmOverallStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualizationVmwareVirtualMachine) GetVmOverallStatusOk() (*string, bool) {
	if o == nil || o.VmOverallStatus == nil {
		return nil, false
	}
	return o.VmOverallStatus, true
}

// HasVmOverallStatus returns a boolean if a field has been set.
func (o *VirtualizationVmwareVirtualMachine) HasVmOverallStatus() bool {
	if o != nil && o.VmOverallStatus != nil {
		return true
	}

	return false
}

// SetVmOverallStatus gets a reference to the given string and assigns it to the VmOverallStatus field.
func (o *VirtualizationVmwareVirtualMachine) SetVmOverallStatus(v string) {
	o.VmOverallStatus = &v
}

// GetVmPath returns the VmPath field value if set, zero value otherwise.
func (o *VirtualizationVmwareVirtualMachine) GetVmPath() string {
	if o == nil || o.VmPath == nil {
		var ret string
		return ret
	}
	return *o.VmPath
}

// GetVmPathOk returns a tuple with the VmPath field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualizationVmwareVirtualMachine) GetVmPathOk() (*string, bool) {
	if o == nil || o.VmPath == nil {
		return nil, false
	}
	return o.VmPath, true
}

// HasVmPath returns a boolean if a field has been set.
func (o *VirtualizationVmwareVirtualMachine) HasVmPath() bool {
	if o != nil && o.VmPath != nil {
		return true
	}

	return false
}

// SetVmPath gets a reference to the given string and assigns it to the VmPath field.
func (o *VirtualizationVmwareVirtualMachine) SetVmPath(v string) {
	o.VmPath = &v
}

// GetVmVersion returns the VmVersion field value if set, zero value otherwise.
func (o *VirtualizationVmwareVirtualMachine) GetVmVersion() string {
	if o == nil || o.VmVersion == nil {
		var ret string
		return ret
	}
	return *o.VmVersion
}

// GetVmVersionOk returns a tuple with the VmVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualizationVmwareVirtualMachine) GetVmVersionOk() (*string, bool) {
	if o == nil || o.VmVersion == nil {
		return nil, false
	}
	return o.VmVersion, true
}

// HasVmVersion returns a boolean if a field has been set.
func (o *VirtualizationVmwareVirtualMachine) HasVmVersion() bool {
	if o != nil && o.VmVersion != nil {
		return true
	}

	return false
}

// SetVmVersion gets a reference to the given string and assigns it to the VmVersion field.
func (o *VirtualizationVmwareVirtualMachine) SetVmVersion(v string) {
	o.VmVersion = &v
}

// GetVmVnicCount returns the VmVnicCount field value if set, zero value otherwise.
func (o *VirtualizationVmwareVirtualMachine) GetVmVnicCount() int64 {
	if o == nil || o.VmVnicCount == nil {
		var ret int64
		return ret
	}
	return *o.VmVnicCount
}

// GetVmVnicCountOk returns a tuple with the VmVnicCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualizationVmwareVirtualMachine) GetVmVnicCountOk() (*int64, bool) {
	if o == nil || o.VmVnicCount == nil {
		return nil, false
	}
	return o.VmVnicCount, true
}

// HasVmVnicCount returns a boolean if a field has been set.
func (o *VirtualizationVmwareVirtualMachine) HasVmVnicCount() bool {
	if o != nil && o.VmVnicCount != nil {
		return true
	}

	return false
}

// SetVmVnicCount gets a reference to the given int64 and assigns it to the VmVnicCount field.
func (o *VirtualizationVmwareVirtualMachine) SetVmVnicCount(v int64) {
	o.VmVnicCount = &v
}

// GetVnicDeviceConfigId returns the VnicDeviceConfigId field value if set, zero value otherwise.
func (o *VirtualizationVmwareVirtualMachine) GetVnicDeviceConfigId() string {
	if o == nil || o.VnicDeviceConfigId == nil {
		var ret string
		return ret
	}
	return *o.VnicDeviceConfigId
}

// GetVnicDeviceConfigIdOk returns a tuple with the VnicDeviceConfigId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualizationVmwareVirtualMachine) GetVnicDeviceConfigIdOk() (*string, bool) {
	if o == nil || o.VnicDeviceConfigId == nil {
		return nil, false
	}
	return o.VnicDeviceConfigId, true
}

// HasVnicDeviceConfigId returns a boolean if a field has been set.
func (o *VirtualizationVmwareVirtualMachine) HasVnicDeviceConfigId() bool {
	if o != nil && o.VnicDeviceConfigId != nil {
		return true
	}

	return false
}

// SetVnicDeviceConfigId gets a reference to the given string and assigns it to the VnicDeviceConfigId field.
func (o *VirtualizationVmwareVirtualMachine) SetVnicDeviceConfigId(v string) {
	o.VnicDeviceConfigId = &v
}

// GetCluster returns the Cluster field value if set, zero value otherwise.
func (o *VirtualizationVmwareVirtualMachine) GetCluster() VirtualizationVmwareClusterRelationship {
	if o == nil || o.Cluster == nil {
		var ret VirtualizationVmwareClusterRelationship
		return ret
	}
	return *o.Cluster
}

// GetClusterOk returns a tuple with the Cluster field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualizationVmwareVirtualMachine) GetClusterOk() (*VirtualizationVmwareClusterRelationship, bool) {
	if o == nil || o.Cluster == nil {
		return nil, false
	}
	return o.Cluster, true
}

// HasCluster returns a boolean if a field has been set.
func (o *VirtualizationVmwareVirtualMachine) HasCluster() bool {
	if o != nil && o.Cluster != nil {
		return true
	}

	return false
}

// SetCluster gets a reference to the given VirtualizationVmwareClusterRelationship and assigns it to the Cluster field.
func (o *VirtualizationVmwareVirtualMachine) SetCluster(v VirtualizationVmwareClusterRelationship) {
	o.Cluster = &v
}

// GetDatacenter returns the Datacenter field value if set, zero value otherwise.
func (o *VirtualizationVmwareVirtualMachine) GetDatacenter() VirtualizationVmwareDatacenterRelationship {
	if o == nil || o.Datacenter == nil {
		var ret VirtualizationVmwareDatacenterRelationship
		return ret
	}
	return *o.Datacenter
}

// GetDatacenterOk returns a tuple with the Datacenter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualizationVmwareVirtualMachine) GetDatacenterOk() (*VirtualizationVmwareDatacenterRelationship, bool) {
	if o == nil || o.Datacenter == nil {
		return nil, false
	}
	return o.Datacenter, true
}

// HasDatacenter returns a boolean if a field has been set.
func (o *VirtualizationVmwareVirtualMachine) HasDatacenter() bool {
	if o != nil && o.Datacenter != nil {
		return true
	}

	return false
}

// SetDatacenter gets a reference to the given VirtualizationVmwareDatacenterRelationship and assigns it to the Datacenter field.
func (o *VirtualizationVmwareVirtualMachine) SetDatacenter(v VirtualizationVmwareDatacenterRelationship) {
	o.Datacenter = &v
}

// GetDatastores returns the Datastores field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VirtualizationVmwareVirtualMachine) GetDatastores() []VirtualizationVmwareDatastoreRelationship {
	if o == nil {
		var ret []VirtualizationVmwareDatastoreRelationship
		return ret
	}
	return o.Datastores
}

// GetDatastoresOk returns a tuple with the Datastores field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VirtualizationVmwareVirtualMachine) GetDatastoresOk() (*[]VirtualizationVmwareDatastoreRelationship, bool) {
	if o == nil || o.Datastores == nil {
		return nil, false
	}
	return &o.Datastores, true
}

// HasDatastores returns a boolean if a field has been set.
func (o *VirtualizationVmwareVirtualMachine) HasDatastores() bool {
	if o != nil && o.Datastores != nil {
		return true
	}

	return false
}

// SetDatastores gets a reference to the given []VirtualizationVmwareDatastoreRelationship and assigns it to the Datastores field.
func (o *VirtualizationVmwareVirtualMachine) SetDatastores(v []VirtualizationVmwareDatastoreRelationship) {
	o.Datastores = v
}

// GetHost returns the Host field value if set, zero value otherwise.
func (o *VirtualizationVmwareVirtualMachine) GetHost() VirtualizationVmwareHostRelationship {
	if o == nil || o.Host == nil {
		var ret VirtualizationVmwareHostRelationship
		return ret
	}
	return *o.Host
}

// GetHostOk returns a tuple with the Host field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualizationVmwareVirtualMachine) GetHostOk() (*VirtualizationVmwareHostRelationship, bool) {
	if o == nil || o.Host == nil {
		return nil, false
	}
	return o.Host, true
}

// HasHost returns a boolean if a field has been set.
func (o *VirtualizationVmwareVirtualMachine) HasHost() bool {
	if o != nil && o.Host != nil {
		return true
	}

	return false
}

// SetHost gets a reference to the given VirtualizationVmwareHostRelationship and assigns it to the Host field.
func (o *VirtualizationVmwareVirtualMachine) SetHost(v VirtualizationVmwareHostRelationship) {
	o.Host = &v
}

// GetNetworks returns the Networks field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VirtualizationVmwareVirtualMachine) GetNetworks() []VirtualizationBaseNetworkRelationship {
	if o == nil {
		var ret []VirtualizationBaseNetworkRelationship
		return ret
	}
	return o.Networks
}

// GetNetworksOk returns a tuple with the Networks field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VirtualizationVmwareVirtualMachine) GetNetworksOk() (*[]VirtualizationBaseNetworkRelationship, bool) {
	if o == nil || o.Networks == nil {
		return nil, false
	}
	return &o.Networks, true
}

// HasNetworks returns a boolean if a field has been set.
func (o *VirtualizationVmwareVirtualMachine) HasNetworks() bool {
	if o != nil && o.Networks != nil {
		return true
	}

	return false
}

// SetNetworks gets a reference to the given []VirtualizationBaseNetworkRelationship and assigns it to the Networks field.
func (o *VirtualizationVmwareVirtualMachine) SetNetworks(v []VirtualizationBaseNetworkRelationship) {
	o.Networks = v
}

// GetParentFolder returns the ParentFolder field value if set, zero value otherwise.
func (o *VirtualizationVmwareVirtualMachine) GetParentFolder() VirtualizationVmwareFolderRelationship {
	if o == nil || o.ParentFolder == nil {
		var ret VirtualizationVmwareFolderRelationship
		return ret
	}
	return *o.ParentFolder
}

// GetParentFolderOk returns a tuple with the ParentFolder field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualizationVmwareVirtualMachine) GetParentFolderOk() (*VirtualizationVmwareFolderRelationship, bool) {
	if o == nil || o.ParentFolder == nil {
		return nil, false
	}
	return o.ParentFolder, true
}

// HasParentFolder returns a boolean if a field has been set.
func (o *VirtualizationVmwareVirtualMachine) HasParentFolder() bool {
	if o != nil && o.ParentFolder != nil {
		return true
	}

	return false
}

// SetParentFolder gets a reference to the given VirtualizationVmwareFolderRelationship and assigns it to the ParentFolder field.
func (o *VirtualizationVmwareVirtualMachine) SetParentFolder(v VirtualizationVmwareFolderRelationship) {
	o.ParentFolder = &v
}

func (o VirtualizationVmwareVirtualMachine) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	serializedVirtualizationBaseVirtualMachine, errVirtualizationBaseVirtualMachine := json.Marshal(o.VirtualizationBaseVirtualMachine)
	if errVirtualizationBaseVirtualMachine != nil {
		return []byte{}, errVirtualizationBaseVirtualMachine
	}
	errVirtualizationBaseVirtualMachine = json.Unmarshal([]byte(serializedVirtualizationBaseVirtualMachine), &toSerialize)
	if errVirtualizationBaseVirtualMachine != nil {
		return []byte{}, errVirtualizationBaseVirtualMachine
	}
	if true {
		toSerialize["ClassId"] = o.ClassId
	}
	if true {
		toSerialize["ObjectType"] = o.ObjectType
	}
	if o.Annotation != nil {
		toSerialize["Annotation"] = o.Annotation
	}
	if o.ConfigName != nil {
		toSerialize["ConfigName"] = o.ConfigName
	}
	if o.ConnectionState != nil {
		toSerialize["ConnectionState"] = o.ConnectionState
	}
	if o.CpuHotAddEnabled != nil {
		toSerialize["CpuHotAddEnabled"] = o.CpuHotAddEnabled
	}
	if o.CpuShares.IsSet() {
		toSerialize["CpuShares"] = o.CpuShares.Get()
	}
	if o.CpuSocketInfo.IsSet() {
		toSerialize["CpuSocketInfo"] = o.CpuSocketInfo.Get()
	}
	if o.CustomAttributes != nil {
		toSerialize["CustomAttributes"] = o.CustomAttributes
	}
	if o.DefaultPowerOffType != nil {
		toSerialize["DefaultPowerOffType"] = o.DefaultPowerOffType
	}
	if o.DhcpEnabled != nil {
		toSerialize["DhcpEnabled"] = o.DhcpEnabled
	}
	if o.DiskCommitInfo.IsSet() {
		toSerialize["DiskCommitInfo"] = o.DiskCommitInfo.Get()
	}
	if o.DnsServerList != nil {
		toSerialize["DnsServerList"] = o.DnsServerList
	}
	if o.DnsSuffixList != nil {
		toSerialize["DnsSuffixList"] = o.DnsSuffixList
	}
	if o.ExtraConfig != nil {
		toSerialize["ExtraConfig"] = o.ExtraConfig
	}
	if o.Folder != nil {
		toSerialize["Folder"] = o.Folder
	}
	if o.GuestState != nil {
		toSerialize["GuestState"] = o.GuestState
	}
	if o.InstanceUuid != nil {
		toSerialize["InstanceUuid"] = o.InstanceUuid
	}
	if o.InventoryPath != nil {
		toSerialize["InventoryPath"] = o.InventoryPath
	}
	if o.IsTemplate != nil {
		toSerialize["IsTemplate"] = o.IsTemplate
	}
	if o.MacAddress != nil {
		toSerialize["MacAddress"] = o.MacAddress
	}
	if o.MemShares.IsSet() {
		toSerialize["MemShares"] = o.MemShares.Get()
	}
	if o.MemoryHotAddEnabled != nil {
		toSerialize["MemoryHotAddEnabled"] = o.MemoryHotAddEnabled
	}
	if o.NetworkCount != nil {
		toSerialize["NetworkCount"] = o.NetworkCount
	}
	if o.PortGroups != nil {
		toSerialize["PortGroups"] = o.PortGroups
	}
	if o.ProtectedVm != nil {
		toSerialize["ProtectedVm"] = o.ProtectedVm
	}
	if o.RemoteDisplayInfo.IsSet() {
		toSerialize["RemoteDisplayInfo"] = o.RemoteDisplayInfo.Get()
	}
	if o.RemoteDisplayVncEnabled != nil {
		toSerialize["RemoteDisplayVncEnabled"] = o.RemoteDisplayVncEnabled
	}
	if o.ResourcePool != nil {
		toSerialize["ResourcePool"] = o.ResourcePool
	}
	if o.ResourcePoolOwner != nil {
		toSerialize["ResourcePoolOwner"] = o.ResourcePoolOwner
	}
	if o.ResourcePoolParent != nil {
		toSerialize["ResourcePoolParent"] = o.ResourcePoolParent
	}
	if o.ToolRunningStatus != nil {
		toSerialize["ToolRunningStatus"] = o.ToolRunningStatus
	}
	if o.ToolsVersion != nil {
		toSerialize["ToolsVersion"] = o.ToolsVersion
	}
	if o.VirtualDisks != nil {
		toSerialize["VirtualDisks"] = o.VirtualDisks
	}
	if o.VirtualNetworkInterfaces != nil {
		toSerialize["VirtualNetworkInterfaces"] = o.VirtualNetworkInterfaces
	}
	if o.VmDiskCount != nil {
		toSerialize["VmDiskCount"] = o.VmDiskCount
	}
	if o.VmOverallStatus != nil {
		toSerialize["VmOverallStatus"] = o.VmOverallStatus
	}
	if o.VmPath != nil {
		toSerialize["VmPath"] = o.VmPath
	}
	if o.VmVersion != nil {
		toSerialize["VmVersion"] = o.VmVersion
	}
	if o.VmVnicCount != nil {
		toSerialize["VmVnicCount"] = o.VmVnicCount
	}
	if o.VnicDeviceConfigId != nil {
		toSerialize["VnicDeviceConfigId"] = o.VnicDeviceConfigId
	}
	if o.Cluster != nil {
		toSerialize["Cluster"] = o.Cluster
	}
	if o.Datacenter != nil {
		toSerialize["Datacenter"] = o.Datacenter
	}
	if o.Datastores != nil {
		toSerialize["Datastores"] = o.Datastores
	}
	if o.Host != nil {
		toSerialize["Host"] = o.Host
	}
	if o.Networks != nil {
		toSerialize["Networks"] = o.Networks
	}
	if o.ParentFolder != nil {
		toSerialize["ParentFolder"] = o.ParentFolder
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *VirtualizationVmwareVirtualMachine) UnmarshalJSON(bytes []byte) (err error) {
	type VirtualizationVmwareVirtualMachineWithoutEmbeddedStruct struct {
		// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.
		ClassId string `json:"ClassId"`
		// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
		ObjectType string `json:"ObjectType"`
		// List of annotations provided to this VM by user. Can be long.
		Annotation *string `json:"Annotation,omitempty"`
		// The configuration name for this VM. This maybe the same as the guest hostname.
		ConfigName *string `json:"ConfigName,omitempty"`
		// Shows if virtual machine is connected to vCenter. Values are Connected, Disconnected, Orphaned, Inaccessible, and Invalid.
		ConnectionState *string `json:"ConnectionState,omitempty"`
		// Indicates if the capability to add CPUs to a running VM is enabled.
		CpuHotAddEnabled *bool                                       `json:"CpuHotAddEnabled,omitempty"`
		CpuShares        NullableVirtualizationVmwareVmCpuShareInfo  `json:"CpuShares,omitempty"`
		CpuSocketInfo    NullableVirtualizationVmwareVmCpuSocketInfo `json:"CpuSocketInfo,omitempty"`
		CustomAttributes []string                                    `json:"CustomAttributes,omitempty"`
		// Indicates how the VM will be powered off (soft, hard etc.).
		DefaultPowerOffType *string `json:"DefaultPowerOffType,omitempty"`
		// Shows if DHCP is used for IP/DNS on this VM.
		DhcpEnabled    *bool                                        `json:"DhcpEnabled,omitempty"`
		DiskCommitInfo NullableVirtualizationVmwareVmDiskCommitInfo `json:"DiskCommitInfo,omitempty"`
		DnsServerList  []string                                     `json:"DnsServerList,omitempty"`
		DnsSuffixList  []string                                     `json:"DnsSuffixList,omitempty"`
		// Additional custom configuration settings applied to this VM. It is a set of name-value pairs stored as json.
		ExtraConfig interface{} `json:"ExtraConfig,omitempty"`
		// The folder name associated with this VM.
		Folder *string `json:"Folder,omitempty"`
		// The state of the guest OS running on this VM. Could be running, not running etc. * `Unknown` - Indicates that the guest OS state cannot be determined. * `NotRunning` - Indicates that the guest OS is not running. * `Resetting` - Indicates that the guest OS is resetting. * `Running` - Indicates that the guest OS is running normally. * `ShuttingDown` - Indicates that the guest OS is shutting down. * `Standby` - Indicates that the guest OS is in standby mode.
		GuestState *string `json:"GuestState,omitempty"`
		// UUID assigned by vCenter to every VM.
		InstanceUuid *string `json:"InstanceUuid,omitempty"`
		// Inventory path to the VM. Example - /DC/vm/folder/VMName.
		InventoryPath *string `json:"InventoryPath,omitempty"`
		// If true, indicates that the entity refers to a template of a virtual machine and not a real virtual machine.
		IsTemplate *bool                                         `json:"IsTemplate,omitempty"`
		MacAddress []string                                      `json:"MacAddress,omitempty"`
		MemShares  NullableVirtualizationVmwareVmMemoryShareInfo `json:"MemShares,omitempty"`
		// Adding memory to a running VM.
		MemoryHotAddEnabled *bool `json:"MemoryHotAddEnabled,omitempty"`
		// Indicates how many networks are used by this VM.
		NetworkCount *int64   `json:"NetworkCount,omitempty"`
		PortGroups   []string `json:"PortGroups,omitempty"`
		// Shows if this is a protected VM. VMs can be in protection groups.
		ProtectedVm       *bool                                         `json:"ProtectedVm,omitempty"`
		RemoteDisplayInfo NullableVirtualizationVmwareRemoteDisplayInfo `json:"RemoteDisplayInfo,omitempty"`
		// Shows if support for a remote VNC access is enabled.
		RemoteDisplayVncEnabled *bool `json:"RemoteDisplayVncEnabled,omitempty"`
		// Name of the resource pool to which this VM belongs (optional).
		ResourcePool *string `json:"ResourcePool,omitempty"`
		// Who owns the resource pool.
		ResourcePoolOwner *string `json:"ResourcePoolOwner,omitempty"`
		// The parent of the current resource pool to which this VM belongs.
		ResourcePoolParent *string `json:"ResourcePoolParent,omitempty"`
		// Indicates if guest tools are running on this VM. Could be set to guestToolNotRunning or guestToolsRunning.
		ToolRunningStatus *string `json:"ToolRunningStatus,omitempty"`
		// The version of the guest tools, usually not specified.
		ToolsVersion             *string `json:"ToolsVersion,omitempty"`
		VirtualDisks             []int64 `json:"VirtualDisks,omitempty"`
		VirtualNetworkInterfaces []int64 `json:"VirtualNetworkInterfaces,omitempty"`
		// Shows the number of disks assigned to this VM.
		VmDiskCount *int64 `json:"VmDiskCount,omitempty"`
		// The operational state of the VM. Could be Available, Provisioned, Maintenance mode, Deleting, etc.
		VmOverallStatus *string `json:"VmOverallStatus,omitempty"`
		// Path to the vmx file of the VM. Example - [datastore3] VCSA-134/VCSA-134.vmx.
		VmPath *string `json:"VmPath,omitempty"`
		// Information about the version of this VM (vmx-09, vmx-11 etc.).
		VmVersion *string `json:"VmVersion,omitempty"`
		// How many vnics are present.
		VmVnicCount *int64 `json:"VmVnicCount,omitempty"`
		// Information related to the guest info's VNIC virtual device. It is a comma-separated list.
		VnicDeviceConfigId *string                                     `json:"VnicDeviceConfigId,omitempty"`
		Cluster            *VirtualizationVmwareClusterRelationship    `json:"Cluster,omitempty"`
		Datacenter         *VirtualizationVmwareDatacenterRelationship `json:"Datacenter,omitempty"`
		// An array of relationships to virtualizationVmwareDatastore resources.
		Datastores []VirtualizationVmwareDatastoreRelationship `json:"Datastores,omitempty"`
		Host       *VirtualizationVmwareHostRelationship       `json:"Host,omitempty"`
		// An array of relationships to virtualizationBaseNetwork resources.
		Networks     []VirtualizationBaseNetworkRelationship `json:"Networks,omitempty"`
		ParentFolder *VirtualizationVmwareFolderRelationship `json:"ParentFolder,omitempty"`
	}

	varVirtualizationVmwareVirtualMachineWithoutEmbeddedStruct := VirtualizationVmwareVirtualMachineWithoutEmbeddedStruct{}

	err = json.Unmarshal(bytes, &varVirtualizationVmwareVirtualMachineWithoutEmbeddedStruct)
	if err == nil {
		varVirtualizationVmwareVirtualMachine := _VirtualizationVmwareVirtualMachine{}
		varVirtualizationVmwareVirtualMachine.ClassId = varVirtualizationVmwareVirtualMachineWithoutEmbeddedStruct.ClassId
		varVirtualizationVmwareVirtualMachine.ObjectType = varVirtualizationVmwareVirtualMachineWithoutEmbeddedStruct.ObjectType
		varVirtualizationVmwareVirtualMachine.Annotation = varVirtualizationVmwareVirtualMachineWithoutEmbeddedStruct.Annotation
		varVirtualizationVmwareVirtualMachine.ConfigName = varVirtualizationVmwareVirtualMachineWithoutEmbeddedStruct.ConfigName
		varVirtualizationVmwareVirtualMachine.ConnectionState = varVirtualizationVmwareVirtualMachineWithoutEmbeddedStruct.ConnectionState
		varVirtualizationVmwareVirtualMachine.CpuHotAddEnabled = varVirtualizationVmwareVirtualMachineWithoutEmbeddedStruct.CpuHotAddEnabled
		varVirtualizationVmwareVirtualMachine.CpuShares = varVirtualizationVmwareVirtualMachineWithoutEmbeddedStruct.CpuShares
		varVirtualizationVmwareVirtualMachine.CpuSocketInfo = varVirtualizationVmwareVirtualMachineWithoutEmbeddedStruct.CpuSocketInfo
		varVirtualizationVmwareVirtualMachine.CustomAttributes = varVirtualizationVmwareVirtualMachineWithoutEmbeddedStruct.CustomAttributes
		varVirtualizationVmwareVirtualMachine.DefaultPowerOffType = varVirtualizationVmwareVirtualMachineWithoutEmbeddedStruct.DefaultPowerOffType
		varVirtualizationVmwareVirtualMachine.DhcpEnabled = varVirtualizationVmwareVirtualMachineWithoutEmbeddedStruct.DhcpEnabled
		varVirtualizationVmwareVirtualMachine.DiskCommitInfo = varVirtualizationVmwareVirtualMachineWithoutEmbeddedStruct.DiskCommitInfo
		varVirtualizationVmwareVirtualMachine.DnsServerList = varVirtualizationVmwareVirtualMachineWithoutEmbeddedStruct.DnsServerList
		varVirtualizationVmwareVirtualMachine.DnsSuffixList = varVirtualizationVmwareVirtualMachineWithoutEmbeddedStruct.DnsSuffixList
		varVirtualizationVmwareVirtualMachine.ExtraConfig = varVirtualizationVmwareVirtualMachineWithoutEmbeddedStruct.ExtraConfig
		varVirtualizationVmwareVirtualMachine.Folder = varVirtualizationVmwareVirtualMachineWithoutEmbeddedStruct.Folder
		varVirtualizationVmwareVirtualMachine.GuestState = varVirtualizationVmwareVirtualMachineWithoutEmbeddedStruct.GuestState
		varVirtualizationVmwareVirtualMachine.InstanceUuid = varVirtualizationVmwareVirtualMachineWithoutEmbeddedStruct.InstanceUuid
		varVirtualizationVmwareVirtualMachine.InventoryPath = varVirtualizationVmwareVirtualMachineWithoutEmbeddedStruct.InventoryPath
		varVirtualizationVmwareVirtualMachine.IsTemplate = varVirtualizationVmwareVirtualMachineWithoutEmbeddedStruct.IsTemplate
		varVirtualizationVmwareVirtualMachine.MacAddress = varVirtualizationVmwareVirtualMachineWithoutEmbeddedStruct.MacAddress
		varVirtualizationVmwareVirtualMachine.MemShares = varVirtualizationVmwareVirtualMachineWithoutEmbeddedStruct.MemShares
		varVirtualizationVmwareVirtualMachine.MemoryHotAddEnabled = varVirtualizationVmwareVirtualMachineWithoutEmbeddedStruct.MemoryHotAddEnabled
		varVirtualizationVmwareVirtualMachine.NetworkCount = varVirtualizationVmwareVirtualMachineWithoutEmbeddedStruct.NetworkCount
		varVirtualizationVmwareVirtualMachine.PortGroups = varVirtualizationVmwareVirtualMachineWithoutEmbeddedStruct.PortGroups
		varVirtualizationVmwareVirtualMachine.ProtectedVm = varVirtualizationVmwareVirtualMachineWithoutEmbeddedStruct.ProtectedVm
		varVirtualizationVmwareVirtualMachine.RemoteDisplayInfo = varVirtualizationVmwareVirtualMachineWithoutEmbeddedStruct.RemoteDisplayInfo
		varVirtualizationVmwareVirtualMachine.RemoteDisplayVncEnabled = varVirtualizationVmwareVirtualMachineWithoutEmbeddedStruct.RemoteDisplayVncEnabled
		varVirtualizationVmwareVirtualMachine.ResourcePool = varVirtualizationVmwareVirtualMachineWithoutEmbeddedStruct.ResourcePool
		varVirtualizationVmwareVirtualMachine.ResourcePoolOwner = varVirtualizationVmwareVirtualMachineWithoutEmbeddedStruct.ResourcePoolOwner
		varVirtualizationVmwareVirtualMachine.ResourcePoolParent = varVirtualizationVmwareVirtualMachineWithoutEmbeddedStruct.ResourcePoolParent
		varVirtualizationVmwareVirtualMachine.ToolRunningStatus = varVirtualizationVmwareVirtualMachineWithoutEmbeddedStruct.ToolRunningStatus
		varVirtualizationVmwareVirtualMachine.ToolsVersion = varVirtualizationVmwareVirtualMachineWithoutEmbeddedStruct.ToolsVersion
		varVirtualizationVmwareVirtualMachine.VirtualDisks = varVirtualizationVmwareVirtualMachineWithoutEmbeddedStruct.VirtualDisks
		varVirtualizationVmwareVirtualMachine.VirtualNetworkInterfaces = varVirtualizationVmwareVirtualMachineWithoutEmbeddedStruct.VirtualNetworkInterfaces
		varVirtualizationVmwareVirtualMachine.VmDiskCount = varVirtualizationVmwareVirtualMachineWithoutEmbeddedStruct.VmDiskCount
		varVirtualizationVmwareVirtualMachine.VmOverallStatus = varVirtualizationVmwareVirtualMachineWithoutEmbeddedStruct.VmOverallStatus
		varVirtualizationVmwareVirtualMachine.VmPath = varVirtualizationVmwareVirtualMachineWithoutEmbeddedStruct.VmPath
		varVirtualizationVmwareVirtualMachine.VmVersion = varVirtualizationVmwareVirtualMachineWithoutEmbeddedStruct.VmVersion
		varVirtualizationVmwareVirtualMachine.VmVnicCount = varVirtualizationVmwareVirtualMachineWithoutEmbeddedStruct.VmVnicCount
		varVirtualizationVmwareVirtualMachine.VnicDeviceConfigId = varVirtualizationVmwareVirtualMachineWithoutEmbeddedStruct.VnicDeviceConfigId
		varVirtualizationVmwareVirtualMachine.Cluster = varVirtualizationVmwareVirtualMachineWithoutEmbeddedStruct.Cluster
		varVirtualizationVmwareVirtualMachine.Datacenter = varVirtualizationVmwareVirtualMachineWithoutEmbeddedStruct.Datacenter
		varVirtualizationVmwareVirtualMachine.Datastores = varVirtualizationVmwareVirtualMachineWithoutEmbeddedStruct.Datastores
		varVirtualizationVmwareVirtualMachine.Host = varVirtualizationVmwareVirtualMachineWithoutEmbeddedStruct.Host
		varVirtualizationVmwareVirtualMachine.Networks = varVirtualizationVmwareVirtualMachineWithoutEmbeddedStruct.Networks
		varVirtualizationVmwareVirtualMachine.ParentFolder = varVirtualizationVmwareVirtualMachineWithoutEmbeddedStruct.ParentFolder
		*o = VirtualizationVmwareVirtualMachine(varVirtualizationVmwareVirtualMachine)
	} else {
		return err
	}

	varVirtualizationVmwareVirtualMachine := _VirtualizationVmwareVirtualMachine{}

	err = json.Unmarshal(bytes, &varVirtualizationVmwareVirtualMachine)
	if err == nil {
		o.VirtualizationBaseVirtualMachine = varVirtualizationVmwareVirtualMachine.VirtualizationBaseVirtualMachine
	} else {
		return err
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "ClassId")
		delete(additionalProperties, "ObjectType")
		delete(additionalProperties, "Annotation")
		delete(additionalProperties, "ConfigName")
		delete(additionalProperties, "ConnectionState")
		delete(additionalProperties, "CpuHotAddEnabled")
		delete(additionalProperties, "CpuShares")
		delete(additionalProperties, "CpuSocketInfo")
		delete(additionalProperties, "CustomAttributes")
		delete(additionalProperties, "DefaultPowerOffType")
		delete(additionalProperties, "DhcpEnabled")
		delete(additionalProperties, "DiskCommitInfo")
		delete(additionalProperties, "DnsServerList")
		delete(additionalProperties, "DnsSuffixList")
		delete(additionalProperties, "ExtraConfig")
		delete(additionalProperties, "Folder")
		delete(additionalProperties, "GuestState")
		delete(additionalProperties, "InstanceUuid")
		delete(additionalProperties, "InventoryPath")
		delete(additionalProperties, "IsTemplate")
		delete(additionalProperties, "MacAddress")
		delete(additionalProperties, "MemShares")
		delete(additionalProperties, "MemoryHotAddEnabled")
		delete(additionalProperties, "NetworkCount")
		delete(additionalProperties, "PortGroups")
		delete(additionalProperties, "ProtectedVm")
		delete(additionalProperties, "RemoteDisplayInfo")
		delete(additionalProperties, "RemoteDisplayVncEnabled")
		delete(additionalProperties, "ResourcePool")
		delete(additionalProperties, "ResourcePoolOwner")
		delete(additionalProperties, "ResourcePoolParent")
		delete(additionalProperties, "ToolRunningStatus")
		delete(additionalProperties, "ToolsVersion")
		delete(additionalProperties, "VirtualDisks")
		delete(additionalProperties, "VirtualNetworkInterfaces")
		delete(additionalProperties, "VmDiskCount")
		delete(additionalProperties, "VmOverallStatus")
		delete(additionalProperties, "VmPath")
		delete(additionalProperties, "VmVersion")
		delete(additionalProperties, "VmVnicCount")
		delete(additionalProperties, "VnicDeviceConfigId")
		delete(additionalProperties, "Cluster")
		delete(additionalProperties, "Datacenter")
		delete(additionalProperties, "Datastores")
		delete(additionalProperties, "Host")
		delete(additionalProperties, "Networks")
		delete(additionalProperties, "ParentFolder")

		// remove fields from embedded structs
		reflectVirtualizationBaseVirtualMachine := reflect.ValueOf(o.VirtualizationBaseVirtualMachine)
		for i := 0; i < reflectVirtualizationBaseVirtualMachine.Type().NumField(); i++ {
			t := reflectVirtualizationBaseVirtualMachine.Type().Field(i)

			if jsonTag := t.Tag.Get("json"); jsonTag != "" {
				fieldName := ""
				if commaIdx := strings.Index(jsonTag, ","); commaIdx > 0 {
					fieldName = jsonTag[:commaIdx]
				} else {
					fieldName = jsonTag
				}
				if fieldName != "AdditionalProperties" {
					delete(additionalProperties, fieldName)
				}
			}
		}

		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableVirtualizationVmwareVirtualMachine struct {
	value *VirtualizationVmwareVirtualMachine
	isSet bool
}

func (v NullableVirtualizationVmwareVirtualMachine) Get() *VirtualizationVmwareVirtualMachine {
	return v.value
}

func (v *NullableVirtualizationVmwareVirtualMachine) Set(val *VirtualizationVmwareVirtualMachine) {
	v.value = val
	v.isSet = true
}

func (v NullableVirtualizationVmwareVirtualMachine) IsSet() bool {
	return v.isSet
}

func (v *NullableVirtualizationVmwareVirtualMachine) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVirtualizationVmwareVirtualMachine(val *VirtualizationVmwareVirtualMachine) *NullableVirtualizationVmwareVirtualMachine {
	return &NullableVirtualizationVmwareVirtualMachine{value: val, isSet: true}
}

func (v NullableVirtualizationVmwareVirtualMachine) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVirtualizationVmwareVirtualMachine) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
