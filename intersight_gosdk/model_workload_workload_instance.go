/*
Cisco Intersight

Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations. The Intersight OpenAPI document defines the complete set of properties that are returned in the HTTP response. From that perspective, a client can expect that no additional properties are returned, unless these properties are explicitly defined in the OpenAPI document. However, when a client uses an older version of the Intersight OpenAPI document, the server may send additional properties because the software is more recent than the client. In that case, the client may receive properties that it does not know about. Some generated SDKs perform a strict validation of the HTTP response body against the OpenAPI document.

API version: 1.0.11-2025091920
Contact: intersight@cisco.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package intersight

import (
	"encoding/json"
	"fmt"
	"reflect"
	"strings"
)

// checks if the WorkloadWorkloadInstance type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &WorkloadWorkloadInstance{}

// WorkloadWorkloadInstance A workload instance that can be deployed, modified, or managed.
type WorkloadWorkloadInstance struct {
	MoBaseMo
	// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.
	ClassId string `json:"ClassId"`
	// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
	ObjectType string `json:"ObjectType"`
	// The action to be performed on the workload instance. * `None` - Absence of any action on the workload instance. * `Suspend` - Pauses the execution of the workload instance, temporarily stopping its operations without permanently removing it. * `Resume` - Restarts a suspended workload instance, allowing it to continue operations from where it left off. * `Deploy` - Initiates the deployment of the workload instance, provisioning the necessary resources and starting its execution. * `Retry` - Attempts to re-deploy the workload instance, either due to a previous failure or to apply changes made to the instance. * `RetryAll` - Attempts to re-deploy all workload instances associated with the same deployment, either due to a previous failure or to apply changes made to the instances. * `Attach` - Associates the workload instance with its assigned resources, allowing it to utilize the resources for its operations. * `Detach` - Disassociates the workload instance from its assigned resources, preventing it from using the resources for its operations. * `UnAssign` - Detaches assigned resources from the workload instance while keeping the instance active.
	Action            *string                    `json:"Action,omitempty"`
	AssignedResources []WorkloadAssignedResource `json:"AssignedResources,omitempty"`
	ChangeTypes       []string                   `json:"ChangeTypes,omitempty"`
	// The conformance status of the deployment. * `Ok` - The deployment conforms to the preferred version of the workload. * `NonConformant` - The deployment does not conform to the preferred version of the workload.
	Conformance *string `json:"Conformance,omitempty"`
	// The last action performed on the workload instance. * `None` - Absence of any action on the workload instance. * `Suspend` - Pauses the execution of the workload instance, temporarily stopping its operations without permanently removing it. * `Resume` - Restarts a suspended workload instance, allowing it to continue operations from where it left off. * `Deploy` - Initiates the deployment of the workload instance, provisioning the necessary resources and starting its execution. * `Retry` - Attempts to re-deploy the workload instance, either due to a previous failure or to apply changes made to the instance. * `RetryAll` - Attempts to re-deploy all workload instances associated with the same deployment, either due to a previous failure or to apply changes made to the instances. * `Attach` - Associates the workload instance with its assigned resources, allowing it to utilize the resources for its operations. * `Detach` - Disassociates the workload instance from its assigned resources, preventing it from using the resources for its operations. * `UnAssign` - Detaches assigned resources from the workload instance while keeping the instance active.
	LastAction      *string                        `json:"LastAction,omitempty"`
	LocationDetails NullableCommGeoLocationDetails `json:"LocationDetails,omitempty"`
	// The name for this Workload instance.
	Name *string `json:"Name,omitempty" validate:"regexp=^[a-zA-Z0-9_.:-]{1,64}$"`
	// The current status of the workload instance. * `Staging` - The instance is in the staging phase, awaiting further actions. * `ReadyToDeploy` - The instance is fully configured and ready for deployment. * `InProgress` - Deployment or modification of the instance is currently in progress. * `Ok` - The instance is running successfully without issues. * `Failed` - The instance has encountered an error or failure preventing normal operation. * `Suspended` - The instance has been temporarily paused and is inactive. * `ChangesScheduled` - There is a change in the configuration that needs to be pushed to the instance. * `InSufficientResource` - The instance lacks the necessary resources to operate. * `OutOfService` - The instance is no longer available or operational. * `UnAssigning` - The instance is being unassigned or removed from service.
	Status *string `json:"Status,omitempty"`
	// The context or justification for the status transition. * `None` - No changes have been made. * `ResourceDisqualified` - The change in resource status triggered due to the resource being disqualified.
	StatusChangeReason  *string                                      `json:"StatusChangeReason,omitempty"`
	ChassisPoolMember   NullableMoBaseMoRelationship                 `json:"ChassisPoolMember,omitempty"`
	DeploymentInput     NullableWorkloadDeploymentInputRelationship  `json:"DeploymentInput,omitempty"`
	LastDeploymentInput NullableWorkloadDeploymentInputRelationship  `json:"LastDeploymentInput,omitempty"`
	Organization        NullableOrganizationOrganizationRelationship `json:"Organization,omitempty"`
	// An array of relationships to workflowServiceItemInstance resources.
	ServiceItemInstances []WorkflowServiceItemInstanceRelationship      `json:"ServiceItemInstances,omitempty"`
	WorkloadDefinition   NullableWorkloadWorkloadDefinitionRelationship `json:"WorkloadDefinition,omitempty"`
	WorkloadDeployment   NullableWorkloadWorkloadDeploymentRelationship `json:"WorkloadDeployment,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _WorkloadWorkloadInstance WorkloadWorkloadInstance

// NewWorkloadWorkloadInstance instantiates a new WorkloadWorkloadInstance object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWorkloadWorkloadInstance(classId string, objectType string) *WorkloadWorkloadInstance {
	this := WorkloadWorkloadInstance{}
	this.ClassId = classId
	this.ObjectType = objectType
	var action string = "None"
	this.Action = &action
	return &this
}

// NewWorkloadWorkloadInstanceWithDefaults instantiates a new WorkloadWorkloadInstance object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWorkloadWorkloadInstanceWithDefaults() *WorkloadWorkloadInstance {
	this := WorkloadWorkloadInstance{}
	var classId string = "workload.WorkloadInstance"
	this.ClassId = classId
	var objectType string = "workload.WorkloadInstance"
	this.ObjectType = objectType
	var action string = "None"
	this.Action = &action
	return &this
}

// GetClassId returns the ClassId field value
func (o *WorkloadWorkloadInstance) GetClassId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ClassId
}

// GetClassIdOk returns a tuple with the ClassId field value
// and a boolean to check if the value has been set.
func (o *WorkloadWorkloadInstance) GetClassIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ClassId, true
}

// SetClassId sets field value
func (o *WorkloadWorkloadInstance) SetClassId(v string) {
	o.ClassId = v
}

// GetDefaultClassId returns the default value "workload.WorkloadInstance" of the ClassId field.
func (o *WorkloadWorkloadInstance) GetDefaultClassId() interface{} {
	return "workload.WorkloadInstance"
}

// GetObjectType returns the ObjectType field value
func (o *WorkloadWorkloadInstance) GetObjectType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ObjectType
}

// GetObjectTypeOk returns a tuple with the ObjectType field value
// and a boolean to check if the value has been set.
func (o *WorkloadWorkloadInstance) GetObjectTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ObjectType, true
}

// SetObjectType sets field value
func (o *WorkloadWorkloadInstance) SetObjectType(v string) {
	o.ObjectType = v
}

// GetDefaultObjectType returns the default value "workload.WorkloadInstance" of the ObjectType field.
func (o *WorkloadWorkloadInstance) GetDefaultObjectType() interface{} {
	return "workload.WorkloadInstance"
}

// GetAction returns the Action field value if set, zero value otherwise.
func (o *WorkloadWorkloadInstance) GetAction() string {
	if o == nil || IsNil(o.Action) {
		var ret string
		return ret
	}
	return *o.Action
}

// GetActionOk returns a tuple with the Action field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkloadWorkloadInstance) GetActionOk() (*string, bool) {
	if o == nil || IsNil(o.Action) {
		return nil, false
	}
	return o.Action, true
}

// HasAction returns a boolean if a field has been set.
func (o *WorkloadWorkloadInstance) HasAction() bool {
	if o != nil && !IsNil(o.Action) {
		return true
	}

	return false
}

// SetAction gets a reference to the given string and assigns it to the Action field.
func (o *WorkloadWorkloadInstance) SetAction(v string) {
	o.Action = &v
}

// GetAssignedResources returns the AssignedResources field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *WorkloadWorkloadInstance) GetAssignedResources() []WorkloadAssignedResource {
	if o == nil {
		var ret []WorkloadAssignedResource
		return ret
	}
	return o.AssignedResources
}

// GetAssignedResourcesOk returns a tuple with the AssignedResources field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *WorkloadWorkloadInstance) GetAssignedResourcesOk() ([]WorkloadAssignedResource, bool) {
	if o == nil || IsNil(o.AssignedResources) {
		return nil, false
	}
	return o.AssignedResources, true
}

// HasAssignedResources returns a boolean if a field has been set.
func (o *WorkloadWorkloadInstance) HasAssignedResources() bool {
	if o != nil && !IsNil(o.AssignedResources) {
		return true
	}

	return false
}

// SetAssignedResources gets a reference to the given []WorkloadAssignedResource and assigns it to the AssignedResources field.
func (o *WorkloadWorkloadInstance) SetAssignedResources(v []WorkloadAssignedResource) {
	o.AssignedResources = v
}

// GetChangeTypes returns the ChangeTypes field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *WorkloadWorkloadInstance) GetChangeTypes() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.ChangeTypes
}

// GetChangeTypesOk returns a tuple with the ChangeTypes field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *WorkloadWorkloadInstance) GetChangeTypesOk() ([]string, bool) {
	if o == nil || IsNil(o.ChangeTypes) {
		return nil, false
	}
	return o.ChangeTypes, true
}

// HasChangeTypes returns a boolean if a field has been set.
func (o *WorkloadWorkloadInstance) HasChangeTypes() bool {
	if o != nil && !IsNil(o.ChangeTypes) {
		return true
	}

	return false
}

// SetChangeTypes gets a reference to the given []string and assigns it to the ChangeTypes field.
func (o *WorkloadWorkloadInstance) SetChangeTypes(v []string) {
	o.ChangeTypes = v
}

// GetConformance returns the Conformance field value if set, zero value otherwise.
func (o *WorkloadWorkloadInstance) GetConformance() string {
	if o == nil || IsNil(o.Conformance) {
		var ret string
		return ret
	}
	return *o.Conformance
}

// GetConformanceOk returns a tuple with the Conformance field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkloadWorkloadInstance) GetConformanceOk() (*string, bool) {
	if o == nil || IsNil(o.Conformance) {
		return nil, false
	}
	return o.Conformance, true
}

// HasConformance returns a boolean if a field has been set.
func (o *WorkloadWorkloadInstance) HasConformance() bool {
	if o != nil && !IsNil(o.Conformance) {
		return true
	}

	return false
}

// SetConformance gets a reference to the given string and assigns it to the Conformance field.
func (o *WorkloadWorkloadInstance) SetConformance(v string) {
	o.Conformance = &v
}

// GetLastAction returns the LastAction field value if set, zero value otherwise.
func (o *WorkloadWorkloadInstance) GetLastAction() string {
	if o == nil || IsNil(o.LastAction) {
		var ret string
		return ret
	}
	return *o.LastAction
}

// GetLastActionOk returns a tuple with the LastAction field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkloadWorkloadInstance) GetLastActionOk() (*string, bool) {
	if o == nil || IsNil(o.LastAction) {
		return nil, false
	}
	return o.LastAction, true
}

// HasLastAction returns a boolean if a field has been set.
func (o *WorkloadWorkloadInstance) HasLastAction() bool {
	if o != nil && !IsNil(o.LastAction) {
		return true
	}

	return false
}

// SetLastAction gets a reference to the given string and assigns it to the LastAction field.
func (o *WorkloadWorkloadInstance) SetLastAction(v string) {
	o.LastAction = &v
}

// GetLocationDetails returns the LocationDetails field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *WorkloadWorkloadInstance) GetLocationDetails() CommGeoLocationDetails {
	if o == nil || IsNil(o.LocationDetails.Get()) {
		var ret CommGeoLocationDetails
		return ret
	}
	return *o.LocationDetails.Get()
}

// GetLocationDetailsOk returns a tuple with the LocationDetails field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *WorkloadWorkloadInstance) GetLocationDetailsOk() (*CommGeoLocationDetails, bool) {
	if o == nil {
		return nil, false
	}
	return o.LocationDetails.Get(), o.LocationDetails.IsSet()
}

// HasLocationDetails returns a boolean if a field has been set.
func (o *WorkloadWorkloadInstance) HasLocationDetails() bool {
	if o != nil && o.LocationDetails.IsSet() {
		return true
	}

	return false
}

// SetLocationDetails gets a reference to the given NullableCommGeoLocationDetails and assigns it to the LocationDetails field.
func (o *WorkloadWorkloadInstance) SetLocationDetails(v CommGeoLocationDetails) {
	o.LocationDetails.Set(&v)
}

// SetLocationDetailsNil sets the value for LocationDetails to be an explicit nil
func (o *WorkloadWorkloadInstance) SetLocationDetailsNil() {
	o.LocationDetails.Set(nil)
}

// UnsetLocationDetails ensures that no value is present for LocationDetails, not even an explicit nil
func (o *WorkloadWorkloadInstance) UnsetLocationDetails() {
	o.LocationDetails.Unset()
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *WorkloadWorkloadInstance) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkloadWorkloadInstance) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *WorkloadWorkloadInstance) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *WorkloadWorkloadInstance) SetName(v string) {
	o.Name = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *WorkloadWorkloadInstance) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkloadWorkloadInstance) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *WorkloadWorkloadInstance) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *WorkloadWorkloadInstance) SetStatus(v string) {
	o.Status = &v
}

// GetStatusChangeReason returns the StatusChangeReason field value if set, zero value otherwise.
func (o *WorkloadWorkloadInstance) GetStatusChangeReason() string {
	if o == nil || IsNil(o.StatusChangeReason) {
		var ret string
		return ret
	}
	return *o.StatusChangeReason
}

// GetStatusChangeReasonOk returns a tuple with the StatusChangeReason field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkloadWorkloadInstance) GetStatusChangeReasonOk() (*string, bool) {
	if o == nil || IsNil(o.StatusChangeReason) {
		return nil, false
	}
	return o.StatusChangeReason, true
}

// HasStatusChangeReason returns a boolean if a field has been set.
func (o *WorkloadWorkloadInstance) HasStatusChangeReason() bool {
	if o != nil && !IsNil(o.StatusChangeReason) {
		return true
	}

	return false
}

// SetStatusChangeReason gets a reference to the given string and assigns it to the StatusChangeReason field.
func (o *WorkloadWorkloadInstance) SetStatusChangeReason(v string) {
	o.StatusChangeReason = &v
}

// GetChassisPoolMember returns the ChassisPoolMember field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *WorkloadWorkloadInstance) GetChassisPoolMember() MoBaseMoRelationship {
	if o == nil || IsNil(o.ChassisPoolMember.Get()) {
		var ret MoBaseMoRelationship
		return ret
	}
	return *o.ChassisPoolMember.Get()
}

// GetChassisPoolMemberOk returns a tuple with the ChassisPoolMember field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *WorkloadWorkloadInstance) GetChassisPoolMemberOk() (*MoBaseMoRelationship, bool) {
	if o == nil {
		return nil, false
	}
	return o.ChassisPoolMember.Get(), o.ChassisPoolMember.IsSet()
}

// HasChassisPoolMember returns a boolean if a field has been set.
func (o *WorkloadWorkloadInstance) HasChassisPoolMember() bool {
	if o != nil && o.ChassisPoolMember.IsSet() {
		return true
	}

	return false
}

// SetChassisPoolMember gets a reference to the given NullableMoBaseMoRelationship and assigns it to the ChassisPoolMember field.
func (o *WorkloadWorkloadInstance) SetChassisPoolMember(v MoBaseMoRelationship) {
	o.ChassisPoolMember.Set(&v)
}

// SetChassisPoolMemberNil sets the value for ChassisPoolMember to be an explicit nil
func (o *WorkloadWorkloadInstance) SetChassisPoolMemberNil() {
	o.ChassisPoolMember.Set(nil)
}

// UnsetChassisPoolMember ensures that no value is present for ChassisPoolMember, not even an explicit nil
func (o *WorkloadWorkloadInstance) UnsetChassisPoolMember() {
	o.ChassisPoolMember.Unset()
}

// GetDeploymentInput returns the DeploymentInput field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *WorkloadWorkloadInstance) GetDeploymentInput() WorkloadDeploymentInputRelationship {
	if o == nil || IsNil(o.DeploymentInput.Get()) {
		var ret WorkloadDeploymentInputRelationship
		return ret
	}
	return *o.DeploymentInput.Get()
}

// GetDeploymentInputOk returns a tuple with the DeploymentInput field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *WorkloadWorkloadInstance) GetDeploymentInputOk() (*WorkloadDeploymentInputRelationship, bool) {
	if o == nil {
		return nil, false
	}
	return o.DeploymentInput.Get(), o.DeploymentInput.IsSet()
}

// HasDeploymentInput returns a boolean if a field has been set.
func (o *WorkloadWorkloadInstance) HasDeploymentInput() bool {
	if o != nil && o.DeploymentInput.IsSet() {
		return true
	}

	return false
}

// SetDeploymentInput gets a reference to the given NullableWorkloadDeploymentInputRelationship and assigns it to the DeploymentInput field.
func (o *WorkloadWorkloadInstance) SetDeploymentInput(v WorkloadDeploymentInputRelationship) {
	o.DeploymentInput.Set(&v)
}

// SetDeploymentInputNil sets the value for DeploymentInput to be an explicit nil
func (o *WorkloadWorkloadInstance) SetDeploymentInputNil() {
	o.DeploymentInput.Set(nil)
}

// UnsetDeploymentInput ensures that no value is present for DeploymentInput, not even an explicit nil
func (o *WorkloadWorkloadInstance) UnsetDeploymentInput() {
	o.DeploymentInput.Unset()
}

// GetLastDeploymentInput returns the LastDeploymentInput field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *WorkloadWorkloadInstance) GetLastDeploymentInput() WorkloadDeploymentInputRelationship {
	if o == nil || IsNil(o.LastDeploymentInput.Get()) {
		var ret WorkloadDeploymentInputRelationship
		return ret
	}
	return *o.LastDeploymentInput.Get()
}

// GetLastDeploymentInputOk returns a tuple with the LastDeploymentInput field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *WorkloadWorkloadInstance) GetLastDeploymentInputOk() (*WorkloadDeploymentInputRelationship, bool) {
	if o == nil {
		return nil, false
	}
	return o.LastDeploymentInput.Get(), o.LastDeploymentInput.IsSet()
}

// HasLastDeploymentInput returns a boolean if a field has been set.
func (o *WorkloadWorkloadInstance) HasLastDeploymentInput() bool {
	if o != nil && o.LastDeploymentInput.IsSet() {
		return true
	}

	return false
}

// SetLastDeploymentInput gets a reference to the given NullableWorkloadDeploymentInputRelationship and assigns it to the LastDeploymentInput field.
func (o *WorkloadWorkloadInstance) SetLastDeploymentInput(v WorkloadDeploymentInputRelationship) {
	o.LastDeploymentInput.Set(&v)
}

// SetLastDeploymentInputNil sets the value for LastDeploymentInput to be an explicit nil
func (o *WorkloadWorkloadInstance) SetLastDeploymentInputNil() {
	o.LastDeploymentInput.Set(nil)
}

// UnsetLastDeploymentInput ensures that no value is present for LastDeploymentInput, not even an explicit nil
func (o *WorkloadWorkloadInstance) UnsetLastDeploymentInput() {
	o.LastDeploymentInput.Unset()
}

// GetOrganization returns the Organization field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *WorkloadWorkloadInstance) GetOrganization() OrganizationOrganizationRelationship {
	if o == nil || IsNil(o.Organization.Get()) {
		var ret OrganizationOrganizationRelationship
		return ret
	}
	return *o.Organization.Get()
}

// GetOrganizationOk returns a tuple with the Organization field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *WorkloadWorkloadInstance) GetOrganizationOk() (*OrganizationOrganizationRelationship, bool) {
	if o == nil {
		return nil, false
	}
	return o.Organization.Get(), o.Organization.IsSet()
}

// HasOrganization returns a boolean if a field has been set.
func (o *WorkloadWorkloadInstance) HasOrganization() bool {
	if o != nil && o.Organization.IsSet() {
		return true
	}

	return false
}

// SetOrganization gets a reference to the given NullableOrganizationOrganizationRelationship and assigns it to the Organization field.
func (o *WorkloadWorkloadInstance) SetOrganization(v OrganizationOrganizationRelationship) {
	o.Organization.Set(&v)
}

// SetOrganizationNil sets the value for Organization to be an explicit nil
func (o *WorkloadWorkloadInstance) SetOrganizationNil() {
	o.Organization.Set(nil)
}

// UnsetOrganization ensures that no value is present for Organization, not even an explicit nil
func (o *WorkloadWorkloadInstance) UnsetOrganization() {
	o.Organization.Unset()
}

// GetServiceItemInstances returns the ServiceItemInstances field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *WorkloadWorkloadInstance) GetServiceItemInstances() []WorkflowServiceItemInstanceRelationship {
	if o == nil {
		var ret []WorkflowServiceItemInstanceRelationship
		return ret
	}
	return o.ServiceItemInstances
}

// GetServiceItemInstancesOk returns a tuple with the ServiceItemInstances field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *WorkloadWorkloadInstance) GetServiceItemInstancesOk() ([]WorkflowServiceItemInstanceRelationship, bool) {
	if o == nil || IsNil(o.ServiceItemInstances) {
		return nil, false
	}
	return o.ServiceItemInstances, true
}

// HasServiceItemInstances returns a boolean if a field has been set.
func (o *WorkloadWorkloadInstance) HasServiceItemInstances() bool {
	if o != nil && !IsNil(o.ServiceItemInstances) {
		return true
	}

	return false
}

// SetServiceItemInstances gets a reference to the given []WorkflowServiceItemInstanceRelationship and assigns it to the ServiceItemInstances field.
func (o *WorkloadWorkloadInstance) SetServiceItemInstances(v []WorkflowServiceItemInstanceRelationship) {
	o.ServiceItemInstances = v
}

// GetWorkloadDefinition returns the WorkloadDefinition field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *WorkloadWorkloadInstance) GetWorkloadDefinition() WorkloadWorkloadDefinitionRelationship {
	if o == nil || IsNil(o.WorkloadDefinition.Get()) {
		var ret WorkloadWorkloadDefinitionRelationship
		return ret
	}
	return *o.WorkloadDefinition.Get()
}

// GetWorkloadDefinitionOk returns a tuple with the WorkloadDefinition field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *WorkloadWorkloadInstance) GetWorkloadDefinitionOk() (*WorkloadWorkloadDefinitionRelationship, bool) {
	if o == nil {
		return nil, false
	}
	return o.WorkloadDefinition.Get(), o.WorkloadDefinition.IsSet()
}

// HasWorkloadDefinition returns a boolean if a field has been set.
func (o *WorkloadWorkloadInstance) HasWorkloadDefinition() bool {
	if o != nil && o.WorkloadDefinition.IsSet() {
		return true
	}

	return false
}

// SetWorkloadDefinition gets a reference to the given NullableWorkloadWorkloadDefinitionRelationship and assigns it to the WorkloadDefinition field.
func (o *WorkloadWorkloadInstance) SetWorkloadDefinition(v WorkloadWorkloadDefinitionRelationship) {
	o.WorkloadDefinition.Set(&v)
}

// SetWorkloadDefinitionNil sets the value for WorkloadDefinition to be an explicit nil
func (o *WorkloadWorkloadInstance) SetWorkloadDefinitionNil() {
	o.WorkloadDefinition.Set(nil)
}

// UnsetWorkloadDefinition ensures that no value is present for WorkloadDefinition, not even an explicit nil
func (o *WorkloadWorkloadInstance) UnsetWorkloadDefinition() {
	o.WorkloadDefinition.Unset()
}

// GetWorkloadDeployment returns the WorkloadDeployment field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *WorkloadWorkloadInstance) GetWorkloadDeployment() WorkloadWorkloadDeploymentRelationship {
	if o == nil || IsNil(o.WorkloadDeployment.Get()) {
		var ret WorkloadWorkloadDeploymentRelationship
		return ret
	}
	return *o.WorkloadDeployment.Get()
}

// GetWorkloadDeploymentOk returns a tuple with the WorkloadDeployment field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *WorkloadWorkloadInstance) GetWorkloadDeploymentOk() (*WorkloadWorkloadDeploymentRelationship, bool) {
	if o == nil {
		return nil, false
	}
	return o.WorkloadDeployment.Get(), o.WorkloadDeployment.IsSet()
}

// HasWorkloadDeployment returns a boolean if a field has been set.
func (o *WorkloadWorkloadInstance) HasWorkloadDeployment() bool {
	if o != nil && o.WorkloadDeployment.IsSet() {
		return true
	}

	return false
}

// SetWorkloadDeployment gets a reference to the given NullableWorkloadWorkloadDeploymentRelationship and assigns it to the WorkloadDeployment field.
func (o *WorkloadWorkloadInstance) SetWorkloadDeployment(v WorkloadWorkloadDeploymentRelationship) {
	o.WorkloadDeployment.Set(&v)
}

// SetWorkloadDeploymentNil sets the value for WorkloadDeployment to be an explicit nil
func (o *WorkloadWorkloadInstance) SetWorkloadDeploymentNil() {
	o.WorkloadDeployment.Set(nil)
}

// UnsetWorkloadDeployment ensures that no value is present for WorkloadDeployment, not even an explicit nil
func (o *WorkloadWorkloadInstance) UnsetWorkloadDeployment() {
	o.WorkloadDeployment.Unset()
}

func (o WorkloadWorkloadInstance) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o WorkloadWorkloadInstance) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	serializedMoBaseMo, errMoBaseMo := json.Marshal(o.MoBaseMo)
	if errMoBaseMo != nil {
		return map[string]interface{}{}, errMoBaseMo
	}
	errMoBaseMo = json.Unmarshal([]byte(serializedMoBaseMo), &toSerialize)
	if errMoBaseMo != nil {
		return map[string]interface{}{}, errMoBaseMo
	}
	if _, exists := toSerialize["ClassId"]; !exists {
		toSerialize["ClassId"] = o.GetDefaultClassId()
	}
	toSerialize["ClassId"] = o.ClassId
	if _, exists := toSerialize["ObjectType"]; !exists {
		toSerialize["ObjectType"] = o.GetDefaultObjectType()
	}
	toSerialize["ObjectType"] = o.ObjectType
	if !IsNil(o.Action) {
		toSerialize["Action"] = o.Action
	}
	if o.AssignedResources != nil {
		toSerialize["AssignedResources"] = o.AssignedResources
	}
	if o.ChangeTypes != nil {
		toSerialize["ChangeTypes"] = o.ChangeTypes
	}
	if !IsNil(o.Conformance) {
		toSerialize["Conformance"] = o.Conformance
	}
	if !IsNil(o.LastAction) {
		toSerialize["LastAction"] = o.LastAction
	}
	if o.LocationDetails.IsSet() {
		toSerialize["LocationDetails"] = o.LocationDetails.Get()
	}
	if !IsNil(o.Name) {
		toSerialize["Name"] = o.Name
	}
	if !IsNil(o.Status) {
		toSerialize["Status"] = o.Status
	}
	if !IsNil(o.StatusChangeReason) {
		toSerialize["StatusChangeReason"] = o.StatusChangeReason
	}
	if o.ChassisPoolMember.IsSet() {
		toSerialize["ChassisPoolMember"] = o.ChassisPoolMember.Get()
	}
	if o.DeploymentInput.IsSet() {
		toSerialize["DeploymentInput"] = o.DeploymentInput.Get()
	}
	if o.LastDeploymentInput.IsSet() {
		toSerialize["LastDeploymentInput"] = o.LastDeploymentInput.Get()
	}
	if o.Organization.IsSet() {
		toSerialize["Organization"] = o.Organization.Get()
	}
	if o.ServiceItemInstances != nil {
		toSerialize["ServiceItemInstances"] = o.ServiceItemInstances
	}
	if o.WorkloadDefinition.IsSet() {
		toSerialize["WorkloadDefinition"] = o.WorkloadDefinition.Get()
	}
	if o.WorkloadDeployment.IsSet() {
		toSerialize["WorkloadDeployment"] = o.WorkloadDeployment.Get()
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *WorkloadWorkloadInstance) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"ClassId",
		"ObjectType",
	}

	// defaultValueFuncMap captures the default values for required properties.
	// These values are used when required properties are missing from the payload.
	defaultValueFuncMap := map[string]func() interface{}{
		"ClassId":    o.GetDefaultClassId,
		"ObjectType": o.GetDefaultObjectType,
	}
	var defaultValueApplied bool
	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			if _, ok := defaultValueFuncMap[requiredProperty]; ok {
				allProperties[requiredProperty] = defaultValueFuncMap[requiredProperty]()
				defaultValueApplied = true
			}
		}
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	if defaultValueApplied {
		data, err = json.Marshal(allProperties)
		if err != nil {
			return err
		}
	}
	type WorkloadWorkloadInstanceWithoutEmbeddedStruct struct {
		// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.
		ClassId string `json:"ClassId"`
		// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
		ObjectType string `json:"ObjectType"`
		// The action to be performed on the workload instance. * `None` - Absence of any action on the workload instance. * `Suspend` - Pauses the execution of the workload instance, temporarily stopping its operations without permanently removing it. * `Resume` - Restarts a suspended workload instance, allowing it to continue operations from where it left off. * `Deploy` - Initiates the deployment of the workload instance, provisioning the necessary resources and starting its execution. * `Retry` - Attempts to re-deploy the workload instance, either due to a previous failure or to apply changes made to the instance. * `RetryAll` - Attempts to re-deploy all workload instances associated with the same deployment, either due to a previous failure or to apply changes made to the instances. * `Attach` - Associates the workload instance with its assigned resources, allowing it to utilize the resources for its operations. * `Detach` - Disassociates the workload instance from its assigned resources, preventing it from using the resources for its operations. * `UnAssign` - Detaches assigned resources from the workload instance while keeping the instance active.
		Action            *string                    `json:"Action,omitempty"`
		AssignedResources []WorkloadAssignedResource `json:"AssignedResources,omitempty"`
		ChangeTypes       []string                   `json:"ChangeTypes,omitempty"`
		// The conformance status of the deployment. * `Ok` - The deployment conforms to the preferred version of the workload. * `NonConformant` - The deployment does not conform to the preferred version of the workload.
		Conformance *string `json:"Conformance,omitempty"`
		// The last action performed on the workload instance. * `None` - Absence of any action on the workload instance. * `Suspend` - Pauses the execution of the workload instance, temporarily stopping its operations without permanently removing it. * `Resume` - Restarts a suspended workload instance, allowing it to continue operations from where it left off. * `Deploy` - Initiates the deployment of the workload instance, provisioning the necessary resources and starting its execution. * `Retry` - Attempts to re-deploy the workload instance, either due to a previous failure or to apply changes made to the instance. * `RetryAll` - Attempts to re-deploy all workload instances associated with the same deployment, either due to a previous failure or to apply changes made to the instances. * `Attach` - Associates the workload instance with its assigned resources, allowing it to utilize the resources for its operations. * `Detach` - Disassociates the workload instance from its assigned resources, preventing it from using the resources for its operations. * `UnAssign` - Detaches assigned resources from the workload instance while keeping the instance active.
		LastAction      *string                        `json:"LastAction,omitempty"`
		LocationDetails NullableCommGeoLocationDetails `json:"LocationDetails,omitempty"`
		// The name for this Workload instance.
		Name *string `json:"Name,omitempty" validate:"regexp=^[a-zA-Z0-9_.:-]{1,64}$"`
		// The current status of the workload instance. * `Staging` - The instance is in the staging phase, awaiting further actions. * `ReadyToDeploy` - The instance is fully configured and ready for deployment. * `InProgress` - Deployment or modification of the instance is currently in progress. * `Ok` - The instance is running successfully without issues. * `Failed` - The instance has encountered an error or failure preventing normal operation. * `Suspended` - The instance has been temporarily paused and is inactive. * `ChangesScheduled` - There is a change in the configuration that needs to be pushed to the instance. * `InSufficientResource` - The instance lacks the necessary resources to operate. * `OutOfService` - The instance is no longer available or operational. * `UnAssigning` - The instance is being unassigned or removed from service.
		Status *string `json:"Status,omitempty"`
		// The context or justification for the status transition. * `None` - No changes have been made. * `ResourceDisqualified` - The change in resource status triggered due to the resource being disqualified.
		StatusChangeReason  *string                                      `json:"StatusChangeReason,omitempty"`
		ChassisPoolMember   NullableMoBaseMoRelationship                 `json:"ChassisPoolMember,omitempty"`
		DeploymentInput     NullableWorkloadDeploymentInputRelationship  `json:"DeploymentInput,omitempty"`
		LastDeploymentInput NullableWorkloadDeploymentInputRelationship  `json:"LastDeploymentInput,omitempty"`
		Organization        NullableOrganizationOrganizationRelationship `json:"Organization,omitempty"`
		// An array of relationships to workflowServiceItemInstance resources.
		ServiceItemInstances []WorkflowServiceItemInstanceRelationship      `json:"ServiceItemInstances,omitempty"`
		WorkloadDefinition   NullableWorkloadWorkloadDefinitionRelationship `json:"WorkloadDefinition,omitempty"`
		WorkloadDeployment   NullableWorkloadWorkloadDeploymentRelationship `json:"WorkloadDeployment,omitempty"`
	}

	varWorkloadWorkloadInstanceWithoutEmbeddedStruct := WorkloadWorkloadInstanceWithoutEmbeddedStruct{}

	err = json.Unmarshal(data, &varWorkloadWorkloadInstanceWithoutEmbeddedStruct)
	if err == nil {
		varWorkloadWorkloadInstance := _WorkloadWorkloadInstance{}
		varWorkloadWorkloadInstance.ClassId = varWorkloadWorkloadInstanceWithoutEmbeddedStruct.ClassId
		varWorkloadWorkloadInstance.ObjectType = varWorkloadWorkloadInstanceWithoutEmbeddedStruct.ObjectType
		varWorkloadWorkloadInstance.Action = varWorkloadWorkloadInstanceWithoutEmbeddedStruct.Action
		varWorkloadWorkloadInstance.AssignedResources = varWorkloadWorkloadInstanceWithoutEmbeddedStruct.AssignedResources
		varWorkloadWorkloadInstance.ChangeTypes = varWorkloadWorkloadInstanceWithoutEmbeddedStruct.ChangeTypes
		varWorkloadWorkloadInstance.Conformance = varWorkloadWorkloadInstanceWithoutEmbeddedStruct.Conformance
		varWorkloadWorkloadInstance.LastAction = varWorkloadWorkloadInstanceWithoutEmbeddedStruct.LastAction
		varWorkloadWorkloadInstance.LocationDetails = varWorkloadWorkloadInstanceWithoutEmbeddedStruct.LocationDetails
		varWorkloadWorkloadInstance.Name = varWorkloadWorkloadInstanceWithoutEmbeddedStruct.Name
		varWorkloadWorkloadInstance.Status = varWorkloadWorkloadInstanceWithoutEmbeddedStruct.Status
		varWorkloadWorkloadInstance.StatusChangeReason = varWorkloadWorkloadInstanceWithoutEmbeddedStruct.StatusChangeReason
		varWorkloadWorkloadInstance.ChassisPoolMember = varWorkloadWorkloadInstanceWithoutEmbeddedStruct.ChassisPoolMember
		varWorkloadWorkloadInstance.DeploymentInput = varWorkloadWorkloadInstanceWithoutEmbeddedStruct.DeploymentInput
		varWorkloadWorkloadInstance.LastDeploymentInput = varWorkloadWorkloadInstanceWithoutEmbeddedStruct.LastDeploymentInput
		varWorkloadWorkloadInstance.Organization = varWorkloadWorkloadInstanceWithoutEmbeddedStruct.Organization
		varWorkloadWorkloadInstance.ServiceItemInstances = varWorkloadWorkloadInstanceWithoutEmbeddedStruct.ServiceItemInstances
		varWorkloadWorkloadInstance.WorkloadDefinition = varWorkloadWorkloadInstanceWithoutEmbeddedStruct.WorkloadDefinition
		varWorkloadWorkloadInstance.WorkloadDeployment = varWorkloadWorkloadInstanceWithoutEmbeddedStruct.WorkloadDeployment
		*o = WorkloadWorkloadInstance(varWorkloadWorkloadInstance)
	} else {
		return err
	}

	varWorkloadWorkloadInstance := _WorkloadWorkloadInstance{}

	err = json.Unmarshal(data, &varWorkloadWorkloadInstance)
	if err == nil {
		o.MoBaseMo = varWorkloadWorkloadInstance.MoBaseMo
	} else {
		return err
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "ClassId")
		delete(additionalProperties, "ObjectType")
		delete(additionalProperties, "Action")
		delete(additionalProperties, "AssignedResources")
		delete(additionalProperties, "ChangeTypes")
		delete(additionalProperties, "Conformance")
		delete(additionalProperties, "LastAction")
		delete(additionalProperties, "LocationDetails")
		delete(additionalProperties, "Name")
		delete(additionalProperties, "Status")
		delete(additionalProperties, "StatusChangeReason")
		delete(additionalProperties, "ChassisPoolMember")
		delete(additionalProperties, "DeploymentInput")
		delete(additionalProperties, "LastDeploymentInput")
		delete(additionalProperties, "Organization")
		delete(additionalProperties, "ServiceItemInstances")
		delete(additionalProperties, "WorkloadDefinition")
		delete(additionalProperties, "WorkloadDeployment")

		// remove fields from embedded structs
		reflectMoBaseMo := reflect.ValueOf(o.MoBaseMo)
		for i := 0; i < reflectMoBaseMo.Type().NumField(); i++ {
			t := reflectMoBaseMo.Type().Field(i)

			if jsonTag := t.Tag.Get("json"); jsonTag != "" {
				fieldName := ""
				if commaIdx := strings.Index(jsonTag, ","); commaIdx > 0 {
					fieldName = jsonTag[:commaIdx]
				} else {
					fieldName = jsonTag
				}
				if fieldName != "AdditionalProperties" {
					delete(additionalProperties, fieldName)
				}
			}
		}

		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableWorkloadWorkloadInstance struct {
	value *WorkloadWorkloadInstance
	isSet bool
}

func (v NullableWorkloadWorkloadInstance) Get() *WorkloadWorkloadInstance {
	return v.value
}

func (v *NullableWorkloadWorkloadInstance) Set(val *WorkloadWorkloadInstance) {
	v.value = val
	v.isSet = true
}

func (v NullableWorkloadWorkloadInstance) IsSet() bool {
	return v.isSet
}

func (v *NullableWorkloadWorkloadInstance) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWorkloadWorkloadInstance(val *WorkloadWorkloadInstance) *NullableWorkloadWorkloadInstance {
	return &NullableWorkloadWorkloadInstance{value: val, isSet: true}
}

func (v NullableWorkloadWorkloadInstance) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWorkloadWorkloadInstance) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
