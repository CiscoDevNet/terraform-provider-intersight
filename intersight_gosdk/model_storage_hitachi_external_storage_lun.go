/*
Cisco Intersight

Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations. The Intersight OpenAPI document defines the complete set of properties that are returned in the HTTP response. From that perspective, a client can expect that no additional properties are returned, unless these properties are explicitly defined in the OpenAPI document. However, when a client uses an older version of the Intersight OpenAPI document, the server may send additional properties because the software is more recent than the client. In that case, the client may receive properties that it does not know about. Some generated SDKs perform a strict validation of the HTTP response body against the OpenAPI document.

API version: 1.0.11-2024100405
Contact: intersight@cisco.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package intersight

import (
	"encoding/json"
	"fmt"
	"reflect"
	"strings"
)

// checks if the StorageHitachiExternalStorageLun type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &StorageHitachiExternalStorageLun{}

// StorageHitachiExternalStorageLun A list of the LUs that are defined for the port on an external storage system that is externally connected to the local storage system.
type StorageHitachiExternalStorageLun struct {
	MoBaseMo
	// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.
	ClassId string `json:"ClassId"`
	// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
	ObjectType string `json:"ObjectType"`
	// LUN that can be referenced from the port on the external storage system.
	ExternalLun *int64 `json:"ExternalLun,omitempty"`
	// Object ID of ports on an external storage system.
	ExternalPortId *string `json:"ExternalPortId,omitempty"`
	// Capacity of the external volume on the external storage system (1 block = 512 bytes).
	ExternalVolumeCapacity *int64 `json:"ExternalVolumeCapacity,omitempty"`
	// The product ID and the device identification (output in ASCII format) in the SCSI information for the external volume on the external storage system. This information is obtained in a format in which the product ID and the device identification are concatenated by a space.
	ExternalVolumeInfo *string `json:"ExternalVolumeInfo,omitempty"`
	// WWN of the external storage port.
	ExternalWwn *string `json:"ExternalWwn,omitempty"`
	// The iSCSI IP Address of the external storage port.
	IscsiIpAddress *string `json:"IscsiIpAddress,omitempty"`
	// The iSCSI Name of the external storage port.
	IscsiName *string `json:"IscsiName,omitempty"`
	// Port ID of the local storage.
	PortId *string `json:"PortId,omitempty"`
	// Virtual port ID. This attribute is displayed when an iSCSI port is used and virtual port mode is enabled.
	VirtualPortId        *int64                                                `json:"VirtualPortId,omitempty"`
	Array                NullableStorageHitachiArrayRelationship               `json:"Array,omitempty"`
	ExternalStoragePort  NullableStorageHitachiExternalStoragePortRelationship `json:"ExternalStoragePort,omitempty"`
	RegisteredDevice     NullableAssetDeviceRegistrationRelationship           `json:"RegisteredDevice,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _StorageHitachiExternalStorageLun StorageHitachiExternalStorageLun

// NewStorageHitachiExternalStorageLun instantiates a new StorageHitachiExternalStorageLun object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStorageHitachiExternalStorageLun(classId string, objectType string) *StorageHitachiExternalStorageLun {
	this := StorageHitachiExternalStorageLun{}
	this.ClassId = classId
	this.ObjectType = objectType
	return &this
}

// NewStorageHitachiExternalStorageLunWithDefaults instantiates a new StorageHitachiExternalStorageLun object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStorageHitachiExternalStorageLunWithDefaults() *StorageHitachiExternalStorageLun {
	this := StorageHitachiExternalStorageLun{}
	var classId string = "storage.HitachiExternalStorageLun"
	this.ClassId = classId
	var objectType string = "storage.HitachiExternalStorageLun"
	this.ObjectType = objectType
	return &this
}

// GetClassId returns the ClassId field value
func (o *StorageHitachiExternalStorageLun) GetClassId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ClassId
}

// GetClassIdOk returns a tuple with the ClassId field value
// and a boolean to check if the value has been set.
func (o *StorageHitachiExternalStorageLun) GetClassIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ClassId, true
}

// SetClassId sets field value
func (o *StorageHitachiExternalStorageLun) SetClassId(v string) {
	o.ClassId = v
}

// GetDefaultClassId returns the default value "storage.HitachiExternalStorageLun" of the ClassId field.
func (o *StorageHitachiExternalStorageLun) GetDefaultClassId() interface{} {
	return "storage.HitachiExternalStorageLun"
}

// GetObjectType returns the ObjectType field value
func (o *StorageHitachiExternalStorageLun) GetObjectType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ObjectType
}

// GetObjectTypeOk returns a tuple with the ObjectType field value
// and a boolean to check if the value has been set.
func (o *StorageHitachiExternalStorageLun) GetObjectTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ObjectType, true
}

// SetObjectType sets field value
func (o *StorageHitachiExternalStorageLun) SetObjectType(v string) {
	o.ObjectType = v
}

// GetDefaultObjectType returns the default value "storage.HitachiExternalStorageLun" of the ObjectType field.
func (o *StorageHitachiExternalStorageLun) GetDefaultObjectType() interface{} {
	return "storage.HitachiExternalStorageLun"
}

// GetExternalLun returns the ExternalLun field value if set, zero value otherwise.
func (o *StorageHitachiExternalStorageLun) GetExternalLun() int64 {
	if o == nil || IsNil(o.ExternalLun) {
		var ret int64
		return ret
	}
	return *o.ExternalLun
}

// GetExternalLunOk returns a tuple with the ExternalLun field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageHitachiExternalStorageLun) GetExternalLunOk() (*int64, bool) {
	if o == nil || IsNil(o.ExternalLun) {
		return nil, false
	}
	return o.ExternalLun, true
}

// HasExternalLun returns a boolean if a field has been set.
func (o *StorageHitachiExternalStorageLun) HasExternalLun() bool {
	if o != nil && !IsNil(o.ExternalLun) {
		return true
	}

	return false
}

// SetExternalLun gets a reference to the given int64 and assigns it to the ExternalLun field.
func (o *StorageHitachiExternalStorageLun) SetExternalLun(v int64) {
	o.ExternalLun = &v
}

// GetExternalPortId returns the ExternalPortId field value if set, zero value otherwise.
func (o *StorageHitachiExternalStorageLun) GetExternalPortId() string {
	if o == nil || IsNil(o.ExternalPortId) {
		var ret string
		return ret
	}
	return *o.ExternalPortId
}

// GetExternalPortIdOk returns a tuple with the ExternalPortId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageHitachiExternalStorageLun) GetExternalPortIdOk() (*string, bool) {
	if o == nil || IsNil(o.ExternalPortId) {
		return nil, false
	}
	return o.ExternalPortId, true
}

// HasExternalPortId returns a boolean if a field has been set.
func (o *StorageHitachiExternalStorageLun) HasExternalPortId() bool {
	if o != nil && !IsNil(o.ExternalPortId) {
		return true
	}

	return false
}

// SetExternalPortId gets a reference to the given string and assigns it to the ExternalPortId field.
func (o *StorageHitachiExternalStorageLun) SetExternalPortId(v string) {
	o.ExternalPortId = &v
}

// GetExternalVolumeCapacity returns the ExternalVolumeCapacity field value if set, zero value otherwise.
func (o *StorageHitachiExternalStorageLun) GetExternalVolumeCapacity() int64 {
	if o == nil || IsNil(o.ExternalVolumeCapacity) {
		var ret int64
		return ret
	}
	return *o.ExternalVolumeCapacity
}

// GetExternalVolumeCapacityOk returns a tuple with the ExternalVolumeCapacity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageHitachiExternalStorageLun) GetExternalVolumeCapacityOk() (*int64, bool) {
	if o == nil || IsNil(o.ExternalVolumeCapacity) {
		return nil, false
	}
	return o.ExternalVolumeCapacity, true
}

// HasExternalVolumeCapacity returns a boolean if a field has been set.
func (o *StorageHitachiExternalStorageLun) HasExternalVolumeCapacity() bool {
	if o != nil && !IsNil(o.ExternalVolumeCapacity) {
		return true
	}

	return false
}

// SetExternalVolumeCapacity gets a reference to the given int64 and assigns it to the ExternalVolumeCapacity field.
func (o *StorageHitachiExternalStorageLun) SetExternalVolumeCapacity(v int64) {
	o.ExternalVolumeCapacity = &v
}

// GetExternalVolumeInfo returns the ExternalVolumeInfo field value if set, zero value otherwise.
func (o *StorageHitachiExternalStorageLun) GetExternalVolumeInfo() string {
	if o == nil || IsNil(o.ExternalVolumeInfo) {
		var ret string
		return ret
	}
	return *o.ExternalVolumeInfo
}

// GetExternalVolumeInfoOk returns a tuple with the ExternalVolumeInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageHitachiExternalStorageLun) GetExternalVolumeInfoOk() (*string, bool) {
	if o == nil || IsNil(o.ExternalVolumeInfo) {
		return nil, false
	}
	return o.ExternalVolumeInfo, true
}

// HasExternalVolumeInfo returns a boolean if a field has been set.
func (o *StorageHitachiExternalStorageLun) HasExternalVolumeInfo() bool {
	if o != nil && !IsNil(o.ExternalVolumeInfo) {
		return true
	}

	return false
}

// SetExternalVolumeInfo gets a reference to the given string and assigns it to the ExternalVolumeInfo field.
func (o *StorageHitachiExternalStorageLun) SetExternalVolumeInfo(v string) {
	o.ExternalVolumeInfo = &v
}

// GetExternalWwn returns the ExternalWwn field value if set, zero value otherwise.
func (o *StorageHitachiExternalStorageLun) GetExternalWwn() string {
	if o == nil || IsNil(o.ExternalWwn) {
		var ret string
		return ret
	}
	return *o.ExternalWwn
}

// GetExternalWwnOk returns a tuple with the ExternalWwn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageHitachiExternalStorageLun) GetExternalWwnOk() (*string, bool) {
	if o == nil || IsNil(o.ExternalWwn) {
		return nil, false
	}
	return o.ExternalWwn, true
}

// HasExternalWwn returns a boolean if a field has been set.
func (o *StorageHitachiExternalStorageLun) HasExternalWwn() bool {
	if o != nil && !IsNil(o.ExternalWwn) {
		return true
	}

	return false
}

// SetExternalWwn gets a reference to the given string and assigns it to the ExternalWwn field.
func (o *StorageHitachiExternalStorageLun) SetExternalWwn(v string) {
	o.ExternalWwn = &v
}

// GetIscsiIpAddress returns the IscsiIpAddress field value if set, zero value otherwise.
func (o *StorageHitachiExternalStorageLun) GetIscsiIpAddress() string {
	if o == nil || IsNil(o.IscsiIpAddress) {
		var ret string
		return ret
	}
	return *o.IscsiIpAddress
}

// GetIscsiIpAddressOk returns a tuple with the IscsiIpAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageHitachiExternalStorageLun) GetIscsiIpAddressOk() (*string, bool) {
	if o == nil || IsNil(o.IscsiIpAddress) {
		return nil, false
	}
	return o.IscsiIpAddress, true
}

// HasIscsiIpAddress returns a boolean if a field has been set.
func (o *StorageHitachiExternalStorageLun) HasIscsiIpAddress() bool {
	if o != nil && !IsNil(o.IscsiIpAddress) {
		return true
	}

	return false
}

// SetIscsiIpAddress gets a reference to the given string and assigns it to the IscsiIpAddress field.
func (o *StorageHitachiExternalStorageLun) SetIscsiIpAddress(v string) {
	o.IscsiIpAddress = &v
}

// GetIscsiName returns the IscsiName field value if set, zero value otherwise.
func (o *StorageHitachiExternalStorageLun) GetIscsiName() string {
	if o == nil || IsNil(o.IscsiName) {
		var ret string
		return ret
	}
	return *o.IscsiName
}

// GetIscsiNameOk returns a tuple with the IscsiName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageHitachiExternalStorageLun) GetIscsiNameOk() (*string, bool) {
	if o == nil || IsNil(o.IscsiName) {
		return nil, false
	}
	return o.IscsiName, true
}

// HasIscsiName returns a boolean if a field has been set.
func (o *StorageHitachiExternalStorageLun) HasIscsiName() bool {
	if o != nil && !IsNil(o.IscsiName) {
		return true
	}

	return false
}

// SetIscsiName gets a reference to the given string and assigns it to the IscsiName field.
func (o *StorageHitachiExternalStorageLun) SetIscsiName(v string) {
	o.IscsiName = &v
}

// GetPortId returns the PortId field value if set, zero value otherwise.
func (o *StorageHitachiExternalStorageLun) GetPortId() string {
	if o == nil || IsNil(o.PortId) {
		var ret string
		return ret
	}
	return *o.PortId
}

// GetPortIdOk returns a tuple with the PortId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageHitachiExternalStorageLun) GetPortIdOk() (*string, bool) {
	if o == nil || IsNil(o.PortId) {
		return nil, false
	}
	return o.PortId, true
}

// HasPortId returns a boolean if a field has been set.
func (o *StorageHitachiExternalStorageLun) HasPortId() bool {
	if o != nil && !IsNil(o.PortId) {
		return true
	}

	return false
}

// SetPortId gets a reference to the given string and assigns it to the PortId field.
func (o *StorageHitachiExternalStorageLun) SetPortId(v string) {
	o.PortId = &v
}

// GetVirtualPortId returns the VirtualPortId field value if set, zero value otherwise.
func (o *StorageHitachiExternalStorageLun) GetVirtualPortId() int64 {
	if o == nil || IsNil(o.VirtualPortId) {
		var ret int64
		return ret
	}
	return *o.VirtualPortId
}

// GetVirtualPortIdOk returns a tuple with the VirtualPortId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageHitachiExternalStorageLun) GetVirtualPortIdOk() (*int64, bool) {
	if o == nil || IsNil(o.VirtualPortId) {
		return nil, false
	}
	return o.VirtualPortId, true
}

// HasVirtualPortId returns a boolean if a field has been set.
func (o *StorageHitachiExternalStorageLun) HasVirtualPortId() bool {
	if o != nil && !IsNil(o.VirtualPortId) {
		return true
	}

	return false
}

// SetVirtualPortId gets a reference to the given int64 and assigns it to the VirtualPortId field.
func (o *StorageHitachiExternalStorageLun) SetVirtualPortId(v int64) {
	o.VirtualPortId = &v
}

// GetArray returns the Array field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *StorageHitachiExternalStorageLun) GetArray() StorageHitachiArrayRelationship {
	if o == nil || IsNil(o.Array.Get()) {
		var ret StorageHitachiArrayRelationship
		return ret
	}
	return *o.Array.Get()
}

// GetArrayOk returns a tuple with the Array field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *StorageHitachiExternalStorageLun) GetArrayOk() (*StorageHitachiArrayRelationship, bool) {
	if o == nil {
		return nil, false
	}
	return o.Array.Get(), o.Array.IsSet()
}

// HasArray returns a boolean if a field has been set.
func (o *StorageHitachiExternalStorageLun) HasArray() bool {
	if o != nil && o.Array.IsSet() {
		return true
	}

	return false
}

// SetArray gets a reference to the given NullableStorageHitachiArrayRelationship and assigns it to the Array field.
func (o *StorageHitachiExternalStorageLun) SetArray(v StorageHitachiArrayRelationship) {
	o.Array.Set(&v)
}

// SetArrayNil sets the value for Array to be an explicit nil
func (o *StorageHitachiExternalStorageLun) SetArrayNil() {
	o.Array.Set(nil)
}

// UnsetArray ensures that no value is present for Array, not even an explicit nil
func (o *StorageHitachiExternalStorageLun) UnsetArray() {
	o.Array.Unset()
}

// GetExternalStoragePort returns the ExternalStoragePort field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *StorageHitachiExternalStorageLun) GetExternalStoragePort() StorageHitachiExternalStoragePortRelationship {
	if o == nil || IsNil(o.ExternalStoragePort.Get()) {
		var ret StorageHitachiExternalStoragePortRelationship
		return ret
	}
	return *o.ExternalStoragePort.Get()
}

// GetExternalStoragePortOk returns a tuple with the ExternalStoragePort field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *StorageHitachiExternalStorageLun) GetExternalStoragePortOk() (*StorageHitachiExternalStoragePortRelationship, bool) {
	if o == nil {
		return nil, false
	}
	return o.ExternalStoragePort.Get(), o.ExternalStoragePort.IsSet()
}

// HasExternalStoragePort returns a boolean if a field has been set.
func (o *StorageHitachiExternalStorageLun) HasExternalStoragePort() bool {
	if o != nil && o.ExternalStoragePort.IsSet() {
		return true
	}

	return false
}

// SetExternalStoragePort gets a reference to the given NullableStorageHitachiExternalStoragePortRelationship and assigns it to the ExternalStoragePort field.
func (o *StorageHitachiExternalStorageLun) SetExternalStoragePort(v StorageHitachiExternalStoragePortRelationship) {
	o.ExternalStoragePort.Set(&v)
}

// SetExternalStoragePortNil sets the value for ExternalStoragePort to be an explicit nil
func (o *StorageHitachiExternalStorageLun) SetExternalStoragePortNil() {
	o.ExternalStoragePort.Set(nil)
}

// UnsetExternalStoragePort ensures that no value is present for ExternalStoragePort, not even an explicit nil
func (o *StorageHitachiExternalStorageLun) UnsetExternalStoragePort() {
	o.ExternalStoragePort.Unset()
}

// GetRegisteredDevice returns the RegisteredDevice field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *StorageHitachiExternalStorageLun) GetRegisteredDevice() AssetDeviceRegistrationRelationship {
	if o == nil || IsNil(o.RegisteredDevice.Get()) {
		var ret AssetDeviceRegistrationRelationship
		return ret
	}
	return *o.RegisteredDevice.Get()
}

// GetRegisteredDeviceOk returns a tuple with the RegisteredDevice field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *StorageHitachiExternalStorageLun) GetRegisteredDeviceOk() (*AssetDeviceRegistrationRelationship, bool) {
	if o == nil {
		return nil, false
	}
	return o.RegisteredDevice.Get(), o.RegisteredDevice.IsSet()
}

// HasRegisteredDevice returns a boolean if a field has been set.
func (o *StorageHitachiExternalStorageLun) HasRegisteredDevice() bool {
	if o != nil && o.RegisteredDevice.IsSet() {
		return true
	}

	return false
}

// SetRegisteredDevice gets a reference to the given NullableAssetDeviceRegistrationRelationship and assigns it to the RegisteredDevice field.
func (o *StorageHitachiExternalStorageLun) SetRegisteredDevice(v AssetDeviceRegistrationRelationship) {
	o.RegisteredDevice.Set(&v)
}

// SetRegisteredDeviceNil sets the value for RegisteredDevice to be an explicit nil
func (o *StorageHitachiExternalStorageLun) SetRegisteredDeviceNil() {
	o.RegisteredDevice.Set(nil)
}

// UnsetRegisteredDevice ensures that no value is present for RegisteredDevice, not even an explicit nil
func (o *StorageHitachiExternalStorageLun) UnsetRegisteredDevice() {
	o.RegisteredDevice.Unset()
}

func (o StorageHitachiExternalStorageLun) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o StorageHitachiExternalStorageLun) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	serializedMoBaseMo, errMoBaseMo := json.Marshal(o.MoBaseMo)
	if errMoBaseMo != nil {
		return map[string]interface{}{}, errMoBaseMo
	}
	errMoBaseMo = json.Unmarshal([]byte(serializedMoBaseMo), &toSerialize)
	if errMoBaseMo != nil {
		return map[string]interface{}{}, errMoBaseMo
	}
	if _, exists := toSerialize["ClassId"]; !exists {
		toSerialize["ClassId"] = o.GetDefaultClassId()
	}
	toSerialize["ClassId"] = o.ClassId
	if _, exists := toSerialize["ObjectType"]; !exists {
		toSerialize["ObjectType"] = o.GetDefaultObjectType()
	}
	toSerialize["ObjectType"] = o.ObjectType
	if !IsNil(o.ExternalLun) {
		toSerialize["ExternalLun"] = o.ExternalLun
	}
	if !IsNil(o.ExternalPortId) {
		toSerialize["ExternalPortId"] = o.ExternalPortId
	}
	if !IsNil(o.ExternalVolumeCapacity) {
		toSerialize["ExternalVolumeCapacity"] = o.ExternalVolumeCapacity
	}
	if !IsNil(o.ExternalVolumeInfo) {
		toSerialize["ExternalVolumeInfo"] = o.ExternalVolumeInfo
	}
	if !IsNil(o.ExternalWwn) {
		toSerialize["ExternalWwn"] = o.ExternalWwn
	}
	if !IsNil(o.IscsiIpAddress) {
		toSerialize["IscsiIpAddress"] = o.IscsiIpAddress
	}
	if !IsNil(o.IscsiName) {
		toSerialize["IscsiName"] = o.IscsiName
	}
	if !IsNil(o.PortId) {
		toSerialize["PortId"] = o.PortId
	}
	if !IsNil(o.VirtualPortId) {
		toSerialize["VirtualPortId"] = o.VirtualPortId
	}
	if o.Array.IsSet() {
		toSerialize["Array"] = o.Array.Get()
	}
	if o.ExternalStoragePort.IsSet() {
		toSerialize["ExternalStoragePort"] = o.ExternalStoragePort.Get()
	}
	if o.RegisteredDevice.IsSet() {
		toSerialize["RegisteredDevice"] = o.RegisteredDevice.Get()
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *StorageHitachiExternalStorageLun) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"ClassId",
		"ObjectType",
	}

	// defaultValueFuncMap captures the default values for required properties.
	// These values are used when required properties are missing from the payload.
	defaultValueFuncMap := map[string]func() interface{}{
		"ClassId":    o.GetDefaultClassId,
		"ObjectType": o.GetDefaultObjectType,
	}
	var defaultValueApplied bool
	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			if _, ok := defaultValueFuncMap[requiredProperty]; ok {
				allProperties[requiredProperty] = defaultValueFuncMap[requiredProperty]()
				defaultValueApplied = true
			}
		}
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	if defaultValueApplied {
		data, err = json.Marshal(allProperties)
		if err != nil {
			return err
		}
	}
	type StorageHitachiExternalStorageLunWithoutEmbeddedStruct struct {
		// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.
		ClassId string `json:"ClassId"`
		// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
		ObjectType string `json:"ObjectType"`
		// LUN that can be referenced from the port on the external storage system.
		ExternalLun *int64 `json:"ExternalLun,omitempty"`
		// Object ID of ports on an external storage system.
		ExternalPortId *string `json:"ExternalPortId,omitempty"`
		// Capacity of the external volume on the external storage system (1 block = 512 bytes).
		ExternalVolumeCapacity *int64 `json:"ExternalVolumeCapacity,omitempty"`
		// The product ID and the device identification (output in ASCII format) in the SCSI information for the external volume on the external storage system. This information is obtained in a format in which the product ID and the device identification are concatenated by a space.
		ExternalVolumeInfo *string `json:"ExternalVolumeInfo,omitempty"`
		// WWN of the external storage port.
		ExternalWwn *string `json:"ExternalWwn,omitempty"`
		// The iSCSI IP Address of the external storage port.
		IscsiIpAddress *string `json:"IscsiIpAddress,omitempty"`
		// The iSCSI Name of the external storage port.
		IscsiName *string `json:"IscsiName,omitempty"`
		// Port ID of the local storage.
		PortId *string `json:"PortId,omitempty"`
		// Virtual port ID. This attribute is displayed when an iSCSI port is used and virtual port mode is enabled.
		VirtualPortId       *int64                                                `json:"VirtualPortId,omitempty"`
		Array               NullableStorageHitachiArrayRelationship               `json:"Array,omitempty"`
		ExternalStoragePort NullableStorageHitachiExternalStoragePortRelationship `json:"ExternalStoragePort,omitempty"`
		RegisteredDevice    NullableAssetDeviceRegistrationRelationship           `json:"RegisteredDevice,omitempty"`
	}

	varStorageHitachiExternalStorageLunWithoutEmbeddedStruct := StorageHitachiExternalStorageLunWithoutEmbeddedStruct{}

	err = json.Unmarshal(data, &varStorageHitachiExternalStorageLunWithoutEmbeddedStruct)
	if err == nil {
		varStorageHitachiExternalStorageLun := _StorageHitachiExternalStorageLun{}
		varStorageHitachiExternalStorageLun.ClassId = varStorageHitachiExternalStorageLunWithoutEmbeddedStruct.ClassId
		varStorageHitachiExternalStorageLun.ObjectType = varStorageHitachiExternalStorageLunWithoutEmbeddedStruct.ObjectType
		varStorageHitachiExternalStorageLun.ExternalLun = varStorageHitachiExternalStorageLunWithoutEmbeddedStruct.ExternalLun
		varStorageHitachiExternalStorageLun.ExternalPortId = varStorageHitachiExternalStorageLunWithoutEmbeddedStruct.ExternalPortId
		varStorageHitachiExternalStorageLun.ExternalVolumeCapacity = varStorageHitachiExternalStorageLunWithoutEmbeddedStruct.ExternalVolumeCapacity
		varStorageHitachiExternalStorageLun.ExternalVolumeInfo = varStorageHitachiExternalStorageLunWithoutEmbeddedStruct.ExternalVolumeInfo
		varStorageHitachiExternalStorageLun.ExternalWwn = varStorageHitachiExternalStorageLunWithoutEmbeddedStruct.ExternalWwn
		varStorageHitachiExternalStorageLun.IscsiIpAddress = varStorageHitachiExternalStorageLunWithoutEmbeddedStruct.IscsiIpAddress
		varStorageHitachiExternalStorageLun.IscsiName = varStorageHitachiExternalStorageLunWithoutEmbeddedStruct.IscsiName
		varStorageHitachiExternalStorageLun.PortId = varStorageHitachiExternalStorageLunWithoutEmbeddedStruct.PortId
		varStorageHitachiExternalStorageLun.VirtualPortId = varStorageHitachiExternalStorageLunWithoutEmbeddedStruct.VirtualPortId
		varStorageHitachiExternalStorageLun.Array = varStorageHitachiExternalStorageLunWithoutEmbeddedStruct.Array
		varStorageHitachiExternalStorageLun.ExternalStoragePort = varStorageHitachiExternalStorageLunWithoutEmbeddedStruct.ExternalStoragePort
		varStorageHitachiExternalStorageLun.RegisteredDevice = varStorageHitachiExternalStorageLunWithoutEmbeddedStruct.RegisteredDevice
		*o = StorageHitachiExternalStorageLun(varStorageHitachiExternalStorageLun)
	} else {
		return err
	}

	varStorageHitachiExternalStorageLun := _StorageHitachiExternalStorageLun{}

	err = json.Unmarshal(data, &varStorageHitachiExternalStorageLun)
	if err == nil {
		o.MoBaseMo = varStorageHitachiExternalStorageLun.MoBaseMo
	} else {
		return err
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "ClassId")
		delete(additionalProperties, "ObjectType")
		delete(additionalProperties, "ExternalLun")
		delete(additionalProperties, "ExternalPortId")
		delete(additionalProperties, "ExternalVolumeCapacity")
		delete(additionalProperties, "ExternalVolumeInfo")
		delete(additionalProperties, "ExternalWwn")
		delete(additionalProperties, "IscsiIpAddress")
		delete(additionalProperties, "IscsiName")
		delete(additionalProperties, "PortId")
		delete(additionalProperties, "VirtualPortId")
		delete(additionalProperties, "Array")
		delete(additionalProperties, "ExternalStoragePort")
		delete(additionalProperties, "RegisteredDevice")

		// remove fields from embedded structs
		reflectMoBaseMo := reflect.ValueOf(o.MoBaseMo)
		for i := 0; i < reflectMoBaseMo.Type().NumField(); i++ {
			t := reflectMoBaseMo.Type().Field(i)

			if jsonTag := t.Tag.Get("json"); jsonTag != "" {
				fieldName := ""
				if commaIdx := strings.Index(jsonTag, ","); commaIdx > 0 {
					fieldName = jsonTag[:commaIdx]
				} else {
					fieldName = jsonTag
				}
				if fieldName != "AdditionalProperties" {
					delete(additionalProperties, fieldName)
				}
			}
		}

		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableStorageHitachiExternalStorageLun struct {
	value *StorageHitachiExternalStorageLun
	isSet bool
}

func (v NullableStorageHitachiExternalStorageLun) Get() *StorageHitachiExternalStorageLun {
	return v.value
}

func (v *NullableStorageHitachiExternalStorageLun) Set(val *StorageHitachiExternalStorageLun) {
	v.value = val
	v.isSet = true
}

func (v NullableStorageHitachiExternalStorageLun) IsSet() bool {
	return v.isSet
}

func (v *NullableStorageHitachiExternalStorageLun) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStorageHitachiExternalStorageLun(val *StorageHitachiExternalStorageLun) *NullableStorageHitachiExternalStorageLun {
	return &NullableStorageHitachiExternalStorageLun{value: val, isSet: true}
}

func (v NullableStorageHitachiExternalStorageLun) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStorageHitachiExternalStorageLun) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
