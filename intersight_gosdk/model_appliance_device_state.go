/*
Cisco Intersight

Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations. The Intersight OpenAPI document defines the complete set of properties that are returned in the HTTP response. From that perspective, a client can expect that no additional properties are returned, unless these properties are explicitly defined in the OpenAPI document. However, when a client uses an older version of the Intersight OpenAPI document, the server may send additional properties because the software is more recent than the client. In that case, the client may receive properties that it does not know about. Some generated SDKs perform a strict validation of the HTTP response body against the OpenAPI document.

API version: 1.0.11-18775
Contact: intersight@cisco.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package intersight

import (
	"encoding/json"
	"fmt"
	"reflect"
	"strings"
	"time"
)

// checks if the ApplianceDeviceState type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ApplianceDeviceState{}

// ApplianceDeviceState DeviceState keeps tracks the Intersight Appliance's current state. Intersight Appliance's device connector queries its DeviceState managed object during the startup. Device connector also updates DeviceState managed object periodically by pushing modified DeviceState managed object from the Intersight Appliance to the Intersight.
type ApplianceDeviceState struct {
	MoBaseMo
	// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.
	ClassId string `json:"ClassId"`
	// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
	ObjectType   string   `json:"ObjectType"`
	BlockReasons []string `json:"BlockReasons,omitempty"`
	// Version string of the current software bundle that is blocked for upgrade in the Intersight Appliance. It is used by UI to show banner message for blocked upgrade.
	BlockedVersion *string                 `json:"BlockedVersion,omitempty"`
	Capabilities   []ApplianceKeyValuePair `json:"Capabilities,omitempty"`
	// Certificate to be used for verifying software upgrade bundles. Intersight's upgrade service sets the certificate dynamically when the Intersight Appliance queries DeviceState.
	Certificate *string `json:"Certificate,omitempty"`
	// Expiration date of the software bundle verification certificate.
	CertificateNotAfter *time.Time                `json:"CertificateNotAfter,omitempty"`
	ClusterInfo         NullableOnpremClusterInfo `json:"ClusterInfo,omitempty"`
	// Intersight Appliance's connectivity status. ConnectionStatus field is updated infrequently, and value may not be up to date. However, upgrade service will populate this field with actual value when queried. * `` - The target details have been persisted but Intersight has not yet attempted to connect to the target. * `Connected` - Intersight is able to establish a connection to the target and initiate management activities. * `NotConnected` - Intersight is unable to establish a connection to the target. * `ClaimInProgress` - Claim of the target is in progress. A connection to the target has not been fully established. * `UnclaimInProgress` - Unclaim of the target is in progress. Intersight is able to connect to the target and all management operations are supported. * `Unclaimed` - The device was un-claimed from the users account by an Administrator of the device. Also indicates the failure to claim Targets of type HTTP Endpoint in Intersight. * `Claimed` - Target of type HTTP Endpoint is successfully claimed in Intersight. Currently no validation is performed to verify the Target connectivity from Intersight at the time of creation. However invoking API from Intersight Orchestrator fails if this Target is not reachable from Intersight or if Target API credentials are incorrect.
	ConnectionStatus *string `json:"ConnectionStatus,omitempty"`
	// Fingerprint of the software bundle that is currently installed in the Intersight Appliance.
	CurrentFingerprint *string `json:"CurrentFingerprint,omitempty"`
	// Version string of the current software bundle that is installed in the Intersight Appliance.
	CurrentVersion *string `json:"CurrentVersion,omitempty"`
	// Version string of the Intersight Appliance's device connector. Device connector reports version number during the initial handshake.
	DcVersion *string `json:"DcVersion,omitempty"`
	// The desired software bundle version of the Intersight Appliance.
	DesiredVersion *string `json:"DesiredVersion,omitempty"`
	// Fingerprint of the downloaded software bundle.
	DownloadedFingerprint     *string                            `json:"DownloadedFingerprint,omitempty"`
	DownloadedMetadataVersion []ApplianceMetadataManifestVersion `json:"DownloadedMetadataVersion,omitempty"`
	// Intersight appliance software bundle version downloaded on the endpoint. Once Intersight Appliance upgrade service starts processing the version, it is updated as pending version.
	DownloadedVersion *string `json:"DownloadedVersion,omitempty"`
	// Hostname of the Intersight Appliance.
	Hostname *string `json:"Hostname,omitempty"`
	// Fingerprint of the pending software bundle.
	PendingFingerprint *string `json:"PendingFingerprint,omitempty"`
	// Version string of the pending software bundle that the Intersight Appliance will install.
	PendingVersion *string `json:"PendingVersion,omitempty"`
	// SerialId of the Intersight Appliance. SerialId is generated when the Intersight Appliance is setup. SerialId is a unique UUID string, and it will not change for the life time of the Intersight Appliance.
	SerialId *string `json:"SerialId,omitempty"`
	// Flag to indicate whether upgrade on this Intersight Appliance is blocked.
	UpgradeBlocked       *bool                                            `json:"UpgradeBlocked,omitempty"`
	RegisteredDevice     NullableAssetDeviceRegistrationRelationship      `json:"RegisteredDevice,omitempty"`
	UpgradePolicy        NullableApplianceDeviceUpgradePolicyRelationship `json:"UpgradePolicy,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ApplianceDeviceState ApplianceDeviceState

// NewApplianceDeviceState instantiates a new ApplianceDeviceState object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApplianceDeviceState(classId string, objectType string) *ApplianceDeviceState {
	this := ApplianceDeviceState{}
	this.ClassId = classId
	this.ObjectType = objectType
	return &this
}

// NewApplianceDeviceStateWithDefaults instantiates a new ApplianceDeviceState object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApplianceDeviceStateWithDefaults() *ApplianceDeviceState {
	this := ApplianceDeviceState{}
	var classId string = "appliance.DeviceState"
	this.ClassId = classId
	var objectType string = "appliance.DeviceState"
	this.ObjectType = objectType
	return &this
}

// GetClassId returns the ClassId field value
func (o *ApplianceDeviceState) GetClassId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ClassId
}

// GetClassIdOk returns a tuple with the ClassId field value
// and a boolean to check if the value has been set.
func (o *ApplianceDeviceState) GetClassIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ClassId, true
}

// SetClassId sets field value
func (o *ApplianceDeviceState) SetClassId(v string) {
	o.ClassId = v
}

// GetDefaultClassId returns the default value "appliance.DeviceState" of the ClassId field.
func (o *ApplianceDeviceState) GetDefaultClassId() interface{} {
	return "appliance.DeviceState"
}

// GetObjectType returns the ObjectType field value
func (o *ApplianceDeviceState) GetObjectType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ObjectType
}

// GetObjectTypeOk returns a tuple with the ObjectType field value
// and a boolean to check if the value has been set.
func (o *ApplianceDeviceState) GetObjectTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ObjectType, true
}

// SetObjectType sets field value
func (o *ApplianceDeviceState) SetObjectType(v string) {
	o.ObjectType = v
}

// GetDefaultObjectType returns the default value "appliance.DeviceState" of the ObjectType field.
func (o *ApplianceDeviceState) GetDefaultObjectType() interface{} {
	return "appliance.DeviceState"
}

// GetBlockReasons returns the BlockReasons field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ApplianceDeviceState) GetBlockReasons() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.BlockReasons
}

// GetBlockReasonsOk returns a tuple with the BlockReasons field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ApplianceDeviceState) GetBlockReasonsOk() ([]string, bool) {
	if o == nil || IsNil(o.BlockReasons) {
		return nil, false
	}
	return o.BlockReasons, true
}

// HasBlockReasons returns a boolean if a field has been set.
func (o *ApplianceDeviceState) HasBlockReasons() bool {
	if o != nil && !IsNil(o.BlockReasons) {
		return true
	}

	return false
}

// SetBlockReasons gets a reference to the given []string and assigns it to the BlockReasons field.
func (o *ApplianceDeviceState) SetBlockReasons(v []string) {
	o.BlockReasons = v
}

// GetBlockedVersion returns the BlockedVersion field value if set, zero value otherwise.
func (o *ApplianceDeviceState) GetBlockedVersion() string {
	if o == nil || IsNil(o.BlockedVersion) {
		var ret string
		return ret
	}
	return *o.BlockedVersion
}

// GetBlockedVersionOk returns a tuple with the BlockedVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplianceDeviceState) GetBlockedVersionOk() (*string, bool) {
	if o == nil || IsNil(o.BlockedVersion) {
		return nil, false
	}
	return o.BlockedVersion, true
}

// HasBlockedVersion returns a boolean if a field has been set.
func (o *ApplianceDeviceState) HasBlockedVersion() bool {
	if o != nil && !IsNil(o.BlockedVersion) {
		return true
	}

	return false
}

// SetBlockedVersion gets a reference to the given string and assigns it to the BlockedVersion field.
func (o *ApplianceDeviceState) SetBlockedVersion(v string) {
	o.BlockedVersion = &v
}

// GetCapabilities returns the Capabilities field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ApplianceDeviceState) GetCapabilities() []ApplianceKeyValuePair {
	if o == nil {
		var ret []ApplianceKeyValuePair
		return ret
	}
	return o.Capabilities
}

// GetCapabilitiesOk returns a tuple with the Capabilities field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ApplianceDeviceState) GetCapabilitiesOk() ([]ApplianceKeyValuePair, bool) {
	if o == nil || IsNil(o.Capabilities) {
		return nil, false
	}
	return o.Capabilities, true
}

// HasCapabilities returns a boolean if a field has been set.
func (o *ApplianceDeviceState) HasCapabilities() bool {
	if o != nil && !IsNil(o.Capabilities) {
		return true
	}

	return false
}

// SetCapabilities gets a reference to the given []ApplianceKeyValuePair and assigns it to the Capabilities field.
func (o *ApplianceDeviceState) SetCapabilities(v []ApplianceKeyValuePair) {
	o.Capabilities = v
}

// GetCertificate returns the Certificate field value if set, zero value otherwise.
func (o *ApplianceDeviceState) GetCertificate() string {
	if o == nil || IsNil(o.Certificate) {
		var ret string
		return ret
	}
	return *o.Certificate
}

// GetCertificateOk returns a tuple with the Certificate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplianceDeviceState) GetCertificateOk() (*string, bool) {
	if o == nil || IsNil(o.Certificate) {
		return nil, false
	}
	return o.Certificate, true
}

// HasCertificate returns a boolean if a field has been set.
func (o *ApplianceDeviceState) HasCertificate() bool {
	if o != nil && !IsNil(o.Certificate) {
		return true
	}

	return false
}

// SetCertificate gets a reference to the given string and assigns it to the Certificate field.
func (o *ApplianceDeviceState) SetCertificate(v string) {
	o.Certificate = &v
}

// GetCertificateNotAfter returns the CertificateNotAfter field value if set, zero value otherwise.
func (o *ApplianceDeviceState) GetCertificateNotAfter() time.Time {
	if o == nil || IsNil(o.CertificateNotAfter) {
		var ret time.Time
		return ret
	}
	return *o.CertificateNotAfter
}

// GetCertificateNotAfterOk returns a tuple with the CertificateNotAfter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplianceDeviceState) GetCertificateNotAfterOk() (*time.Time, bool) {
	if o == nil || IsNil(o.CertificateNotAfter) {
		return nil, false
	}
	return o.CertificateNotAfter, true
}

// HasCertificateNotAfter returns a boolean if a field has been set.
func (o *ApplianceDeviceState) HasCertificateNotAfter() bool {
	if o != nil && !IsNil(o.CertificateNotAfter) {
		return true
	}

	return false
}

// SetCertificateNotAfter gets a reference to the given time.Time and assigns it to the CertificateNotAfter field.
func (o *ApplianceDeviceState) SetCertificateNotAfter(v time.Time) {
	o.CertificateNotAfter = &v
}

// GetClusterInfo returns the ClusterInfo field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ApplianceDeviceState) GetClusterInfo() OnpremClusterInfo {
	if o == nil || IsNil(o.ClusterInfo.Get()) {
		var ret OnpremClusterInfo
		return ret
	}
	return *o.ClusterInfo.Get()
}

// GetClusterInfoOk returns a tuple with the ClusterInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ApplianceDeviceState) GetClusterInfoOk() (*OnpremClusterInfo, bool) {
	if o == nil {
		return nil, false
	}
	return o.ClusterInfo.Get(), o.ClusterInfo.IsSet()
}

// HasClusterInfo returns a boolean if a field has been set.
func (o *ApplianceDeviceState) HasClusterInfo() bool {
	if o != nil && o.ClusterInfo.IsSet() {
		return true
	}

	return false
}

// SetClusterInfo gets a reference to the given NullableOnpremClusterInfo and assigns it to the ClusterInfo field.
func (o *ApplianceDeviceState) SetClusterInfo(v OnpremClusterInfo) {
	o.ClusterInfo.Set(&v)
}

// SetClusterInfoNil sets the value for ClusterInfo to be an explicit nil
func (o *ApplianceDeviceState) SetClusterInfoNil() {
	o.ClusterInfo.Set(nil)
}

// UnsetClusterInfo ensures that no value is present for ClusterInfo, not even an explicit nil
func (o *ApplianceDeviceState) UnsetClusterInfo() {
	o.ClusterInfo.Unset()
}

// GetConnectionStatus returns the ConnectionStatus field value if set, zero value otherwise.
func (o *ApplianceDeviceState) GetConnectionStatus() string {
	if o == nil || IsNil(o.ConnectionStatus) {
		var ret string
		return ret
	}
	return *o.ConnectionStatus
}

// GetConnectionStatusOk returns a tuple with the ConnectionStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplianceDeviceState) GetConnectionStatusOk() (*string, bool) {
	if o == nil || IsNil(o.ConnectionStatus) {
		return nil, false
	}
	return o.ConnectionStatus, true
}

// HasConnectionStatus returns a boolean if a field has been set.
func (o *ApplianceDeviceState) HasConnectionStatus() bool {
	if o != nil && !IsNil(o.ConnectionStatus) {
		return true
	}

	return false
}

// SetConnectionStatus gets a reference to the given string and assigns it to the ConnectionStatus field.
func (o *ApplianceDeviceState) SetConnectionStatus(v string) {
	o.ConnectionStatus = &v
}

// GetCurrentFingerprint returns the CurrentFingerprint field value if set, zero value otherwise.
func (o *ApplianceDeviceState) GetCurrentFingerprint() string {
	if o == nil || IsNil(o.CurrentFingerprint) {
		var ret string
		return ret
	}
	return *o.CurrentFingerprint
}

// GetCurrentFingerprintOk returns a tuple with the CurrentFingerprint field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplianceDeviceState) GetCurrentFingerprintOk() (*string, bool) {
	if o == nil || IsNil(o.CurrentFingerprint) {
		return nil, false
	}
	return o.CurrentFingerprint, true
}

// HasCurrentFingerprint returns a boolean if a field has been set.
func (o *ApplianceDeviceState) HasCurrentFingerprint() bool {
	if o != nil && !IsNil(o.CurrentFingerprint) {
		return true
	}

	return false
}

// SetCurrentFingerprint gets a reference to the given string and assigns it to the CurrentFingerprint field.
func (o *ApplianceDeviceState) SetCurrentFingerprint(v string) {
	o.CurrentFingerprint = &v
}

// GetCurrentVersion returns the CurrentVersion field value if set, zero value otherwise.
func (o *ApplianceDeviceState) GetCurrentVersion() string {
	if o == nil || IsNil(o.CurrentVersion) {
		var ret string
		return ret
	}
	return *o.CurrentVersion
}

// GetCurrentVersionOk returns a tuple with the CurrentVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplianceDeviceState) GetCurrentVersionOk() (*string, bool) {
	if o == nil || IsNil(o.CurrentVersion) {
		return nil, false
	}
	return o.CurrentVersion, true
}

// HasCurrentVersion returns a boolean if a field has been set.
func (o *ApplianceDeviceState) HasCurrentVersion() bool {
	if o != nil && !IsNil(o.CurrentVersion) {
		return true
	}

	return false
}

// SetCurrentVersion gets a reference to the given string and assigns it to the CurrentVersion field.
func (o *ApplianceDeviceState) SetCurrentVersion(v string) {
	o.CurrentVersion = &v
}

// GetDcVersion returns the DcVersion field value if set, zero value otherwise.
func (o *ApplianceDeviceState) GetDcVersion() string {
	if o == nil || IsNil(o.DcVersion) {
		var ret string
		return ret
	}
	return *o.DcVersion
}

// GetDcVersionOk returns a tuple with the DcVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplianceDeviceState) GetDcVersionOk() (*string, bool) {
	if o == nil || IsNil(o.DcVersion) {
		return nil, false
	}
	return o.DcVersion, true
}

// HasDcVersion returns a boolean if a field has been set.
func (o *ApplianceDeviceState) HasDcVersion() bool {
	if o != nil && !IsNil(o.DcVersion) {
		return true
	}

	return false
}

// SetDcVersion gets a reference to the given string and assigns it to the DcVersion field.
func (o *ApplianceDeviceState) SetDcVersion(v string) {
	o.DcVersion = &v
}

// GetDesiredVersion returns the DesiredVersion field value if set, zero value otherwise.
func (o *ApplianceDeviceState) GetDesiredVersion() string {
	if o == nil || IsNil(o.DesiredVersion) {
		var ret string
		return ret
	}
	return *o.DesiredVersion
}

// GetDesiredVersionOk returns a tuple with the DesiredVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplianceDeviceState) GetDesiredVersionOk() (*string, bool) {
	if o == nil || IsNil(o.DesiredVersion) {
		return nil, false
	}
	return o.DesiredVersion, true
}

// HasDesiredVersion returns a boolean if a field has been set.
func (o *ApplianceDeviceState) HasDesiredVersion() bool {
	if o != nil && !IsNil(o.DesiredVersion) {
		return true
	}

	return false
}

// SetDesiredVersion gets a reference to the given string and assigns it to the DesiredVersion field.
func (o *ApplianceDeviceState) SetDesiredVersion(v string) {
	o.DesiredVersion = &v
}

// GetDownloadedFingerprint returns the DownloadedFingerprint field value if set, zero value otherwise.
func (o *ApplianceDeviceState) GetDownloadedFingerprint() string {
	if o == nil || IsNil(o.DownloadedFingerprint) {
		var ret string
		return ret
	}
	return *o.DownloadedFingerprint
}

// GetDownloadedFingerprintOk returns a tuple with the DownloadedFingerprint field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplianceDeviceState) GetDownloadedFingerprintOk() (*string, bool) {
	if o == nil || IsNil(o.DownloadedFingerprint) {
		return nil, false
	}
	return o.DownloadedFingerprint, true
}

// HasDownloadedFingerprint returns a boolean if a field has been set.
func (o *ApplianceDeviceState) HasDownloadedFingerprint() bool {
	if o != nil && !IsNil(o.DownloadedFingerprint) {
		return true
	}

	return false
}

// SetDownloadedFingerprint gets a reference to the given string and assigns it to the DownloadedFingerprint field.
func (o *ApplianceDeviceState) SetDownloadedFingerprint(v string) {
	o.DownloadedFingerprint = &v
}

// GetDownloadedMetadataVersion returns the DownloadedMetadataVersion field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ApplianceDeviceState) GetDownloadedMetadataVersion() []ApplianceMetadataManifestVersion {
	if o == nil {
		var ret []ApplianceMetadataManifestVersion
		return ret
	}
	return o.DownloadedMetadataVersion
}

// GetDownloadedMetadataVersionOk returns a tuple with the DownloadedMetadataVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ApplianceDeviceState) GetDownloadedMetadataVersionOk() ([]ApplianceMetadataManifestVersion, bool) {
	if o == nil || IsNil(o.DownloadedMetadataVersion) {
		return nil, false
	}
	return o.DownloadedMetadataVersion, true
}

// HasDownloadedMetadataVersion returns a boolean if a field has been set.
func (o *ApplianceDeviceState) HasDownloadedMetadataVersion() bool {
	if o != nil && !IsNil(o.DownloadedMetadataVersion) {
		return true
	}

	return false
}

// SetDownloadedMetadataVersion gets a reference to the given []ApplianceMetadataManifestVersion and assigns it to the DownloadedMetadataVersion field.
func (o *ApplianceDeviceState) SetDownloadedMetadataVersion(v []ApplianceMetadataManifestVersion) {
	o.DownloadedMetadataVersion = v
}

// GetDownloadedVersion returns the DownloadedVersion field value if set, zero value otherwise.
func (o *ApplianceDeviceState) GetDownloadedVersion() string {
	if o == nil || IsNil(o.DownloadedVersion) {
		var ret string
		return ret
	}
	return *o.DownloadedVersion
}

// GetDownloadedVersionOk returns a tuple with the DownloadedVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplianceDeviceState) GetDownloadedVersionOk() (*string, bool) {
	if o == nil || IsNil(o.DownloadedVersion) {
		return nil, false
	}
	return o.DownloadedVersion, true
}

// HasDownloadedVersion returns a boolean if a field has been set.
func (o *ApplianceDeviceState) HasDownloadedVersion() bool {
	if o != nil && !IsNil(o.DownloadedVersion) {
		return true
	}

	return false
}

// SetDownloadedVersion gets a reference to the given string and assigns it to the DownloadedVersion field.
func (o *ApplianceDeviceState) SetDownloadedVersion(v string) {
	o.DownloadedVersion = &v
}

// GetHostname returns the Hostname field value if set, zero value otherwise.
func (o *ApplianceDeviceState) GetHostname() string {
	if o == nil || IsNil(o.Hostname) {
		var ret string
		return ret
	}
	return *o.Hostname
}

// GetHostnameOk returns a tuple with the Hostname field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplianceDeviceState) GetHostnameOk() (*string, bool) {
	if o == nil || IsNil(o.Hostname) {
		return nil, false
	}
	return o.Hostname, true
}

// HasHostname returns a boolean if a field has been set.
func (o *ApplianceDeviceState) HasHostname() bool {
	if o != nil && !IsNil(o.Hostname) {
		return true
	}

	return false
}

// SetHostname gets a reference to the given string and assigns it to the Hostname field.
func (o *ApplianceDeviceState) SetHostname(v string) {
	o.Hostname = &v
}

// GetPendingFingerprint returns the PendingFingerprint field value if set, zero value otherwise.
func (o *ApplianceDeviceState) GetPendingFingerprint() string {
	if o == nil || IsNil(o.PendingFingerprint) {
		var ret string
		return ret
	}
	return *o.PendingFingerprint
}

// GetPendingFingerprintOk returns a tuple with the PendingFingerprint field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplianceDeviceState) GetPendingFingerprintOk() (*string, bool) {
	if o == nil || IsNil(o.PendingFingerprint) {
		return nil, false
	}
	return o.PendingFingerprint, true
}

// HasPendingFingerprint returns a boolean if a field has been set.
func (o *ApplianceDeviceState) HasPendingFingerprint() bool {
	if o != nil && !IsNil(o.PendingFingerprint) {
		return true
	}

	return false
}

// SetPendingFingerprint gets a reference to the given string and assigns it to the PendingFingerprint field.
func (o *ApplianceDeviceState) SetPendingFingerprint(v string) {
	o.PendingFingerprint = &v
}

// GetPendingVersion returns the PendingVersion field value if set, zero value otherwise.
func (o *ApplianceDeviceState) GetPendingVersion() string {
	if o == nil || IsNil(o.PendingVersion) {
		var ret string
		return ret
	}
	return *o.PendingVersion
}

// GetPendingVersionOk returns a tuple with the PendingVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplianceDeviceState) GetPendingVersionOk() (*string, bool) {
	if o == nil || IsNil(o.PendingVersion) {
		return nil, false
	}
	return o.PendingVersion, true
}

// HasPendingVersion returns a boolean if a field has been set.
func (o *ApplianceDeviceState) HasPendingVersion() bool {
	if o != nil && !IsNil(o.PendingVersion) {
		return true
	}

	return false
}

// SetPendingVersion gets a reference to the given string and assigns it to the PendingVersion field.
func (o *ApplianceDeviceState) SetPendingVersion(v string) {
	o.PendingVersion = &v
}

// GetSerialId returns the SerialId field value if set, zero value otherwise.
func (o *ApplianceDeviceState) GetSerialId() string {
	if o == nil || IsNil(o.SerialId) {
		var ret string
		return ret
	}
	return *o.SerialId
}

// GetSerialIdOk returns a tuple with the SerialId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplianceDeviceState) GetSerialIdOk() (*string, bool) {
	if o == nil || IsNil(o.SerialId) {
		return nil, false
	}
	return o.SerialId, true
}

// HasSerialId returns a boolean if a field has been set.
func (o *ApplianceDeviceState) HasSerialId() bool {
	if o != nil && !IsNil(o.SerialId) {
		return true
	}

	return false
}

// SetSerialId gets a reference to the given string and assigns it to the SerialId field.
func (o *ApplianceDeviceState) SetSerialId(v string) {
	o.SerialId = &v
}

// GetUpgradeBlocked returns the UpgradeBlocked field value if set, zero value otherwise.
func (o *ApplianceDeviceState) GetUpgradeBlocked() bool {
	if o == nil || IsNil(o.UpgradeBlocked) {
		var ret bool
		return ret
	}
	return *o.UpgradeBlocked
}

// GetUpgradeBlockedOk returns a tuple with the UpgradeBlocked field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplianceDeviceState) GetUpgradeBlockedOk() (*bool, bool) {
	if o == nil || IsNil(o.UpgradeBlocked) {
		return nil, false
	}
	return o.UpgradeBlocked, true
}

// HasUpgradeBlocked returns a boolean if a field has been set.
func (o *ApplianceDeviceState) HasUpgradeBlocked() bool {
	if o != nil && !IsNil(o.UpgradeBlocked) {
		return true
	}

	return false
}

// SetUpgradeBlocked gets a reference to the given bool and assigns it to the UpgradeBlocked field.
func (o *ApplianceDeviceState) SetUpgradeBlocked(v bool) {
	o.UpgradeBlocked = &v
}

// GetRegisteredDevice returns the RegisteredDevice field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ApplianceDeviceState) GetRegisteredDevice() AssetDeviceRegistrationRelationship {
	if o == nil || IsNil(o.RegisteredDevice.Get()) {
		var ret AssetDeviceRegistrationRelationship
		return ret
	}
	return *o.RegisteredDevice.Get()
}

// GetRegisteredDeviceOk returns a tuple with the RegisteredDevice field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ApplianceDeviceState) GetRegisteredDeviceOk() (*AssetDeviceRegistrationRelationship, bool) {
	if o == nil {
		return nil, false
	}
	return o.RegisteredDevice.Get(), o.RegisteredDevice.IsSet()
}

// HasRegisteredDevice returns a boolean if a field has been set.
func (o *ApplianceDeviceState) HasRegisteredDevice() bool {
	if o != nil && o.RegisteredDevice.IsSet() {
		return true
	}

	return false
}

// SetRegisteredDevice gets a reference to the given NullableAssetDeviceRegistrationRelationship and assigns it to the RegisteredDevice field.
func (o *ApplianceDeviceState) SetRegisteredDevice(v AssetDeviceRegistrationRelationship) {
	o.RegisteredDevice.Set(&v)
}

// SetRegisteredDeviceNil sets the value for RegisteredDevice to be an explicit nil
func (o *ApplianceDeviceState) SetRegisteredDeviceNil() {
	o.RegisteredDevice.Set(nil)
}

// UnsetRegisteredDevice ensures that no value is present for RegisteredDevice, not even an explicit nil
func (o *ApplianceDeviceState) UnsetRegisteredDevice() {
	o.RegisteredDevice.Unset()
}

// GetUpgradePolicy returns the UpgradePolicy field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ApplianceDeviceState) GetUpgradePolicy() ApplianceDeviceUpgradePolicyRelationship {
	if o == nil || IsNil(o.UpgradePolicy.Get()) {
		var ret ApplianceDeviceUpgradePolicyRelationship
		return ret
	}
	return *o.UpgradePolicy.Get()
}

// GetUpgradePolicyOk returns a tuple with the UpgradePolicy field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ApplianceDeviceState) GetUpgradePolicyOk() (*ApplianceDeviceUpgradePolicyRelationship, bool) {
	if o == nil {
		return nil, false
	}
	return o.UpgradePolicy.Get(), o.UpgradePolicy.IsSet()
}

// HasUpgradePolicy returns a boolean if a field has been set.
func (o *ApplianceDeviceState) HasUpgradePolicy() bool {
	if o != nil && o.UpgradePolicy.IsSet() {
		return true
	}

	return false
}

// SetUpgradePolicy gets a reference to the given NullableApplianceDeviceUpgradePolicyRelationship and assigns it to the UpgradePolicy field.
func (o *ApplianceDeviceState) SetUpgradePolicy(v ApplianceDeviceUpgradePolicyRelationship) {
	o.UpgradePolicy.Set(&v)
}

// SetUpgradePolicyNil sets the value for UpgradePolicy to be an explicit nil
func (o *ApplianceDeviceState) SetUpgradePolicyNil() {
	o.UpgradePolicy.Set(nil)
}

// UnsetUpgradePolicy ensures that no value is present for UpgradePolicy, not even an explicit nil
func (o *ApplianceDeviceState) UnsetUpgradePolicy() {
	o.UpgradePolicy.Unset()
}

func (o ApplianceDeviceState) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ApplianceDeviceState) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	serializedMoBaseMo, errMoBaseMo := json.Marshal(o.MoBaseMo)
	if errMoBaseMo != nil {
		return map[string]interface{}{}, errMoBaseMo
	}
	errMoBaseMo = json.Unmarshal([]byte(serializedMoBaseMo), &toSerialize)
	if errMoBaseMo != nil {
		return map[string]interface{}{}, errMoBaseMo
	}
	if _, exists := toSerialize["ClassId"]; !exists {
		toSerialize["ClassId"] = o.GetDefaultClassId()
	}
	toSerialize["ClassId"] = o.ClassId
	if _, exists := toSerialize["ObjectType"]; !exists {
		toSerialize["ObjectType"] = o.GetDefaultObjectType()
	}
	toSerialize["ObjectType"] = o.ObjectType
	if o.BlockReasons != nil {
		toSerialize["BlockReasons"] = o.BlockReasons
	}
	if !IsNil(o.BlockedVersion) {
		toSerialize["BlockedVersion"] = o.BlockedVersion
	}
	if o.Capabilities != nil {
		toSerialize["Capabilities"] = o.Capabilities
	}
	if !IsNil(o.Certificate) {
		toSerialize["Certificate"] = o.Certificate
	}
	if !IsNil(o.CertificateNotAfter) {
		toSerialize["CertificateNotAfter"] = o.CertificateNotAfter
	}
	if o.ClusterInfo.IsSet() {
		toSerialize["ClusterInfo"] = o.ClusterInfo.Get()
	}
	if !IsNil(o.ConnectionStatus) {
		toSerialize["ConnectionStatus"] = o.ConnectionStatus
	}
	if !IsNil(o.CurrentFingerprint) {
		toSerialize["CurrentFingerprint"] = o.CurrentFingerprint
	}
	if !IsNil(o.CurrentVersion) {
		toSerialize["CurrentVersion"] = o.CurrentVersion
	}
	if !IsNil(o.DcVersion) {
		toSerialize["DcVersion"] = o.DcVersion
	}
	if !IsNil(o.DesiredVersion) {
		toSerialize["DesiredVersion"] = o.DesiredVersion
	}
	if !IsNil(o.DownloadedFingerprint) {
		toSerialize["DownloadedFingerprint"] = o.DownloadedFingerprint
	}
	if o.DownloadedMetadataVersion != nil {
		toSerialize["DownloadedMetadataVersion"] = o.DownloadedMetadataVersion
	}
	if !IsNil(o.DownloadedVersion) {
		toSerialize["DownloadedVersion"] = o.DownloadedVersion
	}
	if !IsNil(o.Hostname) {
		toSerialize["Hostname"] = o.Hostname
	}
	if !IsNil(o.PendingFingerprint) {
		toSerialize["PendingFingerprint"] = o.PendingFingerprint
	}
	if !IsNil(o.PendingVersion) {
		toSerialize["PendingVersion"] = o.PendingVersion
	}
	if !IsNil(o.SerialId) {
		toSerialize["SerialId"] = o.SerialId
	}
	if !IsNil(o.UpgradeBlocked) {
		toSerialize["UpgradeBlocked"] = o.UpgradeBlocked
	}
	if o.RegisteredDevice.IsSet() {
		toSerialize["RegisteredDevice"] = o.RegisteredDevice.Get()
	}
	if o.UpgradePolicy.IsSet() {
		toSerialize["UpgradePolicy"] = o.UpgradePolicy.Get()
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ApplianceDeviceState) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"ClassId",
		"ObjectType",
	}

	// defaultValueFuncMap captures the default values for required properties.
	// These values are used when required properties are missing from the payload.
	defaultValueFuncMap := map[string]func() interface{}{
		"ClassId":    o.GetDefaultClassId,
		"ObjectType": o.GetDefaultObjectType,
	}
	var defaultValueApplied bool
	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			if _, ok := defaultValueFuncMap[requiredProperty]; ok {
				allProperties[requiredProperty] = defaultValueFuncMap[requiredProperty]()
				defaultValueApplied = true
			}
		}
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	if defaultValueApplied {
		data, err = json.Marshal(allProperties)
		if err != nil {
			return err
		}
	}
	type ApplianceDeviceStateWithoutEmbeddedStruct struct {
		// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.
		ClassId string `json:"ClassId"`
		// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
		ObjectType   string   `json:"ObjectType"`
		BlockReasons []string `json:"BlockReasons,omitempty"`
		// Version string of the current software bundle that is blocked for upgrade in the Intersight Appliance. It is used by UI to show banner message for blocked upgrade.
		BlockedVersion *string                 `json:"BlockedVersion,omitempty"`
		Capabilities   []ApplianceKeyValuePair `json:"Capabilities,omitempty"`
		// Certificate to be used for verifying software upgrade bundles. Intersight's upgrade service sets the certificate dynamically when the Intersight Appliance queries DeviceState.
		Certificate *string `json:"Certificate,omitempty"`
		// Expiration date of the software bundle verification certificate.
		CertificateNotAfter *time.Time                `json:"CertificateNotAfter,omitempty"`
		ClusterInfo         NullableOnpremClusterInfo `json:"ClusterInfo,omitempty"`
		// Intersight Appliance's connectivity status. ConnectionStatus field is updated infrequently, and value may not be up to date. However, upgrade service will populate this field with actual value when queried. * `` - The target details have been persisted but Intersight has not yet attempted to connect to the target. * `Connected` - Intersight is able to establish a connection to the target and initiate management activities. * `NotConnected` - Intersight is unable to establish a connection to the target. * `ClaimInProgress` - Claim of the target is in progress. A connection to the target has not been fully established. * `UnclaimInProgress` - Unclaim of the target is in progress. Intersight is able to connect to the target and all management operations are supported. * `Unclaimed` - The device was un-claimed from the users account by an Administrator of the device. Also indicates the failure to claim Targets of type HTTP Endpoint in Intersight. * `Claimed` - Target of type HTTP Endpoint is successfully claimed in Intersight. Currently no validation is performed to verify the Target connectivity from Intersight at the time of creation. However invoking API from Intersight Orchestrator fails if this Target is not reachable from Intersight or if Target API credentials are incorrect.
		ConnectionStatus *string `json:"ConnectionStatus,omitempty"`
		// Fingerprint of the software bundle that is currently installed in the Intersight Appliance.
		CurrentFingerprint *string `json:"CurrentFingerprint,omitempty"`
		// Version string of the current software bundle that is installed in the Intersight Appliance.
		CurrentVersion *string `json:"CurrentVersion,omitempty"`
		// Version string of the Intersight Appliance's device connector. Device connector reports version number during the initial handshake.
		DcVersion *string `json:"DcVersion,omitempty"`
		// The desired software bundle version of the Intersight Appliance.
		DesiredVersion *string `json:"DesiredVersion,omitempty"`
		// Fingerprint of the downloaded software bundle.
		DownloadedFingerprint     *string                            `json:"DownloadedFingerprint,omitempty"`
		DownloadedMetadataVersion []ApplianceMetadataManifestVersion `json:"DownloadedMetadataVersion,omitempty"`
		// Intersight appliance software bundle version downloaded on the endpoint. Once Intersight Appliance upgrade service starts processing the version, it is updated as pending version.
		DownloadedVersion *string `json:"DownloadedVersion,omitempty"`
		// Hostname of the Intersight Appliance.
		Hostname *string `json:"Hostname,omitempty"`
		// Fingerprint of the pending software bundle.
		PendingFingerprint *string `json:"PendingFingerprint,omitempty"`
		// Version string of the pending software bundle that the Intersight Appliance will install.
		PendingVersion *string `json:"PendingVersion,omitempty"`
		// SerialId of the Intersight Appliance. SerialId is generated when the Intersight Appliance is setup. SerialId is a unique UUID string, and it will not change for the life time of the Intersight Appliance.
		SerialId *string `json:"SerialId,omitempty"`
		// Flag to indicate whether upgrade on this Intersight Appliance is blocked.
		UpgradeBlocked   *bool                                            `json:"UpgradeBlocked,omitempty"`
		RegisteredDevice NullableAssetDeviceRegistrationRelationship      `json:"RegisteredDevice,omitempty"`
		UpgradePolicy    NullableApplianceDeviceUpgradePolicyRelationship `json:"UpgradePolicy,omitempty"`
	}

	varApplianceDeviceStateWithoutEmbeddedStruct := ApplianceDeviceStateWithoutEmbeddedStruct{}

	err = json.Unmarshal(data, &varApplianceDeviceStateWithoutEmbeddedStruct)
	if err == nil {
		varApplianceDeviceState := _ApplianceDeviceState{}
		varApplianceDeviceState.ClassId = varApplianceDeviceStateWithoutEmbeddedStruct.ClassId
		varApplianceDeviceState.ObjectType = varApplianceDeviceStateWithoutEmbeddedStruct.ObjectType
		varApplianceDeviceState.BlockReasons = varApplianceDeviceStateWithoutEmbeddedStruct.BlockReasons
		varApplianceDeviceState.BlockedVersion = varApplianceDeviceStateWithoutEmbeddedStruct.BlockedVersion
		varApplianceDeviceState.Capabilities = varApplianceDeviceStateWithoutEmbeddedStruct.Capabilities
		varApplianceDeviceState.Certificate = varApplianceDeviceStateWithoutEmbeddedStruct.Certificate
		varApplianceDeviceState.CertificateNotAfter = varApplianceDeviceStateWithoutEmbeddedStruct.CertificateNotAfter
		varApplianceDeviceState.ClusterInfo = varApplianceDeviceStateWithoutEmbeddedStruct.ClusterInfo
		varApplianceDeviceState.ConnectionStatus = varApplianceDeviceStateWithoutEmbeddedStruct.ConnectionStatus
		varApplianceDeviceState.CurrentFingerprint = varApplianceDeviceStateWithoutEmbeddedStruct.CurrentFingerprint
		varApplianceDeviceState.CurrentVersion = varApplianceDeviceStateWithoutEmbeddedStruct.CurrentVersion
		varApplianceDeviceState.DcVersion = varApplianceDeviceStateWithoutEmbeddedStruct.DcVersion
		varApplianceDeviceState.DesiredVersion = varApplianceDeviceStateWithoutEmbeddedStruct.DesiredVersion
		varApplianceDeviceState.DownloadedFingerprint = varApplianceDeviceStateWithoutEmbeddedStruct.DownloadedFingerprint
		varApplianceDeviceState.DownloadedMetadataVersion = varApplianceDeviceStateWithoutEmbeddedStruct.DownloadedMetadataVersion
		varApplianceDeviceState.DownloadedVersion = varApplianceDeviceStateWithoutEmbeddedStruct.DownloadedVersion
		varApplianceDeviceState.Hostname = varApplianceDeviceStateWithoutEmbeddedStruct.Hostname
		varApplianceDeviceState.PendingFingerprint = varApplianceDeviceStateWithoutEmbeddedStruct.PendingFingerprint
		varApplianceDeviceState.PendingVersion = varApplianceDeviceStateWithoutEmbeddedStruct.PendingVersion
		varApplianceDeviceState.SerialId = varApplianceDeviceStateWithoutEmbeddedStruct.SerialId
		varApplianceDeviceState.UpgradeBlocked = varApplianceDeviceStateWithoutEmbeddedStruct.UpgradeBlocked
		varApplianceDeviceState.RegisteredDevice = varApplianceDeviceStateWithoutEmbeddedStruct.RegisteredDevice
		varApplianceDeviceState.UpgradePolicy = varApplianceDeviceStateWithoutEmbeddedStruct.UpgradePolicy
		*o = ApplianceDeviceState(varApplianceDeviceState)
	} else {
		return err
	}

	varApplianceDeviceState := _ApplianceDeviceState{}

	err = json.Unmarshal(data, &varApplianceDeviceState)
	if err == nil {
		o.MoBaseMo = varApplianceDeviceState.MoBaseMo
	} else {
		return err
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "ClassId")
		delete(additionalProperties, "ObjectType")
		delete(additionalProperties, "BlockReasons")
		delete(additionalProperties, "BlockedVersion")
		delete(additionalProperties, "Capabilities")
		delete(additionalProperties, "Certificate")
		delete(additionalProperties, "CertificateNotAfter")
		delete(additionalProperties, "ClusterInfo")
		delete(additionalProperties, "ConnectionStatus")
		delete(additionalProperties, "CurrentFingerprint")
		delete(additionalProperties, "CurrentVersion")
		delete(additionalProperties, "DcVersion")
		delete(additionalProperties, "DesiredVersion")
		delete(additionalProperties, "DownloadedFingerprint")
		delete(additionalProperties, "DownloadedMetadataVersion")
		delete(additionalProperties, "DownloadedVersion")
		delete(additionalProperties, "Hostname")
		delete(additionalProperties, "PendingFingerprint")
		delete(additionalProperties, "PendingVersion")
		delete(additionalProperties, "SerialId")
		delete(additionalProperties, "UpgradeBlocked")
		delete(additionalProperties, "RegisteredDevice")
		delete(additionalProperties, "UpgradePolicy")

		// remove fields from embedded structs
		reflectMoBaseMo := reflect.ValueOf(o.MoBaseMo)
		for i := 0; i < reflectMoBaseMo.Type().NumField(); i++ {
			t := reflectMoBaseMo.Type().Field(i)

			if jsonTag := t.Tag.Get("json"); jsonTag != "" {
				fieldName := ""
				if commaIdx := strings.Index(jsonTag, ","); commaIdx > 0 {
					fieldName = jsonTag[:commaIdx]
				} else {
					fieldName = jsonTag
				}
				if fieldName != "AdditionalProperties" {
					delete(additionalProperties, fieldName)
				}
			}
		}

		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableApplianceDeviceState struct {
	value *ApplianceDeviceState
	isSet bool
}

func (v NullableApplianceDeviceState) Get() *ApplianceDeviceState {
	return v.value
}

func (v *NullableApplianceDeviceState) Set(val *ApplianceDeviceState) {
	v.value = val
	v.isSet = true
}

func (v NullableApplianceDeviceState) IsSet() bool {
	return v.isSet
}

func (v *NullableApplianceDeviceState) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApplianceDeviceState(val *ApplianceDeviceState) *NullableApplianceDeviceState {
	return &NullableApplianceDeviceState{value: val, isSet: true}
}

func (v NullableApplianceDeviceState) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApplianceDeviceState) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
