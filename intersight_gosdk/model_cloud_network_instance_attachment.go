/*
Cisco Intersight

Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations. The Intersight OpenAPI document defines the complete set of properties that are returned in the HTTP response. From that perspective, a client can expect that no additional properties are returned, unless these properties are explicitly defined in the OpenAPI document. However, when a client uses an older version of the Intersight OpenAPI document, the server may send additional properties because the software is more recent than the client. In that case, the client may receive properties that it does not know about. Some generated SDKs perform a strict validation of the HTTP response body against the OpenAPI document.

API version: 1.0.11-18775
Contact: intersight@cisco.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package intersight

import (
	"encoding/json"
	"fmt"
	"reflect"
	"strings"
	"time"
)

// checks if the CloudNetworkInstanceAttachment type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CloudNetworkInstanceAttachment{}

// CloudNetworkInstanceAttachment Instance attached to a network interface.
type CloudNetworkInstanceAttachment struct {
	MoBaseComplexType
	// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.
	ClassId string `json:"ClassId"`
	// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
	ObjectType string `json:"ObjectType"`
	// Time stamp when the attachment was initiated.
	AttachTime *time.Time `json:"AttachTime,omitempty"`
	// Indicates whether the attachment is deleted when an instance is terminated.
	AutoDelete *bool `json:"AutoDelete,omitempty"`
	// The device index to which the network interface is attached.
	DeviceIndex *int64 `json:"DeviceIndex,omitempty"`
	// The ID of the instance to which the network interface is attached.
	InstanceId *string `json:"InstanceId,omitempty"`
	// The status of the attachment. It is one of attaching, attached, detaching, or detached. * `UnAttached` - Network interface is not attached to a virtual machine. * `Attached` - Network interface is attached to a virtual machine. * `Attaching` - Network interface is being attached to a virtual machine. * `Detaching` - Network interface is being attached to a virtual machine. * `Detached` - Network interface is detached from a virtual machine.
	State                *string `json:"State,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _CloudNetworkInstanceAttachment CloudNetworkInstanceAttachment

// NewCloudNetworkInstanceAttachment instantiates a new CloudNetworkInstanceAttachment object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCloudNetworkInstanceAttachment(classId string, objectType string) *CloudNetworkInstanceAttachment {
	this := CloudNetworkInstanceAttachment{}
	this.ClassId = classId
	this.ObjectType = objectType
	return &this
}

// NewCloudNetworkInstanceAttachmentWithDefaults instantiates a new CloudNetworkInstanceAttachment object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCloudNetworkInstanceAttachmentWithDefaults() *CloudNetworkInstanceAttachment {
	this := CloudNetworkInstanceAttachment{}
	var classId string = "cloud.NetworkInstanceAttachment"
	this.ClassId = classId
	var objectType string = "cloud.NetworkInstanceAttachment"
	this.ObjectType = objectType
	return &this
}

// GetClassId returns the ClassId field value
func (o *CloudNetworkInstanceAttachment) GetClassId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ClassId
}

// GetClassIdOk returns a tuple with the ClassId field value
// and a boolean to check if the value has been set.
func (o *CloudNetworkInstanceAttachment) GetClassIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ClassId, true
}

// SetClassId sets field value
func (o *CloudNetworkInstanceAttachment) SetClassId(v string) {
	o.ClassId = v
}

// GetDefaultClassId returns the default value "cloud.NetworkInstanceAttachment" of the ClassId field.
func (o *CloudNetworkInstanceAttachment) GetDefaultClassId() interface{} {
	return "cloud.NetworkInstanceAttachment"
}

// GetObjectType returns the ObjectType field value
func (o *CloudNetworkInstanceAttachment) GetObjectType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ObjectType
}

// GetObjectTypeOk returns a tuple with the ObjectType field value
// and a boolean to check if the value has been set.
func (o *CloudNetworkInstanceAttachment) GetObjectTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ObjectType, true
}

// SetObjectType sets field value
func (o *CloudNetworkInstanceAttachment) SetObjectType(v string) {
	o.ObjectType = v
}

// GetDefaultObjectType returns the default value "cloud.NetworkInstanceAttachment" of the ObjectType field.
func (o *CloudNetworkInstanceAttachment) GetDefaultObjectType() interface{} {
	return "cloud.NetworkInstanceAttachment"
}

// GetAttachTime returns the AttachTime field value if set, zero value otherwise.
func (o *CloudNetworkInstanceAttachment) GetAttachTime() time.Time {
	if o == nil || IsNil(o.AttachTime) {
		var ret time.Time
		return ret
	}
	return *o.AttachTime
}

// GetAttachTimeOk returns a tuple with the AttachTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CloudNetworkInstanceAttachment) GetAttachTimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.AttachTime) {
		return nil, false
	}
	return o.AttachTime, true
}

// HasAttachTime returns a boolean if a field has been set.
func (o *CloudNetworkInstanceAttachment) HasAttachTime() bool {
	if o != nil && !IsNil(o.AttachTime) {
		return true
	}

	return false
}

// SetAttachTime gets a reference to the given time.Time and assigns it to the AttachTime field.
func (o *CloudNetworkInstanceAttachment) SetAttachTime(v time.Time) {
	o.AttachTime = &v
}

// GetAutoDelete returns the AutoDelete field value if set, zero value otherwise.
func (o *CloudNetworkInstanceAttachment) GetAutoDelete() bool {
	if o == nil || IsNil(o.AutoDelete) {
		var ret bool
		return ret
	}
	return *o.AutoDelete
}

// GetAutoDeleteOk returns a tuple with the AutoDelete field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CloudNetworkInstanceAttachment) GetAutoDeleteOk() (*bool, bool) {
	if o == nil || IsNil(o.AutoDelete) {
		return nil, false
	}
	return o.AutoDelete, true
}

// HasAutoDelete returns a boolean if a field has been set.
func (o *CloudNetworkInstanceAttachment) HasAutoDelete() bool {
	if o != nil && !IsNil(o.AutoDelete) {
		return true
	}

	return false
}

// SetAutoDelete gets a reference to the given bool and assigns it to the AutoDelete field.
func (o *CloudNetworkInstanceAttachment) SetAutoDelete(v bool) {
	o.AutoDelete = &v
}

// GetDeviceIndex returns the DeviceIndex field value if set, zero value otherwise.
func (o *CloudNetworkInstanceAttachment) GetDeviceIndex() int64 {
	if o == nil || IsNil(o.DeviceIndex) {
		var ret int64
		return ret
	}
	return *o.DeviceIndex
}

// GetDeviceIndexOk returns a tuple with the DeviceIndex field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CloudNetworkInstanceAttachment) GetDeviceIndexOk() (*int64, bool) {
	if o == nil || IsNil(o.DeviceIndex) {
		return nil, false
	}
	return o.DeviceIndex, true
}

// HasDeviceIndex returns a boolean if a field has been set.
func (o *CloudNetworkInstanceAttachment) HasDeviceIndex() bool {
	if o != nil && !IsNil(o.DeviceIndex) {
		return true
	}

	return false
}

// SetDeviceIndex gets a reference to the given int64 and assigns it to the DeviceIndex field.
func (o *CloudNetworkInstanceAttachment) SetDeviceIndex(v int64) {
	o.DeviceIndex = &v
}

// GetInstanceId returns the InstanceId field value if set, zero value otherwise.
func (o *CloudNetworkInstanceAttachment) GetInstanceId() string {
	if o == nil || IsNil(o.InstanceId) {
		var ret string
		return ret
	}
	return *o.InstanceId
}

// GetInstanceIdOk returns a tuple with the InstanceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CloudNetworkInstanceAttachment) GetInstanceIdOk() (*string, bool) {
	if o == nil || IsNil(o.InstanceId) {
		return nil, false
	}
	return o.InstanceId, true
}

// HasInstanceId returns a boolean if a field has been set.
func (o *CloudNetworkInstanceAttachment) HasInstanceId() bool {
	if o != nil && !IsNil(o.InstanceId) {
		return true
	}

	return false
}

// SetInstanceId gets a reference to the given string and assigns it to the InstanceId field.
func (o *CloudNetworkInstanceAttachment) SetInstanceId(v string) {
	o.InstanceId = &v
}

// GetState returns the State field value if set, zero value otherwise.
func (o *CloudNetworkInstanceAttachment) GetState() string {
	if o == nil || IsNil(o.State) {
		var ret string
		return ret
	}
	return *o.State
}

// GetStateOk returns a tuple with the State field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CloudNetworkInstanceAttachment) GetStateOk() (*string, bool) {
	if o == nil || IsNil(o.State) {
		return nil, false
	}
	return o.State, true
}

// HasState returns a boolean if a field has been set.
func (o *CloudNetworkInstanceAttachment) HasState() bool {
	if o != nil && !IsNil(o.State) {
		return true
	}

	return false
}

// SetState gets a reference to the given string and assigns it to the State field.
func (o *CloudNetworkInstanceAttachment) SetState(v string) {
	o.State = &v
}

func (o CloudNetworkInstanceAttachment) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CloudNetworkInstanceAttachment) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	serializedMoBaseComplexType, errMoBaseComplexType := json.Marshal(o.MoBaseComplexType)
	if errMoBaseComplexType != nil {
		return map[string]interface{}{}, errMoBaseComplexType
	}
	errMoBaseComplexType = json.Unmarshal([]byte(serializedMoBaseComplexType), &toSerialize)
	if errMoBaseComplexType != nil {
		return map[string]interface{}{}, errMoBaseComplexType
	}
	if _, exists := toSerialize["ClassId"]; !exists {
		toSerialize["ClassId"] = o.GetDefaultClassId()
	}
	toSerialize["ClassId"] = o.ClassId
	if _, exists := toSerialize["ObjectType"]; !exists {
		toSerialize["ObjectType"] = o.GetDefaultObjectType()
	}
	toSerialize["ObjectType"] = o.ObjectType
	if !IsNil(o.AttachTime) {
		toSerialize["AttachTime"] = o.AttachTime
	}
	if !IsNil(o.AutoDelete) {
		toSerialize["AutoDelete"] = o.AutoDelete
	}
	if !IsNil(o.DeviceIndex) {
		toSerialize["DeviceIndex"] = o.DeviceIndex
	}
	if !IsNil(o.InstanceId) {
		toSerialize["InstanceId"] = o.InstanceId
	}
	if !IsNil(o.State) {
		toSerialize["State"] = o.State
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *CloudNetworkInstanceAttachment) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"ClassId",
		"ObjectType",
	}

	// defaultValueFuncMap captures the default values for required properties.
	// These values are used when required properties are missing from the payload.
	defaultValueFuncMap := map[string]func() interface{}{
		"ClassId":    o.GetDefaultClassId,
		"ObjectType": o.GetDefaultObjectType,
	}
	var defaultValueApplied bool
	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			if _, ok := defaultValueFuncMap[requiredProperty]; ok {
				allProperties[requiredProperty] = defaultValueFuncMap[requiredProperty]()
				defaultValueApplied = true
			}
		}
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	if defaultValueApplied {
		data, err = json.Marshal(allProperties)
		if err != nil {
			return err
		}
	}
	type CloudNetworkInstanceAttachmentWithoutEmbeddedStruct struct {
		// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.
		ClassId string `json:"ClassId"`
		// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
		ObjectType string `json:"ObjectType"`
		// Time stamp when the attachment was initiated.
		AttachTime *time.Time `json:"AttachTime,omitempty"`
		// Indicates whether the attachment is deleted when an instance is terminated.
		AutoDelete *bool `json:"AutoDelete,omitempty"`
		// The device index to which the network interface is attached.
		DeviceIndex *int64 `json:"DeviceIndex,omitempty"`
		// The ID of the instance to which the network interface is attached.
		InstanceId *string `json:"InstanceId,omitempty"`
		// The status of the attachment. It is one of attaching, attached, detaching, or detached. * `UnAttached` - Network interface is not attached to a virtual machine. * `Attached` - Network interface is attached to a virtual machine. * `Attaching` - Network interface is being attached to a virtual machine. * `Detaching` - Network interface is being attached to a virtual machine. * `Detached` - Network interface is detached from a virtual machine.
		State *string `json:"State,omitempty"`
	}

	varCloudNetworkInstanceAttachmentWithoutEmbeddedStruct := CloudNetworkInstanceAttachmentWithoutEmbeddedStruct{}

	err = json.Unmarshal(data, &varCloudNetworkInstanceAttachmentWithoutEmbeddedStruct)
	if err == nil {
		varCloudNetworkInstanceAttachment := _CloudNetworkInstanceAttachment{}
		varCloudNetworkInstanceAttachment.ClassId = varCloudNetworkInstanceAttachmentWithoutEmbeddedStruct.ClassId
		varCloudNetworkInstanceAttachment.ObjectType = varCloudNetworkInstanceAttachmentWithoutEmbeddedStruct.ObjectType
		varCloudNetworkInstanceAttachment.AttachTime = varCloudNetworkInstanceAttachmentWithoutEmbeddedStruct.AttachTime
		varCloudNetworkInstanceAttachment.AutoDelete = varCloudNetworkInstanceAttachmentWithoutEmbeddedStruct.AutoDelete
		varCloudNetworkInstanceAttachment.DeviceIndex = varCloudNetworkInstanceAttachmentWithoutEmbeddedStruct.DeviceIndex
		varCloudNetworkInstanceAttachment.InstanceId = varCloudNetworkInstanceAttachmentWithoutEmbeddedStruct.InstanceId
		varCloudNetworkInstanceAttachment.State = varCloudNetworkInstanceAttachmentWithoutEmbeddedStruct.State
		*o = CloudNetworkInstanceAttachment(varCloudNetworkInstanceAttachment)
	} else {
		return err
	}

	varCloudNetworkInstanceAttachment := _CloudNetworkInstanceAttachment{}

	err = json.Unmarshal(data, &varCloudNetworkInstanceAttachment)
	if err == nil {
		o.MoBaseComplexType = varCloudNetworkInstanceAttachment.MoBaseComplexType
	} else {
		return err
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "ClassId")
		delete(additionalProperties, "ObjectType")
		delete(additionalProperties, "AttachTime")
		delete(additionalProperties, "AutoDelete")
		delete(additionalProperties, "DeviceIndex")
		delete(additionalProperties, "InstanceId")
		delete(additionalProperties, "State")

		// remove fields from embedded structs
		reflectMoBaseComplexType := reflect.ValueOf(o.MoBaseComplexType)
		for i := 0; i < reflectMoBaseComplexType.Type().NumField(); i++ {
			t := reflectMoBaseComplexType.Type().Field(i)

			if jsonTag := t.Tag.Get("json"); jsonTag != "" {
				fieldName := ""
				if commaIdx := strings.Index(jsonTag, ","); commaIdx > 0 {
					fieldName = jsonTag[:commaIdx]
				} else {
					fieldName = jsonTag
				}
				if fieldName != "AdditionalProperties" {
					delete(additionalProperties, fieldName)
				}
			}
		}

		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableCloudNetworkInstanceAttachment struct {
	value *CloudNetworkInstanceAttachment
	isSet bool
}

func (v NullableCloudNetworkInstanceAttachment) Get() *CloudNetworkInstanceAttachment {
	return v.value
}

func (v *NullableCloudNetworkInstanceAttachment) Set(val *CloudNetworkInstanceAttachment) {
	v.value = val
	v.isSet = true
}

func (v NullableCloudNetworkInstanceAttachment) IsSet() bool {
	return v.isSet
}

func (v *NullableCloudNetworkInstanceAttachment) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCloudNetworkInstanceAttachment(val *CloudNetworkInstanceAttachment) *NullableCloudNetworkInstanceAttachment {
	return &NullableCloudNetworkInstanceAttachment{value: val, isSet: true}
}

func (v NullableCloudNetworkInstanceAttachment) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCloudNetworkInstanceAttachment) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
