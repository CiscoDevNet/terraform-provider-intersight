/*
Cisco Intersight

Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations. The Intersight OpenAPI document defines the complete set of properties that are returned in the HTTP response. From that perspective, a client can expect that no additional properties are returned, unless these properties are explicitly defined in the OpenAPI document. However, when a client uses an older version of the Intersight OpenAPI document, the server may send additional properties because the software is more recent than the client. In that case, the client may receive properties that it does not know about. Some generated SDKs perform a strict validation of the HTTP response body against the OpenAPI document.

API version: 1.0.11-2024100405
Contact: intersight@cisco.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package intersight

import (
	"encoding/json"
	"fmt"
	"reflect"
	"strings"
)

// checks if the PortGroup type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PortGroup{}

// PortGroup Holder for multiple ports. A switch card will have one or more port groups.
type PortGroup struct {
	InventoryBase
	// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.
	ClassId string `json:"ClassId"`
	// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
	ObjectType string `json:"ObjectType"`
	// Type of port group. Values are Eth or Fc.
	Transport               *string                                     `json:"Transport,omitempty"`
	EquipmentSharedIoModule NullableEquipmentSharedIoModuleRelationship `json:"EquipmentSharedIoModule,omitempty"`
	EquipmentSwitchCard     NullableEquipmentSwitchCardRelationship     `json:"EquipmentSwitchCard,omitempty"`
	// An array of relationships to etherPhysicalPort resources.
	EthernetPorts []EtherPhysicalPortRelationship `json:"EthernetPorts,omitempty"`
	// An array of relationships to fcPhysicalPort resources.
	FcPorts             []FcPhysicalPortRelationship                `json:"FcPorts,omitempty"`
	InventoryDeviceInfo NullableInventoryDeviceInfoRelationship     `json:"InventoryDeviceInfo,omitempty"`
	RegisteredDevice    NullableAssetDeviceRegistrationRelationship `json:"RegisteredDevice,omitempty"`
	// An array of relationships to portSubGroup resources.
	SubGroups            []PortSubGroupRelationship `json:"SubGroups,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _PortGroup PortGroup

// NewPortGroup instantiates a new PortGroup object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPortGroup(classId string, objectType string) *PortGroup {
	this := PortGroup{}
	this.ClassId = classId
	this.ObjectType = objectType
	return &this
}

// NewPortGroupWithDefaults instantiates a new PortGroup object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPortGroupWithDefaults() *PortGroup {
	this := PortGroup{}
	var classId string = "port.Group"
	this.ClassId = classId
	var objectType string = "port.Group"
	this.ObjectType = objectType
	return &this
}

// GetClassId returns the ClassId field value
func (o *PortGroup) GetClassId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ClassId
}

// GetClassIdOk returns a tuple with the ClassId field value
// and a boolean to check if the value has been set.
func (o *PortGroup) GetClassIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ClassId, true
}

// SetClassId sets field value
func (o *PortGroup) SetClassId(v string) {
	o.ClassId = v
}

// GetDefaultClassId returns the default value "port.Group" of the ClassId field.
func (o *PortGroup) GetDefaultClassId() interface{} {
	return "port.Group"
}

// GetObjectType returns the ObjectType field value
func (o *PortGroup) GetObjectType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ObjectType
}

// GetObjectTypeOk returns a tuple with the ObjectType field value
// and a boolean to check if the value has been set.
func (o *PortGroup) GetObjectTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ObjectType, true
}

// SetObjectType sets field value
func (o *PortGroup) SetObjectType(v string) {
	o.ObjectType = v
}

// GetDefaultObjectType returns the default value "port.Group" of the ObjectType field.
func (o *PortGroup) GetDefaultObjectType() interface{} {
	return "port.Group"
}

// GetTransport returns the Transport field value if set, zero value otherwise.
func (o *PortGroup) GetTransport() string {
	if o == nil || IsNil(o.Transport) {
		var ret string
		return ret
	}
	return *o.Transport
}

// GetTransportOk returns a tuple with the Transport field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PortGroup) GetTransportOk() (*string, bool) {
	if o == nil || IsNil(o.Transport) {
		return nil, false
	}
	return o.Transport, true
}

// HasTransport returns a boolean if a field has been set.
func (o *PortGroup) HasTransport() bool {
	if o != nil && !IsNil(o.Transport) {
		return true
	}

	return false
}

// SetTransport gets a reference to the given string and assigns it to the Transport field.
func (o *PortGroup) SetTransport(v string) {
	o.Transport = &v
}

// GetEquipmentSharedIoModule returns the EquipmentSharedIoModule field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PortGroup) GetEquipmentSharedIoModule() EquipmentSharedIoModuleRelationship {
	if o == nil || IsNil(o.EquipmentSharedIoModule.Get()) {
		var ret EquipmentSharedIoModuleRelationship
		return ret
	}
	return *o.EquipmentSharedIoModule.Get()
}

// GetEquipmentSharedIoModuleOk returns a tuple with the EquipmentSharedIoModule field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PortGroup) GetEquipmentSharedIoModuleOk() (*EquipmentSharedIoModuleRelationship, bool) {
	if o == nil {
		return nil, false
	}
	return o.EquipmentSharedIoModule.Get(), o.EquipmentSharedIoModule.IsSet()
}

// HasEquipmentSharedIoModule returns a boolean if a field has been set.
func (o *PortGroup) HasEquipmentSharedIoModule() bool {
	if o != nil && o.EquipmentSharedIoModule.IsSet() {
		return true
	}

	return false
}

// SetEquipmentSharedIoModule gets a reference to the given NullableEquipmentSharedIoModuleRelationship and assigns it to the EquipmentSharedIoModule field.
func (o *PortGroup) SetEquipmentSharedIoModule(v EquipmentSharedIoModuleRelationship) {
	o.EquipmentSharedIoModule.Set(&v)
}

// SetEquipmentSharedIoModuleNil sets the value for EquipmentSharedIoModule to be an explicit nil
func (o *PortGroup) SetEquipmentSharedIoModuleNil() {
	o.EquipmentSharedIoModule.Set(nil)
}

// UnsetEquipmentSharedIoModule ensures that no value is present for EquipmentSharedIoModule, not even an explicit nil
func (o *PortGroup) UnsetEquipmentSharedIoModule() {
	o.EquipmentSharedIoModule.Unset()
}

// GetEquipmentSwitchCard returns the EquipmentSwitchCard field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PortGroup) GetEquipmentSwitchCard() EquipmentSwitchCardRelationship {
	if o == nil || IsNil(o.EquipmentSwitchCard.Get()) {
		var ret EquipmentSwitchCardRelationship
		return ret
	}
	return *o.EquipmentSwitchCard.Get()
}

// GetEquipmentSwitchCardOk returns a tuple with the EquipmentSwitchCard field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PortGroup) GetEquipmentSwitchCardOk() (*EquipmentSwitchCardRelationship, bool) {
	if o == nil {
		return nil, false
	}
	return o.EquipmentSwitchCard.Get(), o.EquipmentSwitchCard.IsSet()
}

// HasEquipmentSwitchCard returns a boolean if a field has been set.
func (o *PortGroup) HasEquipmentSwitchCard() bool {
	if o != nil && o.EquipmentSwitchCard.IsSet() {
		return true
	}

	return false
}

// SetEquipmentSwitchCard gets a reference to the given NullableEquipmentSwitchCardRelationship and assigns it to the EquipmentSwitchCard field.
func (o *PortGroup) SetEquipmentSwitchCard(v EquipmentSwitchCardRelationship) {
	o.EquipmentSwitchCard.Set(&v)
}

// SetEquipmentSwitchCardNil sets the value for EquipmentSwitchCard to be an explicit nil
func (o *PortGroup) SetEquipmentSwitchCardNil() {
	o.EquipmentSwitchCard.Set(nil)
}

// UnsetEquipmentSwitchCard ensures that no value is present for EquipmentSwitchCard, not even an explicit nil
func (o *PortGroup) UnsetEquipmentSwitchCard() {
	o.EquipmentSwitchCard.Unset()
}

// GetEthernetPorts returns the EthernetPorts field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PortGroup) GetEthernetPorts() []EtherPhysicalPortRelationship {
	if o == nil {
		var ret []EtherPhysicalPortRelationship
		return ret
	}
	return o.EthernetPorts
}

// GetEthernetPortsOk returns a tuple with the EthernetPorts field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PortGroup) GetEthernetPortsOk() ([]EtherPhysicalPortRelationship, bool) {
	if o == nil || IsNil(o.EthernetPorts) {
		return nil, false
	}
	return o.EthernetPorts, true
}

// HasEthernetPorts returns a boolean if a field has been set.
func (o *PortGroup) HasEthernetPorts() bool {
	if o != nil && !IsNil(o.EthernetPorts) {
		return true
	}

	return false
}

// SetEthernetPorts gets a reference to the given []EtherPhysicalPortRelationship and assigns it to the EthernetPorts field.
func (o *PortGroup) SetEthernetPorts(v []EtherPhysicalPortRelationship) {
	o.EthernetPorts = v
}

// GetFcPorts returns the FcPorts field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PortGroup) GetFcPorts() []FcPhysicalPortRelationship {
	if o == nil {
		var ret []FcPhysicalPortRelationship
		return ret
	}
	return o.FcPorts
}

// GetFcPortsOk returns a tuple with the FcPorts field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PortGroup) GetFcPortsOk() ([]FcPhysicalPortRelationship, bool) {
	if o == nil || IsNil(o.FcPorts) {
		return nil, false
	}
	return o.FcPorts, true
}

// HasFcPorts returns a boolean if a field has been set.
func (o *PortGroup) HasFcPorts() bool {
	if o != nil && !IsNil(o.FcPorts) {
		return true
	}

	return false
}

// SetFcPorts gets a reference to the given []FcPhysicalPortRelationship and assigns it to the FcPorts field.
func (o *PortGroup) SetFcPorts(v []FcPhysicalPortRelationship) {
	o.FcPorts = v
}

// GetInventoryDeviceInfo returns the InventoryDeviceInfo field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PortGroup) GetInventoryDeviceInfo() InventoryDeviceInfoRelationship {
	if o == nil || IsNil(o.InventoryDeviceInfo.Get()) {
		var ret InventoryDeviceInfoRelationship
		return ret
	}
	return *o.InventoryDeviceInfo.Get()
}

// GetInventoryDeviceInfoOk returns a tuple with the InventoryDeviceInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PortGroup) GetInventoryDeviceInfoOk() (*InventoryDeviceInfoRelationship, bool) {
	if o == nil {
		return nil, false
	}
	return o.InventoryDeviceInfo.Get(), o.InventoryDeviceInfo.IsSet()
}

// HasInventoryDeviceInfo returns a boolean if a field has been set.
func (o *PortGroup) HasInventoryDeviceInfo() bool {
	if o != nil && o.InventoryDeviceInfo.IsSet() {
		return true
	}

	return false
}

// SetInventoryDeviceInfo gets a reference to the given NullableInventoryDeviceInfoRelationship and assigns it to the InventoryDeviceInfo field.
func (o *PortGroup) SetInventoryDeviceInfo(v InventoryDeviceInfoRelationship) {
	o.InventoryDeviceInfo.Set(&v)
}

// SetInventoryDeviceInfoNil sets the value for InventoryDeviceInfo to be an explicit nil
func (o *PortGroup) SetInventoryDeviceInfoNil() {
	o.InventoryDeviceInfo.Set(nil)
}

// UnsetInventoryDeviceInfo ensures that no value is present for InventoryDeviceInfo, not even an explicit nil
func (o *PortGroup) UnsetInventoryDeviceInfo() {
	o.InventoryDeviceInfo.Unset()
}

// GetRegisteredDevice returns the RegisteredDevice field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PortGroup) GetRegisteredDevice() AssetDeviceRegistrationRelationship {
	if o == nil || IsNil(o.RegisteredDevice.Get()) {
		var ret AssetDeviceRegistrationRelationship
		return ret
	}
	return *o.RegisteredDevice.Get()
}

// GetRegisteredDeviceOk returns a tuple with the RegisteredDevice field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PortGroup) GetRegisteredDeviceOk() (*AssetDeviceRegistrationRelationship, bool) {
	if o == nil {
		return nil, false
	}
	return o.RegisteredDevice.Get(), o.RegisteredDevice.IsSet()
}

// HasRegisteredDevice returns a boolean if a field has been set.
func (o *PortGroup) HasRegisteredDevice() bool {
	if o != nil && o.RegisteredDevice.IsSet() {
		return true
	}

	return false
}

// SetRegisteredDevice gets a reference to the given NullableAssetDeviceRegistrationRelationship and assigns it to the RegisteredDevice field.
func (o *PortGroup) SetRegisteredDevice(v AssetDeviceRegistrationRelationship) {
	o.RegisteredDevice.Set(&v)
}

// SetRegisteredDeviceNil sets the value for RegisteredDevice to be an explicit nil
func (o *PortGroup) SetRegisteredDeviceNil() {
	o.RegisteredDevice.Set(nil)
}

// UnsetRegisteredDevice ensures that no value is present for RegisteredDevice, not even an explicit nil
func (o *PortGroup) UnsetRegisteredDevice() {
	o.RegisteredDevice.Unset()
}

// GetSubGroups returns the SubGroups field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PortGroup) GetSubGroups() []PortSubGroupRelationship {
	if o == nil {
		var ret []PortSubGroupRelationship
		return ret
	}
	return o.SubGroups
}

// GetSubGroupsOk returns a tuple with the SubGroups field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PortGroup) GetSubGroupsOk() ([]PortSubGroupRelationship, bool) {
	if o == nil || IsNil(o.SubGroups) {
		return nil, false
	}
	return o.SubGroups, true
}

// HasSubGroups returns a boolean if a field has been set.
func (o *PortGroup) HasSubGroups() bool {
	if o != nil && !IsNil(o.SubGroups) {
		return true
	}

	return false
}

// SetSubGroups gets a reference to the given []PortSubGroupRelationship and assigns it to the SubGroups field.
func (o *PortGroup) SetSubGroups(v []PortSubGroupRelationship) {
	o.SubGroups = v
}

func (o PortGroup) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PortGroup) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	serializedInventoryBase, errInventoryBase := json.Marshal(o.InventoryBase)
	if errInventoryBase != nil {
		return map[string]interface{}{}, errInventoryBase
	}
	errInventoryBase = json.Unmarshal([]byte(serializedInventoryBase), &toSerialize)
	if errInventoryBase != nil {
		return map[string]interface{}{}, errInventoryBase
	}
	if _, exists := toSerialize["ClassId"]; !exists {
		toSerialize["ClassId"] = o.GetDefaultClassId()
	}
	toSerialize["ClassId"] = o.ClassId
	if _, exists := toSerialize["ObjectType"]; !exists {
		toSerialize["ObjectType"] = o.GetDefaultObjectType()
	}
	toSerialize["ObjectType"] = o.ObjectType
	if !IsNil(o.Transport) {
		toSerialize["Transport"] = o.Transport
	}
	if o.EquipmentSharedIoModule.IsSet() {
		toSerialize["EquipmentSharedIoModule"] = o.EquipmentSharedIoModule.Get()
	}
	if o.EquipmentSwitchCard.IsSet() {
		toSerialize["EquipmentSwitchCard"] = o.EquipmentSwitchCard.Get()
	}
	if o.EthernetPorts != nil {
		toSerialize["EthernetPorts"] = o.EthernetPorts
	}
	if o.FcPorts != nil {
		toSerialize["FcPorts"] = o.FcPorts
	}
	if o.InventoryDeviceInfo.IsSet() {
		toSerialize["InventoryDeviceInfo"] = o.InventoryDeviceInfo.Get()
	}
	if o.RegisteredDevice.IsSet() {
		toSerialize["RegisteredDevice"] = o.RegisteredDevice.Get()
	}
	if o.SubGroups != nil {
		toSerialize["SubGroups"] = o.SubGroups
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *PortGroup) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"ClassId",
		"ObjectType",
	}

	// defaultValueFuncMap captures the default values for required properties.
	// These values are used when required properties are missing from the payload.
	defaultValueFuncMap := map[string]func() interface{}{
		"ClassId":    o.GetDefaultClassId,
		"ObjectType": o.GetDefaultObjectType,
	}
	var defaultValueApplied bool
	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			if _, ok := defaultValueFuncMap[requiredProperty]; ok {
				allProperties[requiredProperty] = defaultValueFuncMap[requiredProperty]()
				defaultValueApplied = true
			}
		}
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	if defaultValueApplied {
		data, err = json.Marshal(allProperties)
		if err != nil {
			return err
		}
	}
	type PortGroupWithoutEmbeddedStruct struct {
		// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.
		ClassId string `json:"ClassId"`
		// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
		ObjectType string `json:"ObjectType"`
		// Type of port group. Values are Eth or Fc.
		Transport               *string                                     `json:"Transport,omitempty"`
		EquipmentSharedIoModule NullableEquipmentSharedIoModuleRelationship `json:"EquipmentSharedIoModule,omitempty"`
		EquipmentSwitchCard     NullableEquipmentSwitchCardRelationship     `json:"EquipmentSwitchCard,omitempty"`
		// An array of relationships to etherPhysicalPort resources.
		EthernetPorts []EtherPhysicalPortRelationship `json:"EthernetPorts,omitempty"`
		// An array of relationships to fcPhysicalPort resources.
		FcPorts             []FcPhysicalPortRelationship                `json:"FcPorts,omitempty"`
		InventoryDeviceInfo NullableInventoryDeviceInfoRelationship     `json:"InventoryDeviceInfo,omitempty"`
		RegisteredDevice    NullableAssetDeviceRegistrationRelationship `json:"RegisteredDevice,omitempty"`
		// An array of relationships to portSubGroup resources.
		SubGroups []PortSubGroupRelationship `json:"SubGroups,omitempty"`
	}

	varPortGroupWithoutEmbeddedStruct := PortGroupWithoutEmbeddedStruct{}

	err = json.Unmarshal(data, &varPortGroupWithoutEmbeddedStruct)
	if err == nil {
		varPortGroup := _PortGroup{}
		varPortGroup.ClassId = varPortGroupWithoutEmbeddedStruct.ClassId
		varPortGroup.ObjectType = varPortGroupWithoutEmbeddedStruct.ObjectType
		varPortGroup.Transport = varPortGroupWithoutEmbeddedStruct.Transport
		varPortGroup.EquipmentSharedIoModule = varPortGroupWithoutEmbeddedStruct.EquipmentSharedIoModule
		varPortGroup.EquipmentSwitchCard = varPortGroupWithoutEmbeddedStruct.EquipmentSwitchCard
		varPortGroup.EthernetPorts = varPortGroupWithoutEmbeddedStruct.EthernetPorts
		varPortGroup.FcPorts = varPortGroupWithoutEmbeddedStruct.FcPorts
		varPortGroup.InventoryDeviceInfo = varPortGroupWithoutEmbeddedStruct.InventoryDeviceInfo
		varPortGroup.RegisteredDevice = varPortGroupWithoutEmbeddedStruct.RegisteredDevice
		varPortGroup.SubGroups = varPortGroupWithoutEmbeddedStruct.SubGroups
		*o = PortGroup(varPortGroup)
	} else {
		return err
	}

	varPortGroup := _PortGroup{}

	err = json.Unmarshal(data, &varPortGroup)
	if err == nil {
		o.InventoryBase = varPortGroup.InventoryBase
	} else {
		return err
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "ClassId")
		delete(additionalProperties, "ObjectType")
		delete(additionalProperties, "Transport")
		delete(additionalProperties, "EquipmentSharedIoModule")
		delete(additionalProperties, "EquipmentSwitchCard")
		delete(additionalProperties, "EthernetPorts")
		delete(additionalProperties, "FcPorts")
		delete(additionalProperties, "InventoryDeviceInfo")
		delete(additionalProperties, "RegisteredDevice")
		delete(additionalProperties, "SubGroups")

		// remove fields from embedded structs
		reflectInventoryBase := reflect.ValueOf(o.InventoryBase)
		for i := 0; i < reflectInventoryBase.Type().NumField(); i++ {
			t := reflectInventoryBase.Type().Field(i)

			if jsonTag := t.Tag.Get("json"); jsonTag != "" {
				fieldName := ""
				if commaIdx := strings.Index(jsonTag, ","); commaIdx > 0 {
					fieldName = jsonTag[:commaIdx]
				} else {
					fieldName = jsonTag
				}
				if fieldName != "AdditionalProperties" {
					delete(additionalProperties, fieldName)
				}
			}
		}

		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullablePortGroup struct {
	value *PortGroup
	isSet bool
}

func (v NullablePortGroup) Get() *PortGroup {
	return v.value
}

func (v *NullablePortGroup) Set(val *PortGroup) {
	v.value = val
	v.isSet = true
}

func (v NullablePortGroup) IsSet() bool {
	return v.isSet
}

func (v *NullablePortGroup) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePortGroup(val *PortGroup) *NullablePortGroup {
	return &NullablePortGroup{value: val, isSet: true}
}

func (v NullablePortGroup) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePortGroup) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
