/*
Cisco Intersight

Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations. The Intersight OpenAPI document defines the complete set of properties that are returned in the HTTP response. From that perspective, a client can expect that no additional properties are returned, unless these properties are explicitly defined in the OpenAPI document. However, when a client uses an older version of the Intersight OpenAPI document, the server may send additional properties because the software is more recent than the client. In that case, the client may receive properties that it does not know about. Some generated SDKs perform a strict validation of the HTTP response body against the OpenAPI document.

API version: 1.0.11-11765
Contact: intersight@cisco.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package intersight

import (
	"encoding/json"
	"reflect"
	"strings"
)

// StorageNetAppNfsClient A currently connected NFS client.
type StorageNetAppNfsClient struct {
	MoBaseMo
	// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.
	ClassId string `json:"ClassId"`
	// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
	ObjectType string `json:"ObjectType"`
	// Specifies IP address of the client.
	ClientIp *string `json:"ClientIp,omitempty"`
	// Specifies an ISO-8601 format of date and time to retrieve the idle time duration in hours, minutes, and seconds format.
	IdleDuration *string `json:"IdleDuration,omitempty"`
	// The NFS protocol version over which client is accessing the volume.
	Protocol *string `json:"Protocol,omitempty"`
	// Specifies IP address of the server.
	ServerIp *string `json:"ServerIp,omitempty"`
	// The storage virtual machine name for the NFS client.
	SvmName *string `json:"SvmName,omitempty"`
	// Unique identifier for the NetApp Storage Virtual Machine.
	SvmUuid *string `json:"SvmUuid,omitempty"`
	// The parent volume name for the NFS client.
	VolumeName *string `json:"VolumeName,omitempty"`
	// Unique identifier for the NetApp Volume.
	VolumeUuid           *string                             `json:"VolumeUuid,omitempty"`
	StorageContainer     *StorageNetAppVolumeRelationship    `json:"StorageContainer,omitempty"`
	Tenant               *StorageNetAppStorageVmRelationship `json:"Tenant,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _StorageNetAppNfsClient StorageNetAppNfsClient

// NewStorageNetAppNfsClient instantiates a new StorageNetAppNfsClient object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStorageNetAppNfsClient(classId string, objectType string) *StorageNetAppNfsClient {
	this := StorageNetAppNfsClient{}
	this.ClassId = classId
	this.ObjectType = objectType
	return &this
}

// NewStorageNetAppNfsClientWithDefaults instantiates a new StorageNetAppNfsClient object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStorageNetAppNfsClientWithDefaults() *StorageNetAppNfsClient {
	this := StorageNetAppNfsClient{}
	var classId string = "storage.NetAppNfsClient"
	this.ClassId = classId
	var objectType string = "storage.NetAppNfsClient"
	this.ObjectType = objectType
	return &this
}

// GetClassId returns the ClassId field value
func (o *StorageNetAppNfsClient) GetClassId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ClassId
}

// GetClassIdOk returns a tuple with the ClassId field value
// and a boolean to check if the value has been set.
func (o *StorageNetAppNfsClient) GetClassIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ClassId, true
}

// SetClassId sets field value
func (o *StorageNetAppNfsClient) SetClassId(v string) {
	o.ClassId = v
}

// GetObjectType returns the ObjectType field value
func (o *StorageNetAppNfsClient) GetObjectType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ObjectType
}

// GetObjectTypeOk returns a tuple with the ObjectType field value
// and a boolean to check if the value has been set.
func (o *StorageNetAppNfsClient) GetObjectTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ObjectType, true
}

// SetObjectType sets field value
func (o *StorageNetAppNfsClient) SetObjectType(v string) {
	o.ObjectType = v
}

// GetClientIp returns the ClientIp field value if set, zero value otherwise.
func (o *StorageNetAppNfsClient) GetClientIp() string {
	if o == nil || o.ClientIp == nil {
		var ret string
		return ret
	}
	return *o.ClientIp
}

// GetClientIpOk returns a tuple with the ClientIp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageNetAppNfsClient) GetClientIpOk() (*string, bool) {
	if o == nil || o.ClientIp == nil {
		return nil, false
	}
	return o.ClientIp, true
}

// HasClientIp returns a boolean if a field has been set.
func (o *StorageNetAppNfsClient) HasClientIp() bool {
	if o != nil && o.ClientIp != nil {
		return true
	}

	return false
}

// SetClientIp gets a reference to the given string and assigns it to the ClientIp field.
func (o *StorageNetAppNfsClient) SetClientIp(v string) {
	o.ClientIp = &v
}

// GetIdleDuration returns the IdleDuration field value if set, zero value otherwise.
func (o *StorageNetAppNfsClient) GetIdleDuration() string {
	if o == nil || o.IdleDuration == nil {
		var ret string
		return ret
	}
	return *o.IdleDuration
}

// GetIdleDurationOk returns a tuple with the IdleDuration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageNetAppNfsClient) GetIdleDurationOk() (*string, bool) {
	if o == nil || o.IdleDuration == nil {
		return nil, false
	}
	return o.IdleDuration, true
}

// HasIdleDuration returns a boolean if a field has been set.
func (o *StorageNetAppNfsClient) HasIdleDuration() bool {
	if o != nil && o.IdleDuration != nil {
		return true
	}

	return false
}

// SetIdleDuration gets a reference to the given string and assigns it to the IdleDuration field.
func (o *StorageNetAppNfsClient) SetIdleDuration(v string) {
	o.IdleDuration = &v
}

// GetProtocol returns the Protocol field value if set, zero value otherwise.
func (o *StorageNetAppNfsClient) GetProtocol() string {
	if o == nil || o.Protocol == nil {
		var ret string
		return ret
	}
	return *o.Protocol
}

// GetProtocolOk returns a tuple with the Protocol field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageNetAppNfsClient) GetProtocolOk() (*string, bool) {
	if o == nil || o.Protocol == nil {
		return nil, false
	}
	return o.Protocol, true
}

// HasProtocol returns a boolean if a field has been set.
func (o *StorageNetAppNfsClient) HasProtocol() bool {
	if o != nil && o.Protocol != nil {
		return true
	}

	return false
}

// SetProtocol gets a reference to the given string and assigns it to the Protocol field.
func (o *StorageNetAppNfsClient) SetProtocol(v string) {
	o.Protocol = &v
}

// GetServerIp returns the ServerIp field value if set, zero value otherwise.
func (o *StorageNetAppNfsClient) GetServerIp() string {
	if o == nil || o.ServerIp == nil {
		var ret string
		return ret
	}
	return *o.ServerIp
}

// GetServerIpOk returns a tuple with the ServerIp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageNetAppNfsClient) GetServerIpOk() (*string, bool) {
	if o == nil || o.ServerIp == nil {
		return nil, false
	}
	return o.ServerIp, true
}

// HasServerIp returns a boolean if a field has been set.
func (o *StorageNetAppNfsClient) HasServerIp() bool {
	if o != nil && o.ServerIp != nil {
		return true
	}

	return false
}

// SetServerIp gets a reference to the given string and assigns it to the ServerIp field.
func (o *StorageNetAppNfsClient) SetServerIp(v string) {
	o.ServerIp = &v
}

// GetSvmName returns the SvmName field value if set, zero value otherwise.
func (o *StorageNetAppNfsClient) GetSvmName() string {
	if o == nil || o.SvmName == nil {
		var ret string
		return ret
	}
	return *o.SvmName
}

// GetSvmNameOk returns a tuple with the SvmName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageNetAppNfsClient) GetSvmNameOk() (*string, bool) {
	if o == nil || o.SvmName == nil {
		return nil, false
	}
	return o.SvmName, true
}

// HasSvmName returns a boolean if a field has been set.
func (o *StorageNetAppNfsClient) HasSvmName() bool {
	if o != nil && o.SvmName != nil {
		return true
	}

	return false
}

// SetSvmName gets a reference to the given string and assigns it to the SvmName field.
func (o *StorageNetAppNfsClient) SetSvmName(v string) {
	o.SvmName = &v
}

// GetSvmUuid returns the SvmUuid field value if set, zero value otherwise.
func (o *StorageNetAppNfsClient) GetSvmUuid() string {
	if o == nil || o.SvmUuid == nil {
		var ret string
		return ret
	}
	return *o.SvmUuid
}

// GetSvmUuidOk returns a tuple with the SvmUuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageNetAppNfsClient) GetSvmUuidOk() (*string, bool) {
	if o == nil || o.SvmUuid == nil {
		return nil, false
	}
	return o.SvmUuid, true
}

// HasSvmUuid returns a boolean if a field has been set.
func (o *StorageNetAppNfsClient) HasSvmUuid() bool {
	if o != nil && o.SvmUuid != nil {
		return true
	}

	return false
}

// SetSvmUuid gets a reference to the given string and assigns it to the SvmUuid field.
func (o *StorageNetAppNfsClient) SetSvmUuid(v string) {
	o.SvmUuid = &v
}

// GetVolumeName returns the VolumeName field value if set, zero value otherwise.
func (o *StorageNetAppNfsClient) GetVolumeName() string {
	if o == nil || o.VolumeName == nil {
		var ret string
		return ret
	}
	return *o.VolumeName
}

// GetVolumeNameOk returns a tuple with the VolumeName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageNetAppNfsClient) GetVolumeNameOk() (*string, bool) {
	if o == nil || o.VolumeName == nil {
		return nil, false
	}
	return o.VolumeName, true
}

// HasVolumeName returns a boolean if a field has been set.
func (o *StorageNetAppNfsClient) HasVolumeName() bool {
	if o != nil && o.VolumeName != nil {
		return true
	}

	return false
}

// SetVolumeName gets a reference to the given string and assigns it to the VolumeName field.
func (o *StorageNetAppNfsClient) SetVolumeName(v string) {
	o.VolumeName = &v
}

// GetVolumeUuid returns the VolumeUuid field value if set, zero value otherwise.
func (o *StorageNetAppNfsClient) GetVolumeUuid() string {
	if o == nil || o.VolumeUuid == nil {
		var ret string
		return ret
	}
	return *o.VolumeUuid
}

// GetVolumeUuidOk returns a tuple with the VolumeUuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageNetAppNfsClient) GetVolumeUuidOk() (*string, bool) {
	if o == nil || o.VolumeUuid == nil {
		return nil, false
	}
	return o.VolumeUuid, true
}

// HasVolumeUuid returns a boolean if a field has been set.
func (o *StorageNetAppNfsClient) HasVolumeUuid() bool {
	if o != nil && o.VolumeUuid != nil {
		return true
	}

	return false
}

// SetVolumeUuid gets a reference to the given string and assigns it to the VolumeUuid field.
func (o *StorageNetAppNfsClient) SetVolumeUuid(v string) {
	o.VolumeUuid = &v
}

// GetStorageContainer returns the StorageContainer field value if set, zero value otherwise.
func (o *StorageNetAppNfsClient) GetStorageContainer() StorageNetAppVolumeRelationship {
	if o == nil || o.StorageContainer == nil {
		var ret StorageNetAppVolumeRelationship
		return ret
	}
	return *o.StorageContainer
}

// GetStorageContainerOk returns a tuple with the StorageContainer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageNetAppNfsClient) GetStorageContainerOk() (*StorageNetAppVolumeRelationship, bool) {
	if o == nil || o.StorageContainer == nil {
		return nil, false
	}
	return o.StorageContainer, true
}

// HasStorageContainer returns a boolean if a field has been set.
func (o *StorageNetAppNfsClient) HasStorageContainer() bool {
	if o != nil && o.StorageContainer != nil {
		return true
	}

	return false
}

// SetStorageContainer gets a reference to the given StorageNetAppVolumeRelationship and assigns it to the StorageContainer field.
func (o *StorageNetAppNfsClient) SetStorageContainer(v StorageNetAppVolumeRelationship) {
	o.StorageContainer = &v
}

// GetTenant returns the Tenant field value if set, zero value otherwise.
func (o *StorageNetAppNfsClient) GetTenant() StorageNetAppStorageVmRelationship {
	if o == nil || o.Tenant == nil {
		var ret StorageNetAppStorageVmRelationship
		return ret
	}
	return *o.Tenant
}

// GetTenantOk returns a tuple with the Tenant field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageNetAppNfsClient) GetTenantOk() (*StorageNetAppStorageVmRelationship, bool) {
	if o == nil || o.Tenant == nil {
		return nil, false
	}
	return o.Tenant, true
}

// HasTenant returns a boolean if a field has been set.
func (o *StorageNetAppNfsClient) HasTenant() bool {
	if o != nil && o.Tenant != nil {
		return true
	}

	return false
}

// SetTenant gets a reference to the given StorageNetAppStorageVmRelationship and assigns it to the Tenant field.
func (o *StorageNetAppNfsClient) SetTenant(v StorageNetAppStorageVmRelationship) {
	o.Tenant = &v
}

func (o StorageNetAppNfsClient) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	serializedMoBaseMo, errMoBaseMo := json.Marshal(o.MoBaseMo)
	if errMoBaseMo != nil {
		return []byte{}, errMoBaseMo
	}
	errMoBaseMo = json.Unmarshal([]byte(serializedMoBaseMo), &toSerialize)
	if errMoBaseMo != nil {
		return []byte{}, errMoBaseMo
	}
	if true {
		toSerialize["ClassId"] = o.ClassId
	}
	if true {
		toSerialize["ObjectType"] = o.ObjectType
	}
	if o.ClientIp != nil {
		toSerialize["ClientIp"] = o.ClientIp
	}
	if o.IdleDuration != nil {
		toSerialize["IdleDuration"] = o.IdleDuration
	}
	if o.Protocol != nil {
		toSerialize["Protocol"] = o.Protocol
	}
	if o.ServerIp != nil {
		toSerialize["ServerIp"] = o.ServerIp
	}
	if o.SvmName != nil {
		toSerialize["SvmName"] = o.SvmName
	}
	if o.SvmUuid != nil {
		toSerialize["SvmUuid"] = o.SvmUuid
	}
	if o.VolumeName != nil {
		toSerialize["VolumeName"] = o.VolumeName
	}
	if o.VolumeUuid != nil {
		toSerialize["VolumeUuid"] = o.VolumeUuid
	}
	if o.StorageContainer != nil {
		toSerialize["StorageContainer"] = o.StorageContainer
	}
	if o.Tenant != nil {
		toSerialize["Tenant"] = o.Tenant
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *StorageNetAppNfsClient) UnmarshalJSON(bytes []byte) (err error) {
	type StorageNetAppNfsClientWithoutEmbeddedStruct struct {
		// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.
		ClassId string `json:"ClassId"`
		// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
		ObjectType string `json:"ObjectType"`
		// Specifies IP address of the client.
		ClientIp *string `json:"ClientIp,omitempty"`
		// Specifies an ISO-8601 format of date and time to retrieve the idle time duration in hours, minutes, and seconds format.
		IdleDuration *string `json:"IdleDuration,omitempty"`
		// The NFS protocol version over which client is accessing the volume.
		Protocol *string `json:"Protocol,omitempty"`
		// Specifies IP address of the server.
		ServerIp *string `json:"ServerIp,omitempty"`
		// The storage virtual machine name for the NFS client.
		SvmName *string `json:"SvmName,omitempty"`
		// Unique identifier for the NetApp Storage Virtual Machine.
		SvmUuid *string `json:"SvmUuid,omitempty"`
		// The parent volume name for the NFS client.
		VolumeName *string `json:"VolumeName,omitempty"`
		// Unique identifier for the NetApp Volume.
		VolumeUuid       *string                             `json:"VolumeUuid,omitempty"`
		StorageContainer *StorageNetAppVolumeRelationship    `json:"StorageContainer,omitempty"`
		Tenant           *StorageNetAppStorageVmRelationship `json:"Tenant,omitempty"`
	}

	varStorageNetAppNfsClientWithoutEmbeddedStruct := StorageNetAppNfsClientWithoutEmbeddedStruct{}

	err = json.Unmarshal(bytes, &varStorageNetAppNfsClientWithoutEmbeddedStruct)
	if err == nil {
		varStorageNetAppNfsClient := _StorageNetAppNfsClient{}
		varStorageNetAppNfsClient.ClassId = varStorageNetAppNfsClientWithoutEmbeddedStruct.ClassId
		varStorageNetAppNfsClient.ObjectType = varStorageNetAppNfsClientWithoutEmbeddedStruct.ObjectType
		varStorageNetAppNfsClient.ClientIp = varStorageNetAppNfsClientWithoutEmbeddedStruct.ClientIp
		varStorageNetAppNfsClient.IdleDuration = varStorageNetAppNfsClientWithoutEmbeddedStruct.IdleDuration
		varStorageNetAppNfsClient.Protocol = varStorageNetAppNfsClientWithoutEmbeddedStruct.Protocol
		varStorageNetAppNfsClient.ServerIp = varStorageNetAppNfsClientWithoutEmbeddedStruct.ServerIp
		varStorageNetAppNfsClient.SvmName = varStorageNetAppNfsClientWithoutEmbeddedStruct.SvmName
		varStorageNetAppNfsClient.SvmUuid = varStorageNetAppNfsClientWithoutEmbeddedStruct.SvmUuid
		varStorageNetAppNfsClient.VolumeName = varStorageNetAppNfsClientWithoutEmbeddedStruct.VolumeName
		varStorageNetAppNfsClient.VolumeUuid = varStorageNetAppNfsClientWithoutEmbeddedStruct.VolumeUuid
		varStorageNetAppNfsClient.StorageContainer = varStorageNetAppNfsClientWithoutEmbeddedStruct.StorageContainer
		varStorageNetAppNfsClient.Tenant = varStorageNetAppNfsClientWithoutEmbeddedStruct.Tenant
		*o = StorageNetAppNfsClient(varStorageNetAppNfsClient)
	} else {
		return err
	}

	varStorageNetAppNfsClient := _StorageNetAppNfsClient{}

	err = json.Unmarshal(bytes, &varStorageNetAppNfsClient)
	if err == nil {
		o.MoBaseMo = varStorageNetAppNfsClient.MoBaseMo
	} else {
		return err
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "ClassId")
		delete(additionalProperties, "ObjectType")
		delete(additionalProperties, "ClientIp")
		delete(additionalProperties, "IdleDuration")
		delete(additionalProperties, "Protocol")
		delete(additionalProperties, "ServerIp")
		delete(additionalProperties, "SvmName")
		delete(additionalProperties, "SvmUuid")
		delete(additionalProperties, "VolumeName")
		delete(additionalProperties, "VolumeUuid")
		delete(additionalProperties, "StorageContainer")
		delete(additionalProperties, "Tenant")

		// remove fields from embedded structs
		reflectMoBaseMo := reflect.ValueOf(o.MoBaseMo)
		for i := 0; i < reflectMoBaseMo.Type().NumField(); i++ {
			t := reflectMoBaseMo.Type().Field(i)

			if jsonTag := t.Tag.Get("json"); jsonTag != "" {
				fieldName := ""
				if commaIdx := strings.Index(jsonTag, ","); commaIdx > 0 {
					fieldName = jsonTag[:commaIdx]
				} else {
					fieldName = jsonTag
				}
				if fieldName != "AdditionalProperties" {
					delete(additionalProperties, fieldName)
				}
			}
		}

		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableStorageNetAppNfsClient struct {
	value *StorageNetAppNfsClient
	isSet bool
}

func (v NullableStorageNetAppNfsClient) Get() *StorageNetAppNfsClient {
	return v.value
}

func (v *NullableStorageNetAppNfsClient) Set(val *StorageNetAppNfsClient) {
	v.value = val
	v.isSet = true
}

func (v NullableStorageNetAppNfsClient) IsSet() bool {
	return v.isSet
}

func (v *NullableStorageNetAppNfsClient) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStorageNetAppNfsClient(val *StorageNetAppNfsClient) *NullableStorageNetAppNfsClient {
	return &NullableStorageNetAppNfsClient{value: val, isSet: true}
}

func (v NullableStorageNetAppNfsClient) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStorageNetAppNfsClient) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
