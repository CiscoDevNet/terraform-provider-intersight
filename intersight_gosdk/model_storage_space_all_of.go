/*
Cisco Intersight

Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations. The Intersight OpenAPI document defines the complete set of properties that are returned in the HTTP response. From that perspective, a client can expect that no additional properties are returned, unless these properties are explicitly defined in the OpenAPI document. However, when a client uses an older version of the Intersight OpenAPI document, the server may send additional properties because the software is more recent than the client. In that case, the client may receive properties that it does not know about. Some generated SDKs perform a strict validation of the HTTP response body against the OpenAPI document.

API version: 1.0.11-13376
Contact: intersight@cisco.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package intersight

import (
	"encoding/json"
)

// StorageSpaceAllOf Definition of the list of properties defined in 'storage.Space', excluding properties defined in parent classes.
type StorageSpaceAllOf struct {
	// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.
	ClassId string `json:"ClassId"`
	// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
	ObjectType string `json:"ObjectType"`
	// Starting location of the LBA of the partition in the external parity group (in a multiple of 512 bytes).
	LbaLocation *string `json:"LbaLocation,omitempty"`
	// Size of the partition in the external parity group (in a multiple of 512 bytes).
	LbaSize *string `json:"LbaSize,omitempty"`
	// LDEV number, property is output only if LDEV has been implemented.
	LdevId *string `json:"LdevId,omitempty"`
	// Number of a partition created as a result of partitioning of an external parity group.
	PartitionNumber *int64 `json:"PartitionNumber,omitempty"`
	// Status about LDEV for partition.
	Status               *string `json:"Status,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _StorageSpaceAllOf StorageSpaceAllOf

// NewStorageSpaceAllOf instantiates a new StorageSpaceAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStorageSpaceAllOf(classId string, objectType string) *StorageSpaceAllOf {
	this := StorageSpaceAllOf{}
	this.ClassId = classId
	this.ObjectType = objectType
	return &this
}

// NewStorageSpaceAllOfWithDefaults instantiates a new StorageSpaceAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStorageSpaceAllOfWithDefaults() *StorageSpaceAllOf {
	this := StorageSpaceAllOf{}
	var classId string = "storage.Space"
	this.ClassId = classId
	var objectType string = "storage.Space"
	this.ObjectType = objectType
	return &this
}

// GetClassId returns the ClassId field value
func (o *StorageSpaceAllOf) GetClassId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ClassId
}

// GetClassIdOk returns a tuple with the ClassId field value
// and a boolean to check if the value has been set.
func (o *StorageSpaceAllOf) GetClassIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ClassId, true
}

// SetClassId sets field value
func (o *StorageSpaceAllOf) SetClassId(v string) {
	o.ClassId = v
}

// GetObjectType returns the ObjectType field value
func (o *StorageSpaceAllOf) GetObjectType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ObjectType
}

// GetObjectTypeOk returns a tuple with the ObjectType field value
// and a boolean to check if the value has been set.
func (o *StorageSpaceAllOf) GetObjectTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ObjectType, true
}

// SetObjectType sets field value
func (o *StorageSpaceAllOf) SetObjectType(v string) {
	o.ObjectType = v
}

// GetLbaLocation returns the LbaLocation field value if set, zero value otherwise.
func (o *StorageSpaceAllOf) GetLbaLocation() string {
	if o == nil || o.LbaLocation == nil {
		var ret string
		return ret
	}
	return *o.LbaLocation
}

// GetLbaLocationOk returns a tuple with the LbaLocation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageSpaceAllOf) GetLbaLocationOk() (*string, bool) {
	if o == nil || o.LbaLocation == nil {
		return nil, false
	}
	return o.LbaLocation, true
}

// HasLbaLocation returns a boolean if a field has been set.
func (o *StorageSpaceAllOf) HasLbaLocation() bool {
	if o != nil && o.LbaLocation != nil {
		return true
	}

	return false
}

// SetLbaLocation gets a reference to the given string and assigns it to the LbaLocation field.
func (o *StorageSpaceAllOf) SetLbaLocation(v string) {
	o.LbaLocation = &v
}

// GetLbaSize returns the LbaSize field value if set, zero value otherwise.
func (o *StorageSpaceAllOf) GetLbaSize() string {
	if o == nil || o.LbaSize == nil {
		var ret string
		return ret
	}
	return *o.LbaSize
}

// GetLbaSizeOk returns a tuple with the LbaSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageSpaceAllOf) GetLbaSizeOk() (*string, bool) {
	if o == nil || o.LbaSize == nil {
		return nil, false
	}
	return o.LbaSize, true
}

// HasLbaSize returns a boolean if a field has been set.
func (o *StorageSpaceAllOf) HasLbaSize() bool {
	if o != nil && o.LbaSize != nil {
		return true
	}

	return false
}

// SetLbaSize gets a reference to the given string and assigns it to the LbaSize field.
func (o *StorageSpaceAllOf) SetLbaSize(v string) {
	o.LbaSize = &v
}

// GetLdevId returns the LdevId field value if set, zero value otherwise.
func (o *StorageSpaceAllOf) GetLdevId() string {
	if o == nil || o.LdevId == nil {
		var ret string
		return ret
	}
	return *o.LdevId
}

// GetLdevIdOk returns a tuple with the LdevId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageSpaceAllOf) GetLdevIdOk() (*string, bool) {
	if o == nil || o.LdevId == nil {
		return nil, false
	}
	return o.LdevId, true
}

// HasLdevId returns a boolean if a field has been set.
func (o *StorageSpaceAllOf) HasLdevId() bool {
	if o != nil && o.LdevId != nil {
		return true
	}

	return false
}

// SetLdevId gets a reference to the given string and assigns it to the LdevId field.
func (o *StorageSpaceAllOf) SetLdevId(v string) {
	o.LdevId = &v
}

// GetPartitionNumber returns the PartitionNumber field value if set, zero value otherwise.
func (o *StorageSpaceAllOf) GetPartitionNumber() int64 {
	if o == nil || o.PartitionNumber == nil {
		var ret int64
		return ret
	}
	return *o.PartitionNumber
}

// GetPartitionNumberOk returns a tuple with the PartitionNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageSpaceAllOf) GetPartitionNumberOk() (*int64, bool) {
	if o == nil || o.PartitionNumber == nil {
		return nil, false
	}
	return o.PartitionNumber, true
}

// HasPartitionNumber returns a boolean if a field has been set.
func (o *StorageSpaceAllOf) HasPartitionNumber() bool {
	if o != nil && o.PartitionNumber != nil {
		return true
	}

	return false
}

// SetPartitionNumber gets a reference to the given int64 and assigns it to the PartitionNumber field.
func (o *StorageSpaceAllOf) SetPartitionNumber(v int64) {
	o.PartitionNumber = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *StorageSpaceAllOf) GetStatus() string {
	if o == nil || o.Status == nil {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageSpaceAllOf) GetStatusOk() (*string, bool) {
	if o == nil || o.Status == nil {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *StorageSpaceAllOf) HasStatus() bool {
	if o != nil && o.Status != nil {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *StorageSpaceAllOf) SetStatus(v string) {
	o.Status = &v
}

func (o StorageSpaceAllOf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["ClassId"] = o.ClassId
	}
	if true {
		toSerialize["ObjectType"] = o.ObjectType
	}
	if o.LbaLocation != nil {
		toSerialize["LbaLocation"] = o.LbaLocation
	}
	if o.LbaSize != nil {
		toSerialize["LbaSize"] = o.LbaSize
	}
	if o.LdevId != nil {
		toSerialize["LdevId"] = o.LdevId
	}
	if o.PartitionNumber != nil {
		toSerialize["PartitionNumber"] = o.PartitionNumber
	}
	if o.Status != nil {
		toSerialize["Status"] = o.Status
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *StorageSpaceAllOf) UnmarshalJSON(bytes []byte) (err error) {
	varStorageSpaceAllOf := _StorageSpaceAllOf{}

	if err = json.Unmarshal(bytes, &varStorageSpaceAllOf); err == nil {
		*o = StorageSpaceAllOf(varStorageSpaceAllOf)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "ClassId")
		delete(additionalProperties, "ObjectType")
		delete(additionalProperties, "LbaLocation")
		delete(additionalProperties, "LbaSize")
		delete(additionalProperties, "LdevId")
		delete(additionalProperties, "PartitionNumber")
		delete(additionalProperties, "Status")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableStorageSpaceAllOf struct {
	value *StorageSpaceAllOf
	isSet bool
}

func (v NullableStorageSpaceAllOf) Get() *StorageSpaceAllOf {
	return v.value
}

func (v *NullableStorageSpaceAllOf) Set(val *StorageSpaceAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableStorageSpaceAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableStorageSpaceAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStorageSpaceAllOf(val *StorageSpaceAllOf) *NullableStorageSpaceAllOf {
	return &NullableStorageSpaceAllOf{value: val, isSet: true}
}

func (v NullableStorageSpaceAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStorageSpaceAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
