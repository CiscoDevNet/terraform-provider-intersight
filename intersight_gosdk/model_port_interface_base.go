/*
Cisco Intersight

Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations. The Intersight OpenAPI document defines the complete set of properties that are returned in the HTTP response. From that perspective, a client can expect that no additional properties are returned, unless these properties are explicitly defined in the OpenAPI document. However, when a client uses an older version of the Intersight OpenAPI document, the server may send additional properties because the software is more recent than the client. In that case, the client may receive properties that it does not know about. Some generated SDKs perform a strict validation of the HTTP response body against the OpenAPI document.

API version: 1.0.11-2024100405
Contact: intersight@cisco.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package intersight

import (
	"encoding/json"
	"fmt"
	"reflect"
	"strings"
)

// checks if the PortInterfaceBase type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PortInterfaceBase{}

// PortInterfaceBase Abstract Interface Base class for a virtual interface card/Fex Network Port.
type PortInterfaceBase struct {
	InventoryBase
	// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data. The enum values provides the list of concrete types that can be instantiated from this abstract type.
	ClassId string `json:"ClassId"`
	// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property. The enum values provides the list of concrete types that can be instantiated from this abstract type.
	ObjectType string `json:"ObjectType"`
	// Operational state of an Interface.
	OperState                 *string                                   `json:"OperState,omitempty"`
	AcknowledgedPeerInterface NullableEtherPhysicalPortBaseRelationship `json:"AcknowledgedPeerInterface,omitempty"`
	PeerInterface             NullableEtherPhysicalPortBaseRelationship `json:"PeerInterface,omitempty"`
	AdditionalProperties      map[string]interface{}
}

type _PortInterfaceBase PortInterfaceBase

// NewPortInterfaceBase instantiates a new PortInterfaceBase object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPortInterfaceBase(classId string, objectType string) *PortInterfaceBase {
	this := PortInterfaceBase{}
	this.ClassId = classId
	this.ObjectType = objectType
	return &this
}

// NewPortInterfaceBaseWithDefaults instantiates a new PortInterfaceBase object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPortInterfaceBaseWithDefaults() *PortInterfaceBase {
	this := PortInterfaceBase{}
	return &this
}

// GetClassId returns the ClassId field value
func (o *PortInterfaceBase) GetClassId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ClassId
}

// GetClassIdOk returns a tuple with the ClassId field value
// and a boolean to check if the value has been set.
func (o *PortInterfaceBase) GetClassIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ClassId, true
}

// SetClassId sets field value
func (o *PortInterfaceBase) SetClassId(v string) {
	o.ClassId = v
}

// GetObjectType returns the ObjectType field value
func (o *PortInterfaceBase) GetObjectType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ObjectType
}

// GetObjectTypeOk returns a tuple with the ObjectType field value
// and a boolean to check if the value has been set.
func (o *PortInterfaceBase) GetObjectTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ObjectType, true
}

// SetObjectType sets field value
func (o *PortInterfaceBase) SetObjectType(v string) {
	o.ObjectType = v
}

// GetOperState returns the OperState field value if set, zero value otherwise.
func (o *PortInterfaceBase) GetOperState() string {
	if o == nil || IsNil(o.OperState) {
		var ret string
		return ret
	}
	return *o.OperState
}

// GetOperStateOk returns a tuple with the OperState field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PortInterfaceBase) GetOperStateOk() (*string, bool) {
	if o == nil || IsNil(o.OperState) {
		return nil, false
	}
	return o.OperState, true
}

// HasOperState returns a boolean if a field has been set.
func (o *PortInterfaceBase) HasOperState() bool {
	if o != nil && !IsNil(o.OperState) {
		return true
	}

	return false
}

// SetOperState gets a reference to the given string and assigns it to the OperState field.
func (o *PortInterfaceBase) SetOperState(v string) {
	o.OperState = &v
}

// GetAcknowledgedPeerInterface returns the AcknowledgedPeerInterface field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PortInterfaceBase) GetAcknowledgedPeerInterface() EtherPhysicalPortBaseRelationship {
	if o == nil || IsNil(o.AcknowledgedPeerInterface.Get()) {
		var ret EtherPhysicalPortBaseRelationship
		return ret
	}
	return *o.AcknowledgedPeerInterface.Get()
}

// GetAcknowledgedPeerInterfaceOk returns a tuple with the AcknowledgedPeerInterface field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PortInterfaceBase) GetAcknowledgedPeerInterfaceOk() (*EtherPhysicalPortBaseRelationship, bool) {
	if o == nil {
		return nil, false
	}
	return o.AcknowledgedPeerInterface.Get(), o.AcknowledgedPeerInterface.IsSet()
}

// HasAcknowledgedPeerInterface returns a boolean if a field has been set.
func (o *PortInterfaceBase) HasAcknowledgedPeerInterface() bool {
	if o != nil && o.AcknowledgedPeerInterface.IsSet() {
		return true
	}

	return false
}

// SetAcknowledgedPeerInterface gets a reference to the given NullableEtherPhysicalPortBaseRelationship and assigns it to the AcknowledgedPeerInterface field.
func (o *PortInterfaceBase) SetAcknowledgedPeerInterface(v EtherPhysicalPortBaseRelationship) {
	o.AcknowledgedPeerInterface.Set(&v)
}

// SetAcknowledgedPeerInterfaceNil sets the value for AcknowledgedPeerInterface to be an explicit nil
func (o *PortInterfaceBase) SetAcknowledgedPeerInterfaceNil() {
	o.AcknowledgedPeerInterface.Set(nil)
}

// UnsetAcknowledgedPeerInterface ensures that no value is present for AcknowledgedPeerInterface, not even an explicit nil
func (o *PortInterfaceBase) UnsetAcknowledgedPeerInterface() {
	o.AcknowledgedPeerInterface.Unset()
}

// GetPeerInterface returns the PeerInterface field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PortInterfaceBase) GetPeerInterface() EtherPhysicalPortBaseRelationship {
	if o == nil || IsNil(o.PeerInterface.Get()) {
		var ret EtherPhysicalPortBaseRelationship
		return ret
	}
	return *o.PeerInterface.Get()
}

// GetPeerInterfaceOk returns a tuple with the PeerInterface field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PortInterfaceBase) GetPeerInterfaceOk() (*EtherPhysicalPortBaseRelationship, bool) {
	if o == nil {
		return nil, false
	}
	return o.PeerInterface.Get(), o.PeerInterface.IsSet()
}

// HasPeerInterface returns a boolean if a field has been set.
func (o *PortInterfaceBase) HasPeerInterface() bool {
	if o != nil && o.PeerInterface.IsSet() {
		return true
	}

	return false
}

// SetPeerInterface gets a reference to the given NullableEtherPhysicalPortBaseRelationship and assigns it to the PeerInterface field.
func (o *PortInterfaceBase) SetPeerInterface(v EtherPhysicalPortBaseRelationship) {
	o.PeerInterface.Set(&v)
}

// SetPeerInterfaceNil sets the value for PeerInterface to be an explicit nil
func (o *PortInterfaceBase) SetPeerInterfaceNil() {
	o.PeerInterface.Set(nil)
}

// UnsetPeerInterface ensures that no value is present for PeerInterface, not even an explicit nil
func (o *PortInterfaceBase) UnsetPeerInterface() {
	o.PeerInterface.Unset()
}

func (o PortInterfaceBase) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PortInterfaceBase) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	serializedInventoryBase, errInventoryBase := json.Marshal(o.InventoryBase)
	if errInventoryBase != nil {
		return map[string]interface{}{}, errInventoryBase
	}
	errInventoryBase = json.Unmarshal([]byte(serializedInventoryBase), &toSerialize)
	if errInventoryBase != nil {
		return map[string]interface{}{}, errInventoryBase
	}
	toSerialize["ClassId"] = o.ClassId
	toSerialize["ObjectType"] = o.ObjectType
	if !IsNil(o.OperState) {
		toSerialize["OperState"] = o.OperState
	}
	if o.AcknowledgedPeerInterface.IsSet() {
		toSerialize["AcknowledgedPeerInterface"] = o.AcknowledgedPeerInterface.Get()
	}
	if o.PeerInterface.IsSet() {
		toSerialize["PeerInterface"] = o.PeerInterface.Get()
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *PortInterfaceBase) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"ClassId",
		"ObjectType",
	}

	// defaultValueFuncMap captures the default values for required properties.
	// These values are used when required properties are missing from the payload.
	defaultValueFuncMap := map[string]func() interface{}{}
	var defaultValueApplied bool
	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			if _, ok := defaultValueFuncMap[requiredProperty]; ok {
				allProperties[requiredProperty] = defaultValueFuncMap[requiredProperty]()
				defaultValueApplied = true
			}
		}
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	if defaultValueApplied {
		data, err = json.Marshal(allProperties)
		if err != nil {
			return err
		}
	}
	type PortInterfaceBaseWithoutEmbeddedStruct struct {
		// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data. The enum values provides the list of concrete types that can be instantiated from this abstract type.
		ClassId string `json:"ClassId"`
		// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property. The enum values provides the list of concrete types that can be instantiated from this abstract type.
		ObjectType string `json:"ObjectType"`
		// Operational state of an Interface.
		OperState                 *string                                   `json:"OperState,omitempty"`
		AcknowledgedPeerInterface NullableEtherPhysicalPortBaseRelationship `json:"AcknowledgedPeerInterface,omitempty"`
		PeerInterface             NullableEtherPhysicalPortBaseRelationship `json:"PeerInterface,omitempty"`
	}

	varPortInterfaceBaseWithoutEmbeddedStruct := PortInterfaceBaseWithoutEmbeddedStruct{}

	err = json.Unmarshal(data, &varPortInterfaceBaseWithoutEmbeddedStruct)
	if err == nil {
		varPortInterfaceBase := _PortInterfaceBase{}
		varPortInterfaceBase.ClassId = varPortInterfaceBaseWithoutEmbeddedStruct.ClassId
		varPortInterfaceBase.ObjectType = varPortInterfaceBaseWithoutEmbeddedStruct.ObjectType
		varPortInterfaceBase.OperState = varPortInterfaceBaseWithoutEmbeddedStruct.OperState
		varPortInterfaceBase.AcknowledgedPeerInterface = varPortInterfaceBaseWithoutEmbeddedStruct.AcknowledgedPeerInterface
		varPortInterfaceBase.PeerInterface = varPortInterfaceBaseWithoutEmbeddedStruct.PeerInterface
		*o = PortInterfaceBase(varPortInterfaceBase)
	} else {
		return err
	}

	varPortInterfaceBase := _PortInterfaceBase{}

	err = json.Unmarshal(data, &varPortInterfaceBase)
	if err == nil {
		o.InventoryBase = varPortInterfaceBase.InventoryBase
	} else {
		return err
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "ClassId")
		delete(additionalProperties, "ObjectType")
		delete(additionalProperties, "OperState")
		delete(additionalProperties, "AcknowledgedPeerInterface")
		delete(additionalProperties, "PeerInterface")

		// remove fields from embedded structs
		reflectInventoryBase := reflect.ValueOf(o.InventoryBase)
		for i := 0; i < reflectInventoryBase.Type().NumField(); i++ {
			t := reflectInventoryBase.Type().Field(i)

			if jsonTag := t.Tag.Get("json"); jsonTag != "" {
				fieldName := ""
				if commaIdx := strings.Index(jsonTag, ","); commaIdx > 0 {
					fieldName = jsonTag[:commaIdx]
				} else {
					fieldName = jsonTag
				}
				if fieldName != "AdditionalProperties" {
					delete(additionalProperties, fieldName)
				}
			}
		}

		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullablePortInterfaceBase struct {
	value *PortInterfaceBase
	isSet bool
}

func (v NullablePortInterfaceBase) Get() *PortInterfaceBase {
	return v.value
}

func (v *NullablePortInterfaceBase) Set(val *PortInterfaceBase) {
	v.value = val
	v.isSet = true
}

func (v NullablePortInterfaceBase) IsSet() bool {
	return v.isSet
}

func (v *NullablePortInterfaceBase) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePortInterfaceBase(val *PortInterfaceBase) *NullablePortInterfaceBase {
	return &NullablePortInterfaceBase{value: val, isSet: true}
}

func (v NullablePortInterfaceBase) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePortInterfaceBase) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
