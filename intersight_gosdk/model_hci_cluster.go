/*
Cisco Intersight

Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations. The Intersight OpenAPI document defines the complete set of properties that are returned in the HTTP response. From that perspective, a client can expect that no additional properties are returned, unless these properties are explicitly defined in the OpenAPI document. However, when a client uses an older version of the Intersight OpenAPI document, the server may send additional properties because the software is more recent than the client. In that case, the client may receive properties that it does not know about. Some generated SDKs perform a strict validation of the HTTP response body against the OpenAPI document.

API version: 1.0.11-2024120409
Contact: intersight@cisco.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package intersight

import (
	"encoding/json"
	"fmt"
	"reflect"
	"strings"
)

// checks if the HciCluster type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &HciCluster{}

// HciCluster A HCI cluster reported by Prism Central.
type HciCluster struct {
	MoBaseMo
	// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.
	ClassId string `json:"ClassId"`
	// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
	ObjectType   string                            `json:"ObjectType"`
	AlarmSummary NullableHciAlarmSummary           `json:"AlarmSummary,omitempty"`
	Backplane    NullableHciBackplaneNetworkParams `json:"Backplane,omitempty"`
	// The software build type, such as \"release\" or \"debug\" build.
	BuildInfoBuildType *string `json:"BuildInfoBuildType,omitempty"`
	// The software commit id for this build image.
	BuildInfoCommitId *string `json:"BuildInfoCommitId,omitempty"`
	// The longer form of software version. It usually includes the commit id.
	BuildInfoFullVersion *string `json:"BuildInfoFullVersion,omitempty"`
	// The short version of the software commit id for this build image.
	BuildInfoShortCommitId *string `json:"BuildInfoShortCommitId,omitempty"`
	// The software version from the build.
	BuildInfoVersion *string `json:"BuildInfoVersion,omitempty"`
	// The CPU architecture of the cluster server such as x86_64 and PPC64LE.
	ClusterArch *string `json:"ClusterArch,omitempty"`
	// The unique identifier of the cluster.
	ClusterExtId       *string           `json:"ClusterExtId,omitempty"`
	ClusterFunction    []string          `json:"ClusterFunction,omitempty"`
	ClusterSoftwareMap []HciSoftwareType `json:"ClusterSoftwareMap,omitempty"`
	// The name of the default container created as part of cluster creation.
	ContainerName *string `json:"ContainerName,omitempty"`
	// The CPU capacity in Hz of the cluster.
	CpuCapacityHz *int64 `json:"CpuCapacityHz,omitempty"`
	// The CPU usage in Hz of the cluster.
	CpuUsageHz *int64 `json:"CpuUsageHz,omitempty"`
	// Indicate if encryption-in-transit is enabled or not.
	EncryptionInTransitStatus *bool                `json:"EncryptionInTransitStatus,omitempty"`
	EncryptionScope           []string             `json:"EncryptionScope,omitempty"`
	ExternalAddress           NullableHciIpAddress `json:"ExternalAddress,omitempty"`
	ExternalDataServiceIp     NullableHciIpAddress `json:"ExternalDataServiceIp,omitempty"`
	// The external subnet of the cluster.
	ExternalSubnet      *string                        `json:"ExternalSubnet,omitempty"`
	FaultToleranceState NullableHciFaultToleranceState `json:"FaultToleranceState,omitempty"`
	HypervisorTypes     []string                       `json:"HypervisorTypes,omitempty"`
	// Cluster incarnation Id, part of payload for cluster update operation only.
	Incarnationid *string `json:"Incarnationid,omitempty"`
	// The number of inefficient VMs in this cluster.
	InefficientVmCount *int64 `json:"InefficientVmCount,omitempty"`
	// The internal subnet of the cluster.
	InternalSubnet *string `json:"InternalSubnet,omitempty"`
	// The LTS status indicates whether the release is categorized as Long-term or not.
	IsLts *bool `json:"IsLts,omitempty"`
	// The key management server type of the cluster.
	KeyManagementServerType *string                     `json:"KeyManagementServerType,omitempty"`
	ManagementServer        NullableHciManagementServer `json:"ManagementServer,omitempty"`
	MasqueradingIp          NullableHciIpAddress        `json:"MasqueradingIp,omitempty"`
	// The masquerading port of the cluster.
	MasqueradingPort *int32 `json:"MasqueradingPort,omitempty"`
	// The memory capacity in bytes of the cluster.
	MemoryCapacityBytes *int64 `json:"MemoryCapacityBytes,omitempty"`
	// The memory usage in bytes of the cluster.
	MemoryUsageBytes *int64 `json:"MemoryUsageBytes,omitempty"`
	// The name of the reported cluster.
	Name             *string              `json:"Name,omitempty"`
	NameServerIpList []HciIpAddressOrFqdn `json:"NameServerIpList,omitempty"`
	NtpServerIpList  []HciIpAddressOrFqdn `json:"NtpServerIpList,omitempty"`
	// The number of nodes in the cluster.
	NumberOfNodes *int32 `json:"NumberOfNodes,omitempty"`
	// The operation mode of the cluster such as NORMAL, READ_ONLY, STAND_ALONE, SWITCH_TO_TWO_NODE, OVERRIDE.
	OperationMode *string `json:"OperationMode,omitempty"`
	// Indicates whether the password ssh into the cluster is enabled or not.
	PasswordRemoteLoginEnabled *bool `json:"PasswordRemoteLoginEnabled,omitempty"`
	// The unique identifier of the domain manager (Prism Central) instance which manages this cluster.
	PcExtId     *string                `json:"PcExtId,omitempty"`
	PulseStatus NullableHciPulseStatus `json:"PulseStatus,omitempty"`
	// The redundancy factor of the cluster.
	RedundancyFactor *int64 `json:"RedundancyFactor,omitempty"`
	// The remote support status of the cluster.
	RemoteSupport *bool `json:"RemoteSupport,omitempty"`
	// The storage capacity in bytes of the cluster.
	StorageCapacityBytes *int64 `json:"StorageCapacityBytes,omitempty"`
	// The storage usage in bytes of the cluster.
	StorageUsageBytes *int64 `json:"StorageUsageBytes,omitempty"`
	// The timezone of the cluster.
	Timezone *string `json:"Timezone,omitempty"`
	// The upgrade status of a cluster includes the following known values: PENDING, DOWNLOADING, QUEUED, PREUPGRADE, UPGRADING, SUCCEEDED, FAILED, CANCELLED, and SCHEDULED.The upgrade status of a cluster.
	UpgradeStatus *string `json:"UpgradeStatus,omitempty"`
	// The number of VMs running on this cluster.
	VmCount       *int64                               `json:"VmCount,omitempty"`
	Compliance    NullableHciComplianceRelationship    `json:"Compliance,omitempty"`
	DomainManager NullableHciDomainManagerRelationship `json:"DomainManager,omitempty"`
	Entitlement   NullableHciEntitlementRelationship   `json:"Entitlement,omitempty"`
	// An array of relationships to hciNode resources.
	Nodes                []HciNodeRelationship                       `json:"Nodes,omitempty"`
	RegisteredDevice     NullableAssetDeviceRegistrationRelationship `json:"RegisteredDevice,omitempty"`
	Violation            NullableHciViolationRelationship            `json:"Violation,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _HciCluster HciCluster

// NewHciCluster instantiates a new HciCluster object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHciCluster(classId string, objectType string) *HciCluster {
	this := HciCluster{}
	this.ClassId = classId
	this.ObjectType = objectType
	return &this
}

// NewHciClusterWithDefaults instantiates a new HciCluster object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHciClusterWithDefaults() *HciCluster {
	this := HciCluster{}
	var classId string = "hci.Cluster"
	this.ClassId = classId
	var objectType string = "hci.Cluster"
	this.ObjectType = objectType
	return &this
}

// GetClassId returns the ClassId field value
func (o *HciCluster) GetClassId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ClassId
}

// GetClassIdOk returns a tuple with the ClassId field value
// and a boolean to check if the value has been set.
func (o *HciCluster) GetClassIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ClassId, true
}

// SetClassId sets field value
func (o *HciCluster) SetClassId(v string) {
	o.ClassId = v
}

// GetDefaultClassId returns the default value "hci.Cluster" of the ClassId field.
func (o *HciCluster) GetDefaultClassId() interface{} {
	return "hci.Cluster"
}

// GetObjectType returns the ObjectType field value
func (o *HciCluster) GetObjectType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ObjectType
}

// GetObjectTypeOk returns a tuple with the ObjectType field value
// and a boolean to check if the value has been set.
func (o *HciCluster) GetObjectTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ObjectType, true
}

// SetObjectType sets field value
func (o *HciCluster) SetObjectType(v string) {
	o.ObjectType = v
}

// GetDefaultObjectType returns the default value "hci.Cluster" of the ObjectType field.
func (o *HciCluster) GetDefaultObjectType() interface{} {
	return "hci.Cluster"
}

// GetAlarmSummary returns the AlarmSummary field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HciCluster) GetAlarmSummary() HciAlarmSummary {
	if o == nil || IsNil(o.AlarmSummary.Get()) {
		var ret HciAlarmSummary
		return ret
	}
	return *o.AlarmSummary.Get()
}

// GetAlarmSummaryOk returns a tuple with the AlarmSummary field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HciCluster) GetAlarmSummaryOk() (*HciAlarmSummary, bool) {
	if o == nil {
		return nil, false
	}
	return o.AlarmSummary.Get(), o.AlarmSummary.IsSet()
}

// HasAlarmSummary returns a boolean if a field has been set.
func (o *HciCluster) HasAlarmSummary() bool {
	if o != nil && o.AlarmSummary.IsSet() {
		return true
	}

	return false
}

// SetAlarmSummary gets a reference to the given NullableHciAlarmSummary and assigns it to the AlarmSummary field.
func (o *HciCluster) SetAlarmSummary(v HciAlarmSummary) {
	o.AlarmSummary.Set(&v)
}

// SetAlarmSummaryNil sets the value for AlarmSummary to be an explicit nil
func (o *HciCluster) SetAlarmSummaryNil() {
	o.AlarmSummary.Set(nil)
}

// UnsetAlarmSummary ensures that no value is present for AlarmSummary, not even an explicit nil
func (o *HciCluster) UnsetAlarmSummary() {
	o.AlarmSummary.Unset()
}

// GetBackplane returns the Backplane field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HciCluster) GetBackplane() HciBackplaneNetworkParams {
	if o == nil || IsNil(o.Backplane.Get()) {
		var ret HciBackplaneNetworkParams
		return ret
	}
	return *o.Backplane.Get()
}

// GetBackplaneOk returns a tuple with the Backplane field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HciCluster) GetBackplaneOk() (*HciBackplaneNetworkParams, bool) {
	if o == nil {
		return nil, false
	}
	return o.Backplane.Get(), o.Backplane.IsSet()
}

// HasBackplane returns a boolean if a field has been set.
func (o *HciCluster) HasBackplane() bool {
	if o != nil && o.Backplane.IsSet() {
		return true
	}

	return false
}

// SetBackplane gets a reference to the given NullableHciBackplaneNetworkParams and assigns it to the Backplane field.
func (o *HciCluster) SetBackplane(v HciBackplaneNetworkParams) {
	o.Backplane.Set(&v)
}

// SetBackplaneNil sets the value for Backplane to be an explicit nil
func (o *HciCluster) SetBackplaneNil() {
	o.Backplane.Set(nil)
}

// UnsetBackplane ensures that no value is present for Backplane, not even an explicit nil
func (o *HciCluster) UnsetBackplane() {
	o.Backplane.Unset()
}

// GetBuildInfoBuildType returns the BuildInfoBuildType field value if set, zero value otherwise.
func (o *HciCluster) GetBuildInfoBuildType() string {
	if o == nil || IsNil(o.BuildInfoBuildType) {
		var ret string
		return ret
	}
	return *o.BuildInfoBuildType
}

// GetBuildInfoBuildTypeOk returns a tuple with the BuildInfoBuildType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HciCluster) GetBuildInfoBuildTypeOk() (*string, bool) {
	if o == nil || IsNil(o.BuildInfoBuildType) {
		return nil, false
	}
	return o.BuildInfoBuildType, true
}

// HasBuildInfoBuildType returns a boolean if a field has been set.
func (o *HciCluster) HasBuildInfoBuildType() bool {
	if o != nil && !IsNil(o.BuildInfoBuildType) {
		return true
	}

	return false
}

// SetBuildInfoBuildType gets a reference to the given string and assigns it to the BuildInfoBuildType field.
func (o *HciCluster) SetBuildInfoBuildType(v string) {
	o.BuildInfoBuildType = &v
}

// GetBuildInfoCommitId returns the BuildInfoCommitId field value if set, zero value otherwise.
func (o *HciCluster) GetBuildInfoCommitId() string {
	if o == nil || IsNil(o.BuildInfoCommitId) {
		var ret string
		return ret
	}
	return *o.BuildInfoCommitId
}

// GetBuildInfoCommitIdOk returns a tuple with the BuildInfoCommitId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HciCluster) GetBuildInfoCommitIdOk() (*string, bool) {
	if o == nil || IsNil(o.BuildInfoCommitId) {
		return nil, false
	}
	return o.BuildInfoCommitId, true
}

// HasBuildInfoCommitId returns a boolean if a field has been set.
func (o *HciCluster) HasBuildInfoCommitId() bool {
	if o != nil && !IsNil(o.BuildInfoCommitId) {
		return true
	}

	return false
}

// SetBuildInfoCommitId gets a reference to the given string and assigns it to the BuildInfoCommitId field.
func (o *HciCluster) SetBuildInfoCommitId(v string) {
	o.BuildInfoCommitId = &v
}

// GetBuildInfoFullVersion returns the BuildInfoFullVersion field value if set, zero value otherwise.
func (o *HciCluster) GetBuildInfoFullVersion() string {
	if o == nil || IsNil(o.BuildInfoFullVersion) {
		var ret string
		return ret
	}
	return *o.BuildInfoFullVersion
}

// GetBuildInfoFullVersionOk returns a tuple with the BuildInfoFullVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HciCluster) GetBuildInfoFullVersionOk() (*string, bool) {
	if o == nil || IsNil(o.BuildInfoFullVersion) {
		return nil, false
	}
	return o.BuildInfoFullVersion, true
}

// HasBuildInfoFullVersion returns a boolean if a field has been set.
func (o *HciCluster) HasBuildInfoFullVersion() bool {
	if o != nil && !IsNil(o.BuildInfoFullVersion) {
		return true
	}

	return false
}

// SetBuildInfoFullVersion gets a reference to the given string and assigns it to the BuildInfoFullVersion field.
func (o *HciCluster) SetBuildInfoFullVersion(v string) {
	o.BuildInfoFullVersion = &v
}

// GetBuildInfoShortCommitId returns the BuildInfoShortCommitId field value if set, zero value otherwise.
func (o *HciCluster) GetBuildInfoShortCommitId() string {
	if o == nil || IsNil(o.BuildInfoShortCommitId) {
		var ret string
		return ret
	}
	return *o.BuildInfoShortCommitId
}

// GetBuildInfoShortCommitIdOk returns a tuple with the BuildInfoShortCommitId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HciCluster) GetBuildInfoShortCommitIdOk() (*string, bool) {
	if o == nil || IsNil(o.BuildInfoShortCommitId) {
		return nil, false
	}
	return o.BuildInfoShortCommitId, true
}

// HasBuildInfoShortCommitId returns a boolean if a field has been set.
func (o *HciCluster) HasBuildInfoShortCommitId() bool {
	if o != nil && !IsNil(o.BuildInfoShortCommitId) {
		return true
	}

	return false
}

// SetBuildInfoShortCommitId gets a reference to the given string and assigns it to the BuildInfoShortCommitId field.
func (o *HciCluster) SetBuildInfoShortCommitId(v string) {
	o.BuildInfoShortCommitId = &v
}

// GetBuildInfoVersion returns the BuildInfoVersion field value if set, zero value otherwise.
func (o *HciCluster) GetBuildInfoVersion() string {
	if o == nil || IsNil(o.BuildInfoVersion) {
		var ret string
		return ret
	}
	return *o.BuildInfoVersion
}

// GetBuildInfoVersionOk returns a tuple with the BuildInfoVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HciCluster) GetBuildInfoVersionOk() (*string, bool) {
	if o == nil || IsNil(o.BuildInfoVersion) {
		return nil, false
	}
	return o.BuildInfoVersion, true
}

// HasBuildInfoVersion returns a boolean if a field has been set.
func (o *HciCluster) HasBuildInfoVersion() bool {
	if o != nil && !IsNil(o.BuildInfoVersion) {
		return true
	}

	return false
}

// SetBuildInfoVersion gets a reference to the given string and assigns it to the BuildInfoVersion field.
func (o *HciCluster) SetBuildInfoVersion(v string) {
	o.BuildInfoVersion = &v
}

// GetClusterArch returns the ClusterArch field value if set, zero value otherwise.
func (o *HciCluster) GetClusterArch() string {
	if o == nil || IsNil(o.ClusterArch) {
		var ret string
		return ret
	}
	return *o.ClusterArch
}

// GetClusterArchOk returns a tuple with the ClusterArch field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HciCluster) GetClusterArchOk() (*string, bool) {
	if o == nil || IsNil(o.ClusterArch) {
		return nil, false
	}
	return o.ClusterArch, true
}

// HasClusterArch returns a boolean if a field has been set.
func (o *HciCluster) HasClusterArch() bool {
	if o != nil && !IsNil(o.ClusterArch) {
		return true
	}

	return false
}

// SetClusterArch gets a reference to the given string and assigns it to the ClusterArch field.
func (o *HciCluster) SetClusterArch(v string) {
	o.ClusterArch = &v
}

// GetClusterExtId returns the ClusterExtId field value if set, zero value otherwise.
func (o *HciCluster) GetClusterExtId() string {
	if o == nil || IsNil(o.ClusterExtId) {
		var ret string
		return ret
	}
	return *o.ClusterExtId
}

// GetClusterExtIdOk returns a tuple with the ClusterExtId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HciCluster) GetClusterExtIdOk() (*string, bool) {
	if o == nil || IsNil(o.ClusterExtId) {
		return nil, false
	}
	return o.ClusterExtId, true
}

// HasClusterExtId returns a boolean if a field has been set.
func (o *HciCluster) HasClusterExtId() bool {
	if o != nil && !IsNil(o.ClusterExtId) {
		return true
	}

	return false
}

// SetClusterExtId gets a reference to the given string and assigns it to the ClusterExtId field.
func (o *HciCluster) SetClusterExtId(v string) {
	o.ClusterExtId = &v
}

// GetClusterFunction returns the ClusterFunction field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HciCluster) GetClusterFunction() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.ClusterFunction
}

// GetClusterFunctionOk returns a tuple with the ClusterFunction field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HciCluster) GetClusterFunctionOk() ([]string, bool) {
	if o == nil || IsNil(o.ClusterFunction) {
		return nil, false
	}
	return o.ClusterFunction, true
}

// HasClusterFunction returns a boolean if a field has been set.
func (o *HciCluster) HasClusterFunction() bool {
	if o != nil && !IsNil(o.ClusterFunction) {
		return true
	}

	return false
}

// SetClusterFunction gets a reference to the given []string and assigns it to the ClusterFunction field.
func (o *HciCluster) SetClusterFunction(v []string) {
	o.ClusterFunction = v
}

// GetClusterSoftwareMap returns the ClusterSoftwareMap field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HciCluster) GetClusterSoftwareMap() []HciSoftwareType {
	if o == nil {
		var ret []HciSoftwareType
		return ret
	}
	return o.ClusterSoftwareMap
}

// GetClusterSoftwareMapOk returns a tuple with the ClusterSoftwareMap field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HciCluster) GetClusterSoftwareMapOk() ([]HciSoftwareType, bool) {
	if o == nil || IsNil(o.ClusterSoftwareMap) {
		return nil, false
	}
	return o.ClusterSoftwareMap, true
}

// HasClusterSoftwareMap returns a boolean if a field has been set.
func (o *HciCluster) HasClusterSoftwareMap() bool {
	if o != nil && !IsNil(o.ClusterSoftwareMap) {
		return true
	}

	return false
}

// SetClusterSoftwareMap gets a reference to the given []HciSoftwareType and assigns it to the ClusterSoftwareMap field.
func (o *HciCluster) SetClusterSoftwareMap(v []HciSoftwareType) {
	o.ClusterSoftwareMap = v
}

// GetContainerName returns the ContainerName field value if set, zero value otherwise.
func (o *HciCluster) GetContainerName() string {
	if o == nil || IsNil(o.ContainerName) {
		var ret string
		return ret
	}
	return *o.ContainerName
}

// GetContainerNameOk returns a tuple with the ContainerName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HciCluster) GetContainerNameOk() (*string, bool) {
	if o == nil || IsNil(o.ContainerName) {
		return nil, false
	}
	return o.ContainerName, true
}

// HasContainerName returns a boolean if a field has been set.
func (o *HciCluster) HasContainerName() bool {
	if o != nil && !IsNil(o.ContainerName) {
		return true
	}

	return false
}

// SetContainerName gets a reference to the given string and assigns it to the ContainerName field.
func (o *HciCluster) SetContainerName(v string) {
	o.ContainerName = &v
}

// GetCpuCapacityHz returns the CpuCapacityHz field value if set, zero value otherwise.
func (o *HciCluster) GetCpuCapacityHz() int64 {
	if o == nil || IsNil(o.CpuCapacityHz) {
		var ret int64
		return ret
	}
	return *o.CpuCapacityHz
}

// GetCpuCapacityHzOk returns a tuple with the CpuCapacityHz field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HciCluster) GetCpuCapacityHzOk() (*int64, bool) {
	if o == nil || IsNil(o.CpuCapacityHz) {
		return nil, false
	}
	return o.CpuCapacityHz, true
}

// HasCpuCapacityHz returns a boolean if a field has been set.
func (o *HciCluster) HasCpuCapacityHz() bool {
	if o != nil && !IsNil(o.CpuCapacityHz) {
		return true
	}

	return false
}

// SetCpuCapacityHz gets a reference to the given int64 and assigns it to the CpuCapacityHz field.
func (o *HciCluster) SetCpuCapacityHz(v int64) {
	o.CpuCapacityHz = &v
}

// GetCpuUsageHz returns the CpuUsageHz field value if set, zero value otherwise.
func (o *HciCluster) GetCpuUsageHz() int64 {
	if o == nil || IsNil(o.CpuUsageHz) {
		var ret int64
		return ret
	}
	return *o.CpuUsageHz
}

// GetCpuUsageHzOk returns a tuple with the CpuUsageHz field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HciCluster) GetCpuUsageHzOk() (*int64, bool) {
	if o == nil || IsNil(o.CpuUsageHz) {
		return nil, false
	}
	return o.CpuUsageHz, true
}

// HasCpuUsageHz returns a boolean if a field has been set.
func (o *HciCluster) HasCpuUsageHz() bool {
	if o != nil && !IsNil(o.CpuUsageHz) {
		return true
	}

	return false
}

// SetCpuUsageHz gets a reference to the given int64 and assigns it to the CpuUsageHz field.
func (o *HciCluster) SetCpuUsageHz(v int64) {
	o.CpuUsageHz = &v
}

// GetEncryptionInTransitStatus returns the EncryptionInTransitStatus field value if set, zero value otherwise.
func (o *HciCluster) GetEncryptionInTransitStatus() bool {
	if o == nil || IsNil(o.EncryptionInTransitStatus) {
		var ret bool
		return ret
	}
	return *o.EncryptionInTransitStatus
}

// GetEncryptionInTransitStatusOk returns a tuple with the EncryptionInTransitStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HciCluster) GetEncryptionInTransitStatusOk() (*bool, bool) {
	if o == nil || IsNil(o.EncryptionInTransitStatus) {
		return nil, false
	}
	return o.EncryptionInTransitStatus, true
}

// HasEncryptionInTransitStatus returns a boolean if a field has been set.
func (o *HciCluster) HasEncryptionInTransitStatus() bool {
	if o != nil && !IsNil(o.EncryptionInTransitStatus) {
		return true
	}

	return false
}

// SetEncryptionInTransitStatus gets a reference to the given bool and assigns it to the EncryptionInTransitStatus field.
func (o *HciCluster) SetEncryptionInTransitStatus(v bool) {
	o.EncryptionInTransitStatus = &v
}

// GetEncryptionScope returns the EncryptionScope field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HciCluster) GetEncryptionScope() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.EncryptionScope
}

// GetEncryptionScopeOk returns a tuple with the EncryptionScope field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HciCluster) GetEncryptionScopeOk() ([]string, bool) {
	if o == nil || IsNil(o.EncryptionScope) {
		return nil, false
	}
	return o.EncryptionScope, true
}

// HasEncryptionScope returns a boolean if a field has been set.
func (o *HciCluster) HasEncryptionScope() bool {
	if o != nil && !IsNil(o.EncryptionScope) {
		return true
	}

	return false
}

// SetEncryptionScope gets a reference to the given []string and assigns it to the EncryptionScope field.
func (o *HciCluster) SetEncryptionScope(v []string) {
	o.EncryptionScope = v
}

// GetExternalAddress returns the ExternalAddress field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HciCluster) GetExternalAddress() HciIpAddress {
	if o == nil || IsNil(o.ExternalAddress.Get()) {
		var ret HciIpAddress
		return ret
	}
	return *o.ExternalAddress.Get()
}

// GetExternalAddressOk returns a tuple with the ExternalAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HciCluster) GetExternalAddressOk() (*HciIpAddress, bool) {
	if o == nil {
		return nil, false
	}
	return o.ExternalAddress.Get(), o.ExternalAddress.IsSet()
}

// HasExternalAddress returns a boolean if a field has been set.
func (o *HciCluster) HasExternalAddress() bool {
	if o != nil && o.ExternalAddress.IsSet() {
		return true
	}

	return false
}

// SetExternalAddress gets a reference to the given NullableHciIpAddress and assigns it to the ExternalAddress field.
func (o *HciCluster) SetExternalAddress(v HciIpAddress) {
	o.ExternalAddress.Set(&v)
}

// SetExternalAddressNil sets the value for ExternalAddress to be an explicit nil
func (o *HciCluster) SetExternalAddressNil() {
	o.ExternalAddress.Set(nil)
}

// UnsetExternalAddress ensures that no value is present for ExternalAddress, not even an explicit nil
func (o *HciCluster) UnsetExternalAddress() {
	o.ExternalAddress.Unset()
}

// GetExternalDataServiceIp returns the ExternalDataServiceIp field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HciCluster) GetExternalDataServiceIp() HciIpAddress {
	if o == nil || IsNil(o.ExternalDataServiceIp.Get()) {
		var ret HciIpAddress
		return ret
	}
	return *o.ExternalDataServiceIp.Get()
}

// GetExternalDataServiceIpOk returns a tuple with the ExternalDataServiceIp field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HciCluster) GetExternalDataServiceIpOk() (*HciIpAddress, bool) {
	if o == nil {
		return nil, false
	}
	return o.ExternalDataServiceIp.Get(), o.ExternalDataServiceIp.IsSet()
}

// HasExternalDataServiceIp returns a boolean if a field has been set.
func (o *HciCluster) HasExternalDataServiceIp() bool {
	if o != nil && o.ExternalDataServiceIp.IsSet() {
		return true
	}

	return false
}

// SetExternalDataServiceIp gets a reference to the given NullableHciIpAddress and assigns it to the ExternalDataServiceIp field.
func (o *HciCluster) SetExternalDataServiceIp(v HciIpAddress) {
	o.ExternalDataServiceIp.Set(&v)
}

// SetExternalDataServiceIpNil sets the value for ExternalDataServiceIp to be an explicit nil
func (o *HciCluster) SetExternalDataServiceIpNil() {
	o.ExternalDataServiceIp.Set(nil)
}

// UnsetExternalDataServiceIp ensures that no value is present for ExternalDataServiceIp, not even an explicit nil
func (o *HciCluster) UnsetExternalDataServiceIp() {
	o.ExternalDataServiceIp.Unset()
}

// GetExternalSubnet returns the ExternalSubnet field value if set, zero value otherwise.
func (o *HciCluster) GetExternalSubnet() string {
	if o == nil || IsNil(o.ExternalSubnet) {
		var ret string
		return ret
	}
	return *o.ExternalSubnet
}

// GetExternalSubnetOk returns a tuple with the ExternalSubnet field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HciCluster) GetExternalSubnetOk() (*string, bool) {
	if o == nil || IsNil(o.ExternalSubnet) {
		return nil, false
	}
	return o.ExternalSubnet, true
}

// HasExternalSubnet returns a boolean if a field has been set.
func (o *HciCluster) HasExternalSubnet() bool {
	if o != nil && !IsNil(o.ExternalSubnet) {
		return true
	}

	return false
}

// SetExternalSubnet gets a reference to the given string and assigns it to the ExternalSubnet field.
func (o *HciCluster) SetExternalSubnet(v string) {
	o.ExternalSubnet = &v
}

// GetFaultToleranceState returns the FaultToleranceState field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HciCluster) GetFaultToleranceState() HciFaultToleranceState {
	if o == nil || IsNil(o.FaultToleranceState.Get()) {
		var ret HciFaultToleranceState
		return ret
	}
	return *o.FaultToleranceState.Get()
}

// GetFaultToleranceStateOk returns a tuple with the FaultToleranceState field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HciCluster) GetFaultToleranceStateOk() (*HciFaultToleranceState, bool) {
	if o == nil {
		return nil, false
	}
	return o.FaultToleranceState.Get(), o.FaultToleranceState.IsSet()
}

// HasFaultToleranceState returns a boolean if a field has been set.
func (o *HciCluster) HasFaultToleranceState() bool {
	if o != nil && o.FaultToleranceState.IsSet() {
		return true
	}

	return false
}

// SetFaultToleranceState gets a reference to the given NullableHciFaultToleranceState and assigns it to the FaultToleranceState field.
func (o *HciCluster) SetFaultToleranceState(v HciFaultToleranceState) {
	o.FaultToleranceState.Set(&v)
}

// SetFaultToleranceStateNil sets the value for FaultToleranceState to be an explicit nil
func (o *HciCluster) SetFaultToleranceStateNil() {
	o.FaultToleranceState.Set(nil)
}

// UnsetFaultToleranceState ensures that no value is present for FaultToleranceState, not even an explicit nil
func (o *HciCluster) UnsetFaultToleranceState() {
	o.FaultToleranceState.Unset()
}

// GetHypervisorTypes returns the HypervisorTypes field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HciCluster) GetHypervisorTypes() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.HypervisorTypes
}

// GetHypervisorTypesOk returns a tuple with the HypervisorTypes field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HciCluster) GetHypervisorTypesOk() ([]string, bool) {
	if o == nil || IsNil(o.HypervisorTypes) {
		return nil, false
	}
	return o.HypervisorTypes, true
}

// HasHypervisorTypes returns a boolean if a field has been set.
func (o *HciCluster) HasHypervisorTypes() bool {
	if o != nil && !IsNil(o.HypervisorTypes) {
		return true
	}

	return false
}

// SetHypervisorTypes gets a reference to the given []string and assigns it to the HypervisorTypes field.
func (o *HciCluster) SetHypervisorTypes(v []string) {
	o.HypervisorTypes = v
}

// GetIncarnationid returns the Incarnationid field value if set, zero value otherwise.
func (o *HciCluster) GetIncarnationid() string {
	if o == nil || IsNil(o.Incarnationid) {
		var ret string
		return ret
	}
	return *o.Incarnationid
}

// GetIncarnationidOk returns a tuple with the Incarnationid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HciCluster) GetIncarnationidOk() (*string, bool) {
	if o == nil || IsNil(o.Incarnationid) {
		return nil, false
	}
	return o.Incarnationid, true
}

// HasIncarnationid returns a boolean if a field has been set.
func (o *HciCluster) HasIncarnationid() bool {
	if o != nil && !IsNil(o.Incarnationid) {
		return true
	}

	return false
}

// SetIncarnationid gets a reference to the given string and assigns it to the Incarnationid field.
func (o *HciCluster) SetIncarnationid(v string) {
	o.Incarnationid = &v
}

// GetInefficientVmCount returns the InefficientVmCount field value if set, zero value otherwise.
func (o *HciCluster) GetInefficientVmCount() int64 {
	if o == nil || IsNil(o.InefficientVmCount) {
		var ret int64
		return ret
	}
	return *o.InefficientVmCount
}

// GetInefficientVmCountOk returns a tuple with the InefficientVmCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HciCluster) GetInefficientVmCountOk() (*int64, bool) {
	if o == nil || IsNil(o.InefficientVmCount) {
		return nil, false
	}
	return o.InefficientVmCount, true
}

// HasInefficientVmCount returns a boolean if a field has been set.
func (o *HciCluster) HasInefficientVmCount() bool {
	if o != nil && !IsNil(o.InefficientVmCount) {
		return true
	}

	return false
}

// SetInefficientVmCount gets a reference to the given int64 and assigns it to the InefficientVmCount field.
func (o *HciCluster) SetInefficientVmCount(v int64) {
	o.InefficientVmCount = &v
}

// GetInternalSubnet returns the InternalSubnet field value if set, zero value otherwise.
func (o *HciCluster) GetInternalSubnet() string {
	if o == nil || IsNil(o.InternalSubnet) {
		var ret string
		return ret
	}
	return *o.InternalSubnet
}

// GetInternalSubnetOk returns a tuple with the InternalSubnet field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HciCluster) GetInternalSubnetOk() (*string, bool) {
	if o == nil || IsNil(o.InternalSubnet) {
		return nil, false
	}
	return o.InternalSubnet, true
}

// HasInternalSubnet returns a boolean if a field has been set.
func (o *HciCluster) HasInternalSubnet() bool {
	if o != nil && !IsNil(o.InternalSubnet) {
		return true
	}

	return false
}

// SetInternalSubnet gets a reference to the given string and assigns it to the InternalSubnet field.
func (o *HciCluster) SetInternalSubnet(v string) {
	o.InternalSubnet = &v
}

// GetIsLts returns the IsLts field value if set, zero value otherwise.
func (o *HciCluster) GetIsLts() bool {
	if o == nil || IsNil(o.IsLts) {
		var ret bool
		return ret
	}
	return *o.IsLts
}

// GetIsLtsOk returns a tuple with the IsLts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HciCluster) GetIsLtsOk() (*bool, bool) {
	if o == nil || IsNil(o.IsLts) {
		return nil, false
	}
	return o.IsLts, true
}

// HasIsLts returns a boolean if a field has been set.
func (o *HciCluster) HasIsLts() bool {
	if o != nil && !IsNil(o.IsLts) {
		return true
	}

	return false
}

// SetIsLts gets a reference to the given bool and assigns it to the IsLts field.
func (o *HciCluster) SetIsLts(v bool) {
	o.IsLts = &v
}

// GetKeyManagementServerType returns the KeyManagementServerType field value if set, zero value otherwise.
func (o *HciCluster) GetKeyManagementServerType() string {
	if o == nil || IsNil(o.KeyManagementServerType) {
		var ret string
		return ret
	}
	return *o.KeyManagementServerType
}

// GetKeyManagementServerTypeOk returns a tuple with the KeyManagementServerType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HciCluster) GetKeyManagementServerTypeOk() (*string, bool) {
	if o == nil || IsNil(o.KeyManagementServerType) {
		return nil, false
	}
	return o.KeyManagementServerType, true
}

// HasKeyManagementServerType returns a boolean if a field has been set.
func (o *HciCluster) HasKeyManagementServerType() bool {
	if o != nil && !IsNil(o.KeyManagementServerType) {
		return true
	}

	return false
}

// SetKeyManagementServerType gets a reference to the given string and assigns it to the KeyManagementServerType field.
func (o *HciCluster) SetKeyManagementServerType(v string) {
	o.KeyManagementServerType = &v
}

// GetManagementServer returns the ManagementServer field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HciCluster) GetManagementServer() HciManagementServer {
	if o == nil || IsNil(o.ManagementServer.Get()) {
		var ret HciManagementServer
		return ret
	}
	return *o.ManagementServer.Get()
}

// GetManagementServerOk returns a tuple with the ManagementServer field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HciCluster) GetManagementServerOk() (*HciManagementServer, bool) {
	if o == nil {
		return nil, false
	}
	return o.ManagementServer.Get(), o.ManagementServer.IsSet()
}

// HasManagementServer returns a boolean if a field has been set.
func (o *HciCluster) HasManagementServer() bool {
	if o != nil && o.ManagementServer.IsSet() {
		return true
	}

	return false
}

// SetManagementServer gets a reference to the given NullableHciManagementServer and assigns it to the ManagementServer field.
func (o *HciCluster) SetManagementServer(v HciManagementServer) {
	o.ManagementServer.Set(&v)
}

// SetManagementServerNil sets the value for ManagementServer to be an explicit nil
func (o *HciCluster) SetManagementServerNil() {
	o.ManagementServer.Set(nil)
}

// UnsetManagementServer ensures that no value is present for ManagementServer, not even an explicit nil
func (o *HciCluster) UnsetManagementServer() {
	o.ManagementServer.Unset()
}

// GetMasqueradingIp returns the MasqueradingIp field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HciCluster) GetMasqueradingIp() HciIpAddress {
	if o == nil || IsNil(o.MasqueradingIp.Get()) {
		var ret HciIpAddress
		return ret
	}
	return *o.MasqueradingIp.Get()
}

// GetMasqueradingIpOk returns a tuple with the MasqueradingIp field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HciCluster) GetMasqueradingIpOk() (*HciIpAddress, bool) {
	if o == nil {
		return nil, false
	}
	return o.MasqueradingIp.Get(), o.MasqueradingIp.IsSet()
}

// HasMasqueradingIp returns a boolean if a field has been set.
func (o *HciCluster) HasMasqueradingIp() bool {
	if o != nil && o.MasqueradingIp.IsSet() {
		return true
	}

	return false
}

// SetMasqueradingIp gets a reference to the given NullableHciIpAddress and assigns it to the MasqueradingIp field.
func (o *HciCluster) SetMasqueradingIp(v HciIpAddress) {
	o.MasqueradingIp.Set(&v)
}

// SetMasqueradingIpNil sets the value for MasqueradingIp to be an explicit nil
func (o *HciCluster) SetMasqueradingIpNil() {
	o.MasqueradingIp.Set(nil)
}

// UnsetMasqueradingIp ensures that no value is present for MasqueradingIp, not even an explicit nil
func (o *HciCluster) UnsetMasqueradingIp() {
	o.MasqueradingIp.Unset()
}

// GetMasqueradingPort returns the MasqueradingPort field value if set, zero value otherwise.
func (o *HciCluster) GetMasqueradingPort() int32 {
	if o == nil || IsNil(o.MasqueradingPort) {
		var ret int32
		return ret
	}
	return *o.MasqueradingPort
}

// GetMasqueradingPortOk returns a tuple with the MasqueradingPort field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HciCluster) GetMasqueradingPortOk() (*int32, bool) {
	if o == nil || IsNil(o.MasqueradingPort) {
		return nil, false
	}
	return o.MasqueradingPort, true
}

// HasMasqueradingPort returns a boolean if a field has been set.
func (o *HciCluster) HasMasqueradingPort() bool {
	if o != nil && !IsNil(o.MasqueradingPort) {
		return true
	}

	return false
}

// SetMasqueradingPort gets a reference to the given int32 and assigns it to the MasqueradingPort field.
func (o *HciCluster) SetMasqueradingPort(v int32) {
	o.MasqueradingPort = &v
}

// GetMemoryCapacityBytes returns the MemoryCapacityBytes field value if set, zero value otherwise.
func (o *HciCluster) GetMemoryCapacityBytes() int64 {
	if o == nil || IsNil(o.MemoryCapacityBytes) {
		var ret int64
		return ret
	}
	return *o.MemoryCapacityBytes
}

// GetMemoryCapacityBytesOk returns a tuple with the MemoryCapacityBytes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HciCluster) GetMemoryCapacityBytesOk() (*int64, bool) {
	if o == nil || IsNil(o.MemoryCapacityBytes) {
		return nil, false
	}
	return o.MemoryCapacityBytes, true
}

// HasMemoryCapacityBytes returns a boolean if a field has been set.
func (o *HciCluster) HasMemoryCapacityBytes() bool {
	if o != nil && !IsNil(o.MemoryCapacityBytes) {
		return true
	}

	return false
}

// SetMemoryCapacityBytes gets a reference to the given int64 and assigns it to the MemoryCapacityBytes field.
func (o *HciCluster) SetMemoryCapacityBytes(v int64) {
	o.MemoryCapacityBytes = &v
}

// GetMemoryUsageBytes returns the MemoryUsageBytes field value if set, zero value otherwise.
func (o *HciCluster) GetMemoryUsageBytes() int64 {
	if o == nil || IsNil(o.MemoryUsageBytes) {
		var ret int64
		return ret
	}
	return *o.MemoryUsageBytes
}

// GetMemoryUsageBytesOk returns a tuple with the MemoryUsageBytes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HciCluster) GetMemoryUsageBytesOk() (*int64, bool) {
	if o == nil || IsNil(o.MemoryUsageBytes) {
		return nil, false
	}
	return o.MemoryUsageBytes, true
}

// HasMemoryUsageBytes returns a boolean if a field has been set.
func (o *HciCluster) HasMemoryUsageBytes() bool {
	if o != nil && !IsNil(o.MemoryUsageBytes) {
		return true
	}

	return false
}

// SetMemoryUsageBytes gets a reference to the given int64 and assigns it to the MemoryUsageBytes field.
func (o *HciCluster) SetMemoryUsageBytes(v int64) {
	o.MemoryUsageBytes = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *HciCluster) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HciCluster) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *HciCluster) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *HciCluster) SetName(v string) {
	o.Name = &v
}

// GetNameServerIpList returns the NameServerIpList field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HciCluster) GetNameServerIpList() []HciIpAddressOrFqdn {
	if o == nil {
		var ret []HciIpAddressOrFqdn
		return ret
	}
	return o.NameServerIpList
}

// GetNameServerIpListOk returns a tuple with the NameServerIpList field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HciCluster) GetNameServerIpListOk() ([]HciIpAddressOrFqdn, bool) {
	if o == nil || IsNil(o.NameServerIpList) {
		return nil, false
	}
	return o.NameServerIpList, true
}

// HasNameServerIpList returns a boolean if a field has been set.
func (o *HciCluster) HasNameServerIpList() bool {
	if o != nil && !IsNil(o.NameServerIpList) {
		return true
	}

	return false
}

// SetNameServerIpList gets a reference to the given []HciIpAddressOrFqdn and assigns it to the NameServerIpList field.
func (o *HciCluster) SetNameServerIpList(v []HciIpAddressOrFqdn) {
	o.NameServerIpList = v
}

// GetNtpServerIpList returns the NtpServerIpList field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HciCluster) GetNtpServerIpList() []HciIpAddressOrFqdn {
	if o == nil {
		var ret []HciIpAddressOrFqdn
		return ret
	}
	return o.NtpServerIpList
}

// GetNtpServerIpListOk returns a tuple with the NtpServerIpList field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HciCluster) GetNtpServerIpListOk() ([]HciIpAddressOrFqdn, bool) {
	if o == nil || IsNil(o.NtpServerIpList) {
		return nil, false
	}
	return o.NtpServerIpList, true
}

// HasNtpServerIpList returns a boolean if a field has been set.
func (o *HciCluster) HasNtpServerIpList() bool {
	if o != nil && !IsNil(o.NtpServerIpList) {
		return true
	}

	return false
}

// SetNtpServerIpList gets a reference to the given []HciIpAddressOrFqdn and assigns it to the NtpServerIpList field.
func (o *HciCluster) SetNtpServerIpList(v []HciIpAddressOrFqdn) {
	o.NtpServerIpList = v
}

// GetNumberOfNodes returns the NumberOfNodes field value if set, zero value otherwise.
func (o *HciCluster) GetNumberOfNodes() int32 {
	if o == nil || IsNil(o.NumberOfNodes) {
		var ret int32
		return ret
	}
	return *o.NumberOfNodes
}

// GetNumberOfNodesOk returns a tuple with the NumberOfNodes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HciCluster) GetNumberOfNodesOk() (*int32, bool) {
	if o == nil || IsNil(o.NumberOfNodes) {
		return nil, false
	}
	return o.NumberOfNodes, true
}

// HasNumberOfNodes returns a boolean if a field has been set.
func (o *HciCluster) HasNumberOfNodes() bool {
	if o != nil && !IsNil(o.NumberOfNodes) {
		return true
	}

	return false
}

// SetNumberOfNodes gets a reference to the given int32 and assigns it to the NumberOfNodes field.
func (o *HciCluster) SetNumberOfNodes(v int32) {
	o.NumberOfNodes = &v
}

// GetOperationMode returns the OperationMode field value if set, zero value otherwise.
func (o *HciCluster) GetOperationMode() string {
	if o == nil || IsNil(o.OperationMode) {
		var ret string
		return ret
	}
	return *o.OperationMode
}

// GetOperationModeOk returns a tuple with the OperationMode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HciCluster) GetOperationModeOk() (*string, bool) {
	if o == nil || IsNil(o.OperationMode) {
		return nil, false
	}
	return o.OperationMode, true
}

// HasOperationMode returns a boolean if a field has been set.
func (o *HciCluster) HasOperationMode() bool {
	if o != nil && !IsNil(o.OperationMode) {
		return true
	}

	return false
}

// SetOperationMode gets a reference to the given string and assigns it to the OperationMode field.
func (o *HciCluster) SetOperationMode(v string) {
	o.OperationMode = &v
}

// GetPasswordRemoteLoginEnabled returns the PasswordRemoteLoginEnabled field value if set, zero value otherwise.
func (o *HciCluster) GetPasswordRemoteLoginEnabled() bool {
	if o == nil || IsNil(o.PasswordRemoteLoginEnabled) {
		var ret bool
		return ret
	}
	return *o.PasswordRemoteLoginEnabled
}

// GetPasswordRemoteLoginEnabledOk returns a tuple with the PasswordRemoteLoginEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HciCluster) GetPasswordRemoteLoginEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.PasswordRemoteLoginEnabled) {
		return nil, false
	}
	return o.PasswordRemoteLoginEnabled, true
}

// HasPasswordRemoteLoginEnabled returns a boolean if a field has been set.
func (o *HciCluster) HasPasswordRemoteLoginEnabled() bool {
	if o != nil && !IsNil(o.PasswordRemoteLoginEnabled) {
		return true
	}

	return false
}

// SetPasswordRemoteLoginEnabled gets a reference to the given bool and assigns it to the PasswordRemoteLoginEnabled field.
func (o *HciCluster) SetPasswordRemoteLoginEnabled(v bool) {
	o.PasswordRemoteLoginEnabled = &v
}

// GetPcExtId returns the PcExtId field value if set, zero value otherwise.
func (o *HciCluster) GetPcExtId() string {
	if o == nil || IsNil(o.PcExtId) {
		var ret string
		return ret
	}
	return *o.PcExtId
}

// GetPcExtIdOk returns a tuple with the PcExtId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HciCluster) GetPcExtIdOk() (*string, bool) {
	if o == nil || IsNil(o.PcExtId) {
		return nil, false
	}
	return o.PcExtId, true
}

// HasPcExtId returns a boolean if a field has been set.
func (o *HciCluster) HasPcExtId() bool {
	if o != nil && !IsNil(o.PcExtId) {
		return true
	}

	return false
}

// SetPcExtId gets a reference to the given string and assigns it to the PcExtId field.
func (o *HciCluster) SetPcExtId(v string) {
	o.PcExtId = &v
}

// GetPulseStatus returns the PulseStatus field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HciCluster) GetPulseStatus() HciPulseStatus {
	if o == nil || IsNil(o.PulseStatus.Get()) {
		var ret HciPulseStatus
		return ret
	}
	return *o.PulseStatus.Get()
}

// GetPulseStatusOk returns a tuple with the PulseStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HciCluster) GetPulseStatusOk() (*HciPulseStatus, bool) {
	if o == nil {
		return nil, false
	}
	return o.PulseStatus.Get(), o.PulseStatus.IsSet()
}

// HasPulseStatus returns a boolean if a field has been set.
func (o *HciCluster) HasPulseStatus() bool {
	if o != nil && o.PulseStatus.IsSet() {
		return true
	}

	return false
}

// SetPulseStatus gets a reference to the given NullableHciPulseStatus and assigns it to the PulseStatus field.
func (o *HciCluster) SetPulseStatus(v HciPulseStatus) {
	o.PulseStatus.Set(&v)
}

// SetPulseStatusNil sets the value for PulseStatus to be an explicit nil
func (o *HciCluster) SetPulseStatusNil() {
	o.PulseStatus.Set(nil)
}

// UnsetPulseStatus ensures that no value is present for PulseStatus, not even an explicit nil
func (o *HciCluster) UnsetPulseStatus() {
	o.PulseStatus.Unset()
}

// GetRedundancyFactor returns the RedundancyFactor field value if set, zero value otherwise.
func (o *HciCluster) GetRedundancyFactor() int64 {
	if o == nil || IsNil(o.RedundancyFactor) {
		var ret int64
		return ret
	}
	return *o.RedundancyFactor
}

// GetRedundancyFactorOk returns a tuple with the RedundancyFactor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HciCluster) GetRedundancyFactorOk() (*int64, bool) {
	if o == nil || IsNil(o.RedundancyFactor) {
		return nil, false
	}
	return o.RedundancyFactor, true
}

// HasRedundancyFactor returns a boolean if a field has been set.
func (o *HciCluster) HasRedundancyFactor() bool {
	if o != nil && !IsNil(o.RedundancyFactor) {
		return true
	}

	return false
}

// SetRedundancyFactor gets a reference to the given int64 and assigns it to the RedundancyFactor field.
func (o *HciCluster) SetRedundancyFactor(v int64) {
	o.RedundancyFactor = &v
}

// GetRemoteSupport returns the RemoteSupport field value if set, zero value otherwise.
func (o *HciCluster) GetRemoteSupport() bool {
	if o == nil || IsNil(o.RemoteSupport) {
		var ret bool
		return ret
	}
	return *o.RemoteSupport
}

// GetRemoteSupportOk returns a tuple with the RemoteSupport field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HciCluster) GetRemoteSupportOk() (*bool, bool) {
	if o == nil || IsNil(o.RemoteSupport) {
		return nil, false
	}
	return o.RemoteSupport, true
}

// HasRemoteSupport returns a boolean if a field has been set.
func (o *HciCluster) HasRemoteSupport() bool {
	if o != nil && !IsNil(o.RemoteSupport) {
		return true
	}

	return false
}

// SetRemoteSupport gets a reference to the given bool and assigns it to the RemoteSupport field.
func (o *HciCluster) SetRemoteSupport(v bool) {
	o.RemoteSupport = &v
}

// GetStorageCapacityBytes returns the StorageCapacityBytes field value if set, zero value otherwise.
func (o *HciCluster) GetStorageCapacityBytes() int64 {
	if o == nil || IsNil(o.StorageCapacityBytes) {
		var ret int64
		return ret
	}
	return *o.StorageCapacityBytes
}

// GetStorageCapacityBytesOk returns a tuple with the StorageCapacityBytes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HciCluster) GetStorageCapacityBytesOk() (*int64, bool) {
	if o == nil || IsNil(o.StorageCapacityBytes) {
		return nil, false
	}
	return o.StorageCapacityBytes, true
}

// HasStorageCapacityBytes returns a boolean if a field has been set.
func (o *HciCluster) HasStorageCapacityBytes() bool {
	if o != nil && !IsNil(o.StorageCapacityBytes) {
		return true
	}

	return false
}

// SetStorageCapacityBytes gets a reference to the given int64 and assigns it to the StorageCapacityBytes field.
func (o *HciCluster) SetStorageCapacityBytes(v int64) {
	o.StorageCapacityBytes = &v
}

// GetStorageUsageBytes returns the StorageUsageBytes field value if set, zero value otherwise.
func (o *HciCluster) GetStorageUsageBytes() int64 {
	if o == nil || IsNil(o.StorageUsageBytes) {
		var ret int64
		return ret
	}
	return *o.StorageUsageBytes
}

// GetStorageUsageBytesOk returns a tuple with the StorageUsageBytes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HciCluster) GetStorageUsageBytesOk() (*int64, bool) {
	if o == nil || IsNil(o.StorageUsageBytes) {
		return nil, false
	}
	return o.StorageUsageBytes, true
}

// HasStorageUsageBytes returns a boolean if a field has been set.
func (o *HciCluster) HasStorageUsageBytes() bool {
	if o != nil && !IsNil(o.StorageUsageBytes) {
		return true
	}

	return false
}

// SetStorageUsageBytes gets a reference to the given int64 and assigns it to the StorageUsageBytes field.
func (o *HciCluster) SetStorageUsageBytes(v int64) {
	o.StorageUsageBytes = &v
}

// GetTimezone returns the Timezone field value if set, zero value otherwise.
func (o *HciCluster) GetTimezone() string {
	if o == nil || IsNil(o.Timezone) {
		var ret string
		return ret
	}
	return *o.Timezone
}

// GetTimezoneOk returns a tuple with the Timezone field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HciCluster) GetTimezoneOk() (*string, bool) {
	if o == nil || IsNil(o.Timezone) {
		return nil, false
	}
	return o.Timezone, true
}

// HasTimezone returns a boolean if a field has been set.
func (o *HciCluster) HasTimezone() bool {
	if o != nil && !IsNil(o.Timezone) {
		return true
	}

	return false
}

// SetTimezone gets a reference to the given string and assigns it to the Timezone field.
func (o *HciCluster) SetTimezone(v string) {
	o.Timezone = &v
}

// GetUpgradeStatus returns the UpgradeStatus field value if set, zero value otherwise.
func (o *HciCluster) GetUpgradeStatus() string {
	if o == nil || IsNil(o.UpgradeStatus) {
		var ret string
		return ret
	}
	return *o.UpgradeStatus
}

// GetUpgradeStatusOk returns a tuple with the UpgradeStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HciCluster) GetUpgradeStatusOk() (*string, bool) {
	if o == nil || IsNil(o.UpgradeStatus) {
		return nil, false
	}
	return o.UpgradeStatus, true
}

// HasUpgradeStatus returns a boolean if a field has been set.
func (o *HciCluster) HasUpgradeStatus() bool {
	if o != nil && !IsNil(o.UpgradeStatus) {
		return true
	}

	return false
}

// SetUpgradeStatus gets a reference to the given string and assigns it to the UpgradeStatus field.
func (o *HciCluster) SetUpgradeStatus(v string) {
	o.UpgradeStatus = &v
}

// GetVmCount returns the VmCount field value if set, zero value otherwise.
func (o *HciCluster) GetVmCount() int64 {
	if o == nil || IsNil(o.VmCount) {
		var ret int64
		return ret
	}
	return *o.VmCount
}

// GetVmCountOk returns a tuple with the VmCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HciCluster) GetVmCountOk() (*int64, bool) {
	if o == nil || IsNil(o.VmCount) {
		return nil, false
	}
	return o.VmCount, true
}

// HasVmCount returns a boolean if a field has been set.
func (o *HciCluster) HasVmCount() bool {
	if o != nil && !IsNil(o.VmCount) {
		return true
	}

	return false
}

// SetVmCount gets a reference to the given int64 and assigns it to the VmCount field.
func (o *HciCluster) SetVmCount(v int64) {
	o.VmCount = &v
}

// GetCompliance returns the Compliance field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HciCluster) GetCompliance() HciComplianceRelationship {
	if o == nil || IsNil(o.Compliance.Get()) {
		var ret HciComplianceRelationship
		return ret
	}
	return *o.Compliance.Get()
}

// GetComplianceOk returns a tuple with the Compliance field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HciCluster) GetComplianceOk() (*HciComplianceRelationship, bool) {
	if o == nil {
		return nil, false
	}
	return o.Compliance.Get(), o.Compliance.IsSet()
}

// HasCompliance returns a boolean if a field has been set.
func (o *HciCluster) HasCompliance() bool {
	if o != nil && o.Compliance.IsSet() {
		return true
	}

	return false
}

// SetCompliance gets a reference to the given NullableHciComplianceRelationship and assigns it to the Compliance field.
func (o *HciCluster) SetCompliance(v HciComplianceRelationship) {
	o.Compliance.Set(&v)
}

// SetComplianceNil sets the value for Compliance to be an explicit nil
func (o *HciCluster) SetComplianceNil() {
	o.Compliance.Set(nil)
}

// UnsetCompliance ensures that no value is present for Compliance, not even an explicit nil
func (o *HciCluster) UnsetCompliance() {
	o.Compliance.Unset()
}

// GetDomainManager returns the DomainManager field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HciCluster) GetDomainManager() HciDomainManagerRelationship {
	if o == nil || IsNil(o.DomainManager.Get()) {
		var ret HciDomainManagerRelationship
		return ret
	}
	return *o.DomainManager.Get()
}

// GetDomainManagerOk returns a tuple with the DomainManager field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HciCluster) GetDomainManagerOk() (*HciDomainManagerRelationship, bool) {
	if o == nil {
		return nil, false
	}
	return o.DomainManager.Get(), o.DomainManager.IsSet()
}

// HasDomainManager returns a boolean if a field has been set.
func (o *HciCluster) HasDomainManager() bool {
	if o != nil && o.DomainManager.IsSet() {
		return true
	}

	return false
}

// SetDomainManager gets a reference to the given NullableHciDomainManagerRelationship and assigns it to the DomainManager field.
func (o *HciCluster) SetDomainManager(v HciDomainManagerRelationship) {
	o.DomainManager.Set(&v)
}

// SetDomainManagerNil sets the value for DomainManager to be an explicit nil
func (o *HciCluster) SetDomainManagerNil() {
	o.DomainManager.Set(nil)
}

// UnsetDomainManager ensures that no value is present for DomainManager, not even an explicit nil
func (o *HciCluster) UnsetDomainManager() {
	o.DomainManager.Unset()
}

// GetEntitlement returns the Entitlement field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HciCluster) GetEntitlement() HciEntitlementRelationship {
	if o == nil || IsNil(o.Entitlement.Get()) {
		var ret HciEntitlementRelationship
		return ret
	}
	return *o.Entitlement.Get()
}

// GetEntitlementOk returns a tuple with the Entitlement field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HciCluster) GetEntitlementOk() (*HciEntitlementRelationship, bool) {
	if o == nil {
		return nil, false
	}
	return o.Entitlement.Get(), o.Entitlement.IsSet()
}

// HasEntitlement returns a boolean if a field has been set.
func (o *HciCluster) HasEntitlement() bool {
	if o != nil && o.Entitlement.IsSet() {
		return true
	}

	return false
}

// SetEntitlement gets a reference to the given NullableHciEntitlementRelationship and assigns it to the Entitlement field.
func (o *HciCluster) SetEntitlement(v HciEntitlementRelationship) {
	o.Entitlement.Set(&v)
}

// SetEntitlementNil sets the value for Entitlement to be an explicit nil
func (o *HciCluster) SetEntitlementNil() {
	o.Entitlement.Set(nil)
}

// UnsetEntitlement ensures that no value is present for Entitlement, not even an explicit nil
func (o *HciCluster) UnsetEntitlement() {
	o.Entitlement.Unset()
}

// GetNodes returns the Nodes field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HciCluster) GetNodes() []HciNodeRelationship {
	if o == nil {
		var ret []HciNodeRelationship
		return ret
	}
	return o.Nodes
}

// GetNodesOk returns a tuple with the Nodes field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HciCluster) GetNodesOk() ([]HciNodeRelationship, bool) {
	if o == nil || IsNil(o.Nodes) {
		return nil, false
	}
	return o.Nodes, true
}

// HasNodes returns a boolean if a field has been set.
func (o *HciCluster) HasNodes() bool {
	if o != nil && !IsNil(o.Nodes) {
		return true
	}

	return false
}

// SetNodes gets a reference to the given []HciNodeRelationship and assigns it to the Nodes field.
func (o *HciCluster) SetNodes(v []HciNodeRelationship) {
	o.Nodes = v
}

// GetRegisteredDevice returns the RegisteredDevice field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HciCluster) GetRegisteredDevice() AssetDeviceRegistrationRelationship {
	if o == nil || IsNil(o.RegisteredDevice.Get()) {
		var ret AssetDeviceRegistrationRelationship
		return ret
	}
	return *o.RegisteredDevice.Get()
}

// GetRegisteredDeviceOk returns a tuple with the RegisteredDevice field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HciCluster) GetRegisteredDeviceOk() (*AssetDeviceRegistrationRelationship, bool) {
	if o == nil {
		return nil, false
	}
	return o.RegisteredDevice.Get(), o.RegisteredDevice.IsSet()
}

// HasRegisteredDevice returns a boolean if a field has been set.
func (o *HciCluster) HasRegisteredDevice() bool {
	if o != nil && o.RegisteredDevice.IsSet() {
		return true
	}

	return false
}

// SetRegisteredDevice gets a reference to the given NullableAssetDeviceRegistrationRelationship and assigns it to the RegisteredDevice field.
func (o *HciCluster) SetRegisteredDevice(v AssetDeviceRegistrationRelationship) {
	o.RegisteredDevice.Set(&v)
}

// SetRegisteredDeviceNil sets the value for RegisteredDevice to be an explicit nil
func (o *HciCluster) SetRegisteredDeviceNil() {
	o.RegisteredDevice.Set(nil)
}

// UnsetRegisteredDevice ensures that no value is present for RegisteredDevice, not even an explicit nil
func (o *HciCluster) UnsetRegisteredDevice() {
	o.RegisteredDevice.Unset()
}

// GetViolation returns the Violation field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HciCluster) GetViolation() HciViolationRelationship {
	if o == nil || IsNil(o.Violation.Get()) {
		var ret HciViolationRelationship
		return ret
	}
	return *o.Violation.Get()
}

// GetViolationOk returns a tuple with the Violation field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HciCluster) GetViolationOk() (*HciViolationRelationship, bool) {
	if o == nil {
		return nil, false
	}
	return o.Violation.Get(), o.Violation.IsSet()
}

// HasViolation returns a boolean if a field has been set.
func (o *HciCluster) HasViolation() bool {
	if o != nil && o.Violation.IsSet() {
		return true
	}

	return false
}

// SetViolation gets a reference to the given NullableHciViolationRelationship and assigns it to the Violation field.
func (o *HciCluster) SetViolation(v HciViolationRelationship) {
	o.Violation.Set(&v)
}

// SetViolationNil sets the value for Violation to be an explicit nil
func (o *HciCluster) SetViolationNil() {
	o.Violation.Set(nil)
}

// UnsetViolation ensures that no value is present for Violation, not even an explicit nil
func (o *HciCluster) UnsetViolation() {
	o.Violation.Unset()
}

func (o HciCluster) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o HciCluster) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	serializedMoBaseMo, errMoBaseMo := json.Marshal(o.MoBaseMo)
	if errMoBaseMo != nil {
		return map[string]interface{}{}, errMoBaseMo
	}
	errMoBaseMo = json.Unmarshal([]byte(serializedMoBaseMo), &toSerialize)
	if errMoBaseMo != nil {
		return map[string]interface{}{}, errMoBaseMo
	}
	if _, exists := toSerialize["ClassId"]; !exists {
		toSerialize["ClassId"] = o.GetDefaultClassId()
	}
	toSerialize["ClassId"] = o.ClassId
	if _, exists := toSerialize["ObjectType"]; !exists {
		toSerialize["ObjectType"] = o.GetDefaultObjectType()
	}
	toSerialize["ObjectType"] = o.ObjectType
	if o.AlarmSummary.IsSet() {
		toSerialize["AlarmSummary"] = o.AlarmSummary.Get()
	}
	if o.Backplane.IsSet() {
		toSerialize["Backplane"] = o.Backplane.Get()
	}
	if !IsNil(o.BuildInfoBuildType) {
		toSerialize["BuildInfoBuildType"] = o.BuildInfoBuildType
	}
	if !IsNil(o.BuildInfoCommitId) {
		toSerialize["BuildInfoCommitId"] = o.BuildInfoCommitId
	}
	if !IsNil(o.BuildInfoFullVersion) {
		toSerialize["BuildInfoFullVersion"] = o.BuildInfoFullVersion
	}
	if !IsNil(o.BuildInfoShortCommitId) {
		toSerialize["BuildInfoShortCommitId"] = o.BuildInfoShortCommitId
	}
	if !IsNil(o.BuildInfoVersion) {
		toSerialize["BuildInfoVersion"] = o.BuildInfoVersion
	}
	if !IsNil(o.ClusterArch) {
		toSerialize["ClusterArch"] = o.ClusterArch
	}
	if !IsNil(o.ClusterExtId) {
		toSerialize["ClusterExtId"] = o.ClusterExtId
	}
	if o.ClusterFunction != nil {
		toSerialize["ClusterFunction"] = o.ClusterFunction
	}
	if o.ClusterSoftwareMap != nil {
		toSerialize["ClusterSoftwareMap"] = o.ClusterSoftwareMap
	}
	if !IsNil(o.ContainerName) {
		toSerialize["ContainerName"] = o.ContainerName
	}
	if !IsNil(o.CpuCapacityHz) {
		toSerialize["CpuCapacityHz"] = o.CpuCapacityHz
	}
	if !IsNil(o.CpuUsageHz) {
		toSerialize["CpuUsageHz"] = o.CpuUsageHz
	}
	if !IsNil(o.EncryptionInTransitStatus) {
		toSerialize["EncryptionInTransitStatus"] = o.EncryptionInTransitStatus
	}
	if o.EncryptionScope != nil {
		toSerialize["EncryptionScope"] = o.EncryptionScope
	}
	if o.ExternalAddress.IsSet() {
		toSerialize["ExternalAddress"] = o.ExternalAddress.Get()
	}
	if o.ExternalDataServiceIp.IsSet() {
		toSerialize["ExternalDataServiceIp"] = o.ExternalDataServiceIp.Get()
	}
	if !IsNil(o.ExternalSubnet) {
		toSerialize["ExternalSubnet"] = o.ExternalSubnet
	}
	if o.FaultToleranceState.IsSet() {
		toSerialize["FaultToleranceState"] = o.FaultToleranceState.Get()
	}
	if o.HypervisorTypes != nil {
		toSerialize["HypervisorTypes"] = o.HypervisorTypes
	}
	if !IsNil(o.Incarnationid) {
		toSerialize["Incarnationid"] = o.Incarnationid
	}
	if !IsNil(o.InefficientVmCount) {
		toSerialize["InefficientVmCount"] = o.InefficientVmCount
	}
	if !IsNil(o.InternalSubnet) {
		toSerialize["InternalSubnet"] = o.InternalSubnet
	}
	if !IsNil(o.IsLts) {
		toSerialize["IsLts"] = o.IsLts
	}
	if !IsNil(o.KeyManagementServerType) {
		toSerialize["KeyManagementServerType"] = o.KeyManagementServerType
	}
	if o.ManagementServer.IsSet() {
		toSerialize["ManagementServer"] = o.ManagementServer.Get()
	}
	if o.MasqueradingIp.IsSet() {
		toSerialize["MasqueradingIp"] = o.MasqueradingIp.Get()
	}
	if !IsNil(o.MasqueradingPort) {
		toSerialize["MasqueradingPort"] = o.MasqueradingPort
	}
	if !IsNil(o.MemoryCapacityBytes) {
		toSerialize["MemoryCapacityBytes"] = o.MemoryCapacityBytes
	}
	if !IsNil(o.MemoryUsageBytes) {
		toSerialize["MemoryUsageBytes"] = o.MemoryUsageBytes
	}
	if !IsNil(o.Name) {
		toSerialize["Name"] = o.Name
	}
	if o.NameServerIpList != nil {
		toSerialize["NameServerIpList"] = o.NameServerIpList
	}
	if o.NtpServerIpList != nil {
		toSerialize["NtpServerIpList"] = o.NtpServerIpList
	}
	if !IsNil(o.NumberOfNodes) {
		toSerialize["NumberOfNodes"] = o.NumberOfNodes
	}
	if !IsNil(o.OperationMode) {
		toSerialize["OperationMode"] = o.OperationMode
	}
	if !IsNil(o.PasswordRemoteLoginEnabled) {
		toSerialize["PasswordRemoteLoginEnabled"] = o.PasswordRemoteLoginEnabled
	}
	if !IsNil(o.PcExtId) {
		toSerialize["PcExtId"] = o.PcExtId
	}
	if o.PulseStatus.IsSet() {
		toSerialize["PulseStatus"] = o.PulseStatus.Get()
	}
	if !IsNil(o.RedundancyFactor) {
		toSerialize["RedundancyFactor"] = o.RedundancyFactor
	}
	if !IsNil(o.RemoteSupport) {
		toSerialize["RemoteSupport"] = o.RemoteSupport
	}
	if !IsNil(o.StorageCapacityBytes) {
		toSerialize["StorageCapacityBytes"] = o.StorageCapacityBytes
	}
	if !IsNil(o.StorageUsageBytes) {
		toSerialize["StorageUsageBytes"] = o.StorageUsageBytes
	}
	if !IsNil(o.Timezone) {
		toSerialize["Timezone"] = o.Timezone
	}
	if !IsNil(o.UpgradeStatus) {
		toSerialize["UpgradeStatus"] = o.UpgradeStatus
	}
	if !IsNil(o.VmCount) {
		toSerialize["VmCount"] = o.VmCount
	}
	if o.Compliance.IsSet() {
		toSerialize["Compliance"] = o.Compliance.Get()
	}
	if o.DomainManager.IsSet() {
		toSerialize["DomainManager"] = o.DomainManager.Get()
	}
	if o.Entitlement.IsSet() {
		toSerialize["Entitlement"] = o.Entitlement.Get()
	}
	if o.Nodes != nil {
		toSerialize["Nodes"] = o.Nodes
	}
	if o.RegisteredDevice.IsSet() {
		toSerialize["RegisteredDevice"] = o.RegisteredDevice.Get()
	}
	if o.Violation.IsSet() {
		toSerialize["Violation"] = o.Violation.Get()
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *HciCluster) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"ClassId",
		"ObjectType",
	}

	// defaultValueFuncMap captures the default values for required properties.
	// These values are used when required properties are missing from the payload.
	defaultValueFuncMap := map[string]func() interface{}{
		"ClassId":    o.GetDefaultClassId,
		"ObjectType": o.GetDefaultObjectType,
	}
	var defaultValueApplied bool
	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			if _, ok := defaultValueFuncMap[requiredProperty]; ok {
				allProperties[requiredProperty] = defaultValueFuncMap[requiredProperty]()
				defaultValueApplied = true
			}
		}
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	if defaultValueApplied {
		data, err = json.Marshal(allProperties)
		if err != nil {
			return err
		}
	}
	type HciClusterWithoutEmbeddedStruct struct {
		// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.
		ClassId string `json:"ClassId"`
		// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
		ObjectType   string                            `json:"ObjectType"`
		AlarmSummary NullableHciAlarmSummary           `json:"AlarmSummary,omitempty"`
		Backplane    NullableHciBackplaneNetworkParams `json:"Backplane,omitempty"`
		// The software build type, such as \"release\" or \"debug\" build.
		BuildInfoBuildType *string `json:"BuildInfoBuildType,omitempty"`
		// The software commit id for this build image.
		BuildInfoCommitId *string `json:"BuildInfoCommitId,omitempty"`
		// The longer form of software version. It usually includes the commit id.
		BuildInfoFullVersion *string `json:"BuildInfoFullVersion,omitempty"`
		// The short version of the software commit id for this build image.
		BuildInfoShortCommitId *string `json:"BuildInfoShortCommitId,omitempty"`
		// The software version from the build.
		BuildInfoVersion *string `json:"BuildInfoVersion,omitempty"`
		// The CPU architecture of the cluster server such as x86_64 and PPC64LE.
		ClusterArch *string `json:"ClusterArch,omitempty"`
		// The unique identifier of the cluster.
		ClusterExtId       *string           `json:"ClusterExtId,omitempty"`
		ClusterFunction    []string          `json:"ClusterFunction,omitempty"`
		ClusterSoftwareMap []HciSoftwareType `json:"ClusterSoftwareMap,omitempty"`
		// The name of the default container created as part of cluster creation.
		ContainerName *string `json:"ContainerName,omitempty"`
		// The CPU capacity in Hz of the cluster.
		CpuCapacityHz *int64 `json:"CpuCapacityHz,omitempty"`
		// The CPU usage in Hz of the cluster.
		CpuUsageHz *int64 `json:"CpuUsageHz,omitempty"`
		// Indicate if encryption-in-transit is enabled or not.
		EncryptionInTransitStatus *bool                `json:"EncryptionInTransitStatus,omitempty"`
		EncryptionScope           []string             `json:"EncryptionScope,omitempty"`
		ExternalAddress           NullableHciIpAddress `json:"ExternalAddress,omitempty"`
		ExternalDataServiceIp     NullableHciIpAddress `json:"ExternalDataServiceIp,omitempty"`
		// The external subnet of the cluster.
		ExternalSubnet      *string                        `json:"ExternalSubnet,omitempty"`
		FaultToleranceState NullableHciFaultToleranceState `json:"FaultToleranceState,omitempty"`
		HypervisorTypes     []string                       `json:"HypervisorTypes,omitempty"`
		// Cluster incarnation Id, part of payload for cluster update operation only.
		Incarnationid *string `json:"Incarnationid,omitempty"`
		// The number of inefficient VMs in this cluster.
		InefficientVmCount *int64 `json:"InefficientVmCount,omitempty"`
		// The internal subnet of the cluster.
		InternalSubnet *string `json:"InternalSubnet,omitempty"`
		// The LTS status indicates whether the release is categorized as Long-term or not.
		IsLts *bool `json:"IsLts,omitempty"`
		// The key management server type of the cluster.
		KeyManagementServerType *string                     `json:"KeyManagementServerType,omitempty"`
		ManagementServer        NullableHciManagementServer `json:"ManagementServer,omitempty"`
		MasqueradingIp          NullableHciIpAddress        `json:"MasqueradingIp,omitempty"`
		// The masquerading port of the cluster.
		MasqueradingPort *int32 `json:"MasqueradingPort,omitempty"`
		// The memory capacity in bytes of the cluster.
		MemoryCapacityBytes *int64 `json:"MemoryCapacityBytes,omitempty"`
		// The memory usage in bytes of the cluster.
		MemoryUsageBytes *int64 `json:"MemoryUsageBytes,omitempty"`
		// The name of the reported cluster.
		Name             *string              `json:"Name,omitempty"`
		NameServerIpList []HciIpAddressOrFqdn `json:"NameServerIpList,omitempty"`
		NtpServerIpList  []HciIpAddressOrFqdn `json:"NtpServerIpList,omitempty"`
		// The number of nodes in the cluster.
		NumberOfNodes *int32 `json:"NumberOfNodes,omitempty"`
		// The operation mode of the cluster such as NORMAL, READ_ONLY, STAND_ALONE, SWITCH_TO_TWO_NODE, OVERRIDE.
		OperationMode *string `json:"OperationMode,omitempty"`
		// Indicates whether the password ssh into the cluster is enabled or not.
		PasswordRemoteLoginEnabled *bool `json:"PasswordRemoteLoginEnabled,omitempty"`
		// The unique identifier of the domain manager (Prism Central) instance which manages this cluster.
		PcExtId     *string                `json:"PcExtId,omitempty"`
		PulseStatus NullableHciPulseStatus `json:"PulseStatus,omitempty"`
		// The redundancy factor of the cluster.
		RedundancyFactor *int64 `json:"RedundancyFactor,omitempty"`
		// The remote support status of the cluster.
		RemoteSupport *bool `json:"RemoteSupport,omitempty"`
		// The storage capacity in bytes of the cluster.
		StorageCapacityBytes *int64 `json:"StorageCapacityBytes,omitempty"`
		// The storage usage in bytes of the cluster.
		StorageUsageBytes *int64 `json:"StorageUsageBytes,omitempty"`
		// The timezone of the cluster.
		Timezone *string `json:"Timezone,omitempty"`
		// The upgrade status of a cluster includes the following known values: PENDING, DOWNLOADING, QUEUED, PREUPGRADE, UPGRADING, SUCCEEDED, FAILED, CANCELLED, and SCHEDULED.The upgrade status of a cluster.
		UpgradeStatus *string `json:"UpgradeStatus,omitempty"`
		// The number of VMs running on this cluster.
		VmCount       *int64                               `json:"VmCount,omitempty"`
		Compliance    NullableHciComplianceRelationship    `json:"Compliance,omitempty"`
		DomainManager NullableHciDomainManagerRelationship `json:"DomainManager,omitempty"`
		Entitlement   NullableHciEntitlementRelationship   `json:"Entitlement,omitempty"`
		// An array of relationships to hciNode resources.
		Nodes            []HciNodeRelationship                       `json:"Nodes,omitempty"`
		RegisteredDevice NullableAssetDeviceRegistrationRelationship `json:"RegisteredDevice,omitempty"`
		Violation        NullableHciViolationRelationship            `json:"Violation,omitempty"`
	}

	varHciClusterWithoutEmbeddedStruct := HciClusterWithoutEmbeddedStruct{}

	err = json.Unmarshal(data, &varHciClusterWithoutEmbeddedStruct)
	if err == nil {
		varHciCluster := _HciCluster{}
		varHciCluster.ClassId = varHciClusterWithoutEmbeddedStruct.ClassId
		varHciCluster.ObjectType = varHciClusterWithoutEmbeddedStruct.ObjectType
		varHciCluster.AlarmSummary = varHciClusterWithoutEmbeddedStruct.AlarmSummary
		varHciCluster.Backplane = varHciClusterWithoutEmbeddedStruct.Backplane
		varHciCluster.BuildInfoBuildType = varHciClusterWithoutEmbeddedStruct.BuildInfoBuildType
		varHciCluster.BuildInfoCommitId = varHciClusterWithoutEmbeddedStruct.BuildInfoCommitId
		varHciCluster.BuildInfoFullVersion = varHciClusterWithoutEmbeddedStruct.BuildInfoFullVersion
		varHciCluster.BuildInfoShortCommitId = varHciClusterWithoutEmbeddedStruct.BuildInfoShortCommitId
		varHciCluster.BuildInfoVersion = varHciClusterWithoutEmbeddedStruct.BuildInfoVersion
		varHciCluster.ClusterArch = varHciClusterWithoutEmbeddedStruct.ClusterArch
		varHciCluster.ClusterExtId = varHciClusterWithoutEmbeddedStruct.ClusterExtId
		varHciCluster.ClusterFunction = varHciClusterWithoutEmbeddedStruct.ClusterFunction
		varHciCluster.ClusterSoftwareMap = varHciClusterWithoutEmbeddedStruct.ClusterSoftwareMap
		varHciCluster.ContainerName = varHciClusterWithoutEmbeddedStruct.ContainerName
		varHciCluster.CpuCapacityHz = varHciClusterWithoutEmbeddedStruct.CpuCapacityHz
		varHciCluster.CpuUsageHz = varHciClusterWithoutEmbeddedStruct.CpuUsageHz
		varHciCluster.EncryptionInTransitStatus = varHciClusterWithoutEmbeddedStruct.EncryptionInTransitStatus
		varHciCluster.EncryptionScope = varHciClusterWithoutEmbeddedStruct.EncryptionScope
		varHciCluster.ExternalAddress = varHciClusterWithoutEmbeddedStruct.ExternalAddress
		varHciCluster.ExternalDataServiceIp = varHciClusterWithoutEmbeddedStruct.ExternalDataServiceIp
		varHciCluster.ExternalSubnet = varHciClusterWithoutEmbeddedStruct.ExternalSubnet
		varHciCluster.FaultToleranceState = varHciClusterWithoutEmbeddedStruct.FaultToleranceState
		varHciCluster.HypervisorTypes = varHciClusterWithoutEmbeddedStruct.HypervisorTypes
		varHciCluster.Incarnationid = varHciClusterWithoutEmbeddedStruct.Incarnationid
		varHciCluster.InefficientVmCount = varHciClusterWithoutEmbeddedStruct.InefficientVmCount
		varHciCluster.InternalSubnet = varHciClusterWithoutEmbeddedStruct.InternalSubnet
		varHciCluster.IsLts = varHciClusterWithoutEmbeddedStruct.IsLts
		varHciCluster.KeyManagementServerType = varHciClusterWithoutEmbeddedStruct.KeyManagementServerType
		varHciCluster.ManagementServer = varHciClusterWithoutEmbeddedStruct.ManagementServer
		varHciCluster.MasqueradingIp = varHciClusterWithoutEmbeddedStruct.MasqueradingIp
		varHciCluster.MasqueradingPort = varHciClusterWithoutEmbeddedStruct.MasqueradingPort
		varHciCluster.MemoryCapacityBytes = varHciClusterWithoutEmbeddedStruct.MemoryCapacityBytes
		varHciCluster.MemoryUsageBytes = varHciClusterWithoutEmbeddedStruct.MemoryUsageBytes
		varHciCluster.Name = varHciClusterWithoutEmbeddedStruct.Name
		varHciCluster.NameServerIpList = varHciClusterWithoutEmbeddedStruct.NameServerIpList
		varHciCluster.NtpServerIpList = varHciClusterWithoutEmbeddedStruct.NtpServerIpList
		varHciCluster.NumberOfNodes = varHciClusterWithoutEmbeddedStruct.NumberOfNodes
		varHciCluster.OperationMode = varHciClusterWithoutEmbeddedStruct.OperationMode
		varHciCluster.PasswordRemoteLoginEnabled = varHciClusterWithoutEmbeddedStruct.PasswordRemoteLoginEnabled
		varHciCluster.PcExtId = varHciClusterWithoutEmbeddedStruct.PcExtId
		varHciCluster.PulseStatus = varHciClusterWithoutEmbeddedStruct.PulseStatus
		varHciCluster.RedundancyFactor = varHciClusterWithoutEmbeddedStruct.RedundancyFactor
		varHciCluster.RemoteSupport = varHciClusterWithoutEmbeddedStruct.RemoteSupport
		varHciCluster.StorageCapacityBytes = varHciClusterWithoutEmbeddedStruct.StorageCapacityBytes
		varHciCluster.StorageUsageBytes = varHciClusterWithoutEmbeddedStruct.StorageUsageBytes
		varHciCluster.Timezone = varHciClusterWithoutEmbeddedStruct.Timezone
		varHciCluster.UpgradeStatus = varHciClusterWithoutEmbeddedStruct.UpgradeStatus
		varHciCluster.VmCount = varHciClusterWithoutEmbeddedStruct.VmCount
		varHciCluster.Compliance = varHciClusterWithoutEmbeddedStruct.Compliance
		varHciCluster.DomainManager = varHciClusterWithoutEmbeddedStruct.DomainManager
		varHciCluster.Entitlement = varHciClusterWithoutEmbeddedStruct.Entitlement
		varHciCluster.Nodes = varHciClusterWithoutEmbeddedStruct.Nodes
		varHciCluster.RegisteredDevice = varHciClusterWithoutEmbeddedStruct.RegisteredDevice
		varHciCluster.Violation = varHciClusterWithoutEmbeddedStruct.Violation
		*o = HciCluster(varHciCluster)
	} else {
		return err
	}

	varHciCluster := _HciCluster{}

	err = json.Unmarshal(data, &varHciCluster)
	if err == nil {
		o.MoBaseMo = varHciCluster.MoBaseMo
	} else {
		return err
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "ClassId")
		delete(additionalProperties, "ObjectType")
		delete(additionalProperties, "AlarmSummary")
		delete(additionalProperties, "Backplane")
		delete(additionalProperties, "BuildInfoBuildType")
		delete(additionalProperties, "BuildInfoCommitId")
		delete(additionalProperties, "BuildInfoFullVersion")
		delete(additionalProperties, "BuildInfoShortCommitId")
		delete(additionalProperties, "BuildInfoVersion")
		delete(additionalProperties, "ClusterArch")
		delete(additionalProperties, "ClusterExtId")
		delete(additionalProperties, "ClusterFunction")
		delete(additionalProperties, "ClusterSoftwareMap")
		delete(additionalProperties, "ContainerName")
		delete(additionalProperties, "CpuCapacityHz")
		delete(additionalProperties, "CpuUsageHz")
		delete(additionalProperties, "EncryptionInTransitStatus")
		delete(additionalProperties, "EncryptionScope")
		delete(additionalProperties, "ExternalAddress")
		delete(additionalProperties, "ExternalDataServiceIp")
		delete(additionalProperties, "ExternalSubnet")
		delete(additionalProperties, "FaultToleranceState")
		delete(additionalProperties, "HypervisorTypes")
		delete(additionalProperties, "Incarnationid")
		delete(additionalProperties, "InefficientVmCount")
		delete(additionalProperties, "InternalSubnet")
		delete(additionalProperties, "IsLts")
		delete(additionalProperties, "KeyManagementServerType")
		delete(additionalProperties, "ManagementServer")
		delete(additionalProperties, "MasqueradingIp")
		delete(additionalProperties, "MasqueradingPort")
		delete(additionalProperties, "MemoryCapacityBytes")
		delete(additionalProperties, "MemoryUsageBytes")
		delete(additionalProperties, "Name")
		delete(additionalProperties, "NameServerIpList")
		delete(additionalProperties, "NtpServerIpList")
		delete(additionalProperties, "NumberOfNodes")
		delete(additionalProperties, "OperationMode")
		delete(additionalProperties, "PasswordRemoteLoginEnabled")
		delete(additionalProperties, "PcExtId")
		delete(additionalProperties, "PulseStatus")
		delete(additionalProperties, "RedundancyFactor")
		delete(additionalProperties, "RemoteSupport")
		delete(additionalProperties, "StorageCapacityBytes")
		delete(additionalProperties, "StorageUsageBytes")
		delete(additionalProperties, "Timezone")
		delete(additionalProperties, "UpgradeStatus")
		delete(additionalProperties, "VmCount")
		delete(additionalProperties, "Compliance")
		delete(additionalProperties, "DomainManager")
		delete(additionalProperties, "Entitlement")
		delete(additionalProperties, "Nodes")
		delete(additionalProperties, "RegisteredDevice")
		delete(additionalProperties, "Violation")

		// remove fields from embedded structs
		reflectMoBaseMo := reflect.ValueOf(o.MoBaseMo)
		for i := 0; i < reflectMoBaseMo.Type().NumField(); i++ {
			t := reflectMoBaseMo.Type().Field(i)

			if jsonTag := t.Tag.Get("json"); jsonTag != "" {
				fieldName := ""
				if commaIdx := strings.Index(jsonTag, ","); commaIdx > 0 {
					fieldName = jsonTag[:commaIdx]
				} else {
					fieldName = jsonTag
				}
				if fieldName != "AdditionalProperties" {
					delete(additionalProperties, fieldName)
				}
			}
		}

		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableHciCluster struct {
	value *HciCluster
	isSet bool
}

func (v NullableHciCluster) Get() *HciCluster {
	return v.value
}

func (v *NullableHciCluster) Set(val *HciCluster) {
	v.value = val
	v.isSet = true
}

func (v NullableHciCluster) IsSet() bool {
	return v.isSet
}

func (v *NullableHciCluster) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHciCluster(val *HciCluster) *NullableHciCluster {
	return &NullableHciCluster{value: val, isSet: true}
}

func (v NullableHciCluster) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHciCluster) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
