/*
Cisco Intersight

Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations. The Intersight OpenAPI document defines the complete set of properties that are returned in the HTTP response. From that perspective, a client can expect that no additional properties are returned, unless these properties are explicitly defined in the OpenAPI document. However, when a client uses an older version of the Intersight OpenAPI document, the server may send additional properties because the software is more recent than the client. In that case, the client may receive properties that it does not know about. Some generated SDKs perform a strict validation of the HTTP response body against the OpenAPI document.

API version: 1.0.11-14828
Contact: intersight@cisco.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package intersight

import (
	"encoding/json"
)

// AccessIpAddressAllOf Definition of the list of properties defined in 'access.IpAddress', excluding properties defined in parent classes.
type AccessIpAddressAllOf struct {
	// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.
	ClassId string `json:"ClassId"`
	// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
	ObjectType string `json:"ObjectType"`
	// IPv4 Address leased to this Server Profile for In-Band Deployment.
	Ipv4Address *string `json:"Ipv4Address,omitempty"`
	// IPv4 Address leased to this Server Profile for In-Band Deployment.
	Ipv6Address *string `json:"Ipv6Address,omitempty"`
	// IPv4 Address leased to this Server Profile for Out-Of-Band deployment.
	OobIpv4Address       *string                                  `json:"OobIpv4Address,omitempty"`
	Ipv4Lease            *IppoolIpLeaseRelationship               `json:"Ipv4Lease,omitempty"`
	Ipv6Lease            *IppoolIpLeaseRelationship               `json:"Ipv6Lease,omitempty"`
	OobIpv4Lease         *IppoolIpLeaseRelationship               `json:"OobIpv4Lease,omitempty"`
	Profile              *PolicyAbstractConfigProfileRelationship `json:"Profile,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _AccessIpAddressAllOf AccessIpAddressAllOf

// NewAccessIpAddressAllOf instantiates a new AccessIpAddressAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAccessIpAddressAllOf(classId string, objectType string) *AccessIpAddressAllOf {
	this := AccessIpAddressAllOf{}
	this.ClassId = classId
	this.ObjectType = objectType
	return &this
}

// NewAccessIpAddressAllOfWithDefaults instantiates a new AccessIpAddressAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAccessIpAddressAllOfWithDefaults() *AccessIpAddressAllOf {
	this := AccessIpAddressAllOf{}
	var classId string = "access.IpAddress"
	this.ClassId = classId
	var objectType string = "access.IpAddress"
	this.ObjectType = objectType
	return &this
}

// GetClassId returns the ClassId field value
func (o *AccessIpAddressAllOf) GetClassId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ClassId
}

// GetClassIdOk returns a tuple with the ClassId field value
// and a boolean to check if the value has been set.
func (o *AccessIpAddressAllOf) GetClassIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ClassId, true
}

// SetClassId sets field value
func (o *AccessIpAddressAllOf) SetClassId(v string) {
	o.ClassId = v
}

// GetObjectType returns the ObjectType field value
func (o *AccessIpAddressAllOf) GetObjectType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ObjectType
}

// GetObjectTypeOk returns a tuple with the ObjectType field value
// and a boolean to check if the value has been set.
func (o *AccessIpAddressAllOf) GetObjectTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ObjectType, true
}

// SetObjectType sets field value
func (o *AccessIpAddressAllOf) SetObjectType(v string) {
	o.ObjectType = v
}

// GetIpv4Address returns the Ipv4Address field value if set, zero value otherwise.
func (o *AccessIpAddressAllOf) GetIpv4Address() string {
	if o == nil || o.Ipv4Address == nil {
		var ret string
		return ret
	}
	return *o.Ipv4Address
}

// GetIpv4AddressOk returns a tuple with the Ipv4Address field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccessIpAddressAllOf) GetIpv4AddressOk() (*string, bool) {
	if o == nil || o.Ipv4Address == nil {
		return nil, false
	}
	return o.Ipv4Address, true
}

// HasIpv4Address returns a boolean if a field has been set.
func (o *AccessIpAddressAllOf) HasIpv4Address() bool {
	if o != nil && o.Ipv4Address != nil {
		return true
	}

	return false
}

// SetIpv4Address gets a reference to the given string and assigns it to the Ipv4Address field.
func (o *AccessIpAddressAllOf) SetIpv4Address(v string) {
	o.Ipv4Address = &v
}

// GetIpv6Address returns the Ipv6Address field value if set, zero value otherwise.
func (o *AccessIpAddressAllOf) GetIpv6Address() string {
	if o == nil || o.Ipv6Address == nil {
		var ret string
		return ret
	}
	return *o.Ipv6Address
}

// GetIpv6AddressOk returns a tuple with the Ipv6Address field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccessIpAddressAllOf) GetIpv6AddressOk() (*string, bool) {
	if o == nil || o.Ipv6Address == nil {
		return nil, false
	}
	return o.Ipv6Address, true
}

// HasIpv6Address returns a boolean if a field has been set.
func (o *AccessIpAddressAllOf) HasIpv6Address() bool {
	if o != nil && o.Ipv6Address != nil {
		return true
	}

	return false
}

// SetIpv6Address gets a reference to the given string and assigns it to the Ipv6Address field.
func (o *AccessIpAddressAllOf) SetIpv6Address(v string) {
	o.Ipv6Address = &v
}

// GetOobIpv4Address returns the OobIpv4Address field value if set, zero value otherwise.
func (o *AccessIpAddressAllOf) GetOobIpv4Address() string {
	if o == nil || o.OobIpv4Address == nil {
		var ret string
		return ret
	}
	return *o.OobIpv4Address
}

// GetOobIpv4AddressOk returns a tuple with the OobIpv4Address field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccessIpAddressAllOf) GetOobIpv4AddressOk() (*string, bool) {
	if o == nil || o.OobIpv4Address == nil {
		return nil, false
	}
	return o.OobIpv4Address, true
}

// HasOobIpv4Address returns a boolean if a field has been set.
func (o *AccessIpAddressAllOf) HasOobIpv4Address() bool {
	if o != nil && o.OobIpv4Address != nil {
		return true
	}

	return false
}

// SetOobIpv4Address gets a reference to the given string and assigns it to the OobIpv4Address field.
func (o *AccessIpAddressAllOf) SetOobIpv4Address(v string) {
	o.OobIpv4Address = &v
}

// GetIpv4Lease returns the Ipv4Lease field value if set, zero value otherwise.
func (o *AccessIpAddressAllOf) GetIpv4Lease() IppoolIpLeaseRelationship {
	if o == nil || o.Ipv4Lease == nil {
		var ret IppoolIpLeaseRelationship
		return ret
	}
	return *o.Ipv4Lease
}

// GetIpv4LeaseOk returns a tuple with the Ipv4Lease field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccessIpAddressAllOf) GetIpv4LeaseOk() (*IppoolIpLeaseRelationship, bool) {
	if o == nil || o.Ipv4Lease == nil {
		return nil, false
	}
	return o.Ipv4Lease, true
}

// HasIpv4Lease returns a boolean if a field has been set.
func (o *AccessIpAddressAllOf) HasIpv4Lease() bool {
	if o != nil && o.Ipv4Lease != nil {
		return true
	}

	return false
}

// SetIpv4Lease gets a reference to the given IppoolIpLeaseRelationship and assigns it to the Ipv4Lease field.
func (o *AccessIpAddressAllOf) SetIpv4Lease(v IppoolIpLeaseRelationship) {
	o.Ipv4Lease = &v
}

// GetIpv6Lease returns the Ipv6Lease field value if set, zero value otherwise.
func (o *AccessIpAddressAllOf) GetIpv6Lease() IppoolIpLeaseRelationship {
	if o == nil || o.Ipv6Lease == nil {
		var ret IppoolIpLeaseRelationship
		return ret
	}
	return *o.Ipv6Lease
}

// GetIpv6LeaseOk returns a tuple with the Ipv6Lease field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccessIpAddressAllOf) GetIpv6LeaseOk() (*IppoolIpLeaseRelationship, bool) {
	if o == nil || o.Ipv6Lease == nil {
		return nil, false
	}
	return o.Ipv6Lease, true
}

// HasIpv6Lease returns a boolean if a field has been set.
func (o *AccessIpAddressAllOf) HasIpv6Lease() bool {
	if o != nil && o.Ipv6Lease != nil {
		return true
	}

	return false
}

// SetIpv6Lease gets a reference to the given IppoolIpLeaseRelationship and assigns it to the Ipv6Lease field.
func (o *AccessIpAddressAllOf) SetIpv6Lease(v IppoolIpLeaseRelationship) {
	o.Ipv6Lease = &v
}

// GetOobIpv4Lease returns the OobIpv4Lease field value if set, zero value otherwise.
func (o *AccessIpAddressAllOf) GetOobIpv4Lease() IppoolIpLeaseRelationship {
	if o == nil || o.OobIpv4Lease == nil {
		var ret IppoolIpLeaseRelationship
		return ret
	}
	return *o.OobIpv4Lease
}

// GetOobIpv4LeaseOk returns a tuple with the OobIpv4Lease field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccessIpAddressAllOf) GetOobIpv4LeaseOk() (*IppoolIpLeaseRelationship, bool) {
	if o == nil || o.OobIpv4Lease == nil {
		return nil, false
	}
	return o.OobIpv4Lease, true
}

// HasOobIpv4Lease returns a boolean if a field has been set.
func (o *AccessIpAddressAllOf) HasOobIpv4Lease() bool {
	if o != nil && o.OobIpv4Lease != nil {
		return true
	}

	return false
}

// SetOobIpv4Lease gets a reference to the given IppoolIpLeaseRelationship and assigns it to the OobIpv4Lease field.
func (o *AccessIpAddressAllOf) SetOobIpv4Lease(v IppoolIpLeaseRelationship) {
	o.OobIpv4Lease = &v
}

// GetProfile returns the Profile field value if set, zero value otherwise.
func (o *AccessIpAddressAllOf) GetProfile() PolicyAbstractConfigProfileRelationship {
	if o == nil || o.Profile == nil {
		var ret PolicyAbstractConfigProfileRelationship
		return ret
	}
	return *o.Profile
}

// GetProfileOk returns a tuple with the Profile field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccessIpAddressAllOf) GetProfileOk() (*PolicyAbstractConfigProfileRelationship, bool) {
	if o == nil || o.Profile == nil {
		return nil, false
	}
	return o.Profile, true
}

// HasProfile returns a boolean if a field has been set.
func (o *AccessIpAddressAllOf) HasProfile() bool {
	if o != nil && o.Profile != nil {
		return true
	}

	return false
}

// SetProfile gets a reference to the given PolicyAbstractConfigProfileRelationship and assigns it to the Profile field.
func (o *AccessIpAddressAllOf) SetProfile(v PolicyAbstractConfigProfileRelationship) {
	o.Profile = &v
}

func (o AccessIpAddressAllOf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["ClassId"] = o.ClassId
	}
	if true {
		toSerialize["ObjectType"] = o.ObjectType
	}
	if o.Ipv4Address != nil {
		toSerialize["Ipv4Address"] = o.Ipv4Address
	}
	if o.Ipv6Address != nil {
		toSerialize["Ipv6Address"] = o.Ipv6Address
	}
	if o.OobIpv4Address != nil {
		toSerialize["OobIpv4Address"] = o.OobIpv4Address
	}
	if o.Ipv4Lease != nil {
		toSerialize["Ipv4Lease"] = o.Ipv4Lease
	}
	if o.Ipv6Lease != nil {
		toSerialize["Ipv6Lease"] = o.Ipv6Lease
	}
	if o.OobIpv4Lease != nil {
		toSerialize["OobIpv4Lease"] = o.OobIpv4Lease
	}
	if o.Profile != nil {
		toSerialize["Profile"] = o.Profile
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *AccessIpAddressAllOf) UnmarshalJSON(bytes []byte) (err error) {
	varAccessIpAddressAllOf := _AccessIpAddressAllOf{}

	if err = json.Unmarshal(bytes, &varAccessIpAddressAllOf); err == nil {
		*o = AccessIpAddressAllOf(varAccessIpAddressAllOf)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "ClassId")
		delete(additionalProperties, "ObjectType")
		delete(additionalProperties, "Ipv4Address")
		delete(additionalProperties, "Ipv6Address")
		delete(additionalProperties, "OobIpv4Address")
		delete(additionalProperties, "Ipv4Lease")
		delete(additionalProperties, "Ipv6Lease")
		delete(additionalProperties, "OobIpv4Lease")
		delete(additionalProperties, "Profile")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableAccessIpAddressAllOf struct {
	value *AccessIpAddressAllOf
	isSet bool
}

func (v NullableAccessIpAddressAllOf) Get() *AccessIpAddressAllOf {
	return v.value
}

func (v *NullableAccessIpAddressAllOf) Set(val *AccessIpAddressAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableAccessIpAddressAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableAccessIpAddressAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAccessIpAddressAllOf(val *AccessIpAddressAllOf) *NullableAccessIpAddressAllOf {
	return &NullableAccessIpAddressAllOf{value: val, isSet: true}
}

func (v NullableAccessIpAddressAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAccessIpAddressAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
