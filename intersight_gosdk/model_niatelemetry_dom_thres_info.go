/*
Cisco Intersight

Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations. The Intersight OpenAPI document defines the complete set of properties that are returned in the HTTP response. From that perspective, a client can expect that no additional properties are returned, unless these properties are explicitly defined in the OpenAPI document. However, when a client uses an older version of the Intersight OpenAPI document, the server may send additional properties because the software is more recent than the client. In that case, the client may receive properties that it does not know about. Some generated SDKs perform a strict validation of the HTTP response body against the OpenAPI document.

API version: 1.0.11-18775
Contact: intersight@cisco.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package intersight

import (
	"encoding/json"
	"fmt"
	"reflect"
	"strings"
)

// checks if the NiatelemetryDomThresInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NiatelemetryDomThresInfo{}

// NiatelemetryDomThresInfo Object that carries all the fields needed for Dom Threshold Information.
type NiatelemetryDomThresInfo struct {
	MoBaseComplexType
	// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.
	ClassId string `json:"ClassId"`
	// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
	ObjectType string `json:"ObjectType"`
	// Returns distinguished name of the transceiver.
	Dn *string `json:"Dn,omitempty"`
	// Returns highalarm value of the transceiver sensor.
	HighAlarm *string `json:"HighAlarm,omitempty"`
	// Returns highwarning value of the transceiver sensor.
	HighWarning *string `json:"HighWarning,omitempty"`
	// Returns lowalarm value of the transceiver sensor.
	LowAlarm *string `json:"LowAlarm,omitempty"`
	// Returns lowwarning value of the transceiver sensor.
	LowWarning *string `json:"LowWarning,omitempty"`
	// Returns numlanes of the transceiver sensors.
	NumLanes *string `json:"NumLanes,omitempty"`
	// Returns part number of the transceiver.
	PartNumber *string `json:"PartNumber,omitempty"`
	// Returns type of the transceiver sfp or qsfp.
	Type *string `json:"Type,omitempty"`
	// Returns type name of the transceiver sfp or qsfp.
	TypeName *string `json:"TypeName,omitempty"`
	// Returns calibration value (unit) of transceiver sensor.
	Unit *string `json:"Unit,omitempty"`
	// Returns vendor name string of the transceiver.
	VendorName *string `json:"VendorName,omitempty"`
	// Returns vendor part number of the transceiver.
	VendorPn *string `json:"VendorPn,omitempty"`
	// Returns vendor revision number of the transceiver.
	VendorRev *string `json:"VendorRev,omitempty"`
	// Returns vendor serial number of the transceiver.
	VendorSn *string `json:"VendorSn,omitempty"`
	// Returns version identifier of the transceiver.
	VersionId            *string `json:"VersionId,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _NiatelemetryDomThresInfo NiatelemetryDomThresInfo

// NewNiatelemetryDomThresInfo instantiates a new NiatelemetryDomThresInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNiatelemetryDomThresInfo(classId string, objectType string) *NiatelemetryDomThresInfo {
	this := NiatelemetryDomThresInfo{}
	this.ClassId = classId
	this.ObjectType = objectType
	return &this
}

// NewNiatelemetryDomThresInfoWithDefaults instantiates a new NiatelemetryDomThresInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNiatelemetryDomThresInfoWithDefaults() *NiatelemetryDomThresInfo {
	this := NiatelemetryDomThresInfo{}
	var classId string = "niatelemetry.DomThresInfo"
	this.ClassId = classId
	var objectType string = "niatelemetry.DomThresInfo"
	this.ObjectType = objectType
	return &this
}

// GetClassId returns the ClassId field value
func (o *NiatelemetryDomThresInfo) GetClassId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ClassId
}

// GetClassIdOk returns a tuple with the ClassId field value
// and a boolean to check if the value has been set.
func (o *NiatelemetryDomThresInfo) GetClassIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ClassId, true
}

// SetClassId sets field value
func (o *NiatelemetryDomThresInfo) SetClassId(v string) {
	o.ClassId = v
}

// GetDefaultClassId returns the default value "niatelemetry.DomThresInfo" of the ClassId field.
func (o *NiatelemetryDomThresInfo) GetDefaultClassId() interface{} {
	return "niatelemetry.DomThresInfo"
}

// GetObjectType returns the ObjectType field value
func (o *NiatelemetryDomThresInfo) GetObjectType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ObjectType
}

// GetObjectTypeOk returns a tuple with the ObjectType field value
// and a boolean to check if the value has been set.
func (o *NiatelemetryDomThresInfo) GetObjectTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ObjectType, true
}

// SetObjectType sets field value
func (o *NiatelemetryDomThresInfo) SetObjectType(v string) {
	o.ObjectType = v
}

// GetDefaultObjectType returns the default value "niatelemetry.DomThresInfo" of the ObjectType field.
func (o *NiatelemetryDomThresInfo) GetDefaultObjectType() interface{} {
	return "niatelemetry.DomThresInfo"
}

// GetDn returns the Dn field value if set, zero value otherwise.
func (o *NiatelemetryDomThresInfo) GetDn() string {
	if o == nil || IsNil(o.Dn) {
		var ret string
		return ret
	}
	return *o.Dn
}

// GetDnOk returns a tuple with the Dn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NiatelemetryDomThresInfo) GetDnOk() (*string, bool) {
	if o == nil || IsNil(o.Dn) {
		return nil, false
	}
	return o.Dn, true
}

// HasDn returns a boolean if a field has been set.
func (o *NiatelemetryDomThresInfo) HasDn() bool {
	if o != nil && !IsNil(o.Dn) {
		return true
	}

	return false
}

// SetDn gets a reference to the given string and assigns it to the Dn field.
func (o *NiatelemetryDomThresInfo) SetDn(v string) {
	o.Dn = &v
}

// GetHighAlarm returns the HighAlarm field value if set, zero value otherwise.
func (o *NiatelemetryDomThresInfo) GetHighAlarm() string {
	if o == nil || IsNil(o.HighAlarm) {
		var ret string
		return ret
	}
	return *o.HighAlarm
}

// GetHighAlarmOk returns a tuple with the HighAlarm field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NiatelemetryDomThresInfo) GetHighAlarmOk() (*string, bool) {
	if o == nil || IsNil(o.HighAlarm) {
		return nil, false
	}
	return o.HighAlarm, true
}

// HasHighAlarm returns a boolean if a field has been set.
func (o *NiatelemetryDomThresInfo) HasHighAlarm() bool {
	if o != nil && !IsNil(o.HighAlarm) {
		return true
	}

	return false
}

// SetHighAlarm gets a reference to the given string and assigns it to the HighAlarm field.
func (o *NiatelemetryDomThresInfo) SetHighAlarm(v string) {
	o.HighAlarm = &v
}

// GetHighWarning returns the HighWarning field value if set, zero value otherwise.
func (o *NiatelemetryDomThresInfo) GetHighWarning() string {
	if o == nil || IsNil(o.HighWarning) {
		var ret string
		return ret
	}
	return *o.HighWarning
}

// GetHighWarningOk returns a tuple with the HighWarning field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NiatelemetryDomThresInfo) GetHighWarningOk() (*string, bool) {
	if o == nil || IsNil(o.HighWarning) {
		return nil, false
	}
	return o.HighWarning, true
}

// HasHighWarning returns a boolean if a field has been set.
func (o *NiatelemetryDomThresInfo) HasHighWarning() bool {
	if o != nil && !IsNil(o.HighWarning) {
		return true
	}

	return false
}

// SetHighWarning gets a reference to the given string and assigns it to the HighWarning field.
func (o *NiatelemetryDomThresInfo) SetHighWarning(v string) {
	o.HighWarning = &v
}

// GetLowAlarm returns the LowAlarm field value if set, zero value otherwise.
func (o *NiatelemetryDomThresInfo) GetLowAlarm() string {
	if o == nil || IsNil(o.LowAlarm) {
		var ret string
		return ret
	}
	return *o.LowAlarm
}

// GetLowAlarmOk returns a tuple with the LowAlarm field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NiatelemetryDomThresInfo) GetLowAlarmOk() (*string, bool) {
	if o == nil || IsNil(o.LowAlarm) {
		return nil, false
	}
	return o.LowAlarm, true
}

// HasLowAlarm returns a boolean if a field has been set.
func (o *NiatelemetryDomThresInfo) HasLowAlarm() bool {
	if o != nil && !IsNil(o.LowAlarm) {
		return true
	}

	return false
}

// SetLowAlarm gets a reference to the given string and assigns it to the LowAlarm field.
func (o *NiatelemetryDomThresInfo) SetLowAlarm(v string) {
	o.LowAlarm = &v
}

// GetLowWarning returns the LowWarning field value if set, zero value otherwise.
func (o *NiatelemetryDomThresInfo) GetLowWarning() string {
	if o == nil || IsNil(o.LowWarning) {
		var ret string
		return ret
	}
	return *o.LowWarning
}

// GetLowWarningOk returns a tuple with the LowWarning field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NiatelemetryDomThresInfo) GetLowWarningOk() (*string, bool) {
	if o == nil || IsNil(o.LowWarning) {
		return nil, false
	}
	return o.LowWarning, true
}

// HasLowWarning returns a boolean if a field has been set.
func (o *NiatelemetryDomThresInfo) HasLowWarning() bool {
	if o != nil && !IsNil(o.LowWarning) {
		return true
	}

	return false
}

// SetLowWarning gets a reference to the given string and assigns it to the LowWarning field.
func (o *NiatelemetryDomThresInfo) SetLowWarning(v string) {
	o.LowWarning = &v
}

// GetNumLanes returns the NumLanes field value if set, zero value otherwise.
func (o *NiatelemetryDomThresInfo) GetNumLanes() string {
	if o == nil || IsNil(o.NumLanes) {
		var ret string
		return ret
	}
	return *o.NumLanes
}

// GetNumLanesOk returns a tuple with the NumLanes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NiatelemetryDomThresInfo) GetNumLanesOk() (*string, bool) {
	if o == nil || IsNil(o.NumLanes) {
		return nil, false
	}
	return o.NumLanes, true
}

// HasNumLanes returns a boolean if a field has been set.
func (o *NiatelemetryDomThresInfo) HasNumLanes() bool {
	if o != nil && !IsNil(o.NumLanes) {
		return true
	}

	return false
}

// SetNumLanes gets a reference to the given string and assigns it to the NumLanes field.
func (o *NiatelemetryDomThresInfo) SetNumLanes(v string) {
	o.NumLanes = &v
}

// GetPartNumber returns the PartNumber field value if set, zero value otherwise.
func (o *NiatelemetryDomThresInfo) GetPartNumber() string {
	if o == nil || IsNil(o.PartNumber) {
		var ret string
		return ret
	}
	return *o.PartNumber
}

// GetPartNumberOk returns a tuple with the PartNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NiatelemetryDomThresInfo) GetPartNumberOk() (*string, bool) {
	if o == nil || IsNil(o.PartNumber) {
		return nil, false
	}
	return o.PartNumber, true
}

// HasPartNumber returns a boolean if a field has been set.
func (o *NiatelemetryDomThresInfo) HasPartNumber() bool {
	if o != nil && !IsNil(o.PartNumber) {
		return true
	}

	return false
}

// SetPartNumber gets a reference to the given string and assigns it to the PartNumber field.
func (o *NiatelemetryDomThresInfo) SetPartNumber(v string) {
	o.PartNumber = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *NiatelemetryDomThresInfo) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NiatelemetryDomThresInfo) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *NiatelemetryDomThresInfo) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *NiatelemetryDomThresInfo) SetType(v string) {
	o.Type = &v
}

// GetTypeName returns the TypeName field value if set, zero value otherwise.
func (o *NiatelemetryDomThresInfo) GetTypeName() string {
	if o == nil || IsNil(o.TypeName) {
		var ret string
		return ret
	}
	return *o.TypeName
}

// GetTypeNameOk returns a tuple with the TypeName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NiatelemetryDomThresInfo) GetTypeNameOk() (*string, bool) {
	if o == nil || IsNil(o.TypeName) {
		return nil, false
	}
	return o.TypeName, true
}

// HasTypeName returns a boolean if a field has been set.
func (o *NiatelemetryDomThresInfo) HasTypeName() bool {
	if o != nil && !IsNil(o.TypeName) {
		return true
	}

	return false
}

// SetTypeName gets a reference to the given string and assigns it to the TypeName field.
func (o *NiatelemetryDomThresInfo) SetTypeName(v string) {
	o.TypeName = &v
}

// GetUnit returns the Unit field value if set, zero value otherwise.
func (o *NiatelemetryDomThresInfo) GetUnit() string {
	if o == nil || IsNil(o.Unit) {
		var ret string
		return ret
	}
	return *o.Unit
}

// GetUnitOk returns a tuple with the Unit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NiatelemetryDomThresInfo) GetUnitOk() (*string, bool) {
	if o == nil || IsNil(o.Unit) {
		return nil, false
	}
	return o.Unit, true
}

// HasUnit returns a boolean if a field has been set.
func (o *NiatelemetryDomThresInfo) HasUnit() bool {
	if o != nil && !IsNil(o.Unit) {
		return true
	}

	return false
}

// SetUnit gets a reference to the given string and assigns it to the Unit field.
func (o *NiatelemetryDomThresInfo) SetUnit(v string) {
	o.Unit = &v
}

// GetVendorName returns the VendorName field value if set, zero value otherwise.
func (o *NiatelemetryDomThresInfo) GetVendorName() string {
	if o == nil || IsNil(o.VendorName) {
		var ret string
		return ret
	}
	return *o.VendorName
}

// GetVendorNameOk returns a tuple with the VendorName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NiatelemetryDomThresInfo) GetVendorNameOk() (*string, bool) {
	if o == nil || IsNil(o.VendorName) {
		return nil, false
	}
	return o.VendorName, true
}

// HasVendorName returns a boolean if a field has been set.
func (o *NiatelemetryDomThresInfo) HasVendorName() bool {
	if o != nil && !IsNil(o.VendorName) {
		return true
	}

	return false
}

// SetVendorName gets a reference to the given string and assigns it to the VendorName field.
func (o *NiatelemetryDomThresInfo) SetVendorName(v string) {
	o.VendorName = &v
}

// GetVendorPn returns the VendorPn field value if set, zero value otherwise.
func (o *NiatelemetryDomThresInfo) GetVendorPn() string {
	if o == nil || IsNil(o.VendorPn) {
		var ret string
		return ret
	}
	return *o.VendorPn
}

// GetVendorPnOk returns a tuple with the VendorPn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NiatelemetryDomThresInfo) GetVendorPnOk() (*string, bool) {
	if o == nil || IsNil(o.VendorPn) {
		return nil, false
	}
	return o.VendorPn, true
}

// HasVendorPn returns a boolean if a field has been set.
func (o *NiatelemetryDomThresInfo) HasVendorPn() bool {
	if o != nil && !IsNil(o.VendorPn) {
		return true
	}

	return false
}

// SetVendorPn gets a reference to the given string and assigns it to the VendorPn field.
func (o *NiatelemetryDomThresInfo) SetVendorPn(v string) {
	o.VendorPn = &v
}

// GetVendorRev returns the VendorRev field value if set, zero value otherwise.
func (o *NiatelemetryDomThresInfo) GetVendorRev() string {
	if o == nil || IsNil(o.VendorRev) {
		var ret string
		return ret
	}
	return *o.VendorRev
}

// GetVendorRevOk returns a tuple with the VendorRev field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NiatelemetryDomThresInfo) GetVendorRevOk() (*string, bool) {
	if o == nil || IsNil(o.VendorRev) {
		return nil, false
	}
	return o.VendorRev, true
}

// HasVendorRev returns a boolean if a field has been set.
func (o *NiatelemetryDomThresInfo) HasVendorRev() bool {
	if o != nil && !IsNil(o.VendorRev) {
		return true
	}

	return false
}

// SetVendorRev gets a reference to the given string and assigns it to the VendorRev field.
func (o *NiatelemetryDomThresInfo) SetVendorRev(v string) {
	o.VendorRev = &v
}

// GetVendorSn returns the VendorSn field value if set, zero value otherwise.
func (o *NiatelemetryDomThresInfo) GetVendorSn() string {
	if o == nil || IsNil(o.VendorSn) {
		var ret string
		return ret
	}
	return *o.VendorSn
}

// GetVendorSnOk returns a tuple with the VendorSn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NiatelemetryDomThresInfo) GetVendorSnOk() (*string, bool) {
	if o == nil || IsNil(o.VendorSn) {
		return nil, false
	}
	return o.VendorSn, true
}

// HasVendorSn returns a boolean if a field has been set.
func (o *NiatelemetryDomThresInfo) HasVendorSn() bool {
	if o != nil && !IsNil(o.VendorSn) {
		return true
	}

	return false
}

// SetVendorSn gets a reference to the given string and assigns it to the VendorSn field.
func (o *NiatelemetryDomThresInfo) SetVendorSn(v string) {
	o.VendorSn = &v
}

// GetVersionId returns the VersionId field value if set, zero value otherwise.
func (o *NiatelemetryDomThresInfo) GetVersionId() string {
	if o == nil || IsNil(o.VersionId) {
		var ret string
		return ret
	}
	return *o.VersionId
}

// GetVersionIdOk returns a tuple with the VersionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NiatelemetryDomThresInfo) GetVersionIdOk() (*string, bool) {
	if o == nil || IsNil(o.VersionId) {
		return nil, false
	}
	return o.VersionId, true
}

// HasVersionId returns a boolean if a field has been set.
func (o *NiatelemetryDomThresInfo) HasVersionId() bool {
	if o != nil && !IsNil(o.VersionId) {
		return true
	}

	return false
}

// SetVersionId gets a reference to the given string and assigns it to the VersionId field.
func (o *NiatelemetryDomThresInfo) SetVersionId(v string) {
	o.VersionId = &v
}

func (o NiatelemetryDomThresInfo) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NiatelemetryDomThresInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	serializedMoBaseComplexType, errMoBaseComplexType := json.Marshal(o.MoBaseComplexType)
	if errMoBaseComplexType != nil {
		return map[string]interface{}{}, errMoBaseComplexType
	}
	errMoBaseComplexType = json.Unmarshal([]byte(serializedMoBaseComplexType), &toSerialize)
	if errMoBaseComplexType != nil {
		return map[string]interface{}{}, errMoBaseComplexType
	}
	if _, exists := toSerialize["ClassId"]; !exists {
		toSerialize["ClassId"] = o.GetDefaultClassId()
	}
	toSerialize["ClassId"] = o.ClassId
	if _, exists := toSerialize["ObjectType"]; !exists {
		toSerialize["ObjectType"] = o.GetDefaultObjectType()
	}
	toSerialize["ObjectType"] = o.ObjectType
	if !IsNil(o.Dn) {
		toSerialize["Dn"] = o.Dn
	}
	if !IsNil(o.HighAlarm) {
		toSerialize["HighAlarm"] = o.HighAlarm
	}
	if !IsNil(o.HighWarning) {
		toSerialize["HighWarning"] = o.HighWarning
	}
	if !IsNil(o.LowAlarm) {
		toSerialize["LowAlarm"] = o.LowAlarm
	}
	if !IsNil(o.LowWarning) {
		toSerialize["LowWarning"] = o.LowWarning
	}
	if !IsNil(o.NumLanes) {
		toSerialize["NumLanes"] = o.NumLanes
	}
	if !IsNil(o.PartNumber) {
		toSerialize["PartNumber"] = o.PartNumber
	}
	if !IsNil(o.Type) {
		toSerialize["Type"] = o.Type
	}
	if !IsNil(o.TypeName) {
		toSerialize["TypeName"] = o.TypeName
	}
	if !IsNil(o.Unit) {
		toSerialize["Unit"] = o.Unit
	}
	if !IsNil(o.VendorName) {
		toSerialize["VendorName"] = o.VendorName
	}
	if !IsNil(o.VendorPn) {
		toSerialize["VendorPn"] = o.VendorPn
	}
	if !IsNil(o.VendorRev) {
		toSerialize["VendorRev"] = o.VendorRev
	}
	if !IsNil(o.VendorSn) {
		toSerialize["VendorSn"] = o.VendorSn
	}
	if !IsNil(o.VersionId) {
		toSerialize["VersionId"] = o.VersionId
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *NiatelemetryDomThresInfo) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"ClassId",
		"ObjectType",
	}

	// defaultValueFuncMap captures the default values for required properties.
	// These values are used when required properties are missing from the payload.
	defaultValueFuncMap := map[string]func() interface{}{
		"ClassId":    o.GetDefaultClassId,
		"ObjectType": o.GetDefaultObjectType,
	}
	var defaultValueApplied bool
	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			if _, ok := defaultValueFuncMap[requiredProperty]; ok {
				allProperties[requiredProperty] = defaultValueFuncMap[requiredProperty]()
				defaultValueApplied = true
			}
		}
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	if defaultValueApplied {
		data, err = json.Marshal(allProperties)
		if err != nil {
			return err
		}
	}
	type NiatelemetryDomThresInfoWithoutEmbeddedStruct struct {
		// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.
		ClassId string `json:"ClassId"`
		// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
		ObjectType string `json:"ObjectType"`
		// Returns distinguished name of the transceiver.
		Dn *string `json:"Dn,omitempty"`
		// Returns highalarm value of the transceiver sensor.
		HighAlarm *string `json:"HighAlarm,omitempty"`
		// Returns highwarning value of the transceiver sensor.
		HighWarning *string `json:"HighWarning,omitempty"`
		// Returns lowalarm value of the transceiver sensor.
		LowAlarm *string `json:"LowAlarm,omitempty"`
		// Returns lowwarning value of the transceiver sensor.
		LowWarning *string `json:"LowWarning,omitempty"`
		// Returns numlanes of the transceiver sensors.
		NumLanes *string `json:"NumLanes,omitempty"`
		// Returns part number of the transceiver.
		PartNumber *string `json:"PartNumber,omitempty"`
		// Returns type of the transceiver sfp or qsfp.
		Type *string `json:"Type,omitempty"`
		// Returns type name of the transceiver sfp or qsfp.
		TypeName *string `json:"TypeName,omitempty"`
		// Returns calibration value (unit) of transceiver sensor.
		Unit *string `json:"Unit,omitempty"`
		// Returns vendor name string of the transceiver.
		VendorName *string `json:"VendorName,omitempty"`
		// Returns vendor part number of the transceiver.
		VendorPn *string `json:"VendorPn,omitempty"`
		// Returns vendor revision number of the transceiver.
		VendorRev *string `json:"VendorRev,omitempty"`
		// Returns vendor serial number of the transceiver.
		VendorSn *string `json:"VendorSn,omitempty"`
		// Returns version identifier of the transceiver.
		VersionId *string `json:"VersionId,omitempty"`
	}

	varNiatelemetryDomThresInfoWithoutEmbeddedStruct := NiatelemetryDomThresInfoWithoutEmbeddedStruct{}

	err = json.Unmarshal(data, &varNiatelemetryDomThresInfoWithoutEmbeddedStruct)
	if err == nil {
		varNiatelemetryDomThresInfo := _NiatelemetryDomThresInfo{}
		varNiatelemetryDomThresInfo.ClassId = varNiatelemetryDomThresInfoWithoutEmbeddedStruct.ClassId
		varNiatelemetryDomThresInfo.ObjectType = varNiatelemetryDomThresInfoWithoutEmbeddedStruct.ObjectType
		varNiatelemetryDomThresInfo.Dn = varNiatelemetryDomThresInfoWithoutEmbeddedStruct.Dn
		varNiatelemetryDomThresInfo.HighAlarm = varNiatelemetryDomThresInfoWithoutEmbeddedStruct.HighAlarm
		varNiatelemetryDomThresInfo.HighWarning = varNiatelemetryDomThresInfoWithoutEmbeddedStruct.HighWarning
		varNiatelemetryDomThresInfo.LowAlarm = varNiatelemetryDomThresInfoWithoutEmbeddedStruct.LowAlarm
		varNiatelemetryDomThresInfo.LowWarning = varNiatelemetryDomThresInfoWithoutEmbeddedStruct.LowWarning
		varNiatelemetryDomThresInfo.NumLanes = varNiatelemetryDomThresInfoWithoutEmbeddedStruct.NumLanes
		varNiatelemetryDomThresInfo.PartNumber = varNiatelemetryDomThresInfoWithoutEmbeddedStruct.PartNumber
		varNiatelemetryDomThresInfo.Type = varNiatelemetryDomThresInfoWithoutEmbeddedStruct.Type
		varNiatelemetryDomThresInfo.TypeName = varNiatelemetryDomThresInfoWithoutEmbeddedStruct.TypeName
		varNiatelemetryDomThresInfo.Unit = varNiatelemetryDomThresInfoWithoutEmbeddedStruct.Unit
		varNiatelemetryDomThresInfo.VendorName = varNiatelemetryDomThresInfoWithoutEmbeddedStruct.VendorName
		varNiatelemetryDomThresInfo.VendorPn = varNiatelemetryDomThresInfoWithoutEmbeddedStruct.VendorPn
		varNiatelemetryDomThresInfo.VendorRev = varNiatelemetryDomThresInfoWithoutEmbeddedStruct.VendorRev
		varNiatelemetryDomThresInfo.VendorSn = varNiatelemetryDomThresInfoWithoutEmbeddedStruct.VendorSn
		varNiatelemetryDomThresInfo.VersionId = varNiatelemetryDomThresInfoWithoutEmbeddedStruct.VersionId
		*o = NiatelemetryDomThresInfo(varNiatelemetryDomThresInfo)
	} else {
		return err
	}

	varNiatelemetryDomThresInfo := _NiatelemetryDomThresInfo{}

	err = json.Unmarshal(data, &varNiatelemetryDomThresInfo)
	if err == nil {
		o.MoBaseComplexType = varNiatelemetryDomThresInfo.MoBaseComplexType
	} else {
		return err
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "ClassId")
		delete(additionalProperties, "ObjectType")
		delete(additionalProperties, "Dn")
		delete(additionalProperties, "HighAlarm")
		delete(additionalProperties, "HighWarning")
		delete(additionalProperties, "LowAlarm")
		delete(additionalProperties, "LowWarning")
		delete(additionalProperties, "NumLanes")
		delete(additionalProperties, "PartNumber")
		delete(additionalProperties, "Type")
		delete(additionalProperties, "TypeName")
		delete(additionalProperties, "Unit")
		delete(additionalProperties, "VendorName")
		delete(additionalProperties, "VendorPn")
		delete(additionalProperties, "VendorRev")
		delete(additionalProperties, "VendorSn")
		delete(additionalProperties, "VersionId")

		// remove fields from embedded structs
		reflectMoBaseComplexType := reflect.ValueOf(o.MoBaseComplexType)
		for i := 0; i < reflectMoBaseComplexType.Type().NumField(); i++ {
			t := reflectMoBaseComplexType.Type().Field(i)

			if jsonTag := t.Tag.Get("json"); jsonTag != "" {
				fieldName := ""
				if commaIdx := strings.Index(jsonTag, ","); commaIdx > 0 {
					fieldName = jsonTag[:commaIdx]
				} else {
					fieldName = jsonTag
				}
				if fieldName != "AdditionalProperties" {
					delete(additionalProperties, fieldName)
				}
			}
		}

		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableNiatelemetryDomThresInfo struct {
	value *NiatelemetryDomThresInfo
	isSet bool
}

func (v NullableNiatelemetryDomThresInfo) Get() *NiatelemetryDomThresInfo {
	return v.value
}

func (v *NullableNiatelemetryDomThresInfo) Set(val *NiatelemetryDomThresInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableNiatelemetryDomThresInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableNiatelemetryDomThresInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNiatelemetryDomThresInfo(val *NiatelemetryDomThresInfo) *NullableNiatelemetryDomThresInfo {
	return &NullableNiatelemetryDomThresInfo{value: val, isSet: true}
}

func (v NullableNiatelemetryDomThresInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNiatelemetryDomThresInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
