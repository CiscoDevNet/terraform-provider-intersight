/*
 * Cisco Intersight
 *
 * Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations. The Intersight OpenAPI document defines the complete set of properties that are returned in the HTTP response. From that perspective, a client can expect that no additional properties are returned, unless these properties are explicitly defined in the OpenAPI document. However, when a client uses an older version of the Intersight OpenAPI document, the server may send additional properties because the software is more recent than the client. In that case, the client may receive properties that it does not know about. Some generated SDKs perform a strict validation of the HTTP response body against the OpenAPI document. This document was created on 2021-07-21T16:37:30Z.
 *
 * API version: 1.0.9-4403
 * Contact: intersight@cisco.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package intersight

import (
	"encoding/json"
	"reflect"
	"strings"
)

// VirtualizationVirtualMachine Depicts operations to control the life cycle of a virtual machine on a hypervisor.
type VirtualizationVirtualMachine struct {
	MoBaseMo
	// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.
	ClassId string `json:"ClassId"`
	// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
	ObjectType string `json:"ObjectType"`
	// Action to be performed on a virtual machine (Create, PowerState, Migrate, Clone etc). * `None` - A place holder for the default value. * `PowerState` - Power action is performed on the virtual machine. * `Migrate` - The virtual machine will be migrated from existing node to a different node in cluster. The behavior depends on the underlying hypervisor. * `Create` - The virtual machine will be created on the specified hypervisor. This action is also useful if the virtual machine creation failed during first POST operation on VirtualMachine managed object. User can set this action to retry the virtual machine creation. * `Delete` - The virtual machine will be deleted from the specified hypervisor. User can either set this action or can do a DELETE operation on the VirtualMachine managed object.
	Action                *string                               `json:"Action,omitempty"`
	ActionInfo            NullableVirtualizationActionInfo      `json:"ActionInfo,omitempty"`
	AffinitySelectors     []InfraMetaData                       `json:"AffinitySelectors,omitempty"`
	AntiAffinitySelectors []InfraMetaData                       `json:"AntiAffinitySelectors,omitempty"`
	CloudInitConfig       NullableVirtualizationCloudInitConfig `json:"CloudInitConfig,omitempty"`
	// Cluster where virtual machine is deployed.
	ClusterEsxi *string `json:"ClusterEsxi,omitempty"`
	// Number of vCPUs allocated to virtual machine.
	Cpu *int64 `json:"Cpu,omitempty"`
	// Flag to indicate whether the configuration is created from inventory object.
	Discovered *bool                              `json:"Discovered,omitempty"`
	Disk       []VirtualizationVirtualMachineDisk `json:"Disk,omitempty"`
	// Normally any virtual machine that is still powered on cannot be deleted. The expected sequence from a user is to first power off the virtual machine and then invoke the delete operation. However, in special circumstances, the owner of the virtual machine may know very well that the virtual machine is no longer needed and just wants to dispose it off. In such situations a delete operation of a virtual machine object is accepted only when this forceDelete attribute is set to true. Under normal circumstances (forceDelete is false), delete operation first confirms that the virtual machine is powered off and then proceeds to delete the virtual machine.
	ForceDelete *bool `json:"ForceDelete,omitempty"`
	// Guest operating system running on virtual machine. * `linux` - A Linux operating system. * `windows` - A Windows operating system.
	GuestOs *string `json:"GuestOs,omitempty"`
	// Host where virtual machine is deployed.
	HostEsxi *string `json:"HostEsxi,omitempty"`
	// Identifies the broad product type of the hypervisor but without any version information. It is here to easily identify the type of the virtual machine. There are other entities (Host, Cluster, etc.) that can be indirectly used to determine the hypervisor but a direct attribute makes it easier to work with. * `ESXi` - The hypervisor running on the HyperFlex cluster is a Vmware ESXi hypervisor of any version. * `HyperFlexAp` - The hypervisor running on the HyperFlex cluster is Cisco HyperFlex Application Platform. * `Hyper-V` - The hypervisor running on the HyperFlex cluster is Microsoft Hyper-V. * `Unknown` - The hypervisor running on the HyperFlex cluster is not known.
	HypervisorType *string                          `json:"HypervisorType,omitempty"`
	Interfaces     []VirtualizationNetworkInterface `json:"Interfaces,omitempty"`
	Labels         []InfraMetaData                  `json:"Labels,omitempty"`
	// Virtual machine memory in mebi bytes (one mebibyte, 1MiB, is 1048576 bytes, and 1KiB is 1024 bytes). Input must be a whole number and scientific notation is not acceptable. For example, enter 1730 and not 1.73e03.
	Memory *int64 `json:"Memory,omitempty"`
	// Virtual machine name that is unique. Hypervisors enforce platform specific limits and character sets. The name length limit, both min and max, vary among hypervisors. Therefore, the basic limits are set here and proper enforcement is done elsewhere.
	Name *string `json:"Name,omitempty"`
	// Expected power state of virtual machine (PowerOn, PowerOff, Restart). * `PowerOff` - The virtual machine will be powered off if it is already not in powered off state. If it is already powered off, no side-effects are expected. * `PowerOn` - The virtual machine will be powered on if it is already not in powered on state. If it is already powered on, no side-effects are expected. * `Suspend` - The virtual machine will be put into  a suspended state. * `ShutDownGuestOS` - The guest operating system is shut down gracefully. * `RestartGuestOS` - It can either act as a reset switch and abruptly reset the guest operating system, or it can send a restart signal to the guest operating system so that it shuts down gracefully and restarts. * `Reset` - Resets the virtual machine abruptly, with no consideration for work in progress. * `Restart` - The virtual machine will be restarted only if it is in powered on state. If it is powered off, it will not be started up. * `Unknown` - Power state of the entity is unknown.
	PowerState *string `json:"PowerState,omitempty"`
	// Identifies the provision type to create a new virtual machine. * `OVA` - Deploy virtual machine using OVA/F file. * `Template` - Provision virtual machine using a template file. * `Discovered` - A virtual machine was 'discovered' and not created from Intersight. No provisioning information is available.
	ProvisionType        *string                                       `json:"ProvisionType,omitempty"`
	VmConfig             NullableVirtualizationBaseVmConfiguration     `json:"VmConfig,omitempty"`
	Cluster              *VirtualizationBaseClusterRelationship        `json:"Cluster,omitempty"`
	Host                 *VirtualizationBaseHostRelationship           `json:"Host,omitempty"`
	Inventory            *VirtualizationBaseVirtualMachineRelationship `json:"Inventory,omitempty"`
	RegisteredDevice     *AssetDeviceRegistrationRelationship          `json:"RegisteredDevice,omitempty"`
	WorkflowInfo         *WorkflowWorkflowInfoRelationship             `json:"WorkflowInfo,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _VirtualizationVirtualMachine VirtualizationVirtualMachine

// NewVirtualizationVirtualMachine instantiates a new VirtualizationVirtualMachine object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVirtualizationVirtualMachine(classId string, objectType string) *VirtualizationVirtualMachine {
	this := VirtualizationVirtualMachine{}
	this.ClassId = classId
	this.ObjectType = objectType
	var action string = "None"
	this.Action = &action
	var guestOs string = "linux"
	this.GuestOs = &guestOs
	var hypervisorType string = "ESXi"
	this.HypervisorType = &hypervisorType
	var powerState string = "PowerOff"
	this.PowerState = &powerState
	var provisionType string = "OVA"
	this.ProvisionType = &provisionType
	return &this
}

// NewVirtualizationVirtualMachineWithDefaults instantiates a new VirtualizationVirtualMachine object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVirtualizationVirtualMachineWithDefaults() *VirtualizationVirtualMachine {
	this := VirtualizationVirtualMachine{}
	var classId string = "virtualization.VirtualMachine"
	this.ClassId = classId
	var objectType string = "virtualization.VirtualMachine"
	this.ObjectType = objectType
	var action string = "None"
	this.Action = &action
	var guestOs string = "linux"
	this.GuestOs = &guestOs
	var hypervisorType string = "ESXi"
	this.HypervisorType = &hypervisorType
	var powerState string = "PowerOff"
	this.PowerState = &powerState
	var provisionType string = "OVA"
	this.ProvisionType = &provisionType
	return &this
}

// GetClassId returns the ClassId field value
func (o *VirtualizationVirtualMachine) GetClassId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ClassId
}

// GetClassIdOk returns a tuple with the ClassId field value
// and a boolean to check if the value has been set.
func (o *VirtualizationVirtualMachine) GetClassIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ClassId, true
}

// SetClassId sets field value
func (o *VirtualizationVirtualMachine) SetClassId(v string) {
	o.ClassId = v
}

// GetObjectType returns the ObjectType field value
func (o *VirtualizationVirtualMachine) GetObjectType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ObjectType
}

// GetObjectTypeOk returns a tuple with the ObjectType field value
// and a boolean to check if the value has been set.
func (o *VirtualizationVirtualMachine) GetObjectTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ObjectType, true
}

// SetObjectType sets field value
func (o *VirtualizationVirtualMachine) SetObjectType(v string) {
	o.ObjectType = v
}

// GetAction returns the Action field value if set, zero value otherwise.
func (o *VirtualizationVirtualMachine) GetAction() string {
	if o == nil || o.Action == nil {
		var ret string
		return ret
	}
	return *o.Action
}

// GetActionOk returns a tuple with the Action field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualizationVirtualMachine) GetActionOk() (*string, bool) {
	if o == nil || o.Action == nil {
		return nil, false
	}
	return o.Action, true
}

// HasAction returns a boolean if a field has been set.
func (o *VirtualizationVirtualMachine) HasAction() bool {
	if o != nil && o.Action != nil {
		return true
	}

	return false
}

// SetAction gets a reference to the given string and assigns it to the Action field.
func (o *VirtualizationVirtualMachine) SetAction(v string) {
	o.Action = &v
}

// GetActionInfo returns the ActionInfo field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VirtualizationVirtualMachine) GetActionInfo() VirtualizationActionInfo {
	if o == nil || o.ActionInfo.Get() == nil {
		var ret VirtualizationActionInfo
		return ret
	}
	return *o.ActionInfo.Get()
}

// GetActionInfoOk returns a tuple with the ActionInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VirtualizationVirtualMachine) GetActionInfoOk() (*VirtualizationActionInfo, bool) {
	if o == nil {
		return nil, false
	}
	return o.ActionInfo.Get(), o.ActionInfo.IsSet()
}

// HasActionInfo returns a boolean if a field has been set.
func (o *VirtualizationVirtualMachine) HasActionInfo() bool {
	if o != nil && o.ActionInfo.IsSet() {
		return true
	}

	return false
}

// SetActionInfo gets a reference to the given NullableVirtualizationActionInfo and assigns it to the ActionInfo field.
func (o *VirtualizationVirtualMachine) SetActionInfo(v VirtualizationActionInfo) {
	o.ActionInfo.Set(&v)
}

// SetActionInfoNil sets the value for ActionInfo to be an explicit nil
func (o *VirtualizationVirtualMachine) SetActionInfoNil() {
	o.ActionInfo.Set(nil)
}

// UnsetActionInfo ensures that no value is present for ActionInfo, not even an explicit nil
func (o *VirtualizationVirtualMachine) UnsetActionInfo() {
	o.ActionInfo.Unset()
}

// GetAffinitySelectors returns the AffinitySelectors field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VirtualizationVirtualMachine) GetAffinitySelectors() []InfraMetaData {
	if o == nil {
		var ret []InfraMetaData
		return ret
	}
	return o.AffinitySelectors
}

// GetAffinitySelectorsOk returns a tuple with the AffinitySelectors field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VirtualizationVirtualMachine) GetAffinitySelectorsOk() (*[]InfraMetaData, bool) {
	if o == nil || o.AffinitySelectors == nil {
		return nil, false
	}
	return &o.AffinitySelectors, true
}

// HasAffinitySelectors returns a boolean if a field has been set.
func (o *VirtualizationVirtualMachine) HasAffinitySelectors() bool {
	if o != nil && o.AffinitySelectors != nil {
		return true
	}

	return false
}

// SetAffinitySelectors gets a reference to the given []InfraMetaData and assigns it to the AffinitySelectors field.
func (o *VirtualizationVirtualMachine) SetAffinitySelectors(v []InfraMetaData) {
	o.AffinitySelectors = v
}

// GetAntiAffinitySelectors returns the AntiAffinitySelectors field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VirtualizationVirtualMachine) GetAntiAffinitySelectors() []InfraMetaData {
	if o == nil {
		var ret []InfraMetaData
		return ret
	}
	return o.AntiAffinitySelectors
}

// GetAntiAffinitySelectorsOk returns a tuple with the AntiAffinitySelectors field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VirtualizationVirtualMachine) GetAntiAffinitySelectorsOk() (*[]InfraMetaData, bool) {
	if o == nil || o.AntiAffinitySelectors == nil {
		return nil, false
	}
	return &o.AntiAffinitySelectors, true
}

// HasAntiAffinitySelectors returns a boolean if a field has been set.
func (o *VirtualizationVirtualMachine) HasAntiAffinitySelectors() bool {
	if o != nil && o.AntiAffinitySelectors != nil {
		return true
	}

	return false
}

// SetAntiAffinitySelectors gets a reference to the given []InfraMetaData and assigns it to the AntiAffinitySelectors field.
func (o *VirtualizationVirtualMachine) SetAntiAffinitySelectors(v []InfraMetaData) {
	o.AntiAffinitySelectors = v
}

// GetCloudInitConfig returns the CloudInitConfig field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VirtualizationVirtualMachine) GetCloudInitConfig() VirtualizationCloudInitConfig {
	if o == nil || o.CloudInitConfig.Get() == nil {
		var ret VirtualizationCloudInitConfig
		return ret
	}
	return *o.CloudInitConfig.Get()
}

// GetCloudInitConfigOk returns a tuple with the CloudInitConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VirtualizationVirtualMachine) GetCloudInitConfigOk() (*VirtualizationCloudInitConfig, bool) {
	if o == nil {
		return nil, false
	}
	return o.CloudInitConfig.Get(), o.CloudInitConfig.IsSet()
}

// HasCloudInitConfig returns a boolean if a field has been set.
func (o *VirtualizationVirtualMachine) HasCloudInitConfig() bool {
	if o != nil && o.CloudInitConfig.IsSet() {
		return true
	}

	return false
}

// SetCloudInitConfig gets a reference to the given NullableVirtualizationCloudInitConfig and assigns it to the CloudInitConfig field.
func (o *VirtualizationVirtualMachine) SetCloudInitConfig(v VirtualizationCloudInitConfig) {
	o.CloudInitConfig.Set(&v)
}

// SetCloudInitConfigNil sets the value for CloudInitConfig to be an explicit nil
func (o *VirtualizationVirtualMachine) SetCloudInitConfigNil() {
	o.CloudInitConfig.Set(nil)
}

// UnsetCloudInitConfig ensures that no value is present for CloudInitConfig, not even an explicit nil
func (o *VirtualizationVirtualMachine) UnsetCloudInitConfig() {
	o.CloudInitConfig.Unset()
}

// GetClusterEsxi returns the ClusterEsxi field value if set, zero value otherwise.
func (o *VirtualizationVirtualMachine) GetClusterEsxi() string {
	if o == nil || o.ClusterEsxi == nil {
		var ret string
		return ret
	}
	return *o.ClusterEsxi
}

// GetClusterEsxiOk returns a tuple with the ClusterEsxi field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualizationVirtualMachine) GetClusterEsxiOk() (*string, bool) {
	if o == nil || o.ClusterEsxi == nil {
		return nil, false
	}
	return o.ClusterEsxi, true
}

// HasClusterEsxi returns a boolean if a field has been set.
func (o *VirtualizationVirtualMachine) HasClusterEsxi() bool {
	if o != nil && o.ClusterEsxi != nil {
		return true
	}

	return false
}

// SetClusterEsxi gets a reference to the given string and assigns it to the ClusterEsxi field.
func (o *VirtualizationVirtualMachine) SetClusterEsxi(v string) {
	o.ClusterEsxi = &v
}

// GetCpu returns the Cpu field value if set, zero value otherwise.
func (o *VirtualizationVirtualMachine) GetCpu() int64 {
	if o == nil || o.Cpu == nil {
		var ret int64
		return ret
	}
	return *o.Cpu
}

// GetCpuOk returns a tuple with the Cpu field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualizationVirtualMachine) GetCpuOk() (*int64, bool) {
	if o == nil || o.Cpu == nil {
		return nil, false
	}
	return o.Cpu, true
}

// HasCpu returns a boolean if a field has been set.
func (o *VirtualizationVirtualMachine) HasCpu() bool {
	if o != nil && o.Cpu != nil {
		return true
	}

	return false
}

// SetCpu gets a reference to the given int64 and assigns it to the Cpu field.
func (o *VirtualizationVirtualMachine) SetCpu(v int64) {
	o.Cpu = &v
}

// GetDiscovered returns the Discovered field value if set, zero value otherwise.
func (o *VirtualizationVirtualMachine) GetDiscovered() bool {
	if o == nil || o.Discovered == nil {
		var ret bool
		return ret
	}
	return *o.Discovered
}

// GetDiscoveredOk returns a tuple with the Discovered field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualizationVirtualMachine) GetDiscoveredOk() (*bool, bool) {
	if o == nil || o.Discovered == nil {
		return nil, false
	}
	return o.Discovered, true
}

// HasDiscovered returns a boolean if a field has been set.
func (o *VirtualizationVirtualMachine) HasDiscovered() bool {
	if o != nil && o.Discovered != nil {
		return true
	}

	return false
}

// SetDiscovered gets a reference to the given bool and assigns it to the Discovered field.
func (o *VirtualizationVirtualMachine) SetDiscovered(v bool) {
	o.Discovered = &v
}

// GetDisk returns the Disk field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VirtualizationVirtualMachine) GetDisk() []VirtualizationVirtualMachineDisk {
	if o == nil {
		var ret []VirtualizationVirtualMachineDisk
		return ret
	}
	return o.Disk
}

// GetDiskOk returns a tuple with the Disk field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VirtualizationVirtualMachine) GetDiskOk() (*[]VirtualizationVirtualMachineDisk, bool) {
	if o == nil || o.Disk == nil {
		return nil, false
	}
	return &o.Disk, true
}

// HasDisk returns a boolean if a field has been set.
func (o *VirtualizationVirtualMachine) HasDisk() bool {
	if o != nil && o.Disk != nil {
		return true
	}

	return false
}

// SetDisk gets a reference to the given []VirtualizationVirtualMachineDisk and assigns it to the Disk field.
func (o *VirtualizationVirtualMachine) SetDisk(v []VirtualizationVirtualMachineDisk) {
	o.Disk = v
}

// GetForceDelete returns the ForceDelete field value if set, zero value otherwise.
func (o *VirtualizationVirtualMachine) GetForceDelete() bool {
	if o == nil || o.ForceDelete == nil {
		var ret bool
		return ret
	}
	return *o.ForceDelete
}

// GetForceDeleteOk returns a tuple with the ForceDelete field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualizationVirtualMachine) GetForceDeleteOk() (*bool, bool) {
	if o == nil || o.ForceDelete == nil {
		return nil, false
	}
	return o.ForceDelete, true
}

// HasForceDelete returns a boolean if a field has been set.
func (o *VirtualizationVirtualMachine) HasForceDelete() bool {
	if o != nil && o.ForceDelete != nil {
		return true
	}

	return false
}

// SetForceDelete gets a reference to the given bool and assigns it to the ForceDelete field.
func (o *VirtualizationVirtualMachine) SetForceDelete(v bool) {
	o.ForceDelete = &v
}

// GetGuestOs returns the GuestOs field value if set, zero value otherwise.
func (o *VirtualizationVirtualMachine) GetGuestOs() string {
	if o == nil || o.GuestOs == nil {
		var ret string
		return ret
	}
	return *o.GuestOs
}

// GetGuestOsOk returns a tuple with the GuestOs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualizationVirtualMachine) GetGuestOsOk() (*string, bool) {
	if o == nil || o.GuestOs == nil {
		return nil, false
	}
	return o.GuestOs, true
}

// HasGuestOs returns a boolean if a field has been set.
func (o *VirtualizationVirtualMachine) HasGuestOs() bool {
	if o != nil && o.GuestOs != nil {
		return true
	}

	return false
}

// SetGuestOs gets a reference to the given string and assigns it to the GuestOs field.
func (o *VirtualizationVirtualMachine) SetGuestOs(v string) {
	o.GuestOs = &v
}

// GetHostEsxi returns the HostEsxi field value if set, zero value otherwise.
func (o *VirtualizationVirtualMachine) GetHostEsxi() string {
	if o == nil || o.HostEsxi == nil {
		var ret string
		return ret
	}
	return *o.HostEsxi
}

// GetHostEsxiOk returns a tuple with the HostEsxi field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualizationVirtualMachine) GetHostEsxiOk() (*string, bool) {
	if o == nil || o.HostEsxi == nil {
		return nil, false
	}
	return o.HostEsxi, true
}

// HasHostEsxi returns a boolean if a field has been set.
func (o *VirtualizationVirtualMachine) HasHostEsxi() bool {
	if o != nil && o.HostEsxi != nil {
		return true
	}

	return false
}

// SetHostEsxi gets a reference to the given string and assigns it to the HostEsxi field.
func (o *VirtualizationVirtualMachine) SetHostEsxi(v string) {
	o.HostEsxi = &v
}

// GetHypervisorType returns the HypervisorType field value if set, zero value otherwise.
func (o *VirtualizationVirtualMachine) GetHypervisorType() string {
	if o == nil || o.HypervisorType == nil {
		var ret string
		return ret
	}
	return *o.HypervisorType
}

// GetHypervisorTypeOk returns a tuple with the HypervisorType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualizationVirtualMachine) GetHypervisorTypeOk() (*string, bool) {
	if o == nil || o.HypervisorType == nil {
		return nil, false
	}
	return o.HypervisorType, true
}

// HasHypervisorType returns a boolean if a field has been set.
func (o *VirtualizationVirtualMachine) HasHypervisorType() bool {
	if o != nil && o.HypervisorType != nil {
		return true
	}

	return false
}

// SetHypervisorType gets a reference to the given string and assigns it to the HypervisorType field.
func (o *VirtualizationVirtualMachine) SetHypervisorType(v string) {
	o.HypervisorType = &v
}

// GetInterfaces returns the Interfaces field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VirtualizationVirtualMachine) GetInterfaces() []VirtualizationNetworkInterface {
	if o == nil {
		var ret []VirtualizationNetworkInterface
		return ret
	}
	return o.Interfaces
}

// GetInterfacesOk returns a tuple with the Interfaces field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VirtualizationVirtualMachine) GetInterfacesOk() (*[]VirtualizationNetworkInterface, bool) {
	if o == nil || o.Interfaces == nil {
		return nil, false
	}
	return &o.Interfaces, true
}

// HasInterfaces returns a boolean if a field has been set.
func (o *VirtualizationVirtualMachine) HasInterfaces() bool {
	if o != nil && o.Interfaces != nil {
		return true
	}

	return false
}

// SetInterfaces gets a reference to the given []VirtualizationNetworkInterface and assigns it to the Interfaces field.
func (o *VirtualizationVirtualMachine) SetInterfaces(v []VirtualizationNetworkInterface) {
	o.Interfaces = v
}

// GetLabels returns the Labels field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VirtualizationVirtualMachine) GetLabels() []InfraMetaData {
	if o == nil {
		var ret []InfraMetaData
		return ret
	}
	return o.Labels
}

// GetLabelsOk returns a tuple with the Labels field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VirtualizationVirtualMachine) GetLabelsOk() (*[]InfraMetaData, bool) {
	if o == nil || o.Labels == nil {
		return nil, false
	}
	return &o.Labels, true
}

// HasLabels returns a boolean if a field has been set.
func (o *VirtualizationVirtualMachine) HasLabels() bool {
	if o != nil && o.Labels != nil {
		return true
	}

	return false
}

// SetLabels gets a reference to the given []InfraMetaData and assigns it to the Labels field.
func (o *VirtualizationVirtualMachine) SetLabels(v []InfraMetaData) {
	o.Labels = v
}

// GetMemory returns the Memory field value if set, zero value otherwise.
func (o *VirtualizationVirtualMachine) GetMemory() int64 {
	if o == nil || o.Memory == nil {
		var ret int64
		return ret
	}
	return *o.Memory
}

// GetMemoryOk returns a tuple with the Memory field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualizationVirtualMachine) GetMemoryOk() (*int64, bool) {
	if o == nil || o.Memory == nil {
		return nil, false
	}
	return o.Memory, true
}

// HasMemory returns a boolean if a field has been set.
func (o *VirtualizationVirtualMachine) HasMemory() bool {
	if o != nil && o.Memory != nil {
		return true
	}

	return false
}

// SetMemory gets a reference to the given int64 and assigns it to the Memory field.
func (o *VirtualizationVirtualMachine) SetMemory(v int64) {
	o.Memory = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *VirtualizationVirtualMachine) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualizationVirtualMachine) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *VirtualizationVirtualMachine) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *VirtualizationVirtualMachine) SetName(v string) {
	o.Name = &v
}

// GetPowerState returns the PowerState field value if set, zero value otherwise.
func (o *VirtualizationVirtualMachine) GetPowerState() string {
	if o == nil || o.PowerState == nil {
		var ret string
		return ret
	}
	return *o.PowerState
}

// GetPowerStateOk returns a tuple with the PowerState field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualizationVirtualMachine) GetPowerStateOk() (*string, bool) {
	if o == nil || o.PowerState == nil {
		return nil, false
	}
	return o.PowerState, true
}

// HasPowerState returns a boolean if a field has been set.
func (o *VirtualizationVirtualMachine) HasPowerState() bool {
	if o != nil && o.PowerState != nil {
		return true
	}

	return false
}

// SetPowerState gets a reference to the given string and assigns it to the PowerState field.
func (o *VirtualizationVirtualMachine) SetPowerState(v string) {
	o.PowerState = &v
}

// GetProvisionType returns the ProvisionType field value if set, zero value otherwise.
func (o *VirtualizationVirtualMachine) GetProvisionType() string {
	if o == nil || o.ProvisionType == nil {
		var ret string
		return ret
	}
	return *o.ProvisionType
}

// GetProvisionTypeOk returns a tuple with the ProvisionType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualizationVirtualMachine) GetProvisionTypeOk() (*string, bool) {
	if o == nil || o.ProvisionType == nil {
		return nil, false
	}
	return o.ProvisionType, true
}

// HasProvisionType returns a boolean if a field has been set.
func (o *VirtualizationVirtualMachine) HasProvisionType() bool {
	if o != nil && o.ProvisionType != nil {
		return true
	}

	return false
}

// SetProvisionType gets a reference to the given string and assigns it to the ProvisionType field.
func (o *VirtualizationVirtualMachine) SetProvisionType(v string) {
	o.ProvisionType = &v
}

// GetVmConfig returns the VmConfig field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VirtualizationVirtualMachine) GetVmConfig() VirtualizationBaseVmConfiguration {
	if o == nil || o.VmConfig.Get() == nil {
		var ret VirtualizationBaseVmConfiguration
		return ret
	}
	return *o.VmConfig.Get()
}

// GetVmConfigOk returns a tuple with the VmConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VirtualizationVirtualMachine) GetVmConfigOk() (*VirtualizationBaseVmConfiguration, bool) {
	if o == nil {
		return nil, false
	}
	return o.VmConfig.Get(), o.VmConfig.IsSet()
}

// HasVmConfig returns a boolean if a field has been set.
func (o *VirtualizationVirtualMachine) HasVmConfig() bool {
	if o != nil && o.VmConfig.IsSet() {
		return true
	}

	return false
}

// SetVmConfig gets a reference to the given NullableVirtualizationBaseVmConfiguration and assigns it to the VmConfig field.
func (o *VirtualizationVirtualMachine) SetVmConfig(v VirtualizationBaseVmConfiguration) {
	o.VmConfig.Set(&v)
}

// SetVmConfigNil sets the value for VmConfig to be an explicit nil
func (o *VirtualizationVirtualMachine) SetVmConfigNil() {
	o.VmConfig.Set(nil)
}

// UnsetVmConfig ensures that no value is present for VmConfig, not even an explicit nil
func (o *VirtualizationVirtualMachine) UnsetVmConfig() {
	o.VmConfig.Unset()
}

// GetCluster returns the Cluster field value if set, zero value otherwise.
func (o *VirtualizationVirtualMachine) GetCluster() VirtualizationBaseClusterRelationship {
	if o == nil || o.Cluster == nil {
		var ret VirtualizationBaseClusterRelationship
		return ret
	}
	return *o.Cluster
}

// GetClusterOk returns a tuple with the Cluster field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualizationVirtualMachine) GetClusterOk() (*VirtualizationBaseClusterRelationship, bool) {
	if o == nil || o.Cluster == nil {
		return nil, false
	}
	return o.Cluster, true
}

// HasCluster returns a boolean if a field has been set.
func (o *VirtualizationVirtualMachine) HasCluster() bool {
	if o != nil && o.Cluster != nil {
		return true
	}

	return false
}

// SetCluster gets a reference to the given VirtualizationBaseClusterRelationship and assigns it to the Cluster field.
func (o *VirtualizationVirtualMachine) SetCluster(v VirtualizationBaseClusterRelationship) {
	o.Cluster = &v
}

// GetHost returns the Host field value if set, zero value otherwise.
func (o *VirtualizationVirtualMachine) GetHost() VirtualizationBaseHostRelationship {
	if o == nil || o.Host == nil {
		var ret VirtualizationBaseHostRelationship
		return ret
	}
	return *o.Host
}

// GetHostOk returns a tuple with the Host field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualizationVirtualMachine) GetHostOk() (*VirtualizationBaseHostRelationship, bool) {
	if o == nil || o.Host == nil {
		return nil, false
	}
	return o.Host, true
}

// HasHost returns a boolean if a field has been set.
func (o *VirtualizationVirtualMachine) HasHost() bool {
	if o != nil && o.Host != nil {
		return true
	}

	return false
}

// SetHost gets a reference to the given VirtualizationBaseHostRelationship and assigns it to the Host field.
func (o *VirtualizationVirtualMachine) SetHost(v VirtualizationBaseHostRelationship) {
	o.Host = &v
}

// GetInventory returns the Inventory field value if set, zero value otherwise.
func (o *VirtualizationVirtualMachine) GetInventory() VirtualizationBaseVirtualMachineRelationship {
	if o == nil || o.Inventory == nil {
		var ret VirtualizationBaseVirtualMachineRelationship
		return ret
	}
	return *o.Inventory
}

// GetInventoryOk returns a tuple with the Inventory field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualizationVirtualMachine) GetInventoryOk() (*VirtualizationBaseVirtualMachineRelationship, bool) {
	if o == nil || o.Inventory == nil {
		return nil, false
	}
	return o.Inventory, true
}

// HasInventory returns a boolean if a field has been set.
func (o *VirtualizationVirtualMachine) HasInventory() bool {
	if o != nil && o.Inventory != nil {
		return true
	}

	return false
}

// SetInventory gets a reference to the given VirtualizationBaseVirtualMachineRelationship and assigns it to the Inventory field.
func (o *VirtualizationVirtualMachine) SetInventory(v VirtualizationBaseVirtualMachineRelationship) {
	o.Inventory = &v
}

// GetRegisteredDevice returns the RegisteredDevice field value if set, zero value otherwise.
func (o *VirtualizationVirtualMachine) GetRegisteredDevice() AssetDeviceRegistrationRelationship {
	if o == nil || o.RegisteredDevice == nil {
		var ret AssetDeviceRegistrationRelationship
		return ret
	}
	return *o.RegisteredDevice
}

// GetRegisteredDeviceOk returns a tuple with the RegisteredDevice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualizationVirtualMachine) GetRegisteredDeviceOk() (*AssetDeviceRegistrationRelationship, bool) {
	if o == nil || o.RegisteredDevice == nil {
		return nil, false
	}
	return o.RegisteredDevice, true
}

// HasRegisteredDevice returns a boolean if a field has been set.
func (o *VirtualizationVirtualMachine) HasRegisteredDevice() bool {
	if o != nil && o.RegisteredDevice != nil {
		return true
	}

	return false
}

// SetRegisteredDevice gets a reference to the given AssetDeviceRegistrationRelationship and assigns it to the RegisteredDevice field.
func (o *VirtualizationVirtualMachine) SetRegisteredDevice(v AssetDeviceRegistrationRelationship) {
	o.RegisteredDevice = &v
}

// GetWorkflowInfo returns the WorkflowInfo field value if set, zero value otherwise.
func (o *VirtualizationVirtualMachine) GetWorkflowInfo() WorkflowWorkflowInfoRelationship {
	if o == nil || o.WorkflowInfo == nil {
		var ret WorkflowWorkflowInfoRelationship
		return ret
	}
	return *o.WorkflowInfo
}

// GetWorkflowInfoOk returns a tuple with the WorkflowInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualizationVirtualMachine) GetWorkflowInfoOk() (*WorkflowWorkflowInfoRelationship, bool) {
	if o == nil || o.WorkflowInfo == nil {
		return nil, false
	}
	return o.WorkflowInfo, true
}

// HasWorkflowInfo returns a boolean if a field has been set.
func (o *VirtualizationVirtualMachine) HasWorkflowInfo() bool {
	if o != nil && o.WorkflowInfo != nil {
		return true
	}

	return false
}

// SetWorkflowInfo gets a reference to the given WorkflowWorkflowInfoRelationship and assigns it to the WorkflowInfo field.
func (o *VirtualizationVirtualMachine) SetWorkflowInfo(v WorkflowWorkflowInfoRelationship) {
	o.WorkflowInfo = &v
}

func (o VirtualizationVirtualMachine) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	serializedMoBaseMo, errMoBaseMo := json.Marshal(o.MoBaseMo)
	if errMoBaseMo != nil {
		return []byte{}, errMoBaseMo
	}
	errMoBaseMo = json.Unmarshal([]byte(serializedMoBaseMo), &toSerialize)
	if errMoBaseMo != nil {
		return []byte{}, errMoBaseMo
	}
	if true {
		toSerialize["ClassId"] = o.ClassId
	}
	if true {
		toSerialize["ObjectType"] = o.ObjectType
	}
	if o.Action != nil {
		toSerialize["Action"] = o.Action
	}
	if o.ActionInfo.IsSet() {
		toSerialize["ActionInfo"] = o.ActionInfo.Get()
	}
	if o.AffinitySelectors != nil {
		toSerialize["AffinitySelectors"] = o.AffinitySelectors
	}
	if o.AntiAffinitySelectors != nil {
		toSerialize["AntiAffinitySelectors"] = o.AntiAffinitySelectors
	}
	if o.CloudInitConfig.IsSet() {
		toSerialize["CloudInitConfig"] = o.CloudInitConfig.Get()
	}
	if o.ClusterEsxi != nil {
		toSerialize["ClusterEsxi"] = o.ClusterEsxi
	}
	if o.Cpu != nil {
		toSerialize["Cpu"] = o.Cpu
	}
	if o.Discovered != nil {
		toSerialize["Discovered"] = o.Discovered
	}
	if o.Disk != nil {
		toSerialize["Disk"] = o.Disk
	}
	if o.ForceDelete != nil {
		toSerialize["ForceDelete"] = o.ForceDelete
	}
	if o.GuestOs != nil {
		toSerialize["GuestOs"] = o.GuestOs
	}
	if o.HostEsxi != nil {
		toSerialize["HostEsxi"] = o.HostEsxi
	}
	if o.HypervisorType != nil {
		toSerialize["HypervisorType"] = o.HypervisorType
	}
	if o.Interfaces != nil {
		toSerialize["Interfaces"] = o.Interfaces
	}
	if o.Labels != nil {
		toSerialize["Labels"] = o.Labels
	}
	if o.Memory != nil {
		toSerialize["Memory"] = o.Memory
	}
	if o.Name != nil {
		toSerialize["Name"] = o.Name
	}
	if o.PowerState != nil {
		toSerialize["PowerState"] = o.PowerState
	}
	if o.ProvisionType != nil {
		toSerialize["ProvisionType"] = o.ProvisionType
	}
	if o.VmConfig.IsSet() {
		toSerialize["VmConfig"] = o.VmConfig.Get()
	}
	if o.Cluster != nil {
		toSerialize["Cluster"] = o.Cluster
	}
	if o.Host != nil {
		toSerialize["Host"] = o.Host
	}
	if o.Inventory != nil {
		toSerialize["Inventory"] = o.Inventory
	}
	if o.RegisteredDevice != nil {
		toSerialize["RegisteredDevice"] = o.RegisteredDevice
	}
	if o.WorkflowInfo != nil {
		toSerialize["WorkflowInfo"] = o.WorkflowInfo
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *VirtualizationVirtualMachine) UnmarshalJSON(bytes []byte) (err error) {
	type VirtualizationVirtualMachineWithoutEmbeddedStruct struct {
		// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.
		ClassId string `json:"ClassId"`
		// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
		ObjectType string `json:"ObjectType"`
		// Action to be performed on a virtual machine (Create, PowerState, Migrate, Clone etc). * `None` - A place holder for the default value. * `PowerState` - Power action is performed on the virtual machine. * `Migrate` - The virtual machine will be migrated from existing node to a different node in cluster. The behavior depends on the underlying hypervisor. * `Create` - The virtual machine will be created on the specified hypervisor. This action is also useful if the virtual machine creation failed during first POST operation on VirtualMachine managed object. User can set this action to retry the virtual machine creation. * `Delete` - The virtual machine will be deleted from the specified hypervisor. User can either set this action or can do a DELETE operation on the VirtualMachine managed object.
		Action                *string                               `json:"Action,omitempty"`
		ActionInfo            NullableVirtualizationActionInfo      `json:"ActionInfo,omitempty"`
		AffinitySelectors     []InfraMetaData                       `json:"AffinitySelectors,omitempty"`
		AntiAffinitySelectors []InfraMetaData                       `json:"AntiAffinitySelectors,omitempty"`
		CloudInitConfig       NullableVirtualizationCloudInitConfig `json:"CloudInitConfig,omitempty"`
		// Cluster where virtual machine is deployed.
		ClusterEsxi *string `json:"ClusterEsxi,omitempty"`
		// Number of vCPUs allocated to virtual machine.
		Cpu *int64 `json:"Cpu,omitempty"`
		// Flag to indicate whether the configuration is created from inventory object.
		Discovered *bool                              `json:"Discovered,omitempty"`
		Disk       []VirtualizationVirtualMachineDisk `json:"Disk,omitempty"`
		// Normally any virtual machine that is still powered on cannot be deleted. The expected sequence from a user is to first power off the virtual machine and then invoke the delete operation. However, in special circumstances, the owner of the virtual machine may know very well that the virtual machine is no longer needed and just wants to dispose it off. In such situations a delete operation of a virtual machine object is accepted only when this forceDelete attribute is set to true. Under normal circumstances (forceDelete is false), delete operation first confirms that the virtual machine is powered off and then proceeds to delete the virtual machine.
		ForceDelete *bool `json:"ForceDelete,omitempty"`
		// Guest operating system running on virtual machine. * `linux` - A Linux operating system. * `windows` - A Windows operating system.
		GuestOs *string `json:"GuestOs,omitempty"`
		// Host where virtual machine is deployed.
		HostEsxi *string `json:"HostEsxi,omitempty"`
		// Identifies the broad product type of the hypervisor but without any version information. It is here to easily identify the type of the virtual machine. There are other entities (Host, Cluster, etc.) that can be indirectly used to determine the hypervisor but a direct attribute makes it easier to work with. * `ESXi` - The hypervisor running on the HyperFlex cluster is a Vmware ESXi hypervisor of any version. * `HyperFlexAp` - The hypervisor running on the HyperFlex cluster is Cisco HyperFlex Application Platform. * `Hyper-V` - The hypervisor running on the HyperFlex cluster is Microsoft Hyper-V. * `Unknown` - The hypervisor running on the HyperFlex cluster is not known.
		HypervisorType *string                          `json:"HypervisorType,omitempty"`
		Interfaces     []VirtualizationNetworkInterface `json:"Interfaces,omitempty"`
		Labels         []InfraMetaData                  `json:"Labels,omitempty"`
		// Virtual machine memory in mebi bytes (one mebibyte, 1MiB, is 1048576 bytes, and 1KiB is 1024 bytes). Input must be a whole number and scientific notation is not acceptable. For example, enter 1730 and not 1.73e03.
		Memory *int64 `json:"Memory,omitempty"`
		// Virtual machine name that is unique. Hypervisors enforce platform specific limits and character sets. The name length limit, both min and max, vary among hypervisors. Therefore, the basic limits are set here and proper enforcement is done elsewhere.
		Name *string `json:"Name,omitempty"`
		// Expected power state of virtual machine (PowerOn, PowerOff, Restart). * `PowerOff` - The virtual machine will be powered off if it is already not in powered off state. If it is already powered off, no side-effects are expected. * `PowerOn` - The virtual machine will be powered on if it is already not in powered on state. If it is already powered on, no side-effects are expected. * `Suspend` - The virtual machine will be put into  a suspended state. * `ShutDownGuestOS` - The guest operating system is shut down gracefully. * `RestartGuestOS` - It can either act as a reset switch and abruptly reset the guest operating system, or it can send a restart signal to the guest operating system so that it shuts down gracefully and restarts. * `Reset` - Resets the virtual machine abruptly, with no consideration for work in progress. * `Restart` - The virtual machine will be restarted only if it is in powered on state. If it is powered off, it will not be started up. * `Unknown` - Power state of the entity is unknown.
		PowerState *string `json:"PowerState,omitempty"`
		// Identifies the provision type to create a new virtual machine. * `OVA` - Deploy virtual machine using OVA/F file. * `Template` - Provision virtual machine using a template file. * `Discovered` - A virtual machine was 'discovered' and not created from Intersight. No provisioning information is available.
		ProvisionType    *string                                       `json:"ProvisionType,omitempty"`
		VmConfig         NullableVirtualizationBaseVmConfiguration     `json:"VmConfig,omitempty"`
		Cluster          *VirtualizationBaseClusterRelationship        `json:"Cluster,omitempty"`
		Host             *VirtualizationBaseHostRelationship           `json:"Host,omitempty"`
		Inventory        *VirtualizationBaseVirtualMachineRelationship `json:"Inventory,omitempty"`
		RegisteredDevice *AssetDeviceRegistrationRelationship          `json:"RegisteredDevice,omitempty"`
		WorkflowInfo     *WorkflowWorkflowInfoRelationship             `json:"WorkflowInfo,omitempty"`
	}

	varVirtualizationVirtualMachineWithoutEmbeddedStruct := VirtualizationVirtualMachineWithoutEmbeddedStruct{}

	err = json.Unmarshal(bytes, &varVirtualizationVirtualMachineWithoutEmbeddedStruct)
	if err == nil {
		varVirtualizationVirtualMachine := _VirtualizationVirtualMachine{}
		varVirtualizationVirtualMachine.ClassId = varVirtualizationVirtualMachineWithoutEmbeddedStruct.ClassId
		varVirtualizationVirtualMachine.ObjectType = varVirtualizationVirtualMachineWithoutEmbeddedStruct.ObjectType
		varVirtualizationVirtualMachine.Action = varVirtualizationVirtualMachineWithoutEmbeddedStruct.Action
		varVirtualizationVirtualMachine.ActionInfo = varVirtualizationVirtualMachineWithoutEmbeddedStruct.ActionInfo
		varVirtualizationVirtualMachine.AffinitySelectors = varVirtualizationVirtualMachineWithoutEmbeddedStruct.AffinitySelectors
		varVirtualizationVirtualMachine.AntiAffinitySelectors = varVirtualizationVirtualMachineWithoutEmbeddedStruct.AntiAffinitySelectors
		varVirtualizationVirtualMachine.CloudInitConfig = varVirtualizationVirtualMachineWithoutEmbeddedStruct.CloudInitConfig
		varVirtualizationVirtualMachine.ClusterEsxi = varVirtualizationVirtualMachineWithoutEmbeddedStruct.ClusterEsxi
		varVirtualizationVirtualMachine.Cpu = varVirtualizationVirtualMachineWithoutEmbeddedStruct.Cpu
		varVirtualizationVirtualMachine.Discovered = varVirtualizationVirtualMachineWithoutEmbeddedStruct.Discovered
		varVirtualizationVirtualMachine.Disk = varVirtualizationVirtualMachineWithoutEmbeddedStruct.Disk
		varVirtualizationVirtualMachine.ForceDelete = varVirtualizationVirtualMachineWithoutEmbeddedStruct.ForceDelete
		varVirtualizationVirtualMachine.GuestOs = varVirtualizationVirtualMachineWithoutEmbeddedStruct.GuestOs
		varVirtualizationVirtualMachine.HostEsxi = varVirtualizationVirtualMachineWithoutEmbeddedStruct.HostEsxi
		varVirtualizationVirtualMachine.HypervisorType = varVirtualizationVirtualMachineWithoutEmbeddedStruct.HypervisorType
		varVirtualizationVirtualMachine.Interfaces = varVirtualizationVirtualMachineWithoutEmbeddedStruct.Interfaces
		varVirtualizationVirtualMachine.Labels = varVirtualizationVirtualMachineWithoutEmbeddedStruct.Labels
		varVirtualizationVirtualMachine.Memory = varVirtualizationVirtualMachineWithoutEmbeddedStruct.Memory
		varVirtualizationVirtualMachine.Name = varVirtualizationVirtualMachineWithoutEmbeddedStruct.Name
		varVirtualizationVirtualMachine.PowerState = varVirtualizationVirtualMachineWithoutEmbeddedStruct.PowerState
		varVirtualizationVirtualMachine.ProvisionType = varVirtualizationVirtualMachineWithoutEmbeddedStruct.ProvisionType
		varVirtualizationVirtualMachine.VmConfig = varVirtualizationVirtualMachineWithoutEmbeddedStruct.VmConfig
		varVirtualizationVirtualMachine.Cluster = varVirtualizationVirtualMachineWithoutEmbeddedStruct.Cluster
		varVirtualizationVirtualMachine.Host = varVirtualizationVirtualMachineWithoutEmbeddedStruct.Host
		varVirtualizationVirtualMachine.Inventory = varVirtualizationVirtualMachineWithoutEmbeddedStruct.Inventory
		varVirtualizationVirtualMachine.RegisteredDevice = varVirtualizationVirtualMachineWithoutEmbeddedStruct.RegisteredDevice
		varVirtualizationVirtualMachine.WorkflowInfo = varVirtualizationVirtualMachineWithoutEmbeddedStruct.WorkflowInfo
		*o = VirtualizationVirtualMachine(varVirtualizationVirtualMachine)
	} else {
		return err
	}

	varVirtualizationVirtualMachine := _VirtualizationVirtualMachine{}

	err = json.Unmarshal(bytes, &varVirtualizationVirtualMachine)
	if err == nil {
		o.MoBaseMo = varVirtualizationVirtualMachine.MoBaseMo
	} else {
		return err
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "ClassId")
		delete(additionalProperties, "ObjectType")
		delete(additionalProperties, "Action")
		delete(additionalProperties, "ActionInfo")
		delete(additionalProperties, "AffinitySelectors")
		delete(additionalProperties, "AntiAffinitySelectors")
		delete(additionalProperties, "CloudInitConfig")
		delete(additionalProperties, "ClusterEsxi")
		delete(additionalProperties, "Cpu")
		delete(additionalProperties, "Discovered")
		delete(additionalProperties, "Disk")
		delete(additionalProperties, "ForceDelete")
		delete(additionalProperties, "GuestOs")
		delete(additionalProperties, "HostEsxi")
		delete(additionalProperties, "HypervisorType")
		delete(additionalProperties, "Interfaces")
		delete(additionalProperties, "Labels")
		delete(additionalProperties, "Memory")
		delete(additionalProperties, "Name")
		delete(additionalProperties, "PowerState")
		delete(additionalProperties, "ProvisionType")
		delete(additionalProperties, "VmConfig")
		delete(additionalProperties, "Cluster")
		delete(additionalProperties, "Host")
		delete(additionalProperties, "Inventory")
		delete(additionalProperties, "RegisteredDevice")
		delete(additionalProperties, "WorkflowInfo")

		// remove fields from embedded structs
		reflectMoBaseMo := reflect.ValueOf(o.MoBaseMo)
		for i := 0; i < reflectMoBaseMo.Type().NumField(); i++ {
			t := reflectMoBaseMo.Type().Field(i)

			if jsonTag := t.Tag.Get("json"); jsonTag != "" {
				fieldName := ""
				if commaIdx := strings.Index(jsonTag, ","); commaIdx > 0 {
					fieldName = jsonTag[:commaIdx]
				} else {
					fieldName = jsonTag
				}
				if fieldName != "AdditionalProperties" {
					delete(additionalProperties, fieldName)
				}
			}
		}

		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableVirtualizationVirtualMachine struct {
	value *VirtualizationVirtualMachine
	isSet bool
}

func (v NullableVirtualizationVirtualMachine) Get() *VirtualizationVirtualMachine {
	return v.value
}

func (v *NullableVirtualizationVirtualMachine) Set(val *VirtualizationVirtualMachine) {
	v.value = val
	v.isSet = true
}

func (v NullableVirtualizationVirtualMachine) IsSet() bool {
	return v.isSet
}

func (v *NullableVirtualizationVirtualMachine) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVirtualizationVirtualMachine(val *VirtualizationVirtualMachine) *NullableVirtualizationVirtualMachine {
	return &NullableVirtualizationVirtualMachine{value: val, isSet: true}
}

func (v NullableVirtualizationVirtualMachine) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVirtualizationVirtualMachine) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
