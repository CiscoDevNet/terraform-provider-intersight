/*
Cisco Intersight

Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations. The Intersight OpenAPI document defines the complete set of properties that are returned in the HTTP response. From that perspective, a client can expect that no additional properties are returned, unless these properties are explicitly defined in the OpenAPI document. However, when a client uses an older version of the Intersight OpenAPI document, the server may send additional properties because the software is more recent than the client. In that case, the client may receive properties that it does not know about. Some generated SDKs perform a strict validation of the HTTP response body against the OpenAPI document.

API version: 1.0.11-2025091920
Contact: intersight@cisco.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package intersight

import (
	"encoding/json"
	"fmt"
	"reflect"
	"strings"
)

// checks if the HciAhvVmGpu type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &HciAhvVmGpu{}

// HciAhvVmGpu A GPU associated with an AHV VM.
type HciAhvVmGpu struct {
	MoBaseMo
	// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.
	ClassId string `json:"ClassId"`
	// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
	ObjectType string `json:"ObjectType"`
	// The device id of the GPU.
	DeviceId *int64 `json:"DeviceId,omitempty"`
	// The fraction of a physical GPU's resources that are allocated to a virtual GPU, e.g. 8 indicate 1/8 of a GPU.
	Fraction *int64 `json:"Fraction,omitempty"`
	// The frame buffer size of the GPU.
	FrameBufferSizeBytes *int64 `json:"FrameBufferSizeBytes,omitempty"`
	// The unique identifier of the GPU.
	GpuExtId *string `json:"GpuExtId,omitempty"`
	// Last determined guest driver version.
	GuestDriverVersion *string `json:"GuestDriverVersion,omitempty"`
	// The mode of the GPU such as UNUSED, USED_FOR_PASSTHROUGH, USED_FOR_VIRTUAL.
	Mode *string `json:"Mode,omitempty"`
	// The name of the GPU allocation such as \"NVIDIA_A16-1B\".
	Name *string `json:"Name,omitempty"`
	// The number of virtual display heads of the GPU.
	NumVirtualDisplayHeads *int32          `json:"NumVirtualDisplayHeads,omitempty"`
	PciAddress             NullableHciSbdf `json:"PciAddress,omitempty"`
	// The vendor name of the GPU.
	Vendor *string `json:"Vendor,omitempty"`
	// The unique identifier of the VM.
	VmExtId              *string                                     `json:"VmExtId,omitempty"`
	RegisteredDevice     NullableAssetDeviceRegistrationRelationship `json:"RegisteredDevice,omitempty"`
	Vm                   NullableHciAhvVmRelationship                `json:"Vm,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _HciAhvVmGpu HciAhvVmGpu

// NewHciAhvVmGpu instantiates a new HciAhvVmGpu object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHciAhvVmGpu(classId string, objectType string) *HciAhvVmGpu {
	this := HciAhvVmGpu{}
	this.ClassId = classId
	this.ObjectType = objectType
	return &this
}

// NewHciAhvVmGpuWithDefaults instantiates a new HciAhvVmGpu object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHciAhvVmGpuWithDefaults() *HciAhvVmGpu {
	this := HciAhvVmGpu{}
	var classId string = "hci.AhvVmGpu"
	this.ClassId = classId
	var objectType string = "hci.AhvVmGpu"
	this.ObjectType = objectType
	return &this
}

// GetClassId returns the ClassId field value
func (o *HciAhvVmGpu) GetClassId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ClassId
}

// GetClassIdOk returns a tuple with the ClassId field value
// and a boolean to check if the value has been set.
func (o *HciAhvVmGpu) GetClassIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ClassId, true
}

// SetClassId sets field value
func (o *HciAhvVmGpu) SetClassId(v string) {
	o.ClassId = v
}

// GetDefaultClassId returns the default value "hci.AhvVmGpu" of the ClassId field.
func (o *HciAhvVmGpu) GetDefaultClassId() interface{} {
	return "hci.AhvVmGpu"
}

// GetObjectType returns the ObjectType field value
func (o *HciAhvVmGpu) GetObjectType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ObjectType
}

// GetObjectTypeOk returns a tuple with the ObjectType field value
// and a boolean to check if the value has been set.
func (o *HciAhvVmGpu) GetObjectTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ObjectType, true
}

// SetObjectType sets field value
func (o *HciAhvVmGpu) SetObjectType(v string) {
	o.ObjectType = v
}

// GetDefaultObjectType returns the default value "hci.AhvVmGpu" of the ObjectType field.
func (o *HciAhvVmGpu) GetDefaultObjectType() interface{} {
	return "hci.AhvVmGpu"
}

// GetDeviceId returns the DeviceId field value if set, zero value otherwise.
func (o *HciAhvVmGpu) GetDeviceId() int64 {
	if o == nil || IsNil(o.DeviceId) {
		var ret int64
		return ret
	}
	return *o.DeviceId
}

// GetDeviceIdOk returns a tuple with the DeviceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HciAhvVmGpu) GetDeviceIdOk() (*int64, bool) {
	if o == nil || IsNil(o.DeviceId) {
		return nil, false
	}
	return o.DeviceId, true
}

// HasDeviceId returns a boolean if a field has been set.
func (o *HciAhvVmGpu) HasDeviceId() bool {
	if o != nil && !IsNil(o.DeviceId) {
		return true
	}

	return false
}

// SetDeviceId gets a reference to the given int64 and assigns it to the DeviceId field.
func (o *HciAhvVmGpu) SetDeviceId(v int64) {
	o.DeviceId = &v
}

// GetFraction returns the Fraction field value if set, zero value otherwise.
func (o *HciAhvVmGpu) GetFraction() int64 {
	if o == nil || IsNil(o.Fraction) {
		var ret int64
		return ret
	}
	return *o.Fraction
}

// GetFractionOk returns a tuple with the Fraction field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HciAhvVmGpu) GetFractionOk() (*int64, bool) {
	if o == nil || IsNil(o.Fraction) {
		return nil, false
	}
	return o.Fraction, true
}

// HasFraction returns a boolean if a field has been set.
func (o *HciAhvVmGpu) HasFraction() bool {
	if o != nil && !IsNil(o.Fraction) {
		return true
	}

	return false
}

// SetFraction gets a reference to the given int64 and assigns it to the Fraction field.
func (o *HciAhvVmGpu) SetFraction(v int64) {
	o.Fraction = &v
}

// GetFrameBufferSizeBytes returns the FrameBufferSizeBytes field value if set, zero value otherwise.
func (o *HciAhvVmGpu) GetFrameBufferSizeBytes() int64 {
	if o == nil || IsNil(o.FrameBufferSizeBytes) {
		var ret int64
		return ret
	}
	return *o.FrameBufferSizeBytes
}

// GetFrameBufferSizeBytesOk returns a tuple with the FrameBufferSizeBytes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HciAhvVmGpu) GetFrameBufferSizeBytesOk() (*int64, bool) {
	if o == nil || IsNil(o.FrameBufferSizeBytes) {
		return nil, false
	}
	return o.FrameBufferSizeBytes, true
}

// HasFrameBufferSizeBytes returns a boolean if a field has been set.
func (o *HciAhvVmGpu) HasFrameBufferSizeBytes() bool {
	if o != nil && !IsNil(o.FrameBufferSizeBytes) {
		return true
	}

	return false
}

// SetFrameBufferSizeBytes gets a reference to the given int64 and assigns it to the FrameBufferSizeBytes field.
func (o *HciAhvVmGpu) SetFrameBufferSizeBytes(v int64) {
	o.FrameBufferSizeBytes = &v
}

// GetGpuExtId returns the GpuExtId field value if set, zero value otherwise.
func (o *HciAhvVmGpu) GetGpuExtId() string {
	if o == nil || IsNil(o.GpuExtId) {
		var ret string
		return ret
	}
	return *o.GpuExtId
}

// GetGpuExtIdOk returns a tuple with the GpuExtId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HciAhvVmGpu) GetGpuExtIdOk() (*string, bool) {
	if o == nil || IsNil(o.GpuExtId) {
		return nil, false
	}
	return o.GpuExtId, true
}

// HasGpuExtId returns a boolean if a field has been set.
func (o *HciAhvVmGpu) HasGpuExtId() bool {
	if o != nil && !IsNil(o.GpuExtId) {
		return true
	}

	return false
}

// SetGpuExtId gets a reference to the given string and assigns it to the GpuExtId field.
func (o *HciAhvVmGpu) SetGpuExtId(v string) {
	o.GpuExtId = &v
}

// GetGuestDriverVersion returns the GuestDriverVersion field value if set, zero value otherwise.
func (o *HciAhvVmGpu) GetGuestDriverVersion() string {
	if o == nil || IsNil(o.GuestDriverVersion) {
		var ret string
		return ret
	}
	return *o.GuestDriverVersion
}

// GetGuestDriverVersionOk returns a tuple with the GuestDriverVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HciAhvVmGpu) GetGuestDriverVersionOk() (*string, bool) {
	if o == nil || IsNil(o.GuestDriverVersion) {
		return nil, false
	}
	return o.GuestDriverVersion, true
}

// HasGuestDriverVersion returns a boolean if a field has been set.
func (o *HciAhvVmGpu) HasGuestDriverVersion() bool {
	if o != nil && !IsNil(o.GuestDriverVersion) {
		return true
	}

	return false
}

// SetGuestDriverVersion gets a reference to the given string and assigns it to the GuestDriverVersion field.
func (o *HciAhvVmGpu) SetGuestDriverVersion(v string) {
	o.GuestDriverVersion = &v
}

// GetMode returns the Mode field value if set, zero value otherwise.
func (o *HciAhvVmGpu) GetMode() string {
	if o == nil || IsNil(o.Mode) {
		var ret string
		return ret
	}
	return *o.Mode
}

// GetModeOk returns a tuple with the Mode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HciAhvVmGpu) GetModeOk() (*string, bool) {
	if o == nil || IsNil(o.Mode) {
		return nil, false
	}
	return o.Mode, true
}

// HasMode returns a boolean if a field has been set.
func (o *HciAhvVmGpu) HasMode() bool {
	if o != nil && !IsNil(o.Mode) {
		return true
	}

	return false
}

// SetMode gets a reference to the given string and assigns it to the Mode field.
func (o *HciAhvVmGpu) SetMode(v string) {
	o.Mode = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *HciAhvVmGpu) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HciAhvVmGpu) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *HciAhvVmGpu) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *HciAhvVmGpu) SetName(v string) {
	o.Name = &v
}

// GetNumVirtualDisplayHeads returns the NumVirtualDisplayHeads field value if set, zero value otherwise.
func (o *HciAhvVmGpu) GetNumVirtualDisplayHeads() int32 {
	if o == nil || IsNil(o.NumVirtualDisplayHeads) {
		var ret int32
		return ret
	}
	return *o.NumVirtualDisplayHeads
}

// GetNumVirtualDisplayHeadsOk returns a tuple with the NumVirtualDisplayHeads field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HciAhvVmGpu) GetNumVirtualDisplayHeadsOk() (*int32, bool) {
	if o == nil || IsNil(o.NumVirtualDisplayHeads) {
		return nil, false
	}
	return o.NumVirtualDisplayHeads, true
}

// HasNumVirtualDisplayHeads returns a boolean if a field has been set.
func (o *HciAhvVmGpu) HasNumVirtualDisplayHeads() bool {
	if o != nil && !IsNil(o.NumVirtualDisplayHeads) {
		return true
	}

	return false
}

// SetNumVirtualDisplayHeads gets a reference to the given int32 and assigns it to the NumVirtualDisplayHeads field.
func (o *HciAhvVmGpu) SetNumVirtualDisplayHeads(v int32) {
	o.NumVirtualDisplayHeads = &v
}

// GetPciAddress returns the PciAddress field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HciAhvVmGpu) GetPciAddress() HciSbdf {
	if o == nil || IsNil(o.PciAddress.Get()) {
		var ret HciSbdf
		return ret
	}
	return *o.PciAddress.Get()
}

// GetPciAddressOk returns a tuple with the PciAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HciAhvVmGpu) GetPciAddressOk() (*HciSbdf, bool) {
	if o == nil {
		return nil, false
	}
	return o.PciAddress.Get(), o.PciAddress.IsSet()
}

// HasPciAddress returns a boolean if a field has been set.
func (o *HciAhvVmGpu) HasPciAddress() bool {
	if o != nil && o.PciAddress.IsSet() {
		return true
	}

	return false
}

// SetPciAddress gets a reference to the given NullableHciSbdf and assigns it to the PciAddress field.
func (o *HciAhvVmGpu) SetPciAddress(v HciSbdf) {
	o.PciAddress.Set(&v)
}

// SetPciAddressNil sets the value for PciAddress to be an explicit nil
func (o *HciAhvVmGpu) SetPciAddressNil() {
	o.PciAddress.Set(nil)
}

// UnsetPciAddress ensures that no value is present for PciAddress, not even an explicit nil
func (o *HciAhvVmGpu) UnsetPciAddress() {
	o.PciAddress.Unset()
}

// GetVendor returns the Vendor field value if set, zero value otherwise.
func (o *HciAhvVmGpu) GetVendor() string {
	if o == nil || IsNil(o.Vendor) {
		var ret string
		return ret
	}
	return *o.Vendor
}

// GetVendorOk returns a tuple with the Vendor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HciAhvVmGpu) GetVendorOk() (*string, bool) {
	if o == nil || IsNil(o.Vendor) {
		return nil, false
	}
	return o.Vendor, true
}

// HasVendor returns a boolean if a field has been set.
func (o *HciAhvVmGpu) HasVendor() bool {
	if o != nil && !IsNil(o.Vendor) {
		return true
	}

	return false
}

// SetVendor gets a reference to the given string and assigns it to the Vendor field.
func (o *HciAhvVmGpu) SetVendor(v string) {
	o.Vendor = &v
}

// GetVmExtId returns the VmExtId field value if set, zero value otherwise.
func (o *HciAhvVmGpu) GetVmExtId() string {
	if o == nil || IsNil(o.VmExtId) {
		var ret string
		return ret
	}
	return *o.VmExtId
}

// GetVmExtIdOk returns a tuple with the VmExtId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HciAhvVmGpu) GetVmExtIdOk() (*string, bool) {
	if o == nil || IsNil(o.VmExtId) {
		return nil, false
	}
	return o.VmExtId, true
}

// HasVmExtId returns a boolean if a field has been set.
func (o *HciAhvVmGpu) HasVmExtId() bool {
	if o != nil && !IsNil(o.VmExtId) {
		return true
	}

	return false
}

// SetVmExtId gets a reference to the given string and assigns it to the VmExtId field.
func (o *HciAhvVmGpu) SetVmExtId(v string) {
	o.VmExtId = &v
}

// GetRegisteredDevice returns the RegisteredDevice field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HciAhvVmGpu) GetRegisteredDevice() AssetDeviceRegistrationRelationship {
	if o == nil || IsNil(o.RegisteredDevice.Get()) {
		var ret AssetDeviceRegistrationRelationship
		return ret
	}
	return *o.RegisteredDevice.Get()
}

// GetRegisteredDeviceOk returns a tuple with the RegisteredDevice field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HciAhvVmGpu) GetRegisteredDeviceOk() (*AssetDeviceRegistrationRelationship, bool) {
	if o == nil {
		return nil, false
	}
	return o.RegisteredDevice.Get(), o.RegisteredDevice.IsSet()
}

// HasRegisteredDevice returns a boolean if a field has been set.
func (o *HciAhvVmGpu) HasRegisteredDevice() bool {
	if o != nil && o.RegisteredDevice.IsSet() {
		return true
	}

	return false
}

// SetRegisteredDevice gets a reference to the given NullableAssetDeviceRegistrationRelationship and assigns it to the RegisteredDevice field.
func (o *HciAhvVmGpu) SetRegisteredDevice(v AssetDeviceRegistrationRelationship) {
	o.RegisteredDevice.Set(&v)
}

// SetRegisteredDeviceNil sets the value for RegisteredDevice to be an explicit nil
func (o *HciAhvVmGpu) SetRegisteredDeviceNil() {
	o.RegisteredDevice.Set(nil)
}

// UnsetRegisteredDevice ensures that no value is present for RegisteredDevice, not even an explicit nil
func (o *HciAhvVmGpu) UnsetRegisteredDevice() {
	o.RegisteredDevice.Unset()
}

// GetVm returns the Vm field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HciAhvVmGpu) GetVm() HciAhvVmRelationship {
	if o == nil || IsNil(o.Vm.Get()) {
		var ret HciAhvVmRelationship
		return ret
	}
	return *o.Vm.Get()
}

// GetVmOk returns a tuple with the Vm field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HciAhvVmGpu) GetVmOk() (*HciAhvVmRelationship, bool) {
	if o == nil {
		return nil, false
	}
	return o.Vm.Get(), o.Vm.IsSet()
}

// HasVm returns a boolean if a field has been set.
func (o *HciAhvVmGpu) HasVm() bool {
	if o != nil && o.Vm.IsSet() {
		return true
	}

	return false
}

// SetVm gets a reference to the given NullableHciAhvVmRelationship and assigns it to the Vm field.
func (o *HciAhvVmGpu) SetVm(v HciAhvVmRelationship) {
	o.Vm.Set(&v)
}

// SetVmNil sets the value for Vm to be an explicit nil
func (o *HciAhvVmGpu) SetVmNil() {
	o.Vm.Set(nil)
}

// UnsetVm ensures that no value is present for Vm, not even an explicit nil
func (o *HciAhvVmGpu) UnsetVm() {
	o.Vm.Unset()
}

func (o HciAhvVmGpu) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o HciAhvVmGpu) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	serializedMoBaseMo, errMoBaseMo := json.Marshal(o.MoBaseMo)
	if errMoBaseMo != nil {
		return map[string]interface{}{}, errMoBaseMo
	}
	errMoBaseMo = json.Unmarshal([]byte(serializedMoBaseMo), &toSerialize)
	if errMoBaseMo != nil {
		return map[string]interface{}{}, errMoBaseMo
	}
	if _, exists := toSerialize["ClassId"]; !exists {
		toSerialize["ClassId"] = o.GetDefaultClassId()
	}
	toSerialize["ClassId"] = o.ClassId
	if _, exists := toSerialize["ObjectType"]; !exists {
		toSerialize["ObjectType"] = o.GetDefaultObjectType()
	}
	toSerialize["ObjectType"] = o.ObjectType
	if !IsNil(o.DeviceId) {
		toSerialize["DeviceId"] = o.DeviceId
	}
	if !IsNil(o.Fraction) {
		toSerialize["Fraction"] = o.Fraction
	}
	if !IsNil(o.FrameBufferSizeBytes) {
		toSerialize["FrameBufferSizeBytes"] = o.FrameBufferSizeBytes
	}
	if !IsNil(o.GpuExtId) {
		toSerialize["GpuExtId"] = o.GpuExtId
	}
	if !IsNil(o.GuestDriverVersion) {
		toSerialize["GuestDriverVersion"] = o.GuestDriverVersion
	}
	if !IsNil(o.Mode) {
		toSerialize["Mode"] = o.Mode
	}
	if !IsNil(o.Name) {
		toSerialize["Name"] = o.Name
	}
	if !IsNil(o.NumVirtualDisplayHeads) {
		toSerialize["NumVirtualDisplayHeads"] = o.NumVirtualDisplayHeads
	}
	if o.PciAddress.IsSet() {
		toSerialize["PciAddress"] = o.PciAddress.Get()
	}
	if !IsNil(o.Vendor) {
		toSerialize["Vendor"] = o.Vendor
	}
	if !IsNil(o.VmExtId) {
		toSerialize["VmExtId"] = o.VmExtId
	}
	if o.RegisteredDevice.IsSet() {
		toSerialize["RegisteredDevice"] = o.RegisteredDevice.Get()
	}
	if o.Vm.IsSet() {
		toSerialize["Vm"] = o.Vm.Get()
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *HciAhvVmGpu) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"ClassId",
		"ObjectType",
	}

	// defaultValueFuncMap captures the default values for required properties.
	// These values are used when required properties are missing from the payload.
	defaultValueFuncMap := map[string]func() interface{}{
		"ClassId":    o.GetDefaultClassId,
		"ObjectType": o.GetDefaultObjectType,
	}
	var defaultValueApplied bool
	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			if _, ok := defaultValueFuncMap[requiredProperty]; ok {
				allProperties[requiredProperty] = defaultValueFuncMap[requiredProperty]()
				defaultValueApplied = true
			}
		}
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	if defaultValueApplied {
		data, err = json.Marshal(allProperties)
		if err != nil {
			return err
		}
	}
	type HciAhvVmGpuWithoutEmbeddedStruct struct {
		// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.
		ClassId string `json:"ClassId"`
		// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
		ObjectType string `json:"ObjectType"`
		// The device id of the GPU.
		DeviceId *int64 `json:"DeviceId,omitempty"`
		// The fraction of a physical GPU's resources that are allocated to a virtual GPU, e.g. 8 indicate 1/8 of a GPU.
		Fraction *int64 `json:"Fraction,omitempty"`
		// The frame buffer size of the GPU.
		FrameBufferSizeBytes *int64 `json:"FrameBufferSizeBytes,omitempty"`
		// The unique identifier of the GPU.
		GpuExtId *string `json:"GpuExtId,omitempty"`
		// Last determined guest driver version.
		GuestDriverVersion *string `json:"GuestDriverVersion,omitempty"`
		// The mode of the GPU such as UNUSED, USED_FOR_PASSTHROUGH, USED_FOR_VIRTUAL.
		Mode *string `json:"Mode,omitempty"`
		// The name of the GPU allocation such as \"NVIDIA_A16-1B\".
		Name *string `json:"Name,omitempty"`
		// The number of virtual display heads of the GPU.
		NumVirtualDisplayHeads *int32          `json:"NumVirtualDisplayHeads,omitempty"`
		PciAddress             NullableHciSbdf `json:"PciAddress,omitempty"`
		// The vendor name of the GPU.
		Vendor *string `json:"Vendor,omitempty"`
		// The unique identifier of the VM.
		VmExtId          *string                                     `json:"VmExtId,omitempty"`
		RegisteredDevice NullableAssetDeviceRegistrationRelationship `json:"RegisteredDevice,omitempty"`
		Vm               NullableHciAhvVmRelationship                `json:"Vm,omitempty"`
	}

	varHciAhvVmGpuWithoutEmbeddedStruct := HciAhvVmGpuWithoutEmbeddedStruct{}

	err = json.Unmarshal(data, &varHciAhvVmGpuWithoutEmbeddedStruct)
	if err == nil {
		varHciAhvVmGpu := _HciAhvVmGpu{}
		varHciAhvVmGpu.ClassId = varHciAhvVmGpuWithoutEmbeddedStruct.ClassId
		varHciAhvVmGpu.ObjectType = varHciAhvVmGpuWithoutEmbeddedStruct.ObjectType
		varHciAhvVmGpu.DeviceId = varHciAhvVmGpuWithoutEmbeddedStruct.DeviceId
		varHciAhvVmGpu.Fraction = varHciAhvVmGpuWithoutEmbeddedStruct.Fraction
		varHciAhvVmGpu.FrameBufferSizeBytes = varHciAhvVmGpuWithoutEmbeddedStruct.FrameBufferSizeBytes
		varHciAhvVmGpu.GpuExtId = varHciAhvVmGpuWithoutEmbeddedStruct.GpuExtId
		varHciAhvVmGpu.GuestDriverVersion = varHciAhvVmGpuWithoutEmbeddedStruct.GuestDriverVersion
		varHciAhvVmGpu.Mode = varHciAhvVmGpuWithoutEmbeddedStruct.Mode
		varHciAhvVmGpu.Name = varHciAhvVmGpuWithoutEmbeddedStruct.Name
		varHciAhvVmGpu.NumVirtualDisplayHeads = varHciAhvVmGpuWithoutEmbeddedStruct.NumVirtualDisplayHeads
		varHciAhvVmGpu.PciAddress = varHciAhvVmGpuWithoutEmbeddedStruct.PciAddress
		varHciAhvVmGpu.Vendor = varHciAhvVmGpuWithoutEmbeddedStruct.Vendor
		varHciAhvVmGpu.VmExtId = varHciAhvVmGpuWithoutEmbeddedStruct.VmExtId
		varHciAhvVmGpu.RegisteredDevice = varHciAhvVmGpuWithoutEmbeddedStruct.RegisteredDevice
		varHciAhvVmGpu.Vm = varHciAhvVmGpuWithoutEmbeddedStruct.Vm
		*o = HciAhvVmGpu(varHciAhvVmGpu)
	} else {
		return err
	}

	varHciAhvVmGpu := _HciAhvVmGpu{}

	err = json.Unmarshal(data, &varHciAhvVmGpu)
	if err == nil {
		o.MoBaseMo = varHciAhvVmGpu.MoBaseMo
	} else {
		return err
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "ClassId")
		delete(additionalProperties, "ObjectType")
		delete(additionalProperties, "DeviceId")
		delete(additionalProperties, "Fraction")
		delete(additionalProperties, "FrameBufferSizeBytes")
		delete(additionalProperties, "GpuExtId")
		delete(additionalProperties, "GuestDriverVersion")
		delete(additionalProperties, "Mode")
		delete(additionalProperties, "Name")
		delete(additionalProperties, "NumVirtualDisplayHeads")
		delete(additionalProperties, "PciAddress")
		delete(additionalProperties, "Vendor")
		delete(additionalProperties, "VmExtId")
		delete(additionalProperties, "RegisteredDevice")
		delete(additionalProperties, "Vm")

		// remove fields from embedded structs
		reflectMoBaseMo := reflect.ValueOf(o.MoBaseMo)
		for i := 0; i < reflectMoBaseMo.Type().NumField(); i++ {
			t := reflectMoBaseMo.Type().Field(i)

			if jsonTag := t.Tag.Get("json"); jsonTag != "" {
				fieldName := ""
				if commaIdx := strings.Index(jsonTag, ","); commaIdx > 0 {
					fieldName = jsonTag[:commaIdx]
				} else {
					fieldName = jsonTag
				}
				if fieldName != "AdditionalProperties" {
					delete(additionalProperties, fieldName)
				}
			}
		}

		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableHciAhvVmGpu struct {
	value *HciAhvVmGpu
	isSet bool
}

func (v NullableHciAhvVmGpu) Get() *HciAhvVmGpu {
	return v.value
}

func (v *NullableHciAhvVmGpu) Set(val *HciAhvVmGpu) {
	v.value = val
	v.isSet = true
}

func (v NullableHciAhvVmGpu) IsSet() bool {
	return v.isSet
}

func (v *NullableHciAhvVmGpu) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHciAhvVmGpu(val *HciAhvVmGpu) *NullableHciAhvVmGpu {
	return &NullableHciAhvVmGpu{value: val, isSet: true}
}

func (v NullableHciAhvVmGpu) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHciAhvVmGpu) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
