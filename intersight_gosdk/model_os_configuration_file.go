/*
Cisco Intersight

Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations. The Intersight OpenAPI document defines the complete set of properties that are returned in the HTTP response. From that perspective, a client can expect that no additional properties are returned, unless these properties are explicitly defined in the OpenAPI document. However, when a client uses an older version of the Intersight OpenAPI document, the server may send additional properties because the software is more recent than the client. In that case, the client may receive properties that it does not know about. Some generated SDKs perform a strict validation of the HTTP response body against the OpenAPI document.

API version: 1.0.11-2024100405
Contact: intersight@cisco.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package intersight

import (
	"encoding/json"
	"fmt"
	"reflect"
	"strings"
)

// checks if the OsConfigurationFile type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OsConfigurationFile{}

// OsConfigurationFile A ConfigurationFile is an OS specific answer file that helps with the unattended installation. The file can also be a template file with placeholders instead of actual answers. Intersight supports the golang template syntax specified in https://golang.org/pkg/text/template/. The template supports placeholders for all the properties of os.Answers MO type as well as any additional user-defined properties. The values for these placeholders shall be given during OS installation in the form of os.Answers type and 'additionalProperties' in os.OsInstall object.
type OsConfigurationFile struct {
	MoBaseMo
	// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.
	ClassId string `json:"ClassId"`
	// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
	ObjectType string `json:"ObjectType"`
	// Description of the OS ConfigurationFile.
	Description *string `json:"Description,omitempty"`
	// The content of the entire configuration file is stored as value. The content can either be a static file content or a template content. The template is expected to conform to the golang template syntax. The values from os.Answers properties will be used to populate this template.
	FileContent *string `json:"FileContent,omitempty"`
	// The internal flag is set to true when configuration file is uploaded from OS Install wizard. Internal Configuration files will not be displayed in Answer Management Page.
	Internal *bool `json:"Internal,omitempty"`
	// The name of the OS ConfigurationFile that uniquely identifies the configuration file.
	Name         *string         `json:"Name,omitempty" validate:"regexp=^[a-zA-Z0-9\\\\._\\\\-]+$"`
	Placeholders []OsPlaceHolder `json:"Placeholders,omitempty"`
	// An internal property that is used to distinguish between the pre-canned OS configuration file entries and user provided entries.
	Supported *bool                         `json:"Supported,omitempty"`
	Catalog   NullableOsCatalogRelationship `json:"Catalog,omitempty"`
	// An array of relationships to hclOperatingSystem resources.
	Distributions        []HclOperatingSystemRelationship `json:"Distributions,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _OsConfigurationFile OsConfigurationFile

// NewOsConfigurationFile instantiates a new OsConfigurationFile object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOsConfigurationFile(classId string, objectType string) *OsConfigurationFile {
	this := OsConfigurationFile{}
	this.ClassId = classId
	this.ObjectType = objectType
	var internal bool = false
	this.Internal = &internal
	return &this
}

// NewOsConfigurationFileWithDefaults instantiates a new OsConfigurationFile object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOsConfigurationFileWithDefaults() *OsConfigurationFile {
	this := OsConfigurationFile{}
	var classId string = "os.ConfigurationFile"
	this.ClassId = classId
	var objectType string = "os.ConfigurationFile"
	this.ObjectType = objectType
	var internal bool = false
	this.Internal = &internal
	return &this
}

// GetClassId returns the ClassId field value
func (o *OsConfigurationFile) GetClassId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ClassId
}

// GetClassIdOk returns a tuple with the ClassId field value
// and a boolean to check if the value has been set.
func (o *OsConfigurationFile) GetClassIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ClassId, true
}

// SetClassId sets field value
func (o *OsConfigurationFile) SetClassId(v string) {
	o.ClassId = v
}

// GetDefaultClassId returns the default value "os.ConfigurationFile" of the ClassId field.
func (o *OsConfigurationFile) GetDefaultClassId() interface{} {
	return "os.ConfigurationFile"
}

// GetObjectType returns the ObjectType field value
func (o *OsConfigurationFile) GetObjectType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ObjectType
}

// GetObjectTypeOk returns a tuple with the ObjectType field value
// and a boolean to check if the value has been set.
func (o *OsConfigurationFile) GetObjectTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ObjectType, true
}

// SetObjectType sets field value
func (o *OsConfigurationFile) SetObjectType(v string) {
	o.ObjectType = v
}

// GetDefaultObjectType returns the default value "os.ConfigurationFile" of the ObjectType field.
func (o *OsConfigurationFile) GetDefaultObjectType() interface{} {
	return "os.ConfigurationFile"
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *OsConfigurationFile) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OsConfigurationFile) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *OsConfigurationFile) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *OsConfigurationFile) SetDescription(v string) {
	o.Description = &v
}

// GetFileContent returns the FileContent field value if set, zero value otherwise.
func (o *OsConfigurationFile) GetFileContent() string {
	if o == nil || IsNil(o.FileContent) {
		var ret string
		return ret
	}
	return *o.FileContent
}

// GetFileContentOk returns a tuple with the FileContent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OsConfigurationFile) GetFileContentOk() (*string, bool) {
	if o == nil || IsNil(o.FileContent) {
		return nil, false
	}
	return o.FileContent, true
}

// HasFileContent returns a boolean if a field has been set.
func (o *OsConfigurationFile) HasFileContent() bool {
	if o != nil && !IsNil(o.FileContent) {
		return true
	}

	return false
}

// SetFileContent gets a reference to the given string and assigns it to the FileContent field.
func (o *OsConfigurationFile) SetFileContent(v string) {
	o.FileContent = &v
}

// GetInternal returns the Internal field value if set, zero value otherwise.
func (o *OsConfigurationFile) GetInternal() bool {
	if o == nil || IsNil(o.Internal) {
		var ret bool
		return ret
	}
	return *o.Internal
}

// GetInternalOk returns a tuple with the Internal field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OsConfigurationFile) GetInternalOk() (*bool, bool) {
	if o == nil || IsNil(o.Internal) {
		return nil, false
	}
	return o.Internal, true
}

// HasInternal returns a boolean if a field has been set.
func (o *OsConfigurationFile) HasInternal() bool {
	if o != nil && !IsNil(o.Internal) {
		return true
	}

	return false
}

// SetInternal gets a reference to the given bool and assigns it to the Internal field.
func (o *OsConfigurationFile) SetInternal(v bool) {
	o.Internal = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *OsConfigurationFile) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OsConfigurationFile) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *OsConfigurationFile) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *OsConfigurationFile) SetName(v string) {
	o.Name = &v
}

// GetPlaceholders returns the Placeholders field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OsConfigurationFile) GetPlaceholders() []OsPlaceHolder {
	if o == nil {
		var ret []OsPlaceHolder
		return ret
	}
	return o.Placeholders
}

// GetPlaceholdersOk returns a tuple with the Placeholders field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OsConfigurationFile) GetPlaceholdersOk() ([]OsPlaceHolder, bool) {
	if o == nil || IsNil(o.Placeholders) {
		return nil, false
	}
	return o.Placeholders, true
}

// HasPlaceholders returns a boolean if a field has been set.
func (o *OsConfigurationFile) HasPlaceholders() bool {
	if o != nil && !IsNil(o.Placeholders) {
		return true
	}

	return false
}

// SetPlaceholders gets a reference to the given []OsPlaceHolder and assigns it to the Placeholders field.
func (o *OsConfigurationFile) SetPlaceholders(v []OsPlaceHolder) {
	o.Placeholders = v
}

// GetSupported returns the Supported field value if set, zero value otherwise.
func (o *OsConfigurationFile) GetSupported() bool {
	if o == nil || IsNil(o.Supported) {
		var ret bool
		return ret
	}
	return *o.Supported
}

// GetSupportedOk returns a tuple with the Supported field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OsConfigurationFile) GetSupportedOk() (*bool, bool) {
	if o == nil || IsNil(o.Supported) {
		return nil, false
	}
	return o.Supported, true
}

// HasSupported returns a boolean if a field has been set.
func (o *OsConfigurationFile) HasSupported() bool {
	if o != nil && !IsNil(o.Supported) {
		return true
	}

	return false
}

// SetSupported gets a reference to the given bool and assigns it to the Supported field.
func (o *OsConfigurationFile) SetSupported(v bool) {
	o.Supported = &v
}

// GetCatalog returns the Catalog field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OsConfigurationFile) GetCatalog() OsCatalogRelationship {
	if o == nil || IsNil(o.Catalog.Get()) {
		var ret OsCatalogRelationship
		return ret
	}
	return *o.Catalog.Get()
}

// GetCatalogOk returns a tuple with the Catalog field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OsConfigurationFile) GetCatalogOk() (*OsCatalogRelationship, bool) {
	if o == nil {
		return nil, false
	}
	return o.Catalog.Get(), o.Catalog.IsSet()
}

// HasCatalog returns a boolean if a field has been set.
func (o *OsConfigurationFile) HasCatalog() bool {
	if o != nil && o.Catalog.IsSet() {
		return true
	}

	return false
}

// SetCatalog gets a reference to the given NullableOsCatalogRelationship and assigns it to the Catalog field.
func (o *OsConfigurationFile) SetCatalog(v OsCatalogRelationship) {
	o.Catalog.Set(&v)
}

// SetCatalogNil sets the value for Catalog to be an explicit nil
func (o *OsConfigurationFile) SetCatalogNil() {
	o.Catalog.Set(nil)
}

// UnsetCatalog ensures that no value is present for Catalog, not even an explicit nil
func (o *OsConfigurationFile) UnsetCatalog() {
	o.Catalog.Unset()
}

// GetDistributions returns the Distributions field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OsConfigurationFile) GetDistributions() []HclOperatingSystemRelationship {
	if o == nil {
		var ret []HclOperatingSystemRelationship
		return ret
	}
	return o.Distributions
}

// GetDistributionsOk returns a tuple with the Distributions field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OsConfigurationFile) GetDistributionsOk() ([]HclOperatingSystemRelationship, bool) {
	if o == nil || IsNil(o.Distributions) {
		return nil, false
	}
	return o.Distributions, true
}

// HasDistributions returns a boolean if a field has been set.
func (o *OsConfigurationFile) HasDistributions() bool {
	if o != nil && !IsNil(o.Distributions) {
		return true
	}

	return false
}

// SetDistributions gets a reference to the given []HclOperatingSystemRelationship and assigns it to the Distributions field.
func (o *OsConfigurationFile) SetDistributions(v []HclOperatingSystemRelationship) {
	o.Distributions = v
}

func (o OsConfigurationFile) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OsConfigurationFile) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	serializedMoBaseMo, errMoBaseMo := json.Marshal(o.MoBaseMo)
	if errMoBaseMo != nil {
		return map[string]interface{}{}, errMoBaseMo
	}
	errMoBaseMo = json.Unmarshal([]byte(serializedMoBaseMo), &toSerialize)
	if errMoBaseMo != nil {
		return map[string]interface{}{}, errMoBaseMo
	}
	if _, exists := toSerialize["ClassId"]; !exists {
		toSerialize["ClassId"] = o.GetDefaultClassId()
	}
	toSerialize["ClassId"] = o.ClassId
	if _, exists := toSerialize["ObjectType"]; !exists {
		toSerialize["ObjectType"] = o.GetDefaultObjectType()
	}
	toSerialize["ObjectType"] = o.ObjectType
	if !IsNil(o.Description) {
		toSerialize["Description"] = o.Description
	}
	if !IsNil(o.FileContent) {
		toSerialize["FileContent"] = o.FileContent
	}
	if !IsNil(o.Internal) {
		toSerialize["Internal"] = o.Internal
	}
	if !IsNil(o.Name) {
		toSerialize["Name"] = o.Name
	}
	if o.Placeholders != nil {
		toSerialize["Placeholders"] = o.Placeholders
	}
	if !IsNil(o.Supported) {
		toSerialize["Supported"] = o.Supported
	}
	if o.Catalog.IsSet() {
		toSerialize["Catalog"] = o.Catalog.Get()
	}
	if o.Distributions != nil {
		toSerialize["Distributions"] = o.Distributions
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *OsConfigurationFile) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"ClassId",
		"ObjectType",
	}

	// defaultValueFuncMap captures the default values for required properties.
	// These values are used when required properties are missing from the payload.
	defaultValueFuncMap := map[string]func() interface{}{
		"ClassId":    o.GetDefaultClassId,
		"ObjectType": o.GetDefaultObjectType,
	}
	var defaultValueApplied bool
	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			if _, ok := defaultValueFuncMap[requiredProperty]; ok {
				allProperties[requiredProperty] = defaultValueFuncMap[requiredProperty]()
				defaultValueApplied = true
			}
		}
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	if defaultValueApplied {
		data, err = json.Marshal(allProperties)
		if err != nil {
			return err
		}
	}
	type OsConfigurationFileWithoutEmbeddedStruct struct {
		// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.
		ClassId string `json:"ClassId"`
		// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
		ObjectType string `json:"ObjectType"`
		// Description of the OS ConfigurationFile.
		Description *string `json:"Description,omitempty"`
		// The content of the entire configuration file is stored as value. The content can either be a static file content or a template content. The template is expected to conform to the golang template syntax. The values from os.Answers properties will be used to populate this template.
		FileContent *string `json:"FileContent,omitempty"`
		// The internal flag is set to true when configuration file is uploaded from OS Install wizard. Internal Configuration files will not be displayed in Answer Management Page.
		Internal *bool `json:"Internal,omitempty"`
		// The name of the OS ConfigurationFile that uniquely identifies the configuration file.
		Name         *string         `json:"Name,omitempty" validate:"regexp=^[a-zA-Z0-9\\\\._\\\\-]+$"`
		Placeholders []OsPlaceHolder `json:"Placeholders,omitempty"`
		// An internal property that is used to distinguish between the pre-canned OS configuration file entries and user provided entries.
		Supported *bool                         `json:"Supported,omitempty"`
		Catalog   NullableOsCatalogRelationship `json:"Catalog,omitempty"`
		// An array of relationships to hclOperatingSystem resources.
		Distributions []HclOperatingSystemRelationship `json:"Distributions,omitempty"`
	}

	varOsConfigurationFileWithoutEmbeddedStruct := OsConfigurationFileWithoutEmbeddedStruct{}

	err = json.Unmarshal(data, &varOsConfigurationFileWithoutEmbeddedStruct)
	if err == nil {
		varOsConfigurationFile := _OsConfigurationFile{}
		varOsConfigurationFile.ClassId = varOsConfigurationFileWithoutEmbeddedStruct.ClassId
		varOsConfigurationFile.ObjectType = varOsConfigurationFileWithoutEmbeddedStruct.ObjectType
		varOsConfigurationFile.Description = varOsConfigurationFileWithoutEmbeddedStruct.Description
		varOsConfigurationFile.FileContent = varOsConfigurationFileWithoutEmbeddedStruct.FileContent
		varOsConfigurationFile.Internal = varOsConfigurationFileWithoutEmbeddedStruct.Internal
		varOsConfigurationFile.Name = varOsConfigurationFileWithoutEmbeddedStruct.Name
		varOsConfigurationFile.Placeholders = varOsConfigurationFileWithoutEmbeddedStruct.Placeholders
		varOsConfigurationFile.Supported = varOsConfigurationFileWithoutEmbeddedStruct.Supported
		varOsConfigurationFile.Catalog = varOsConfigurationFileWithoutEmbeddedStruct.Catalog
		varOsConfigurationFile.Distributions = varOsConfigurationFileWithoutEmbeddedStruct.Distributions
		*o = OsConfigurationFile(varOsConfigurationFile)
	} else {
		return err
	}

	varOsConfigurationFile := _OsConfigurationFile{}

	err = json.Unmarshal(data, &varOsConfigurationFile)
	if err == nil {
		o.MoBaseMo = varOsConfigurationFile.MoBaseMo
	} else {
		return err
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "ClassId")
		delete(additionalProperties, "ObjectType")
		delete(additionalProperties, "Description")
		delete(additionalProperties, "FileContent")
		delete(additionalProperties, "Internal")
		delete(additionalProperties, "Name")
		delete(additionalProperties, "Placeholders")
		delete(additionalProperties, "Supported")
		delete(additionalProperties, "Catalog")
		delete(additionalProperties, "Distributions")

		// remove fields from embedded structs
		reflectMoBaseMo := reflect.ValueOf(o.MoBaseMo)
		for i := 0; i < reflectMoBaseMo.Type().NumField(); i++ {
			t := reflectMoBaseMo.Type().Field(i)

			if jsonTag := t.Tag.Get("json"); jsonTag != "" {
				fieldName := ""
				if commaIdx := strings.Index(jsonTag, ","); commaIdx > 0 {
					fieldName = jsonTag[:commaIdx]
				} else {
					fieldName = jsonTag
				}
				if fieldName != "AdditionalProperties" {
					delete(additionalProperties, fieldName)
				}
			}
		}

		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableOsConfigurationFile struct {
	value *OsConfigurationFile
	isSet bool
}

func (v NullableOsConfigurationFile) Get() *OsConfigurationFile {
	return v.value
}

func (v *NullableOsConfigurationFile) Set(val *OsConfigurationFile) {
	v.value = val
	v.isSet = true
}

func (v NullableOsConfigurationFile) IsSet() bool {
	return v.isSet
}

func (v *NullableOsConfigurationFile) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOsConfigurationFile(val *OsConfigurationFile) *NullableOsConfigurationFile {
	return &NullableOsConfigurationFile{value: val, isSet: true}
}

func (v NullableOsConfigurationFile) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOsConfigurationFile) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
