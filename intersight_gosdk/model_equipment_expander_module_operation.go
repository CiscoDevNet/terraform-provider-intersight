/*
Cisco Intersight

Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations. The Intersight OpenAPI document defines the complete set of properties that are returned in the HTTP response. From that perspective, a client can expect that no additional properties are returned, unless these properties are explicitly defined in the OpenAPI document. However, when a client uses an older version of the Intersight OpenAPI document, the server may send additional properties because the software is more recent than the client. In that case, the client may receive properties that it does not know about. Some generated SDKs perform a strict validation of the HTTP response body against the OpenAPI document.

API version: 1.0.11-2025101412
Contact: intersight@cisco.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package intersight

import (
	"encoding/json"
	"fmt"
	"reflect"
	"strings"
)

// checks if the EquipmentExpanderModuleOperation type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EquipmentExpanderModuleOperation{}

// EquipmentExpanderModuleOperation Contains the properties which can be used to perform chassis expander module operations (Ex- BMC reboot).
type EquipmentExpanderModuleOperation struct {
	MoBaseMo
	// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.
	ClassId string `json:"ClassId"`
	// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
	ObjectType string `json:"ObjectType"`
	// User configured operation on the X-Fabric Module. * `None` - Placeholder default value for iom power state property. * `Reboot` - IO Module reboot state property value.
	AdminOperation *string `json:"AdminOperation,omitempty"`
	// Placeholder for affected object name which is a combination of chassis and X-Fabric Module ID. Used to display affected object in audit log.
	AffectedObjName *string `json:"AffectedObjName,omitempty"`
	// The configured state of these settings in the target X-Fabric Module. The value is any one of Applied, Applying, Failed. Applied - This state denotes that the settings are applied successfully in the target X-Fabric Module. Applying - This state denotes that the settings are being applied in the target X-Fabric Module. Failed - This state denotes that the settings could not be applied in the target X-Fabric Module. * `None` - Nil value when no action has been triggered by the user. * `Applied` - User configured settings are in applied state. * `Applying` - User settings are being applied on the target server. * `Failed` - User configured settings could not be applied. * `Scheduled` - User configured settings are scheduled to be applied.
	ConfigState                   *string                          `json:"ConfigState,omitempty"`
	ExpanderModuleOperationStatus []EquipmentIoCardOperationStatus `json:"ExpanderModuleOperationStatus,omitempty"`
	// Serial ID of the X-Fabric Module.
	Serial               *string                                     `json:"Serial,omitempty"`
	DeviceRegistration   NullableAssetDeviceRegistrationRelationship `json:"DeviceRegistration,omitempty"`
	ExpanderModule       NullableEquipmentExpanderModuleRelationship `json:"ExpanderModule,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _EquipmentExpanderModuleOperation EquipmentExpanderModuleOperation

// NewEquipmentExpanderModuleOperation instantiates a new EquipmentExpanderModuleOperation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEquipmentExpanderModuleOperation(classId string, objectType string) *EquipmentExpanderModuleOperation {
	this := EquipmentExpanderModuleOperation{}
	this.ClassId = classId
	this.ObjectType = objectType
	var adminOperation string = "None"
	this.AdminOperation = &adminOperation
	return &this
}

// NewEquipmentExpanderModuleOperationWithDefaults instantiates a new EquipmentExpanderModuleOperation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEquipmentExpanderModuleOperationWithDefaults() *EquipmentExpanderModuleOperation {
	this := EquipmentExpanderModuleOperation{}
	var classId string = "equipment.ExpanderModuleOperation"
	this.ClassId = classId
	var objectType string = "equipment.ExpanderModuleOperation"
	this.ObjectType = objectType
	var adminOperation string = "None"
	this.AdminOperation = &adminOperation
	return &this
}

// GetClassId returns the ClassId field value
func (o *EquipmentExpanderModuleOperation) GetClassId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ClassId
}

// GetClassIdOk returns a tuple with the ClassId field value
// and a boolean to check if the value has been set.
func (o *EquipmentExpanderModuleOperation) GetClassIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ClassId, true
}

// SetClassId sets field value
func (o *EquipmentExpanderModuleOperation) SetClassId(v string) {
	o.ClassId = v
}

// GetDefaultClassId returns the default value "equipment.ExpanderModuleOperation" of the ClassId field.
func (o *EquipmentExpanderModuleOperation) GetDefaultClassId() interface{} {
	return "equipment.ExpanderModuleOperation"
}

// GetObjectType returns the ObjectType field value
func (o *EquipmentExpanderModuleOperation) GetObjectType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ObjectType
}

// GetObjectTypeOk returns a tuple with the ObjectType field value
// and a boolean to check if the value has been set.
func (o *EquipmentExpanderModuleOperation) GetObjectTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ObjectType, true
}

// SetObjectType sets field value
func (o *EquipmentExpanderModuleOperation) SetObjectType(v string) {
	o.ObjectType = v
}

// GetDefaultObjectType returns the default value "equipment.ExpanderModuleOperation" of the ObjectType field.
func (o *EquipmentExpanderModuleOperation) GetDefaultObjectType() interface{} {
	return "equipment.ExpanderModuleOperation"
}

// GetAdminOperation returns the AdminOperation field value if set, zero value otherwise.
func (o *EquipmentExpanderModuleOperation) GetAdminOperation() string {
	if o == nil || IsNil(o.AdminOperation) {
		var ret string
		return ret
	}
	return *o.AdminOperation
}

// GetAdminOperationOk returns a tuple with the AdminOperation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EquipmentExpanderModuleOperation) GetAdminOperationOk() (*string, bool) {
	if o == nil || IsNil(o.AdminOperation) {
		return nil, false
	}
	return o.AdminOperation, true
}

// HasAdminOperation returns a boolean if a field has been set.
func (o *EquipmentExpanderModuleOperation) HasAdminOperation() bool {
	if o != nil && !IsNil(o.AdminOperation) {
		return true
	}

	return false
}

// SetAdminOperation gets a reference to the given string and assigns it to the AdminOperation field.
func (o *EquipmentExpanderModuleOperation) SetAdminOperation(v string) {
	o.AdminOperation = &v
}

// GetAffectedObjName returns the AffectedObjName field value if set, zero value otherwise.
func (o *EquipmentExpanderModuleOperation) GetAffectedObjName() string {
	if o == nil || IsNil(o.AffectedObjName) {
		var ret string
		return ret
	}
	return *o.AffectedObjName
}

// GetAffectedObjNameOk returns a tuple with the AffectedObjName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EquipmentExpanderModuleOperation) GetAffectedObjNameOk() (*string, bool) {
	if o == nil || IsNil(o.AffectedObjName) {
		return nil, false
	}
	return o.AffectedObjName, true
}

// HasAffectedObjName returns a boolean if a field has been set.
func (o *EquipmentExpanderModuleOperation) HasAffectedObjName() bool {
	if o != nil && !IsNil(o.AffectedObjName) {
		return true
	}

	return false
}

// SetAffectedObjName gets a reference to the given string and assigns it to the AffectedObjName field.
func (o *EquipmentExpanderModuleOperation) SetAffectedObjName(v string) {
	o.AffectedObjName = &v
}

// GetConfigState returns the ConfigState field value if set, zero value otherwise.
func (o *EquipmentExpanderModuleOperation) GetConfigState() string {
	if o == nil || IsNil(o.ConfigState) {
		var ret string
		return ret
	}
	return *o.ConfigState
}

// GetConfigStateOk returns a tuple with the ConfigState field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EquipmentExpanderModuleOperation) GetConfigStateOk() (*string, bool) {
	if o == nil || IsNil(o.ConfigState) {
		return nil, false
	}
	return o.ConfigState, true
}

// HasConfigState returns a boolean if a field has been set.
func (o *EquipmentExpanderModuleOperation) HasConfigState() bool {
	if o != nil && !IsNil(o.ConfigState) {
		return true
	}

	return false
}

// SetConfigState gets a reference to the given string and assigns it to the ConfigState field.
func (o *EquipmentExpanderModuleOperation) SetConfigState(v string) {
	o.ConfigState = &v
}

// GetExpanderModuleOperationStatus returns the ExpanderModuleOperationStatus field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EquipmentExpanderModuleOperation) GetExpanderModuleOperationStatus() []EquipmentIoCardOperationStatus {
	if o == nil {
		var ret []EquipmentIoCardOperationStatus
		return ret
	}
	return o.ExpanderModuleOperationStatus
}

// GetExpanderModuleOperationStatusOk returns a tuple with the ExpanderModuleOperationStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EquipmentExpanderModuleOperation) GetExpanderModuleOperationStatusOk() ([]EquipmentIoCardOperationStatus, bool) {
	if o == nil || IsNil(o.ExpanderModuleOperationStatus) {
		return nil, false
	}
	return o.ExpanderModuleOperationStatus, true
}

// HasExpanderModuleOperationStatus returns a boolean if a field has been set.
func (o *EquipmentExpanderModuleOperation) HasExpanderModuleOperationStatus() bool {
	if o != nil && !IsNil(o.ExpanderModuleOperationStatus) {
		return true
	}

	return false
}

// SetExpanderModuleOperationStatus gets a reference to the given []EquipmentIoCardOperationStatus and assigns it to the ExpanderModuleOperationStatus field.
func (o *EquipmentExpanderModuleOperation) SetExpanderModuleOperationStatus(v []EquipmentIoCardOperationStatus) {
	o.ExpanderModuleOperationStatus = v
}

// GetSerial returns the Serial field value if set, zero value otherwise.
func (o *EquipmentExpanderModuleOperation) GetSerial() string {
	if o == nil || IsNil(o.Serial) {
		var ret string
		return ret
	}
	return *o.Serial
}

// GetSerialOk returns a tuple with the Serial field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EquipmentExpanderModuleOperation) GetSerialOk() (*string, bool) {
	if o == nil || IsNil(o.Serial) {
		return nil, false
	}
	return o.Serial, true
}

// HasSerial returns a boolean if a field has been set.
func (o *EquipmentExpanderModuleOperation) HasSerial() bool {
	if o != nil && !IsNil(o.Serial) {
		return true
	}

	return false
}

// SetSerial gets a reference to the given string and assigns it to the Serial field.
func (o *EquipmentExpanderModuleOperation) SetSerial(v string) {
	o.Serial = &v
}

// GetDeviceRegistration returns the DeviceRegistration field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EquipmentExpanderModuleOperation) GetDeviceRegistration() AssetDeviceRegistrationRelationship {
	if o == nil || IsNil(o.DeviceRegistration.Get()) {
		var ret AssetDeviceRegistrationRelationship
		return ret
	}
	return *o.DeviceRegistration.Get()
}

// GetDeviceRegistrationOk returns a tuple with the DeviceRegistration field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EquipmentExpanderModuleOperation) GetDeviceRegistrationOk() (*AssetDeviceRegistrationRelationship, bool) {
	if o == nil {
		return nil, false
	}
	return o.DeviceRegistration.Get(), o.DeviceRegistration.IsSet()
}

// HasDeviceRegistration returns a boolean if a field has been set.
func (o *EquipmentExpanderModuleOperation) HasDeviceRegistration() bool {
	if o != nil && o.DeviceRegistration.IsSet() {
		return true
	}

	return false
}

// SetDeviceRegistration gets a reference to the given NullableAssetDeviceRegistrationRelationship and assigns it to the DeviceRegistration field.
func (o *EquipmentExpanderModuleOperation) SetDeviceRegistration(v AssetDeviceRegistrationRelationship) {
	o.DeviceRegistration.Set(&v)
}

// SetDeviceRegistrationNil sets the value for DeviceRegistration to be an explicit nil
func (o *EquipmentExpanderModuleOperation) SetDeviceRegistrationNil() {
	o.DeviceRegistration.Set(nil)
}

// UnsetDeviceRegistration ensures that no value is present for DeviceRegistration, not even an explicit nil
func (o *EquipmentExpanderModuleOperation) UnsetDeviceRegistration() {
	o.DeviceRegistration.Unset()
}

// GetExpanderModule returns the ExpanderModule field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EquipmentExpanderModuleOperation) GetExpanderModule() EquipmentExpanderModuleRelationship {
	if o == nil || IsNil(o.ExpanderModule.Get()) {
		var ret EquipmentExpanderModuleRelationship
		return ret
	}
	return *o.ExpanderModule.Get()
}

// GetExpanderModuleOk returns a tuple with the ExpanderModule field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EquipmentExpanderModuleOperation) GetExpanderModuleOk() (*EquipmentExpanderModuleRelationship, bool) {
	if o == nil {
		return nil, false
	}
	return o.ExpanderModule.Get(), o.ExpanderModule.IsSet()
}

// HasExpanderModule returns a boolean if a field has been set.
func (o *EquipmentExpanderModuleOperation) HasExpanderModule() bool {
	if o != nil && o.ExpanderModule.IsSet() {
		return true
	}

	return false
}

// SetExpanderModule gets a reference to the given NullableEquipmentExpanderModuleRelationship and assigns it to the ExpanderModule field.
func (o *EquipmentExpanderModuleOperation) SetExpanderModule(v EquipmentExpanderModuleRelationship) {
	o.ExpanderModule.Set(&v)
}

// SetExpanderModuleNil sets the value for ExpanderModule to be an explicit nil
func (o *EquipmentExpanderModuleOperation) SetExpanderModuleNil() {
	o.ExpanderModule.Set(nil)
}

// UnsetExpanderModule ensures that no value is present for ExpanderModule, not even an explicit nil
func (o *EquipmentExpanderModuleOperation) UnsetExpanderModule() {
	o.ExpanderModule.Unset()
}

func (o EquipmentExpanderModuleOperation) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EquipmentExpanderModuleOperation) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	serializedMoBaseMo, errMoBaseMo := json.Marshal(o.MoBaseMo)
	if errMoBaseMo != nil {
		return map[string]interface{}{}, errMoBaseMo
	}
	errMoBaseMo = json.Unmarshal([]byte(serializedMoBaseMo), &toSerialize)
	if errMoBaseMo != nil {
		return map[string]interface{}{}, errMoBaseMo
	}
	if _, exists := toSerialize["ClassId"]; !exists {
		toSerialize["ClassId"] = o.GetDefaultClassId()
	}
	toSerialize["ClassId"] = o.ClassId
	if _, exists := toSerialize["ObjectType"]; !exists {
		toSerialize["ObjectType"] = o.GetDefaultObjectType()
	}
	toSerialize["ObjectType"] = o.ObjectType
	if !IsNil(o.AdminOperation) {
		toSerialize["AdminOperation"] = o.AdminOperation
	}
	if !IsNil(o.AffectedObjName) {
		toSerialize["AffectedObjName"] = o.AffectedObjName
	}
	if !IsNil(o.ConfigState) {
		toSerialize["ConfigState"] = o.ConfigState
	}
	if o.ExpanderModuleOperationStatus != nil {
		toSerialize["ExpanderModuleOperationStatus"] = o.ExpanderModuleOperationStatus
	}
	if !IsNil(o.Serial) {
		toSerialize["Serial"] = o.Serial
	}
	if o.DeviceRegistration.IsSet() {
		toSerialize["DeviceRegistration"] = o.DeviceRegistration.Get()
	}
	if o.ExpanderModule.IsSet() {
		toSerialize["ExpanderModule"] = o.ExpanderModule.Get()
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *EquipmentExpanderModuleOperation) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"ClassId",
		"ObjectType",
	}

	// defaultValueFuncMap captures the default values for required properties.
	// These values are used when required properties are missing from the payload.
	defaultValueFuncMap := map[string]func() interface{}{
		"ClassId":    o.GetDefaultClassId,
		"ObjectType": o.GetDefaultObjectType,
	}
	var defaultValueApplied bool
	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			if _, ok := defaultValueFuncMap[requiredProperty]; ok {
				allProperties[requiredProperty] = defaultValueFuncMap[requiredProperty]()
				defaultValueApplied = true
			}
		}
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	if defaultValueApplied {
		data, err = json.Marshal(allProperties)
		if err != nil {
			return err
		}
	}
	type EquipmentExpanderModuleOperationWithoutEmbeddedStruct struct {
		// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.
		ClassId string `json:"ClassId"`
		// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
		ObjectType string `json:"ObjectType"`
		// User configured operation on the X-Fabric Module. * `None` - Placeholder default value for iom power state property. * `Reboot` - IO Module reboot state property value.
		AdminOperation *string `json:"AdminOperation,omitempty"`
		// Placeholder for affected object name which is a combination of chassis and X-Fabric Module ID. Used to display affected object in audit log.
		AffectedObjName *string `json:"AffectedObjName,omitempty"`
		// The configured state of these settings in the target X-Fabric Module. The value is any one of Applied, Applying, Failed. Applied - This state denotes that the settings are applied successfully in the target X-Fabric Module. Applying - This state denotes that the settings are being applied in the target X-Fabric Module. Failed - This state denotes that the settings could not be applied in the target X-Fabric Module. * `None` - Nil value when no action has been triggered by the user. * `Applied` - User configured settings are in applied state. * `Applying` - User settings are being applied on the target server. * `Failed` - User configured settings could not be applied. * `Scheduled` - User configured settings are scheduled to be applied.
		ConfigState                   *string                          `json:"ConfigState,omitempty"`
		ExpanderModuleOperationStatus []EquipmentIoCardOperationStatus `json:"ExpanderModuleOperationStatus,omitempty"`
		// Serial ID of the X-Fabric Module.
		Serial             *string                                     `json:"Serial,omitempty"`
		DeviceRegistration NullableAssetDeviceRegistrationRelationship `json:"DeviceRegistration,omitempty"`
		ExpanderModule     NullableEquipmentExpanderModuleRelationship `json:"ExpanderModule,omitempty"`
	}

	varEquipmentExpanderModuleOperationWithoutEmbeddedStruct := EquipmentExpanderModuleOperationWithoutEmbeddedStruct{}

	err = json.Unmarshal(data, &varEquipmentExpanderModuleOperationWithoutEmbeddedStruct)
	if err == nil {
		varEquipmentExpanderModuleOperation := _EquipmentExpanderModuleOperation{}
		varEquipmentExpanderModuleOperation.ClassId = varEquipmentExpanderModuleOperationWithoutEmbeddedStruct.ClassId
		varEquipmentExpanderModuleOperation.ObjectType = varEquipmentExpanderModuleOperationWithoutEmbeddedStruct.ObjectType
		varEquipmentExpanderModuleOperation.AdminOperation = varEquipmentExpanderModuleOperationWithoutEmbeddedStruct.AdminOperation
		varEquipmentExpanderModuleOperation.AffectedObjName = varEquipmentExpanderModuleOperationWithoutEmbeddedStruct.AffectedObjName
		varEquipmentExpanderModuleOperation.ConfigState = varEquipmentExpanderModuleOperationWithoutEmbeddedStruct.ConfigState
		varEquipmentExpanderModuleOperation.ExpanderModuleOperationStatus = varEquipmentExpanderModuleOperationWithoutEmbeddedStruct.ExpanderModuleOperationStatus
		varEquipmentExpanderModuleOperation.Serial = varEquipmentExpanderModuleOperationWithoutEmbeddedStruct.Serial
		varEquipmentExpanderModuleOperation.DeviceRegistration = varEquipmentExpanderModuleOperationWithoutEmbeddedStruct.DeviceRegistration
		varEquipmentExpanderModuleOperation.ExpanderModule = varEquipmentExpanderModuleOperationWithoutEmbeddedStruct.ExpanderModule
		*o = EquipmentExpanderModuleOperation(varEquipmentExpanderModuleOperation)
	} else {
		return err
	}

	varEquipmentExpanderModuleOperation := _EquipmentExpanderModuleOperation{}

	err = json.Unmarshal(data, &varEquipmentExpanderModuleOperation)
	if err == nil {
		o.MoBaseMo = varEquipmentExpanderModuleOperation.MoBaseMo
	} else {
		return err
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "ClassId")
		delete(additionalProperties, "ObjectType")
		delete(additionalProperties, "AdminOperation")
		delete(additionalProperties, "AffectedObjName")
		delete(additionalProperties, "ConfigState")
		delete(additionalProperties, "ExpanderModuleOperationStatus")
		delete(additionalProperties, "Serial")
		delete(additionalProperties, "DeviceRegistration")
		delete(additionalProperties, "ExpanderModule")

		// remove fields from embedded structs
		reflectMoBaseMo := reflect.ValueOf(o.MoBaseMo)
		for i := 0; i < reflectMoBaseMo.Type().NumField(); i++ {
			t := reflectMoBaseMo.Type().Field(i)

			if jsonTag := t.Tag.Get("json"); jsonTag != "" {
				fieldName := ""
				if commaIdx := strings.Index(jsonTag, ","); commaIdx > 0 {
					fieldName = jsonTag[:commaIdx]
				} else {
					fieldName = jsonTag
				}
				if fieldName != "AdditionalProperties" {
					delete(additionalProperties, fieldName)
				}
			}
		}

		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableEquipmentExpanderModuleOperation struct {
	value *EquipmentExpanderModuleOperation
	isSet bool
}

func (v NullableEquipmentExpanderModuleOperation) Get() *EquipmentExpanderModuleOperation {
	return v.value
}

func (v *NullableEquipmentExpanderModuleOperation) Set(val *EquipmentExpanderModuleOperation) {
	v.value = val
	v.isSet = true
}

func (v NullableEquipmentExpanderModuleOperation) IsSet() bool {
	return v.isSet
}

func (v *NullableEquipmentExpanderModuleOperation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEquipmentExpanderModuleOperation(val *EquipmentExpanderModuleOperation) *NullableEquipmentExpanderModuleOperation {
	return &NullableEquipmentExpanderModuleOperation{value: val, isSet: true}
}

func (v NullableEquipmentExpanderModuleOperation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEquipmentExpanderModuleOperation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
