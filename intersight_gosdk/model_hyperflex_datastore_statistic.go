/*
 * Cisco Intersight
 *
 * Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations. The Intersight OpenAPI document defines the complete set of properties that are returned in the HTTP response. From that perspective, a client can expect that no additional properties are returned, unless these properties are explicitly defined in the OpenAPI document. However, when a client uses an older version of the Intersight OpenAPI document, the server may send additional properties because the software is more recent than the client. In that case, the client may receive properties that it does not know about. Some generated SDKs perform a strict validation of the HTTP response body against the OpenAPI document. This document was created on 2021-07-21T16:37:30Z.
 *
 * API version: 1.0.9-4403
 * Contact: intersight@cisco.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package intersight

import (
	"encoding/json"
	"reflect"
	"strings"
)

// HyperflexDatastoreStatistic Datastore Statistic describing more detailed information about the Data Protection Peer.
type HyperflexDatastoreStatistic struct {
	MoBaseMo
	// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.
	ClassId string `json:"ClassId"`
	// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
	ObjectType string `json:"ObjectType"`
	// HyperFlex datastore accessibility summary. * `ACCESSIBLE` - The HyperFlex Accessibility Summary is Accessible. * `NOT_ACCESSIBLE` - The HyperFlex Accessibility Summary is Not Accessible. * `PARTIALLY_ACCESSIBLE` - The HyperFlex Accessibility Summary is Partially Accessible.
	AccessibilitySummary *string `json:"AccessibilitySummary,omitempty"`
	// Timestamp the datastore object was created.
	CreationTime *string `json:"CreationTime,omitempty"`
	// HyperFlex datastore status. * `NORMAL` - The HyperFlex datastore status is normal. * `ALERT` - The HyperFlex datastore status is alert. * `FAILED` - The HyperFlex datastore status is failed.
	DatastoreStatus *string                                      `json:"DatastoreStatus,omitempty"`
	Dsconfig        NullableHyperflexHxPlatformDatastoreConfigDt `json:"Dsconfig,omitempty"`
	// Free capacity of the datastore in bytes.
	FreeCapacityInBytes *int64                         `json:"FreeCapacityInBytes,omitempty"`
	HostMountStatus     []HyperflexHxHostMountStatusDt `json:"HostMountStatus,omitempty"`
	// Timestamp the datastore object was last accessed.
	LastAccessTime *string `json:"LastAccessTime,omitempty"`
	// Timestamp the datastore object was last modified.
	LastModifiedTime *string `json:"LastModifiedTime,omitempty"`
	// HyperFlex datastore mount summary. * `MOUNTED` - The HyperFlex mount summary is mounted. * `UNMOUNTED` - The HyperFlex mount summary is unmounted. * `MOUNT_FAILURE` - The HyperFlex mount summary is mount failure. * `UNMOUNT_FAILURE` - The HyperFlex mount summary is unmount failure.
	MountSummary *string `json:"MountSummary,omitempty"`
	// UUID of the parent datastore object.
	ParentUuid *string                   `json:"ParentUuid,omitempty"`
	Site       NullableHyperflexHxSiteDt `json:"Site,omitempty"`
	// Total capacity of the datastore object.
	TotalCapacityInBytes *int64 `json:"TotalCapacityInBytes,omitempty"`
	// Number of uncompressed used bytes in the datastore.
	UnCompressedUsedBytes *int64 `json:"UnCompressedUsedBytes,omitempty"`
	// Unshared used capacity of the datastore in bytes.
	UnsharedUsedBytes *int64 `json:"UnsharedUsedBytes,omitempty"`
	// UUID for the datastore object.
	Uuid                 *string                                  `json:"Uuid,omitempty"`
	DataProtectionPeer   *HyperflexDataProtectionPeerRelationship `json:"DataProtectionPeer,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _HyperflexDatastoreStatistic HyperflexDatastoreStatistic

// NewHyperflexDatastoreStatistic instantiates a new HyperflexDatastoreStatistic object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHyperflexDatastoreStatistic(classId string, objectType string) *HyperflexDatastoreStatistic {
	this := HyperflexDatastoreStatistic{}
	this.ClassId = classId
	this.ObjectType = objectType
	var accessibilitySummary string = "ACCESSIBLE"
	this.AccessibilitySummary = &accessibilitySummary
	var datastoreStatus string = "NORMAL"
	this.DatastoreStatus = &datastoreStatus
	var mountSummary string = "MOUNTED"
	this.MountSummary = &mountSummary
	return &this
}

// NewHyperflexDatastoreStatisticWithDefaults instantiates a new HyperflexDatastoreStatistic object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHyperflexDatastoreStatisticWithDefaults() *HyperflexDatastoreStatistic {
	this := HyperflexDatastoreStatistic{}
	var classId string = "hyperflex.DatastoreStatistic"
	this.ClassId = classId
	var objectType string = "hyperflex.DatastoreStatistic"
	this.ObjectType = objectType
	var accessibilitySummary string = "ACCESSIBLE"
	this.AccessibilitySummary = &accessibilitySummary
	var datastoreStatus string = "NORMAL"
	this.DatastoreStatus = &datastoreStatus
	var mountSummary string = "MOUNTED"
	this.MountSummary = &mountSummary
	return &this
}

// GetClassId returns the ClassId field value
func (o *HyperflexDatastoreStatistic) GetClassId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ClassId
}

// GetClassIdOk returns a tuple with the ClassId field value
// and a boolean to check if the value has been set.
func (o *HyperflexDatastoreStatistic) GetClassIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ClassId, true
}

// SetClassId sets field value
func (o *HyperflexDatastoreStatistic) SetClassId(v string) {
	o.ClassId = v
}

// GetObjectType returns the ObjectType field value
func (o *HyperflexDatastoreStatistic) GetObjectType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ObjectType
}

// GetObjectTypeOk returns a tuple with the ObjectType field value
// and a boolean to check if the value has been set.
func (o *HyperflexDatastoreStatistic) GetObjectTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ObjectType, true
}

// SetObjectType sets field value
func (o *HyperflexDatastoreStatistic) SetObjectType(v string) {
	o.ObjectType = v
}

// GetAccessibilitySummary returns the AccessibilitySummary field value if set, zero value otherwise.
func (o *HyperflexDatastoreStatistic) GetAccessibilitySummary() string {
	if o == nil || o.AccessibilitySummary == nil {
		var ret string
		return ret
	}
	return *o.AccessibilitySummary
}

// GetAccessibilitySummaryOk returns a tuple with the AccessibilitySummary field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HyperflexDatastoreStatistic) GetAccessibilitySummaryOk() (*string, bool) {
	if o == nil || o.AccessibilitySummary == nil {
		return nil, false
	}
	return o.AccessibilitySummary, true
}

// HasAccessibilitySummary returns a boolean if a field has been set.
func (o *HyperflexDatastoreStatistic) HasAccessibilitySummary() bool {
	if o != nil && o.AccessibilitySummary != nil {
		return true
	}

	return false
}

// SetAccessibilitySummary gets a reference to the given string and assigns it to the AccessibilitySummary field.
func (o *HyperflexDatastoreStatistic) SetAccessibilitySummary(v string) {
	o.AccessibilitySummary = &v
}

// GetCreationTime returns the CreationTime field value if set, zero value otherwise.
func (o *HyperflexDatastoreStatistic) GetCreationTime() string {
	if o == nil || o.CreationTime == nil {
		var ret string
		return ret
	}
	return *o.CreationTime
}

// GetCreationTimeOk returns a tuple with the CreationTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HyperflexDatastoreStatistic) GetCreationTimeOk() (*string, bool) {
	if o == nil || o.CreationTime == nil {
		return nil, false
	}
	return o.CreationTime, true
}

// HasCreationTime returns a boolean if a field has been set.
func (o *HyperflexDatastoreStatistic) HasCreationTime() bool {
	if o != nil && o.CreationTime != nil {
		return true
	}

	return false
}

// SetCreationTime gets a reference to the given string and assigns it to the CreationTime field.
func (o *HyperflexDatastoreStatistic) SetCreationTime(v string) {
	o.CreationTime = &v
}

// GetDatastoreStatus returns the DatastoreStatus field value if set, zero value otherwise.
func (o *HyperflexDatastoreStatistic) GetDatastoreStatus() string {
	if o == nil || o.DatastoreStatus == nil {
		var ret string
		return ret
	}
	return *o.DatastoreStatus
}

// GetDatastoreStatusOk returns a tuple with the DatastoreStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HyperflexDatastoreStatistic) GetDatastoreStatusOk() (*string, bool) {
	if o == nil || o.DatastoreStatus == nil {
		return nil, false
	}
	return o.DatastoreStatus, true
}

// HasDatastoreStatus returns a boolean if a field has been set.
func (o *HyperflexDatastoreStatistic) HasDatastoreStatus() bool {
	if o != nil && o.DatastoreStatus != nil {
		return true
	}

	return false
}

// SetDatastoreStatus gets a reference to the given string and assigns it to the DatastoreStatus field.
func (o *HyperflexDatastoreStatistic) SetDatastoreStatus(v string) {
	o.DatastoreStatus = &v
}

// GetDsconfig returns the Dsconfig field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HyperflexDatastoreStatistic) GetDsconfig() HyperflexHxPlatformDatastoreConfigDt {
	if o == nil || o.Dsconfig.Get() == nil {
		var ret HyperflexHxPlatformDatastoreConfigDt
		return ret
	}
	return *o.Dsconfig.Get()
}

// GetDsconfigOk returns a tuple with the Dsconfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HyperflexDatastoreStatistic) GetDsconfigOk() (*HyperflexHxPlatformDatastoreConfigDt, bool) {
	if o == nil {
		return nil, false
	}
	return o.Dsconfig.Get(), o.Dsconfig.IsSet()
}

// HasDsconfig returns a boolean if a field has been set.
func (o *HyperflexDatastoreStatistic) HasDsconfig() bool {
	if o != nil && o.Dsconfig.IsSet() {
		return true
	}

	return false
}

// SetDsconfig gets a reference to the given NullableHyperflexHxPlatformDatastoreConfigDt and assigns it to the Dsconfig field.
func (o *HyperflexDatastoreStatistic) SetDsconfig(v HyperflexHxPlatformDatastoreConfigDt) {
	o.Dsconfig.Set(&v)
}

// SetDsconfigNil sets the value for Dsconfig to be an explicit nil
func (o *HyperflexDatastoreStatistic) SetDsconfigNil() {
	o.Dsconfig.Set(nil)
}

// UnsetDsconfig ensures that no value is present for Dsconfig, not even an explicit nil
func (o *HyperflexDatastoreStatistic) UnsetDsconfig() {
	o.Dsconfig.Unset()
}

// GetFreeCapacityInBytes returns the FreeCapacityInBytes field value if set, zero value otherwise.
func (o *HyperflexDatastoreStatistic) GetFreeCapacityInBytes() int64 {
	if o == nil || o.FreeCapacityInBytes == nil {
		var ret int64
		return ret
	}
	return *o.FreeCapacityInBytes
}

// GetFreeCapacityInBytesOk returns a tuple with the FreeCapacityInBytes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HyperflexDatastoreStatistic) GetFreeCapacityInBytesOk() (*int64, bool) {
	if o == nil || o.FreeCapacityInBytes == nil {
		return nil, false
	}
	return o.FreeCapacityInBytes, true
}

// HasFreeCapacityInBytes returns a boolean if a field has been set.
func (o *HyperflexDatastoreStatistic) HasFreeCapacityInBytes() bool {
	if o != nil && o.FreeCapacityInBytes != nil {
		return true
	}

	return false
}

// SetFreeCapacityInBytes gets a reference to the given int64 and assigns it to the FreeCapacityInBytes field.
func (o *HyperflexDatastoreStatistic) SetFreeCapacityInBytes(v int64) {
	o.FreeCapacityInBytes = &v
}

// GetHostMountStatus returns the HostMountStatus field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HyperflexDatastoreStatistic) GetHostMountStatus() []HyperflexHxHostMountStatusDt {
	if o == nil {
		var ret []HyperflexHxHostMountStatusDt
		return ret
	}
	return o.HostMountStatus
}

// GetHostMountStatusOk returns a tuple with the HostMountStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HyperflexDatastoreStatistic) GetHostMountStatusOk() (*[]HyperflexHxHostMountStatusDt, bool) {
	if o == nil || o.HostMountStatus == nil {
		return nil, false
	}
	return &o.HostMountStatus, true
}

// HasHostMountStatus returns a boolean if a field has been set.
func (o *HyperflexDatastoreStatistic) HasHostMountStatus() bool {
	if o != nil && o.HostMountStatus != nil {
		return true
	}

	return false
}

// SetHostMountStatus gets a reference to the given []HyperflexHxHostMountStatusDt and assigns it to the HostMountStatus field.
func (o *HyperflexDatastoreStatistic) SetHostMountStatus(v []HyperflexHxHostMountStatusDt) {
	o.HostMountStatus = v
}

// GetLastAccessTime returns the LastAccessTime field value if set, zero value otherwise.
func (o *HyperflexDatastoreStatistic) GetLastAccessTime() string {
	if o == nil || o.LastAccessTime == nil {
		var ret string
		return ret
	}
	return *o.LastAccessTime
}

// GetLastAccessTimeOk returns a tuple with the LastAccessTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HyperflexDatastoreStatistic) GetLastAccessTimeOk() (*string, bool) {
	if o == nil || o.LastAccessTime == nil {
		return nil, false
	}
	return o.LastAccessTime, true
}

// HasLastAccessTime returns a boolean if a field has been set.
func (o *HyperflexDatastoreStatistic) HasLastAccessTime() bool {
	if o != nil && o.LastAccessTime != nil {
		return true
	}

	return false
}

// SetLastAccessTime gets a reference to the given string and assigns it to the LastAccessTime field.
func (o *HyperflexDatastoreStatistic) SetLastAccessTime(v string) {
	o.LastAccessTime = &v
}

// GetLastModifiedTime returns the LastModifiedTime field value if set, zero value otherwise.
func (o *HyperflexDatastoreStatistic) GetLastModifiedTime() string {
	if o == nil || o.LastModifiedTime == nil {
		var ret string
		return ret
	}
	return *o.LastModifiedTime
}

// GetLastModifiedTimeOk returns a tuple with the LastModifiedTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HyperflexDatastoreStatistic) GetLastModifiedTimeOk() (*string, bool) {
	if o == nil || o.LastModifiedTime == nil {
		return nil, false
	}
	return o.LastModifiedTime, true
}

// HasLastModifiedTime returns a boolean if a field has been set.
func (o *HyperflexDatastoreStatistic) HasLastModifiedTime() bool {
	if o != nil && o.LastModifiedTime != nil {
		return true
	}

	return false
}

// SetLastModifiedTime gets a reference to the given string and assigns it to the LastModifiedTime field.
func (o *HyperflexDatastoreStatistic) SetLastModifiedTime(v string) {
	o.LastModifiedTime = &v
}

// GetMountSummary returns the MountSummary field value if set, zero value otherwise.
func (o *HyperflexDatastoreStatistic) GetMountSummary() string {
	if o == nil || o.MountSummary == nil {
		var ret string
		return ret
	}
	return *o.MountSummary
}

// GetMountSummaryOk returns a tuple with the MountSummary field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HyperflexDatastoreStatistic) GetMountSummaryOk() (*string, bool) {
	if o == nil || o.MountSummary == nil {
		return nil, false
	}
	return o.MountSummary, true
}

// HasMountSummary returns a boolean if a field has been set.
func (o *HyperflexDatastoreStatistic) HasMountSummary() bool {
	if o != nil && o.MountSummary != nil {
		return true
	}

	return false
}

// SetMountSummary gets a reference to the given string and assigns it to the MountSummary field.
func (o *HyperflexDatastoreStatistic) SetMountSummary(v string) {
	o.MountSummary = &v
}

// GetParentUuid returns the ParentUuid field value if set, zero value otherwise.
func (o *HyperflexDatastoreStatistic) GetParentUuid() string {
	if o == nil || o.ParentUuid == nil {
		var ret string
		return ret
	}
	return *o.ParentUuid
}

// GetParentUuidOk returns a tuple with the ParentUuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HyperflexDatastoreStatistic) GetParentUuidOk() (*string, bool) {
	if o == nil || o.ParentUuid == nil {
		return nil, false
	}
	return o.ParentUuid, true
}

// HasParentUuid returns a boolean if a field has been set.
func (o *HyperflexDatastoreStatistic) HasParentUuid() bool {
	if o != nil && o.ParentUuid != nil {
		return true
	}

	return false
}

// SetParentUuid gets a reference to the given string and assigns it to the ParentUuid field.
func (o *HyperflexDatastoreStatistic) SetParentUuid(v string) {
	o.ParentUuid = &v
}

// GetSite returns the Site field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HyperflexDatastoreStatistic) GetSite() HyperflexHxSiteDt {
	if o == nil || o.Site.Get() == nil {
		var ret HyperflexHxSiteDt
		return ret
	}
	return *o.Site.Get()
}

// GetSiteOk returns a tuple with the Site field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HyperflexDatastoreStatistic) GetSiteOk() (*HyperflexHxSiteDt, bool) {
	if o == nil {
		return nil, false
	}
	return o.Site.Get(), o.Site.IsSet()
}

// HasSite returns a boolean if a field has been set.
func (o *HyperflexDatastoreStatistic) HasSite() bool {
	if o != nil && o.Site.IsSet() {
		return true
	}

	return false
}

// SetSite gets a reference to the given NullableHyperflexHxSiteDt and assigns it to the Site field.
func (o *HyperflexDatastoreStatistic) SetSite(v HyperflexHxSiteDt) {
	o.Site.Set(&v)
}

// SetSiteNil sets the value for Site to be an explicit nil
func (o *HyperflexDatastoreStatistic) SetSiteNil() {
	o.Site.Set(nil)
}

// UnsetSite ensures that no value is present for Site, not even an explicit nil
func (o *HyperflexDatastoreStatistic) UnsetSite() {
	o.Site.Unset()
}

// GetTotalCapacityInBytes returns the TotalCapacityInBytes field value if set, zero value otherwise.
func (o *HyperflexDatastoreStatistic) GetTotalCapacityInBytes() int64 {
	if o == nil || o.TotalCapacityInBytes == nil {
		var ret int64
		return ret
	}
	return *o.TotalCapacityInBytes
}

// GetTotalCapacityInBytesOk returns a tuple with the TotalCapacityInBytes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HyperflexDatastoreStatistic) GetTotalCapacityInBytesOk() (*int64, bool) {
	if o == nil || o.TotalCapacityInBytes == nil {
		return nil, false
	}
	return o.TotalCapacityInBytes, true
}

// HasTotalCapacityInBytes returns a boolean if a field has been set.
func (o *HyperflexDatastoreStatistic) HasTotalCapacityInBytes() bool {
	if o != nil && o.TotalCapacityInBytes != nil {
		return true
	}

	return false
}

// SetTotalCapacityInBytes gets a reference to the given int64 and assigns it to the TotalCapacityInBytes field.
func (o *HyperflexDatastoreStatistic) SetTotalCapacityInBytes(v int64) {
	o.TotalCapacityInBytes = &v
}

// GetUnCompressedUsedBytes returns the UnCompressedUsedBytes field value if set, zero value otherwise.
func (o *HyperflexDatastoreStatistic) GetUnCompressedUsedBytes() int64 {
	if o == nil || o.UnCompressedUsedBytes == nil {
		var ret int64
		return ret
	}
	return *o.UnCompressedUsedBytes
}

// GetUnCompressedUsedBytesOk returns a tuple with the UnCompressedUsedBytes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HyperflexDatastoreStatistic) GetUnCompressedUsedBytesOk() (*int64, bool) {
	if o == nil || o.UnCompressedUsedBytes == nil {
		return nil, false
	}
	return o.UnCompressedUsedBytes, true
}

// HasUnCompressedUsedBytes returns a boolean if a field has been set.
func (o *HyperflexDatastoreStatistic) HasUnCompressedUsedBytes() bool {
	if o != nil && o.UnCompressedUsedBytes != nil {
		return true
	}

	return false
}

// SetUnCompressedUsedBytes gets a reference to the given int64 and assigns it to the UnCompressedUsedBytes field.
func (o *HyperflexDatastoreStatistic) SetUnCompressedUsedBytes(v int64) {
	o.UnCompressedUsedBytes = &v
}

// GetUnsharedUsedBytes returns the UnsharedUsedBytes field value if set, zero value otherwise.
func (o *HyperflexDatastoreStatistic) GetUnsharedUsedBytes() int64 {
	if o == nil || o.UnsharedUsedBytes == nil {
		var ret int64
		return ret
	}
	return *o.UnsharedUsedBytes
}

// GetUnsharedUsedBytesOk returns a tuple with the UnsharedUsedBytes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HyperflexDatastoreStatistic) GetUnsharedUsedBytesOk() (*int64, bool) {
	if o == nil || o.UnsharedUsedBytes == nil {
		return nil, false
	}
	return o.UnsharedUsedBytes, true
}

// HasUnsharedUsedBytes returns a boolean if a field has been set.
func (o *HyperflexDatastoreStatistic) HasUnsharedUsedBytes() bool {
	if o != nil && o.UnsharedUsedBytes != nil {
		return true
	}

	return false
}

// SetUnsharedUsedBytes gets a reference to the given int64 and assigns it to the UnsharedUsedBytes field.
func (o *HyperflexDatastoreStatistic) SetUnsharedUsedBytes(v int64) {
	o.UnsharedUsedBytes = &v
}

// GetUuid returns the Uuid field value if set, zero value otherwise.
func (o *HyperflexDatastoreStatistic) GetUuid() string {
	if o == nil || o.Uuid == nil {
		var ret string
		return ret
	}
	return *o.Uuid
}

// GetUuidOk returns a tuple with the Uuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HyperflexDatastoreStatistic) GetUuidOk() (*string, bool) {
	if o == nil || o.Uuid == nil {
		return nil, false
	}
	return o.Uuid, true
}

// HasUuid returns a boolean if a field has been set.
func (o *HyperflexDatastoreStatistic) HasUuid() bool {
	if o != nil && o.Uuid != nil {
		return true
	}

	return false
}

// SetUuid gets a reference to the given string and assigns it to the Uuid field.
func (o *HyperflexDatastoreStatistic) SetUuid(v string) {
	o.Uuid = &v
}

// GetDataProtectionPeer returns the DataProtectionPeer field value if set, zero value otherwise.
func (o *HyperflexDatastoreStatistic) GetDataProtectionPeer() HyperflexDataProtectionPeerRelationship {
	if o == nil || o.DataProtectionPeer == nil {
		var ret HyperflexDataProtectionPeerRelationship
		return ret
	}
	return *o.DataProtectionPeer
}

// GetDataProtectionPeerOk returns a tuple with the DataProtectionPeer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HyperflexDatastoreStatistic) GetDataProtectionPeerOk() (*HyperflexDataProtectionPeerRelationship, bool) {
	if o == nil || o.DataProtectionPeer == nil {
		return nil, false
	}
	return o.DataProtectionPeer, true
}

// HasDataProtectionPeer returns a boolean if a field has been set.
func (o *HyperflexDatastoreStatistic) HasDataProtectionPeer() bool {
	if o != nil && o.DataProtectionPeer != nil {
		return true
	}

	return false
}

// SetDataProtectionPeer gets a reference to the given HyperflexDataProtectionPeerRelationship and assigns it to the DataProtectionPeer field.
func (o *HyperflexDatastoreStatistic) SetDataProtectionPeer(v HyperflexDataProtectionPeerRelationship) {
	o.DataProtectionPeer = &v
}

func (o HyperflexDatastoreStatistic) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	serializedMoBaseMo, errMoBaseMo := json.Marshal(o.MoBaseMo)
	if errMoBaseMo != nil {
		return []byte{}, errMoBaseMo
	}
	errMoBaseMo = json.Unmarshal([]byte(serializedMoBaseMo), &toSerialize)
	if errMoBaseMo != nil {
		return []byte{}, errMoBaseMo
	}
	if true {
		toSerialize["ClassId"] = o.ClassId
	}
	if true {
		toSerialize["ObjectType"] = o.ObjectType
	}
	if o.AccessibilitySummary != nil {
		toSerialize["AccessibilitySummary"] = o.AccessibilitySummary
	}
	if o.CreationTime != nil {
		toSerialize["CreationTime"] = o.CreationTime
	}
	if o.DatastoreStatus != nil {
		toSerialize["DatastoreStatus"] = o.DatastoreStatus
	}
	if o.Dsconfig.IsSet() {
		toSerialize["Dsconfig"] = o.Dsconfig.Get()
	}
	if o.FreeCapacityInBytes != nil {
		toSerialize["FreeCapacityInBytes"] = o.FreeCapacityInBytes
	}
	if o.HostMountStatus != nil {
		toSerialize["HostMountStatus"] = o.HostMountStatus
	}
	if o.LastAccessTime != nil {
		toSerialize["LastAccessTime"] = o.LastAccessTime
	}
	if o.LastModifiedTime != nil {
		toSerialize["LastModifiedTime"] = o.LastModifiedTime
	}
	if o.MountSummary != nil {
		toSerialize["MountSummary"] = o.MountSummary
	}
	if o.ParentUuid != nil {
		toSerialize["ParentUuid"] = o.ParentUuid
	}
	if o.Site.IsSet() {
		toSerialize["Site"] = o.Site.Get()
	}
	if o.TotalCapacityInBytes != nil {
		toSerialize["TotalCapacityInBytes"] = o.TotalCapacityInBytes
	}
	if o.UnCompressedUsedBytes != nil {
		toSerialize["UnCompressedUsedBytes"] = o.UnCompressedUsedBytes
	}
	if o.UnsharedUsedBytes != nil {
		toSerialize["UnsharedUsedBytes"] = o.UnsharedUsedBytes
	}
	if o.Uuid != nil {
		toSerialize["Uuid"] = o.Uuid
	}
	if o.DataProtectionPeer != nil {
		toSerialize["DataProtectionPeer"] = o.DataProtectionPeer
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *HyperflexDatastoreStatistic) UnmarshalJSON(bytes []byte) (err error) {
	type HyperflexDatastoreStatisticWithoutEmbeddedStruct struct {
		// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.
		ClassId string `json:"ClassId"`
		// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
		ObjectType string `json:"ObjectType"`
		// HyperFlex datastore accessibility summary. * `ACCESSIBLE` - The HyperFlex Accessibility Summary is Accessible. * `NOT_ACCESSIBLE` - The HyperFlex Accessibility Summary is Not Accessible. * `PARTIALLY_ACCESSIBLE` - The HyperFlex Accessibility Summary is Partially Accessible.
		AccessibilitySummary *string `json:"AccessibilitySummary,omitempty"`
		// Timestamp the datastore object was created.
		CreationTime *string `json:"CreationTime,omitempty"`
		// HyperFlex datastore status. * `NORMAL` - The HyperFlex datastore status is normal. * `ALERT` - The HyperFlex datastore status is alert. * `FAILED` - The HyperFlex datastore status is failed.
		DatastoreStatus *string                                      `json:"DatastoreStatus,omitempty"`
		Dsconfig        NullableHyperflexHxPlatformDatastoreConfigDt `json:"Dsconfig,omitempty"`
		// Free capacity of the datastore in bytes.
		FreeCapacityInBytes *int64                         `json:"FreeCapacityInBytes,omitempty"`
		HostMountStatus     []HyperflexHxHostMountStatusDt `json:"HostMountStatus,omitempty"`
		// Timestamp the datastore object was last accessed.
		LastAccessTime *string `json:"LastAccessTime,omitempty"`
		// Timestamp the datastore object was last modified.
		LastModifiedTime *string `json:"LastModifiedTime,omitempty"`
		// HyperFlex datastore mount summary. * `MOUNTED` - The HyperFlex mount summary is mounted. * `UNMOUNTED` - The HyperFlex mount summary is unmounted. * `MOUNT_FAILURE` - The HyperFlex mount summary is mount failure. * `UNMOUNT_FAILURE` - The HyperFlex mount summary is unmount failure.
		MountSummary *string `json:"MountSummary,omitempty"`
		// UUID of the parent datastore object.
		ParentUuid *string                   `json:"ParentUuid,omitempty"`
		Site       NullableHyperflexHxSiteDt `json:"Site,omitempty"`
		// Total capacity of the datastore object.
		TotalCapacityInBytes *int64 `json:"TotalCapacityInBytes,omitempty"`
		// Number of uncompressed used bytes in the datastore.
		UnCompressedUsedBytes *int64 `json:"UnCompressedUsedBytes,omitempty"`
		// Unshared used capacity of the datastore in bytes.
		UnsharedUsedBytes *int64 `json:"UnsharedUsedBytes,omitempty"`
		// UUID for the datastore object.
		Uuid               *string                                  `json:"Uuid,omitempty"`
		DataProtectionPeer *HyperflexDataProtectionPeerRelationship `json:"DataProtectionPeer,omitempty"`
	}

	varHyperflexDatastoreStatisticWithoutEmbeddedStruct := HyperflexDatastoreStatisticWithoutEmbeddedStruct{}

	err = json.Unmarshal(bytes, &varHyperflexDatastoreStatisticWithoutEmbeddedStruct)
	if err == nil {
		varHyperflexDatastoreStatistic := _HyperflexDatastoreStatistic{}
		varHyperflexDatastoreStatistic.ClassId = varHyperflexDatastoreStatisticWithoutEmbeddedStruct.ClassId
		varHyperflexDatastoreStatistic.ObjectType = varHyperflexDatastoreStatisticWithoutEmbeddedStruct.ObjectType
		varHyperflexDatastoreStatistic.AccessibilitySummary = varHyperflexDatastoreStatisticWithoutEmbeddedStruct.AccessibilitySummary
		varHyperflexDatastoreStatistic.CreationTime = varHyperflexDatastoreStatisticWithoutEmbeddedStruct.CreationTime
		varHyperflexDatastoreStatistic.DatastoreStatus = varHyperflexDatastoreStatisticWithoutEmbeddedStruct.DatastoreStatus
		varHyperflexDatastoreStatistic.Dsconfig = varHyperflexDatastoreStatisticWithoutEmbeddedStruct.Dsconfig
		varHyperflexDatastoreStatistic.FreeCapacityInBytes = varHyperflexDatastoreStatisticWithoutEmbeddedStruct.FreeCapacityInBytes
		varHyperflexDatastoreStatistic.HostMountStatus = varHyperflexDatastoreStatisticWithoutEmbeddedStruct.HostMountStatus
		varHyperflexDatastoreStatistic.LastAccessTime = varHyperflexDatastoreStatisticWithoutEmbeddedStruct.LastAccessTime
		varHyperflexDatastoreStatistic.LastModifiedTime = varHyperflexDatastoreStatisticWithoutEmbeddedStruct.LastModifiedTime
		varHyperflexDatastoreStatistic.MountSummary = varHyperflexDatastoreStatisticWithoutEmbeddedStruct.MountSummary
		varHyperflexDatastoreStatistic.ParentUuid = varHyperflexDatastoreStatisticWithoutEmbeddedStruct.ParentUuid
		varHyperflexDatastoreStatistic.Site = varHyperflexDatastoreStatisticWithoutEmbeddedStruct.Site
		varHyperflexDatastoreStatistic.TotalCapacityInBytes = varHyperflexDatastoreStatisticWithoutEmbeddedStruct.TotalCapacityInBytes
		varHyperflexDatastoreStatistic.UnCompressedUsedBytes = varHyperflexDatastoreStatisticWithoutEmbeddedStruct.UnCompressedUsedBytes
		varHyperflexDatastoreStatistic.UnsharedUsedBytes = varHyperflexDatastoreStatisticWithoutEmbeddedStruct.UnsharedUsedBytes
		varHyperflexDatastoreStatistic.Uuid = varHyperflexDatastoreStatisticWithoutEmbeddedStruct.Uuid
		varHyperflexDatastoreStatistic.DataProtectionPeer = varHyperflexDatastoreStatisticWithoutEmbeddedStruct.DataProtectionPeer
		*o = HyperflexDatastoreStatistic(varHyperflexDatastoreStatistic)
	} else {
		return err
	}

	varHyperflexDatastoreStatistic := _HyperflexDatastoreStatistic{}

	err = json.Unmarshal(bytes, &varHyperflexDatastoreStatistic)
	if err == nil {
		o.MoBaseMo = varHyperflexDatastoreStatistic.MoBaseMo
	} else {
		return err
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "ClassId")
		delete(additionalProperties, "ObjectType")
		delete(additionalProperties, "AccessibilitySummary")
		delete(additionalProperties, "CreationTime")
		delete(additionalProperties, "DatastoreStatus")
		delete(additionalProperties, "Dsconfig")
		delete(additionalProperties, "FreeCapacityInBytes")
		delete(additionalProperties, "HostMountStatus")
		delete(additionalProperties, "LastAccessTime")
		delete(additionalProperties, "LastModifiedTime")
		delete(additionalProperties, "MountSummary")
		delete(additionalProperties, "ParentUuid")
		delete(additionalProperties, "Site")
		delete(additionalProperties, "TotalCapacityInBytes")
		delete(additionalProperties, "UnCompressedUsedBytes")
		delete(additionalProperties, "UnsharedUsedBytes")
		delete(additionalProperties, "Uuid")
		delete(additionalProperties, "DataProtectionPeer")

		// remove fields from embedded structs
		reflectMoBaseMo := reflect.ValueOf(o.MoBaseMo)
		for i := 0; i < reflectMoBaseMo.Type().NumField(); i++ {
			t := reflectMoBaseMo.Type().Field(i)

			if jsonTag := t.Tag.Get("json"); jsonTag != "" {
				fieldName := ""
				if commaIdx := strings.Index(jsonTag, ","); commaIdx > 0 {
					fieldName = jsonTag[:commaIdx]
				} else {
					fieldName = jsonTag
				}
				if fieldName != "AdditionalProperties" {
					delete(additionalProperties, fieldName)
				}
			}
		}

		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableHyperflexDatastoreStatistic struct {
	value *HyperflexDatastoreStatistic
	isSet bool
}

func (v NullableHyperflexDatastoreStatistic) Get() *HyperflexDatastoreStatistic {
	return v.value
}

func (v *NullableHyperflexDatastoreStatistic) Set(val *HyperflexDatastoreStatistic) {
	v.value = val
	v.isSet = true
}

func (v NullableHyperflexDatastoreStatistic) IsSet() bool {
	return v.isSet
}

func (v *NullableHyperflexDatastoreStatistic) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHyperflexDatastoreStatistic(val *HyperflexDatastoreStatistic) *NullableHyperflexDatastoreStatistic {
	return &NullableHyperflexDatastoreStatistic{value: val, isSet: true}
}

func (v NullableHyperflexDatastoreStatistic) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHyperflexDatastoreStatistic) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
