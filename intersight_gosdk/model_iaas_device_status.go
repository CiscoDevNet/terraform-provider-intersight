/*
Cisco Intersight

Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations. The Intersight OpenAPI document defines the complete set of properties that are returned in the HTTP response. From that perspective, a client can expect that no additional properties are returned, unless these properties are explicitly defined in the OpenAPI document. However, when a client uses an older version of the Intersight OpenAPI document, the server may send additional properties because the software is more recent than the client. In that case, the client may receive properties that it does not know about. Some generated SDKs perform a strict validation of the HTTP response body against the OpenAPI document.

API version: 1.0.11-2024100405
Contact: intersight@cisco.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package intersight

import (
	"encoding/json"
	"fmt"
	"reflect"
	"strings"
)

// checks if the IaasDeviceStatus type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &IaasDeviceStatus{}

// IaasDeviceStatus List of infra accounts managed by UCSD.
type IaasDeviceStatus struct {
	MoBaseMo
	// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.
	ClassId string `json:"ClassId"`
	// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
	ObjectType string `json:"ObjectType"`
	// The UCSD infra account name. Account Name is created when UCSD admin adds any new infra account (Physical/Virtual/Compute/Network) to be managed by UCSD.
	AccountName *string `json:"AccountName,omitempty"`
	// The UCSD Infra Account type.
	AccountType *string `json:"AccountType,omitempty"`
	// The UCSD Infra Account category.
	Category *string `json:"Category,omitempty"`
	// Describes if the device is claimed in Intersight or not. * `Unknown` - If UCS Director managed account claim status information is unknown. * `Yes` - If UCS Director managed account is claimed in Intersight. * `No` - If UCS Director managed account is not claimed in Intersight. * `Not Applicable` - If UCS Director managed account is not capable of providing claim status information.
	ClaimStatus *string `json:"ClaimStatus,omitempty"`
	// Describes about the connection status between the UCSD and the actual end device.
	ConnectionStatus *string `json:"ConnectionStatus,omitempty"`
	// Describes about the device model.
	DeviceModel *string `json:"DeviceModel,omitempty"`
	// Describes about the device vendor/manufacturer of the device.
	DeviceVendor *string `json:"DeviceVendor,omitempty"`
	// Describes about the current firmware version running on the device.
	DeviceVersion *string `json:"DeviceVersion,omitempty"`
	// The IPAddress of the device.
	IpAddress *string `json:"IpAddress,omitempty"`
	// Describes about the pod to which this device belongs to in UCSD.
	Pod *string `json:"Pod,omitempty"`
	// Describes about the podType of Pod to which this device belongs to in UCSD.
	PodType              *string                          `json:"PodType,omitempty"`
	Guid                 NullableIaasUcsdInfoRelationship `json:"Guid,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _IaasDeviceStatus IaasDeviceStatus

// NewIaasDeviceStatus instantiates a new IaasDeviceStatus object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIaasDeviceStatus(classId string, objectType string) *IaasDeviceStatus {
	this := IaasDeviceStatus{}
	this.ClassId = classId
	this.ObjectType = objectType
	return &this
}

// NewIaasDeviceStatusWithDefaults instantiates a new IaasDeviceStatus object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIaasDeviceStatusWithDefaults() *IaasDeviceStatus {
	this := IaasDeviceStatus{}
	var classId string = "iaas.DeviceStatus"
	this.ClassId = classId
	var objectType string = "iaas.DeviceStatus"
	this.ObjectType = objectType
	return &this
}

// GetClassId returns the ClassId field value
func (o *IaasDeviceStatus) GetClassId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ClassId
}

// GetClassIdOk returns a tuple with the ClassId field value
// and a boolean to check if the value has been set.
func (o *IaasDeviceStatus) GetClassIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ClassId, true
}

// SetClassId sets field value
func (o *IaasDeviceStatus) SetClassId(v string) {
	o.ClassId = v
}

// GetDefaultClassId returns the default value "iaas.DeviceStatus" of the ClassId field.
func (o *IaasDeviceStatus) GetDefaultClassId() interface{} {
	return "iaas.DeviceStatus"
}

// GetObjectType returns the ObjectType field value
func (o *IaasDeviceStatus) GetObjectType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ObjectType
}

// GetObjectTypeOk returns a tuple with the ObjectType field value
// and a boolean to check if the value has been set.
func (o *IaasDeviceStatus) GetObjectTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ObjectType, true
}

// SetObjectType sets field value
func (o *IaasDeviceStatus) SetObjectType(v string) {
	o.ObjectType = v
}

// GetDefaultObjectType returns the default value "iaas.DeviceStatus" of the ObjectType field.
func (o *IaasDeviceStatus) GetDefaultObjectType() interface{} {
	return "iaas.DeviceStatus"
}

// GetAccountName returns the AccountName field value if set, zero value otherwise.
func (o *IaasDeviceStatus) GetAccountName() string {
	if o == nil || IsNil(o.AccountName) {
		var ret string
		return ret
	}
	return *o.AccountName
}

// GetAccountNameOk returns a tuple with the AccountName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IaasDeviceStatus) GetAccountNameOk() (*string, bool) {
	if o == nil || IsNil(o.AccountName) {
		return nil, false
	}
	return o.AccountName, true
}

// HasAccountName returns a boolean if a field has been set.
func (o *IaasDeviceStatus) HasAccountName() bool {
	if o != nil && !IsNil(o.AccountName) {
		return true
	}

	return false
}

// SetAccountName gets a reference to the given string and assigns it to the AccountName field.
func (o *IaasDeviceStatus) SetAccountName(v string) {
	o.AccountName = &v
}

// GetAccountType returns the AccountType field value if set, zero value otherwise.
func (o *IaasDeviceStatus) GetAccountType() string {
	if o == nil || IsNil(o.AccountType) {
		var ret string
		return ret
	}
	return *o.AccountType
}

// GetAccountTypeOk returns a tuple with the AccountType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IaasDeviceStatus) GetAccountTypeOk() (*string, bool) {
	if o == nil || IsNil(o.AccountType) {
		return nil, false
	}
	return o.AccountType, true
}

// HasAccountType returns a boolean if a field has been set.
func (o *IaasDeviceStatus) HasAccountType() bool {
	if o != nil && !IsNil(o.AccountType) {
		return true
	}

	return false
}

// SetAccountType gets a reference to the given string and assigns it to the AccountType field.
func (o *IaasDeviceStatus) SetAccountType(v string) {
	o.AccountType = &v
}

// GetCategory returns the Category field value if set, zero value otherwise.
func (o *IaasDeviceStatus) GetCategory() string {
	if o == nil || IsNil(o.Category) {
		var ret string
		return ret
	}
	return *o.Category
}

// GetCategoryOk returns a tuple with the Category field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IaasDeviceStatus) GetCategoryOk() (*string, bool) {
	if o == nil || IsNil(o.Category) {
		return nil, false
	}
	return o.Category, true
}

// HasCategory returns a boolean if a field has been set.
func (o *IaasDeviceStatus) HasCategory() bool {
	if o != nil && !IsNil(o.Category) {
		return true
	}

	return false
}

// SetCategory gets a reference to the given string and assigns it to the Category field.
func (o *IaasDeviceStatus) SetCategory(v string) {
	o.Category = &v
}

// GetClaimStatus returns the ClaimStatus field value if set, zero value otherwise.
func (o *IaasDeviceStatus) GetClaimStatus() string {
	if o == nil || IsNil(o.ClaimStatus) {
		var ret string
		return ret
	}
	return *o.ClaimStatus
}

// GetClaimStatusOk returns a tuple with the ClaimStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IaasDeviceStatus) GetClaimStatusOk() (*string, bool) {
	if o == nil || IsNil(o.ClaimStatus) {
		return nil, false
	}
	return o.ClaimStatus, true
}

// HasClaimStatus returns a boolean if a field has been set.
func (o *IaasDeviceStatus) HasClaimStatus() bool {
	if o != nil && !IsNil(o.ClaimStatus) {
		return true
	}

	return false
}

// SetClaimStatus gets a reference to the given string and assigns it to the ClaimStatus field.
func (o *IaasDeviceStatus) SetClaimStatus(v string) {
	o.ClaimStatus = &v
}

// GetConnectionStatus returns the ConnectionStatus field value if set, zero value otherwise.
func (o *IaasDeviceStatus) GetConnectionStatus() string {
	if o == nil || IsNil(o.ConnectionStatus) {
		var ret string
		return ret
	}
	return *o.ConnectionStatus
}

// GetConnectionStatusOk returns a tuple with the ConnectionStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IaasDeviceStatus) GetConnectionStatusOk() (*string, bool) {
	if o == nil || IsNil(o.ConnectionStatus) {
		return nil, false
	}
	return o.ConnectionStatus, true
}

// HasConnectionStatus returns a boolean if a field has been set.
func (o *IaasDeviceStatus) HasConnectionStatus() bool {
	if o != nil && !IsNil(o.ConnectionStatus) {
		return true
	}

	return false
}

// SetConnectionStatus gets a reference to the given string and assigns it to the ConnectionStatus field.
func (o *IaasDeviceStatus) SetConnectionStatus(v string) {
	o.ConnectionStatus = &v
}

// GetDeviceModel returns the DeviceModel field value if set, zero value otherwise.
func (o *IaasDeviceStatus) GetDeviceModel() string {
	if o == nil || IsNil(o.DeviceModel) {
		var ret string
		return ret
	}
	return *o.DeviceModel
}

// GetDeviceModelOk returns a tuple with the DeviceModel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IaasDeviceStatus) GetDeviceModelOk() (*string, bool) {
	if o == nil || IsNil(o.DeviceModel) {
		return nil, false
	}
	return o.DeviceModel, true
}

// HasDeviceModel returns a boolean if a field has been set.
func (o *IaasDeviceStatus) HasDeviceModel() bool {
	if o != nil && !IsNil(o.DeviceModel) {
		return true
	}

	return false
}

// SetDeviceModel gets a reference to the given string and assigns it to the DeviceModel field.
func (o *IaasDeviceStatus) SetDeviceModel(v string) {
	o.DeviceModel = &v
}

// GetDeviceVendor returns the DeviceVendor field value if set, zero value otherwise.
func (o *IaasDeviceStatus) GetDeviceVendor() string {
	if o == nil || IsNil(o.DeviceVendor) {
		var ret string
		return ret
	}
	return *o.DeviceVendor
}

// GetDeviceVendorOk returns a tuple with the DeviceVendor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IaasDeviceStatus) GetDeviceVendorOk() (*string, bool) {
	if o == nil || IsNil(o.DeviceVendor) {
		return nil, false
	}
	return o.DeviceVendor, true
}

// HasDeviceVendor returns a boolean if a field has been set.
func (o *IaasDeviceStatus) HasDeviceVendor() bool {
	if o != nil && !IsNil(o.DeviceVendor) {
		return true
	}

	return false
}

// SetDeviceVendor gets a reference to the given string and assigns it to the DeviceVendor field.
func (o *IaasDeviceStatus) SetDeviceVendor(v string) {
	o.DeviceVendor = &v
}

// GetDeviceVersion returns the DeviceVersion field value if set, zero value otherwise.
func (o *IaasDeviceStatus) GetDeviceVersion() string {
	if o == nil || IsNil(o.DeviceVersion) {
		var ret string
		return ret
	}
	return *o.DeviceVersion
}

// GetDeviceVersionOk returns a tuple with the DeviceVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IaasDeviceStatus) GetDeviceVersionOk() (*string, bool) {
	if o == nil || IsNil(o.DeviceVersion) {
		return nil, false
	}
	return o.DeviceVersion, true
}

// HasDeviceVersion returns a boolean if a field has been set.
func (o *IaasDeviceStatus) HasDeviceVersion() bool {
	if o != nil && !IsNil(o.DeviceVersion) {
		return true
	}

	return false
}

// SetDeviceVersion gets a reference to the given string and assigns it to the DeviceVersion field.
func (o *IaasDeviceStatus) SetDeviceVersion(v string) {
	o.DeviceVersion = &v
}

// GetIpAddress returns the IpAddress field value if set, zero value otherwise.
func (o *IaasDeviceStatus) GetIpAddress() string {
	if o == nil || IsNil(o.IpAddress) {
		var ret string
		return ret
	}
	return *o.IpAddress
}

// GetIpAddressOk returns a tuple with the IpAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IaasDeviceStatus) GetIpAddressOk() (*string, bool) {
	if o == nil || IsNil(o.IpAddress) {
		return nil, false
	}
	return o.IpAddress, true
}

// HasIpAddress returns a boolean if a field has been set.
func (o *IaasDeviceStatus) HasIpAddress() bool {
	if o != nil && !IsNil(o.IpAddress) {
		return true
	}

	return false
}

// SetIpAddress gets a reference to the given string and assigns it to the IpAddress field.
func (o *IaasDeviceStatus) SetIpAddress(v string) {
	o.IpAddress = &v
}

// GetPod returns the Pod field value if set, zero value otherwise.
func (o *IaasDeviceStatus) GetPod() string {
	if o == nil || IsNil(o.Pod) {
		var ret string
		return ret
	}
	return *o.Pod
}

// GetPodOk returns a tuple with the Pod field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IaasDeviceStatus) GetPodOk() (*string, bool) {
	if o == nil || IsNil(o.Pod) {
		return nil, false
	}
	return o.Pod, true
}

// HasPod returns a boolean if a field has been set.
func (o *IaasDeviceStatus) HasPod() bool {
	if o != nil && !IsNil(o.Pod) {
		return true
	}

	return false
}

// SetPod gets a reference to the given string and assigns it to the Pod field.
func (o *IaasDeviceStatus) SetPod(v string) {
	o.Pod = &v
}

// GetPodType returns the PodType field value if set, zero value otherwise.
func (o *IaasDeviceStatus) GetPodType() string {
	if o == nil || IsNil(o.PodType) {
		var ret string
		return ret
	}
	return *o.PodType
}

// GetPodTypeOk returns a tuple with the PodType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IaasDeviceStatus) GetPodTypeOk() (*string, bool) {
	if o == nil || IsNil(o.PodType) {
		return nil, false
	}
	return o.PodType, true
}

// HasPodType returns a boolean if a field has been set.
func (o *IaasDeviceStatus) HasPodType() bool {
	if o != nil && !IsNil(o.PodType) {
		return true
	}

	return false
}

// SetPodType gets a reference to the given string and assigns it to the PodType field.
func (o *IaasDeviceStatus) SetPodType(v string) {
	o.PodType = &v
}

// GetGuid returns the Guid field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IaasDeviceStatus) GetGuid() IaasUcsdInfoRelationship {
	if o == nil || IsNil(o.Guid.Get()) {
		var ret IaasUcsdInfoRelationship
		return ret
	}
	return *o.Guid.Get()
}

// GetGuidOk returns a tuple with the Guid field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IaasDeviceStatus) GetGuidOk() (*IaasUcsdInfoRelationship, bool) {
	if o == nil {
		return nil, false
	}
	return o.Guid.Get(), o.Guid.IsSet()
}

// HasGuid returns a boolean if a field has been set.
func (o *IaasDeviceStatus) HasGuid() bool {
	if o != nil && o.Guid.IsSet() {
		return true
	}

	return false
}

// SetGuid gets a reference to the given NullableIaasUcsdInfoRelationship and assigns it to the Guid field.
func (o *IaasDeviceStatus) SetGuid(v IaasUcsdInfoRelationship) {
	o.Guid.Set(&v)
}

// SetGuidNil sets the value for Guid to be an explicit nil
func (o *IaasDeviceStatus) SetGuidNil() {
	o.Guid.Set(nil)
}

// UnsetGuid ensures that no value is present for Guid, not even an explicit nil
func (o *IaasDeviceStatus) UnsetGuid() {
	o.Guid.Unset()
}

func (o IaasDeviceStatus) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IaasDeviceStatus) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	serializedMoBaseMo, errMoBaseMo := json.Marshal(o.MoBaseMo)
	if errMoBaseMo != nil {
		return map[string]interface{}{}, errMoBaseMo
	}
	errMoBaseMo = json.Unmarshal([]byte(serializedMoBaseMo), &toSerialize)
	if errMoBaseMo != nil {
		return map[string]interface{}{}, errMoBaseMo
	}
	if _, exists := toSerialize["ClassId"]; !exists {
		toSerialize["ClassId"] = o.GetDefaultClassId()
	}
	toSerialize["ClassId"] = o.ClassId
	if _, exists := toSerialize["ObjectType"]; !exists {
		toSerialize["ObjectType"] = o.GetDefaultObjectType()
	}
	toSerialize["ObjectType"] = o.ObjectType
	if !IsNil(o.AccountName) {
		toSerialize["AccountName"] = o.AccountName
	}
	if !IsNil(o.AccountType) {
		toSerialize["AccountType"] = o.AccountType
	}
	if !IsNil(o.Category) {
		toSerialize["Category"] = o.Category
	}
	if !IsNil(o.ClaimStatus) {
		toSerialize["ClaimStatus"] = o.ClaimStatus
	}
	if !IsNil(o.ConnectionStatus) {
		toSerialize["ConnectionStatus"] = o.ConnectionStatus
	}
	if !IsNil(o.DeviceModel) {
		toSerialize["DeviceModel"] = o.DeviceModel
	}
	if !IsNil(o.DeviceVendor) {
		toSerialize["DeviceVendor"] = o.DeviceVendor
	}
	if !IsNil(o.DeviceVersion) {
		toSerialize["DeviceVersion"] = o.DeviceVersion
	}
	if !IsNil(o.IpAddress) {
		toSerialize["IpAddress"] = o.IpAddress
	}
	if !IsNil(o.Pod) {
		toSerialize["Pod"] = o.Pod
	}
	if !IsNil(o.PodType) {
		toSerialize["PodType"] = o.PodType
	}
	if o.Guid.IsSet() {
		toSerialize["Guid"] = o.Guid.Get()
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *IaasDeviceStatus) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"ClassId",
		"ObjectType",
	}

	// defaultValueFuncMap captures the default values for required properties.
	// These values are used when required properties are missing from the payload.
	defaultValueFuncMap := map[string]func() interface{}{
		"ClassId":    o.GetDefaultClassId,
		"ObjectType": o.GetDefaultObjectType,
	}
	var defaultValueApplied bool
	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			if _, ok := defaultValueFuncMap[requiredProperty]; ok {
				allProperties[requiredProperty] = defaultValueFuncMap[requiredProperty]()
				defaultValueApplied = true
			}
		}
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	if defaultValueApplied {
		data, err = json.Marshal(allProperties)
		if err != nil {
			return err
		}
	}
	type IaasDeviceStatusWithoutEmbeddedStruct struct {
		// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.
		ClassId string `json:"ClassId"`
		// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
		ObjectType string `json:"ObjectType"`
		// The UCSD infra account name. Account Name is created when UCSD admin adds any new infra account (Physical/Virtual/Compute/Network) to be managed by UCSD.
		AccountName *string `json:"AccountName,omitempty"`
		// The UCSD Infra Account type.
		AccountType *string `json:"AccountType,omitempty"`
		// The UCSD Infra Account category.
		Category *string `json:"Category,omitempty"`
		// Describes if the device is claimed in Intersight or not. * `Unknown` - If UCS Director managed account claim status information is unknown. * `Yes` - If UCS Director managed account is claimed in Intersight. * `No` - If UCS Director managed account is not claimed in Intersight. * `Not Applicable` - If UCS Director managed account is not capable of providing claim status information.
		ClaimStatus *string `json:"ClaimStatus,omitempty"`
		// Describes about the connection status between the UCSD and the actual end device.
		ConnectionStatus *string `json:"ConnectionStatus,omitempty"`
		// Describes about the device model.
		DeviceModel *string `json:"DeviceModel,omitempty"`
		// Describes about the device vendor/manufacturer of the device.
		DeviceVendor *string `json:"DeviceVendor,omitempty"`
		// Describes about the current firmware version running on the device.
		DeviceVersion *string `json:"DeviceVersion,omitempty"`
		// The IPAddress of the device.
		IpAddress *string `json:"IpAddress,omitempty"`
		// Describes about the pod to which this device belongs to in UCSD.
		Pod *string `json:"Pod,omitempty"`
		// Describes about the podType of Pod to which this device belongs to in UCSD.
		PodType *string                          `json:"PodType,omitempty"`
		Guid    NullableIaasUcsdInfoRelationship `json:"Guid,omitempty"`
	}

	varIaasDeviceStatusWithoutEmbeddedStruct := IaasDeviceStatusWithoutEmbeddedStruct{}

	err = json.Unmarshal(data, &varIaasDeviceStatusWithoutEmbeddedStruct)
	if err == nil {
		varIaasDeviceStatus := _IaasDeviceStatus{}
		varIaasDeviceStatus.ClassId = varIaasDeviceStatusWithoutEmbeddedStruct.ClassId
		varIaasDeviceStatus.ObjectType = varIaasDeviceStatusWithoutEmbeddedStruct.ObjectType
		varIaasDeviceStatus.AccountName = varIaasDeviceStatusWithoutEmbeddedStruct.AccountName
		varIaasDeviceStatus.AccountType = varIaasDeviceStatusWithoutEmbeddedStruct.AccountType
		varIaasDeviceStatus.Category = varIaasDeviceStatusWithoutEmbeddedStruct.Category
		varIaasDeviceStatus.ClaimStatus = varIaasDeviceStatusWithoutEmbeddedStruct.ClaimStatus
		varIaasDeviceStatus.ConnectionStatus = varIaasDeviceStatusWithoutEmbeddedStruct.ConnectionStatus
		varIaasDeviceStatus.DeviceModel = varIaasDeviceStatusWithoutEmbeddedStruct.DeviceModel
		varIaasDeviceStatus.DeviceVendor = varIaasDeviceStatusWithoutEmbeddedStruct.DeviceVendor
		varIaasDeviceStatus.DeviceVersion = varIaasDeviceStatusWithoutEmbeddedStruct.DeviceVersion
		varIaasDeviceStatus.IpAddress = varIaasDeviceStatusWithoutEmbeddedStruct.IpAddress
		varIaasDeviceStatus.Pod = varIaasDeviceStatusWithoutEmbeddedStruct.Pod
		varIaasDeviceStatus.PodType = varIaasDeviceStatusWithoutEmbeddedStruct.PodType
		varIaasDeviceStatus.Guid = varIaasDeviceStatusWithoutEmbeddedStruct.Guid
		*o = IaasDeviceStatus(varIaasDeviceStatus)
	} else {
		return err
	}

	varIaasDeviceStatus := _IaasDeviceStatus{}

	err = json.Unmarshal(data, &varIaasDeviceStatus)
	if err == nil {
		o.MoBaseMo = varIaasDeviceStatus.MoBaseMo
	} else {
		return err
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "ClassId")
		delete(additionalProperties, "ObjectType")
		delete(additionalProperties, "AccountName")
		delete(additionalProperties, "AccountType")
		delete(additionalProperties, "Category")
		delete(additionalProperties, "ClaimStatus")
		delete(additionalProperties, "ConnectionStatus")
		delete(additionalProperties, "DeviceModel")
		delete(additionalProperties, "DeviceVendor")
		delete(additionalProperties, "DeviceVersion")
		delete(additionalProperties, "IpAddress")
		delete(additionalProperties, "Pod")
		delete(additionalProperties, "PodType")
		delete(additionalProperties, "Guid")

		// remove fields from embedded structs
		reflectMoBaseMo := reflect.ValueOf(o.MoBaseMo)
		for i := 0; i < reflectMoBaseMo.Type().NumField(); i++ {
			t := reflectMoBaseMo.Type().Field(i)

			if jsonTag := t.Tag.Get("json"); jsonTag != "" {
				fieldName := ""
				if commaIdx := strings.Index(jsonTag, ","); commaIdx > 0 {
					fieldName = jsonTag[:commaIdx]
				} else {
					fieldName = jsonTag
				}
				if fieldName != "AdditionalProperties" {
					delete(additionalProperties, fieldName)
				}
			}
		}

		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableIaasDeviceStatus struct {
	value *IaasDeviceStatus
	isSet bool
}

func (v NullableIaasDeviceStatus) Get() *IaasDeviceStatus {
	return v.value
}

func (v *NullableIaasDeviceStatus) Set(val *IaasDeviceStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableIaasDeviceStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableIaasDeviceStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIaasDeviceStatus(val *IaasDeviceStatus) *NullableIaasDeviceStatus {
	return &NullableIaasDeviceStatus{value: val, isSet: true}
}

func (v NullableIaasDeviceStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIaasDeviceStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
