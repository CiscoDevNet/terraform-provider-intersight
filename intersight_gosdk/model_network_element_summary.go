/*
 * Cisco Intersight
 *
 * Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations. The Intersight OpenAPI document defines the complete set of properties that are returned in the HTTP response. From that perspective, a client can expect that no additional properties are returned, unless these properties are explicitly defined in the OpenAPI document. However, when a client uses an older version of the Intersight OpenAPI document, the server may send additional properties because the software is more recent than the client. In that case, the client may receive properties that it does not know about. Some generated SDKs perform a strict validation of the HTTP response body against the OpenAPI document. This document was created on 2021-07-21T16:37:30Z.
 *
 * API version: 1.0.9-4403
 * Contact: intersight@cisco.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package intersight

import (
	"encoding/json"
	"reflect"
	"strings"
)

// NetworkElementSummary View MO which aggregates information pertaining to a network element from mutiple MOs.
type NetworkElementSummary struct {
	ViewsView
	// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.
	ClassId string `json:"ClassId"`
	// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
	ObjectType string `json:"ObjectType"`
	// Administratively configured state of Fabric Evacuation feature, for this switch.
	AdminEvacState *string `json:"AdminEvacState,omitempty"`
	// The administrative state of the network Element inband management interface.
	AdminInbandInterfaceState *string                     `json:"AdminInbandInterfaceState,omitempty"`
	AlarmSummary              NullableComputeAlarmSummary `json:"AlarmSummary,omitempty"`
	// Available memory (un-used) on this switch platform.
	AvailableMemory *string `json:"AvailableMemory,omitempty"`
	// The database identifier of the registered device of an object.
	DeviceMoId *string `json:"DeviceMoId,omitempty"`
	// The Distinguished Name unambiguously identifies an object in the system.
	Dn *string `json:"Dn,omitempty"`
	// The user configured Ethernet operational mode for this switch (End-Host or Switching).
	EthernetMode *string `json:"EthernetMode,omitempty"`
	// The user configured Ethernet operational mode for this switch (End-Host or Switching). * `end-host` - In end-host mode, the fabric interconnects appear to the upstream devices as end hosts with multiple links.In this mode, the switch does not run Spanning Tree Protocol and avoids loops by following a set of rules for traffic forwarding.In case of ethernet switching mode - Ethernet end-host mode is also known as Ethernet host virtualizer. * `switch` - In switch mode, the switch runs Spanning Tree Protocol to avoid loops, and broadcast and multicast packets are handled in the traditional way.This is the traditional switch mode.
	EthernetSwitchingMode *string `json:"EthernetSwitchingMode,omitempty"`
	// The fault summary of the network Element out-of-band management interface.
	FaultSummary *int64 `json:"FaultSummary,omitempty"`
	// The user configured FC operational mode for this switch (End-Host or Switching).
	FcMode *string `json:"FcMode,omitempty"`
	// The user configured FC operational mode for this switch (End-Host or Switching). * `end-host` - In end-host mode, the fabric interconnects appear to the upstream devices as end hosts with multiple links.In this mode, the switch does not run Spanning Tree Protocol and avoids loops by following a set of rules for traffic forwarding.In case of ethernet switching mode - Ethernet end-host mode is also known as Ethernet host virtualizer. * `switch` - In switch mode, the switch runs Spanning Tree Protocol to avoid loops, and broadcast and multicast packets are handled in the traditional way.This is the traditional switch mode.
	FcSwitchingMode *string `json:"FcSwitchingMode,omitempty"`
	// Running firmware information.
	Firmware *string `json:"Firmware,omitempty"`
	// The IP address of the network Element inband management interface.
	InbandIpAddress *string `json:"InbandIpAddress,omitempty"`
	// The default gateway of the network Element inband management interface.
	InbandIpGateway *string `json:"InbandIpGateway,omitempty"`
	// The network mask of the network Element inband management interface.
	InbandIpMask *string `json:"InbandIpMask,omitempty"`
	// The VLAN ID of the network Element inband management interface.
	InbandVlan *int64 `json:"InbandVlan,omitempty"`
	// IP version 4 address is saved in this property.
	Ipv4Address *string `json:"Ipv4Address,omitempty"`
	// The management mode of the fabric interconnect. * `IntersightStandalone` - Intersight Standalone mode of operation. * `UCSM` - Unified Computing System Manager mode of operation. * `Intersight` - Intersight managed mode of operation.
	ManagementMode *string `json:"ManagementMode,omitempty"`
	// This field identifies the model of the given component.
	Model *string `json:"Model,omitempty"`
	// Name of the ElementSummary object is saved in this property.
	Name *string `json:"Name,omitempty"`
	// Total number of Ethernet ports.
	NumEtherPorts *int64 `json:"NumEtherPorts,omitempty"`
	// Total number of configured Ethernet ports.
	NumEtherPortsConfigured *int64 `json:"NumEtherPortsConfigured,omitempty"`
	// Total number of Ethernet ports which are UP.
	NumEtherPortsLinkUp *int64 `json:"NumEtherPortsLinkUp,omitempty"`
	// Total number of expansion modules.
	NumExpansionModules *int64 `json:"NumExpansionModules,omitempty"`
	// Total number of FC ports.
	NumFcPorts *int64 `json:"NumFcPorts,omitempty"`
	// Total number of configured FC ports.
	NumFcPortsConfigured *int64 `json:"NumFcPortsConfigured,omitempty"`
	// Total number of FC ports which are UP.
	NumFcPortsLinkUp *int64 `json:"NumFcPortsLinkUp,omitempty"`
	// Operational state of the Fabric Evacuation feature, for this switch.
	OperEvacState *string `json:"OperEvacState,omitempty"`
	// The switch's current overall operational/health state.
	Operability *string `json:"Operability,omitempty"`
	// The IP address of the network Element out-of-band management interface.
	OutOfBandIpAddress *string `json:"OutOfBandIpAddress,omitempty"`
	// The default gateway of the network Element out-of-band management interface.
	OutOfBandIpGateway *string `json:"OutOfBandIpGateway,omitempty"`
	// The network mask of the network Element out-of-band management interface.
	OutOfBandIpMask *string `json:"OutOfBandIpMask,omitempty"`
	// The IPv4 address of the network Element out-of-band management interface.
	OutOfBandIpv4Address *string `json:"OutOfBandIpv4Address,omitempty"`
	// The default IPv4 gateway of the network Element out-of-band management interface.
	OutOfBandIpv4Gateway *string `json:"OutOfBandIpv4Gateway,omitempty"`
	// The network mask of the network Element out-of-band management interface.
	OutOfBandIpv4Mask *string `json:"OutOfBandIpv4Mask,omitempty"`
	// The IPv6 address of the network Element out-of-band management interface.
	OutOfBandIpv6Address *string `json:"OutOfBandIpv6Address,omitempty"`
	// The default IPv6 gateway of the network Element out-of-band management interface.
	OutOfBandIpv6Gateway *string `json:"OutOfBandIpv6Gateway,omitempty"`
	// The network mask of the network Element out-of-band management interface.
	OutOfBandIpv6Prefix *string `json:"OutOfBandIpv6Prefix,omitempty"`
	// The MAC address of the network Element out-of-band management interface.
	OutOfBandMac *string `json:"OutOfBandMac,omitempty"`
	// This field identifies the presence (equipped) or absence of the given component.
	Presence *string `json:"Presence,omitempty"`
	// This field identifies the revision of the given component.
	Revision *string `json:"Revision,omitempty"`
	// The Relative Name uniquely identifies an object within a given context.
	Rn *string `json:"Rn,omitempty"`
	// This field identifies the serial of the given component.
	Serial *string `json:"Serial,omitempty"`
	// The source object type of this view MO.
	SourceObjectType *string `json:"SourceObjectType,omitempty"`
	// The Switch Id of the network Element.
	SwitchId *string `json:"SwitchId,omitempty"`
	// The Thermal status of the fabric interconnect. * `unknown` - The default state of the sensor (in case no data is received). * `ok` - State of the sensor indicating the sensor's temperature range is okay. * `upper-non-recoverable` - State of the sensor indicating that the temperature is extremely high above normal range. * `upper-critical` - State of the sensor indicating that the temperature is above normal range. * `upper-non-critical` - State of the sensor indicating that the temperature is a little above the normal range. * `lower-non-critical` - State of the sensor indicating that the temperature is a little below the normal range. * `lower-critical` - State of the sensor indicating that the temperature is below normal range. * `lower-non-recoverable` - State of the sensor indicating that the temperature is extremely below normal range.
	Thermal *string `json:"Thermal,omitempty"`
	// Total available memory on this switch platform.
	TotalMemory *int64 `json:"TotalMemory,omitempty"`
	// This field identifies the vendor of the given component.
	Vendor *string `json:"Vendor,omitempty"`
	// Version holds the firmware version related information.
	Version              *string                              `json:"Version,omitempty"`
	RegisteredDevice     *AssetDeviceRegistrationRelationship `json:"RegisteredDevice,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _NetworkElementSummary NetworkElementSummary

// NewNetworkElementSummary instantiates a new NetworkElementSummary object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNetworkElementSummary(classId string, objectType string) *NetworkElementSummary {
	this := NetworkElementSummary{}
	this.ClassId = classId
	this.ObjectType = objectType
	var ethernetSwitchingMode string = "end-host"
	this.EthernetSwitchingMode = &ethernetSwitchingMode
	var fcSwitchingMode string = "end-host"
	this.FcSwitchingMode = &fcSwitchingMode
	var managementMode string = "IntersightStandalone"
	this.ManagementMode = &managementMode
	var thermal string = "unknown"
	this.Thermal = &thermal
	return &this
}

// NewNetworkElementSummaryWithDefaults instantiates a new NetworkElementSummary object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNetworkElementSummaryWithDefaults() *NetworkElementSummary {
	this := NetworkElementSummary{}
	var classId string = "network.ElementSummary"
	this.ClassId = classId
	var objectType string = "network.ElementSummary"
	this.ObjectType = objectType
	var ethernetSwitchingMode string = "end-host"
	this.EthernetSwitchingMode = &ethernetSwitchingMode
	var fcSwitchingMode string = "end-host"
	this.FcSwitchingMode = &fcSwitchingMode
	var managementMode string = "IntersightStandalone"
	this.ManagementMode = &managementMode
	var thermal string = "unknown"
	this.Thermal = &thermal
	return &this
}

// GetClassId returns the ClassId field value
func (o *NetworkElementSummary) GetClassId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ClassId
}

// GetClassIdOk returns a tuple with the ClassId field value
// and a boolean to check if the value has been set.
func (o *NetworkElementSummary) GetClassIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ClassId, true
}

// SetClassId sets field value
func (o *NetworkElementSummary) SetClassId(v string) {
	o.ClassId = v
}

// GetObjectType returns the ObjectType field value
func (o *NetworkElementSummary) GetObjectType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ObjectType
}

// GetObjectTypeOk returns a tuple with the ObjectType field value
// and a boolean to check if the value has been set.
func (o *NetworkElementSummary) GetObjectTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ObjectType, true
}

// SetObjectType sets field value
func (o *NetworkElementSummary) SetObjectType(v string) {
	o.ObjectType = v
}

// GetAdminEvacState returns the AdminEvacState field value if set, zero value otherwise.
func (o *NetworkElementSummary) GetAdminEvacState() string {
	if o == nil || o.AdminEvacState == nil {
		var ret string
		return ret
	}
	return *o.AdminEvacState
}

// GetAdminEvacStateOk returns a tuple with the AdminEvacState field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkElementSummary) GetAdminEvacStateOk() (*string, bool) {
	if o == nil || o.AdminEvacState == nil {
		return nil, false
	}
	return o.AdminEvacState, true
}

// HasAdminEvacState returns a boolean if a field has been set.
func (o *NetworkElementSummary) HasAdminEvacState() bool {
	if o != nil && o.AdminEvacState != nil {
		return true
	}

	return false
}

// SetAdminEvacState gets a reference to the given string and assigns it to the AdminEvacState field.
func (o *NetworkElementSummary) SetAdminEvacState(v string) {
	o.AdminEvacState = &v
}

// GetAdminInbandInterfaceState returns the AdminInbandInterfaceState field value if set, zero value otherwise.
func (o *NetworkElementSummary) GetAdminInbandInterfaceState() string {
	if o == nil || o.AdminInbandInterfaceState == nil {
		var ret string
		return ret
	}
	return *o.AdminInbandInterfaceState
}

// GetAdminInbandInterfaceStateOk returns a tuple with the AdminInbandInterfaceState field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkElementSummary) GetAdminInbandInterfaceStateOk() (*string, bool) {
	if o == nil || o.AdminInbandInterfaceState == nil {
		return nil, false
	}
	return o.AdminInbandInterfaceState, true
}

// HasAdminInbandInterfaceState returns a boolean if a field has been set.
func (o *NetworkElementSummary) HasAdminInbandInterfaceState() bool {
	if o != nil && o.AdminInbandInterfaceState != nil {
		return true
	}

	return false
}

// SetAdminInbandInterfaceState gets a reference to the given string and assigns it to the AdminInbandInterfaceState field.
func (o *NetworkElementSummary) SetAdminInbandInterfaceState(v string) {
	o.AdminInbandInterfaceState = &v
}

// GetAlarmSummary returns the AlarmSummary field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NetworkElementSummary) GetAlarmSummary() ComputeAlarmSummary {
	if o == nil || o.AlarmSummary.Get() == nil {
		var ret ComputeAlarmSummary
		return ret
	}
	return *o.AlarmSummary.Get()
}

// GetAlarmSummaryOk returns a tuple with the AlarmSummary field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NetworkElementSummary) GetAlarmSummaryOk() (*ComputeAlarmSummary, bool) {
	if o == nil {
		return nil, false
	}
	return o.AlarmSummary.Get(), o.AlarmSummary.IsSet()
}

// HasAlarmSummary returns a boolean if a field has been set.
func (o *NetworkElementSummary) HasAlarmSummary() bool {
	if o != nil && o.AlarmSummary.IsSet() {
		return true
	}

	return false
}

// SetAlarmSummary gets a reference to the given NullableComputeAlarmSummary and assigns it to the AlarmSummary field.
func (o *NetworkElementSummary) SetAlarmSummary(v ComputeAlarmSummary) {
	o.AlarmSummary.Set(&v)
}

// SetAlarmSummaryNil sets the value for AlarmSummary to be an explicit nil
func (o *NetworkElementSummary) SetAlarmSummaryNil() {
	o.AlarmSummary.Set(nil)
}

// UnsetAlarmSummary ensures that no value is present for AlarmSummary, not even an explicit nil
func (o *NetworkElementSummary) UnsetAlarmSummary() {
	o.AlarmSummary.Unset()
}

// GetAvailableMemory returns the AvailableMemory field value if set, zero value otherwise.
func (o *NetworkElementSummary) GetAvailableMemory() string {
	if o == nil || o.AvailableMemory == nil {
		var ret string
		return ret
	}
	return *o.AvailableMemory
}

// GetAvailableMemoryOk returns a tuple with the AvailableMemory field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkElementSummary) GetAvailableMemoryOk() (*string, bool) {
	if o == nil || o.AvailableMemory == nil {
		return nil, false
	}
	return o.AvailableMemory, true
}

// HasAvailableMemory returns a boolean if a field has been set.
func (o *NetworkElementSummary) HasAvailableMemory() bool {
	if o != nil && o.AvailableMemory != nil {
		return true
	}

	return false
}

// SetAvailableMemory gets a reference to the given string and assigns it to the AvailableMemory field.
func (o *NetworkElementSummary) SetAvailableMemory(v string) {
	o.AvailableMemory = &v
}

// GetDeviceMoId returns the DeviceMoId field value if set, zero value otherwise.
func (o *NetworkElementSummary) GetDeviceMoId() string {
	if o == nil || o.DeviceMoId == nil {
		var ret string
		return ret
	}
	return *o.DeviceMoId
}

// GetDeviceMoIdOk returns a tuple with the DeviceMoId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkElementSummary) GetDeviceMoIdOk() (*string, bool) {
	if o == nil || o.DeviceMoId == nil {
		return nil, false
	}
	return o.DeviceMoId, true
}

// HasDeviceMoId returns a boolean if a field has been set.
func (o *NetworkElementSummary) HasDeviceMoId() bool {
	if o != nil && o.DeviceMoId != nil {
		return true
	}

	return false
}

// SetDeviceMoId gets a reference to the given string and assigns it to the DeviceMoId field.
func (o *NetworkElementSummary) SetDeviceMoId(v string) {
	o.DeviceMoId = &v
}

// GetDn returns the Dn field value if set, zero value otherwise.
func (o *NetworkElementSummary) GetDn() string {
	if o == nil || o.Dn == nil {
		var ret string
		return ret
	}
	return *o.Dn
}

// GetDnOk returns a tuple with the Dn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkElementSummary) GetDnOk() (*string, bool) {
	if o == nil || o.Dn == nil {
		return nil, false
	}
	return o.Dn, true
}

// HasDn returns a boolean if a field has been set.
func (o *NetworkElementSummary) HasDn() bool {
	if o != nil && o.Dn != nil {
		return true
	}

	return false
}

// SetDn gets a reference to the given string and assigns it to the Dn field.
func (o *NetworkElementSummary) SetDn(v string) {
	o.Dn = &v
}

// GetEthernetMode returns the EthernetMode field value if set, zero value otherwise.
func (o *NetworkElementSummary) GetEthernetMode() string {
	if o == nil || o.EthernetMode == nil {
		var ret string
		return ret
	}
	return *o.EthernetMode
}

// GetEthernetModeOk returns a tuple with the EthernetMode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkElementSummary) GetEthernetModeOk() (*string, bool) {
	if o == nil || o.EthernetMode == nil {
		return nil, false
	}
	return o.EthernetMode, true
}

// HasEthernetMode returns a boolean if a field has been set.
func (o *NetworkElementSummary) HasEthernetMode() bool {
	if o != nil && o.EthernetMode != nil {
		return true
	}

	return false
}

// SetEthernetMode gets a reference to the given string and assigns it to the EthernetMode field.
func (o *NetworkElementSummary) SetEthernetMode(v string) {
	o.EthernetMode = &v
}

// GetEthernetSwitchingMode returns the EthernetSwitchingMode field value if set, zero value otherwise.
func (o *NetworkElementSummary) GetEthernetSwitchingMode() string {
	if o == nil || o.EthernetSwitchingMode == nil {
		var ret string
		return ret
	}
	return *o.EthernetSwitchingMode
}

// GetEthernetSwitchingModeOk returns a tuple with the EthernetSwitchingMode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkElementSummary) GetEthernetSwitchingModeOk() (*string, bool) {
	if o == nil || o.EthernetSwitchingMode == nil {
		return nil, false
	}
	return o.EthernetSwitchingMode, true
}

// HasEthernetSwitchingMode returns a boolean if a field has been set.
func (o *NetworkElementSummary) HasEthernetSwitchingMode() bool {
	if o != nil && o.EthernetSwitchingMode != nil {
		return true
	}

	return false
}

// SetEthernetSwitchingMode gets a reference to the given string and assigns it to the EthernetSwitchingMode field.
func (o *NetworkElementSummary) SetEthernetSwitchingMode(v string) {
	o.EthernetSwitchingMode = &v
}

// GetFaultSummary returns the FaultSummary field value if set, zero value otherwise.
func (o *NetworkElementSummary) GetFaultSummary() int64 {
	if o == nil || o.FaultSummary == nil {
		var ret int64
		return ret
	}
	return *o.FaultSummary
}

// GetFaultSummaryOk returns a tuple with the FaultSummary field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkElementSummary) GetFaultSummaryOk() (*int64, bool) {
	if o == nil || o.FaultSummary == nil {
		return nil, false
	}
	return o.FaultSummary, true
}

// HasFaultSummary returns a boolean if a field has been set.
func (o *NetworkElementSummary) HasFaultSummary() bool {
	if o != nil && o.FaultSummary != nil {
		return true
	}

	return false
}

// SetFaultSummary gets a reference to the given int64 and assigns it to the FaultSummary field.
func (o *NetworkElementSummary) SetFaultSummary(v int64) {
	o.FaultSummary = &v
}

// GetFcMode returns the FcMode field value if set, zero value otherwise.
func (o *NetworkElementSummary) GetFcMode() string {
	if o == nil || o.FcMode == nil {
		var ret string
		return ret
	}
	return *o.FcMode
}

// GetFcModeOk returns a tuple with the FcMode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkElementSummary) GetFcModeOk() (*string, bool) {
	if o == nil || o.FcMode == nil {
		return nil, false
	}
	return o.FcMode, true
}

// HasFcMode returns a boolean if a field has been set.
func (o *NetworkElementSummary) HasFcMode() bool {
	if o != nil && o.FcMode != nil {
		return true
	}

	return false
}

// SetFcMode gets a reference to the given string and assigns it to the FcMode field.
func (o *NetworkElementSummary) SetFcMode(v string) {
	o.FcMode = &v
}

// GetFcSwitchingMode returns the FcSwitchingMode field value if set, zero value otherwise.
func (o *NetworkElementSummary) GetFcSwitchingMode() string {
	if o == nil || o.FcSwitchingMode == nil {
		var ret string
		return ret
	}
	return *o.FcSwitchingMode
}

// GetFcSwitchingModeOk returns a tuple with the FcSwitchingMode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkElementSummary) GetFcSwitchingModeOk() (*string, bool) {
	if o == nil || o.FcSwitchingMode == nil {
		return nil, false
	}
	return o.FcSwitchingMode, true
}

// HasFcSwitchingMode returns a boolean if a field has been set.
func (o *NetworkElementSummary) HasFcSwitchingMode() bool {
	if o != nil && o.FcSwitchingMode != nil {
		return true
	}

	return false
}

// SetFcSwitchingMode gets a reference to the given string and assigns it to the FcSwitchingMode field.
func (o *NetworkElementSummary) SetFcSwitchingMode(v string) {
	o.FcSwitchingMode = &v
}

// GetFirmware returns the Firmware field value if set, zero value otherwise.
func (o *NetworkElementSummary) GetFirmware() string {
	if o == nil || o.Firmware == nil {
		var ret string
		return ret
	}
	return *o.Firmware
}

// GetFirmwareOk returns a tuple with the Firmware field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkElementSummary) GetFirmwareOk() (*string, bool) {
	if o == nil || o.Firmware == nil {
		return nil, false
	}
	return o.Firmware, true
}

// HasFirmware returns a boolean if a field has been set.
func (o *NetworkElementSummary) HasFirmware() bool {
	if o != nil && o.Firmware != nil {
		return true
	}

	return false
}

// SetFirmware gets a reference to the given string and assigns it to the Firmware field.
func (o *NetworkElementSummary) SetFirmware(v string) {
	o.Firmware = &v
}

// GetInbandIpAddress returns the InbandIpAddress field value if set, zero value otherwise.
func (o *NetworkElementSummary) GetInbandIpAddress() string {
	if o == nil || o.InbandIpAddress == nil {
		var ret string
		return ret
	}
	return *o.InbandIpAddress
}

// GetInbandIpAddressOk returns a tuple with the InbandIpAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkElementSummary) GetInbandIpAddressOk() (*string, bool) {
	if o == nil || o.InbandIpAddress == nil {
		return nil, false
	}
	return o.InbandIpAddress, true
}

// HasInbandIpAddress returns a boolean if a field has been set.
func (o *NetworkElementSummary) HasInbandIpAddress() bool {
	if o != nil && o.InbandIpAddress != nil {
		return true
	}

	return false
}

// SetInbandIpAddress gets a reference to the given string and assigns it to the InbandIpAddress field.
func (o *NetworkElementSummary) SetInbandIpAddress(v string) {
	o.InbandIpAddress = &v
}

// GetInbandIpGateway returns the InbandIpGateway field value if set, zero value otherwise.
func (o *NetworkElementSummary) GetInbandIpGateway() string {
	if o == nil || o.InbandIpGateway == nil {
		var ret string
		return ret
	}
	return *o.InbandIpGateway
}

// GetInbandIpGatewayOk returns a tuple with the InbandIpGateway field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkElementSummary) GetInbandIpGatewayOk() (*string, bool) {
	if o == nil || o.InbandIpGateway == nil {
		return nil, false
	}
	return o.InbandIpGateway, true
}

// HasInbandIpGateway returns a boolean if a field has been set.
func (o *NetworkElementSummary) HasInbandIpGateway() bool {
	if o != nil && o.InbandIpGateway != nil {
		return true
	}

	return false
}

// SetInbandIpGateway gets a reference to the given string and assigns it to the InbandIpGateway field.
func (o *NetworkElementSummary) SetInbandIpGateway(v string) {
	o.InbandIpGateway = &v
}

// GetInbandIpMask returns the InbandIpMask field value if set, zero value otherwise.
func (o *NetworkElementSummary) GetInbandIpMask() string {
	if o == nil || o.InbandIpMask == nil {
		var ret string
		return ret
	}
	return *o.InbandIpMask
}

// GetInbandIpMaskOk returns a tuple with the InbandIpMask field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkElementSummary) GetInbandIpMaskOk() (*string, bool) {
	if o == nil || o.InbandIpMask == nil {
		return nil, false
	}
	return o.InbandIpMask, true
}

// HasInbandIpMask returns a boolean if a field has been set.
func (o *NetworkElementSummary) HasInbandIpMask() bool {
	if o != nil && o.InbandIpMask != nil {
		return true
	}

	return false
}

// SetInbandIpMask gets a reference to the given string and assigns it to the InbandIpMask field.
func (o *NetworkElementSummary) SetInbandIpMask(v string) {
	o.InbandIpMask = &v
}

// GetInbandVlan returns the InbandVlan field value if set, zero value otherwise.
func (o *NetworkElementSummary) GetInbandVlan() int64 {
	if o == nil || o.InbandVlan == nil {
		var ret int64
		return ret
	}
	return *o.InbandVlan
}

// GetInbandVlanOk returns a tuple with the InbandVlan field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkElementSummary) GetInbandVlanOk() (*int64, bool) {
	if o == nil || o.InbandVlan == nil {
		return nil, false
	}
	return o.InbandVlan, true
}

// HasInbandVlan returns a boolean if a field has been set.
func (o *NetworkElementSummary) HasInbandVlan() bool {
	if o != nil && o.InbandVlan != nil {
		return true
	}

	return false
}

// SetInbandVlan gets a reference to the given int64 and assigns it to the InbandVlan field.
func (o *NetworkElementSummary) SetInbandVlan(v int64) {
	o.InbandVlan = &v
}

// GetIpv4Address returns the Ipv4Address field value if set, zero value otherwise.
func (o *NetworkElementSummary) GetIpv4Address() string {
	if o == nil || o.Ipv4Address == nil {
		var ret string
		return ret
	}
	return *o.Ipv4Address
}

// GetIpv4AddressOk returns a tuple with the Ipv4Address field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkElementSummary) GetIpv4AddressOk() (*string, bool) {
	if o == nil || o.Ipv4Address == nil {
		return nil, false
	}
	return o.Ipv4Address, true
}

// HasIpv4Address returns a boolean if a field has been set.
func (o *NetworkElementSummary) HasIpv4Address() bool {
	if o != nil && o.Ipv4Address != nil {
		return true
	}

	return false
}

// SetIpv4Address gets a reference to the given string and assigns it to the Ipv4Address field.
func (o *NetworkElementSummary) SetIpv4Address(v string) {
	o.Ipv4Address = &v
}

// GetManagementMode returns the ManagementMode field value if set, zero value otherwise.
func (o *NetworkElementSummary) GetManagementMode() string {
	if o == nil || o.ManagementMode == nil {
		var ret string
		return ret
	}
	return *o.ManagementMode
}

// GetManagementModeOk returns a tuple with the ManagementMode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkElementSummary) GetManagementModeOk() (*string, bool) {
	if o == nil || o.ManagementMode == nil {
		return nil, false
	}
	return o.ManagementMode, true
}

// HasManagementMode returns a boolean if a field has been set.
func (o *NetworkElementSummary) HasManagementMode() bool {
	if o != nil && o.ManagementMode != nil {
		return true
	}

	return false
}

// SetManagementMode gets a reference to the given string and assigns it to the ManagementMode field.
func (o *NetworkElementSummary) SetManagementMode(v string) {
	o.ManagementMode = &v
}

// GetModel returns the Model field value if set, zero value otherwise.
func (o *NetworkElementSummary) GetModel() string {
	if o == nil || o.Model == nil {
		var ret string
		return ret
	}
	return *o.Model
}

// GetModelOk returns a tuple with the Model field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkElementSummary) GetModelOk() (*string, bool) {
	if o == nil || o.Model == nil {
		return nil, false
	}
	return o.Model, true
}

// HasModel returns a boolean if a field has been set.
func (o *NetworkElementSummary) HasModel() bool {
	if o != nil && o.Model != nil {
		return true
	}

	return false
}

// SetModel gets a reference to the given string and assigns it to the Model field.
func (o *NetworkElementSummary) SetModel(v string) {
	o.Model = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *NetworkElementSummary) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkElementSummary) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *NetworkElementSummary) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *NetworkElementSummary) SetName(v string) {
	o.Name = &v
}

// GetNumEtherPorts returns the NumEtherPorts field value if set, zero value otherwise.
func (o *NetworkElementSummary) GetNumEtherPorts() int64 {
	if o == nil || o.NumEtherPorts == nil {
		var ret int64
		return ret
	}
	return *o.NumEtherPorts
}

// GetNumEtherPortsOk returns a tuple with the NumEtherPorts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkElementSummary) GetNumEtherPortsOk() (*int64, bool) {
	if o == nil || o.NumEtherPorts == nil {
		return nil, false
	}
	return o.NumEtherPorts, true
}

// HasNumEtherPorts returns a boolean if a field has been set.
func (o *NetworkElementSummary) HasNumEtherPorts() bool {
	if o != nil && o.NumEtherPorts != nil {
		return true
	}

	return false
}

// SetNumEtherPorts gets a reference to the given int64 and assigns it to the NumEtherPorts field.
func (o *NetworkElementSummary) SetNumEtherPorts(v int64) {
	o.NumEtherPorts = &v
}

// GetNumEtherPortsConfigured returns the NumEtherPortsConfigured field value if set, zero value otherwise.
func (o *NetworkElementSummary) GetNumEtherPortsConfigured() int64 {
	if o == nil || o.NumEtherPortsConfigured == nil {
		var ret int64
		return ret
	}
	return *o.NumEtherPortsConfigured
}

// GetNumEtherPortsConfiguredOk returns a tuple with the NumEtherPortsConfigured field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkElementSummary) GetNumEtherPortsConfiguredOk() (*int64, bool) {
	if o == nil || o.NumEtherPortsConfigured == nil {
		return nil, false
	}
	return o.NumEtherPortsConfigured, true
}

// HasNumEtherPortsConfigured returns a boolean if a field has been set.
func (o *NetworkElementSummary) HasNumEtherPortsConfigured() bool {
	if o != nil && o.NumEtherPortsConfigured != nil {
		return true
	}

	return false
}

// SetNumEtherPortsConfigured gets a reference to the given int64 and assigns it to the NumEtherPortsConfigured field.
func (o *NetworkElementSummary) SetNumEtherPortsConfigured(v int64) {
	o.NumEtherPortsConfigured = &v
}

// GetNumEtherPortsLinkUp returns the NumEtherPortsLinkUp field value if set, zero value otherwise.
func (o *NetworkElementSummary) GetNumEtherPortsLinkUp() int64 {
	if o == nil || o.NumEtherPortsLinkUp == nil {
		var ret int64
		return ret
	}
	return *o.NumEtherPortsLinkUp
}

// GetNumEtherPortsLinkUpOk returns a tuple with the NumEtherPortsLinkUp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkElementSummary) GetNumEtherPortsLinkUpOk() (*int64, bool) {
	if o == nil || o.NumEtherPortsLinkUp == nil {
		return nil, false
	}
	return o.NumEtherPortsLinkUp, true
}

// HasNumEtherPortsLinkUp returns a boolean if a field has been set.
func (o *NetworkElementSummary) HasNumEtherPortsLinkUp() bool {
	if o != nil && o.NumEtherPortsLinkUp != nil {
		return true
	}

	return false
}

// SetNumEtherPortsLinkUp gets a reference to the given int64 and assigns it to the NumEtherPortsLinkUp field.
func (o *NetworkElementSummary) SetNumEtherPortsLinkUp(v int64) {
	o.NumEtherPortsLinkUp = &v
}

// GetNumExpansionModules returns the NumExpansionModules field value if set, zero value otherwise.
func (o *NetworkElementSummary) GetNumExpansionModules() int64 {
	if o == nil || o.NumExpansionModules == nil {
		var ret int64
		return ret
	}
	return *o.NumExpansionModules
}

// GetNumExpansionModulesOk returns a tuple with the NumExpansionModules field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkElementSummary) GetNumExpansionModulesOk() (*int64, bool) {
	if o == nil || o.NumExpansionModules == nil {
		return nil, false
	}
	return o.NumExpansionModules, true
}

// HasNumExpansionModules returns a boolean if a field has been set.
func (o *NetworkElementSummary) HasNumExpansionModules() bool {
	if o != nil && o.NumExpansionModules != nil {
		return true
	}

	return false
}

// SetNumExpansionModules gets a reference to the given int64 and assigns it to the NumExpansionModules field.
func (o *NetworkElementSummary) SetNumExpansionModules(v int64) {
	o.NumExpansionModules = &v
}

// GetNumFcPorts returns the NumFcPorts field value if set, zero value otherwise.
func (o *NetworkElementSummary) GetNumFcPorts() int64 {
	if o == nil || o.NumFcPorts == nil {
		var ret int64
		return ret
	}
	return *o.NumFcPorts
}

// GetNumFcPortsOk returns a tuple with the NumFcPorts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkElementSummary) GetNumFcPortsOk() (*int64, bool) {
	if o == nil || o.NumFcPorts == nil {
		return nil, false
	}
	return o.NumFcPorts, true
}

// HasNumFcPorts returns a boolean if a field has been set.
func (o *NetworkElementSummary) HasNumFcPorts() bool {
	if o != nil && o.NumFcPorts != nil {
		return true
	}

	return false
}

// SetNumFcPorts gets a reference to the given int64 and assigns it to the NumFcPorts field.
func (o *NetworkElementSummary) SetNumFcPorts(v int64) {
	o.NumFcPorts = &v
}

// GetNumFcPortsConfigured returns the NumFcPortsConfigured field value if set, zero value otherwise.
func (o *NetworkElementSummary) GetNumFcPortsConfigured() int64 {
	if o == nil || o.NumFcPortsConfigured == nil {
		var ret int64
		return ret
	}
	return *o.NumFcPortsConfigured
}

// GetNumFcPortsConfiguredOk returns a tuple with the NumFcPortsConfigured field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkElementSummary) GetNumFcPortsConfiguredOk() (*int64, bool) {
	if o == nil || o.NumFcPortsConfigured == nil {
		return nil, false
	}
	return o.NumFcPortsConfigured, true
}

// HasNumFcPortsConfigured returns a boolean if a field has been set.
func (o *NetworkElementSummary) HasNumFcPortsConfigured() bool {
	if o != nil && o.NumFcPortsConfigured != nil {
		return true
	}

	return false
}

// SetNumFcPortsConfigured gets a reference to the given int64 and assigns it to the NumFcPortsConfigured field.
func (o *NetworkElementSummary) SetNumFcPortsConfigured(v int64) {
	o.NumFcPortsConfigured = &v
}

// GetNumFcPortsLinkUp returns the NumFcPortsLinkUp field value if set, zero value otherwise.
func (o *NetworkElementSummary) GetNumFcPortsLinkUp() int64 {
	if o == nil || o.NumFcPortsLinkUp == nil {
		var ret int64
		return ret
	}
	return *o.NumFcPortsLinkUp
}

// GetNumFcPortsLinkUpOk returns a tuple with the NumFcPortsLinkUp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkElementSummary) GetNumFcPortsLinkUpOk() (*int64, bool) {
	if o == nil || o.NumFcPortsLinkUp == nil {
		return nil, false
	}
	return o.NumFcPortsLinkUp, true
}

// HasNumFcPortsLinkUp returns a boolean if a field has been set.
func (o *NetworkElementSummary) HasNumFcPortsLinkUp() bool {
	if o != nil && o.NumFcPortsLinkUp != nil {
		return true
	}

	return false
}

// SetNumFcPortsLinkUp gets a reference to the given int64 and assigns it to the NumFcPortsLinkUp field.
func (o *NetworkElementSummary) SetNumFcPortsLinkUp(v int64) {
	o.NumFcPortsLinkUp = &v
}

// GetOperEvacState returns the OperEvacState field value if set, zero value otherwise.
func (o *NetworkElementSummary) GetOperEvacState() string {
	if o == nil || o.OperEvacState == nil {
		var ret string
		return ret
	}
	return *o.OperEvacState
}

// GetOperEvacStateOk returns a tuple with the OperEvacState field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkElementSummary) GetOperEvacStateOk() (*string, bool) {
	if o == nil || o.OperEvacState == nil {
		return nil, false
	}
	return o.OperEvacState, true
}

// HasOperEvacState returns a boolean if a field has been set.
func (o *NetworkElementSummary) HasOperEvacState() bool {
	if o != nil && o.OperEvacState != nil {
		return true
	}

	return false
}

// SetOperEvacState gets a reference to the given string and assigns it to the OperEvacState field.
func (o *NetworkElementSummary) SetOperEvacState(v string) {
	o.OperEvacState = &v
}

// GetOperability returns the Operability field value if set, zero value otherwise.
func (o *NetworkElementSummary) GetOperability() string {
	if o == nil || o.Operability == nil {
		var ret string
		return ret
	}
	return *o.Operability
}

// GetOperabilityOk returns a tuple with the Operability field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkElementSummary) GetOperabilityOk() (*string, bool) {
	if o == nil || o.Operability == nil {
		return nil, false
	}
	return o.Operability, true
}

// HasOperability returns a boolean if a field has been set.
func (o *NetworkElementSummary) HasOperability() bool {
	if o != nil && o.Operability != nil {
		return true
	}

	return false
}

// SetOperability gets a reference to the given string and assigns it to the Operability field.
func (o *NetworkElementSummary) SetOperability(v string) {
	o.Operability = &v
}

// GetOutOfBandIpAddress returns the OutOfBandIpAddress field value if set, zero value otherwise.
func (o *NetworkElementSummary) GetOutOfBandIpAddress() string {
	if o == nil || o.OutOfBandIpAddress == nil {
		var ret string
		return ret
	}
	return *o.OutOfBandIpAddress
}

// GetOutOfBandIpAddressOk returns a tuple with the OutOfBandIpAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkElementSummary) GetOutOfBandIpAddressOk() (*string, bool) {
	if o == nil || o.OutOfBandIpAddress == nil {
		return nil, false
	}
	return o.OutOfBandIpAddress, true
}

// HasOutOfBandIpAddress returns a boolean if a field has been set.
func (o *NetworkElementSummary) HasOutOfBandIpAddress() bool {
	if o != nil && o.OutOfBandIpAddress != nil {
		return true
	}

	return false
}

// SetOutOfBandIpAddress gets a reference to the given string and assigns it to the OutOfBandIpAddress field.
func (o *NetworkElementSummary) SetOutOfBandIpAddress(v string) {
	o.OutOfBandIpAddress = &v
}

// GetOutOfBandIpGateway returns the OutOfBandIpGateway field value if set, zero value otherwise.
func (o *NetworkElementSummary) GetOutOfBandIpGateway() string {
	if o == nil || o.OutOfBandIpGateway == nil {
		var ret string
		return ret
	}
	return *o.OutOfBandIpGateway
}

// GetOutOfBandIpGatewayOk returns a tuple with the OutOfBandIpGateway field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkElementSummary) GetOutOfBandIpGatewayOk() (*string, bool) {
	if o == nil || o.OutOfBandIpGateway == nil {
		return nil, false
	}
	return o.OutOfBandIpGateway, true
}

// HasOutOfBandIpGateway returns a boolean if a field has been set.
func (o *NetworkElementSummary) HasOutOfBandIpGateway() bool {
	if o != nil && o.OutOfBandIpGateway != nil {
		return true
	}

	return false
}

// SetOutOfBandIpGateway gets a reference to the given string and assigns it to the OutOfBandIpGateway field.
func (o *NetworkElementSummary) SetOutOfBandIpGateway(v string) {
	o.OutOfBandIpGateway = &v
}

// GetOutOfBandIpMask returns the OutOfBandIpMask field value if set, zero value otherwise.
func (o *NetworkElementSummary) GetOutOfBandIpMask() string {
	if o == nil || o.OutOfBandIpMask == nil {
		var ret string
		return ret
	}
	return *o.OutOfBandIpMask
}

// GetOutOfBandIpMaskOk returns a tuple with the OutOfBandIpMask field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkElementSummary) GetOutOfBandIpMaskOk() (*string, bool) {
	if o == nil || o.OutOfBandIpMask == nil {
		return nil, false
	}
	return o.OutOfBandIpMask, true
}

// HasOutOfBandIpMask returns a boolean if a field has been set.
func (o *NetworkElementSummary) HasOutOfBandIpMask() bool {
	if o != nil && o.OutOfBandIpMask != nil {
		return true
	}

	return false
}

// SetOutOfBandIpMask gets a reference to the given string and assigns it to the OutOfBandIpMask field.
func (o *NetworkElementSummary) SetOutOfBandIpMask(v string) {
	o.OutOfBandIpMask = &v
}

// GetOutOfBandIpv4Address returns the OutOfBandIpv4Address field value if set, zero value otherwise.
func (o *NetworkElementSummary) GetOutOfBandIpv4Address() string {
	if o == nil || o.OutOfBandIpv4Address == nil {
		var ret string
		return ret
	}
	return *o.OutOfBandIpv4Address
}

// GetOutOfBandIpv4AddressOk returns a tuple with the OutOfBandIpv4Address field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkElementSummary) GetOutOfBandIpv4AddressOk() (*string, bool) {
	if o == nil || o.OutOfBandIpv4Address == nil {
		return nil, false
	}
	return o.OutOfBandIpv4Address, true
}

// HasOutOfBandIpv4Address returns a boolean if a field has been set.
func (o *NetworkElementSummary) HasOutOfBandIpv4Address() bool {
	if o != nil && o.OutOfBandIpv4Address != nil {
		return true
	}

	return false
}

// SetOutOfBandIpv4Address gets a reference to the given string and assigns it to the OutOfBandIpv4Address field.
func (o *NetworkElementSummary) SetOutOfBandIpv4Address(v string) {
	o.OutOfBandIpv4Address = &v
}

// GetOutOfBandIpv4Gateway returns the OutOfBandIpv4Gateway field value if set, zero value otherwise.
func (o *NetworkElementSummary) GetOutOfBandIpv4Gateway() string {
	if o == nil || o.OutOfBandIpv4Gateway == nil {
		var ret string
		return ret
	}
	return *o.OutOfBandIpv4Gateway
}

// GetOutOfBandIpv4GatewayOk returns a tuple with the OutOfBandIpv4Gateway field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkElementSummary) GetOutOfBandIpv4GatewayOk() (*string, bool) {
	if o == nil || o.OutOfBandIpv4Gateway == nil {
		return nil, false
	}
	return o.OutOfBandIpv4Gateway, true
}

// HasOutOfBandIpv4Gateway returns a boolean if a field has been set.
func (o *NetworkElementSummary) HasOutOfBandIpv4Gateway() bool {
	if o != nil && o.OutOfBandIpv4Gateway != nil {
		return true
	}

	return false
}

// SetOutOfBandIpv4Gateway gets a reference to the given string and assigns it to the OutOfBandIpv4Gateway field.
func (o *NetworkElementSummary) SetOutOfBandIpv4Gateway(v string) {
	o.OutOfBandIpv4Gateway = &v
}

// GetOutOfBandIpv4Mask returns the OutOfBandIpv4Mask field value if set, zero value otherwise.
func (o *NetworkElementSummary) GetOutOfBandIpv4Mask() string {
	if o == nil || o.OutOfBandIpv4Mask == nil {
		var ret string
		return ret
	}
	return *o.OutOfBandIpv4Mask
}

// GetOutOfBandIpv4MaskOk returns a tuple with the OutOfBandIpv4Mask field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkElementSummary) GetOutOfBandIpv4MaskOk() (*string, bool) {
	if o == nil || o.OutOfBandIpv4Mask == nil {
		return nil, false
	}
	return o.OutOfBandIpv4Mask, true
}

// HasOutOfBandIpv4Mask returns a boolean if a field has been set.
func (o *NetworkElementSummary) HasOutOfBandIpv4Mask() bool {
	if o != nil && o.OutOfBandIpv4Mask != nil {
		return true
	}

	return false
}

// SetOutOfBandIpv4Mask gets a reference to the given string and assigns it to the OutOfBandIpv4Mask field.
func (o *NetworkElementSummary) SetOutOfBandIpv4Mask(v string) {
	o.OutOfBandIpv4Mask = &v
}

// GetOutOfBandIpv6Address returns the OutOfBandIpv6Address field value if set, zero value otherwise.
func (o *NetworkElementSummary) GetOutOfBandIpv6Address() string {
	if o == nil || o.OutOfBandIpv6Address == nil {
		var ret string
		return ret
	}
	return *o.OutOfBandIpv6Address
}

// GetOutOfBandIpv6AddressOk returns a tuple with the OutOfBandIpv6Address field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkElementSummary) GetOutOfBandIpv6AddressOk() (*string, bool) {
	if o == nil || o.OutOfBandIpv6Address == nil {
		return nil, false
	}
	return o.OutOfBandIpv6Address, true
}

// HasOutOfBandIpv6Address returns a boolean if a field has been set.
func (o *NetworkElementSummary) HasOutOfBandIpv6Address() bool {
	if o != nil && o.OutOfBandIpv6Address != nil {
		return true
	}

	return false
}

// SetOutOfBandIpv6Address gets a reference to the given string and assigns it to the OutOfBandIpv6Address field.
func (o *NetworkElementSummary) SetOutOfBandIpv6Address(v string) {
	o.OutOfBandIpv6Address = &v
}

// GetOutOfBandIpv6Gateway returns the OutOfBandIpv6Gateway field value if set, zero value otherwise.
func (o *NetworkElementSummary) GetOutOfBandIpv6Gateway() string {
	if o == nil || o.OutOfBandIpv6Gateway == nil {
		var ret string
		return ret
	}
	return *o.OutOfBandIpv6Gateway
}

// GetOutOfBandIpv6GatewayOk returns a tuple with the OutOfBandIpv6Gateway field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkElementSummary) GetOutOfBandIpv6GatewayOk() (*string, bool) {
	if o == nil || o.OutOfBandIpv6Gateway == nil {
		return nil, false
	}
	return o.OutOfBandIpv6Gateway, true
}

// HasOutOfBandIpv6Gateway returns a boolean if a field has been set.
func (o *NetworkElementSummary) HasOutOfBandIpv6Gateway() bool {
	if o != nil && o.OutOfBandIpv6Gateway != nil {
		return true
	}

	return false
}

// SetOutOfBandIpv6Gateway gets a reference to the given string and assigns it to the OutOfBandIpv6Gateway field.
func (o *NetworkElementSummary) SetOutOfBandIpv6Gateway(v string) {
	o.OutOfBandIpv6Gateway = &v
}

// GetOutOfBandIpv6Prefix returns the OutOfBandIpv6Prefix field value if set, zero value otherwise.
func (o *NetworkElementSummary) GetOutOfBandIpv6Prefix() string {
	if o == nil || o.OutOfBandIpv6Prefix == nil {
		var ret string
		return ret
	}
	return *o.OutOfBandIpv6Prefix
}

// GetOutOfBandIpv6PrefixOk returns a tuple with the OutOfBandIpv6Prefix field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkElementSummary) GetOutOfBandIpv6PrefixOk() (*string, bool) {
	if o == nil || o.OutOfBandIpv6Prefix == nil {
		return nil, false
	}
	return o.OutOfBandIpv6Prefix, true
}

// HasOutOfBandIpv6Prefix returns a boolean if a field has been set.
func (o *NetworkElementSummary) HasOutOfBandIpv6Prefix() bool {
	if o != nil && o.OutOfBandIpv6Prefix != nil {
		return true
	}

	return false
}

// SetOutOfBandIpv6Prefix gets a reference to the given string and assigns it to the OutOfBandIpv6Prefix field.
func (o *NetworkElementSummary) SetOutOfBandIpv6Prefix(v string) {
	o.OutOfBandIpv6Prefix = &v
}

// GetOutOfBandMac returns the OutOfBandMac field value if set, zero value otherwise.
func (o *NetworkElementSummary) GetOutOfBandMac() string {
	if o == nil || o.OutOfBandMac == nil {
		var ret string
		return ret
	}
	return *o.OutOfBandMac
}

// GetOutOfBandMacOk returns a tuple with the OutOfBandMac field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkElementSummary) GetOutOfBandMacOk() (*string, bool) {
	if o == nil || o.OutOfBandMac == nil {
		return nil, false
	}
	return o.OutOfBandMac, true
}

// HasOutOfBandMac returns a boolean if a field has been set.
func (o *NetworkElementSummary) HasOutOfBandMac() bool {
	if o != nil && o.OutOfBandMac != nil {
		return true
	}

	return false
}

// SetOutOfBandMac gets a reference to the given string and assigns it to the OutOfBandMac field.
func (o *NetworkElementSummary) SetOutOfBandMac(v string) {
	o.OutOfBandMac = &v
}

// GetPresence returns the Presence field value if set, zero value otherwise.
func (o *NetworkElementSummary) GetPresence() string {
	if o == nil || o.Presence == nil {
		var ret string
		return ret
	}
	return *o.Presence
}

// GetPresenceOk returns a tuple with the Presence field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkElementSummary) GetPresenceOk() (*string, bool) {
	if o == nil || o.Presence == nil {
		return nil, false
	}
	return o.Presence, true
}

// HasPresence returns a boolean if a field has been set.
func (o *NetworkElementSummary) HasPresence() bool {
	if o != nil && o.Presence != nil {
		return true
	}

	return false
}

// SetPresence gets a reference to the given string and assigns it to the Presence field.
func (o *NetworkElementSummary) SetPresence(v string) {
	o.Presence = &v
}

// GetRevision returns the Revision field value if set, zero value otherwise.
func (o *NetworkElementSummary) GetRevision() string {
	if o == nil || o.Revision == nil {
		var ret string
		return ret
	}
	return *o.Revision
}

// GetRevisionOk returns a tuple with the Revision field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkElementSummary) GetRevisionOk() (*string, bool) {
	if o == nil || o.Revision == nil {
		return nil, false
	}
	return o.Revision, true
}

// HasRevision returns a boolean if a field has been set.
func (o *NetworkElementSummary) HasRevision() bool {
	if o != nil && o.Revision != nil {
		return true
	}

	return false
}

// SetRevision gets a reference to the given string and assigns it to the Revision field.
func (o *NetworkElementSummary) SetRevision(v string) {
	o.Revision = &v
}

// GetRn returns the Rn field value if set, zero value otherwise.
func (o *NetworkElementSummary) GetRn() string {
	if o == nil || o.Rn == nil {
		var ret string
		return ret
	}
	return *o.Rn
}

// GetRnOk returns a tuple with the Rn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkElementSummary) GetRnOk() (*string, bool) {
	if o == nil || o.Rn == nil {
		return nil, false
	}
	return o.Rn, true
}

// HasRn returns a boolean if a field has been set.
func (o *NetworkElementSummary) HasRn() bool {
	if o != nil && o.Rn != nil {
		return true
	}

	return false
}

// SetRn gets a reference to the given string and assigns it to the Rn field.
func (o *NetworkElementSummary) SetRn(v string) {
	o.Rn = &v
}

// GetSerial returns the Serial field value if set, zero value otherwise.
func (o *NetworkElementSummary) GetSerial() string {
	if o == nil || o.Serial == nil {
		var ret string
		return ret
	}
	return *o.Serial
}

// GetSerialOk returns a tuple with the Serial field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkElementSummary) GetSerialOk() (*string, bool) {
	if o == nil || o.Serial == nil {
		return nil, false
	}
	return o.Serial, true
}

// HasSerial returns a boolean if a field has been set.
func (o *NetworkElementSummary) HasSerial() bool {
	if o != nil && o.Serial != nil {
		return true
	}

	return false
}

// SetSerial gets a reference to the given string and assigns it to the Serial field.
func (o *NetworkElementSummary) SetSerial(v string) {
	o.Serial = &v
}

// GetSourceObjectType returns the SourceObjectType field value if set, zero value otherwise.
func (o *NetworkElementSummary) GetSourceObjectType() string {
	if o == nil || o.SourceObjectType == nil {
		var ret string
		return ret
	}
	return *o.SourceObjectType
}

// GetSourceObjectTypeOk returns a tuple with the SourceObjectType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkElementSummary) GetSourceObjectTypeOk() (*string, bool) {
	if o == nil || o.SourceObjectType == nil {
		return nil, false
	}
	return o.SourceObjectType, true
}

// HasSourceObjectType returns a boolean if a field has been set.
func (o *NetworkElementSummary) HasSourceObjectType() bool {
	if o != nil && o.SourceObjectType != nil {
		return true
	}

	return false
}

// SetSourceObjectType gets a reference to the given string and assigns it to the SourceObjectType field.
func (o *NetworkElementSummary) SetSourceObjectType(v string) {
	o.SourceObjectType = &v
}

// GetSwitchId returns the SwitchId field value if set, zero value otherwise.
func (o *NetworkElementSummary) GetSwitchId() string {
	if o == nil || o.SwitchId == nil {
		var ret string
		return ret
	}
	return *o.SwitchId
}

// GetSwitchIdOk returns a tuple with the SwitchId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkElementSummary) GetSwitchIdOk() (*string, bool) {
	if o == nil || o.SwitchId == nil {
		return nil, false
	}
	return o.SwitchId, true
}

// HasSwitchId returns a boolean if a field has been set.
func (o *NetworkElementSummary) HasSwitchId() bool {
	if o != nil && o.SwitchId != nil {
		return true
	}

	return false
}

// SetSwitchId gets a reference to the given string and assigns it to the SwitchId field.
func (o *NetworkElementSummary) SetSwitchId(v string) {
	o.SwitchId = &v
}

// GetThermal returns the Thermal field value if set, zero value otherwise.
func (o *NetworkElementSummary) GetThermal() string {
	if o == nil || o.Thermal == nil {
		var ret string
		return ret
	}
	return *o.Thermal
}

// GetThermalOk returns a tuple with the Thermal field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkElementSummary) GetThermalOk() (*string, bool) {
	if o == nil || o.Thermal == nil {
		return nil, false
	}
	return o.Thermal, true
}

// HasThermal returns a boolean if a field has been set.
func (o *NetworkElementSummary) HasThermal() bool {
	if o != nil && o.Thermal != nil {
		return true
	}

	return false
}

// SetThermal gets a reference to the given string and assigns it to the Thermal field.
func (o *NetworkElementSummary) SetThermal(v string) {
	o.Thermal = &v
}

// GetTotalMemory returns the TotalMemory field value if set, zero value otherwise.
func (o *NetworkElementSummary) GetTotalMemory() int64 {
	if o == nil || o.TotalMemory == nil {
		var ret int64
		return ret
	}
	return *o.TotalMemory
}

// GetTotalMemoryOk returns a tuple with the TotalMemory field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkElementSummary) GetTotalMemoryOk() (*int64, bool) {
	if o == nil || o.TotalMemory == nil {
		return nil, false
	}
	return o.TotalMemory, true
}

// HasTotalMemory returns a boolean if a field has been set.
func (o *NetworkElementSummary) HasTotalMemory() bool {
	if o != nil && o.TotalMemory != nil {
		return true
	}

	return false
}

// SetTotalMemory gets a reference to the given int64 and assigns it to the TotalMemory field.
func (o *NetworkElementSummary) SetTotalMemory(v int64) {
	o.TotalMemory = &v
}

// GetVendor returns the Vendor field value if set, zero value otherwise.
func (o *NetworkElementSummary) GetVendor() string {
	if o == nil || o.Vendor == nil {
		var ret string
		return ret
	}
	return *o.Vendor
}

// GetVendorOk returns a tuple with the Vendor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkElementSummary) GetVendorOk() (*string, bool) {
	if o == nil || o.Vendor == nil {
		return nil, false
	}
	return o.Vendor, true
}

// HasVendor returns a boolean if a field has been set.
func (o *NetworkElementSummary) HasVendor() bool {
	if o != nil && o.Vendor != nil {
		return true
	}

	return false
}

// SetVendor gets a reference to the given string and assigns it to the Vendor field.
func (o *NetworkElementSummary) SetVendor(v string) {
	o.Vendor = &v
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *NetworkElementSummary) GetVersion() string {
	if o == nil || o.Version == nil {
		var ret string
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkElementSummary) GetVersionOk() (*string, bool) {
	if o == nil || o.Version == nil {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *NetworkElementSummary) HasVersion() bool {
	if o != nil && o.Version != nil {
		return true
	}

	return false
}

// SetVersion gets a reference to the given string and assigns it to the Version field.
func (o *NetworkElementSummary) SetVersion(v string) {
	o.Version = &v
}

// GetRegisteredDevice returns the RegisteredDevice field value if set, zero value otherwise.
func (o *NetworkElementSummary) GetRegisteredDevice() AssetDeviceRegistrationRelationship {
	if o == nil || o.RegisteredDevice == nil {
		var ret AssetDeviceRegistrationRelationship
		return ret
	}
	return *o.RegisteredDevice
}

// GetRegisteredDeviceOk returns a tuple with the RegisteredDevice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkElementSummary) GetRegisteredDeviceOk() (*AssetDeviceRegistrationRelationship, bool) {
	if o == nil || o.RegisteredDevice == nil {
		return nil, false
	}
	return o.RegisteredDevice, true
}

// HasRegisteredDevice returns a boolean if a field has been set.
func (o *NetworkElementSummary) HasRegisteredDevice() bool {
	if o != nil && o.RegisteredDevice != nil {
		return true
	}

	return false
}

// SetRegisteredDevice gets a reference to the given AssetDeviceRegistrationRelationship and assigns it to the RegisteredDevice field.
func (o *NetworkElementSummary) SetRegisteredDevice(v AssetDeviceRegistrationRelationship) {
	o.RegisteredDevice = &v
}

func (o NetworkElementSummary) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	serializedViewsView, errViewsView := json.Marshal(o.ViewsView)
	if errViewsView != nil {
		return []byte{}, errViewsView
	}
	errViewsView = json.Unmarshal([]byte(serializedViewsView), &toSerialize)
	if errViewsView != nil {
		return []byte{}, errViewsView
	}
	if true {
		toSerialize["ClassId"] = o.ClassId
	}
	if true {
		toSerialize["ObjectType"] = o.ObjectType
	}
	if o.AdminEvacState != nil {
		toSerialize["AdminEvacState"] = o.AdminEvacState
	}
	if o.AdminInbandInterfaceState != nil {
		toSerialize["AdminInbandInterfaceState"] = o.AdminInbandInterfaceState
	}
	if o.AlarmSummary.IsSet() {
		toSerialize["AlarmSummary"] = o.AlarmSummary.Get()
	}
	if o.AvailableMemory != nil {
		toSerialize["AvailableMemory"] = o.AvailableMemory
	}
	if o.DeviceMoId != nil {
		toSerialize["DeviceMoId"] = o.DeviceMoId
	}
	if o.Dn != nil {
		toSerialize["Dn"] = o.Dn
	}
	if o.EthernetMode != nil {
		toSerialize["EthernetMode"] = o.EthernetMode
	}
	if o.EthernetSwitchingMode != nil {
		toSerialize["EthernetSwitchingMode"] = o.EthernetSwitchingMode
	}
	if o.FaultSummary != nil {
		toSerialize["FaultSummary"] = o.FaultSummary
	}
	if o.FcMode != nil {
		toSerialize["FcMode"] = o.FcMode
	}
	if o.FcSwitchingMode != nil {
		toSerialize["FcSwitchingMode"] = o.FcSwitchingMode
	}
	if o.Firmware != nil {
		toSerialize["Firmware"] = o.Firmware
	}
	if o.InbandIpAddress != nil {
		toSerialize["InbandIpAddress"] = o.InbandIpAddress
	}
	if o.InbandIpGateway != nil {
		toSerialize["InbandIpGateway"] = o.InbandIpGateway
	}
	if o.InbandIpMask != nil {
		toSerialize["InbandIpMask"] = o.InbandIpMask
	}
	if o.InbandVlan != nil {
		toSerialize["InbandVlan"] = o.InbandVlan
	}
	if o.Ipv4Address != nil {
		toSerialize["Ipv4Address"] = o.Ipv4Address
	}
	if o.ManagementMode != nil {
		toSerialize["ManagementMode"] = o.ManagementMode
	}
	if o.Model != nil {
		toSerialize["Model"] = o.Model
	}
	if o.Name != nil {
		toSerialize["Name"] = o.Name
	}
	if o.NumEtherPorts != nil {
		toSerialize["NumEtherPorts"] = o.NumEtherPorts
	}
	if o.NumEtherPortsConfigured != nil {
		toSerialize["NumEtherPortsConfigured"] = o.NumEtherPortsConfigured
	}
	if o.NumEtherPortsLinkUp != nil {
		toSerialize["NumEtherPortsLinkUp"] = o.NumEtherPortsLinkUp
	}
	if o.NumExpansionModules != nil {
		toSerialize["NumExpansionModules"] = o.NumExpansionModules
	}
	if o.NumFcPorts != nil {
		toSerialize["NumFcPorts"] = o.NumFcPorts
	}
	if o.NumFcPortsConfigured != nil {
		toSerialize["NumFcPortsConfigured"] = o.NumFcPortsConfigured
	}
	if o.NumFcPortsLinkUp != nil {
		toSerialize["NumFcPortsLinkUp"] = o.NumFcPortsLinkUp
	}
	if o.OperEvacState != nil {
		toSerialize["OperEvacState"] = o.OperEvacState
	}
	if o.Operability != nil {
		toSerialize["Operability"] = o.Operability
	}
	if o.OutOfBandIpAddress != nil {
		toSerialize["OutOfBandIpAddress"] = o.OutOfBandIpAddress
	}
	if o.OutOfBandIpGateway != nil {
		toSerialize["OutOfBandIpGateway"] = o.OutOfBandIpGateway
	}
	if o.OutOfBandIpMask != nil {
		toSerialize["OutOfBandIpMask"] = o.OutOfBandIpMask
	}
	if o.OutOfBandIpv4Address != nil {
		toSerialize["OutOfBandIpv4Address"] = o.OutOfBandIpv4Address
	}
	if o.OutOfBandIpv4Gateway != nil {
		toSerialize["OutOfBandIpv4Gateway"] = o.OutOfBandIpv4Gateway
	}
	if o.OutOfBandIpv4Mask != nil {
		toSerialize["OutOfBandIpv4Mask"] = o.OutOfBandIpv4Mask
	}
	if o.OutOfBandIpv6Address != nil {
		toSerialize["OutOfBandIpv6Address"] = o.OutOfBandIpv6Address
	}
	if o.OutOfBandIpv6Gateway != nil {
		toSerialize["OutOfBandIpv6Gateway"] = o.OutOfBandIpv6Gateway
	}
	if o.OutOfBandIpv6Prefix != nil {
		toSerialize["OutOfBandIpv6Prefix"] = o.OutOfBandIpv6Prefix
	}
	if o.OutOfBandMac != nil {
		toSerialize["OutOfBandMac"] = o.OutOfBandMac
	}
	if o.Presence != nil {
		toSerialize["Presence"] = o.Presence
	}
	if o.Revision != nil {
		toSerialize["Revision"] = o.Revision
	}
	if o.Rn != nil {
		toSerialize["Rn"] = o.Rn
	}
	if o.Serial != nil {
		toSerialize["Serial"] = o.Serial
	}
	if o.SourceObjectType != nil {
		toSerialize["SourceObjectType"] = o.SourceObjectType
	}
	if o.SwitchId != nil {
		toSerialize["SwitchId"] = o.SwitchId
	}
	if o.Thermal != nil {
		toSerialize["Thermal"] = o.Thermal
	}
	if o.TotalMemory != nil {
		toSerialize["TotalMemory"] = o.TotalMemory
	}
	if o.Vendor != nil {
		toSerialize["Vendor"] = o.Vendor
	}
	if o.Version != nil {
		toSerialize["Version"] = o.Version
	}
	if o.RegisteredDevice != nil {
		toSerialize["RegisteredDevice"] = o.RegisteredDevice
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *NetworkElementSummary) UnmarshalJSON(bytes []byte) (err error) {
	type NetworkElementSummaryWithoutEmbeddedStruct struct {
		// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.
		ClassId string `json:"ClassId"`
		// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
		ObjectType string `json:"ObjectType"`
		// Administratively configured state of Fabric Evacuation feature, for this switch.
		AdminEvacState *string `json:"AdminEvacState,omitempty"`
		// The administrative state of the network Element inband management interface.
		AdminInbandInterfaceState *string                     `json:"AdminInbandInterfaceState,omitempty"`
		AlarmSummary              NullableComputeAlarmSummary `json:"AlarmSummary,omitempty"`
		// Available memory (un-used) on this switch platform.
		AvailableMemory *string `json:"AvailableMemory,omitempty"`
		// The database identifier of the registered device of an object.
		DeviceMoId *string `json:"DeviceMoId,omitempty"`
		// The Distinguished Name unambiguously identifies an object in the system.
		Dn *string `json:"Dn,omitempty"`
		// The user configured Ethernet operational mode for this switch (End-Host or Switching).
		EthernetMode *string `json:"EthernetMode,omitempty"`
		// The user configured Ethernet operational mode for this switch (End-Host or Switching). * `end-host` - In end-host mode, the fabric interconnects appear to the upstream devices as end hosts with multiple links.In this mode, the switch does not run Spanning Tree Protocol and avoids loops by following a set of rules for traffic forwarding.In case of ethernet switching mode - Ethernet end-host mode is also known as Ethernet host virtualizer. * `switch` - In switch mode, the switch runs Spanning Tree Protocol to avoid loops, and broadcast and multicast packets are handled in the traditional way.This is the traditional switch mode.
		EthernetSwitchingMode *string `json:"EthernetSwitchingMode,omitempty"`
		// The fault summary of the network Element out-of-band management interface.
		FaultSummary *int64 `json:"FaultSummary,omitempty"`
		// The user configured FC operational mode for this switch (End-Host or Switching).
		FcMode *string `json:"FcMode,omitempty"`
		// The user configured FC operational mode for this switch (End-Host or Switching). * `end-host` - In end-host mode, the fabric interconnects appear to the upstream devices as end hosts with multiple links.In this mode, the switch does not run Spanning Tree Protocol and avoids loops by following a set of rules for traffic forwarding.In case of ethernet switching mode - Ethernet end-host mode is also known as Ethernet host virtualizer. * `switch` - In switch mode, the switch runs Spanning Tree Protocol to avoid loops, and broadcast and multicast packets are handled in the traditional way.This is the traditional switch mode.
		FcSwitchingMode *string `json:"FcSwitchingMode,omitempty"`
		// Running firmware information.
		Firmware *string `json:"Firmware,omitempty"`
		// The IP address of the network Element inband management interface.
		InbandIpAddress *string `json:"InbandIpAddress,omitempty"`
		// The default gateway of the network Element inband management interface.
		InbandIpGateway *string `json:"InbandIpGateway,omitempty"`
		// The network mask of the network Element inband management interface.
		InbandIpMask *string `json:"InbandIpMask,omitempty"`
		// The VLAN ID of the network Element inband management interface.
		InbandVlan *int64 `json:"InbandVlan,omitempty"`
		// IP version 4 address is saved in this property.
		Ipv4Address *string `json:"Ipv4Address,omitempty"`
		// The management mode of the fabric interconnect. * `IntersightStandalone` - Intersight Standalone mode of operation. * `UCSM` - Unified Computing System Manager mode of operation. * `Intersight` - Intersight managed mode of operation.
		ManagementMode *string `json:"ManagementMode,omitempty"`
		// This field identifies the model of the given component.
		Model *string `json:"Model,omitempty"`
		// Name of the ElementSummary object is saved in this property.
		Name *string `json:"Name,omitempty"`
		// Total number of Ethernet ports.
		NumEtherPorts *int64 `json:"NumEtherPorts,omitempty"`
		// Total number of configured Ethernet ports.
		NumEtherPortsConfigured *int64 `json:"NumEtherPortsConfigured,omitempty"`
		// Total number of Ethernet ports which are UP.
		NumEtherPortsLinkUp *int64 `json:"NumEtherPortsLinkUp,omitempty"`
		// Total number of expansion modules.
		NumExpansionModules *int64 `json:"NumExpansionModules,omitempty"`
		// Total number of FC ports.
		NumFcPorts *int64 `json:"NumFcPorts,omitempty"`
		// Total number of configured FC ports.
		NumFcPortsConfigured *int64 `json:"NumFcPortsConfigured,omitempty"`
		// Total number of FC ports which are UP.
		NumFcPortsLinkUp *int64 `json:"NumFcPortsLinkUp,omitempty"`
		// Operational state of the Fabric Evacuation feature, for this switch.
		OperEvacState *string `json:"OperEvacState,omitempty"`
		// The switch's current overall operational/health state.
		Operability *string `json:"Operability,omitempty"`
		// The IP address of the network Element out-of-band management interface.
		OutOfBandIpAddress *string `json:"OutOfBandIpAddress,omitempty"`
		// The default gateway of the network Element out-of-band management interface.
		OutOfBandIpGateway *string `json:"OutOfBandIpGateway,omitempty"`
		// The network mask of the network Element out-of-band management interface.
		OutOfBandIpMask *string `json:"OutOfBandIpMask,omitempty"`
		// The IPv4 address of the network Element out-of-band management interface.
		OutOfBandIpv4Address *string `json:"OutOfBandIpv4Address,omitempty"`
		// The default IPv4 gateway of the network Element out-of-band management interface.
		OutOfBandIpv4Gateway *string `json:"OutOfBandIpv4Gateway,omitempty"`
		// The network mask of the network Element out-of-band management interface.
		OutOfBandIpv4Mask *string `json:"OutOfBandIpv4Mask,omitempty"`
		// The IPv6 address of the network Element out-of-band management interface.
		OutOfBandIpv6Address *string `json:"OutOfBandIpv6Address,omitempty"`
		// The default IPv6 gateway of the network Element out-of-band management interface.
		OutOfBandIpv6Gateway *string `json:"OutOfBandIpv6Gateway,omitempty"`
		// The network mask of the network Element out-of-band management interface.
		OutOfBandIpv6Prefix *string `json:"OutOfBandIpv6Prefix,omitempty"`
		// The MAC address of the network Element out-of-band management interface.
		OutOfBandMac *string `json:"OutOfBandMac,omitempty"`
		// This field identifies the presence (equipped) or absence of the given component.
		Presence *string `json:"Presence,omitempty"`
		// This field identifies the revision of the given component.
		Revision *string `json:"Revision,omitempty"`
		// The Relative Name uniquely identifies an object within a given context.
		Rn *string `json:"Rn,omitempty"`
		// This field identifies the serial of the given component.
		Serial *string `json:"Serial,omitempty"`
		// The source object type of this view MO.
		SourceObjectType *string `json:"SourceObjectType,omitempty"`
		// The Switch Id of the network Element.
		SwitchId *string `json:"SwitchId,omitempty"`
		// The Thermal status of the fabric interconnect. * `unknown` - The default state of the sensor (in case no data is received). * `ok` - State of the sensor indicating the sensor's temperature range is okay. * `upper-non-recoverable` - State of the sensor indicating that the temperature is extremely high above normal range. * `upper-critical` - State of the sensor indicating that the temperature is above normal range. * `upper-non-critical` - State of the sensor indicating that the temperature is a little above the normal range. * `lower-non-critical` - State of the sensor indicating that the temperature is a little below the normal range. * `lower-critical` - State of the sensor indicating that the temperature is below normal range. * `lower-non-recoverable` - State of the sensor indicating that the temperature is extremely below normal range.
		Thermal *string `json:"Thermal,omitempty"`
		// Total available memory on this switch platform.
		TotalMemory *int64 `json:"TotalMemory,omitempty"`
		// This field identifies the vendor of the given component.
		Vendor *string `json:"Vendor,omitempty"`
		// Version holds the firmware version related information.
		Version          *string                              `json:"Version,omitempty"`
		RegisteredDevice *AssetDeviceRegistrationRelationship `json:"RegisteredDevice,omitempty"`
	}

	varNetworkElementSummaryWithoutEmbeddedStruct := NetworkElementSummaryWithoutEmbeddedStruct{}

	err = json.Unmarshal(bytes, &varNetworkElementSummaryWithoutEmbeddedStruct)
	if err == nil {
		varNetworkElementSummary := _NetworkElementSummary{}
		varNetworkElementSummary.ClassId = varNetworkElementSummaryWithoutEmbeddedStruct.ClassId
		varNetworkElementSummary.ObjectType = varNetworkElementSummaryWithoutEmbeddedStruct.ObjectType
		varNetworkElementSummary.AdminEvacState = varNetworkElementSummaryWithoutEmbeddedStruct.AdminEvacState
		varNetworkElementSummary.AdminInbandInterfaceState = varNetworkElementSummaryWithoutEmbeddedStruct.AdminInbandInterfaceState
		varNetworkElementSummary.AlarmSummary = varNetworkElementSummaryWithoutEmbeddedStruct.AlarmSummary
		varNetworkElementSummary.AvailableMemory = varNetworkElementSummaryWithoutEmbeddedStruct.AvailableMemory
		varNetworkElementSummary.DeviceMoId = varNetworkElementSummaryWithoutEmbeddedStruct.DeviceMoId
		varNetworkElementSummary.Dn = varNetworkElementSummaryWithoutEmbeddedStruct.Dn
		varNetworkElementSummary.EthernetMode = varNetworkElementSummaryWithoutEmbeddedStruct.EthernetMode
		varNetworkElementSummary.EthernetSwitchingMode = varNetworkElementSummaryWithoutEmbeddedStruct.EthernetSwitchingMode
		varNetworkElementSummary.FaultSummary = varNetworkElementSummaryWithoutEmbeddedStruct.FaultSummary
		varNetworkElementSummary.FcMode = varNetworkElementSummaryWithoutEmbeddedStruct.FcMode
		varNetworkElementSummary.FcSwitchingMode = varNetworkElementSummaryWithoutEmbeddedStruct.FcSwitchingMode
		varNetworkElementSummary.Firmware = varNetworkElementSummaryWithoutEmbeddedStruct.Firmware
		varNetworkElementSummary.InbandIpAddress = varNetworkElementSummaryWithoutEmbeddedStruct.InbandIpAddress
		varNetworkElementSummary.InbandIpGateway = varNetworkElementSummaryWithoutEmbeddedStruct.InbandIpGateway
		varNetworkElementSummary.InbandIpMask = varNetworkElementSummaryWithoutEmbeddedStruct.InbandIpMask
		varNetworkElementSummary.InbandVlan = varNetworkElementSummaryWithoutEmbeddedStruct.InbandVlan
		varNetworkElementSummary.Ipv4Address = varNetworkElementSummaryWithoutEmbeddedStruct.Ipv4Address
		varNetworkElementSummary.ManagementMode = varNetworkElementSummaryWithoutEmbeddedStruct.ManagementMode
		varNetworkElementSummary.Model = varNetworkElementSummaryWithoutEmbeddedStruct.Model
		varNetworkElementSummary.Name = varNetworkElementSummaryWithoutEmbeddedStruct.Name
		varNetworkElementSummary.NumEtherPorts = varNetworkElementSummaryWithoutEmbeddedStruct.NumEtherPorts
		varNetworkElementSummary.NumEtherPortsConfigured = varNetworkElementSummaryWithoutEmbeddedStruct.NumEtherPortsConfigured
		varNetworkElementSummary.NumEtherPortsLinkUp = varNetworkElementSummaryWithoutEmbeddedStruct.NumEtherPortsLinkUp
		varNetworkElementSummary.NumExpansionModules = varNetworkElementSummaryWithoutEmbeddedStruct.NumExpansionModules
		varNetworkElementSummary.NumFcPorts = varNetworkElementSummaryWithoutEmbeddedStruct.NumFcPorts
		varNetworkElementSummary.NumFcPortsConfigured = varNetworkElementSummaryWithoutEmbeddedStruct.NumFcPortsConfigured
		varNetworkElementSummary.NumFcPortsLinkUp = varNetworkElementSummaryWithoutEmbeddedStruct.NumFcPortsLinkUp
		varNetworkElementSummary.OperEvacState = varNetworkElementSummaryWithoutEmbeddedStruct.OperEvacState
		varNetworkElementSummary.Operability = varNetworkElementSummaryWithoutEmbeddedStruct.Operability
		varNetworkElementSummary.OutOfBandIpAddress = varNetworkElementSummaryWithoutEmbeddedStruct.OutOfBandIpAddress
		varNetworkElementSummary.OutOfBandIpGateway = varNetworkElementSummaryWithoutEmbeddedStruct.OutOfBandIpGateway
		varNetworkElementSummary.OutOfBandIpMask = varNetworkElementSummaryWithoutEmbeddedStruct.OutOfBandIpMask
		varNetworkElementSummary.OutOfBandIpv4Address = varNetworkElementSummaryWithoutEmbeddedStruct.OutOfBandIpv4Address
		varNetworkElementSummary.OutOfBandIpv4Gateway = varNetworkElementSummaryWithoutEmbeddedStruct.OutOfBandIpv4Gateway
		varNetworkElementSummary.OutOfBandIpv4Mask = varNetworkElementSummaryWithoutEmbeddedStruct.OutOfBandIpv4Mask
		varNetworkElementSummary.OutOfBandIpv6Address = varNetworkElementSummaryWithoutEmbeddedStruct.OutOfBandIpv6Address
		varNetworkElementSummary.OutOfBandIpv6Gateway = varNetworkElementSummaryWithoutEmbeddedStruct.OutOfBandIpv6Gateway
		varNetworkElementSummary.OutOfBandIpv6Prefix = varNetworkElementSummaryWithoutEmbeddedStruct.OutOfBandIpv6Prefix
		varNetworkElementSummary.OutOfBandMac = varNetworkElementSummaryWithoutEmbeddedStruct.OutOfBandMac
		varNetworkElementSummary.Presence = varNetworkElementSummaryWithoutEmbeddedStruct.Presence
		varNetworkElementSummary.Revision = varNetworkElementSummaryWithoutEmbeddedStruct.Revision
		varNetworkElementSummary.Rn = varNetworkElementSummaryWithoutEmbeddedStruct.Rn
		varNetworkElementSummary.Serial = varNetworkElementSummaryWithoutEmbeddedStruct.Serial
		varNetworkElementSummary.SourceObjectType = varNetworkElementSummaryWithoutEmbeddedStruct.SourceObjectType
		varNetworkElementSummary.SwitchId = varNetworkElementSummaryWithoutEmbeddedStruct.SwitchId
		varNetworkElementSummary.Thermal = varNetworkElementSummaryWithoutEmbeddedStruct.Thermal
		varNetworkElementSummary.TotalMemory = varNetworkElementSummaryWithoutEmbeddedStruct.TotalMemory
		varNetworkElementSummary.Vendor = varNetworkElementSummaryWithoutEmbeddedStruct.Vendor
		varNetworkElementSummary.Version = varNetworkElementSummaryWithoutEmbeddedStruct.Version
		varNetworkElementSummary.RegisteredDevice = varNetworkElementSummaryWithoutEmbeddedStruct.RegisteredDevice
		*o = NetworkElementSummary(varNetworkElementSummary)
	} else {
		return err
	}

	varNetworkElementSummary := _NetworkElementSummary{}

	err = json.Unmarshal(bytes, &varNetworkElementSummary)
	if err == nil {
		o.ViewsView = varNetworkElementSummary.ViewsView
	} else {
		return err
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "ClassId")
		delete(additionalProperties, "ObjectType")
		delete(additionalProperties, "AdminEvacState")
		delete(additionalProperties, "AdminInbandInterfaceState")
		delete(additionalProperties, "AlarmSummary")
		delete(additionalProperties, "AvailableMemory")
		delete(additionalProperties, "DeviceMoId")
		delete(additionalProperties, "Dn")
		delete(additionalProperties, "EthernetMode")
		delete(additionalProperties, "EthernetSwitchingMode")
		delete(additionalProperties, "FaultSummary")
		delete(additionalProperties, "FcMode")
		delete(additionalProperties, "FcSwitchingMode")
		delete(additionalProperties, "Firmware")
		delete(additionalProperties, "InbandIpAddress")
		delete(additionalProperties, "InbandIpGateway")
		delete(additionalProperties, "InbandIpMask")
		delete(additionalProperties, "InbandVlan")
		delete(additionalProperties, "Ipv4Address")
		delete(additionalProperties, "ManagementMode")
		delete(additionalProperties, "Model")
		delete(additionalProperties, "Name")
		delete(additionalProperties, "NumEtherPorts")
		delete(additionalProperties, "NumEtherPortsConfigured")
		delete(additionalProperties, "NumEtherPortsLinkUp")
		delete(additionalProperties, "NumExpansionModules")
		delete(additionalProperties, "NumFcPorts")
		delete(additionalProperties, "NumFcPortsConfigured")
		delete(additionalProperties, "NumFcPortsLinkUp")
		delete(additionalProperties, "OperEvacState")
		delete(additionalProperties, "Operability")
		delete(additionalProperties, "OutOfBandIpAddress")
		delete(additionalProperties, "OutOfBandIpGateway")
		delete(additionalProperties, "OutOfBandIpMask")
		delete(additionalProperties, "OutOfBandIpv4Address")
		delete(additionalProperties, "OutOfBandIpv4Gateway")
		delete(additionalProperties, "OutOfBandIpv4Mask")
		delete(additionalProperties, "OutOfBandIpv6Address")
		delete(additionalProperties, "OutOfBandIpv6Gateway")
		delete(additionalProperties, "OutOfBandIpv6Prefix")
		delete(additionalProperties, "OutOfBandMac")
		delete(additionalProperties, "Presence")
		delete(additionalProperties, "Revision")
		delete(additionalProperties, "Rn")
		delete(additionalProperties, "Serial")
		delete(additionalProperties, "SourceObjectType")
		delete(additionalProperties, "SwitchId")
		delete(additionalProperties, "Thermal")
		delete(additionalProperties, "TotalMemory")
		delete(additionalProperties, "Vendor")
		delete(additionalProperties, "Version")
		delete(additionalProperties, "RegisteredDevice")

		// remove fields from embedded structs
		reflectViewsView := reflect.ValueOf(o.ViewsView)
		for i := 0; i < reflectViewsView.Type().NumField(); i++ {
			t := reflectViewsView.Type().Field(i)

			if jsonTag := t.Tag.Get("json"); jsonTag != "" {
				fieldName := ""
				if commaIdx := strings.Index(jsonTag, ","); commaIdx > 0 {
					fieldName = jsonTag[:commaIdx]
				} else {
					fieldName = jsonTag
				}
				if fieldName != "AdditionalProperties" {
					delete(additionalProperties, fieldName)
				}
			}
		}

		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableNetworkElementSummary struct {
	value *NetworkElementSummary
	isSet bool
}

func (v NullableNetworkElementSummary) Get() *NetworkElementSummary {
	return v.value
}

func (v *NullableNetworkElementSummary) Set(val *NetworkElementSummary) {
	v.value = val
	v.isSet = true
}

func (v NullableNetworkElementSummary) IsSet() bool {
	return v.isSet
}

func (v *NullableNetworkElementSummary) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNetworkElementSummary(val *NetworkElementSummary) *NullableNetworkElementSummary {
	return &NullableNetworkElementSummary{value: val, isSet: true}
}

func (v NullableNetworkElementSummary) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNetworkElementSummary) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
