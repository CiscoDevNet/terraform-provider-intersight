/*
 * Cisco Intersight
 *
 * Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations. The Intersight OpenAPI document defines the complete set of properties that are returned in the HTTP response. From that perspective, a client can expect that no additional properties are returned, unless these properties are explicitly defined in the OpenAPI document. However, when a client uses an older version of the Intersight OpenAPI document, the server may send additional properties because the software is more recent than the client. In that case, the client may receive properties that it does not know about. Some generated SDKs perform a strict validation of the HTTP response body against the OpenAPI document. This document was created on 2021-07-21T16:37:30Z.
 *
 * API version: 1.0.9-4403
 * Contact: intersight@cisco.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package intersight

import (
	"encoding/json"
	"reflect"
	"strings"
)

// StorageVirtualDrive A Virtual Disk Drive or Logical Unit Number.
type StorageVirtualDrive struct {
	EquipmentBase
	// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.
	ClassId string `json:"ClassId"`
	// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
	ObjectType string `json:"ObjectType"`
	// The access policy of the virtual drive.
	AccessPolicy *string `json:"AccessPolicy,omitempty"`
	// The current write cache policy of the virtual drive.
	ActualWriteCachePolicy *string `json:"ActualWriteCachePolicy,omitempty"`
	// Available storage capacity of the virtual drive.
	AvailableSize *string `json:"AvailableSize,omitempty"`
	// Block size of the virtual drive.
	BlockSize *string `json:"BlockSize,omitempty"`
	// The virtual drive bootable state.
	Bootable *string `json:"Bootable,omitempty"`
	// The configuration state of the virtual drive.
	ConfigState *string `json:"ConfigState,omitempty"`
	// The requested write cache policy of the virtual drive.
	ConfiguredWriteCachePolicy *string `json:"ConfiguredWriteCachePolicy,omitempty"`
	// The connection protocol of the virtual drive.
	ConnectionProtocol *string `json:"ConnectionProtocol,omitempty"`
	// The state of the drive cache of the virtual drive.
	DriveCache *string `json:"DriveCache,omitempty"`
	// The driveSecurity state of the Virtual drive.
	DriveSecurity *string `json:"DriveSecurity,omitempty"`
	// The state of the Virtual drive.
	DriveState *string `json:"DriveState,omitempty"`
	// The Input/Output Policy defined on the Virtual drive.
	IoPolicy *string `json:"IoPolicy,omitempty"`
	// The name of the Virtual drive.
	Name *string `json:"Name,omitempty"`
	// Number of Blocks on the Physical Disk.
	NumBlocks *string `json:"NumBlocks,omitempty"`
	// The current operational state of Virtual drive.
	OperState *string `json:"OperState,omitempty"`
	// The current operability state of Virtual drive.
	Operability *string `json:"Operability,omitempty"`
	// The block size of the the virtual drive.
	PhysicalBlockSize *string `json:"PhysicalBlockSize,omitempty"`
	// The read-ahead cache mode of the virtual drive.
	ReadPolicy *string `json:"ReadPolicy,omitempty"`
	// The security flags set for this virtual drive.
	SecurityFlags *string `json:"SecurityFlags,omitempty"`
	// The size of the virtual drive in MB.
	Size *string `json:"Size,omitempty"`
	// The strip size is the portion of a stripe that resides on a single drive in the drive group, this is measured in KB.
	StripSize *string `json:"StripSize,omitempty"`
	// The raid type of the virtual drive.
	Type *string `json:"Type,omitempty"`
	// The uuid of the virtual drive.
	Uuid *string `json:"Uuid,omitempty"`
	// The UUID value of the vendor.
	VendorUuid *string `json:"VendorUuid,omitempty"`
	// The identifier for this Virtual drive.
	VirtualDriveId      *string                          `json:"VirtualDriveId,omitempty"`
	DiskGroup           *StorageDiskGroupRelationship    `json:"DiskGroup,omitempty"`
	InventoryDeviceInfo *InventoryDeviceInfoRelationship `json:"InventoryDeviceInfo,omitempty"`
	// An array of relationships to storagePhysicalDiskUsage resources.
	PhysicalDiskUsages           []StoragePhysicalDiskUsageRelationship    `json:"PhysicalDiskUsages,omitempty"`
	RegisteredDevice             *AssetDeviceRegistrationRelationship      `json:"RegisteredDevice,omitempty"`
	StorageController            *StorageControllerRelationship            `json:"StorageController,omitempty"`
	StorageVirtualDriveContainer *StorageVirtualDriveContainerRelationship `json:"StorageVirtualDriveContainer,omitempty"`
	// An array of relationships to storageVdMemberEp resources.
	VdMemberEps           []StorageVdMemberEpRelationship           `json:"VdMemberEps,omitempty"`
	VirtualDriveExtension *StorageVirtualDriveExtensionRelationship `json:"VirtualDriveExtension,omitempty"`
	AdditionalProperties  map[string]interface{}
}

type _StorageVirtualDrive StorageVirtualDrive

// NewStorageVirtualDrive instantiates a new StorageVirtualDrive object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStorageVirtualDrive(classId string, objectType string) *StorageVirtualDrive {
	this := StorageVirtualDrive{}
	this.ClassId = classId
	this.ObjectType = objectType
	return &this
}

// NewStorageVirtualDriveWithDefaults instantiates a new StorageVirtualDrive object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStorageVirtualDriveWithDefaults() *StorageVirtualDrive {
	this := StorageVirtualDrive{}
	var classId string = "storage.VirtualDrive"
	this.ClassId = classId
	var objectType string = "storage.VirtualDrive"
	this.ObjectType = objectType
	return &this
}

// GetClassId returns the ClassId field value
func (o *StorageVirtualDrive) GetClassId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ClassId
}

// GetClassIdOk returns a tuple with the ClassId field value
// and a boolean to check if the value has been set.
func (o *StorageVirtualDrive) GetClassIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ClassId, true
}

// SetClassId sets field value
func (o *StorageVirtualDrive) SetClassId(v string) {
	o.ClassId = v
}

// GetObjectType returns the ObjectType field value
func (o *StorageVirtualDrive) GetObjectType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ObjectType
}

// GetObjectTypeOk returns a tuple with the ObjectType field value
// and a boolean to check if the value has been set.
func (o *StorageVirtualDrive) GetObjectTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ObjectType, true
}

// SetObjectType sets field value
func (o *StorageVirtualDrive) SetObjectType(v string) {
	o.ObjectType = v
}

// GetAccessPolicy returns the AccessPolicy field value if set, zero value otherwise.
func (o *StorageVirtualDrive) GetAccessPolicy() string {
	if o == nil || o.AccessPolicy == nil {
		var ret string
		return ret
	}
	return *o.AccessPolicy
}

// GetAccessPolicyOk returns a tuple with the AccessPolicy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageVirtualDrive) GetAccessPolicyOk() (*string, bool) {
	if o == nil || o.AccessPolicy == nil {
		return nil, false
	}
	return o.AccessPolicy, true
}

// HasAccessPolicy returns a boolean if a field has been set.
func (o *StorageVirtualDrive) HasAccessPolicy() bool {
	if o != nil && o.AccessPolicy != nil {
		return true
	}

	return false
}

// SetAccessPolicy gets a reference to the given string and assigns it to the AccessPolicy field.
func (o *StorageVirtualDrive) SetAccessPolicy(v string) {
	o.AccessPolicy = &v
}

// GetActualWriteCachePolicy returns the ActualWriteCachePolicy field value if set, zero value otherwise.
func (o *StorageVirtualDrive) GetActualWriteCachePolicy() string {
	if o == nil || o.ActualWriteCachePolicy == nil {
		var ret string
		return ret
	}
	return *o.ActualWriteCachePolicy
}

// GetActualWriteCachePolicyOk returns a tuple with the ActualWriteCachePolicy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageVirtualDrive) GetActualWriteCachePolicyOk() (*string, bool) {
	if o == nil || o.ActualWriteCachePolicy == nil {
		return nil, false
	}
	return o.ActualWriteCachePolicy, true
}

// HasActualWriteCachePolicy returns a boolean if a field has been set.
func (o *StorageVirtualDrive) HasActualWriteCachePolicy() bool {
	if o != nil && o.ActualWriteCachePolicy != nil {
		return true
	}

	return false
}

// SetActualWriteCachePolicy gets a reference to the given string and assigns it to the ActualWriteCachePolicy field.
func (o *StorageVirtualDrive) SetActualWriteCachePolicy(v string) {
	o.ActualWriteCachePolicy = &v
}

// GetAvailableSize returns the AvailableSize field value if set, zero value otherwise.
func (o *StorageVirtualDrive) GetAvailableSize() string {
	if o == nil || o.AvailableSize == nil {
		var ret string
		return ret
	}
	return *o.AvailableSize
}

// GetAvailableSizeOk returns a tuple with the AvailableSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageVirtualDrive) GetAvailableSizeOk() (*string, bool) {
	if o == nil || o.AvailableSize == nil {
		return nil, false
	}
	return o.AvailableSize, true
}

// HasAvailableSize returns a boolean if a field has been set.
func (o *StorageVirtualDrive) HasAvailableSize() bool {
	if o != nil && o.AvailableSize != nil {
		return true
	}

	return false
}

// SetAvailableSize gets a reference to the given string and assigns it to the AvailableSize field.
func (o *StorageVirtualDrive) SetAvailableSize(v string) {
	o.AvailableSize = &v
}

// GetBlockSize returns the BlockSize field value if set, zero value otherwise.
func (o *StorageVirtualDrive) GetBlockSize() string {
	if o == nil || o.BlockSize == nil {
		var ret string
		return ret
	}
	return *o.BlockSize
}

// GetBlockSizeOk returns a tuple with the BlockSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageVirtualDrive) GetBlockSizeOk() (*string, bool) {
	if o == nil || o.BlockSize == nil {
		return nil, false
	}
	return o.BlockSize, true
}

// HasBlockSize returns a boolean if a field has been set.
func (o *StorageVirtualDrive) HasBlockSize() bool {
	if o != nil && o.BlockSize != nil {
		return true
	}

	return false
}

// SetBlockSize gets a reference to the given string and assigns it to the BlockSize field.
func (o *StorageVirtualDrive) SetBlockSize(v string) {
	o.BlockSize = &v
}

// GetBootable returns the Bootable field value if set, zero value otherwise.
func (o *StorageVirtualDrive) GetBootable() string {
	if o == nil || o.Bootable == nil {
		var ret string
		return ret
	}
	return *o.Bootable
}

// GetBootableOk returns a tuple with the Bootable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageVirtualDrive) GetBootableOk() (*string, bool) {
	if o == nil || o.Bootable == nil {
		return nil, false
	}
	return o.Bootable, true
}

// HasBootable returns a boolean if a field has been set.
func (o *StorageVirtualDrive) HasBootable() bool {
	if o != nil && o.Bootable != nil {
		return true
	}

	return false
}

// SetBootable gets a reference to the given string and assigns it to the Bootable field.
func (o *StorageVirtualDrive) SetBootable(v string) {
	o.Bootable = &v
}

// GetConfigState returns the ConfigState field value if set, zero value otherwise.
func (o *StorageVirtualDrive) GetConfigState() string {
	if o == nil || o.ConfigState == nil {
		var ret string
		return ret
	}
	return *o.ConfigState
}

// GetConfigStateOk returns a tuple with the ConfigState field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageVirtualDrive) GetConfigStateOk() (*string, bool) {
	if o == nil || o.ConfigState == nil {
		return nil, false
	}
	return o.ConfigState, true
}

// HasConfigState returns a boolean if a field has been set.
func (o *StorageVirtualDrive) HasConfigState() bool {
	if o != nil && o.ConfigState != nil {
		return true
	}

	return false
}

// SetConfigState gets a reference to the given string and assigns it to the ConfigState field.
func (o *StorageVirtualDrive) SetConfigState(v string) {
	o.ConfigState = &v
}

// GetConfiguredWriteCachePolicy returns the ConfiguredWriteCachePolicy field value if set, zero value otherwise.
func (o *StorageVirtualDrive) GetConfiguredWriteCachePolicy() string {
	if o == nil || o.ConfiguredWriteCachePolicy == nil {
		var ret string
		return ret
	}
	return *o.ConfiguredWriteCachePolicy
}

// GetConfiguredWriteCachePolicyOk returns a tuple with the ConfiguredWriteCachePolicy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageVirtualDrive) GetConfiguredWriteCachePolicyOk() (*string, bool) {
	if o == nil || o.ConfiguredWriteCachePolicy == nil {
		return nil, false
	}
	return o.ConfiguredWriteCachePolicy, true
}

// HasConfiguredWriteCachePolicy returns a boolean if a field has been set.
func (o *StorageVirtualDrive) HasConfiguredWriteCachePolicy() bool {
	if o != nil && o.ConfiguredWriteCachePolicy != nil {
		return true
	}

	return false
}

// SetConfiguredWriteCachePolicy gets a reference to the given string and assigns it to the ConfiguredWriteCachePolicy field.
func (o *StorageVirtualDrive) SetConfiguredWriteCachePolicy(v string) {
	o.ConfiguredWriteCachePolicy = &v
}

// GetConnectionProtocol returns the ConnectionProtocol field value if set, zero value otherwise.
func (o *StorageVirtualDrive) GetConnectionProtocol() string {
	if o == nil || o.ConnectionProtocol == nil {
		var ret string
		return ret
	}
	return *o.ConnectionProtocol
}

// GetConnectionProtocolOk returns a tuple with the ConnectionProtocol field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageVirtualDrive) GetConnectionProtocolOk() (*string, bool) {
	if o == nil || o.ConnectionProtocol == nil {
		return nil, false
	}
	return o.ConnectionProtocol, true
}

// HasConnectionProtocol returns a boolean if a field has been set.
func (o *StorageVirtualDrive) HasConnectionProtocol() bool {
	if o != nil && o.ConnectionProtocol != nil {
		return true
	}

	return false
}

// SetConnectionProtocol gets a reference to the given string and assigns it to the ConnectionProtocol field.
func (o *StorageVirtualDrive) SetConnectionProtocol(v string) {
	o.ConnectionProtocol = &v
}

// GetDriveCache returns the DriveCache field value if set, zero value otherwise.
func (o *StorageVirtualDrive) GetDriveCache() string {
	if o == nil || o.DriveCache == nil {
		var ret string
		return ret
	}
	return *o.DriveCache
}

// GetDriveCacheOk returns a tuple with the DriveCache field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageVirtualDrive) GetDriveCacheOk() (*string, bool) {
	if o == nil || o.DriveCache == nil {
		return nil, false
	}
	return o.DriveCache, true
}

// HasDriveCache returns a boolean if a field has been set.
func (o *StorageVirtualDrive) HasDriveCache() bool {
	if o != nil && o.DriveCache != nil {
		return true
	}

	return false
}

// SetDriveCache gets a reference to the given string and assigns it to the DriveCache field.
func (o *StorageVirtualDrive) SetDriveCache(v string) {
	o.DriveCache = &v
}

// GetDriveSecurity returns the DriveSecurity field value if set, zero value otherwise.
func (o *StorageVirtualDrive) GetDriveSecurity() string {
	if o == nil || o.DriveSecurity == nil {
		var ret string
		return ret
	}
	return *o.DriveSecurity
}

// GetDriveSecurityOk returns a tuple with the DriveSecurity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageVirtualDrive) GetDriveSecurityOk() (*string, bool) {
	if o == nil || o.DriveSecurity == nil {
		return nil, false
	}
	return o.DriveSecurity, true
}

// HasDriveSecurity returns a boolean if a field has been set.
func (o *StorageVirtualDrive) HasDriveSecurity() bool {
	if o != nil && o.DriveSecurity != nil {
		return true
	}

	return false
}

// SetDriveSecurity gets a reference to the given string and assigns it to the DriveSecurity field.
func (o *StorageVirtualDrive) SetDriveSecurity(v string) {
	o.DriveSecurity = &v
}

// GetDriveState returns the DriveState field value if set, zero value otherwise.
func (o *StorageVirtualDrive) GetDriveState() string {
	if o == nil || o.DriveState == nil {
		var ret string
		return ret
	}
	return *o.DriveState
}

// GetDriveStateOk returns a tuple with the DriveState field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageVirtualDrive) GetDriveStateOk() (*string, bool) {
	if o == nil || o.DriveState == nil {
		return nil, false
	}
	return o.DriveState, true
}

// HasDriveState returns a boolean if a field has been set.
func (o *StorageVirtualDrive) HasDriveState() bool {
	if o != nil && o.DriveState != nil {
		return true
	}

	return false
}

// SetDriveState gets a reference to the given string and assigns it to the DriveState field.
func (o *StorageVirtualDrive) SetDriveState(v string) {
	o.DriveState = &v
}

// GetIoPolicy returns the IoPolicy field value if set, zero value otherwise.
func (o *StorageVirtualDrive) GetIoPolicy() string {
	if o == nil || o.IoPolicy == nil {
		var ret string
		return ret
	}
	return *o.IoPolicy
}

// GetIoPolicyOk returns a tuple with the IoPolicy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageVirtualDrive) GetIoPolicyOk() (*string, bool) {
	if o == nil || o.IoPolicy == nil {
		return nil, false
	}
	return o.IoPolicy, true
}

// HasIoPolicy returns a boolean if a field has been set.
func (o *StorageVirtualDrive) HasIoPolicy() bool {
	if o != nil && o.IoPolicy != nil {
		return true
	}

	return false
}

// SetIoPolicy gets a reference to the given string and assigns it to the IoPolicy field.
func (o *StorageVirtualDrive) SetIoPolicy(v string) {
	o.IoPolicy = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *StorageVirtualDrive) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageVirtualDrive) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *StorageVirtualDrive) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *StorageVirtualDrive) SetName(v string) {
	o.Name = &v
}

// GetNumBlocks returns the NumBlocks field value if set, zero value otherwise.
func (o *StorageVirtualDrive) GetNumBlocks() string {
	if o == nil || o.NumBlocks == nil {
		var ret string
		return ret
	}
	return *o.NumBlocks
}

// GetNumBlocksOk returns a tuple with the NumBlocks field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageVirtualDrive) GetNumBlocksOk() (*string, bool) {
	if o == nil || o.NumBlocks == nil {
		return nil, false
	}
	return o.NumBlocks, true
}

// HasNumBlocks returns a boolean if a field has been set.
func (o *StorageVirtualDrive) HasNumBlocks() bool {
	if o != nil && o.NumBlocks != nil {
		return true
	}

	return false
}

// SetNumBlocks gets a reference to the given string and assigns it to the NumBlocks field.
func (o *StorageVirtualDrive) SetNumBlocks(v string) {
	o.NumBlocks = &v
}

// GetOperState returns the OperState field value if set, zero value otherwise.
func (o *StorageVirtualDrive) GetOperState() string {
	if o == nil || o.OperState == nil {
		var ret string
		return ret
	}
	return *o.OperState
}

// GetOperStateOk returns a tuple with the OperState field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageVirtualDrive) GetOperStateOk() (*string, bool) {
	if o == nil || o.OperState == nil {
		return nil, false
	}
	return o.OperState, true
}

// HasOperState returns a boolean if a field has been set.
func (o *StorageVirtualDrive) HasOperState() bool {
	if o != nil && o.OperState != nil {
		return true
	}

	return false
}

// SetOperState gets a reference to the given string and assigns it to the OperState field.
func (o *StorageVirtualDrive) SetOperState(v string) {
	o.OperState = &v
}

// GetOperability returns the Operability field value if set, zero value otherwise.
func (o *StorageVirtualDrive) GetOperability() string {
	if o == nil || o.Operability == nil {
		var ret string
		return ret
	}
	return *o.Operability
}

// GetOperabilityOk returns a tuple with the Operability field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageVirtualDrive) GetOperabilityOk() (*string, bool) {
	if o == nil || o.Operability == nil {
		return nil, false
	}
	return o.Operability, true
}

// HasOperability returns a boolean if a field has been set.
func (o *StorageVirtualDrive) HasOperability() bool {
	if o != nil && o.Operability != nil {
		return true
	}

	return false
}

// SetOperability gets a reference to the given string and assigns it to the Operability field.
func (o *StorageVirtualDrive) SetOperability(v string) {
	o.Operability = &v
}

// GetPhysicalBlockSize returns the PhysicalBlockSize field value if set, zero value otherwise.
func (o *StorageVirtualDrive) GetPhysicalBlockSize() string {
	if o == nil || o.PhysicalBlockSize == nil {
		var ret string
		return ret
	}
	return *o.PhysicalBlockSize
}

// GetPhysicalBlockSizeOk returns a tuple with the PhysicalBlockSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageVirtualDrive) GetPhysicalBlockSizeOk() (*string, bool) {
	if o == nil || o.PhysicalBlockSize == nil {
		return nil, false
	}
	return o.PhysicalBlockSize, true
}

// HasPhysicalBlockSize returns a boolean if a field has been set.
func (o *StorageVirtualDrive) HasPhysicalBlockSize() bool {
	if o != nil && o.PhysicalBlockSize != nil {
		return true
	}

	return false
}

// SetPhysicalBlockSize gets a reference to the given string and assigns it to the PhysicalBlockSize field.
func (o *StorageVirtualDrive) SetPhysicalBlockSize(v string) {
	o.PhysicalBlockSize = &v
}

// GetReadPolicy returns the ReadPolicy field value if set, zero value otherwise.
func (o *StorageVirtualDrive) GetReadPolicy() string {
	if o == nil || o.ReadPolicy == nil {
		var ret string
		return ret
	}
	return *o.ReadPolicy
}

// GetReadPolicyOk returns a tuple with the ReadPolicy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageVirtualDrive) GetReadPolicyOk() (*string, bool) {
	if o == nil || o.ReadPolicy == nil {
		return nil, false
	}
	return o.ReadPolicy, true
}

// HasReadPolicy returns a boolean if a field has been set.
func (o *StorageVirtualDrive) HasReadPolicy() bool {
	if o != nil && o.ReadPolicy != nil {
		return true
	}

	return false
}

// SetReadPolicy gets a reference to the given string and assigns it to the ReadPolicy field.
func (o *StorageVirtualDrive) SetReadPolicy(v string) {
	o.ReadPolicy = &v
}

// GetSecurityFlags returns the SecurityFlags field value if set, zero value otherwise.
func (o *StorageVirtualDrive) GetSecurityFlags() string {
	if o == nil || o.SecurityFlags == nil {
		var ret string
		return ret
	}
	return *o.SecurityFlags
}

// GetSecurityFlagsOk returns a tuple with the SecurityFlags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageVirtualDrive) GetSecurityFlagsOk() (*string, bool) {
	if o == nil || o.SecurityFlags == nil {
		return nil, false
	}
	return o.SecurityFlags, true
}

// HasSecurityFlags returns a boolean if a field has been set.
func (o *StorageVirtualDrive) HasSecurityFlags() bool {
	if o != nil && o.SecurityFlags != nil {
		return true
	}

	return false
}

// SetSecurityFlags gets a reference to the given string and assigns it to the SecurityFlags field.
func (o *StorageVirtualDrive) SetSecurityFlags(v string) {
	o.SecurityFlags = &v
}

// GetSize returns the Size field value if set, zero value otherwise.
func (o *StorageVirtualDrive) GetSize() string {
	if o == nil || o.Size == nil {
		var ret string
		return ret
	}
	return *o.Size
}

// GetSizeOk returns a tuple with the Size field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageVirtualDrive) GetSizeOk() (*string, bool) {
	if o == nil || o.Size == nil {
		return nil, false
	}
	return o.Size, true
}

// HasSize returns a boolean if a field has been set.
func (o *StorageVirtualDrive) HasSize() bool {
	if o != nil && o.Size != nil {
		return true
	}

	return false
}

// SetSize gets a reference to the given string and assigns it to the Size field.
func (o *StorageVirtualDrive) SetSize(v string) {
	o.Size = &v
}

// GetStripSize returns the StripSize field value if set, zero value otherwise.
func (o *StorageVirtualDrive) GetStripSize() string {
	if o == nil || o.StripSize == nil {
		var ret string
		return ret
	}
	return *o.StripSize
}

// GetStripSizeOk returns a tuple with the StripSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageVirtualDrive) GetStripSizeOk() (*string, bool) {
	if o == nil || o.StripSize == nil {
		return nil, false
	}
	return o.StripSize, true
}

// HasStripSize returns a boolean if a field has been set.
func (o *StorageVirtualDrive) HasStripSize() bool {
	if o != nil && o.StripSize != nil {
		return true
	}

	return false
}

// SetStripSize gets a reference to the given string and assigns it to the StripSize field.
func (o *StorageVirtualDrive) SetStripSize(v string) {
	o.StripSize = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *StorageVirtualDrive) GetType() string {
	if o == nil || o.Type == nil {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageVirtualDrive) GetTypeOk() (*string, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *StorageVirtualDrive) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *StorageVirtualDrive) SetType(v string) {
	o.Type = &v
}

// GetUuid returns the Uuid field value if set, zero value otherwise.
func (o *StorageVirtualDrive) GetUuid() string {
	if o == nil || o.Uuid == nil {
		var ret string
		return ret
	}
	return *o.Uuid
}

// GetUuidOk returns a tuple with the Uuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageVirtualDrive) GetUuidOk() (*string, bool) {
	if o == nil || o.Uuid == nil {
		return nil, false
	}
	return o.Uuid, true
}

// HasUuid returns a boolean if a field has been set.
func (o *StorageVirtualDrive) HasUuid() bool {
	if o != nil && o.Uuid != nil {
		return true
	}

	return false
}

// SetUuid gets a reference to the given string and assigns it to the Uuid field.
func (o *StorageVirtualDrive) SetUuid(v string) {
	o.Uuid = &v
}

// GetVendorUuid returns the VendorUuid field value if set, zero value otherwise.
func (o *StorageVirtualDrive) GetVendorUuid() string {
	if o == nil || o.VendorUuid == nil {
		var ret string
		return ret
	}
	return *o.VendorUuid
}

// GetVendorUuidOk returns a tuple with the VendorUuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageVirtualDrive) GetVendorUuidOk() (*string, bool) {
	if o == nil || o.VendorUuid == nil {
		return nil, false
	}
	return o.VendorUuid, true
}

// HasVendorUuid returns a boolean if a field has been set.
func (o *StorageVirtualDrive) HasVendorUuid() bool {
	if o != nil && o.VendorUuid != nil {
		return true
	}

	return false
}

// SetVendorUuid gets a reference to the given string and assigns it to the VendorUuid field.
func (o *StorageVirtualDrive) SetVendorUuid(v string) {
	o.VendorUuid = &v
}

// GetVirtualDriveId returns the VirtualDriveId field value if set, zero value otherwise.
func (o *StorageVirtualDrive) GetVirtualDriveId() string {
	if o == nil || o.VirtualDriveId == nil {
		var ret string
		return ret
	}
	return *o.VirtualDriveId
}

// GetVirtualDriveIdOk returns a tuple with the VirtualDriveId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageVirtualDrive) GetVirtualDriveIdOk() (*string, bool) {
	if o == nil || o.VirtualDriveId == nil {
		return nil, false
	}
	return o.VirtualDriveId, true
}

// HasVirtualDriveId returns a boolean if a field has been set.
func (o *StorageVirtualDrive) HasVirtualDriveId() bool {
	if o != nil && o.VirtualDriveId != nil {
		return true
	}

	return false
}

// SetVirtualDriveId gets a reference to the given string and assigns it to the VirtualDriveId field.
func (o *StorageVirtualDrive) SetVirtualDriveId(v string) {
	o.VirtualDriveId = &v
}

// GetDiskGroup returns the DiskGroup field value if set, zero value otherwise.
func (o *StorageVirtualDrive) GetDiskGroup() StorageDiskGroupRelationship {
	if o == nil || o.DiskGroup == nil {
		var ret StorageDiskGroupRelationship
		return ret
	}
	return *o.DiskGroup
}

// GetDiskGroupOk returns a tuple with the DiskGroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageVirtualDrive) GetDiskGroupOk() (*StorageDiskGroupRelationship, bool) {
	if o == nil || o.DiskGroup == nil {
		return nil, false
	}
	return o.DiskGroup, true
}

// HasDiskGroup returns a boolean if a field has been set.
func (o *StorageVirtualDrive) HasDiskGroup() bool {
	if o != nil && o.DiskGroup != nil {
		return true
	}

	return false
}

// SetDiskGroup gets a reference to the given StorageDiskGroupRelationship and assigns it to the DiskGroup field.
func (o *StorageVirtualDrive) SetDiskGroup(v StorageDiskGroupRelationship) {
	o.DiskGroup = &v
}

// GetInventoryDeviceInfo returns the InventoryDeviceInfo field value if set, zero value otherwise.
func (o *StorageVirtualDrive) GetInventoryDeviceInfo() InventoryDeviceInfoRelationship {
	if o == nil || o.InventoryDeviceInfo == nil {
		var ret InventoryDeviceInfoRelationship
		return ret
	}
	return *o.InventoryDeviceInfo
}

// GetInventoryDeviceInfoOk returns a tuple with the InventoryDeviceInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageVirtualDrive) GetInventoryDeviceInfoOk() (*InventoryDeviceInfoRelationship, bool) {
	if o == nil || o.InventoryDeviceInfo == nil {
		return nil, false
	}
	return o.InventoryDeviceInfo, true
}

// HasInventoryDeviceInfo returns a boolean if a field has been set.
func (o *StorageVirtualDrive) HasInventoryDeviceInfo() bool {
	if o != nil && o.InventoryDeviceInfo != nil {
		return true
	}

	return false
}

// SetInventoryDeviceInfo gets a reference to the given InventoryDeviceInfoRelationship and assigns it to the InventoryDeviceInfo field.
func (o *StorageVirtualDrive) SetInventoryDeviceInfo(v InventoryDeviceInfoRelationship) {
	o.InventoryDeviceInfo = &v
}

// GetPhysicalDiskUsages returns the PhysicalDiskUsages field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *StorageVirtualDrive) GetPhysicalDiskUsages() []StoragePhysicalDiskUsageRelationship {
	if o == nil {
		var ret []StoragePhysicalDiskUsageRelationship
		return ret
	}
	return o.PhysicalDiskUsages
}

// GetPhysicalDiskUsagesOk returns a tuple with the PhysicalDiskUsages field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *StorageVirtualDrive) GetPhysicalDiskUsagesOk() (*[]StoragePhysicalDiskUsageRelationship, bool) {
	if o == nil || o.PhysicalDiskUsages == nil {
		return nil, false
	}
	return &o.PhysicalDiskUsages, true
}

// HasPhysicalDiskUsages returns a boolean if a field has been set.
func (o *StorageVirtualDrive) HasPhysicalDiskUsages() bool {
	if o != nil && o.PhysicalDiskUsages != nil {
		return true
	}

	return false
}

// SetPhysicalDiskUsages gets a reference to the given []StoragePhysicalDiskUsageRelationship and assigns it to the PhysicalDiskUsages field.
func (o *StorageVirtualDrive) SetPhysicalDiskUsages(v []StoragePhysicalDiskUsageRelationship) {
	o.PhysicalDiskUsages = v
}

// GetRegisteredDevice returns the RegisteredDevice field value if set, zero value otherwise.
func (o *StorageVirtualDrive) GetRegisteredDevice() AssetDeviceRegistrationRelationship {
	if o == nil || o.RegisteredDevice == nil {
		var ret AssetDeviceRegistrationRelationship
		return ret
	}
	return *o.RegisteredDevice
}

// GetRegisteredDeviceOk returns a tuple with the RegisteredDevice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageVirtualDrive) GetRegisteredDeviceOk() (*AssetDeviceRegistrationRelationship, bool) {
	if o == nil || o.RegisteredDevice == nil {
		return nil, false
	}
	return o.RegisteredDevice, true
}

// HasRegisteredDevice returns a boolean if a field has been set.
func (o *StorageVirtualDrive) HasRegisteredDevice() bool {
	if o != nil && o.RegisteredDevice != nil {
		return true
	}

	return false
}

// SetRegisteredDevice gets a reference to the given AssetDeviceRegistrationRelationship and assigns it to the RegisteredDevice field.
func (o *StorageVirtualDrive) SetRegisteredDevice(v AssetDeviceRegistrationRelationship) {
	o.RegisteredDevice = &v
}

// GetStorageController returns the StorageController field value if set, zero value otherwise.
func (o *StorageVirtualDrive) GetStorageController() StorageControllerRelationship {
	if o == nil || o.StorageController == nil {
		var ret StorageControllerRelationship
		return ret
	}
	return *o.StorageController
}

// GetStorageControllerOk returns a tuple with the StorageController field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageVirtualDrive) GetStorageControllerOk() (*StorageControllerRelationship, bool) {
	if o == nil || o.StorageController == nil {
		return nil, false
	}
	return o.StorageController, true
}

// HasStorageController returns a boolean if a field has been set.
func (o *StorageVirtualDrive) HasStorageController() bool {
	if o != nil && o.StorageController != nil {
		return true
	}

	return false
}

// SetStorageController gets a reference to the given StorageControllerRelationship and assigns it to the StorageController field.
func (o *StorageVirtualDrive) SetStorageController(v StorageControllerRelationship) {
	o.StorageController = &v
}

// GetStorageVirtualDriveContainer returns the StorageVirtualDriveContainer field value if set, zero value otherwise.
func (o *StorageVirtualDrive) GetStorageVirtualDriveContainer() StorageVirtualDriveContainerRelationship {
	if o == nil || o.StorageVirtualDriveContainer == nil {
		var ret StorageVirtualDriveContainerRelationship
		return ret
	}
	return *o.StorageVirtualDriveContainer
}

// GetStorageVirtualDriveContainerOk returns a tuple with the StorageVirtualDriveContainer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageVirtualDrive) GetStorageVirtualDriveContainerOk() (*StorageVirtualDriveContainerRelationship, bool) {
	if o == nil || o.StorageVirtualDriveContainer == nil {
		return nil, false
	}
	return o.StorageVirtualDriveContainer, true
}

// HasStorageVirtualDriveContainer returns a boolean if a field has been set.
func (o *StorageVirtualDrive) HasStorageVirtualDriveContainer() bool {
	if o != nil && o.StorageVirtualDriveContainer != nil {
		return true
	}

	return false
}

// SetStorageVirtualDriveContainer gets a reference to the given StorageVirtualDriveContainerRelationship and assigns it to the StorageVirtualDriveContainer field.
func (o *StorageVirtualDrive) SetStorageVirtualDriveContainer(v StorageVirtualDriveContainerRelationship) {
	o.StorageVirtualDriveContainer = &v
}

// GetVdMemberEps returns the VdMemberEps field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *StorageVirtualDrive) GetVdMemberEps() []StorageVdMemberEpRelationship {
	if o == nil {
		var ret []StorageVdMemberEpRelationship
		return ret
	}
	return o.VdMemberEps
}

// GetVdMemberEpsOk returns a tuple with the VdMemberEps field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *StorageVirtualDrive) GetVdMemberEpsOk() (*[]StorageVdMemberEpRelationship, bool) {
	if o == nil || o.VdMemberEps == nil {
		return nil, false
	}
	return &o.VdMemberEps, true
}

// HasVdMemberEps returns a boolean if a field has been set.
func (o *StorageVirtualDrive) HasVdMemberEps() bool {
	if o != nil && o.VdMemberEps != nil {
		return true
	}

	return false
}

// SetVdMemberEps gets a reference to the given []StorageVdMemberEpRelationship and assigns it to the VdMemberEps field.
func (o *StorageVirtualDrive) SetVdMemberEps(v []StorageVdMemberEpRelationship) {
	o.VdMemberEps = v
}

// GetVirtualDriveExtension returns the VirtualDriveExtension field value if set, zero value otherwise.
func (o *StorageVirtualDrive) GetVirtualDriveExtension() StorageVirtualDriveExtensionRelationship {
	if o == nil || o.VirtualDriveExtension == nil {
		var ret StorageVirtualDriveExtensionRelationship
		return ret
	}
	return *o.VirtualDriveExtension
}

// GetVirtualDriveExtensionOk returns a tuple with the VirtualDriveExtension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageVirtualDrive) GetVirtualDriveExtensionOk() (*StorageVirtualDriveExtensionRelationship, bool) {
	if o == nil || o.VirtualDriveExtension == nil {
		return nil, false
	}
	return o.VirtualDriveExtension, true
}

// HasVirtualDriveExtension returns a boolean if a field has been set.
func (o *StorageVirtualDrive) HasVirtualDriveExtension() bool {
	if o != nil && o.VirtualDriveExtension != nil {
		return true
	}

	return false
}

// SetVirtualDriveExtension gets a reference to the given StorageVirtualDriveExtensionRelationship and assigns it to the VirtualDriveExtension field.
func (o *StorageVirtualDrive) SetVirtualDriveExtension(v StorageVirtualDriveExtensionRelationship) {
	o.VirtualDriveExtension = &v
}

func (o StorageVirtualDrive) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	serializedEquipmentBase, errEquipmentBase := json.Marshal(o.EquipmentBase)
	if errEquipmentBase != nil {
		return []byte{}, errEquipmentBase
	}
	errEquipmentBase = json.Unmarshal([]byte(serializedEquipmentBase), &toSerialize)
	if errEquipmentBase != nil {
		return []byte{}, errEquipmentBase
	}
	if true {
		toSerialize["ClassId"] = o.ClassId
	}
	if true {
		toSerialize["ObjectType"] = o.ObjectType
	}
	if o.AccessPolicy != nil {
		toSerialize["AccessPolicy"] = o.AccessPolicy
	}
	if o.ActualWriteCachePolicy != nil {
		toSerialize["ActualWriteCachePolicy"] = o.ActualWriteCachePolicy
	}
	if o.AvailableSize != nil {
		toSerialize["AvailableSize"] = o.AvailableSize
	}
	if o.BlockSize != nil {
		toSerialize["BlockSize"] = o.BlockSize
	}
	if o.Bootable != nil {
		toSerialize["Bootable"] = o.Bootable
	}
	if o.ConfigState != nil {
		toSerialize["ConfigState"] = o.ConfigState
	}
	if o.ConfiguredWriteCachePolicy != nil {
		toSerialize["ConfiguredWriteCachePolicy"] = o.ConfiguredWriteCachePolicy
	}
	if o.ConnectionProtocol != nil {
		toSerialize["ConnectionProtocol"] = o.ConnectionProtocol
	}
	if o.DriveCache != nil {
		toSerialize["DriveCache"] = o.DriveCache
	}
	if o.DriveSecurity != nil {
		toSerialize["DriveSecurity"] = o.DriveSecurity
	}
	if o.DriveState != nil {
		toSerialize["DriveState"] = o.DriveState
	}
	if o.IoPolicy != nil {
		toSerialize["IoPolicy"] = o.IoPolicy
	}
	if o.Name != nil {
		toSerialize["Name"] = o.Name
	}
	if o.NumBlocks != nil {
		toSerialize["NumBlocks"] = o.NumBlocks
	}
	if o.OperState != nil {
		toSerialize["OperState"] = o.OperState
	}
	if o.Operability != nil {
		toSerialize["Operability"] = o.Operability
	}
	if o.PhysicalBlockSize != nil {
		toSerialize["PhysicalBlockSize"] = o.PhysicalBlockSize
	}
	if o.ReadPolicy != nil {
		toSerialize["ReadPolicy"] = o.ReadPolicy
	}
	if o.SecurityFlags != nil {
		toSerialize["SecurityFlags"] = o.SecurityFlags
	}
	if o.Size != nil {
		toSerialize["Size"] = o.Size
	}
	if o.StripSize != nil {
		toSerialize["StripSize"] = o.StripSize
	}
	if o.Type != nil {
		toSerialize["Type"] = o.Type
	}
	if o.Uuid != nil {
		toSerialize["Uuid"] = o.Uuid
	}
	if o.VendorUuid != nil {
		toSerialize["VendorUuid"] = o.VendorUuid
	}
	if o.VirtualDriveId != nil {
		toSerialize["VirtualDriveId"] = o.VirtualDriveId
	}
	if o.DiskGroup != nil {
		toSerialize["DiskGroup"] = o.DiskGroup
	}
	if o.InventoryDeviceInfo != nil {
		toSerialize["InventoryDeviceInfo"] = o.InventoryDeviceInfo
	}
	if o.PhysicalDiskUsages != nil {
		toSerialize["PhysicalDiskUsages"] = o.PhysicalDiskUsages
	}
	if o.RegisteredDevice != nil {
		toSerialize["RegisteredDevice"] = o.RegisteredDevice
	}
	if o.StorageController != nil {
		toSerialize["StorageController"] = o.StorageController
	}
	if o.StorageVirtualDriveContainer != nil {
		toSerialize["StorageVirtualDriveContainer"] = o.StorageVirtualDriveContainer
	}
	if o.VdMemberEps != nil {
		toSerialize["VdMemberEps"] = o.VdMemberEps
	}
	if o.VirtualDriveExtension != nil {
		toSerialize["VirtualDriveExtension"] = o.VirtualDriveExtension
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *StorageVirtualDrive) UnmarshalJSON(bytes []byte) (err error) {
	type StorageVirtualDriveWithoutEmbeddedStruct struct {
		// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.
		ClassId string `json:"ClassId"`
		// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
		ObjectType string `json:"ObjectType"`
		// The access policy of the virtual drive.
		AccessPolicy *string `json:"AccessPolicy,omitempty"`
		// The current write cache policy of the virtual drive.
		ActualWriteCachePolicy *string `json:"ActualWriteCachePolicy,omitempty"`
		// Available storage capacity of the virtual drive.
		AvailableSize *string `json:"AvailableSize,omitempty"`
		// Block size of the virtual drive.
		BlockSize *string `json:"BlockSize,omitempty"`
		// The virtual drive bootable state.
		Bootable *string `json:"Bootable,omitempty"`
		// The configuration state of the virtual drive.
		ConfigState *string `json:"ConfigState,omitempty"`
		// The requested write cache policy of the virtual drive.
		ConfiguredWriteCachePolicy *string `json:"ConfiguredWriteCachePolicy,omitempty"`
		// The connection protocol of the virtual drive.
		ConnectionProtocol *string `json:"ConnectionProtocol,omitempty"`
		// The state of the drive cache of the virtual drive.
		DriveCache *string `json:"DriveCache,omitempty"`
		// The driveSecurity state of the Virtual drive.
		DriveSecurity *string `json:"DriveSecurity,omitempty"`
		// The state of the Virtual drive.
		DriveState *string `json:"DriveState,omitempty"`
		// The Input/Output Policy defined on the Virtual drive.
		IoPolicy *string `json:"IoPolicy,omitempty"`
		// The name of the Virtual drive.
		Name *string `json:"Name,omitempty"`
		// Number of Blocks on the Physical Disk.
		NumBlocks *string `json:"NumBlocks,omitempty"`
		// The current operational state of Virtual drive.
		OperState *string `json:"OperState,omitempty"`
		// The current operability state of Virtual drive.
		Operability *string `json:"Operability,omitempty"`
		// The block size of the the virtual drive.
		PhysicalBlockSize *string `json:"PhysicalBlockSize,omitempty"`
		// The read-ahead cache mode of the virtual drive.
		ReadPolicy *string `json:"ReadPolicy,omitempty"`
		// The security flags set for this virtual drive.
		SecurityFlags *string `json:"SecurityFlags,omitempty"`
		// The size of the virtual drive in MB.
		Size *string `json:"Size,omitempty"`
		// The strip size is the portion of a stripe that resides on a single drive in the drive group, this is measured in KB.
		StripSize *string `json:"StripSize,omitempty"`
		// The raid type of the virtual drive.
		Type *string `json:"Type,omitempty"`
		// The uuid of the virtual drive.
		Uuid *string `json:"Uuid,omitempty"`
		// The UUID value of the vendor.
		VendorUuid *string `json:"VendorUuid,omitempty"`
		// The identifier for this Virtual drive.
		VirtualDriveId      *string                          `json:"VirtualDriveId,omitempty"`
		DiskGroup           *StorageDiskGroupRelationship    `json:"DiskGroup,omitempty"`
		InventoryDeviceInfo *InventoryDeviceInfoRelationship `json:"InventoryDeviceInfo,omitempty"`
		// An array of relationships to storagePhysicalDiskUsage resources.
		PhysicalDiskUsages           []StoragePhysicalDiskUsageRelationship    `json:"PhysicalDiskUsages,omitempty"`
		RegisteredDevice             *AssetDeviceRegistrationRelationship      `json:"RegisteredDevice,omitempty"`
		StorageController            *StorageControllerRelationship            `json:"StorageController,omitempty"`
		StorageVirtualDriveContainer *StorageVirtualDriveContainerRelationship `json:"StorageVirtualDriveContainer,omitempty"`
		// An array of relationships to storageVdMemberEp resources.
		VdMemberEps           []StorageVdMemberEpRelationship           `json:"VdMemberEps,omitempty"`
		VirtualDriveExtension *StorageVirtualDriveExtensionRelationship `json:"VirtualDriveExtension,omitempty"`
	}

	varStorageVirtualDriveWithoutEmbeddedStruct := StorageVirtualDriveWithoutEmbeddedStruct{}

	err = json.Unmarshal(bytes, &varStorageVirtualDriveWithoutEmbeddedStruct)
	if err == nil {
		varStorageVirtualDrive := _StorageVirtualDrive{}
		varStorageVirtualDrive.ClassId = varStorageVirtualDriveWithoutEmbeddedStruct.ClassId
		varStorageVirtualDrive.ObjectType = varStorageVirtualDriveWithoutEmbeddedStruct.ObjectType
		varStorageVirtualDrive.AccessPolicy = varStorageVirtualDriveWithoutEmbeddedStruct.AccessPolicy
		varStorageVirtualDrive.ActualWriteCachePolicy = varStorageVirtualDriveWithoutEmbeddedStruct.ActualWriteCachePolicy
		varStorageVirtualDrive.AvailableSize = varStorageVirtualDriveWithoutEmbeddedStruct.AvailableSize
		varStorageVirtualDrive.BlockSize = varStorageVirtualDriveWithoutEmbeddedStruct.BlockSize
		varStorageVirtualDrive.Bootable = varStorageVirtualDriveWithoutEmbeddedStruct.Bootable
		varStorageVirtualDrive.ConfigState = varStorageVirtualDriveWithoutEmbeddedStruct.ConfigState
		varStorageVirtualDrive.ConfiguredWriteCachePolicy = varStorageVirtualDriveWithoutEmbeddedStruct.ConfiguredWriteCachePolicy
		varStorageVirtualDrive.ConnectionProtocol = varStorageVirtualDriveWithoutEmbeddedStruct.ConnectionProtocol
		varStorageVirtualDrive.DriveCache = varStorageVirtualDriveWithoutEmbeddedStruct.DriveCache
		varStorageVirtualDrive.DriveSecurity = varStorageVirtualDriveWithoutEmbeddedStruct.DriveSecurity
		varStorageVirtualDrive.DriveState = varStorageVirtualDriveWithoutEmbeddedStruct.DriveState
		varStorageVirtualDrive.IoPolicy = varStorageVirtualDriveWithoutEmbeddedStruct.IoPolicy
		varStorageVirtualDrive.Name = varStorageVirtualDriveWithoutEmbeddedStruct.Name
		varStorageVirtualDrive.NumBlocks = varStorageVirtualDriveWithoutEmbeddedStruct.NumBlocks
		varStorageVirtualDrive.OperState = varStorageVirtualDriveWithoutEmbeddedStruct.OperState
		varStorageVirtualDrive.Operability = varStorageVirtualDriveWithoutEmbeddedStruct.Operability
		varStorageVirtualDrive.PhysicalBlockSize = varStorageVirtualDriveWithoutEmbeddedStruct.PhysicalBlockSize
		varStorageVirtualDrive.ReadPolicy = varStorageVirtualDriveWithoutEmbeddedStruct.ReadPolicy
		varStorageVirtualDrive.SecurityFlags = varStorageVirtualDriveWithoutEmbeddedStruct.SecurityFlags
		varStorageVirtualDrive.Size = varStorageVirtualDriveWithoutEmbeddedStruct.Size
		varStorageVirtualDrive.StripSize = varStorageVirtualDriveWithoutEmbeddedStruct.StripSize
		varStorageVirtualDrive.Type = varStorageVirtualDriveWithoutEmbeddedStruct.Type
		varStorageVirtualDrive.Uuid = varStorageVirtualDriveWithoutEmbeddedStruct.Uuid
		varStorageVirtualDrive.VendorUuid = varStorageVirtualDriveWithoutEmbeddedStruct.VendorUuid
		varStorageVirtualDrive.VirtualDriveId = varStorageVirtualDriveWithoutEmbeddedStruct.VirtualDriveId
		varStorageVirtualDrive.DiskGroup = varStorageVirtualDriveWithoutEmbeddedStruct.DiskGroup
		varStorageVirtualDrive.InventoryDeviceInfo = varStorageVirtualDriveWithoutEmbeddedStruct.InventoryDeviceInfo
		varStorageVirtualDrive.PhysicalDiskUsages = varStorageVirtualDriveWithoutEmbeddedStruct.PhysicalDiskUsages
		varStorageVirtualDrive.RegisteredDevice = varStorageVirtualDriveWithoutEmbeddedStruct.RegisteredDevice
		varStorageVirtualDrive.StorageController = varStorageVirtualDriveWithoutEmbeddedStruct.StorageController
		varStorageVirtualDrive.StorageVirtualDriveContainer = varStorageVirtualDriveWithoutEmbeddedStruct.StorageVirtualDriveContainer
		varStorageVirtualDrive.VdMemberEps = varStorageVirtualDriveWithoutEmbeddedStruct.VdMemberEps
		varStorageVirtualDrive.VirtualDriveExtension = varStorageVirtualDriveWithoutEmbeddedStruct.VirtualDriveExtension
		*o = StorageVirtualDrive(varStorageVirtualDrive)
	} else {
		return err
	}

	varStorageVirtualDrive := _StorageVirtualDrive{}

	err = json.Unmarshal(bytes, &varStorageVirtualDrive)
	if err == nil {
		o.EquipmentBase = varStorageVirtualDrive.EquipmentBase
	} else {
		return err
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "ClassId")
		delete(additionalProperties, "ObjectType")
		delete(additionalProperties, "AccessPolicy")
		delete(additionalProperties, "ActualWriteCachePolicy")
		delete(additionalProperties, "AvailableSize")
		delete(additionalProperties, "BlockSize")
		delete(additionalProperties, "Bootable")
		delete(additionalProperties, "ConfigState")
		delete(additionalProperties, "ConfiguredWriteCachePolicy")
		delete(additionalProperties, "ConnectionProtocol")
		delete(additionalProperties, "DriveCache")
		delete(additionalProperties, "DriveSecurity")
		delete(additionalProperties, "DriveState")
		delete(additionalProperties, "IoPolicy")
		delete(additionalProperties, "Name")
		delete(additionalProperties, "NumBlocks")
		delete(additionalProperties, "OperState")
		delete(additionalProperties, "Operability")
		delete(additionalProperties, "PhysicalBlockSize")
		delete(additionalProperties, "ReadPolicy")
		delete(additionalProperties, "SecurityFlags")
		delete(additionalProperties, "Size")
		delete(additionalProperties, "StripSize")
		delete(additionalProperties, "Type")
		delete(additionalProperties, "Uuid")
		delete(additionalProperties, "VendorUuid")
		delete(additionalProperties, "VirtualDriveId")
		delete(additionalProperties, "DiskGroup")
		delete(additionalProperties, "InventoryDeviceInfo")
		delete(additionalProperties, "PhysicalDiskUsages")
		delete(additionalProperties, "RegisteredDevice")
		delete(additionalProperties, "StorageController")
		delete(additionalProperties, "StorageVirtualDriveContainer")
		delete(additionalProperties, "VdMemberEps")
		delete(additionalProperties, "VirtualDriveExtension")

		// remove fields from embedded structs
		reflectEquipmentBase := reflect.ValueOf(o.EquipmentBase)
		for i := 0; i < reflectEquipmentBase.Type().NumField(); i++ {
			t := reflectEquipmentBase.Type().Field(i)

			if jsonTag := t.Tag.Get("json"); jsonTag != "" {
				fieldName := ""
				if commaIdx := strings.Index(jsonTag, ","); commaIdx > 0 {
					fieldName = jsonTag[:commaIdx]
				} else {
					fieldName = jsonTag
				}
				if fieldName != "AdditionalProperties" {
					delete(additionalProperties, fieldName)
				}
			}
		}

		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableStorageVirtualDrive struct {
	value *StorageVirtualDrive
	isSet bool
}

func (v NullableStorageVirtualDrive) Get() *StorageVirtualDrive {
	return v.value
}

func (v *NullableStorageVirtualDrive) Set(val *StorageVirtualDrive) {
	v.value = val
	v.isSet = true
}

func (v NullableStorageVirtualDrive) IsSet() bool {
	return v.isSet
}

func (v *NullableStorageVirtualDrive) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStorageVirtualDrive(val *StorageVirtualDrive) *NullableStorageVirtualDrive {
	return &NullableStorageVirtualDrive{value: val, isSet: true}
}

func (v NullableStorageVirtualDrive) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStorageVirtualDrive) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
