/*
Cisco Intersight

Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations. The Intersight OpenAPI document defines the complete set of properties that are returned in the HTTP response. From that perspective, a client can expect that no additional properties are returned, unless these properties are explicitly defined in the OpenAPI document. However, when a client uses an older version of the Intersight OpenAPI document, the server may send additional properties because the software is more recent than the client. In that case, the client may receive properties that it does not know about. Some generated SDKs perform a strict validation of the HTTP response body against the OpenAPI document.

API version: 1.0.11-2024120409
Contact: intersight@cisco.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package intersight

import (
	"encoding/json"
	"fmt"
	"reflect"
	"strings"
)

// checks if the HciDisk type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &HciDisk{}

// HciDisk A disk associated with a node.
type HciDisk struct {
	MoBaseMo
	// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.
	ClassId string `json:"ClassId"`
	// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
	ObjectType string `json:"ObjectType"`
	// The unique identifier of the cluster.
	ClusterExtId *string `json:"ClusterExtId,omitempty"`
	// The name of the cluster this disk belongs to.
	ClusterName  *string              `json:"ClusterName,omitempty"`
	CvmIpAddress NullableHciIpAddress `json:"CvmIpAddress,omitempty"`
	// The unique identifier of the disk.
	DiskExtId *string `json:"DiskExtId,omitempty"`
	// The size of the disk in bytes.
	DiskSizeBytes *int64 `json:"DiskSizeBytes,omitempty"`
	// The current firmware version of the disk.
	FirmwareVersion *string `json:"FirmwareVersion,omitempty"`
	// Indicates if the disk is boot only and no disk operation to be run on it.
	HasBootPartitionsOnly *bool `json:"HasBootPartitionsOnly,omitempty"`
	// The name of the host the disk is running on.
	HostName *string `json:"HostName,omitempty"`
	// Indicate if the disk is a boot disk.
	IsBootDisk *bool `json:"IsBootDisk,omitempty"`
	// Indicates whether the disk data is migrated.
	IsDataMigrated *bool `json:"IsDataMigrated,omitempty"`
	// Indicates whether the diagnostic information is available.
	IsDiagnosticInfoAvailable *bool `json:"IsDiagnosticInfoAvailable,omitempty"`
	// Indicates whether the error is found in kernel logs.
	IsErrorFoundInLogs *bool `json:"IsErrorFoundInLogs,omitempty"`
	// Indicates whether the disk is marked for removal.
	IsMarkedForRemoval *bool `json:"IsMarkedForRemoval,omitempty"`
	// Indicates whether the disk is mounted.
	IsMounted *bool `json:"IsMounted,omitempty"`
	// Indicates whether the disk is online or offline.
	IsOnline *bool `json:"IsOnline,omitempty"`
	// The password protection status of the disk.
	IsPasswordProtected *bool `json:"IsPasswordProtected,omitempty"`
	// Indicates if diagnostics are running on the Disk.
	IsPlannedOutage *bool `json:"IsPlannedOutage,omitempty"`
	// The self-encrypting drive status of the disk.
	IsSelfEncryptingDrive *bool `json:"IsSelfEncryptingDrive,omitempty"`
	// Indicates if the NVMe Disk is self managed and no host/CVM reboot is required.
	IsSelfManagedNvme *bool `json:"IsSelfManagedNvme,omitempty"`
	// Indicates if NVMe device is managed by storage performance development  kit (SPDK).
	IsSpdkManaged *bool `json:"IsSpdkManaged,omitempty"`
	// Indicates whether the disk is suspected unhealthy.
	IsSuspectedUnhealthy *bool `json:"IsSuspectedUnhealthy,omitempty"`
	// Indicates whether the disk is under diagnosis.
	IsUnderDiagnosis *bool `json:"IsUnderDiagnosis,omitempty"`
	// Indicates whether the disk is unhealthy.
	IsUnhealthy *bool `json:"IsUnhealthy,omitempty"`
	// The location of the disk in the node.
	Location *int64 `json:"Location,omitempty"`
	// The model of the reported disk.
	Model *string `json:"Model,omitempty"`
	// The mount path of the disk.
	MountPath *string `json:"MountPath,omitempty"`
	// The unique identifier of the node.
	NodeExtId     *string              `json:"NodeExtId,omitempty"`
	NodeIpAddress NullableHciIpAddress `json:"NodeIpAddress,omitempty"`
	// The PCIe path of the NVMe disk.
	NvmePciePath *string `json:"NvmePciePath,omitempty"`
	// The physical capacity of the disk in bytes.
	PhysicalCapacityBytes *int64 `json:"PhysicalCapacityBytes,omitempty"`
	// The serial number of the disk.
	SerialNumber *string `json:"SerialNumber,omitempty"`
	// The unique identifier of the service VM on the node.
	ServiceVmId *string `json:"ServiceVmId,omitempty"`
	// The status of the disk such as NORMAL, MARKED_FOR_REMOVAL_BUT_NOT_DETACHABLE, DETACHABLE, DATA_MIGRATION_INITIATED.
	Status *string `json:"Status,omitempty"`
	// The unique identifier of the storage pool.
	StoragePoolExtId *string `json:"StoragePoolExtId,omitempty"`
	// The storage tier of the disk such as SSD_PCIE, SSD_SATA, DAS_SATA, CLOUD, SSD_MEM_NVME.
	StorageTier *string `json:"StorageTier,omitempty"`
	// The target firmware version of the disk.
	TargetFirmwareVersion *string `json:"TargetFirmwareVersion,omitempty"`
	// The vendor of the reported disk.
	Vendor               *string                                     `json:"Vendor,omitempty"`
	Node                 NullableHciNodeRelationship                 `json:"Node,omitempty"`
	RegisteredDevice     NullableAssetDeviceRegistrationRelationship `json:"RegisteredDevice,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _HciDisk HciDisk

// NewHciDisk instantiates a new HciDisk object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHciDisk(classId string, objectType string) *HciDisk {
	this := HciDisk{}
	this.ClassId = classId
	this.ObjectType = objectType
	return &this
}

// NewHciDiskWithDefaults instantiates a new HciDisk object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHciDiskWithDefaults() *HciDisk {
	this := HciDisk{}
	var classId string = "hci.Disk"
	this.ClassId = classId
	var objectType string = "hci.Disk"
	this.ObjectType = objectType
	return &this
}

// GetClassId returns the ClassId field value
func (o *HciDisk) GetClassId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ClassId
}

// GetClassIdOk returns a tuple with the ClassId field value
// and a boolean to check if the value has been set.
func (o *HciDisk) GetClassIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ClassId, true
}

// SetClassId sets field value
func (o *HciDisk) SetClassId(v string) {
	o.ClassId = v
}

// GetDefaultClassId returns the default value "hci.Disk" of the ClassId field.
func (o *HciDisk) GetDefaultClassId() interface{} {
	return "hci.Disk"
}

// GetObjectType returns the ObjectType field value
func (o *HciDisk) GetObjectType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ObjectType
}

// GetObjectTypeOk returns a tuple with the ObjectType field value
// and a boolean to check if the value has been set.
func (o *HciDisk) GetObjectTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ObjectType, true
}

// SetObjectType sets field value
func (o *HciDisk) SetObjectType(v string) {
	o.ObjectType = v
}

// GetDefaultObjectType returns the default value "hci.Disk" of the ObjectType field.
func (o *HciDisk) GetDefaultObjectType() interface{} {
	return "hci.Disk"
}

// GetClusterExtId returns the ClusterExtId field value if set, zero value otherwise.
func (o *HciDisk) GetClusterExtId() string {
	if o == nil || IsNil(o.ClusterExtId) {
		var ret string
		return ret
	}
	return *o.ClusterExtId
}

// GetClusterExtIdOk returns a tuple with the ClusterExtId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HciDisk) GetClusterExtIdOk() (*string, bool) {
	if o == nil || IsNil(o.ClusterExtId) {
		return nil, false
	}
	return o.ClusterExtId, true
}

// HasClusterExtId returns a boolean if a field has been set.
func (o *HciDisk) HasClusterExtId() bool {
	if o != nil && !IsNil(o.ClusterExtId) {
		return true
	}

	return false
}

// SetClusterExtId gets a reference to the given string and assigns it to the ClusterExtId field.
func (o *HciDisk) SetClusterExtId(v string) {
	o.ClusterExtId = &v
}

// GetClusterName returns the ClusterName field value if set, zero value otherwise.
func (o *HciDisk) GetClusterName() string {
	if o == nil || IsNil(o.ClusterName) {
		var ret string
		return ret
	}
	return *o.ClusterName
}

// GetClusterNameOk returns a tuple with the ClusterName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HciDisk) GetClusterNameOk() (*string, bool) {
	if o == nil || IsNil(o.ClusterName) {
		return nil, false
	}
	return o.ClusterName, true
}

// HasClusterName returns a boolean if a field has been set.
func (o *HciDisk) HasClusterName() bool {
	if o != nil && !IsNil(o.ClusterName) {
		return true
	}

	return false
}

// SetClusterName gets a reference to the given string and assigns it to the ClusterName field.
func (o *HciDisk) SetClusterName(v string) {
	o.ClusterName = &v
}

// GetCvmIpAddress returns the CvmIpAddress field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HciDisk) GetCvmIpAddress() HciIpAddress {
	if o == nil || IsNil(o.CvmIpAddress.Get()) {
		var ret HciIpAddress
		return ret
	}
	return *o.CvmIpAddress.Get()
}

// GetCvmIpAddressOk returns a tuple with the CvmIpAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HciDisk) GetCvmIpAddressOk() (*HciIpAddress, bool) {
	if o == nil {
		return nil, false
	}
	return o.CvmIpAddress.Get(), o.CvmIpAddress.IsSet()
}

// HasCvmIpAddress returns a boolean if a field has been set.
func (o *HciDisk) HasCvmIpAddress() bool {
	if o != nil && o.CvmIpAddress.IsSet() {
		return true
	}

	return false
}

// SetCvmIpAddress gets a reference to the given NullableHciIpAddress and assigns it to the CvmIpAddress field.
func (o *HciDisk) SetCvmIpAddress(v HciIpAddress) {
	o.CvmIpAddress.Set(&v)
}

// SetCvmIpAddressNil sets the value for CvmIpAddress to be an explicit nil
func (o *HciDisk) SetCvmIpAddressNil() {
	o.CvmIpAddress.Set(nil)
}

// UnsetCvmIpAddress ensures that no value is present for CvmIpAddress, not even an explicit nil
func (o *HciDisk) UnsetCvmIpAddress() {
	o.CvmIpAddress.Unset()
}

// GetDiskExtId returns the DiskExtId field value if set, zero value otherwise.
func (o *HciDisk) GetDiskExtId() string {
	if o == nil || IsNil(o.DiskExtId) {
		var ret string
		return ret
	}
	return *o.DiskExtId
}

// GetDiskExtIdOk returns a tuple with the DiskExtId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HciDisk) GetDiskExtIdOk() (*string, bool) {
	if o == nil || IsNil(o.DiskExtId) {
		return nil, false
	}
	return o.DiskExtId, true
}

// HasDiskExtId returns a boolean if a field has been set.
func (o *HciDisk) HasDiskExtId() bool {
	if o != nil && !IsNil(o.DiskExtId) {
		return true
	}

	return false
}

// SetDiskExtId gets a reference to the given string and assigns it to the DiskExtId field.
func (o *HciDisk) SetDiskExtId(v string) {
	o.DiskExtId = &v
}

// GetDiskSizeBytes returns the DiskSizeBytes field value if set, zero value otherwise.
func (o *HciDisk) GetDiskSizeBytes() int64 {
	if o == nil || IsNil(o.DiskSizeBytes) {
		var ret int64
		return ret
	}
	return *o.DiskSizeBytes
}

// GetDiskSizeBytesOk returns a tuple with the DiskSizeBytes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HciDisk) GetDiskSizeBytesOk() (*int64, bool) {
	if o == nil || IsNil(o.DiskSizeBytes) {
		return nil, false
	}
	return o.DiskSizeBytes, true
}

// HasDiskSizeBytes returns a boolean if a field has been set.
func (o *HciDisk) HasDiskSizeBytes() bool {
	if o != nil && !IsNil(o.DiskSizeBytes) {
		return true
	}

	return false
}

// SetDiskSizeBytes gets a reference to the given int64 and assigns it to the DiskSizeBytes field.
func (o *HciDisk) SetDiskSizeBytes(v int64) {
	o.DiskSizeBytes = &v
}

// GetFirmwareVersion returns the FirmwareVersion field value if set, zero value otherwise.
func (o *HciDisk) GetFirmwareVersion() string {
	if o == nil || IsNil(o.FirmwareVersion) {
		var ret string
		return ret
	}
	return *o.FirmwareVersion
}

// GetFirmwareVersionOk returns a tuple with the FirmwareVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HciDisk) GetFirmwareVersionOk() (*string, bool) {
	if o == nil || IsNil(o.FirmwareVersion) {
		return nil, false
	}
	return o.FirmwareVersion, true
}

// HasFirmwareVersion returns a boolean if a field has been set.
func (o *HciDisk) HasFirmwareVersion() bool {
	if o != nil && !IsNil(o.FirmwareVersion) {
		return true
	}

	return false
}

// SetFirmwareVersion gets a reference to the given string and assigns it to the FirmwareVersion field.
func (o *HciDisk) SetFirmwareVersion(v string) {
	o.FirmwareVersion = &v
}

// GetHasBootPartitionsOnly returns the HasBootPartitionsOnly field value if set, zero value otherwise.
func (o *HciDisk) GetHasBootPartitionsOnly() bool {
	if o == nil || IsNil(o.HasBootPartitionsOnly) {
		var ret bool
		return ret
	}
	return *o.HasBootPartitionsOnly
}

// GetHasBootPartitionsOnlyOk returns a tuple with the HasBootPartitionsOnly field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HciDisk) GetHasBootPartitionsOnlyOk() (*bool, bool) {
	if o == nil || IsNil(o.HasBootPartitionsOnly) {
		return nil, false
	}
	return o.HasBootPartitionsOnly, true
}

// HasHasBootPartitionsOnly returns a boolean if a field has been set.
func (o *HciDisk) HasHasBootPartitionsOnly() bool {
	if o != nil && !IsNil(o.HasBootPartitionsOnly) {
		return true
	}

	return false
}

// SetHasBootPartitionsOnly gets a reference to the given bool and assigns it to the HasBootPartitionsOnly field.
func (o *HciDisk) SetHasBootPartitionsOnly(v bool) {
	o.HasBootPartitionsOnly = &v
}

// GetHostName returns the HostName field value if set, zero value otherwise.
func (o *HciDisk) GetHostName() string {
	if o == nil || IsNil(o.HostName) {
		var ret string
		return ret
	}
	return *o.HostName
}

// GetHostNameOk returns a tuple with the HostName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HciDisk) GetHostNameOk() (*string, bool) {
	if o == nil || IsNil(o.HostName) {
		return nil, false
	}
	return o.HostName, true
}

// HasHostName returns a boolean if a field has been set.
func (o *HciDisk) HasHostName() bool {
	if o != nil && !IsNil(o.HostName) {
		return true
	}

	return false
}

// SetHostName gets a reference to the given string and assigns it to the HostName field.
func (o *HciDisk) SetHostName(v string) {
	o.HostName = &v
}

// GetIsBootDisk returns the IsBootDisk field value if set, zero value otherwise.
func (o *HciDisk) GetIsBootDisk() bool {
	if o == nil || IsNil(o.IsBootDisk) {
		var ret bool
		return ret
	}
	return *o.IsBootDisk
}

// GetIsBootDiskOk returns a tuple with the IsBootDisk field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HciDisk) GetIsBootDiskOk() (*bool, bool) {
	if o == nil || IsNil(o.IsBootDisk) {
		return nil, false
	}
	return o.IsBootDisk, true
}

// HasIsBootDisk returns a boolean if a field has been set.
func (o *HciDisk) HasIsBootDisk() bool {
	if o != nil && !IsNil(o.IsBootDisk) {
		return true
	}

	return false
}

// SetIsBootDisk gets a reference to the given bool and assigns it to the IsBootDisk field.
func (o *HciDisk) SetIsBootDisk(v bool) {
	o.IsBootDisk = &v
}

// GetIsDataMigrated returns the IsDataMigrated field value if set, zero value otherwise.
func (o *HciDisk) GetIsDataMigrated() bool {
	if o == nil || IsNil(o.IsDataMigrated) {
		var ret bool
		return ret
	}
	return *o.IsDataMigrated
}

// GetIsDataMigratedOk returns a tuple with the IsDataMigrated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HciDisk) GetIsDataMigratedOk() (*bool, bool) {
	if o == nil || IsNil(o.IsDataMigrated) {
		return nil, false
	}
	return o.IsDataMigrated, true
}

// HasIsDataMigrated returns a boolean if a field has been set.
func (o *HciDisk) HasIsDataMigrated() bool {
	if o != nil && !IsNil(o.IsDataMigrated) {
		return true
	}

	return false
}

// SetIsDataMigrated gets a reference to the given bool and assigns it to the IsDataMigrated field.
func (o *HciDisk) SetIsDataMigrated(v bool) {
	o.IsDataMigrated = &v
}

// GetIsDiagnosticInfoAvailable returns the IsDiagnosticInfoAvailable field value if set, zero value otherwise.
func (o *HciDisk) GetIsDiagnosticInfoAvailable() bool {
	if o == nil || IsNil(o.IsDiagnosticInfoAvailable) {
		var ret bool
		return ret
	}
	return *o.IsDiagnosticInfoAvailable
}

// GetIsDiagnosticInfoAvailableOk returns a tuple with the IsDiagnosticInfoAvailable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HciDisk) GetIsDiagnosticInfoAvailableOk() (*bool, bool) {
	if o == nil || IsNil(o.IsDiagnosticInfoAvailable) {
		return nil, false
	}
	return o.IsDiagnosticInfoAvailable, true
}

// HasIsDiagnosticInfoAvailable returns a boolean if a field has been set.
func (o *HciDisk) HasIsDiagnosticInfoAvailable() bool {
	if o != nil && !IsNil(o.IsDiagnosticInfoAvailable) {
		return true
	}

	return false
}

// SetIsDiagnosticInfoAvailable gets a reference to the given bool and assigns it to the IsDiagnosticInfoAvailable field.
func (o *HciDisk) SetIsDiagnosticInfoAvailable(v bool) {
	o.IsDiagnosticInfoAvailable = &v
}

// GetIsErrorFoundInLogs returns the IsErrorFoundInLogs field value if set, zero value otherwise.
func (o *HciDisk) GetIsErrorFoundInLogs() bool {
	if o == nil || IsNil(o.IsErrorFoundInLogs) {
		var ret bool
		return ret
	}
	return *o.IsErrorFoundInLogs
}

// GetIsErrorFoundInLogsOk returns a tuple with the IsErrorFoundInLogs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HciDisk) GetIsErrorFoundInLogsOk() (*bool, bool) {
	if o == nil || IsNil(o.IsErrorFoundInLogs) {
		return nil, false
	}
	return o.IsErrorFoundInLogs, true
}

// HasIsErrorFoundInLogs returns a boolean if a field has been set.
func (o *HciDisk) HasIsErrorFoundInLogs() bool {
	if o != nil && !IsNil(o.IsErrorFoundInLogs) {
		return true
	}

	return false
}

// SetIsErrorFoundInLogs gets a reference to the given bool and assigns it to the IsErrorFoundInLogs field.
func (o *HciDisk) SetIsErrorFoundInLogs(v bool) {
	o.IsErrorFoundInLogs = &v
}

// GetIsMarkedForRemoval returns the IsMarkedForRemoval field value if set, zero value otherwise.
func (o *HciDisk) GetIsMarkedForRemoval() bool {
	if o == nil || IsNil(o.IsMarkedForRemoval) {
		var ret bool
		return ret
	}
	return *o.IsMarkedForRemoval
}

// GetIsMarkedForRemovalOk returns a tuple with the IsMarkedForRemoval field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HciDisk) GetIsMarkedForRemovalOk() (*bool, bool) {
	if o == nil || IsNil(o.IsMarkedForRemoval) {
		return nil, false
	}
	return o.IsMarkedForRemoval, true
}

// HasIsMarkedForRemoval returns a boolean if a field has been set.
func (o *HciDisk) HasIsMarkedForRemoval() bool {
	if o != nil && !IsNil(o.IsMarkedForRemoval) {
		return true
	}

	return false
}

// SetIsMarkedForRemoval gets a reference to the given bool and assigns it to the IsMarkedForRemoval field.
func (o *HciDisk) SetIsMarkedForRemoval(v bool) {
	o.IsMarkedForRemoval = &v
}

// GetIsMounted returns the IsMounted field value if set, zero value otherwise.
func (o *HciDisk) GetIsMounted() bool {
	if o == nil || IsNil(o.IsMounted) {
		var ret bool
		return ret
	}
	return *o.IsMounted
}

// GetIsMountedOk returns a tuple with the IsMounted field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HciDisk) GetIsMountedOk() (*bool, bool) {
	if o == nil || IsNil(o.IsMounted) {
		return nil, false
	}
	return o.IsMounted, true
}

// HasIsMounted returns a boolean if a field has been set.
func (o *HciDisk) HasIsMounted() bool {
	if o != nil && !IsNil(o.IsMounted) {
		return true
	}

	return false
}

// SetIsMounted gets a reference to the given bool and assigns it to the IsMounted field.
func (o *HciDisk) SetIsMounted(v bool) {
	o.IsMounted = &v
}

// GetIsOnline returns the IsOnline field value if set, zero value otherwise.
func (o *HciDisk) GetIsOnline() bool {
	if o == nil || IsNil(o.IsOnline) {
		var ret bool
		return ret
	}
	return *o.IsOnline
}

// GetIsOnlineOk returns a tuple with the IsOnline field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HciDisk) GetIsOnlineOk() (*bool, bool) {
	if o == nil || IsNil(o.IsOnline) {
		return nil, false
	}
	return o.IsOnline, true
}

// HasIsOnline returns a boolean if a field has been set.
func (o *HciDisk) HasIsOnline() bool {
	if o != nil && !IsNil(o.IsOnline) {
		return true
	}

	return false
}

// SetIsOnline gets a reference to the given bool and assigns it to the IsOnline field.
func (o *HciDisk) SetIsOnline(v bool) {
	o.IsOnline = &v
}

// GetIsPasswordProtected returns the IsPasswordProtected field value if set, zero value otherwise.
func (o *HciDisk) GetIsPasswordProtected() bool {
	if o == nil || IsNil(o.IsPasswordProtected) {
		var ret bool
		return ret
	}
	return *o.IsPasswordProtected
}

// GetIsPasswordProtectedOk returns a tuple with the IsPasswordProtected field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HciDisk) GetIsPasswordProtectedOk() (*bool, bool) {
	if o == nil || IsNil(o.IsPasswordProtected) {
		return nil, false
	}
	return o.IsPasswordProtected, true
}

// HasIsPasswordProtected returns a boolean if a field has been set.
func (o *HciDisk) HasIsPasswordProtected() bool {
	if o != nil && !IsNil(o.IsPasswordProtected) {
		return true
	}

	return false
}

// SetIsPasswordProtected gets a reference to the given bool and assigns it to the IsPasswordProtected field.
func (o *HciDisk) SetIsPasswordProtected(v bool) {
	o.IsPasswordProtected = &v
}

// GetIsPlannedOutage returns the IsPlannedOutage field value if set, zero value otherwise.
func (o *HciDisk) GetIsPlannedOutage() bool {
	if o == nil || IsNil(o.IsPlannedOutage) {
		var ret bool
		return ret
	}
	return *o.IsPlannedOutage
}

// GetIsPlannedOutageOk returns a tuple with the IsPlannedOutage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HciDisk) GetIsPlannedOutageOk() (*bool, bool) {
	if o == nil || IsNil(o.IsPlannedOutage) {
		return nil, false
	}
	return o.IsPlannedOutage, true
}

// HasIsPlannedOutage returns a boolean if a field has been set.
func (o *HciDisk) HasIsPlannedOutage() bool {
	if o != nil && !IsNil(o.IsPlannedOutage) {
		return true
	}

	return false
}

// SetIsPlannedOutage gets a reference to the given bool and assigns it to the IsPlannedOutage field.
func (o *HciDisk) SetIsPlannedOutage(v bool) {
	o.IsPlannedOutage = &v
}

// GetIsSelfEncryptingDrive returns the IsSelfEncryptingDrive field value if set, zero value otherwise.
func (o *HciDisk) GetIsSelfEncryptingDrive() bool {
	if o == nil || IsNil(o.IsSelfEncryptingDrive) {
		var ret bool
		return ret
	}
	return *o.IsSelfEncryptingDrive
}

// GetIsSelfEncryptingDriveOk returns a tuple with the IsSelfEncryptingDrive field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HciDisk) GetIsSelfEncryptingDriveOk() (*bool, bool) {
	if o == nil || IsNil(o.IsSelfEncryptingDrive) {
		return nil, false
	}
	return o.IsSelfEncryptingDrive, true
}

// HasIsSelfEncryptingDrive returns a boolean if a field has been set.
func (o *HciDisk) HasIsSelfEncryptingDrive() bool {
	if o != nil && !IsNil(o.IsSelfEncryptingDrive) {
		return true
	}

	return false
}

// SetIsSelfEncryptingDrive gets a reference to the given bool and assigns it to the IsSelfEncryptingDrive field.
func (o *HciDisk) SetIsSelfEncryptingDrive(v bool) {
	o.IsSelfEncryptingDrive = &v
}

// GetIsSelfManagedNvme returns the IsSelfManagedNvme field value if set, zero value otherwise.
func (o *HciDisk) GetIsSelfManagedNvme() bool {
	if o == nil || IsNil(o.IsSelfManagedNvme) {
		var ret bool
		return ret
	}
	return *o.IsSelfManagedNvme
}

// GetIsSelfManagedNvmeOk returns a tuple with the IsSelfManagedNvme field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HciDisk) GetIsSelfManagedNvmeOk() (*bool, bool) {
	if o == nil || IsNil(o.IsSelfManagedNvme) {
		return nil, false
	}
	return o.IsSelfManagedNvme, true
}

// HasIsSelfManagedNvme returns a boolean if a field has been set.
func (o *HciDisk) HasIsSelfManagedNvme() bool {
	if o != nil && !IsNil(o.IsSelfManagedNvme) {
		return true
	}

	return false
}

// SetIsSelfManagedNvme gets a reference to the given bool and assigns it to the IsSelfManagedNvme field.
func (o *HciDisk) SetIsSelfManagedNvme(v bool) {
	o.IsSelfManagedNvme = &v
}

// GetIsSpdkManaged returns the IsSpdkManaged field value if set, zero value otherwise.
func (o *HciDisk) GetIsSpdkManaged() bool {
	if o == nil || IsNil(o.IsSpdkManaged) {
		var ret bool
		return ret
	}
	return *o.IsSpdkManaged
}

// GetIsSpdkManagedOk returns a tuple with the IsSpdkManaged field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HciDisk) GetIsSpdkManagedOk() (*bool, bool) {
	if o == nil || IsNil(o.IsSpdkManaged) {
		return nil, false
	}
	return o.IsSpdkManaged, true
}

// HasIsSpdkManaged returns a boolean if a field has been set.
func (o *HciDisk) HasIsSpdkManaged() bool {
	if o != nil && !IsNil(o.IsSpdkManaged) {
		return true
	}

	return false
}

// SetIsSpdkManaged gets a reference to the given bool and assigns it to the IsSpdkManaged field.
func (o *HciDisk) SetIsSpdkManaged(v bool) {
	o.IsSpdkManaged = &v
}

// GetIsSuspectedUnhealthy returns the IsSuspectedUnhealthy field value if set, zero value otherwise.
func (o *HciDisk) GetIsSuspectedUnhealthy() bool {
	if o == nil || IsNil(o.IsSuspectedUnhealthy) {
		var ret bool
		return ret
	}
	return *o.IsSuspectedUnhealthy
}

// GetIsSuspectedUnhealthyOk returns a tuple with the IsSuspectedUnhealthy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HciDisk) GetIsSuspectedUnhealthyOk() (*bool, bool) {
	if o == nil || IsNil(o.IsSuspectedUnhealthy) {
		return nil, false
	}
	return o.IsSuspectedUnhealthy, true
}

// HasIsSuspectedUnhealthy returns a boolean if a field has been set.
func (o *HciDisk) HasIsSuspectedUnhealthy() bool {
	if o != nil && !IsNil(o.IsSuspectedUnhealthy) {
		return true
	}

	return false
}

// SetIsSuspectedUnhealthy gets a reference to the given bool and assigns it to the IsSuspectedUnhealthy field.
func (o *HciDisk) SetIsSuspectedUnhealthy(v bool) {
	o.IsSuspectedUnhealthy = &v
}

// GetIsUnderDiagnosis returns the IsUnderDiagnosis field value if set, zero value otherwise.
func (o *HciDisk) GetIsUnderDiagnosis() bool {
	if o == nil || IsNil(o.IsUnderDiagnosis) {
		var ret bool
		return ret
	}
	return *o.IsUnderDiagnosis
}

// GetIsUnderDiagnosisOk returns a tuple with the IsUnderDiagnosis field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HciDisk) GetIsUnderDiagnosisOk() (*bool, bool) {
	if o == nil || IsNil(o.IsUnderDiagnosis) {
		return nil, false
	}
	return o.IsUnderDiagnosis, true
}

// HasIsUnderDiagnosis returns a boolean if a field has been set.
func (o *HciDisk) HasIsUnderDiagnosis() bool {
	if o != nil && !IsNil(o.IsUnderDiagnosis) {
		return true
	}

	return false
}

// SetIsUnderDiagnosis gets a reference to the given bool and assigns it to the IsUnderDiagnosis field.
func (o *HciDisk) SetIsUnderDiagnosis(v bool) {
	o.IsUnderDiagnosis = &v
}

// GetIsUnhealthy returns the IsUnhealthy field value if set, zero value otherwise.
func (o *HciDisk) GetIsUnhealthy() bool {
	if o == nil || IsNil(o.IsUnhealthy) {
		var ret bool
		return ret
	}
	return *o.IsUnhealthy
}

// GetIsUnhealthyOk returns a tuple with the IsUnhealthy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HciDisk) GetIsUnhealthyOk() (*bool, bool) {
	if o == nil || IsNil(o.IsUnhealthy) {
		return nil, false
	}
	return o.IsUnhealthy, true
}

// HasIsUnhealthy returns a boolean if a field has been set.
func (o *HciDisk) HasIsUnhealthy() bool {
	if o != nil && !IsNil(o.IsUnhealthy) {
		return true
	}

	return false
}

// SetIsUnhealthy gets a reference to the given bool and assigns it to the IsUnhealthy field.
func (o *HciDisk) SetIsUnhealthy(v bool) {
	o.IsUnhealthy = &v
}

// GetLocation returns the Location field value if set, zero value otherwise.
func (o *HciDisk) GetLocation() int64 {
	if o == nil || IsNil(o.Location) {
		var ret int64
		return ret
	}
	return *o.Location
}

// GetLocationOk returns a tuple with the Location field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HciDisk) GetLocationOk() (*int64, bool) {
	if o == nil || IsNil(o.Location) {
		return nil, false
	}
	return o.Location, true
}

// HasLocation returns a boolean if a field has been set.
func (o *HciDisk) HasLocation() bool {
	if o != nil && !IsNil(o.Location) {
		return true
	}

	return false
}

// SetLocation gets a reference to the given int64 and assigns it to the Location field.
func (o *HciDisk) SetLocation(v int64) {
	o.Location = &v
}

// GetModel returns the Model field value if set, zero value otherwise.
func (o *HciDisk) GetModel() string {
	if o == nil || IsNil(o.Model) {
		var ret string
		return ret
	}
	return *o.Model
}

// GetModelOk returns a tuple with the Model field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HciDisk) GetModelOk() (*string, bool) {
	if o == nil || IsNil(o.Model) {
		return nil, false
	}
	return o.Model, true
}

// HasModel returns a boolean if a field has been set.
func (o *HciDisk) HasModel() bool {
	if o != nil && !IsNil(o.Model) {
		return true
	}

	return false
}

// SetModel gets a reference to the given string and assigns it to the Model field.
func (o *HciDisk) SetModel(v string) {
	o.Model = &v
}

// GetMountPath returns the MountPath field value if set, zero value otherwise.
func (o *HciDisk) GetMountPath() string {
	if o == nil || IsNil(o.MountPath) {
		var ret string
		return ret
	}
	return *o.MountPath
}

// GetMountPathOk returns a tuple with the MountPath field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HciDisk) GetMountPathOk() (*string, bool) {
	if o == nil || IsNil(o.MountPath) {
		return nil, false
	}
	return o.MountPath, true
}

// HasMountPath returns a boolean if a field has been set.
func (o *HciDisk) HasMountPath() bool {
	if o != nil && !IsNil(o.MountPath) {
		return true
	}

	return false
}

// SetMountPath gets a reference to the given string and assigns it to the MountPath field.
func (o *HciDisk) SetMountPath(v string) {
	o.MountPath = &v
}

// GetNodeExtId returns the NodeExtId field value if set, zero value otherwise.
func (o *HciDisk) GetNodeExtId() string {
	if o == nil || IsNil(o.NodeExtId) {
		var ret string
		return ret
	}
	return *o.NodeExtId
}

// GetNodeExtIdOk returns a tuple with the NodeExtId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HciDisk) GetNodeExtIdOk() (*string, bool) {
	if o == nil || IsNil(o.NodeExtId) {
		return nil, false
	}
	return o.NodeExtId, true
}

// HasNodeExtId returns a boolean if a field has been set.
func (o *HciDisk) HasNodeExtId() bool {
	if o != nil && !IsNil(o.NodeExtId) {
		return true
	}

	return false
}

// SetNodeExtId gets a reference to the given string and assigns it to the NodeExtId field.
func (o *HciDisk) SetNodeExtId(v string) {
	o.NodeExtId = &v
}

// GetNodeIpAddress returns the NodeIpAddress field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HciDisk) GetNodeIpAddress() HciIpAddress {
	if o == nil || IsNil(o.NodeIpAddress.Get()) {
		var ret HciIpAddress
		return ret
	}
	return *o.NodeIpAddress.Get()
}

// GetNodeIpAddressOk returns a tuple with the NodeIpAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HciDisk) GetNodeIpAddressOk() (*HciIpAddress, bool) {
	if o == nil {
		return nil, false
	}
	return o.NodeIpAddress.Get(), o.NodeIpAddress.IsSet()
}

// HasNodeIpAddress returns a boolean if a field has been set.
func (o *HciDisk) HasNodeIpAddress() bool {
	if o != nil && o.NodeIpAddress.IsSet() {
		return true
	}

	return false
}

// SetNodeIpAddress gets a reference to the given NullableHciIpAddress and assigns it to the NodeIpAddress field.
func (o *HciDisk) SetNodeIpAddress(v HciIpAddress) {
	o.NodeIpAddress.Set(&v)
}

// SetNodeIpAddressNil sets the value for NodeIpAddress to be an explicit nil
func (o *HciDisk) SetNodeIpAddressNil() {
	o.NodeIpAddress.Set(nil)
}

// UnsetNodeIpAddress ensures that no value is present for NodeIpAddress, not even an explicit nil
func (o *HciDisk) UnsetNodeIpAddress() {
	o.NodeIpAddress.Unset()
}

// GetNvmePciePath returns the NvmePciePath field value if set, zero value otherwise.
func (o *HciDisk) GetNvmePciePath() string {
	if o == nil || IsNil(o.NvmePciePath) {
		var ret string
		return ret
	}
	return *o.NvmePciePath
}

// GetNvmePciePathOk returns a tuple with the NvmePciePath field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HciDisk) GetNvmePciePathOk() (*string, bool) {
	if o == nil || IsNil(o.NvmePciePath) {
		return nil, false
	}
	return o.NvmePciePath, true
}

// HasNvmePciePath returns a boolean if a field has been set.
func (o *HciDisk) HasNvmePciePath() bool {
	if o != nil && !IsNil(o.NvmePciePath) {
		return true
	}

	return false
}

// SetNvmePciePath gets a reference to the given string and assigns it to the NvmePciePath field.
func (o *HciDisk) SetNvmePciePath(v string) {
	o.NvmePciePath = &v
}

// GetPhysicalCapacityBytes returns the PhysicalCapacityBytes field value if set, zero value otherwise.
func (o *HciDisk) GetPhysicalCapacityBytes() int64 {
	if o == nil || IsNil(o.PhysicalCapacityBytes) {
		var ret int64
		return ret
	}
	return *o.PhysicalCapacityBytes
}

// GetPhysicalCapacityBytesOk returns a tuple with the PhysicalCapacityBytes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HciDisk) GetPhysicalCapacityBytesOk() (*int64, bool) {
	if o == nil || IsNil(o.PhysicalCapacityBytes) {
		return nil, false
	}
	return o.PhysicalCapacityBytes, true
}

// HasPhysicalCapacityBytes returns a boolean if a field has been set.
func (o *HciDisk) HasPhysicalCapacityBytes() bool {
	if o != nil && !IsNil(o.PhysicalCapacityBytes) {
		return true
	}

	return false
}

// SetPhysicalCapacityBytes gets a reference to the given int64 and assigns it to the PhysicalCapacityBytes field.
func (o *HciDisk) SetPhysicalCapacityBytes(v int64) {
	o.PhysicalCapacityBytes = &v
}

// GetSerialNumber returns the SerialNumber field value if set, zero value otherwise.
func (o *HciDisk) GetSerialNumber() string {
	if o == nil || IsNil(o.SerialNumber) {
		var ret string
		return ret
	}
	return *o.SerialNumber
}

// GetSerialNumberOk returns a tuple with the SerialNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HciDisk) GetSerialNumberOk() (*string, bool) {
	if o == nil || IsNil(o.SerialNumber) {
		return nil, false
	}
	return o.SerialNumber, true
}

// HasSerialNumber returns a boolean if a field has been set.
func (o *HciDisk) HasSerialNumber() bool {
	if o != nil && !IsNil(o.SerialNumber) {
		return true
	}

	return false
}

// SetSerialNumber gets a reference to the given string and assigns it to the SerialNumber field.
func (o *HciDisk) SetSerialNumber(v string) {
	o.SerialNumber = &v
}

// GetServiceVmId returns the ServiceVmId field value if set, zero value otherwise.
func (o *HciDisk) GetServiceVmId() string {
	if o == nil || IsNil(o.ServiceVmId) {
		var ret string
		return ret
	}
	return *o.ServiceVmId
}

// GetServiceVmIdOk returns a tuple with the ServiceVmId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HciDisk) GetServiceVmIdOk() (*string, bool) {
	if o == nil || IsNil(o.ServiceVmId) {
		return nil, false
	}
	return o.ServiceVmId, true
}

// HasServiceVmId returns a boolean if a field has been set.
func (o *HciDisk) HasServiceVmId() bool {
	if o != nil && !IsNil(o.ServiceVmId) {
		return true
	}

	return false
}

// SetServiceVmId gets a reference to the given string and assigns it to the ServiceVmId field.
func (o *HciDisk) SetServiceVmId(v string) {
	o.ServiceVmId = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *HciDisk) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HciDisk) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *HciDisk) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *HciDisk) SetStatus(v string) {
	o.Status = &v
}

// GetStoragePoolExtId returns the StoragePoolExtId field value if set, zero value otherwise.
func (o *HciDisk) GetStoragePoolExtId() string {
	if o == nil || IsNil(o.StoragePoolExtId) {
		var ret string
		return ret
	}
	return *o.StoragePoolExtId
}

// GetStoragePoolExtIdOk returns a tuple with the StoragePoolExtId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HciDisk) GetStoragePoolExtIdOk() (*string, bool) {
	if o == nil || IsNil(o.StoragePoolExtId) {
		return nil, false
	}
	return o.StoragePoolExtId, true
}

// HasStoragePoolExtId returns a boolean if a field has been set.
func (o *HciDisk) HasStoragePoolExtId() bool {
	if o != nil && !IsNil(o.StoragePoolExtId) {
		return true
	}

	return false
}

// SetStoragePoolExtId gets a reference to the given string and assigns it to the StoragePoolExtId field.
func (o *HciDisk) SetStoragePoolExtId(v string) {
	o.StoragePoolExtId = &v
}

// GetStorageTier returns the StorageTier field value if set, zero value otherwise.
func (o *HciDisk) GetStorageTier() string {
	if o == nil || IsNil(o.StorageTier) {
		var ret string
		return ret
	}
	return *o.StorageTier
}

// GetStorageTierOk returns a tuple with the StorageTier field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HciDisk) GetStorageTierOk() (*string, bool) {
	if o == nil || IsNil(o.StorageTier) {
		return nil, false
	}
	return o.StorageTier, true
}

// HasStorageTier returns a boolean if a field has been set.
func (o *HciDisk) HasStorageTier() bool {
	if o != nil && !IsNil(o.StorageTier) {
		return true
	}

	return false
}

// SetStorageTier gets a reference to the given string and assigns it to the StorageTier field.
func (o *HciDisk) SetStorageTier(v string) {
	o.StorageTier = &v
}

// GetTargetFirmwareVersion returns the TargetFirmwareVersion field value if set, zero value otherwise.
func (o *HciDisk) GetTargetFirmwareVersion() string {
	if o == nil || IsNil(o.TargetFirmwareVersion) {
		var ret string
		return ret
	}
	return *o.TargetFirmwareVersion
}

// GetTargetFirmwareVersionOk returns a tuple with the TargetFirmwareVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HciDisk) GetTargetFirmwareVersionOk() (*string, bool) {
	if o == nil || IsNil(o.TargetFirmwareVersion) {
		return nil, false
	}
	return o.TargetFirmwareVersion, true
}

// HasTargetFirmwareVersion returns a boolean if a field has been set.
func (o *HciDisk) HasTargetFirmwareVersion() bool {
	if o != nil && !IsNil(o.TargetFirmwareVersion) {
		return true
	}

	return false
}

// SetTargetFirmwareVersion gets a reference to the given string and assigns it to the TargetFirmwareVersion field.
func (o *HciDisk) SetTargetFirmwareVersion(v string) {
	o.TargetFirmwareVersion = &v
}

// GetVendor returns the Vendor field value if set, zero value otherwise.
func (o *HciDisk) GetVendor() string {
	if o == nil || IsNil(o.Vendor) {
		var ret string
		return ret
	}
	return *o.Vendor
}

// GetVendorOk returns a tuple with the Vendor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HciDisk) GetVendorOk() (*string, bool) {
	if o == nil || IsNil(o.Vendor) {
		return nil, false
	}
	return o.Vendor, true
}

// HasVendor returns a boolean if a field has been set.
func (o *HciDisk) HasVendor() bool {
	if o != nil && !IsNil(o.Vendor) {
		return true
	}

	return false
}

// SetVendor gets a reference to the given string and assigns it to the Vendor field.
func (o *HciDisk) SetVendor(v string) {
	o.Vendor = &v
}

// GetNode returns the Node field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HciDisk) GetNode() HciNodeRelationship {
	if o == nil || IsNil(o.Node.Get()) {
		var ret HciNodeRelationship
		return ret
	}
	return *o.Node.Get()
}

// GetNodeOk returns a tuple with the Node field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HciDisk) GetNodeOk() (*HciNodeRelationship, bool) {
	if o == nil {
		return nil, false
	}
	return o.Node.Get(), o.Node.IsSet()
}

// HasNode returns a boolean if a field has been set.
func (o *HciDisk) HasNode() bool {
	if o != nil && o.Node.IsSet() {
		return true
	}

	return false
}

// SetNode gets a reference to the given NullableHciNodeRelationship and assigns it to the Node field.
func (o *HciDisk) SetNode(v HciNodeRelationship) {
	o.Node.Set(&v)
}

// SetNodeNil sets the value for Node to be an explicit nil
func (o *HciDisk) SetNodeNil() {
	o.Node.Set(nil)
}

// UnsetNode ensures that no value is present for Node, not even an explicit nil
func (o *HciDisk) UnsetNode() {
	o.Node.Unset()
}

// GetRegisteredDevice returns the RegisteredDevice field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HciDisk) GetRegisteredDevice() AssetDeviceRegistrationRelationship {
	if o == nil || IsNil(o.RegisteredDevice.Get()) {
		var ret AssetDeviceRegistrationRelationship
		return ret
	}
	return *o.RegisteredDevice.Get()
}

// GetRegisteredDeviceOk returns a tuple with the RegisteredDevice field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HciDisk) GetRegisteredDeviceOk() (*AssetDeviceRegistrationRelationship, bool) {
	if o == nil {
		return nil, false
	}
	return o.RegisteredDevice.Get(), o.RegisteredDevice.IsSet()
}

// HasRegisteredDevice returns a boolean if a field has been set.
func (o *HciDisk) HasRegisteredDevice() bool {
	if o != nil && o.RegisteredDevice.IsSet() {
		return true
	}

	return false
}

// SetRegisteredDevice gets a reference to the given NullableAssetDeviceRegistrationRelationship and assigns it to the RegisteredDevice field.
func (o *HciDisk) SetRegisteredDevice(v AssetDeviceRegistrationRelationship) {
	o.RegisteredDevice.Set(&v)
}

// SetRegisteredDeviceNil sets the value for RegisteredDevice to be an explicit nil
func (o *HciDisk) SetRegisteredDeviceNil() {
	o.RegisteredDevice.Set(nil)
}

// UnsetRegisteredDevice ensures that no value is present for RegisteredDevice, not even an explicit nil
func (o *HciDisk) UnsetRegisteredDevice() {
	o.RegisteredDevice.Unset()
}

func (o HciDisk) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o HciDisk) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	serializedMoBaseMo, errMoBaseMo := json.Marshal(o.MoBaseMo)
	if errMoBaseMo != nil {
		return map[string]interface{}{}, errMoBaseMo
	}
	errMoBaseMo = json.Unmarshal([]byte(serializedMoBaseMo), &toSerialize)
	if errMoBaseMo != nil {
		return map[string]interface{}{}, errMoBaseMo
	}
	if _, exists := toSerialize["ClassId"]; !exists {
		toSerialize["ClassId"] = o.GetDefaultClassId()
	}
	toSerialize["ClassId"] = o.ClassId
	if _, exists := toSerialize["ObjectType"]; !exists {
		toSerialize["ObjectType"] = o.GetDefaultObjectType()
	}
	toSerialize["ObjectType"] = o.ObjectType
	if !IsNil(o.ClusterExtId) {
		toSerialize["ClusterExtId"] = o.ClusterExtId
	}
	if !IsNil(o.ClusterName) {
		toSerialize["ClusterName"] = o.ClusterName
	}
	if o.CvmIpAddress.IsSet() {
		toSerialize["CvmIpAddress"] = o.CvmIpAddress.Get()
	}
	if !IsNil(o.DiskExtId) {
		toSerialize["DiskExtId"] = o.DiskExtId
	}
	if !IsNil(o.DiskSizeBytes) {
		toSerialize["DiskSizeBytes"] = o.DiskSizeBytes
	}
	if !IsNil(o.FirmwareVersion) {
		toSerialize["FirmwareVersion"] = o.FirmwareVersion
	}
	if !IsNil(o.HasBootPartitionsOnly) {
		toSerialize["HasBootPartitionsOnly"] = o.HasBootPartitionsOnly
	}
	if !IsNil(o.HostName) {
		toSerialize["HostName"] = o.HostName
	}
	if !IsNil(o.IsBootDisk) {
		toSerialize["IsBootDisk"] = o.IsBootDisk
	}
	if !IsNil(o.IsDataMigrated) {
		toSerialize["IsDataMigrated"] = o.IsDataMigrated
	}
	if !IsNil(o.IsDiagnosticInfoAvailable) {
		toSerialize["IsDiagnosticInfoAvailable"] = o.IsDiagnosticInfoAvailable
	}
	if !IsNil(o.IsErrorFoundInLogs) {
		toSerialize["IsErrorFoundInLogs"] = o.IsErrorFoundInLogs
	}
	if !IsNil(o.IsMarkedForRemoval) {
		toSerialize["IsMarkedForRemoval"] = o.IsMarkedForRemoval
	}
	if !IsNil(o.IsMounted) {
		toSerialize["IsMounted"] = o.IsMounted
	}
	if !IsNil(o.IsOnline) {
		toSerialize["IsOnline"] = o.IsOnline
	}
	if !IsNil(o.IsPasswordProtected) {
		toSerialize["IsPasswordProtected"] = o.IsPasswordProtected
	}
	if !IsNil(o.IsPlannedOutage) {
		toSerialize["IsPlannedOutage"] = o.IsPlannedOutage
	}
	if !IsNil(o.IsSelfEncryptingDrive) {
		toSerialize["IsSelfEncryptingDrive"] = o.IsSelfEncryptingDrive
	}
	if !IsNil(o.IsSelfManagedNvme) {
		toSerialize["IsSelfManagedNvme"] = o.IsSelfManagedNvme
	}
	if !IsNil(o.IsSpdkManaged) {
		toSerialize["IsSpdkManaged"] = o.IsSpdkManaged
	}
	if !IsNil(o.IsSuspectedUnhealthy) {
		toSerialize["IsSuspectedUnhealthy"] = o.IsSuspectedUnhealthy
	}
	if !IsNil(o.IsUnderDiagnosis) {
		toSerialize["IsUnderDiagnosis"] = o.IsUnderDiagnosis
	}
	if !IsNil(o.IsUnhealthy) {
		toSerialize["IsUnhealthy"] = o.IsUnhealthy
	}
	if !IsNil(o.Location) {
		toSerialize["Location"] = o.Location
	}
	if !IsNil(o.Model) {
		toSerialize["Model"] = o.Model
	}
	if !IsNil(o.MountPath) {
		toSerialize["MountPath"] = o.MountPath
	}
	if !IsNil(o.NodeExtId) {
		toSerialize["NodeExtId"] = o.NodeExtId
	}
	if o.NodeIpAddress.IsSet() {
		toSerialize["NodeIpAddress"] = o.NodeIpAddress.Get()
	}
	if !IsNil(o.NvmePciePath) {
		toSerialize["NvmePciePath"] = o.NvmePciePath
	}
	if !IsNil(o.PhysicalCapacityBytes) {
		toSerialize["PhysicalCapacityBytes"] = o.PhysicalCapacityBytes
	}
	if !IsNil(o.SerialNumber) {
		toSerialize["SerialNumber"] = o.SerialNumber
	}
	if !IsNil(o.ServiceVmId) {
		toSerialize["ServiceVmId"] = o.ServiceVmId
	}
	if !IsNil(o.Status) {
		toSerialize["Status"] = o.Status
	}
	if !IsNil(o.StoragePoolExtId) {
		toSerialize["StoragePoolExtId"] = o.StoragePoolExtId
	}
	if !IsNil(o.StorageTier) {
		toSerialize["StorageTier"] = o.StorageTier
	}
	if !IsNil(o.TargetFirmwareVersion) {
		toSerialize["TargetFirmwareVersion"] = o.TargetFirmwareVersion
	}
	if !IsNil(o.Vendor) {
		toSerialize["Vendor"] = o.Vendor
	}
	if o.Node.IsSet() {
		toSerialize["Node"] = o.Node.Get()
	}
	if o.RegisteredDevice.IsSet() {
		toSerialize["RegisteredDevice"] = o.RegisteredDevice.Get()
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *HciDisk) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"ClassId",
		"ObjectType",
	}

	// defaultValueFuncMap captures the default values for required properties.
	// These values are used when required properties are missing from the payload.
	defaultValueFuncMap := map[string]func() interface{}{
		"ClassId":    o.GetDefaultClassId,
		"ObjectType": o.GetDefaultObjectType,
	}
	var defaultValueApplied bool
	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			if _, ok := defaultValueFuncMap[requiredProperty]; ok {
				allProperties[requiredProperty] = defaultValueFuncMap[requiredProperty]()
				defaultValueApplied = true
			}
		}
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	if defaultValueApplied {
		data, err = json.Marshal(allProperties)
		if err != nil {
			return err
		}
	}
	type HciDiskWithoutEmbeddedStruct struct {
		// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.
		ClassId string `json:"ClassId"`
		// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
		ObjectType string `json:"ObjectType"`
		// The unique identifier of the cluster.
		ClusterExtId *string `json:"ClusterExtId,omitempty"`
		// The name of the cluster this disk belongs to.
		ClusterName  *string              `json:"ClusterName,omitempty"`
		CvmIpAddress NullableHciIpAddress `json:"CvmIpAddress,omitempty"`
		// The unique identifier of the disk.
		DiskExtId *string `json:"DiskExtId,omitempty"`
		// The size of the disk in bytes.
		DiskSizeBytes *int64 `json:"DiskSizeBytes,omitempty"`
		// The current firmware version of the disk.
		FirmwareVersion *string `json:"FirmwareVersion,omitempty"`
		// Indicates if the disk is boot only and no disk operation to be run on it.
		HasBootPartitionsOnly *bool `json:"HasBootPartitionsOnly,omitempty"`
		// The name of the host the disk is running on.
		HostName *string `json:"HostName,omitempty"`
		// Indicate if the disk is a boot disk.
		IsBootDisk *bool `json:"IsBootDisk,omitempty"`
		// Indicates whether the disk data is migrated.
		IsDataMigrated *bool `json:"IsDataMigrated,omitempty"`
		// Indicates whether the diagnostic information is available.
		IsDiagnosticInfoAvailable *bool `json:"IsDiagnosticInfoAvailable,omitempty"`
		// Indicates whether the error is found in kernel logs.
		IsErrorFoundInLogs *bool `json:"IsErrorFoundInLogs,omitempty"`
		// Indicates whether the disk is marked for removal.
		IsMarkedForRemoval *bool `json:"IsMarkedForRemoval,omitempty"`
		// Indicates whether the disk is mounted.
		IsMounted *bool `json:"IsMounted,omitempty"`
		// Indicates whether the disk is online or offline.
		IsOnline *bool `json:"IsOnline,omitempty"`
		// The password protection status of the disk.
		IsPasswordProtected *bool `json:"IsPasswordProtected,omitempty"`
		// Indicates if diagnostics are running on the Disk.
		IsPlannedOutage *bool `json:"IsPlannedOutage,omitempty"`
		// The self-encrypting drive status of the disk.
		IsSelfEncryptingDrive *bool `json:"IsSelfEncryptingDrive,omitempty"`
		// Indicates if the NVMe Disk is self managed and no host/CVM reboot is required.
		IsSelfManagedNvme *bool `json:"IsSelfManagedNvme,omitempty"`
		// Indicates if NVMe device is managed by storage performance development  kit (SPDK).
		IsSpdkManaged *bool `json:"IsSpdkManaged,omitempty"`
		// Indicates whether the disk is suspected unhealthy.
		IsSuspectedUnhealthy *bool `json:"IsSuspectedUnhealthy,omitempty"`
		// Indicates whether the disk is under diagnosis.
		IsUnderDiagnosis *bool `json:"IsUnderDiagnosis,omitempty"`
		// Indicates whether the disk is unhealthy.
		IsUnhealthy *bool `json:"IsUnhealthy,omitempty"`
		// The location of the disk in the node.
		Location *int64 `json:"Location,omitempty"`
		// The model of the reported disk.
		Model *string `json:"Model,omitempty"`
		// The mount path of the disk.
		MountPath *string `json:"MountPath,omitempty"`
		// The unique identifier of the node.
		NodeExtId     *string              `json:"NodeExtId,omitempty"`
		NodeIpAddress NullableHciIpAddress `json:"NodeIpAddress,omitempty"`
		// The PCIe path of the NVMe disk.
		NvmePciePath *string `json:"NvmePciePath,omitempty"`
		// The physical capacity of the disk in bytes.
		PhysicalCapacityBytes *int64 `json:"PhysicalCapacityBytes,omitempty"`
		// The serial number of the disk.
		SerialNumber *string `json:"SerialNumber,omitempty"`
		// The unique identifier of the service VM on the node.
		ServiceVmId *string `json:"ServiceVmId,omitempty"`
		// The status of the disk such as NORMAL, MARKED_FOR_REMOVAL_BUT_NOT_DETACHABLE, DETACHABLE, DATA_MIGRATION_INITIATED.
		Status *string `json:"Status,omitempty"`
		// The unique identifier of the storage pool.
		StoragePoolExtId *string `json:"StoragePoolExtId,omitempty"`
		// The storage tier of the disk such as SSD_PCIE, SSD_SATA, DAS_SATA, CLOUD, SSD_MEM_NVME.
		StorageTier *string `json:"StorageTier,omitempty"`
		// The target firmware version of the disk.
		TargetFirmwareVersion *string `json:"TargetFirmwareVersion,omitempty"`
		// The vendor of the reported disk.
		Vendor           *string                                     `json:"Vendor,omitempty"`
		Node             NullableHciNodeRelationship                 `json:"Node,omitempty"`
		RegisteredDevice NullableAssetDeviceRegistrationRelationship `json:"RegisteredDevice,omitempty"`
	}

	varHciDiskWithoutEmbeddedStruct := HciDiskWithoutEmbeddedStruct{}

	err = json.Unmarshal(data, &varHciDiskWithoutEmbeddedStruct)
	if err == nil {
		varHciDisk := _HciDisk{}
		varHciDisk.ClassId = varHciDiskWithoutEmbeddedStruct.ClassId
		varHciDisk.ObjectType = varHciDiskWithoutEmbeddedStruct.ObjectType
		varHciDisk.ClusterExtId = varHciDiskWithoutEmbeddedStruct.ClusterExtId
		varHciDisk.ClusterName = varHciDiskWithoutEmbeddedStruct.ClusterName
		varHciDisk.CvmIpAddress = varHciDiskWithoutEmbeddedStruct.CvmIpAddress
		varHciDisk.DiskExtId = varHciDiskWithoutEmbeddedStruct.DiskExtId
		varHciDisk.DiskSizeBytes = varHciDiskWithoutEmbeddedStruct.DiskSizeBytes
		varHciDisk.FirmwareVersion = varHciDiskWithoutEmbeddedStruct.FirmwareVersion
		varHciDisk.HasBootPartitionsOnly = varHciDiskWithoutEmbeddedStruct.HasBootPartitionsOnly
		varHciDisk.HostName = varHciDiskWithoutEmbeddedStruct.HostName
		varHciDisk.IsBootDisk = varHciDiskWithoutEmbeddedStruct.IsBootDisk
		varHciDisk.IsDataMigrated = varHciDiskWithoutEmbeddedStruct.IsDataMigrated
		varHciDisk.IsDiagnosticInfoAvailable = varHciDiskWithoutEmbeddedStruct.IsDiagnosticInfoAvailable
		varHciDisk.IsErrorFoundInLogs = varHciDiskWithoutEmbeddedStruct.IsErrorFoundInLogs
		varHciDisk.IsMarkedForRemoval = varHciDiskWithoutEmbeddedStruct.IsMarkedForRemoval
		varHciDisk.IsMounted = varHciDiskWithoutEmbeddedStruct.IsMounted
		varHciDisk.IsOnline = varHciDiskWithoutEmbeddedStruct.IsOnline
		varHciDisk.IsPasswordProtected = varHciDiskWithoutEmbeddedStruct.IsPasswordProtected
		varHciDisk.IsPlannedOutage = varHciDiskWithoutEmbeddedStruct.IsPlannedOutage
		varHciDisk.IsSelfEncryptingDrive = varHciDiskWithoutEmbeddedStruct.IsSelfEncryptingDrive
		varHciDisk.IsSelfManagedNvme = varHciDiskWithoutEmbeddedStruct.IsSelfManagedNvme
		varHciDisk.IsSpdkManaged = varHciDiskWithoutEmbeddedStruct.IsSpdkManaged
		varHciDisk.IsSuspectedUnhealthy = varHciDiskWithoutEmbeddedStruct.IsSuspectedUnhealthy
		varHciDisk.IsUnderDiagnosis = varHciDiskWithoutEmbeddedStruct.IsUnderDiagnosis
		varHciDisk.IsUnhealthy = varHciDiskWithoutEmbeddedStruct.IsUnhealthy
		varHciDisk.Location = varHciDiskWithoutEmbeddedStruct.Location
		varHciDisk.Model = varHciDiskWithoutEmbeddedStruct.Model
		varHciDisk.MountPath = varHciDiskWithoutEmbeddedStruct.MountPath
		varHciDisk.NodeExtId = varHciDiskWithoutEmbeddedStruct.NodeExtId
		varHciDisk.NodeIpAddress = varHciDiskWithoutEmbeddedStruct.NodeIpAddress
		varHciDisk.NvmePciePath = varHciDiskWithoutEmbeddedStruct.NvmePciePath
		varHciDisk.PhysicalCapacityBytes = varHciDiskWithoutEmbeddedStruct.PhysicalCapacityBytes
		varHciDisk.SerialNumber = varHciDiskWithoutEmbeddedStruct.SerialNumber
		varHciDisk.ServiceVmId = varHciDiskWithoutEmbeddedStruct.ServiceVmId
		varHciDisk.Status = varHciDiskWithoutEmbeddedStruct.Status
		varHciDisk.StoragePoolExtId = varHciDiskWithoutEmbeddedStruct.StoragePoolExtId
		varHciDisk.StorageTier = varHciDiskWithoutEmbeddedStruct.StorageTier
		varHciDisk.TargetFirmwareVersion = varHciDiskWithoutEmbeddedStruct.TargetFirmwareVersion
		varHciDisk.Vendor = varHciDiskWithoutEmbeddedStruct.Vendor
		varHciDisk.Node = varHciDiskWithoutEmbeddedStruct.Node
		varHciDisk.RegisteredDevice = varHciDiskWithoutEmbeddedStruct.RegisteredDevice
		*o = HciDisk(varHciDisk)
	} else {
		return err
	}

	varHciDisk := _HciDisk{}

	err = json.Unmarshal(data, &varHciDisk)
	if err == nil {
		o.MoBaseMo = varHciDisk.MoBaseMo
	} else {
		return err
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "ClassId")
		delete(additionalProperties, "ObjectType")
		delete(additionalProperties, "ClusterExtId")
		delete(additionalProperties, "ClusterName")
		delete(additionalProperties, "CvmIpAddress")
		delete(additionalProperties, "DiskExtId")
		delete(additionalProperties, "DiskSizeBytes")
		delete(additionalProperties, "FirmwareVersion")
		delete(additionalProperties, "HasBootPartitionsOnly")
		delete(additionalProperties, "HostName")
		delete(additionalProperties, "IsBootDisk")
		delete(additionalProperties, "IsDataMigrated")
		delete(additionalProperties, "IsDiagnosticInfoAvailable")
		delete(additionalProperties, "IsErrorFoundInLogs")
		delete(additionalProperties, "IsMarkedForRemoval")
		delete(additionalProperties, "IsMounted")
		delete(additionalProperties, "IsOnline")
		delete(additionalProperties, "IsPasswordProtected")
		delete(additionalProperties, "IsPlannedOutage")
		delete(additionalProperties, "IsSelfEncryptingDrive")
		delete(additionalProperties, "IsSelfManagedNvme")
		delete(additionalProperties, "IsSpdkManaged")
		delete(additionalProperties, "IsSuspectedUnhealthy")
		delete(additionalProperties, "IsUnderDiagnosis")
		delete(additionalProperties, "IsUnhealthy")
		delete(additionalProperties, "Location")
		delete(additionalProperties, "Model")
		delete(additionalProperties, "MountPath")
		delete(additionalProperties, "NodeExtId")
		delete(additionalProperties, "NodeIpAddress")
		delete(additionalProperties, "NvmePciePath")
		delete(additionalProperties, "PhysicalCapacityBytes")
		delete(additionalProperties, "SerialNumber")
		delete(additionalProperties, "ServiceVmId")
		delete(additionalProperties, "Status")
		delete(additionalProperties, "StoragePoolExtId")
		delete(additionalProperties, "StorageTier")
		delete(additionalProperties, "TargetFirmwareVersion")
		delete(additionalProperties, "Vendor")
		delete(additionalProperties, "Node")
		delete(additionalProperties, "RegisteredDevice")

		// remove fields from embedded structs
		reflectMoBaseMo := reflect.ValueOf(o.MoBaseMo)
		for i := 0; i < reflectMoBaseMo.Type().NumField(); i++ {
			t := reflectMoBaseMo.Type().Field(i)

			if jsonTag := t.Tag.Get("json"); jsonTag != "" {
				fieldName := ""
				if commaIdx := strings.Index(jsonTag, ","); commaIdx > 0 {
					fieldName = jsonTag[:commaIdx]
				} else {
					fieldName = jsonTag
				}
				if fieldName != "AdditionalProperties" {
					delete(additionalProperties, fieldName)
				}
			}
		}

		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableHciDisk struct {
	value *HciDisk
	isSet bool
}

func (v NullableHciDisk) Get() *HciDisk {
	return v.value
}

func (v *NullableHciDisk) Set(val *HciDisk) {
	v.value = val
	v.isSet = true
}

func (v NullableHciDisk) IsSet() bool {
	return v.isSet
}

func (v *NullableHciDisk) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHciDisk(val *HciDisk) *NullableHciDisk {
	return &NullableHciDisk{value: val, isSet: true}
}

func (v NullableHciDisk) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHciDisk) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
