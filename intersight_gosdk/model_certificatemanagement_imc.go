/*
Cisco Intersight

Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations. The Intersight OpenAPI document defines the complete set of properties that are returned in the HTTP response. From that perspective, a client can expect that no additional properties are returned, unless these properties are explicitly defined in the OpenAPI document. However, when a client uses an older version of the Intersight OpenAPI document, the server may send additional properties because the software is more recent than the client. In that case, the client may receive properties that it does not know about. Some generated SDKs perform a strict validation of the HTTP response body against the OpenAPI document.

API version: 1.0.11-18775
Contact: intersight@cisco.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package intersight

import (
	"encoding/json"
	"fmt"
	"reflect"
	"strings"
)

// checks if the CertificatemanagementImc type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CertificatemanagementImc{}

// CertificatemanagementImc IMC certificate has both Certificate and private key that will be used for IMC.
type CertificatemanagementImc struct {
	CertificatemanagementCertificateBase
	// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.
	ClassId string `json:"ClassId"`
	// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
	ObjectType string `json:"ObjectType"`
	// Certificate Type for the certificate management. * `None` - Set certificate on the selected end point . * `KMIPClient` - Set KMIP certificate on the selected end point.
	CertType *string `json:"CertType,omitempty"`
	// Indicates whether the value of the 'privatekey' property has been set.
	IsPrivatekeySet *bool `json:"IsPrivatekeySet,omitempty"`
	// Private Key which is used to validate the certificate.
	Privatekey           *string `json:"Privatekey,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _CertificatemanagementImc CertificatemanagementImc

// NewCertificatemanagementImc instantiates a new CertificatemanagementImc object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCertificatemanagementImc(classId string, objectType string) *CertificatemanagementImc {
	this := CertificatemanagementImc{}
	this.ClassId = classId
	this.ObjectType = objectType
	var enabled bool = true
	this.Enabled = &enabled
	var certType string = "None"
	this.CertType = &certType
	return &this
}

// NewCertificatemanagementImcWithDefaults instantiates a new CertificatemanagementImc object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCertificatemanagementImcWithDefaults() *CertificatemanagementImc {
	this := CertificatemanagementImc{}
	var classId string = "certificatemanagement.Imc"
	this.ClassId = classId
	var objectType string = "certificatemanagement.Imc"
	this.ObjectType = objectType
	var certType string = "None"
	this.CertType = &certType
	return &this
}

// GetClassId returns the ClassId field value
func (o *CertificatemanagementImc) GetClassId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ClassId
}

// GetClassIdOk returns a tuple with the ClassId field value
// and a boolean to check if the value has been set.
func (o *CertificatemanagementImc) GetClassIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ClassId, true
}

// SetClassId sets field value
func (o *CertificatemanagementImc) SetClassId(v string) {
	o.ClassId = v
}

// GetDefaultClassId returns the default value "certificatemanagement.Imc" of the ClassId field.
func (o *CertificatemanagementImc) GetDefaultClassId() interface{} {
	return "certificatemanagement.Imc"
}

// GetObjectType returns the ObjectType field value
func (o *CertificatemanagementImc) GetObjectType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ObjectType
}

// GetObjectTypeOk returns a tuple with the ObjectType field value
// and a boolean to check if the value has been set.
func (o *CertificatemanagementImc) GetObjectTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ObjectType, true
}

// SetObjectType sets field value
func (o *CertificatemanagementImc) SetObjectType(v string) {
	o.ObjectType = v
}

// GetDefaultObjectType returns the default value "certificatemanagement.Imc" of the ObjectType field.
func (o *CertificatemanagementImc) GetDefaultObjectType() interface{} {
	return "certificatemanagement.Imc"
}

// GetCertType returns the CertType field value if set, zero value otherwise.
func (o *CertificatemanagementImc) GetCertType() string {
	if o == nil || IsNil(o.CertType) {
		var ret string
		return ret
	}
	return *o.CertType
}

// GetCertTypeOk returns a tuple with the CertType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertificatemanagementImc) GetCertTypeOk() (*string, bool) {
	if o == nil || IsNil(o.CertType) {
		return nil, false
	}
	return o.CertType, true
}

// HasCertType returns a boolean if a field has been set.
func (o *CertificatemanagementImc) HasCertType() bool {
	if o != nil && !IsNil(o.CertType) {
		return true
	}

	return false
}

// SetCertType gets a reference to the given string and assigns it to the CertType field.
func (o *CertificatemanagementImc) SetCertType(v string) {
	o.CertType = &v
}

// GetIsPrivatekeySet returns the IsPrivatekeySet field value if set, zero value otherwise.
func (o *CertificatemanagementImc) GetIsPrivatekeySet() bool {
	if o == nil || IsNil(o.IsPrivatekeySet) {
		var ret bool
		return ret
	}
	return *o.IsPrivatekeySet
}

// GetIsPrivatekeySetOk returns a tuple with the IsPrivatekeySet field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertificatemanagementImc) GetIsPrivatekeySetOk() (*bool, bool) {
	if o == nil || IsNil(o.IsPrivatekeySet) {
		return nil, false
	}
	return o.IsPrivatekeySet, true
}

// HasIsPrivatekeySet returns a boolean if a field has been set.
func (o *CertificatemanagementImc) HasIsPrivatekeySet() bool {
	if o != nil && !IsNil(o.IsPrivatekeySet) {
		return true
	}

	return false
}

// SetIsPrivatekeySet gets a reference to the given bool and assigns it to the IsPrivatekeySet field.
func (o *CertificatemanagementImc) SetIsPrivatekeySet(v bool) {
	o.IsPrivatekeySet = &v
}

// GetPrivatekey returns the Privatekey field value if set, zero value otherwise.
func (o *CertificatemanagementImc) GetPrivatekey() string {
	if o == nil || IsNil(o.Privatekey) {
		var ret string
		return ret
	}
	return *o.Privatekey
}

// GetPrivatekeyOk returns a tuple with the Privatekey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertificatemanagementImc) GetPrivatekeyOk() (*string, bool) {
	if o == nil || IsNil(o.Privatekey) {
		return nil, false
	}
	return o.Privatekey, true
}

// HasPrivatekey returns a boolean if a field has been set.
func (o *CertificatemanagementImc) HasPrivatekey() bool {
	if o != nil && !IsNil(o.Privatekey) {
		return true
	}

	return false
}

// SetPrivatekey gets a reference to the given string and assigns it to the Privatekey field.
func (o *CertificatemanagementImc) SetPrivatekey(v string) {
	o.Privatekey = &v
}

func (o CertificatemanagementImc) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CertificatemanagementImc) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	serializedCertificatemanagementCertificateBase, errCertificatemanagementCertificateBase := json.Marshal(o.CertificatemanagementCertificateBase)
	if errCertificatemanagementCertificateBase != nil {
		return map[string]interface{}{}, errCertificatemanagementCertificateBase
	}
	errCertificatemanagementCertificateBase = json.Unmarshal([]byte(serializedCertificatemanagementCertificateBase), &toSerialize)
	if errCertificatemanagementCertificateBase != nil {
		return map[string]interface{}{}, errCertificatemanagementCertificateBase
	}
	if _, exists := toSerialize["ClassId"]; !exists {
		toSerialize["ClassId"] = o.GetDefaultClassId()
	}
	toSerialize["ClassId"] = o.ClassId
	if _, exists := toSerialize["ObjectType"]; !exists {
		toSerialize["ObjectType"] = o.GetDefaultObjectType()
	}
	toSerialize["ObjectType"] = o.ObjectType
	if !IsNil(o.CertType) {
		toSerialize["CertType"] = o.CertType
	}
	if !IsNil(o.IsPrivatekeySet) {
		toSerialize["IsPrivatekeySet"] = o.IsPrivatekeySet
	}
	if !IsNil(o.Privatekey) {
		toSerialize["Privatekey"] = o.Privatekey
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *CertificatemanagementImc) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"ClassId",
		"ObjectType",
	}

	// defaultValueFuncMap captures the default values for required properties.
	// These values are used when required properties are missing from the payload.
	defaultValueFuncMap := map[string]func() interface{}{
		"ClassId":    o.GetDefaultClassId,
		"ObjectType": o.GetDefaultObjectType,
	}
	var defaultValueApplied bool
	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			if _, ok := defaultValueFuncMap[requiredProperty]; ok {
				allProperties[requiredProperty] = defaultValueFuncMap[requiredProperty]()
				defaultValueApplied = true
			}
		}
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	if defaultValueApplied {
		data, err = json.Marshal(allProperties)
		if err != nil {
			return err
		}
	}
	type CertificatemanagementImcWithoutEmbeddedStruct struct {
		// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.
		ClassId string `json:"ClassId"`
		// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
		ObjectType string `json:"ObjectType"`
		// Certificate Type for the certificate management. * `None` - Set certificate on the selected end point . * `KMIPClient` - Set KMIP certificate on the selected end point.
		CertType *string `json:"CertType,omitempty"`
		// Indicates whether the value of the 'privatekey' property has been set.
		IsPrivatekeySet *bool `json:"IsPrivatekeySet,omitempty"`
		// Private Key which is used to validate the certificate.
		Privatekey *string `json:"Privatekey,omitempty"`
	}

	varCertificatemanagementImcWithoutEmbeddedStruct := CertificatemanagementImcWithoutEmbeddedStruct{}

	err = json.Unmarshal(data, &varCertificatemanagementImcWithoutEmbeddedStruct)
	if err == nil {
		varCertificatemanagementImc := _CertificatemanagementImc{}
		varCertificatemanagementImc.ClassId = varCertificatemanagementImcWithoutEmbeddedStruct.ClassId
		varCertificatemanagementImc.ObjectType = varCertificatemanagementImcWithoutEmbeddedStruct.ObjectType
		varCertificatemanagementImc.CertType = varCertificatemanagementImcWithoutEmbeddedStruct.CertType
		varCertificatemanagementImc.IsPrivatekeySet = varCertificatemanagementImcWithoutEmbeddedStruct.IsPrivatekeySet
		varCertificatemanagementImc.Privatekey = varCertificatemanagementImcWithoutEmbeddedStruct.Privatekey
		*o = CertificatemanagementImc(varCertificatemanagementImc)
	} else {
		return err
	}

	varCertificatemanagementImc := _CertificatemanagementImc{}

	err = json.Unmarshal(data, &varCertificatemanagementImc)
	if err == nil {
		o.CertificatemanagementCertificateBase = varCertificatemanagementImc.CertificatemanagementCertificateBase
	} else {
		return err
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "ClassId")
		delete(additionalProperties, "ObjectType")
		delete(additionalProperties, "CertType")
		delete(additionalProperties, "IsPrivatekeySet")
		delete(additionalProperties, "Privatekey")

		// remove fields from embedded structs
		reflectCertificatemanagementCertificateBase := reflect.ValueOf(o.CertificatemanagementCertificateBase)
		for i := 0; i < reflectCertificatemanagementCertificateBase.Type().NumField(); i++ {
			t := reflectCertificatemanagementCertificateBase.Type().Field(i)

			if jsonTag := t.Tag.Get("json"); jsonTag != "" {
				fieldName := ""
				if commaIdx := strings.Index(jsonTag, ","); commaIdx > 0 {
					fieldName = jsonTag[:commaIdx]
				} else {
					fieldName = jsonTag
				}
				if fieldName != "AdditionalProperties" {
					delete(additionalProperties, fieldName)
				}
			}
		}

		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableCertificatemanagementImc struct {
	value *CertificatemanagementImc
	isSet bool
}

func (v NullableCertificatemanagementImc) Get() *CertificatemanagementImc {
	return v.value
}

func (v *NullableCertificatemanagementImc) Set(val *CertificatemanagementImc) {
	v.value = val
	v.isSet = true
}

func (v NullableCertificatemanagementImc) IsSet() bool {
	return v.isSet
}

func (v *NullableCertificatemanagementImc) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCertificatemanagementImc(val *CertificatemanagementImc) *NullableCertificatemanagementImc {
	return &NullableCertificatemanagementImc{value: val, isSet: true}
}

func (v NullableCertificatemanagementImc) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCertificatemanagementImc) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
