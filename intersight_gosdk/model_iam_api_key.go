/*
Cisco Intersight

Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations. The Intersight OpenAPI document defines the complete set of properties that are returned in the HTTP response. From that perspective, a client can expect that no additional properties are returned, unless these properties are explicitly defined in the OpenAPI document. However, when a client uses an older version of the Intersight OpenAPI document, the server may send additional properties because the software is more recent than the client. In that case, the client may receive properties that it does not know about. Some generated SDKs perform a strict validation of the HTTP response body against the OpenAPI document.

API version: 1.0.11-18775
Contact: intersight@cisco.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package intersight

import (
	"encoding/json"
	"fmt"
	"reflect"
	"strings"
	"time"
)

// checks if the IamApiKey type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &IamApiKey{}

// IamApiKey An API key is used to authenticate and authorize API requests sent by a client using the HTTP signature scheme. API keys can be used by unattended, daemon clients that need to send requests to Intersight programmatically. API keys are based on public key cryptography. To create an API key, the user must specify: 1. The purpose (description) of the API key, 2. The cryptographic hash algorithm, which is used to compute the digest of the body of HTTP requests, 3. The cryptographic parameters to generate a private/public key pair, e.g. RSA, ECDSA, EDDSA, key modulus, and 4. The signing algorithm, e.g. RSA PKCS v1.5, RSA PSS, ECDSA, EDDSA. The generated private key and public key are encoded in PEM format. The client owns the private key and is responsible for maintaining the confidentiality of the private key. The server holds the public key. The client must have a cryptographic provider compatible with the cryptographic parameters specified in the API key. For example, if you use the powershell SDK to write the client, make sure the appropriate cryptographic providers are installed on the local system. If you create an RSA key pair with modulus set to 2048, the client must support 2048-bit private keys. A maximum of 3 API keys per user is allowed. API keys are used to sign HTTP requests as follows: 1. A cryptographic digest of the body of the HTTP request is calculated using one of the supported cryptographic hash algorithms. 2. The value of the digest is base-64 encoded in the `Digest` HTTP header. 3. A signature is calculated as specified in the HTTP signature scheme, and the signature is added to the `Authorization` HTTP request header. All published Intersight SDKs support API keys.
type IamApiKey struct {
	MoBaseMo
	// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.
	ClassId string `json:"ClassId"`
	// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
	ObjectType string `json:"ObjectType"`
	// Used to trigger the enable or disable action on the API key. These actions change the status of an API key. * `enable` - Used to enable a disabled API key/App Registration. If the API key/App Registration is already expired, this action has no effect. * `disable` - Used to disable an active API key/App Registration. If the API key/App Registration is already expired, this action has no effect.
	AdminStatus *string `json:"AdminStatus,omitempty"`
	// The expiration date of the API key which is set at the time of creation of the key. Its value can only be assigned a date that falls within the range determined by the maximum expiration time configured at the account level. The expiry date can be edited to be earlier or later, provided it stays within the designated expiry period. This period is determined by adding the 'startTime' property of the API key to the maximum expiry time configured at the account level.
	ExpiryDateTime *time.Time `json:"ExpiryDateTime,omitempty"`
	// The cryptographic hash algorithm to calculate the message digest. * `SHA256` - The SHA-256 cryptographic hash, as defined by NIST in FIPS 180-4. * `SHA384` - The SHA-384 cryptographic hash, as defined by NIST in FIPS 180-4. * `SHA512` - The SHA-512 cryptographic hash, as defined by NIST in FIPS 180-4. * `SHA512_224` - The SHA-512/224 cryptographic hash, as defined by NIST in FIPS 180-4. * `SHA512_256` - The SHA-512/256 cryptographic hash, as defined by NIST in FIPS 180-4.
	HashAlgorithm *string `json:"HashAlgorithm,omitempty"`
	// Used to mark the API key as a never-expiring API key.
	IsNeverExpiring *bool                         `json:"IsNeverExpiring,omitempty"`
	KeySpec         NullablePkixKeyGenerationSpec `json:"KeySpec,omitempty"`
	// The IP address from which the API key was last used.
	LastUsedIp *string `json:"LastUsedIp,omitempty"`
	// The time at which the API key was last used. It is updated every 24 hours.
	LastUsedTime *time.Time `json:"LastUsedTime,omitempty"`
	// The current status of the API key that dictates the validity of the key. * `enabled` - An API key/App Registration having enabled status can be used for API invocation. * `disabled` - An API key/App Registration having disabled status cannot be used for API invocation. * `expired` - An API key/App Registration having expired status cannot be used for API invocation as the expiration date has passed.
	OperStatus *string `json:"OperStatus,omitempty"`
	// Holds the private key for the API key.
	PrivateKey *string `json:"PrivateKey,omitempty"`
	// The purpose of the API Key.
	Purpose *string                           `json:"Purpose,omitempty"`
	Scope   NullableIamSwitchScopePermissions `json:"Scope,omitempty"`
	// The signing algorithm used by the client to authenticate API requests to Intersight. The signing algorithm must be compatible with the key generation specification. * `RSASSA-PKCS1-v1_5` - RSASSA-PKCS1-v1_5 is a RSA signature scheme specified in [RFC 8017](https://tools.ietf.org/html/rfc8017).RSASSA-PKCS1-v1_5 is included only for compatibility with existing applications. * `RSASSA-PSS` - RSASSA-PSS is a RSA signature scheme specified in [RFC 8017](https://tools.ietf.org/html/rfc8017).It combines the RSASP1 and RSAVP1 primitives with the EMSA-PSS encoding method.In the interest of increased robustness, RSASSA-PSS is required in new applications. * `Ed25519` - The Ed25519 signature algorithm, as specified in [RFC 8032](https://tools.ietf.org/html/rfc8032).Ed25519 is a public-key signature system with several attractive features, includingfast single-signature verification, very fast signing, fast key generation and high security level. * `Ecdsa` - The Elliptic Curve Digital Signature Standard (ECDSA), as defined by NIST in FIPS 186-4 and ANSI X9.62.The signature is encoded as a ASN.1 DER SEQUENCE with two INTEGERs (r and s), as defined in RFC3279.When using ECDSA signatures, configure the client to use the same signature encoding as specified on the server side. * `EcdsaP1363Format` - The Elliptic Curve Digital Signature Standard (ECDSA), as defined by NIST in FIPS 186-4 and ANSI X9.62.The signature is the raw concatenation of r and s, as defined in the ISO/IEC 7816-8 IEEE P.1363 standard.In that format, r and s are represented as unsigned, big endian numbers.Extra padding bytes (of value 0x00) is applied so that both r and s encodings have the same size.When using ECDSA signatures, configure the client to use the same signature encoding as specified on the server side.
	SigningAlgorithm *string `json:"SigningAlgorithm,omitempty"`
	// The timestamp at which an expiry date was first set on this API key. For expiring API keys, this field is same as the create time of the API key. For never-expiring API keys, this field is set initially to zero time value. If a never-expiry API key is later changed to have an expiration, the timestamp marking the start of this transition is recorded in this field.
	StartTime            *time.Time                        `json:"StartTime,omitempty"`
	Permission           NullableIamPermissionRelationship `json:"Permission,omitempty"`
	User                 NullableIamUserRelationship       `json:"User,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _IamApiKey IamApiKey

// NewIamApiKey instantiates a new IamApiKey object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIamApiKey(classId string, objectType string) *IamApiKey {
	this := IamApiKey{}
	this.ClassId = classId
	this.ObjectType = objectType
	var adminStatus string = "enable"
	this.AdminStatus = &adminStatus
	var hashAlgorithm string = "SHA256"
	this.HashAlgorithm = &hashAlgorithm
	var isNeverExpiring bool = false
	this.IsNeverExpiring = &isNeverExpiring
	var signingAlgorithm string = "RSASSA-PKCS1-v1_5"
	this.SigningAlgorithm = &signingAlgorithm
	return &this
}

// NewIamApiKeyWithDefaults instantiates a new IamApiKey object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIamApiKeyWithDefaults() *IamApiKey {
	this := IamApiKey{}
	var classId string = "iam.ApiKey"
	this.ClassId = classId
	var objectType string = "iam.ApiKey"
	this.ObjectType = objectType
	var adminStatus string = "enable"
	this.AdminStatus = &adminStatus
	var hashAlgorithm string = "SHA256"
	this.HashAlgorithm = &hashAlgorithm
	var isNeverExpiring bool = false
	this.IsNeverExpiring = &isNeverExpiring
	var signingAlgorithm string = "RSASSA-PKCS1-v1_5"
	this.SigningAlgorithm = &signingAlgorithm
	return &this
}

// GetClassId returns the ClassId field value
func (o *IamApiKey) GetClassId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ClassId
}

// GetClassIdOk returns a tuple with the ClassId field value
// and a boolean to check if the value has been set.
func (o *IamApiKey) GetClassIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ClassId, true
}

// SetClassId sets field value
func (o *IamApiKey) SetClassId(v string) {
	o.ClassId = v
}

// GetDefaultClassId returns the default value "iam.ApiKey" of the ClassId field.
func (o *IamApiKey) GetDefaultClassId() interface{} {
	return "iam.ApiKey"
}

// GetObjectType returns the ObjectType field value
func (o *IamApiKey) GetObjectType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ObjectType
}

// GetObjectTypeOk returns a tuple with the ObjectType field value
// and a boolean to check if the value has been set.
func (o *IamApiKey) GetObjectTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ObjectType, true
}

// SetObjectType sets field value
func (o *IamApiKey) SetObjectType(v string) {
	o.ObjectType = v
}

// GetDefaultObjectType returns the default value "iam.ApiKey" of the ObjectType field.
func (o *IamApiKey) GetDefaultObjectType() interface{} {
	return "iam.ApiKey"
}

// GetAdminStatus returns the AdminStatus field value if set, zero value otherwise.
func (o *IamApiKey) GetAdminStatus() string {
	if o == nil || IsNil(o.AdminStatus) {
		var ret string
		return ret
	}
	return *o.AdminStatus
}

// GetAdminStatusOk returns a tuple with the AdminStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IamApiKey) GetAdminStatusOk() (*string, bool) {
	if o == nil || IsNil(o.AdminStatus) {
		return nil, false
	}
	return o.AdminStatus, true
}

// HasAdminStatus returns a boolean if a field has been set.
func (o *IamApiKey) HasAdminStatus() bool {
	if o != nil && !IsNil(o.AdminStatus) {
		return true
	}

	return false
}

// SetAdminStatus gets a reference to the given string and assigns it to the AdminStatus field.
func (o *IamApiKey) SetAdminStatus(v string) {
	o.AdminStatus = &v
}

// GetExpiryDateTime returns the ExpiryDateTime field value if set, zero value otherwise.
func (o *IamApiKey) GetExpiryDateTime() time.Time {
	if o == nil || IsNil(o.ExpiryDateTime) {
		var ret time.Time
		return ret
	}
	return *o.ExpiryDateTime
}

// GetExpiryDateTimeOk returns a tuple with the ExpiryDateTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IamApiKey) GetExpiryDateTimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.ExpiryDateTime) {
		return nil, false
	}
	return o.ExpiryDateTime, true
}

// HasExpiryDateTime returns a boolean if a field has been set.
func (o *IamApiKey) HasExpiryDateTime() bool {
	if o != nil && !IsNil(o.ExpiryDateTime) {
		return true
	}

	return false
}

// SetExpiryDateTime gets a reference to the given time.Time and assigns it to the ExpiryDateTime field.
func (o *IamApiKey) SetExpiryDateTime(v time.Time) {
	o.ExpiryDateTime = &v
}

// GetHashAlgorithm returns the HashAlgorithm field value if set, zero value otherwise.
func (o *IamApiKey) GetHashAlgorithm() string {
	if o == nil || IsNil(o.HashAlgorithm) {
		var ret string
		return ret
	}
	return *o.HashAlgorithm
}

// GetHashAlgorithmOk returns a tuple with the HashAlgorithm field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IamApiKey) GetHashAlgorithmOk() (*string, bool) {
	if o == nil || IsNil(o.HashAlgorithm) {
		return nil, false
	}
	return o.HashAlgorithm, true
}

// HasHashAlgorithm returns a boolean if a field has been set.
func (o *IamApiKey) HasHashAlgorithm() bool {
	if o != nil && !IsNil(o.HashAlgorithm) {
		return true
	}

	return false
}

// SetHashAlgorithm gets a reference to the given string and assigns it to the HashAlgorithm field.
func (o *IamApiKey) SetHashAlgorithm(v string) {
	o.HashAlgorithm = &v
}

// GetIsNeverExpiring returns the IsNeverExpiring field value if set, zero value otherwise.
func (o *IamApiKey) GetIsNeverExpiring() bool {
	if o == nil || IsNil(o.IsNeverExpiring) {
		var ret bool
		return ret
	}
	return *o.IsNeverExpiring
}

// GetIsNeverExpiringOk returns a tuple with the IsNeverExpiring field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IamApiKey) GetIsNeverExpiringOk() (*bool, bool) {
	if o == nil || IsNil(o.IsNeverExpiring) {
		return nil, false
	}
	return o.IsNeverExpiring, true
}

// HasIsNeverExpiring returns a boolean if a field has been set.
func (o *IamApiKey) HasIsNeverExpiring() bool {
	if o != nil && !IsNil(o.IsNeverExpiring) {
		return true
	}

	return false
}

// SetIsNeverExpiring gets a reference to the given bool and assigns it to the IsNeverExpiring field.
func (o *IamApiKey) SetIsNeverExpiring(v bool) {
	o.IsNeverExpiring = &v
}

// GetKeySpec returns the KeySpec field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IamApiKey) GetKeySpec() PkixKeyGenerationSpec {
	if o == nil || IsNil(o.KeySpec.Get()) {
		var ret PkixKeyGenerationSpec
		return ret
	}
	return *o.KeySpec.Get()
}

// GetKeySpecOk returns a tuple with the KeySpec field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IamApiKey) GetKeySpecOk() (*PkixKeyGenerationSpec, bool) {
	if o == nil {
		return nil, false
	}
	return o.KeySpec.Get(), o.KeySpec.IsSet()
}

// HasKeySpec returns a boolean if a field has been set.
func (o *IamApiKey) HasKeySpec() bool {
	if o != nil && o.KeySpec.IsSet() {
		return true
	}

	return false
}

// SetKeySpec gets a reference to the given NullablePkixKeyGenerationSpec and assigns it to the KeySpec field.
func (o *IamApiKey) SetKeySpec(v PkixKeyGenerationSpec) {
	o.KeySpec.Set(&v)
}

// SetKeySpecNil sets the value for KeySpec to be an explicit nil
func (o *IamApiKey) SetKeySpecNil() {
	o.KeySpec.Set(nil)
}

// UnsetKeySpec ensures that no value is present for KeySpec, not even an explicit nil
func (o *IamApiKey) UnsetKeySpec() {
	o.KeySpec.Unset()
}

// GetLastUsedIp returns the LastUsedIp field value if set, zero value otherwise.
func (o *IamApiKey) GetLastUsedIp() string {
	if o == nil || IsNil(o.LastUsedIp) {
		var ret string
		return ret
	}
	return *o.LastUsedIp
}

// GetLastUsedIpOk returns a tuple with the LastUsedIp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IamApiKey) GetLastUsedIpOk() (*string, bool) {
	if o == nil || IsNil(o.LastUsedIp) {
		return nil, false
	}
	return o.LastUsedIp, true
}

// HasLastUsedIp returns a boolean if a field has been set.
func (o *IamApiKey) HasLastUsedIp() bool {
	if o != nil && !IsNil(o.LastUsedIp) {
		return true
	}

	return false
}

// SetLastUsedIp gets a reference to the given string and assigns it to the LastUsedIp field.
func (o *IamApiKey) SetLastUsedIp(v string) {
	o.LastUsedIp = &v
}

// GetLastUsedTime returns the LastUsedTime field value if set, zero value otherwise.
func (o *IamApiKey) GetLastUsedTime() time.Time {
	if o == nil || IsNil(o.LastUsedTime) {
		var ret time.Time
		return ret
	}
	return *o.LastUsedTime
}

// GetLastUsedTimeOk returns a tuple with the LastUsedTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IamApiKey) GetLastUsedTimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.LastUsedTime) {
		return nil, false
	}
	return o.LastUsedTime, true
}

// HasLastUsedTime returns a boolean if a field has been set.
func (o *IamApiKey) HasLastUsedTime() bool {
	if o != nil && !IsNil(o.LastUsedTime) {
		return true
	}

	return false
}

// SetLastUsedTime gets a reference to the given time.Time and assigns it to the LastUsedTime field.
func (o *IamApiKey) SetLastUsedTime(v time.Time) {
	o.LastUsedTime = &v
}

// GetOperStatus returns the OperStatus field value if set, zero value otherwise.
func (o *IamApiKey) GetOperStatus() string {
	if o == nil || IsNil(o.OperStatus) {
		var ret string
		return ret
	}
	return *o.OperStatus
}

// GetOperStatusOk returns a tuple with the OperStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IamApiKey) GetOperStatusOk() (*string, bool) {
	if o == nil || IsNil(o.OperStatus) {
		return nil, false
	}
	return o.OperStatus, true
}

// HasOperStatus returns a boolean if a field has been set.
func (o *IamApiKey) HasOperStatus() bool {
	if o != nil && !IsNil(o.OperStatus) {
		return true
	}

	return false
}

// SetOperStatus gets a reference to the given string and assigns it to the OperStatus field.
func (o *IamApiKey) SetOperStatus(v string) {
	o.OperStatus = &v
}

// GetPrivateKey returns the PrivateKey field value if set, zero value otherwise.
func (o *IamApiKey) GetPrivateKey() string {
	if o == nil || IsNil(o.PrivateKey) {
		var ret string
		return ret
	}
	return *o.PrivateKey
}

// GetPrivateKeyOk returns a tuple with the PrivateKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IamApiKey) GetPrivateKeyOk() (*string, bool) {
	if o == nil || IsNil(o.PrivateKey) {
		return nil, false
	}
	return o.PrivateKey, true
}

// HasPrivateKey returns a boolean if a field has been set.
func (o *IamApiKey) HasPrivateKey() bool {
	if o != nil && !IsNil(o.PrivateKey) {
		return true
	}

	return false
}

// SetPrivateKey gets a reference to the given string and assigns it to the PrivateKey field.
func (o *IamApiKey) SetPrivateKey(v string) {
	o.PrivateKey = &v
}

// GetPurpose returns the Purpose field value if set, zero value otherwise.
func (o *IamApiKey) GetPurpose() string {
	if o == nil || IsNil(o.Purpose) {
		var ret string
		return ret
	}
	return *o.Purpose
}

// GetPurposeOk returns a tuple with the Purpose field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IamApiKey) GetPurposeOk() (*string, bool) {
	if o == nil || IsNil(o.Purpose) {
		return nil, false
	}
	return o.Purpose, true
}

// HasPurpose returns a boolean if a field has been set.
func (o *IamApiKey) HasPurpose() bool {
	if o != nil && !IsNil(o.Purpose) {
		return true
	}

	return false
}

// SetPurpose gets a reference to the given string and assigns it to the Purpose field.
func (o *IamApiKey) SetPurpose(v string) {
	o.Purpose = &v
}

// GetScope returns the Scope field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IamApiKey) GetScope() IamSwitchScopePermissions {
	if o == nil || IsNil(o.Scope.Get()) {
		var ret IamSwitchScopePermissions
		return ret
	}
	return *o.Scope.Get()
}

// GetScopeOk returns a tuple with the Scope field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IamApiKey) GetScopeOk() (*IamSwitchScopePermissions, bool) {
	if o == nil {
		return nil, false
	}
	return o.Scope.Get(), o.Scope.IsSet()
}

// HasScope returns a boolean if a field has been set.
func (o *IamApiKey) HasScope() bool {
	if o != nil && o.Scope.IsSet() {
		return true
	}

	return false
}

// SetScope gets a reference to the given NullableIamSwitchScopePermissions and assigns it to the Scope field.
func (o *IamApiKey) SetScope(v IamSwitchScopePermissions) {
	o.Scope.Set(&v)
}

// SetScopeNil sets the value for Scope to be an explicit nil
func (o *IamApiKey) SetScopeNil() {
	o.Scope.Set(nil)
}

// UnsetScope ensures that no value is present for Scope, not even an explicit nil
func (o *IamApiKey) UnsetScope() {
	o.Scope.Unset()
}

// GetSigningAlgorithm returns the SigningAlgorithm field value if set, zero value otherwise.
func (o *IamApiKey) GetSigningAlgorithm() string {
	if o == nil || IsNil(o.SigningAlgorithm) {
		var ret string
		return ret
	}
	return *o.SigningAlgorithm
}

// GetSigningAlgorithmOk returns a tuple with the SigningAlgorithm field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IamApiKey) GetSigningAlgorithmOk() (*string, bool) {
	if o == nil || IsNil(o.SigningAlgorithm) {
		return nil, false
	}
	return o.SigningAlgorithm, true
}

// HasSigningAlgorithm returns a boolean if a field has been set.
func (o *IamApiKey) HasSigningAlgorithm() bool {
	if o != nil && !IsNil(o.SigningAlgorithm) {
		return true
	}

	return false
}

// SetSigningAlgorithm gets a reference to the given string and assigns it to the SigningAlgorithm field.
func (o *IamApiKey) SetSigningAlgorithm(v string) {
	o.SigningAlgorithm = &v
}

// GetStartTime returns the StartTime field value if set, zero value otherwise.
func (o *IamApiKey) GetStartTime() time.Time {
	if o == nil || IsNil(o.StartTime) {
		var ret time.Time
		return ret
	}
	return *o.StartTime
}

// GetStartTimeOk returns a tuple with the StartTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IamApiKey) GetStartTimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.StartTime) {
		return nil, false
	}
	return o.StartTime, true
}

// HasStartTime returns a boolean if a field has been set.
func (o *IamApiKey) HasStartTime() bool {
	if o != nil && !IsNil(o.StartTime) {
		return true
	}

	return false
}

// SetStartTime gets a reference to the given time.Time and assigns it to the StartTime field.
func (o *IamApiKey) SetStartTime(v time.Time) {
	o.StartTime = &v
}

// GetPermission returns the Permission field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IamApiKey) GetPermission() IamPermissionRelationship {
	if o == nil || IsNil(o.Permission.Get()) {
		var ret IamPermissionRelationship
		return ret
	}
	return *o.Permission.Get()
}

// GetPermissionOk returns a tuple with the Permission field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IamApiKey) GetPermissionOk() (*IamPermissionRelationship, bool) {
	if o == nil {
		return nil, false
	}
	return o.Permission.Get(), o.Permission.IsSet()
}

// HasPermission returns a boolean if a field has been set.
func (o *IamApiKey) HasPermission() bool {
	if o != nil && o.Permission.IsSet() {
		return true
	}

	return false
}

// SetPermission gets a reference to the given NullableIamPermissionRelationship and assigns it to the Permission field.
func (o *IamApiKey) SetPermission(v IamPermissionRelationship) {
	o.Permission.Set(&v)
}

// SetPermissionNil sets the value for Permission to be an explicit nil
func (o *IamApiKey) SetPermissionNil() {
	o.Permission.Set(nil)
}

// UnsetPermission ensures that no value is present for Permission, not even an explicit nil
func (o *IamApiKey) UnsetPermission() {
	o.Permission.Unset()
}

// GetUser returns the User field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IamApiKey) GetUser() IamUserRelationship {
	if o == nil || IsNil(o.User.Get()) {
		var ret IamUserRelationship
		return ret
	}
	return *o.User.Get()
}

// GetUserOk returns a tuple with the User field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IamApiKey) GetUserOk() (*IamUserRelationship, bool) {
	if o == nil {
		return nil, false
	}
	return o.User.Get(), o.User.IsSet()
}

// HasUser returns a boolean if a field has been set.
func (o *IamApiKey) HasUser() bool {
	if o != nil && o.User.IsSet() {
		return true
	}

	return false
}

// SetUser gets a reference to the given NullableIamUserRelationship and assigns it to the User field.
func (o *IamApiKey) SetUser(v IamUserRelationship) {
	o.User.Set(&v)
}

// SetUserNil sets the value for User to be an explicit nil
func (o *IamApiKey) SetUserNil() {
	o.User.Set(nil)
}

// UnsetUser ensures that no value is present for User, not even an explicit nil
func (o *IamApiKey) UnsetUser() {
	o.User.Unset()
}

func (o IamApiKey) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IamApiKey) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	serializedMoBaseMo, errMoBaseMo := json.Marshal(o.MoBaseMo)
	if errMoBaseMo != nil {
		return map[string]interface{}{}, errMoBaseMo
	}
	errMoBaseMo = json.Unmarshal([]byte(serializedMoBaseMo), &toSerialize)
	if errMoBaseMo != nil {
		return map[string]interface{}{}, errMoBaseMo
	}
	if _, exists := toSerialize["ClassId"]; !exists {
		toSerialize["ClassId"] = o.GetDefaultClassId()
	}
	toSerialize["ClassId"] = o.ClassId
	if _, exists := toSerialize["ObjectType"]; !exists {
		toSerialize["ObjectType"] = o.GetDefaultObjectType()
	}
	toSerialize["ObjectType"] = o.ObjectType
	if !IsNil(o.AdminStatus) {
		toSerialize["AdminStatus"] = o.AdminStatus
	}
	if !IsNil(o.ExpiryDateTime) {
		toSerialize["ExpiryDateTime"] = o.ExpiryDateTime
	}
	if !IsNil(o.HashAlgorithm) {
		toSerialize["HashAlgorithm"] = o.HashAlgorithm
	}
	if !IsNil(o.IsNeverExpiring) {
		toSerialize["IsNeverExpiring"] = o.IsNeverExpiring
	}
	if o.KeySpec.IsSet() {
		toSerialize["KeySpec"] = o.KeySpec.Get()
	}
	if !IsNil(o.LastUsedIp) {
		toSerialize["LastUsedIp"] = o.LastUsedIp
	}
	if !IsNil(o.LastUsedTime) {
		toSerialize["LastUsedTime"] = o.LastUsedTime
	}
	if !IsNil(o.OperStatus) {
		toSerialize["OperStatus"] = o.OperStatus
	}
	if !IsNil(o.PrivateKey) {
		toSerialize["PrivateKey"] = o.PrivateKey
	}
	if !IsNil(o.Purpose) {
		toSerialize["Purpose"] = o.Purpose
	}
	if o.Scope.IsSet() {
		toSerialize["Scope"] = o.Scope.Get()
	}
	if !IsNil(o.SigningAlgorithm) {
		toSerialize["SigningAlgorithm"] = o.SigningAlgorithm
	}
	if !IsNil(o.StartTime) {
		toSerialize["StartTime"] = o.StartTime
	}
	if o.Permission.IsSet() {
		toSerialize["Permission"] = o.Permission.Get()
	}
	if o.User.IsSet() {
		toSerialize["User"] = o.User.Get()
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *IamApiKey) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"ClassId",
		"ObjectType",
	}

	// defaultValueFuncMap captures the default values for required properties.
	// These values are used when required properties are missing from the payload.
	defaultValueFuncMap := map[string]func() interface{}{
		"ClassId":    o.GetDefaultClassId,
		"ObjectType": o.GetDefaultObjectType,
	}
	var defaultValueApplied bool
	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			if _, ok := defaultValueFuncMap[requiredProperty]; ok {
				allProperties[requiredProperty] = defaultValueFuncMap[requiredProperty]()
				defaultValueApplied = true
			}
		}
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	if defaultValueApplied {
		data, err = json.Marshal(allProperties)
		if err != nil {
			return err
		}
	}
	type IamApiKeyWithoutEmbeddedStruct struct {
		// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.
		ClassId string `json:"ClassId"`
		// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
		ObjectType string `json:"ObjectType"`
		// Used to trigger the enable or disable action on the API key. These actions change the status of an API key. * `enable` - Used to enable a disabled API key/App Registration. If the API key/App Registration is already expired, this action has no effect. * `disable` - Used to disable an active API key/App Registration. If the API key/App Registration is already expired, this action has no effect.
		AdminStatus *string `json:"AdminStatus,omitempty"`
		// The expiration date of the API key which is set at the time of creation of the key. Its value can only be assigned a date that falls within the range determined by the maximum expiration time configured at the account level. The expiry date can be edited to be earlier or later, provided it stays within the designated expiry period. This period is determined by adding the 'startTime' property of the API key to the maximum expiry time configured at the account level.
		ExpiryDateTime *time.Time `json:"ExpiryDateTime,omitempty"`
		// The cryptographic hash algorithm to calculate the message digest. * `SHA256` - The SHA-256 cryptographic hash, as defined by NIST in FIPS 180-4. * `SHA384` - The SHA-384 cryptographic hash, as defined by NIST in FIPS 180-4. * `SHA512` - The SHA-512 cryptographic hash, as defined by NIST in FIPS 180-4. * `SHA512_224` - The SHA-512/224 cryptographic hash, as defined by NIST in FIPS 180-4. * `SHA512_256` - The SHA-512/256 cryptographic hash, as defined by NIST in FIPS 180-4.
		HashAlgorithm *string `json:"HashAlgorithm,omitempty"`
		// Used to mark the API key as a never-expiring API key.
		IsNeverExpiring *bool                         `json:"IsNeverExpiring,omitempty"`
		KeySpec         NullablePkixKeyGenerationSpec `json:"KeySpec,omitempty"`
		// The IP address from which the API key was last used.
		LastUsedIp *string `json:"LastUsedIp,omitempty"`
		// The time at which the API key was last used. It is updated every 24 hours.
		LastUsedTime *time.Time `json:"LastUsedTime,omitempty"`
		// The current status of the API key that dictates the validity of the key. * `enabled` - An API key/App Registration having enabled status can be used for API invocation. * `disabled` - An API key/App Registration having disabled status cannot be used for API invocation. * `expired` - An API key/App Registration having expired status cannot be used for API invocation as the expiration date has passed.
		OperStatus *string `json:"OperStatus,omitempty"`
		// Holds the private key for the API key.
		PrivateKey *string `json:"PrivateKey,omitempty"`
		// The purpose of the API Key.
		Purpose *string                           `json:"Purpose,omitempty"`
		Scope   NullableIamSwitchScopePermissions `json:"Scope,omitempty"`
		// The signing algorithm used by the client to authenticate API requests to Intersight. The signing algorithm must be compatible with the key generation specification. * `RSASSA-PKCS1-v1_5` - RSASSA-PKCS1-v1_5 is a RSA signature scheme specified in [RFC 8017](https://tools.ietf.org/html/rfc8017).RSASSA-PKCS1-v1_5 is included only for compatibility with existing applications. * `RSASSA-PSS` - RSASSA-PSS is a RSA signature scheme specified in [RFC 8017](https://tools.ietf.org/html/rfc8017).It combines the RSASP1 and RSAVP1 primitives with the EMSA-PSS encoding method.In the interest of increased robustness, RSASSA-PSS is required in new applications. * `Ed25519` - The Ed25519 signature algorithm, as specified in [RFC 8032](https://tools.ietf.org/html/rfc8032).Ed25519 is a public-key signature system with several attractive features, includingfast single-signature verification, very fast signing, fast key generation and high security level. * `Ecdsa` - The Elliptic Curve Digital Signature Standard (ECDSA), as defined by NIST in FIPS 186-4 and ANSI X9.62.The signature is encoded as a ASN.1 DER SEQUENCE with two INTEGERs (r and s), as defined in RFC3279.When using ECDSA signatures, configure the client to use the same signature encoding as specified on the server side. * `EcdsaP1363Format` - The Elliptic Curve Digital Signature Standard (ECDSA), as defined by NIST in FIPS 186-4 and ANSI X9.62.The signature is the raw concatenation of r and s, as defined in the ISO/IEC 7816-8 IEEE P.1363 standard.In that format, r and s are represented as unsigned, big endian numbers.Extra padding bytes (of value 0x00) is applied so that both r and s encodings have the same size.When using ECDSA signatures, configure the client to use the same signature encoding as specified on the server side.
		SigningAlgorithm *string `json:"SigningAlgorithm,omitempty"`
		// The timestamp at which an expiry date was first set on this API key. For expiring API keys, this field is same as the create time of the API key. For never-expiring API keys, this field is set initially to zero time value. If a never-expiry API key is later changed to have an expiration, the timestamp marking the start of this transition is recorded in this field.
		StartTime  *time.Time                        `json:"StartTime,omitempty"`
		Permission NullableIamPermissionRelationship `json:"Permission,omitempty"`
		User       NullableIamUserRelationship       `json:"User,omitempty"`
	}

	varIamApiKeyWithoutEmbeddedStruct := IamApiKeyWithoutEmbeddedStruct{}

	err = json.Unmarshal(data, &varIamApiKeyWithoutEmbeddedStruct)
	if err == nil {
		varIamApiKey := _IamApiKey{}
		varIamApiKey.ClassId = varIamApiKeyWithoutEmbeddedStruct.ClassId
		varIamApiKey.ObjectType = varIamApiKeyWithoutEmbeddedStruct.ObjectType
		varIamApiKey.AdminStatus = varIamApiKeyWithoutEmbeddedStruct.AdminStatus
		varIamApiKey.ExpiryDateTime = varIamApiKeyWithoutEmbeddedStruct.ExpiryDateTime
		varIamApiKey.HashAlgorithm = varIamApiKeyWithoutEmbeddedStruct.HashAlgorithm
		varIamApiKey.IsNeverExpiring = varIamApiKeyWithoutEmbeddedStruct.IsNeverExpiring
		varIamApiKey.KeySpec = varIamApiKeyWithoutEmbeddedStruct.KeySpec
		varIamApiKey.LastUsedIp = varIamApiKeyWithoutEmbeddedStruct.LastUsedIp
		varIamApiKey.LastUsedTime = varIamApiKeyWithoutEmbeddedStruct.LastUsedTime
		varIamApiKey.OperStatus = varIamApiKeyWithoutEmbeddedStruct.OperStatus
		varIamApiKey.PrivateKey = varIamApiKeyWithoutEmbeddedStruct.PrivateKey
		varIamApiKey.Purpose = varIamApiKeyWithoutEmbeddedStruct.Purpose
		varIamApiKey.Scope = varIamApiKeyWithoutEmbeddedStruct.Scope
		varIamApiKey.SigningAlgorithm = varIamApiKeyWithoutEmbeddedStruct.SigningAlgorithm
		varIamApiKey.StartTime = varIamApiKeyWithoutEmbeddedStruct.StartTime
		varIamApiKey.Permission = varIamApiKeyWithoutEmbeddedStruct.Permission
		varIamApiKey.User = varIamApiKeyWithoutEmbeddedStruct.User
		*o = IamApiKey(varIamApiKey)
	} else {
		return err
	}

	varIamApiKey := _IamApiKey{}

	err = json.Unmarshal(data, &varIamApiKey)
	if err == nil {
		o.MoBaseMo = varIamApiKey.MoBaseMo
	} else {
		return err
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "ClassId")
		delete(additionalProperties, "ObjectType")
		delete(additionalProperties, "AdminStatus")
		delete(additionalProperties, "ExpiryDateTime")
		delete(additionalProperties, "HashAlgorithm")
		delete(additionalProperties, "IsNeverExpiring")
		delete(additionalProperties, "KeySpec")
		delete(additionalProperties, "LastUsedIp")
		delete(additionalProperties, "LastUsedTime")
		delete(additionalProperties, "OperStatus")
		delete(additionalProperties, "PrivateKey")
		delete(additionalProperties, "Purpose")
		delete(additionalProperties, "Scope")
		delete(additionalProperties, "SigningAlgorithm")
		delete(additionalProperties, "StartTime")
		delete(additionalProperties, "Permission")
		delete(additionalProperties, "User")

		// remove fields from embedded structs
		reflectMoBaseMo := reflect.ValueOf(o.MoBaseMo)
		for i := 0; i < reflectMoBaseMo.Type().NumField(); i++ {
			t := reflectMoBaseMo.Type().Field(i)

			if jsonTag := t.Tag.Get("json"); jsonTag != "" {
				fieldName := ""
				if commaIdx := strings.Index(jsonTag, ","); commaIdx > 0 {
					fieldName = jsonTag[:commaIdx]
				} else {
					fieldName = jsonTag
				}
				if fieldName != "AdditionalProperties" {
					delete(additionalProperties, fieldName)
				}
			}
		}

		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableIamApiKey struct {
	value *IamApiKey
	isSet bool
}

func (v NullableIamApiKey) Get() *IamApiKey {
	return v.value
}

func (v *NullableIamApiKey) Set(val *IamApiKey) {
	v.value = val
	v.isSet = true
}

func (v NullableIamApiKey) IsSet() bool {
	return v.isSet
}

func (v *NullableIamApiKey) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIamApiKey(val *IamApiKey) *NullableIamApiKey {
	return &NullableIamApiKey{value: val, isSet: true}
}

func (v NullableIamApiKey) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIamApiKey) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
