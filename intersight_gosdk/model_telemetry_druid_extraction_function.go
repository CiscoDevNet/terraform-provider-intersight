/*
Cisco Intersight

Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations. The Intersight OpenAPI document defines the complete set of properties that are returned in the HTTP response. From that perspective, a client can expect that no additional properties are returned, unless these properties are explicitly defined in the OpenAPI document. However, when a client uses an older version of the Intersight OpenAPI document, the server may send additional properties because the software is more recent than the client. In that case, the client may receive properties that it does not know about. Some generated SDKs perform a strict validation of the HTTP response body against the OpenAPI document.

API version: 1.0.11-2024100405
Contact: intersight@cisco.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package intersight

import (
	"encoding/json"
	"fmt"
)

// TelemetryDruidExtractionFunction - The extraction function is used to transform input values before the filter is applied. Transformations can be applied to both regular (string) dimensions, as well as the special __time dimension, which represents the current time bucket according to the query aggregation granularity. For functions taking string values (such as regular expressions), __time dimension values will be formatted in ISO-8601 format before getting passed to the extraction function. The example below shows a selector filter combined with an extraction function. This filter will transform input values according to the values defined in the lookup map; transformed values will then be matched with the string \"bar_1\".
type TelemetryDruidExtractionFunction struct {
	TelemetryDruidExtractionFunctionBucket       *TelemetryDruidExtractionFunctionBucket
	TelemetryDruidExtractionFunctionCascade      *TelemetryDruidExtractionFunctionCascade
	TelemetryDruidExtractionFunctionInlineLookup *TelemetryDruidExtractionFunctionInlineLookup
	TelemetryDruidExtractionFunctionLowerCase    *TelemetryDruidExtractionFunctionLowerCase
	TelemetryDruidExtractionFunctionPartial      *TelemetryDruidExtractionFunctionPartial
	TelemetryDruidExtractionFunctionRegex        *TelemetryDruidExtractionFunctionRegex
	TelemetryDruidExtractionFunctionSearchQuery  *TelemetryDruidExtractionFunctionSearchQuery
	TelemetryDruidExtractionFunctionStringFormat *TelemetryDruidExtractionFunctionStringFormat
	TelemetryDruidExtractionFunctionStrlen       *TelemetryDruidExtractionFunctionStrlen
	TelemetryDruidExtractionFunctionSubstring    *TelemetryDruidExtractionFunctionSubstring
	TelemetryDruidExtractionFunctionTimeFormat   *TelemetryDruidExtractionFunctionTimeFormat
	TelemetryDruidExtractionFunctionTimeParsing  *TelemetryDruidExtractionFunctionTimeParsing
	TelemetryDruidExtractionFunctionUpperCase    *TelemetryDruidExtractionFunctionUpperCase
}

// TelemetryDruidExtractionFunctionBucketAsTelemetryDruidExtractionFunction is a convenience function that returns TelemetryDruidExtractionFunctionBucket wrapped in TelemetryDruidExtractionFunction
func TelemetryDruidExtractionFunctionBucketAsTelemetryDruidExtractionFunction(v *TelemetryDruidExtractionFunctionBucket) TelemetryDruidExtractionFunction {
	return TelemetryDruidExtractionFunction{
		TelemetryDruidExtractionFunctionBucket: v,
	}
}

// TelemetryDruidExtractionFunctionCascadeAsTelemetryDruidExtractionFunction is a convenience function that returns TelemetryDruidExtractionFunctionCascade wrapped in TelemetryDruidExtractionFunction
func TelemetryDruidExtractionFunctionCascadeAsTelemetryDruidExtractionFunction(v *TelemetryDruidExtractionFunctionCascade) TelemetryDruidExtractionFunction {
	return TelemetryDruidExtractionFunction{
		TelemetryDruidExtractionFunctionCascade: v,
	}
}

// TelemetryDruidExtractionFunctionInlineLookupAsTelemetryDruidExtractionFunction is a convenience function that returns TelemetryDruidExtractionFunctionInlineLookup wrapped in TelemetryDruidExtractionFunction
func TelemetryDruidExtractionFunctionInlineLookupAsTelemetryDruidExtractionFunction(v *TelemetryDruidExtractionFunctionInlineLookup) TelemetryDruidExtractionFunction {
	return TelemetryDruidExtractionFunction{
		TelemetryDruidExtractionFunctionInlineLookup: v,
	}
}

// TelemetryDruidExtractionFunctionLowerCaseAsTelemetryDruidExtractionFunction is a convenience function that returns TelemetryDruidExtractionFunctionLowerCase wrapped in TelemetryDruidExtractionFunction
func TelemetryDruidExtractionFunctionLowerCaseAsTelemetryDruidExtractionFunction(v *TelemetryDruidExtractionFunctionLowerCase) TelemetryDruidExtractionFunction {
	return TelemetryDruidExtractionFunction{
		TelemetryDruidExtractionFunctionLowerCase: v,
	}
}

// TelemetryDruidExtractionFunctionPartialAsTelemetryDruidExtractionFunction is a convenience function that returns TelemetryDruidExtractionFunctionPartial wrapped in TelemetryDruidExtractionFunction
func TelemetryDruidExtractionFunctionPartialAsTelemetryDruidExtractionFunction(v *TelemetryDruidExtractionFunctionPartial) TelemetryDruidExtractionFunction {
	return TelemetryDruidExtractionFunction{
		TelemetryDruidExtractionFunctionPartial: v,
	}
}

// TelemetryDruidExtractionFunctionRegexAsTelemetryDruidExtractionFunction is a convenience function that returns TelemetryDruidExtractionFunctionRegex wrapped in TelemetryDruidExtractionFunction
func TelemetryDruidExtractionFunctionRegexAsTelemetryDruidExtractionFunction(v *TelemetryDruidExtractionFunctionRegex) TelemetryDruidExtractionFunction {
	return TelemetryDruidExtractionFunction{
		TelemetryDruidExtractionFunctionRegex: v,
	}
}

// TelemetryDruidExtractionFunctionSearchQueryAsTelemetryDruidExtractionFunction is a convenience function that returns TelemetryDruidExtractionFunctionSearchQuery wrapped in TelemetryDruidExtractionFunction
func TelemetryDruidExtractionFunctionSearchQueryAsTelemetryDruidExtractionFunction(v *TelemetryDruidExtractionFunctionSearchQuery) TelemetryDruidExtractionFunction {
	return TelemetryDruidExtractionFunction{
		TelemetryDruidExtractionFunctionSearchQuery: v,
	}
}

// TelemetryDruidExtractionFunctionStringFormatAsTelemetryDruidExtractionFunction is a convenience function that returns TelemetryDruidExtractionFunctionStringFormat wrapped in TelemetryDruidExtractionFunction
func TelemetryDruidExtractionFunctionStringFormatAsTelemetryDruidExtractionFunction(v *TelemetryDruidExtractionFunctionStringFormat) TelemetryDruidExtractionFunction {
	return TelemetryDruidExtractionFunction{
		TelemetryDruidExtractionFunctionStringFormat: v,
	}
}

// TelemetryDruidExtractionFunctionStrlenAsTelemetryDruidExtractionFunction is a convenience function that returns TelemetryDruidExtractionFunctionStrlen wrapped in TelemetryDruidExtractionFunction
func TelemetryDruidExtractionFunctionStrlenAsTelemetryDruidExtractionFunction(v *TelemetryDruidExtractionFunctionStrlen) TelemetryDruidExtractionFunction {
	return TelemetryDruidExtractionFunction{
		TelemetryDruidExtractionFunctionStrlen: v,
	}
}

// TelemetryDruidExtractionFunctionSubstringAsTelemetryDruidExtractionFunction is a convenience function that returns TelemetryDruidExtractionFunctionSubstring wrapped in TelemetryDruidExtractionFunction
func TelemetryDruidExtractionFunctionSubstringAsTelemetryDruidExtractionFunction(v *TelemetryDruidExtractionFunctionSubstring) TelemetryDruidExtractionFunction {
	return TelemetryDruidExtractionFunction{
		TelemetryDruidExtractionFunctionSubstring: v,
	}
}

// TelemetryDruidExtractionFunctionTimeFormatAsTelemetryDruidExtractionFunction is a convenience function that returns TelemetryDruidExtractionFunctionTimeFormat wrapped in TelemetryDruidExtractionFunction
func TelemetryDruidExtractionFunctionTimeFormatAsTelemetryDruidExtractionFunction(v *TelemetryDruidExtractionFunctionTimeFormat) TelemetryDruidExtractionFunction {
	return TelemetryDruidExtractionFunction{
		TelemetryDruidExtractionFunctionTimeFormat: v,
	}
}

// TelemetryDruidExtractionFunctionTimeParsingAsTelemetryDruidExtractionFunction is a convenience function that returns TelemetryDruidExtractionFunctionTimeParsing wrapped in TelemetryDruidExtractionFunction
func TelemetryDruidExtractionFunctionTimeParsingAsTelemetryDruidExtractionFunction(v *TelemetryDruidExtractionFunctionTimeParsing) TelemetryDruidExtractionFunction {
	return TelemetryDruidExtractionFunction{
		TelemetryDruidExtractionFunctionTimeParsing: v,
	}
}

// TelemetryDruidExtractionFunctionUpperCaseAsTelemetryDruidExtractionFunction is a convenience function that returns TelemetryDruidExtractionFunctionUpperCase wrapped in TelemetryDruidExtractionFunction
func TelemetryDruidExtractionFunctionUpperCaseAsTelemetryDruidExtractionFunction(v *TelemetryDruidExtractionFunctionUpperCase) TelemetryDruidExtractionFunction {
	return TelemetryDruidExtractionFunction{
		TelemetryDruidExtractionFunctionUpperCase: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *TelemetryDruidExtractionFunction) UnmarshalJSON(data []byte) error {
	var err error
	// use discriminator value to speed up the lookup
	var jsonDict map[string]interface{}
	err = newStrictDecoder(data).Decode(&jsonDict)
	if err != nil {
		return fmt.Errorf("failed to unmarshal JSON into map for the discriminator lookup")
	}

	// check if the discriminator value is 'bucket'
	if jsonDict["type"] == "bucket" {
		// try to unmarshal JSON data into TelemetryDruidExtractionFunctionBucket
		err = json.Unmarshal(data, &dst.TelemetryDruidExtractionFunctionBucket)
		if err == nil {
			return nil // data stored in dst.TelemetryDruidExtractionFunctionBucket, return on the first match
		} else {
			dst.TelemetryDruidExtractionFunctionBucket = nil
			return fmt.Errorf("failed to unmarshal TelemetryDruidExtractionFunction as TelemetryDruidExtractionFunctionBucket: %s", err.Error())
		}
	}

	// check if the discriminator value is 'cascade'
	if jsonDict["type"] == "cascade" {
		// try to unmarshal JSON data into TelemetryDruidExtractionFunctionCascade
		err = json.Unmarshal(data, &dst.TelemetryDruidExtractionFunctionCascade)
		if err == nil {
			return nil // data stored in dst.TelemetryDruidExtractionFunctionCascade, return on the first match
		} else {
			dst.TelemetryDruidExtractionFunctionCascade = nil
			return fmt.Errorf("failed to unmarshal TelemetryDruidExtractionFunction as TelemetryDruidExtractionFunctionCascade: %s", err.Error())
		}
	}

	// check if the discriminator value is 'lookup'
	if jsonDict["type"] == "lookup" {
		// try to unmarshal JSON data into TelemetryDruidExtractionFunctionInlineLookup
		err = json.Unmarshal(data, &dst.TelemetryDruidExtractionFunctionInlineLookup)
		if err == nil {
			return nil // data stored in dst.TelemetryDruidExtractionFunctionInlineLookup, return on the first match
		} else {
			dst.TelemetryDruidExtractionFunctionInlineLookup = nil
			return fmt.Errorf("failed to unmarshal TelemetryDruidExtractionFunction as TelemetryDruidExtractionFunctionInlineLookup: %s", err.Error())
		}
	}

	// check if the discriminator value is 'lower'
	if jsonDict["type"] == "lower" {
		// try to unmarshal JSON data into TelemetryDruidExtractionFunctionLowerCase
		err = json.Unmarshal(data, &dst.TelemetryDruidExtractionFunctionLowerCase)
		if err == nil {
			return nil // data stored in dst.TelemetryDruidExtractionFunctionLowerCase, return on the first match
		} else {
			dst.TelemetryDruidExtractionFunctionLowerCase = nil
			return fmt.Errorf("failed to unmarshal TelemetryDruidExtractionFunction as TelemetryDruidExtractionFunctionLowerCase: %s", err.Error())
		}
	}

	// check if the discriminator value is 'partial'
	if jsonDict["type"] == "partial" {
		// try to unmarshal JSON data into TelemetryDruidExtractionFunctionPartial
		err = json.Unmarshal(data, &dst.TelemetryDruidExtractionFunctionPartial)
		if err == nil {
			return nil // data stored in dst.TelemetryDruidExtractionFunctionPartial, return on the first match
		} else {
			dst.TelemetryDruidExtractionFunctionPartial = nil
			return fmt.Errorf("failed to unmarshal TelemetryDruidExtractionFunction as TelemetryDruidExtractionFunctionPartial: %s", err.Error())
		}
	}

	// check if the discriminator value is 'regex'
	if jsonDict["type"] == "regex" {
		// try to unmarshal JSON data into TelemetryDruidExtractionFunctionRegex
		err = json.Unmarshal(data, &dst.TelemetryDruidExtractionFunctionRegex)
		if err == nil {
			return nil // data stored in dst.TelemetryDruidExtractionFunctionRegex, return on the first match
		} else {
			dst.TelemetryDruidExtractionFunctionRegex = nil
			return fmt.Errorf("failed to unmarshal TelemetryDruidExtractionFunction as TelemetryDruidExtractionFunctionRegex: %s", err.Error())
		}
	}

	// check if the discriminator value is 'searchQuery'
	if jsonDict["type"] == "searchQuery" {
		// try to unmarshal JSON data into TelemetryDruidExtractionFunctionSearchQuery
		err = json.Unmarshal(data, &dst.TelemetryDruidExtractionFunctionSearchQuery)
		if err == nil {
			return nil // data stored in dst.TelemetryDruidExtractionFunctionSearchQuery, return on the first match
		} else {
			dst.TelemetryDruidExtractionFunctionSearchQuery = nil
			return fmt.Errorf("failed to unmarshal TelemetryDruidExtractionFunction as TelemetryDruidExtractionFunctionSearchQuery: %s", err.Error())
		}
	}

	// check if the discriminator value is 'stringFormat'
	if jsonDict["type"] == "stringFormat" {
		// try to unmarshal JSON data into TelemetryDruidExtractionFunctionStringFormat
		err = json.Unmarshal(data, &dst.TelemetryDruidExtractionFunctionStringFormat)
		if err == nil {
			return nil // data stored in dst.TelemetryDruidExtractionFunctionStringFormat, return on the first match
		} else {
			dst.TelemetryDruidExtractionFunctionStringFormat = nil
			return fmt.Errorf("failed to unmarshal TelemetryDruidExtractionFunction as TelemetryDruidExtractionFunctionStringFormat: %s", err.Error())
		}
	}

	// check if the discriminator value is 'strlen'
	if jsonDict["type"] == "strlen" {
		// try to unmarshal JSON data into TelemetryDruidExtractionFunctionStrlen
		err = json.Unmarshal(data, &dst.TelemetryDruidExtractionFunctionStrlen)
		if err == nil {
			return nil // data stored in dst.TelemetryDruidExtractionFunctionStrlen, return on the first match
		} else {
			dst.TelemetryDruidExtractionFunctionStrlen = nil
			return fmt.Errorf("failed to unmarshal TelemetryDruidExtractionFunction as TelemetryDruidExtractionFunctionStrlen: %s", err.Error())
		}
	}

	// check if the discriminator value is 'substring'
	if jsonDict["type"] == "substring" {
		// try to unmarshal JSON data into TelemetryDruidExtractionFunctionSubstring
		err = json.Unmarshal(data, &dst.TelemetryDruidExtractionFunctionSubstring)
		if err == nil {
			return nil // data stored in dst.TelemetryDruidExtractionFunctionSubstring, return on the first match
		} else {
			dst.TelemetryDruidExtractionFunctionSubstring = nil
			return fmt.Errorf("failed to unmarshal TelemetryDruidExtractionFunction as TelemetryDruidExtractionFunctionSubstring: %s", err.Error())
		}
	}

	// check if the discriminator value is 'time'
	if jsonDict["type"] == "time" {
		// try to unmarshal JSON data into TelemetryDruidExtractionFunctionTimeParsing
		err = json.Unmarshal(data, &dst.TelemetryDruidExtractionFunctionTimeParsing)
		if err == nil {
			return nil // data stored in dst.TelemetryDruidExtractionFunctionTimeParsing, return on the first match
		} else {
			dst.TelemetryDruidExtractionFunctionTimeParsing = nil
			return fmt.Errorf("failed to unmarshal TelemetryDruidExtractionFunction as TelemetryDruidExtractionFunctionTimeParsing: %s", err.Error())
		}
	}

	// check if the discriminator value is 'timeFormat'
	if jsonDict["type"] == "timeFormat" {
		// try to unmarshal JSON data into TelemetryDruidExtractionFunctionTimeFormat
		err = json.Unmarshal(data, &dst.TelemetryDruidExtractionFunctionTimeFormat)
		if err == nil {
			return nil // data stored in dst.TelemetryDruidExtractionFunctionTimeFormat, return on the first match
		} else {
			dst.TelemetryDruidExtractionFunctionTimeFormat = nil
			return fmt.Errorf("failed to unmarshal TelemetryDruidExtractionFunction as TelemetryDruidExtractionFunctionTimeFormat: %s", err.Error())
		}
	}

	// check if the discriminator value is 'upper'
	if jsonDict["type"] == "upper" {
		// try to unmarshal JSON data into TelemetryDruidExtractionFunctionUpperCase
		err = json.Unmarshal(data, &dst.TelemetryDruidExtractionFunctionUpperCase)
		if err == nil {
			return nil // data stored in dst.TelemetryDruidExtractionFunctionUpperCase, return on the first match
		} else {
			dst.TelemetryDruidExtractionFunctionUpperCase = nil
			return fmt.Errorf("failed to unmarshal TelemetryDruidExtractionFunction as TelemetryDruidExtractionFunctionUpperCase: %s", err.Error())
		}
	}

	// check if the discriminator value is 'telemetry.DruidExtractionFunctionBucket'
	if jsonDict["type"] == "telemetry.DruidExtractionFunctionBucket" {
		// try to unmarshal JSON data into TelemetryDruidExtractionFunctionBucket
		err = json.Unmarshal(data, &dst.TelemetryDruidExtractionFunctionBucket)
		if err == nil {
			return nil // data stored in dst.TelemetryDruidExtractionFunctionBucket, return on the first match
		} else {
			dst.TelemetryDruidExtractionFunctionBucket = nil
			return fmt.Errorf("failed to unmarshal TelemetryDruidExtractionFunction as TelemetryDruidExtractionFunctionBucket: %s", err.Error())
		}
	}

	// check if the discriminator value is 'telemetry.DruidExtractionFunctionCascade'
	if jsonDict["type"] == "telemetry.DruidExtractionFunctionCascade" {
		// try to unmarshal JSON data into TelemetryDruidExtractionFunctionCascade
		err = json.Unmarshal(data, &dst.TelemetryDruidExtractionFunctionCascade)
		if err == nil {
			return nil // data stored in dst.TelemetryDruidExtractionFunctionCascade, return on the first match
		} else {
			dst.TelemetryDruidExtractionFunctionCascade = nil
			return fmt.Errorf("failed to unmarshal TelemetryDruidExtractionFunction as TelemetryDruidExtractionFunctionCascade: %s", err.Error())
		}
	}

	// check if the discriminator value is 'telemetry.DruidExtractionFunctionInlineLookup'
	if jsonDict["type"] == "telemetry.DruidExtractionFunctionInlineLookup" {
		// try to unmarshal JSON data into TelemetryDruidExtractionFunctionInlineLookup
		err = json.Unmarshal(data, &dst.TelemetryDruidExtractionFunctionInlineLookup)
		if err == nil {
			return nil // data stored in dst.TelemetryDruidExtractionFunctionInlineLookup, return on the first match
		} else {
			dst.TelemetryDruidExtractionFunctionInlineLookup = nil
			return fmt.Errorf("failed to unmarshal TelemetryDruidExtractionFunction as TelemetryDruidExtractionFunctionInlineLookup: %s", err.Error())
		}
	}

	// check if the discriminator value is 'telemetry.DruidExtractionFunctionLowerCase'
	if jsonDict["type"] == "telemetry.DruidExtractionFunctionLowerCase" {
		// try to unmarshal JSON data into TelemetryDruidExtractionFunctionLowerCase
		err = json.Unmarshal(data, &dst.TelemetryDruidExtractionFunctionLowerCase)
		if err == nil {
			return nil // data stored in dst.TelemetryDruidExtractionFunctionLowerCase, return on the first match
		} else {
			dst.TelemetryDruidExtractionFunctionLowerCase = nil
			return fmt.Errorf("failed to unmarshal TelemetryDruidExtractionFunction as TelemetryDruidExtractionFunctionLowerCase: %s", err.Error())
		}
	}

	// check if the discriminator value is 'telemetry.DruidExtractionFunctionPartial'
	if jsonDict["type"] == "telemetry.DruidExtractionFunctionPartial" {
		// try to unmarshal JSON data into TelemetryDruidExtractionFunctionPartial
		err = json.Unmarshal(data, &dst.TelemetryDruidExtractionFunctionPartial)
		if err == nil {
			return nil // data stored in dst.TelemetryDruidExtractionFunctionPartial, return on the first match
		} else {
			dst.TelemetryDruidExtractionFunctionPartial = nil
			return fmt.Errorf("failed to unmarshal TelemetryDruidExtractionFunction as TelemetryDruidExtractionFunctionPartial: %s", err.Error())
		}
	}

	// check if the discriminator value is 'telemetry.DruidExtractionFunctionRegex'
	if jsonDict["type"] == "telemetry.DruidExtractionFunctionRegex" {
		// try to unmarshal JSON data into TelemetryDruidExtractionFunctionRegex
		err = json.Unmarshal(data, &dst.TelemetryDruidExtractionFunctionRegex)
		if err == nil {
			return nil // data stored in dst.TelemetryDruidExtractionFunctionRegex, return on the first match
		} else {
			dst.TelemetryDruidExtractionFunctionRegex = nil
			return fmt.Errorf("failed to unmarshal TelemetryDruidExtractionFunction as TelemetryDruidExtractionFunctionRegex: %s", err.Error())
		}
	}

	// check if the discriminator value is 'telemetry.DruidExtractionFunctionSearchQuery'
	if jsonDict["type"] == "telemetry.DruidExtractionFunctionSearchQuery" {
		// try to unmarshal JSON data into TelemetryDruidExtractionFunctionSearchQuery
		err = json.Unmarshal(data, &dst.TelemetryDruidExtractionFunctionSearchQuery)
		if err == nil {
			return nil // data stored in dst.TelemetryDruidExtractionFunctionSearchQuery, return on the first match
		} else {
			dst.TelemetryDruidExtractionFunctionSearchQuery = nil
			return fmt.Errorf("failed to unmarshal TelemetryDruidExtractionFunction as TelemetryDruidExtractionFunctionSearchQuery: %s", err.Error())
		}
	}

	// check if the discriminator value is 'telemetry.DruidExtractionFunctionStringFormat'
	if jsonDict["type"] == "telemetry.DruidExtractionFunctionStringFormat" {
		// try to unmarshal JSON data into TelemetryDruidExtractionFunctionStringFormat
		err = json.Unmarshal(data, &dst.TelemetryDruidExtractionFunctionStringFormat)
		if err == nil {
			return nil // data stored in dst.TelemetryDruidExtractionFunctionStringFormat, return on the first match
		} else {
			dst.TelemetryDruidExtractionFunctionStringFormat = nil
			return fmt.Errorf("failed to unmarshal TelemetryDruidExtractionFunction as TelemetryDruidExtractionFunctionStringFormat: %s", err.Error())
		}
	}

	// check if the discriminator value is 'telemetry.DruidExtractionFunctionStrlen'
	if jsonDict["type"] == "telemetry.DruidExtractionFunctionStrlen" {
		// try to unmarshal JSON data into TelemetryDruidExtractionFunctionStrlen
		err = json.Unmarshal(data, &dst.TelemetryDruidExtractionFunctionStrlen)
		if err == nil {
			return nil // data stored in dst.TelemetryDruidExtractionFunctionStrlen, return on the first match
		} else {
			dst.TelemetryDruidExtractionFunctionStrlen = nil
			return fmt.Errorf("failed to unmarshal TelemetryDruidExtractionFunction as TelemetryDruidExtractionFunctionStrlen: %s", err.Error())
		}
	}

	// check if the discriminator value is 'telemetry.DruidExtractionFunctionSubstring'
	if jsonDict["type"] == "telemetry.DruidExtractionFunctionSubstring" {
		// try to unmarshal JSON data into TelemetryDruidExtractionFunctionSubstring
		err = json.Unmarshal(data, &dst.TelemetryDruidExtractionFunctionSubstring)
		if err == nil {
			return nil // data stored in dst.TelemetryDruidExtractionFunctionSubstring, return on the first match
		} else {
			dst.TelemetryDruidExtractionFunctionSubstring = nil
			return fmt.Errorf("failed to unmarshal TelemetryDruidExtractionFunction as TelemetryDruidExtractionFunctionSubstring: %s", err.Error())
		}
	}

	// check if the discriminator value is 'telemetry.DruidExtractionFunctionTimeFormat'
	if jsonDict["type"] == "telemetry.DruidExtractionFunctionTimeFormat" {
		// try to unmarshal JSON data into TelemetryDruidExtractionFunctionTimeFormat
		err = json.Unmarshal(data, &dst.TelemetryDruidExtractionFunctionTimeFormat)
		if err == nil {
			return nil // data stored in dst.TelemetryDruidExtractionFunctionTimeFormat, return on the first match
		} else {
			dst.TelemetryDruidExtractionFunctionTimeFormat = nil
			return fmt.Errorf("failed to unmarshal TelemetryDruidExtractionFunction as TelemetryDruidExtractionFunctionTimeFormat: %s", err.Error())
		}
	}

	// check if the discriminator value is 'telemetry.DruidExtractionFunctionTimeParsing'
	if jsonDict["type"] == "telemetry.DruidExtractionFunctionTimeParsing" {
		// try to unmarshal JSON data into TelemetryDruidExtractionFunctionTimeParsing
		err = json.Unmarshal(data, &dst.TelemetryDruidExtractionFunctionTimeParsing)
		if err == nil {
			return nil // data stored in dst.TelemetryDruidExtractionFunctionTimeParsing, return on the first match
		} else {
			dst.TelemetryDruidExtractionFunctionTimeParsing = nil
			return fmt.Errorf("failed to unmarshal TelemetryDruidExtractionFunction as TelemetryDruidExtractionFunctionTimeParsing: %s", err.Error())
		}
	}

	// check if the discriminator value is 'telemetry.DruidExtractionFunctionUpperCase'
	if jsonDict["type"] == "telemetry.DruidExtractionFunctionUpperCase" {
		// try to unmarshal JSON data into TelemetryDruidExtractionFunctionUpperCase
		err = json.Unmarshal(data, &dst.TelemetryDruidExtractionFunctionUpperCase)
		if err == nil {
			return nil // data stored in dst.TelemetryDruidExtractionFunctionUpperCase, return on the first match
		} else {
			dst.TelemetryDruidExtractionFunctionUpperCase = nil
			return fmt.Errorf("failed to unmarshal TelemetryDruidExtractionFunction as TelemetryDruidExtractionFunctionUpperCase: %s", err.Error())
		}
	}

	return nil
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src TelemetryDruidExtractionFunction) MarshalJSON() ([]byte, error) {
	if src.TelemetryDruidExtractionFunctionBucket != nil {
		return json.Marshal(&src.TelemetryDruidExtractionFunctionBucket)
	}

	if src.TelemetryDruidExtractionFunctionCascade != nil {
		return json.Marshal(&src.TelemetryDruidExtractionFunctionCascade)
	}

	if src.TelemetryDruidExtractionFunctionInlineLookup != nil {
		return json.Marshal(&src.TelemetryDruidExtractionFunctionInlineLookup)
	}

	if src.TelemetryDruidExtractionFunctionLowerCase != nil {
		return json.Marshal(&src.TelemetryDruidExtractionFunctionLowerCase)
	}

	if src.TelemetryDruidExtractionFunctionPartial != nil {
		return json.Marshal(&src.TelemetryDruidExtractionFunctionPartial)
	}

	if src.TelemetryDruidExtractionFunctionRegex != nil {
		return json.Marshal(&src.TelemetryDruidExtractionFunctionRegex)
	}

	if src.TelemetryDruidExtractionFunctionSearchQuery != nil {
		return json.Marshal(&src.TelemetryDruidExtractionFunctionSearchQuery)
	}

	if src.TelemetryDruidExtractionFunctionStringFormat != nil {
		return json.Marshal(&src.TelemetryDruidExtractionFunctionStringFormat)
	}

	if src.TelemetryDruidExtractionFunctionStrlen != nil {
		return json.Marshal(&src.TelemetryDruidExtractionFunctionStrlen)
	}

	if src.TelemetryDruidExtractionFunctionSubstring != nil {
		return json.Marshal(&src.TelemetryDruidExtractionFunctionSubstring)
	}

	if src.TelemetryDruidExtractionFunctionTimeFormat != nil {
		return json.Marshal(&src.TelemetryDruidExtractionFunctionTimeFormat)
	}

	if src.TelemetryDruidExtractionFunctionTimeParsing != nil {
		return json.Marshal(&src.TelemetryDruidExtractionFunctionTimeParsing)
	}

	if src.TelemetryDruidExtractionFunctionUpperCase != nil {
		return json.Marshal(&src.TelemetryDruidExtractionFunctionUpperCase)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *TelemetryDruidExtractionFunction) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.TelemetryDruidExtractionFunctionBucket != nil {
		return obj.TelemetryDruidExtractionFunctionBucket
	}

	if obj.TelemetryDruidExtractionFunctionCascade != nil {
		return obj.TelemetryDruidExtractionFunctionCascade
	}

	if obj.TelemetryDruidExtractionFunctionInlineLookup != nil {
		return obj.TelemetryDruidExtractionFunctionInlineLookup
	}

	if obj.TelemetryDruidExtractionFunctionLowerCase != nil {
		return obj.TelemetryDruidExtractionFunctionLowerCase
	}

	if obj.TelemetryDruidExtractionFunctionPartial != nil {
		return obj.TelemetryDruidExtractionFunctionPartial
	}

	if obj.TelemetryDruidExtractionFunctionRegex != nil {
		return obj.TelemetryDruidExtractionFunctionRegex
	}

	if obj.TelemetryDruidExtractionFunctionSearchQuery != nil {
		return obj.TelemetryDruidExtractionFunctionSearchQuery
	}

	if obj.TelemetryDruidExtractionFunctionStringFormat != nil {
		return obj.TelemetryDruidExtractionFunctionStringFormat
	}

	if obj.TelemetryDruidExtractionFunctionStrlen != nil {
		return obj.TelemetryDruidExtractionFunctionStrlen
	}

	if obj.TelemetryDruidExtractionFunctionSubstring != nil {
		return obj.TelemetryDruidExtractionFunctionSubstring
	}

	if obj.TelemetryDruidExtractionFunctionTimeFormat != nil {
		return obj.TelemetryDruidExtractionFunctionTimeFormat
	}

	if obj.TelemetryDruidExtractionFunctionTimeParsing != nil {
		return obj.TelemetryDruidExtractionFunctionTimeParsing
	}

	if obj.TelemetryDruidExtractionFunctionUpperCase != nil {
		return obj.TelemetryDruidExtractionFunctionUpperCase
	}

	// all schemas are nil
	return nil
}

type NullableTelemetryDruidExtractionFunction struct {
	value *TelemetryDruidExtractionFunction
	isSet bool
}

func (v NullableTelemetryDruidExtractionFunction) Get() *TelemetryDruidExtractionFunction {
	return v.value
}

func (v *NullableTelemetryDruidExtractionFunction) Set(val *TelemetryDruidExtractionFunction) {
	v.value = val
	v.isSet = true
}

func (v NullableTelemetryDruidExtractionFunction) IsSet() bool {
	return v.isSet
}

func (v *NullableTelemetryDruidExtractionFunction) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTelemetryDruidExtractionFunction(val *TelemetryDruidExtractionFunction) *NullableTelemetryDruidExtractionFunction {
	return &NullableTelemetryDruidExtractionFunction{value: val, isSet: true}
}

func (v NullableTelemetryDruidExtractionFunction) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTelemetryDruidExtractionFunction) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
