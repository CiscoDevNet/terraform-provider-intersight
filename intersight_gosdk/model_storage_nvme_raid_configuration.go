/*
Cisco Intersight

Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations. The Intersight OpenAPI document defines the complete set of properties that are returned in the HTTP response. From that perspective, a client can expect that no additional properties are returned, unless these properties are explicitly defined in the OpenAPI document. However, when a client uses an older version of the Intersight OpenAPI document, the server may send additional properties because the software is more recent than the client. In that case, the client may receive properties that it does not know about. Some generated SDKs perform a strict validation of the HTTP response body against the OpenAPI document.

API version: 1.0.11-18775
Contact: intersight@cisco.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package intersight

import (
	"encoding/json"
	"fmt"
	"reflect"
	"strings"
)

// checks if the StorageNvmeRaidConfiguration type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &StorageNvmeRaidConfiguration{}

// StorageNvmeRaidConfiguration Object that stores Nvme Raid Configuration data under a Server Profile, used for creation of vd, update pd state for NVMe on reboot.
type StorageNvmeRaidConfiguration struct {
	MoBaseMo
	// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.
	ClassId string `json:"ClassId"`
	// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
	ObjectType string `json:"ObjectType"`
	// The storage controller Dn Name for which Nvme RAID is created at endpoint.
	ControllerDn *string `json:"ControllerDn,omitempty"`
	// The storage controller Moid for which Nvme RAID creation is supported.
	ControllerMoid       *string                                  `json:"ControllerMoid,omitempty"`
	DiskStates           []StorageNvmePhysicalDiskState           `json:"DiskStates,omitempty"`
	DriveGroups          []StorageNvmeRaidDriveGroup              `json:"DriveGroups,omitempty"`
	ServerProfile        NullableServerProfileRelationship        `json:"ServerProfile,omitempty"`
	StoragePolicy        NullableStorageStoragePolicyRelationship `json:"StoragePolicy,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _StorageNvmeRaidConfiguration StorageNvmeRaidConfiguration

// NewStorageNvmeRaidConfiguration instantiates a new StorageNvmeRaidConfiguration object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStorageNvmeRaidConfiguration(classId string, objectType string) *StorageNvmeRaidConfiguration {
	this := StorageNvmeRaidConfiguration{}
	this.ClassId = classId
	this.ObjectType = objectType
	return &this
}

// NewStorageNvmeRaidConfigurationWithDefaults instantiates a new StorageNvmeRaidConfiguration object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStorageNvmeRaidConfigurationWithDefaults() *StorageNvmeRaidConfiguration {
	this := StorageNvmeRaidConfiguration{}
	var classId string = "storage.NvmeRaidConfiguration"
	this.ClassId = classId
	var objectType string = "storage.NvmeRaidConfiguration"
	this.ObjectType = objectType
	return &this
}

// GetClassId returns the ClassId field value
func (o *StorageNvmeRaidConfiguration) GetClassId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ClassId
}

// GetClassIdOk returns a tuple with the ClassId field value
// and a boolean to check if the value has been set.
func (o *StorageNvmeRaidConfiguration) GetClassIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ClassId, true
}

// SetClassId sets field value
func (o *StorageNvmeRaidConfiguration) SetClassId(v string) {
	o.ClassId = v
}

// GetDefaultClassId returns the default value "storage.NvmeRaidConfiguration" of the ClassId field.
func (o *StorageNvmeRaidConfiguration) GetDefaultClassId() interface{} {
	return "storage.NvmeRaidConfiguration"
}

// GetObjectType returns the ObjectType field value
func (o *StorageNvmeRaidConfiguration) GetObjectType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ObjectType
}

// GetObjectTypeOk returns a tuple with the ObjectType field value
// and a boolean to check if the value has been set.
func (o *StorageNvmeRaidConfiguration) GetObjectTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ObjectType, true
}

// SetObjectType sets field value
func (o *StorageNvmeRaidConfiguration) SetObjectType(v string) {
	o.ObjectType = v
}

// GetDefaultObjectType returns the default value "storage.NvmeRaidConfiguration" of the ObjectType field.
func (o *StorageNvmeRaidConfiguration) GetDefaultObjectType() interface{} {
	return "storage.NvmeRaidConfiguration"
}

// GetControllerDn returns the ControllerDn field value if set, zero value otherwise.
func (o *StorageNvmeRaidConfiguration) GetControllerDn() string {
	if o == nil || IsNil(o.ControllerDn) {
		var ret string
		return ret
	}
	return *o.ControllerDn
}

// GetControllerDnOk returns a tuple with the ControllerDn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageNvmeRaidConfiguration) GetControllerDnOk() (*string, bool) {
	if o == nil || IsNil(o.ControllerDn) {
		return nil, false
	}
	return o.ControllerDn, true
}

// HasControllerDn returns a boolean if a field has been set.
func (o *StorageNvmeRaidConfiguration) HasControllerDn() bool {
	if o != nil && !IsNil(o.ControllerDn) {
		return true
	}

	return false
}

// SetControllerDn gets a reference to the given string and assigns it to the ControllerDn field.
func (o *StorageNvmeRaidConfiguration) SetControllerDn(v string) {
	o.ControllerDn = &v
}

// GetControllerMoid returns the ControllerMoid field value if set, zero value otherwise.
func (o *StorageNvmeRaidConfiguration) GetControllerMoid() string {
	if o == nil || IsNil(o.ControllerMoid) {
		var ret string
		return ret
	}
	return *o.ControllerMoid
}

// GetControllerMoidOk returns a tuple with the ControllerMoid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageNvmeRaidConfiguration) GetControllerMoidOk() (*string, bool) {
	if o == nil || IsNil(o.ControllerMoid) {
		return nil, false
	}
	return o.ControllerMoid, true
}

// HasControllerMoid returns a boolean if a field has been set.
func (o *StorageNvmeRaidConfiguration) HasControllerMoid() bool {
	if o != nil && !IsNil(o.ControllerMoid) {
		return true
	}

	return false
}

// SetControllerMoid gets a reference to the given string and assigns it to the ControllerMoid field.
func (o *StorageNvmeRaidConfiguration) SetControllerMoid(v string) {
	o.ControllerMoid = &v
}

// GetDiskStates returns the DiskStates field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *StorageNvmeRaidConfiguration) GetDiskStates() []StorageNvmePhysicalDiskState {
	if o == nil {
		var ret []StorageNvmePhysicalDiskState
		return ret
	}
	return o.DiskStates
}

// GetDiskStatesOk returns a tuple with the DiskStates field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *StorageNvmeRaidConfiguration) GetDiskStatesOk() ([]StorageNvmePhysicalDiskState, bool) {
	if o == nil || IsNil(o.DiskStates) {
		return nil, false
	}
	return o.DiskStates, true
}

// HasDiskStates returns a boolean if a field has been set.
func (o *StorageNvmeRaidConfiguration) HasDiskStates() bool {
	if o != nil && !IsNil(o.DiskStates) {
		return true
	}

	return false
}

// SetDiskStates gets a reference to the given []StorageNvmePhysicalDiskState and assigns it to the DiskStates field.
func (o *StorageNvmeRaidConfiguration) SetDiskStates(v []StorageNvmePhysicalDiskState) {
	o.DiskStates = v
}

// GetDriveGroups returns the DriveGroups field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *StorageNvmeRaidConfiguration) GetDriveGroups() []StorageNvmeRaidDriveGroup {
	if o == nil {
		var ret []StorageNvmeRaidDriveGroup
		return ret
	}
	return o.DriveGroups
}

// GetDriveGroupsOk returns a tuple with the DriveGroups field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *StorageNvmeRaidConfiguration) GetDriveGroupsOk() ([]StorageNvmeRaidDriveGroup, bool) {
	if o == nil || IsNil(o.DriveGroups) {
		return nil, false
	}
	return o.DriveGroups, true
}

// HasDriveGroups returns a boolean if a field has been set.
func (o *StorageNvmeRaidConfiguration) HasDriveGroups() bool {
	if o != nil && !IsNil(o.DriveGroups) {
		return true
	}

	return false
}

// SetDriveGroups gets a reference to the given []StorageNvmeRaidDriveGroup and assigns it to the DriveGroups field.
func (o *StorageNvmeRaidConfiguration) SetDriveGroups(v []StorageNvmeRaidDriveGroup) {
	o.DriveGroups = v
}

// GetServerProfile returns the ServerProfile field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *StorageNvmeRaidConfiguration) GetServerProfile() ServerProfileRelationship {
	if o == nil || IsNil(o.ServerProfile.Get()) {
		var ret ServerProfileRelationship
		return ret
	}
	return *o.ServerProfile.Get()
}

// GetServerProfileOk returns a tuple with the ServerProfile field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *StorageNvmeRaidConfiguration) GetServerProfileOk() (*ServerProfileRelationship, bool) {
	if o == nil {
		return nil, false
	}
	return o.ServerProfile.Get(), o.ServerProfile.IsSet()
}

// HasServerProfile returns a boolean if a field has been set.
func (o *StorageNvmeRaidConfiguration) HasServerProfile() bool {
	if o != nil && o.ServerProfile.IsSet() {
		return true
	}

	return false
}

// SetServerProfile gets a reference to the given NullableServerProfileRelationship and assigns it to the ServerProfile field.
func (o *StorageNvmeRaidConfiguration) SetServerProfile(v ServerProfileRelationship) {
	o.ServerProfile.Set(&v)
}

// SetServerProfileNil sets the value for ServerProfile to be an explicit nil
func (o *StorageNvmeRaidConfiguration) SetServerProfileNil() {
	o.ServerProfile.Set(nil)
}

// UnsetServerProfile ensures that no value is present for ServerProfile, not even an explicit nil
func (o *StorageNvmeRaidConfiguration) UnsetServerProfile() {
	o.ServerProfile.Unset()
}

// GetStoragePolicy returns the StoragePolicy field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *StorageNvmeRaidConfiguration) GetStoragePolicy() StorageStoragePolicyRelationship {
	if o == nil || IsNil(o.StoragePolicy.Get()) {
		var ret StorageStoragePolicyRelationship
		return ret
	}
	return *o.StoragePolicy.Get()
}

// GetStoragePolicyOk returns a tuple with the StoragePolicy field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *StorageNvmeRaidConfiguration) GetStoragePolicyOk() (*StorageStoragePolicyRelationship, bool) {
	if o == nil {
		return nil, false
	}
	return o.StoragePolicy.Get(), o.StoragePolicy.IsSet()
}

// HasStoragePolicy returns a boolean if a field has been set.
func (o *StorageNvmeRaidConfiguration) HasStoragePolicy() bool {
	if o != nil && o.StoragePolicy.IsSet() {
		return true
	}

	return false
}

// SetStoragePolicy gets a reference to the given NullableStorageStoragePolicyRelationship and assigns it to the StoragePolicy field.
func (o *StorageNvmeRaidConfiguration) SetStoragePolicy(v StorageStoragePolicyRelationship) {
	o.StoragePolicy.Set(&v)
}

// SetStoragePolicyNil sets the value for StoragePolicy to be an explicit nil
func (o *StorageNvmeRaidConfiguration) SetStoragePolicyNil() {
	o.StoragePolicy.Set(nil)
}

// UnsetStoragePolicy ensures that no value is present for StoragePolicy, not even an explicit nil
func (o *StorageNvmeRaidConfiguration) UnsetStoragePolicy() {
	o.StoragePolicy.Unset()
}

func (o StorageNvmeRaidConfiguration) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o StorageNvmeRaidConfiguration) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	serializedMoBaseMo, errMoBaseMo := json.Marshal(o.MoBaseMo)
	if errMoBaseMo != nil {
		return map[string]interface{}{}, errMoBaseMo
	}
	errMoBaseMo = json.Unmarshal([]byte(serializedMoBaseMo), &toSerialize)
	if errMoBaseMo != nil {
		return map[string]interface{}{}, errMoBaseMo
	}
	if _, exists := toSerialize["ClassId"]; !exists {
		toSerialize["ClassId"] = o.GetDefaultClassId()
	}
	toSerialize["ClassId"] = o.ClassId
	if _, exists := toSerialize["ObjectType"]; !exists {
		toSerialize["ObjectType"] = o.GetDefaultObjectType()
	}
	toSerialize["ObjectType"] = o.ObjectType
	if !IsNil(o.ControllerDn) {
		toSerialize["ControllerDn"] = o.ControllerDn
	}
	if !IsNil(o.ControllerMoid) {
		toSerialize["ControllerMoid"] = o.ControllerMoid
	}
	if o.DiskStates != nil {
		toSerialize["DiskStates"] = o.DiskStates
	}
	if o.DriveGroups != nil {
		toSerialize["DriveGroups"] = o.DriveGroups
	}
	if o.ServerProfile.IsSet() {
		toSerialize["ServerProfile"] = o.ServerProfile.Get()
	}
	if o.StoragePolicy.IsSet() {
		toSerialize["StoragePolicy"] = o.StoragePolicy.Get()
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *StorageNvmeRaidConfiguration) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"ClassId",
		"ObjectType",
	}

	// defaultValueFuncMap captures the default values for required properties.
	// These values are used when required properties are missing from the payload.
	defaultValueFuncMap := map[string]func() interface{}{
		"ClassId":    o.GetDefaultClassId,
		"ObjectType": o.GetDefaultObjectType,
	}
	var defaultValueApplied bool
	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			if _, ok := defaultValueFuncMap[requiredProperty]; ok {
				allProperties[requiredProperty] = defaultValueFuncMap[requiredProperty]()
				defaultValueApplied = true
			}
		}
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	if defaultValueApplied {
		data, err = json.Marshal(allProperties)
		if err != nil {
			return err
		}
	}
	type StorageNvmeRaidConfigurationWithoutEmbeddedStruct struct {
		// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.
		ClassId string `json:"ClassId"`
		// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
		ObjectType string `json:"ObjectType"`
		// The storage controller Dn Name for which Nvme RAID is created at endpoint.
		ControllerDn *string `json:"ControllerDn,omitempty"`
		// The storage controller Moid for which Nvme RAID creation is supported.
		ControllerMoid *string                                  `json:"ControllerMoid,omitempty"`
		DiskStates     []StorageNvmePhysicalDiskState           `json:"DiskStates,omitempty"`
		DriveGroups    []StorageNvmeRaidDriveGroup              `json:"DriveGroups,omitempty"`
		ServerProfile  NullableServerProfileRelationship        `json:"ServerProfile,omitempty"`
		StoragePolicy  NullableStorageStoragePolicyRelationship `json:"StoragePolicy,omitempty"`
	}

	varStorageNvmeRaidConfigurationWithoutEmbeddedStruct := StorageNvmeRaidConfigurationWithoutEmbeddedStruct{}

	err = json.Unmarshal(data, &varStorageNvmeRaidConfigurationWithoutEmbeddedStruct)
	if err == nil {
		varStorageNvmeRaidConfiguration := _StorageNvmeRaidConfiguration{}
		varStorageNvmeRaidConfiguration.ClassId = varStorageNvmeRaidConfigurationWithoutEmbeddedStruct.ClassId
		varStorageNvmeRaidConfiguration.ObjectType = varStorageNvmeRaidConfigurationWithoutEmbeddedStruct.ObjectType
		varStorageNvmeRaidConfiguration.ControllerDn = varStorageNvmeRaidConfigurationWithoutEmbeddedStruct.ControllerDn
		varStorageNvmeRaidConfiguration.ControllerMoid = varStorageNvmeRaidConfigurationWithoutEmbeddedStruct.ControllerMoid
		varStorageNvmeRaidConfiguration.DiskStates = varStorageNvmeRaidConfigurationWithoutEmbeddedStruct.DiskStates
		varStorageNvmeRaidConfiguration.DriveGroups = varStorageNvmeRaidConfigurationWithoutEmbeddedStruct.DriveGroups
		varStorageNvmeRaidConfiguration.ServerProfile = varStorageNvmeRaidConfigurationWithoutEmbeddedStruct.ServerProfile
		varStorageNvmeRaidConfiguration.StoragePolicy = varStorageNvmeRaidConfigurationWithoutEmbeddedStruct.StoragePolicy
		*o = StorageNvmeRaidConfiguration(varStorageNvmeRaidConfiguration)
	} else {
		return err
	}

	varStorageNvmeRaidConfiguration := _StorageNvmeRaidConfiguration{}

	err = json.Unmarshal(data, &varStorageNvmeRaidConfiguration)
	if err == nil {
		o.MoBaseMo = varStorageNvmeRaidConfiguration.MoBaseMo
	} else {
		return err
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "ClassId")
		delete(additionalProperties, "ObjectType")
		delete(additionalProperties, "ControllerDn")
		delete(additionalProperties, "ControllerMoid")
		delete(additionalProperties, "DiskStates")
		delete(additionalProperties, "DriveGroups")
		delete(additionalProperties, "ServerProfile")
		delete(additionalProperties, "StoragePolicy")

		// remove fields from embedded structs
		reflectMoBaseMo := reflect.ValueOf(o.MoBaseMo)
		for i := 0; i < reflectMoBaseMo.Type().NumField(); i++ {
			t := reflectMoBaseMo.Type().Field(i)

			if jsonTag := t.Tag.Get("json"); jsonTag != "" {
				fieldName := ""
				if commaIdx := strings.Index(jsonTag, ","); commaIdx > 0 {
					fieldName = jsonTag[:commaIdx]
				} else {
					fieldName = jsonTag
				}
				if fieldName != "AdditionalProperties" {
					delete(additionalProperties, fieldName)
				}
			}
		}

		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableStorageNvmeRaidConfiguration struct {
	value *StorageNvmeRaidConfiguration
	isSet bool
}

func (v NullableStorageNvmeRaidConfiguration) Get() *StorageNvmeRaidConfiguration {
	return v.value
}

func (v *NullableStorageNvmeRaidConfiguration) Set(val *StorageNvmeRaidConfiguration) {
	v.value = val
	v.isSet = true
}

func (v NullableStorageNvmeRaidConfiguration) IsSet() bool {
	return v.isSet
}

func (v *NullableStorageNvmeRaidConfiguration) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStorageNvmeRaidConfiguration(val *StorageNvmeRaidConfiguration) *NullableStorageNvmeRaidConfiguration {
	return &NullableStorageNvmeRaidConfiguration{value: val, isSet: true}
}

func (v NullableStorageNvmeRaidConfiguration) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStorageNvmeRaidConfiguration) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
