/*
Cisco Intersight

Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations. The Intersight OpenAPI document defines the complete set of properties that are returned in the HTTP response. From that perspective, a client can expect that no additional properties are returned, unless these properties are explicitly defined in the OpenAPI document. However, when a client uses an older version of the Intersight OpenAPI document, the server may send additional properties because the software is more recent than the client. In that case, the client may receive properties that it does not know about. Some generated SDKs perform a strict validation of the HTTP response body against the OpenAPI document.

API version: 1.0.11-2025092610
Contact: intersight@cisco.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package intersight

import (
	"encoding/json"
	"fmt"
	"reflect"
	"strings"
)

// checks if the StoragePureNfsPolicyRule type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &StoragePureNfsPolicyRule{}

// StoragePureNfsPolicyRule NFS policy rule entity in PureStorage FlashArray.
type StoragePureNfsPolicyRule struct {
	MoBaseMo
	// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.
	ClassId string `json:"ClassId"`
	// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
	ObjectType string `json:"ObjectType"`
	// Access of the policy rule.
	Access *string `json:"Access,omitempty"`
	// Anongid of the policy rule.
	Anongid *string `json:"Anongid,omitempty"`
	// Anonuid of the policy rule.
	Anonuid *string `json:"Anonuid,omitempty"`
	// Client of the policy rule.
	Client *string `json:"Client,omitempty"`
	// A boolean value, if set to true, lists only destroyed objects that are in the eradication pending state. If set to false, lists only objects that are not destroyed.
	Destroyed *bool `json:"Destroyed,omitempty"`
	// Name of the NFS policy rule.
	Name       *string  `json:"Name,omitempty"`
	NfsVersion []string `json:"NfsVersion,omitempty"`
	// Permission of the policy rule.
	Permission *string `json:"Permission,omitempty"`
	// Name of the NFS policy rule.
	PolicyName           *string                                        `json:"PolicyName,omitempty"`
	Security             []string                                       `json:"Security,omitempty"`
	Array                NullableStoragePureArrayRelationship           `json:"Array,omitempty"`
	Policy               NullableStoragePureDirectoryPolicyRelationship `json:"Policy,omitempty"`
	RegisteredDevice     NullableAssetDeviceRegistrationRelationship    `json:"RegisteredDevice,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _StoragePureNfsPolicyRule StoragePureNfsPolicyRule

// NewStoragePureNfsPolicyRule instantiates a new StoragePureNfsPolicyRule object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStoragePureNfsPolicyRule(classId string, objectType string) *StoragePureNfsPolicyRule {
	this := StoragePureNfsPolicyRule{}
	this.ClassId = classId
	this.ObjectType = objectType
	return &this
}

// NewStoragePureNfsPolicyRuleWithDefaults instantiates a new StoragePureNfsPolicyRule object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStoragePureNfsPolicyRuleWithDefaults() *StoragePureNfsPolicyRule {
	this := StoragePureNfsPolicyRule{}
	var classId string = "storage.PureNfsPolicyRule"
	this.ClassId = classId
	var objectType string = "storage.PureNfsPolicyRule"
	this.ObjectType = objectType
	return &this
}

// GetClassId returns the ClassId field value
func (o *StoragePureNfsPolicyRule) GetClassId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ClassId
}

// GetClassIdOk returns a tuple with the ClassId field value
// and a boolean to check if the value has been set.
func (o *StoragePureNfsPolicyRule) GetClassIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ClassId, true
}

// SetClassId sets field value
func (o *StoragePureNfsPolicyRule) SetClassId(v string) {
	o.ClassId = v
}

// GetDefaultClassId returns the default value "storage.PureNfsPolicyRule" of the ClassId field.
func (o *StoragePureNfsPolicyRule) GetDefaultClassId() interface{} {
	return "storage.PureNfsPolicyRule"
}

// GetObjectType returns the ObjectType field value
func (o *StoragePureNfsPolicyRule) GetObjectType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ObjectType
}

// GetObjectTypeOk returns a tuple with the ObjectType field value
// and a boolean to check if the value has been set.
func (o *StoragePureNfsPolicyRule) GetObjectTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ObjectType, true
}

// SetObjectType sets field value
func (o *StoragePureNfsPolicyRule) SetObjectType(v string) {
	o.ObjectType = v
}

// GetDefaultObjectType returns the default value "storage.PureNfsPolicyRule" of the ObjectType field.
func (o *StoragePureNfsPolicyRule) GetDefaultObjectType() interface{} {
	return "storage.PureNfsPolicyRule"
}

// GetAccess returns the Access field value if set, zero value otherwise.
func (o *StoragePureNfsPolicyRule) GetAccess() string {
	if o == nil || IsNil(o.Access) {
		var ret string
		return ret
	}
	return *o.Access
}

// GetAccessOk returns a tuple with the Access field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StoragePureNfsPolicyRule) GetAccessOk() (*string, bool) {
	if o == nil || IsNil(o.Access) {
		return nil, false
	}
	return o.Access, true
}

// HasAccess returns a boolean if a field has been set.
func (o *StoragePureNfsPolicyRule) HasAccess() bool {
	if o != nil && !IsNil(o.Access) {
		return true
	}

	return false
}

// SetAccess gets a reference to the given string and assigns it to the Access field.
func (o *StoragePureNfsPolicyRule) SetAccess(v string) {
	o.Access = &v
}

// GetAnongid returns the Anongid field value if set, zero value otherwise.
func (o *StoragePureNfsPolicyRule) GetAnongid() string {
	if o == nil || IsNil(o.Anongid) {
		var ret string
		return ret
	}
	return *o.Anongid
}

// GetAnongidOk returns a tuple with the Anongid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StoragePureNfsPolicyRule) GetAnongidOk() (*string, bool) {
	if o == nil || IsNil(o.Anongid) {
		return nil, false
	}
	return o.Anongid, true
}

// HasAnongid returns a boolean if a field has been set.
func (o *StoragePureNfsPolicyRule) HasAnongid() bool {
	if o != nil && !IsNil(o.Anongid) {
		return true
	}

	return false
}

// SetAnongid gets a reference to the given string and assigns it to the Anongid field.
func (o *StoragePureNfsPolicyRule) SetAnongid(v string) {
	o.Anongid = &v
}

// GetAnonuid returns the Anonuid field value if set, zero value otherwise.
func (o *StoragePureNfsPolicyRule) GetAnonuid() string {
	if o == nil || IsNil(o.Anonuid) {
		var ret string
		return ret
	}
	return *o.Anonuid
}

// GetAnonuidOk returns a tuple with the Anonuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StoragePureNfsPolicyRule) GetAnonuidOk() (*string, bool) {
	if o == nil || IsNil(o.Anonuid) {
		return nil, false
	}
	return o.Anonuid, true
}

// HasAnonuid returns a boolean if a field has been set.
func (o *StoragePureNfsPolicyRule) HasAnonuid() bool {
	if o != nil && !IsNil(o.Anonuid) {
		return true
	}

	return false
}

// SetAnonuid gets a reference to the given string and assigns it to the Anonuid field.
func (o *StoragePureNfsPolicyRule) SetAnonuid(v string) {
	o.Anonuid = &v
}

// GetClient returns the Client field value if set, zero value otherwise.
func (o *StoragePureNfsPolicyRule) GetClient() string {
	if o == nil || IsNil(o.Client) {
		var ret string
		return ret
	}
	return *o.Client
}

// GetClientOk returns a tuple with the Client field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StoragePureNfsPolicyRule) GetClientOk() (*string, bool) {
	if o == nil || IsNil(o.Client) {
		return nil, false
	}
	return o.Client, true
}

// HasClient returns a boolean if a field has been set.
func (o *StoragePureNfsPolicyRule) HasClient() bool {
	if o != nil && !IsNil(o.Client) {
		return true
	}

	return false
}

// SetClient gets a reference to the given string and assigns it to the Client field.
func (o *StoragePureNfsPolicyRule) SetClient(v string) {
	o.Client = &v
}

// GetDestroyed returns the Destroyed field value if set, zero value otherwise.
func (o *StoragePureNfsPolicyRule) GetDestroyed() bool {
	if o == nil || IsNil(o.Destroyed) {
		var ret bool
		return ret
	}
	return *o.Destroyed
}

// GetDestroyedOk returns a tuple with the Destroyed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StoragePureNfsPolicyRule) GetDestroyedOk() (*bool, bool) {
	if o == nil || IsNil(o.Destroyed) {
		return nil, false
	}
	return o.Destroyed, true
}

// HasDestroyed returns a boolean if a field has been set.
func (o *StoragePureNfsPolicyRule) HasDestroyed() bool {
	if o != nil && !IsNil(o.Destroyed) {
		return true
	}

	return false
}

// SetDestroyed gets a reference to the given bool and assigns it to the Destroyed field.
func (o *StoragePureNfsPolicyRule) SetDestroyed(v bool) {
	o.Destroyed = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *StoragePureNfsPolicyRule) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StoragePureNfsPolicyRule) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *StoragePureNfsPolicyRule) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *StoragePureNfsPolicyRule) SetName(v string) {
	o.Name = &v
}

// GetNfsVersion returns the NfsVersion field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *StoragePureNfsPolicyRule) GetNfsVersion() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.NfsVersion
}

// GetNfsVersionOk returns a tuple with the NfsVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *StoragePureNfsPolicyRule) GetNfsVersionOk() ([]string, bool) {
	if o == nil || IsNil(o.NfsVersion) {
		return nil, false
	}
	return o.NfsVersion, true
}

// HasNfsVersion returns a boolean if a field has been set.
func (o *StoragePureNfsPolicyRule) HasNfsVersion() bool {
	if o != nil && !IsNil(o.NfsVersion) {
		return true
	}

	return false
}

// SetNfsVersion gets a reference to the given []string and assigns it to the NfsVersion field.
func (o *StoragePureNfsPolicyRule) SetNfsVersion(v []string) {
	o.NfsVersion = v
}

// GetPermission returns the Permission field value if set, zero value otherwise.
func (o *StoragePureNfsPolicyRule) GetPermission() string {
	if o == nil || IsNil(o.Permission) {
		var ret string
		return ret
	}
	return *o.Permission
}

// GetPermissionOk returns a tuple with the Permission field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StoragePureNfsPolicyRule) GetPermissionOk() (*string, bool) {
	if o == nil || IsNil(o.Permission) {
		return nil, false
	}
	return o.Permission, true
}

// HasPermission returns a boolean if a field has been set.
func (o *StoragePureNfsPolicyRule) HasPermission() bool {
	if o != nil && !IsNil(o.Permission) {
		return true
	}

	return false
}

// SetPermission gets a reference to the given string and assigns it to the Permission field.
func (o *StoragePureNfsPolicyRule) SetPermission(v string) {
	o.Permission = &v
}

// GetPolicyName returns the PolicyName field value if set, zero value otherwise.
func (o *StoragePureNfsPolicyRule) GetPolicyName() string {
	if o == nil || IsNil(o.PolicyName) {
		var ret string
		return ret
	}
	return *o.PolicyName
}

// GetPolicyNameOk returns a tuple with the PolicyName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StoragePureNfsPolicyRule) GetPolicyNameOk() (*string, bool) {
	if o == nil || IsNil(o.PolicyName) {
		return nil, false
	}
	return o.PolicyName, true
}

// HasPolicyName returns a boolean if a field has been set.
func (o *StoragePureNfsPolicyRule) HasPolicyName() bool {
	if o != nil && !IsNil(o.PolicyName) {
		return true
	}

	return false
}

// SetPolicyName gets a reference to the given string and assigns it to the PolicyName field.
func (o *StoragePureNfsPolicyRule) SetPolicyName(v string) {
	o.PolicyName = &v
}

// GetSecurity returns the Security field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *StoragePureNfsPolicyRule) GetSecurity() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.Security
}

// GetSecurityOk returns a tuple with the Security field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *StoragePureNfsPolicyRule) GetSecurityOk() ([]string, bool) {
	if o == nil || IsNil(o.Security) {
		return nil, false
	}
	return o.Security, true
}

// HasSecurity returns a boolean if a field has been set.
func (o *StoragePureNfsPolicyRule) HasSecurity() bool {
	if o != nil && !IsNil(o.Security) {
		return true
	}

	return false
}

// SetSecurity gets a reference to the given []string and assigns it to the Security field.
func (o *StoragePureNfsPolicyRule) SetSecurity(v []string) {
	o.Security = v
}

// GetArray returns the Array field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *StoragePureNfsPolicyRule) GetArray() StoragePureArrayRelationship {
	if o == nil || IsNil(o.Array.Get()) {
		var ret StoragePureArrayRelationship
		return ret
	}
	return *o.Array.Get()
}

// GetArrayOk returns a tuple with the Array field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *StoragePureNfsPolicyRule) GetArrayOk() (*StoragePureArrayRelationship, bool) {
	if o == nil {
		return nil, false
	}
	return o.Array.Get(), o.Array.IsSet()
}

// HasArray returns a boolean if a field has been set.
func (o *StoragePureNfsPolicyRule) HasArray() bool {
	if o != nil && o.Array.IsSet() {
		return true
	}

	return false
}

// SetArray gets a reference to the given NullableStoragePureArrayRelationship and assigns it to the Array field.
func (o *StoragePureNfsPolicyRule) SetArray(v StoragePureArrayRelationship) {
	o.Array.Set(&v)
}

// SetArrayNil sets the value for Array to be an explicit nil
func (o *StoragePureNfsPolicyRule) SetArrayNil() {
	o.Array.Set(nil)
}

// UnsetArray ensures that no value is present for Array, not even an explicit nil
func (o *StoragePureNfsPolicyRule) UnsetArray() {
	o.Array.Unset()
}

// GetPolicy returns the Policy field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *StoragePureNfsPolicyRule) GetPolicy() StoragePureDirectoryPolicyRelationship {
	if o == nil || IsNil(o.Policy.Get()) {
		var ret StoragePureDirectoryPolicyRelationship
		return ret
	}
	return *o.Policy.Get()
}

// GetPolicyOk returns a tuple with the Policy field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *StoragePureNfsPolicyRule) GetPolicyOk() (*StoragePureDirectoryPolicyRelationship, bool) {
	if o == nil {
		return nil, false
	}
	return o.Policy.Get(), o.Policy.IsSet()
}

// HasPolicy returns a boolean if a field has been set.
func (o *StoragePureNfsPolicyRule) HasPolicy() bool {
	if o != nil && o.Policy.IsSet() {
		return true
	}

	return false
}

// SetPolicy gets a reference to the given NullableStoragePureDirectoryPolicyRelationship and assigns it to the Policy field.
func (o *StoragePureNfsPolicyRule) SetPolicy(v StoragePureDirectoryPolicyRelationship) {
	o.Policy.Set(&v)
}

// SetPolicyNil sets the value for Policy to be an explicit nil
func (o *StoragePureNfsPolicyRule) SetPolicyNil() {
	o.Policy.Set(nil)
}

// UnsetPolicy ensures that no value is present for Policy, not even an explicit nil
func (o *StoragePureNfsPolicyRule) UnsetPolicy() {
	o.Policy.Unset()
}

// GetRegisteredDevice returns the RegisteredDevice field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *StoragePureNfsPolicyRule) GetRegisteredDevice() AssetDeviceRegistrationRelationship {
	if o == nil || IsNil(o.RegisteredDevice.Get()) {
		var ret AssetDeviceRegistrationRelationship
		return ret
	}
	return *o.RegisteredDevice.Get()
}

// GetRegisteredDeviceOk returns a tuple with the RegisteredDevice field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *StoragePureNfsPolicyRule) GetRegisteredDeviceOk() (*AssetDeviceRegistrationRelationship, bool) {
	if o == nil {
		return nil, false
	}
	return o.RegisteredDevice.Get(), o.RegisteredDevice.IsSet()
}

// HasRegisteredDevice returns a boolean if a field has been set.
func (o *StoragePureNfsPolicyRule) HasRegisteredDevice() bool {
	if o != nil && o.RegisteredDevice.IsSet() {
		return true
	}

	return false
}

// SetRegisteredDevice gets a reference to the given NullableAssetDeviceRegistrationRelationship and assigns it to the RegisteredDevice field.
func (o *StoragePureNfsPolicyRule) SetRegisteredDevice(v AssetDeviceRegistrationRelationship) {
	o.RegisteredDevice.Set(&v)
}

// SetRegisteredDeviceNil sets the value for RegisteredDevice to be an explicit nil
func (o *StoragePureNfsPolicyRule) SetRegisteredDeviceNil() {
	o.RegisteredDevice.Set(nil)
}

// UnsetRegisteredDevice ensures that no value is present for RegisteredDevice, not even an explicit nil
func (o *StoragePureNfsPolicyRule) UnsetRegisteredDevice() {
	o.RegisteredDevice.Unset()
}

func (o StoragePureNfsPolicyRule) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o StoragePureNfsPolicyRule) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	serializedMoBaseMo, errMoBaseMo := json.Marshal(o.MoBaseMo)
	if errMoBaseMo != nil {
		return map[string]interface{}{}, errMoBaseMo
	}
	errMoBaseMo = json.Unmarshal([]byte(serializedMoBaseMo), &toSerialize)
	if errMoBaseMo != nil {
		return map[string]interface{}{}, errMoBaseMo
	}
	if _, exists := toSerialize["ClassId"]; !exists {
		toSerialize["ClassId"] = o.GetDefaultClassId()
	}
	toSerialize["ClassId"] = o.ClassId
	if _, exists := toSerialize["ObjectType"]; !exists {
		toSerialize["ObjectType"] = o.GetDefaultObjectType()
	}
	toSerialize["ObjectType"] = o.ObjectType
	if !IsNil(o.Access) {
		toSerialize["Access"] = o.Access
	}
	if !IsNil(o.Anongid) {
		toSerialize["Anongid"] = o.Anongid
	}
	if !IsNil(o.Anonuid) {
		toSerialize["Anonuid"] = o.Anonuid
	}
	if !IsNil(o.Client) {
		toSerialize["Client"] = o.Client
	}
	if !IsNil(o.Destroyed) {
		toSerialize["Destroyed"] = o.Destroyed
	}
	if !IsNil(o.Name) {
		toSerialize["Name"] = o.Name
	}
	if o.NfsVersion != nil {
		toSerialize["NfsVersion"] = o.NfsVersion
	}
	if !IsNil(o.Permission) {
		toSerialize["Permission"] = o.Permission
	}
	if !IsNil(o.PolicyName) {
		toSerialize["PolicyName"] = o.PolicyName
	}
	if o.Security != nil {
		toSerialize["Security"] = o.Security
	}
	if o.Array.IsSet() {
		toSerialize["Array"] = o.Array.Get()
	}
	if o.Policy.IsSet() {
		toSerialize["Policy"] = o.Policy.Get()
	}
	if o.RegisteredDevice.IsSet() {
		toSerialize["RegisteredDevice"] = o.RegisteredDevice.Get()
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *StoragePureNfsPolicyRule) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"ClassId",
		"ObjectType",
	}

	// defaultValueFuncMap captures the default values for required properties.
	// These values are used when required properties are missing from the payload.
	defaultValueFuncMap := map[string]func() interface{}{
		"ClassId":    o.GetDefaultClassId,
		"ObjectType": o.GetDefaultObjectType,
	}
	var defaultValueApplied bool
	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			if _, ok := defaultValueFuncMap[requiredProperty]; ok {
				allProperties[requiredProperty] = defaultValueFuncMap[requiredProperty]()
				defaultValueApplied = true
			}
		}
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	if defaultValueApplied {
		data, err = json.Marshal(allProperties)
		if err != nil {
			return err
		}
	}
	type StoragePureNfsPolicyRuleWithoutEmbeddedStruct struct {
		// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.
		ClassId string `json:"ClassId"`
		// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
		ObjectType string `json:"ObjectType"`
		// Access of the policy rule.
		Access *string `json:"Access,omitempty"`
		// Anongid of the policy rule.
		Anongid *string `json:"Anongid,omitempty"`
		// Anonuid of the policy rule.
		Anonuid *string `json:"Anonuid,omitempty"`
		// Client of the policy rule.
		Client *string `json:"Client,omitempty"`
		// A boolean value, if set to true, lists only destroyed objects that are in the eradication pending state. If set to false, lists only objects that are not destroyed.
		Destroyed *bool `json:"Destroyed,omitempty"`
		// Name of the NFS policy rule.
		Name       *string  `json:"Name,omitempty"`
		NfsVersion []string `json:"NfsVersion,omitempty"`
		// Permission of the policy rule.
		Permission *string `json:"Permission,omitempty"`
		// Name of the NFS policy rule.
		PolicyName       *string                                        `json:"PolicyName,omitempty"`
		Security         []string                                       `json:"Security,omitempty"`
		Array            NullableStoragePureArrayRelationship           `json:"Array,omitempty"`
		Policy           NullableStoragePureDirectoryPolicyRelationship `json:"Policy,omitempty"`
		RegisteredDevice NullableAssetDeviceRegistrationRelationship    `json:"RegisteredDevice,omitempty"`
	}

	varStoragePureNfsPolicyRuleWithoutEmbeddedStruct := StoragePureNfsPolicyRuleWithoutEmbeddedStruct{}

	err = json.Unmarshal(data, &varStoragePureNfsPolicyRuleWithoutEmbeddedStruct)
	if err == nil {
		varStoragePureNfsPolicyRule := _StoragePureNfsPolicyRule{}
		varStoragePureNfsPolicyRule.ClassId = varStoragePureNfsPolicyRuleWithoutEmbeddedStruct.ClassId
		varStoragePureNfsPolicyRule.ObjectType = varStoragePureNfsPolicyRuleWithoutEmbeddedStruct.ObjectType
		varStoragePureNfsPolicyRule.Access = varStoragePureNfsPolicyRuleWithoutEmbeddedStruct.Access
		varStoragePureNfsPolicyRule.Anongid = varStoragePureNfsPolicyRuleWithoutEmbeddedStruct.Anongid
		varStoragePureNfsPolicyRule.Anonuid = varStoragePureNfsPolicyRuleWithoutEmbeddedStruct.Anonuid
		varStoragePureNfsPolicyRule.Client = varStoragePureNfsPolicyRuleWithoutEmbeddedStruct.Client
		varStoragePureNfsPolicyRule.Destroyed = varStoragePureNfsPolicyRuleWithoutEmbeddedStruct.Destroyed
		varStoragePureNfsPolicyRule.Name = varStoragePureNfsPolicyRuleWithoutEmbeddedStruct.Name
		varStoragePureNfsPolicyRule.NfsVersion = varStoragePureNfsPolicyRuleWithoutEmbeddedStruct.NfsVersion
		varStoragePureNfsPolicyRule.Permission = varStoragePureNfsPolicyRuleWithoutEmbeddedStruct.Permission
		varStoragePureNfsPolicyRule.PolicyName = varStoragePureNfsPolicyRuleWithoutEmbeddedStruct.PolicyName
		varStoragePureNfsPolicyRule.Security = varStoragePureNfsPolicyRuleWithoutEmbeddedStruct.Security
		varStoragePureNfsPolicyRule.Array = varStoragePureNfsPolicyRuleWithoutEmbeddedStruct.Array
		varStoragePureNfsPolicyRule.Policy = varStoragePureNfsPolicyRuleWithoutEmbeddedStruct.Policy
		varStoragePureNfsPolicyRule.RegisteredDevice = varStoragePureNfsPolicyRuleWithoutEmbeddedStruct.RegisteredDevice
		*o = StoragePureNfsPolicyRule(varStoragePureNfsPolicyRule)
	} else {
		return err
	}

	varStoragePureNfsPolicyRule := _StoragePureNfsPolicyRule{}

	err = json.Unmarshal(data, &varStoragePureNfsPolicyRule)
	if err == nil {
		o.MoBaseMo = varStoragePureNfsPolicyRule.MoBaseMo
	} else {
		return err
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "ClassId")
		delete(additionalProperties, "ObjectType")
		delete(additionalProperties, "Access")
		delete(additionalProperties, "Anongid")
		delete(additionalProperties, "Anonuid")
		delete(additionalProperties, "Client")
		delete(additionalProperties, "Destroyed")
		delete(additionalProperties, "Name")
		delete(additionalProperties, "NfsVersion")
		delete(additionalProperties, "Permission")
		delete(additionalProperties, "PolicyName")
		delete(additionalProperties, "Security")
		delete(additionalProperties, "Array")
		delete(additionalProperties, "Policy")
		delete(additionalProperties, "RegisteredDevice")

		// remove fields from embedded structs
		reflectMoBaseMo := reflect.ValueOf(o.MoBaseMo)
		for i := 0; i < reflectMoBaseMo.Type().NumField(); i++ {
			t := reflectMoBaseMo.Type().Field(i)

			if jsonTag := t.Tag.Get("json"); jsonTag != "" {
				fieldName := ""
				if commaIdx := strings.Index(jsonTag, ","); commaIdx > 0 {
					fieldName = jsonTag[:commaIdx]
				} else {
					fieldName = jsonTag
				}
				if fieldName != "AdditionalProperties" {
					delete(additionalProperties, fieldName)
				}
			}
		}

		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableStoragePureNfsPolicyRule struct {
	value *StoragePureNfsPolicyRule
	isSet bool
}

func (v NullableStoragePureNfsPolicyRule) Get() *StoragePureNfsPolicyRule {
	return v.value
}

func (v *NullableStoragePureNfsPolicyRule) Set(val *StoragePureNfsPolicyRule) {
	v.value = val
	v.isSet = true
}

func (v NullableStoragePureNfsPolicyRule) IsSet() bool {
	return v.isSet
}

func (v *NullableStoragePureNfsPolicyRule) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStoragePureNfsPolicyRule(val *StoragePureNfsPolicyRule) *NullableStoragePureNfsPolicyRule {
	return &NullableStoragePureNfsPolicyRule{value: val, isSet: true}
}

func (v NullableStoragePureNfsPolicyRule) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStoragePureNfsPolicyRule) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
