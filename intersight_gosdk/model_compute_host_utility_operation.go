/*
Cisco Intersight

Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations. The Intersight OpenAPI document defines the complete set of properties that are returned in the HTTP response. From that perspective, a client can expect that no additional properties are returned, unless these properties are explicitly defined in the OpenAPI document. However, when a client uses an older version of the Intersight OpenAPI document, the server may send additional properties because the software is more recent than the client. In that case, the client may receive properties that it does not know about. Some generated SDKs perform a strict validation of the HTTP response body against the OpenAPI document.

API version: 1.0.11-18775
Contact: intersight@cisco.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package intersight

import (
	"encoding/json"
	"fmt"
	"reflect"
	"strings"
)

// checks if the ComputeHostUtilityOperation type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ComputeHostUtilityOperation{}

// ComputeHostUtilityOperation Host operation that need to be performed using host utility (HSU), like secure erase, secure erase with decommission and scrub are managed by this MO.
type ComputeHostUtilityOperation struct {
	MoBaseMo
	// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.
	ClassId string `json:"ClassId"`
	// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
	ObjectType   string                                          `json:"ObjectType"`
	HostOpConfig NullableComputeHostUtilityOperationConfguration `json:"HostOpConfig,omitempty"`
	// Host utility operation need to be performed in the endpoint. * `None` - Host utility mode of the operation is set to none by default. * `SecureErase` - EU LOT-9 secure data cleanup on the server components. * `SecureEraseWithDecommission` - EU LOT-9 secure data cleanup on the server components and do decommission. * `Scrub` - Quick cleanup on storage and BIOS.
	HostUtilityOperationMode *string `json:"HostUtilityOperationMode,omitempty"`
	// Task status of the host utility operation. * `Initiated` - This status indicates that host utility operation request is initiated. * `InProgress` - The operation status indicates that host utility operation is in-progress after the basic validations. * `CompletedOk` - The operation status indicates that host utility operation is completed successfully with no error or warning. * `CompletedError` - The operation status indicates that host utility operation is completed with error. * `CompletedWarning` - The operation status indicates that host utility operation is completed with warning. * `Aborted` - The operation status indicates that host utility operation is terminated or aborted. * `Invalidated` - The operation status indicates that host utility operation is invalid due to validation failure.
	HostUtilityOperationStatus *string                                   `json:"HostUtilityOperationStatus,omitempty"`
	DownloadStatus             NullableComputeDownloadStatusRelationship `json:"DownloadStatus,omitempty"`
	Server                     NullableComputePhysicalRelationship       `json:"Server,omitempty"`
	Workflow                   NullableWorkflowWorkflowInfoRelationship  `json:"Workflow,omitempty"`
	AdditionalProperties       map[string]interface{}
}

type _ComputeHostUtilityOperation ComputeHostUtilityOperation

// NewComputeHostUtilityOperation instantiates a new ComputeHostUtilityOperation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewComputeHostUtilityOperation(classId string, objectType string) *ComputeHostUtilityOperation {
	this := ComputeHostUtilityOperation{}
	this.ClassId = classId
	this.ObjectType = objectType
	var hostUtilityOperationMode string = "None"
	this.HostUtilityOperationMode = &hostUtilityOperationMode
	return &this
}

// NewComputeHostUtilityOperationWithDefaults instantiates a new ComputeHostUtilityOperation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewComputeHostUtilityOperationWithDefaults() *ComputeHostUtilityOperation {
	this := ComputeHostUtilityOperation{}
	var classId string = "compute.HostUtilityOperation"
	this.ClassId = classId
	var objectType string = "compute.HostUtilityOperation"
	this.ObjectType = objectType
	var hostUtilityOperationMode string = "None"
	this.HostUtilityOperationMode = &hostUtilityOperationMode
	return &this
}

// GetClassId returns the ClassId field value
func (o *ComputeHostUtilityOperation) GetClassId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ClassId
}

// GetClassIdOk returns a tuple with the ClassId field value
// and a boolean to check if the value has been set.
func (o *ComputeHostUtilityOperation) GetClassIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ClassId, true
}

// SetClassId sets field value
func (o *ComputeHostUtilityOperation) SetClassId(v string) {
	o.ClassId = v
}

// GetDefaultClassId returns the default value "compute.HostUtilityOperation" of the ClassId field.
func (o *ComputeHostUtilityOperation) GetDefaultClassId() interface{} {
	return "compute.HostUtilityOperation"
}

// GetObjectType returns the ObjectType field value
func (o *ComputeHostUtilityOperation) GetObjectType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ObjectType
}

// GetObjectTypeOk returns a tuple with the ObjectType field value
// and a boolean to check if the value has been set.
func (o *ComputeHostUtilityOperation) GetObjectTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ObjectType, true
}

// SetObjectType sets field value
func (o *ComputeHostUtilityOperation) SetObjectType(v string) {
	o.ObjectType = v
}

// GetDefaultObjectType returns the default value "compute.HostUtilityOperation" of the ObjectType field.
func (o *ComputeHostUtilityOperation) GetDefaultObjectType() interface{} {
	return "compute.HostUtilityOperation"
}

// GetHostOpConfig returns the HostOpConfig field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ComputeHostUtilityOperation) GetHostOpConfig() ComputeHostUtilityOperationConfguration {
	if o == nil || IsNil(o.HostOpConfig.Get()) {
		var ret ComputeHostUtilityOperationConfguration
		return ret
	}
	return *o.HostOpConfig.Get()
}

// GetHostOpConfigOk returns a tuple with the HostOpConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ComputeHostUtilityOperation) GetHostOpConfigOk() (*ComputeHostUtilityOperationConfguration, bool) {
	if o == nil {
		return nil, false
	}
	return o.HostOpConfig.Get(), o.HostOpConfig.IsSet()
}

// HasHostOpConfig returns a boolean if a field has been set.
func (o *ComputeHostUtilityOperation) HasHostOpConfig() bool {
	if o != nil && o.HostOpConfig.IsSet() {
		return true
	}

	return false
}

// SetHostOpConfig gets a reference to the given NullableComputeHostUtilityOperationConfguration and assigns it to the HostOpConfig field.
func (o *ComputeHostUtilityOperation) SetHostOpConfig(v ComputeHostUtilityOperationConfguration) {
	o.HostOpConfig.Set(&v)
}

// SetHostOpConfigNil sets the value for HostOpConfig to be an explicit nil
func (o *ComputeHostUtilityOperation) SetHostOpConfigNil() {
	o.HostOpConfig.Set(nil)
}

// UnsetHostOpConfig ensures that no value is present for HostOpConfig, not even an explicit nil
func (o *ComputeHostUtilityOperation) UnsetHostOpConfig() {
	o.HostOpConfig.Unset()
}

// GetHostUtilityOperationMode returns the HostUtilityOperationMode field value if set, zero value otherwise.
func (o *ComputeHostUtilityOperation) GetHostUtilityOperationMode() string {
	if o == nil || IsNil(o.HostUtilityOperationMode) {
		var ret string
		return ret
	}
	return *o.HostUtilityOperationMode
}

// GetHostUtilityOperationModeOk returns a tuple with the HostUtilityOperationMode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComputeHostUtilityOperation) GetHostUtilityOperationModeOk() (*string, bool) {
	if o == nil || IsNil(o.HostUtilityOperationMode) {
		return nil, false
	}
	return o.HostUtilityOperationMode, true
}

// HasHostUtilityOperationMode returns a boolean if a field has been set.
func (o *ComputeHostUtilityOperation) HasHostUtilityOperationMode() bool {
	if o != nil && !IsNil(o.HostUtilityOperationMode) {
		return true
	}

	return false
}

// SetHostUtilityOperationMode gets a reference to the given string and assigns it to the HostUtilityOperationMode field.
func (o *ComputeHostUtilityOperation) SetHostUtilityOperationMode(v string) {
	o.HostUtilityOperationMode = &v
}

// GetHostUtilityOperationStatus returns the HostUtilityOperationStatus field value if set, zero value otherwise.
func (o *ComputeHostUtilityOperation) GetHostUtilityOperationStatus() string {
	if o == nil || IsNil(o.HostUtilityOperationStatus) {
		var ret string
		return ret
	}
	return *o.HostUtilityOperationStatus
}

// GetHostUtilityOperationStatusOk returns a tuple with the HostUtilityOperationStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComputeHostUtilityOperation) GetHostUtilityOperationStatusOk() (*string, bool) {
	if o == nil || IsNil(o.HostUtilityOperationStatus) {
		return nil, false
	}
	return o.HostUtilityOperationStatus, true
}

// HasHostUtilityOperationStatus returns a boolean if a field has been set.
func (o *ComputeHostUtilityOperation) HasHostUtilityOperationStatus() bool {
	if o != nil && !IsNil(o.HostUtilityOperationStatus) {
		return true
	}

	return false
}

// SetHostUtilityOperationStatus gets a reference to the given string and assigns it to the HostUtilityOperationStatus field.
func (o *ComputeHostUtilityOperation) SetHostUtilityOperationStatus(v string) {
	o.HostUtilityOperationStatus = &v
}

// GetDownloadStatus returns the DownloadStatus field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ComputeHostUtilityOperation) GetDownloadStatus() ComputeDownloadStatusRelationship {
	if o == nil || IsNil(o.DownloadStatus.Get()) {
		var ret ComputeDownloadStatusRelationship
		return ret
	}
	return *o.DownloadStatus.Get()
}

// GetDownloadStatusOk returns a tuple with the DownloadStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ComputeHostUtilityOperation) GetDownloadStatusOk() (*ComputeDownloadStatusRelationship, bool) {
	if o == nil {
		return nil, false
	}
	return o.DownloadStatus.Get(), o.DownloadStatus.IsSet()
}

// HasDownloadStatus returns a boolean if a field has been set.
func (o *ComputeHostUtilityOperation) HasDownloadStatus() bool {
	if o != nil && o.DownloadStatus.IsSet() {
		return true
	}

	return false
}

// SetDownloadStatus gets a reference to the given NullableComputeDownloadStatusRelationship and assigns it to the DownloadStatus field.
func (o *ComputeHostUtilityOperation) SetDownloadStatus(v ComputeDownloadStatusRelationship) {
	o.DownloadStatus.Set(&v)
}

// SetDownloadStatusNil sets the value for DownloadStatus to be an explicit nil
func (o *ComputeHostUtilityOperation) SetDownloadStatusNil() {
	o.DownloadStatus.Set(nil)
}

// UnsetDownloadStatus ensures that no value is present for DownloadStatus, not even an explicit nil
func (o *ComputeHostUtilityOperation) UnsetDownloadStatus() {
	o.DownloadStatus.Unset()
}

// GetServer returns the Server field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ComputeHostUtilityOperation) GetServer() ComputePhysicalRelationship {
	if o == nil || IsNil(o.Server.Get()) {
		var ret ComputePhysicalRelationship
		return ret
	}
	return *o.Server.Get()
}

// GetServerOk returns a tuple with the Server field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ComputeHostUtilityOperation) GetServerOk() (*ComputePhysicalRelationship, bool) {
	if o == nil {
		return nil, false
	}
	return o.Server.Get(), o.Server.IsSet()
}

// HasServer returns a boolean if a field has been set.
func (o *ComputeHostUtilityOperation) HasServer() bool {
	if o != nil && o.Server.IsSet() {
		return true
	}

	return false
}

// SetServer gets a reference to the given NullableComputePhysicalRelationship and assigns it to the Server field.
func (o *ComputeHostUtilityOperation) SetServer(v ComputePhysicalRelationship) {
	o.Server.Set(&v)
}

// SetServerNil sets the value for Server to be an explicit nil
func (o *ComputeHostUtilityOperation) SetServerNil() {
	o.Server.Set(nil)
}

// UnsetServer ensures that no value is present for Server, not even an explicit nil
func (o *ComputeHostUtilityOperation) UnsetServer() {
	o.Server.Unset()
}

// GetWorkflow returns the Workflow field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ComputeHostUtilityOperation) GetWorkflow() WorkflowWorkflowInfoRelationship {
	if o == nil || IsNil(o.Workflow.Get()) {
		var ret WorkflowWorkflowInfoRelationship
		return ret
	}
	return *o.Workflow.Get()
}

// GetWorkflowOk returns a tuple with the Workflow field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ComputeHostUtilityOperation) GetWorkflowOk() (*WorkflowWorkflowInfoRelationship, bool) {
	if o == nil {
		return nil, false
	}
	return o.Workflow.Get(), o.Workflow.IsSet()
}

// HasWorkflow returns a boolean if a field has been set.
func (o *ComputeHostUtilityOperation) HasWorkflow() bool {
	if o != nil && o.Workflow.IsSet() {
		return true
	}

	return false
}

// SetWorkflow gets a reference to the given NullableWorkflowWorkflowInfoRelationship and assigns it to the Workflow field.
func (o *ComputeHostUtilityOperation) SetWorkflow(v WorkflowWorkflowInfoRelationship) {
	o.Workflow.Set(&v)
}

// SetWorkflowNil sets the value for Workflow to be an explicit nil
func (o *ComputeHostUtilityOperation) SetWorkflowNil() {
	o.Workflow.Set(nil)
}

// UnsetWorkflow ensures that no value is present for Workflow, not even an explicit nil
func (o *ComputeHostUtilityOperation) UnsetWorkflow() {
	o.Workflow.Unset()
}

func (o ComputeHostUtilityOperation) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ComputeHostUtilityOperation) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	serializedMoBaseMo, errMoBaseMo := json.Marshal(o.MoBaseMo)
	if errMoBaseMo != nil {
		return map[string]interface{}{}, errMoBaseMo
	}
	errMoBaseMo = json.Unmarshal([]byte(serializedMoBaseMo), &toSerialize)
	if errMoBaseMo != nil {
		return map[string]interface{}{}, errMoBaseMo
	}
	if _, exists := toSerialize["ClassId"]; !exists {
		toSerialize["ClassId"] = o.GetDefaultClassId()
	}
	toSerialize["ClassId"] = o.ClassId
	if _, exists := toSerialize["ObjectType"]; !exists {
		toSerialize["ObjectType"] = o.GetDefaultObjectType()
	}
	toSerialize["ObjectType"] = o.ObjectType
	if o.HostOpConfig.IsSet() {
		toSerialize["HostOpConfig"] = o.HostOpConfig.Get()
	}
	if !IsNil(o.HostUtilityOperationMode) {
		toSerialize["HostUtilityOperationMode"] = o.HostUtilityOperationMode
	}
	if !IsNil(o.HostUtilityOperationStatus) {
		toSerialize["HostUtilityOperationStatus"] = o.HostUtilityOperationStatus
	}
	if o.DownloadStatus.IsSet() {
		toSerialize["DownloadStatus"] = o.DownloadStatus.Get()
	}
	if o.Server.IsSet() {
		toSerialize["Server"] = o.Server.Get()
	}
	if o.Workflow.IsSet() {
		toSerialize["Workflow"] = o.Workflow.Get()
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ComputeHostUtilityOperation) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"ClassId",
		"ObjectType",
	}

	// defaultValueFuncMap captures the default values for required properties.
	// These values are used when required properties are missing from the payload.
	defaultValueFuncMap := map[string]func() interface{}{
		"ClassId":    o.GetDefaultClassId,
		"ObjectType": o.GetDefaultObjectType,
	}
	var defaultValueApplied bool
	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			if _, ok := defaultValueFuncMap[requiredProperty]; ok {
				allProperties[requiredProperty] = defaultValueFuncMap[requiredProperty]()
				defaultValueApplied = true
			}
		}
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	if defaultValueApplied {
		data, err = json.Marshal(allProperties)
		if err != nil {
			return err
		}
	}
	type ComputeHostUtilityOperationWithoutEmbeddedStruct struct {
		// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.
		ClassId string `json:"ClassId"`
		// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
		ObjectType   string                                          `json:"ObjectType"`
		HostOpConfig NullableComputeHostUtilityOperationConfguration `json:"HostOpConfig,omitempty"`
		// Host utility operation need to be performed in the endpoint. * `None` - Host utility mode of the operation is set to none by default. * `SecureErase` - EU LOT-9 secure data cleanup on the server components. * `SecureEraseWithDecommission` - EU LOT-9 secure data cleanup on the server components and do decommission. * `Scrub` - Quick cleanup on storage and BIOS.
		HostUtilityOperationMode *string `json:"HostUtilityOperationMode,omitempty"`
		// Task status of the host utility operation. * `Initiated` - This status indicates that host utility operation request is initiated. * `InProgress` - The operation status indicates that host utility operation is in-progress after the basic validations. * `CompletedOk` - The operation status indicates that host utility operation is completed successfully with no error or warning. * `CompletedError` - The operation status indicates that host utility operation is completed with error. * `CompletedWarning` - The operation status indicates that host utility operation is completed with warning. * `Aborted` - The operation status indicates that host utility operation is terminated or aborted. * `Invalidated` - The operation status indicates that host utility operation is invalid due to validation failure.
		HostUtilityOperationStatus *string                                   `json:"HostUtilityOperationStatus,omitempty"`
		DownloadStatus             NullableComputeDownloadStatusRelationship `json:"DownloadStatus,omitempty"`
		Server                     NullableComputePhysicalRelationship       `json:"Server,omitempty"`
		Workflow                   NullableWorkflowWorkflowInfoRelationship  `json:"Workflow,omitempty"`
	}

	varComputeHostUtilityOperationWithoutEmbeddedStruct := ComputeHostUtilityOperationWithoutEmbeddedStruct{}

	err = json.Unmarshal(data, &varComputeHostUtilityOperationWithoutEmbeddedStruct)
	if err == nil {
		varComputeHostUtilityOperation := _ComputeHostUtilityOperation{}
		varComputeHostUtilityOperation.ClassId = varComputeHostUtilityOperationWithoutEmbeddedStruct.ClassId
		varComputeHostUtilityOperation.ObjectType = varComputeHostUtilityOperationWithoutEmbeddedStruct.ObjectType
		varComputeHostUtilityOperation.HostOpConfig = varComputeHostUtilityOperationWithoutEmbeddedStruct.HostOpConfig
		varComputeHostUtilityOperation.HostUtilityOperationMode = varComputeHostUtilityOperationWithoutEmbeddedStruct.HostUtilityOperationMode
		varComputeHostUtilityOperation.HostUtilityOperationStatus = varComputeHostUtilityOperationWithoutEmbeddedStruct.HostUtilityOperationStatus
		varComputeHostUtilityOperation.DownloadStatus = varComputeHostUtilityOperationWithoutEmbeddedStruct.DownloadStatus
		varComputeHostUtilityOperation.Server = varComputeHostUtilityOperationWithoutEmbeddedStruct.Server
		varComputeHostUtilityOperation.Workflow = varComputeHostUtilityOperationWithoutEmbeddedStruct.Workflow
		*o = ComputeHostUtilityOperation(varComputeHostUtilityOperation)
	} else {
		return err
	}

	varComputeHostUtilityOperation := _ComputeHostUtilityOperation{}

	err = json.Unmarshal(data, &varComputeHostUtilityOperation)
	if err == nil {
		o.MoBaseMo = varComputeHostUtilityOperation.MoBaseMo
	} else {
		return err
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "ClassId")
		delete(additionalProperties, "ObjectType")
		delete(additionalProperties, "HostOpConfig")
		delete(additionalProperties, "HostUtilityOperationMode")
		delete(additionalProperties, "HostUtilityOperationStatus")
		delete(additionalProperties, "DownloadStatus")
		delete(additionalProperties, "Server")
		delete(additionalProperties, "Workflow")

		// remove fields from embedded structs
		reflectMoBaseMo := reflect.ValueOf(o.MoBaseMo)
		for i := 0; i < reflectMoBaseMo.Type().NumField(); i++ {
			t := reflectMoBaseMo.Type().Field(i)

			if jsonTag := t.Tag.Get("json"); jsonTag != "" {
				fieldName := ""
				if commaIdx := strings.Index(jsonTag, ","); commaIdx > 0 {
					fieldName = jsonTag[:commaIdx]
				} else {
					fieldName = jsonTag
				}
				if fieldName != "AdditionalProperties" {
					delete(additionalProperties, fieldName)
				}
			}
		}

		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableComputeHostUtilityOperation struct {
	value *ComputeHostUtilityOperation
	isSet bool
}

func (v NullableComputeHostUtilityOperation) Get() *ComputeHostUtilityOperation {
	return v.value
}

func (v *NullableComputeHostUtilityOperation) Set(val *ComputeHostUtilityOperation) {
	v.value = val
	v.isSet = true
}

func (v NullableComputeHostUtilityOperation) IsSet() bool {
	return v.isSet
}

func (v *NullableComputeHostUtilityOperation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableComputeHostUtilityOperation(val *ComputeHostUtilityOperation) *NullableComputeHostUtilityOperation {
	return &NullableComputeHostUtilityOperation{value: val, isSet: true}
}

func (v NullableComputeHostUtilityOperation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableComputeHostUtilityOperation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
