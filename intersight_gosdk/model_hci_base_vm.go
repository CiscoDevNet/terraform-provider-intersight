/*
Cisco Intersight

Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations. The Intersight OpenAPI document defines the complete set of properties that are returned in the HTTP response. From that perspective, a client can expect that no additional properties are returned, unless these properties are explicitly defined in the OpenAPI document. However, when a client uses an older version of the Intersight OpenAPI document, the server may send additional properties because the software is more recent than the client. In that case, the client may receive properties that it does not know about. Some generated SDKs perform a strict validation of the HTTP response body against the OpenAPI document.

API version: 1.0.11-2025071017
Contact: intersight@cisco.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package intersight

import (
	"encoding/json"
	"fmt"
	"reflect"
	"strings"
)

// checks if the HciBaseVm type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &HciBaseVm{}

// HciBaseVm A base VM reported by Prism Central.
type HciBaseVm struct {
	MoBaseMo
	// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data. The enum values provides the list of concrete types that can be instantiated from this abstract type.
	ClassId string `json:"ClassId"`
	// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property. The enum values provides the list of concrete types that can be instantiated from this abstract type.
	ObjectType string `json:"ObjectType"`
	// The unique identifier of the cluster which owns this VM.
	ClusterExtId *string `json:"ClusterExtId,omitempty"`
	// The description of the VM.
	Description *string `json:"Description,omitempty"`
	// The guest OS name of the VM.
	GuestOsName *string `json:"GuestOsName,omitempty"`
	// The hypervisor type of the given VM. It could be AHV, ESX etc.
	HypervisorType *string `json:"HypervisorType,omitempty"`
	// The memory size in bytes of the VM.
	MemorySizeBytes *int64 `json:"MemorySizeBytes,omitempty"`
	// The name of the VM reported by the Prism Central.
	Name *string `json:"Name,omitempty"`
	// The unique identifier of the node.
	NodeExtId *string `json:"NodeExtId,omitempty"`
	// The number of cores per socket of the VM.
	NumCoresPerSocket *int32 `json:"NumCoresPerSocket,omitempty"`
	// The number of CPU cores of the VM.
	NumCpuCores *int64 `json:"NumCpuCores,omitempty"`
	// The power state of the VM. The possible values are ON, OFF, SUSPENDED (ESXi), PAUSED (AHV), UNDETERMINED. * `UNDETERMINED` - The VM power state is currently unknown. * `OFF` - The VM's power state is powered-off. * `ON` - The VM's power state is powered-on. * `PAUSED` - The VM's power state is paused, applicable only to AHV VM. * `SUSPENDED` - The VM's power state is suspended, applicable only to ESXi VM.
	PowerState *string `json:"PowerState,omitempty"`
	// The unique identifier of the VM.
	VmExtId              *string                        `json:"VmExtId,omitempty"`
	Cluster              NullableHciClusterRelationship `json:"Cluster,omitempty"`
	Node                 NullableHciNodeRelationship    `json:"Node,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _HciBaseVm HciBaseVm

// NewHciBaseVm instantiates a new HciBaseVm object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHciBaseVm(classId string, objectType string) *HciBaseVm {
	this := HciBaseVm{}
	this.ClassId = classId
	this.ObjectType = objectType
	return &this
}

// NewHciBaseVmWithDefaults instantiates a new HciBaseVm object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHciBaseVmWithDefaults() *HciBaseVm {
	this := HciBaseVm{}
	return &this
}

// GetClassId returns the ClassId field value
func (o *HciBaseVm) GetClassId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ClassId
}

// GetClassIdOk returns a tuple with the ClassId field value
// and a boolean to check if the value has been set.
func (o *HciBaseVm) GetClassIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ClassId, true
}

// SetClassId sets field value
func (o *HciBaseVm) SetClassId(v string) {
	o.ClassId = v
}

// GetObjectType returns the ObjectType field value
func (o *HciBaseVm) GetObjectType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ObjectType
}

// GetObjectTypeOk returns a tuple with the ObjectType field value
// and a boolean to check if the value has been set.
func (o *HciBaseVm) GetObjectTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ObjectType, true
}

// SetObjectType sets field value
func (o *HciBaseVm) SetObjectType(v string) {
	o.ObjectType = v
}

// GetClusterExtId returns the ClusterExtId field value if set, zero value otherwise.
func (o *HciBaseVm) GetClusterExtId() string {
	if o == nil || IsNil(o.ClusterExtId) {
		var ret string
		return ret
	}
	return *o.ClusterExtId
}

// GetClusterExtIdOk returns a tuple with the ClusterExtId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HciBaseVm) GetClusterExtIdOk() (*string, bool) {
	if o == nil || IsNil(o.ClusterExtId) {
		return nil, false
	}
	return o.ClusterExtId, true
}

// HasClusterExtId returns a boolean if a field has been set.
func (o *HciBaseVm) HasClusterExtId() bool {
	if o != nil && !IsNil(o.ClusterExtId) {
		return true
	}

	return false
}

// SetClusterExtId gets a reference to the given string and assigns it to the ClusterExtId field.
func (o *HciBaseVm) SetClusterExtId(v string) {
	o.ClusterExtId = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *HciBaseVm) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HciBaseVm) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *HciBaseVm) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *HciBaseVm) SetDescription(v string) {
	o.Description = &v
}

// GetGuestOsName returns the GuestOsName field value if set, zero value otherwise.
func (o *HciBaseVm) GetGuestOsName() string {
	if o == nil || IsNil(o.GuestOsName) {
		var ret string
		return ret
	}
	return *o.GuestOsName
}

// GetGuestOsNameOk returns a tuple with the GuestOsName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HciBaseVm) GetGuestOsNameOk() (*string, bool) {
	if o == nil || IsNil(o.GuestOsName) {
		return nil, false
	}
	return o.GuestOsName, true
}

// HasGuestOsName returns a boolean if a field has been set.
func (o *HciBaseVm) HasGuestOsName() bool {
	if o != nil && !IsNil(o.GuestOsName) {
		return true
	}

	return false
}

// SetGuestOsName gets a reference to the given string and assigns it to the GuestOsName field.
func (o *HciBaseVm) SetGuestOsName(v string) {
	o.GuestOsName = &v
}

// GetHypervisorType returns the HypervisorType field value if set, zero value otherwise.
func (o *HciBaseVm) GetHypervisorType() string {
	if o == nil || IsNil(o.HypervisorType) {
		var ret string
		return ret
	}
	return *o.HypervisorType
}

// GetHypervisorTypeOk returns a tuple with the HypervisorType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HciBaseVm) GetHypervisorTypeOk() (*string, bool) {
	if o == nil || IsNil(o.HypervisorType) {
		return nil, false
	}
	return o.HypervisorType, true
}

// HasHypervisorType returns a boolean if a field has been set.
func (o *HciBaseVm) HasHypervisorType() bool {
	if o != nil && !IsNil(o.HypervisorType) {
		return true
	}

	return false
}

// SetHypervisorType gets a reference to the given string and assigns it to the HypervisorType field.
func (o *HciBaseVm) SetHypervisorType(v string) {
	o.HypervisorType = &v
}

// GetMemorySizeBytes returns the MemorySizeBytes field value if set, zero value otherwise.
func (o *HciBaseVm) GetMemorySizeBytes() int64 {
	if o == nil || IsNil(o.MemorySizeBytes) {
		var ret int64
		return ret
	}
	return *o.MemorySizeBytes
}

// GetMemorySizeBytesOk returns a tuple with the MemorySizeBytes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HciBaseVm) GetMemorySizeBytesOk() (*int64, bool) {
	if o == nil || IsNil(o.MemorySizeBytes) {
		return nil, false
	}
	return o.MemorySizeBytes, true
}

// HasMemorySizeBytes returns a boolean if a field has been set.
func (o *HciBaseVm) HasMemorySizeBytes() bool {
	if o != nil && !IsNil(o.MemorySizeBytes) {
		return true
	}

	return false
}

// SetMemorySizeBytes gets a reference to the given int64 and assigns it to the MemorySizeBytes field.
func (o *HciBaseVm) SetMemorySizeBytes(v int64) {
	o.MemorySizeBytes = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *HciBaseVm) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HciBaseVm) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *HciBaseVm) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *HciBaseVm) SetName(v string) {
	o.Name = &v
}

// GetNodeExtId returns the NodeExtId field value if set, zero value otherwise.
func (o *HciBaseVm) GetNodeExtId() string {
	if o == nil || IsNil(o.NodeExtId) {
		var ret string
		return ret
	}
	return *o.NodeExtId
}

// GetNodeExtIdOk returns a tuple with the NodeExtId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HciBaseVm) GetNodeExtIdOk() (*string, bool) {
	if o == nil || IsNil(o.NodeExtId) {
		return nil, false
	}
	return o.NodeExtId, true
}

// HasNodeExtId returns a boolean if a field has been set.
func (o *HciBaseVm) HasNodeExtId() bool {
	if o != nil && !IsNil(o.NodeExtId) {
		return true
	}

	return false
}

// SetNodeExtId gets a reference to the given string and assigns it to the NodeExtId field.
func (o *HciBaseVm) SetNodeExtId(v string) {
	o.NodeExtId = &v
}

// GetNumCoresPerSocket returns the NumCoresPerSocket field value if set, zero value otherwise.
func (o *HciBaseVm) GetNumCoresPerSocket() int32 {
	if o == nil || IsNil(o.NumCoresPerSocket) {
		var ret int32
		return ret
	}
	return *o.NumCoresPerSocket
}

// GetNumCoresPerSocketOk returns a tuple with the NumCoresPerSocket field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HciBaseVm) GetNumCoresPerSocketOk() (*int32, bool) {
	if o == nil || IsNil(o.NumCoresPerSocket) {
		return nil, false
	}
	return o.NumCoresPerSocket, true
}

// HasNumCoresPerSocket returns a boolean if a field has been set.
func (o *HciBaseVm) HasNumCoresPerSocket() bool {
	if o != nil && !IsNil(o.NumCoresPerSocket) {
		return true
	}

	return false
}

// SetNumCoresPerSocket gets a reference to the given int32 and assigns it to the NumCoresPerSocket field.
func (o *HciBaseVm) SetNumCoresPerSocket(v int32) {
	o.NumCoresPerSocket = &v
}

// GetNumCpuCores returns the NumCpuCores field value if set, zero value otherwise.
func (o *HciBaseVm) GetNumCpuCores() int64 {
	if o == nil || IsNil(o.NumCpuCores) {
		var ret int64
		return ret
	}
	return *o.NumCpuCores
}

// GetNumCpuCoresOk returns a tuple with the NumCpuCores field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HciBaseVm) GetNumCpuCoresOk() (*int64, bool) {
	if o == nil || IsNil(o.NumCpuCores) {
		return nil, false
	}
	return o.NumCpuCores, true
}

// HasNumCpuCores returns a boolean if a field has been set.
func (o *HciBaseVm) HasNumCpuCores() bool {
	if o != nil && !IsNil(o.NumCpuCores) {
		return true
	}

	return false
}

// SetNumCpuCores gets a reference to the given int64 and assigns it to the NumCpuCores field.
func (o *HciBaseVm) SetNumCpuCores(v int64) {
	o.NumCpuCores = &v
}

// GetPowerState returns the PowerState field value if set, zero value otherwise.
func (o *HciBaseVm) GetPowerState() string {
	if o == nil || IsNil(o.PowerState) {
		var ret string
		return ret
	}
	return *o.PowerState
}

// GetPowerStateOk returns a tuple with the PowerState field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HciBaseVm) GetPowerStateOk() (*string, bool) {
	if o == nil || IsNil(o.PowerState) {
		return nil, false
	}
	return o.PowerState, true
}

// HasPowerState returns a boolean if a field has been set.
func (o *HciBaseVm) HasPowerState() bool {
	if o != nil && !IsNil(o.PowerState) {
		return true
	}

	return false
}

// SetPowerState gets a reference to the given string and assigns it to the PowerState field.
func (o *HciBaseVm) SetPowerState(v string) {
	o.PowerState = &v
}

// GetVmExtId returns the VmExtId field value if set, zero value otherwise.
func (o *HciBaseVm) GetVmExtId() string {
	if o == nil || IsNil(o.VmExtId) {
		var ret string
		return ret
	}
	return *o.VmExtId
}

// GetVmExtIdOk returns a tuple with the VmExtId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HciBaseVm) GetVmExtIdOk() (*string, bool) {
	if o == nil || IsNil(o.VmExtId) {
		return nil, false
	}
	return o.VmExtId, true
}

// HasVmExtId returns a boolean if a field has been set.
func (o *HciBaseVm) HasVmExtId() bool {
	if o != nil && !IsNil(o.VmExtId) {
		return true
	}

	return false
}

// SetVmExtId gets a reference to the given string and assigns it to the VmExtId field.
func (o *HciBaseVm) SetVmExtId(v string) {
	o.VmExtId = &v
}

// GetCluster returns the Cluster field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HciBaseVm) GetCluster() HciClusterRelationship {
	if o == nil || IsNil(o.Cluster.Get()) {
		var ret HciClusterRelationship
		return ret
	}
	return *o.Cluster.Get()
}

// GetClusterOk returns a tuple with the Cluster field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HciBaseVm) GetClusterOk() (*HciClusterRelationship, bool) {
	if o == nil {
		return nil, false
	}
	return o.Cluster.Get(), o.Cluster.IsSet()
}

// HasCluster returns a boolean if a field has been set.
func (o *HciBaseVm) HasCluster() bool {
	if o != nil && o.Cluster.IsSet() {
		return true
	}

	return false
}

// SetCluster gets a reference to the given NullableHciClusterRelationship and assigns it to the Cluster field.
func (o *HciBaseVm) SetCluster(v HciClusterRelationship) {
	o.Cluster.Set(&v)
}

// SetClusterNil sets the value for Cluster to be an explicit nil
func (o *HciBaseVm) SetClusterNil() {
	o.Cluster.Set(nil)
}

// UnsetCluster ensures that no value is present for Cluster, not even an explicit nil
func (o *HciBaseVm) UnsetCluster() {
	o.Cluster.Unset()
}

// GetNode returns the Node field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HciBaseVm) GetNode() HciNodeRelationship {
	if o == nil || IsNil(o.Node.Get()) {
		var ret HciNodeRelationship
		return ret
	}
	return *o.Node.Get()
}

// GetNodeOk returns a tuple with the Node field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HciBaseVm) GetNodeOk() (*HciNodeRelationship, bool) {
	if o == nil {
		return nil, false
	}
	return o.Node.Get(), o.Node.IsSet()
}

// HasNode returns a boolean if a field has been set.
func (o *HciBaseVm) HasNode() bool {
	if o != nil && o.Node.IsSet() {
		return true
	}

	return false
}

// SetNode gets a reference to the given NullableHciNodeRelationship and assigns it to the Node field.
func (o *HciBaseVm) SetNode(v HciNodeRelationship) {
	o.Node.Set(&v)
}

// SetNodeNil sets the value for Node to be an explicit nil
func (o *HciBaseVm) SetNodeNil() {
	o.Node.Set(nil)
}

// UnsetNode ensures that no value is present for Node, not even an explicit nil
func (o *HciBaseVm) UnsetNode() {
	o.Node.Unset()
}

func (o HciBaseVm) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o HciBaseVm) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	serializedMoBaseMo, errMoBaseMo := json.Marshal(o.MoBaseMo)
	if errMoBaseMo != nil {
		return map[string]interface{}{}, errMoBaseMo
	}
	errMoBaseMo = json.Unmarshal([]byte(serializedMoBaseMo), &toSerialize)
	if errMoBaseMo != nil {
		return map[string]interface{}{}, errMoBaseMo
	}
	toSerialize["ClassId"] = o.ClassId
	toSerialize["ObjectType"] = o.ObjectType
	if !IsNil(o.ClusterExtId) {
		toSerialize["ClusterExtId"] = o.ClusterExtId
	}
	if !IsNil(o.Description) {
		toSerialize["Description"] = o.Description
	}
	if !IsNil(o.GuestOsName) {
		toSerialize["GuestOsName"] = o.GuestOsName
	}
	if !IsNil(o.HypervisorType) {
		toSerialize["HypervisorType"] = o.HypervisorType
	}
	if !IsNil(o.MemorySizeBytes) {
		toSerialize["MemorySizeBytes"] = o.MemorySizeBytes
	}
	if !IsNil(o.Name) {
		toSerialize["Name"] = o.Name
	}
	if !IsNil(o.NodeExtId) {
		toSerialize["NodeExtId"] = o.NodeExtId
	}
	if !IsNil(o.NumCoresPerSocket) {
		toSerialize["NumCoresPerSocket"] = o.NumCoresPerSocket
	}
	if !IsNil(o.NumCpuCores) {
		toSerialize["NumCpuCores"] = o.NumCpuCores
	}
	if !IsNil(o.PowerState) {
		toSerialize["PowerState"] = o.PowerState
	}
	if !IsNil(o.VmExtId) {
		toSerialize["VmExtId"] = o.VmExtId
	}
	if o.Cluster.IsSet() {
		toSerialize["Cluster"] = o.Cluster.Get()
	}
	if o.Node.IsSet() {
		toSerialize["Node"] = o.Node.Get()
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *HciBaseVm) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"ClassId",
		"ObjectType",
	}

	// defaultValueFuncMap captures the default values for required properties.
	// These values are used when required properties are missing from the payload.
	defaultValueFuncMap := map[string]func() interface{}{}
	var defaultValueApplied bool
	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			if _, ok := defaultValueFuncMap[requiredProperty]; ok {
				allProperties[requiredProperty] = defaultValueFuncMap[requiredProperty]()
				defaultValueApplied = true
			}
		}
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	if defaultValueApplied {
		data, err = json.Marshal(allProperties)
		if err != nil {
			return err
		}
	}
	type HciBaseVmWithoutEmbeddedStruct struct {
		// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data. The enum values provides the list of concrete types that can be instantiated from this abstract type.
		ClassId string `json:"ClassId"`
		// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property. The enum values provides the list of concrete types that can be instantiated from this abstract type.
		ObjectType string `json:"ObjectType"`
		// The unique identifier of the cluster which owns this VM.
		ClusterExtId *string `json:"ClusterExtId,omitempty"`
		// The description of the VM.
		Description *string `json:"Description,omitempty"`
		// The guest OS name of the VM.
		GuestOsName *string `json:"GuestOsName,omitempty"`
		// The hypervisor type of the given VM. It could be AHV, ESX etc.
		HypervisorType *string `json:"HypervisorType,omitempty"`
		// The memory size in bytes of the VM.
		MemorySizeBytes *int64 `json:"MemorySizeBytes,omitempty"`
		// The name of the VM reported by the Prism Central.
		Name *string `json:"Name,omitempty"`
		// The unique identifier of the node.
		NodeExtId *string `json:"NodeExtId,omitempty"`
		// The number of cores per socket of the VM.
		NumCoresPerSocket *int32 `json:"NumCoresPerSocket,omitempty"`
		// The number of CPU cores of the VM.
		NumCpuCores *int64 `json:"NumCpuCores,omitempty"`
		// The power state of the VM. The possible values are ON, OFF, SUSPENDED (ESXi), PAUSED (AHV), UNDETERMINED. * `UNDETERMINED` - The VM power state is currently unknown. * `OFF` - The VM's power state is powered-off. * `ON` - The VM's power state is powered-on. * `PAUSED` - The VM's power state is paused, applicable only to AHV VM. * `SUSPENDED` - The VM's power state is suspended, applicable only to ESXi VM.
		PowerState *string `json:"PowerState,omitempty"`
		// The unique identifier of the VM.
		VmExtId *string                        `json:"VmExtId,omitempty"`
		Cluster NullableHciClusterRelationship `json:"Cluster,omitempty"`
		Node    NullableHciNodeRelationship    `json:"Node,omitempty"`
	}

	varHciBaseVmWithoutEmbeddedStruct := HciBaseVmWithoutEmbeddedStruct{}

	err = json.Unmarshal(data, &varHciBaseVmWithoutEmbeddedStruct)
	if err == nil {
		varHciBaseVm := _HciBaseVm{}
		varHciBaseVm.ClassId = varHciBaseVmWithoutEmbeddedStruct.ClassId
		varHciBaseVm.ObjectType = varHciBaseVmWithoutEmbeddedStruct.ObjectType
		varHciBaseVm.ClusterExtId = varHciBaseVmWithoutEmbeddedStruct.ClusterExtId
		varHciBaseVm.Description = varHciBaseVmWithoutEmbeddedStruct.Description
		varHciBaseVm.GuestOsName = varHciBaseVmWithoutEmbeddedStruct.GuestOsName
		varHciBaseVm.HypervisorType = varHciBaseVmWithoutEmbeddedStruct.HypervisorType
		varHciBaseVm.MemorySizeBytes = varHciBaseVmWithoutEmbeddedStruct.MemorySizeBytes
		varHciBaseVm.Name = varHciBaseVmWithoutEmbeddedStruct.Name
		varHciBaseVm.NodeExtId = varHciBaseVmWithoutEmbeddedStruct.NodeExtId
		varHciBaseVm.NumCoresPerSocket = varHciBaseVmWithoutEmbeddedStruct.NumCoresPerSocket
		varHciBaseVm.NumCpuCores = varHciBaseVmWithoutEmbeddedStruct.NumCpuCores
		varHciBaseVm.PowerState = varHciBaseVmWithoutEmbeddedStruct.PowerState
		varHciBaseVm.VmExtId = varHciBaseVmWithoutEmbeddedStruct.VmExtId
		varHciBaseVm.Cluster = varHciBaseVmWithoutEmbeddedStruct.Cluster
		varHciBaseVm.Node = varHciBaseVmWithoutEmbeddedStruct.Node
		*o = HciBaseVm(varHciBaseVm)
	} else {
		return err
	}

	varHciBaseVm := _HciBaseVm{}

	err = json.Unmarshal(data, &varHciBaseVm)
	if err == nil {
		o.MoBaseMo = varHciBaseVm.MoBaseMo
	} else {
		return err
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "ClassId")
		delete(additionalProperties, "ObjectType")
		delete(additionalProperties, "ClusterExtId")
		delete(additionalProperties, "Description")
		delete(additionalProperties, "GuestOsName")
		delete(additionalProperties, "HypervisorType")
		delete(additionalProperties, "MemorySizeBytes")
		delete(additionalProperties, "Name")
		delete(additionalProperties, "NodeExtId")
		delete(additionalProperties, "NumCoresPerSocket")
		delete(additionalProperties, "NumCpuCores")
		delete(additionalProperties, "PowerState")
		delete(additionalProperties, "VmExtId")
		delete(additionalProperties, "Cluster")
		delete(additionalProperties, "Node")

		// remove fields from embedded structs
		reflectMoBaseMo := reflect.ValueOf(o.MoBaseMo)
		for i := 0; i < reflectMoBaseMo.Type().NumField(); i++ {
			t := reflectMoBaseMo.Type().Field(i)

			if jsonTag := t.Tag.Get("json"); jsonTag != "" {
				fieldName := ""
				if commaIdx := strings.Index(jsonTag, ","); commaIdx > 0 {
					fieldName = jsonTag[:commaIdx]
				} else {
					fieldName = jsonTag
				}
				if fieldName != "AdditionalProperties" {
					delete(additionalProperties, fieldName)
				}
			}
		}

		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableHciBaseVm struct {
	value *HciBaseVm
	isSet bool
}

func (v NullableHciBaseVm) Get() *HciBaseVm {
	return v.value
}

func (v *NullableHciBaseVm) Set(val *HciBaseVm) {
	v.value = val
	v.isSet = true
}

func (v NullableHciBaseVm) IsSet() bool {
	return v.isSet
}

func (v *NullableHciBaseVm) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHciBaseVm(val *HciBaseVm) *NullableHciBaseVm {
	return &NullableHciBaseVm{value: val, isSet: true}
}

func (v NullableHciBaseVm) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHciBaseVm) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
