/*
Cisco Intersight

Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations. The Intersight OpenAPI document defines the complete set of properties that are returned in the HTTP response. From that perspective, a client can expect that no additional properties are returned, unless these properties are explicitly defined in the OpenAPI document. However, when a client uses an older version of the Intersight OpenAPI document, the server may send additional properties because the software is more recent than the client. In that case, the client may receive properties that it does not know about. Some generated SDKs perform a strict validation of the HTTP response body against the OpenAPI document.

API version: 1.0.11-14430
Contact: intersight@cisco.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package intersight

import (
	"encoding/json"
	"time"
)

// HyperflexHealthCheckSchedulePolicyAllOf Definition of the list of properties defined in 'hyperflex.HealthCheckSchedulePolicy', excluding properties defined in parent classes.
type HyperflexHealthCheckSchedulePolicyAllOf struct {
	// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.
	ClassId string `json:"ClassId"`
	// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
	ObjectType string `json:"ObjectType"`
	// The date and time when this HealthCheck Policy was last enabled.
	LastScheduledOn *time.Time `json:"LastScheduledOn,omitempty"`
	// The date and time when this HealthCheck Policy was last disabled.
	LastUnscheduledOn *time.Time `json:"LastUnscheduledOn,omitempty"`
	// The date and time when the next health check execution is expected.
	NextExpectedExecution *time.Time `json:"NextExpectedExecution,omitempty"`
	// Indicates whether HealthCheck schedule policy is enabled on the HyperFlex cluster.
	PolicyEnabled *bool `json:"PolicyEnabled,omitempty"`
	// The frequency at which the health checks are run on the HyperFlex cluster. * `86400` - Execute the health check every 24 hours. * `43200` - Execute the health check every 12 hours. * `21600` - Execute the health check every 6 hours. * `10800` - Execute the health check every 3 hours. * `3600` - Execute the health check every 1 hours. * `300` - Execute the health check every 5 minutes. * `0` - Disable the continuous health check.
	ScheduleInterval *int32 `json:"ScheduleInterval,omitempty"`
	// The unique identifier of the health check policy.
	Uuid                 *string                              `json:"Uuid,omitempty"`
	RegisteredDevice     *AssetDeviceRegistrationRelationship `json:"RegisteredDevice,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _HyperflexHealthCheckSchedulePolicyAllOf HyperflexHealthCheckSchedulePolicyAllOf

// NewHyperflexHealthCheckSchedulePolicyAllOf instantiates a new HyperflexHealthCheckSchedulePolicyAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHyperflexHealthCheckSchedulePolicyAllOf(classId string, objectType string) *HyperflexHealthCheckSchedulePolicyAllOf {
	this := HyperflexHealthCheckSchedulePolicyAllOf{}
	this.ClassId = classId
	this.ObjectType = objectType
	var scheduleInterval int32 = 86400
	this.ScheduleInterval = &scheduleInterval
	return &this
}

// NewHyperflexHealthCheckSchedulePolicyAllOfWithDefaults instantiates a new HyperflexHealthCheckSchedulePolicyAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHyperflexHealthCheckSchedulePolicyAllOfWithDefaults() *HyperflexHealthCheckSchedulePolicyAllOf {
	this := HyperflexHealthCheckSchedulePolicyAllOf{}
	var classId string = "hyperflex.HealthCheckSchedulePolicy"
	this.ClassId = classId
	var objectType string = "hyperflex.HealthCheckSchedulePolicy"
	this.ObjectType = objectType
	var scheduleInterval int32 = 86400
	this.ScheduleInterval = &scheduleInterval
	return &this
}

// GetClassId returns the ClassId field value
func (o *HyperflexHealthCheckSchedulePolicyAllOf) GetClassId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ClassId
}

// GetClassIdOk returns a tuple with the ClassId field value
// and a boolean to check if the value has been set.
func (o *HyperflexHealthCheckSchedulePolicyAllOf) GetClassIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ClassId, true
}

// SetClassId sets field value
func (o *HyperflexHealthCheckSchedulePolicyAllOf) SetClassId(v string) {
	o.ClassId = v
}

// GetObjectType returns the ObjectType field value
func (o *HyperflexHealthCheckSchedulePolicyAllOf) GetObjectType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ObjectType
}

// GetObjectTypeOk returns a tuple with the ObjectType field value
// and a boolean to check if the value has been set.
func (o *HyperflexHealthCheckSchedulePolicyAllOf) GetObjectTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ObjectType, true
}

// SetObjectType sets field value
func (o *HyperflexHealthCheckSchedulePolicyAllOf) SetObjectType(v string) {
	o.ObjectType = v
}

// GetLastScheduledOn returns the LastScheduledOn field value if set, zero value otherwise.
func (o *HyperflexHealthCheckSchedulePolicyAllOf) GetLastScheduledOn() time.Time {
	if o == nil || o.LastScheduledOn == nil {
		var ret time.Time
		return ret
	}
	return *o.LastScheduledOn
}

// GetLastScheduledOnOk returns a tuple with the LastScheduledOn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HyperflexHealthCheckSchedulePolicyAllOf) GetLastScheduledOnOk() (*time.Time, bool) {
	if o == nil || o.LastScheduledOn == nil {
		return nil, false
	}
	return o.LastScheduledOn, true
}

// HasLastScheduledOn returns a boolean if a field has been set.
func (o *HyperflexHealthCheckSchedulePolicyAllOf) HasLastScheduledOn() bool {
	if o != nil && o.LastScheduledOn != nil {
		return true
	}

	return false
}

// SetLastScheduledOn gets a reference to the given time.Time and assigns it to the LastScheduledOn field.
func (o *HyperflexHealthCheckSchedulePolicyAllOf) SetLastScheduledOn(v time.Time) {
	o.LastScheduledOn = &v
}

// GetLastUnscheduledOn returns the LastUnscheduledOn field value if set, zero value otherwise.
func (o *HyperflexHealthCheckSchedulePolicyAllOf) GetLastUnscheduledOn() time.Time {
	if o == nil || o.LastUnscheduledOn == nil {
		var ret time.Time
		return ret
	}
	return *o.LastUnscheduledOn
}

// GetLastUnscheduledOnOk returns a tuple with the LastUnscheduledOn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HyperflexHealthCheckSchedulePolicyAllOf) GetLastUnscheduledOnOk() (*time.Time, bool) {
	if o == nil || o.LastUnscheduledOn == nil {
		return nil, false
	}
	return o.LastUnscheduledOn, true
}

// HasLastUnscheduledOn returns a boolean if a field has been set.
func (o *HyperflexHealthCheckSchedulePolicyAllOf) HasLastUnscheduledOn() bool {
	if o != nil && o.LastUnscheduledOn != nil {
		return true
	}

	return false
}

// SetLastUnscheduledOn gets a reference to the given time.Time and assigns it to the LastUnscheduledOn field.
func (o *HyperflexHealthCheckSchedulePolicyAllOf) SetLastUnscheduledOn(v time.Time) {
	o.LastUnscheduledOn = &v
}

// GetNextExpectedExecution returns the NextExpectedExecution field value if set, zero value otherwise.
func (o *HyperflexHealthCheckSchedulePolicyAllOf) GetNextExpectedExecution() time.Time {
	if o == nil || o.NextExpectedExecution == nil {
		var ret time.Time
		return ret
	}
	return *o.NextExpectedExecution
}

// GetNextExpectedExecutionOk returns a tuple with the NextExpectedExecution field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HyperflexHealthCheckSchedulePolicyAllOf) GetNextExpectedExecutionOk() (*time.Time, bool) {
	if o == nil || o.NextExpectedExecution == nil {
		return nil, false
	}
	return o.NextExpectedExecution, true
}

// HasNextExpectedExecution returns a boolean if a field has been set.
func (o *HyperflexHealthCheckSchedulePolicyAllOf) HasNextExpectedExecution() bool {
	if o != nil && o.NextExpectedExecution != nil {
		return true
	}

	return false
}

// SetNextExpectedExecution gets a reference to the given time.Time and assigns it to the NextExpectedExecution field.
func (o *HyperflexHealthCheckSchedulePolicyAllOf) SetNextExpectedExecution(v time.Time) {
	o.NextExpectedExecution = &v
}

// GetPolicyEnabled returns the PolicyEnabled field value if set, zero value otherwise.
func (o *HyperflexHealthCheckSchedulePolicyAllOf) GetPolicyEnabled() bool {
	if o == nil || o.PolicyEnabled == nil {
		var ret bool
		return ret
	}
	return *o.PolicyEnabled
}

// GetPolicyEnabledOk returns a tuple with the PolicyEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HyperflexHealthCheckSchedulePolicyAllOf) GetPolicyEnabledOk() (*bool, bool) {
	if o == nil || o.PolicyEnabled == nil {
		return nil, false
	}
	return o.PolicyEnabled, true
}

// HasPolicyEnabled returns a boolean if a field has been set.
func (o *HyperflexHealthCheckSchedulePolicyAllOf) HasPolicyEnabled() bool {
	if o != nil && o.PolicyEnabled != nil {
		return true
	}

	return false
}

// SetPolicyEnabled gets a reference to the given bool and assigns it to the PolicyEnabled field.
func (o *HyperflexHealthCheckSchedulePolicyAllOf) SetPolicyEnabled(v bool) {
	o.PolicyEnabled = &v
}

// GetScheduleInterval returns the ScheduleInterval field value if set, zero value otherwise.
func (o *HyperflexHealthCheckSchedulePolicyAllOf) GetScheduleInterval() int32 {
	if o == nil || o.ScheduleInterval == nil {
		var ret int32
		return ret
	}
	return *o.ScheduleInterval
}

// GetScheduleIntervalOk returns a tuple with the ScheduleInterval field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HyperflexHealthCheckSchedulePolicyAllOf) GetScheduleIntervalOk() (*int32, bool) {
	if o == nil || o.ScheduleInterval == nil {
		return nil, false
	}
	return o.ScheduleInterval, true
}

// HasScheduleInterval returns a boolean if a field has been set.
func (o *HyperflexHealthCheckSchedulePolicyAllOf) HasScheduleInterval() bool {
	if o != nil && o.ScheduleInterval != nil {
		return true
	}

	return false
}

// SetScheduleInterval gets a reference to the given int32 and assigns it to the ScheduleInterval field.
func (o *HyperflexHealthCheckSchedulePolicyAllOf) SetScheduleInterval(v int32) {
	o.ScheduleInterval = &v
}

// GetUuid returns the Uuid field value if set, zero value otherwise.
func (o *HyperflexHealthCheckSchedulePolicyAllOf) GetUuid() string {
	if o == nil || o.Uuid == nil {
		var ret string
		return ret
	}
	return *o.Uuid
}

// GetUuidOk returns a tuple with the Uuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HyperflexHealthCheckSchedulePolicyAllOf) GetUuidOk() (*string, bool) {
	if o == nil || o.Uuid == nil {
		return nil, false
	}
	return o.Uuid, true
}

// HasUuid returns a boolean if a field has been set.
func (o *HyperflexHealthCheckSchedulePolicyAllOf) HasUuid() bool {
	if o != nil && o.Uuid != nil {
		return true
	}

	return false
}

// SetUuid gets a reference to the given string and assigns it to the Uuid field.
func (o *HyperflexHealthCheckSchedulePolicyAllOf) SetUuid(v string) {
	o.Uuid = &v
}

// GetRegisteredDevice returns the RegisteredDevice field value if set, zero value otherwise.
func (o *HyperflexHealthCheckSchedulePolicyAllOf) GetRegisteredDevice() AssetDeviceRegistrationRelationship {
	if o == nil || o.RegisteredDevice == nil {
		var ret AssetDeviceRegistrationRelationship
		return ret
	}
	return *o.RegisteredDevice
}

// GetRegisteredDeviceOk returns a tuple with the RegisteredDevice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HyperflexHealthCheckSchedulePolicyAllOf) GetRegisteredDeviceOk() (*AssetDeviceRegistrationRelationship, bool) {
	if o == nil || o.RegisteredDevice == nil {
		return nil, false
	}
	return o.RegisteredDevice, true
}

// HasRegisteredDevice returns a boolean if a field has been set.
func (o *HyperflexHealthCheckSchedulePolicyAllOf) HasRegisteredDevice() bool {
	if o != nil && o.RegisteredDevice != nil {
		return true
	}

	return false
}

// SetRegisteredDevice gets a reference to the given AssetDeviceRegistrationRelationship and assigns it to the RegisteredDevice field.
func (o *HyperflexHealthCheckSchedulePolicyAllOf) SetRegisteredDevice(v AssetDeviceRegistrationRelationship) {
	o.RegisteredDevice = &v
}

func (o HyperflexHealthCheckSchedulePolicyAllOf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["ClassId"] = o.ClassId
	}
	if true {
		toSerialize["ObjectType"] = o.ObjectType
	}
	if o.LastScheduledOn != nil {
		toSerialize["LastScheduledOn"] = o.LastScheduledOn
	}
	if o.LastUnscheduledOn != nil {
		toSerialize["LastUnscheduledOn"] = o.LastUnscheduledOn
	}
	if o.NextExpectedExecution != nil {
		toSerialize["NextExpectedExecution"] = o.NextExpectedExecution
	}
	if o.PolicyEnabled != nil {
		toSerialize["PolicyEnabled"] = o.PolicyEnabled
	}
	if o.ScheduleInterval != nil {
		toSerialize["ScheduleInterval"] = o.ScheduleInterval
	}
	if o.Uuid != nil {
		toSerialize["Uuid"] = o.Uuid
	}
	if o.RegisteredDevice != nil {
		toSerialize["RegisteredDevice"] = o.RegisteredDevice
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *HyperflexHealthCheckSchedulePolicyAllOf) UnmarshalJSON(bytes []byte) (err error) {
	varHyperflexHealthCheckSchedulePolicyAllOf := _HyperflexHealthCheckSchedulePolicyAllOf{}

	if err = json.Unmarshal(bytes, &varHyperflexHealthCheckSchedulePolicyAllOf); err == nil {
		*o = HyperflexHealthCheckSchedulePolicyAllOf(varHyperflexHealthCheckSchedulePolicyAllOf)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "ClassId")
		delete(additionalProperties, "ObjectType")
		delete(additionalProperties, "LastScheduledOn")
		delete(additionalProperties, "LastUnscheduledOn")
		delete(additionalProperties, "NextExpectedExecution")
		delete(additionalProperties, "PolicyEnabled")
		delete(additionalProperties, "ScheduleInterval")
		delete(additionalProperties, "Uuid")
		delete(additionalProperties, "RegisteredDevice")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableHyperflexHealthCheckSchedulePolicyAllOf struct {
	value *HyperflexHealthCheckSchedulePolicyAllOf
	isSet bool
}

func (v NullableHyperflexHealthCheckSchedulePolicyAllOf) Get() *HyperflexHealthCheckSchedulePolicyAllOf {
	return v.value
}

func (v *NullableHyperflexHealthCheckSchedulePolicyAllOf) Set(val *HyperflexHealthCheckSchedulePolicyAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableHyperflexHealthCheckSchedulePolicyAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableHyperflexHealthCheckSchedulePolicyAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHyperflexHealthCheckSchedulePolicyAllOf(val *HyperflexHealthCheckSchedulePolicyAllOf) *NullableHyperflexHealthCheckSchedulePolicyAllOf {
	return &NullableHyperflexHealthCheckSchedulePolicyAllOf{value: val, isSet: true}
}

func (v NullableHyperflexHealthCheckSchedulePolicyAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHyperflexHealthCheckSchedulePolicyAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
