/*
Cisco Intersight

Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations. The Intersight OpenAPI document defines the complete set of properties that are returned in the HTTP response. From that perspective, a client can expect that no additional properties are returned, unless these properties are explicitly defined in the OpenAPI document. However, when a client uses an older version of the Intersight OpenAPI document, the server may send additional properties because the software is more recent than the client. In that case, the client may receive properties that it does not know about. Some generated SDKs perform a strict validation of the HTTP response body against the OpenAPI document.

API version: 1.0.11-18775
Contact: intersight@cisco.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package intersight

import (
	"encoding/json"
	"fmt"
	"reflect"
	"strings"
)

// checks if the NetworkVfc type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NetworkVfc{}

// NetworkVfc Vfc configured on a Fabric Interconnect.
type NetworkVfc struct {
	InventoryBase
	// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.
	ClassId string `json:"ClassId"`
	// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
	ObjectType string `json:"ObjectType"`
	// Port or PortChannel interface configured for Vfcs virtual etherent interface.
	BoundInterfaceDn *string `json:"BoundInterfaceDn,omitempty"`
	// Burst defined on QoS policy.
	Burst *int64 `json:"Burst,omitempty"`
	// Description for the vHBA.
	Description *string `json:"Description,omitempty"`
	// Operational Reason of the Vfcs Vethernet on the Fabric Interconnect. When the operational state is down, Operreason indicates the reason why the vHBA is not operational. Some common reasons are admindown, error disabled.
	OperReason *string `json:"OperReason,omitempty"`
	// The operational state of the Vfcs Vethernet peer of a vNIC in Intersight Managed Mode. This state is updated by events from Fabric Interconnect or by periodic updates from Fabric Interconnect. When a Fabric Interconnect is not connected to Intersight or if the Fabric Interconnect is powered down, this property will not be updated. * `unknown` - The operational state of the Vethernet is not known. * `adminDown` - The operational state of the Vethernet is admin down. * `up` - The operational state of the Vethernet is Up. * `down` - The operational state of the Vethernet is Down. * `noLicense` - The operational state of the Vethernet is no license. * `linkUp` - The operational state of the Vethernet is link up. * `hardwareFailure` - The operational state of the Vethernet is hardware failure. * `softwareFailure` - The operational state of the Vethernet is software failure. * `errorDisabled` - The operational state of the Vethernet is error disabled. * `linkDown` - The operational state of the Vethernet is link down. * `sfpNotPresent` - The operational state of the Vethernet is SFP not present. * `udldAggrDown` - The operational state of the Vethernet is UDLD aggregate down.
	OperState *string `json:"OperState,omitempty"`
	// Uplink port or portchannel pinned to a Vfc.
	PinnedInterfaceDn *string `json:"PinnedInterfaceDn,omitempty"`
	// Rate limit defined on QoS policy.
	Ratelimit *int64 `json:"Ratelimit,omitempty"`
	// Vfc Identifier on a Fabric Interconnect.
	VfcId                  *int64                                      `json:"VfcId,omitempty"`
	AdapterHostFcInterface NullableAdapterHostFcInterfaceRelationship  `json:"AdapterHostFcInterface,omitempty"`
	BoundInterface         NullableInventoryInterfaceRelationship      `json:"BoundInterface,omitempty"`
	NetworkElement         NullableNetworkElementRelationship          `json:"NetworkElement,omitempty"`
	PinnedInterface        NullableInventoryInterfaceRelationship      `json:"PinnedInterface,omitempty"`
	RegisteredDevice       NullableAssetDeviceRegistrationRelationship `json:"RegisteredDevice,omitempty"`
	AdditionalProperties   map[string]interface{}
}

type _NetworkVfc NetworkVfc

// NewNetworkVfc instantiates a new NetworkVfc object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNetworkVfc(classId string, objectType string) *NetworkVfc {
	this := NetworkVfc{}
	this.ClassId = classId
	this.ObjectType = objectType
	return &this
}

// NewNetworkVfcWithDefaults instantiates a new NetworkVfc object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNetworkVfcWithDefaults() *NetworkVfc {
	this := NetworkVfc{}
	var classId string = "network.Vfc"
	this.ClassId = classId
	var objectType string = "network.Vfc"
	this.ObjectType = objectType
	return &this
}

// GetClassId returns the ClassId field value
func (o *NetworkVfc) GetClassId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ClassId
}

// GetClassIdOk returns a tuple with the ClassId field value
// and a boolean to check if the value has been set.
func (o *NetworkVfc) GetClassIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ClassId, true
}

// SetClassId sets field value
func (o *NetworkVfc) SetClassId(v string) {
	o.ClassId = v
}

// GetDefaultClassId returns the default value "network.Vfc" of the ClassId field.
func (o *NetworkVfc) GetDefaultClassId() interface{} {
	return "network.Vfc"
}

// GetObjectType returns the ObjectType field value
func (o *NetworkVfc) GetObjectType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ObjectType
}

// GetObjectTypeOk returns a tuple with the ObjectType field value
// and a boolean to check if the value has been set.
func (o *NetworkVfc) GetObjectTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ObjectType, true
}

// SetObjectType sets field value
func (o *NetworkVfc) SetObjectType(v string) {
	o.ObjectType = v
}

// GetDefaultObjectType returns the default value "network.Vfc" of the ObjectType field.
func (o *NetworkVfc) GetDefaultObjectType() interface{} {
	return "network.Vfc"
}

// GetBoundInterfaceDn returns the BoundInterfaceDn field value if set, zero value otherwise.
func (o *NetworkVfc) GetBoundInterfaceDn() string {
	if o == nil || IsNil(o.BoundInterfaceDn) {
		var ret string
		return ret
	}
	return *o.BoundInterfaceDn
}

// GetBoundInterfaceDnOk returns a tuple with the BoundInterfaceDn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkVfc) GetBoundInterfaceDnOk() (*string, bool) {
	if o == nil || IsNil(o.BoundInterfaceDn) {
		return nil, false
	}
	return o.BoundInterfaceDn, true
}

// HasBoundInterfaceDn returns a boolean if a field has been set.
func (o *NetworkVfc) HasBoundInterfaceDn() bool {
	if o != nil && !IsNil(o.BoundInterfaceDn) {
		return true
	}

	return false
}

// SetBoundInterfaceDn gets a reference to the given string and assigns it to the BoundInterfaceDn field.
func (o *NetworkVfc) SetBoundInterfaceDn(v string) {
	o.BoundInterfaceDn = &v
}

// GetBurst returns the Burst field value if set, zero value otherwise.
func (o *NetworkVfc) GetBurst() int64 {
	if o == nil || IsNil(o.Burst) {
		var ret int64
		return ret
	}
	return *o.Burst
}

// GetBurstOk returns a tuple with the Burst field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkVfc) GetBurstOk() (*int64, bool) {
	if o == nil || IsNil(o.Burst) {
		return nil, false
	}
	return o.Burst, true
}

// HasBurst returns a boolean if a field has been set.
func (o *NetworkVfc) HasBurst() bool {
	if o != nil && !IsNil(o.Burst) {
		return true
	}

	return false
}

// SetBurst gets a reference to the given int64 and assigns it to the Burst field.
func (o *NetworkVfc) SetBurst(v int64) {
	o.Burst = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *NetworkVfc) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkVfc) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *NetworkVfc) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *NetworkVfc) SetDescription(v string) {
	o.Description = &v
}

// GetOperReason returns the OperReason field value if set, zero value otherwise.
func (o *NetworkVfc) GetOperReason() string {
	if o == nil || IsNil(o.OperReason) {
		var ret string
		return ret
	}
	return *o.OperReason
}

// GetOperReasonOk returns a tuple with the OperReason field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkVfc) GetOperReasonOk() (*string, bool) {
	if o == nil || IsNil(o.OperReason) {
		return nil, false
	}
	return o.OperReason, true
}

// HasOperReason returns a boolean if a field has been set.
func (o *NetworkVfc) HasOperReason() bool {
	if o != nil && !IsNil(o.OperReason) {
		return true
	}

	return false
}

// SetOperReason gets a reference to the given string and assigns it to the OperReason field.
func (o *NetworkVfc) SetOperReason(v string) {
	o.OperReason = &v
}

// GetOperState returns the OperState field value if set, zero value otherwise.
func (o *NetworkVfc) GetOperState() string {
	if o == nil || IsNil(o.OperState) {
		var ret string
		return ret
	}
	return *o.OperState
}

// GetOperStateOk returns a tuple with the OperState field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkVfc) GetOperStateOk() (*string, bool) {
	if o == nil || IsNil(o.OperState) {
		return nil, false
	}
	return o.OperState, true
}

// HasOperState returns a boolean if a field has been set.
func (o *NetworkVfc) HasOperState() bool {
	if o != nil && !IsNil(o.OperState) {
		return true
	}

	return false
}

// SetOperState gets a reference to the given string and assigns it to the OperState field.
func (o *NetworkVfc) SetOperState(v string) {
	o.OperState = &v
}

// GetPinnedInterfaceDn returns the PinnedInterfaceDn field value if set, zero value otherwise.
func (o *NetworkVfc) GetPinnedInterfaceDn() string {
	if o == nil || IsNil(o.PinnedInterfaceDn) {
		var ret string
		return ret
	}
	return *o.PinnedInterfaceDn
}

// GetPinnedInterfaceDnOk returns a tuple with the PinnedInterfaceDn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkVfc) GetPinnedInterfaceDnOk() (*string, bool) {
	if o == nil || IsNil(o.PinnedInterfaceDn) {
		return nil, false
	}
	return o.PinnedInterfaceDn, true
}

// HasPinnedInterfaceDn returns a boolean if a field has been set.
func (o *NetworkVfc) HasPinnedInterfaceDn() bool {
	if o != nil && !IsNil(o.PinnedInterfaceDn) {
		return true
	}

	return false
}

// SetPinnedInterfaceDn gets a reference to the given string and assigns it to the PinnedInterfaceDn field.
func (o *NetworkVfc) SetPinnedInterfaceDn(v string) {
	o.PinnedInterfaceDn = &v
}

// GetRatelimit returns the Ratelimit field value if set, zero value otherwise.
func (o *NetworkVfc) GetRatelimit() int64 {
	if o == nil || IsNil(o.Ratelimit) {
		var ret int64
		return ret
	}
	return *o.Ratelimit
}

// GetRatelimitOk returns a tuple with the Ratelimit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkVfc) GetRatelimitOk() (*int64, bool) {
	if o == nil || IsNil(o.Ratelimit) {
		return nil, false
	}
	return o.Ratelimit, true
}

// HasRatelimit returns a boolean if a field has been set.
func (o *NetworkVfc) HasRatelimit() bool {
	if o != nil && !IsNil(o.Ratelimit) {
		return true
	}

	return false
}

// SetRatelimit gets a reference to the given int64 and assigns it to the Ratelimit field.
func (o *NetworkVfc) SetRatelimit(v int64) {
	o.Ratelimit = &v
}

// GetVfcId returns the VfcId field value if set, zero value otherwise.
func (o *NetworkVfc) GetVfcId() int64 {
	if o == nil || IsNil(o.VfcId) {
		var ret int64
		return ret
	}
	return *o.VfcId
}

// GetVfcIdOk returns a tuple with the VfcId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkVfc) GetVfcIdOk() (*int64, bool) {
	if o == nil || IsNil(o.VfcId) {
		return nil, false
	}
	return o.VfcId, true
}

// HasVfcId returns a boolean if a field has been set.
func (o *NetworkVfc) HasVfcId() bool {
	if o != nil && !IsNil(o.VfcId) {
		return true
	}

	return false
}

// SetVfcId gets a reference to the given int64 and assigns it to the VfcId field.
func (o *NetworkVfc) SetVfcId(v int64) {
	o.VfcId = &v
}

// GetAdapterHostFcInterface returns the AdapterHostFcInterface field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NetworkVfc) GetAdapterHostFcInterface() AdapterHostFcInterfaceRelationship {
	if o == nil || IsNil(o.AdapterHostFcInterface.Get()) {
		var ret AdapterHostFcInterfaceRelationship
		return ret
	}
	return *o.AdapterHostFcInterface.Get()
}

// GetAdapterHostFcInterfaceOk returns a tuple with the AdapterHostFcInterface field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NetworkVfc) GetAdapterHostFcInterfaceOk() (*AdapterHostFcInterfaceRelationship, bool) {
	if o == nil {
		return nil, false
	}
	return o.AdapterHostFcInterface.Get(), o.AdapterHostFcInterface.IsSet()
}

// HasAdapterHostFcInterface returns a boolean if a field has been set.
func (o *NetworkVfc) HasAdapterHostFcInterface() bool {
	if o != nil && o.AdapterHostFcInterface.IsSet() {
		return true
	}

	return false
}

// SetAdapterHostFcInterface gets a reference to the given NullableAdapterHostFcInterfaceRelationship and assigns it to the AdapterHostFcInterface field.
func (o *NetworkVfc) SetAdapterHostFcInterface(v AdapterHostFcInterfaceRelationship) {
	o.AdapterHostFcInterface.Set(&v)
}

// SetAdapterHostFcInterfaceNil sets the value for AdapterHostFcInterface to be an explicit nil
func (o *NetworkVfc) SetAdapterHostFcInterfaceNil() {
	o.AdapterHostFcInterface.Set(nil)
}

// UnsetAdapterHostFcInterface ensures that no value is present for AdapterHostFcInterface, not even an explicit nil
func (o *NetworkVfc) UnsetAdapterHostFcInterface() {
	o.AdapterHostFcInterface.Unset()
}

// GetBoundInterface returns the BoundInterface field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NetworkVfc) GetBoundInterface() InventoryInterfaceRelationship {
	if o == nil || IsNil(o.BoundInterface.Get()) {
		var ret InventoryInterfaceRelationship
		return ret
	}
	return *o.BoundInterface.Get()
}

// GetBoundInterfaceOk returns a tuple with the BoundInterface field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NetworkVfc) GetBoundInterfaceOk() (*InventoryInterfaceRelationship, bool) {
	if o == nil {
		return nil, false
	}
	return o.BoundInterface.Get(), o.BoundInterface.IsSet()
}

// HasBoundInterface returns a boolean if a field has been set.
func (o *NetworkVfc) HasBoundInterface() bool {
	if o != nil && o.BoundInterface.IsSet() {
		return true
	}

	return false
}

// SetBoundInterface gets a reference to the given NullableInventoryInterfaceRelationship and assigns it to the BoundInterface field.
func (o *NetworkVfc) SetBoundInterface(v InventoryInterfaceRelationship) {
	o.BoundInterface.Set(&v)
}

// SetBoundInterfaceNil sets the value for BoundInterface to be an explicit nil
func (o *NetworkVfc) SetBoundInterfaceNil() {
	o.BoundInterface.Set(nil)
}

// UnsetBoundInterface ensures that no value is present for BoundInterface, not even an explicit nil
func (o *NetworkVfc) UnsetBoundInterface() {
	o.BoundInterface.Unset()
}

// GetNetworkElement returns the NetworkElement field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NetworkVfc) GetNetworkElement() NetworkElementRelationship {
	if o == nil || IsNil(o.NetworkElement.Get()) {
		var ret NetworkElementRelationship
		return ret
	}
	return *o.NetworkElement.Get()
}

// GetNetworkElementOk returns a tuple with the NetworkElement field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NetworkVfc) GetNetworkElementOk() (*NetworkElementRelationship, bool) {
	if o == nil {
		return nil, false
	}
	return o.NetworkElement.Get(), o.NetworkElement.IsSet()
}

// HasNetworkElement returns a boolean if a field has been set.
func (o *NetworkVfc) HasNetworkElement() bool {
	if o != nil && o.NetworkElement.IsSet() {
		return true
	}

	return false
}

// SetNetworkElement gets a reference to the given NullableNetworkElementRelationship and assigns it to the NetworkElement field.
func (o *NetworkVfc) SetNetworkElement(v NetworkElementRelationship) {
	o.NetworkElement.Set(&v)
}

// SetNetworkElementNil sets the value for NetworkElement to be an explicit nil
func (o *NetworkVfc) SetNetworkElementNil() {
	o.NetworkElement.Set(nil)
}

// UnsetNetworkElement ensures that no value is present for NetworkElement, not even an explicit nil
func (o *NetworkVfc) UnsetNetworkElement() {
	o.NetworkElement.Unset()
}

// GetPinnedInterface returns the PinnedInterface field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NetworkVfc) GetPinnedInterface() InventoryInterfaceRelationship {
	if o == nil || IsNil(o.PinnedInterface.Get()) {
		var ret InventoryInterfaceRelationship
		return ret
	}
	return *o.PinnedInterface.Get()
}

// GetPinnedInterfaceOk returns a tuple with the PinnedInterface field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NetworkVfc) GetPinnedInterfaceOk() (*InventoryInterfaceRelationship, bool) {
	if o == nil {
		return nil, false
	}
	return o.PinnedInterface.Get(), o.PinnedInterface.IsSet()
}

// HasPinnedInterface returns a boolean if a field has been set.
func (o *NetworkVfc) HasPinnedInterface() bool {
	if o != nil && o.PinnedInterface.IsSet() {
		return true
	}

	return false
}

// SetPinnedInterface gets a reference to the given NullableInventoryInterfaceRelationship and assigns it to the PinnedInterface field.
func (o *NetworkVfc) SetPinnedInterface(v InventoryInterfaceRelationship) {
	o.PinnedInterface.Set(&v)
}

// SetPinnedInterfaceNil sets the value for PinnedInterface to be an explicit nil
func (o *NetworkVfc) SetPinnedInterfaceNil() {
	o.PinnedInterface.Set(nil)
}

// UnsetPinnedInterface ensures that no value is present for PinnedInterface, not even an explicit nil
func (o *NetworkVfc) UnsetPinnedInterface() {
	o.PinnedInterface.Unset()
}

// GetRegisteredDevice returns the RegisteredDevice field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NetworkVfc) GetRegisteredDevice() AssetDeviceRegistrationRelationship {
	if o == nil || IsNil(o.RegisteredDevice.Get()) {
		var ret AssetDeviceRegistrationRelationship
		return ret
	}
	return *o.RegisteredDevice.Get()
}

// GetRegisteredDeviceOk returns a tuple with the RegisteredDevice field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NetworkVfc) GetRegisteredDeviceOk() (*AssetDeviceRegistrationRelationship, bool) {
	if o == nil {
		return nil, false
	}
	return o.RegisteredDevice.Get(), o.RegisteredDevice.IsSet()
}

// HasRegisteredDevice returns a boolean if a field has been set.
func (o *NetworkVfc) HasRegisteredDevice() bool {
	if o != nil && o.RegisteredDevice.IsSet() {
		return true
	}

	return false
}

// SetRegisteredDevice gets a reference to the given NullableAssetDeviceRegistrationRelationship and assigns it to the RegisteredDevice field.
func (o *NetworkVfc) SetRegisteredDevice(v AssetDeviceRegistrationRelationship) {
	o.RegisteredDevice.Set(&v)
}

// SetRegisteredDeviceNil sets the value for RegisteredDevice to be an explicit nil
func (o *NetworkVfc) SetRegisteredDeviceNil() {
	o.RegisteredDevice.Set(nil)
}

// UnsetRegisteredDevice ensures that no value is present for RegisteredDevice, not even an explicit nil
func (o *NetworkVfc) UnsetRegisteredDevice() {
	o.RegisteredDevice.Unset()
}

func (o NetworkVfc) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NetworkVfc) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	serializedInventoryBase, errInventoryBase := json.Marshal(o.InventoryBase)
	if errInventoryBase != nil {
		return map[string]interface{}{}, errInventoryBase
	}
	errInventoryBase = json.Unmarshal([]byte(serializedInventoryBase), &toSerialize)
	if errInventoryBase != nil {
		return map[string]interface{}{}, errInventoryBase
	}
	if _, exists := toSerialize["ClassId"]; !exists {
		toSerialize["ClassId"] = o.GetDefaultClassId()
	}
	toSerialize["ClassId"] = o.ClassId
	if _, exists := toSerialize["ObjectType"]; !exists {
		toSerialize["ObjectType"] = o.GetDefaultObjectType()
	}
	toSerialize["ObjectType"] = o.ObjectType
	if !IsNil(o.BoundInterfaceDn) {
		toSerialize["BoundInterfaceDn"] = o.BoundInterfaceDn
	}
	if !IsNil(o.Burst) {
		toSerialize["Burst"] = o.Burst
	}
	if !IsNil(o.Description) {
		toSerialize["Description"] = o.Description
	}
	if !IsNil(o.OperReason) {
		toSerialize["OperReason"] = o.OperReason
	}
	if !IsNil(o.OperState) {
		toSerialize["OperState"] = o.OperState
	}
	if !IsNil(o.PinnedInterfaceDn) {
		toSerialize["PinnedInterfaceDn"] = o.PinnedInterfaceDn
	}
	if !IsNil(o.Ratelimit) {
		toSerialize["Ratelimit"] = o.Ratelimit
	}
	if !IsNil(o.VfcId) {
		toSerialize["VfcId"] = o.VfcId
	}
	if o.AdapterHostFcInterface.IsSet() {
		toSerialize["AdapterHostFcInterface"] = o.AdapterHostFcInterface.Get()
	}
	if o.BoundInterface.IsSet() {
		toSerialize["BoundInterface"] = o.BoundInterface.Get()
	}
	if o.NetworkElement.IsSet() {
		toSerialize["NetworkElement"] = o.NetworkElement.Get()
	}
	if o.PinnedInterface.IsSet() {
		toSerialize["PinnedInterface"] = o.PinnedInterface.Get()
	}
	if o.RegisteredDevice.IsSet() {
		toSerialize["RegisteredDevice"] = o.RegisteredDevice.Get()
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *NetworkVfc) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"ClassId",
		"ObjectType",
	}

	// defaultValueFuncMap captures the default values for required properties.
	// These values are used when required properties are missing from the payload.
	defaultValueFuncMap := map[string]func() interface{}{
		"ClassId":    o.GetDefaultClassId,
		"ObjectType": o.GetDefaultObjectType,
	}
	var defaultValueApplied bool
	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			if _, ok := defaultValueFuncMap[requiredProperty]; ok {
				allProperties[requiredProperty] = defaultValueFuncMap[requiredProperty]()
				defaultValueApplied = true
			}
		}
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	if defaultValueApplied {
		data, err = json.Marshal(allProperties)
		if err != nil {
			return err
		}
	}
	type NetworkVfcWithoutEmbeddedStruct struct {
		// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.
		ClassId string `json:"ClassId"`
		// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
		ObjectType string `json:"ObjectType"`
		// Port or PortChannel interface configured for Vfcs virtual etherent interface.
		BoundInterfaceDn *string `json:"BoundInterfaceDn,omitempty"`
		// Burst defined on QoS policy.
		Burst *int64 `json:"Burst,omitempty"`
		// Description for the vHBA.
		Description *string `json:"Description,omitempty"`
		// Operational Reason of the Vfcs Vethernet on the Fabric Interconnect. When the operational state is down, Operreason indicates the reason why the vHBA is not operational. Some common reasons are admindown, error disabled.
		OperReason *string `json:"OperReason,omitempty"`
		// The operational state of the Vfcs Vethernet peer of a vNIC in Intersight Managed Mode. This state is updated by events from Fabric Interconnect or by periodic updates from Fabric Interconnect. When a Fabric Interconnect is not connected to Intersight or if the Fabric Interconnect is powered down, this property will not be updated. * `unknown` - The operational state of the Vethernet is not known. * `adminDown` - The operational state of the Vethernet is admin down. * `up` - The operational state of the Vethernet is Up. * `down` - The operational state of the Vethernet is Down. * `noLicense` - The operational state of the Vethernet is no license. * `linkUp` - The operational state of the Vethernet is link up. * `hardwareFailure` - The operational state of the Vethernet is hardware failure. * `softwareFailure` - The operational state of the Vethernet is software failure. * `errorDisabled` - The operational state of the Vethernet is error disabled. * `linkDown` - The operational state of the Vethernet is link down. * `sfpNotPresent` - The operational state of the Vethernet is SFP not present. * `udldAggrDown` - The operational state of the Vethernet is UDLD aggregate down.
		OperState *string `json:"OperState,omitempty"`
		// Uplink port or portchannel pinned to a Vfc.
		PinnedInterfaceDn *string `json:"PinnedInterfaceDn,omitempty"`
		// Rate limit defined on QoS policy.
		Ratelimit *int64 `json:"Ratelimit,omitempty"`
		// Vfc Identifier on a Fabric Interconnect.
		VfcId                  *int64                                      `json:"VfcId,omitempty"`
		AdapterHostFcInterface NullableAdapterHostFcInterfaceRelationship  `json:"AdapterHostFcInterface,omitempty"`
		BoundInterface         NullableInventoryInterfaceRelationship      `json:"BoundInterface,omitempty"`
		NetworkElement         NullableNetworkElementRelationship          `json:"NetworkElement,omitempty"`
		PinnedInterface        NullableInventoryInterfaceRelationship      `json:"PinnedInterface,omitempty"`
		RegisteredDevice       NullableAssetDeviceRegistrationRelationship `json:"RegisteredDevice,omitempty"`
	}

	varNetworkVfcWithoutEmbeddedStruct := NetworkVfcWithoutEmbeddedStruct{}

	err = json.Unmarshal(data, &varNetworkVfcWithoutEmbeddedStruct)
	if err == nil {
		varNetworkVfc := _NetworkVfc{}
		varNetworkVfc.ClassId = varNetworkVfcWithoutEmbeddedStruct.ClassId
		varNetworkVfc.ObjectType = varNetworkVfcWithoutEmbeddedStruct.ObjectType
		varNetworkVfc.BoundInterfaceDn = varNetworkVfcWithoutEmbeddedStruct.BoundInterfaceDn
		varNetworkVfc.Burst = varNetworkVfcWithoutEmbeddedStruct.Burst
		varNetworkVfc.Description = varNetworkVfcWithoutEmbeddedStruct.Description
		varNetworkVfc.OperReason = varNetworkVfcWithoutEmbeddedStruct.OperReason
		varNetworkVfc.OperState = varNetworkVfcWithoutEmbeddedStruct.OperState
		varNetworkVfc.PinnedInterfaceDn = varNetworkVfcWithoutEmbeddedStruct.PinnedInterfaceDn
		varNetworkVfc.Ratelimit = varNetworkVfcWithoutEmbeddedStruct.Ratelimit
		varNetworkVfc.VfcId = varNetworkVfcWithoutEmbeddedStruct.VfcId
		varNetworkVfc.AdapterHostFcInterface = varNetworkVfcWithoutEmbeddedStruct.AdapterHostFcInterface
		varNetworkVfc.BoundInterface = varNetworkVfcWithoutEmbeddedStruct.BoundInterface
		varNetworkVfc.NetworkElement = varNetworkVfcWithoutEmbeddedStruct.NetworkElement
		varNetworkVfc.PinnedInterface = varNetworkVfcWithoutEmbeddedStruct.PinnedInterface
		varNetworkVfc.RegisteredDevice = varNetworkVfcWithoutEmbeddedStruct.RegisteredDevice
		*o = NetworkVfc(varNetworkVfc)
	} else {
		return err
	}

	varNetworkVfc := _NetworkVfc{}

	err = json.Unmarshal(data, &varNetworkVfc)
	if err == nil {
		o.InventoryBase = varNetworkVfc.InventoryBase
	} else {
		return err
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "ClassId")
		delete(additionalProperties, "ObjectType")
		delete(additionalProperties, "BoundInterfaceDn")
		delete(additionalProperties, "Burst")
		delete(additionalProperties, "Description")
		delete(additionalProperties, "OperReason")
		delete(additionalProperties, "OperState")
		delete(additionalProperties, "PinnedInterfaceDn")
		delete(additionalProperties, "Ratelimit")
		delete(additionalProperties, "VfcId")
		delete(additionalProperties, "AdapterHostFcInterface")
		delete(additionalProperties, "BoundInterface")
		delete(additionalProperties, "NetworkElement")
		delete(additionalProperties, "PinnedInterface")
		delete(additionalProperties, "RegisteredDevice")

		// remove fields from embedded structs
		reflectInventoryBase := reflect.ValueOf(o.InventoryBase)
		for i := 0; i < reflectInventoryBase.Type().NumField(); i++ {
			t := reflectInventoryBase.Type().Field(i)

			if jsonTag := t.Tag.Get("json"); jsonTag != "" {
				fieldName := ""
				if commaIdx := strings.Index(jsonTag, ","); commaIdx > 0 {
					fieldName = jsonTag[:commaIdx]
				} else {
					fieldName = jsonTag
				}
				if fieldName != "AdditionalProperties" {
					delete(additionalProperties, fieldName)
				}
			}
		}

		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableNetworkVfc struct {
	value *NetworkVfc
	isSet bool
}

func (v NullableNetworkVfc) Get() *NetworkVfc {
	return v.value
}

func (v *NullableNetworkVfc) Set(val *NetworkVfc) {
	v.value = val
	v.isSet = true
}

func (v NullableNetworkVfc) IsSet() bool {
	return v.isSet
}

func (v *NullableNetworkVfc) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNetworkVfc(val *NetworkVfc) *NullableNetworkVfc {
	return &NullableNetworkVfc{value: val, isSet: true}
}

func (v NullableNetworkVfc) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNetworkVfc) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
