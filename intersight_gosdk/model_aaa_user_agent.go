/*
Cisco Intersight

Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations. The Intersight OpenAPI document defines the complete set of properties that are returned in the HTTP response. From that perspective, a client can expect that no additional properties are returned, unless these properties are explicitly defined in the OpenAPI document. However, when a client uses an older version of the Intersight OpenAPI document, the server may send additional properties because the software is more recent than the client. In that case, the client may receive properties that it does not know about. Some generated SDKs perform a strict validation of the HTTP response body against the OpenAPI document.

API version: 1.0.11-2024100405
Contact: intersight@cisco.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package intersight

import (
	"encoding/json"
	"fmt"
	"reflect"
	"strings"
)

// checks if the AaaUserAgent type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AaaUserAgent{}

// AaaUserAgent A user agent of an API request. The user agent has information about the operating system family and version that initiated the request. The user agent also has information about the software client that made the request which includes the software type (browser, SDK, etc.) and version.
type AaaUserAgent struct {
	MoBaseComplexType
	// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.
	ClassId string `json:"ClassId"`
	// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
	ObjectType string `json:"ObjectType"`
	// The type of operating system that sent the request. Not applicable to Intersight SDK requests.
	OsFamily *string `json:"OsFamily,omitempty"`
	// The version of the operating system that sent the request. Not applicable for Intersight SDK requests.
	OsVersion *string `json:"OsVersion,omitempty"`
	// The type of client that made the request. For browser requests, it is the specific browser that made the request (e.g. Chrome, Firefox, etc.).
	SoftwareFamily *string `json:"SoftwareFamily,omitempty"`
	// The subtype of software that made the request. For SDK requests, this is the programming language used in the SDK. For browser requests, this provides additional context on the client (e.g. if the client is running on a mobile device).
	SoftwareSubtype *string `json:"SoftwareSubtype,omitempty"`
	// The type of application that made the request. This can be a browser or some other software, such as an SDK.
	SoftwareType *string `json:"SoftwareType,omitempty"`
	// The version of the client that made the request.
	SoftwareVersion      *string `json:"SoftwareVersion,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _AaaUserAgent AaaUserAgent

// NewAaaUserAgent instantiates a new AaaUserAgent object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAaaUserAgent(classId string, objectType string) *AaaUserAgent {
	this := AaaUserAgent{}
	this.ClassId = classId
	this.ObjectType = objectType
	return &this
}

// NewAaaUserAgentWithDefaults instantiates a new AaaUserAgent object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAaaUserAgentWithDefaults() *AaaUserAgent {
	this := AaaUserAgent{}
	var classId string = "aaa.UserAgent"
	this.ClassId = classId
	var objectType string = "aaa.UserAgent"
	this.ObjectType = objectType
	return &this
}

// GetClassId returns the ClassId field value
func (o *AaaUserAgent) GetClassId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ClassId
}

// GetClassIdOk returns a tuple with the ClassId field value
// and a boolean to check if the value has been set.
func (o *AaaUserAgent) GetClassIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ClassId, true
}

// SetClassId sets field value
func (o *AaaUserAgent) SetClassId(v string) {
	o.ClassId = v
}

// GetDefaultClassId returns the default value "aaa.UserAgent" of the ClassId field.
func (o *AaaUserAgent) GetDefaultClassId() interface{} {
	return "aaa.UserAgent"
}

// GetObjectType returns the ObjectType field value
func (o *AaaUserAgent) GetObjectType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ObjectType
}

// GetObjectTypeOk returns a tuple with the ObjectType field value
// and a boolean to check if the value has been set.
func (o *AaaUserAgent) GetObjectTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ObjectType, true
}

// SetObjectType sets field value
func (o *AaaUserAgent) SetObjectType(v string) {
	o.ObjectType = v
}

// GetDefaultObjectType returns the default value "aaa.UserAgent" of the ObjectType field.
func (o *AaaUserAgent) GetDefaultObjectType() interface{} {
	return "aaa.UserAgent"
}

// GetOsFamily returns the OsFamily field value if set, zero value otherwise.
func (o *AaaUserAgent) GetOsFamily() string {
	if o == nil || IsNil(o.OsFamily) {
		var ret string
		return ret
	}
	return *o.OsFamily
}

// GetOsFamilyOk returns a tuple with the OsFamily field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AaaUserAgent) GetOsFamilyOk() (*string, bool) {
	if o == nil || IsNil(o.OsFamily) {
		return nil, false
	}
	return o.OsFamily, true
}

// HasOsFamily returns a boolean if a field has been set.
func (o *AaaUserAgent) HasOsFamily() bool {
	if o != nil && !IsNil(o.OsFamily) {
		return true
	}

	return false
}

// SetOsFamily gets a reference to the given string and assigns it to the OsFamily field.
func (o *AaaUserAgent) SetOsFamily(v string) {
	o.OsFamily = &v
}

// GetOsVersion returns the OsVersion field value if set, zero value otherwise.
func (o *AaaUserAgent) GetOsVersion() string {
	if o == nil || IsNil(o.OsVersion) {
		var ret string
		return ret
	}
	return *o.OsVersion
}

// GetOsVersionOk returns a tuple with the OsVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AaaUserAgent) GetOsVersionOk() (*string, bool) {
	if o == nil || IsNil(o.OsVersion) {
		return nil, false
	}
	return o.OsVersion, true
}

// HasOsVersion returns a boolean if a field has been set.
func (o *AaaUserAgent) HasOsVersion() bool {
	if o != nil && !IsNil(o.OsVersion) {
		return true
	}

	return false
}

// SetOsVersion gets a reference to the given string and assigns it to the OsVersion field.
func (o *AaaUserAgent) SetOsVersion(v string) {
	o.OsVersion = &v
}

// GetSoftwareFamily returns the SoftwareFamily field value if set, zero value otherwise.
func (o *AaaUserAgent) GetSoftwareFamily() string {
	if o == nil || IsNil(o.SoftwareFamily) {
		var ret string
		return ret
	}
	return *o.SoftwareFamily
}

// GetSoftwareFamilyOk returns a tuple with the SoftwareFamily field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AaaUserAgent) GetSoftwareFamilyOk() (*string, bool) {
	if o == nil || IsNil(o.SoftwareFamily) {
		return nil, false
	}
	return o.SoftwareFamily, true
}

// HasSoftwareFamily returns a boolean if a field has been set.
func (o *AaaUserAgent) HasSoftwareFamily() bool {
	if o != nil && !IsNil(o.SoftwareFamily) {
		return true
	}

	return false
}

// SetSoftwareFamily gets a reference to the given string and assigns it to the SoftwareFamily field.
func (o *AaaUserAgent) SetSoftwareFamily(v string) {
	o.SoftwareFamily = &v
}

// GetSoftwareSubtype returns the SoftwareSubtype field value if set, zero value otherwise.
func (o *AaaUserAgent) GetSoftwareSubtype() string {
	if o == nil || IsNil(o.SoftwareSubtype) {
		var ret string
		return ret
	}
	return *o.SoftwareSubtype
}

// GetSoftwareSubtypeOk returns a tuple with the SoftwareSubtype field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AaaUserAgent) GetSoftwareSubtypeOk() (*string, bool) {
	if o == nil || IsNil(o.SoftwareSubtype) {
		return nil, false
	}
	return o.SoftwareSubtype, true
}

// HasSoftwareSubtype returns a boolean if a field has been set.
func (o *AaaUserAgent) HasSoftwareSubtype() bool {
	if o != nil && !IsNil(o.SoftwareSubtype) {
		return true
	}

	return false
}

// SetSoftwareSubtype gets a reference to the given string and assigns it to the SoftwareSubtype field.
func (o *AaaUserAgent) SetSoftwareSubtype(v string) {
	o.SoftwareSubtype = &v
}

// GetSoftwareType returns the SoftwareType field value if set, zero value otherwise.
func (o *AaaUserAgent) GetSoftwareType() string {
	if o == nil || IsNil(o.SoftwareType) {
		var ret string
		return ret
	}
	return *o.SoftwareType
}

// GetSoftwareTypeOk returns a tuple with the SoftwareType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AaaUserAgent) GetSoftwareTypeOk() (*string, bool) {
	if o == nil || IsNil(o.SoftwareType) {
		return nil, false
	}
	return o.SoftwareType, true
}

// HasSoftwareType returns a boolean if a field has been set.
func (o *AaaUserAgent) HasSoftwareType() bool {
	if o != nil && !IsNil(o.SoftwareType) {
		return true
	}

	return false
}

// SetSoftwareType gets a reference to the given string and assigns it to the SoftwareType field.
func (o *AaaUserAgent) SetSoftwareType(v string) {
	o.SoftwareType = &v
}

// GetSoftwareVersion returns the SoftwareVersion field value if set, zero value otherwise.
func (o *AaaUserAgent) GetSoftwareVersion() string {
	if o == nil || IsNil(o.SoftwareVersion) {
		var ret string
		return ret
	}
	return *o.SoftwareVersion
}

// GetSoftwareVersionOk returns a tuple with the SoftwareVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AaaUserAgent) GetSoftwareVersionOk() (*string, bool) {
	if o == nil || IsNil(o.SoftwareVersion) {
		return nil, false
	}
	return o.SoftwareVersion, true
}

// HasSoftwareVersion returns a boolean if a field has been set.
func (o *AaaUserAgent) HasSoftwareVersion() bool {
	if o != nil && !IsNil(o.SoftwareVersion) {
		return true
	}

	return false
}

// SetSoftwareVersion gets a reference to the given string and assigns it to the SoftwareVersion field.
func (o *AaaUserAgent) SetSoftwareVersion(v string) {
	o.SoftwareVersion = &v
}

func (o AaaUserAgent) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AaaUserAgent) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	serializedMoBaseComplexType, errMoBaseComplexType := json.Marshal(o.MoBaseComplexType)
	if errMoBaseComplexType != nil {
		return map[string]interface{}{}, errMoBaseComplexType
	}
	errMoBaseComplexType = json.Unmarshal([]byte(serializedMoBaseComplexType), &toSerialize)
	if errMoBaseComplexType != nil {
		return map[string]interface{}{}, errMoBaseComplexType
	}
	if _, exists := toSerialize["ClassId"]; !exists {
		toSerialize["ClassId"] = o.GetDefaultClassId()
	}
	toSerialize["ClassId"] = o.ClassId
	if _, exists := toSerialize["ObjectType"]; !exists {
		toSerialize["ObjectType"] = o.GetDefaultObjectType()
	}
	toSerialize["ObjectType"] = o.ObjectType
	if !IsNil(o.OsFamily) {
		toSerialize["OsFamily"] = o.OsFamily
	}
	if !IsNil(o.OsVersion) {
		toSerialize["OsVersion"] = o.OsVersion
	}
	if !IsNil(o.SoftwareFamily) {
		toSerialize["SoftwareFamily"] = o.SoftwareFamily
	}
	if !IsNil(o.SoftwareSubtype) {
		toSerialize["SoftwareSubtype"] = o.SoftwareSubtype
	}
	if !IsNil(o.SoftwareType) {
		toSerialize["SoftwareType"] = o.SoftwareType
	}
	if !IsNil(o.SoftwareVersion) {
		toSerialize["SoftwareVersion"] = o.SoftwareVersion
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *AaaUserAgent) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"ClassId",
		"ObjectType",
	}

	// defaultValueFuncMap captures the default values for required properties.
	// These values are used when required properties are missing from the payload.
	defaultValueFuncMap := map[string]func() interface{}{
		"ClassId":    o.GetDefaultClassId,
		"ObjectType": o.GetDefaultObjectType,
	}
	var defaultValueApplied bool
	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			if _, ok := defaultValueFuncMap[requiredProperty]; ok {
				allProperties[requiredProperty] = defaultValueFuncMap[requiredProperty]()
				defaultValueApplied = true
			}
		}
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	if defaultValueApplied {
		data, err = json.Marshal(allProperties)
		if err != nil {
			return err
		}
	}
	type AaaUserAgentWithoutEmbeddedStruct struct {
		// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.
		ClassId string `json:"ClassId"`
		// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
		ObjectType string `json:"ObjectType"`
		// The type of operating system that sent the request. Not applicable to Intersight SDK requests.
		OsFamily *string `json:"OsFamily,omitempty"`
		// The version of the operating system that sent the request. Not applicable for Intersight SDK requests.
		OsVersion *string `json:"OsVersion,omitempty"`
		// The type of client that made the request. For browser requests, it is the specific browser that made the request (e.g. Chrome, Firefox, etc.).
		SoftwareFamily *string `json:"SoftwareFamily,omitempty"`
		// The subtype of software that made the request. For SDK requests, this is the programming language used in the SDK. For browser requests, this provides additional context on the client (e.g. if the client is running on a mobile device).
		SoftwareSubtype *string `json:"SoftwareSubtype,omitempty"`
		// The type of application that made the request. This can be a browser or some other software, such as an SDK.
		SoftwareType *string `json:"SoftwareType,omitempty"`
		// The version of the client that made the request.
		SoftwareVersion *string `json:"SoftwareVersion,omitempty"`
	}

	varAaaUserAgentWithoutEmbeddedStruct := AaaUserAgentWithoutEmbeddedStruct{}

	err = json.Unmarshal(data, &varAaaUserAgentWithoutEmbeddedStruct)
	if err == nil {
		varAaaUserAgent := _AaaUserAgent{}
		varAaaUserAgent.ClassId = varAaaUserAgentWithoutEmbeddedStruct.ClassId
		varAaaUserAgent.ObjectType = varAaaUserAgentWithoutEmbeddedStruct.ObjectType
		varAaaUserAgent.OsFamily = varAaaUserAgentWithoutEmbeddedStruct.OsFamily
		varAaaUserAgent.OsVersion = varAaaUserAgentWithoutEmbeddedStruct.OsVersion
		varAaaUserAgent.SoftwareFamily = varAaaUserAgentWithoutEmbeddedStruct.SoftwareFamily
		varAaaUserAgent.SoftwareSubtype = varAaaUserAgentWithoutEmbeddedStruct.SoftwareSubtype
		varAaaUserAgent.SoftwareType = varAaaUserAgentWithoutEmbeddedStruct.SoftwareType
		varAaaUserAgent.SoftwareVersion = varAaaUserAgentWithoutEmbeddedStruct.SoftwareVersion
		*o = AaaUserAgent(varAaaUserAgent)
	} else {
		return err
	}

	varAaaUserAgent := _AaaUserAgent{}

	err = json.Unmarshal(data, &varAaaUserAgent)
	if err == nil {
		o.MoBaseComplexType = varAaaUserAgent.MoBaseComplexType
	} else {
		return err
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "ClassId")
		delete(additionalProperties, "ObjectType")
		delete(additionalProperties, "OsFamily")
		delete(additionalProperties, "OsVersion")
		delete(additionalProperties, "SoftwareFamily")
		delete(additionalProperties, "SoftwareSubtype")
		delete(additionalProperties, "SoftwareType")
		delete(additionalProperties, "SoftwareVersion")

		// remove fields from embedded structs
		reflectMoBaseComplexType := reflect.ValueOf(o.MoBaseComplexType)
		for i := 0; i < reflectMoBaseComplexType.Type().NumField(); i++ {
			t := reflectMoBaseComplexType.Type().Field(i)

			if jsonTag := t.Tag.Get("json"); jsonTag != "" {
				fieldName := ""
				if commaIdx := strings.Index(jsonTag, ","); commaIdx > 0 {
					fieldName = jsonTag[:commaIdx]
				} else {
					fieldName = jsonTag
				}
				if fieldName != "AdditionalProperties" {
					delete(additionalProperties, fieldName)
				}
			}
		}

		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableAaaUserAgent struct {
	value *AaaUserAgent
	isSet bool
}

func (v NullableAaaUserAgent) Get() *AaaUserAgent {
	return v.value
}

func (v *NullableAaaUserAgent) Set(val *AaaUserAgent) {
	v.value = val
	v.isSet = true
}

func (v NullableAaaUserAgent) IsSet() bool {
	return v.isSet
}

func (v *NullableAaaUserAgent) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAaaUserAgent(val *AaaUserAgent) *NullableAaaUserAgent {
	return &NullableAaaUserAgent{value: val, isSet: true}
}

func (v NullableAaaUserAgent) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAaaUserAgent) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
