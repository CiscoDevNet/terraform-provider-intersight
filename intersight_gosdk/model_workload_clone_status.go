/*
Cisco Intersight

Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations. The Intersight OpenAPI document defines the complete set of properties that are returned in the HTTP response. From that perspective, a client can expect that no additional properties are returned, unless these properties are explicitly defined in the OpenAPI document. However, when a client uses an older version of the Intersight OpenAPI document, the server may send additional properties because the software is more recent than the client. In that case, the client may receive properties that it does not know about. Some generated SDKs perform a strict validation of the HTTP response body against the OpenAPI document.

API version: 1.0.11-2025101412
Contact: intersight@cisco.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package intersight

import (
	"encoding/json"
	"fmt"
	"reflect"
	"strings"
)

// checks if the WorkloadCloneStatus type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &WorkloadCloneStatus{}

// WorkloadCloneStatus The status of the clone operation for workload blueprint inputs, used to track the progress of cloning a workload definition input.
type WorkloadCloneStatus struct {
	MoBaseComplexType
	// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.
	ClassId string `json:"ClassId"`
	// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
	ObjectType string `json:"ObjectType"`
	// The reference name of the blueprint for which the clone operation is being tracked.
	BlueprintRefName *string `json:"BlueprintRefName,omitempty"`
	// The count of clone operations performed for the input.
	CloneStatusCounter *int64                     `json:"CloneStatusCounter,omitempty"`
	CloneStatusEntry   []WorkloadCloneStatusEntry `json:"CloneStatusEntry,omitempty"`
	// The managed object type of the input for which the clone operation is being tracked. It is used to identify the type of input data that is being cloned.
	MoType *string `json:"MoType,omitempty"`
	// The name of the input for which the clone operation is being tracked.
	Name                 *string `json:"Name,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _WorkloadCloneStatus WorkloadCloneStatus

// NewWorkloadCloneStatus instantiates a new WorkloadCloneStatus object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWorkloadCloneStatus(classId string, objectType string) *WorkloadCloneStatus {
	this := WorkloadCloneStatus{}
	this.ClassId = classId
	this.ObjectType = objectType
	return &this
}

// NewWorkloadCloneStatusWithDefaults instantiates a new WorkloadCloneStatus object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWorkloadCloneStatusWithDefaults() *WorkloadCloneStatus {
	this := WorkloadCloneStatus{}
	var classId string = "workload.CloneStatus"
	this.ClassId = classId
	var objectType string = "workload.CloneStatus"
	this.ObjectType = objectType
	return &this
}

// GetClassId returns the ClassId field value
func (o *WorkloadCloneStatus) GetClassId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ClassId
}

// GetClassIdOk returns a tuple with the ClassId field value
// and a boolean to check if the value has been set.
func (o *WorkloadCloneStatus) GetClassIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ClassId, true
}

// SetClassId sets field value
func (o *WorkloadCloneStatus) SetClassId(v string) {
	o.ClassId = v
}

// GetDefaultClassId returns the default value "workload.CloneStatus" of the ClassId field.
func (o *WorkloadCloneStatus) GetDefaultClassId() interface{} {
	return "workload.CloneStatus"
}

// GetObjectType returns the ObjectType field value
func (o *WorkloadCloneStatus) GetObjectType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ObjectType
}

// GetObjectTypeOk returns a tuple with the ObjectType field value
// and a boolean to check if the value has been set.
func (o *WorkloadCloneStatus) GetObjectTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ObjectType, true
}

// SetObjectType sets field value
func (o *WorkloadCloneStatus) SetObjectType(v string) {
	o.ObjectType = v
}

// GetDefaultObjectType returns the default value "workload.CloneStatus" of the ObjectType field.
func (o *WorkloadCloneStatus) GetDefaultObjectType() interface{} {
	return "workload.CloneStatus"
}

// GetBlueprintRefName returns the BlueprintRefName field value if set, zero value otherwise.
func (o *WorkloadCloneStatus) GetBlueprintRefName() string {
	if o == nil || IsNil(o.BlueprintRefName) {
		var ret string
		return ret
	}
	return *o.BlueprintRefName
}

// GetBlueprintRefNameOk returns a tuple with the BlueprintRefName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkloadCloneStatus) GetBlueprintRefNameOk() (*string, bool) {
	if o == nil || IsNil(o.BlueprintRefName) {
		return nil, false
	}
	return o.BlueprintRefName, true
}

// HasBlueprintRefName returns a boolean if a field has been set.
func (o *WorkloadCloneStatus) HasBlueprintRefName() bool {
	if o != nil && !IsNil(o.BlueprintRefName) {
		return true
	}

	return false
}

// SetBlueprintRefName gets a reference to the given string and assigns it to the BlueprintRefName field.
func (o *WorkloadCloneStatus) SetBlueprintRefName(v string) {
	o.BlueprintRefName = &v
}

// GetCloneStatusCounter returns the CloneStatusCounter field value if set, zero value otherwise.
func (o *WorkloadCloneStatus) GetCloneStatusCounter() int64 {
	if o == nil || IsNil(o.CloneStatusCounter) {
		var ret int64
		return ret
	}
	return *o.CloneStatusCounter
}

// GetCloneStatusCounterOk returns a tuple with the CloneStatusCounter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkloadCloneStatus) GetCloneStatusCounterOk() (*int64, bool) {
	if o == nil || IsNil(o.CloneStatusCounter) {
		return nil, false
	}
	return o.CloneStatusCounter, true
}

// HasCloneStatusCounter returns a boolean if a field has been set.
func (o *WorkloadCloneStatus) HasCloneStatusCounter() bool {
	if o != nil && !IsNil(o.CloneStatusCounter) {
		return true
	}

	return false
}

// SetCloneStatusCounter gets a reference to the given int64 and assigns it to the CloneStatusCounter field.
func (o *WorkloadCloneStatus) SetCloneStatusCounter(v int64) {
	o.CloneStatusCounter = &v
}

// GetCloneStatusEntry returns the CloneStatusEntry field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *WorkloadCloneStatus) GetCloneStatusEntry() []WorkloadCloneStatusEntry {
	if o == nil {
		var ret []WorkloadCloneStatusEntry
		return ret
	}
	return o.CloneStatusEntry
}

// GetCloneStatusEntryOk returns a tuple with the CloneStatusEntry field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *WorkloadCloneStatus) GetCloneStatusEntryOk() ([]WorkloadCloneStatusEntry, bool) {
	if o == nil || IsNil(o.CloneStatusEntry) {
		return nil, false
	}
	return o.CloneStatusEntry, true
}

// HasCloneStatusEntry returns a boolean if a field has been set.
func (o *WorkloadCloneStatus) HasCloneStatusEntry() bool {
	if o != nil && !IsNil(o.CloneStatusEntry) {
		return true
	}

	return false
}

// SetCloneStatusEntry gets a reference to the given []WorkloadCloneStatusEntry and assigns it to the CloneStatusEntry field.
func (o *WorkloadCloneStatus) SetCloneStatusEntry(v []WorkloadCloneStatusEntry) {
	o.CloneStatusEntry = v
}

// GetMoType returns the MoType field value if set, zero value otherwise.
func (o *WorkloadCloneStatus) GetMoType() string {
	if o == nil || IsNil(o.MoType) {
		var ret string
		return ret
	}
	return *o.MoType
}

// GetMoTypeOk returns a tuple with the MoType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkloadCloneStatus) GetMoTypeOk() (*string, bool) {
	if o == nil || IsNil(o.MoType) {
		return nil, false
	}
	return o.MoType, true
}

// HasMoType returns a boolean if a field has been set.
func (o *WorkloadCloneStatus) HasMoType() bool {
	if o != nil && !IsNil(o.MoType) {
		return true
	}

	return false
}

// SetMoType gets a reference to the given string and assigns it to the MoType field.
func (o *WorkloadCloneStatus) SetMoType(v string) {
	o.MoType = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *WorkloadCloneStatus) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkloadCloneStatus) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *WorkloadCloneStatus) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *WorkloadCloneStatus) SetName(v string) {
	o.Name = &v
}

func (o WorkloadCloneStatus) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o WorkloadCloneStatus) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	serializedMoBaseComplexType, errMoBaseComplexType := json.Marshal(o.MoBaseComplexType)
	if errMoBaseComplexType != nil {
		return map[string]interface{}{}, errMoBaseComplexType
	}
	errMoBaseComplexType = json.Unmarshal([]byte(serializedMoBaseComplexType), &toSerialize)
	if errMoBaseComplexType != nil {
		return map[string]interface{}{}, errMoBaseComplexType
	}
	if _, exists := toSerialize["ClassId"]; !exists {
		toSerialize["ClassId"] = o.GetDefaultClassId()
	}
	toSerialize["ClassId"] = o.ClassId
	if _, exists := toSerialize["ObjectType"]; !exists {
		toSerialize["ObjectType"] = o.GetDefaultObjectType()
	}
	toSerialize["ObjectType"] = o.ObjectType
	if !IsNil(o.BlueprintRefName) {
		toSerialize["BlueprintRefName"] = o.BlueprintRefName
	}
	if !IsNil(o.CloneStatusCounter) {
		toSerialize["CloneStatusCounter"] = o.CloneStatusCounter
	}
	if o.CloneStatusEntry != nil {
		toSerialize["CloneStatusEntry"] = o.CloneStatusEntry
	}
	if !IsNil(o.MoType) {
		toSerialize["MoType"] = o.MoType
	}
	if !IsNil(o.Name) {
		toSerialize["Name"] = o.Name
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *WorkloadCloneStatus) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"ClassId",
		"ObjectType",
	}

	// defaultValueFuncMap captures the default values for required properties.
	// These values are used when required properties are missing from the payload.
	defaultValueFuncMap := map[string]func() interface{}{
		"ClassId":    o.GetDefaultClassId,
		"ObjectType": o.GetDefaultObjectType,
	}
	var defaultValueApplied bool
	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			if _, ok := defaultValueFuncMap[requiredProperty]; ok {
				allProperties[requiredProperty] = defaultValueFuncMap[requiredProperty]()
				defaultValueApplied = true
			}
		}
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	if defaultValueApplied {
		data, err = json.Marshal(allProperties)
		if err != nil {
			return err
		}
	}
	type WorkloadCloneStatusWithoutEmbeddedStruct struct {
		// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.
		ClassId string `json:"ClassId"`
		// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
		ObjectType string `json:"ObjectType"`
		// The reference name of the blueprint for which the clone operation is being tracked.
		BlueprintRefName *string `json:"BlueprintRefName,omitempty"`
		// The count of clone operations performed for the input.
		CloneStatusCounter *int64                     `json:"CloneStatusCounter,omitempty"`
		CloneStatusEntry   []WorkloadCloneStatusEntry `json:"CloneStatusEntry,omitempty"`
		// The managed object type of the input for which the clone operation is being tracked. It is used to identify the type of input data that is being cloned.
		MoType *string `json:"MoType,omitempty"`
		// The name of the input for which the clone operation is being tracked.
		Name *string `json:"Name,omitempty"`
	}

	varWorkloadCloneStatusWithoutEmbeddedStruct := WorkloadCloneStatusWithoutEmbeddedStruct{}

	err = json.Unmarshal(data, &varWorkloadCloneStatusWithoutEmbeddedStruct)
	if err == nil {
		varWorkloadCloneStatus := _WorkloadCloneStatus{}
		varWorkloadCloneStatus.ClassId = varWorkloadCloneStatusWithoutEmbeddedStruct.ClassId
		varWorkloadCloneStatus.ObjectType = varWorkloadCloneStatusWithoutEmbeddedStruct.ObjectType
		varWorkloadCloneStatus.BlueprintRefName = varWorkloadCloneStatusWithoutEmbeddedStruct.BlueprintRefName
		varWorkloadCloneStatus.CloneStatusCounter = varWorkloadCloneStatusWithoutEmbeddedStruct.CloneStatusCounter
		varWorkloadCloneStatus.CloneStatusEntry = varWorkloadCloneStatusWithoutEmbeddedStruct.CloneStatusEntry
		varWorkloadCloneStatus.MoType = varWorkloadCloneStatusWithoutEmbeddedStruct.MoType
		varWorkloadCloneStatus.Name = varWorkloadCloneStatusWithoutEmbeddedStruct.Name
		*o = WorkloadCloneStatus(varWorkloadCloneStatus)
	} else {
		return err
	}

	varWorkloadCloneStatus := _WorkloadCloneStatus{}

	err = json.Unmarshal(data, &varWorkloadCloneStatus)
	if err == nil {
		o.MoBaseComplexType = varWorkloadCloneStatus.MoBaseComplexType
	} else {
		return err
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "ClassId")
		delete(additionalProperties, "ObjectType")
		delete(additionalProperties, "BlueprintRefName")
		delete(additionalProperties, "CloneStatusCounter")
		delete(additionalProperties, "CloneStatusEntry")
		delete(additionalProperties, "MoType")
		delete(additionalProperties, "Name")

		// remove fields from embedded structs
		reflectMoBaseComplexType := reflect.ValueOf(o.MoBaseComplexType)
		for i := 0; i < reflectMoBaseComplexType.Type().NumField(); i++ {
			t := reflectMoBaseComplexType.Type().Field(i)

			if jsonTag := t.Tag.Get("json"); jsonTag != "" {
				fieldName := ""
				if commaIdx := strings.Index(jsonTag, ","); commaIdx > 0 {
					fieldName = jsonTag[:commaIdx]
				} else {
					fieldName = jsonTag
				}
				if fieldName != "AdditionalProperties" {
					delete(additionalProperties, fieldName)
				}
			}
		}

		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableWorkloadCloneStatus struct {
	value *WorkloadCloneStatus
	isSet bool
}

func (v NullableWorkloadCloneStatus) Get() *WorkloadCloneStatus {
	return v.value
}

func (v *NullableWorkloadCloneStatus) Set(val *WorkloadCloneStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableWorkloadCloneStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableWorkloadCloneStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWorkloadCloneStatus(val *WorkloadCloneStatus) *NullableWorkloadCloneStatus {
	return &NullableWorkloadCloneStatus{value: val, isSet: true}
}

func (v NullableWorkloadCloneStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWorkloadCloneStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
