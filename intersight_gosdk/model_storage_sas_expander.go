/*
Cisco Intersight

Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations. The Intersight OpenAPI document defines the complete set of properties that are returned in the HTTP response. From that perspective, a client can expect that no additional properties are returned, unless these properties are explicitly defined in the OpenAPI document. However, when a client uses an older version of the Intersight OpenAPI document, the server may send additional properties because the software is more recent than the client. In that case, the client may receive properties that it does not know about. Some generated SDKs perform a strict validation of the HTTP response body against the OpenAPI document.

API version: 1.0.11-2024100405
Contact: intersight@cisco.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package intersight

import (
	"encoding/json"
	"fmt"
	"reflect"
	"strings"
)

// checks if the StorageSasExpander type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &StorageSasExpander{}

// StorageSasExpander SAS Expander present in a server.
type StorageSasExpander struct {
	EquipmentBase
	// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.
	ClassId string `json:"ClassId"`
	// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
	ObjectType string `json:"ObjectType"`
	// Unique Identifier of the storage expander.
	ExpanderId *int64 `json:"ExpanderId,omitempty"`
	// The name  of the installed storage expander.
	Name *string `json:"Name,omitempty"`
	// The operational state of the storage expander.
	OperState *string `json:"OperState,omitempty"`
	// The operability status of the storage expander.
	Operability *string `json:"Operability,omitempty"`
	// The SAS address of the SAS expander.
	SasAddress           *string                                     `json:"SasAddress,omitempty"`
	ComputeRackUnit      NullableComputeRackUnitRelationship         `json:"ComputeRackUnit,omitempty"`
	Controller           NullableManagementControllerRelationship    `json:"Controller,omitempty"`
	EquipmentChassis     NullableEquipmentChassisRelationship        `json:"EquipmentChassis,omitempty"`
	InventoryDeviceInfo  NullableInventoryDeviceInfoRelationship     `json:"InventoryDeviceInfo,omitempty"`
	RegisteredDevice     NullableAssetDeviceRegistrationRelationship `json:"RegisteredDevice,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _StorageSasExpander StorageSasExpander

// NewStorageSasExpander instantiates a new StorageSasExpander object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStorageSasExpander(classId string, objectType string) *StorageSasExpander {
	this := StorageSasExpander{}
	this.ClassId = classId
	this.ObjectType = objectType
	return &this
}

// NewStorageSasExpanderWithDefaults instantiates a new StorageSasExpander object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStorageSasExpanderWithDefaults() *StorageSasExpander {
	this := StorageSasExpander{}
	var classId string = "storage.SasExpander"
	this.ClassId = classId
	var objectType string = "storage.SasExpander"
	this.ObjectType = objectType
	return &this
}

// GetClassId returns the ClassId field value
func (o *StorageSasExpander) GetClassId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ClassId
}

// GetClassIdOk returns a tuple with the ClassId field value
// and a boolean to check if the value has been set.
func (o *StorageSasExpander) GetClassIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ClassId, true
}

// SetClassId sets field value
func (o *StorageSasExpander) SetClassId(v string) {
	o.ClassId = v
}

// GetDefaultClassId returns the default value "storage.SasExpander" of the ClassId field.
func (o *StorageSasExpander) GetDefaultClassId() interface{} {
	return "storage.SasExpander"
}

// GetObjectType returns the ObjectType field value
func (o *StorageSasExpander) GetObjectType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ObjectType
}

// GetObjectTypeOk returns a tuple with the ObjectType field value
// and a boolean to check if the value has been set.
func (o *StorageSasExpander) GetObjectTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ObjectType, true
}

// SetObjectType sets field value
func (o *StorageSasExpander) SetObjectType(v string) {
	o.ObjectType = v
}

// GetDefaultObjectType returns the default value "storage.SasExpander" of the ObjectType field.
func (o *StorageSasExpander) GetDefaultObjectType() interface{} {
	return "storage.SasExpander"
}

// GetExpanderId returns the ExpanderId field value if set, zero value otherwise.
func (o *StorageSasExpander) GetExpanderId() int64 {
	if o == nil || IsNil(o.ExpanderId) {
		var ret int64
		return ret
	}
	return *o.ExpanderId
}

// GetExpanderIdOk returns a tuple with the ExpanderId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageSasExpander) GetExpanderIdOk() (*int64, bool) {
	if o == nil || IsNil(o.ExpanderId) {
		return nil, false
	}
	return o.ExpanderId, true
}

// HasExpanderId returns a boolean if a field has been set.
func (o *StorageSasExpander) HasExpanderId() bool {
	if o != nil && !IsNil(o.ExpanderId) {
		return true
	}

	return false
}

// SetExpanderId gets a reference to the given int64 and assigns it to the ExpanderId field.
func (o *StorageSasExpander) SetExpanderId(v int64) {
	o.ExpanderId = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *StorageSasExpander) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageSasExpander) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *StorageSasExpander) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *StorageSasExpander) SetName(v string) {
	o.Name = &v
}

// GetOperState returns the OperState field value if set, zero value otherwise.
func (o *StorageSasExpander) GetOperState() string {
	if o == nil || IsNil(o.OperState) {
		var ret string
		return ret
	}
	return *o.OperState
}

// GetOperStateOk returns a tuple with the OperState field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageSasExpander) GetOperStateOk() (*string, bool) {
	if o == nil || IsNil(o.OperState) {
		return nil, false
	}
	return o.OperState, true
}

// HasOperState returns a boolean if a field has been set.
func (o *StorageSasExpander) HasOperState() bool {
	if o != nil && !IsNil(o.OperState) {
		return true
	}

	return false
}

// SetOperState gets a reference to the given string and assigns it to the OperState field.
func (o *StorageSasExpander) SetOperState(v string) {
	o.OperState = &v
}

// GetOperability returns the Operability field value if set, zero value otherwise.
func (o *StorageSasExpander) GetOperability() string {
	if o == nil || IsNil(o.Operability) {
		var ret string
		return ret
	}
	return *o.Operability
}

// GetOperabilityOk returns a tuple with the Operability field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageSasExpander) GetOperabilityOk() (*string, bool) {
	if o == nil || IsNil(o.Operability) {
		return nil, false
	}
	return o.Operability, true
}

// HasOperability returns a boolean if a field has been set.
func (o *StorageSasExpander) HasOperability() bool {
	if o != nil && !IsNil(o.Operability) {
		return true
	}

	return false
}

// SetOperability gets a reference to the given string and assigns it to the Operability field.
func (o *StorageSasExpander) SetOperability(v string) {
	o.Operability = &v
}

// GetSasAddress returns the SasAddress field value if set, zero value otherwise.
func (o *StorageSasExpander) GetSasAddress() string {
	if o == nil || IsNil(o.SasAddress) {
		var ret string
		return ret
	}
	return *o.SasAddress
}

// GetSasAddressOk returns a tuple with the SasAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageSasExpander) GetSasAddressOk() (*string, bool) {
	if o == nil || IsNil(o.SasAddress) {
		return nil, false
	}
	return o.SasAddress, true
}

// HasSasAddress returns a boolean if a field has been set.
func (o *StorageSasExpander) HasSasAddress() bool {
	if o != nil && !IsNil(o.SasAddress) {
		return true
	}

	return false
}

// SetSasAddress gets a reference to the given string and assigns it to the SasAddress field.
func (o *StorageSasExpander) SetSasAddress(v string) {
	o.SasAddress = &v
}

// GetComputeRackUnit returns the ComputeRackUnit field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *StorageSasExpander) GetComputeRackUnit() ComputeRackUnitRelationship {
	if o == nil || IsNil(o.ComputeRackUnit.Get()) {
		var ret ComputeRackUnitRelationship
		return ret
	}
	return *o.ComputeRackUnit.Get()
}

// GetComputeRackUnitOk returns a tuple with the ComputeRackUnit field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *StorageSasExpander) GetComputeRackUnitOk() (*ComputeRackUnitRelationship, bool) {
	if o == nil {
		return nil, false
	}
	return o.ComputeRackUnit.Get(), o.ComputeRackUnit.IsSet()
}

// HasComputeRackUnit returns a boolean if a field has been set.
func (o *StorageSasExpander) HasComputeRackUnit() bool {
	if o != nil && o.ComputeRackUnit.IsSet() {
		return true
	}

	return false
}

// SetComputeRackUnit gets a reference to the given NullableComputeRackUnitRelationship and assigns it to the ComputeRackUnit field.
func (o *StorageSasExpander) SetComputeRackUnit(v ComputeRackUnitRelationship) {
	o.ComputeRackUnit.Set(&v)
}

// SetComputeRackUnitNil sets the value for ComputeRackUnit to be an explicit nil
func (o *StorageSasExpander) SetComputeRackUnitNil() {
	o.ComputeRackUnit.Set(nil)
}

// UnsetComputeRackUnit ensures that no value is present for ComputeRackUnit, not even an explicit nil
func (o *StorageSasExpander) UnsetComputeRackUnit() {
	o.ComputeRackUnit.Unset()
}

// GetController returns the Controller field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *StorageSasExpander) GetController() ManagementControllerRelationship {
	if o == nil || IsNil(o.Controller.Get()) {
		var ret ManagementControllerRelationship
		return ret
	}
	return *o.Controller.Get()
}

// GetControllerOk returns a tuple with the Controller field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *StorageSasExpander) GetControllerOk() (*ManagementControllerRelationship, bool) {
	if o == nil {
		return nil, false
	}
	return o.Controller.Get(), o.Controller.IsSet()
}

// HasController returns a boolean if a field has been set.
func (o *StorageSasExpander) HasController() bool {
	if o != nil && o.Controller.IsSet() {
		return true
	}

	return false
}

// SetController gets a reference to the given NullableManagementControllerRelationship and assigns it to the Controller field.
func (o *StorageSasExpander) SetController(v ManagementControllerRelationship) {
	o.Controller.Set(&v)
}

// SetControllerNil sets the value for Controller to be an explicit nil
func (o *StorageSasExpander) SetControllerNil() {
	o.Controller.Set(nil)
}

// UnsetController ensures that no value is present for Controller, not even an explicit nil
func (o *StorageSasExpander) UnsetController() {
	o.Controller.Unset()
}

// GetEquipmentChassis returns the EquipmentChassis field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *StorageSasExpander) GetEquipmentChassis() EquipmentChassisRelationship {
	if o == nil || IsNil(o.EquipmentChassis.Get()) {
		var ret EquipmentChassisRelationship
		return ret
	}
	return *o.EquipmentChassis.Get()
}

// GetEquipmentChassisOk returns a tuple with the EquipmentChassis field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *StorageSasExpander) GetEquipmentChassisOk() (*EquipmentChassisRelationship, bool) {
	if o == nil {
		return nil, false
	}
	return o.EquipmentChassis.Get(), o.EquipmentChassis.IsSet()
}

// HasEquipmentChassis returns a boolean if a field has been set.
func (o *StorageSasExpander) HasEquipmentChassis() bool {
	if o != nil && o.EquipmentChassis.IsSet() {
		return true
	}

	return false
}

// SetEquipmentChassis gets a reference to the given NullableEquipmentChassisRelationship and assigns it to the EquipmentChassis field.
func (o *StorageSasExpander) SetEquipmentChassis(v EquipmentChassisRelationship) {
	o.EquipmentChassis.Set(&v)
}

// SetEquipmentChassisNil sets the value for EquipmentChassis to be an explicit nil
func (o *StorageSasExpander) SetEquipmentChassisNil() {
	o.EquipmentChassis.Set(nil)
}

// UnsetEquipmentChassis ensures that no value is present for EquipmentChassis, not even an explicit nil
func (o *StorageSasExpander) UnsetEquipmentChassis() {
	o.EquipmentChassis.Unset()
}

// GetInventoryDeviceInfo returns the InventoryDeviceInfo field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *StorageSasExpander) GetInventoryDeviceInfo() InventoryDeviceInfoRelationship {
	if o == nil || IsNil(o.InventoryDeviceInfo.Get()) {
		var ret InventoryDeviceInfoRelationship
		return ret
	}
	return *o.InventoryDeviceInfo.Get()
}

// GetInventoryDeviceInfoOk returns a tuple with the InventoryDeviceInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *StorageSasExpander) GetInventoryDeviceInfoOk() (*InventoryDeviceInfoRelationship, bool) {
	if o == nil {
		return nil, false
	}
	return o.InventoryDeviceInfo.Get(), o.InventoryDeviceInfo.IsSet()
}

// HasInventoryDeviceInfo returns a boolean if a field has been set.
func (o *StorageSasExpander) HasInventoryDeviceInfo() bool {
	if o != nil && o.InventoryDeviceInfo.IsSet() {
		return true
	}

	return false
}

// SetInventoryDeviceInfo gets a reference to the given NullableInventoryDeviceInfoRelationship and assigns it to the InventoryDeviceInfo field.
func (o *StorageSasExpander) SetInventoryDeviceInfo(v InventoryDeviceInfoRelationship) {
	o.InventoryDeviceInfo.Set(&v)
}

// SetInventoryDeviceInfoNil sets the value for InventoryDeviceInfo to be an explicit nil
func (o *StorageSasExpander) SetInventoryDeviceInfoNil() {
	o.InventoryDeviceInfo.Set(nil)
}

// UnsetInventoryDeviceInfo ensures that no value is present for InventoryDeviceInfo, not even an explicit nil
func (o *StorageSasExpander) UnsetInventoryDeviceInfo() {
	o.InventoryDeviceInfo.Unset()
}

// GetRegisteredDevice returns the RegisteredDevice field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *StorageSasExpander) GetRegisteredDevice() AssetDeviceRegistrationRelationship {
	if o == nil || IsNil(o.RegisteredDevice.Get()) {
		var ret AssetDeviceRegistrationRelationship
		return ret
	}
	return *o.RegisteredDevice.Get()
}

// GetRegisteredDeviceOk returns a tuple with the RegisteredDevice field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *StorageSasExpander) GetRegisteredDeviceOk() (*AssetDeviceRegistrationRelationship, bool) {
	if o == nil {
		return nil, false
	}
	return o.RegisteredDevice.Get(), o.RegisteredDevice.IsSet()
}

// HasRegisteredDevice returns a boolean if a field has been set.
func (o *StorageSasExpander) HasRegisteredDevice() bool {
	if o != nil && o.RegisteredDevice.IsSet() {
		return true
	}

	return false
}

// SetRegisteredDevice gets a reference to the given NullableAssetDeviceRegistrationRelationship and assigns it to the RegisteredDevice field.
func (o *StorageSasExpander) SetRegisteredDevice(v AssetDeviceRegistrationRelationship) {
	o.RegisteredDevice.Set(&v)
}

// SetRegisteredDeviceNil sets the value for RegisteredDevice to be an explicit nil
func (o *StorageSasExpander) SetRegisteredDeviceNil() {
	o.RegisteredDevice.Set(nil)
}

// UnsetRegisteredDevice ensures that no value is present for RegisteredDevice, not even an explicit nil
func (o *StorageSasExpander) UnsetRegisteredDevice() {
	o.RegisteredDevice.Unset()
}

func (o StorageSasExpander) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o StorageSasExpander) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	serializedEquipmentBase, errEquipmentBase := json.Marshal(o.EquipmentBase)
	if errEquipmentBase != nil {
		return map[string]interface{}{}, errEquipmentBase
	}
	errEquipmentBase = json.Unmarshal([]byte(serializedEquipmentBase), &toSerialize)
	if errEquipmentBase != nil {
		return map[string]interface{}{}, errEquipmentBase
	}
	if _, exists := toSerialize["ClassId"]; !exists {
		toSerialize["ClassId"] = o.GetDefaultClassId()
	}
	toSerialize["ClassId"] = o.ClassId
	if _, exists := toSerialize["ObjectType"]; !exists {
		toSerialize["ObjectType"] = o.GetDefaultObjectType()
	}
	toSerialize["ObjectType"] = o.ObjectType
	if !IsNil(o.ExpanderId) {
		toSerialize["ExpanderId"] = o.ExpanderId
	}
	if !IsNil(o.Name) {
		toSerialize["Name"] = o.Name
	}
	if !IsNil(o.OperState) {
		toSerialize["OperState"] = o.OperState
	}
	if !IsNil(o.Operability) {
		toSerialize["Operability"] = o.Operability
	}
	if !IsNil(o.SasAddress) {
		toSerialize["SasAddress"] = o.SasAddress
	}
	if o.ComputeRackUnit.IsSet() {
		toSerialize["ComputeRackUnit"] = o.ComputeRackUnit.Get()
	}
	if o.Controller.IsSet() {
		toSerialize["Controller"] = o.Controller.Get()
	}
	if o.EquipmentChassis.IsSet() {
		toSerialize["EquipmentChassis"] = o.EquipmentChassis.Get()
	}
	if o.InventoryDeviceInfo.IsSet() {
		toSerialize["InventoryDeviceInfo"] = o.InventoryDeviceInfo.Get()
	}
	if o.RegisteredDevice.IsSet() {
		toSerialize["RegisteredDevice"] = o.RegisteredDevice.Get()
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *StorageSasExpander) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"ClassId",
		"ObjectType",
	}

	// defaultValueFuncMap captures the default values for required properties.
	// These values are used when required properties are missing from the payload.
	defaultValueFuncMap := map[string]func() interface{}{
		"ClassId":    o.GetDefaultClassId,
		"ObjectType": o.GetDefaultObjectType,
	}
	var defaultValueApplied bool
	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			if _, ok := defaultValueFuncMap[requiredProperty]; ok {
				allProperties[requiredProperty] = defaultValueFuncMap[requiredProperty]()
				defaultValueApplied = true
			}
		}
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	if defaultValueApplied {
		data, err = json.Marshal(allProperties)
		if err != nil {
			return err
		}
	}
	type StorageSasExpanderWithoutEmbeddedStruct struct {
		// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.
		ClassId string `json:"ClassId"`
		// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
		ObjectType string `json:"ObjectType"`
		// Unique Identifier of the storage expander.
		ExpanderId *int64 `json:"ExpanderId,omitempty"`
		// The name  of the installed storage expander.
		Name *string `json:"Name,omitempty"`
		// The operational state of the storage expander.
		OperState *string `json:"OperState,omitempty"`
		// The operability status of the storage expander.
		Operability *string `json:"Operability,omitempty"`
		// The SAS address of the SAS expander.
		SasAddress          *string                                     `json:"SasAddress,omitempty"`
		ComputeRackUnit     NullableComputeRackUnitRelationship         `json:"ComputeRackUnit,omitempty"`
		Controller          NullableManagementControllerRelationship    `json:"Controller,omitempty"`
		EquipmentChassis    NullableEquipmentChassisRelationship        `json:"EquipmentChassis,omitempty"`
		InventoryDeviceInfo NullableInventoryDeviceInfoRelationship     `json:"InventoryDeviceInfo,omitempty"`
		RegisteredDevice    NullableAssetDeviceRegistrationRelationship `json:"RegisteredDevice,omitempty"`
	}

	varStorageSasExpanderWithoutEmbeddedStruct := StorageSasExpanderWithoutEmbeddedStruct{}

	err = json.Unmarshal(data, &varStorageSasExpanderWithoutEmbeddedStruct)
	if err == nil {
		varStorageSasExpander := _StorageSasExpander{}
		varStorageSasExpander.ClassId = varStorageSasExpanderWithoutEmbeddedStruct.ClassId
		varStorageSasExpander.ObjectType = varStorageSasExpanderWithoutEmbeddedStruct.ObjectType
		varStorageSasExpander.ExpanderId = varStorageSasExpanderWithoutEmbeddedStruct.ExpanderId
		varStorageSasExpander.Name = varStorageSasExpanderWithoutEmbeddedStruct.Name
		varStorageSasExpander.OperState = varStorageSasExpanderWithoutEmbeddedStruct.OperState
		varStorageSasExpander.Operability = varStorageSasExpanderWithoutEmbeddedStruct.Operability
		varStorageSasExpander.SasAddress = varStorageSasExpanderWithoutEmbeddedStruct.SasAddress
		varStorageSasExpander.ComputeRackUnit = varStorageSasExpanderWithoutEmbeddedStruct.ComputeRackUnit
		varStorageSasExpander.Controller = varStorageSasExpanderWithoutEmbeddedStruct.Controller
		varStorageSasExpander.EquipmentChassis = varStorageSasExpanderWithoutEmbeddedStruct.EquipmentChassis
		varStorageSasExpander.InventoryDeviceInfo = varStorageSasExpanderWithoutEmbeddedStruct.InventoryDeviceInfo
		varStorageSasExpander.RegisteredDevice = varStorageSasExpanderWithoutEmbeddedStruct.RegisteredDevice
		*o = StorageSasExpander(varStorageSasExpander)
	} else {
		return err
	}

	varStorageSasExpander := _StorageSasExpander{}

	err = json.Unmarshal(data, &varStorageSasExpander)
	if err == nil {
		o.EquipmentBase = varStorageSasExpander.EquipmentBase
	} else {
		return err
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "ClassId")
		delete(additionalProperties, "ObjectType")
		delete(additionalProperties, "ExpanderId")
		delete(additionalProperties, "Name")
		delete(additionalProperties, "OperState")
		delete(additionalProperties, "Operability")
		delete(additionalProperties, "SasAddress")
		delete(additionalProperties, "ComputeRackUnit")
		delete(additionalProperties, "Controller")
		delete(additionalProperties, "EquipmentChassis")
		delete(additionalProperties, "InventoryDeviceInfo")
		delete(additionalProperties, "RegisteredDevice")

		// remove fields from embedded structs
		reflectEquipmentBase := reflect.ValueOf(o.EquipmentBase)
		for i := 0; i < reflectEquipmentBase.Type().NumField(); i++ {
			t := reflectEquipmentBase.Type().Field(i)

			if jsonTag := t.Tag.Get("json"); jsonTag != "" {
				fieldName := ""
				if commaIdx := strings.Index(jsonTag, ","); commaIdx > 0 {
					fieldName = jsonTag[:commaIdx]
				} else {
					fieldName = jsonTag
				}
				if fieldName != "AdditionalProperties" {
					delete(additionalProperties, fieldName)
				}
			}
		}

		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableStorageSasExpander struct {
	value *StorageSasExpander
	isSet bool
}

func (v NullableStorageSasExpander) Get() *StorageSasExpander {
	return v.value
}

func (v *NullableStorageSasExpander) Set(val *StorageSasExpander) {
	v.value = val
	v.isSet = true
}

func (v NullableStorageSasExpander) IsSet() bool {
	return v.isSet
}

func (v *NullableStorageSasExpander) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStorageSasExpander(val *StorageSasExpander) *NullableStorageSasExpander {
	return &NullableStorageSasExpander{value: val, isSet: true}
}

func (v NullableStorageSasExpander) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStorageSasExpander) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
