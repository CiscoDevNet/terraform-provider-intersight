/*
Cisco Intersight

Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations. The Intersight OpenAPI document defines the complete set of properties that are returned in the HTTP response. From that perspective, a client can expect that no additional properties are returned, unless these properties are explicitly defined in the OpenAPI document. However, when a client uses an older version of the Intersight OpenAPI document, the server may send additional properties because the software is more recent than the client. In that case, the client may receive properties that it does not know about. Some generated SDKs perform a strict validation of the HTTP response body against the OpenAPI document.

API version: 1.0.11-2024120409
Contact: intersight@cisco.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package intersight

import (
	"encoding/json"
	"fmt"
	"reflect"
	"strings"
)

// checks if the HciNode type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &HciNode{}

// HciNode A HCI node reported by Prism Central.
type HciNode struct {
	MoBaseMo
	// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.
	ClassId string `json:"ClassId"`
	// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
	ObjectType string `json:"ObjectType"`
	// The rackable unit model of the node.
	BlockModel *string `json:"BlockModel,omitempty"`
	// The rackable unit serial number of the node.
	BlockSerial *string `json:"BlockSerial,omitempty"`
	// The boot time in microseconds of the node.
	BootTimeUsecs *int64 `json:"BootTimeUsecs,omitempty"`
	// The unique identifier of the cluster.
	ClusterExtId *string `json:"ClusterExtId,omitempty"`
	// The name of the cluster this node belongs to.
	ClusterName                  *string              `json:"ClusterName,omitempty"`
	ControllerVmBackplaneAddress NullableHciIpAddress `json:"ControllerVmBackplaneAddress,omitempty"`
	ControllerVmExternalAddress  NullableHciIpAddress `json:"ControllerVmExternalAddress,omitempty"`
	// The identifier number of the controller VM.
	ControllerVmId *int32 `json:"ControllerVmId,omitempty"`
	// The maintenance mode status of the controller VM.
	ControllerVmMaintanenceMode *bool                `json:"ControllerVmMaintanenceMode,omitempty"`
	ControllerVmNatIp           NullableHciIpAddress `json:"ControllerVmNatIp,omitempty"`
	// The NAT port of the controller VM.
	ControllerVmNatPort              *int32               `json:"ControllerVmNatPort,omitempty"`
	ControllerVmRdmaBackplaneAddress NullableHciIpAddress `json:"ControllerVmRdmaBackplaneAddress,omitempty"`
	// The Rackable unit UUID of the server.
	ControllerVmServerUuid *string `json:"ControllerVmServerUuid,omitempty"`
	// The CPU capacity in Hz of the node.
	CpuCapacityHz *int64 `json:"CpuCapacityHz,omitempty"`
	// The CPU frequency in Hz on the node.
	CpuFrequencyHz *int64 `json:"CpuFrequencyHz,omitempty"`
	// The CPU model of the node.
	CpuModel *string `json:"CpuModel,omitempty"`
	// The CPU usage in Hz of the node.
	CpuUsageHz *int64 `json:"CpuUsageHz,omitempty"`
	// The default VHD container UUID of the node.
	DefaultVhdContainerUuid *string `json:"DefaultVhdContainerUuid,omitempty"`
	// The default VHD location of the node.
	DefaultVhdLocation *string `json:"DefaultVhdLocation,omitempty"`
	// The default VM container UUID of the node.
	DefaultVmContainerUuid *string `json:"DefaultVmContainerUuid,omitempty"`
	// The default VM location of the node.
	DefaultVmLocation *string `json:"DefaultVmLocation,omitempty"`
	// The number of disks on the node.
	DiskCount *int64 `json:"DiskCount,omitempty"`
	// The failover cluster FQDN of the node.
	FailoverClusterFqdn *string `json:"FailoverClusterFqdn,omitempty"`
	// The failover cluster node status of the node.
	FailoverClusterNodeStatus *string `json:"FailoverClusterNodeStatus,omitempty"`
	// The number of GPUs on the node.
	GpuCount *int64 `json:"GpuCount,omitempty"`
	// The GPU driver version of the node.
	GpuDriverVersion *string `json:"GpuDriverVersion,omitempty"`
	// Certificate signing request status of the node.
	HasCsr *bool `json:"HasCsr,omitempty"`
	// The name of the host the node is running on.
	HostName *string `json:"HostName,omitempty"`
	// The type of the host, e.g. HYPER_CONVERGED, COMPUTE_ONLY, STORAGE_ONLY.
	HostType *string `json:"HostType,omitempty"`
	// The connection state of the hypervisor, e.g. CONNECTED, DISCONNECTED, NOT_AVAILABLE.
	HypervisorAcropolisConnectionState *string              `json:"HypervisorAcropolisConnectionState,omitempty"`
	HypervisorExternalAddress          NullableHciIpAddress `json:"HypervisorExternalAddress,omitempty"`
	// The number of VMs managed on this node.
	HypervisorNumberOfVms *int64 `json:"HypervisorNumberOfVms,omitempty"`
	// The hypervisor state e.g. ACROPOLIS_NORMAL, ENTERING_MAINTENANCE_MODE, ENTERED_MAINTENANCE_MODE, RESERVED_FOR_HA_FAILOVER, ENTERING_MAINTENANCE_MODE_FROM_HA_FAILOVER, RESERVING_FOR_HA_FAILOVER, HA_FAILOVER_SOURCE, HA_FAILOVER_TARGET, HA_HEALING_SOURCE, HA_HEALING_TARGET.
	HypervisorState *string `json:"HypervisorState,omitempty"`
	// The hypervisor type, e.g. AHV, ESX, HYPERV, XEN, NATIVEHOST etc.
	HypervisorType *string `json:"HypervisorType,omitempty"`
	// The user name of the hypervisor on this node.
	HypervisorUserName *string `json:"HypervisorUserName,omitempty"`
	// The version of the hypervisor on this node.
	HypervisorVersion *string              `json:"HypervisorVersion,omitempty"`
	IpmiIp            NullableHciIpAddress `json:"IpmiIp,omitempty"`
	// The IPMI user name of the controller.
	IpmiUsername *string `json:"IpmiUsername,omitempty"`
	// The degraded status of the node.
	IsDegraded *bool `json:"IsDegraded,omitempty"`
	// The hardware virtualization status of the node.
	IsHardwareVirtualized *bool `json:"IsHardwareVirtualized,omitempty"`
	// The secure boot status of the node.
	IsSecureBooted                  *bool                                    `json:"IsSecureBooted,omitempty"`
	KeyManagementDeviceToCertStatus []HciKeyManagementDeviceToCertStatusInfo `json:"KeyManagementDeviceToCertStatus,omitempty"`
	// The maintenance state of the node.
	MaintenanceState *string `json:"MaintenanceState,omitempty"`
	// The memory capacity in bytes of the node.
	MemoryCapacityBytes *int64 `json:"MemoryCapacityBytes,omitempty"`
	// The memory size in bytes of the node.
	MemorySizeBytes *int64 `json:"MemorySizeBytes,omitempty"`
	// The memory usage in bytes of the node.
	MemoryUsageBytes *int64 `json:"MemoryUsageBytes,omitempty"`
	// The unique identifier of the node.
	NodeExtId *string `json:"NodeExtId,omitempty"`
	// The status of the node such as NORMAL, TO_BE_REMOVED, OK_TO_BE_REMOVED, NEW_NODE, TO_BE_PREPROTECTED, PREPROTECTED.
	NodeStatus *string `json:"NodeStatus,omitempty"`
	// The number of CPU cores on the node.
	NumberOfCpuCores *int64 `json:"NumberOfCpuCores,omitempty"`
	// The number of sockets on the node.
	NumberOfCpuSockets *int64 `json:"NumberOfCpuSockets,omitempty"`
	// The number of threads on the node.
	NumberOfCpuThreads *int64 `json:"NumberOfCpuThreads,omitempty"`
	// The reboot pending status of the node.
	RebootPending *bool `json:"RebootPending,omitempty"`
	// The storage capacity in bytes of the node.
	StorageCapacityBytes *int64 `json:"StorageCapacityBytes,omitempty"`
	// The storage usage in bytes of the node.
	StorageUsageBytes *int64                         `json:"StorageUsageBytes,omitempty"`
	Cluster           NullableHciClusterRelationship `json:"Cluster,omitempty"`
	// An array of relationships to hciDisk resources.
	Disks []HciDiskRelationship `json:"Disks,omitempty"`
	// An array of relationships to hciGpu resources.
	Gpus                 []HciGpuRelationship                        `json:"Gpus,omitempty"`
	PhysicalServer       NullableComputePhysicalRelationship         `json:"PhysicalServer,omitempty"`
	RegisteredDevice     NullableAssetDeviceRegistrationRelationship `json:"RegisteredDevice,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _HciNode HciNode

// NewHciNode instantiates a new HciNode object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHciNode(classId string, objectType string) *HciNode {
	this := HciNode{}
	this.ClassId = classId
	this.ObjectType = objectType
	return &this
}

// NewHciNodeWithDefaults instantiates a new HciNode object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHciNodeWithDefaults() *HciNode {
	this := HciNode{}
	var classId string = "hci.Node"
	this.ClassId = classId
	var objectType string = "hci.Node"
	this.ObjectType = objectType
	return &this
}

// GetClassId returns the ClassId field value
func (o *HciNode) GetClassId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ClassId
}

// GetClassIdOk returns a tuple with the ClassId field value
// and a boolean to check if the value has been set.
func (o *HciNode) GetClassIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ClassId, true
}

// SetClassId sets field value
func (o *HciNode) SetClassId(v string) {
	o.ClassId = v
}

// GetDefaultClassId returns the default value "hci.Node" of the ClassId field.
func (o *HciNode) GetDefaultClassId() interface{} {
	return "hci.Node"
}

// GetObjectType returns the ObjectType field value
func (o *HciNode) GetObjectType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ObjectType
}

// GetObjectTypeOk returns a tuple with the ObjectType field value
// and a boolean to check if the value has been set.
func (o *HciNode) GetObjectTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ObjectType, true
}

// SetObjectType sets field value
func (o *HciNode) SetObjectType(v string) {
	o.ObjectType = v
}

// GetDefaultObjectType returns the default value "hci.Node" of the ObjectType field.
func (o *HciNode) GetDefaultObjectType() interface{} {
	return "hci.Node"
}

// GetBlockModel returns the BlockModel field value if set, zero value otherwise.
func (o *HciNode) GetBlockModel() string {
	if o == nil || IsNil(o.BlockModel) {
		var ret string
		return ret
	}
	return *o.BlockModel
}

// GetBlockModelOk returns a tuple with the BlockModel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HciNode) GetBlockModelOk() (*string, bool) {
	if o == nil || IsNil(o.BlockModel) {
		return nil, false
	}
	return o.BlockModel, true
}

// HasBlockModel returns a boolean if a field has been set.
func (o *HciNode) HasBlockModel() bool {
	if o != nil && !IsNil(o.BlockModel) {
		return true
	}

	return false
}

// SetBlockModel gets a reference to the given string and assigns it to the BlockModel field.
func (o *HciNode) SetBlockModel(v string) {
	o.BlockModel = &v
}

// GetBlockSerial returns the BlockSerial field value if set, zero value otherwise.
func (o *HciNode) GetBlockSerial() string {
	if o == nil || IsNil(o.BlockSerial) {
		var ret string
		return ret
	}
	return *o.BlockSerial
}

// GetBlockSerialOk returns a tuple with the BlockSerial field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HciNode) GetBlockSerialOk() (*string, bool) {
	if o == nil || IsNil(o.BlockSerial) {
		return nil, false
	}
	return o.BlockSerial, true
}

// HasBlockSerial returns a boolean if a field has been set.
func (o *HciNode) HasBlockSerial() bool {
	if o != nil && !IsNil(o.BlockSerial) {
		return true
	}

	return false
}

// SetBlockSerial gets a reference to the given string and assigns it to the BlockSerial field.
func (o *HciNode) SetBlockSerial(v string) {
	o.BlockSerial = &v
}

// GetBootTimeUsecs returns the BootTimeUsecs field value if set, zero value otherwise.
func (o *HciNode) GetBootTimeUsecs() int64 {
	if o == nil || IsNil(o.BootTimeUsecs) {
		var ret int64
		return ret
	}
	return *o.BootTimeUsecs
}

// GetBootTimeUsecsOk returns a tuple with the BootTimeUsecs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HciNode) GetBootTimeUsecsOk() (*int64, bool) {
	if o == nil || IsNil(o.BootTimeUsecs) {
		return nil, false
	}
	return o.BootTimeUsecs, true
}

// HasBootTimeUsecs returns a boolean if a field has been set.
func (o *HciNode) HasBootTimeUsecs() bool {
	if o != nil && !IsNil(o.BootTimeUsecs) {
		return true
	}

	return false
}

// SetBootTimeUsecs gets a reference to the given int64 and assigns it to the BootTimeUsecs field.
func (o *HciNode) SetBootTimeUsecs(v int64) {
	o.BootTimeUsecs = &v
}

// GetClusterExtId returns the ClusterExtId field value if set, zero value otherwise.
func (o *HciNode) GetClusterExtId() string {
	if o == nil || IsNil(o.ClusterExtId) {
		var ret string
		return ret
	}
	return *o.ClusterExtId
}

// GetClusterExtIdOk returns a tuple with the ClusterExtId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HciNode) GetClusterExtIdOk() (*string, bool) {
	if o == nil || IsNil(o.ClusterExtId) {
		return nil, false
	}
	return o.ClusterExtId, true
}

// HasClusterExtId returns a boolean if a field has been set.
func (o *HciNode) HasClusterExtId() bool {
	if o != nil && !IsNil(o.ClusterExtId) {
		return true
	}

	return false
}

// SetClusterExtId gets a reference to the given string and assigns it to the ClusterExtId field.
func (o *HciNode) SetClusterExtId(v string) {
	o.ClusterExtId = &v
}

// GetClusterName returns the ClusterName field value if set, zero value otherwise.
func (o *HciNode) GetClusterName() string {
	if o == nil || IsNil(o.ClusterName) {
		var ret string
		return ret
	}
	return *o.ClusterName
}

// GetClusterNameOk returns a tuple with the ClusterName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HciNode) GetClusterNameOk() (*string, bool) {
	if o == nil || IsNil(o.ClusterName) {
		return nil, false
	}
	return o.ClusterName, true
}

// HasClusterName returns a boolean if a field has been set.
func (o *HciNode) HasClusterName() bool {
	if o != nil && !IsNil(o.ClusterName) {
		return true
	}

	return false
}

// SetClusterName gets a reference to the given string and assigns it to the ClusterName field.
func (o *HciNode) SetClusterName(v string) {
	o.ClusterName = &v
}

// GetControllerVmBackplaneAddress returns the ControllerVmBackplaneAddress field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HciNode) GetControllerVmBackplaneAddress() HciIpAddress {
	if o == nil || IsNil(o.ControllerVmBackplaneAddress.Get()) {
		var ret HciIpAddress
		return ret
	}
	return *o.ControllerVmBackplaneAddress.Get()
}

// GetControllerVmBackplaneAddressOk returns a tuple with the ControllerVmBackplaneAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HciNode) GetControllerVmBackplaneAddressOk() (*HciIpAddress, bool) {
	if o == nil {
		return nil, false
	}
	return o.ControllerVmBackplaneAddress.Get(), o.ControllerVmBackplaneAddress.IsSet()
}

// HasControllerVmBackplaneAddress returns a boolean if a field has been set.
func (o *HciNode) HasControllerVmBackplaneAddress() bool {
	if o != nil && o.ControllerVmBackplaneAddress.IsSet() {
		return true
	}

	return false
}

// SetControllerVmBackplaneAddress gets a reference to the given NullableHciIpAddress and assigns it to the ControllerVmBackplaneAddress field.
func (o *HciNode) SetControllerVmBackplaneAddress(v HciIpAddress) {
	o.ControllerVmBackplaneAddress.Set(&v)
}

// SetControllerVmBackplaneAddressNil sets the value for ControllerVmBackplaneAddress to be an explicit nil
func (o *HciNode) SetControllerVmBackplaneAddressNil() {
	o.ControllerVmBackplaneAddress.Set(nil)
}

// UnsetControllerVmBackplaneAddress ensures that no value is present for ControllerVmBackplaneAddress, not even an explicit nil
func (o *HciNode) UnsetControllerVmBackplaneAddress() {
	o.ControllerVmBackplaneAddress.Unset()
}

// GetControllerVmExternalAddress returns the ControllerVmExternalAddress field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HciNode) GetControllerVmExternalAddress() HciIpAddress {
	if o == nil || IsNil(o.ControllerVmExternalAddress.Get()) {
		var ret HciIpAddress
		return ret
	}
	return *o.ControllerVmExternalAddress.Get()
}

// GetControllerVmExternalAddressOk returns a tuple with the ControllerVmExternalAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HciNode) GetControllerVmExternalAddressOk() (*HciIpAddress, bool) {
	if o == nil {
		return nil, false
	}
	return o.ControllerVmExternalAddress.Get(), o.ControllerVmExternalAddress.IsSet()
}

// HasControllerVmExternalAddress returns a boolean if a field has been set.
func (o *HciNode) HasControllerVmExternalAddress() bool {
	if o != nil && o.ControllerVmExternalAddress.IsSet() {
		return true
	}

	return false
}

// SetControllerVmExternalAddress gets a reference to the given NullableHciIpAddress and assigns it to the ControllerVmExternalAddress field.
func (o *HciNode) SetControllerVmExternalAddress(v HciIpAddress) {
	o.ControllerVmExternalAddress.Set(&v)
}

// SetControllerVmExternalAddressNil sets the value for ControllerVmExternalAddress to be an explicit nil
func (o *HciNode) SetControllerVmExternalAddressNil() {
	o.ControllerVmExternalAddress.Set(nil)
}

// UnsetControllerVmExternalAddress ensures that no value is present for ControllerVmExternalAddress, not even an explicit nil
func (o *HciNode) UnsetControllerVmExternalAddress() {
	o.ControllerVmExternalAddress.Unset()
}

// GetControllerVmId returns the ControllerVmId field value if set, zero value otherwise.
func (o *HciNode) GetControllerVmId() int32 {
	if o == nil || IsNil(o.ControllerVmId) {
		var ret int32
		return ret
	}
	return *o.ControllerVmId
}

// GetControllerVmIdOk returns a tuple with the ControllerVmId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HciNode) GetControllerVmIdOk() (*int32, bool) {
	if o == nil || IsNil(o.ControllerVmId) {
		return nil, false
	}
	return o.ControllerVmId, true
}

// HasControllerVmId returns a boolean if a field has been set.
func (o *HciNode) HasControllerVmId() bool {
	if o != nil && !IsNil(o.ControllerVmId) {
		return true
	}

	return false
}

// SetControllerVmId gets a reference to the given int32 and assigns it to the ControllerVmId field.
func (o *HciNode) SetControllerVmId(v int32) {
	o.ControllerVmId = &v
}

// GetControllerVmMaintanenceMode returns the ControllerVmMaintanenceMode field value if set, zero value otherwise.
func (o *HciNode) GetControllerVmMaintanenceMode() bool {
	if o == nil || IsNil(o.ControllerVmMaintanenceMode) {
		var ret bool
		return ret
	}
	return *o.ControllerVmMaintanenceMode
}

// GetControllerVmMaintanenceModeOk returns a tuple with the ControllerVmMaintanenceMode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HciNode) GetControllerVmMaintanenceModeOk() (*bool, bool) {
	if o == nil || IsNil(o.ControllerVmMaintanenceMode) {
		return nil, false
	}
	return o.ControllerVmMaintanenceMode, true
}

// HasControllerVmMaintanenceMode returns a boolean if a field has been set.
func (o *HciNode) HasControllerVmMaintanenceMode() bool {
	if o != nil && !IsNil(o.ControllerVmMaintanenceMode) {
		return true
	}

	return false
}

// SetControllerVmMaintanenceMode gets a reference to the given bool and assigns it to the ControllerVmMaintanenceMode field.
func (o *HciNode) SetControllerVmMaintanenceMode(v bool) {
	o.ControllerVmMaintanenceMode = &v
}

// GetControllerVmNatIp returns the ControllerVmNatIp field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HciNode) GetControllerVmNatIp() HciIpAddress {
	if o == nil || IsNil(o.ControllerVmNatIp.Get()) {
		var ret HciIpAddress
		return ret
	}
	return *o.ControllerVmNatIp.Get()
}

// GetControllerVmNatIpOk returns a tuple with the ControllerVmNatIp field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HciNode) GetControllerVmNatIpOk() (*HciIpAddress, bool) {
	if o == nil {
		return nil, false
	}
	return o.ControllerVmNatIp.Get(), o.ControllerVmNatIp.IsSet()
}

// HasControllerVmNatIp returns a boolean if a field has been set.
func (o *HciNode) HasControllerVmNatIp() bool {
	if o != nil && o.ControllerVmNatIp.IsSet() {
		return true
	}

	return false
}

// SetControllerVmNatIp gets a reference to the given NullableHciIpAddress and assigns it to the ControllerVmNatIp field.
func (o *HciNode) SetControllerVmNatIp(v HciIpAddress) {
	o.ControllerVmNatIp.Set(&v)
}

// SetControllerVmNatIpNil sets the value for ControllerVmNatIp to be an explicit nil
func (o *HciNode) SetControllerVmNatIpNil() {
	o.ControllerVmNatIp.Set(nil)
}

// UnsetControllerVmNatIp ensures that no value is present for ControllerVmNatIp, not even an explicit nil
func (o *HciNode) UnsetControllerVmNatIp() {
	o.ControllerVmNatIp.Unset()
}

// GetControllerVmNatPort returns the ControllerVmNatPort field value if set, zero value otherwise.
func (o *HciNode) GetControllerVmNatPort() int32 {
	if o == nil || IsNil(o.ControllerVmNatPort) {
		var ret int32
		return ret
	}
	return *o.ControllerVmNatPort
}

// GetControllerVmNatPortOk returns a tuple with the ControllerVmNatPort field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HciNode) GetControllerVmNatPortOk() (*int32, bool) {
	if o == nil || IsNil(o.ControllerVmNatPort) {
		return nil, false
	}
	return o.ControllerVmNatPort, true
}

// HasControllerVmNatPort returns a boolean if a field has been set.
func (o *HciNode) HasControllerVmNatPort() bool {
	if o != nil && !IsNil(o.ControllerVmNatPort) {
		return true
	}

	return false
}

// SetControllerVmNatPort gets a reference to the given int32 and assigns it to the ControllerVmNatPort field.
func (o *HciNode) SetControllerVmNatPort(v int32) {
	o.ControllerVmNatPort = &v
}

// GetControllerVmRdmaBackplaneAddress returns the ControllerVmRdmaBackplaneAddress field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HciNode) GetControllerVmRdmaBackplaneAddress() HciIpAddress {
	if o == nil || IsNil(o.ControllerVmRdmaBackplaneAddress.Get()) {
		var ret HciIpAddress
		return ret
	}
	return *o.ControllerVmRdmaBackplaneAddress.Get()
}

// GetControllerVmRdmaBackplaneAddressOk returns a tuple with the ControllerVmRdmaBackplaneAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HciNode) GetControllerVmRdmaBackplaneAddressOk() (*HciIpAddress, bool) {
	if o == nil {
		return nil, false
	}
	return o.ControllerVmRdmaBackplaneAddress.Get(), o.ControllerVmRdmaBackplaneAddress.IsSet()
}

// HasControllerVmRdmaBackplaneAddress returns a boolean if a field has been set.
func (o *HciNode) HasControllerVmRdmaBackplaneAddress() bool {
	if o != nil && o.ControllerVmRdmaBackplaneAddress.IsSet() {
		return true
	}

	return false
}

// SetControllerVmRdmaBackplaneAddress gets a reference to the given NullableHciIpAddress and assigns it to the ControllerVmRdmaBackplaneAddress field.
func (o *HciNode) SetControllerVmRdmaBackplaneAddress(v HciIpAddress) {
	o.ControllerVmRdmaBackplaneAddress.Set(&v)
}

// SetControllerVmRdmaBackplaneAddressNil sets the value for ControllerVmRdmaBackplaneAddress to be an explicit nil
func (o *HciNode) SetControllerVmRdmaBackplaneAddressNil() {
	o.ControllerVmRdmaBackplaneAddress.Set(nil)
}

// UnsetControllerVmRdmaBackplaneAddress ensures that no value is present for ControllerVmRdmaBackplaneAddress, not even an explicit nil
func (o *HciNode) UnsetControllerVmRdmaBackplaneAddress() {
	o.ControllerVmRdmaBackplaneAddress.Unset()
}

// GetControllerVmServerUuid returns the ControllerVmServerUuid field value if set, zero value otherwise.
func (o *HciNode) GetControllerVmServerUuid() string {
	if o == nil || IsNil(o.ControllerVmServerUuid) {
		var ret string
		return ret
	}
	return *o.ControllerVmServerUuid
}

// GetControllerVmServerUuidOk returns a tuple with the ControllerVmServerUuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HciNode) GetControllerVmServerUuidOk() (*string, bool) {
	if o == nil || IsNil(o.ControllerVmServerUuid) {
		return nil, false
	}
	return o.ControllerVmServerUuid, true
}

// HasControllerVmServerUuid returns a boolean if a field has been set.
func (o *HciNode) HasControllerVmServerUuid() bool {
	if o != nil && !IsNil(o.ControllerVmServerUuid) {
		return true
	}

	return false
}

// SetControllerVmServerUuid gets a reference to the given string and assigns it to the ControllerVmServerUuid field.
func (o *HciNode) SetControllerVmServerUuid(v string) {
	o.ControllerVmServerUuid = &v
}

// GetCpuCapacityHz returns the CpuCapacityHz field value if set, zero value otherwise.
func (o *HciNode) GetCpuCapacityHz() int64 {
	if o == nil || IsNil(o.CpuCapacityHz) {
		var ret int64
		return ret
	}
	return *o.CpuCapacityHz
}

// GetCpuCapacityHzOk returns a tuple with the CpuCapacityHz field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HciNode) GetCpuCapacityHzOk() (*int64, bool) {
	if o == nil || IsNil(o.CpuCapacityHz) {
		return nil, false
	}
	return o.CpuCapacityHz, true
}

// HasCpuCapacityHz returns a boolean if a field has been set.
func (o *HciNode) HasCpuCapacityHz() bool {
	if o != nil && !IsNil(o.CpuCapacityHz) {
		return true
	}

	return false
}

// SetCpuCapacityHz gets a reference to the given int64 and assigns it to the CpuCapacityHz field.
func (o *HciNode) SetCpuCapacityHz(v int64) {
	o.CpuCapacityHz = &v
}

// GetCpuFrequencyHz returns the CpuFrequencyHz field value if set, zero value otherwise.
func (o *HciNode) GetCpuFrequencyHz() int64 {
	if o == nil || IsNil(o.CpuFrequencyHz) {
		var ret int64
		return ret
	}
	return *o.CpuFrequencyHz
}

// GetCpuFrequencyHzOk returns a tuple with the CpuFrequencyHz field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HciNode) GetCpuFrequencyHzOk() (*int64, bool) {
	if o == nil || IsNil(o.CpuFrequencyHz) {
		return nil, false
	}
	return o.CpuFrequencyHz, true
}

// HasCpuFrequencyHz returns a boolean if a field has been set.
func (o *HciNode) HasCpuFrequencyHz() bool {
	if o != nil && !IsNil(o.CpuFrequencyHz) {
		return true
	}

	return false
}

// SetCpuFrequencyHz gets a reference to the given int64 and assigns it to the CpuFrequencyHz field.
func (o *HciNode) SetCpuFrequencyHz(v int64) {
	o.CpuFrequencyHz = &v
}

// GetCpuModel returns the CpuModel field value if set, zero value otherwise.
func (o *HciNode) GetCpuModel() string {
	if o == nil || IsNil(o.CpuModel) {
		var ret string
		return ret
	}
	return *o.CpuModel
}

// GetCpuModelOk returns a tuple with the CpuModel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HciNode) GetCpuModelOk() (*string, bool) {
	if o == nil || IsNil(o.CpuModel) {
		return nil, false
	}
	return o.CpuModel, true
}

// HasCpuModel returns a boolean if a field has been set.
func (o *HciNode) HasCpuModel() bool {
	if o != nil && !IsNil(o.CpuModel) {
		return true
	}

	return false
}

// SetCpuModel gets a reference to the given string and assigns it to the CpuModel field.
func (o *HciNode) SetCpuModel(v string) {
	o.CpuModel = &v
}

// GetCpuUsageHz returns the CpuUsageHz field value if set, zero value otherwise.
func (o *HciNode) GetCpuUsageHz() int64 {
	if o == nil || IsNil(o.CpuUsageHz) {
		var ret int64
		return ret
	}
	return *o.CpuUsageHz
}

// GetCpuUsageHzOk returns a tuple with the CpuUsageHz field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HciNode) GetCpuUsageHzOk() (*int64, bool) {
	if o == nil || IsNil(o.CpuUsageHz) {
		return nil, false
	}
	return o.CpuUsageHz, true
}

// HasCpuUsageHz returns a boolean if a field has been set.
func (o *HciNode) HasCpuUsageHz() bool {
	if o != nil && !IsNil(o.CpuUsageHz) {
		return true
	}

	return false
}

// SetCpuUsageHz gets a reference to the given int64 and assigns it to the CpuUsageHz field.
func (o *HciNode) SetCpuUsageHz(v int64) {
	o.CpuUsageHz = &v
}

// GetDefaultVhdContainerUuid returns the DefaultVhdContainerUuid field value if set, zero value otherwise.
func (o *HciNode) GetDefaultVhdContainerUuid() string {
	if o == nil || IsNil(o.DefaultVhdContainerUuid) {
		var ret string
		return ret
	}
	return *o.DefaultVhdContainerUuid
}

// GetDefaultVhdContainerUuidOk returns a tuple with the DefaultVhdContainerUuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HciNode) GetDefaultVhdContainerUuidOk() (*string, bool) {
	if o == nil || IsNil(o.DefaultVhdContainerUuid) {
		return nil, false
	}
	return o.DefaultVhdContainerUuid, true
}

// HasDefaultVhdContainerUuid returns a boolean if a field has been set.
func (o *HciNode) HasDefaultVhdContainerUuid() bool {
	if o != nil && !IsNil(o.DefaultVhdContainerUuid) {
		return true
	}

	return false
}

// SetDefaultVhdContainerUuid gets a reference to the given string and assigns it to the DefaultVhdContainerUuid field.
func (o *HciNode) SetDefaultVhdContainerUuid(v string) {
	o.DefaultVhdContainerUuid = &v
}

// GetDefaultVhdLocation returns the DefaultVhdLocation field value if set, zero value otherwise.
func (o *HciNode) GetDefaultVhdLocation() string {
	if o == nil || IsNil(o.DefaultVhdLocation) {
		var ret string
		return ret
	}
	return *o.DefaultVhdLocation
}

// GetDefaultVhdLocationOk returns a tuple with the DefaultVhdLocation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HciNode) GetDefaultVhdLocationOk() (*string, bool) {
	if o == nil || IsNil(o.DefaultVhdLocation) {
		return nil, false
	}
	return o.DefaultVhdLocation, true
}

// HasDefaultVhdLocation returns a boolean if a field has been set.
func (o *HciNode) HasDefaultVhdLocation() bool {
	if o != nil && !IsNil(o.DefaultVhdLocation) {
		return true
	}

	return false
}

// SetDefaultVhdLocation gets a reference to the given string and assigns it to the DefaultVhdLocation field.
func (o *HciNode) SetDefaultVhdLocation(v string) {
	o.DefaultVhdLocation = &v
}

// GetDefaultVmContainerUuid returns the DefaultVmContainerUuid field value if set, zero value otherwise.
func (o *HciNode) GetDefaultVmContainerUuid() string {
	if o == nil || IsNil(o.DefaultVmContainerUuid) {
		var ret string
		return ret
	}
	return *o.DefaultVmContainerUuid
}

// GetDefaultVmContainerUuidOk returns a tuple with the DefaultVmContainerUuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HciNode) GetDefaultVmContainerUuidOk() (*string, bool) {
	if o == nil || IsNil(o.DefaultVmContainerUuid) {
		return nil, false
	}
	return o.DefaultVmContainerUuid, true
}

// HasDefaultVmContainerUuid returns a boolean if a field has been set.
func (o *HciNode) HasDefaultVmContainerUuid() bool {
	if o != nil && !IsNil(o.DefaultVmContainerUuid) {
		return true
	}

	return false
}

// SetDefaultVmContainerUuid gets a reference to the given string and assigns it to the DefaultVmContainerUuid field.
func (o *HciNode) SetDefaultVmContainerUuid(v string) {
	o.DefaultVmContainerUuid = &v
}

// GetDefaultVmLocation returns the DefaultVmLocation field value if set, zero value otherwise.
func (o *HciNode) GetDefaultVmLocation() string {
	if o == nil || IsNil(o.DefaultVmLocation) {
		var ret string
		return ret
	}
	return *o.DefaultVmLocation
}

// GetDefaultVmLocationOk returns a tuple with the DefaultVmLocation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HciNode) GetDefaultVmLocationOk() (*string, bool) {
	if o == nil || IsNil(o.DefaultVmLocation) {
		return nil, false
	}
	return o.DefaultVmLocation, true
}

// HasDefaultVmLocation returns a boolean if a field has been set.
func (o *HciNode) HasDefaultVmLocation() bool {
	if o != nil && !IsNil(o.DefaultVmLocation) {
		return true
	}

	return false
}

// SetDefaultVmLocation gets a reference to the given string and assigns it to the DefaultVmLocation field.
func (o *HciNode) SetDefaultVmLocation(v string) {
	o.DefaultVmLocation = &v
}

// GetDiskCount returns the DiskCount field value if set, zero value otherwise.
func (o *HciNode) GetDiskCount() int64 {
	if o == nil || IsNil(o.DiskCount) {
		var ret int64
		return ret
	}
	return *o.DiskCount
}

// GetDiskCountOk returns a tuple with the DiskCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HciNode) GetDiskCountOk() (*int64, bool) {
	if o == nil || IsNil(o.DiskCount) {
		return nil, false
	}
	return o.DiskCount, true
}

// HasDiskCount returns a boolean if a field has been set.
func (o *HciNode) HasDiskCount() bool {
	if o != nil && !IsNil(o.DiskCount) {
		return true
	}

	return false
}

// SetDiskCount gets a reference to the given int64 and assigns it to the DiskCount field.
func (o *HciNode) SetDiskCount(v int64) {
	o.DiskCount = &v
}

// GetFailoverClusterFqdn returns the FailoverClusterFqdn field value if set, zero value otherwise.
func (o *HciNode) GetFailoverClusterFqdn() string {
	if o == nil || IsNil(o.FailoverClusterFqdn) {
		var ret string
		return ret
	}
	return *o.FailoverClusterFqdn
}

// GetFailoverClusterFqdnOk returns a tuple with the FailoverClusterFqdn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HciNode) GetFailoverClusterFqdnOk() (*string, bool) {
	if o == nil || IsNil(o.FailoverClusterFqdn) {
		return nil, false
	}
	return o.FailoverClusterFqdn, true
}

// HasFailoverClusterFqdn returns a boolean if a field has been set.
func (o *HciNode) HasFailoverClusterFqdn() bool {
	if o != nil && !IsNil(o.FailoverClusterFqdn) {
		return true
	}

	return false
}

// SetFailoverClusterFqdn gets a reference to the given string and assigns it to the FailoverClusterFqdn field.
func (o *HciNode) SetFailoverClusterFqdn(v string) {
	o.FailoverClusterFqdn = &v
}

// GetFailoverClusterNodeStatus returns the FailoverClusterNodeStatus field value if set, zero value otherwise.
func (o *HciNode) GetFailoverClusterNodeStatus() string {
	if o == nil || IsNil(o.FailoverClusterNodeStatus) {
		var ret string
		return ret
	}
	return *o.FailoverClusterNodeStatus
}

// GetFailoverClusterNodeStatusOk returns a tuple with the FailoverClusterNodeStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HciNode) GetFailoverClusterNodeStatusOk() (*string, bool) {
	if o == nil || IsNil(o.FailoverClusterNodeStatus) {
		return nil, false
	}
	return o.FailoverClusterNodeStatus, true
}

// HasFailoverClusterNodeStatus returns a boolean if a field has been set.
func (o *HciNode) HasFailoverClusterNodeStatus() bool {
	if o != nil && !IsNil(o.FailoverClusterNodeStatus) {
		return true
	}

	return false
}

// SetFailoverClusterNodeStatus gets a reference to the given string and assigns it to the FailoverClusterNodeStatus field.
func (o *HciNode) SetFailoverClusterNodeStatus(v string) {
	o.FailoverClusterNodeStatus = &v
}

// GetGpuCount returns the GpuCount field value if set, zero value otherwise.
func (o *HciNode) GetGpuCount() int64 {
	if o == nil || IsNil(o.GpuCount) {
		var ret int64
		return ret
	}
	return *o.GpuCount
}

// GetGpuCountOk returns a tuple with the GpuCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HciNode) GetGpuCountOk() (*int64, bool) {
	if o == nil || IsNil(o.GpuCount) {
		return nil, false
	}
	return o.GpuCount, true
}

// HasGpuCount returns a boolean if a field has been set.
func (o *HciNode) HasGpuCount() bool {
	if o != nil && !IsNil(o.GpuCount) {
		return true
	}

	return false
}

// SetGpuCount gets a reference to the given int64 and assigns it to the GpuCount field.
func (o *HciNode) SetGpuCount(v int64) {
	o.GpuCount = &v
}

// GetGpuDriverVersion returns the GpuDriverVersion field value if set, zero value otherwise.
func (o *HciNode) GetGpuDriverVersion() string {
	if o == nil || IsNil(o.GpuDriverVersion) {
		var ret string
		return ret
	}
	return *o.GpuDriverVersion
}

// GetGpuDriverVersionOk returns a tuple with the GpuDriverVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HciNode) GetGpuDriverVersionOk() (*string, bool) {
	if o == nil || IsNil(o.GpuDriverVersion) {
		return nil, false
	}
	return o.GpuDriverVersion, true
}

// HasGpuDriverVersion returns a boolean if a field has been set.
func (o *HciNode) HasGpuDriverVersion() bool {
	if o != nil && !IsNil(o.GpuDriverVersion) {
		return true
	}

	return false
}

// SetGpuDriverVersion gets a reference to the given string and assigns it to the GpuDriverVersion field.
func (o *HciNode) SetGpuDriverVersion(v string) {
	o.GpuDriverVersion = &v
}

// GetHasCsr returns the HasCsr field value if set, zero value otherwise.
func (o *HciNode) GetHasCsr() bool {
	if o == nil || IsNil(o.HasCsr) {
		var ret bool
		return ret
	}
	return *o.HasCsr
}

// GetHasCsrOk returns a tuple with the HasCsr field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HciNode) GetHasCsrOk() (*bool, bool) {
	if o == nil || IsNil(o.HasCsr) {
		return nil, false
	}
	return o.HasCsr, true
}

// HasHasCsr returns a boolean if a field has been set.
func (o *HciNode) HasHasCsr() bool {
	if o != nil && !IsNil(o.HasCsr) {
		return true
	}

	return false
}

// SetHasCsr gets a reference to the given bool and assigns it to the HasCsr field.
func (o *HciNode) SetHasCsr(v bool) {
	o.HasCsr = &v
}

// GetHostName returns the HostName field value if set, zero value otherwise.
func (o *HciNode) GetHostName() string {
	if o == nil || IsNil(o.HostName) {
		var ret string
		return ret
	}
	return *o.HostName
}

// GetHostNameOk returns a tuple with the HostName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HciNode) GetHostNameOk() (*string, bool) {
	if o == nil || IsNil(o.HostName) {
		return nil, false
	}
	return o.HostName, true
}

// HasHostName returns a boolean if a field has been set.
func (o *HciNode) HasHostName() bool {
	if o != nil && !IsNil(o.HostName) {
		return true
	}

	return false
}

// SetHostName gets a reference to the given string and assigns it to the HostName field.
func (o *HciNode) SetHostName(v string) {
	o.HostName = &v
}

// GetHostType returns the HostType field value if set, zero value otherwise.
func (o *HciNode) GetHostType() string {
	if o == nil || IsNil(o.HostType) {
		var ret string
		return ret
	}
	return *o.HostType
}

// GetHostTypeOk returns a tuple with the HostType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HciNode) GetHostTypeOk() (*string, bool) {
	if o == nil || IsNil(o.HostType) {
		return nil, false
	}
	return o.HostType, true
}

// HasHostType returns a boolean if a field has been set.
func (o *HciNode) HasHostType() bool {
	if o != nil && !IsNil(o.HostType) {
		return true
	}

	return false
}

// SetHostType gets a reference to the given string and assigns it to the HostType field.
func (o *HciNode) SetHostType(v string) {
	o.HostType = &v
}

// GetHypervisorAcropolisConnectionState returns the HypervisorAcropolisConnectionState field value if set, zero value otherwise.
func (o *HciNode) GetHypervisorAcropolisConnectionState() string {
	if o == nil || IsNil(o.HypervisorAcropolisConnectionState) {
		var ret string
		return ret
	}
	return *o.HypervisorAcropolisConnectionState
}

// GetHypervisorAcropolisConnectionStateOk returns a tuple with the HypervisorAcropolisConnectionState field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HciNode) GetHypervisorAcropolisConnectionStateOk() (*string, bool) {
	if o == nil || IsNil(o.HypervisorAcropolisConnectionState) {
		return nil, false
	}
	return o.HypervisorAcropolisConnectionState, true
}

// HasHypervisorAcropolisConnectionState returns a boolean if a field has been set.
func (o *HciNode) HasHypervisorAcropolisConnectionState() bool {
	if o != nil && !IsNil(o.HypervisorAcropolisConnectionState) {
		return true
	}

	return false
}

// SetHypervisorAcropolisConnectionState gets a reference to the given string and assigns it to the HypervisorAcropolisConnectionState field.
func (o *HciNode) SetHypervisorAcropolisConnectionState(v string) {
	o.HypervisorAcropolisConnectionState = &v
}

// GetHypervisorExternalAddress returns the HypervisorExternalAddress field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HciNode) GetHypervisorExternalAddress() HciIpAddress {
	if o == nil || IsNil(o.HypervisorExternalAddress.Get()) {
		var ret HciIpAddress
		return ret
	}
	return *o.HypervisorExternalAddress.Get()
}

// GetHypervisorExternalAddressOk returns a tuple with the HypervisorExternalAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HciNode) GetHypervisorExternalAddressOk() (*HciIpAddress, bool) {
	if o == nil {
		return nil, false
	}
	return o.HypervisorExternalAddress.Get(), o.HypervisorExternalAddress.IsSet()
}

// HasHypervisorExternalAddress returns a boolean if a field has been set.
func (o *HciNode) HasHypervisorExternalAddress() bool {
	if o != nil && o.HypervisorExternalAddress.IsSet() {
		return true
	}

	return false
}

// SetHypervisorExternalAddress gets a reference to the given NullableHciIpAddress and assigns it to the HypervisorExternalAddress field.
func (o *HciNode) SetHypervisorExternalAddress(v HciIpAddress) {
	o.HypervisorExternalAddress.Set(&v)
}

// SetHypervisorExternalAddressNil sets the value for HypervisorExternalAddress to be an explicit nil
func (o *HciNode) SetHypervisorExternalAddressNil() {
	o.HypervisorExternalAddress.Set(nil)
}

// UnsetHypervisorExternalAddress ensures that no value is present for HypervisorExternalAddress, not even an explicit nil
func (o *HciNode) UnsetHypervisorExternalAddress() {
	o.HypervisorExternalAddress.Unset()
}

// GetHypervisorNumberOfVms returns the HypervisorNumberOfVms field value if set, zero value otherwise.
func (o *HciNode) GetHypervisorNumberOfVms() int64 {
	if o == nil || IsNil(o.HypervisorNumberOfVms) {
		var ret int64
		return ret
	}
	return *o.HypervisorNumberOfVms
}

// GetHypervisorNumberOfVmsOk returns a tuple with the HypervisorNumberOfVms field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HciNode) GetHypervisorNumberOfVmsOk() (*int64, bool) {
	if o == nil || IsNil(o.HypervisorNumberOfVms) {
		return nil, false
	}
	return o.HypervisorNumberOfVms, true
}

// HasHypervisorNumberOfVms returns a boolean if a field has been set.
func (o *HciNode) HasHypervisorNumberOfVms() bool {
	if o != nil && !IsNil(o.HypervisorNumberOfVms) {
		return true
	}

	return false
}

// SetHypervisorNumberOfVms gets a reference to the given int64 and assigns it to the HypervisorNumberOfVms field.
func (o *HciNode) SetHypervisorNumberOfVms(v int64) {
	o.HypervisorNumberOfVms = &v
}

// GetHypervisorState returns the HypervisorState field value if set, zero value otherwise.
func (o *HciNode) GetHypervisorState() string {
	if o == nil || IsNil(o.HypervisorState) {
		var ret string
		return ret
	}
	return *o.HypervisorState
}

// GetHypervisorStateOk returns a tuple with the HypervisorState field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HciNode) GetHypervisorStateOk() (*string, bool) {
	if o == nil || IsNil(o.HypervisorState) {
		return nil, false
	}
	return o.HypervisorState, true
}

// HasHypervisorState returns a boolean if a field has been set.
func (o *HciNode) HasHypervisorState() bool {
	if o != nil && !IsNil(o.HypervisorState) {
		return true
	}

	return false
}

// SetHypervisorState gets a reference to the given string and assigns it to the HypervisorState field.
func (o *HciNode) SetHypervisorState(v string) {
	o.HypervisorState = &v
}

// GetHypervisorType returns the HypervisorType field value if set, zero value otherwise.
func (o *HciNode) GetHypervisorType() string {
	if o == nil || IsNil(o.HypervisorType) {
		var ret string
		return ret
	}
	return *o.HypervisorType
}

// GetHypervisorTypeOk returns a tuple with the HypervisorType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HciNode) GetHypervisorTypeOk() (*string, bool) {
	if o == nil || IsNil(o.HypervisorType) {
		return nil, false
	}
	return o.HypervisorType, true
}

// HasHypervisorType returns a boolean if a field has been set.
func (o *HciNode) HasHypervisorType() bool {
	if o != nil && !IsNil(o.HypervisorType) {
		return true
	}

	return false
}

// SetHypervisorType gets a reference to the given string and assigns it to the HypervisorType field.
func (o *HciNode) SetHypervisorType(v string) {
	o.HypervisorType = &v
}

// GetHypervisorUserName returns the HypervisorUserName field value if set, zero value otherwise.
func (o *HciNode) GetHypervisorUserName() string {
	if o == nil || IsNil(o.HypervisorUserName) {
		var ret string
		return ret
	}
	return *o.HypervisorUserName
}

// GetHypervisorUserNameOk returns a tuple with the HypervisorUserName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HciNode) GetHypervisorUserNameOk() (*string, bool) {
	if o == nil || IsNil(o.HypervisorUserName) {
		return nil, false
	}
	return o.HypervisorUserName, true
}

// HasHypervisorUserName returns a boolean if a field has been set.
func (o *HciNode) HasHypervisorUserName() bool {
	if o != nil && !IsNil(o.HypervisorUserName) {
		return true
	}

	return false
}

// SetHypervisorUserName gets a reference to the given string and assigns it to the HypervisorUserName field.
func (o *HciNode) SetHypervisorUserName(v string) {
	o.HypervisorUserName = &v
}

// GetHypervisorVersion returns the HypervisorVersion field value if set, zero value otherwise.
func (o *HciNode) GetHypervisorVersion() string {
	if o == nil || IsNil(o.HypervisorVersion) {
		var ret string
		return ret
	}
	return *o.HypervisorVersion
}

// GetHypervisorVersionOk returns a tuple with the HypervisorVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HciNode) GetHypervisorVersionOk() (*string, bool) {
	if o == nil || IsNil(o.HypervisorVersion) {
		return nil, false
	}
	return o.HypervisorVersion, true
}

// HasHypervisorVersion returns a boolean if a field has been set.
func (o *HciNode) HasHypervisorVersion() bool {
	if o != nil && !IsNil(o.HypervisorVersion) {
		return true
	}

	return false
}

// SetHypervisorVersion gets a reference to the given string and assigns it to the HypervisorVersion field.
func (o *HciNode) SetHypervisorVersion(v string) {
	o.HypervisorVersion = &v
}

// GetIpmiIp returns the IpmiIp field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HciNode) GetIpmiIp() HciIpAddress {
	if o == nil || IsNil(o.IpmiIp.Get()) {
		var ret HciIpAddress
		return ret
	}
	return *o.IpmiIp.Get()
}

// GetIpmiIpOk returns a tuple with the IpmiIp field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HciNode) GetIpmiIpOk() (*HciIpAddress, bool) {
	if o == nil {
		return nil, false
	}
	return o.IpmiIp.Get(), o.IpmiIp.IsSet()
}

// HasIpmiIp returns a boolean if a field has been set.
func (o *HciNode) HasIpmiIp() bool {
	if o != nil && o.IpmiIp.IsSet() {
		return true
	}

	return false
}

// SetIpmiIp gets a reference to the given NullableHciIpAddress and assigns it to the IpmiIp field.
func (o *HciNode) SetIpmiIp(v HciIpAddress) {
	o.IpmiIp.Set(&v)
}

// SetIpmiIpNil sets the value for IpmiIp to be an explicit nil
func (o *HciNode) SetIpmiIpNil() {
	o.IpmiIp.Set(nil)
}

// UnsetIpmiIp ensures that no value is present for IpmiIp, not even an explicit nil
func (o *HciNode) UnsetIpmiIp() {
	o.IpmiIp.Unset()
}

// GetIpmiUsername returns the IpmiUsername field value if set, zero value otherwise.
func (o *HciNode) GetIpmiUsername() string {
	if o == nil || IsNil(o.IpmiUsername) {
		var ret string
		return ret
	}
	return *o.IpmiUsername
}

// GetIpmiUsernameOk returns a tuple with the IpmiUsername field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HciNode) GetIpmiUsernameOk() (*string, bool) {
	if o == nil || IsNil(o.IpmiUsername) {
		return nil, false
	}
	return o.IpmiUsername, true
}

// HasIpmiUsername returns a boolean if a field has been set.
func (o *HciNode) HasIpmiUsername() bool {
	if o != nil && !IsNil(o.IpmiUsername) {
		return true
	}

	return false
}

// SetIpmiUsername gets a reference to the given string and assigns it to the IpmiUsername field.
func (o *HciNode) SetIpmiUsername(v string) {
	o.IpmiUsername = &v
}

// GetIsDegraded returns the IsDegraded field value if set, zero value otherwise.
func (o *HciNode) GetIsDegraded() bool {
	if o == nil || IsNil(o.IsDegraded) {
		var ret bool
		return ret
	}
	return *o.IsDegraded
}

// GetIsDegradedOk returns a tuple with the IsDegraded field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HciNode) GetIsDegradedOk() (*bool, bool) {
	if o == nil || IsNil(o.IsDegraded) {
		return nil, false
	}
	return o.IsDegraded, true
}

// HasIsDegraded returns a boolean if a field has been set.
func (o *HciNode) HasIsDegraded() bool {
	if o != nil && !IsNil(o.IsDegraded) {
		return true
	}

	return false
}

// SetIsDegraded gets a reference to the given bool and assigns it to the IsDegraded field.
func (o *HciNode) SetIsDegraded(v bool) {
	o.IsDegraded = &v
}

// GetIsHardwareVirtualized returns the IsHardwareVirtualized field value if set, zero value otherwise.
func (o *HciNode) GetIsHardwareVirtualized() bool {
	if o == nil || IsNil(o.IsHardwareVirtualized) {
		var ret bool
		return ret
	}
	return *o.IsHardwareVirtualized
}

// GetIsHardwareVirtualizedOk returns a tuple with the IsHardwareVirtualized field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HciNode) GetIsHardwareVirtualizedOk() (*bool, bool) {
	if o == nil || IsNil(o.IsHardwareVirtualized) {
		return nil, false
	}
	return o.IsHardwareVirtualized, true
}

// HasIsHardwareVirtualized returns a boolean if a field has been set.
func (o *HciNode) HasIsHardwareVirtualized() bool {
	if o != nil && !IsNil(o.IsHardwareVirtualized) {
		return true
	}

	return false
}

// SetIsHardwareVirtualized gets a reference to the given bool and assigns it to the IsHardwareVirtualized field.
func (o *HciNode) SetIsHardwareVirtualized(v bool) {
	o.IsHardwareVirtualized = &v
}

// GetIsSecureBooted returns the IsSecureBooted field value if set, zero value otherwise.
func (o *HciNode) GetIsSecureBooted() bool {
	if o == nil || IsNil(o.IsSecureBooted) {
		var ret bool
		return ret
	}
	return *o.IsSecureBooted
}

// GetIsSecureBootedOk returns a tuple with the IsSecureBooted field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HciNode) GetIsSecureBootedOk() (*bool, bool) {
	if o == nil || IsNil(o.IsSecureBooted) {
		return nil, false
	}
	return o.IsSecureBooted, true
}

// HasIsSecureBooted returns a boolean if a field has been set.
func (o *HciNode) HasIsSecureBooted() bool {
	if o != nil && !IsNil(o.IsSecureBooted) {
		return true
	}

	return false
}

// SetIsSecureBooted gets a reference to the given bool and assigns it to the IsSecureBooted field.
func (o *HciNode) SetIsSecureBooted(v bool) {
	o.IsSecureBooted = &v
}

// GetKeyManagementDeviceToCertStatus returns the KeyManagementDeviceToCertStatus field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HciNode) GetKeyManagementDeviceToCertStatus() []HciKeyManagementDeviceToCertStatusInfo {
	if o == nil {
		var ret []HciKeyManagementDeviceToCertStatusInfo
		return ret
	}
	return o.KeyManagementDeviceToCertStatus
}

// GetKeyManagementDeviceToCertStatusOk returns a tuple with the KeyManagementDeviceToCertStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HciNode) GetKeyManagementDeviceToCertStatusOk() ([]HciKeyManagementDeviceToCertStatusInfo, bool) {
	if o == nil || IsNil(o.KeyManagementDeviceToCertStatus) {
		return nil, false
	}
	return o.KeyManagementDeviceToCertStatus, true
}

// HasKeyManagementDeviceToCertStatus returns a boolean if a field has been set.
func (o *HciNode) HasKeyManagementDeviceToCertStatus() bool {
	if o != nil && !IsNil(o.KeyManagementDeviceToCertStatus) {
		return true
	}

	return false
}

// SetKeyManagementDeviceToCertStatus gets a reference to the given []HciKeyManagementDeviceToCertStatusInfo and assigns it to the KeyManagementDeviceToCertStatus field.
func (o *HciNode) SetKeyManagementDeviceToCertStatus(v []HciKeyManagementDeviceToCertStatusInfo) {
	o.KeyManagementDeviceToCertStatus = v
}

// GetMaintenanceState returns the MaintenanceState field value if set, zero value otherwise.
func (o *HciNode) GetMaintenanceState() string {
	if o == nil || IsNil(o.MaintenanceState) {
		var ret string
		return ret
	}
	return *o.MaintenanceState
}

// GetMaintenanceStateOk returns a tuple with the MaintenanceState field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HciNode) GetMaintenanceStateOk() (*string, bool) {
	if o == nil || IsNil(o.MaintenanceState) {
		return nil, false
	}
	return o.MaintenanceState, true
}

// HasMaintenanceState returns a boolean if a field has been set.
func (o *HciNode) HasMaintenanceState() bool {
	if o != nil && !IsNil(o.MaintenanceState) {
		return true
	}

	return false
}

// SetMaintenanceState gets a reference to the given string and assigns it to the MaintenanceState field.
func (o *HciNode) SetMaintenanceState(v string) {
	o.MaintenanceState = &v
}

// GetMemoryCapacityBytes returns the MemoryCapacityBytes field value if set, zero value otherwise.
func (o *HciNode) GetMemoryCapacityBytes() int64 {
	if o == nil || IsNil(o.MemoryCapacityBytes) {
		var ret int64
		return ret
	}
	return *o.MemoryCapacityBytes
}

// GetMemoryCapacityBytesOk returns a tuple with the MemoryCapacityBytes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HciNode) GetMemoryCapacityBytesOk() (*int64, bool) {
	if o == nil || IsNil(o.MemoryCapacityBytes) {
		return nil, false
	}
	return o.MemoryCapacityBytes, true
}

// HasMemoryCapacityBytes returns a boolean if a field has been set.
func (o *HciNode) HasMemoryCapacityBytes() bool {
	if o != nil && !IsNil(o.MemoryCapacityBytes) {
		return true
	}

	return false
}

// SetMemoryCapacityBytes gets a reference to the given int64 and assigns it to the MemoryCapacityBytes field.
func (o *HciNode) SetMemoryCapacityBytes(v int64) {
	o.MemoryCapacityBytes = &v
}

// GetMemorySizeBytes returns the MemorySizeBytes field value if set, zero value otherwise.
func (o *HciNode) GetMemorySizeBytes() int64 {
	if o == nil || IsNil(o.MemorySizeBytes) {
		var ret int64
		return ret
	}
	return *o.MemorySizeBytes
}

// GetMemorySizeBytesOk returns a tuple with the MemorySizeBytes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HciNode) GetMemorySizeBytesOk() (*int64, bool) {
	if o == nil || IsNil(o.MemorySizeBytes) {
		return nil, false
	}
	return o.MemorySizeBytes, true
}

// HasMemorySizeBytes returns a boolean if a field has been set.
func (o *HciNode) HasMemorySizeBytes() bool {
	if o != nil && !IsNil(o.MemorySizeBytes) {
		return true
	}

	return false
}

// SetMemorySizeBytes gets a reference to the given int64 and assigns it to the MemorySizeBytes field.
func (o *HciNode) SetMemorySizeBytes(v int64) {
	o.MemorySizeBytes = &v
}

// GetMemoryUsageBytes returns the MemoryUsageBytes field value if set, zero value otherwise.
func (o *HciNode) GetMemoryUsageBytes() int64 {
	if o == nil || IsNil(o.MemoryUsageBytes) {
		var ret int64
		return ret
	}
	return *o.MemoryUsageBytes
}

// GetMemoryUsageBytesOk returns a tuple with the MemoryUsageBytes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HciNode) GetMemoryUsageBytesOk() (*int64, bool) {
	if o == nil || IsNil(o.MemoryUsageBytes) {
		return nil, false
	}
	return o.MemoryUsageBytes, true
}

// HasMemoryUsageBytes returns a boolean if a field has been set.
func (o *HciNode) HasMemoryUsageBytes() bool {
	if o != nil && !IsNil(o.MemoryUsageBytes) {
		return true
	}

	return false
}

// SetMemoryUsageBytes gets a reference to the given int64 and assigns it to the MemoryUsageBytes field.
func (o *HciNode) SetMemoryUsageBytes(v int64) {
	o.MemoryUsageBytes = &v
}

// GetNodeExtId returns the NodeExtId field value if set, zero value otherwise.
func (o *HciNode) GetNodeExtId() string {
	if o == nil || IsNil(o.NodeExtId) {
		var ret string
		return ret
	}
	return *o.NodeExtId
}

// GetNodeExtIdOk returns a tuple with the NodeExtId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HciNode) GetNodeExtIdOk() (*string, bool) {
	if o == nil || IsNil(o.NodeExtId) {
		return nil, false
	}
	return o.NodeExtId, true
}

// HasNodeExtId returns a boolean if a field has been set.
func (o *HciNode) HasNodeExtId() bool {
	if o != nil && !IsNil(o.NodeExtId) {
		return true
	}

	return false
}

// SetNodeExtId gets a reference to the given string and assigns it to the NodeExtId field.
func (o *HciNode) SetNodeExtId(v string) {
	o.NodeExtId = &v
}

// GetNodeStatus returns the NodeStatus field value if set, zero value otherwise.
func (o *HciNode) GetNodeStatus() string {
	if o == nil || IsNil(o.NodeStatus) {
		var ret string
		return ret
	}
	return *o.NodeStatus
}

// GetNodeStatusOk returns a tuple with the NodeStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HciNode) GetNodeStatusOk() (*string, bool) {
	if o == nil || IsNil(o.NodeStatus) {
		return nil, false
	}
	return o.NodeStatus, true
}

// HasNodeStatus returns a boolean if a field has been set.
func (o *HciNode) HasNodeStatus() bool {
	if o != nil && !IsNil(o.NodeStatus) {
		return true
	}

	return false
}

// SetNodeStatus gets a reference to the given string and assigns it to the NodeStatus field.
func (o *HciNode) SetNodeStatus(v string) {
	o.NodeStatus = &v
}

// GetNumberOfCpuCores returns the NumberOfCpuCores field value if set, zero value otherwise.
func (o *HciNode) GetNumberOfCpuCores() int64 {
	if o == nil || IsNil(o.NumberOfCpuCores) {
		var ret int64
		return ret
	}
	return *o.NumberOfCpuCores
}

// GetNumberOfCpuCoresOk returns a tuple with the NumberOfCpuCores field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HciNode) GetNumberOfCpuCoresOk() (*int64, bool) {
	if o == nil || IsNil(o.NumberOfCpuCores) {
		return nil, false
	}
	return o.NumberOfCpuCores, true
}

// HasNumberOfCpuCores returns a boolean if a field has been set.
func (o *HciNode) HasNumberOfCpuCores() bool {
	if o != nil && !IsNil(o.NumberOfCpuCores) {
		return true
	}

	return false
}

// SetNumberOfCpuCores gets a reference to the given int64 and assigns it to the NumberOfCpuCores field.
func (o *HciNode) SetNumberOfCpuCores(v int64) {
	o.NumberOfCpuCores = &v
}

// GetNumberOfCpuSockets returns the NumberOfCpuSockets field value if set, zero value otherwise.
func (o *HciNode) GetNumberOfCpuSockets() int64 {
	if o == nil || IsNil(o.NumberOfCpuSockets) {
		var ret int64
		return ret
	}
	return *o.NumberOfCpuSockets
}

// GetNumberOfCpuSocketsOk returns a tuple with the NumberOfCpuSockets field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HciNode) GetNumberOfCpuSocketsOk() (*int64, bool) {
	if o == nil || IsNil(o.NumberOfCpuSockets) {
		return nil, false
	}
	return o.NumberOfCpuSockets, true
}

// HasNumberOfCpuSockets returns a boolean if a field has been set.
func (o *HciNode) HasNumberOfCpuSockets() bool {
	if o != nil && !IsNil(o.NumberOfCpuSockets) {
		return true
	}

	return false
}

// SetNumberOfCpuSockets gets a reference to the given int64 and assigns it to the NumberOfCpuSockets field.
func (o *HciNode) SetNumberOfCpuSockets(v int64) {
	o.NumberOfCpuSockets = &v
}

// GetNumberOfCpuThreads returns the NumberOfCpuThreads field value if set, zero value otherwise.
func (o *HciNode) GetNumberOfCpuThreads() int64 {
	if o == nil || IsNil(o.NumberOfCpuThreads) {
		var ret int64
		return ret
	}
	return *o.NumberOfCpuThreads
}

// GetNumberOfCpuThreadsOk returns a tuple with the NumberOfCpuThreads field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HciNode) GetNumberOfCpuThreadsOk() (*int64, bool) {
	if o == nil || IsNil(o.NumberOfCpuThreads) {
		return nil, false
	}
	return o.NumberOfCpuThreads, true
}

// HasNumberOfCpuThreads returns a boolean if a field has been set.
func (o *HciNode) HasNumberOfCpuThreads() bool {
	if o != nil && !IsNil(o.NumberOfCpuThreads) {
		return true
	}

	return false
}

// SetNumberOfCpuThreads gets a reference to the given int64 and assigns it to the NumberOfCpuThreads field.
func (o *HciNode) SetNumberOfCpuThreads(v int64) {
	o.NumberOfCpuThreads = &v
}

// GetRebootPending returns the RebootPending field value if set, zero value otherwise.
func (o *HciNode) GetRebootPending() bool {
	if o == nil || IsNil(o.RebootPending) {
		var ret bool
		return ret
	}
	return *o.RebootPending
}

// GetRebootPendingOk returns a tuple with the RebootPending field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HciNode) GetRebootPendingOk() (*bool, bool) {
	if o == nil || IsNil(o.RebootPending) {
		return nil, false
	}
	return o.RebootPending, true
}

// HasRebootPending returns a boolean if a field has been set.
func (o *HciNode) HasRebootPending() bool {
	if o != nil && !IsNil(o.RebootPending) {
		return true
	}

	return false
}

// SetRebootPending gets a reference to the given bool and assigns it to the RebootPending field.
func (o *HciNode) SetRebootPending(v bool) {
	o.RebootPending = &v
}

// GetStorageCapacityBytes returns the StorageCapacityBytes field value if set, zero value otherwise.
func (o *HciNode) GetStorageCapacityBytes() int64 {
	if o == nil || IsNil(o.StorageCapacityBytes) {
		var ret int64
		return ret
	}
	return *o.StorageCapacityBytes
}

// GetStorageCapacityBytesOk returns a tuple with the StorageCapacityBytes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HciNode) GetStorageCapacityBytesOk() (*int64, bool) {
	if o == nil || IsNil(o.StorageCapacityBytes) {
		return nil, false
	}
	return o.StorageCapacityBytes, true
}

// HasStorageCapacityBytes returns a boolean if a field has been set.
func (o *HciNode) HasStorageCapacityBytes() bool {
	if o != nil && !IsNil(o.StorageCapacityBytes) {
		return true
	}

	return false
}

// SetStorageCapacityBytes gets a reference to the given int64 and assigns it to the StorageCapacityBytes field.
func (o *HciNode) SetStorageCapacityBytes(v int64) {
	o.StorageCapacityBytes = &v
}

// GetStorageUsageBytes returns the StorageUsageBytes field value if set, zero value otherwise.
func (o *HciNode) GetStorageUsageBytes() int64 {
	if o == nil || IsNil(o.StorageUsageBytes) {
		var ret int64
		return ret
	}
	return *o.StorageUsageBytes
}

// GetStorageUsageBytesOk returns a tuple with the StorageUsageBytes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HciNode) GetStorageUsageBytesOk() (*int64, bool) {
	if o == nil || IsNil(o.StorageUsageBytes) {
		return nil, false
	}
	return o.StorageUsageBytes, true
}

// HasStorageUsageBytes returns a boolean if a field has been set.
func (o *HciNode) HasStorageUsageBytes() bool {
	if o != nil && !IsNil(o.StorageUsageBytes) {
		return true
	}

	return false
}

// SetStorageUsageBytes gets a reference to the given int64 and assigns it to the StorageUsageBytes field.
func (o *HciNode) SetStorageUsageBytes(v int64) {
	o.StorageUsageBytes = &v
}

// GetCluster returns the Cluster field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HciNode) GetCluster() HciClusterRelationship {
	if o == nil || IsNil(o.Cluster.Get()) {
		var ret HciClusterRelationship
		return ret
	}
	return *o.Cluster.Get()
}

// GetClusterOk returns a tuple with the Cluster field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HciNode) GetClusterOk() (*HciClusterRelationship, bool) {
	if o == nil {
		return nil, false
	}
	return o.Cluster.Get(), o.Cluster.IsSet()
}

// HasCluster returns a boolean if a field has been set.
func (o *HciNode) HasCluster() bool {
	if o != nil && o.Cluster.IsSet() {
		return true
	}

	return false
}

// SetCluster gets a reference to the given NullableHciClusterRelationship and assigns it to the Cluster field.
func (o *HciNode) SetCluster(v HciClusterRelationship) {
	o.Cluster.Set(&v)
}

// SetClusterNil sets the value for Cluster to be an explicit nil
func (o *HciNode) SetClusterNil() {
	o.Cluster.Set(nil)
}

// UnsetCluster ensures that no value is present for Cluster, not even an explicit nil
func (o *HciNode) UnsetCluster() {
	o.Cluster.Unset()
}

// GetDisks returns the Disks field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HciNode) GetDisks() []HciDiskRelationship {
	if o == nil {
		var ret []HciDiskRelationship
		return ret
	}
	return o.Disks
}

// GetDisksOk returns a tuple with the Disks field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HciNode) GetDisksOk() ([]HciDiskRelationship, bool) {
	if o == nil || IsNil(o.Disks) {
		return nil, false
	}
	return o.Disks, true
}

// HasDisks returns a boolean if a field has been set.
func (o *HciNode) HasDisks() bool {
	if o != nil && !IsNil(o.Disks) {
		return true
	}

	return false
}

// SetDisks gets a reference to the given []HciDiskRelationship and assigns it to the Disks field.
func (o *HciNode) SetDisks(v []HciDiskRelationship) {
	o.Disks = v
}

// GetGpus returns the Gpus field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HciNode) GetGpus() []HciGpuRelationship {
	if o == nil {
		var ret []HciGpuRelationship
		return ret
	}
	return o.Gpus
}

// GetGpusOk returns a tuple with the Gpus field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HciNode) GetGpusOk() ([]HciGpuRelationship, bool) {
	if o == nil || IsNil(o.Gpus) {
		return nil, false
	}
	return o.Gpus, true
}

// HasGpus returns a boolean if a field has been set.
func (o *HciNode) HasGpus() bool {
	if o != nil && !IsNil(o.Gpus) {
		return true
	}

	return false
}

// SetGpus gets a reference to the given []HciGpuRelationship and assigns it to the Gpus field.
func (o *HciNode) SetGpus(v []HciGpuRelationship) {
	o.Gpus = v
}

// GetPhysicalServer returns the PhysicalServer field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HciNode) GetPhysicalServer() ComputePhysicalRelationship {
	if o == nil || IsNil(o.PhysicalServer.Get()) {
		var ret ComputePhysicalRelationship
		return ret
	}
	return *o.PhysicalServer.Get()
}

// GetPhysicalServerOk returns a tuple with the PhysicalServer field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HciNode) GetPhysicalServerOk() (*ComputePhysicalRelationship, bool) {
	if o == nil {
		return nil, false
	}
	return o.PhysicalServer.Get(), o.PhysicalServer.IsSet()
}

// HasPhysicalServer returns a boolean if a field has been set.
func (o *HciNode) HasPhysicalServer() bool {
	if o != nil && o.PhysicalServer.IsSet() {
		return true
	}

	return false
}

// SetPhysicalServer gets a reference to the given NullableComputePhysicalRelationship and assigns it to the PhysicalServer field.
func (o *HciNode) SetPhysicalServer(v ComputePhysicalRelationship) {
	o.PhysicalServer.Set(&v)
}

// SetPhysicalServerNil sets the value for PhysicalServer to be an explicit nil
func (o *HciNode) SetPhysicalServerNil() {
	o.PhysicalServer.Set(nil)
}

// UnsetPhysicalServer ensures that no value is present for PhysicalServer, not even an explicit nil
func (o *HciNode) UnsetPhysicalServer() {
	o.PhysicalServer.Unset()
}

// GetRegisteredDevice returns the RegisteredDevice field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HciNode) GetRegisteredDevice() AssetDeviceRegistrationRelationship {
	if o == nil || IsNil(o.RegisteredDevice.Get()) {
		var ret AssetDeviceRegistrationRelationship
		return ret
	}
	return *o.RegisteredDevice.Get()
}

// GetRegisteredDeviceOk returns a tuple with the RegisteredDevice field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HciNode) GetRegisteredDeviceOk() (*AssetDeviceRegistrationRelationship, bool) {
	if o == nil {
		return nil, false
	}
	return o.RegisteredDevice.Get(), o.RegisteredDevice.IsSet()
}

// HasRegisteredDevice returns a boolean if a field has been set.
func (o *HciNode) HasRegisteredDevice() bool {
	if o != nil && o.RegisteredDevice.IsSet() {
		return true
	}

	return false
}

// SetRegisteredDevice gets a reference to the given NullableAssetDeviceRegistrationRelationship and assigns it to the RegisteredDevice field.
func (o *HciNode) SetRegisteredDevice(v AssetDeviceRegistrationRelationship) {
	o.RegisteredDevice.Set(&v)
}

// SetRegisteredDeviceNil sets the value for RegisteredDevice to be an explicit nil
func (o *HciNode) SetRegisteredDeviceNil() {
	o.RegisteredDevice.Set(nil)
}

// UnsetRegisteredDevice ensures that no value is present for RegisteredDevice, not even an explicit nil
func (o *HciNode) UnsetRegisteredDevice() {
	o.RegisteredDevice.Unset()
}

func (o HciNode) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o HciNode) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	serializedMoBaseMo, errMoBaseMo := json.Marshal(o.MoBaseMo)
	if errMoBaseMo != nil {
		return map[string]interface{}{}, errMoBaseMo
	}
	errMoBaseMo = json.Unmarshal([]byte(serializedMoBaseMo), &toSerialize)
	if errMoBaseMo != nil {
		return map[string]interface{}{}, errMoBaseMo
	}
	if _, exists := toSerialize["ClassId"]; !exists {
		toSerialize["ClassId"] = o.GetDefaultClassId()
	}
	toSerialize["ClassId"] = o.ClassId
	if _, exists := toSerialize["ObjectType"]; !exists {
		toSerialize["ObjectType"] = o.GetDefaultObjectType()
	}
	toSerialize["ObjectType"] = o.ObjectType
	if !IsNil(o.BlockModel) {
		toSerialize["BlockModel"] = o.BlockModel
	}
	if !IsNil(o.BlockSerial) {
		toSerialize["BlockSerial"] = o.BlockSerial
	}
	if !IsNil(o.BootTimeUsecs) {
		toSerialize["BootTimeUsecs"] = o.BootTimeUsecs
	}
	if !IsNil(o.ClusterExtId) {
		toSerialize["ClusterExtId"] = o.ClusterExtId
	}
	if !IsNil(o.ClusterName) {
		toSerialize["ClusterName"] = o.ClusterName
	}
	if o.ControllerVmBackplaneAddress.IsSet() {
		toSerialize["ControllerVmBackplaneAddress"] = o.ControllerVmBackplaneAddress.Get()
	}
	if o.ControllerVmExternalAddress.IsSet() {
		toSerialize["ControllerVmExternalAddress"] = o.ControllerVmExternalAddress.Get()
	}
	if !IsNil(o.ControllerVmId) {
		toSerialize["ControllerVmId"] = o.ControllerVmId
	}
	if !IsNil(o.ControllerVmMaintanenceMode) {
		toSerialize["ControllerVmMaintanenceMode"] = o.ControllerVmMaintanenceMode
	}
	if o.ControllerVmNatIp.IsSet() {
		toSerialize["ControllerVmNatIp"] = o.ControllerVmNatIp.Get()
	}
	if !IsNil(o.ControllerVmNatPort) {
		toSerialize["ControllerVmNatPort"] = o.ControllerVmNatPort
	}
	if o.ControllerVmRdmaBackplaneAddress.IsSet() {
		toSerialize["ControllerVmRdmaBackplaneAddress"] = o.ControllerVmRdmaBackplaneAddress.Get()
	}
	if !IsNil(o.ControllerVmServerUuid) {
		toSerialize["ControllerVmServerUuid"] = o.ControllerVmServerUuid
	}
	if !IsNil(o.CpuCapacityHz) {
		toSerialize["CpuCapacityHz"] = o.CpuCapacityHz
	}
	if !IsNil(o.CpuFrequencyHz) {
		toSerialize["CpuFrequencyHz"] = o.CpuFrequencyHz
	}
	if !IsNil(o.CpuModel) {
		toSerialize["CpuModel"] = o.CpuModel
	}
	if !IsNil(o.CpuUsageHz) {
		toSerialize["CpuUsageHz"] = o.CpuUsageHz
	}
	if !IsNil(o.DefaultVhdContainerUuid) {
		toSerialize["DefaultVhdContainerUuid"] = o.DefaultVhdContainerUuid
	}
	if !IsNil(o.DefaultVhdLocation) {
		toSerialize["DefaultVhdLocation"] = o.DefaultVhdLocation
	}
	if !IsNil(o.DefaultVmContainerUuid) {
		toSerialize["DefaultVmContainerUuid"] = o.DefaultVmContainerUuid
	}
	if !IsNil(o.DefaultVmLocation) {
		toSerialize["DefaultVmLocation"] = o.DefaultVmLocation
	}
	if !IsNil(o.DiskCount) {
		toSerialize["DiskCount"] = o.DiskCount
	}
	if !IsNil(o.FailoverClusterFqdn) {
		toSerialize["FailoverClusterFqdn"] = o.FailoverClusterFqdn
	}
	if !IsNil(o.FailoverClusterNodeStatus) {
		toSerialize["FailoverClusterNodeStatus"] = o.FailoverClusterNodeStatus
	}
	if !IsNil(o.GpuCount) {
		toSerialize["GpuCount"] = o.GpuCount
	}
	if !IsNil(o.GpuDriverVersion) {
		toSerialize["GpuDriverVersion"] = o.GpuDriverVersion
	}
	if !IsNil(o.HasCsr) {
		toSerialize["HasCsr"] = o.HasCsr
	}
	if !IsNil(o.HostName) {
		toSerialize["HostName"] = o.HostName
	}
	if !IsNil(o.HostType) {
		toSerialize["HostType"] = o.HostType
	}
	if !IsNil(o.HypervisorAcropolisConnectionState) {
		toSerialize["HypervisorAcropolisConnectionState"] = o.HypervisorAcropolisConnectionState
	}
	if o.HypervisorExternalAddress.IsSet() {
		toSerialize["HypervisorExternalAddress"] = o.HypervisorExternalAddress.Get()
	}
	if !IsNil(o.HypervisorNumberOfVms) {
		toSerialize["HypervisorNumberOfVms"] = o.HypervisorNumberOfVms
	}
	if !IsNil(o.HypervisorState) {
		toSerialize["HypervisorState"] = o.HypervisorState
	}
	if !IsNil(o.HypervisorType) {
		toSerialize["HypervisorType"] = o.HypervisorType
	}
	if !IsNil(o.HypervisorUserName) {
		toSerialize["HypervisorUserName"] = o.HypervisorUserName
	}
	if !IsNil(o.HypervisorVersion) {
		toSerialize["HypervisorVersion"] = o.HypervisorVersion
	}
	if o.IpmiIp.IsSet() {
		toSerialize["IpmiIp"] = o.IpmiIp.Get()
	}
	if !IsNil(o.IpmiUsername) {
		toSerialize["IpmiUsername"] = o.IpmiUsername
	}
	if !IsNil(o.IsDegraded) {
		toSerialize["IsDegraded"] = o.IsDegraded
	}
	if !IsNil(o.IsHardwareVirtualized) {
		toSerialize["IsHardwareVirtualized"] = o.IsHardwareVirtualized
	}
	if !IsNil(o.IsSecureBooted) {
		toSerialize["IsSecureBooted"] = o.IsSecureBooted
	}
	if o.KeyManagementDeviceToCertStatus != nil {
		toSerialize["KeyManagementDeviceToCertStatus"] = o.KeyManagementDeviceToCertStatus
	}
	if !IsNil(o.MaintenanceState) {
		toSerialize["MaintenanceState"] = o.MaintenanceState
	}
	if !IsNil(o.MemoryCapacityBytes) {
		toSerialize["MemoryCapacityBytes"] = o.MemoryCapacityBytes
	}
	if !IsNil(o.MemorySizeBytes) {
		toSerialize["MemorySizeBytes"] = o.MemorySizeBytes
	}
	if !IsNil(o.MemoryUsageBytes) {
		toSerialize["MemoryUsageBytes"] = o.MemoryUsageBytes
	}
	if !IsNil(o.NodeExtId) {
		toSerialize["NodeExtId"] = o.NodeExtId
	}
	if !IsNil(o.NodeStatus) {
		toSerialize["NodeStatus"] = o.NodeStatus
	}
	if !IsNil(o.NumberOfCpuCores) {
		toSerialize["NumberOfCpuCores"] = o.NumberOfCpuCores
	}
	if !IsNil(o.NumberOfCpuSockets) {
		toSerialize["NumberOfCpuSockets"] = o.NumberOfCpuSockets
	}
	if !IsNil(o.NumberOfCpuThreads) {
		toSerialize["NumberOfCpuThreads"] = o.NumberOfCpuThreads
	}
	if !IsNil(o.RebootPending) {
		toSerialize["RebootPending"] = o.RebootPending
	}
	if !IsNil(o.StorageCapacityBytes) {
		toSerialize["StorageCapacityBytes"] = o.StorageCapacityBytes
	}
	if !IsNil(o.StorageUsageBytes) {
		toSerialize["StorageUsageBytes"] = o.StorageUsageBytes
	}
	if o.Cluster.IsSet() {
		toSerialize["Cluster"] = o.Cluster.Get()
	}
	if o.Disks != nil {
		toSerialize["Disks"] = o.Disks
	}
	if o.Gpus != nil {
		toSerialize["Gpus"] = o.Gpus
	}
	if o.PhysicalServer.IsSet() {
		toSerialize["PhysicalServer"] = o.PhysicalServer.Get()
	}
	if o.RegisteredDevice.IsSet() {
		toSerialize["RegisteredDevice"] = o.RegisteredDevice.Get()
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *HciNode) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"ClassId",
		"ObjectType",
	}

	// defaultValueFuncMap captures the default values for required properties.
	// These values are used when required properties are missing from the payload.
	defaultValueFuncMap := map[string]func() interface{}{
		"ClassId":    o.GetDefaultClassId,
		"ObjectType": o.GetDefaultObjectType,
	}
	var defaultValueApplied bool
	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			if _, ok := defaultValueFuncMap[requiredProperty]; ok {
				allProperties[requiredProperty] = defaultValueFuncMap[requiredProperty]()
				defaultValueApplied = true
			}
		}
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	if defaultValueApplied {
		data, err = json.Marshal(allProperties)
		if err != nil {
			return err
		}
	}
	type HciNodeWithoutEmbeddedStruct struct {
		// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.
		ClassId string `json:"ClassId"`
		// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
		ObjectType string `json:"ObjectType"`
		// The rackable unit model of the node.
		BlockModel *string `json:"BlockModel,omitempty"`
		// The rackable unit serial number of the node.
		BlockSerial *string `json:"BlockSerial,omitempty"`
		// The boot time in microseconds of the node.
		BootTimeUsecs *int64 `json:"BootTimeUsecs,omitempty"`
		// The unique identifier of the cluster.
		ClusterExtId *string `json:"ClusterExtId,omitempty"`
		// The name of the cluster this node belongs to.
		ClusterName                  *string              `json:"ClusterName,omitempty"`
		ControllerVmBackplaneAddress NullableHciIpAddress `json:"ControllerVmBackplaneAddress,omitempty"`
		ControllerVmExternalAddress  NullableHciIpAddress `json:"ControllerVmExternalAddress,omitempty"`
		// The identifier number of the controller VM.
		ControllerVmId *int32 `json:"ControllerVmId,omitempty"`
		// The maintenance mode status of the controller VM.
		ControllerVmMaintanenceMode *bool                `json:"ControllerVmMaintanenceMode,omitempty"`
		ControllerVmNatIp           NullableHciIpAddress `json:"ControllerVmNatIp,omitempty"`
		// The NAT port of the controller VM.
		ControllerVmNatPort              *int32               `json:"ControllerVmNatPort,omitempty"`
		ControllerVmRdmaBackplaneAddress NullableHciIpAddress `json:"ControllerVmRdmaBackplaneAddress,omitempty"`
		// The Rackable unit UUID of the server.
		ControllerVmServerUuid *string `json:"ControllerVmServerUuid,omitempty"`
		// The CPU capacity in Hz of the node.
		CpuCapacityHz *int64 `json:"CpuCapacityHz,omitempty"`
		// The CPU frequency in Hz on the node.
		CpuFrequencyHz *int64 `json:"CpuFrequencyHz,omitempty"`
		// The CPU model of the node.
		CpuModel *string `json:"CpuModel,omitempty"`
		// The CPU usage in Hz of the node.
		CpuUsageHz *int64 `json:"CpuUsageHz,omitempty"`
		// The default VHD container UUID of the node.
		DefaultVhdContainerUuid *string `json:"DefaultVhdContainerUuid,omitempty"`
		// The default VHD location of the node.
		DefaultVhdLocation *string `json:"DefaultVhdLocation,omitempty"`
		// The default VM container UUID of the node.
		DefaultVmContainerUuid *string `json:"DefaultVmContainerUuid,omitempty"`
		// The default VM location of the node.
		DefaultVmLocation *string `json:"DefaultVmLocation,omitempty"`
		// The number of disks on the node.
		DiskCount *int64 `json:"DiskCount,omitempty"`
		// The failover cluster FQDN of the node.
		FailoverClusterFqdn *string `json:"FailoverClusterFqdn,omitempty"`
		// The failover cluster node status of the node.
		FailoverClusterNodeStatus *string `json:"FailoverClusterNodeStatus,omitempty"`
		// The number of GPUs on the node.
		GpuCount *int64 `json:"GpuCount,omitempty"`
		// The GPU driver version of the node.
		GpuDriverVersion *string `json:"GpuDriverVersion,omitempty"`
		// Certificate signing request status of the node.
		HasCsr *bool `json:"HasCsr,omitempty"`
		// The name of the host the node is running on.
		HostName *string `json:"HostName,omitempty"`
		// The type of the host, e.g. HYPER_CONVERGED, COMPUTE_ONLY, STORAGE_ONLY.
		HostType *string `json:"HostType,omitempty"`
		// The connection state of the hypervisor, e.g. CONNECTED, DISCONNECTED, NOT_AVAILABLE.
		HypervisorAcropolisConnectionState *string              `json:"HypervisorAcropolisConnectionState,omitempty"`
		HypervisorExternalAddress          NullableHciIpAddress `json:"HypervisorExternalAddress,omitempty"`
		// The number of VMs managed on this node.
		HypervisorNumberOfVms *int64 `json:"HypervisorNumberOfVms,omitempty"`
		// The hypervisor state e.g. ACROPOLIS_NORMAL, ENTERING_MAINTENANCE_MODE, ENTERED_MAINTENANCE_MODE, RESERVED_FOR_HA_FAILOVER, ENTERING_MAINTENANCE_MODE_FROM_HA_FAILOVER, RESERVING_FOR_HA_FAILOVER, HA_FAILOVER_SOURCE, HA_FAILOVER_TARGET, HA_HEALING_SOURCE, HA_HEALING_TARGET.
		HypervisorState *string `json:"HypervisorState,omitempty"`
		// The hypervisor type, e.g. AHV, ESX, HYPERV, XEN, NATIVEHOST etc.
		HypervisorType *string `json:"HypervisorType,omitempty"`
		// The user name of the hypervisor on this node.
		HypervisorUserName *string `json:"HypervisorUserName,omitempty"`
		// The version of the hypervisor on this node.
		HypervisorVersion *string              `json:"HypervisorVersion,omitempty"`
		IpmiIp            NullableHciIpAddress `json:"IpmiIp,omitempty"`
		// The IPMI user name of the controller.
		IpmiUsername *string `json:"IpmiUsername,omitempty"`
		// The degraded status of the node.
		IsDegraded *bool `json:"IsDegraded,omitempty"`
		// The hardware virtualization status of the node.
		IsHardwareVirtualized *bool `json:"IsHardwareVirtualized,omitempty"`
		// The secure boot status of the node.
		IsSecureBooted                  *bool                                    `json:"IsSecureBooted,omitempty"`
		KeyManagementDeviceToCertStatus []HciKeyManagementDeviceToCertStatusInfo `json:"KeyManagementDeviceToCertStatus,omitempty"`
		// The maintenance state of the node.
		MaintenanceState *string `json:"MaintenanceState,omitempty"`
		// The memory capacity in bytes of the node.
		MemoryCapacityBytes *int64 `json:"MemoryCapacityBytes,omitempty"`
		// The memory size in bytes of the node.
		MemorySizeBytes *int64 `json:"MemorySizeBytes,omitempty"`
		// The memory usage in bytes of the node.
		MemoryUsageBytes *int64 `json:"MemoryUsageBytes,omitempty"`
		// The unique identifier of the node.
		NodeExtId *string `json:"NodeExtId,omitempty"`
		// The status of the node such as NORMAL, TO_BE_REMOVED, OK_TO_BE_REMOVED, NEW_NODE, TO_BE_PREPROTECTED, PREPROTECTED.
		NodeStatus *string `json:"NodeStatus,omitempty"`
		// The number of CPU cores on the node.
		NumberOfCpuCores *int64 `json:"NumberOfCpuCores,omitempty"`
		// The number of sockets on the node.
		NumberOfCpuSockets *int64 `json:"NumberOfCpuSockets,omitempty"`
		// The number of threads on the node.
		NumberOfCpuThreads *int64 `json:"NumberOfCpuThreads,omitempty"`
		// The reboot pending status of the node.
		RebootPending *bool `json:"RebootPending,omitempty"`
		// The storage capacity in bytes of the node.
		StorageCapacityBytes *int64 `json:"StorageCapacityBytes,omitempty"`
		// The storage usage in bytes of the node.
		StorageUsageBytes *int64                         `json:"StorageUsageBytes,omitempty"`
		Cluster           NullableHciClusterRelationship `json:"Cluster,omitempty"`
		// An array of relationships to hciDisk resources.
		Disks []HciDiskRelationship `json:"Disks,omitempty"`
		// An array of relationships to hciGpu resources.
		Gpus             []HciGpuRelationship                        `json:"Gpus,omitempty"`
		PhysicalServer   NullableComputePhysicalRelationship         `json:"PhysicalServer,omitempty"`
		RegisteredDevice NullableAssetDeviceRegistrationRelationship `json:"RegisteredDevice,omitempty"`
	}

	varHciNodeWithoutEmbeddedStruct := HciNodeWithoutEmbeddedStruct{}

	err = json.Unmarshal(data, &varHciNodeWithoutEmbeddedStruct)
	if err == nil {
		varHciNode := _HciNode{}
		varHciNode.ClassId = varHciNodeWithoutEmbeddedStruct.ClassId
		varHciNode.ObjectType = varHciNodeWithoutEmbeddedStruct.ObjectType
		varHciNode.BlockModel = varHciNodeWithoutEmbeddedStruct.BlockModel
		varHciNode.BlockSerial = varHciNodeWithoutEmbeddedStruct.BlockSerial
		varHciNode.BootTimeUsecs = varHciNodeWithoutEmbeddedStruct.BootTimeUsecs
		varHciNode.ClusterExtId = varHciNodeWithoutEmbeddedStruct.ClusterExtId
		varHciNode.ClusterName = varHciNodeWithoutEmbeddedStruct.ClusterName
		varHciNode.ControllerVmBackplaneAddress = varHciNodeWithoutEmbeddedStruct.ControllerVmBackplaneAddress
		varHciNode.ControllerVmExternalAddress = varHciNodeWithoutEmbeddedStruct.ControllerVmExternalAddress
		varHciNode.ControllerVmId = varHciNodeWithoutEmbeddedStruct.ControllerVmId
		varHciNode.ControllerVmMaintanenceMode = varHciNodeWithoutEmbeddedStruct.ControllerVmMaintanenceMode
		varHciNode.ControllerVmNatIp = varHciNodeWithoutEmbeddedStruct.ControllerVmNatIp
		varHciNode.ControllerVmNatPort = varHciNodeWithoutEmbeddedStruct.ControllerVmNatPort
		varHciNode.ControllerVmRdmaBackplaneAddress = varHciNodeWithoutEmbeddedStruct.ControllerVmRdmaBackplaneAddress
		varHciNode.ControllerVmServerUuid = varHciNodeWithoutEmbeddedStruct.ControllerVmServerUuid
		varHciNode.CpuCapacityHz = varHciNodeWithoutEmbeddedStruct.CpuCapacityHz
		varHciNode.CpuFrequencyHz = varHciNodeWithoutEmbeddedStruct.CpuFrequencyHz
		varHciNode.CpuModel = varHciNodeWithoutEmbeddedStruct.CpuModel
		varHciNode.CpuUsageHz = varHciNodeWithoutEmbeddedStruct.CpuUsageHz
		varHciNode.DefaultVhdContainerUuid = varHciNodeWithoutEmbeddedStruct.DefaultVhdContainerUuid
		varHciNode.DefaultVhdLocation = varHciNodeWithoutEmbeddedStruct.DefaultVhdLocation
		varHciNode.DefaultVmContainerUuid = varHciNodeWithoutEmbeddedStruct.DefaultVmContainerUuid
		varHciNode.DefaultVmLocation = varHciNodeWithoutEmbeddedStruct.DefaultVmLocation
		varHciNode.DiskCount = varHciNodeWithoutEmbeddedStruct.DiskCount
		varHciNode.FailoverClusterFqdn = varHciNodeWithoutEmbeddedStruct.FailoverClusterFqdn
		varHciNode.FailoverClusterNodeStatus = varHciNodeWithoutEmbeddedStruct.FailoverClusterNodeStatus
		varHciNode.GpuCount = varHciNodeWithoutEmbeddedStruct.GpuCount
		varHciNode.GpuDriverVersion = varHciNodeWithoutEmbeddedStruct.GpuDriverVersion
		varHciNode.HasCsr = varHciNodeWithoutEmbeddedStruct.HasCsr
		varHciNode.HostName = varHciNodeWithoutEmbeddedStruct.HostName
		varHciNode.HostType = varHciNodeWithoutEmbeddedStruct.HostType
		varHciNode.HypervisorAcropolisConnectionState = varHciNodeWithoutEmbeddedStruct.HypervisorAcropolisConnectionState
		varHciNode.HypervisorExternalAddress = varHciNodeWithoutEmbeddedStruct.HypervisorExternalAddress
		varHciNode.HypervisorNumberOfVms = varHciNodeWithoutEmbeddedStruct.HypervisorNumberOfVms
		varHciNode.HypervisorState = varHciNodeWithoutEmbeddedStruct.HypervisorState
		varHciNode.HypervisorType = varHciNodeWithoutEmbeddedStruct.HypervisorType
		varHciNode.HypervisorUserName = varHciNodeWithoutEmbeddedStruct.HypervisorUserName
		varHciNode.HypervisorVersion = varHciNodeWithoutEmbeddedStruct.HypervisorVersion
		varHciNode.IpmiIp = varHciNodeWithoutEmbeddedStruct.IpmiIp
		varHciNode.IpmiUsername = varHciNodeWithoutEmbeddedStruct.IpmiUsername
		varHciNode.IsDegraded = varHciNodeWithoutEmbeddedStruct.IsDegraded
		varHciNode.IsHardwareVirtualized = varHciNodeWithoutEmbeddedStruct.IsHardwareVirtualized
		varHciNode.IsSecureBooted = varHciNodeWithoutEmbeddedStruct.IsSecureBooted
		varHciNode.KeyManagementDeviceToCertStatus = varHciNodeWithoutEmbeddedStruct.KeyManagementDeviceToCertStatus
		varHciNode.MaintenanceState = varHciNodeWithoutEmbeddedStruct.MaintenanceState
		varHciNode.MemoryCapacityBytes = varHciNodeWithoutEmbeddedStruct.MemoryCapacityBytes
		varHciNode.MemorySizeBytes = varHciNodeWithoutEmbeddedStruct.MemorySizeBytes
		varHciNode.MemoryUsageBytes = varHciNodeWithoutEmbeddedStruct.MemoryUsageBytes
		varHciNode.NodeExtId = varHciNodeWithoutEmbeddedStruct.NodeExtId
		varHciNode.NodeStatus = varHciNodeWithoutEmbeddedStruct.NodeStatus
		varHciNode.NumberOfCpuCores = varHciNodeWithoutEmbeddedStruct.NumberOfCpuCores
		varHciNode.NumberOfCpuSockets = varHciNodeWithoutEmbeddedStruct.NumberOfCpuSockets
		varHciNode.NumberOfCpuThreads = varHciNodeWithoutEmbeddedStruct.NumberOfCpuThreads
		varHciNode.RebootPending = varHciNodeWithoutEmbeddedStruct.RebootPending
		varHciNode.StorageCapacityBytes = varHciNodeWithoutEmbeddedStruct.StorageCapacityBytes
		varHciNode.StorageUsageBytes = varHciNodeWithoutEmbeddedStruct.StorageUsageBytes
		varHciNode.Cluster = varHciNodeWithoutEmbeddedStruct.Cluster
		varHciNode.Disks = varHciNodeWithoutEmbeddedStruct.Disks
		varHciNode.Gpus = varHciNodeWithoutEmbeddedStruct.Gpus
		varHciNode.PhysicalServer = varHciNodeWithoutEmbeddedStruct.PhysicalServer
		varHciNode.RegisteredDevice = varHciNodeWithoutEmbeddedStruct.RegisteredDevice
		*o = HciNode(varHciNode)
	} else {
		return err
	}

	varHciNode := _HciNode{}

	err = json.Unmarshal(data, &varHciNode)
	if err == nil {
		o.MoBaseMo = varHciNode.MoBaseMo
	} else {
		return err
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "ClassId")
		delete(additionalProperties, "ObjectType")
		delete(additionalProperties, "BlockModel")
		delete(additionalProperties, "BlockSerial")
		delete(additionalProperties, "BootTimeUsecs")
		delete(additionalProperties, "ClusterExtId")
		delete(additionalProperties, "ClusterName")
		delete(additionalProperties, "ControllerVmBackplaneAddress")
		delete(additionalProperties, "ControllerVmExternalAddress")
		delete(additionalProperties, "ControllerVmId")
		delete(additionalProperties, "ControllerVmMaintanenceMode")
		delete(additionalProperties, "ControllerVmNatIp")
		delete(additionalProperties, "ControllerVmNatPort")
		delete(additionalProperties, "ControllerVmRdmaBackplaneAddress")
		delete(additionalProperties, "ControllerVmServerUuid")
		delete(additionalProperties, "CpuCapacityHz")
		delete(additionalProperties, "CpuFrequencyHz")
		delete(additionalProperties, "CpuModel")
		delete(additionalProperties, "CpuUsageHz")
		delete(additionalProperties, "DefaultVhdContainerUuid")
		delete(additionalProperties, "DefaultVhdLocation")
		delete(additionalProperties, "DefaultVmContainerUuid")
		delete(additionalProperties, "DefaultVmLocation")
		delete(additionalProperties, "DiskCount")
		delete(additionalProperties, "FailoverClusterFqdn")
		delete(additionalProperties, "FailoverClusterNodeStatus")
		delete(additionalProperties, "GpuCount")
		delete(additionalProperties, "GpuDriverVersion")
		delete(additionalProperties, "HasCsr")
		delete(additionalProperties, "HostName")
		delete(additionalProperties, "HostType")
		delete(additionalProperties, "HypervisorAcropolisConnectionState")
		delete(additionalProperties, "HypervisorExternalAddress")
		delete(additionalProperties, "HypervisorNumberOfVms")
		delete(additionalProperties, "HypervisorState")
		delete(additionalProperties, "HypervisorType")
		delete(additionalProperties, "HypervisorUserName")
		delete(additionalProperties, "HypervisorVersion")
		delete(additionalProperties, "IpmiIp")
		delete(additionalProperties, "IpmiUsername")
		delete(additionalProperties, "IsDegraded")
		delete(additionalProperties, "IsHardwareVirtualized")
		delete(additionalProperties, "IsSecureBooted")
		delete(additionalProperties, "KeyManagementDeviceToCertStatus")
		delete(additionalProperties, "MaintenanceState")
		delete(additionalProperties, "MemoryCapacityBytes")
		delete(additionalProperties, "MemorySizeBytes")
		delete(additionalProperties, "MemoryUsageBytes")
		delete(additionalProperties, "NodeExtId")
		delete(additionalProperties, "NodeStatus")
		delete(additionalProperties, "NumberOfCpuCores")
		delete(additionalProperties, "NumberOfCpuSockets")
		delete(additionalProperties, "NumberOfCpuThreads")
		delete(additionalProperties, "RebootPending")
		delete(additionalProperties, "StorageCapacityBytes")
		delete(additionalProperties, "StorageUsageBytes")
		delete(additionalProperties, "Cluster")
		delete(additionalProperties, "Disks")
		delete(additionalProperties, "Gpus")
		delete(additionalProperties, "PhysicalServer")
		delete(additionalProperties, "RegisteredDevice")

		// remove fields from embedded structs
		reflectMoBaseMo := reflect.ValueOf(o.MoBaseMo)
		for i := 0; i < reflectMoBaseMo.Type().NumField(); i++ {
			t := reflectMoBaseMo.Type().Field(i)

			if jsonTag := t.Tag.Get("json"); jsonTag != "" {
				fieldName := ""
				if commaIdx := strings.Index(jsonTag, ","); commaIdx > 0 {
					fieldName = jsonTag[:commaIdx]
				} else {
					fieldName = jsonTag
				}
				if fieldName != "AdditionalProperties" {
					delete(additionalProperties, fieldName)
				}
			}
		}

		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableHciNode struct {
	value *HciNode
	isSet bool
}

func (v NullableHciNode) Get() *HciNode {
	return v.value
}

func (v *NullableHciNode) Set(val *HciNode) {
	v.value = val
	v.isSet = true
}

func (v NullableHciNode) IsSet() bool {
	return v.isSet
}

func (v *NullableHciNode) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHciNode(val *HciNode) *NullableHciNode {
	return &NullableHciNode{value: val, isSet: true}
}

func (v NullableHciNode) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHciNode) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
