/*
Cisco Intersight

Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations. The Intersight OpenAPI document defines the complete set of properties that are returned in the HTTP response. From that perspective, a client can expect that no additional properties are returned, unless these properties are explicitly defined in the OpenAPI document. However, when a client uses an older version of the Intersight OpenAPI document, the server may send additional properties because the software is more recent than the client. In that case, the client may receive properties that it does not know about. Some generated SDKs perform a strict validation of the HTTP response body against the OpenAPI document.

API version: 1.0.11-2024100405
Contact: intersight@cisco.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package intersight

import (
	"encoding/json"
	"fmt"
	"reflect"
	"strings"
)

// checks if the ManagementInterface type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ManagementInterface{}

// ManagementInterface Interface that provides access to the management controller.
type ManagementInterface struct {
	InventoryBase
	// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.
	ClassId string `json:"ClassId"`
	// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
	ObjectType string `json:"ObjectType"`
	// Default gateway for the interface.
	Gateway *string `json:"Gateway,omitempty"`
	// Hostname configured for the interface.
	HostName *string `json:"HostName,omitempty"`
	// IP address of the interface.
	IpAddress *string `json:"IpAddress,omitempty"`
	// IPv4 address of the interface.
	Ipv4Address *string `json:"Ipv4Address,omitempty"`
	// IPv4 default gateway for the interface.
	Ipv4Gateway *string `json:"Ipv4Gateway,omitempty"`
	// IPv4 Netmask for the interface.
	Ipv4Mask *string `json:"Ipv4Mask,omitempty"`
	// IPv6 address of the interface.
	Ipv6Address *string `json:"Ipv6Address,omitempty"`
	// IPv6 default gateway for the interface.
	Ipv6Gateway *string `json:"Ipv6Gateway,omitempty"`
	// IPv6 prefix for the interface.
	Ipv6Prefix *int64 `json:"Ipv6Prefix,omitempty"`
	// MAC address configured for the interface.
	MacAddress *string `json:"MacAddress,omitempty"`
	// Netmask for the interface.
	Mask *string `json:"Mask,omitempty"`
	// Switch Id connected to the interface.
	SwitchId *string `json:"SwitchId,omitempty"`
	// The event channel connection status for the interface.
	UemConnStatus *string `json:"UemConnStatus,omitempty"`
	// Virtual hostname configured for the interface in case of clustered environment.
	VirtualHostName *string `json:"VirtualHostName,omitempty"`
	// VlanId configured for the interface.
	VlanId               *int64                                      `json:"VlanId,omitempty"`
	EquipmentChassis     NullableEquipmentChassisRelationship        `json:"EquipmentChassis,omitempty"`
	InventoryDeviceInfo  NullableInventoryDeviceInfoRelationship     `json:"InventoryDeviceInfo,omitempty"`
	ManagementController NullableManagementControllerRelationship    `json:"ManagementController,omitempty"`
	RegisteredDevice     NullableAssetDeviceRegistrationRelationship `json:"RegisteredDevice,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ManagementInterface ManagementInterface

// NewManagementInterface instantiates a new ManagementInterface object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewManagementInterface(classId string, objectType string) *ManagementInterface {
	this := ManagementInterface{}
	this.ClassId = classId
	this.ObjectType = objectType
	return &this
}

// NewManagementInterfaceWithDefaults instantiates a new ManagementInterface object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewManagementInterfaceWithDefaults() *ManagementInterface {
	this := ManagementInterface{}
	var classId string = "management.Interface"
	this.ClassId = classId
	var objectType string = "management.Interface"
	this.ObjectType = objectType
	return &this
}

// GetClassId returns the ClassId field value
func (o *ManagementInterface) GetClassId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ClassId
}

// GetClassIdOk returns a tuple with the ClassId field value
// and a boolean to check if the value has been set.
func (o *ManagementInterface) GetClassIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ClassId, true
}

// SetClassId sets field value
func (o *ManagementInterface) SetClassId(v string) {
	o.ClassId = v
}

// GetDefaultClassId returns the default value "management.Interface" of the ClassId field.
func (o *ManagementInterface) GetDefaultClassId() interface{} {
	return "management.Interface"
}

// GetObjectType returns the ObjectType field value
func (o *ManagementInterface) GetObjectType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ObjectType
}

// GetObjectTypeOk returns a tuple with the ObjectType field value
// and a boolean to check if the value has been set.
func (o *ManagementInterface) GetObjectTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ObjectType, true
}

// SetObjectType sets field value
func (o *ManagementInterface) SetObjectType(v string) {
	o.ObjectType = v
}

// GetDefaultObjectType returns the default value "management.Interface" of the ObjectType field.
func (o *ManagementInterface) GetDefaultObjectType() interface{} {
	return "management.Interface"
}

// GetGateway returns the Gateway field value if set, zero value otherwise.
func (o *ManagementInterface) GetGateway() string {
	if o == nil || IsNil(o.Gateway) {
		var ret string
		return ret
	}
	return *o.Gateway
}

// GetGatewayOk returns a tuple with the Gateway field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ManagementInterface) GetGatewayOk() (*string, bool) {
	if o == nil || IsNil(o.Gateway) {
		return nil, false
	}
	return o.Gateway, true
}

// HasGateway returns a boolean if a field has been set.
func (o *ManagementInterface) HasGateway() bool {
	if o != nil && !IsNil(o.Gateway) {
		return true
	}

	return false
}

// SetGateway gets a reference to the given string and assigns it to the Gateway field.
func (o *ManagementInterface) SetGateway(v string) {
	o.Gateway = &v
}

// GetHostName returns the HostName field value if set, zero value otherwise.
func (o *ManagementInterface) GetHostName() string {
	if o == nil || IsNil(o.HostName) {
		var ret string
		return ret
	}
	return *o.HostName
}

// GetHostNameOk returns a tuple with the HostName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ManagementInterface) GetHostNameOk() (*string, bool) {
	if o == nil || IsNil(o.HostName) {
		return nil, false
	}
	return o.HostName, true
}

// HasHostName returns a boolean if a field has been set.
func (o *ManagementInterface) HasHostName() bool {
	if o != nil && !IsNil(o.HostName) {
		return true
	}

	return false
}

// SetHostName gets a reference to the given string and assigns it to the HostName field.
func (o *ManagementInterface) SetHostName(v string) {
	o.HostName = &v
}

// GetIpAddress returns the IpAddress field value if set, zero value otherwise.
func (o *ManagementInterface) GetIpAddress() string {
	if o == nil || IsNil(o.IpAddress) {
		var ret string
		return ret
	}
	return *o.IpAddress
}

// GetIpAddressOk returns a tuple with the IpAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ManagementInterface) GetIpAddressOk() (*string, bool) {
	if o == nil || IsNil(o.IpAddress) {
		return nil, false
	}
	return o.IpAddress, true
}

// HasIpAddress returns a boolean if a field has been set.
func (o *ManagementInterface) HasIpAddress() bool {
	if o != nil && !IsNil(o.IpAddress) {
		return true
	}

	return false
}

// SetIpAddress gets a reference to the given string and assigns it to the IpAddress field.
func (o *ManagementInterface) SetIpAddress(v string) {
	o.IpAddress = &v
}

// GetIpv4Address returns the Ipv4Address field value if set, zero value otherwise.
func (o *ManagementInterface) GetIpv4Address() string {
	if o == nil || IsNil(o.Ipv4Address) {
		var ret string
		return ret
	}
	return *o.Ipv4Address
}

// GetIpv4AddressOk returns a tuple with the Ipv4Address field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ManagementInterface) GetIpv4AddressOk() (*string, bool) {
	if o == nil || IsNil(o.Ipv4Address) {
		return nil, false
	}
	return o.Ipv4Address, true
}

// HasIpv4Address returns a boolean if a field has been set.
func (o *ManagementInterface) HasIpv4Address() bool {
	if o != nil && !IsNil(o.Ipv4Address) {
		return true
	}

	return false
}

// SetIpv4Address gets a reference to the given string and assigns it to the Ipv4Address field.
func (o *ManagementInterface) SetIpv4Address(v string) {
	o.Ipv4Address = &v
}

// GetIpv4Gateway returns the Ipv4Gateway field value if set, zero value otherwise.
func (o *ManagementInterface) GetIpv4Gateway() string {
	if o == nil || IsNil(o.Ipv4Gateway) {
		var ret string
		return ret
	}
	return *o.Ipv4Gateway
}

// GetIpv4GatewayOk returns a tuple with the Ipv4Gateway field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ManagementInterface) GetIpv4GatewayOk() (*string, bool) {
	if o == nil || IsNil(o.Ipv4Gateway) {
		return nil, false
	}
	return o.Ipv4Gateway, true
}

// HasIpv4Gateway returns a boolean if a field has been set.
func (o *ManagementInterface) HasIpv4Gateway() bool {
	if o != nil && !IsNil(o.Ipv4Gateway) {
		return true
	}

	return false
}

// SetIpv4Gateway gets a reference to the given string and assigns it to the Ipv4Gateway field.
func (o *ManagementInterface) SetIpv4Gateway(v string) {
	o.Ipv4Gateway = &v
}

// GetIpv4Mask returns the Ipv4Mask field value if set, zero value otherwise.
func (o *ManagementInterface) GetIpv4Mask() string {
	if o == nil || IsNil(o.Ipv4Mask) {
		var ret string
		return ret
	}
	return *o.Ipv4Mask
}

// GetIpv4MaskOk returns a tuple with the Ipv4Mask field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ManagementInterface) GetIpv4MaskOk() (*string, bool) {
	if o == nil || IsNil(o.Ipv4Mask) {
		return nil, false
	}
	return o.Ipv4Mask, true
}

// HasIpv4Mask returns a boolean if a field has been set.
func (o *ManagementInterface) HasIpv4Mask() bool {
	if o != nil && !IsNil(o.Ipv4Mask) {
		return true
	}

	return false
}

// SetIpv4Mask gets a reference to the given string and assigns it to the Ipv4Mask field.
func (o *ManagementInterface) SetIpv4Mask(v string) {
	o.Ipv4Mask = &v
}

// GetIpv6Address returns the Ipv6Address field value if set, zero value otherwise.
func (o *ManagementInterface) GetIpv6Address() string {
	if o == nil || IsNil(o.Ipv6Address) {
		var ret string
		return ret
	}
	return *o.Ipv6Address
}

// GetIpv6AddressOk returns a tuple with the Ipv6Address field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ManagementInterface) GetIpv6AddressOk() (*string, bool) {
	if o == nil || IsNil(o.Ipv6Address) {
		return nil, false
	}
	return o.Ipv6Address, true
}

// HasIpv6Address returns a boolean if a field has been set.
func (o *ManagementInterface) HasIpv6Address() bool {
	if o != nil && !IsNil(o.Ipv6Address) {
		return true
	}

	return false
}

// SetIpv6Address gets a reference to the given string and assigns it to the Ipv6Address field.
func (o *ManagementInterface) SetIpv6Address(v string) {
	o.Ipv6Address = &v
}

// GetIpv6Gateway returns the Ipv6Gateway field value if set, zero value otherwise.
func (o *ManagementInterface) GetIpv6Gateway() string {
	if o == nil || IsNil(o.Ipv6Gateway) {
		var ret string
		return ret
	}
	return *o.Ipv6Gateway
}

// GetIpv6GatewayOk returns a tuple with the Ipv6Gateway field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ManagementInterface) GetIpv6GatewayOk() (*string, bool) {
	if o == nil || IsNil(o.Ipv6Gateway) {
		return nil, false
	}
	return o.Ipv6Gateway, true
}

// HasIpv6Gateway returns a boolean if a field has been set.
func (o *ManagementInterface) HasIpv6Gateway() bool {
	if o != nil && !IsNil(o.Ipv6Gateway) {
		return true
	}

	return false
}

// SetIpv6Gateway gets a reference to the given string and assigns it to the Ipv6Gateway field.
func (o *ManagementInterface) SetIpv6Gateway(v string) {
	o.Ipv6Gateway = &v
}

// GetIpv6Prefix returns the Ipv6Prefix field value if set, zero value otherwise.
func (o *ManagementInterface) GetIpv6Prefix() int64 {
	if o == nil || IsNil(o.Ipv6Prefix) {
		var ret int64
		return ret
	}
	return *o.Ipv6Prefix
}

// GetIpv6PrefixOk returns a tuple with the Ipv6Prefix field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ManagementInterface) GetIpv6PrefixOk() (*int64, bool) {
	if o == nil || IsNil(o.Ipv6Prefix) {
		return nil, false
	}
	return o.Ipv6Prefix, true
}

// HasIpv6Prefix returns a boolean if a field has been set.
func (o *ManagementInterface) HasIpv6Prefix() bool {
	if o != nil && !IsNil(o.Ipv6Prefix) {
		return true
	}

	return false
}

// SetIpv6Prefix gets a reference to the given int64 and assigns it to the Ipv6Prefix field.
func (o *ManagementInterface) SetIpv6Prefix(v int64) {
	o.Ipv6Prefix = &v
}

// GetMacAddress returns the MacAddress field value if set, zero value otherwise.
func (o *ManagementInterface) GetMacAddress() string {
	if o == nil || IsNil(o.MacAddress) {
		var ret string
		return ret
	}
	return *o.MacAddress
}

// GetMacAddressOk returns a tuple with the MacAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ManagementInterface) GetMacAddressOk() (*string, bool) {
	if o == nil || IsNil(o.MacAddress) {
		return nil, false
	}
	return o.MacAddress, true
}

// HasMacAddress returns a boolean if a field has been set.
func (o *ManagementInterface) HasMacAddress() bool {
	if o != nil && !IsNil(o.MacAddress) {
		return true
	}

	return false
}

// SetMacAddress gets a reference to the given string and assigns it to the MacAddress field.
func (o *ManagementInterface) SetMacAddress(v string) {
	o.MacAddress = &v
}

// GetMask returns the Mask field value if set, zero value otherwise.
func (o *ManagementInterface) GetMask() string {
	if o == nil || IsNil(o.Mask) {
		var ret string
		return ret
	}
	return *o.Mask
}

// GetMaskOk returns a tuple with the Mask field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ManagementInterface) GetMaskOk() (*string, bool) {
	if o == nil || IsNil(o.Mask) {
		return nil, false
	}
	return o.Mask, true
}

// HasMask returns a boolean if a field has been set.
func (o *ManagementInterface) HasMask() bool {
	if o != nil && !IsNil(o.Mask) {
		return true
	}

	return false
}

// SetMask gets a reference to the given string and assigns it to the Mask field.
func (o *ManagementInterface) SetMask(v string) {
	o.Mask = &v
}

// GetSwitchId returns the SwitchId field value if set, zero value otherwise.
func (o *ManagementInterface) GetSwitchId() string {
	if o == nil || IsNil(o.SwitchId) {
		var ret string
		return ret
	}
	return *o.SwitchId
}

// GetSwitchIdOk returns a tuple with the SwitchId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ManagementInterface) GetSwitchIdOk() (*string, bool) {
	if o == nil || IsNil(o.SwitchId) {
		return nil, false
	}
	return o.SwitchId, true
}

// HasSwitchId returns a boolean if a field has been set.
func (o *ManagementInterface) HasSwitchId() bool {
	if o != nil && !IsNil(o.SwitchId) {
		return true
	}

	return false
}

// SetSwitchId gets a reference to the given string and assigns it to the SwitchId field.
func (o *ManagementInterface) SetSwitchId(v string) {
	o.SwitchId = &v
}

// GetUemConnStatus returns the UemConnStatus field value if set, zero value otherwise.
func (o *ManagementInterface) GetUemConnStatus() string {
	if o == nil || IsNil(o.UemConnStatus) {
		var ret string
		return ret
	}
	return *o.UemConnStatus
}

// GetUemConnStatusOk returns a tuple with the UemConnStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ManagementInterface) GetUemConnStatusOk() (*string, bool) {
	if o == nil || IsNil(o.UemConnStatus) {
		return nil, false
	}
	return o.UemConnStatus, true
}

// HasUemConnStatus returns a boolean if a field has been set.
func (o *ManagementInterface) HasUemConnStatus() bool {
	if o != nil && !IsNil(o.UemConnStatus) {
		return true
	}

	return false
}

// SetUemConnStatus gets a reference to the given string and assigns it to the UemConnStatus field.
func (o *ManagementInterface) SetUemConnStatus(v string) {
	o.UemConnStatus = &v
}

// GetVirtualHostName returns the VirtualHostName field value if set, zero value otherwise.
func (o *ManagementInterface) GetVirtualHostName() string {
	if o == nil || IsNil(o.VirtualHostName) {
		var ret string
		return ret
	}
	return *o.VirtualHostName
}

// GetVirtualHostNameOk returns a tuple with the VirtualHostName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ManagementInterface) GetVirtualHostNameOk() (*string, bool) {
	if o == nil || IsNil(o.VirtualHostName) {
		return nil, false
	}
	return o.VirtualHostName, true
}

// HasVirtualHostName returns a boolean if a field has been set.
func (o *ManagementInterface) HasVirtualHostName() bool {
	if o != nil && !IsNil(o.VirtualHostName) {
		return true
	}

	return false
}

// SetVirtualHostName gets a reference to the given string and assigns it to the VirtualHostName field.
func (o *ManagementInterface) SetVirtualHostName(v string) {
	o.VirtualHostName = &v
}

// GetVlanId returns the VlanId field value if set, zero value otherwise.
func (o *ManagementInterface) GetVlanId() int64 {
	if o == nil || IsNil(o.VlanId) {
		var ret int64
		return ret
	}
	return *o.VlanId
}

// GetVlanIdOk returns a tuple with the VlanId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ManagementInterface) GetVlanIdOk() (*int64, bool) {
	if o == nil || IsNil(o.VlanId) {
		return nil, false
	}
	return o.VlanId, true
}

// HasVlanId returns a boolean if a field has been set.
func (o *ManagementInterface) HasVlanId() bool {
	if o != nil && !IsNil(o.VlanId) {
		return true
	}

	return false
}

// SetVlanId gets a reference to the given int64 and assigns it to the VlanId field.
func (o *ManagementInterface) SetVlanId(v int64) {
	o.VlanId = &v
}

// GetEquipmentChassis returns the EquipmentChassis field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ManagementInterface) GetEquipmentChassis() EquipmentChassisRelationship {
	if o == nil || IsNil(o.EquipmentChassis.Get()) {
		var ret EquipmentChassisRelationship
		return ret
	}
	return *o.EquipmentChassis.Get()
}

// GetEquipmentChassisOk returns a tuple with the EquipmentChassis field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ManagementInterface) GetEquipmentChassisOk() (*EquipmentChassisRelationship, bool) {
	if o == nil {
		return nil, false
	}
	return o.EquipmentChassis.Get(), o.EquipmentChassis.IsSet()
}

// HasEquipmentChassis returns a boolean if a field has been set.
func (o *ManagementInterface) HasEquipmentChassis() bool {
	if o != nil && o.EquipmentChassis.IsSet() {
		return true
	}

	return false
}

// SetEquipmentChassis gets a reference to the given NullableEquipmentChassisRelationship and assigns it to the EquipmentChassis field.
func (o *ManagementInterface) SetEquipmentChassis(v EquipmentChassisRelationship) {
	o.EquipmentChassis.Set(&v)
}

// SetEquipmentChassisNil sets the value for EquipmentChassis to be an explicit nil
func (o *ManagementInterface) SetEquipmentChassisNil() {
	o.EquipmentChassis.Set(nil)
}

// UnsetEquipmentChassis ensures that no value is present for EquipmentChassis, not even an explicit nil
func (o *ManagementInterface) UnsetEquipmentChassis() {
	o.EquipmentChassis.Unset()
}

// GetInventoryDeviceInfo returns the InventoryDeviceInfo field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ManagementInterface) GetInventoryDeviceInfo() InventoryDeviceInfoRelationship {
	if o == nil || IsNil(o.InventoryDeviceInfo.Get()) {
		var ret InventoryDeviceInfoRelationship
		return ret
	}
	return *o.InventoryDeviceInfo.Get()
}

// GetInventoryDeviceInfoOk returns a tuple with the InventoryDeviceInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ManagementInterface) GetInventoryDeviceInfoOk() (*InventoryDeviceInfoRelationship, bool) {
	if o == nil {
		return nil, false
	}
	return o.InventoryDeviceInfo.Get(), o.InventoryDeviceInfo.IsSet()
}

// HasInventoryDeviceInfo returns a boolean if a field has been set.
func (o *ManagementInterface) HasInventoryDeviceInfo() bool {
	if o != nil && o.InventoryDeviceInfo.IsSet() {
		return true
	}

	return false
}

// SetInventoryDeviceInfo gets a reference to the given NullableInventoryDeviceInfoRelationship and assigns it to the InventoryDeviceInfo field.
func (o *ManagementInterface) SetInventoryDeviceInfo(v InventoryDeviceInfoRelationship) {
	o.InventoryDeviceInfo.Set(&v)
}

// SetInventoryDeviceInfoNil sets the value for InventoryDeviceInfo to be an explicit nil
func (o *ManagementInterface) SetInventoryDeviceInfoNil() {
	o.InventoryDeviceInfo.Set(nil)
}

// UnsetInventoryDeviceInfo ensures that no value is present for InventoryDeviceInfo, not even an explicit nil
func (o *ManagementInterface) UnsetInventoryDeviceInfo() {
	o.InventoryDeviceInfo.Unset()
}

// GetManagementController returns the ManagementController field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ManagementInterface) GetManagementController() ManagementControllerRelationship {
	if o == nil || IsNil(o.ManagementController.Get()) {
		var ret ManagementControllerRelationship
		return ret
	}
	return *o.ManagementController.Get()
}

// GetManagementControllerOk returns a tuple with the ManagementController field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ManagementInterface) GetManagementControllerOk() (*ManagementControllerRelationship, bool) {
	if o == nil {
		return nil, false
	}
	return o.ManagementController.Get(), o.ManagementController.IsSet()
}

// HasManagementController returns a boolean if a field has been set.
func (o *ManagementInterface) HasManagementController() bool {
	if o != nil && o.ManagementController.IsSet() {
		return true
	}

	return false
}

// SetManagementController gets a reference to the given NullableManagementControllerRelationship and assigns it to the ManagementController field.
func (o *ManagementInterface) SetManagementController(v ManagementControllerRelationship) {
	o.ManagementController.Set(&v)
}

// SetManagementControllerNil sets the value for ManagementController to be an explicit nil
func (o *ManagementInterface) SetManagementControllerNil() {
	o.ManagementController.Set(nil)
}

// UnsetManagementController ensures that no value is present for ManagementController, not even an explicit nil
func (o *ManagementInterface) UnsetManagementController() {
	o.ManagementController.Unset()
}

// GetRegisteredDevice returns the RegisteredDevice field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ManagementInterface) GetRegisteredDevice() AssetDeviceRegistrationRelationship {
	if o == nil || IsNil(o.RegisteredDevice.Get()) {
		var ret AssetDeviceRegistrationRelationship
		return ret
	}
	return *o.RegisteredDevice.Get()
}

// GetRegisteredDeviceOk returns a tuple with the RegisteredDevice field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ManagementInterface) GetRegisteredDeviceOk() (*AssetDeviceRegistrationRelationship, bool) {
	if o == nil {
		return nil, false
	}
	return o.RegisteredDevice.Get(), o.RegisteredDevice.IsSet()
}

// HasRegisteredDevice returns a boolean if a field has been set.
func (o *ManagementInterface) HasRegisteredDevice() bool {
	if o != nil && o.RegisteredDevice.IsSet() {
		return true
	}

	return false
}

// SetRegisteredDevice gets a reference to the given NullableAssetDeviceRegistrationRelationship and assigns it to the RegisteredDevice field.
func (o *ManagementInterface) SetRegisteredDevice(v AssetDeviceRegistrationRelationship) {
	o.RegisteredDevice.Set(&v)
}

// SetRegisteredDeviceNil sets the value for RegisteredDevice to be an explicit nil
func (o *ManagementInterface) SetRegisteredDeviceNil() {
	o.RegisteredDevice.Set(nil)
}

// UnsetRegisteredDevice ensures that no value is present for RegisteredDevice, not even an explicit nil
func (o *ManagementInterface) UnsetRegisteredDevice() {
	o.RegisteredDevice.Unset()
}

func (o ManagementInterface) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ManagementInterface) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	serializedInventoryBase, errInventoryBase := json.Marshal(o.InventoryBase)
	if errInventoryBase != nil {
		return map[string]interface{}{}, errInventoryBase
	}
	errInventoryBase = json.Unmarshal([]byte(serializedInventoryBase), &toSerialize)
	if errInventoryBase != nil {
		return map[string]interface{}{}, errInventoryBase
	}
	if _, exists := toSerialize["ClassId"]; !exists {
		toSerialize["ClassId"] = o.GetDefaultClassId()
	}
	toSerialize["ClassId"] = o.ClassId
	if _, exists := toSerialize["ObjectType"]; !exists {
		toSerialize["ObjectType"] = o.GetDefaultObjectType()
	}
	toSerialize["ObjectType"] = o.ObjectType
	if !IsNil(o.Gateway) {
		toSerialize["Gateway"] = o.Gateway
	}
	if !IsNil(o.HostName) {
		toSerialize["HostName"] = o.HostName
	}
	if !IsNil(o.IpAddress) {
		toSerialize["IpAddress"] = o.IpAddress
	}
	if !IsNil(o.Ipv4Address) {
		toSerialize["Ipv4Address"] = o.Ipv4Address
	}
	if !IsNil(o.Ipv4Gateway) {
		toSerialize["Ipv4Gateway"] = o.Ipv4Gateway
	}
	if !IsNil(o.Ipv4Mask) {
		toSerialize["Ipv4Mask"] = o.Ipv4Mask
	}
	if !IsNil(o.Ipv6Address) {
		toSerialize["Ipv6Address"] = o.Ipv6Address
	}
	if !IsNil(o.Ipv6Gateway) {
		toSerialize["Ipv6Gateway"] = o.Ipv6Gateway
	}
	if !IsNil(o.Ipv6Prefix) {
		toSerialize["Ipv6Prefix"] = o.Ipv6Prefix
	}
	if !IsNil(o.MacAddress) {
		toSerialize["MacAddress"] = o.MacAddress
	}
	if !IsNil(o.Mask) {
		toSerialize["Mask"] = o.Mask
	}
	if !IsNil(o.SwitchId) {
		toSerialize["SwitchId"] = o.SwitchId
	}
	if !IsNil(o.UemConnStatus) {
		toSerialize["UemConnStatus"] = o.UemConnStatus
	}
	if !IsNil(o.VirtualHostName) {
		toSerialize["VirtualHostName"] = o.VirtualHostName
	}
	if !IsNil(o.VlanId) {
		toSerialize["VlanId"] = o.VlanId
	}
	if o.EquipmentChassis.IsSet() {
		toSerialize["EquipmentChassis"] = o.EquipmentChassis.Get()
	}
	if o.InventoryDeviceInfo.IsSet() {
		toSerialize["InventoryDeviceInfo"] = o.InventoryDeviceInfo.Get()
	}
	if o.ManagementController.IsSet() {
		toSerialize["ManagementController"] = o.ManagementController.Get()
	}
	if o.RegisteredDevice.IsSet() {
		toSerialize["RegisteredDevice"] = o.RegisteredDevice.Get()
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ManagementInterface) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"ClassId",
		"ObjectType",
	}

	// defaultValueFuncMap captures the default values for required properties.
	// These values are used when required properties are missing from the payload.
	defaultValueFuncMap := map[string]func() interface{}{
		"ClassId":    o.GetDefaultClassId,
		"ObjectType": o.GetDefaultObjectType,
	}
	var defaultValueApplied bool
	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			if _, ok := defaultValueFuncMap[requiredProperty]; ok {
				allProperties[requiredProperty] = defaultValueFuncMap[requiredProperty]()
				defaultValueApplied = true
			}
		}
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	if defaultValueApplied {
		data, err = json.Marshal(allProperties)
		if err != nil {
			return err
		}
	}
	type ManagementInterfaceWithoutEmbeddedStruct struct {
		// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.
		ClassId string `json:"ClassId"`
		// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
		ObjectType string `json:"ObjectType"`
		// Default gateway for the interface.
		Gateway *string `json:"Gateway,omitempty"`
		// Hostname configured for the interface.
		HostName *string `json:"HostName,omitempty"`
		// IP address of the interface.
		IpAddress *string `json:"IpAddress,omitempty"`
		// IPv4 address of the interface.
		Ipv4Address *string `json:"Ipv4Address,omitempty"`
		// IPv4 default gateway for the interface.
		Ipv4Gateway *string `json:"Ipv4Gateway,omitempty"`
		// IPv4 Netmask for the interface.
		Ipv4Mask *string `json:"Ipv4Mask,omitempty"`
		// IPv6 address of the interface.
		Ipv6Address *string `json:"Ipv6Address,omitempty"`
		// IPv6 default gateway for the interface.
		Ipv6Gateway *string `json:"Ipv6Gateway,omitempty"`
		// IPv6 prefix for the interface.
		Ipv6Prefix *int64 `json:"Ipv6Prefix,omitempty"`
		// MAC address configured for the interface.
		MacAddress *string `json:"MacAddress,omitempty"`
		// Netmask for the interface.
		Mask *string `json:"Mask,omitempty"`
		// Switch Id connected to the interface.
		SwitchId *string `json:"SwitchId,omitempty"`
		// The event channel connection status for the interface.
		UemConnStatus *string `json:"UemConnStatus,omitempty"`
		// Virtual hostname configured for the interface in case of clustered environment.
		VirtualHostName *string `json:"VirtualHostName,omitempty"`
		// VlanId configured for the interface.
		VlanId               *int64                                      `json:"VlanId,omitempty"`
		EquipmentChassis     NullableEquipmentChassisRelationship        `json:"EquipmentChassis,omitempty"`
		InventoryDeviceInfo  NullableInventoryDeviceInfoRelationship     `json:"InventoryDeviceInfo,omitempty"`
		ManagementController NullableManagementControllerRelationship    `json:"ManagementController,omitempty"`
		RegisteredDevice     NullableAssetDeviceRegistrationRelationship `json:"RegisteredDevice,omitempty"`
	}

	varManagementInterfaceWithoutEmbeddedStruct := ManagementInterfaceWithoutEmbeddedStruct{}

	err = json.Unmarshal(data, &varManagementInterfaceWithoutEmbeddedStruct)
	if err == nil {
		varManagementInterface := _ManagementInterface{}
		varManagementInterface.ClassId = varManagementInterfaceWithoutEmbeddedStruct.ClassId
		varManagementInterface.ObjectType = varManagementInterfaceWithoutEmbeddedStruct.ObjectType
		varManagementInterface.Gateway = varManagementInterfaceWithoutEmbeddedStruct.Gateway
		varManagementInterface.HostName = varManagementInterfaceWithoutEmbeddedStruct.HostName
		varManagementInterface.IpAddress = varManagementInterfaceWithoutEmbeddedStruct.IpAddress
		varManagementInterface.Ipv4Address = varManagementInterfaceWithoutEmbeddedStruct.Ipv4Address
		varManagementInterface.Ipv4Gateway = varManagementInterfaceWithoutEmbeddedStruct.Ipv4Gateway
		varManagementInterface.Ipv4Mask = varManagementInterfaceWithoutEmbeddedStruct.Ipv4Mask
		varManagementInterface.Ipv6Address = varManagementInterfaceWithoutEmbeddedStruct.Ipv6Address
		varManagementInterface.Ipv6Gateway = varManagementInterfaceWithoutEmbeddedStruct.Ipv6Gateway
		varManagementInterface.Ipv6Prefix = varManagementInterfaceWithoutEmbeddedStruct.Ipv6Prefix
		varManagementInterface.MacAddress = varManagementInterfaceWithoutEmbeddedStruct.MacAddress
		varManagementInterface.Mask = varManagementInterfaceWithoutEmbeddedStruct.Mask
		varManagementInterface.SwitchId = varManagementInterfaceWithoutEmbeddedStruct.SwitchId
		varManagementInterface.UemConnStatus = varManagementInterfaceWithoutEmbeddedStruct.UemConnStatus
		varManagementInterface.VirtualHostName = varManagementInterfaceWithoutEmbeddedStruct.VirtualHostName
		varManagementInterface.VlanId = varManagementInterfaceWithoutEmbeddedStruct.VlanId
		varManagementInterface.EquipmentChassis = varManagementInterfaceWithoutEmbeddedStruct.EquipmentChassis
		varManagementInterface.InventoryDeviceInfo = varManagementInterfaceWithoutEmbeddedStruct.InventoryDeviceInfo
		varManagementInterface.ManagementController = varManagementInterfaceWithoutEmbeddedStruct.ManagementController
		varManagementInterface.RegisteredDevice = varManagementInterfaceWithoutEmbeddedStruct.RegisteredDevice
		*o = ManagementInterface(varManagementInterface)
	} else {
		return err
	}

	varManagementInterface := _ManagementInterface{}

	err = json.Unmarshal(data, &varManagementInterface)
	if err == nil {
		o.InventoryBase = varManagementInterface.InventoryBase
	} else {
		return err
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "ClassId")
		delete(additionalProperties, "ObjectType")
		delete(additionalProperties, "Gateway")
		delete(additionalProperties, "HostName")
		delete(additionalProperties, "IpAddress")
		delete(additionalProperties, "Ipv4Address")
		delete(additionalProperties, "Ipv4Gateway")
		delete(additionalProperties, "Ipv4Mask")
		delete(additionalProperties, "Ipv6Address")
		delete(additionalProperties, "Ipv6Gateway")
		delete(additionalProperties, "Ipv6Prefix")
		delete(additionalProperties, "MacAddress")
		delete(additionalProperties, "Mask")
		delete(additionalProperties, "SwitchId")
		delete(additionalProperties, "UemConnStatus")
		delete(additionalProperties, "VirtualHostName")
		delete(additionalProperties, "VlanId")
		delete(additionalProperties, "EquipmentChassis")
		delete(additionalProperties, "InventoryDeviceInfo")
		delete(additionalProperties, "ManagementController")
		delete(additionalProperties, "RegisteredDevice")

		// remove fields from embedded structs
		reflectInventoryBase := reflect.ValueOf(o.InventoryBase)
		for i := 0; i < reflectInventoryBase.Type().NumField(); i++ {
			t := reflectInventoryBase.Type().Field(i)

			if jsonTag := t.Tag.Get("json"); jsonTag != "" {
				fieldName := ""
				if commaIdx := strings.Index(jsonTag, ","); commaIdx > 0 {
					fieldName = jsonTag[:commaIdx]
				} else {
					fieldName = jsonTag
				}
				if fieldName != "AdditionalProperties" {
					delete(additionalProperties, fieldName)
				}
			}
		}

		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableManagementInterface struct {
	value *ManagementInterface
	isSet bool
}

func (v NullableManagementInterface) Get() *ManagementInterface {
	return v.value
}

func (v *NullableManagementInterface) Set(val *ManagementInterface) {
	v.value = val
	v.isSet = true
}

func (v NullableManagementInterface) IsSet() bool {
	return v.isSet
}

func (v *NullableManagementInterface) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableManagementInterface(val *ManagementInterface) *NullableManagementInterface {
	return &NullableManagementInterface{value: val, isSet: true}
}

func (v NullableManagementInterface) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableManagementInterface) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
