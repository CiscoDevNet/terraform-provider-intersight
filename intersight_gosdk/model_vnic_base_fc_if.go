/*
Cisco Intersight

Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations. The Intersight OpenAPI document defines the complete set of properties that are returned in the HTTP response. From that perspective, a client can expect that no additional properties are returned, unless these properties are explicitly defined in the OpenAPI document. However, when a client uses an older version of the Intersight OpenAPI document, the server may send additional properties because the software is more recent than the client. In that case, the client may receive properties that it does not know about. Some generated SDKs perform a strict validation of the HTTP response body against the OpenAPI document.

API version: 1.0.11-2024100405
Contact: intersight@cisco.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package intersight

import (
	"encoding/json"
	"fmt"
	"reflect"
	"strings"
)

// checks if the VnicBaseFcIf type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VnicBaseFcIf{}

// VnicBaseFcIf A Vhba specifying configuration settings.
type VnicBaseFcIf struct {
	PolicyAbstractPolicyItem
	// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data. The enum values provides the list of concrete types that can be instantiated from this abstract type.
	ClassId string `json:"ClassId"`
	// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property. The enum values provides the list of concrete types that can be instantiated from this abstract type.
	ObjectType string `json:"ObjectType"`
	// Enables retention of LUN ID associations in memory until they are manually cleared.
	PersistentBindings *bool `json:"PersistentBindings,omitempty"`
	// Pingroup name associated to vfc for static pinning. SCP deploy will resolve pingroup name and fetches the correspoding uplink port/port channel to pin the vfc traffic.
	PinGroupName *string `json:"PinGroupName,omitempty" validate:"regexp=^$|^[a-zA-Z0-9_.:-]{1,64}$"`
	// VHBA Type configuration for SAN Connectivity Policy. This configuration is supported only on Cisco VIC 14XX series and higher series of adapters. * `fc-initiator` - The default value set for vHBA Type Configuration. Fc-initiator specifies vHBA as a consumer of storage. Enables SCSI commands to transfer data and status information between host and target storage systems. * `fc-nvme-initiator` - Fc-nvme-initiator specifies vHBA as a consumer of storage. Enables NVMe-based message commands to transfer data and status information between host and target storage systems. * `fc-nvme-target` - Fc-nvme-target specifies vHBA as a provider of storage volumes to initiators. Enables NVMe-based message commands to transfer data and status information between host and target storage systems. Currently tech-preview, only enabled with an asynchronous driver. * `fc-target` - Fc-target specifies vHBA as a provider of storage volumes to initiators. Enables SCSI commands to transfer data and status information between host and target storage systems. fc-target is enabled only with an asynchronous driver.
	Type            *string                                 `json:"Type,omitempty"`
	FcAdapterPolicy NullableVnicFcAdapterPolicyRelationship `json:"FcAdapterPolicy,omitempty"`
	FcNetworkPolicy NullableVnicFcNetworkPolicyRelationship `json:"FcNetworkPolicy,omitempty"`
	FcQosPolicy     NullableVnicFcQosPolicyRelationship     `json:"FcQosPolicy,omitempty"`
	// An array of relationships to fabricFcZonePolicy resources.
	FcZonePolicies       []FabricFcZonePolicyRelationship `json:"FcZonePolicies,omitempty"`
	WwpnPool             NullableFcpoolPoolRelationship   `json:"WwpnPool,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _VnicBaseFcIf VnicBaseFcIf

// NewVnicBaseFcIf instantiates a new VnicBaseFcIf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVnicBaseFcIf(classId string, objectType string) *VnicBaseFcIf {
	this := VnicBaseFcIf{}
	this.ClassId = classId
	this.ObjectType = objectType
	var type_ string = "fc-initiator"
	this.Type = &type_
	return &this
}

// NewVnicBaseFcIfWithDefaults instantiates a new VnicBaseFcIf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVnicBaseFcIfWithDefaults() *VnicBaseFcIf {
	this := VnicBaseFcIf{}
	var type_ string = "fc-initiator"
	this.Type = &type_
	return &this
}

// GetClassId returns the ClassId field value
func (o *VnicBaseFcIf) GetClassId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ClassId
}

// GetClassIdOk returns a tuple with the ClassId field value
// and a boolean to check if the value has been set.
func (o *VnicBaseFcIf) GetClassIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ClassId, true
}

// SetClassId sets field value
func (o *VnicBaseFcIf) SetClassId(v string) {
	o.ClassId = v
}

// GetObjectType returns the ObjectType field value
func (o *VnicBaseFcIf) GetObjectType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ObjectType
}

// GetObjectTypeOk returns a tuple with the ObjectType field value
// and a boolean to check if the value has been set.
func (o *VnicBaseFcIf) GetObjectTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ObjectType, true
}

// SetObjectType sets field value
func (o *VnicBaseFcIf) SetObjectType(v string) {
	o.ObjectType = v
}

// GetPersistentBindings returns the PersistentBindings field value if set, zero value otherwise.
func (o *VnicBaseFcIf) GetPersistentBindings() bool {
	if o == nil || IsNil(o.PersistentBindings) {
		var ret bool
		return ret
	}
	return *o.PersistentBindings
}

// GetPersistentBindingsOk returns a tuple with the PersistentBindings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VnicBaseFcIf) GetPersistentBindingsOk() (*bool, bool) {
	if o == nil || IsNil(o.PersistentBindings) {
		return nil, false
	}
	return o.PersistentBindings, true
}

// HasPersistentBindings returns a boolean if a field has been set.
func (o *VnicBaseFcIf) HasPersistentBindings() bool {
	if o != nil && !IsNil(o.PersistentBindings) {
		return true
	}

	return false
}

// SetPersistentBindings gets a reference to the given bool and assigns it to the PersistentBindings field.
func (o *VnicBaseFcIf) SetPersistentBindings(v bool) {
	o.PersistentBindings = &v
}

// GetPinGroupName returns the PinGroupName field value if set, zero value otherwise.
func (o *VnicBaseFcIf) GetPinGroupName() string {
	if o == nil || IsNil(o.PinGroupName) {
		var ret string
		return ret
	}
	return *o.PinGroupName
}

// GetPinGroupNameOk returns a tuple with the PinGroupName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VnicBaseFcIf) GetPinGroupNameOk() (*string, bool) {
	if o == nil || IsNil(o.PinGroupName) {
		return nil, false
	}
	return o.PinGroupName, true
}

// HasPinGroupName returns a boolean if a field has been set.
func (o *VnicBaseFcIf) HasPinGroupName() bool {
	if o != nil && !IsNil(o.PinGroupName) {
		return true
	}

	return false
}

// SetPinGroupName gets a reference to the given string and assigns it to the PinGroupName field.
func (o *VnicBaseFcIf) SetPinGroupName(v string) {
	o.PinGroupName = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *VnicBaseFcIf) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VnicBaseFcIf) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *VnicBaseFcIf) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *VnicBaseFcIf) SetType(v string) {
	o.Type = &v
}

// GetFcAdapterPolicy returns the FcAdapterPolicy field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VnicBaseFcIf) GetFcAdapterPolicy() VnicFcAdapterPolicyRelationship {
	if o == nil || IsNil(o.FcAdapterPolicy.Get()) {
		var ret VnicFcAdapterPolicyRelationship
		return ret
	}
	return *o.FcAdapterPolicy.Get()
}

// GetFcAdapterPolicyOk returns a tuple with the FcAdapterPolicy field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VnicBaseFcIf) GetFcAdapterPolicyOk() (*VnicFcAdapterPolicyRelationship, bool) {
	if o == nil {
		return nil, false
	}
	return o.FcAdapterPolicy.Get(), o.FcAdapterPolicy.IsSet()
}

// HasFcAdapterPolicy returns a boolean if a field has been set.
func (o *VnicBaseFcIf) HasFcAdapterPolicy() bool {
	if o != nil && o.FcAdapterPolicy.IsSet() {
		return true
	}

	return false
}

// SetFcAdapterPolicy gets a reference to the given NullableVnicFcAdapterPolicyRelationship and assigns it to the FcAdapterPolicy field.
func (o *VnicBaseFcIf) SetFcAdapterPolicy(v VnicFcAdapterPolicyRelationship) {
	o.FcAdapterPolicy.Set(&v)
}

// SetFcAdapterPolicyNil sets the value for FcAdapterPolicy to be an explicit nil
func (o *VnicBaseFcIf) SetFcAdapterPolicyNil() {
	o.FcAdapterPolicy.Set(nil)
}

// UnsetFcAdapterPolicy ensures that no value is present for FcAdapterPolicy, not even an explicit nil
func (o *VnicBaseFcIf) UnsetFcAdapterPolicy() {
	o.FcAdapterPolicy.Unset()
}

// GetFcNetworkPolicy returns the FcNetworkPolicy field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VnicBaseFcIf) GetFcNetworkPolicy() VnicFcNetworkPolicyRelationship {
	if o == nil || IsNil(o.FcNetworkPolicy.Get()) {
		var ret VnicFcNetworkPolicyRelationship
		return ret
	}
	return *o.FcNetworkPolicy.Get()
}

// GetFcNetworkPolicyOk returns a tuple with the FcNetworkPolicy field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VnicBaseFcIf) GetFcNetworkPolicyOk() (*VnicFcNetworkPolicyRelationship, bool) {
	if o == nil {
		return nil, false
	}
	return o.FcNetworkPolicy.Get(), o.FcNetworkPolicy.IsSet()
}

// HasFcNetworkPolicy returns a boolean if a field has been set.
func (o *VnicBaseFcIf) HasFcNetworkPolicy() bool {
	if o != nil && o.FcNetworkPolicy.IsSet() {
		return true
	}

	return false
}

// SetFcNetworkPolicy gets a reference to the given NullableVnicFcNetworkPolicyRelationship and assigns it to the FcNetworkPolicy field.
func (o *VnicBaseFcIf) SetFcNetworkPolicy(v VnicFcNetworkPolicyRelationship) {
	o.FcNetworkPolicy.Set(&v)
}

// SetFcNetworkPolicyNil sets the value for FcNetworkPolicy to be an explicit nil
func (o *VnicBaseFcIf) SetFcNetworkPolicyNil() {
	o.FcNetworkPolicy.Set(nil)
}

// UnsetFcNetworkPolicy ensures that no value is present for FcNetworkPolicy, not even an explicit nil
func (o *VnicBaseFcIf) UnsetFcNetworkPolicy() {
	o.FcNetworkPolicy.Unset()
}

// GetFcQosPolicy returns the FcQosPolicy field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VnicBaseFcIf) GetFcQosPolicy() VnicFcQosPolicyRelationship {
	if o == nil || IsNil(o.FcQosPolicy.Get()) {
		var ret VnicFcQosPolicyRelationship
		return ret
	}
	return *o.FcQosPolicy.Get()
}

// GetFcQosPolicyOk returns a tuple with the FcQosPolicy field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VnicBaseFcIf) GetFcQosPolicyOk() (*VnicFcQosPolicyRelationship, bool) {
	if o == nil {
		return nil, false
	}
	return o.FcQosPolicy.Get(), o.FcQosPolicy.IsSet()
}

// HasFcQosPolicy returns a boolean if a field has been set.
func (o *VnicBaseFcIf) HasFcQosPolicy() bool {
	if o != nil && o.FcQosPolicy.IsSet() {
		return true
	}

	return false
}

// SetFcQosPolicy gets a reference to the given NullableVnicFcQosPolicyRelationship and assigns it to the FcQosPolicy field.
func (o *VnicBaseFcIf) SetFcQosPolicy(v VnicFcQosPolicyRelationship) {
	o.FcQosPolicy.Set(&v)
}

// SetFcQosPolicyNil sets the value for FcQosPolicy to be an explicit nil
func (o *VnicBaseFcIf) SetFcQosPolicyNil() {
	o.FcQosPolicy.Set(nil)
}

// UnsetFcQosPolicy ensures that no value is present for FcQosPolicy, not even an explicit nil
func (o *VnicBaseFcIf) UnsetFcQosPolicy() {
	o.FcQosPolicy.Unset()
}

// GetFcZonePolicies returns the FcZonePolicies field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VnicBaseFcIf) GetFcZonePolicies() []FabricFcZonePolicyRelationship {
	if o == nil {
		var ret []FabricFcZonePolicyRelationship
		return ret
	}
	return o.FcZonePolicies
}

// GetFcZonePoliciesOk returns a tuple with the FcZonePolicies field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VnicBaseFcIf) GetFcZonePoliciesOk() ([]FabricFcZonePolicyRelationship, bool) {
	if o == nil || IsNil(o.FcZonePolicies) {
		return nil, false
	}
	return o.FcZonePolicies, true
}

// HasFcZonePolicies returns a boolean if a field has been set.
func (o *VnicBaseFcIf) HasFcZonePolicies() bool {
	if o != nil && !IsNil(o.FcZonePolicies) {
		return true
	}

	return false
}

// SetFcZonePolicies gets a reference to the given []FabricFcZonePolicyRelationship and assigns it to the FcZonePolicies field.
func (o *VnicBaseFcIf) SetFcZonePolicies(v []FabricFcZonePolicyRelationship) {
	o.FcZonePolicies = v
}

// GetWwpnPool returns the WwpnPool field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VnicBaseFcIf) GetWwpnPool() FcpoolPoolRelationship {
	if o == nil || IsNil(o.WwpnPool.Get()) {
		var ret FcpoolPoolRelationship
		return ret
	}
	return *o.WwpnPool.Get()
}

// GetWwpnPoolOk returns a tuple with the WwpnPool field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VnicBaseFcIf) GetWwpnPoolOk() (*FcpoolPoolRelationship, bool) {
	if o == nil {
		return nil, false
	}
	return o.WwpnPool.Get(), o.WwpnPool.IsSet()
}

// HasWwpnPool returns a boolean if a field has been set.
func (o *VnicBaseFcIf) HasWwpnPool() bool {
	if o != nil && o.WwpnPool.IsSet() {
		return true
	}

	return false
}

// SetWwpnPool gets a reference to the given NullableFcpoolPoolRelationship and assigns it to the WwpnPool field.
func (o *VnicBaseFcIf) SetWwpnPool(v FcpoolPoolRelationship) {
	o.WwpnPool.Set(&v)
}

// SetWwpnPoolNil sets the value for WwpnPool to be an explicit nil
func (o *VnicBaseFcIf) SetWwpnPoolNil() {
	o.WwpnPool.Set(nil)
}

// UnsetWwpnPool ensures that no value is present for WwpnPool, not even an explicit nil
func (o *VnicBaseFcIf) UnsetWwpnPool() {
	o.WwpnPool.Unset()
}

func (o VnicBaseFcIf) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VnicBaseFcIf) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	serializedPolicyAbstractPolicyItem, errPolicyAbstractPolicyItem := json.Marshal(o.PolicyAbstractPolicyItem)
	if errPolicyAbstractPolicyItem != nil {
		return map[string]interface{}{}, errPolicyAbstractPolicyItem
	}
	errPolicyAbstractPolicyItem = json.Unmarshal([]byte(serializedPolicyAbstractPolicyItem), &toSerialize)
	if errPolicyAbstractPolicyItem != nil {
		return map[string]interface{}{}, errPolicyAbstractPolicyItem
	}
	toSerialize["ClassId"] = o.ClassId
	toSerialize["ObjectType"] = o.ObjectType
	if !IsNil(o.PersistentBindings) {
		toSerialize["PersistentBindings"] = o.PersistentBindings
	}
	if !IsNil(o.PinGroupName) {
		toSerialize["PinGroupName"] = o.PinGroupName
	}
	if !IsNil(o.Type) {
		toSerialize["Type"] = o.Type
	}
	if o.FcAdapterPolicy.IsSet() {
		toSerialize["FcAdapterPolicy"] = o.FcAdapterPolicy.Get()
	}
	if o.FcNetworkPolicy.IsSet() {
		toSerialize["FcNetworkPolicy"] = o.FcNetworkPolicy.Get()
	}
	if o.FcQosPolicy.IsSet() {
		toSerialize["FcQosPolicy"] = o.FcQosPolicy.Get()
	}
	if o.FcZonePolicies != nil {
		toSerialize["FcZonePolicies"] = o.FcZonePolicies
	}
	if o.WwpnPool.IsSet() {
		toSerialize["WwpnPool"] = o.WwpnPool.Get()
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *VnicBaseFcIf) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"ClassId",
		"ObjectType",
	}

	// defaultValueFuncMap captures the default values for required properties.
	// These values are used when required properties are missing from the payload.
	defaultValueFuncMap := map[string]func() interface{}{}
	var defaultValueApplied bool
	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			if _, ok := defaultValueFuncMap[requiredProperty]; ok {
				allProperties[requiredProperty] = defaultValueFuncMap[requiredProperty]()
				defaultValueApplied = true
			}
		}
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	if defaultValueApplied {
		data, err = json.Marshal(allProperties)
		if err != nil {
			return err
		}
	}
	type VnicBaseFcIfWithoutEmbeddedStruct struct {
		// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data. The enum values provides the list of concrete types that can be instantiated from this abstract type.
		ClassId string `json:"ClassId"`
		// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property. The enum values provides the list of concrete types that can be instantiated from this abstract type.
		ObjectType string `json:"ObjectType"`
		// Enables retention of LUN ID associations in memory until they are manually cleared.
		PersistentBindings *bool `json:"PersistentBindings,omitempty"`
		// Pingroup name associated to vfc for static pinning. SCP deploy will resolve pingroup name and fetches the correspoding uplink port/port channel to pin the vfc traffic.
		PinGroupName *string `json:"PinGroupName,omitempty" validate:"regexp=^$|^[a-zA-Z0-9_.:-]{1,64}$"`
		// VHBA Type configuration for SAN Connectivity Policy. This configuration is supported only on Cisco VIC 14XX series and higher series of adapters. * `fc-initiator` - The default value set for vHBA Type Configuration. Fc-initiator specifies vHBA as a consumer of storage. Enables SCSI commands to transfer data and status information between host and target storage systems. * `fc-nvme-initiator` - Fc-nvme-initiator specifies vHBA as a consumer of storage. Enables NVMe-based message commands to transfer data and status information between host and target storage systems. * `fc-nvme-target` - Fc-nvme-target specifies vHBA as a provider of storage volumes to initiators. Enables NVMe-based message commands to transfer data and status information between host and target storage systems. Currently tech-preview, only enabled with an asynchronous driver. * `fc-target` - Fc-target specifies vHBA as a provider of storage volumes to initiators. Enables SCSI commands to transfer data and status information between host and target storage systems. fc-target is enabled only with an asynchronous driver.
		Type            *string                                 `json:"Type,omitempty"`
		FcAdapterPolicy NullableVnicFcAdapterPolicyRelationship `json:"FcAdapterPolicy,omitempty"`
		FcNetworkPolicy NullableVnicFcNetworkPolicyRelationship `json:"FcNetworkPolicy,omitempty"`
		FcQosPolicy     NullableVnicFcQosPolicyRelationship     `json:"FcQosPolicy,omitempty"`
		// An array of relationships to fabricFcZonePolicy resources.
		FcZonePolicies []FabricFcZonePolicyRelationship `json:"FcZonePolicies,omitempty"`
		WwpnPool       NullableFcpoolPoolRelationship   `json:"WwpnPool,omitempty"`
	}

	varVnicBaseFcIfWithoutEmbeddedStruct := VnicBaseFcIfWithoutEmbeddedStruct{}

	err = json.Unmarshal(data, &varVnicBaseFcIfWithoutEmbeddedStruct)
	if err == nil {
		varVnicBaseFcIf := _VnicBaseFcIf{}
		varVnicBaseFcIf.ClassId = varVnicBaseFcIfWithoutEmbeddedStruct.ClassId
		varVnicBaseFcIf.ObjectType = varVnicBaseFcIfWithoutEmbeddedStruct.ObjectType
		varVnicBaseFcIf.PersistentBindings = varVnicBaseFcIfWithoutEmbeddedStruct.PersistentBindings
		varVnicBaseFcIf.PinGroupName = varVnicBaseFcIfWithoutEmbeddedStruct.PinGroupName
		varVnicBaseFcIf.Type = varVnicBaseFcIfWithoutEmbeddedStruct.Type
		varVnicBaseFcIf.FcAdapterPolicy = varVnicBaseFcIfWithoutEmbeddedStruct.FcAdapterPolicy
		varVnicBaseFcIf.FcNetworkPolicy = varVnicBaseFcIfWithoutEmbeddedStruct.FcNetworkPolicy
		varVnicBaseFcIf.FcQosPolicy = varVnicBaseFcIfWithoutEmbeddedStruct.FcQosPolicy
		varVnicBaseFcIf.FcZonePolicies = varVnicBaseFcIfWithoutEmbeddedStruct.FcZonePolicies
		varVnicBaseFcIf.WwpnPool = varVnicBaseFcIfWithoutEmbeddedStruct.WwpnPool
		*o = VnicBaseFcIf(varVnicBaseFcIf)
	} else {
		return err
	}

	varVnicBaseFcIf := _VnicBaseFcIf{}

	err = json.Unmarshal(data, &varVnicBaseFcIf)
	if err == nil {
		o.PolicyAbstractPolicyItem = varVnicBaseFcIf.PolicyAbstractPolicyItem
	} else {
		return err
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "ClassId")
		delete(additionalProperties, "ObjectType")
		delete(additionalProperties, "PersistentBindings")
		delete(additionalProperties, "PinGroupName")
		delete(additionalProperties, "Type")
		delete(additionalProperties, "FcAdapterPolicy")
		delete(additionalProperties, "FcNetworkPolicy")
		delete(additionalProperties, "FcQosPolicy")
		delete(additionalProperties, "FcZonePolicies")
		delete(additionalProperties, "WwpnPool")

		// remove fields from embedded structs
		reflectPolicyAbstractPolicyItem := reflect.ValueOf(o.PolicyAbstractPolicyItem)
		for i := 0; i < reflectPolicyAbstractPolicyItem.Type().NumField(); i++ {
			t := reflectPolicyAbstractPolicyItem.Type().Field(i)

			if jsonTag := t.Tag.Get("json"); jsonTag != "" {
				fieldName := ""
				if commaIdx := strings.Index(jsonTag, ","); commaIdx > 0 {
					fieldName = jsonTag[:commaIdx]
				} else {
					fieldName = jsonTag
				}
				if fieldName != "AdditionalProperties" {
					delete(additionalProperties, fieldName)
				}
			}
		}

		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableVnicBaseFcIf struct {
	value *VnicBaseFcIf
	isSet bool
}

func (v NullableVnicBaseFcIf) Get() *VnicBaseFcIf {
	return v.value
}

func (v *NullableVnicBaseFcIf) Set(val *VnicBaseFcIf) {
	v.value = val
	v.isSet = true
}

func (v NullableVnicBaseFcIf) IsSet() bool {
	return v.isSet
}

func (v *NullableVnicBaseFcIf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVnicBaseFcIf(val *VnicBaseFcIf) *NullableVnicBaseFcIf {
	return &NullableVnicBaseFcIf{value: val, isSet: true}
}

func (v NullableVnicBaseFcIf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVnicBaseFcIf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
