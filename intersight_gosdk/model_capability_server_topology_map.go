/*
Cisco Intersight

Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations. The Intersight OpenAPI document defines the complete set of properties that are returned in the HTTP response. From that perspective, a client can expect that no additional properties are returned, unless these properties are explicitly defined in the OpenAPI document. However, when a client uses an older version of the Intersight OpenAPI document, the server may send additional properties because the software is more recent than the client. In that case, the client may receive properties that it does not know about. Some generated SDKs perform a strict validation of the HTTP response body against the OpenAPI document.

API version: 1.0.11-2025101412
Contact: intersight@cisco.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package intersight

import (
	"encoding/json"
	"fmt"
	"reflect"
	"strings"
)

// checks if the CapabilityServerTopologyMap type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CapabilityServerTopologyMap{}

// CapabilityServerTopologyMap Mapping of server models to their supported PCIe topology configurations and compatibility matrix.
type CapabilityServerTopologyMap struct {
	CapabilityCapability
	// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.
	ClassId string `json:"ClassId"`
	// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
	ObjectType string `json:"ObjectType"`
	// Handler identifier for managing this topology configuration.
	Handler        *string                           `json:"Handler,omitempty"`
	PcieNodeDetail NullableCapabilityDeviceInventory `json:"PcieNodeDetail,omitempty"`
	ServerDetail   NullableCapabilityDeviceInventory `json:"ServerDetail,omitempty"`
	// Server model information for which this topology configuration is defined.
	SupportedTopologyName *string                           `json:"SupportedTopologyName,omitempty"`
	XfmDetail             NullableCapabilityDeviceInventory `json:"XfmDetail,omitempty"`
	AdditionalProperties  map[string]interface{}
}

type _CapabilityServerTopologyMap CapabilityServerTopologyMap

// NewCapabilityServerTopologyMap instantiates a new CapabilityServerTopologyMap object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCapabilityServerTopologyMap(classId string, objectType string) *CapabilityServerTopologyMap {
	this := CapabilityServerTopologyMap{}
	this.ClassId = classId
	this.ObjectType = objectType
	return &this
}

// NewCapabilityServerTopologyMapWithDefaults instantiates a new CapabilityServerTopologyMap object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCapabilityServerTopologyMapWithDefaults() *CapabilityServerTopologyMap {
	this := CapabilityServerTopologyMap{}
	var classId string = "capability.ServerTopologyMap"
	this.ClassId = classId
	var objectType string = "capability.ServerTopologyMap"
	this.ObjectType = objectType
	return &this
}

// GetClassId returns the ClassId field value
func (o *CapabilityServerTopologyMap) GetClassId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ClassId
}

// GetClassIdOk returns a tuple with the ClassId field value
// and a boolean to check if the value has been set.
func (o *CapabilityServerTopologyMap) GetClassIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ClassId, true
}

// SetClassId sets field value
func (o *CapabilityServerTopologyMap) SetClassId(v string) {
	o.ClassId = v
}

// GetDefaultClassId returns the default value "capability.ServerTopologyMap" of the ClassId field.
func (o *CapabilityServerTopologyMap) GetDefaultClassId() interface{} {
	return "capability.ServerTopologyMap"
}

// GetObjectType returns the ObjectType field value
func (o *CapabilityServerTopologyMap) GetObjectType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ObjectType
}

// GetObjectTypeOk returns a tuple with the ObjectType field value
// and a boolean to check if the value has been set.
func (o *CapabilityServerTopologyMap) GetObjectTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ObjectType, true
}

// SetObjectType sets field value
func (o *CapabilityServerTopologyMap) SetObjectType(v string) {
	o.ObjectType = v
}

// GetDefaultObjectType returns the default value "capability.ServerTopologyMap" of the ObjectType field.
func (o *CapabilityServerTopologyMap) GetDefaultObjectType() interface{} {
	return "capability.ServerTopologyMap"
}

// GetHandler returns the Handler field value if set, zero value otherwise.
func (o *CapabilityServerTopologyMap) GetHandler() string {
	if o == nil || IsNil(o.Handler) {
		var ret string
		return ret
	}
	return *o.Handler
}

// GetHandlerOk returns a tuple with the Handler field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CapabilityServerTopologyMap) GetHandlerOk() (*string, bool) {
	if o == nil || IsNil(o.Handler) {
		return nil, false
	}
	return o.Handler, true
}

// HasHandler returns a boolean if a field has been set.
func (o *CapabilityServerTopologyMap) HasHandler() bool {
	if o != nil && !IsNil(o.Handler) {
		return true
	}

	return false
}

// SetHandler gets a reference to the given string and assigns it to the Handler field.
func (o *CapabilityServerTopologyMap) SetHandler(v string) {
	o.Handler = &v
}

// GetPcieNodeDetail returns the PcieNodeDetail field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CapabilityServerTopologyMap) GetPcieNodeDetail() CapabilityDeviceInventory {
	if o == nil || IsNil(o.PcieNodeDetail.Get()) {
		var ret CapabilityDeviceInventory
		return ret
	}
	return *o.PcieNodeDetail.Get()
}

// GetPcieNodeDetailOk returns a tuple with the PcieNodeDetail field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CapabilityServerTopologyMap) GetPcieNodeDetailOk() (*CapabilityDeviceInventory, bool) {
	if o == nil {
		return nil, false
	}
	return o.PcieNodeDetail.Get(), o.PcieNodeDetail.IsSet()
}

// HasPcieNodeDetail returns a boolean if a field has been set.
func (o *CapabilityServerTopologyMap) HasPcieNodeDetail() bool {
	if o != nil && o.PcieNodeDetail.IsSet() {
		return true
	}

	return false
}

// SetPcieNodeDetail gets a reference to the given NullableCapabilityDeviceInventory and assigns it to the PcieNodeDetail field.
func (o *CapabilityServerTopologyMap) SetPcieNodeDetail(v CapabilityDeviceInventory) {
	o.PcieNodeDetail.Set(&v)
}

// SetPcieNodeDetailNil sets the value for PcieNodeDetail to be an explicit nil
func (o *CapabilityServerTopologyMap) SetPcieNodeDetailNil() {
	o.PcieNodeDetail.Set(nil)
}

// UnsetPcieNodeDetail ensures that no value is present for PcieNodeDetail, not even an explicit nil
func (o *CapabilityServerTopologyMap) UnsetPcieNodeDetail() {
	o.PcieNodeDetail.Unset()
}

// GetServerDetail returns the ServerDetail field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CapabilityServerTopologyMap) GetServerDetail() CapabilityDeviceInventory {
	if o == nil || IsNil(o.ServerDetail.Get()) {
		var ret CapabilityDeviceInventory
		return ret
	}
	return *o.ServerDetail.Get()
}

// GetServerDetailOk returns a tuple with the ServerDetail field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CapabilityServerTopologyMap) GetServerDetailOk() (*CapabilityDeviceInventory, bool) {
	if o == nil {
		return nil, false
	}
	return o.ServerDetail.Get(), o.ServerDetail.IsSet()
}

// HasServerDetail returns a boolean if a field has been set.
func (o *CapabilityServerTopologyMap) HasServerDetail() bool {
	if o != nil && o.ServerDetail.IsSet() {
		return true
	}

	return false
}

// SetServerDetail gets a reference to the given NullableCapabilityDeviceInventory and assigns it to the ServerDetail field.
func (o *CapabilityServerTopologyMap) SetServerDetail(v CapabilityDeviceInventory) {
	o.ServerDetail.Set(&v)
}

// SetServerDetailNil sets the value for ServerDetail to be an explicit nil
func (o *CapabilityServerTopologyMap) SetServerDetailNil() {
	o.ServerDetail.Set(nil)
}

// UnsetServerDetail ensures that no value is present for ServerDetail, not even an explicit nil
func (o *CapabilityServerTopologyMap) UnsetServerDetail() {
	o.ServerDetail.Unset()
}

// GetSupportedTopologyName returns the SupportedTopologyName field value if set, zero value otherwise.
func (o *CapabilityServerTopologyMap) GetSupportedTopologyName() string {
	if o == nil || IsNil(o.SupportedTopologyName) {
		var ret string
		return ret
	}
	return *o.SupportedTopologyName
}

// GetSupportedTopologyNameOk returns a tuple with the SupportedTopologyName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CapabilityServerTopologyMap) GetSupportedTopologyNameOk() (*string, bool) {
	if o == nil || IsNil(o.SupportedTopologyName) {
		return nil, false
	}
	return o.SupportedTopologyName, true
}

// HasSupportedTopologyName returns a boolean if a field has been set.
func (o *CapabilityServerTopologyMap) HasSupportedTopologyName() bool {
	if o != nil && !IsNil(o.SupportedTopologyName) {
		return true
	}

	return false
}

// SetSupportedTopologyName gets a reference to the given string and assigns it to the SupportedTopologyName field.
func (o *CapabilityServerTopologyMap) SetSupportedTopologyName(v string) {
	o.SupportedTopologyName = &v
}

// GetXfmDetail returns the XfmDetail field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CapabilityServerTopologyMap) GetXfmDetail() CapabilityDeviceInventory {
	if o == nil || IsNil(o.XfmDetail.Get()) {
		var ret CapabilityDeviceInventory
		return ret
	}
	return *o.XfmDetail.Get()
}

// GetXfmDetailOk returns a tuple with the XfmDetail field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CapabilityServerTopologyMap) GetXfmDetailOk() (*CapabilityDeviceInventory, bool) {
	if o == nil {
		return nil, false
	}
	return o.XfmDetail.Get(), o.XfmDetail.IsSet()
}

// HasXfmDetail returns a boolean if a field has been set.
func (o *CapabilityServerTopologyMap) HasXfmDetail() bool {
	if o != nil && o.XfmDetail.IsSet() {
		return true
	}

	return false
}

// SetXfmDetail gets a reference to the given NullableCapabilityDeviceInventory and assigns it to the XfmDetail field.
func (o *CapabilityServerTopologyMap) SetXfmDetail(v CapabilityDeviceInventory) {
	o.XfmDetail.Set(&v)
}

// SetXfmDetailNil sets the value for XfmDetail to be an explicit nil
func (o *CapabilityServerTopologyMap) SetXfmDetailNil() {
	o.XfmDetail.Set(nil)
}

// UnsetXfmDetail ensures that no value is present for XfmDetail, not even an explicit nil
func (o *CapabilityServerTopologyMap) UnsetXfmDetail() {
	o.XfmDetail.Unset()
}

func (o CapabilityServerTopologyMap) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CapabilityServerTopologyMap) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	serializedCapabilityCapability, errCapabilityCapability := json.Marshal(o.CapabilityCapability)
	if errCapabilityCapability != nil {
		return map[string]interface{}{}, errCapabilityCapability
	}
	errCapabilityCapability = json.Unmarshal([]byte(serializedCapabilityCapability), &toSerialize)
	if errCapabilityCapability != nil {
		return map[string]interface{}{}, errCapabilityCapability
	}
	if _, exists := toSerialize["ClassId"]; !exists {
		toSerialize["ClassId"] = o.GetDefaultClassId()
	}
	toSerialize["ClassId"] = o.ClassId
	if _, exists := toSerialize["ObjectType"]; !exists {
		toSerialize["ObjectType"] = o.GetDefaultObjectType()
	}
	toSerialize["ObjectType"] = o.ObjectType
	if !IsNil(o.Handler) {
		toSerialize["Handler"] = o.Handler
	}
	if o.PcieNodeDetail.IsSet() {
		toSerialize["PcieNodeDetail"] = o.PcieNodeDetail.Get()
	}
	if o.ServerDetail.IsSet() {
		toSerialize["ServerDetail"] = o.ServerDetail.Get()
	}
	if !IsNil(o.SupportedTopologyName) {
		toSerialize["SupportedTopologyName"] = o.SupportedTopologyName
	}
	if o.XfmDetail.IsSet() {
		toSerialize["XfmDetail"] = o.XfmDetail.Get()
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *CapabilityServerTopologyMap) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"ClassId",
		"ObjectType",
	}

	// defaultValueFuncMap captures the default values for required properties.
	// These values are used when required properties are missing from the payload.
	defaultValueFuncMap := map[string]func() interface{}{
		"ClassId":    o.GetDefaultClassId,
		"ObjectType": o.GetDefaultObjectType,
	}
	var defaultValueApplied bool
	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			if _, ok := defaultValueFuncMap[requiredProperty]; ok {
				allProperties[requiredProperty] = defaultValueFuncMap[requiredProperty]()
				defaultValueApplied = true
			}
		}
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	if defaultValueApplied {
		data, err = json.Marshal(allProperties)
		if err != nil {
			return err
		}
	}
	type CapabilityServerTopologyMapWithoutEmbeddedStruct struct {
		// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.
		ClassId string `json:"ClassId"`
		// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
		ObjectType string `json:"ObjectType"`
		// Handler identifier for managing this topology configuration.
		Handler        *string                           `json:"Handler,omitempty"`
		PcieNodeDetail NullableCapabilityDeviceInventory `json:"PcieNodeDetail,omitempty"`
		ServerDetail   NullableCapabilityDeviceInventory `json:"ServerDetail,omitempty"`
		// Server model information for which this topology configuration is defined.
		SupportedTopologyName *string                           `json:"SupportedTopologyName,omitempty"`
		XfmDetail             NullableCapabilityDeviceInventory `json:"XfmDetail,omitempty"`
	}

	varCapabilityServerTopologyMapWithoutEmbeddedStruct := CapabilityServerTopologyMapWithoutEmbeddedStruct{}

	err = json.Unmarshal(data, &varCapabilityServerTopologyMapWithoutEmbeddedStruct)
	if err == nil {
		varCapabilityServerTopologyMap := _CapabilityServerTopologyMap{}
		varCapabilityServerTopologyMap.ClassId = varCapabilityServerTopologyMapWithoutEmbeddedStruct.ClassId
		varCapabilityServerTopologyMap.ObjectType = varCapabilityServerTopologyMapWithoutEmbeddedStruct.ObjectType
		varCapabilityServerTopologyMap.Handler = varCapabilityServerTopologyMapWithoutEmbeddedStruct.Handler
		varCapabilityServerTopologyMap.PcieNodeDetail = varCapabilityServerTopologyMapWithoutEmbeddedStruct.PcieNodeDetail
		varCapabilityServerTopologyMap.ServerDetail = varCapabilityServerTopologyMapWithoutEmbeddedStruct.ServerDetail
		varCapabilityServerTopologyMap.SupportedTopologyName = varCapabilityServerTopologyMapWithoutEmbeddedStruct.SupportedTopologyName
		varCapabilityServerTopologyMap.XfmDetail = varCapabilityServerTopologyMapWithoutEmbeddedStruct.XfmDetail
		*o = CapabilityServerTopologyMap(varCapabilityServerTopologyMap)
	} else {
		return err
	}

	varCapabilityServerTopologyMap := _CapabilityServerTopologyMap{}

	err = json.Unmarshal(data, &varCapabilityServerTopologyMap)
	if err == nil {
		o.CapabilityCapability = varCapabilityServerTopologyMap.CapabilityCapability
	} else {
		return err
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "ClassId")
		delete(additionalProperties, "ObjectType")
		delete(additionalProperties, "Handler")
		delete(additionalProperties, "PcieNodeDetail")
		delete(additionalProperties, "ServerDetail")
		delete(additionalProperties, "SupportedTopologyName")
		delete(additionalProperties, "XfmDetail")

		// remove fields from embedded structs
		reflectCapabilityCapability := reflect.ValueOf(o.CapabilityCapability)
		for i := 0; i < reflectCapabilityCapability.Type().NumField(); i++ {
			t := reflectCapabilityCapability.Type().Field(i)

			if jsonTag := t.Tag.Get("json"); jsonTag != "" {
				fieldName := ""
				if commaIdx := strings.Index(jsonTag, ","); commaIdx > 0 {
					fieldName = jsonTag[:commaIdx]
				} else {
					fieldName = jsonTag
				}
				if fieldName != "AdditionalProperties" {
					delete(additionalProperties, fieldName)
				}
			}
		}

		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableCapabilityServerTopologyMap struct {
	value *CapabilityServerTopologyMap
	isSet bool
}

func (v NullableCapabilityServerTopologyMap) Get() *CapabilityServerTopologyMap {
	return v.value
}

func (v *NullableCapabilityServerTopologyMap) Set(val *CapabilityServerTopologyMap) {
	v.value = val
	v.isSet = true
}

func (v NullableCapabilityServerTopologyMap) IsSet() bool {
	return v.isSet
}

func (v *NullableCapabilityServerTopologyMap) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCapabilityServerTopologyMap(val *CapabilityServerTopologyMap) *NullableCapabilityServerTopologyMap {
	return &NullableCapabilityServerTopologyMap{value: val, isSet: true}
}

func (v NullableCapabilityServerTopologyMap) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCapabilityServerTopologyMap) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
