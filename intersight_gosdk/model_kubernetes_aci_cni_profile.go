/*
 * Cisco Intersight
 *
 * Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations. The Intersight OpenAPI document defines the complete set of properties that are returned in the HTTP response. From that perspective, a client can expect that no additional properties are returned, unless these properties are explicitly defined in the OpenAPI document. However, when a client uses an older version of the Intersight OpenAPI document, the server may send additional properties because the software is more recent than the client. In that case, the client may receive properties that it does not know about. Some generated SDKs perform a strict validation of the HTTP response body against the OpenAPI document. This document was created on 2021-07-21T16:37:30Z.
 *
 * API version: 1.0.9-4403
 * Contact: intersight@cisco.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package intersight

import (
	"encoding/json"
	"reflect"
	"strings"
)

// KubernetesAciCniProfile Configuration for an ACI CNI profile.
type KubernetesAciCniProfile struct {
	PolicyAbstractProfile
	// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.
	ClassId string `json:"ClassId"`
	// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
	ObjectType string `json:"ObjectType"`
	// Name of ACI AAEP (Attachable Access Entity Profile) to be used for all Kubernetes clusters using this policy.
	AaepName *string `json:"AaepName,omitempty"`
	// Start of range of IP subnets for external services with dynamic IP allocation for use by Kubernetes clusters using this ACI CNI policy.
	ExtSvcDynSubnetStart *string `json:"ExtSvcDynSubnetStart,omitempty"`
	// Start of range of IP subnets for external services with static IP allocation for use by Kubernetes clusters using this ACI CNI policy.
	ExtSvcStaticSubnetStart *string `json:"ExtSvcStaticSubnetStart,omitempty"`
	// Value of ACI infrastructuere VLAN ID for the ACI fabric.
	InfraVlanId *int64 `json:"InfraVlanId,omitempty"`
	// Name of ACI L3Out network to be used for all Kubernetes clusters using this policy.
	L3OutNetworkName *string `json:"L3OutNetworkName,omitempty"`
	// Name of ACI L3Out policy to be used for all Kubernetes clusters using this policy.
	L3OutPolicyName *string `json:"L3OutPolicyName,omitempty"`
	// Tenant in ACI used by this L3Out and Common VRF.
	L3OutTenant *string `json:"L3OutTenant,omitempty"`
	// VMM domain within which Kubernetes clusters using this policy are nested.
	NestedVmmDomain *string `json:"NestedVmmDomain,omitempty"`
	// Start of range of ACI Node Service IP subnets to use by Kubernetes clusters using this ACI CNI policy This is used for the service graph which is used for ACI PBR based load balancing.
	NodeSvcSubnetStart *string `json:"NodeSvcSubnetStart,omitempty"`
	// Ending value of VLAN range used to assign Node VLAN Ids for each Kubernetes cluster using this policy.
	NodeVlanRangeEnd *int64 `json:"NodeVlanRangeEnd,omitempty"`
	// Starting value of VLAN range used to assign Node VLAN Ids for each Kubernetes cluster using this policy.
	NodeVlanRangeStart *int64 `json:"NodeVlanRangeStart,omitempty"`
	// Number of k8s clusters currently using this ACI CNI profile.
	NumberOfKubernetesClusters *int64 `json:"NumberOfKubernetesClusters,omitempty"`
	// Range of IP Multicast addresses to be used by the Opflex protocol for Kubernetes clusters using this policy.
	OpflexMulticastAddressRange *string `json:"OpflexMulticastAddressRange,omitempty"`
	// Start of range of Kubernetes pod IP subnets to use by Kubernetes clusters using this ACI CNI policy This should be a /8 IP subnet so that multiple /16 subnets can be assigned for pod subnets of Kubernetes clusters using this profile.
	PodSubnetStart *string `json:"PodSubnetStart,omitempty"`
	// Start of range of Kubernetes Service IP subnets to use by Kubernetes clusters using this ACI CNI policy Currently this is fixed internally and read-only.
	SvcSubnetStart *string `json:"SvcSubnetStart,omitempty"`
	// VRF (Virtual Routing and Forwarding) domain to be used within ACI fabric by all k8s clusters using this policy.
	Vrf *string `json:"Vrf,omitempty"`
	// An array of relationships to kubernetesAciCniTenantClusterAllocation resources.
	ClusterAciAllocations []KubernetesAciCniTenantClusterAllocationRelationship `json:"ClusterAciAllocations,omitempty"`
	// An array of relationships to kubernetesClusterProfile resources.
	ClusterProfiles      []KubernetesClusterProfileRelationship `json:"ClusterProfiles,omitempty"`
	Organization         *OrganizationOrganizationRelationship  `json:"Organization,omitempty"`
	RegisteredDevice     *AssetDeviceRegistrationRelationship   `json:"RegisteredDevice,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _KubernetesAciCniProfile KubernetesAciCniProfile

// NewKubernetesAciCniProfile instantiates a new KubernetesAciCniProfile object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewKubernetesAciCniProfile(classId string, objectType string) *KubernetesAciCniProfile {
	this := KubernetesAciCniProfile{}
	this.ClassId = classId
	this.ObjectType = objectType
	return &this
}

// NewKubernetesAciCniProfileWithDefaults instantiates a new KubernetesAciCniProfile object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewKubernetesAciCniProfileWithDefaults() *KubernetesAciCniProfile {
	this := KubernetesAciCniProfile{}
	var classId string = "kubernetes.AciCniProfile"
	this.ClassId = classId
	var objectType string = "kubernetes.AciCniProfile"
	this.ObjectType = objectType
	return &this
}

// GetClassId returns the ClassId field value
func (o *KubernetesAciCniProfile) GetClassId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ClassId
}

// GetClassIdOk returns a tuple with the ClassId field value
// and a boolean to check if the value has been set.
func (o *KubernetesAciCniProfile) GetClassIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ClassId, true
}

// SetClassId sets field value
func (o *KubernetesAciCniProfile) SetClassId(v string) {
	o.ClassId = v
}

// GetObjectType returns the ObjectType field value
func (o *KubernetesAciCniProfile) GetObjectType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ObjectType
}

// GetObjectTypeOk returns a tuple with the ObjectType field value
// and a boolean to check if the value has been set.
func (o *KubernetesAciCniProfile) GetObjectTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ObjectType, true
}

// SetObjectType sets field value
func (o *KubernetesAciCniProfile) SetObjectType(v string) {
	o.ObjectType = v
}

// GetAaepName returns the AaepName field value if set, zero value otherwise.
func (o *KubernetesAciCniProfile) GetAaepName() string {
	if o == nil || o.AaepName == nil {
		var ret string
		return ret
	}
	return *o.AaepName
}

// GetAaepNameOk returns a tuple with the AaepName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KubernetesAciCniProfile) GetAaepNameOk() (*string, bool) {
	if o == nil || o.AaepName == nil {
		return nil, false
	}
	return o.AaepName, true
}

// HasAaepName returns a boolean if a field has been set.
func (o *KubernetesAciCniProfile) HasAaepName() bool {
	if o != nil && o.AaepName != nil {
		return true
	}

	return false
}

// SetAaepName gets a reference to the given string and assigns it to the AaepName field.
func (o *KubernetesAciCniProfile) SetAaepName(v string) {
	o.AaepName = &v
}

// GetExtSvcDynSubnetStart returns the ExtSvcDynSubnetStart field value if set, zero value otherwise.
func (o *KubernetesAciCniProfile) GetExtSvcDynSubnetStart() string {
	if o == nil || o.ExtSvcDynSubnetStart == nil {
		var ret string
		return ret
	}
	return *o.ExtSvcDynSubnetStart
}

// GetExtSvcDynSubnetStartOk returns a tuple with the ExtSvcDynSubnetStart field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KubernetesAciCniProfile) GetExtSvcDynSubnetStartOk() (*string, bool) {
	if o == nil || o.ExtSvcDynSubnetStart == nil {
		return nil, false
	}
	return o.ExtSvcDynSubnetStart, true
}

// HasExtSvcDynSubnetStart returns a boolean if a field has been set.
func (o *KubernetesAciCniProfile) HasExtSvcDynSubnetStart() bool {
	if o != nil && o.ExtSvcDynSubnetStart != nil {
		return true
	}

	return false
}

// SetExtSvcDynSubnetStart gets a reference to the given string and assigns it to the ExtSvcDynSubnetStart field.
func (o *KubernetesAciCniProfile) SetExtSvcDynSubnetStart(v string) {
	o.ExtSvcDynSubnetStart = &v
}

// GetExtSvcStaticSubnetStart returns the ExtSvcStaticSubnetStart field value if set, zero value otherwise.
func (o *KubernetesAciCniProfile) GetExtSvcStaticSubnetStart() string {
	if o == nil || o.ExtSvcStaticSubnetStart == nil {
		var ret string
		return ret
	}
	return *o.ExtSvcStaticSubnetStart
}

// GetExtSvcStaticSubnetStartOk returns a tuple with the ExtSvcStaticSubnetStart field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KubernetesAciCniProfile) GetExtSvcStaticSubnetStartOk() (*string, bool) {
	if o == nil || o.ExtSvcStaticSubnetStart == nil {
		return nil, false
	}
	return o.ExtSvcStaticSubnetStart, true
}

// HasExtSvcStaticSubnetStart returns a boolean if a field has been set.
func (o *KubernetesAciCniProfile) HasExtSvcStaticSubnetStart() bool {
	if o != nil && o.ExtSvcStaticSubnetStart != nil {
		return true
	}

	return false
}

// SetExtSvcStaticSubnetStart gets a reference to the given string and assigns it to the ExtSvcStaticSubnetStart field.
func (o *KubernetesAciCniProfile) SetExtSvcStaticSubnetStart(v string) {
	o.ExtSvcStaticSubnetStart = &v
}

// GetInfraVlanId returns the InfraVlanId field value if set, zero value otherwise.
func (o *KubernetesAciCniProfile) GetInfraVlanId() int64 {
	if o == nil || o.InfraVlanId == nil {
		var ret int64
		return ret
	}
	return *o.InfraVlanId
}

// GetInfraVlanIdOk returns a tuple with the InfraVlanId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KubernetesAciCniProfile) GetInfraVlanIdOk() (*int64, bool) {
	if o == nil || o.InfraVlanId == nil {
		return nil, false
	}
	return o.InfraVlanId, true
}

// HasInfraVlanId returns a boolean if a field has been set.
func (o *KubernetesAciCniProfile) HasInfraVlanId() bool {
	if o != nil && o.InfraVlanId != nil {
		return true
	}

	return false
}

// SetInfraVlanId gets a reference to the given int64 and assigns it to the InfraVlanId field.
func (o *KubernetesAciCniProfile) SetInfraVlanId(v int64) {
	o.InfraVlanId = &v
}

// GetL3OutNetworkName returns the L3OutNetworkName field value if set, zero value otherwise.
func (o *KubernetesAciCniProfile) GetL3OutNetworkName() string {
	if o == nil || o.L3OutNetworkName == nil {
		var ret string
		return ret
	}
	return *o.L3OutNetworkName
}

// GetL3OutNetworkNameOk returns a tuple with the L3OutNetworkName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KubernetesAciCniProfile) GetL3OutNetworkNameOk() (*string, bool) {
	if o == nil || o.L3OutNetworkName == nil {
		return nil, false
	}
	return o.L3OutNetworkName, true
}

// HasL3OutNetworkName returns a boolean if a field has been set.
func (o *KubernetesAciCniProfile) HasL3OutNetworkName() bool {
	if o != nil && o.L3OutNetworkName != nil {
		return true
	}

	return false
}

// SetL3OutNetworkName gets a reference to the given string and assigns it to the L3OutNetworkName field.
func (o *KubernetesAciCniProfile) SetL3OutNetworkName(v string) {
	o.L3OutNetworkName = &v
}

// GetL3OutPolicyName returns the L3OutPolicyName field value if set, zero value otherwise.
func (o *KubernetesAciCniProfile) GetL3OutPolicyName() string {
	if o == nil || o.L3OutPolicyName == nil {
		var ret string
		return ret
	}
	return *o.L3OutPolicyName
}

// GetL3OutPolicyNameOk returns a tuple with the L3OutPolicyName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KubernetesAciCniProfile) GetL3OutPolicyNameOk() (*string, bool) {
	if o == nil || o.L3OutPolicyName == nil {
		return nil, false
	}
	return o.L3OutPolicyName, true
}

// HasL3OutPolicyName returns a boolean if a field has been set.
func (o *KubernetesAciCniProfile) HasL3OutPolicyName() bool {
	if o != nil && o.L3OutPolicyName != nil {
		return true
	}

	return false
}

// SetL3OutPolicyName gets a reference to the given string and assigns it to the L3OutPolicyName field.
func (o *KubernetesAciCniProfile) SetL3OutPolicyName(v string) {
	o.L3OutPolicyName = &v
}

// GetL3OutTenant returns the L3OutTenant field value if set, zero value otherwise.
func (o *KubernetesAciCniProfile) GetL3OutTenant() string {
	if o == nil || o.L3OutTenant == nil {
		var ret string
		return ret
	}
	return *o.L3OutTenant
}

// GetL3OutTenantOk returns a tuple with the L3OutTenant field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KubernetesAciCniProfile) GetL3OutTenantOk() (*string, bool) {
	if o == nil || o.L3OutTenant == nil {
		return nil, false
	}
	return o.L3OutTenant, true
}

// HasL3OutTenant returns a boolean if a field has been set.
func (o *KubernetesAciCniProfile) HasL3OutTenant() bool {
	if o != nil && o.L3OutTenant != nil {
		return true
	}

	return false
}

// SetL3OutTenant gets a reference to the given string and assigns it to the L3OutTenant field.
func (o *KubernetesAciCniProfile) SetL3OutTenant(v string) {
	o.L3OutTenant = &v
}

// GetNestedVmmDomain returns the NestedVmmDomain field value if set, zero value otherwise.
func (o *KubernetesAciCniProfile) GetNestedVmmDomain() string {
	if o == nil || o.NestedVmmDomain == nil {
		var ret string
		return ret
	}
	return *o.NestedVmmDomain
}

// GetNestedVmmDomainOk returns a tuple with the NestedVmmDomain field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KubernetesAciCniProfile) GetNestedVmmDomainOk() (*string, bool) {
	if o == nil || o.NestedVmmDomain == nil {
		return nil, false
	}
	return o.NestedVmmDomain, true
}

// HasNestedVmmDomain returns a boolean if a field has been set.
func (o *KubernetesAciCniProfile) HasNestedVmmDomain() bool {
	if o != nil && o.NestedVmmDomain != nil {
		return true
	}

	return false
}

// SetNestedVmmDomain gets a reference to the given string and assigns it to the NestedVmmDomain field.
func (o *KubernetesAciCniProfile) SetNestedVmmDomain(v string) {
	o.NestedVmmDomain = &v
}

// GetNodeSvcSubnetStart returns the NodeSvcSubnetStart field value if set, zero value otherwise.
func (o *KubernetesAciCniProfile) GetNodeSvcSubnetStart() string {
	if o == nil || o.NodeSvcSubnetStart == nil {
		var ret string
		return ret
	}
	return *o.NodeSvcSubnetStart
}

// GetNodeSvcSubnetStartOk returns a tuple with the NodeSvcSubnetStart field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KubernetesAciCniProfile) GetNodeSvcSubnetStartOk() (*string, bool) {
	if o == nil || o.NodeSvcSubnetStart == nil {
		return nil, false
	}
	return o.NodeSvcSubnetStart, true
}

// HasNodeSvcSubnetStart returns a boolean if a field has been set.
func (o *KubernetesAciCniProfile) HasNodeSvcSubnetStart() bool {
	if o != nil && o.NodeSvcSubnetStart != nil {
		return true
	}

	return false
}

// SetNodeSvcSubnetStart gets a reference to the given string and assigns it to the NodeSvcSubnetStart field.
func (o *KubernetesAciCniProfile) SetNodeSvcSubnetStart(v string) {
	o.NodeSvcSubnetStart = &v
}

// GetNodeVlanRangeEnd returns the NodeVlanRangeEnd field value if set, zero value otherwise.
func (o *KubernetesAciCniProfile) GetNodeVlanRangeEnd() int64 {
	if o == nil || o.NodeVlanRangeEnd == nil {
		var ret int64
		return ret
	}
	return *o.NodeVlanRangeEnd
}

// GetNodeVlanRangeEndOk returns a tuple with the NodeVlanRangeEnd field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KubernetesAciCniProfile) GetNodeVlanRangeEndOk() (*int64, bool) {
	if o == nil || o.NodeVlanRangeEnd == nil {
		return nil, false
	}
	return o.NodeVlanRangeEnd, true
}

// HasNodeVlanRangeEnd returns a boolean if a field has been set.
func (o *KubernetesAciCniProfile) HasNodeVlanRangeEnd() bool {
	if o != nil && o.NodeVlanRangeEnd != nil {
		return true
	}

	return false
}

// SetNodeVlanRangeEnd gets a reference to the given int64 and assigns it to the NodeVlanRangeEnd field.
func (o *KubernetesAciCniProfile) SetNodeVlanRangeEnd(v int64) {
	o.NodeVlanRangeEnd = &v
}

// GetNodeVlanRangeStart returns the NodeVlanRangeStart field value if set, zero value otherwise.
func (o *KubernetesAciCniProfile) GetNodeVlanRangeStart() int64 {
	if o == nil || o.NodeVlanRangeStart == nil {
		var ret int64
		return ret
	}
	return *o.NodeVlanRangeStart
}

// GetNodeVlanRangeStartOk returns a tuple with the NodeVlanRangeStart field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KubernetesAciCniProfile) GetNodeVlanRangeStartOk() (*int64, bool) {
	if o == nil || o.NodeVlanRangeStart == nil {
		return nil, false
	}
	return o.NodeVlanRangeStart, true
}

// HasNodeVlanRangeStart returns a boolean if a field has been set.
func (o *KubernetesAciCniProfile) HasNodeVlanRangeStart() bool {
	if o != nil && o.NodeVlanRangeStart != nil {
		return true
	}

	return false
}

// SetNodeVlanRangeStart gets a reference to the given int64 and assigns it to the NodeVlanRangeStart field.
func (o *KubernetesAciCniProfile) SetNodeVlanRangeStart(v int64) {
	o.NodeVlanRangeStart = &v
}

// GetNumberOfKubernetesClusters returns the NumberOfKubernetesClusters field value if set, zero value otherwise.
func (o *KubernetesAciCniProfile) GetNumberOfKubernetesClusters() int64 {
	if o == nil || o.NumberOfKubernetesClusters == nil {
		var ret int64
		return ret
	}
	return *o.NumberOfKubernetesClusters
}

// GetNumberOfKubernetesClustersOk returns a tuple with the NumberOfKubernetesClusters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KubernetesAciCniProfile) GetNumberOfKubernetesClustersOk() (*int64, bool) {
	if o == nil || o.NumberOfKubernetesClusters == nil {
		return nil, false
	}
	return o.NumberOfKubernetesClusters, true
}

// HasNumberOfKubernetesClusters returns a boolean if a field has been set.
func (o *KubernetesAciCniProfile) HasNumberOfKubernetesClusters() bool {
	if o != nil && o.NumberOfKubernetesClusters != nil {
		return true
	}

	return false
}

// SetNumberOfKubernetesClusters gets a reference to the given int64 and assigns it to the NumberOfKubernetesClusters field.
func (o *KubernetesAciCniProfile) SetNumberOfKubernetesClusters(v int64) {
	o.NumberOfKubernetesClusters = &v
}

// GetOpflexMulticastAddressRange returns the OpflexMulticastAddressRange field value if set, zero value otherwise.
func (o *KubernetesAciCniProfile) GetOpflexMulticastAddressRange() string {
	if o == nil || o.OpflexMulticastAddressRange == nil {
		var ret string
		return ret
	}
	return *o.OpflexMulticastAddressRange
}

// GetOpflexMulticastAddressRangeOk returns a tuple with the OpflexMulticastAddressRange field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KubernetesAciCniProfile) GetOpflexMulticastAddressRangeOk() (*string, bool) {
	if o == nil || o.OpflexMulticastAddressRange == nil {
		return nil, false
	}
	return o.OpflexMulticastAddressRange, true
}

// HasOpflexMulticastAddressRange returns a boolean if a field has been set.
func (o *KubernetesAciCniProfile) HasOpflexMulticastAddressRange() bool {
	if o != nil && o.OpflexMulticastAddressRange != nil {
		return true
	}

	return false
}

// SetOpflexMulticastAddressRange gets a reference to the given string and assigns it to the OpflexMulticastAddressRange field.
func (o *KubernetesAciCniProfile) SetOpflexMulticastAddressRange(v string) {
	o.OpflexMulticastAddressRange = &v
}

// GetPodSubnetStart returns the PodSubnetStart field value if set, zero value otherwise.
func (o *KubernetesAciCniProfile) GetPodSubnetStart() string {
	if o == nil || o.PodSubnetStart == nil {
		var ret string
		return ret
	}
	return *o.PodSubnetStart
}

// GetPodSubnetStartOk returns a tuple with the PodSubnetStart field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KubernetesAciCniProfile) GetPodSubnetStartOk() (*string, bool) {
	if o == nil || o.PodSubnetStart == nil {
		return nil, false
	}
	return o.PodSubnetStart, true
}

// HasPodSubnetStart returns a boolean if a field has been set.
func (o *KubernetesAciCniProfile) HasPodSubnetStart() bool {
	if o != nil && o.PodSubnetStart != nil {
		return true
	}

	return false
}

// SetPodSubnetStart gets a reference to the given string and assigns it to the PodSubnetStart field.
func (o *KubernetesAciCniProfile) SetPodSubnetStart(v string) {
	o.PodSubnetStart = &v
}

// GetSvcSubnetStart returns the SvcSubnetStart field value if set, zero value otherwise.
func (o *KubernetesAciCniProfile) GetSvcSubnetStart() string {
	if o == nil || o.SvcSubnetStart == nil {
		var ret string
		return ret
	}
	return *o.SvcSubnetStart
}

// GetSvcSubnetStartOk returns a tuple with the SvcSubnetStart field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KubernetesAciCniProfile) GetSvcSubnetStartOk() (*string, bool) {
	if o == nil || o.SvcSubnetStart == nil {
		return nil, false
	}
	return o.SvcSubnetStart, true
}

// HasSvcSubnetStart returns a boolean if a field has been set.
func (o *KubernetesAciCniProfile) HasSvcSubnetStart() bool {
	if o != nil && o.SvcSubnetStart != nil {
		return true
	}

	return false
}

// SetSvcSubnetStart gets a reference to the given string and assigns it to the SvcSubnetStart field.
func (o *KubernetesAciCniProfile) SetSvcSubnetStart(v string) {
	o.SvcSubnetStart = &v
}

// GetVrf returns the Vrf field value if set, zero value otherwise.
func (o *KubernetesAciCniProfile) GetVrf() string {
	if o == nil || o.Vrf == nil {
		var ret string
		return ret
	}
	return *o.Vrf
}

// GetVrfOk returns a tuple with the Vrf field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KubernetesAciCniProfile) GetVrfOk() (*string, bool) {
	if o == nil || o.Vrf == nil {
		return nil, false
	}
	return o.Vrf, true
}

// HasVrf returns a boolean if a field has been set.
func (o *KubernetesAciCniProfile) HasVrf() bool {
	if o != nil && o.Vrf != nil {
		return true
	}

	return false
}

// SetVrf gets a reference to the given string and assigns it to the Vrf field.
func (o *KubernetesAciCniProfile) SetVrf(v string) {
	o.Vrf = &v
}

// GetClusterAciAllocations returns the ClusterAciAllocations field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *KubernetesAciCniProfile) GetClusterAciAllocations() []KubernetesAciCniTenantClusterAllocationRelationship {
	if o == nil {
		var ret []KubernetesAciCniTenantClusterAllocationRelationship
		return ret
	}
	return o.ClusterAciAllocations
}

// GetClusterAciAllocationsOk returns a tuple with the ClusterAciAllocations field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *KubernetesAciCniProfile) GetClusterAciAllocationsOk() (*[]KubernetesAciCniTenantClusterAllocationRelationship, bool) {
	if o == nil || o.ClusterAciAllocations == nil {
		return nil, false
	}
	return &o.ClusterAciAllocations, true
}

// HasClusterAciAllocations returns a boolean if a field has been set.
func (o *KubernetesAciCniProfile) HasClusterAciAllocations() bool {
	if o != nil && o.ClusterAciAllocations != nil {
		return true
	}

	return false
}

// SetClusterAciAllocations gets a reference to the given []KubernetesAciCniTenantClusterAllocationRelationship and assigns it to the ClusterAciAllocations field.
func (o *KubernetesAciCniProfile) SetClusterAciAllocations(v []KubernetesAciCniTenantClusterAllocationRelationship) {
	o.ClusterAciAllocations = v
}

// GetClusterProfiles returns the ClusterProfiles field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *KubernetesAciCniProfile) GetClusterProfiles() []KubernetesClusterProfileRelationship {
	if o == nil {
		var ret []KubernetesClusterProfileRelationship
		return ret
	}
	return o.ClusterProfiles
}

// GetClusterProfilesOk returns a tuple with the ClusterProfiles field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *KubernetesAciCniProfile) GetClusterProfilesOk() (*[]KubernetesClusterProfileRelationship, bool) {
	if o == nil || o.ClusterProfiles == nil {
		return nil, false
	}
	return &o.ClusterProfiles, true
}

// HasClusterProfiles returns a boolean if a field has been set.
func (o *KubernetesAciCniProfile) HasClusterProfiles() bool {
	if o != nil && o.ClusterProfiles != nil {
		return true
	}

	return false
}

// SetClusterProfiles gets a reference to the given []KubernetesClusterProfileRelationship and assigns it to the ClusterProfiles field.
func (o *KubernetesAciCniProfile) SetClusterProfiles(v []KubernetesClusterProfileRelationship) {
	o.ClusterProfiles = v
}

// GetOrganization returns the Organization field value if set, zero value otherwise.
func (o *KubernetesAciCniProfile) GetOrganization() OrganizationOrganizationRelationship {
	if o == nil || o.Organization == nil {
		var ret OrganizationOrganizationRelationship
		return ret
	}
	return *o.Organization
}

// GetOrganizationOk returns a tuple with the Organization field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KubernetesAciCniProfile) GetOrganizationOk() (*OrganizationOrganizationRelationship, bool) {
	if o == nil || o.Organization == nil {
		return nil, false
	}
	return o.Organization, true
}

// HasOrganization returns a boolean if a field has been set.
func (o *KubernetesAciCniProfile) HasOrganization() bool {
	if o != nil && o.Organization != nil {
		return true
	}

	return false
}

// SetOrganization gets a reference to the given OrganizationOrganizationRelationship and assigns it to the Organization field.
func (o *KubernetesAciCniProfile) SetOrganization(v OrganizationOrganizationRelationship) {
	o.Organization = &v
}

// GetRegisteredDevice returns the RegisteredDevice field value if set, zero value otherwise.
func (o *KubernetesAciCniProfile) GetRegisteredDevice() AssetDeviceRegistrationRelationship {
	if o == nil || o.RegisteredDevice == nil {
		var ret AssetDeviceRegistrationRelationship
		return ret
	}
	return *o.RegisteredDevice
}

// GetRegisteredDeviceOk returns a tuple with the RegisteredDevice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KubernetesAciCniProfile) GetRegisteredDeviceOk() (*AssetDeviceRegistrationRelationship, bool) {
	if o == nil || o.RegisteredDevice == nil {
		return nil, false
	}
	return o.RegisteredDevice, true
}

// HasRegisteredDevice returns a boolean if a field has been set.
func (o *KubernetesAciCniProfile) HasRegisteredDevice() bool {
	if o != nil && o.RegisteredDevice != nil {
		return true
	}

	return false
}

// SetRegisteredDevice gets a reference to the given AssetDeviceRegistrationRelationship and assigns it to the RegisteredDevice field.
func (o *KubernetesAciCniProfile) SetRegisteredDevice(v AssetDeviceRegistrationRelationship) {
	o.RegisteredDevice = &v
}

func (o KubernetesAciCniProfile) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	serializedPolicyAbstractProfile, errPolicyAbstractProfile := json.Marshal(o.PolicyAbstractProfile)
	if errPolicyAbstractProfile != nil {
		return []byte{}, errPolicyAbstractProfile
	}
	errPolicyAbstractProfile = json.Unmarshal([]byte(serializedPolicyAbstractProfile), &toSerialize)
	if errPolicyAbstractProfile != nil {
		return []byte{}, errPolicyAbstractProfile
	}
	if true {
		toSerialize["ClassId"] = o.ClassId
	}
	if true {
		toSerialize["ObjectType"] = o.ObjectType
	}
	if o.AaepName != nil {
		toSerialize["AaepName"] = o.AaepName
	}
	if o.ExtSvcDynSubnetStart != nil {
		toSerialize["ExtSvcDynSubnetStart"] = o.ExtSvcDynSubnetStart
	}
	if o.ExtSvcStaticSubnetStart != nil {
		toSerialize["ExtSvcStaticSubnetStart"] = o.ExtSvcStaticSubnetStart
	}
	if o.InfraVlanId != nil {
		toSerialize["InfraVlanId"] = o.InfraVlanId
	}
	if o.L3OutNetworkName != nil {
		toSerialize["L3OutNetworkName"] = o.L3OutNetworkName
	}
	if o.L3OutPolicyName != nil {
		toSerialize["L3OutPolicyName"] = o.L3OutPolicyName
	}
	if o.L3OutTenant != nil {
		toSerialize["L3OutTenant"] = o.L3OutTenant
	}
	if o.NestedVmmDomain != nil {
		toSerialize["NestedVmmDomain"] = o.NestedVmmDomain
	}
	if o.NodeSvcSubnetStart != nil {
		toSerialize["NodeSvcSubnetStart"] = o.NodeSvcSubnetStart
	}
	if o.NodeVlanRangeEnd != nil {
		toSerialize["NodeVlanRangeEnd"] = o.NodeVlanRangeEnd
	}
	if o.NodeVlanRangeStart != nil {
		toSerialize["NodeVlanRangeStart"] = o.NodeVlanRangeStart
	}
	if o.NumberOfKubernetesClusters != nil {
		toSerialize["NumberOfKubernetesClusters"] = o.NumberOfKubernetesClusters
	}
	if o.OpflexMulticastAddressRange != nil {
		toSerialize["OpflexMulticastAddressRange"] = o.OpflexMulticastAddressRange
	}
	if o.PodSubnetStart != nil {
		toSerialize["PodSubnetStart"] = o.PodSubnetStart
	}
	if o.SvcSubnetStart != nil {
		toSerialize["SvcSubnetStart"] = o.SvcSubnetStart
	}
	if o.Vrf != nil {
		toSerialize["Vrf"] = o.Vrf
	}
	if o.ClusterAciAllocations != nil {
		toSerialize["ClusterAciAllocations"] = o.ClusterAciAllocations
	}
	if o.ClusterProfiles != nil {
		toSerialize["ClusterProfiles"] = o.ClusterProfiles
	}
	if o.Organization != nil {
		toSerialize["Organization"] = o.Organization
	}
	if o.RegisteredDevice != nil {
		toSerialize["RegisteredDevice"] = o.RegisteredDevice
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *KubernetesAciCniProfile) UnmarshalJSON(bytes []byte) (err error) {
	type KubernetesAciCniProfileWithoutEmbeddedStruct struct {
		// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.
		ClassId string `json:"ClassId"`
		// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
		ObjectType string `json:"ObjectType"`
		// Name of ACI AAEP (Attachable Access Entity Profile) to be used for all Kubernetes clusters using this policy.
		AaepName *string `json:"AaepName,omitempty"`
		// Start of range of IP subnets for external services with dynamic IP allocation for use by Kubernetes clusters using this ACI CNI policy.
		ExtSvcDynSubnetStart *string `json:"ExtSvcDynSubnetStart,omitempty"`
		// Start of range of IP subnets for external services with static IP allocation for use by Kubernetes clusters using this ACI CNI policy.
		ExtSvcStaticSubnetStart *string `json:"ExtSvcStaticSubnetStart,omitempty"`
		// Value of ACI infrastructuere VLAN ID for the ACI fabric.
		InfraVlanId *int64 `json:"InfraVlanId,omitempty"`
		// Name of ACI L3Out network to be used for all Kubernetes clusters using this policy.
		L3OutNetworkName *string `json:"L3OutNetworkName,omitempty"`
		// Name of ACI L3Out policy to be used for all Kubernetes clusters using this policy.
		L3OutPolicyName *string `json:"L3OutPolicyName,omitempty"`
		// Tenant in ACI used by this L3Out and Common VRF.
		L3OutTenant *string `json:"L3OutTenant,omitempty"`
		// VMM domain within which Kubernetes clusters using this policy are nested.
		NestedVmmDomain *string `json:"NestedVmmDomain,omitempty"`
		// Start of range of ACI Node Service IP subnets to use by Kubernetes clusters using this ACI CNI policy This is used for the service graph which is used for ACI PBR based load balancing.
		NodeSvcSubnetStart *string `json:"NodeSvcSubnetStart,omitempty"`
		// Ending value of VLAN range used to assign Node VLAN Ids for each Kubernetes cluster using this policy.
		NodeVlanRangeEnd *int64 `json:"NodeVlanRangeEnd,omitempty"`
		// Starting value of VLAN range used to assign Node VLAN Ids for each Kubernetes cluster using this policy.
		NodeVlanRangeStart *int64 `json:"NodeVlanRangeStart,omitempty"`
		// Number of k8s clusters currently using this ACI CNI profile.
		NumberOfKubernetesClusters *int64 `json:"NumberOfKubernetesClusters,omitempty"`
		// Range of IP Multicast addresses to be used by the Opflex protocol for Kubernetes clusters using this policy.
		OpflexMulticastAddressRange *string `json:"OpflexMulticastAddressRange,omitempty"`
		// Start of range of Kubernetes pod IP subnets to use by Kubernetes clusters using this ACI CNI policy This should be a /8 IP subnet so that multiple /16 subnets can be assigned for pod subnets of Kubernetes clusters using this profile.
		PodSubnetStart *string `json:"PodSubnetStart,omitempty"`
		// Start of range of Kubernetes Service IP subnets to use by Kubernetes clusters using this ACI CNI policy Currently this is fixed internally and read-only.
		SvcSubnetStart *string `json:"SvcSubnetStart,omitempty"`
		// VRF (Virtual Routing and Forwarding) domain to be used within ACI fabric by all k8s clusters using this policy.
		Vrf *string `json:"Vrf,omitempty"`
		// An array of relationships to kubernetesAciCniTenantClusterAllocation resources.
		ClusterAciAllocations []KubernetesAciCniTenantClusterAllocationRelationship `json:"ClusterAciAllocations,omitempty"`
		// An array of relationships to kubernetesClusterProfile resources.
		ClusterProfiles  []KubernetesClusterProfileRelationship `json:"ClusterProfiles,omitempty"`
		Organization     *OrganizationOrganizationRelationship  `json:"Organization,omitempty"`
		RegisteredDevice *AssetDeviceRegistrationRelationship   `json:"RegisteredDevice,omitempty"`
	}

	varKubernetesAciCniProfileWithoutEmbeddedStruct := KubernetesAciCniProfileWithoutEmbeddedStruct{}

	err = json.Unmarshal(bytes, &varKubernetesAciCniProfileWithoutEmbeddedStruct)
	if err == nil {
		varKubernetesAciCniProfile := _KubernetesAciCniProfile{}
		varKubernetesAciCniProfile.ClassId = varKubernetesAciCniProfileWithoutEmbeddedStruct.ClassId
		varKubernetesAciCniProfile.ObjectType = varKubernetesAciCniProfileWithoutEmbeddedStruct.ObjectType
		varKubernetesAciCniProfile.AaepName = varKubernetesAciCniProfileWithoutEmbeddedStruct.AaepName
		varKubernetesAciCniProfile.ExtSvcDynSubnetStart = varKubernetesAciCniProfileWithoutEmbeddedStruct.ExtSvcDynSubnetStart
		varKubernetesAciCniProfile.ExtSvcStaticSubnetStart = varKubernetesAciCniProfileWithoutEmbeddedStruct.ExtSvcStaticSubnetStart
		varKubernetesAciCniProfile.InfraVlanId = varKubernetesAciCniProfileWithoutEmbeddedStruct.InfraVlanId
		varKubernetesAciCniProfile.L3OutNetworkName = varKubernetesAciCniProfileWithoutEmbeddedStruct.L3OutNetworkName
		varKubernetesAciCniProfile.L3OutPolicyName = varKubernetesAciCniProfileWithoutEmbeddedStruct.L3OutPolicyName
		varKubernetesAciCniProfile.L3OutTenant = varKubernetesAciCniProfileWithoutEmbeddedStruct.L3OutTenant
		varKubernetesAciCniProfile.NestedVmmDomain = varKubernetesAciCniProfileWithoutEmbeddedStruct.NestedVmmDomain
		varKubernetesAciCniProfile.NodeSvcSubnetStart = varKubernetesAciCniProfileWithoutEmbeddedStruct.NodeSvcSubnetStart
		varKubernetesAciCniProfile.NodeVlanRangeEnd = varKubernetesAciCniProfileWithoutEmbeddedStruct.NodeVlanRangeEnd
		varKubernetesAciCniProfile.NodeVlanRangeStart = varKubernetesAciCniProfileWithoutEmbeddedStruct.NodeVlanRangeStart
		varKubernetesAciCniProfile.NumberOfKubernetesClusters = varKubernetesAciCniProfileWithoutEmbeddedStruct.NumberOfKubernetesClusters
		varKubernetesAciCniProfile.OpflexMulticastAddressRange = varKubernetesAciCniProfileWithoutEmbeddedStruct.OpflexMulticastAddressRange
		varKubernetesAciCniProfile.PodSubnetStart = varKubernetesAciCniProfileWithoutEmbeddedStruct.PodSubnetStart
		varKubernetesAciCniProfile.SvcSubnetStart = varKubernetesAciCniProfileWithoutEmbeddedStruct.SvcSubnetStart
		varKubernetesAciCniProfile.Vrf = varKubernetesAciCniProfileWithoutEmbeddedStruct.Vrf
		varKubernetesAciCniProfile.ClusterAciAllocations = varKubernetesAciCniProfileWithoutEmbeddedStruct.ClusterAciAllocations
		varKubernetesAciCniProfile.ClusterProfiles = varKubernetesAciCniProfileWithoutEmbeddedStruct.ClusterProfiles
		varKubernetesAciCniProfile.Organization = varKubernetesAciCniProfileWithoutEmbeddedStruct.Organization
		varKubernetesAciCniProfile.RegisteredDevice = varKubernetesAciCniProfileWithoutEmbeddedStruct.RegisteredDevice
		*o = KubernetesAciCniProfile(varKubernetesAciCniProfile)
	} else {
		return err
	}

	varKubernetesAciCniProfile := _KubernetesAciCniProfile{}

	err = json.Unmarshal(bytes, &varKubernetesAciCniProfile)
	if err == nil {
		o.PolicyAbstractProfile = varKubernetesAciCniProfile.PolicyAbstractProfile
	} else {
		return err
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "ClassId")
		delete(additionalProperties, "ObjectType")
		delete(additionalProperties, "AaepName")
		delete(additionalProperties, "ExtSvcDynSubnetStart")
		delete(additionalProperties, "ExtSvcStaticSubnetStart")
		delete(additionalProperties, "InfraVlanId")
		delete(additionalProperties, "L3OutNetworkName")
		delete(additionalProperties, "L3OutPolicyName")
		delete(additionalProperties, "L3OutTenant")
		delete(additionalProperties, "NestedVmmDomain")
		delete(additionalProperties, "NodeSvcSubnetStart")
		delete(additionalProperties, "NodeVlanRangeEnd")
		delete(additionalProperties, "NodeVlanRangeStart")
		delete(additionalProperties, "NumberOfKubernetesClusters")
		delete(additionalProperties, "OpflexMulticastAddressRange")
		delete(additionalProperties, "PodSubnetStart")
		delete(additionalProperties, "SvcSubnetStart")
		delete(additionalProperties, "Vrf")
		delete(additionalProperties, "ClusterAciAllocations")
		delete(additionalProperties, "ClusterProfiles")
		delete(additionalProperties, "Organization")
		delete(additionalProperties, "RegisteredDevice")

		// remove fields from embedded structs
		reflectPolicyAbstractProfile := reflect.ValueOf(o.PolicyAbstractProfile)
		for i := 0; i < reflectPolicyAbstractProfile.Type().NumField(); i++ {
			t := reflectPolicyAbstractProfile.Type().Field(i)

			if jsonTag := t.Tag.Get("json"); jsonTag != "" {
				fieldName := ""
				if commaIdx := strings.Index(jsonTag, ","); commaIdx > 0 {
					fieldName = jsonTag[:commaIdx]
				} else {
					fieldName = jsonTag
				}
				if fieldName != "AdditionalProperties" {
					delete(additionalProperties, fieldName)
				}
			}
		}

		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableKubernetesAciCniProfile struct {
	value *KubernetesAciCniProfile
	isSet bool
}

func (v NullableKubernetesAciCniProfile) Get() *KubernetesAciCniProfile {
	return v.value
}

func (v *NullableKubernetesAciCniProfile) Set(val *KubernetesAciCniProfile) {
	v.value = val
	v.isSet = true
}

func (v NullableKubernetesAciCniProfile) IsSet() bool {
	return v.isSet
}

func (v *NullableKubernetesAciCniProfile) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableKubernetesAciCniProfile(val *KubernetesAciCniProfile) *NullableKubernetesAciCniProfile {
	return &NullableKubernetesAciCniProfile{value: val, isSet: true}
}

func (v NullableKubernetesAciCniProfile) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableKubernetesAciCniProfile) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
