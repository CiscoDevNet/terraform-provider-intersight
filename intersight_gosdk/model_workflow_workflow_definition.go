/*
Cisco Intersight

Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations. The Intersight OpenAPI document defines the complete set of properties that are returned in the HTTP response. From that perspective, a client can expect that no additional properties are returned, unless these properties are explicitly defined in the OpenAPI document. However, when a client uses an older version of the Intersight OpenAPI document, the server may send additional properties because the software is more recent than the client. In that case, the client may receive properties that it does not know about. Some generated SDKs perform a strict validation of the HTTP response body against the OpenAPI document.

API version: 1.0.11-18775
Contact: intersight@cisco.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package intersight

import (
	"encoding/json"
	"fmt"
	"reflect"
	"strings"
)

// checks if the WorkflowWorkflowDefinition type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &WorkflowWorkflowDefinition{}

// WorkflowWorkflowDefinition Workflow definition is a collection of tasks that are sequenced in a certain way using control tasks. The tasks in the workflow definition is represented as a directed acyclic graph where each node in the graph is a task and the edges in the graph are transitions from one task to another.
type WorkflowWorkflowDefinition struct {
	MoBaseMo
	// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.
	ClassId string `json:"ClassId"`
	// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
	ObjectType string `json:"ObjectType"`
	// The user identifier who created or cloned the workflow definition.
	CreateUser *string `json:"CreateUser,omitempty"`
	// When true this will be the workflow version that is used when a specific workflow definition version is not specified. The default version is used when user executes a workflow without specifying a version or when workflow is included in another workflow without a specific version. The very first workflow definition created with a name will be set as the default version, after that user can explicitly set any version of the workflow definition as the default version.
	DefaultVersion *bool `json:"DefaultVersion,omitempty"`
	// The description for this workflow.
	Description       *string                `json:"Description,omitempty"`
	InputDefinition   []WorkflowBaseDataType `json:"InputDefinition,omitempty"`
	InputParameterSet []WorkflowParameterSet `json:"InputParameterSet,omitempty"`
	// A user friendly short name to identify the workflow. Label can only contain letters (a-z, A-Z), numbers (0-9), hyphen (-), period (.), colon (:), space ( ), forward slash (/), or an underscore (_).
	Label *string `json:"Label,omitempty" validate:"regexp=^[a-zA-Z0-9]{1}[\\\\sa-zA-Z0-9_.\\/:-]{0,91}$"`
	// License entitlement required to run this workflow. It is calculated based on the highest license requirement of all its tasks. * `Base` - Base as a License type. It is default license type. * `Essential` - Essential as a License type. * `Standard` - Standard as a License type. * `Advantage` - Advantage as a License type. * `Premier` - Premier as a License type. * `IWO-Essential` - IWO-Essential as a License type. * `IWO-Advantage` - IWO-Advantage as a License type. * `IWO-Premier` - IWO-Premier as a License type. * `IKS-Advantage` - IKS-Advantage as a License type. * `INC-Premier-1GFixed` - Premier 1G Fixed license tier for Intersight Nexus Cloud. * `INC-Premier-10GFixed` - Premier 10G Fixed license tier for Intersight Nexus Cloud. * `INC-Premier-100GFixed` - Premier 100G Fixed license tier for Intersight Nexus Cloud. * `INC-Premier-Mod4Slot` - Premier Modular 4 slot license tier for Intersight Nexus Cloud. * `INC-Premier-Mod8Slot` - Premier Modular 8 slot license tier for Intersight Nexus Cloud. * `INC-Premier-D2OpsFixed` - Premier D2Ops fixed license tier for Intersight Nexus Cloud. * `INC-Premier-D2OpsMod` - Premier D2Ops modular license tier for Intersight Nexus Cloud. * `INC-Premier-CentralizedMod8Slot` - Premier modular license tier of switch type CentralizedMod8Slot for Intersight Nexus Cloud. * `INC-Premier-DistributedMod8Slot` - Premier modular license tier of switch type DistributedMod8Slot for Intersight Nexus Cloud. * `IntersightTrial` - Virtual dummy license type to indicate trial. Used for UI display of trial mode Intersight tiers. * `IWOTrial` - Virtual dummy license type to indicate trial. Used for UI display of trial mode IKS tiers. * `IKSTrial` - Virtual dummy license type to indicate trial. Used for UI display of trial mode IWO tiers. * `INCTrial` - Virtual dummy license type to indicate trial. Used for UI display of trial mode Nexus tiers.
	LicenseEntitlement *string `json:"LicenseEntitlement,omitempty"`
	// The maximum number of tasks that can be executed on this workflow.
	MaxTaskCount *int64 `json:"MaxTaskCount,omitempty"`
	// The maximum number of external (worker) tasks that can be executed on this workflow.
	MaxWorkerTaskCount *int64 `json:"MaxWorkerTaskCount,omitempty"`
	// The user identifier who last updated the workflow definition.
	ModUser *string `json:"ModUser,omitempty"`
	// The name for this workflow. You can have multiple versions of the workflow with the same name. Name can only contain letters (a-z, A-Z), numbers (0-9), hyphen (-), period (.) or an underscore (_).
	Name             *string                `json:"Name,omitempty" validate:"regexp=^[a-zA-Z0-9]{1}[a-zA-Z0-9_.-]{0,63}$"`
	OutputDefinition []WorkflowBaseDataType `json:"OutputDefinition,omitempty"`
	// The output mappings for the workflow. The schema for outputs of a workflow is defined using OutputDefinition. The outputs for workflows that we want to export out at the end of the workflow can be mapped from task outputs, workflow inputs, or workflow variables. Any task output, workflow input, or workflow variable can be mapped to a workflow output as long as the types are compatible. The format to specify the mapping is '${ 'workflow | <taskName>'. 'output |input | variable'.<name>[.<JsonPath>]}'. First, either the keyword 'workflow' or the name of the task in the workflow must be given. If a task name is used, then it must be followed by the keyword 'output', if the keyword workflow was used, then it must be followed by the keyword 'input' or 'variable'. Following this '<name>' must be the name of either input, output, or variable that must be mapped as workflow output. The last part of the mapping can be an optional <JsonPath> to extract specific fields on the data.
	OutputParameters interface{}                        `json:"OutputParameters,omitempty"`
	Properties       NullableWorkflowWorkflowProperties `json:"Properties,omitempty"`
	Tasks            []WorkflowWorkflowTask             `json:"Tasks,omitempty"`
	UiInputFilters   []WorkflowUiInputFilter            `json:"UiInputFilters,omitempty"`
	// This will hold the data needed for workflow to be rendered in the user interface.
	UiRenderingData       interface{}                           `json:"UiRenderingData,omitempty"`
	ValidationInformation NullableWorkflowValidationInformation `json:"ValidationInformation,omitempty"`
	VariableDefinition    []WorkflowBaseDataType                `json:"VariableDefinition,omitempty"`
	// The version of the workflow to support multiple versions.
	Version              *int64                                         `json:"Version,omitempty"`
	Catalog              NullableWorkflowCatalogRelationship            `json:"Catalog,omitempty"`
	ClonedFrom           NullableWorkflowWorkflowDefinitionRelationship `json:"ClonedFrom,omitempty"`
	WorkflowMetadata     NullableWorkflowWorkflowMetadataRelationship   `json:"WorkflowMetadata,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _WorkflowWorkflowDefinition WorkflowWorkflowDefinition

// NewWorkflowWorkflowDefinition instantiates a new WorkflowWorkflowDefinition object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWorkflowWorkflowDefinition(classId string, objectType string) *WorkflowWorkflowDefinition {
	this := WorkflowWorkflowDefinition{}
	this.ClassId = classId
	this.ObjectType = objectType
	var version int64 = 1
	this.Version = &version
	return &this
}

// NewWorkflowWorkflowDefinitionWithDefaults instantiates a new WorkflowWorkflowDefinition object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWorkflowWorkflowDefinitionWithDefaults() *WorkflowWorkflowDefinition {
	this := WorkflowWorkflowDefinition{}
	var classId string = "workflow.WorkflowDefinition"
	this.ClassId = classId
	var objectType string = "workflow.WorkflowDefinition"
	this.ObjectType = objectType
	var version int64 = 1
	this.Version = &version
	return &this
}

// GetClassId returns the ClassId field value
func (o *WorkflowWorkflowDefinition) GetClassId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ClassId
}

// GetClassIdOk returns a tuple with the ClassId field value
// and a boolean to check if the value has been set.
func (o *WorkflowWorkflowDefinition) GetClassIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ClassId, true
}

// SetClassId sets field value
func (o *WorkflowWorkflowDefinition) SetClassId(v string) {
	o.ClassId = v
}

// GetDefaultClassId returns the default value "workflow.WorkflowDefinition" of the ClassId field.
func (o *WorkflowWorkflowDefinition) GetDefaultClassId() interface{} {
	return "workflow.WorkflowDefinition"
}

// GetObjectType returns the ObjectType field value
func (o *WorkflowWorkflowDefinition) GetObjectType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ObjectType
}

// GetObjectTypeOk returns a tuple with the ObjectType field value
// and a boolean to check if the value has been set.
func (o *WorkflowWorkflowDefinition) GetObjectTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ObjectType, true
}

// SetObjectType sets field value
func (o *WorkflowWorkflowDefinition) SetObjectType(v string) {
	o.ObjectType = v
}

// GetDefaultObjectType returns the default value "workflow.WorkflowDefinition" of the ObjectType field.
func (o *WorkflowWorkflowDefinition) GetDefaultObjectType() interface{} {
	return "workflow.WorkflowDefinition"
}

// GetCreateUser returns the CreateUser field value if set, zero value otherwise.
func (o *WorkflowWorkflowDefinition) GetCreateUser() string {
	if o == nil || IsNil(o.CreateUser) {
		var ret string
		return ret
	}
	return *o.CreateUser
}

// GetCreateUserOk returns a tuple with the CreateUser field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkflowWorkflowDefinition) GetCreateUserOk() (*string, bool) {
	if o == nil || IsNil(o.CreateUser) {
		return nil, false
	}
	return o.CreateUser, true
}

// HasCreateUser returns a boolean if a field has been set.
func (o *WorkflowWorkflowDefinition) HasCreateUser() bool {
	if o != nil && !IsNil(o.CreateUser) {
		return true
	}

	return false
}

// SetCreateUser gets a reference to the given string and assigns it to the CreateUser field.
func (o *WorkflowWorkflowDefinition) SetCreateUser(v string) {
	o.CreateUser = &v
}

// GetDefaultVersion returns the DefaultVersion field value if set, zero value otherwise.
func (o *WorkflowWorkflowDefinition) GetDefaultVersion() bool {
	if o == nil || IsNil(o.DefaultVersion) {
		var ret bool
		return ret
	}
	return *o.DefaultVersion
}

// GetDefaultVersionOk returns a tuple with the DefaultVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkflowWorkflowDefinition) GetDefaultVersionOk() (*bool, bool) {
	if o == nil || IsNil(o.DefaultVersion) {
		return nil, false
	}
	return o.DefaultVersion, true
}

// HasDefaultVersion returns a boolean if a field has been set.
func (o *WorkflowWorkflowDefinition) HasDefaultVersion() bool {
	if o != nil && !IsNil(o.DefaultVersion) {
		return true
	}

	return false
}

// SetDefaultVersion gets a reference to the given bool and assigns it to the DefaultVersion field.
func (o *WorkflowWorkflowDefinition) SetDefaultVersion(v bool) {
	o.DefaultVersion = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *WorkflowWorkflowDefinition) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkflowWorkflowDefinition) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *WorkflowWorkflowDefinition) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *WorkflowWorkflowDefinition) SetDescription(v string) {
	o.Description = &v
}

// GetInputDefinition returns the InputDefinition field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *WorkflowWorkflowDefinition) GetInputDefinition() []WorkflowBaseDataType {
	if o == nil {
		var ret []WorkflowBaseDataType
		return ret
	}
	return o.InputDefinition
}

// GetInputDefinitionOk returns a tuple with the InputDefinition field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *WorkflowWorkflowDefinition) GetInputDefinitionOk() ([]WorkflowBaseDataType, bool) {
	if o == nil || IsNil(o.InputDefinition) {
		return nil, false
	}
	return o.InputDefinition, true
}

// HasInputDefinition returns a boolean if a field has been set.
func (o *WorkflowWorkflowDefinition) HasInputDefinition() bool {
	if o != nil && !IsNil(o.InputDefinition) {
		return true
	}

	return false
}

// SetInputDefinition gets a reference to the given []WorkflowBaseDataType and assigns it to the InputDefinition field.
func (o *WorkflowWorkflowDefinition) SetInputDefinition(v []WorkflowBaseDataType) {
	o.InputDefinition = v
}

// GetInputParameterSet returns the InputParameterSet field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *WorkflowWorkflowDefinition) GetInputParameterSet() []WorkflowParameterSet {
	if o == nil {
		var ret []WorkflowParameterSet
		return ret
	}
	return o.InputParameterSet
}

// GetInputParameterSetOk returns a tuple with the InputParameterSet field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *WorkflowWorkflowDefinition) GetInputParameterSetOk() ([]WorkflowParameterSet, bool) {
	if o == nil || IsNil(o.InputParameterSet) {
		return nil, false
	}
	return o.InputParameterSet, true
}

// HasInputParameterSet returns a boolean if a field has been set.
func (o *WorkflowWorkflowDefinition) HasInputParameterSet() bool {
	if o != nil && !IsNil(o.InputParameterSet) {
		return true
	}

	return false
}

// SetInputParameterSet gets a reference to the given []WorkflowParameterSet and assigns it to the InputParameterSet field.
func (o *WorkflowWorkflowDefinition) SetInputParameterSet(v []WorkflowParameterSet) {
	o.InputParameterSet = v
}

// GetLabel returns the Label field value if set, zero value otherwise.
func (o *WorkflowWorkflowDefinition) GetLabel() string {
	if o == nil || IsNil(o.Label) {
		var ret string
		return ret
	}
	return *o.Label
}

// GetLabelOk returns a tuple with the Label field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkflowWorkflowDefinition) GetLabelOk() (*string, bool) {
	if o == nil || IsNil(o.Label) {
		return nil, false
	}
	return o.Label, true
}

// HasLabel returns a boolean if a field has been set.
func (o *WorkflowWorkflowDefinition) HasLabel() bool {
	if o != nil && !IsNil(o.Label) {
		return true
	}

	return false
}

// SetLabel gets a reference to the given string and assigns it to the Label field.
func (o *WorkflowWorkflowDefinition) SetLabel(v string) {
	o.Label = &v
}

// GetLicenseEntitlement returns the LicenseEntitlement field value if set, zero value otherwise.
func (o *WorkflowWorkflowDefinition) GetLicenseEntitlement() string {
	if o == nil || IsNil(o.LicenseEntitlement) {
		var ret string
		return ret
	}
	return *o.LicenseEntitlement
}

// GetLicenseEntitlementOk returns a tuple with the LicenseEntitlement field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkflowWorkflowDefinition) GetLicenseEntitlementOk() (*string, bool) {
	if o == nil || IsNil(o.LicenseEntitlement) {
		return nil, false
	}
	return o.LicenseEntitlement, true
}

// HasLicenseEntitlement returns a boolean if a field has been set.
func (o *WorkflowWorkflowDefinition) HasLicenseEntitlement() bool {
	if o != nil && !IsNil(o.LicenseEntitlement) {
		return true
	}

	return false
}

// SetLicenseEntitlement gets a reference to the given string and assigns it to the LicenseEntitlement field.
func (o *WorkflowWorkflowDefinition) SetLicenseEntitlement(v string) {
	o.LicenseEntitlement = &v
}

// GetMaxTaskCount returns the MaxTaskCount field value if set, zero value otherwise.
func (o *WorkflowWorkflowDefinition) GetMaxTaskCount() int64 {
	if o == nil || IsNil(o.MaxTaskCount) {
		var ret int64
		return ret
	}
	return *o.MaxTaskCount
}

// GetMaxTaskCountOk returns a tuple with the MaxTaskCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkflowWorkflowDefinition) GetMaxTaskCountOk() (*int64, bool) {
	if o == nil || IsNil(o.MaxTaskCount) {
		return nil, false
	}
	return o.MaxTaskCount, true
}

// HasMaxTaskCount returns a boolean if a field has been set.
func (o *WorkflowWorkflowDefinition) HasMaxTaskCount() bool {
	if o != nil && !IsNil(o.MaxTaskCount) {
		return true
	}

	return false
}

// SetMaxTaskCount gets a reference to the given int64 and assigns it to the MaxTaskCount field.
func (o *WorkflowWorkflowDefinition) SetMaxTaskCount(v int64) {
	o.MaxTaskCount = &v
}

// GetMaxWorkerTaskCount returns the MaxWorkerTaskCount field value if set, zero value otherwise.
func (o *WorkflowWorkflowDefinition) GetMaxWorkerTaskCount() int64 {
	if o == nil || IsNil(o.MaxWorkerTaskCount) {
		var ret int64
		return ret
	}
	return *o.MaxWorkerTaskCount
}

// GetMaxWorkerTaskCountOk returns a tuple with the MaxWorkerTaskCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkflowWorkflowDefinition) GetMaxWorkerTaskCountOk() (*int64, bool) {
	if o == nil || IsNil(o.MaxWorkerTaskCount) {
		return nil, false
	}
	return o.MaxWorkerTaskCount, true
}

// HasMaxWorkerTaskCount returns a boolean if a field has been set.
func (o *WorkflowWorkflowDefinition) HasMaxWorkerTaskCount() bool {
	if o != nil && !IsNil(o.MaxWorkerTaskCount) {
		return true
	}

	return false
}

// SetMaxWorkerTaskCount gets a reference to the given int64 and assigns it to the MaxWorkerTaskCount field.
func (o *WorkflowWorkflowDefinition) SetMaxWorkerTaskCount(v int64) {
	o.MaxWorkerTaskCount = &v
}

// GetModUser returns the ModUser field value if set, zero value otherwise.
func (o *WorkflowWorkflowDefinition) GetModUser() string {
	if o == nil || IsNil(o.ModUser) {
		var ret string
		return ret
	}
	return *o.ModUser
}

// GetModUserOk returns a tuple with the ModUser field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkflowWorkflowDefinition) GetModUserOk() (*string, bool) {
	if o == nil || IsNil(o.ModUser) {
		return nil, false
	}
	return o.ModUser, true
}

// HasModUser returns a boolean if a field has been set.
func (o *WorkflowWorkflowDefinition) HasModUser() bool {
	if o != nil && !IsNil(o.ModUser) {
		return true
	}

	return false
}

// SetModUser gets a reference to the given string and assigns it to the ModUser field.
func (o *WorkflowWorkflowDefinition) SetModUser(v string) {
	o.ModUser = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *WorkflowWorkflowDefinition) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkflowWorkflowDefinition) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *WorkflowWorkflowDefinition) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *WorkflowWorkflowDefinition) SetName(v string) {
	o.Name = &v
}

// GetOutputDefinition returns the OutputDefinition field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *WorkflowWorkflowDefinition) GetOutputDefinition() []WorkflowBaseDataType {
	if o == nil {
		var ret []WorkflowBaseDataType
		return ret
	}
	return o.OutputDefinition
}

// GetOutputDefinitionOk returns a tuple with the OutputDefinition field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *WorkflowWorkflowDefinition) GetOutputDefinitionOk() ([]WorkflowBaseDataType, bool) {
	if o == nil || IsNil(o.OutputDefinition) {
		return nil, false
	}
	return o.OutputDefinition, true
}

// HasOutputDefinition returns a boolean if a field has been set.
func (o *WorkflowWorkflowDefinition) HasOutputDefinition() bool {
	if o != nil && !IsNil(o.OutputDefinition) {
		return true
	}

	return false
}

// SetOutputDefinition gets a reference to the given []WorkflowBaseDataType and assigns it to the OutputDefinition field.
func (o *WorkflowWorkflowDefinition) SetOutputDefinition(v []WorkflowBaseDataType) {
	o.OutputDefinition = v
}

// GetOutputParameters returns the OutputParameters field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *WorkflowWorkflowDefinition) GetOutputParameters() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.OutputParameters
}

// GetOutputParametersOk returns a tuple with the OutputParameters field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *WorkflowWorkflowDefinition) GetOutputParametersOk() (*interface{}, bool) {
	if o == nil || IsNil(o.OutputParameters) {
		return nil, false
	}
	return &o.OutputParameters, true
}

// HasOutputParameters returns a boolean if a field has been set.
func (o *WorkflowWorkflowDefinition) HasOutputParameters() bool {
	if o != nil && !IsNil(o.OutputParameters) {
		return true
	}

	return false
}

// SetOutputParameters gets a reference to the given interface{} and assigns it to the OutputParameters field.
func (o *WorkflowWorkflowDefinition) SetOutputParameters(v interface{}) {
	o.OutputParameters = v
}

// GetProperties returns the Properties field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *WorkflowWorkflowDefinition) GetProperties() WorkflowWorkflowProperties {
	if o == nil || IsNil(o.Properties.Get()) {
		var ret WorkflowWorkflowProperties
		return ret
	}
	return *o.Properties.Get()
}

// GetPropertiesOk returns a tuple with the Properties field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *WorkflowWorkflowDefinition) GetPropertiesOk() (*WorkflowWorkflowProperties, bool) {
	if o == nil {
		return nil, false
	}
	return o.Properties.Get(), o.Properties.IsSet()
}

// HasProperties returns a boolean if a field has been set.
func (o *WorkflowWorkflowDefinition) HasProperties() bool {
	if o != nil && o.Properties.IsSet() {
		return true
	}

	return false
}

// SetProperties gets a reference to the given NullableWorkflowWorkflowProperties and assigns it to the Properties field.
func (o *WorkflowWorkflowDefinition) SetProperties(v WorkflowWorkflowProperties) {
	o.Properties.Set(&v)
}

// SetPropertiesNil sets the value for Properties to be an explicit nil
func (o *WorkflowWorkflowDefinition) SetPropertiesNil() {
	o.Properties.Set(nil)
}

// UnsetProperties ensures that no value is present for Properties, not even an explicit nil
func (o *WorkflowWorkflowDefinition) UnsetProperties() {
	o.Properties.Unset()
}

// GetTasks returns the Tasks field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *WorkflowWorkflowDefinition) GetTasks() []WorkflowWorkflowTask {
	if o == nil {
		var ret []WorkflowWorkflowTask
		return ret
	}
	return o.Tasks
}

// GetTasksOk returns a tuple with the Tasks field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *WorkflowWorkflowDefinition) GetTasksOk() ([]WorkflowWorkflowTask, bool) {
	if o == nil || IsNil(o.Tasks) {
		return nil, false
	}
	return o.Tasks, true
}

// HasTasks returns a boolean if a field has been set.
func (o *WorkflowWorkflowDefinition) HasTasks() bool {
	if o != nil && !IsNil(o.Tasks) {
		return true
	}

	return false
}

// SetTasks gets a reference to the given []WorkflowWorkflowTask and assigns it to the Tasks field.
func (o *WorkflowWorkflowDefinition) SetTasks(v []WorkflowWorkflowTask) {
	o.Tasks = v
}

// GetUiInputFilters returns the UiInputFilters field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *WorkflowWorkflowDefinition) GetUiInputFilters() []WorkflowUiInputFilter {
	if o == nil {
		var ret []WorkflowUiInputFilter
		return ret
	}
	return o.UiInputFilters
}

// GetUiInputFiltersOk returns a tuple with the UiInputFilters field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *WorkflowWorkflowDefinition) GetUiInputFiltersOk() ([]WorkflowUiInputFilter, bool) {
	if o == nil || IsNil(o.UiInputFilters) {
		return nil, false
	}
	return o.UiInputFilters, true
}

// HasUiInputFilters returns a boolean if a field has been set.
func (o *WorkflowWorkflowDefinition) HasUiInputFilters() bool {
	if o != nil && !IsNil(o.UiInputFilters) {
		return true
	}

	return false
}

// SetUiInputFilters gets a reference to the given []WorkflowUiInputFilter and assigns it to the UiInputFilters field.
func (o *WorkflowWorkflowDefinition) SetUiInputFilters(v []WorkflowUiInputFilter) {
	o.UiInputFilters = v
}

// GetUiRenderingData returns the UiRenderingData field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *WorkflowWorkflowDefinition) GetUiRenderingData() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.UiRenderingData
}

// GetUiRenderingDataOk returns a tuple with the UiRenderingData field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *WorkflowWorkflowDefinition) GetUiRenderingDataOk() (*interface{}, bool) {
	if o == nil || IsNil(o.UiRenderingData) {
		return nil, false
	}
	return &o.UiRenderingData, true
}

// HasUiRenderingData returns a boolean if a field has been set.
func (o *WorkflowWorkflowDefinition) HasUiRenderingData() bool {
	if o != nil && !IsNil(o.UiRenderingData) {
		return true
	}

	return false
}

// SetUiRenderingData gets a reference to the given interface{} and assigns it to the UiRenderingData field.
func (o *WorkflowWorkflowDefinition) SetUiRenderingData(v interface{}) {
	o.UiRenderingData = v
}

// GetValidationInformation returns the ValidationInformation field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *WorkflowWorkflowDefinition) GetValidationInformation() WorkflowValidationInformation {
	if o == nil || IsNil(o.ValidationInformation.Get()) {
		var ret WorkflowValidationInformation
		return ret
	}
	return *o.ValidationInformation.Get()
}

// GetValidationInformationOk returns a tuple with the ValidationInformation field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *WorkflowWorkflowDefinition) GetValidationInformationOk() (*WorkflowValidationInformation, bool) {
	if o == nil {
		return nil, false
	}
	return o.ValidationInformation.Get(), o.ValidationInformation.IsSet()
}

// HasValidationInformation returns a boolean if a field has been set.
func (o *WorkflowWorkflowDefinition) HasValidationInformation() bool {
	if o != nil && o.ValidationInformation.IsSet() {
		return true
	}

	return false
}

// SetValidationInformation gets a reference to the given NullableWorkflowValidationInformation and assigns it to the ValidationInformation field.
func (o *WorkflowWorkflowDefinition) SetValidationInformation(v WorkflowValidationInformation) {
	o.ValidationInformation.Set(&v)
}

// SetValidationInformationNil sets the value for ValidationInformation to be an explicit nil
func (o *WorkflowWorkflowDefinition) SetValidationInformationNil() {
	o.ValidationInformation.Set(nil)
}

// UnsetValidationInformation ensures that no value is present for ValidationInformation, not even an explicit nil
func (o *WorkflowWorkflowDefinition) UnsetValidationInformation() {
	o.ValidationInformation.Unset()
}

// GetVariableDefinition returns the VariableDefinition field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *WorkflowWorkflowDefinition) GetVariableDefinition() []WorkflowBaseDataType {
	if o == nil {
		var ret []WorkflowBaseDataType
		return ret
	}
	return o.VariableDefinition
}

// GetVariableDefinitionOk returns a tuple with the VariableDefinition field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *WorkflowWorkflowDefinition) GetVariableDefinitionOk() ([]WorkflowBaseDataType, bool) {
	if o == nil || IsNil(o.VariableDefinition) {
		return nil, false
	}
	return o.VariableDefinition, true
}

// HasVariableDefinition returns a boolean if a field has been set.
func (o *WorkflowWorkflowDefinition) HasVariableDefinition() bool {
	if o != nil && !IsNil(o.VariableDefinition) {
		return true
	}

	return false
}

// SetVariableDefinition gets a reference to the given []WorkflowBaseDataType and assigns it to the VariableDefinition field.
func (o *WorkflowWorkflowDefinition) SetVariableDefinition(v []WorkflowBaseDataType) {
	o.VariableDefinition = v
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *WorkflowWorkflowDefinition) GetVersion() int64 {
	if o == nil || IsNil(o.Version) {
		var ret int64
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkflowWorkflowDefinition) GetVersionOk() (*int64, bool) {
	if o == nil || IsNil(o.Version) {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *WorkflowWorkflowDefinition) HasVersion() bool {
	if o != nil && !IsNil(o.Version) {
		return true
	}

	return false
}

// SetVersion gets a reference to the given int64 and assigns it to the Version field.
func (o *WorkflowWorkflowDefinition) SetVersion(v int64) {
	o.Version = &v
}

// GetCatalog returns the Catalog field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *WorkflowWorkflowDefinition) GetCatalog() WorkflowCatalogRelationship {
	if o == nil || IsNil(o.Catalog.Get()) {
		var ret WorkflowCatalogRelationship
		return ret
	}
	return *o.Catalog.Get()
}

// GetCatalogOk returns a tuple with the Catalog field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *WorkflowWorkflowDefinition) GetCatalogOk() (*WorkflowCatalogRelationship, bool) {
	if o == nil {
		return nil, false
	}
	return o.Catalog.Get(), o.Catalog.IsSet()
}

// HasCatalog returns a boolean if a field has been set.
func (o *WorkflowWorkflowDefinition) HasCatalog() bool {
	if o != nil && o.Catalog.IsSet() {
		return true
	}

	return false
}

// SetCatalog gets a reference to the given NullableWorkflowCatalogRelationship and assigns it to the Catalog field.
func (o *WorkflowWorkflowDefinition) SetCatalog(v WorkflowCatalogRelationship) {
	o.Catalog.Set(&v)
}

// SetCatalogNil sets the value for Catalog to be an explicit nil
func (o *WorkflowWorkflowDefinition) SetCatalogNil() {
	o.Catalog.Set(nil)
}

// UnsetCatalog ensures that no value is present for Catalog, not even an explicit nil
func (o *WorkflowWorkflowDefinition) UnsetCatalog() {
	o.Catalog.Unset()
}

// GetClonedFrom returns the ClonedFrom field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *WorkflowWorkflowDefinition) GetClonedFrom() WorkflowWorkflowDefinitionRelationship {
	if o == nil || IsNil(o.ClonedFrom.Get()) {
		var ret WorkflowWorkflowDefinitionRelationship
		return ret
	}
	return *o.ClonedFrom.Get()
}

// GetClonedFromOk returns a tuple with the ClonedFrom field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *WorkflowWorkflowDefinition) GetClonedFromOk() (*WorkflowWorkflowDefinitionRelationship, bool) {
	if o == nil {
		return nil, false
	}
	return o.ClonedFrom.Get(), o.ClonedFrom.IsSet()
}

// HasClonedFrom returns a boolean if a field has been set.
func (o *WorkflowWorkflowDefinition) HasClonedFrom() bool {
	if o != nil && o.ClonedFrom.IsSet() {
		return true
	}

	return false
}

// SetClonedFrom gets a reference to the given NullableWorkflowWorkflowDefinitionRelationship and assigns it to the ClonedFrom field.
func (o *WorkflowWorkflowDefinition) SetClonedFrom(v WorkflowWorkflowDefinitionRelationship) {
	o.ClonedFrom.Set(&v)
}

// SetClonedFromNil sets the value for ClonedFrom to be an explicit nil
func (o *WorkflowWorkflowDefinition) SetClonedFromNil() {
	o.ClonedFrom.Set(nil)
}

// UnsetClonedFrom ensures that no value is present for ClonedFrom, not even an explicit nil
func (o *WorkflowWorkflowDefinition) UnsetClonedFrom() {
	o.ClonedFrom.Unset()
}

// GetWorkflowMetadata returns the WorkflowMetadata field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *WorkflowWorkflowDefinition) GetWorkflowMetadata() WorkflowWorkflowMetadataRelationship {
	if o == nil || IsNil(o.WorkflowMetadata.Get()) {
		var ret WorkflowWorkflowMetadataRelationship
		return ret
	}
	return *o.WorkflowMetadata.Get()
}

// GetWorkflowMetadataOk returns a tuple with the WorkflowMetadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *WorkflowWorkflowDefinition) GetWorkflowMetadataOk() (*WorkflowWorkflowMetadataRelationship, bool) {
	if o == nil {
		return nil, false
	}
	return o.WorkflowMetadata.Get(), o.WorkflowMetadata.IsSet()
}

// HasWorkflowMetadata returns a boolean if a field has been set.
func (o *WorkflowWorkflowDefinition) HasWorkflowMetadata() bool {
	if o != nil && o.WorkflowMetadata.IsSet() {
		return true
	}

	return false
}

// SetWorkflowMetadata gets a reference to the given NullableWorkflowWorkflowMetadataRelationship and assigns it to the WorkflowMetadata field.
func (o *WorkflowWorkflowDefinition) SetWorkflowMetadata(v WorkflowWorkflowMetadataRelationship) {
	o.WorkflowMetadata.Set(&v)
}

// SetWorkflowMetadataNil sets the value for WorkflowMetadata to be an explicit nil
func (o *WorkflowWorkflowDefinition) SetWorkflowMetadataNil() {
	o.WorkflowMetadata.Set(nil)
}

// UnsetWorkflowMetadata ensures that no value is present for WorkflowMetadata, not even an explicit nil
func (o *WorkflowWorkflowDefinition) UnsetWorkflowMetadata() {
	o.WorkflowMetadata.Unset()
}

func (o WorkflowWorkflowDefinition) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o WorkflowWorkflowDefinition) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	serializedMoBaseMo, errMoBaseMo := json.Marshal(o.MoBaseMo)
	if errMoBaseMo != nil {
		return map[string]interface{}{}, errMoBaseMo
	}
	errMoBaseMo = json.Unmarshal([]byte(serializedMoBaseMo), &toSerialize)
	if errMoBaseMo != nil {
		return map[string]interface{}{}, errMoBaseMo
	}
	if _, exists := toSerialize["ClassId"]; !exists {
		toSerialize["ClassId"] = o.GetDefaultClassId()
	}
	toSerialize["ClassId"] = o.ClassId
	if _, exists := toSerialize["ObjectType"]; !exists {
		toSerialize["ObjectType"] = o.GetDefaultObjectType()
	}
	toSerialize["ObjectType"] = o.ObjectType
	if !IsNil(o.CreateUser) {
		toSerialize["CreateUser"] = o.CreateUser
	}
	if !IsNil(o.DefaultVersion) {
		toSerialize["DefaultVersion"] = o.DefaultVersion
	}
	if !IsNil(o.Description) {
		toSerialize["Description"] = o.Description
	}
	if o.InputDefinition != nil {
		toSerialize["InputDefinition"] = o.InputDefinition
	}
	if o.InputParameterSet != nil {
		toSerialize["InputParameterSet"] = o.InputParameterSet
	}
	if !IsNil(o.Label) {
		toSerialize["Label"] = o.Label
	}
	if !IsNil(o.LicenseEntitlement) {
		toSerialize["LicenseEntitlement"] = o.LicenseEntitlement
	}
	if !IsNil(o.MaxTaskCount) {
		toSerialize["MaxTaskCount"] = o.MaxTaskCount
	}
	if !IsNil(o.MaxWorkerTaskCount) {
		toSerialize["MaxWorkerTaskCount"] = o.MaxWorkerTaskCount
	}
	if !IsNil(o.ModUser) {
		toSerialize["ModUser"] = o.ModUser
	}
	if !IsNil(o.Name) {
		toSerialize["Name"] = o.Name
	}
	if o.OutputDefinition != nil {
		toSerialize["OutputDefinition"] = o.OutputDefinition
	}
	if o.OutputParameters != nil {
		toSerialize["OutputParameters"] = o.OutputParameters
	}
	if o.Properties.IsSet() {
		toSerialize["Properties"] = o.Properties.Get()
	}
	if o.Tasks != nil {
		toSerialize["Tasks"] = o.Tasks
	}
	if o.UiInputFilters != nil {
		toSerialize["UiInputFilters"] = o.UiInputFilters
	}
	if o.UiRenderingData != nil {
		toSerialize["UiRenderingData"] = o.UiRenderingData
	}
	if o.ValidationInformation.IsSet() {
		toSerialize["ValidationInformation"] = o.ValidationInformation.Get()
	}
	if o.VariableDefinition != nil {
		toSerialize["VariableDefinition"] = o.VariableDefinition
	}
	if !IsNil(o.Version) {
		toSerialize["Version"] = o.Version
	}
	if o.Catalog.IsSet() {
		toSerialize["Catalog"] = o.Catalog.Get()
	}
	if o.ClonedFrom.IsSet() {
		toSerialize["ClonedFrom"] = o.ClonedFrom.Get()
	}
	if o.WorkflowMetadata.IsSet() {
		toSerialize["WorkflowMetadata"] = o.WorkflowMetadata.Get()
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *WorkflowWorkflowDefinition) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"ClassId",
		"ObjectType",
	}

	// defaultValueFuncMap captures the default values for required properties.
	// These values are used when required properties are missing from the payload.
	defaultValueFuncMap := map[string]func() interface{}{
		"ClassId":    o.GetDefaultClassId,
		"ObjectType": o.GetDefaultObjectType,
	}
	var defaultValueApplied bool
	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			if _, ok := defaultValueFuncMap[requiredProperty]; ok {
				allProperties[requiredProperty] = defaultValueFuncMap[requiredProperty]()
				defaultValueApplied = true
			}
		}
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	if defaultValueApplied {
		data, err = json.Marshal(allProperties)
		if err != nil {
			return err
		}
	}
	type WorkflowWorkflowDefinitionWithoutEmbeddedStruct struct {
		// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.
		ClassId string `json:"ClassId"`
		// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
		ObjectType string `json:"ObjectType"`
		// The user identifier who created or cloned the workflow definition.
		CreateUser *string `json:"CreateUser,omitempty"`
		// When true this will be the workflow version that is used when a specific workflow definition version is not specified. The default version is used when user executes a workflow without specifying a version or when workflow is included in another workflow without a specific version. The very first workflow definition created with a name will be set as the default version, after that user can explicitly set any version of the workflow definition as the default version.
		DefaultVersion *bool `json:"DefaultVersion,omitempty"`
		// The description for this workflow.
		Description       *string                `json:"Description,omitempty"`
		InputDefinition   []WorkflowBaseDataType `json:"InputDefinition,omitempty"`
		InputParameterSet []WorkflowParameterSet `json:"InputParameterSet,omitempty"`
		// A user friendly short name to identify the workflow. Label can only contain letters (a-z, A-Z), numbers (0-9), hyphen (-), period (.), colon (:), space ( ), forward slash (/), or an underscore (_).
		Label *string `json:"Label,omitempty" validate:"regexp=^[a-zA-Z0-9]{1}[\\\\sa-zA-Z0-9_.\\/:-]{0,91}$"`
		// License entitlement required to run this workflow. It is calculated based on the highest license requirement of all its tasks. * `Base` - Base as a License type. It is default license type. * `Essential` - Essential as a License type. * `Standard` - Standard as a License type. * `Advantage` - Advantage as a License type. * `Premier` - Premier as a License type. * `IWO-Essential` - IWO-Essential as a License type. * `IWO-Advantage` - IWO-Advantage as a License type. * `IWO-Premier` - IWO-Premier as a License type. * `IKS-Advantage` - IKS-Advantage as a License type. * `INC-Premier-1GFixed` - Premier 1G Fixed license tier for Intersight Nexus Cloud. * `INC-Premier-10GFixed` - Premier 10G Fixed license tier for Intersight Nexus Cloud. * `INC-Premier-100GFixed` - Premier 100G Fixed license tier for Intersight Nexus Cloud. * `INC-Premier-Mod4Slot` - Premier Modular 4 slot license tier for Intersight Nexus Cloud. * `INC-Premier-Mod8Slot` - Premier Modular 8 slot license tier for Intersight Nexus Cloud. * `INC-Premier-D2OpsFixed` - Premier D2Ops fixed license tier for Intersight Nexus Cloud. * `INC-Premier-D2OpsMod` - Premier D2Ops modular license tier for Intersight Nexus Cloud. * `INC-Premier-CentralizedMod8Slot` - Premier modular license tier of switch type CentralizedMod8Slot for Intersight Nexus Cloud. * `INC-Premier-DistributedMod8Slot` - Premier modular license tier of switch type DistributedMod8Slot for Intersight Nexus Cloud. * `IntersightTrial` - Virtual dummy license type to indicate trial. Used for UI display of trial mode Intersight tiers. * `IWOTrial` - Virtual dummy license type to indicate trial. Used for UI display of trial mode IKS tiers. * `IKSTrial` - Virtual dummy license type to indicate trial. Used for UI display of trial mode IWO tiers. * `INCTrial` - Virtual dummy license type to indicate trial. Used for UI display of trial mode Nexus tiers.
		LicenseEntitlement *string `json:"LicenseEntitlement,omitempty"`
		// The maximum number of tasks that can be executed on this workflow.
		MaxTaskCount *int64 `json:"MaxTaskCount,omitempty"`
		// The maximum number of external (worker) tasks that can be executed on this workflow.
		MaxWorkerTaskCount *int64 `json:"MaxWorkerTaskCount,omitempty"`
		// The user identifier who last updated the workflow definition.
		ModUser *string `json:"ModUser,omitempty"`
		// The name for this workflow. You can have multiple versions of the workflow with the same name. Name can only contain letters (a-z, A-Z), numbers (0-9), hyphen (-), period (.) or an underscore (_).
		Name             *string                `json:"Name,omitempty" validate:"regexp=^[a-zA-Z0-9]{1}[a-zA-Z0-9_.-]{0,63}$"`
		OutputDefinition []WorkflowBaseDataType `json:"OutputDefinition,omitempty"`
		// The output mappings for the workflow. The schema for outputs of a workflow is defined using OutputDefinition. The outputs for workflows that we want to export out at the end of the workflow can be mapped from task outputs, workflow inputs, or workflow variables. Any task output, workflow input, or workflow variable can be mapped to a workflow output as long as the types are compatible. The format to specify the mapping is '${ 'workflow | <taskName>'. 'output |input | variable'.<name>[.<JsonPath>]}'. First, either the keyword 'workflow' or the name of the task in the workflow must be given. If a task name is used, then it must be followed by the keyword 'output', if the keyword workflow was used, then it must be followed by the keyword 'input' or 'variable'. Following this '<name>' must be the name of either input, output, or variable that must be mapped as workflow output. The last part of the mapping can be an optional <JsonPath> to extract specific fields on the data.
		OutputParameters interface{}                        `json:"OutputParameters,omitempty"`
		Properties       NullableWorkflowWorkflowProperties `json:"Properties,omitempty"`
		Tasks            []WorkflowWorkflowTask             `json:"Tasks,omitempty"`
		UiInputFilters   []WorkflowUiInputFilter            `json:"UiInputFilters,omitempty"`
		// This will hold the data needed for workflow to be rendered in the user interface.
		UiRenderingData       interface{}                           `json:"UiRenderingData,omitempty"`
		ValidationInformation NullableWorkflowValidationInformation `json:"ValidationInformation,omitempty"`
		VariableDefinition    []WorkflowBaseDataType                `json:"VariableDefinition,omitempty"`
		// The version of the workflow to support multiple versions.
		Version          *int64                                         `json:"Version,omitempty"`
		Catalog          NullableWorkflowCatalogRelationship            `json:"Catalog,omitempty"`
		ClonedFrom       NullableWorkflowWorkflowDefinitionRelationship `json:"ClonedFrom,omitempty"`
		WorkflowMetadata NullableWorkflowWorkflowMetadataRelationship   `json:"WorkflowMetadata,omitempty"`
	}

	varWorkflowWorkflowDefinitionWithoutEmbeddedStruct := WorkflowWorkflowDefinitionWithoutEmbeddedStruct{}

	err = json.Unmarshal(data, &varWorkflowWorkflowDefinitionWithoutEmbeddedStruct)
	if err == nil {
		varWorkflowWorkflowDefinition := _WorkflowWorkflowDefinition{}
		varWorkflowWorkflowDefinition.ClassId = varWorkflowWorkflowDefinitionWithoutEmbeddedStruct.ClassId
		varWorkflowWorkflowDefinition.ObjectType = varWorkflowWorkflowDefinitionWithoutEmbeddedStruct.ObjectType
		varWorkflowWorkflowDefinition.CreateUser = varWorkflowWorkflowDefinitionWithoutEmbeddedStruct.CreateUser
		varWorkflowWorkflowDefinition.DefaultVersion = varWorkflowWorkflowDefinitionWithoutEmbeddedStruct.DefaultVersion
		varWorkflowWorkflowDefinition.Description = varWorkflowWorkflowDefinitionWithoutEmbeddedStruct.Description
		varWorkflowWorkflowDefinition.InputDefinition = varWorkflowWorkflowDefinitionWithoutEmbeddedStruct.InputDefinition
		varWorkflowWorkflowDefinition.InputParameterSet = varWorkflowWorkflowDefinitionWithoutEmbeddedStruct.InputParameterSet
		varWorkflowWorkflowDefinition.Label = varWorkflowWorkflowDefinitionWithoutEmbeddedStruct.Label
		varWorkflowWorkflowDefinition.LicenseEntitlement = varWorkflowWorkflowDefinitionWithoutEmbeddedStruct.LicenseEntitlement
		varWorkflowWorkflowDefinition.MaxTaskCount = varWorkflowWorkflowDefinitionWithoutEmbeddedStruct.MaxTaskCount
		varWorkflowWorkflowDefinition.MaxWorkerTaskCount = varWorkflowWorkflowDefinitionWithoutEmbeddedStruct.MaxWorkerTaskCount
		varWorkflowWorkflowDefinition.ModUser = varWorkflowWorkflowDefinitionWithoutEmbeddedStruct.ModUser
		varWorkflowWorkflowDefinition.Name = varWorkflowWorkflowDefinitionWithoutEmbeddedStruct.Name
		varWorkflowWorkflowDefinition.OutputDefinition = varWorkflowWorkflowDefinitionWithoutEmbeddedStruct.OutputDefinition
		varWorkflowWorkflowDefinition.OutputParameters = varWorkflowWorkflowDefinitionWithoutEmbeddedStruct.OutputParameters
		varWorkflowWorkflowDefinition.Properties = varWorkflowWorkflowDefinitionWithoutEmbeddedStruct.Properties
		varWorkflowWorkflowDefinition.Tasks = varWorkflowWorkflowDefinitionWithoutEmbeddedStruct.Tasks
		varWorkflowWorkflowDefinition.UiInputFilters = varWorkflowWorkflowDefinitionWithoutEmbeddedStruct.UiInputFilters
		varWorkflowWorkflowDefinition.UiRenderingData = varWorkflowWorkflowDefinitionWithoutEmbeddedStruct.UiRenderingData
		varWorkflowWorkflowDefinition.ValidationInformation = varWorkflowWorkflowDefinitionWithoutEmbeddedStruct.ValidationInformation
		varWorkflowWorkflowDefinition.VariableDefinition = varWorkflowWorkflowDefinitionWithoutEmbeddedStruct.VariableDefinition
		varWorkflowWorkflowDefinition.Version = varWorkflowWorkflowDefinitionWithoutEmbeddedStruct.Version
		varWorkflowWorkflowDefinition.Catalog = varWorkflowWorkflowDefinitionWithoutEmbeddedStruct.Catalog
		varWorkflowWorkflowDefinition.ClonedFrom = varWorkflowWorkflowDefinitionWithoutEmbeddedStruct.ClonedFrom
		varWorkflowWorkflowDefinition.WorkflowMetadata = varWorkflowWorkflowDefinitionWithoutEmbeddedStruct.WorkflowMetadata
		*o = WorkflowWorkflowDefinition(varWorkflowWorkflowDefinition)
	} else {
		return err
	}

	varWorkflowWorkflowDefinition := _WorkflowWorkflowDefinition{}

	err = json.Unmarshal(data, &varWorkflowWorkflowDefinition)
	if err == nil {
		o.MoBaseMo = varWorkflowWorkflowDefinition.MoBaseMo
	} else {
		return err
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "ClassId")
		delete(additionalProperties, "ObjectType")
		delete(additionalProperties, "CreateUser")
		delete(additionalProperties, "DefaultVersion")
		delete(additionalProperties, "Description")
		delete(additionalProperties, "InputDefinition")
		delete(additionalProperties, "InputParameterSet")
		delete(additionalProperties, "Label")
		delete(additionalProperties, "LicenseEntitlement")
		delete(additionalProperties, "MaxTaskCount")
		delete(additionalProperties, "MaxWorkerTaskCount")
		delete(additionalProperties, "ModUser")
		delete(additionalProperties, "Name")
		delete(additionalProperties, "OutputDefinition")
		delete(additionalProperties, "OutputParameters")
		delete(additionalProperties, "Properties")
		delete(additionalProperties, "Tasks")
		delete(additionalProperties, "UiInputFilters")
		delete(additionalProperties, "UiRenderingData")
		delete(additionalProperties, "ValidationInformation")
		delete(additionalProperties, "VariableDefinition")
		delete(additionalProperties, "Version")
		delete(additionalProperties, "Catalog")
		delete(additionalProperties, "ClonedFrom")
		delete(additionalProperties, "WorkflowMetadata")

		// remove fields from embedded structs
		reflectMoBaseMo := reflect.ValueOf(o.MoBaseMo)
		for i := 0; i < reflectMoBaseMo.Type().NumField(); i++ {
			t := reflectMoBaseMo.Type().Field(i)

			if jsonTag := t.Tag.Get("json"); jsonTag != "" {
				fieldName := ""
				if commaIdx := strings.Index(jsonTag, ","); commaIdx > 0 {
					fieldName = jsonTag[:commaIdx]
				} else {
					fieldName = jsonTag
				}
				if fieldName != "AdditionalProperties" {
					delete(additionalProperties, fieldName)
				}
			}
		}

		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableWorkflowWorkflowDefinition struct {
	value *WorkflowWorkflowDefinition
	isSet bool
}

func (v NullableWorkflowWorkflowDefinition) Get() *WorkflowWorkflowDefinition {
	return v.value
}

func (v *NullableWorkflowWorkflowDefinition) Set(val *WorkflowWorkflowDefinition) {
	v.value = val
	v.isSet = true
}

func (v NullableWorkflowWorkflowDefinition) IsSet() bool {
	return v.isSet
}

func (v *NullableWorkflowWorkflowDefinition) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWorkflowWorkflowDefinition(val *WorkflowWorkflowDefinition) *NullableWorkflowWorkflowDefinition {
	return &NullableWorkflowWorkflowDefinition{value: val, isSet: true}
}

func (v NullableWorkflowWorkflowDefinition) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWorkflowWorkflowDefinition) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
