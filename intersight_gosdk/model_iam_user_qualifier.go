/*
Cisco Intersight

Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations. The Intersight OpenAPI document defines the complete set of properties that are returned in the HTTP response. From that perspective, a client can expect that no additional properties are returned, unless these properties are explicitly defined in the OpenAPI document. However, when a client uses an older version of the Intersight OpenAPI document, the server may send additional properties because the software is more recent than the client. In that case, the client may receive properties that it does not know about. Some generated SDKs perform a strict validation of the HTTP response body against the OpenAPI document.

API version: 1.0.11-2025101412
Contact: intersight@cisco.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package intersight

import (
	"encoding/json"
	"fmt"
	"reflect"
	"strings"
	"time"
)

// checks if the IamUserQualifier type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &IamUserQualifier{}

// IamUserQualifier User Qualifier holds list of guest user details configured for guest user group type, which then can be used for guest user login.
type IamUserQualifier struct {
	IamAbstractQualifier
	// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.
	ClassId string `json:"ClassId"`
	// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
	ObjectType string `json:"ObjectType"`
	// Holds the information on when last email notification was sent to the guest users.
	LastNotificationTime *time.Time `json:"LastNotificationTime,omitempty"`
	// Defines the scope of email notifications for guest users. It determines which guest users  should receive email notifications about account access details. Options include notifying all users or only  newly added users. * `All` - Email Notification is sent to all users. * `New` - Email Notification is sent to newly added users.
	NotificationScope *string `json:"NotificationScope,omitempty"`
	// NotifyGuestUsers holds information on whether guest users have been notified about the guest access information. If set to true, all guest users will receive a email notification about the details of guest access link and instructions.
	NotifyGuestUsers     *bool            `json:"NotifyGuestUsers,omitempty"`
	UserDetails          []IamUserDetails `json:"UserDetails,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _IamUserQualifier IamUserQualifier

// NewIamUserQualifier instantiates a new IamUserQualifier object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIamUserQualifier(classId string, objectType string) *IamUserQualifier {
	this := IamUserQualifier{}
	this.ClassId = classId
	this.ObjectType = objectType
	var notificationScope string = "All"
	this.NotificationScope = &notificationScope
	return &this
}

// NewIamUserQualifierWithDefaults instantiates a new IamUserQualifier object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIamUserQualifierWithDefaults() *IamUserQualifier {
	this := IamUserQualifier{}
	var classId string = "iam.UserQualifier"
	this.ClassId = classId
	var objectType string = "iam.UserQualifier"
	this.ObjectType = objectType
	var notificationScope string = "All"
	this.NotificationScope = &notificationScope
	return &this
}

// GetClassId returns the ClassId field value
func (o *IamUserQualifier) GetClassId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ClassId
}

// GetClassIdOk returns a tuple with the ClassId field value
// and a boolean to check if the value has been set.
func (o *IamUserQualifier) GetClassIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ClassId, true
}

// SetClassId sets field value
func (o *IamUserQualifier) SetClassId(v string) {
	o.ClassId = v
}

// GetDefaultClassId returns the default value "iam.UserQualifier" of the ClassId field.
func (o *IamUserQualifier) GetDefaultClassId() interface{} {
	return "iam.UserQualifier"
}

// GetObjectType returns the ObjectType field value
func (o *IamUserQualifier) GetObjectType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ObjectType
}

// GetObjectTypeOk returns a tuple with the ObjectType field value
// and a boolean to check if the value has been set.
func (o *IamUserQualifier) GetObjectTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ObjectType, true
}

// SetObjectType sets field value
func (o *IamUserQualifier) SetObjectType(v string) {
	o.ObjectType = v
}

// GetDefaultObjectType returns the default value "iam.UserQualifier" of the ObjectType field.
func (o *IamUserQualifier) GetDefaultObjectType() interface{} {
	return "iam.UserQualifier"
}

// GetLastNotificationTime returns the LastNotificationTime field value if set, zero value otherwise.
func (o *IamUserQualifier) GetLastNotificationTime() time.Time {
	if o == nil || IsNil(o.LastNotificationTime) {
		var ret time.Time
		return ret
	}
	return *o.LastNotificationTime
}

// GetLastNotificationTimeOk returns a tuple with the LastNotificationTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IamUserQualifier) GetLastNotificationTimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.LastNotificationTime) {
		return nil, false
	}
	return o.LastNotificationTime, true
}

// HasLastNotificationTime returns a boolean if a field has been set.
func (o *IamUserQualifier) HasLastNotificationTime() bool {
	if o != nil && !IsNil(o.LastNotificationTime) {
		return true
	}

	return false
}

// SetLastNotificationTime gets a reference to the given time.Time and assigns it to the LastNotificationTime field.
func (o *IamUserQualifier) SetLastNotificationTime(v time.Time) {
	o.LastNotificationTime = &v
}

// GetNotificationScope returns the NotificationScope field value if set, zero value otherwise.
func (o *IamUserQualifier) GetNotificationScope() string {
	if o == nil || IsNil(o.NotificationScope) {
		var ret string
		return ret
	}
	return *o.NotificationScope
}

// GetNotificationScopeOk returns a tuple with the NotificationScope field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IamUserQualifier) GetNotificationScopeOk() (*string, bool) {
	if o == nil || IsNil(o.NotificationScope) {
		return nil, false
	}
	return o.NotificationScope, true
}

// HasNotificationScope returns a boolean if a field has been set.
func (o *IamUserQualifier) HasNotificationScope() bool {
	if o != nil && !IsNil(o.NotificationScope) {
		return true
	}

	return false
}

// SetNotificationScope gets a reference to the given string and assigns it to the NotificationScope field.
func (o *IamUserQualifier) SetNotificationScope(v string) {
	o.NotificationScope = &v
}

// GetNotifyGuestUsers returns the NotifyGuestUsers field value if set, zero value otherwise.
func (o *IamUserQualifier) GetNotifyGuestUsers() bool {
	if o == nil || IsNil(o.NotifyGuestUsers) {
		var ret bool
		return ret
	}
	return *o.NotifyGuestUsers
}

// GetNotifyGuestUsersOk returns a tuple with the NotifyGuestUsers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IamUserQualifier) GetNotifyGuestUsersOk() (*bool, bool) {
	if o == nil || IsNil(o.NotifyGuestUsers) {
		return nil, false
	}
	return o.NotifyGuestUsers, true
}

// HasNotifyGuestUsers returns a boolean if a field has been set.
func (o *IamUserQualifier) HasNotifyGuestUsers() bool {
	if o != nil && !IsNil(o.NotifyGuestUsers) {
		return true
	}

	return false
}

// SetNotifyGuestUsers gets a reference to the given bool and assigns it to the NotifyGuestUsers field.
func (o *IamUserQualifier) SetNotifyGuestUsers(v bool) {
	o.NotifyGuestUsers = &v
}

// GetUserDetails returns the UserDetails field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IamUserQualifier) GetUserDetails() []IamUserDetails {
	if o == nil {
		var ret []IamUserDetails
		return ret
	}
	return o.UserDetails
}

// GetUserDetailsOk returns a tuple with the UserDetails field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IamUserQualifier) GetUserDetailsOk() ([]IamUserDetails, bool) {
	if o == nil || IsNil(o.UserDetails) {
		return nil, false
	}
	return o.UserDetails, true
}

// HasUserDetails returns a boolean if a field has been set.
func (o *IamUserQualifier) HasUserDetails() bool {
	if o != nil && !IsNil(o.UserDetails) {
		return true
	}

	return false
}

// SetUserDetails gets a reference to the given []IamUserDetails and assigns it to the UserDetails field.
func (o *IamUserQualifier) SetUserDetails(v []IamUserDetails) {
	o.UserDetails = v
}

func (o IamUserQualifier) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IamUserQualifier) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	serializedIamAbstractQualifier, errIamAbstractQualifier := json.Marshal(o.IamAbstractQualifier)
	if errIamAbstractQualifier != nil {
		return map[string]interface{}{}, errIamAbstractQualifier
	}
	errIamAbstractQualifier = json.Unmarshal([]byte(serializedIamAbstractQualifier), &toSerialize)
	if errIamAbstractQualifier != nil {
		return map[string]interface{}{}, errIamAbstractQualifier
	}
	if _, exists := toSerialize["ClassId"]; !exists {
		toSerialize["ClassId"] = o.GetDefaultClassId()
	}
	toSerialize["ClassId"] = o.ClassId
	if _, exists := toSerialize["ObjectType"]; !exists {
		toSerialize["ObjectType"] = o.GetDefaultObjectType()
	}
	toSerialize["ObjectType"] = o.ObjectType
	if !IsNil(o.LastNotificationTime) {
		toSerialize["LastNotificationTime"] = o.LastNotificationTime
	}
	if !IsNil(o.NotificationScope) {
		toSerialize["NotificationScope"] = o.NotificationScope
	}
	if !IsNil(o.NotifyGuestUsers) {
		toSerialize["NotifyGuestUsers"] = o.NotifyGuestUsers
	}
	if o.UserDetails != nil {
		toSerialize["UserDetails"] = o.UserDetails
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *IamUserQualifier) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"ClassId",
		"ObjectType",
	}

	// defaultValueFuncMap captures the default values for required properties.
	// These values are used when required properties are missing from the payload.
	defaultValueFuncMap := map[string]func() interface{}{
		"ClassId":    o.GetDefaultClassId,
		"ObjectType": o.GetDefaultObjectType,
	}
	var defaultValueApplied bool
	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			if _, ok := defaultValueFuncMap[requiredProperty]; ok {
				allProperties[requiredProperty] = defaultValueFuncMap[requiredProperty]()
				defaultValueApplied = true
			}
		}
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	if defaultValueApplied {
		data, err = json.Marshal(allProperties)
		if err != nil {
			return err
		}
	}
	type IamUserQualifierWithoutEmbeddedStruct struct {
		// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.
		ClassId string `json:"ClassId"`
		// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
		ObjectType string `json:"ObjectType"`
		// Holds the information on when last email notification was sent to the guest users.
		LastNotificationTime *time.Time `json:"LastNotificationTime,omitempty"`
		// Defines the scope of email notifications for guest users. It determines which guest users  should receive email notifications about account access details. Options include notifying all users or only  newly added users. * `All` - Email Notification is sent to all users. * `New` - Email Notification is sent to newly added users.
		NotificationScope *string `json:"NotificationScope,omitempty"`
		// NotifyGuestUsers holds information on whether guest users have been notified about the guest access information. If set to true, all guest users will receive a email notification about the details of guest access link and instructions.
		NotifyGuestUsers *bool            `json:"NotifyGuestUsers,omitempty"`
		UserDetails      []IamUserDetails `json:"UserDetails,omitempty"`
	}

	varIamUserQualifierWithoutEmbeddedStruct := IamUserQualifierWithoutEmbeddedStruct{}

	err = json.Unmarshal(data, &varIamUserQualifierWithoutEmbeddedStruct)
	if err == nil {
		varIamUserQualifier := _IamUserQualifier{}
		varIamUserQualifier.ClassId = varIamUserQualifierWithoutEmbeddedStruct.ClassId
		varIamUserQualifier.ObjectType = varIamUserQualifierWithoutEmbeddedStruct.ObjectType
		varIamUserQualifier.LastNotificationTime = varIamUserQualifierWithoutEmbeddedStruct.LastNotificationTime
		varIamUserQualifier.NotificationScope = varIamUserQualifierWithoutEmbeddedStruct.NotificationScope
		varIamUserQualifier.NotifyGuestUsers = varIamUserQualifierWithoutEmbeddedStruct.NotifyGuestUsers
		varIamUserQualifier.UserDetails = varIamUserQualifierWithoutEmbeddedStruct.UserDetails
		*o = IamUserQualifier(varIamUserQualifier)
	} else {
		return err
	}

	varIamUserQualifier := _IamUserQualifier{}

	err = json.Unmarshal(data, &varIamUserQualifier)
	if err == nil {
		o.IamAbstractQualifier = varIamUserQualifier.IamAbstractQualifier
	} else {
		return err
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "ClassId")
		delete(additionalProperties, "ObjectType")
		delete(additionalProperties, "LastNotificationTime")
		delete(additionalProperties, "NotificationScope")
		delete(additionalProperties, "NotifyGuestUsers")
		delete(additionalProperties, "UserDetails")

		// remove fields from embedded structs
		reflectIamAbstractQualifier := reflect.ValueOf(o.IamAbstractQualifier)
		for i := 0; i < reflectIamAbstractQualifier.Type().NumField(); i++ {
			t := reflectIamAbstractQualifier.Type().Field(i)

			if jsonTag := t.Tag.Get("json"); jsonTag != "" {
				fieldName := ""
				if commaIdx := strings.Index(jsonTag, ","); commaIdx > 0 {
					fieldName = jsonTag[:commaIdx]
				} else {
					fieldName = jsonTag
				}
				if fieldName != "AdditionalProperties" {
					delete(additionalProperties, fieldName)
				}
			}
		}

		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableIamUserQualifier struct {
	value *IamUserQualifier
	isSet bool
}

func (v NullableIamUserQualifier) Get() *IamUserQualifier {
	return v.value
}

func (v *NullableIamUserQualifier) Set(val *IamUserQualifier) {
	v.value = val
	v.isSet = true
}

func (v NullableIamUserQualifier) IsSet() bool {
	return v.isSet
}

func (v *NullableIamUserQualifier) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIamUserQualifier(val *IamUserQualifier) *NullableIamUserQualifier {
	return &NullableIamUserQualifier{value: val, isSet: true}
}

func (v NullableIamUserQualifier) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIamUserQualifier) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
