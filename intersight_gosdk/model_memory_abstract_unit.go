/*
Cisco Intersight

Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations. The Intersight OpenAPI document defines the complete set of properties that are returned in the HTTP response. From that perspective, a client can expect that no additional properties are returned, unless these properties are explicitly defined in the OpenAPI document. However, when a client uses an older version of the Intersight OpenAPI document, the server may send additional properties because the software is more recent than the client. In that case, the client may receive properties that it does not know about. Some generated SDKs perform a strict validation of the HTTP response body against the OpenAPI document.

API version: 1.0.11-2024100405
Contact: intersight@cisco.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package intersight

import (
	"encoding/json"
	"fmt"
	"reflect"
	"strings"
)

// checks if the MemoryAbstractUnit type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MemoryAbstractUnit{}

// MemoryAbstractUnit Abstract class for all memory units.
type MemoryAbstractUnit struct {
	EquipmentBase
	// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data. The enum values provides the list of concrete types that can be instantiated from this abstract type.
	ClassId string `json:"ClassId"`
	// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property. The enum values provides the list of concrete types that can be instantiated from this abstract type.
	ObjectType string `json:"ObjectType"`
	// This represents the administrative state of the memory unit on a server.
	AdminState *string `json:"AdminState,omitempty"`
	// This represents the memory array to which the memory unit belongs to.
	ArrayId *int64 `json:"ArrayId,omitempty"`
	// This represents the memory bank of the memory unit on a server.
	Bank *int64 `json:"Bank,omitempty"`
	// This represents the memory capacity in MiB of the memory unit on a server.
	Capacity *string `json:"Capacity,omitempty"`
	// This represents the clock of the memory unit on a server.
	Clock *string `json:"Clock,omitempty"`
	// This represents the form factor of the memory unit on a server.
	FormFactor *string `json:"FormFactor,omitempty"`
	// This represents the latency of the memory unit on a server.
	Latency *string `json:"Latency,omitempty"`
	// This represents the location of the memory unit on a server.
	Location *string `json:"Location,omitempty"`
	// This represents the operational power state of the memory unit on a server.
	OperPowerState *string  `json:"OperPowerState,omitempty"`
	OperReason     []string `json:"OperReason,omitempty"`
	// This represents the operational state of the memory unit on a server.
	OperState *string `json:"OperState,omitempty"`
	// This represents the operability of the memory unit on a server.
	Operability *string `json:"Operability,omitempty"`
	// This represents the set of the memory unit on a server.
	Set *int64 `json:"Set,omitempty"`
	// This represents the speed of the memory unit on a server.
	Speed *string `json:"Speed,omitempty"`
	// This represents the thremal state of the memory unit on a server.
	Thermal *string `json:"Thermal,omitempty"`
	// This represents the memory type of the memory unit on a server.
	Type *string `json:"Type,omitempty"`
	// This represents the visibility of the memory unit on a server.
	Visibility *string `json:"Visibility,omitempty"`
	// This represents the width of the memory unit on a server.
	Width                *string `json:"Width,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _MemoryAbstractUnit MemoryAbstractUnit

// NewMemoryAbstractUnit instantiates a new MemoryAbstractUnit object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMemoryAbstractUnit(classId string, objectType string) *MemoryAbstractUnit {
	this := MemoryAbstractUnit{}
	this.ClassId = classId
	this.ObjectType = objectType
	return &this
}

// NewMemoryAbstractUnitWithDefaults instantiates a new MemoryAbstractUnit object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMemoryAbstractUnitWithDefaults() *MemoryAbstractUnit {
	this := MemoryAbstractUnit{}
	return &this
}

// GetClassId returns the ClassId field value
func (o *MemoryAbstractUnit) GetClassId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ClassId
}

// GetClassIdOk returns a tuple with the ClassId field value
// and a boolean to check if the value has been set.
func (o *MemoryAbstractUnit) GetClassIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ClassId, true
}

// SetClassId sets field value
func (o *MemoryAbstractUnit) SetClassId(v string) {
	o.ClassId = v
}

// GetObjectType returns the ObjectType field value
func (o *MemoryAbstractUnit) GetObjectType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ObjectType
}

// GetObjectTypeOk returns a tuple with the ObjectType field value
// and a boolean to check if the value has been set.
func (o *MemoryAbstractUnit) GetObjectTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ObjectType, true
}

// SetObjectType sets field value
func (o *MemoryAbstractUnit) SetObjectType(v string) {
	o.ObjectType = v
}

// GetAdminState returns the AdminState field value if set, zero value otherwise.
func (o *MemoryAbstractUnit) GetAdminState() string {
	if o == nil || IsNil(o.AdminState) {
		var ret string
		return ret
	}
	return *o.AdminState
}

// GetAdminStateOk returns a tuple with the AdminState field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemoryAbstractUnit) GetAdminStateOk() (*string, bool) {
	if o == nil || IsNil(o.AdminState) {
		return nil, false
	}
	return o.AdminState, true
}

// HasAdminState returns a boolean if a field has been set.
func (o *MemoryAbstractUnit) HasAdminState() bool {
	if o != nil && !IsNil(o.AdminState) {
		return true
	}

	return false
}

// SetAdminState gets a reference to the given string and assigns it to the AdminState field.
func (o *MemoryAbstractUnit) SetAdminState(v string) {
	o.AdminState = &v
}

// GetArrayId returns the ArrayId field value if set, zero value otherwise.
func (o *MemoryAbstractUnit) GetArrayId() int64 {
	if o == nil || IsNil(o.ArrayId) {
		var ret int64
		return ret
	}
	return *o.ArrayId
}

// GetArrayIdOk returns a tuple with the ArrayId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemoryAbstractUnit) GetArrayIdOk() (*int64, bool) {
	if o == nil || IsNil(o.ArrayId) {
		return nil, false
	}
	return o.ArrayId, true
}

// HasArrayId returns a boolean if a field has been set.
func (o *MemoryAbstractUnit) HasArrayId() bool {
	if o != nil && !IsNil(o.ArrayId) {
		return true
	}

	return false
}

// SetArrayId gets a reference to the given int64 and assigns it to the ArrayId field.
func (o *MemoryAbstractUnit) SetArrayId(v int64) {
	o.ArrayId = &v
}

// GetBank returns the Bank field value if set, zero value otherwise.
func (o *MemoryAbstractUnit) GetBank() int64 {
	if o == nil || IsNil(o.Bank) {
		var ret int64
		return ret
	}
	return *o.Bank
}

// GetBankOk returns a tuple with the Bank field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemoryAbstractUnit) GetBankOk() (*int64, bool) {
	if o == nil || IsNil(o.Bank) {
		return nil, false
	}
	return o.Bank, true
}

// HasBank returns a boolean if a field has been set.
func (o *MemoryAbstractUnit) HasBank() bool {
	if o != nil && !IsNil(o.Bank) {
		return true
	}

	return false
}

// SetBank gets a reference to the given int64 and assigns it to the Bank field.
func (o *MemoryAbstractUnit) SetBank(v int64) {
	o.Bank = &v
}

// GetCapacity returns the Capacity field value if set, zero value otherwise.
func (o *MemoryAbstractUnit) GetCapacity() string {
	if o == nil || IsNil(o.Capacity) {
		var ret string
		return ret
	}
	return *o.Capacity
}

// GetCapacityOk returns a tuple with the Capacity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemoryAbstractUnit) GetCapacityOk() (*string, bool) {
	if o == nil || IsNil(o.Capacity) {
		return nil, false
	}
	return o.Capacity, true
}

// HasCapacity returns a boolean if a field has been set.
func (o *MemoryAbstractUnit) HasCapacity() bool {
	if o != nil && !IsNil(o.Capacity) {
		return true
	}

	return false
}

// SetCapacity gets a reference to the given string and assigns it to the Capacity field.
func (o *MemoryAbstractUnit) SetCapacity(v string) {
	o.Capacity = &v
}

// GetClock returns the Clock field value if set, zero value otherwise.
func (o *MemoryAbstractUnit) GetClock() string {
	if o == nil || IsNil(o.Clock) {
		var ret string
		return ret
	}
	return *o.Clock
}

// GetClockOk returns a tuple with the Clock field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemoryAbstractUnit) GetClockOk() (*string, bool) {
	if o == nil || IsNil(o.Clock) {
		return nil, false
	}
	return o.Clock, true
}

// HasClock returns a boolean if a field has been set.
func (o *MemoryAbstractUnit) HasClock() bool {
	if o != nil && !IsNil(o.Clock) {
		return true
	}

	return false
}

// SetClock gets a reference to the given string and assigns it to the Clock field.
func (o *MemoryAbstractUnit) SetClock(v string) {
	o.Clock = &v
}

// GetFormFactor returns the FormFactor field value if set, zero value otherwise.
func (o *MemoryAbstractUnit) GetFormFactor() string {
	if o == nil || IsNil(o.FormFactor) {
		var ret string
		return ret
	}
	return *o.FormFactor
}

// GetFormFactorOk returns a tuple with the FormFactor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemoryAbstractUnit) GetFormFactorOk() (*string, bool) {
	if o == nil || IsNil(o.FormFactor) {
		return nil, false
	}
	return o.FormFactor, true
}

// HasFormFactor returns a boolean if a field has been set.
func (o *MemoryAbstractUnit) HasFormFactor() bool {
	if o != nil && !IsNil(o.FormFactor) {
		return true
	}

	return false
}

// SetFormFactor gets a reference to the given string and assigns it to the FormFactor field.
func (o *MemoryAbstractUnit) SetFormFactor(v string) {
	o.FormFactor = &v
}

// GetLatency returns the Latency field value if set, zero value otherwise.
func (o *MemoryAbstractUnit) GetLatency() string {
	if o == nil || IsNil(o.Latency) {
		var ret string
		return ret
	}
	return *o.Latency
}

// GetLatencyOk returns a tuple with the Latency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemoryAbstractUnit) GetLatencyOk() (*string, bool) {
	if o == nil || IsNil(o.Latency) {
		return nil, false
	}
	return o.Latency, true
}

// HasLatency returns a boolean if a field has been set.
func (o *MemoryAbstractUnit) HasLatency() bool {
	if o != nil && !IsNil(o.Latency) {
		return true
	}

	return false
}

// SetLatency gets a reference to the given string and assigns it to the Latency field.
func (o *MemoryAbstractUnit) SetLatency(v string) {
	o.Latency = &v
}

// GetLocation returns the Location field value if set, zero value otherwise.
func (o *MemoryAbstractUnit) GetLocation() string {
	if o == nil || IsNil(o.Location) {
		var ret string
		return ret
	}
	return *o.Location
}

// GetLocationOk returns a tuple with the Location field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemoryAbstractUnit) GetLocationOk() (*string, bool) {
	if o == nil || IsNil(o.Location) {
		return nil, false
	}
	return o.Location, true
}

// HasLocation returns a boolean if a field has been set.
func (o *MemoryAbstractUnit) HasLocation() bool {
	if o != nil && !IsNil(o.Location) {
		return true
	}

	return false
}

// SetLocation gets a reference to the given string and assigns it to the Location field.
func (o *MemoryAbstractUnit) SetLocation(v string) {
	o.Location = &v
}

// GetOperPowerState returns the OperPowerState field value if set, zero value otherwise.
func (o *MemoryAbstractUnit) GetOperPowerState() string {
	if o == nil || IsNil(o.OperPowerState) {
		var ret string
		return ret
	}
	return *o.OperPowerState
}

// GetOperPowerStateOk returns a tuple with the OperPowerState field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemoryAbstractUnit) GetOperPowerStateOk() (*string, bool) {
	if o == nil || IsNil(o.OperPowerState) {
		return nil, false
	}
	return o.OperPowerState, true
}

// HasOperPowerState returns a boolean if a field has been set.
func (o *MemoryAbstractUnit) HasOperPowerState() bool {
	if o != nil && !IsNil(o.OperPowerState) {
		return true
	}

	return false
}

// SetOperPowerState gets a reference to the given string and assigns it to the OperPowerState field.
func (o *MemoryAbstractUnit) SetOperPowerState(v string) {
	o.OperPowerState = &v
}

// GetOperReason returns the OperReason field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MemoryAbstractUnit) GetOperReason() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.OperReason
}

// GetOperReasonOk returns a tuple with the OperReason field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MemoryAbstractUnit) GetOperReasonOk() ([]string, bool) {
	if o == nil || IsNil(o.OperReason) {
		return nil, false
	}
	return o.OperReason, true
}

// HasOperReason returns a boolean if a field has been set.
func (o *MemoryAbstractUnit) HasOperReason() bool {
	if o != nil && !IsNil(o.OperReason) {
		return true
	}

	return false
}

// SetOperReason gets a reference to the given []string and assigns it to the OperReason field.
func (o *MemoryAbstractUnit) SetOperReason(v []string) {
	o.OperReason = v
}

// GetOperState returns the OperState field value if set, zero value otherwise.
func (o *MemoryAbstractUnit) GetOperState() string {
	if o == nil || IsNil(o.OperState) {
		var ret string
		return ret
	}
	return *o.OperState
}

// GetOperStateOk returns a tuple with the OperState field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemoryAbstractUnit) GetOperStateOk() (*string, bool) {
	if o == nil || IsNil(o.OperState) {
		return nil, false
	}
	return o.OperState, true
}

// HasOperState returns a boolean if a field has been set.
func (o *MemoryAbstractUnit) HasOperState() bool {
	if o != nil && !IsNil(o.OperState) {
		return true
	}

	return false
}

// SetOperState gets a reference to the given string and assigns it to the OperState field.
func (o *MemoryAbstractUnit) SetOperState(v string) {
	o.OperState = &v
}

// GetOperability returns the Operability field value if set, zero value otherwise.
func (o *MemoryAbstractUnit) GetOperability() string {
	if o == nil || IsNil(o.Operability) {
		var ret string
		return ret
	}
	return *o.Operability
}

// GetOperabilityOk returns a tuple with the Operability field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemoryAbstractUnit) GetOperabilityOk() (*string, bool) {
	if o == nil || IsNil(o.Operability) {
		return nil, false
	}
	return o.Operability, true
}

// HasOperability returns a boolean if a field has been set.
func (o *MemoryAbstractUnit) HasOperability() bool {
	if o != nil && !IsNil(o.Operability) {
		return true
	}

	return false
}

// SetOperability gets a reference to the given string and assigns it to the Operability field.
func (o *MemoryAbstractUnit) SetOperability(v string) {
	o.Operability = &v
}

// GetSet returns the Set field value if set, zero value otherwise.
func (o *MemoryAbstractUnit) GetSet() int64 {
	if o == nil || IsNil(o.Set) {
		var ret int64
		return ret
	}
	return *o.Set
}

// GetSetOk returns a tuple with the Set field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemoryAbstractUnit) GetSetOk() (*int64, bool) {
	if o == nil || IsNil(o.Set) {
		return nil, false
	}
	return o.Set, true
}

// HasSet returns a boolean if a field has been set.
func (o *MemoryAbstractUnit) HasSet() bool {
	if o != nil && !IsNil(o.Set) {
		return true
	}

	return false
}

// SetSet gets a reference to the given int64 and assigns it to the Set field.
func (o *MemoryAbstractUnit) SetSet(v int64) {
	o.Set = &v
}

// GetSpeed returns the Speed field value if set, zero value otherwise.
func (o *MemoryAbstractUnit) GetSpeed() string {
	if o == nil || IsNil(o.Speed) {
		var ret string
		return ret
	}
	return *o.Speed
}

// GetSpeedOk returns a tuple with the Speed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemoryAbstractUnit) GetSpeedOk() (*string, bool) {
	if o == nil || IsNil(o.Speed) {
		return nil, false
	}
	return o.Speed, true
}

// HasSpeed returns a boolean if a field has been set.
func (o *MemoryAbstractUnit) HasSpeed() bool {
	if o != nil && !IsNil(o.Speed) {
		return true
	}

	return false
}

// SetSpeed gets a reference to the given string and assigns it to the Speed field.
func (o *MemoryAbstractUnit) SetSpeed(v string) {
	o.Speed = &v
}

// GetThermal returns the Thermal field value if set, zero value otherwise.
func (o *MemoryAbstractUnit) GetThermal() string {
	if o == nil || IsNil(o.Thermal) {
		var ret string
		return ret
	}
	return *o.Thermal
}

// GetThermalOk returns a tuple with the Thermal field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemoryAbstractUnit) GetThermalOk() (*string, bool) {
	if o == nil || IsNil(o.Thermal) {
		return nil, false
	}
	return o.Thermal, true
}

// HasThermal returns a boolean if a field has been set.
func (o *MemoryAbstractUnit) HasThermal() bool {
	if o != nil && !IsNil(o.Thermal) {
		return true
	}

	return false
}

// SetThermal gets a reference to the given string and assigns it to the Thermal field.
func (o *MemoryAbstractUnit) SetThermal(v string) {
	o.Thermal = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *MemoryAbstractUnit) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemoryAbstractUnit) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *MemoryAbstractUnit) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *MemoryAbstractUnit) SetType(v string) {
	o.Type = &v
}

// GetVisibility returns the Visibility field value if set, zero value otherwise.
func (o *MemoryAbstractUnit) GetVisibility() string {
	if o == nil || IsNil(o.Visibility) {
		var ret string
		return ret
	}
	return *o.Visibility
}

// GetVisibilityOk returns a tuple with the Visibility field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemoryAbstractUnit) GetVisibilityOk() (*string, bool) {
	if o == nil || IsNil(o.Visibility) {
		return nil, false
	}
	return o.Visibility, true
}

// HasVisibility returns a boolean if a field has been set.
func (o *MemoryAbstractUnit) HasVisibility() bool {
	if o != nil && !IsNil(o.Visibility) {
		return true
	}

	return false
}

// SetVisibility gets a reference to the given string and assigns it to the Visibility field.
func (o *MemoryAbstractUnit) SetVisibility(v string) {
	o.Visibility = &v
}

// GetWidth returns the Width field value if set, zero value otherwise.
func (o *MemoryAbstractUnit) GetWidth() string {
	if o == nil || IsNil(o.Width) {
		var ret string
		return ret
	}
	return *o.Width
}

// GetWidthOk returns a tuple with the Width field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemoryAbstractUnit) GetWidthOk() (*string, bool) {
	if o == nil || IsNil(o.Width) {
		return nil, false
	}
	return o.Width, true
}

// HasWidth returns a boolean if a field has been set.
func (o *MemoryAbstractUnit) HasWidth() bool {
	if o != nil && !IsNil(o.Width) {
		return true
	}

	return false
}

// SetWidth gets a reference to the given string and assigns it to the Width field.
func (o *MemoryAbstractUnit) SetWidth(v string) {
	o.Width = &v
}

func (o MemoryAbstractUnit) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MemoryAbstractUnit) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	serializedEquipmentBase, errEquipmentBase := json.Marshal(o.EquipmentBase)
	if errEquipmentBase != nil {
		return map[string]interface{}{}, errEquipmentBase
	}
	errEquipmentBase = json.Unmarshal([]byte(serializedEquipmentBase), &toSerialize)
	if errEquipmentBase != nil {
		return map[string]interface{}{}, errEquipmentBase
	}
	toSerialize["ClassId"] = o.ClassId
	toSerialize["ObjectType"] = o.ObjectType
	if !IsNil(o.AdminState) {
		toSerialize["AdminState"] = o.AdminState
	}
	if !IsNil(o.ArrayId) {
		toSerialize["ArrayId"] = o.ArrayId
	}
	if !IsNil(o.Bank) {
		toSerialize["Bank"] = o.Bank
	}
	if !IsNil(o.Capacity) {
		toSerialize["Capacity"] = o.Capacity
	}
	if !IsNil(o.Clock) {
		toSerialize["Clock"] = o.Clock
	}
	if !IsNil(o.FormFactor) {
		toSerialize["FormFactor"] = o.FormFactor
	}
	if !IsNil(o.Latency) {
		toSerialize["Latency"] = o.Latency
	}
	if !IsNil(o.Location) {
		toSerialize["Location"] = o.Location
	}
	if !IsNil(o.OperPowerState) {
		toSerialize["OperPowerState"] = o.OperPowerState
	}
	if o.OperReason != nil {
		toSerialize["OperReason"] = o.OperReason
	}
	if !IsNil(o.OperState) {
		toSerialize["OperState"] = o.OperState
	}
	if !IsNil(o.Operability) {
		toSerialize["Operability"] = o.Operability
	}
	if !IsNil(o.Set) {
		toSerialize["Set"] = o.Set
	}
	if !IsNil(o.Speed) {
		toSerialize["Speed"] = o.Speed
	}
	if !IsNil(o.Thermal) {
		toSerialize["Thermal"] = o.Thermal
	}
	if !IsNil(o.Type) {
		toSerialize["Type"] = o.Type
	}
	if !IsNil(o.Visibility) {
		toSerialize["Visibility"] = o.Visibility
	}
	if !IsNil(o.Width) {
		toSerialize["Width"] = o.Width
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *MemoryAbstractUnit) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"ClassId",
		"ObjectType",
	}

	// defaultValueFuncMap captures the default values for required properties.
	// These values are used when required properties are missing from the payload.
	defaultValueFuncMap := map[string]func() interface{}{}
	var defaultValueApplied bool
	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			if _, ok := defaultValueFuncMap[requiredProperty]; ok {
				allProperties[requiredProperty] = defaultValueFuncMap[requiredProperty]()
				defaultValueApplied = true
			}
		}
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	if defaultValueApplied {
		data, err = json.Marshal(allProperties)
		if err != nil {
			return err
		}
	}
	type MemoryAbstractUnitWithoutEmbeddedStruct struct {
		// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data. The enum values provides the list of concrete types that can be instantiated from this abstract type.
		ClassId string `json:"ClassId"`
		// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property. The enum values provides the list of concrete types that can be instantiated from this abstract type.
		ObjectType string `json:"ObjectType"`
		// This represents the administrative state of the memory unit on a server.
		AdminState *string `json:"AdminState,omitempty"`
		// This represents the memory array to which the memory unit belongs to.
		ArrayId *int64 `json:"ArrayId,omitempty"`
		// This represents the memory bank of the memory unit on a server.
		Bank *int64 `json:"Bank,omitempty"`
		// This represents the memory capacity in MiB of the memory unit on a server.
		Capacity *string `json:"Capacity,omitempty"`
		// This represents the clock of the memory unit on a server.
		Clock *string `json:"Clock,omitempty"`
		// This represents the form factor of the memory unit on a server.
		FormFactor *string `json:"FormFactor,omitempty"`
		// This represents the latency of the memory unit on a server.
		Latency *string `json:"Latency,omitempty"`
		// This represents the location of the memory unit on a server.
		Location *string `json:"Location,omitempty"`
		// This represents the operational power state of the memory unit on a server.
		OperPowerState *string  `json:"OperPowerState,omitempty"`
		OperReason     []string `json:"OperReason,omitempty"`
		// This represents the operational state of the memory unit on a server.
		OperState *string `json:"OperState,omitempty"`
		// This represents the operability of the memory unit on a server.
		Operability *string `json:"Operability,omitempty"`
		// This represents the set of the memory unit on a server.
		Set *int64 `json:"Set,omitempty"`
		// This represents the speed of the memory unit on a server.
		Speed *string `json:"Speed,omitempty"`
		// This represents the thremal state of the memory unit on a server.
		Thermal *string `json:"Thermal,omitempty"`
		// This represents the memory type of the memory unit on a server.
		Type *string `json:"Type,omitempty"`
		// This represents the visibility of the memory unit on a server.
		Visibility *string `json:"Visibility,omitempty"`
		// This represents the width of the memory unit on a server.
		Width *string `json:"Width,omitempty"`
	}

	varMemoryAbstractUnitWithoutEmbeddedStruct := MemoryAbstractUnitWithoutEmbeddedStruct{}

	err = json.Unmarshal(data, &varMemoryAbstractUnitWithoutEmbeddedStruct)
	if err == nil {
		varMemoryAbstractUnit := _MemoryAbstractUnit{}
		varMemoryAbstractUnit.ClassId = varMemoryAbstractUnitWithoutEmbeddedStruct.ClassId
		varMemoryAbstractUnit.ObjectType = varMemoryAbstractUnitWithoutEmbeddedStruct.ObjectType
		varMemoryAbstractUnit.AdminState = varMemoryAbstractUnitWithoutEmbeddedStruct.AdminState
		varMemoryAbstractUnit.ArrayId = varMemoryAbstractUnitWithoutEmbeddedStruct.ArrayId
		varMemoryAbstractUnit.Bank = varMemoryAbstractUnitWithoutEmbeddedStruct.Bank
		varMemoryAbstractUnit.Capacity = varMemoryAbstractUnitWithoutEmbeddedStruct.Capacity
		varMemoryAbstractUnit.Clock = varMemoryAbstractUnitWithoutEmbeddedStruct.Clock
		varMemoryAbstractUnit.FormFactor = varMemoryAbstractUnitWithoutEmbeddedStruct.FormFactor
		varMemoryAbstractUnit.Latency = varMemoryAbstractUnitWithoutEmbeddedStruct.Latency
		varMemoryAbstractUnit.Location = varMemoryAbstractUnitWithoutEmbeddedStruct.Location
		varMemoryAbstractUnit.OperPowerState = varMemoryAbstractUnitWithoutEmbeddedStruct.OperPowerState
		varMemoryAbstractUnit.OperReason = varMemoryAbstractUnitWithoutEmbeddedStruct.OperReason
		varMemoryAbstractUnit.OperState = varMemoryAbstractUnitWithoutEmbeddedStruct.OperState
		varMemoryAbstractUnit.Operability = varMemoryAbstractUnitWithoutEmbeddedStruct.Operability
		varMemoryAbstractUnit.Set = varMemoryAbstractUnitWithoutEmbeddedStruct.Set
		varMemoryAbstractUnit.Speed = varMemoryAbstractUnitWithoutEmbeddedStruct.Speed
		varMemoryAbstractUnit.Thermal = varMemoryAbstractUnitWithoutEmbeddedStruct.Thermal
		varMemoryAbstractUnit.Type = varMemoryAbstractUnitWithoutEmbeddedStruct.Type
		varMemoryAbstractUnit.Visibility = varMemoryAbstractUnitWithoutEmbeddedStruct.Visibility
		varMemoryAbstractUnit.Width = varMemoryAbstractUnitWithoutEmbeddedStruct.Width
		*o = MemoryAbstractUnit(varMemoryAbstractUnit)
	} else {
		return err
	}

	varMemoryAbstractUnit := _MemoryAbstractUnit{}

	err = json.Unmarshal(data, &varMemoryAbstractUnit)
	if err == nil {
		o.EquipmentBase = varMemoryAbstractUnit.EquipmentBase
	} else {
		return err
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "ClassId")
		delete(additionalProperties, "ObjectType")
		delete(additionalProperties, "AdminState")
		delete(additionalProperties, "ArrayId")
		delete(additionalProperties, "Bank")
		delete(additionalProperties, "Capacity")
		delete(additionalProperties, "Clock")
		delete(additionalProperties, "FormFactor")
		delete(additionalProperties, "Latency")
		delete(additionalProperties, "Location")
		delete(additionalProperties, "OperPowerState")
		delete(additionalProperties, "OperReason")
		delete(additionalProperties, "OperState")
		delete(additionalProperties, "Operability")
		delete(additionalProperties, "Set")
		delete(additionalProperties, "Speed")
		delete(additionalProperties, "Thermal")
		delete(additionalProperties, "Type")
		delete(additionalProperties, "Visibility")
		delete(additionalProperties, "Width")

		// remove fields from embedded structs
		reflectEquipmentBase := reflect.ValueOf(o.EquipmentBase)
		for i := 0; i < reflectEquipmentBase.Type().NumField(); i++ {
			t := reflectEquipmentBase.Type().Field(i)

			if jsonTag := t.Tag.Get("json"); jsonTag != "" {
				fieldName := ""
				if commaIdx := strings.Index(jsonTag, ","); commaIdx > 0 {
					fieldName = jsonTag[:commaIdx]
				} else {
					fieldName = jsonTag
				}
				if fieldName != "AdditionalProperties" {
					delete(additionalProperties, fieldName)
				}
			}
		}

		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableMemoryAbstractUnit struct {
	value *MemoryAbstractUnit
	isSet bool
}

func (v NullableMemoryAbstractUnit) Get() *MemoryAbstractUnit {
	return v.value
}

func (v *NullableMemoryAbstractUnit) Set(val *MemoryAbstractUnit) {
	v.value = val
	v.isSet = true
}

func (v NullableMemoryAbstractUnit) IsSet() bool {
	return v.isSet
}

func (v *NullableMemoryAbstractUnit) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMemoryAbstractUnit(val *MemoryAbstractUnit) *NullableMemoryAbstractUnit {
	return &NullableMemoryAbstractUnit{value: val, isSet: true}
}

func (v NullableMemoryAbstractUnit) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMemoryAbstractUnit) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
