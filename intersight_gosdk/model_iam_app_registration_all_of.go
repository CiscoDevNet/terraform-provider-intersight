/*
Cisco Intersight

Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations. The Intersight OpenAPI document defines the complete set of properties that are returned in the HTTP response. From that perspective, a client can expect that no additional properties are returned, unless these properties are explicitly defined in the OpenAPI document. However, when a client uses an older version of the Intersight OpenAPI document, the server may send additional properties because the software is more recent than the client. In that case, the client may receive properties that it does not know about. Some generated SDKs perform a strict validation of the HTTP response body against the OpenAPI document.

API version: 1.0.11-16342
Contact: intersight@cisco.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package intersight

import (
	"encoding/json"
	"time"
)

// IamAppRegistrationAllOf Definition of the list of properties defined in 'iam.AppRegistration', excluding properties defined in parent classes.
type IamAppRegistrationAllOf struct {
	// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.
	ClassId string `json:"ClassId"`
	// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
	ObjectType string `json:"ObjectType"`
	// Used to trigger the enable or disable action on the App Registration. These actions change the status of an App Registration. * `enable` - Used to enable a disabled API key/App Registration. If the API key/App Registration is already expired, this action has no effect. * `disable` - Used to disable an active API key/App Registration. If the API key/App Registration is already expired, this action has no effect.
	AdminStatus *string `json:"AdminStatus,omitempty"`
	// A unique identifier for the OAuth2 client application. The client ID is auto-generated when the AppRegistration object is created.
	ClientId *string `json:"ClientId,omitempty"`
	// App Registration name specified by user.
	ClientName *string `json:"ClientName,omitempty"`
	// The OAuth2 client secret. The value of this property is generated when grantType includes 'client-credentials'. Otherwise, no client-secret is generated.
	ClientSecret *string `json:"ClientSecret,omitempty"`
	// The type of the OAuth2 client (public or confidential), as specified in https://tools.ietf.org/html/rfc6749#section-2.1. * `public` - Clients incapable of maintaining the confidentiality of their credentials.This includes clients executing on the device used by the resource owner,such as mobile applications, installed native application or a webbrowser-based application. * `confidential` - Clients capable of maintaining the confidentiality of their credentials.For example, this could be a client implemented on a secure server withrestricted access to the client credentials.To maintain the confidentiality of the OAuth2 credentials, two use cases areconsidered.1) The application is running as a service within Intersight. The application automatically   obtains the OAuth2 credentials when the application starts and the credentials are not   exposed to the end-user.   Because end-users (even account administrators) do not have access the OAuth2 credentials,   they cannot take the credentials with them when they leave their organization.2) The application is under the control of a \"trusted\" end-user. For example,   the end-user may create a native application running outside Intersight. The application   uses OAuth2 credentials to interact with the Intersight API. In that case, the Intersight   account administrator may generate OAuth2 credentials with a registered application   using \"client_credentials\" grant type.   In that case, the end-user is responsible for maintaining the confidentiality of the   OAuth2 credentials. If the end-user leaves the organization, you should revoke the   credentials and issue new Oauth2 credentials.Here is a possible workflow for handling OAuth2 tokens.1) User Alice (Intersight Account Administrator) logins to Intersight and deploys an Intersight   application that requires an OAuth2 token.2) Intersight automatically deploys the application. The application is assigned a OAuth2 token,   possibly linked to Alice. The application must NOT expose the OAuth2 secret to Alice, otherwise   Alice would be able to use the token after she leaves the company.3) The application can make API calls to Intersight using its assigned OAuth2 token. For example,   the application could make weekly scheduled API calls to Intersight.4) Separately, Alice may also get OAuth2 tokens that she can use to make API calls from the   Intersight SDK through the northbound API. In that case, Alice will get the associated OAuth2   secrets, but not the one assigned in step #2.5) Alice leaves the organization. The OAuth2 tokens assigned in step #2 must retain their validity   even after Alice has left the organization. Because the OAuth2 secrets were never shared with   Alice, there is no risk Alice can reuse the OAuth2 secrets.   On the other hand, the OAuth2 tokens assigned in step #4 must be invalidated because Alice had   the OAuth2 tokens in her possession.
	ClientType *string `json:"ClientType,omitempty"`
	// Description of the application.
	Description *string `json:"Description,omitempty"`
	// The expiration date of the App Registration which is set at the time of its creation. Its value can only be assigned a date that falls within the range determined by the maximum expiration time configured at the account level. The expiry date can be edited to be earlier or later, provided it stays within the designated expiry period. This period is determined by adding the 'startTime' property of the App Registration to the maximum expiry time configured at the account level.
	ExpiryDateTime *time.Time `json:"ExpiryDateTime,omitempty"`
	GrantTypes     []string   `json:"GrantTypes,omitempty"`
	// Used to mark the App Registration as a never-expiring App Registration.
	IsNeverExpiring *bool `json:"IsNeverExpiring,omitempty"`
	// The ip address from which the App Registration was last used.
	LastUsedIp *string `json:"LastUsedIp,omitempty"`
	// The time at which the App Registration was last used. It is updated every 24 hours.
	LastUsedTime *time.Time `json:"LastUsedTime,omitempty"`
	// The current status of the App Registration that dictates the validity of the app. * `enabled` - An API key/App Registration having enabled status can be used for API invocation. * `disabled` - An API key/App Registration having disabled status cannot be used for API invocation. * `expired` - An API key/App Registration having expired status cannot be used for API invocation as the expiration date has passed.
	OperStatus   *string  `json:"OperStatus,omitempty"`
	RedirectUris []string `json:"RedirectUris,omitempty"`
	// Set value to true to renew the client-secret. Applicable to client_credentials grant type.
	RenewClientSecret *bool    `json:"RenewClientSecret,omitempty"`
	ResponseTypes     []string `json:"ResponseTypes,omitempty"`
	// Used to perform revocation for tokens of AppRegistration. Updated only internally is case Revoke property come from UI with value true. On each request with OAuth2 access token the CreationTime of the OAuth2 token will be compared to RevokationTimestamp of the corresponding App Registration.
	RevocationTimestamp *time.Time `json:"RevocationTimestamp,omitempty"`
	// Used to trigger update the revocationTimestamp value. If UI sent updating request with the Revoke value is true, then update RevocationTimestamp.
	Revoke *bool `json:"Revoke,omitempty"`
	// Set to true if consent screen needs to be shown during the OAuth login process. Applicable only for public AppRegistrations, means only 'authorization_code' grantType. Note that consent screen will be shown on each login.
	ShowConsentScreen *bool `json:"ShowConsentScreen,omitempty"`
	// The timestamp at which an expiry date was first set on this app registration.  For expiring App Registrations, this field is same as the create time of the App Registration. For never-expiring App Registrations, this field is set initially to zero time value. If a never-expiry App Registration is later changed to have an expiration, the timestamp marking the start of this transition is recorded in this field.
	StartTime *time.Time              `json:"StartTime,omitempty"`
	Account   *IamAccountRelationship `json:"Account,omitempty"`
	// An array of relationships to iamOAuthToken resources.
	OauthTokens []IamOAuthTokenRelationship `json:"OauthTokens,omitempty"`
	Permission  *IamPermissionRelationship  `json:"Permission,omitempty"`
	// An array of relationships to iamRole resources.
	// Deprecated
	Roles                []IamRoleRelationship `json:"Roles,omitempty"`
	User                 *IamUserRelationship  `json:"User,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _IamAppRegistrationAllOf IamAppRegistrationAllOf

// NewIamAppRegistrationAllOf instantiates a new IamAppRegistrationAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIamAppRegistrationAllOf(classId string, objectType string) *IamAppRegistrationAllOf {
	this := IamAppRegistrationAllOf{}
	this.ClassId = classId
	this.ObjectType = objectType
	var adminStatus string = "enable"
	this.AdminStatus = &adminStatus
	var clientType string = "public"
	this.ClientType = &clientType
	var isNeverExpiring bool = false
	this.IsNeverExpiring = &isNeverExpiring
	var renewClientSecret bool = false
	this.RenewClientSecret = &renewClientSecret
	var revoke bool = false
	this.Revoke = &revoke
	var showConsentScreen bool = false
	this.ShowConsentScreen = &showConsentScreen
	return &this
}

// NewIamAppRegistrationAllOfWithDefaults instantiates a new IamAppRegistrationAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIamAppRegistrationAllOfWithDefaults() *IamAppRegistrationAllOf {
	this := IamAppRegistrationAllOf{}
	var classId string = "iam.AppRegistration"
	this.ClassId = classId
	var objectType string = "iam.AppRegistration"
	this.ObjectType = objectType
	var adminStatus string = "enable"
	this.AdminStatus = &adminStatus
	var clientType string = "public"
	this.ClientType = &clientType
	var isNeverExpiring bool = false
	this.IsNeverExpiring = &isNeverExpiring
	var renewClientSecret bool = false
	this.RenewClientSecret = &renewClientSecret
	var revoke bool = false
	this.Revoke = &revoke
	var showConsentScreen bool = false
	this.ShowConsentScreen = &showConsentScreen
	return &this
}

// GetClassId returns the ClassId field value
func (o *IamAppRegistrationAllOf) GetClassId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ClassId
}

// GetClassIdOk returns a tuple with the ClassId field value
// and a boolean to check if the value has been set.
func (o *IamAppRegistrationAllOf) GetClassIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ClassId, true
}

// SetClassId sets field value
func (o *IamAppRegistrationAllOf) SetClassId(v string) {
	o.ClassId = v
}

// GetObjectType returns the ObjectType field value
func (o *IamAppRegistrationAllOf) GetObjectType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ObjectType
}

// GetObjectTypeOk returns a tuple with the ObjectType field value
// and a boolean to check if the value has been set.
func (o *IamAppRegistrationAllOf) GetObjectTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ObjectType, true
}

// SetObjectType sets field value
func (o *IamAppRegistrationAllOf) SetObjectType(v string) {
	o.ObjectType = v
}

// GetAdminStatus returns the AdminStatus field value if set, zero value otherwise.
func (o *IamAppRegistrationAllOf) GetAdminStatus() string {
	if o == nil || o.AdminStatus == nil {
		var ret string
		return ret
	}
	return *o.AdminStatus
}

// GetAdminStatusOk returns a tuple with the AdminStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IamAppRegistrationAllOf) GetAdminStatusOk() (*string, bool) {
	if o == nil || o.AdminStatus == nil {
		return nil, false
	}
	return o.AdminStatus, true
}

// HasAdminStatus returns a boolean if a field has been set.
func (o *IamAppRegistrationAllOf) HasAdminStatus() bool {
	if o != nil && o.AdminStatus != nil {
		return true
	}

	return false
}

// SetAdminStatus gets a reference to the given string and assigns it to the AdminStatus field.
func (o *IamAppRegistrationAllOf) SetAdminStatus(v string) {
	o.AdminStatus = &v
}

// GetClientId returns the ClientId field value if set, zero value otherwise.
func (o *IamAppRegistrationAllOf) GetClientId() string {
	if o == nil || o.ClientId == nil {
		var ret string
		return ret
	}
	return *o.ClientId
}

// GetClientIdOk returns a tuple with the ClientId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IamAppRegistrationAllOf) GetClientIdOk() (*string, bool) {
	if o == nil || o.ClientId == nil {
		return nil, false
	}
	return o.ClientId, true
}

// HasClientId returns a boolean if a field has been set.
func (o *IamAppRegistrationAllOf) HasClientId() bool {
	if o != nil && o.ClientId != nil {
		return true
	}

	return false
}

// SetClientId gets a reference to the given string and assigns it to the ClientId field.
func (o *IamAppRegistrationAllOf) SetClientId(v string) {
	o.ClientId = &v
}

// GetClientName returns the ClientName field value if set, zero value otherwise.
func (o *IamAppRegistrationAllOf) GetClientName() string {
	if o == nil || o.ClientName == nil {
		var ret string
		return ret
	}
	return *o.ClientName
}

// GetClientNameOk returns a tuple with the ClientName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IamAppRegistrationAllOf) GetClientNameOk() (*string, bool) {
	if o == nil || o.ClientName == nil {
		return nil, false
	}
	return o.ClientName, true
}

// HasClientName returns a boolean if a field has been set.
func (o *IamAppRegistrationAllOf) HasClientName() bool {
	if o != nil && o.ClientName != nil {
		return true
	}

	return false
}

// SetClientName gets a reference to the given string and assigns it to the ClientName field.
func (o *IamAppRegistrationAllOf) SetClientName(v string) {
	o.ClientName = &v
}

// GetClientSecret returns the ClientSecret field value if set, zero value otherwise.
func (o *IamAppRegistrationAllOf) GetClientSecret() string {
	if o == nil || o.ClientSecret == nil {
		var ret string
		return ret
	}
	return *o.ClientSecret
}

// GetClientSecretOk returns a tuple with the ClientSecret field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IamAppRegistrationAllOf) GetClientSecretOk() (*string, bool) {
	if o == nil || o.ClientSecret == nil {
		return nil, false
	}
	return o.ClientSecret, true
}

// HasClientSecret returns a boolean if a field has been set.
func (o *IamAppRegistrationAllOf) HasClientSecret() bool {
	if o != nil && o.ClientSecret != nil {
		return true
	}

	return false
}

// SetClientSecret gets a reference to the given string and assigns it to the ClientSecret field.
func (o *IamAppRegistrationAllOf) SetClientSecret(v string) {
	o.ClientSecret = &v
}

// GetClientType returns the ClientType field value if set, zero value otherwise.
func (o *IamAppRegistrationAllOf) GetClientType() string {
	if o == nil || o.ClientType == nil {
		var ret string
		return ret
	}
	return *o.ClientType
}

// GetClientTypeOk returns a tuple with the ClientType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IamAppRegistrationAllOf) GetClientTypeOk() (*string, bool) {
	if o == nil || o.ClientType == nil {
		return nil, false
	}
	return o.ClientType, true
}

// HasClientType returns a boolean if a field has been set.
func (o *IamAppRegistrationAllOf) HasClientType() bool {
	if o != nil && o.ClientType != nil {
		return true
	}

	return false
}

// SetClientType gets a reference to the given string and assigns it to the ClientType field.
func (o *IamAppRegistrationAllOf) SetClientType(v string) {
	o.ClientType = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *IamAppRegistrationAllOf) GetDescription() string {
	if o == nil || o.Description == nil {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IamAppRegistrationAllOf) GetDescriptionOk() (*string, bool) {
	if o == nil || o.Description == nil {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *IamAppRegistrationAllOf) HasDescription() bool {
	if o != nil && o.Description != nil {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *IamAppRegistrationAllOf) SetDescription(v string) {
	o.Description = &v
}

// GetExpiryDateTime returns the ExpiryDateTime field value if set, zero value otherwise.
func (o *IamAppRegistrationAllOf) GetExpiryDateTime() time.Time {
	if o == nil || o.ExpiryDateTime == nil {
		var ret time.Time
		return ret
	}
	return *o.ExpiryDateTime
}

// GetExpiryDateTimeOk returns a tuple with the ExpiryDateTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IamAppRegistrationAllOf) GetExpiryDateTimeOk() (*time.Time, bool) {
	if o == nil || o.ExpiryDateTime == nil {
		return nil, false
	}
	return o.ExpiryDateTime, true
}

// HasExpiryDateTime returns a boolean if a field has been set.
func (o *IamAppRegistrationAllOf) HasExpiryDateTime() bool {
	if o != nil && o.ExpiryDateTime != nil {
		return true
	}

	return false
}

// SetExpiryDateTime gets a reference to the given time.Time and assigns it to the ExpiryDateTime field.
func (o *IamAppRegistrationAllOf) SetExpiryDateTime(v time.Time) {
	o.ExpiryDateTime = &v
}

// GetGrantTypes returns the GrantTypes field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IamAppRegistrationAllOf) GetGrantTypes() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.GrantTypes
}

// GetGrantTypesOk returns a tuple with the GrantTypes field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IamAppRegistrationAllOf) GetGrantTypesOk() ([]string, bool) {
	if o == nil || o.GrantTypes == nil {
		return nil, false
	}
	return o.GrantTypes, true
}

// HasGrantTypes returns a boolean if a field has been set.
func (o *IamAppRegistrationAllOf) HasGrantTypes() bool {
	if o != nil && o.GrantTypes != nil {
		return true
	}

	return false
}

// SetGrantTypes gets a reference to the given []string and assigns it to the GrantTypes field.
func (o *IamAppRegistrationAllOf) SetGrantTypes(v []string) {
	o.GrantTypes = v
}

// GetIsNeverExpiring returns the IsNeverExpiring field value if set, zero value otherwise.
func (o *IamAppRegistrationAllOf) GetIsNeverExpiring() bool {
	if o == nil || o.IsNeverExpiring == nil {
		var ret bool
		return ret
	}
	return *o.IsNeverExpiring
}

// GetIsNeverExpiringOk returns a tuple with the IsNeverExpiring field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IamAppRegistrationAllOf) GetIsNeverExpiringOk() (*bool, bool) {
	if o == nil || o.IsNeverExpiring == nil {
		return nil, false
	}
	return o.IsNeverExpiring, true
}

// HasIsNeverExpiring returns a boolean if a field has been set.
func (o *IamAppRegistrationAllOf) HasIsNeverExpiring() bool {
	if o != nil && o.IsNeverExpiring != nil {
		return true
	}

	return false
}

// SetIsNeverExpiring gets a reference to the given bool and assigns it to the IsNeverExpiring field.
func (o *IamAppRegistrationAllOf) SetIsNeverExpiring(v bool) {
	o.IsNeverExpiring = &v
}

// GetLastUsedIp returns the LastUsedIp field value if set, zero value otherwise.
func (o *IamAppRegistrationAllOf) GetLastUsedIp() string {
	if o == nil || o.LastUsedIp == nil {
		var ret string
		return ret
	}
	return *o.LastUsedIp
}

// GetLastUsedIpOk returns a tuple with the LastUsedIp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IamAppRegistrationAllOf) GetLastUsedIpOk() (*string, bool) {
	if o == nil || o.LastUsedIp == nil {
		return nil, false
	}
	return o.LastUsedIp, true
}

// HasLastUsedIp returns a boolean if a field has been set.
func (o *IamAppRegistrationAllOf) HasLastUsedIp() bool {
	if o != nil && o.LastUsedIp != nil {
		return true
	}

	return false
}

// SetLastUsedIp gets a reference to the given string and assigns it to the LastUsedIp field.
func (o *IamAppRegistrationAllOf) SetLastUsedIp(v string) {
	o.LastUsedIp = &v
}

// GetLastUsedTime returns the LastUsedTime field value if set, zero value otherwise.
func (o *IamAppRegistrationAllOf) GetLastUsedTime() time.Time {
	if o == nil || o.LastUsedTime == nil {
		var ret time.Time
		return ret
	}
	return *o.LastUsedTime
}

// GetLastUsedTimeOk returns a tuple with the LastUsedTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IamAppRegistrationAllOf) GetLastUsedTimeOk() (*time.Time, bool) {
	if o == nil || o.LastUsedTime == nil {
		return nil, false
	}
	return o.LastUsedTime, true
}

// HasLastUsedTime returns a boolean if a field has been set.
func (o *IamAppRegistrationAllOf) HasLastUsedTime() bool {
	if o != nil && o.LastUsedTime != nil {
		return true
	}

	return false
}

// SetLastUsedTime gets a reference to the given time.Time and assigns it to the LastUsedTime field.
func (o *IamAppRegistrationAllOf) SetLastUsedTime(v time.Time) {
	o.LastUsedTime = &v
}

// GetOperStatus returns the OperStatus field value if set, zero value otherwise.
func (o *IamAppRegistrationAllOf) GetOperStatus() string {
	if o == nil || o.OperStatus == nil {
		var ret string
		return ret
	}
	return *o.OperStatus
}

// GetOperStatusOk returns a tuple with the OperStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IamAppRegistrationAllOf) GetOperStatusOk() (*string, bool) {
	if o == nil || o.OperStatus == nil {
		return nil, false
	}
	return o.OperStatus, true
}

// HasOperStatus returns a boolean if a field has been set.
func (o *IamAppRegistrationAllOf) HasOperStatus() bool {
	if o != nil && o.OperStatus != nil {
		return true
	}

	return false
}

// SetOperStatus gets a reference to the given string and assigns it to the OperStatus field.
func (o *IamAppRegistrationAllOf) SetOperStatus(v string) {
	o.OperStatus = &v
}

// GetRedirectUris returns the RedirectUris field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IamAppRegistrationAllOf) GetRedirectUris() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.RedirectUris
}

// GetRedirectUrisOk returns a tuple with the RedirectUris field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IamAppRegistrationAllOf) GetRedirectUrisOk() ([]string, bool) {
	if o == nil || o.RedirectUris == nil {
		return nil, false
	}
	return o.RedirectUris, true
}

// HasRedirectUris returns a boolean if a field has been set.
func (o *IamAppRegistrationAllOf) HasRedirectUris() bool {
	if o != nil && o.RedirectUris != nil {
		return true
	}

	return false
}

// SetRedirectUris gets a reference to the given []string and assigns it to the RedirectUris field.
func (o *IamAppRegistrationAllOf) SetRedirectUris(v []string) {
	o.RedirectUris = v
}

// GetRenewClientSecret returns the RenewClientSecret field value if set, zero value otherwise.
func (o *IamAppRegistrationAllOf) GetRenewClientSecret() bool {
	if o == nil || o.RenewClientSecret == nil {
		var ret bool
		return ret
	}
	return *o.RenewClientSecret
}

// GetRenewClientSecretOk returns a tuple with the RenewClientSecret field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IamAppRegistrationAllOf) GetRenewClientSecretOk() (*bool, bool) {
	if o == nil || o.RenewClientSecret == nil {
		return nil, false
	}
	return o.RenewClientSecret, true
}

// HasRenewClientSecret returns a boolean if a field has been set.
func (o *IamAppRegistrationAllOf) HasRenewClientSecret() bool {
	if o != nil && o.RenewClientSecret != nil {
		return true
	}

	return false
}

// SetRenewClientSecret gets a reference to the given bool and assigns it to the RenewClientSecret field.
func (o *IamAppRegistrationAllOf) SetRenewClientSecret(v bool) {
	o.RenewClientSecret = &v
}

// GetResponseTypes returns the ResponseTypes field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IamAppRegistrationAllOf) GetResponseTypes() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.ResponseTypes
}

// GetResponseTypesOk returns a tuple with the ResponseTypes field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IamAppRegistrationAllOf) GetResponseTypesOk() ([]string, bool) {
	if o == nil || o.ResponseTypes == nil {
		return nil, false
	}
	return o.ResponseTypes, true
}

// HasResponseTypes returns a boolean if a field has been set.
func (o *IamAppRegistrationAllOf) HasResponseTypes() bool {
	if o != nil && o.ResponseTypes != nil {
		return true
	}

	return false
}

// SetResponseTypes gets a reference to the given []string and assigns it to the ResponseTypes field.
func (o *IamAppRegistrationAllOf) SetResponseTypes(v []string) {
	o.ResponseTypes = v
}

// GetRevocationTimestamp returns the RevocationTimestamp field value if set, zero value otherwise.
func (o *IamAppRegistrationAllOf) GetRevocationTimestamp() time.Time {
	if o == nil || o.RevocationTimestamp == nil {
		var ret time.Time
		return ret
	}
	return *o.RevocationTimestamp
}

// GetRevocationTimestampOk returns a tuple with the RevocationTimestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IamAppRegistrationAllOf) GetRevocationTimestampOk() (*time.Time, bool) {
	if o == nil || o.RevocationTimestamp == nil {
		return nil, false
	}
	return o.RevocationTimestamp, true
}

// HasRevocationTimestamp returns a boolean if a field has been set.
func (o *IamAppRegistrationAllOf) HasRevocationTimestamp() bool {
	if o != nil && o.RevocationTimestamp != nil {
		return true
	}

	return false
}

// SetRevocationTimestamp gets a reference to the given time.Time and assigns it to the RevocationTimestamp field.
func (o *IamAppRegistrationAllOf) SetRevocationTimestamp(v time.Time) {
	o.RevocationTimestamp = &v
}

// GetRevoke returns the Revoke field value if set, zero value otherwise.
func (o *IamAppRegistrationAllOf) GetRevoke() bool {
	if o == nil || o.Revoke == nil {
		var ret bool
		return ret
	}
	return *o.Revoke
}

// GetRevokeOk returns a tuple with the Revoke field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IamAppRegistrationAllOf) GetRevokeOk() (*bool, bool) {
	if o == nil || o.Revoke == nil {
		return nil, false
	}
	return o.Revoke, true
}

// HasRevoke returns a boolean if a field has been set.
func (o *IamAppRegistrationAllOf) HasRevoke() bool {
	if o != nil && o.Revoke != nil {
		return true
	}

	return false
}

// SetRevoke gets a reference to the given bool and assigns it to the Revoke field.
func (o *IamAppRegistrationAllOf) SetRevoke(v bool) {
	o.Revoke = &v
}

// GetShowConsentScreen returns the ShowConsentScreen field value if set, zero value otherwise.
func (o *IamAppRegistrationAllOf) GetShowConsentScreen() bool {
	if o == nil || o.ShowConsentScreen == nil {
		var ret bool
		return ret
	}
	return *o.ShowConsentScreen
}

// GetShowConsentScreenOk returns a tuple with the ShowConsentScreen field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IamAppRegistrationAllOf) GetShowConsentScreenOk() (*bool, bool) {
	if o == nil || o.ShowConsentScreen == nil {
		return nil, false
	}
	return o.ShowConsentScreen, true
}

// HasShowConsentScreen returns a boolean if a field has been set.
func (o *IamAppRegistrationAllOf) HasShowConsentScreen() bool {
	if o != nil && o.ShowConsentScreen != nil {
		return true
	}

	return false
}

// SetShowConsentScreen gets a reference to the given bool and assigns it to the ShowConsentScreen field.
func (o *IamAppRegistrationAllOf) SetShowConsentScreen(v bool) {
	o.ShowConsentScreen = &v
}

// GetStartTime returns the StartTime field value if set, zero value otherwise.
func (o *IamAppRegistrationAllOf) GetStartTime() time.Time {
	if o == nil || o.StartTime == nil {
		var ret time.Time
		return ret
	}
	return *o.StartTime
}

// GetStartTimeOk returns a tuple with the StartTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IamAppRegistrationAllOf) GetStartTimeOk() (*time.Time, bool) {
	if o == nil || o.StartTime == nil {
		return nil, false
	}
	return o.StartTime, true
}

// HasStartTime returns a boolean if a field has been set.
func (o *IamAppRegistrationAllOf) HasStartTime() bool {
	if o != nil && o.StartTime != nil {
		return true
	}

	return false
}

// SetStartTime gets a reference to the given time.Time and assigns it to the StartTime field.
func (o *IamAppRegistrationAllOf) SetStartTime(v time.Time) {
	o.StartTime = &v
}

// GetAccount returns the Account field value if set, zero value otherwise.
func (o *IamAppRegistrationAllOf) GetAccount() IamAccountRelationship {
	if o == nil || o.Account == nil {
		var ret IamAccountRelationship
		return ret
	}
	return *o.Account
}

// GetAccountOk returns a tuple with the Account field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IamAppRegistrationAllOf) GetAccountOk() (*IamAccountRelationship, bool) {
	if o == nil || o.Account == nil {
		return nil, false
	}
	return o.Account, true
}

// HasAccount returns a boolean if a field has been set.
func (o *IamAppRegistrationAllOf) HasAccount() bool {
	if o != nil && o.Account != nil {
		return true
	}

	return false
}

// SetAccount gets a reference to the given IamAccountRelationship and assigns it to the Account field.
func (o *IamAppRegistrationAllOf) SetAccount(v IamAccountRelationship) {
	o.Account = &v
}

// GetOauthTokens returns the OauthTokens field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IamAppRegistrationAllOf) GetOauthTokens() []IamOAuthTokenRelationship {
	if o == nil {
		var ret []IamOAuthTokenRelationship
		return ret
	}
	return o.OauthTokens
}

// GetOauthTokensOk returns a tuple with the OauthTokens field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IamAppRegistrationAllOf) GetOauthTokensOk() ([]IamOAuthTokenRelationship, bool) {
	if o == nil || o.OauthTokens == nil {
		return nil, false
	}
	return o.OauthTokens, true
}

// HasOauthTokens returns a boolean if a field has been set.
func (o *IamAppRegistrationAllOf) HasOauthTokens() bool {
	if o != nil && o.OauthTokens != nil {
		return true
	}

	return false
}

// SetOauthTokens gets a reference to the given []IamOAuthTokenRelationship and assigns it to the OauthTokens field.
func (o *IamAppRegistrationAllOf) SetOauthTokens(v []IamOAuthTokenRelationship) {
	o.OauthTokens = v
}

// GetPermission returns the Permission field value if set, zero value otherwise.
func (o *IamAppRegistrationAllOf) GetPermission() IamPermissionRelationship {
	if o == nil || o.Permission == nil {
		var ret IamPermissionRelationship
		return ret
	}
	return *o.Permission
}

// GetPermissionOk returns a tuple with the Permission field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IamAppRegistrationAllOf) GetPermissionOk() (*IamPermissionRelationship, bool) {
	if o == nil || o.Permission == nil {
		return nil, false
	}
	return o.Permission, true
}

// HasPermission returns a boolean if a field has been set.
func (o *IamAppRegistrationAllOf) HasPermission() bool {
	if o != nil && o.Permission != nil {
		return true
	}

	return false
}

// SetPermission gets a reference to the given IamPermissionRelationship and assigns it to the Permission field.
func (o *IamAppRegistrationAllOf) SetPermission(v IamPermissionRelationship) {
	o.Permission = &v
}

// GetRoles returns the Roles field value if set, zero value otherwise (both if not set or set to explicit null).
// Deprecated
func (o *IamAppRegistrationAllOf) GetRoles() []IamRoleRelationship {
	if o == nil {
		var ret []IamRoleRelationship
		return ret
	}
	return o.Roles
}

// GetRolesOk returns a tuple with the Roles field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
// Deprecated
func (o *IamAppRegistrationAllOf) GetRolesOk() ([]IamRoleRelationship, bool) {
	if o == nil || o.Roles == nil {
		return nil, false
	}
	return o.Roles, true
}

// HasRoles returns a boolean if a field has been set.
func (o *IamAppRegistrationAllOf) HasRoles() bool {
	if o != nil && o.Roles != nil {
		return true
	}

	return false
}

// SetRoles gets a reference to the given []IamRoleRelationship and assigns it to the Roles field.
// Deprecated
func (o *IamAppRegistrationAllOf) SetRoles(v []IamRoleRelationship) {
	o.Roles = v
}

// GetUser returns the User field value if set, zero value otherwise.
func (o *IamAppRegistrationAllOf) GetUser() IamUserRelationship {
	if o == nil || o.User == nil {
		var ret IamUserRelationship
		return ret
	}
	return *o.User
}

// GetUserOk returns a tuple with the User field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IamAppRegistrationAllOf) GetUserOk() (*IamUserRelationship, bool) {
	if o == nil || o.User == nil {
		return nil, false
	}
	return o.User, true
}

// HasUser returns a boolean if a field has been set.
func (o *IamAppRegistrationAllOf) HasUser() bool {
	if o != nil && o.User != nil {
		return true
	}

	return false
}

// SetUser gets a reference to the given IamUserRelationship and assigns it to the User field.
func (o *IamAppRegistrationAllOf) SetUser(v IamUserRelationship) {
	o.User = &v
}

func (o IamAppRegistrationAllOf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["ClassId"] = o.ClassId
	}
	if true {
		toSerialize["ObjectType"] = o.ObjectType
	}
	if o.AdminStatus != nil {
		toSerialize["AdminStatus"] = o.AdminStatus
	}
	if o.ClientId != nil {
		toSerialize["ClientId"] = o.ClientId
	}
	if o.ClientName != nil {
		toSerialize["ClientName"] = o.ClientName
	}
	if o.ClientSecret != nil {
		toSerialize["ClientSecret"] = o.ClientSecret
	}
	if o.ClientType != nil {
		toSerialize["ClientType"] = o.ClientType
	}
	if o.Description != nil {
		toSerialize["Description"] = o.Description
	}
	if o.ExpiryDateTime != nil {
		toSerialize["ExpiryDateTime"] = o.ExpiryDateTime
	}
	if o.GrantTypes != nil {
		toSerialize["GrantTypes"] = o.GrantTypes
	}
	if o.IsNeverExpiring != nil {
		toSerialize["IsNeverExpiring"] = o.IsNeverExpiring
	}
	if o.LastUsedIp != nil {
		toSerialize["LastUsedIp"] = o.LastUsedIp
	}
	if o.LastUsedTime != nil {
		toSerialize["LastUsedTime"] = o.LastUsedTime
	}
	if o.OperStatus != nil {
		toSerialize["OperStatus"] = o.OperStatus
	}
	if o.RedirectUris != nil {
		toSerialize["RedirectUris"] = o.RedirectUris
	}
	if o.RenewClientSecret != nil {
		toSerialize["RenewClientSecret"] = o.RenewClientSecret
	}
	if o.ResponseTypes != nil {
		toSerialize["ResponseTypes"] = o.ResponseTypes
	}
	if o.RevocationTimestamp != nil {
		toSerialize["RevocationTimestamp"] = o.RevocationTimestamp
	}
	if o.Revoke != nil {
		toSerialize["Revoke"] = o.Revoke
	}
	if o.ShowConsentScreen != nil {
		toSerialize["ShowConsentScreen"] = o.ShowConsentScreen
	}
	if o.StartTime != nil {
		toSerialize["StartTime"] = o.StartTime
	}
	if o.Account != nil {
		toSerialize["Account"] = o.Account
	}
	if o.OauthTokens != nil {
		toSerialize["OauthTokens"] = o.OauthTokens
	}
	if o.Permission != nil {
		toSerialize["Permission"] = o.Permission
	}
	if o.Roles != nil {
		toSerialize["Roles"] = o.Roles
	}
	if o.User != nil {
		toSerialize["User"] = o.User
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *IamAppRegistrationAllOf) UnmarshalJSON(bytes []byte) (err error) {
	varIamAppRegistrationAllOf := _IamAppRegistrationAllOf{}

	if err = json.Unmarshal(bytes, &varIamAppRegistrationAllOf); err == nil {
		*o = IamAppRegistrationAllOf(varIamAppRegistrationAllOf)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "ClassId")
		delete(additionalProperties, "ObjectType")
		delete(additionalProperties, "AdminStatus")
		delete(additionalProperties, "ClientId")
		delete(additionalProperties, "ClientName")
		delete(additionalProperties, "ClientSecret")
		delete(additionalProperties, "ClientType")
		delete(additionalProperties, "Description")
		delete(additionalProperties, "ExpiryDateTime")
		delete(additionalProperties, "GrantTypes")
		delete(additionalProperties, "IsNeverExpiring")
		delete(additionalProperties, "LastUsedIp")
		delete(additionalProperties, "LastUsedTime")
		delete(additionalProperties, "OperStatus")
		delete(additionalProperties, "RedirectUris")
		delete(additionalProperties, "RenewClientSecret")
		delete(additionalProperties, "ResponseTypes")
		delete(additionalProperties, "RevocationTimestamp")
		delete(additionalProperties, "Revoke")
		delete(additionalProperties, "ShowConsentScreen")
		delete(additionalProperties, "StartTime")
		delete(additionalProperties, "Account")
		delete(additionalProperties, "OauthTokens")
		delete(additionalProperties, "Permission")
		delete(additionalProperties, "Roles")
		delete(additionalProperties, "User")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableIamAppRegistrationAllOf struct {
	value *IamAppRegistrationAllOf
	isSet bool
}

func (v NullableIamAppRegistrationAllOf) Get() *IamAppRegistrationAllOf {
	return v.value
}

func (v *NullableIamAppRegistrationAllOf) Set(val *IamAppRegistrationAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableIamAppRegistrationAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableIamAppRegistrationAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIamAppRegistrationAllOf(val *IamAppRegistrationAllOf) *NullableIamAppRegistrationAllOf {
	return &NullableIamAppRegistrationAllOf{value: val, isSet: true}
}

func (v NullableIamAppRegistrationAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIamAppRegistrationAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
