/*
Cisco Intersight

Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations. The Intersight OpenAPI document defines the complete set of properties that are returned in the HTTP response. From that perspective, a client can expect that no additional properties are returned, unless these properties are explicitly defined in the OpenAPI document. However, when a client uses an older version of the Intersight OpenAPI document, the server may send additional properties because the software is more recent than the client. In that case, the client may receive properties that it does not know about. Some generated SDKs perform a strict validation of the HTTP response body against the OpenAPI document.

API version: 1.0.11-2024100405
Contact: intersight@cisco.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package intersight

import (
	"encoding/json"
	"fmt"
	"reflect"
	"strings"
	"time"
)

// checks if the SchedulerTaskSchedule type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SchedulerTaskSchedule{}

// SchedulerTaskSchedule Metadata used to schedule one-time or repeated tasks.
type SchedulerTaskSchedule struct {
	MoBaseMo
	// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.
	ClassId string `json:"ClassId"`
	// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
	ObjectType string `json:"ObjectType"`
	// The action of the scheduled task such as suspend or resume. * `None` - No action is set (default). * `Suspend` - Suspend a scheduled task indefinitely. * `Resume` - Resume a suspended scheduled task. * `SuspendTill` - Suspend the scheduled task until a specified end-date. Not supported in this release.
	Action *string `json:"Action,omitempty"`
	// A description to describe the schedule for easier identification.
	Description *string `json:"Description,omitempty"`
	// The last action for the scheduled task is saved in this field. Set to none if there was no action. * `None` - No action is set (default). * `Suspend` - Suspend a scheduled task indefinitely. * `Resume` - Resume a suspended scheduled task. * `SuspendTill` - Suspend the scheduled task until a specified end-date. Not supported in this release.
	LastAction *string `json:"LastAction,omitempty"`
	// A schedule name for easier identification (not required to be unique).
	Name           *string                             `json:"Name,omitempty"`
	ScheduleParams *SchedulerBaseScheduleParams        `json:"ScheduleParams,omitempty"`
	Status         NullableSchedulerTaskScheduleStatus `json:"Status,omitempty"`
	// Suspend a task until an end date. this applies only to the action suspendTill.
	SuspendEndTime *time.Time                    `json:"SuspendEndTime,omitempty"`
	TaskRequest    *SchedulerRestStimTaskRequest `json:"TaskRequest,omitempty"`
	// An Enum describing the type of scheduler to use. * `None` - No value was set for the schedule type (Enum value None). * `OneTime` - Define a one-time task execution time that will not automatically repeat. * `Recurring` - Specify a recurring task cadence based on a predefined pattern, such as daily, weekly, monthly, or every <interval> pattern.
	Type                 *string                                        `json:"Type,omitempty"`
	AssociatedObject     NullableMoBaseMoRelationship                   `json:"AssociatedObject,omitempty"`
	WorkflowDefinition   NullableWorkflowWorkflowDefinitionRelationship `json:"WorkflowDefinition,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _SchedulerTaskSchedule SchedulerTaskSchedule

// NewSchedulerTaskSchedule instantiates a new SchedulerTaskSchedule object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSchedulerTaskSchedule(classId string, objectType string) *SchedulerTaskSchedule {
	this := SchedulerTaskSchedule{}
	this.ClassId = classId
	this.ObjectType = objectType
	var action string = "None"
	this.Action = &action
	var type_ string = "None"
	this.Type = &type_
	return &this
}

// NewSchedulerTaskScheduleWithDefaults instantiates a new SchedulerTaskSchedule object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSchedulerTaskScheduleWithDefaults() *SchedulerTaskSchedule {
	this := SchedulerTaskSchedule{}
	var classId string = "scheduler.TaskSchedule"
	this.ClassId = classId
	var objectType string = "scheduler.TaskSchedule"
	this.ObjectType = objectType
	var action string = "None"
	this.Action = &action
	var type_ string = "None"
	this.Type = &type_
	return &this
}

// GetClassId returns the ClassId field value
func (o *SchedulerTaskSchedule) GetClassId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ClassId
}

// GetClassIdOk returns a tuple with the ClassId field value
// and a boolean to check if the value has been set.
func (o *SchedulerTaskSchedule) GetClassIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ClassId, true
}

// SetClassId sets field value
func (o *SchedulerTaskSchedule) SetClassId(v string) {
	o.ClassId = v
}

// GetDefaultClassId returns the default value "scheduler.TaskSchedule" of the ClassId field.
func (o *SchedulerTaskSchedule) GetDefaultClassId() interface{} {
	return "scheduler.TaskSchedule"
}

// GetObjectType returns the ObjectType field value
func (o *SchedulerTaskSchedule) GetObjectType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ObjectType
}

// GetObjectTypeOk returns a tuple with the ObjectType field value
// and a boolean to check if the value has been set.
func (o *SchedulerTaskSchedule) GetObjectTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ObjectType, true
}

// SetObjectType sets field value
func (o *SchedulerTaskSchedule) SetObjectType(v string) {
	o.ObjectType = v
}

// GetDefaultObjectType returns the default value "scheduler.TaskSchedule" of the ObjectType field.
func (o *SchedulerTaskSchedule) GetDefaultObjectType() interface{} {
	return "scheduler.TaskSchedule"
}

// GetAction returns the Action field value if set, zero value otherwise.
func (o *SchedulerTaskSchedule) GetAction() string {
	if o == nil || IsNil(o.Action) {
		var ret string
		return ret
	}
	return *o.Action
}

// GetActionOk returns a tuple with the Action field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchedulerTaskSchedule) GetActionOk() (*string, bool) {
	if o == nil || IsNil(o.Action) {
		return nil, false
	}
	return o.Action, true
}

// HasAction returns a boolean if a field has been set.
func (o *SchedulerTaskSchedule) HasAction() bool {
	if o != nil && !IsNil(o.Action) {
		return true
	}

	return false
}

// SetAction gets a reference to the given string and assigns it to the Action field.
func (o *SchedulerTaskSchedule) SetAction(v string) {
	o.Action = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *SchedulerTaskSchedule) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchedulerTaskSchedule) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *SchedulerTaskSchedule) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *SchedulerTaskSchedule) SetDescription(v string) {
	o.Description = &v
}

// GetLastAction returns the LastAction field value if set, zero value otherwise.
func (o *SchedulerTaskSchedule) GetLastAction() string {
	if o == nil || IsNil(o.LastAction) {
		var ret string
		return ret
	}
	return *o.LastAction
}

// GetLastActionOk returns a tuple with the LastAction field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchedulerTaskSchedule) GetLastActionOk() (*string, bool) {
	if o == nil || IsNil(o.LastAction) {
		return nil, false
	}
	return o.LastAction, true
}

// HasLastAction returns a boolean if a field has been set.
func (o *SchedulerTaskSchedule) HasLastAction() bool {
	if o != nil && !IsNil(o.LastAction) {
		return true
	}

	return false
}

// SetLastAction gets a reference to the given string and assigns it to the LastAction field.
func (o *SchedulerTaskSchedule) SetLastAction(v string) {
	o.LastAction = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *SchedulerTaskSchedule) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchedulerTaskSchedule) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *SchedulerTaskSchedule) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *SchedulerTaskSchedule) SetName(v string) {
	o.Name = &v
}

// GetScheduleParams returns the ScheduleParams field value if set, zero value otherwise.
func (o *SchedulerTaskSchedule) GetScheduleParams() SchedulerBaseScheduleParams {
	if o == nil || IsNil(o.ScheduleParams) {
		var ret SchedulerBaseScheduleParams
		return ret
	}
	return *o.ScheduleParams
}

// GetScheduleParamsOk returns a tuple with the ScheduleParams field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchedulerTaskSchedule) GetScheduleParamsOk() (*SchedulerBaseScheduleParams, bool) {
	if o == nil || IsNil(o.ScheduleParams) {
		return nil, false
	}
	return o.ScheduleParams, true
}

// HasScheduleParams returns a boolean if a field has been set.
func (o *SchedulerTaskSchedule) HasScheduleParams() bool {
	if o != nil && !IsNil(o.ScheduleParams) {
		return true
	}

	return false
}

// SetScheduleParams gets a reference to the given SchedulerBaseScheduleParams and assigns it to the ScheduleParams field.
func (o *SchedulerTaskSchedule) SetScheduleParams(v SchedulerBaseScheduleParams) {
	o.ScheduleParams = &v
}

// GetStatus returns the Status field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SchedulerTaskSchedule) GetStatus() SchedulerTaskScheduleStatus {
	if o == nil || IsNil(o.Status.Get()) {
		var ret SchedulerTaskScheduleStatus
		return ret
	}
	return *o.Status.Get()
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SchedulerTaskSchedule) GetStatusOk() (*SchedulerTaskScheduleStatus, bool) {
	if o == nil {
		return nil, false
	}
	return o.Status.Get(), o.Status.IsSet()
}

// HasStatus returns a boolean if a field has been set.
func (o *SchedulerTaskSchedule) HasStatus() bool {
	if o != nil && o.Status.IsSet() {
		return true
	}

	return false
}

// SetStatus gets a reference to the given NullableSchedulerTaskScheduleStatus and assigns it to the Status field.
func (o *SchedulerTaskSchedule) SetStatus(v SchedulerTaskScheduleStatus) {
	o.Status.Set(&v)
}

// SetStatusNil sets the value for Status to be an explicit nil
func (o *SchedulerTaskSchedule) SetStatusNil() {
	o.Status.Set(nil)
}

// UnsetStatus ensures that no value is present for Status, not even an explicit nil
func (o *SchedulerTaskSchedule) UnsetStatus() {
	o.Status.Unset()
}

// GetSuspendEndTime returns the SuspendEndTime field value if set, zero value otherwise.
func (o *SchedulerTaskSchedule) GetSuspendEndTime() time.Time {
	if o == nil || IsNil(o.SuspendEndTime) {
		var ret time.Time
		return ret
	}
	return *o.SuspendEndTime
}

// GetSuspendEndTimeOk returns a tuple with the SuspendEndTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchedulerTaskSchedule) GetSuspendEndTimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.SuspendEndTime) {
		return nil, false
	}
	return o.SuspendEndTime, true
}

// HasSuspendEndTime returns a boolean if a field has been set.
func (o *SchedulerTaskSchedule) HasSuspendEndTime() bool {
	if o != nil && !IsNil(o.SuspendEndTime) {
		return true
	}

	return false
}

// SetSuspendEndTime gets a reference to the given time.Time and assigns it to the SuspendEndTime field.
func (o *SchedulerTaskSchedule) SetSuspendEndTime(v time.Time) {
	o.SuspendEndTime = &v
}

// GetTaskRequest returns the TaskRequest field value if set, zero value otherwise.
func (o *SchedulerTaskSchedule) GetTaskRequest() SchedulerRestStimTaskRequest {
	if o == nil || IsNil(o.TaskRequest) {
		var ret SchedulerRestStimTaskRequest
		return ret
	}
	return *o.TaskRequest
}

// GetTaskRequestOk returns a tuple with the TaskRequest field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchedulerTaskSchedule) GetTaskRequestOk() (*SchedulerRestStimTaskRequest, bool) {
	if o == nil || IsNil(o.TaskRequest) {
		return nil, false
	}
	return o.TaskRequest, true
}

// HasTaskRequest returns a boolean if a field has been set.
func (o *SchedulerTaskSchedule) HasTaskRequest() bool {
	if o != nil && !IsNil(o.TaskRequest) {
		return true
	}

	return false
}

// SetTaskRequest gets a reference to the given SchedulerRestStimTaskRequest and assigns it to the TaskRequest field.
func (o *SchedulerTaskSchedule) SetTaskRequest(v SchedulerRestStimTaskRequest) {
	o.TaskRequest = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *SchedulerTaskSchedule) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchedulerTaskSchedule) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *SchedulerTaskSchedule) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *SchedulerTaskSchedule) SetType(v string) {
	o.Type = &v
}

// GetAssociatedObject returns the AssociatedObject field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SchedulerTaskSchedule) GetAssociatedObject() MoBaseMoRelationship {
	if o == nil || IsNil(o.AssociatedObject.Get()) {
		var ret MoBaseMoRelationship
		return ret
	}
	return *o.AssociatedObject.Get()
}

// GetAssociatedObjectOk returns a tuple with the AssociatedObject field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SchedulerTaskSchedule) GetAssociatedObjectOk() (*MoBaseMoRelationship, bool) {
	if o == nil {
		return nil, false
	}
	return o.AssociatedObject.Get(), o.AssociatedObject.IsSet()
}

// HasAssociatedObject returns a boolean if a field has been set.
func (o *SchedulerTaskSchedule) HasAssociatedObject() bool {
	if o != nil && o.AssociatedObject.IsSet() {
		return true
	}

	return false
}

// SetAssociatedObject gets a reference to the given NullableMoBaseMoRelationship and assigns it to the AssociatedObject field.
func (o *SchedulerTaskSchedule) SetAssociatedObject(v MoBaseMoRelationship) {
	o.AssociatedObject.Set(&v)
}

// SetAssociatedObjectNil sets the value for AssociatedObject to be an explicit nil
func (o *SchedulerTaskSchedule) SetAssociatedObjectNil() {
	o.AssociatedObject.Set(nil)
}

// UnsetAssociatedObject ensures that no value is present for AssociatedObject, not even an explicit nil
func (o *SchedulerTaskSchedule) UnsetAssociatedObject() {
	o.AssociatedObject.Unset()
}

// GetWorkflowDefinition returns the WorkflowDefinition field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SchedulerTaskSchedule) GetWorkflowDefinition() WorkflowWorkflowDefinitionRelationship {
	if o == nil || IsNil(o.WorkflowDefinition.Get()) {
		var ret WorkflowWorkflowDefinitionRelationship
		return ret
	}
	return *o.WorkflowDefinition.Get()
}

// GetWorkflowDefinitionOk returns a tuple with the WorkflowDefinition field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SchedulerTaskSchedule) GetWorkflowDefinitionOk() (*WorkflowWorkflowDefinitionRelationship, bool) {
	if o == nil {
		return nil, false
	}
	return o.WorkflowDefinition.Get(), o.WorkflowDefinition.IsSet()
}

// HasWorkflowDefinition returns a boolean if a field has been set.
func (o *SchedulerTaskSchedule) HasWorkflowDefinition() bool {
	if o != nil && o.WorkflowDefinition.IsSet() {
		return true
	}

	return false
}

// SetWorkflowDefinition gets a reference to the given NullableWorkflowWorkflowDefinitionRelationship and assigns it to the WorkflowDefinition field.
func (o *SchedulerTaskSchedule) SetWorkflowDefinition(v WorkflowWorkflowDefinitionRelationship) {
	o.WorkflowDefinition.Set(&v)
}

// SetWorkflowDefinitionNil sets the value for WorkflowDefinition to be an explicit nil
func (o *SchedulerTaskSchedule) SetWorkflowDefinitionNil() {
	o.WorkflowDefinition.Set(nil)
}

// UnsetWorkflowDefinition ensures that no value is present for WorkflowDefinition, not even an explicit nil
func (o *SchedulerTaskSchedule) UnsetWorkflowDefinition() {
	o.WorkflowDefinition.Unset()
}

func (o SchedulerTaskSchedule) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SchedulerTaskSchedule) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	serializedMoBaseMo, errMoBaseMo := json.Marshal(o.MoBaseMo)
	if errMoBaseMo != nil {
		return map[string]interface{}{}, errMoBaseMo
	}
	errMoBaseMo = json.Unmarshal([]byte(serializedMoBaseMo), &toSerialize)
	if errMoBaseMo != nil {
		return map[string]interface{}{}, errMoBaseMo
	}
	if _, exists := toSerialize["ClassId"]; !exists {
		toSerialize["ClassId"] = o.GetDefaultClassId()
	}
	toSerialize["ClassId"] = o.ClassId
	if _, exists := toSerialize["ObjectType"]; !exists {
		toSerialize["ObjectType"] = o.GetDefaultObjectType()
	}
	toSerialize["ObjectType"] = o.ObjectType
	if !IsNil(o.Action) {
		toSerialize["Action"] = o.Action
	}
	if !IsNil(o.Description) {
		toSerialize["Description"] = o.Description
	}
	if !IsNil(o.LastAction) {
		toSerialize["LastAction"] = o.LastAction
	}
	if !IsNil(o.Name) {
		toSerialize["Name"] = o.Name
	}
	if !IsNil(o.ScheduleParams) {
		toSerialize["ScheduleParams"] = o.ScheduleParams
	}
	if o.Status.IsSet() {
		toSerialize["Status"] = o.Status.Get()
	}
	if !IsNil(o.SuspendEndTime) {
		toSerialize["SuspendEndTime"] = o.SuspendEndTime
	}
	if !IsNil(o.TaskRequest) {
		toSerialize["TaskRequest"] = o.TaskRequest
	}
	if !IsNil(o.Type) {
		toSerialize["Type"] = o.Type
	}
	if o.AssociatedObject.IsSet() {
		toSerialize["AssociatedObject"] = o.AssociatedObject.Get()
	}
	if o.WorkflowDefinition.IsSet() {
		toSerialize["WorkflowDefinition"] = o.WorkflowDefinition.Get()
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *SchedulerTaskSchedule) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"ClassId",
		"ObjectType",
	}

	// defaultValueFuncMap captures the default values for required properties.
	// These values are used when required properties are missing from the payload.
	defaultValueFuncMap := map[string]func() interface{}{
		"ClassId":    o.GetDefaultClassId,
		"ObjectType": o.GetDefaultObjectType,
	}
	var defaultValueApplied bool
	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			if _, ok := defaultValueFuncMap[requiredProperty]; ok {
				allProperties[requiredProperty] = defaultValueFuncMap[requiredProperty]()
				defaultValueApplied = true
			}
		}
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	if defaultValueApplied {
		data, err = json.Marshal(allProperties)
		if err != nil {
			return err
		}
	}
	type SchedulerTaskScheduleWithoutEmbeddedStruct struct {
		// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.
		ClassId string `json:"ClassId"`
		// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
		ObjectType string `json:"ObjectType"`
		// The action of the scheduled task such as suspend or resume. * `None` - No action is set (default). * `Suspend` - Suspend a scheduled task indefinitely. * `Resume` - Resume a suspended scheduled task. * `SuspendTill` - Suspend the scheduled task until a specified end-date. Not supported in this release.
		Action *string `json:"Action,omitempty"`
		// A description to describe the schedule for easier identification.
		Description *string `json:"Description,omitempty"`
		// The last action for the scheduled task is saved in this field. Set to none if there was no action. * `None` - No action is set (default). * `Suspend` - Suspend a scheduled task indefinitely. * `Resume` - Resume a suspended scheduled task. * `SuspendTill` - Suspend the scheduled task until a specified end-date. Not supported in this release.
		LastAction *string `json:"LastAction,omitempty"`
		// A schedule name for easier identification (not required to be unique).
		Name           *string                             `json:"Name,omitempty"`
		ScheduleParams *SchedulerBaseScheduleParams        `json:"ScheduleParams,omitempty"`
		Status         NullableSchedulerTaskScheduleStatus `json:"Status,omitempty"`
		// Suspend a task until an end date. this applies only to the action suspendTill.
		SuspendEndTime *time.Time                    `json:"SuspendEndTime,omitempty"`
		TaskRequest    *SchedulerRestStimTaskRequest `json:"TaskRequest,omitempty"`
		// An Enum describing the type of scheduler to use. * `None` - No value was set for the schedule type (Enum value None). * `OneTime` - Define a one-time task execution time that will not automatically repeat. * `Recurring` - Specify a recurring task cadence based on a predefined pattern, such as daily, weekly, monthly, or every <interval> pattern.
		Type               *string                                        `json:"Type,omitempty"`
		AssociatedObject   NullableMoBaseMoRelationship                   `json:"AssociatedObject,omitempty"`
		WorkflowDefinition NullableWorkflowWorkflowDefinitionRelationship `json:"WorkflowDefinition,omitempty"`
	}

	varSchedulerTaskScheduleWithoutEmbeddedStruct := SchedulerTaskScheduleWithoutEmbeddedStruct{}

	err = json.Unmarshal(data, &varSchedulerTaskScheduleWithoutEmbeddedStruct)
	if err == nil {
		varSchedulerTaskSchedule := _SchedulerTaskSchedule{}
		varSchedulerTaskSchedule.ClassId = varSchedulerTaskScheduleWithoutEmbeddedStruct.ClassId
		varSchedulerTaskSchedule.ObjectType = varSchedulerTaskScheduleWithoutEmbeddedStruct.ObjectType
		varSchedulerTaskSchedule.Action = varSchedulerTaskScheduleWithoutEmbeddedStruct.Action
		varSchedulerTaskSchedule.Description = varSchedulerTaskScheduleWithoutEmbeddedStruct.Description
		varSchedulerTaskSchedule.LastAction = varSchedulerTaskScheduleWithoutEmbeddedStruct.LastAction
		varSchedulerTaskSchedule.Name = varSchedulerTaskScheduleWithoutEmbeddedStruct.Name
		varSchedulerTaskSchedule.ScheduleParams = varSchedulerTaskScheduleWithoutEmbeddedStruct.ScheduleParams
		varSchedulerTaskSchedule.Status = varSchedulerTaskScheduleWithoutEmbeddedStruct.Status
		varSchedulerTaskSchedule.SuspendEndTime = varSchedulerTaskScheduleWithoutEmbeddedStruct.SuspendEndTime
		varSchedulerTaskSchedule.TaskRequest = varSchedulerTaskScheduleWithoutEmbeddedStruct.TaskRequest
		varSchedulerTaskSchedule.Type = varSchedulerTaskScheduleWithoutEmbeddedStruct.Type
		varSchedulerTaskSchedule.AssociatedObject = varSchedulerTaskScheduleWithoutEmbeddedStruct.AssociatedObject
		varSchedulerTaskSchedule.WorkflowDefinition = varSchedulerTaskScheduleWithoutEmbeddedStruct.WorkflowDefinition
		*o = SchedulerTaskSchedule(varSchedulerTaskSchedule)
	} else {
		return err
	}

	varSchedulerTaskSchedule := _SchedulerTaskSchedule{}

	err = json.Unmarshal(data, &varSchedulerTaskSchedule)
	if err == nil {
		o.MoBaseMo = varSchedulerTaskSchedule.MoBaseMo
	} else {
		return err
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "ClassId")
		delete(additionalProperties, "ObjectType")
		delete(additionalProperties, "Action")
		delete(additionalProperties, "Description")
		delete(additionalProperties, "LastAction")
		delete(additionalProperties, "Name")
		delete(additionalProperties, "ScheduleParams")
		delete(additionalProperties, "Status")
		delete(additionalProperties, "SuspendEndTime")
		delete(additionalProperties, "TaskRequest")
		delete(additionalProperties, "Type")
		delete(additionalProperties, "AssociatedObject")
		delete(additionalProperties, "WorkflowDefinition")

		// remove fields from embedded structs
		reflectMoBaseMo := reflect.ValueOf(o.MoBaseMo)
		for i := 0; i < reflectMoBaseMo.Type().NumField(); i++ {
			t := reflectMoBaseMo.Type().Field(i)

			if jsonTag := t.Tag.Get("json"); jsonTag != "" {
				fieldName := ""
				if commaIdx := strings.Index(jsonTag, ","); commaIdx > 0 {
					fieldName = jsonTag[:commaIdx]
				} else {
					fieldName = jsonTag
				}
				if fieldName != "AdditionalProperties" {
					delete(additionalProperties, fieldName)
				}
			}
		}

		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableSchedulerTaskSchedule struct {
	value *SchedulerTaskSchedule
	isSet bool
}

func (v NullableSchedulerTaskSchedule) Get() *SchedulerTaskSchedule {
	return v.value
}

func (v *NullableSchedulerTaskSchedule) Set(val *SchedulerTaskSchedule) {
	v.value = val
	v.isSet = true
}

func (v NullableSchedulerTaskSchedule) IsSet() bool {
	return v.isSet
}

func (v *NullableSchedulerTaskSchedule) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSchedulerTaskSchedule(val *SchedulerTaskSchedule) *NullableSchedulerTaskSchedule {
	return &NullableSchedulerTaskSchedule{value: val, isSet: true}
}

func (v NullableSchedulerTaskSchedule) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSchedulerTaskSchedule) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
