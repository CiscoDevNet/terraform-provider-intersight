/*
Cisco Intersight

Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations. The Intersight OpenAPI document defines the complete set of properties that are returned in the HTTP response. From that perspective, a client can expect that no additional properties are returned, unless these properties are explicitly defined in the OpenAPI document. However, when a client uses an older version of the Intersight OpenAPI document, the server may send additional properties because the software is more recent than the client. In that case, the client may receive properties that it does not know about. Some generated SDKs perform a strict validation of the HTTP response body against the OpenAPI document.

API version: 1.0.11-18775
Contact: intersight@cisco.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package intersight

import (
	"encoding/json"
	"fmt"
	"reflect"
	"strings"
)

// checks if the NiatelemetryNiaInventoryDcnm type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NiatelemetryNiaInventoryDcnm{}

// NiatelemetryNiaInventoryDcnm Inventory Object available for DCNM-scoped attributes.
type NiatelemetryNiaInventoryDcnm struct {
	MoBaseMo
	// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.
	ClassId string `json:"ClassId"`
	// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
	ObjectType string `json:"ObjectType"`
	// Health of controller on DCNM.
	ControllerHealth *int64 `json:"ControllerHealth,omitempty"`
	// Returns the value of the dev Field.
	Dev *bool `json:"Dev,omitempty"`
	// Number of EPLD images uploaded to DCNM.
	EpldImageCount     *int64                    `json:"EpldImageCount,omitempty"`
	GoldenImageDetails []NiatelemetryImageDetail `json:"GoldenImageDetails,omitempty"`
	// Returns the value of the haEnabled field.
	HaEnabled *bool `json:"HaEnabled,omitempty"`
	// Returns the value of the haReplicationStatus field.
	HaReplicationStatus *string `json:"HaReplicationStatus,omitempty"`
	// Returns the value of the install field.
	Install *string `json:"Install,omitempty"`
	// Installation type of controller on DCNM.
	InstallationType *string `json:"InstallationType,omitempty"`
	// Installation type description of controller on DCNM.
	InstallationTypeDescription *string `json:"InstallationTypeDescription,omitempty"`
	// Returns true if ISN is configured.
	IsIsnConfigured *bool `json:"IsIsnConfigured,omitempty"`
	// Returns the value of the isMediaController field.
	IsMediaController *bool `json:"IsMediaController,omitempty"`
	// Returns true if the Smart license is enabled and is in use.
	IsSmartLicenseEnabled *bool `json:"IsSmartLicenseEnabled,omitempty"`
	// Mode of controller on DCNM.
	Mode *string `json:"Mode,omitempty"`
	// NDFC name information of the setup.
	NdfcFabricName *string `json:"NdfcFabricName,omitempty"`
	// NDFC status information for the setup.
	NdfcOperState *string                         `json:"NdfcOperState,omitempty"`
	NetworkInfo   NullableNiatelemetryNetworkInfo `json:"NetworkInfo,omitempty"`
	// Returns the number of DCNM site fabrics.
	NumDcnmSite *int64 `json:"NumDcnmSite,omitempty"`
	// Returns total number of fabrics in DCNM set-up.
	NumFabrics *int64 `json:"NumFabrics,omitempty"`
	// Returns the number of fabrics in msd.
	NumFabricsInMsd *int64 `json:"NumFabricsInMsd,omitempty"`
	// Returns the number of fabrics that have ingress replication type.
	NumIngressReplicationFabrics *int64 `json:"NumIngressReplicationFabrics,omitempty"`
	// Returns the number of local users other than admin user.
	NumLocalUsers *int64 `json:"NumLocalUsers,omitempty"`
	// Returns the number of MSD fabrics.
	NumMsd *int64 `json:"NumMsd,omitempty"`
	// Returns the number of svi interfaces configured for VRF vlans.
	NumSviVrfCount *int64 `json:"NumSviVrfCount,omitempty"`
	// Returns the number of links where TRM is enabled.
	NumTrmEnabledCount *int64 `json:"NumTrmEnabledCount,omitempty"`
	// Number of users who have upgrade privileges excluding the admin.
	NumUpgUsers *int64 `json:"NumUpgUsers,omitempty"`
	// Number of NXOS images uploaded to DCNM.
	NxosImageCount *int64 `json:"NxosImageCount,omitempty"`
	// Out of band IP of controller on DCNM.
	OutofbandIp *string `json:"OutofbandIp,omitempty"`
	// Type of record DCNM / APIC / SE. This determines the type of platform where inventory was collected.
	RecordType *string `json:"RecordType,omitempty"`
	// Version of record being pushed. This determines what was the API version for data available from the device.
	RecordVersion *string `json:"RecordVersion,omitempty"`
	// Serial number of device being inventoried. The serial number is unique per device.
	Serial *string `json:"Serial,omitempty"`
	// Name of fabric domain of the controller.
	SiteName *string `json:"SiteName,omitempty"`
	// Returns the number of underlay peering active links.
	UnderlayPeeringActiveLinksCount *int64 `json:"UnderlayPeeringActiveLinksCount,omitempty"`
	// Number of upgrade jobs configured on DCNM.
	UpgJobCount *int64                  `json:"UpgJobCount,omitempty"`
	UpgStatus   []NiatelemetryJobDetail `json:"UpgStatus,omitempty"`
	// Returns the value of the version field.
	Version              *string                                     `json:"Version,omitempty"`
	RegisteredDevice     NullableAssetDeviceRegistrationRelationship `json:"RegisteredDevice,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _NiatelemetryNiaInventoryDcnm NiatelemetryNiaInventoryDcnm

// NewNiatelemetryNiaInventoryDcnm instantiates a new NiatelemetryNiaInventoryDcnm object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNiatelemetryNiaInventoryDcnm(classId string, objectType string) *NiatelemetryNiaInventoryDcnm {
	this := NiatelemetryNiaInventoryDcnm{}
	this.ClassId = classId
	this.ObjectType = objectType
	return &this
}

// NewNiatelemetryNiaInventoryDcnmWithDefaults instantiates a new NiatelemetryNiaInventoryDcnm object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNiatelemetryNiaInventoryDcnmWithDefaults() *NiatelemetryNiaInventoryDcnm {
	this := NiatelemetryNiaInventoryDcnm{}
	var classId string = "niatelemetry.NiaInventoryDcnm"
	this.ClassId = classId
	var objectType string = "niatelemetry.NiaInventoryDcnm"
	this.ObjectType = objectType
	return &this
}

// GetClassId returns the ClassId field value
func (o *NiatelemetryNiaInventoryDcnm) GetClassId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ClassId
}

// GetClassIdOk returns a tuple with the ClassId field value
// and a boolean to check if the value has been set.
func (o *NiatelemetryNiaInventoryDcnm) GetClassIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ClassId, true
}

// SetClassId sets field value
func (o *NiatelemetryNiaInventoryDcnm) SetClassId(v string) {
	o.ClassId = v
}

// GetDefaultClassId returns the default value "niatelemetry.NiaInventoryDcnm" of the ClassId field.
func (o *NiatelemetryNiaInventoryDcnm) GetDefaultClassId() interface{} {
	return "niatelemetry.NiaInventoryDcnm"
}

// GetObjectType returns the ObjectType field value
func (o *NiatelemetryNiaInventoryDcnm) GetObjectType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ObjectType
}

// GetObjectTypeOk returns a tuple with the ObjectType field value
// and a boolean to check if the value has been set.
func (o *NiatelemetryNiaInventoryDcnm) GetObjectTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ObjectType, true
}

// SetObjectType sets field value
func (o *NiatelemetryNiaInventoryDcnm) SetObjectType(v string) {
	o.ObjectType = v
}

// GetDefaultObjectType returns the default value "niatelemetry.NiaInventoryDcnm" of the ObjectType field.
func (o *NiatelemetryNiaInventoryDcnm) GetDefaultObjectType() interface{} {
	return "niatelemetry.NiaInventoryDcnm"
}

// GetControllerHealth returns the ControllerHealth field value if set, zero value otherwise.
func (o *NiatelemetryNiaInventoryDcnm) GetControllerHealth() int64 {
	if o == nil || IsNil(o.ControllerHealth) {
		var ret int64
		return ret
	}
	return *o.ControllerHealth
}

// GetControllerHealthOk returns a tuple with the ControllerHealth field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NiatelemetryNiaInventoryDcnm) GetControllerHealthOk() (*int64, bool) {
	if o == nil || IsNil(o.ControllerHealth) {
		return nil, false
	}
	return o.ControllerHealth, true
}

// HasControllerHealth returns a boolean if a field has been set.
func (o *NiatelemetryNiaInventoryDcnm) HasControllerHealth() bool {
	if o != nil && !IsNil(o.ControllerHealth) {
		return true
	}

	return false
}

// SetControllerHealth gets a reference to the given int64 and assigns it to the ControllerHealth field.
func (o *NiatelemetryNiaInventoryDcnm) SetControllerHealth(v int64) {
	o.ControllerHealth = &v
}

// GetDev returns the Dev field value if set, zero value otherwise.
func (o *NiatelemetryNiaInventoryDcnm) GetDev() bool {
	if o == nil || IsNil(o.Dev) {
		var ret bool
		return ret
	}
	return *o.Dev
}

// GetDevOk returns a tuple with the Dev field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NiatelemetryNiaInventoryDcnm) GetDevOk() (*bool, bool) {
	if o == nil || IsNil(o.Dev) {
		return nil, false
	}
	return o.Dev, true
}

// HasDev returns a boolean if a field has been set.
func (o *NiatelemetryNiaInventoryDcnm) HasDev() bool {
	if o != nil && !IsNil(o.Dev) {
		return true
	}

	return false
}

// SetDev gets a reference to the given bool and assigns it to the Dev field.
func (o *NiatelemetryNiaInventoryDcnm) SetDev(v bool) {
	o.Dev = &v
}

// GetEpldImageCount returns the EpldImageCount field value if set, zero value otherwise.
func (o *NiatelemetryNiaInventoryDcnm) GetEpldImageCount() int64 {
	if o == nil || IsNil(o.EpldImageCount) {
		var ret int64
		return ret
	}
	return *o.EpldImageCount
}

// GetEpldImageCountOk returns a tuple with the EpldImageCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NiatelemetryNiaInventoryDcnm) GetEpldImageCountOk() (*int64, bool) {
	if o == nil || IsNil(o.EpldImageCount) {
		return nil, false
	}
	return o.EpldImageCount, true
}

// HasEpldImageCount returns a boolean if a field has been set.
func (o *NiatelemetryNiaInventoryDcnm) HasEpldImageCount() bool {
	if o != nil && !IsNil(o.EpldImageCount) {
		return true
	}

	return false
}

// SetEpldImageCount gets a reference to the given int64 and assigns it to the EpldImageCount field.
func (o *NiatelemetryNiaInventoryDcnm) SetEpldImageCount(v int64) {
	o.EpldImageCount = &v
}

// GetGoldenImageDetails returns the GoldenImageDetails field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NiatelemetryNiaInventoryDcnm) GetGoldenImageDetails() []NiatelemetryImageDetail {
	if o == nil {
		var ret []NiatelemetryImageDetail
		return ret
	}
	return o.GoldenImageDetails
}

// GetGoldenImageDetailsOk returns a tuple with the GoldenImageDetails field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NiatelemetryNiaInventoryDcnm) GetGoldenImageDetailsOk() ([]NiatelemetryImageDetail, bool) {
	if o == nil || IsNil(o.GoldenImageDetails) {
		return nil, false
	}
	return o.GoldenImageDetails, true
}

// HasGoldenImageDetails returns a boolean if a field has been set.
func (o *NiatelemetryNiaInventoryDcnm) HasGoldenImageDetails() bool {
	if o != nil && !IsNil(o.GoldenImageDetails) {
		return true
	}

	return false
}

// SetGoldenImageDetails gets a reference to the given []NiatelemetryImageDetail and assigns it to the GoldenImageDetails field.
func (o *NiatelemetryNiaInventoryDcnm) SetGoldenImageDetails(v []NiatelemetryImageDetail) {
	o.GoldenImageDetails = v
}

// GetHaEnabled returns the HaEnabled field value if set, zero value otherwise.
func (o *NiatelemetryNiaInventoryDcnm) GetHaEnabled() bool {
	if o == nil || IsNil(o.HaEnabled) {
		var ret bool
		return ret
	}
	return *o.HaEnabled
}

// GetHaEnabledOk returns a tuple with the HaEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NiatelemetryNiaInventoryDcnm) GetHaEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.HaEnabled) {
		return nil, false
	}
	return o.HaEnabled, true
}

// HasHaEnabled returns a boolean if a field has been set.
func (o *NiatelemetryNiaInventoryDcnm) HasHaEnabled() bool {
	if o != nil && !IsNil(o.HaEnabled) {
		return true
	}

	return false
}

// SetHaEnabled gets a reference to the given bool and assigns it to the HaEnabled field.
func (o *NiatelemetryNiaInventoryDcnm) SetHaEnabled(v bool) {
	o.HaEnabled = &v
}

// GetHaReplicationStatus returns the HaReplicationStatus field value if set, zero value otherwise.
func (o *NiatelemetryNiaInventoryDcnm) GetHaReplicationStatus() string {
	if o == nil || IsNil(o.HaReplicationStatus) {
		var ret string
		return ret
	}
	return *o.HaReplicationStatus
}

// GetHaReplicationStatusOk returns a tuple with the HaReplicationStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NiatelemetryNiaInventoryDcnm) GetHaReplicationStatusOk() (*string, bool) {
	if o == nil || IsNil(o.HaReplicationStatus) {
		return nil, false
	}
	return o.HaReplicationStatus, true
}

// HasHaReplicationStatus returns a boolean if a field has been set.
func (o *NiatelemetryNiaInventoryDcnm) HasHaReplicationStatus() bool {
	if o != nil && !IsNil(o.HaReplicationStatus) {
		return true
	}

	return false
}

// SetHaReplicationStatus gets a reference to the given string and assigns it to the HaReplicationStatus field.
func (o *NiatelemetryNiaInventoryDcnm) SetHaReplicationStatus(v string) {
	o.HaReplicationStatus = &v
}

// GetInstall returns the Install field value if set, zero value otherwise.
func (o *NiatelemetryNiaInventoryDcnm) GetInstall() string {
	if o == nil || IsNil(o.Install) {
		var ret string
		return ret
	}
	return *o.Install
}

// GetInstallOk returns a tuple with the Install field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NiatelemetryNiaInventoryDcnm) GetInstallOk() (*string, bool) {
	if o == nil || IsNil(o.Install) {
		return nil, false
	}
	return o.Install, true
}

// HasInstall returns a boolean if a field has been set.
func (o *NiatelemetryNiaInventoryDcnm) HasInstall() bool {
	if o != nil && !IsNil(o.Install) {
		return true
	}

	return false
}

// SetInstall gets a reference to the given string and assigns it to the Install field.
func (o *NiatelemetryNiaInventoryDcnm) SetInstall(v string) {
	o.Install = &v
}

// GetInstallationType returns the InstallationType field value if set, zero value otherwise.
func (o *NiatelemetryNiaInventoryDcnm) GetInstallationType() string {
	if o == nil || IsNil(o.InstallationType) {
		var ret string
		return ret
	}
	return *o.InstallationType
}

// GetInstallationTypeOk returns a tuple with the InstallationType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NiatelemetryNiaInventoryDcnm) GetInstallationTypeOk() (*string, bool) {
	if o == nil || IsNil(o.InstallationType) {
		return nil, false
	}
	return o.InstallationType, true
}

// HasInstallationType returns a boolean if a field has been set.
func (o *NiatelemetryNiaInventoryDcnm) HasInstallationType() bool {
	if o != nil && !IsNil(o.InstallationType) {
		return true
	}

	return false
}

// SetInstallationType gets a reference to the given string and assigns it to the InstallationType field.
func (o *NiatelemetryNiaInventoryDcnm) SetInstallationType(v string) {
	o.InstallationType = &v
}

// GetInstallationTypeDescription returns the InstallationTypeDescription field value if set, zero value otherwise.
func (o *NiatelemetryNiaInventoryDcnm) GetInstallationTypeDescription() string {
	if o == nil || IsNil(o.InstallationTypeDescription) {
		var ret string
		return ret
	}
	return *o.InstallationTypeDescription
}

// GetInstallationTypeDescriptionOk returns a tuple with the InstallationTypeDescription field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NiatelemetryNiaInventoryDcnm) GetInstallationTypeDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.InstallationTypeDescription) {
		return nil, false
	}
	return o.InstallationTypeDescription, true
}

// HasInstallationTypeDescription returns a boolean if a field has been set.
func (o *NiatelemetryNiaInventoryDcnm) HasInstallationTypeDescription() bool {
	if o != nil && !IsNil(o.InstallationTypeDescription) {
		return true
	}

	return false
}

// SetInstallationTypeDescription gets a reference to the given string and assigns it to the InstallationTypeDescription field.
func (o *NiatelemetryNiaInventoryDcnm) SetInstallationTypeDescription(v string) {
	o.InstallationTypeDescription = &v
}

// GetIsIsnConfigured returns the IsIsnConfigured field value if set, zero value otherwise.
func (o *NiatelemetryNiaInventoryDcnm) GetIsIsnConfigured() bool {
	if o == nil || IsNil(o.IsIsnConfigured) {
		var ret bool
		return ret
	}
	return *o.IsIsnConfigured
}

// GetIsIsnConfiguredOk returns a tuple with the IsIsnConfigured field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NiatelemetryNiaInventoryDcnm) GetIsIsnConfiguredOk() (*bool, bool) {
	if o == nil || IsNil(o.IsIsnConfigured) {
		return nil, false
	}
	return o.IsIsnConfigured, true
}

// HasIsIsnConfigured returns a boolean if a field has been set.
func (o *NiatelemetryNiaInventoryDcnm) HasIsIsnConfigured() bool {
	if o != nil && !IsNil(o.IsIsnConfigured) {
		return true
	}

	return false
}

// SetIsIsnConfigured gets a reference to the given bool and assigns it to the IsIsnConfigured field.
func (o *NiatelemetryNiaInventoryDcnm) SetIsIsnConfigured(v bool) {
	o.IsIsnConfigured = &v
}

// GetIsMediaController returns the IsMediaController field value if set, zero value otherwise.
func (o *NiatelemetryNiaInventoryDcnm) GetIsMediaController() bool {
	if o == nil || IsNil(o.IsMediaController) {
		var ret bool
		return ret
	}
	return *o.IsMediaController
}

// GetIsMediaControllerOk returns a tuple with the IsMediaController field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NiatelemetryNiaInventoryDcnm) GetIsMediaControllerOk() (*bool, bool) {
	if o == nil || IsNil(o.IsMediaController) {
		return nil, false
	}
	return o.IsMediaController, true
}

// HasIsMediaController returns a boolean if a field has been set.
func (o *NiatelemetryNiaInventoryDcnm) HasIsMediaController() bool {
	if o != nil && !IsNil(o.IsMediaController) {
		return true
	}

	return false
}

// SetIsMediaController gets a reference to the given bool and assigns it to the IsMediaController field.
func (o *NiatelemetryNiaInventoryDcnm) SetIsMediaController(v bool) {
	o.IsMediaController = &v
}

// GetIsSmartLicenseEnabled returns the IsSmartLicenseEnabled field value if set, zero value otherwise.
func (o *NiatelemetryNiaInventoryDcnm) GetIsSmartLicenseEnabled() bool {
	if o == nil || IsNil(o.IsSmartLicenseEnabled) {
		var ret bool
		return ret
	}
	return *o.IsSmartLicenseEnabled
}

// GetIsSmartLicenseEnabledOk returns a tuple with the IsSmartLicenseEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NiatelemetryNiaInventoryDcnm) GetIsSmartLicenseEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.IsSmartLicenseEnabled) {
		return nil, false
	}
	return o.IsSmartLicenseEnabled, true
}

// HasIsSmartLicenseEnabled returns a boolean if a field has been set.
func (o *NiatelemetryNiaInventoryDcnm) HasIsSmartLicenseEnabled() bool {
	if o != nil && !IsNil(o.IsSmartLicenseEnabled) {
		return true
	}

	return false
}

// SetIsSmartLicenseEnabled gets a reference to the given bool and assigns it to the IsSmartLicenseEnabled field.
func (o *NiatelemetryNiaInventoryDcnm) SetIsSmartLicenseEnabled(v bool) {
	o.IsSmartLicenseEnabled = &v
}

// GetMode returns the Mode field value if set, zero value otherwise.
func (o *NiatelemetryNiaInventoryDcnm) GetMode() string {
	if o == nil || IsNil(o.Mode) {
		var ret string
		return ret
	}
	return *o.Mode
}

// GetModeOk returns a tuple with the Mode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NiatelemetryNiaInventoryDcnm) GetModeOk() (*string, bool) {
	if o == nil || IsNil(o.Mode) {
		return nil, false
	}
	return o.Mode, true
}

// HasMode returns a boolean if a field has been set.
func (o *NiatelemetryNiaInventoryDcnm) HasMode() bool {
	if o != nil && !IsNil(o.Mode) {
		return true
	}

	return false
}

// SetMode gets a reference to the given string and assigns it to the Mode field.
func (o *NiatelemetryNiaInventoryDcnm) SetMode(v string) {
	o.Mode = &v
}

// GetNdfcFabricName returns the NdfcFabricName field value if set, zero value otherwise.
func (o *NiatelemetryNiaInventoryDcnm) GetNdfcFabricName() string {
	if o == nil || IsNil(o.NdfcFabricName) {
		var ret string
		return ret
	}
	return *o.NdfcFabricName
}

// GetNdfcFabricNameOk returns a tuple with the NdfcFabricName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NiatelemetryNiaInventoryDcnm) GetNdfcFabricNameOk() (*string, bool) {
	if o == nil || IsNil(o.NdfcFabricName) {
		return nil, false
	}
	return o.NdfcFabricName, true
}

// HasNdfcFabricName returns a boolean if a field has been set.
func (o *NiatelemetryNiaInventoryDcnm) HasNdfcFabricName() bool {
	if o != nil && !IsNil(o.NdfcFabricName) {
		return true
	}

	return false
}

// SetNdfcFabricName gets a reference to the given string and assigns it to the NdfcFabricName field.
func (o *NiatelemetryNiaInventoryDcnm) SetNdfcFabricName(v string) {
	o.NdfcFabricName = &v
}

// GetNdfcOperState returns the NdfcOperState field value if set, zero value otherwise.
func (o *NiatelemetryNiaInventoryDcnm) GetNdfcOperState() string {
	if o == nil || IsNil(o.NdfcOperState) {
		var ret string
		return ret
	}
	return *o.NdfcOperState
}

// GetNdfcOperStateOk returns a tuple with the NdfcOperState field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NiatelemetryNiaInventoryDcnm) GetNdfcOperStateOk() (*string, bool) {
	if o == nil || IsNil(o.NdfcOperState) {
		return nil, false
	}
	return o.NdfcOperState, true
}

// HasNdfcOperState returns a boolean if a field has been set.
func (o *NiatelemetryNiaInventoryDcnm) HasNdfcOperState() bool {
	if o != nil && !IsNil(o.NdfcOperState) {
		return true
	}

	return false
}

// SetNdfcOperState gets a reference to the given string and assigns it to the NdfcOperState field.
func (o *NiatelemetryNiaInventoryDcnm) SetNdfcOperState(v string) {
	o.NdfcOperState = &v
}

// GetNetworkInfo returns the NetworkInfo field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NiatelemetryNiaInventoryDcnm) GetNetworkInfo() NiatelemetryNetworkInfo {
	if o == nil || IsNil(o.NetworkInfo.Get()) {
		var ret NiatelemetryNetworkInfo
		return ret
	}
	return *o.NetworkInfo.Get()
}

// GetNetworkInfoOk returns a tuple with the NetworkInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NiatelemetryNiaInventoryDcnm) GetNetworkInfoOk() (*NiatelemetryNetworkInfo, bool) {
	if o == nil {
		return nil, false
	}
	return o.NetworkInfo.Get(), o.NetworkInfo.IsSet()
}

// HasNetworkInfo returns a boolean if a field has been set.
func (o *NiatelemetryNiaInventoryDcnm) HasNetworkInfo() bool {
	if o != nil && o.NetworkInfo.IsSet() {
		return true
	}

	return false
}

// SetNetworkInfo gets a reference to the given NullableNiatelemetryNetworkInfo and assigns it to the NetworkInfo field.
func (o *NiatelemetryNiaInventoryDcnm) SetNetworkInfo(v NiatelemetryNetworkInfo) {
	o.NetworkInfo.Set(&v)
}

// SetNetworkInfoNil sets the value for NetworkInfo to be an explicit nil
func (o *NiatelemetryNiaInventoryDcnm) SetNetworkInfoNil() {
	o.NetworkInfo.Set(nil)
}

// UnsetNetworkInfo ensures that no value is present for NetworkInfo, not even an explicit nil
func (o *NiatelemetryNiaInventoryDcnm) UnsetNetworkInfo() {
	o.NetworkInfo.Unset()
}

// GetNumDcnmSite returns the NumDcnmSite field value if set, zero value otherwise.
func (o *NiatelemetryNiaInventoryDcnm) GetNumDcnmSite() int64 {
	if o == nil || IsNil(o.NumDcnmSite) {
		var ret int64
		return ret
	}
	return *o.NumDcnmSite
}

// GetNumDcnmSiteOk returns a tuple with the NumDcnmSite field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NiatelemetryNiaInventoryDcnm) GetNumDcnmSiteOk() (*int64, bool) {
	if o == nil || IsNil(o.NumDcnmSite) {
		return nil, false
	}
	return o.NumDcnmSite, true
}

// HasNumDcnmSite returns a boolean if a field has been set.
func (o *NiatelemetryNiaInventoryDcnm) HasNumDcnmSite() bool {
	if o != nil && !IsNil(o.NumDcnmSite) {
		return true
	}

	return false
}

// SetNumDcnmSite gets a reference to the given int64 and assigns it to the NumDcnmSite field.
func (o *NiatelemetryNiaInventoryDcnm) SetNumDcnmSite(v int64) {
	o.NumDcnmSite = &v
}

// GetNumFabrics returns the NumFabrics field value if set, zero value otherwise.
func (o *NiatelemetryNiaInventoryDcnm) GetNumFabrics() int64 {
	if o == nil || IsNil(o.NumFabrics) {
		var ret int64
		return ret
	}
	return *o.NumFabrics
}

// GetNumFabricsOk returns a tuple with the NumFabrics field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NiatelemetryNiaInventoryDcnm) GetNumFabricsOk() (*int64, bool) {
	if o == nil || IsNil(o.NumFabrics) {
		return nil, false
	}
	return o.NumFabrics, true
}

// HasNumFabrics returns a boolean if a field has been set.
func (o *NiatelemetryNiaInventoryDcnm) HasNumFabrics() bool {
	if o != nil && !IsNil(o.NumFabrics) {
		return true
	}

	return false
}

// SetNumFabrics gets a reference to the given int64 and assigns it to the NumFabrics field.
func (o *NiatelemetryNiaInventoryDcnm) SetNumFabrics(v int64) {
	o.NumFabrics = &v
}

// GetNumFabricsInMsd returns the NumFabricsInMsd field value if set, zero value otherwise.
func (o *NiatelemetryNiaInventoryDcnm) GetNumFabricsInMsd() int64 {
	if o == nil || IsNil(o.NumFabricsInMsd) {
		var ret int64
		return ret
	}
	return *o.NumFabricsInMsd
}

// GetNumFabricsInMsdOk returns a tuple with the NumFabricsInMsd field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NiatelemetryNiaInventoryDcnm) GetNumFabricsInMsdOk() (*int64, bool) {
	if o == nil || IsNil(o.NumFabricsInMsd) {
		return nil, false
	}
	return o.NumFabricsInMsd, true
}

// HasNumFabricsInMsd returns a boolean if a field has been set.
func (o *NiatelemetryNiaInventoryDcnm) HasNumFabricsInMsd() bool {
	if o != nil && !IsNil(o.NumFabricsInMsd) {
		return true
	}

	return false
}

// SetNumFabricsInMsd gets a reference to the given int64 and assigns it to the NumFabricsInMsd field.
func (o *NiatelemetryNiaInventoryDcnm) SetNumFabricsInMsd(v int64) {
	o.NumFabricsInMsd = &v
}

// GetNumIngressReplicationFabrics returns the NumIngressReplicationFabrics field value if set, zero value otherwise.
func (o *NiatelemetryNiaInventoryDcnm) GetNumIngressReplicationFabrics() int64 {
	if o == nil || IsNil(o.NumIngressReplicationFabrics) {
		var ret int64
		return ret
	}
	return *o.NumIngressReplicationFabrics
}

// GetNumIngressReplicationFabricsOk returns a tuple with the NumIngressReplicationFabrics field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NiatelemetryNiaInventoryDcnm) GetNumIngressReplicationFabricsOk() (*int64, bool) {
	if o == nil || IsNil(o.NumIngressReplicationFabrics) {
		return nil, false
	}
	return o.NumIngressReplicationFabrics, true
}

// HasNumIngressReplicationFabrics returns a boolean if a field has been set.
func (o *NiatelemetryNiaInventoryDcnm) HasNumIngressReplicationFabrics() bool {
	if o != nil && !IsNil(o.NumIngressReplicationFabrics) {
		return true
	}

	return false
}

// SetNumIngressReplicationFabrics gets a reference to the given int64 and assigns it to the NumIngressReplicationFabrics field.
func (o *NiatelemetryNiaInventoryDcnm) SetNumIngressReplicationFabrics(v int64) {
	o.NumIngressReplicationFabrics = &v
}

// GetNumLocalUsers returns the NumLocalUsers field value if set, zero value otherwise.
func (o *NiatelemetryNiaInventoryDcnm) GetNumLocalUsers() int64 {
	if o == nil || IsNil(o.NumLocalUsers) {
		var ret int64
		return ret
	}
	return *o.NumLocalUsers
}

// GetNumLocalUsersOk returns a tuple with the NumLocalUsers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NiatelemetryNiaInventoryDcnm) GetNumLocalUsersOk() (*int64, bool) {
	if o == nil || IsNil(o.NumLocalUsers) {
		return nil, false
	}
	return o.NumLocalUsers, true
}

// HasNumLocalUsers returns a boolean if a field has been set.
func (o *NiatelemetryNiaInventoryDcnm) HasNumLocalUsers() bool {
	if o != nil && !IsNil(o.NumLocalUsers) {
		return true
	}

	return false
}

// SetNumLocalUsers gets a reference to the given int64 and assigns it to the NumLocalUsers field.
func (o *NiatelemetryNiaInventoryDcnm) SetNumLocalUsers(v int64) {
	o.NumLocalUsers = &v
}

// GetNumMsd returns the NumMsd field value if set, zero value otherwise.
func (o *NiatelemetryNiaInventoryDcnm) GetNumMsd() int64 {
	if o == nil || IsNil(o.NumMsd) {
		var ret int64
		return ret
	}
	return *o.NumMsd
}

// GetNumMsdOk returns a tuple with the NumMsd field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NiatelemetryNiaInventoryDcnm) GetNumMsdOk() (*int64, bool) {
	if o == nil || IsNil(o.NumMsd) {
		return nil, false
	}
	return o.NumMsd, true
}

// HasNumMsd returns a boolean if a field has been set.
func (o *NiatelemetryNiaInventoryDcnm) HasNumMsd() bool {
	if o != nil && !IsNil(o.NumMsd) {
		return true
	}

	return false
}

// SetNumMsd gets a reference to the given int64 and assigns it to the NumMsd field.
func (o *NiatelemetryNiaInventoryDcnm) SetNumMsd(v int64) {
	o.NumMsd = &v
}

// GetNumSviVrfCount returns the NumSviVrfCount field value if set, zero value otherwise.
func (o *NiatelemetryNiaInventoryDcnm) GetNumSviVrfCount() int64 {
	if o == nil || IsNil(o.NumSviVrfCount) {
		var ret int64
		return ret
	}
	return *o.NumSviVrfCount
}

// GetNumSviVrfCountOk returns a tuple with the NumSviVrfCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NiatelemetryNiaInventoryDcnm) GetNumSviVrfCountOk() (*int64, bool) {
	if o == nil || IsNil(o.NumSviVrfCount) {
		return nil, false
	}
	return o.NumSviVrfCount, true
}

// HasNumSviVrfCount returns a boolean if a field has been set.
func (o *NiatelemetryNiaInventoryDcnm) HasNumSviVrfCount() bool {
	if o != nil && !IsNil(o.NumSviVrfCount) {
		return true
	}

	return false
}

// SetNumSviVrfCount gets a reference to the given int64 and assigns it to the NumSviVrfCount field.
func (o *NiatelemetryNiaInventoryDcnm) SetNumSviVrfCount(v int64) {
	o.NumSviVrfCount = &v
}

// GetNumTrmEnabledCount returns the NumTrmEnabledCount field value if set, zero value otherwise.
func (o *NiatelemetryNiaInventoryDcnm) GetNumTrmEnabledCount() int64 {
	if o == nil || IsNil(o.NumTrmEnabledCount) {
		var ret int64
		return ret
	}
	return *o.NumTrmEnabledCount
}

// GetNumTrmEnabledCountOk returns a tuple with the NumTrmEnabledCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NiatelemetryNiaInventoryDcnm) GetNumTrmEnabledCountOk() (*int64, bool) {
	if o == nil || IsNil(o.NumTrmEnabledCount) {
		return nil, false
	}
	return o.NumTrmEnabledCount, true
}

// HasNumTrmEnabledCount returns a boolean if a field has been set.
func (o *NiatelemetryNiaInventoryDcnm) HasNumTrmEnabledCount() bool {
	if o != nil && !IsNil(o.NumTrmEnabledCount) {
		return true
	}

	return false
}

// SetNumTrmEnabledCount gets a reference to the given int64 and assigns it to the NumTrmEnabledCount field.
func (o *NiatelemetryNiaInventoryDcnm) SetNumTrmEnabledCount(v int64) {
	o.NumTrmEnabledCount = &v
}

// GetNumUpgUsers returns the NumUpgUsers field value if set, zero value otherwise.
func (o *NiatelemetryNiaInventoryDcnm) GetNumUpgUsers() int64 {
	if o == nil || IsNil(o.NumUpgUsers) {
		var ret int64
		return ret
	}
	return *o.NumUpgUsers
}

// GetNumUpgUsersOk returns a tuple with the NumUpgUsers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NiatelemetryNiaInventoryDcnm) GetNumUpgUsersOk() (*int64, bool) {
	if o == nil || IsNil(o.NumUpgUsers) {
		return nil, false
	}
	return o.NumUpgUsers, true
}

// HasNumUpgUsers returns a boolean if a field has been set.
func (o *NiatelemetryNiaInventoryDcnm) HasNumUpgUsers() bool {
	if o != nil && !IsNil(o.NumUpgUsers) {
		return true
	}

	return false
}

// SetNumUpgUsers gets a reference to the given int64 and assigns it to the NumUpgUsers field.
func (o *NiatelemetryNiaInventoryDcnm) SetNumUpgUsers(v int64) {
	o.NumUpgUsers = &v
}

// GetNxosImageCount returns the NxosImageCount field value if set, zero value otherwise.
func (o *NiatelemetryNiaInventoryDcnm) GetNxosImageCount() int64 {
	if o == nil || IsNil(o.NxosImageCount) {
		var ret int64
		return ret
	}
	return *o.NxosImageCount
}

// GetNxosImageCountOk returns a tuple with the NxosImageCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NiatelemetryNiaInventoryDcnm) GetNxosImageCountOk() (*int64, bool) {
	if o == nil || IsNil(o.NxosImageCount) {
		return nil, false
	}
	return o.NxosImageCount, true
}

// HasNxosImageCount returns a boolean if a field has been set.
func (o *NiatelemetryNiaInventoryDcnm) HasNxosImageCount() bool {
	if o != nil && !IsNil(o.NxosImageCount) {
		return true
	}

	return false
}

// SetNxosImageCount gets a reference to the given int64 and assigns it to the NxosImageCount field.
func (o *NiatelemetryNiaInventoryDcnm) SetNxosImageCount(v int64) {
	o.NxosImageCount = &v
}

// GetOutofbandIp returns the OutofbandIp field value if set, zero value otherwise.
func (o *NiatelemetryNiaInventoryDcnm) GetOutofbandIp() string {
	if o == nil || IsNil(o.OutofbandIp) {
		var ret string
		return ret
	}
	return *o.OutofbandIp
}

// GetOutofbandIpOk returns a tuple with the OutofbandIp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NiatelemetryNiaInventoryDcnm) GetOutofbandIpOk() (*string, bool) {
	if o == nil || IsNil(o.OutofbandIp) {
		return nil, false
	}
	return o.OutofbandIp, true
}

// HasOutofbandIp returns a boolean if a field has been set.
func (o *NiatelemetryNiaInventoryDcnm) HasOutofbandIp() bool {
	if o != nil && !IsNil(o.OutofbandIp) {
		return true
	}

	return false
}

// SetOutofbandIp gets a reference to the given string and assigns it to the OutofbandIp field.
func (o *NiatelemetryNiaInventoryDcnm) SetOutofbandIp(v string) {
	o.OutofbandIp = &v
}

// GetRecordType returns the RecordType field value if set, zero value otherwise.
func (o *NiatelemetryNiaInventoryDcnm) GetRecordType() string {
	if o == nil || IsNil(o.RecordType) {
		var ret string
		return ret
	}
	return *o.RecordType
}

// GetRecordTypeOk returns a tuple with the RecordType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NiatelemetryNiaInventoryDcnm) GetRecordTypeOk() (*string, bool) {
	if o == nil || IsNil(o.RecordType) {
		return nil, false
	}
	return o.RecordType, true
}

// HasRecordType returns a boolean if a field has been set.
func (o *NiatelemetryNiaInventoryDcnm) HasRecordType() bool {
	if o != nil && !IsNil(o.RecordType) {
		return true
	}

	return false
}

// SetRecordType gets a reference to the given string and assigns it to the RecordType field.
func (o *NiatelemetryNiaInventoryDcnm) SetRecordType(v string) {
	o.RecordType = &v
}

// GetRecordVersion returns the RecordVersion field value if set, zero value otherwise.
func (o *NiatelemetryNiaInventoryDcnm) GetRecordVersion() string {
	if o == nil || IsNil(o.RecordVersion) {
		var ret string
		return ret
	}
	return *o.RecordVersion
}

// GetRecordVersionOk returns a tuple with the RecordVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NiatelemetryNiaInventoryDcnm) GetRecordVersionOk() (*string, bool) {
	if o == nil || IsNil(o.RecordVersion) {
		return nil, false
	}
	return o.RecordVersion, true
}

// HasRecordVersion returns a boolean if a field has been set.
func (o *NiatelemetryNiaInventoryDcnm) HasRecordVersion() bool {
	if o != nil && !IsNil(o.RecordVersion) {
		return true
	}

	return false
}

// SetRecordVersion gets a reference to the given string and assigns it to the RecordVersion field.
func (o *NiatelemetryNiaInventoryDcnm) SetRecordVersion(v string) {
	o.RecordVersion = &v
}

// GetSerial returns the Serial field value if set, zero value otherwise.
func (o *NiatelemetryNiaInventoryDcnm) GetSerial() string {
	if o == nil || IsNil(o.Serial) {
		var ret string
		return ret
	}
	return *o.Serial
}

// GetSerialOk returns a tuple with the Serial field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NiatelemetryNiaInventoryDcnm) GetSerialOk() (*string, bool) {
	if o == nil || IsNil(o.Serial) {
		return nil, false
	}
	return o.Serial, true
}

// HasSerial returns a boolean if a field has been set.
func (o *NiatelemetryNiaInventoryDcnm) HasSerial() bool {
	if o != nil && !IsNil(o.Serial) {
		return true
	}

	return false
}

// SetSerial gets a reference to the given string and assigns it to the Serial field.
func (o *NiatelemetryNiaInventoryDcnm) SetSerial(v string) {
	o.Serial = &v
}

// GetSiteName returns the SiteName field value if set, zero value otherwise.
func (o *NiatelemetryNiaInventoryDcnm) GetSiteName() string {
	if o == nil || IsNil(o.SiteName) {
		var ret string
		return ret
	}
	return *o.SiteName
}

// GetSiteNameOk returns a tuple with the SiteName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NiatelemetryNiaInventoryDcnm) GetSiteNameOk() (*string, bool) {
	if o == nil || IsNil(o.SiteName) {
		return nil, false
	}
	return o.SiteName, true
}

// HasSiteName returns a boolean if a field has been set.
func (o *NiatelemetryNiaInventoryDcnm) HasSiteName() bool {
	if o != nil && !IsNil(o.SiteName) {
		return true
	}

	return false
}

// SetSiteName gets a reference to the given string and assigns it to the SiteName field.
func (o *NiatelemetryNiaInventoryDcnm) SetSiteName(v string) {
	o.SiteName = &v
}

// GetUnderlayPeeringActiveLinksCount returns the UnderlayPeeringActiveLinksCount field value if set, zero value otherwise.
func (o *NiatelemetryNiaInventoryDcnm) GetUnderlayPeeringActiveLinksCount() int64 {
	if o == nil || IsNil(o.UnderlayPeeringActiveLinksCount) {
		var ret int64
		return ret
	}
	return *o.UnderlayPeeringActiveLinksCount
}

// GetUnderlayPeeringActiveLinksCountOk returns a tuple with the UnderlayPeeringActiveLinksCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NiatelemetryNiaInventoryDcnm) GetUnderlayPeeringActiveLinksCountOk() (*int64, bool) {
	if o == nil || IsNil(o.UnderlayPeeringActiveLinksCount) {
		return nil, false
	}
	return o.UnderlayPeeringActiveLinksCount, true
}

// HasUnderlayPeeringActiveLinksCount returns a boolean if a field has been set.
func (o *NiatelemetryNiaInventoryDcnm) HasUnderlayPeeringActiveLinksCount() bool {
	if o != nil && !IsNil(o.UnderlayPeeringActiveLinksCount) {
		return true
	}

	return false
}

// SetUnderlayPeeringActiveLinksCount gets a reference to the given int64 and assigns it to the UnderlayPeeringActiveLinksCount field.
func (o *NiatelemetryNiaInventoryDcnm) SetUnderlayPeeringActiveLinksCount(v int64) {
	o.UnderlayPeeringActiveLinksCount = &v
}

// GetUpgJobCount returns the UpgJobCount field value if set, zero value otherwise.
func (o *NiatelemetryNiaInventoryDcnm) GetUpgJobCount() int64 {
	if o == nil || IsNil(o.UpgJobCount) {
		var ret int64
		return ret
	}
	return *o.UpgJobCount
}

// GetUpgJobCountOk returns a tuple with the UpgJobCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NiatelemetryNiaInventoryDcnm) GetUpgJobCountOk() (*int64, bool) {
	if o == nil || IsNil(o.UpgJobCount) {
		return nil, false
	}
	return o.UpgJobCount, true
}

// HasUpgJobCount returns a boolean if a field has been set.
func (o *NiatelemetryNiaInventoryDcnm) HasUpgJobCount() bool {
	if o != nil && !IsNil(o.UpgJobCount) {
		return true
	}

	return false
}

// SetUpgJobCount gets a reference to the given int64 and assigns it to the UpgJobCount field.
func (o *NiatelemetryNiaInventoryDcnm) SetUpgJobCount(v int64) {
	o.UpgJobCount = &v
}

// GetUpgStatus returns the UpgStatus field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NiatelemetryNiaInventoryDcnm) GetUpgStatus() []NiatelemetryJobDetail {
	if o == nil {
		var ret []NiatelemetryJobDetail
		return ret
	}
	return o.UpgStatus
}

// GetUpgStatusOk returns a tuple with the UpgStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NiatelemetryNiaInventoryDcnm) GetUpgStatusOk() ([]NiatelemetryJobDetail, bool) {
	if o == nil || IsNil(o.UpgStatus) {
		return nil, false
	}
	return o.UpgStatus, true
}

// HasUpgStatus returns a boolean if a field has been set.
func (o *NiatelemetryNiaInventoryDcnm) HasUpgStatus() bool {
	if o != nil && !IsNil(o.UpgStatus) {
		return true
	}

	return false
}

// SetUpgStatus gets a reference to the given []NiatelemetryJobDetail and assigns it to the UpgStatus field.
func (o *NiatelemetryNiaInventoryDcnm) SetUpgStatus(v []NiatelemetryJobDetail) {
	o.UpgStatus = v
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *NiatelemetryNiaInventoryDcnm) GetVersion() string {
	if o == nil || IsNil(o.Version) {
		var ret string
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NiatelemetryNiaInventoryDcnm) GetVersionOk() (*string, bool) {
	if o == nil || IsNil(o.Version) {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *NiatelemetryNiaInventoryDcnm) HasVersion() bool {
	if o != nil && !IsNil(o.Version) {
		return true
	}

	return false
}

// SetVersion gets a reference to the given string and assigns it to the Version field.
func (o *NiatelemetryNiaInventoryDcnm) SetVersion(v string) {
	o.Version = &v
}

// GetRegisteredDevice returns the RegisteredDevice field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NiatelemetryNiaInventoryDcnm) GetRegisteredDevice() AssetDeviceRegistrationRelationship {
	if o == nil || IsNil(o.RegisteredDevice.Get()) {
		var ret AssetDeviceRegistrationRelationship
		return ret
	}
	return *o.RegisteredDevice.Get()
}

// GetRegisteredDeviceOk returns a tuple with the RegisteredDevice field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NiatelemetryNiaInventoryDcnm) GetRegisteredDeviceOk() (*AssetDeviceRegistrationRelationship, bool) {
	if o == nil {
		return nil, false
	}
	return o.RegisteredDevice.Get(), o.RegisteredDevice.IsSet()
}

// HasRegisteredDevice returns a boolean if a field has been set.
func (o *NiatelemetryNiaInventoryDcnm) HasRegisteredDevice() bool {
	if o != nil && o.RegisteredDevice.IsSet() {
		return true
	}

	return false
}

// SetRegisteredDevice gets a reference to the given NullableAssetDeviceRegistrationRelationship and assigns it to the RegisteredDevice field.
func (o *NiatelemetryNiaInventoryDcnm) SetRegisteredDevice(v AssetDeviceRegistrationRelationship) {
	o.RegisteredDevice.Set(&v)
}

// SetRegisteredDeviceNil sets the value for RegisteredDevice to be an explicit nil
func (o *NiatelemetryNiaInventoryDcnm) SetRegisteredDeviceNil() {
	o.RegisteredDevice.Set(nil)
}

// UnsetRegisteredDevice ensures that no value is present for RegisteredDevice, not even an explicit nil
func (o *NiatelemetryNiaInventoryDcnm) UnsetRegisteredDevice() {
	o.RegisteredDevice.Unset()
}

func (o NiatelemetryNiaInventoryDcnm) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NiatelemetryNiaInventoryDcnm) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	serializedMoBaseMo, errMoBaseMo := json.Marshal(o.MoBaseMo)
	if errMoBaseMo != nil {
		return map[string]interface{}{}, errMoBaseMo
	}
	errMoBaseMo = json.Unmarshal([]byte(serializedMoBaseMo), &toSerialize)
	if errMoBaseMo != nil {
		return map[string]interface{}{}, errMoBaseMo
	}
	if _, exists := toSerialize["ClassId"]; !exists {
		toSerialize["ClassId"] = o.GetDefaultClassId()
	}
	toSerialize["ClassId"] = o.ClassId
	if _, exists := toSerialize["ObjectType"]; !exists {
		toSerialize["ObjectType"] = o.GetDefaultObjectType()
	}
	toSerialize["ObjectType"] = o.ObjectType
	if !IsNil(o.ControllerHealth) {
		toSerialize["ControllerHealth"] = o.ControllerHealth
	}
	if !IsNil(o.Dev) {
		toSerialize["Dev"] = o.Dev
	}
	if !IsNil(o.EpldImageCount) {
		toSerialize["EpldImageCount"] = o.EpldImageCount
	}
	if o.GoldenImageDetails != nil {
		toSerialize["GoldenImageDetails"] = o.GoldenImageDetails
	}
	if !IsNil(o.HaEnabled) {
		toSerialize["HaEnabled"] = o.HaEnabled
	}
	if !IsNil(o.HaReplicationStatus) {
		toSerialize["HaReplicationStatus"] = o.HaReplicationStatus
	}
	if !IsNil(o.Install) {
		toSerialize["Install"] = o.Install
	}
	if !IsNil(o.InstallationType) {
		toSerialize["InstallationType"] = o.InstallationType
	}
	if !IsNil(o.InstallationTypeDescription) {
		toSerialize["InstallationTypeDescription"] = o.InstallationTypeDescription
	}
	if !IsNil(o.IsIsnConfigured) {
		toSerialize["IsIsnConfigured"] = o.IsIsnConfigured
	}
	if !IsNil(o.IsMediaController) {
		toSerialize["IsMediaController"] = o.IsMediaController
	}
	if !IsNil(o.IsSmartLicenseEnabled) {
		toSerialize["IsSmartLicenseEnabled"] = o.IsSmartLicenseEnabled
	}
	if !IsNil(o.Mode) {
		toSerialize["Mode"] = o.Mode
	}
	if !IsNil(o.NdfcFabricName) {
		toSerialize["NdfcFabricName"] = o.NdfcFabricName
	}
	if !IsNil(o.NdfcOperState) {
		toSerialize["NdfcOperState"] = o.NdfcOperState
	}
	if o.NetworkInfo.IsSet() {
		toSerialize["NetworkInfo"] = o.NetworkInfo.Get()
	}
	if !IsNil(o.NumDcnmSite) {
		toSerialize["NumDcnmSite"] = o.NumDcnmSite
	}
	if !IsNil(o.NumFabrics) {
		toSerialize["NumFabrics"] = o.NumFabrics
	}
	if !IsNil(o.NumFabricsInMsd) {
		toSerialize["NumFabricsInMsd"] = o.NumFabricsInMsd
	}
	if !IsNil(o.NumIngressReplicationFabrics) {
		toSerialize["NumIngressReplicationFabrics"] = o.NumIngressReplicationFabrics
	}
	if !IsNil(o.NumLocalUsers) {
		toSerialize["NumLocalUsers"] = o.NumLocalUsers
	}
	if !IsNil(o.NumMsd) {
		toSerialize["NumMsd"] = o.NumMsd
	}
	if !IsNil(o.NumSviVrfCount) {
		toSerialize["NumSviVrfCount"] = o.NumSviVrfCount
	}
	if !IsNil(o.NumTrmEnabledCount) {
		toSerialize["NumTrmEnabledCount"] = o.NumTrmEnabledCount
	}
	if !IsNil(o.NumUpgUsers) {
		toSerialize["NumUpgUsers"] = o.NumUpgUsers
	}
	if !IsNil(o.NxosImageCount) {
		toSerialize["NxosImageCount"] = o.NxosImageCount
	}
	if !IsNil(o.OutofbandIp) {
		toSerialize["OutofbandIp"] = o.OutofbandIp
	}
	if !IsNil(o.RecordType) {
		toSerialize["RecordType"] = o.RecordType
	}
	if !IsNil(o.RecordVersion) {
		toSerialize["RecordVersion"] = o.RecordVersion
	}
	if !IsNil(o.Serial) {
		toSerialize["Serial"] = o.Serial
	}
	if !IsNil(o.SiteName) {
		toSerialize["SiteName"] = o.SiteName
	}
	if !IsNil(o.UnderlayPeeringActiveLinksCount) {
		toSerialize["UnderlayPeeringActiveLinksCount"] = o.UnderlayPeeringActiveLinksCount
	}
	if !IsNil(o.UpgJobCount) {
		toSerialize["UpgJobCount"] = o.UpgJobCount
	}
	if o.UpgStatus != nil {
		toSerialize["UpgStatus"] = o.UpgStatus
	}
	if !IsNil(o.Version) {
		toSerialize["Version"] = o.Version
	}
	if o.RegisteredDevice.IsSet() {
		toSerialize["RegisteredDevice"] = o.RegisteredDevice.Get()
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *NiatelemetryNiaInventoryDcnm) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"ClassId",
		"ObjectType",
	}

	// defaultValueFuncMap captures the default values for required properties.
	// These values are used when required properties are missing from the payload.
	defaultValueFuncMap := map[string]func() interface{}{
		"ClassId":    o.GetDefaultClassId,
		"ObjectType": o.GetDefaultObjectType,
	}
	var defaultValueApplied bool
	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			if _, ok := defaultValueFuncMap[requiredProperty]; ok {
				allProperties[requiredProperty] = defaultValueFuncMap[requiredProperty]()
				defaultValueApplied = true
			}
		}
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	if defaultValueApplied {
		data, err = json.Marshal(allProperties)
		if err != nil {
			return err
		}
	}
	type NiatelemetryNiaInventoryDcnmWithoutEmbeddedStruct struct {
		// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.
		ClassId string `json:"ClassId"`
		// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
		ObjectType string `json:"ObjectType"`
		// Health of controller on DCNM.
		ControllerHealth *int64 `json:"ControllerHealth,omitempty"`
		// Returns the value of the dev Field.
		Dev *bool `json:"Dev,omitempty"`
		// Number of EPLD images uploaded to DCNM.
		EpldImageCount     *int64                    `json:"EpldImageCount,omitempty"`
		GoldenImageDetails []NiatelemetryImageDetail `json:"GoldenImageDetails,omitempty"`
		// Returns the value of the haEnabled field.
		HaEnabled *bool `json:"HaEnabled,omitempty"`
		// Returns the value of the haReplicationStatus field.
		HaReplicationStatus *string `json:"HaReplicationStatus,omitempty"`
		// Returns the value of the install field.
		Install *string `json:"Install,omitempty"`
		// Installation type of controller on DCNM.
		InstallationType *string `json:"InstallationType,omitempty"`
		// Installation type description of controller on DCNM.
		InstallationTypeDescription *string `json:"InstallationTypeDescription,omitempty"`
		// Returns true if ISN is configured.
		IsIsnConfigured *bool `json:"IsIsnConfigured,omitempty"`
		// Returns the value of the isMediaController field.
		IsMediaController *bool `json:"IsMediaController,omitempty"`
		// Returns true if the Smart license is enabled and is in use.
		IsSmartLicenseEnabled *bool `json:"IsSmartLicenseEnabled,omitempty"`
		// Mode of controller on DCNM.
		Mode *string `json:"Mode,omitempty"`
		// NDFC name information of the setup.
		NdfcFabricName *string `json:"NdfcFabricName,omitempty"`
		// NDFC status information for the setup.
		NdfcOperState *string                         `json:"NdfcOperState,omitempty"`
		NetworkInfo   NullableNiatelemetryNetworkInfo `json:"NetworkInfo,omitempty"`
		// Returns the number of DCNM site fabrics.
		NumDcnmSite *int64 `json:"NumDcnmSite,omitempty"`
		// Returns total number of fabrics in DCNM set-up.
		NumFabrics *int64 `json:"NumFabrics,omitempty"`
		// Returns the number of fabrics in msd.
		NumFabricsInMsd *int64 `json:"NumFabricsInMsd,omitempty"`
		// Returns the number of fabrics that have ingress replication type.
		NumIngressReplicationFabrics *int64 `json:"NumIngressReplicationFabrics,omitempty"`
		// Returns the number of local users other than admin user.
		NumLocalUsers *int64 `json:"NumLocalUsers,omitempty"`
		// Returns the number of MSD fabrics.
		NumMsd *int64 `json:"NumMsd,omitempty"`
		// Returns the number of svi interfaces configured for VRF vlans.
		NumSviVrfCount *int64 `json:"NumSviVrfCount,omitempty"`
		// Returns the number of links where TRM is enabled.
		NumTrmEnabledCount *int64 `json:"NumTrmEnabledCount,omitempty"`
		// Number of users who have upgrade privileges excluding the admin.
		NumUpgUsers *int64 `json:"NumUpgUsers,omitempty"`
		// Number of NXOS images uploaded to DCNM.
		NxosImageCount *int64 `json:"NxosImageCount,omitempty"`
		// Out of band IP of controller on DCNM.
		OutofbandIp *string `json:"OutofbandIp,omitempty"`
		// Type of record DCNM / APIC / SE. This determines the type of platform where inventory was collected.
		RecordType *string `json:"RecordType,omitempty"`
		// Version of record being pushed. This determines what was the API version for data available from the device.
		RecordVersion *string `json:"RecordVersion,omitempty"`
		// Serial number of device being inventoried. The serial number is unique per device.
		Serial *string `json:"Serial,omitempty"`
		// Name of fabric domain of the controller.
		SiteName *string `json:"SiteName,omitempty"`
		// Returns the number of underlay peering active links.
		UnderlayPeeringActiveLinksCount *int64 `json:"UnderlayPeeringActiveLinksCount,omitempty"`
		// Number of upgrade jobs configured on DCNM.
		UpgJobCount *int64                  `json:"UpgJobCount,omitempty"`
		UpgStatus   []NiatelemetryJobDetail `json:"UpgStatus,omitempty"`
		// Returns the value of the version field.
		Version          *string                                     `json:"Version,omitempty"`
		RegisteredDevice NullableAssetDeviceRegistrationRelationship `json:"RegisteredDevice,omitempty"`
	}

	varNiatelemetryNiaInventoryDcnmWithoutEmbeddedStruct := NiatelemetryNiaInventoryDcnmWithoutEmbeddedStruct{}

	err = json.Unmarshal(data, &varNiatelemetryNiaInventoryDcnmWithoutEmbeddedStruct)
	if err == nil {
		varNiatelemetryNiaInventoryDcnm := _NiatelemetryNiaInventoryDcnm{}
		varNiatelemetryNiaInventoryDcnm.ClassId = varNiatelemetryNiaInventoryDcnmWithoutEmbeddedStruct.ClassId
		varNiatelemetryNiaInventoryDcnm.ObjectType = varNiatelemetryNiaInventoryDcnmWithoutEmbeddedStruct.ObjectType
		varNiatelemetryNiaInventoryDcnm.ControllerHealth = varNiatelemetryNiaInventoryDcnmWithoutEmbeddedStruct.ControllerHealth
		varNiatelemetryNiaInventoryDcnm.Dev = varNiatelemetryNiaInventoryDcnmWithoutEmbeddedStruct.Dev
		varNiatelemetryNiaInventoryDcnm.EpldImageCount = varNiatelemetryNiaInventoryDcnmWithoutEmbeddedStruct.EpldImageCount
		varNiatelemetryNiaInventoryDcnm.GoldenImageDetails = varNiatelemetryNiaInventoryDcnmWithoutEmbeddedStruct.GoldenImageDetails
		varNiatelemetryNiaInventoryDcnm.HaEnabled = varNiatelemetryNiaInventoryDcnmWithoutEmbeddedStruct.HaEnabled
		varNiatelemetryNiaInventoryDcnm.HaReplicationStatus = varNiatelemetryNiaInventoryDcnmWithoutEmbeddedStruct.HaReplicationStatus
		varNiatelemetryNiaInventoryDcnm.Install = varNiatelemetryNiaInventoryDcnmWithoutEmbeddedStruct.Install
		varNiatelemetryNiaInventoryDcnm.InstallationType = varNiatelemetryNiaInventoryDcnmWithoutEmbeddedStruct.InstallationType
		varNiatelemetryNiaInventoryDcnm.InstallationTypeDescription = varNiatelemetryNiaInventoryDcnmWithoutEmbeddedStruct.InstallationTypeDescription
		varNiatelemetryNiaInventoryDcnm.IsIsnConfigured = varNiatelemetryNiaInventoryDcnmWithoutEmbeddedStruct.IsIsnConfigured
		varNiatelemetryNiaInventoryDcnm.IsMediaController = varNiatelemetryNiaInventoryDcnmWithoutEmbeddedStruct.IsMediaController
		varNiatelemetryNiaInventoryDcnm.IsSmartLicenseEnabled = varNiatelemetryNiaInventoryDcnmWithoutEmbeddedStruct.IsSmartLicenseEnabled
		varNiatelemetryNiaInventoryDcnm.Mode = varNiatelemetryNiaInventoryDcnmWithoutEmbeddedStruct.Mode
		varNiatelemetryNiaInventoryDcnm.NdfcFabricName = varNiatelemetryNiaInventoryDcnmWithoutEmbeddedStruct.NdfcFabricName
		varNiatelemetryNiaInventoryDcnm.NdfcOperState = varNiatelemetryNiaInventoryDcnmWithoutEmbeddedStruct.NdfcOperState
		varNiatelemetryNiaInventoryDcnm.NetworkInfo = varNiatelemetryNiaInventoryDcnmWithoutEmbeddedStruct.NetworkInfo
		varNiatelemetryNiaInventoryDcnm.NumDcnmSite = varNiatelemetryNiaInventoryDcnmWithoutEmbeddedStruct.NumDcnmSite
		varNiatelemetryNiaInventoryDcnm.NumFabrics = varNiatelemetryNiaInventoryDcnmWithoutEmbeddedStruct.NumFabrics
		varNiatelemetryNiaInventoryDcnm.NumFabricsInMsd = varNiatelemetryNiaInventoryDcnmWithoutEmbeddedStruct.NumFabricsInMsd
		varNiatelemetryNiaInventoryDcnm.NumIngressReplicationFabrics = varNiatelemetryNiaInventoryDcnmWithoutEmbeddedStruct.NumIngressReplicationFabrics
		varNiatelemetryNiaInventoryDcnm.NumLocalUsers = varNiatelemetryNiaInventoryDcnmWithoutEmbeddedStruct.NumLocalUsers
		varNiatelemetryNiaInventoryDcnm.NumMsd = varNiatelemetryNiaInventoryDcnmWithoutEmbeddedStruct.NumMsd
		varNiatelemetryNiaInventoryDcnm.NumSviVrfCount = varNiatelemetryNiaInventoryDcnmWithoutEmbeddedStruct.NumSviVrfCount
		varNiatelemetryNiaInventoryDcnm.NumTrmEnabledCount = varNiatelemetryNiaInventoryDcnmWithoutEmbeddedStruct.NumTrmEnabledCount
		varNiatelemetryNiaInventoryDcnm.NumUpgUsers = varNiatelemetryNiaInventoryDcnmWithoutEmbeddedStruct.NumUpgUsers
		varNiatelemetryNiaInventoryDcnm.NxosImageCount = varNiatelemetryNiaInventoryDcnmWithoutEmbeddedStruct.NxosImageCount
		varNiatelemetryNiaInventoryDcnm.OutofbandIp = varNiatelemetryNiaInventoryDcnmWithoutEmbeddedStruct.OutofbandIp
		varNiatelemetryNiaInventoryDcnm.RecordType = varNiatelemetryNiaInventoryDcnmWithoutEmbeddedStruct.RecordType
		varNiatelemetryNiaInventoryDcnm.RecordVersion = varNiatelemetryNiaInventoryDcnmWithoutEmbeddedStruct.RecordVersion
		varNiatelemetryNiaInventoryDcnm.Serial = varNiatelemetryNiaInventoryDcnmWithoutEmbeddedStruct.Serial
		varNiatelemetryNiaInventoryDcnm.SiteName = varNiatelemetryNiaInventoryDcnmWithoutEmbeddedStruct.SiteName
		varNiatelemetryNiaInventoryDcnm.UnderlayPeeringActiveLinksCount = varNiatelemetryNiaInventoryDcnmWithoutEmbeddedStruct.UnderlayPeeringActiveLinksCount
		varNiatelemetryNiaInventoryDcnm.UpgJobCount = varNiatelemetryNiaInventoryDcnmWithoutEmbeddedStruct.UpgJobCount
		varNiatelemetryNiaInventoryDcnm.UpgStatus = varNiatelemetryNiaInventoryDcnmWithoutEmbeddedStruct.UpgStatus
		varNiatelemetryNiaInventoryDcnm.Version = varNiatelemetryNiaInventoryDcnmWithoutEmbeddedStruct.Version
		varNiatelemetryNiaInventoryDcnm.RegisteredDevice = varNiatelemetryNiaInventoryDcnmWithoutEmbeddedStruct.RegisteredDevice
		*o = NiatelemetryNiaInventoryDcnm(varNiatelemetryNiaInventoryDcnm)
	} else {
		return err
	}

	varNiatelemetryNiaInventoryDcnm := _NiatelemetryNiaInventoryDcnm{}

	err = json.Unmarshal(data, &varNiatelemetryNiaInventoryDcnm)
	if err == nil {
		o.MoBaseMo = varNiatelemetryNiaInventoryDcnm.MoBaseMo
	} else {
		return err
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "ClassId")
		delete(additionalProperties, "ObjectType")
		delete(additionalProperties, "ControllerHealth")
		delete(additionalProperties, "Dev")
		delete(additionalProperties, "EpldImageCount")
		delete(additionalProperties, "GoldenImageDetails")
		delete(additionalProperties, "HaEnabled")
		delete(additionalProperties, "HaReplicationStatus")
		delete(additionalProperties, "Install")
		delete(additionalProperties, "InstallationType")
		delete(additionalProperties, "InstallationTypeDescription")
		delete(additionalProperties, "IsIsnConfigured")
		delete(additionalProperties, "IsMediaController")
		delete(additionalProperties, "IsSmartLicenseEnabled")
		delete(additionalProperties, "Mode")
		delete(additionalProperties, "NdfcFabricName")
		delete(additionalProperties, "NdfcOperState")
		delete(additionalProperties, "NetworkInfo")
		delete(additionalProperties, "NumDcnmSite")
		delete(additionalProperties, "NumFabrics")
		delete(additionalProperties, "NumFabricsInMsd")
		delete(additionalProperties, "NumIngressReplicationFabrics")
		delete(additionalProperties, "NumLocalUsers")
		delete(additionalProperties, "NumMsd")
		delete(additionalProperties, "NumSviVrfCount")
		delete(additionalProperties, "NumTrmEnabledCount")
		delete(additionalProperties, "NumUpgUsers")
		delete(additionalProperties, "NxosImageCount")
		delete(additionalProperties, "OutofbandIp")
		delete(additionalProperties, "RecordType")
		delete(additionalProperties, "RecordVersion")
		delete(additionalProperties, "Serial")
		delete(additionalProperties, "SiteName")
		delete(additionalProperties, "UnderlayPeeringActiveLinksCount")
		delete(additionalProperties, "UpgJobCount")
		delete(additionalProperties, "UpgStatus")
		delete(additionalProperties, "Version")
		delete(additionalProperties, "RegisteredDevice")

		// remove fields from embedded structs
		reflectMoBaseMo := reflect.ValueOf(o.MoBaseMo)
		for i := 0; i < reflectMoBaseMo.Type().NumField(); i++ {
			t := reflectMoBaseMo.Type().Field(i)

			if jsonTag := t.Tag.Get("json"); jsonTag != "" {
				fieldName := ""
				if commaIdx := strings.Index(jsonTag, ","); commaIdx > 0 {
					fieldName = jsonTag[:commaIdx]
				} else {
					fieldName = jsonTag
				}
				if fieldName != "AdditionalProperties" {
					delete(additionalProperties, fieldName)
				}
			}
		}

		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableNiatelemetryNiaInventoryDcnm struct {
	value *NiatelemetryNiaInventoryDcnm
	isSet bool
}

func (v NullableNiatelemetryNiaInventoryDcnm) Get() *NiatelemetryNiaInventoryDcnm {
	return v.value
}

func (v *NullableNiatelemetryNiaInventoryDcnm) Set(val *NiatelemetryNiaInventoryDcnm) {
	v.value = val
	v.isSet = true
}

func (v NullableNiatelemetryNiaInventoryDcnm) IsSet() bool {
	return v.isSet
}

func (v *NullableNiatelemetryNiaInventoryDcnm) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNiatelemetryNiaInventoryDcnm(val *NiatelemetryNiaInventoryDcnm) *NullableNiatelemetryNiaInventoryDcnm {
	return &NullableNiatelemetryNiaInventoryDcnm{value: val, isSet: true}
}

func (v NullableNiatelemetryNiaInventoryDcnm) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNiatelemetryNiaInventoryDcnm) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
