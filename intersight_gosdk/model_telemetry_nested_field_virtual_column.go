/*
Cisco Intersight

Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations. The Intersight OpenAPI document defines the complete set of properties that are returned in the HTTP response. From that perspective, a client can expect that no additional properties are returned, unless these properties are explicitly defined in the OpenAPI document. However, when a client uses an older version of the Intersight OpenAPI document, the server may send additional properties because the software is more recent than the client. In that case, the client may receive properties that it does not know about. Some generated SDKs perform a strict validation of the HTTP response body against the OpenAPI document.

API version: 1.0.11-2024100405
Contact: intersight@cisco.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package intersight

import (
	"encoding/json"
	"fmt"
)

// checks if the TelemetryNestedFieldVirtualColumn type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TelemetryNestedFieldVirtualColumn{}

// TelemetryNestedFieldVirtualColumn A virtual column defined as a nested field. The nested field virtual column is an optimized virtual column that can provide direct access into various paths of a json column, including using their indexes. This virtual column is used for the SQL operators JSON_VALUE (if processFromRaw is set to false) or JSON_QUERY (if processFromRaw is true), and accepts 'JSONPath' or 'jq' syntax string representations of paths, or a parsed list of \"path parts\" in order to determine what should be selected from the column.
type TelemetryNestedFieldVirtualColumn struct {
	// The virtual-column type.
	Type string `json:"type"`
	// Name of the COMPLEX<json> input column.
	ColumnName *string `json:"columnName,omitempty"`
	// Name of the virtual column.
	OutputName *string `json:"outputName,omitempty"`
	// Native druid output type of the column. Druid will coerce output to this type if it does not match the underlying type.
	ExpectedType *string `json:"expectedType,omitempty"`
	// A list of path parts that represent the path to the desired value in the json column. Each path part can be a string or an integer. If a path part is an integer, it is treated as an index into an array.
	PathParts []TelemetryNestedFieldVirtualColumnAllOfPathParts `json:"pathParts,omitempty"`
	// If set to true, the virtual column will process the \"raw\" JSON data to extract values rather than using an optimized \"literal\" value selector. This option allows extracting non-literal values from JSON the cost of much slower performance.
	ProcessFromRaw *bool `json:"processFromRaw,omitempty"`
	// A JSONPath or jq syntax string representation of the path to the desired value in the json column. This field is optional and can be used instead of pathParts.
	Path *string `json:"path,omitempty"`
	// If set to true, the virtual column will use jq syntax instead of JSONPath.
	UseJqSyntax          *bool `json:"useJqSyntax,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _TelemetryNestedFieldVirtualColumn TelemetryNestedFieldVirtualColumn

// NewTelemetryNestedFieldVirtualColumn instantiates a new TelemetryNestedFieldVirtualColumn object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTelemetryNestedFieldVirtualColumn(type_ string) *TelemetryNestedFieldVirtualColumn {
	this := TelemetryNestedFieldVirtualColumn{}
	this.Type = type_
	var expectedType string = "STRING"
	this.ExpectedType = &expectedType
	var processFromRaw bool = false
	this.ProcessFromRaw = &processFromRaw
	var useJqSyntax bool = false
	this.UseJqSyntax = &useJqSyntax
	return &this
}

// NewTelemetryNestedFieldVirtualColumnWithDefaults instantiates a new TelemetryNestedFieldVirtualColumn object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTelemetryNestedFieldVirtualColumnWithDefaults() *TelemetryNestedFieldVirtualColumn {
	this := TelemetryNestedFieldVirtualColumn{}
	var expectedType string = "STRING"
	this.ExpectedType = &expectedType
	var processFromRaw bool = false
	this.ProcessFromRaw = &processFromRaw
	var useJqSyntax bool = false
	this.UseJqSyntax = &useJqSyntax
	return &this
}

// GetType returns the Type field value
func (o *TelemetryNestedFieldVirtualColumn) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *TelemetryNestedFieldVirtualColumn) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *TelemetryNestedFieldVirtualColumn) SetType(v string) {
	o.Type = v
}

// GetColumnName returns the ColumnName field value if set, zero value otherwise.
func (o *TelemetryNestedFieldVirtualColumn) GetColumnName() string {
	if o == nil || IsNil(o.ColumnName) {
		var ret string
		return ret
	}
	return *o.ColumnName
}

// GetColumnNameOk returns a tuple with the ColumnName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TelemetryNestedFieldVirtualColumn) GetColumnNameOk() (*string, bool) {
	if o == nil || IsNil(o.ColumnName) {
		return nil, false
	}
	return o.ColumnName, true
}

// HasColumnName returns a boolean if a field has been set.
func (o *TelemetryNestedFieldVirtualColumn) HasColumnName() bool {
	if o != nil && !IsNil(o.ColumnName) {
		return true
	}

	return false
}

// SetColumnName gets a reference to the given string and assigns it to the ColumnName field.
func (o *TelemetryNestedFieldVirtualColumn) SetColumnName(v string) {
	o.ColumnName = &v
}

// GetOutputName returns the OutputName field value if set, zero value otherwise.
func (o *TelemetryNestedFieldVirtualColumn) GetOutputName() string {
	if o == nil || IsNil(o.OutputName) {
		var ret string
		return ret
	}
	return *o.OutputName
}

// GetOutputNameOk returns a tuple with the OutputName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TelemetryNestedFieldVirtualColumn) GetOutputNameOk() (*string, bool) {
	if o == nil || IsNil(o.OutputName) {
		return nil, false
	}
	return o.OutputName, true
}

// HasOutputName returns a boolean if a field has been set.
func (o *TelemetryNestedFieldVirtualColumn) HasOutputName() bool {
	if o != nil && !IsNil(o.OutputName) {
		return true
	}

	return false
}

// SetOutputName gets a reference to the given string and assigns it to the OutputName field.
func (o *TelemetryNestedFieldVirtualColumn) SetOutputName(v string) {
	o.OutputName = &v
}

// GetExpectedType returns the ExpectedType field value if set, zero value otherwise.
func (o *TelemetryNestedFieldVirtualColumn) GetExpectedType() string {
	if o == nil || IsNil(o.ExpectedType) {
		var ret string
		return ret
	}
	return *o.ExpectedType
}

// GetExpectedTypeOk returns a tuple with the ExpectedType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TelemetryNestedFieldVirtualColumn) GetExpectedTypeOk() (*string, bool) {
	if o == nil || IsNil(o.ExpectedType) {
		return nil, false
	}
	return o.ExpectedType, true
}

// HasExpectedType returns a boolean if a field has been set.
func (o *TelemetryNestedFieldVirtualColumn) HasExpectedType() bool {
	if o != nil && !IsNil(o.ExpectedType) {
		return true
	}

	return false
}

// SetExpectedType gets a reference to the given string and assigns it to the ExpectedType field.
func (o *TelemetryNestedFieldVirtualColumn) SetExpectedType(v string) {
	o.ExpectedType = &v
}

// GetPathParts returns the PathParts field value if set, zero value otherwise.
func (o *TelemetryNestedFieldVirtualColumn) GetPathParts() []TelemetryNestedFieldVirtualColumnAllOfPathParts {
	if o == nil || IsNil(o.PathParts) {
		var ret []TelemetryNestedFieldVirtualColumnAllOfPathParts
		return ret
	}
	return o.PathParts
}

// GetPathPartsOk returns a tuple with the PathParts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TelemetryNestedFieldVirtualColumn) GetPathPartsOk() ([]TelemetryNestedFieldVirtualColumnAllOfPathParts, bool) {
	if o == nil || IsNil(o.PathParts) {
		return nil, false
	}
	return o.PathParts, true
}

// HasPathParts returns a boolean if a field has been set.
func (o *TelemetryNestedFieldVirtualColumn) HasPathParts() bool {
	if o != nil && !IsNil(o.PathParts) {
		return true
	}

	return false
}

// SetPathParts gets a reference to the given []TelemetryNestedFieldVirtualColumnAllOfPathParts and assigns it to the PathParts field.
func (o *TelemetryNestedFieldVirtualColumn) SetPathParts(v []TelemetryNestedFieldVirtualColumnAllOfPathParts) {
	o.PathParts = v
}

// GetProcessFromRaw returns the ProcessFromRaw field value if set, zero value otherwise.
func (o *TelemetryNestedFieldVirtualColumn) GetProcessFromRaw() bool {
	if o == nil || IsNil(o.ProcessFromRaw) {
		var ret bool
		return ret
	}
	return *o.ProcessFromRaw
}

// GetProcessFromRawOk returns a tuple with the ProcessFromRaw field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TelemetryNestedFieldVirtualColumn) GetProcessFromRawOk() (*bool, bool) {
	if o == nil || IsNil(o.ProcessFromRaw) {
		return nil, false
	}
	return o.ProcessFromRaw, true
}

// HasProcessFromRaw returns a boolean if a field has been set.
func (o *TelemetryNestedFieldVirtualColumn) HasProcessFromRaw() bool {
	if o != nil && !IsNil(o.ProcessFromRaw) {
		return true
	}

	return false
}

// SetProcessFromRaw gets a reference to the given bool and assigns it to the ProcessFromRaw field.
func (o *TelemetryNestedFieldVirtualColumn) SetProcessFromRaw(v bool) {
	o.ProcessFromRaw = &v
}

// GetPath returns the Path field value if set, zero value otherwise.
func (o *TelemetryNestedFieldVirtualColumn) GetPath() string {
	if o == nil || IsNil(o.Path) {
		var ret string
		return ret
	}
	return *o.Path
}

// GetPathOk returns a tuple with the Path field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TelemetryNestedFieldVirtualColumn) GetPathOk() (*string, bool) {
	if o == nil || IsNil(o.Path) {
		return nil, false
	}
	return o.Path, true
}

// HasPath returns a boolean if a field has been set.
func (o *TelemetryNestedFieldVirtualColumn) HasPath() bool {
	if o != nil && !IsNil(o.Path) {
		return true
	}

	return false
}

// SetPath gets a reference to the given string and assigns it to the Path field.
func (o *TelemetryNestedFieldVirtualColumn) SetPath(v string) {
	o.Path = &v
}

// GetUseJqSyntax returns the UseJqSyntax field value if set, zero value otherwise.
func (o *TelemetryNestedFieldVirtualColumn) GetUseJqSyntax() bool {
	if o == nil || IsNil(o.UseJqSyntax) {
		var ret bool
		return ret
	}
	return *o.UseJqSyntax
}

// GetUseJqSyntaxOk returns a tuple with the UseJqSyntax field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TelemetryNestedFieldVirtualColumn) GetUseJqSyntaxOk() (*bool, bool) {
	if o == nil || IsNil(o.UseJqSyntax) {
		return nil, false
	}
	return o.UseJqSyntax, true
}

// HasUseJqSyntax returns a boolean if a field has been set.
func (o *TelemetryNestedFieldVirtualColumn) HasUseJqSyntax() bool {
	if o != nil && !IsNil(o.UseJqSyntax) {
		return true
	}

	return false
}

// SetUseJqSyntax gets a reference to the given bool and assigns it to the UseJqSyntax field.
func (o *TelemetryNestedFieldVirtualColumn) SetUseJqSyntax(v bool) {
	o.UseJqSyntax = &v
}

func (o TelemetryNestedFieldVirtualColumn) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TelemetryNestedFieldVirtualColumn) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["type"] = o.Type
	if !IsNil(o.ColumnName) {
		toSerialize["columnName"] = o.ColumnName
	}
	if !IsNil(o.OutputName) {
		toSerialize["outputName"] = o.OutputName
	}
	if !IsNil(o.ExpectedType) {
		toSerialize["expectedType"] = o.ExpectedType
	}
	if !IsNil(o.PathParts) {
		toSerialize["pathParts"] = o.PathParts
	}
	if !IsNil(o.ProcessFromRaw) {
		toSerialize["processFromRaw"] = o.ProcessFromRaw
	}
	if !IsNil(o.Path) {
		toSerialize["path"] = o.Path
	}
	if !IsNil(o.UseJqSyntax) {
		toSerialize["useJqSyntax"] = o.UseJqSyntax
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *TelemetryNestedFieldVirtualColumn) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"type",
	}

	// defaultValueFuncMap captures the default values for required properties.
	// These values are used when required properties are missing from the payload.
	defaultValueFuncMap := map[string]func() interface{}{}
	var defaultValueApplied bool
	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			if _, ok := defaultValueFuncMap[requiredProperty]; ok {
				allProperties[requiredProperty] = defaultValueFuncMap[requiredProperty]()
				defaultValueApplied = true
			}
		}
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	if defaultValueApplied {
		data, err = json.Marshal(allProperties)
		if err != nil {
			return err
		}
	}
	varTelemetryNestedFieldVirtualColumn := _TelemetryNestedFieldVirtualColumn{}

	err = json.Unmarshal(data, &varTelemetryNestedFieldVirtualColumn)

	if err != nil {
		return err
	}

	*o = TelemetryNestedFieldVirtualColumn(varTelemetryNestedFieldVirtualColumn)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "type")
		delete(additionalProperties, "columnName")
		delete(additionalProperties, "outputName")
		delete(additionalProperties, "expectedType")
		delete(additionalProperties, "pathParts")
		delete(additionalProperties, "processFromRaw")
		delete(additionalProperties, "path")
		delete(additionalProperties, "useJqSyntax")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableTelemetryNestedFieldVirtualColumn struct {
	value *TelemetryNestedFieldVirtualColumn
	isSet bool
}

func (v NullableTelemetryNestedFieldVirtualColumn) Get() *TelemetryNestedFieldVirtualColumn {
	return v.value
}

func (v *NullableTelemetryNestedFieldVirtualColumn) Set(val *TelemetryNestedFieldVirtualColumn) {
	v.value = val
	v.isSet = true
}

func (v NullableTelemetryNestedFieldVirtualColumn) IsSet() bool {
	return v.isSet
}

func (v *NullableTelemetryNestedFieldVirtualColumn) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTelemetryNestedFieldVirtualColumn(val *TelemetryNestedFieldVirtualColumn) *NullableTelemetryNestedFieldVirtualColumn {
	return &NullableTelemetryNestedFieldVirtualColumn{value: val, isSet: true}
}

func (v NullableTelemetryNestedFieldVirtualColumn) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTelemetryNestedFieldVirtualColumn) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
