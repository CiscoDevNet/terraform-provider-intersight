/*
Cisco Intersight

Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations. The Intersight OpenAPI document defines the complete set of properties that are returned in the HTTP response. From that perspective, a client can expect that no additional properties are returned, unless these properties are explicitly defined in the OpenAPI document. However, when a client uses an older version of the Intersight OpenAPI document, the server may send additional properties because the software is more recent than the client. In that case, the client may receive properties that it does not know about. Some generated SDKs perform a strict validation of the HTTP response body against the OpenAPI document.

API version: 1.0.11-18775
Contact: intersight@cisco.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package intersight

import (
	"encoding/json"
	"fmt"
	"reflect"
	"strings"
)

// checks if the ConvergedinfraBasePod type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ConvergedinfraBasePod{}

// ConvergedinfraBasePod Abstract base type for all pods.
type ConvergedinfraBasePod struct {
	MoBaseMo
	// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data. The enum values provides the list of concrete types that can be instantiated from this abstract type.
	ClassId string `json:"ClassId"`
	// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property. The enum values provides the list of concrete types that can be instantiated from this abstract type.
	ObjectType string `json:"ObjectType"`
	// Description of the pod. A short note about the nature or purpose of the pod.
	Description *string `json:"Description,omitempty" validate:"regexp=^$|^[a-zA-Z0-9]+[\\\\x00-\\\\xFF]*$"`
	// Name of the pod. Concrete pod will be created with this name.
	Name *string `json:"Name,omitempty" validate:"regexp=^[a-zA-Z0-9_.-]{1,64}$"`
	// Defines the type of the pod. * `FlexPod` - Pod type is FlexPod, an integrated infrastructure solution developed by Cisco and NetApp. * `FlashStack` - Pod type is FlashStack, an integrated infrastructure solution developed by Cisco and Pure Storage.
	Type                 *string `json:"Type,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ConvergedinfraBasePod ConvergedinfraBasePod

// NewConvergedinfraBasePod instantiates a new ConvergedinfraBasePod object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConvergedinfraBasePod(classId string, objectType string) *ConvergedinfraBasePod {
	this := ConvergedinfraBasePod{}
	this.ClassId = classId
	this.ObjectType = objectType
	var type_ string = "FlexPod"
	this.Type = &type_
	return &this
}

// NewConvergedinfraBasePodWithDefaults instantiates a new ConvergedinfraBasePod object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConvergedinfraBasePodWithDefaults() *ConvergedinfraBasePod {
	this := ConvergedinfraBasePod{}
	var classId string = "convergedinfra.Pod"
	this.ClassId = classId
	var objectType string = "convergedinfra.Pod"
	this.ObjectType = objectType
	var type_ string = "FlexPod"
	this.Type = &type_
	return &this
}

// GetClassId returns the ClassId field value
func (o *ConvergedinfraBasePod) GetClassId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ClassId
}

// GetClassIdOk returns a tuple with the ClassId field value
// and a boolean to check if the value has been set.
func (o *ConvergedinfraBasePod) GetClassIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ClassId, true
}

// SetClassId sets field value
func (o *ConvergedinfraBasePod) SetClassId(v string) {
	o.ClassId = v
}

// GetDefaultClassId returns the default value "convergedinfra.Pod" of the ClassId field.
func (o *ConvergedinfraBasePod) GetDefaultClassId() interface{} {
	return "convergedinfra.Pod"
}

// GetObjectType returns the ObjectType field value
func (o *ConvergedinfraBasePod) GetObjectType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ObjectType
}

// GetObjectTypeOk returns a tuple with the ObjectType field value
// and a boolean to check if the value has been set.
func (o *ConvergedinfraBasePod) GetObjectTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ObjectType, true
}

// SetObjectType sets field value
func (o *ConvergedinfraBasePod) SetObjectType(v string) {
	o.ObjectType = v
}

// GetDefaultObjectType returns the default value "convergedinfra.Pod" of the ObjectType field.
func (o *ConvergedinfraBasePod) GetDefaultObjectType() interface{} {
	return "convergedinfra.Pod"
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *ConvergedinfraBasePod) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConvergedinfraBasePod) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *ConvergedinfraBasePod) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *ConvergedinfraBasePod) SetDescription(v string) {
	o.Description = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ConvergedinfraBasePod) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConvergedinfraBasePod) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ConvergedinfraBasePod) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *ConvergedinfraBasePod) SetName(v string) {
	o.Name = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *ConvergedinfraBasePod) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConvergedinfraBasePod) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *ConvergedinfraBasePod) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *ConvergedinfraBasePod) SetType(v string) {
	o.Type = &v
}

func (o ConvergedinfraBasePod) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ConvergedinfraBasePod) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	serializedMoBaseMo, errMoBaseMo := json.Marshal(o.MoBaseMo)
	if errMoBaseMo != nil {
		return map[string]interface{}{}, errMoBaseMo
	}
	errMoBaseMo = json.Unmarshal([]byte(serializedMoBaseMo), &toSerialize)
	if errMoBaseMo != nil {
		return map[string]interface{}{}, errMoBaseMo
	}
	if _, exists := toSerialize["ClassId"]; !exists {
		toSerialize["ClassId"] = o.GetDefaultClassId()
	}
	toSerialize["ClassId"] = o.ClassId
	if _, exists := toSerialize["ObjectType"]; !exists {
		toSerialize["ObjectType"] = o.GetDefaultObjectType()
	}
	toSerialize["ObjectType"] = o.ObjectType
	if !IsNil(o.Description) {
		toSerialize["Description"] = o.Description
	}
	if !IsNil(o.Name) {
		toSerialize["Name"] = o.Name
	}
	if !IsNil(o.Type) {
		toSerialize["Type"] = o.Type
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ConvergedinfraBasePod) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"ClassId",
		"ObjectType",
	}

	// defaultValueFuncMap captures the default values for required properties.
	// These values are used when required properties are missing from the payload.
	defaultValueFuncMap := map[string]func() interface{}{
		"ClassId":    o.GetDefaultClassId,
		"ObjectType": o.GetDefaultObjectType,
	}
	var defaultValueApplied bool
	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			if _, ok := defaultValueFuncMap[requiredProperty]; ok {
				allProperties[requiredProperty] = defaultValueFuncMap[requiredProperty]()
				defaultValueApplied = true
			}
		}
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	if defaultValueApplied {
		data, err = json.Marshal(allProperties)
		if err != nil {
			return err
		}
	}
	type ConvergedinfraBasePodWithoutEmbeddedStruct struct {
		// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data. The enum values provides the list of concrete types that can be instantiated from this abstract type.
		ClassId string `json:"ClassId"`
		// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property. The enum values provides the list of concrete types that can be instantiated from this abstract type.
		ObjectType string `json:"ObjectType"`
		// Description of the pod. A short note about the nature or purpose of the pod.
		Description *string `json:"Description,omitempty" validate:"regexp=^$|^[a-zA-Z0-9]+[\\\\x00-\\\\xFF]*$"`
		// Name of the pod. Concrete pod will be created with this name.
		Name *string `json:"Name,omitempty" validate:"regexp=^[a-zA-Z0-9_.-]{1,64}$"`
		// Defines the type of the pod. * `FlexPod` - Pod type is FlexPod, an integrated infrastructure solution developed by Cisco and NetApp. * `FlashStack` - Pod type is FlashStack, an integrated infrastructure solution developed by Cisco and Pure Storage.
		Type *string `json:"Type,omitempty"`
	}

	varConvergedinfraBasePodWithoutEmbeddedStruct := ConvergedinfraBasePodWithoutEmbeddedStruct{}

	err = json.Unmarshal(data, &varConvergedinfraBasePodWithoutEmbeddedStruct)
	if err == nil {
		varConvergedinfraBasePod := _ConvergedinfraBasePod{}
		varConvergedinfraBasePod.ClassId = varConvergedinfraBasePodWithoutEmbeddedStruct.ClassId
		varConvergedinfraBasePod.ObjectType = varConvergedinfraBasePodWithoutEmbeddedStruct.ObjectType
		varConvergedinfraBasePod.Description = varConvergedinfraBasePodWithoutEmbeddedStruct.Description
		varConvergedinfraBasePod.Name = varConvergedinfraBasePodWithoutEmbeddedStruct.Name
		varConvergedinfraBasePod.Type = varConvergedinfraBasePodWithoutEmbeddedStruct.Type
		*o = ConvergedinfraBasePod(varConvergedinfraBasePod)
	} else {
		return err
	}

	varConvergedinfraBasePod := _ConvergedinfraBasePod{}

	err = json.Unmarshal(data, &varConvergedinfraBasePod)
	if err == nil {
		o.MoBaseMo = varConvergedinfraBasePod.MoBaseMo
	} else {
		return err
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "ClassId")
		delete(additionalProperties, "ObjectType")
		delete(additionalProperties, "Description")
		delete(additionalProperties, "Name")
		delete(additionalProperties, "Type")

		// remove fields from embedded structs
		reflectMoBaseMo := reflect.ValueOf(o.MoBaseMo)
		for i := 0; i < reflectMoBaseMo.Type().NumField(); i++ {
			t := reflectMoBaseMo.Type().Field(i)

			if jsonTag := t.Tag.Get("json"); jsonTag != "" {
				fieldName := ""
				if commaIdx := strings.Index(jsonTag, ","); commaIdx > 0 {
					fieldName = jsonTag[:commaIdx]
				} else {
					fieldName = jsonTag
				}
				if fieldName != "AdditionalProperties" {
					delete(additionalProperties, fieldName)
				}
			}
		}

		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableConvergedinfraBasePod struct {
	value *ConvergedinfraBasePod
	isSet bool
}

func (v NullableConvergedinfraBasePod) Get() *ConvergedinfraBasePod {
	return v.value
}

func (v *NullableConvergedinfraBasePod) Set(val *ConvergedinfraBasePod) {
	v.value = val
	v.isSet = true
}

func (v NullableConvergedinfraBasePod) IsSet() bool {
	return v.isSet
}

func (v *NullableConvergedinfraBasePod) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConvergedinfraBasePod(val *ConvergedinfraBasePod) *NullableConvergedinfraBasePod {
	return &NullableConvergedinfraBasePod{value: val, isSet: true}
}

func (v NullableConvergedinfraBasePod) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConvergedinfraBasePod) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
