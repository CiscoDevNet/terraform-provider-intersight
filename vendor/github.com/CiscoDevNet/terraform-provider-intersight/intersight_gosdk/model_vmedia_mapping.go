/*
Cisco Intersight

Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations. The Intersight OpenAPI document defines the complete set of properties that are returned in the HTTP response. From that perspective, a client can expect that no additional properties are returned, unless these properties are explicitly defined in the OpenAPI document. However, when a client uses an older version of the Intersight OpenAPI document, the server may send additional properties because the software is more recent than the client. In that case, the client may receive properties that it does not know about. Some generated SDKs perform a strict validation of the HTTP response body against the OpenAPI document.

API version: 1.0.11-2024100405
Contact: intersight@cisco.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package intersight

import (
	"encoding/json"
	"fmt"
	"reflect"
	"strings"
)

// checks if the VmediaMapping type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VmediaMapping{}

// VmediaMapping Virtual Media mapping settings required to map images from remote server.
type VmediaMapping struct {
	MoBaseComplexType
	// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.
	ClassId string `json:"ClassId"`
	// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
	ObjectType string `json:"ObjectType"`
	// Type of Authentication protocol when CIFS is used for communication with the remote server. * `none` - No authentication is used. * `ntlm` - NT LAN Manager (NTLM) security protocol. Use this option only with Windows 2008 R2 and Windows 2012 R2. * `ntlmi` - NTLMi security protocol. Use this option only when you enable Digital Signing in the CIFS Windows server. * `ntlmv2` - NTLMv2 security protocol. Use this option only with Samba Linux. * `ntlmv2i` - NTLMv2i security protocol. Use this option only with Samba Linux. * `ntlmssp` - NT LAN Manager Security Support Provider (NTLMSSP) protocol. Use this option only with Windows 2008 R2 and Windows 2012 R2. * `ntlmsspi` - NTLMSSPi protocol. Use this option only when you enable Digital Signing in the CIFS Windows server.
	AuthenticationProtocol *string `json:"AuthenticationProtocol,omitempty"`
	// Type of remote Virtual Media device. * `cdd` - Uses compact disc drive as the virtual media mount device. * `hdd` - Uses hard disk drive as the virtual media mount device.
	DeviceType *string `json:"DeviceType,omitempty"`
	// Remote location of image. Preferred format is 'hostname/filePath/fileName'.
	FileLocation *string `json:"FileLocation,omitempty"`
	// IP address or hostname of the remote server.
	HostName *string `json:"HostName,omitempty"`
	// Indicates whether the value of the 'password' property has been set.
	IsPasswordSet *bool `json:"IsPasswordSet,omitempty"`
	// Mount options for the Virtual Media mapping. The field can be left blank or filled in a comma separated list with the following options.\\n For NFS, supported options are ro, rw, nolock, noexec, soft, port=VALUE, timeo=VALUE, retry=VALUE.\\n For CIFS, supported options are soft, nounix, noserverino, guest.\\n For CIFS version < 3.0, vers=VALUE is mandatory. e.g. vers=2.0\\n For HTTP/HTTPS, the only supported option is noauto.
	MountOptions *string `json:"MountOptions,omitempty"`
	// Protocol to use to communicate with the remote server. * `nfs` - NFS protocol for vmedia mount. * `cifs` - CIFS protocol for vmedia mount. * `http` - HTTP protocol for vmedia mount. * `https` - HTTPS protocol for vmedia mount.
	MountProtocol *string `json:"MountProtocol,omitempty"`
	// Password associated with the username.
	Password *string `json:"Password,omitempty"`
	// The remote file location path for the virtual media mapping. Accepted formats are: HDD for CIFS/NFS: hostname-or-IP/filePath/fileName.img. CDD for CIFS/NFS: hostname-or-IP/filePath/fileName.iso. HDD for HTTP/S: http[s]://hostname-or-IP/filePath/fileName.img. CDD for HTTP/S: http[s]://hostname-or-IP/filePath/fileName.iso.
	RemoteFile *string `json:"RemoteFile,omitempty" validate:"regexp=^$|^[ !#$%\\\\(\\\\)\\\\+,\\\\-\\\\.:\\\\?@\\\\[\\\\]_\\\\{\\\\}=~a-zA-Z0-9]+$"`
	// URL path to the location of the image on the remote server. The preferred format is '/path'.
	RemotePath *string `json:"RemotePath,omitempty" validate:"regexp=^$|^[ !#$%\\\\(\\\\)\\\\+,\\\\-\\\\.\\/:\\\\?@\\\\[\\\\]_\\\\{\\\\}=~a-zA-Z0-9]+$"`
	// File Location in standard format 'hostname/filePath/fileName'. This field should be used to calculate config drift. User input format may vary while inventory will return data in format in compliance with mount option for the mount. Both will be converged to this standard format for comparison.
	SanitizedFileLocation *string `json:"SanitizedFileLocation,omitempty"`
	// Username to log in to the remote server.
	Username *string `json:"Username,omitempty"`
	// Identity of the image for Virtual Media mapping.
	VolumeName           *string `json:"VolumeName,omitempty" validate:"regexp=^[\\\\-\\\\.:_a-zA-Z0-9]+$"`
	AdditionalProperties map[string]interface{}
}

type _VmediaMapping VmediaMapping

// NewVmediaMapping instantiates a new VmediaMapping object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVmediaMapping(classId string, objectType string) *VmediaMapping {
	this := VmediaMapping{}
	this.ClassId = classId
	this.ObjectType = objectType
	var authenticationProtocol string = "none"
	this.AuthenticationProtocol = &authenticationProtocol
	var deviceType string = "cdd"
	this.DeviceType = &deviceType
	var mountProtocol string = "nfs"
	this.MountProtocol = &mountProtocol
	return &this
}

// NewVmediaMappingWithDefaults instantiates a new VmediaMapping object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVmediaMappingWithDefaults() *VmediaMapping {
	this := VmediaMapping{}
	var classId string = "vmedia.Mapping"
	this.ClassId = classId
	var objectType string = "vmedia.Mapping"
	this.ObjectType = objectType
	var authenticationProtocol string = "none"
	this.AuthenticationProtocol = &authenticationProtocol
	var deviceType string = "cdd"
	this.DeviceType = &deviceType
	var mountProtocol string = "nfs"
	this.MountProtocol = &mountProtocol
	return &this
}

// GetClassId returns the ClassId field value
func (o *VmediaMapping) GetClassId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ClassId
}

// GetClassIdOk returns a tuple with the ClassId field value
// and a boolean to check if the value has been set.
func (o *VmediaMapping) GetClassIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ClassId, true
}

// SetClassId sets field value
func (o *VmediaMapping) SetClassId(v string) {
	o.ClassId = v
}

// GetDefaultClassId returns the default value "vmedia.Mapping" of the ClassId field.
func (o *VmediaMapping) GetDefaultClassId() interface{} {
	return "vmedia.Mapping"
}

// GetObjectType returns the ObjectType field value
func (o *VmediaMapping) GetObjectType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ObjectType
}

// GetObjectTypeOk returns a tuple with the ObjectType field value
// and a boolean to check if the value has been set.
func (o *VmediaMapping) GetObjectTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ObjectType, true
}

// SetObjectType sets field value
func (o *VmediaMapping) SetObjectType(v string) {
	o.ObjectType = v
}

// GetDefaultObjectType returns the default value "vmedia.Mapping" of the ObjectType field.
func (o *VmediaMapping) GetDefaultObjectType() interface{} {
	return "vmedia.Mapping"
}

// GetAuthenticationProtocol returns the AuthenticationProtocol field value if set, zero value otherwise.
func (o *VmediaMapping) GetAuthenticationProtocol() string {
	if o == nil || IsNil(o.AuthenticationProtocol) {
		var ret string
		return ret
	}
	return *o.AuthenticationProtocol
}

// GetAuthenticationProtocolOk returns a tuple with the AuthenticationProtocol field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VmediaMapping) GetAuthenticationProtocolOk() (*string, bool) {
	if o == nil || IsNil(o.AuthenticationProtocol) {
		return nil, false
	}
	return o.AuthenticationProtocol, true
}

// HasAuthenticationProtocol returns a boolean if a field has been set.
func (o *VmediaMapping) HasAuthenticationProtocol() bool {
	if o != nil && !IsNil(o.AuthenticationProtocol) {
		return true
	}

	return false
}

// SetAuthenticationProtocol gets a reference to the given string and assigns it to the AuthenticationProtocol field.
func (o *VmediaMapping) SetAuthenticationProtocol(v string) {
	o.AuthenticationProtocol = &v
}

// GetDeviceType returns the DeviceType field value if set, zero value otherwise.
func (o *VmediaMapping) GetDeviceType() string {
	if o == nil || IsNil(o.DeviceType) {
		var ret string
		return ret
	}
	return *o.DeviceType
}

// GetDeviceTypeOk returns a tuple with the DeviceType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VmediaMapping) GetDeviceTypeOk() (*string, bool) {
	if o == nil || IsNil(o.DeviceType) {
		return nil, false
	}
	return o.DeviceType, true
}

// HasDeviceType returns a boolean if a field has been set.
func (o *VmediaMapping) HasDeviceType() bool {
	if o != nil && !IsNil(o.DeviceType) {
		return true
	}

	return false
}

// SetDeviceType gets a reference to the given string and assigns it to the DeviceType field.
func (o *VmediaMapping) SetDeviceType(v string) {
	o.DeviceType = &v
}

// GetFileLocation returns the FileLocation field value if set, zero value otherwise.
func (o *VmediaMapping) GetFileLocation() string {
	if o == nil || IsNil(o.FileLocation) {
		var ret string
		return ret
	}
	return *o.FileLocation
}

// GetFileLocationOk returns a tuple with the FileLocation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VmediaMapping) GetFileLocationOk() (*string, bool) {
	if o == nil || IsNil(o.FileLocation) {
		return nil, false
	}
	return o.FileLocation, true
}

// HasFileLocation returns a boolean if a field has been set.
func (o *VmediaMapping) HasFileLocation() bool {
	if o != nil && !IsNil(o.FileLocation) {
		return true
	}

	return false
}

// SetFileLocation gets a reference to the given string and assigns it to the FileLocation field.
func (o *VmediaMapping) SetFileLocation(v string) {
	o.FileLocation = &v
}

// GetHostName returns the HostName field value if set, zero value otherwise.
func (o *VmediaMapping) GetHostName() string {
	if o == nil || IsNil(o.HostName) {
		var ret string
		return ret
	}
	return *o.HostName
}

// GetHostNameOk returns a tuple with the HostName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VmediaMapping) GetHostNameOk() (*string, bool) {
	if o == nil || IsNil(o.HostName) {
		return nil, false
	}
	return o.HostName, true
}

// HasHostName returns a boolean if a field has been set.
func (o *VmediaMapping) HasHostName() bool {
	if o != nil && !IsNil(o.HostName) {
		return true
	}

	return false
}

// SetHostName gets a reference to the given string and assigns it to the HostName field.
func (o *VmediaMapping) SetHostName(v string) {
	o.HostName = &v
}

// GetIsPasswordSet returns the IsPasswordSet field value if set, zero value otherwise.
func (o *VmediaMapping) GetIsPasswordSet() bool {
	if o == nil || IsNil(o.IsPasswordSet) {
		var ret bool
		return ret
	}
	return *o.IsPasswordSet
}

// GetIsPasswordSetOk returns a tuple with the IsPasswordSet field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VmediaMapping) GetIsPasswordSetOk() (*bool, bool) {
	if o == nil || IsNil(o.IsPasswordSet) {
		return nil, false
	}
	return o.IsPasswordSet, true
}

// HasIsPasswordSet returns a boolean if a field has been set.
func (o *VmediaMapping) HasIsPasswordSet() bool {
	if o != nil && !IsNil(o.IsPasswordSet) {
		return true
	}

	return false
}

// SetIsPasswordSet gets a reference to the given bool and assigns it to the IsPasswordSet field.
func (o *VmediaMapping) SetIsPasswordSet(v bool) {
	o.IsPasswordSet = &v
}

// GetMountOptions returns the MountOptions field value if set, zero value otherwise.
func (o *VmediaMapping) GetMountOptions() string {
	if o == nil || IsNil(o.MountOptions) {
		var ret string
		return ret
	}
	return *o.MountOptions
}

// GetMountOptionsOk returns a tuple with the MountOptions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VmediaMapping) GetMountOptionsOk() (*string, bool) {
	if o == nil || IsNil(o.MountOptions) {
		return nil, false
	}
	return o.MountOptions, true
}

// HasMountOptions returns a boolean if a field has been set.
func (o *VmediaMapping) HasMountOptions() bool {
	if o != nil && !IsNil(o.MountOptions) {
		return true
	}

	return false
}

// SetMountOptions gets a reference to the given string and assigns it to the MountOptions field.
func (o *VmediaMapping) SetMountOptions(v string) {
	o.MountOptions = &v
}

// GetMountProtocol returns the MountProtocol field value if set, zero value otherwise.
func (o *VmediaMapping) GetMountProtocol() string {
	if o == nil || IsNil(o.MountProtocol) {
		var ret string
		return ret
	}
	return *o.MountProtocol
}

// GetMountProtocolOk returns a tuple with the MountProtocol field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VmediaMapping) GetMountProtocolOk() (*string, bool) {
	if o == nil || IsNil(o.MountProtocol) {
		return nil, false
	}
	return o.MountProtocol, true
}

// HasMountProtocol returns a boolean if a field has been set.
func (o *VmediaMapping) HasMountProtocol() bool {
	if o != nil && !IsNil(o.MountProtocol) {
		return true
	}

	return false
}

// SetMountProtocol gets a reference to the given string and assigns it to the MountProtocol field.
func (o *VmediaMapping) SetMountProtocol(v string) {
	o.MountProtocol = &v
}

// GetPassword returns the Password field value if set, zero value otherwise.
func (o *VmediaMapping) GetPassword() string {
	if o == nil || IsNil(o.Password) {
		var ret string
		return ret
	}
	return *o.Password
}

// GetPasswordOk returns a tuple with the Password field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VmediaMapping) GetPasswordOk() (*string, bool) {
	if o == nil || IsNil(o.Password) {
		return nil, false
	}
	return o.Password, true
}

// HasPassword returns a boolean if a field has been set.
func (o *VmediaMapping) HasPassword() bool {
	if o != nil && !IsNil(o.Password) {
		return true
	}

	return false
}

// SetPassword gets a reference to the given string and assigns it to the Password field.
func (o *VmediaMapping) SetPassword(v string) {
	o.Password = &v
}

// GetRemoteFile returns the RemoteFile field value if set, zero value otherwise.
func (o *VmediaMapping) GetRemoteFile() string {
	if o == nil || IsNil(o.RemoteFile) {
		var ret string
		return ret
	}
	return *o.RemoteFile
}

// GetRemoteFileOk returns a tuple with the RemoteFile field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VmediaMapping) GetRemoteFileOk() (*string, bool) {
	if o == nil || IsNil(o.RemoteFile) {
		return nil, false
	}
	return o.RemoteFile, true
}

// HasRemoteFile returns a boolean if a field has been set.
func (o *VmediaMapping) HasRemoteFile() bool {
	if o != nil && !IsNil(o.RemoteFile) {
		return true
	}

	return false
}

// SetRemoteFile gets a reference to the given string and assigns it to the RemoteFile field.
func (o *VmediaMapping) SetRemoteFile(v string) {
	o.RemoteFile = &v
}

// GetRemotePath returns the RemotePath field value if set, zero value otherwise.
func (o *VmediaMapping) GetRemotePath() string {
	if o == nil || IsNil(o.RemotePath) {
		var ret string
		return ret
	}
	return *o.RemotePath
}

// GetRemotePathOk returns a tuple with the RemotePath field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VmediaMapping) GetRemotePathOk() (*string, bool) {
	if o == nil || IsNil(o.RemotePath) {
		return nil, false
	}
	return o.RemotePath, true
}

// HasRemotePath returns a boolean if a field has been set.
func (o *VmediaMapping) HasRemotePath() bool {
	if o != nil && !IsNil(o.RemotePath) {
		return true
	}

	return false
}

// SetRemotePath gets a reference to the given string and assigns it to the RemotePath field.
func (o *VmediaMapping) SetRemotePath(v string) {
	o.RemotePath = &v
}

// GetSanitizedFileLocation returns the SanitizedFileLocation field value if set, zero value otherwise.
func (o *VmediaMapping) GetSanitizedFileLocation() string {
	if o == nil || IsNil(o.SanitizedFileLocation) {
		var ret string
		return ret
	}
	return *o.SanitizedFileLocation
}

// GetSanitizedFileLocationOk returns a tuple with the SanitizedFileLocation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VmediaMapping) GetSanitizedFileLocationOk() (*string, bool) {
	if o == nil || IsNil(o.SanitizedFileLocation) {
		return nil, false
	}
	return o.SanitizedFileLocation, true
}

// HasSanitizedFileLocation returns a boolean if a field has been set.
func (o *VmediaMapping) HasSanitizedFileLocation() bool {
	if o != nil && !IsNil(o.SanitizedFileLocation) {
		return true
	}

	return false
}

// SetSanitizedFileLocation gets a reference to the given string and assigns it to the SanitizedFileLocation field.
func (o *VmediaMapping) SetSanitizedFileLocation(v string) {
	o.SanitizedFileLocation = &v
}

// GetUsername returns the Username field value if set, zero value otherwise.
func (o *VmediaMapping) GetUsername() string {
	if o == nil || IsNil(o.Username) {
		var ret string
		return ret
	}
	return *o.Username
}

// GetUsernameOk returns a tuple with the Username field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VmediaMapping) GetUsernameOk() (*string, bool) {
	if o == nil || IsNil(o.Username) {
		return nil, false
	}
	return o.Username, true
}

// HasUsername returns a boolean if a field has been set.
func (o *VmediaMapping) HasUsername() bool {
	if o != nil && !IsNil(o.Username) {
		return true
	}

	return false
}

// SetUsername gets a reference to the given string and assigns it to the Username field.
func (o *VmediaMapping) SetUsername(v string) {
	o.Username = &v
}

// GetVolumeName returns the VolumeName field value if set, zero value otherwise.
func (o *VmediaMapping) GetVolumeName() string {
	if o == nil || IsNil(o.VolumeName) {
		var ret string
		return ret
	}
	return *o.VolumeName
}

// GetVolumeNameOk returns a tuple with the VolumeName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VmediaMapping) GetVolumeNameOk() (*string, bool) {
	if o == nil || IsNil(o.VolumeName) {
		return nil, false
	}
	return o.VolumeName, true
}

// HasVolumeName returns a boolean if a field has been set.
func (o *VmediaMapping) HasVolumeName() bool {
	if o != nil && !IsNil(o.VolumeName) {
		return true
	}

	return false
}

// SetVolumeName gets a reference to the given string and assigns it to the VolumeName field.
func (o *VmediaMapping) SetVolumeName(v string) {
	o.VolumeName = &v
}

func (o VmediaMapping) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VmediaMapping) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	serializedMoBaseComplexType, errMoBaseComplexType := json.Marshal(o.MoBaseComplexType)
	if errMoBaseComplexType != nil {
		return map[string]interface{}{}, errMoBaseComplexType
	}
	errMoBaseComplexType = json.Unmarshal([]byte(serializedMoBaseComplexType), &toSerialize)
	if errMoBaseComplexType != nil {
		return map[string]interface{}{}, errMoBaseComplexType
	}
	if _, exists := toSerialize["ClassId"]; !exists {
		toSerialize["ClassId"] = o.GetDefaultClassId()
	}
	toSerialize["ClassId"] = o.ClassId
	if _, exists := toSerialize["ObjectType"]; !exists {
		toSerialize["ObjectType"] = o.GetDefaultObjectType()
	}
	toSerialize["ObjectType"] = o.ObjectType
	if !IsNil(o.AuthenticationProtocol) {
		toSerialize["AuthenticationProtocol"] = o.AuthenticationProtocol
	}
	if !IsNil(o.DeviceType) {
		toSerialize["DeviceType"] = o.DeviceType
	}
	if !IsNil(o.FileLocation) {
		toSerialize["FileLocation"] = o.FileLocation
	}
	if !IsNil(o.HostName) {
		toSerialize["HostName"] = o.HostName
	}
	if !IsNil(o.IsPasswordSet) {
		toSerialize["IsPasswordSet"] = o.IsPasswordSet
	}
	if !IsNil(o.MountOptions) {
		toSerialize["MountOptions"] = o.MountOptions
	}
	if !IsNil(o.MountProtocol) {
		toSerialize["MountProtocol"] = o.MountProtocol
	}
	if !IsNil(o.Password) {
		toSerialize["Password"] = o.Password
	}
	if !IsNil(o.RemoteFile) {
		toSerialize["RemoteFile"] = o.RemoteFile
	}
	if !IsNil(o.RemotePath) {
		toSerialize["RemotePath"] = o.RemotePath
	}
	if !IsNil(o.SanitizedFileLocation) {
		toSerialize["SanitizedFileLocation"] = o.SanitizedFileLocation
	}
	if !IsNil(o.Username) {
		toSerialize["Username"] = o.Username
	}
	if !IsNil(o.VolumeName) {
		toSerialize["VolumeName"] = o.VolumeName
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *VmediaMapping) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"ClassId",
		"ObjectType",
	}

	// defaultValueFuncMap captures the default values for required properties.
	// These values are used when required properties are missing from the payload.
	defaultValueFuncMap := map[string]func() interface{}{
		"ClassId":    o.GetDefaultClassId,
		"ObjectType": o.GetDefaultObjectType,
	}
	var defaultValueApplied bool
	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			if _, ok := defaultValueFuncMap[requiredProperty]; ok {
				allProperties[requiredProperty] = defaultValueFuncMap[requiredProperty]()
				defaultValueApplied = true
			}
		}
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	if defaultValueApplied {
		data, err = json.Marshal(allProperties)
		if err != nil {
			return err
		}
	}
	type VmediaMappingWithoutEmbeddedStruct struct {
		// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.
		ClassId string `json:"ClassId"`
		// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
		ObjectType string `json:"ObjectType"`
		// Type of Authentication protocol when CIFS is used for communication with the remote server. * `none` - No authentication is used. * `ntlm` - NT LAN Manager (NTLM) security protocol. Use this option only with Windows 2008 R2 and Windows 2012 R2. * `ntlmi` - NTLMi security protocol. Use this option only when you enable Digital Signing in the CIFS Windows server. * `ntlmv2` - NTLMv2 security protocol. Use this option only with Samba Linux. * `ntlmv2i` - NTLMv2i security protocol. Use this option only with Samba Linux. * `ntlmssp` - NT LAN Manager Security Support Provider (NTLMSSP) protocol. Use this option only with Windows 2008 R2 and Windows 2012 R2. * `ntlmsspi` - NTLMSSPi protocol. Use this option only when you enable Digital Signing in the CIFS Windows server.
		AuthenticationProtocol *string `json:"AuthenticationProtocol,omitempty"`
		// Type of remote Virtual Media device. * `cdd` - Uses compact disc drive as the virtual media mount device. * `hdd` - Uses hard disk drive as the virtual media mount device.
		DeviceType *string `json:"DeviceType,omitempty"`
		// Remote location of image. Preferred format is 'hostname/filePath/fileName'.
		FileLocation *string `json:"FileLocation,omitempty"`
		// IP address or hostname of the remote server.
		HostName *string `json:"HostName,omitempty"`
		// Indicates whether the value of the 'password' property has been set.
		IsPasswordSet *bool `json:"IsPasswordSet,omitempty"`
		// Mount options for the Virtual Media mapping. The field can be left blank or filled in a comma separated list with the following options.\\n For NFS, supported options are ro, rw, nolock, noexec, soft, port=VALUE, timeo=VALUE, retry=VALUE.\\n For CIFS, supported options are soft, nounix, noserverino, guest.\\n For CIFS version < 3.0, vers=VALUE is mandatory. e.g. vers=2.0\\n For HTTP/HTTPS, the only supported option is noauto.
		MountOptions *string `json:"MountOptions,omitempty"`
		// Protocol to use to communicate with the remote server. * `nfs` - NFS protocol for vmedia mount. * `cifs` - CIFS protocol for vmedia mount. * `http` - HTTP protocol for vmedia mount. * `https` - HTTPS protocol for vmedia mount.
		MountProtocol *string `json:"MountProtocol,omitempty"`
		// Password associated with the username.
		Password *string `json:"Password,omitempty"`
		// The remote file location path for the virtual media mapping. Accepted formats are: HDD for CIFS/NFS: hostname-or-IP/filePath/fileName.img. CDD for CIFS/NFS: hostname-or-IP/filePath/fileName.iso. HDD for HTTP/S: http[s]://hostname-or-IP/filePath/fileName.img. CDD for HTTP/S: http[s]://hostname-or-IP/filePath/fileName.iso.
		RemoteFile *string `json:"RemoteFile,omitempty" validate:"regexp=^$|^[ !#$%\\\\(\\\\)\\\\+,\\\\-\\\\.:\\\\?@\\\\[\\\\]_\\\\{\\\\}=~a-zA-Z0-9]+$"`
		// URL path to the location of the image on the remote server. The preferred format is '/path'.
		RemotePath *string `json:"RemotePath,omitempty" validate:"regexp=^$|^[ !#$%\\\\(\\\\)\\\\+,\\\\-\\\\.\\/:\\\\?@\\\\[\\\\]_\\\\{\\\\}=~a-zA-Z0-9]+$"`
		// File Location in standard format 'hostname/filePath/fileName'. This field should be used to calculate config drift. User input format may vary while inventory will return data in format in compliance with mount option for the mount. Both will be converged to this standard format for comparison.
		SanitizedFileLocation *string `json:"SanitizedFileLocation,omitempty"`
		// Username to log in to the remote server.
		Username *string `json:"Username,omitempty"`
		// Identity of the image for Virtual Media mapping.
		VolumeName *string `json:"VolumeName,omitempty" validate:"regexp=^[\\\\-\\\\.:_a-zA-Z0-9]+$"`
	}

	varVmediaMappingWithoutEmbeddedStruct := VmediaMappingWithoutEmbeddedStruct{}

	err = json.Unmarshal(data, &varVmediaMappingWithoutEmbeddedStruct)
	if err == nil {
		varVmediaMapping := _VmediaMapping{}
		varVmediaMapping.ClassId = varVmediaMappingWithoutEmbeddedStruct.ClassId
		varVmediaMapping.ObjectType = varVmediaMappingWithoutEmbeddedStruct.ObjectType
		varVmediaMapping.AuthenticationProtocol = varVmediaMappingWithoutEmbeddedStruct.AuthenticationProtocol
		varVmediaMapping.DeviceType = varVmediaMappingWithoutEmbeddedStruct.DeviceType
		varVmediaMapping.FileLocation = varVmediaMappingWithoutEmbeddedStruct.FileLocation
		varVmediaMapping.HostName = varVmediaMappingWithoutEmbeddedStruct.HostName
		varVmediaMapping.IsPasswordSet = varVmediaMappingWithoutEmbeddedStruct.IsPasswordSet
		varVmediaMapping.MountOptions = varVmediaMappingWithoutEmbeddedStruct.MountOptions
		varVmediaMapping.MountProtocol = varVmediaMappingWithoutEmbeddedStruct.MountProtocol
		varVmediaMapping.Password = varVmediaMappingWithoutEmbeddedStruct.Password
		varVmediaMapping.RemoteFile = varVmediaMappingWithoutEmbeddedStruct.RemoteFile
		varVmediaMapping.RemotePath = varVmediaMappingWithoutEmbeddedStruct.RemotePath
		varVmediaMapping.SanitizedFileLocation = varVmediaMappingWithoutEmbeddedStruct.SanitizedFileLocation
		varVmediaMapping.Username = varVmediaMappingWithoutEmbeddedStruct.Username
		varVmediaMapping.VolumeName = varVmediaMappingWithoutEmbeddedStruct.VolumeName
		*o = VmediaMapping(varVmediaMapping)
	} else {
		return err
	}

	varVmediaMapping := _VmediaMapping{}

	err = json.Unmarshal(data, &varVmediaMapping)
	if err == nil {
		o.MoBaseComplexType = varVmediaMapping.MoBaseComplexType
	} else {
		return err
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "ClassId")
		delete(additionalProperties, "ObjectType")
		delete(additionalProperties, "AuthenticationProtocol")
		delete(additionalProperties, "DeviceType")
		delete(additionalProperties, "FileLocation")
		delete(additionalProperties, "HostName")
		delete(additionalProperties, "IsPasswordSet")
		delete(additionalProperties, "MountOptions")
		delete(additionalProperties, "MountProtocol")
		delete(additionalProperties, "Password")
		delete(additionalProperties, "RemoteFile")
		delete(additionalProperties, "RemotePath")
		delete(additionalProperties, "SanitizedFileLocation")
		delete(additionalProperties, "Username")
		delete(additionalProperties, "VolumeName")

		// remove fields from embedded structs
		reflectMoBaseComplexType := reflect.ValueOf(o.MoBaseComplexType)
		for i := 0; i < reflectMoBaseComplexType.Type().NumField(); i++ {
			t := reflectMoBaseComplexType.Type().Field(i)

			if jsonTag := t.Tag.Get("json"); jsonTag != "" {
				fieldName := ""
				if commaIdx := strings.Index(jsonTag, ","); commaIdx > 0 {
					fieldName = jsonTag[:commaIdx]
				} else {
					fieldName = jsonTag
				}
				if fieldName != "AdditionalProperties" {
					delete(additionalProperties, fieldName)
				}
			}
		}

		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableVmediaMapping struct {
	value *VmediaMapping
	isSet bool
}

func (v NullableVmediaMapping) Get() *VmediaMapping {
	return v.value
}

func (v *NullableVmediaMapping) Set(val *VmediaMapping) {
	v.value = val
	v.isSet = true
}

func (v NullableVmediaMapping) IsSet() bool {
	return v.isSet
}

func (v *NullableVmediaMapping) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVmediaMapping(val *VmediaMapping) *NullableVmediaMapping {
	return &NullableVmediaMapping{value: val, isSet: true}
}

func (v NullableVmediaMapping) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVmediaMapping) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
