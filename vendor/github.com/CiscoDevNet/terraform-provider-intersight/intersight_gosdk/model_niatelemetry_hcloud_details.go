/*
Cisco Intersight

Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations. The Intersight OpenAPI document defines the complete set of properties that are returned in the HTTP response. From that perspective, a client can expect that no additional properties are returned, unless these properties are explicitly defined in the OpenAPI document. However, when a client uses an older version of the Intersight OpenAPI document, the server may send additional properties because the software is more recent than the client. In that case, the client may receive properties that it does not know about. Some generated SDKs perform a strict validation of the HTTP response body against the OpenAPI document.

API version: 1.0.11-10371
Contact: intersight@cisco.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package intersight

import (
	"encoding/json"
	"reflect"
	"strings"
)

// NiatelemetryHcloudDetails Inventory object available per device scope. This common object holds a device level information.
type NiatelemetryHcloudDetails struct {
	MoBaseMo
	// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.
	ClassId string `json:"ClassId"`
	// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
	ObjectType string `json:"ObjectType"`
	// Dn for the inventories present.
	Dn *string `json:"Dn,omitempty"`
	// Returns the total number of EPGs deployed.
	EpgCount *int64 `json:"EpgCount,omitempty"`
	// Type of record DCNM / APIC / SE. This determines the type of platform where inventory was collected.
	RecordType *string `json:"RecordType,omitempty"`
	// Version of record being pushed. This determines what was the API version for data available from the device.
	RecordVersion *string                           `json:"RecordVersion,omitempty"`
	Router        []NiatelemetryCloudRoutersElement `json:"Router,omitempty"`
	// Returns the total number of Cisco Cloud Routers deployed.
	RouterCount *int64 `json:"RouterCount,omitempty"`
	// Name of the APIC site from which this data is being collected.
	SiteName *string `json:"SiteName,omitempty"`
	// Returns the IP addresses of the subnets.
	SubnetsAddress *string `json:"SubnetsAddress,omitempty"`
	// Returns the total number of subnets deployed.
	SubnetsCount *int64 `json:"SubnetsCount,omitempty"`
	// Returns the total number of Transit Gateways deployed.
	TransitGatewaysCount *int64 `json:"TransitGatewaysCount,omitempty"`
	// Returns the total number of VPCs deployed in Azure/AWS platforms.
	VpcCount *int64 `json:"VpcCount,omitempty"`
	// Returns the total number of VPCs deployed in GCP.
	VpcCountGcp          *int64                               `json:"VpcCountGcp,omitempty"`
	RegisteredDevice     *AssetDeviceRegistrationRelationship `json:"RegisteredDevice,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _NiatelemetryHcloudDetails NiatelemetryHcloudDetails

// NewNiatelemetryHcloudDetails instantiates a new NiatelemetryHcloudDetails object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNiatelemetryHcloudDetails(classId string, objectType string) *NiatelemetryHcloudDetails {
	this := NiatelemetryHcloudDetails{}
	this.ClassId = classId
	this.ObjectType = objectType
	return &this
}

// NewNiatelemetryHcloudDetailsWithDefaults instantiates a new NiatelemetryHcloudDetails object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNiatelemetryHcloudDetailsWithDefaults() *NiatelemetryHcloudDetails {
	this := NiatelemetryHcloudDetails{}
	var classId string = "niatelemetry.HcloudDetails"
	this.ClassId = classId
	var objectType string = "niatelemetry.HcloudDetails"
	this.ObjectType = objectType
	return &this
}

// GetClassId returns the ClassId field value
func (o *NiatelemetryHcloudDetails) GetClassId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ClassId
}

// GetClassIdOk returns a tuple with the ClassId field value
// and a boolean to check if the value has been set.
func (o *NiatelemetryHcloudDetails) GetClassIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ClassId, true
}

// SetClassId sets field value
func (o *NiatelemetryHcloudDetails) SetClassId(v string) {
	o.ClassId = v
}

// GetObjectType returns the ObjectType field value
func (o *NiatelemetryHcloudDetails) GetObjectType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ObjectType
}

// GetObjectTypeOk returns a tuple with the ObjectType field value
// and a boolean to check if the value has been set.
func (o *NiatelemetryHcloudDetails) GetObjectTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ObjectType, true
}

// SetObjectType sets field value
func (o *NiatelemetryHcloudDetails) SetObjectType(v string) {
	o.ObjectType = v
}

// GetDn returns the Dn field value if set, zero value otherwise.
func (o *NiatelemetryHcloudDetails) GetDn() string {
	if o == nil || o.Dn == nil {
		var ret string
		return ret
	}
	return *o.Dn
}

// GetDnOk returns a tuple with the Dn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NiatelemetryHcloudDetails) GetDnOk() (*string, bool) {
	if o == nil || o.Dn == nil {
		return nil, false
	}
	return o.Dn, true
}

// HasDn returns a boolean if a field has been set.
func (o *NiatelemetryHcloudDetails) HasDn() bool {
	if o != nil && o.Dn != nil {
		return true
	}

	return false
}

// SetDn gets a reference to the given string and assigns it to the Dn field.
func (o *NiatelemetryHcloudDetails) SetDn(v string) {
	o.Dn = &v
}

// GetEpgCount returns the EpgCount field value if set, zero value otherwise.
func (o *NiatelemetryHcloudDetails) GetEpgCount() int64 {
	if o == nil || o.EpgCount == nil {
		var ret int64
		return ret
	}
	return *o.EpgCount
}

// GetEpgCountOk returns a tuple with the EpgCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NiatelemetryHcloudDetails) GetEpgCountOk() (*int64, bool) {
	if o == nil || o.EpgCount == nil {
		return nil, false
	}
	return o.EpgCount, true
}

// HasEpgCount returns a boolean if a field has been set.
func (o *NiatelemetryHcloudDetails) HasEpgCount() bool {
	if o != nil && o.EpgCount != nil {
		return true
	}

	return false
}

// SetEpgCount gets a reference to the given int64 and assigns it to the EpgCount field.
func (o *NiatelemetryHcloudDetails) SetEpgCount(v int64) {
	o.EpgCount = &v
}

// GetRecordType returns the RecordType field value if set, zero value otherwise.
func (o *NiatelemetryHcloudDetails) GetRecordType() string {
	if o == nil || o.RecordType == nil {
		var ret string
		return ret
	}
	return *o.RecordType
}

// GetRecordTypeOk returns a tuple with the RecordType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NiatelemetryHcloudDetails) GetRecordTypeOk() (*string, bool) {
	if o == nil || o.RecordType == nil {
		return nil, false
	}
	return o.RecordType, true
}

// HasRecordType returns a boolean if a field has been set.
func (o *NiatelemetryHcloudDetails) HasRecordType() bool {
	if o != nil && o.RecordType != nil {
		return true
	}

	return false
}

// SetRecordType gets a reference to the given string and assigns it to the RecordType field.
func (o *NiatelemetryHcloudDetails) SetRecordType(v string) {
	o.RecordType = &v
}

// GetRecordVersion returns the RecordVersion field value if set, zero value otherwise.
func (o *NiatelemetryHcloudDetails) GetRecordVersion() string {
	if o == nil || o.RecordVersion == nil {
		var ret string
		return ret
	}
	return *o.RecordVersion
}

// GetRecordVersionOk returns a tuple with the RecordVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NiatelemetryHcloudDetails) GetRecordVersionOk() (*string, bool) {
	if o == nil || o.RecordVersion == nil {
		return nil, false
	}
	return o.RecordVersion, true
}

// HasRecordVersion returns a boolean if a field has been set.
func (o *NiatelemetryHcloudDetails) HasRecordVersion() bool {
	if o != nil && o.RecordVersion != nil {
		return true
	}

	return false
}

// SetRecordVersion gets a reference to the given string and assigns it to the RecordVersion field.
func (o *NiatelemetryHcloudDetails) SetRecordVersion(v string) {
	o.RecordVersion = &v
}

// GetRouter returns the Router field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NiatelemetryHcloudDetails) GetRouter() []NiatelemetryCloudRoutersElement {
	if o == nil {
		var ret []NiatelemetryCloudRoutersElement
		return ret
	}
	return o.Router
}

// GetRouterOk returns a tuple with the Router field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NiatelemetryHcloudDetails) GetRouterOk() ([]NiatelemetryCloudRoutersElement, bool) {
	if o == nil || o.Router == nil {
		return nil, false
	}
	return o.Router, true
}

// HasRouter returns a boolean if a field has been set.
func (o *NiatelemetryHcloudDetails) HasRouter() bool {
	if o != nil && o.Router != nil {
		return true
	}

	return false
}

// SetRouter gets a reference to the given []NiatelemetryCloudRoutersElement and assigns it to the Router field.
func (o *NiatelemetryHcloudDetails) SetRouter(v []NiatelemetryCloudRoutersElement) {
	o.Router = v
}

// GetRouterCount returns the RouterCount field value if set, zero value otherwise.
func (o *NiatelemetryHcloudDetails) GetRouterCount() int64 {
	if o == nil || o.RouterCount == nil {
		var ret int64
		return ret
	}
	return *o.RouterCount
}

// GetRouterCountOk returns a tuple with the RouterCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NiatelemetryHcloudDetails) GetRouterCountOk() (*int64, bool) {
	if o == nil || o.RouterCount == nil {
		return nil, false
	}
	return o.RouterCount, true
}

// HasRouterCount returns a boolean if a field has been set.
func (o *NiatelemetryHcloudDetails) HasRouterCount() bool {
	if o != nil && o.RouterCount != nil {
		return true
	}

	return false
}

// SetRouterCount gets a reference to the given int64 and assigns it to the RouterCount field.
func (o *NiatelemetryHcloudDetails) SetRouterCount(v int64) {
	o.RouterCount = &v
}

// GetSiteName returns the SiteName field value if set, zero value otherwise.
func (o *NiatelemetryHcloudDetails) GetSiteName() string {
	if o == nil || o.SiteName == nil {
		var ret string
		return ret
	}
	return *o.SiteName
}

// GetSiteNameOk returns a tuple with the SiteName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NiatelemetryHcloudDetails) GetSiteNameOk() (*string, bool) {
	if o == nil || o.SiteName == nil {
		return nil, false
	}
	return o.SiteName, true
}

// HasSiteName returns a boolean if a field has been set.
func (o *NiatelemetryHcloudDetails) HasSiteName() bool {
	if o != nil && o.SiteName != nil {
		return true
	}

	return false
}

// SetSiteName gets a reference to the given string and assigns it to the SiteName field.
func (o *NiatelemetryHcloudDetails) SetSiteName(v string) {
	o.SiteName = &v
}

// GetSubnetsAddress returns the SubnetsAddress field value if set, zero value otherwise.
func (o *NiatelemetryHcloudDetails) GetSubnetsAddress() string {
	if o == nil || o.SubnetsAddress == nil {
		var ret string
		return ret
	}
	return *o.SubnetsAddress
}

// GetSubnetsAddressOk returns a tuple with the SubnetsAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NiatelemetryHcloudDetails) GetSubnetsAddressOk() (*string, bool) {
	if o == nil || o.SubnetsAddress == nil {
		return nil, false
	}
	return o.SubnetsAddress, true
}

// HasSubnetsAddress returns a boolean if a field has been set.
func (o *NiatelemetryHcloudDetails) HasSubnetsAddress() bool {
	if o != nil && o.SubnetsAddress != nil {
		return true
	}

	return false
}

// SetSubnetsAddress gets a reference to the given string and assigns it to the SubnetsAddress field.
func (o *NiatelemetryHcloudDetails) SetSubnetsAddress(v string) {
	o.SubnetsAddress = &v
}

// GetSubnetsCount returns the SubnetsCount field value if set, zero value otherwise.
func (o *NiatelemetryHcloudDetails) GetSubnetsCount() int64 {
	if o == nil || o.SubnetsCount == nil {
		var ret int64
		return ret
	}
	return *o.SubnetsCount
}

// GetSubnetsCountOk returns a tuple with the SubnetsCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NiatelemetryHcloudDetails) GetSubnetsCountOk() (*int64, bool) {
	if o == nil || o.SubnetsCount == nil {
		return nil, false
	}
	return o.SubnetsCount, true
}

// HasSubnetsCount returns a boolean if a field has been set.
func (o *NiatelemetryHcloudDetails) HasSubnetsCount() bool {
	if o != nil && o.SubnetsCount != nil {
		return true
	}

	return false
}

// SetSubnetsCount gets a reference to the given int64 and assigns it to the SubnetsCount field.
func (o *NiatelemetryHcloudDetails) SetSubnetsCount(v int64) {
	o.SubnetsCount = &v
}

// GetTransitGatewaysCount returns the TransitGatewaysCount field value if set, zero value otherwise.
func (o *NiatelemetryHcloudDetails) GetTransitGatewaysCount() int64 {
	if o == nil || o.TransitGatewaysCount == nil {
		var ret int64
		return ret
	}
	return *o.TransitGatewaysCount
}

// GetTransitGatewaysCountOk returns a tuple with the TransitGatewaysCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NiatelemetryHcloudDetails) GetTransitGatewaysCountOk() (*int64, bool) {
	if o == nil || o.TransitGatewaysCount == nil {
		return nil, false
	}
	return o.TransitGatewaysCount, true
}

// HasTransitGatewaysCount returns a boolean if a field has been set.
func (o *NiatelemetryHcloudDetails) HasTransitGatewaysCount() bool {
	if o != nil && o.TransitGatewaysCount != nil {
		return true
	}

	return false
}

// SetTransitGatewaysCount gets a reference to the given int64 and assigns it to the TransitGatewaysCount field.
func (o *NiatelemetryHcloudDetails) SetTransitGatewaysCount(v int64) {
	o.TransitGatewaysCount = &v
}

// GetVpcCount returns the VpcCount field value if set, zero value otherwise.
func (o *NiatelemetryHcloudDetails) GetVpcCount() int64 {
	if o == nil || o.VpcCount == nil {
		var ret int64
		return ret
	}
	return *o.VpcCount
}

// GetVpcCountOk returns a tuple with the VpcCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NiatelemetryHcloudDetails) GetVpcCountOk() (*int64, bool) {
	if o == nil || o.VpcCount == nil {
		return nil, false
	}
	return o.VpcCount, true
}

// HasVpcCount returns a boolean if a field has been set.
func (o *NiatelemetryHcloudDetails) HasVpcCount() bool {
	if o != nil && o.VpcCount != nil {
		return true
	}

	return false
}

// SetVpcCount gets a reference to the given int64 and assigns it to the VpcCount field.
func (o *NiatelemetryHcloudDetails) SetVpcCount(v int64) {
	o.VpcCount = &v
}

// GetVpcCountGcp returns the VpcCountGcp field value if set, zero value otherwise.
func (o *NiatelemetryHcloudDetails) GetVpcCountGcp() int64 {
	if o == nil || o.VpcCountGcp == nil {
		var ret int64
		return ret
	}
	return *o.VpcCountGcp
}

// GetVpcCountGcpOk returns a tuple with the VpcCountGcp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NiatelemetryHcloudDetails) GetVpcCountGcpOk() (*int64, bool) {
	if o == nil || o.VpcCountGcp == nil {
		return nil, false
	}
	return o.VpcCountGcp, true
}

// HasVpcCountGcp returns a boolean if a field has been set.
func (o *NiatelemetryHcloudDetails) HasVpcCountGcp() bool {
	if o != nil && o.VpcCountGcp != nil {
		return true
	}

	return false
}

// SetVpcCountGcp gets a reference to the given int64 and assigns it to the VpcCountGcp field.
func (o *NiatelemetryHcloudDetails) SetVpcCountGcp(v int64) {
	o.VpcCountGcp = &v
}

// GetRegisteredDevice returns the RegisteredDevice field value if set, zero value otherwise.
func (o *NiatelemetryHcloudDetails) GetRegisteredDevice() AssetDeviceRegistrationRelationship {
	if o == nil || o.RegisteredDevice == nil {
		var ret AssetDeviceRegistrationRelationship
		return ret
	}
	return *o.RegisteredDevice
}

// GetRegisteredDeviceOk returns a tuple with the RegisteredDevice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NiatelemetryHcloudDetails) GetRegisteredDeviceOk() (*AssetDeviceRegistrationRelationship, bool) {
	if o == nil || o.RegisteredDevice == nil {
		return nil, false
	}
	return o.RegisteredDevice, true
}

// HasRegisteredDevice returns a boolean if a field has been set.
func (o *NiatelemetryHcloudDetails) HasRegisteredDevice() bool {
	if o != nil && o.RegisteredDevice != nil {
		return true
	}

	return false
}

// SetRegisteredDevice gets a reference to the given AssetDeviceRegistrationRelationship and assigns it to the RegisteredDevice field.
func (o *NiatelemetryHcloudDetails) SetRegisteredDevice(v AssetDeviceRegistrationRelationship) {
	o.RegisteredDevice = &v
}

func (o NiatelemetryHcloudDetails) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	serializedMoBaseMo, errMoBaseMo := json.Marshal(o.MoBaseMo)
	if errMoBaseMo != nil {
		return []byte{}, errMoBaseMo
	}
	errMoBaseMo = json.Unmarshal([]byte(serializedMoBaseMo), &toSerialize)
	if errMoBaseMo != nil {
		return []byte{}, errMoBaseMo
	}
	if true {
		toSerialize["ClassId"] = o.ClassId
	}
	if true {
		toSerialize["ObjectType"] = o.ObjectType
	}
	if o.Dn != nil {
		toSerialize["Dn"] = o.Dn
	}
	if o.EpgCount != nil {
		toSerialize["EpgCount"] = o.EpgCount
	}
	if o.RecordType != nil {
		toSerialize["RecordType"] = o.RecordType
	}
	if o.RecordVersion != nil {
		toSerialize["RecordVersion"] = o.RecordVersion
	}
	if o.Router != nil {
		toSerialize["Router"] = o.Router
	}
	if o.RouterCount != nil {
		toSerialize["RouterCount"] = o.RouterCount
	}
	if o.SiteName != nil {
		toSerialize["SiteName"] = o.SiteName
	}
	if o.SubnetsAddress != nil {
		toSerialize["SubnetsAddress"] = o.SubnetsAddress
	}
	if o.SubnetsCount != nil {
		toSerialize["SubnetsCount"] = o.SubnetsCount
	}
	if o.TransitGatewaysCount != nil {
		toSerialize["TransitGatewaysCount"] = o.TransitGatewaysCount
	}
	if o.VpcCount != nil {
		toSerialize["VpcCount"] = o.VpcCount
	}
	if o.VpcCountGcp != nil {
		toSerialize["VpcCountGcp"] = o.VpcCountGcp
	}
	if o.RegisteredDevice != nil {
		toSerialize["RegisteredDevice"] = o.RegisteredDevice
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *NiatelemetryHcloudDetails) UnmarshalJSON(bytes []byte) (err error) {
	type NiatelemetryHcloudDetailsWithoutEmbeddedStruct struct {
		// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.
		ClassId string `json:"ClassId"`
		// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
		ObjectType string `json:"ObjectType"`
		// Dn for the inventories present.
		Dn *string `json:"Dn,omitempty"`
		// Returns the total number of EPGs deployed.
		EpgCount *int64 `json:"EpgCount,omitempty"`
		// Type of record DCNM / APIC / SE. This determines the type of platform where inventory was collected.
		RecordType *string `json:"RecordType,omitempty"`
		// Version of record being pushed. This determines what was the API version for data available from the device.
		RecordVersion *string                           `json:"RecordVersion,omitempty"`
		Router        []NiatelemetryCloudRoutersElement `json:"Router,omitempty"`
		// Returns the total number of Cisco Cloud Routers deployed.
		RouterCount *int64 `json:"RouterCount,omitempty"`
		// Name of the APIC site from which this data is being collected.
		SiteName *string `json:"SiteName,omitempty"`
		// Returns the IP addresses of the subnets.
		SubnetsAddress *string `json:"SubnetsAddress,omitempty"`
		// Returns the total number of subnets deployed.
		SubnetsCount *int64 `json:"SubnetsCount,omitempty"`
		// Returns the total number of Transit Gateways deployed.
		TransitGatewaysCount *int64 `json:"TransitGatewaysCount,omitempty"`
		// Returns the total number of VPCs deployed in Azure/AWS platforms.
		VpcCount *int64 `json:"VpcCount,omitempty"`
		// Returns the total number of VPCs deployed in GCP.
		VpcCountGcp      *int64                               `json:"VpcCountGcp,omitempty"`
		RegisteredDevice *AssetDeviceRegistrationRelationship `json:"RegisteredDevice,omitempty"`
	}

	varNiatelemetryHcloudDetailsWithoutEmbeddedStruct := NiatelemetryHcloudDetailsWithoutEmbeddedStruct{}

	err = json.Unmarshal(bytes, &varNiatelemetryHcloudDetailsWithoutEmbeddedStruct)
	if err == nil {
		varNiatelemetryHcloudDetails := _NiatelemetryHcloudDetails{}
		varNiatelemetryHcloudDetails.ClassId = varNiatelemetryHcloudDetailsWithoutEmbeddedStruct.ClassId
		varNiatelemetryHcloudDetails.ObjectType = varNiatelemetryHcloudDetailsWithoutEmbeddedStruct.ObjectType
		varNiatelemetryHcloudDetails.Dn = varNiatelemetryHcloudDetailsWithoutEmbeddedStruct.Dn
		varNiatelemetryHcloudDetails.EpgCount = varNiatelemetryHcloudDetailsWithoutEmbeddedStruct.EpgCount
		varNiatelemetryHcloudDetails.RecordType = varNiatelemetryHcloudDetailsWithoutEmbeddedStruct.RecordType
		varNiatelemetryHcloudDetails.RecordVersion = varNiatelemetryHcloudDetailsWithoutEmbeddedStruct.RecordVersion
		varNiatelemetryHcloudDetails.Router = varNiatelemetryHcloudDetailsWithoutEmbeddedStruct.Router
		varNiatelemetryHcloudDetails.RouterCount = varNiatelemetryHcloudDetailsWithoutEmbeddedStruct.RouterCount
		varNiatelemetryHcloudDetails.SiteName = varNiatelemetryHcloudDetailsWithoutEmbeddedStruct.SiteName
		varNiatelemetryHcloudDetails.SubnetsAddress = varNiatelemetryHcloudDetailsWithoutEmbeddedStruct.SubnetsAddress
		varNiatelemetryHcloudDetails.SubnetsCount = varNiatelemetryHcloudDetailsWithoutEmbeddedStruct.SubnetsCount
		varNiatelemetryHcloudDetails.TransitGatewaysCount = varNiatelemetryHcloudDetailsWithoutEmbeddedStruct.TransitGatewaysCount
		varNiatelemetryHcloudDetails.VpcCount = varNiatelemetryHcloudDetailsWithoutEmbeddedStruct.VpcCount
		varNiatelemetryHcloudDetails.VpcCountGcp = varNiatelemetryHcloudDetailsWithoutEmbeddedStruct.VpcCountGcp
		varNiatelemetryHcloudDetails.RegisteredDevice = varNiatelemetryHcloudDetailsWithoutEmbeddedStruct.RegisteredDevice
		*o = NiatelemetryHcloudDetails(varNiatelemetryHcloudDetails)
	} else {
		return err
	}

	varNiatelemetryHcloudDetails := _NiatelemetryHcloudDetails{}

	err = json.Unmarshal(bytes, &varNiatelemetryHcloudDetails)
	if err == nil {
		o.MoBaseMo = varNiatelemetryHcloudDetails.MoBaseMo
	} else {
		return err
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "ClassId")
		delete(additionalProperties, "ObjectType")
		delete(additionalProperties, "Dn")
		delete(additionalProperties, "EpgCount")
		delete(additionalProperties, "RecordType")
		delete(additionalProperties, "RecordVersion")
		delete(additionalProperties, "Router")
		delete(additionalProperties, "RouterCount")
		delete(additionalProperties, "SiteName")
		delete(additionalProperties, "SubnetsAddress")
		delete(additionalProperties, "SubnetsCount")
		delete(additionalProperties, "TransitGatewaysCount")
		delete(additionalProperties, "VpcCount")
		delete(additionalProperties, "VpcCountGcp")
		delete(additionalProperties, "RegisteredDevice")

		// remove fields from embedded structs
		reflectMoBaseMo := reflect.ValueOf(o.MoBaseMo)
		for i := 0; i < reflectMoBaseMo.Type().NumField(); i++ {
			t := reflectMoBaseMo.Type().Field(i)

			if jsonTag := t.Tag.Get("json"); jsonTag != "" {
				fieldName := ""
				if commaIdx := strings.Index(jsonTag, ","); commaIdx > 0 {
					fieldName = jsonTag[:commaIdx]
				} else {
					fieldName = jsonTag
				}
				if fieldName != "AdditionalProperties" {
					delete(additionalProperties, fieldName)
				}
			}
		}

		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableNiatelemetryHcloudDetails struct {
	value *NiatelemetryHcloudDetails
	isSet bool
}

func (v NullableNiatelemetryHcloudDetails) Get() *NiatelemetryHcloudDetails {
	return v.value
}

func (v *NullableNiatelemetryHcloudDetails) Set(val *NiatelemetryHcloudDetails) {
	v.value = val
	v.isSet = true
}

func (v NullableNiatelemetryHcloudDetails) IsSet() bool {
	return v.isSet
}

func (v *NullableNiatelemetryHcloudDetails) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNiatelemetryHcloudDetails(val *NiatelemetryHcloudDetails) *NullableNiatelemetryHcloudDetails {
	return &NullableNiatelemetryHcloudDetails{value: val, isSet: true}
}

func (v NullableNiatelemetryHcloudDetails) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNiatelemetryHcloudDetails) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
