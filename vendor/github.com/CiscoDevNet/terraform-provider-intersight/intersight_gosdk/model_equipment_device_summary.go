/*
Cisco Intersight

Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations. The Intersight OpenAPI document defines the complete set of properties that are returned in the HTTP response. From that perspective, a client can expect that no additional properties are returned, unless these properties are explicitly defined in the OpenAPI document. However, when a client uses an older version of the Intersight OpenAPI document, the server may send additional properties because the software is more recent than the client. In that case, the client may receive properties that it does not know about. Some generated SDKs perform a strict validation of the HTTP response body against the OpenAPI document.

API version: 1.0.11-18775
Contact: intersight@cisco.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package intersight

import (
	"encoding/json"
	"fmt"
	"reflect"
	"strings"
)

// checks if the EquipmentDeviceSummary type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EquipmentDeviceSummary{}

// EquipmentDeviceSummary Aggregation of properties pertaining to different inventory MOs.
type EquipmentDeviceSummary struct {
	MoBaseMo
	// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.
	ClassId string `json:"ClassId"`
	// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
	ObjectType string `json:"ObjectType"`
	// The distinguished name that unambiguously identifies an object in the system.
	Dn *string `json:"Dn,omitempty"`
	// This field identifies the model of the given component.
	Model *string `json:"Model,omitempty"`
	// This field identifies the serial number of the given component.
	Serial *string `json:"Serial,omitempty"`
	// The source object type of the given component.
	SourceObjectType *string                             `json:"SourceObjectType,omitempty"`
	ComputeBlade     NullableComputeBladeRelationship    `json:"ComputeBlade,omitempty"`
	ComputeRackUnit  NullableComputeRackUnitRelationship `json:"ComputeRackUnit,omitempty"`
	// An array of relationships to moBaseMo resources.
	CustomPermissionResources []MoBaseMoRelationship                      `json:"CustomPermissionResources,omitempty"`
	EquipmentChassis          NullableEquipmentChassisRelationship        `json:"EquipmentChassis,omitempty"`
	EquipmentFex              NullableEquipmentFexRelationship            `json:"EquipmentFex,omitempty"`
	InventoryDeviceInfo       NullableInventoryDeviceInfoRelationship     `json:"InventoryDeviceInfo,omitempty"`
	InventoryParent           NullableMoBaseMoRelationship                `json:"InventoryParent,omitempty"`
	RegisteredDevice          NullableAssetDeviceRegistrationRelationship `json:"RegisteredDevice,omitempty"`
	AdditionalProperties      map[string]interface{}
}

type _EquipmentDeviceSummary EquipmentDeviceSummary

// NewEquipmentDeviceSummary instantiates a new EquipmentDeviceSummary object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEquipmentDeviceSummary(classId string, objectType string) *EquipmentDeviceSummary {
	this := EquipmentDeviceSummary{}
	this.ClassId = classId
	this.ObjectType = objectType
	return &this
}

// NewEquipmentDeviceSummaryWithDefaults instantiates a new EquipmentDeviceSummary object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEquipmentDeviceSummaryWithDefaults() *EquipmentDeviceSummary {
	this := EquipmentDeviceSummary{}
	var classId string = "equipment.DeviceSummary"
	this.ClassId = classId
	var objectType string = "equipment.DeviceSummary"
	this.ObjectType = objectType
	return &this
}

// GetClassId returns the ClassId field value
func (o *EquipmentDeviceSummary) GetClassId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ClassId
}

// GetClassIdOk returns a tuple with the ClassId field value
// and a boolean to check if the value has been set.
func (o *EquipmentDeviceSummary) GetClassIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ClassId, true
}

// SetClassId sets field value
func (o *EquipmentDeviceSummary) SetClassId(v string) {
	o.ClassId = v
}

// GetDefaultClassId returns the default value "equipment.DeviceSummary" of the ClassId field.
func (o *EquipmentDeviceSummary) GetDefaultClassId() interface{} {
	return "equipment.DeviceSummary"
}

// GetObjectType returns the ObjectType field value
func (o *EquipmentDeviceSummary) GetObjectType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ObjectType
}

// GetObjectTypeOk returns a tuple with the ObjectType field value
// and a boolean to check if the value has been set.
func (o *EquipmentDeviceSummary) GetObjectTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ObjectType, true
}

// SetObjectType sets field value
func (o *EquipmentDeviceSummary) SetObjectType(v string) {
	o.ObjectType = v
}

// GetDefaultObjectType returns the default value "equipment.DeviceSummary" of the ObjectType field.
func (o *EquipmentDeviceSummary) GetDefaultObjectType() interface{} {
	return "equipment.DeviceSummary"
}

// GetDn returns the Dn field value if set, zero value otherwise.
func (o *EquipmentDeviceSummary) GetDn() string {
	if o == nil || IsNil(o.Dn) {
		var ret string
		return ret
	}
	return *o.Dn
}

// GetDnOk returns a tuple with the Dn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EquipmentDeviceSummary) GetDnOk() (*string, bool) {
	if o == nil || IsNil(o.Dn) {
		return nil, false
	}
	return o.Dn, true
}

// HasDn returns a boolean if a field has been set.
func (o *EquipmentDeviceSummary) HasDn() bool {
	if o != nil && !IsNil(o.Dn) {
		return true
	}

	return false
}

// SetDn gets a reference to the given string and assigns it to the Dn field.
func (o *EquipmentDeviceSummary) SetDn(v string) {
	o.Dn = &v
}

// GetModel returns the Model field value if set, zero value otherwise.
func (o *EquipmentDeviceSummary) GetModel() string {
	if o == nil || IsNil(o.Model) {
		var ret string
		return ret
	}
	return *o.Model
}

// GetModelOk returns a tuple with the Model field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EquipmentDeviceSummary) GetModelOk() (*string, bool) {
	if o == nil || IsNil(o.Model) {
		return nil, false
	}
	return o.Model, true
}

// HasModel returns a boolean if a field has been set.
func (o *EquipmentDeviceSummary) HasModel() bool {
	if o != nil && !IsNil(o.Model) {
		return true
	}

	return false
}

// SetModel gets a reference to the given string and assigns it to the Model field.
func (o *EquipmentDeviceSummary) SetModel(v string) {
	o.Model = &v
}

// GetSerial returns the Serial field value if set, zero value otherwise.
func (o *EquipmentDeviceSummary) GetSerial() string {
	if o == nil || IsNil(o.Serial) {
		var ret string
		return ret
	}
	return *o.Serial
}

// GetSerialOk returns a tuple with the Serial field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EquipmentDeviceSummary) GetSerialOk() (*string, bool) {
	if o == nil || IsNil(o.Serial) {
		return nil, false
	}
	return o.Serial, true
}

// HasSerial returns a boolean if a field has been set.
func (o *EquipmentDeviceSummary) HasSerial() bool {
	if o != nil && !IsNil(o.Serial) {
		return true
	}

	return false
}

// SetSerial gets a reference to the given string and assigns it to the Serial field.
func (o *EquipmentDeviceSummary) SetSerial(v string) {
	o.Serial = &v
}

// GetSourceObjectType returns the SourceObjectType field value if set, zero value otherwise.
func (o *EquipmentDeviceSummary) GetSourceObjectType() string {
	if o == nil || IsNil(o.SourceObjectType) {
		var ret string
		return ret
	}
	return *o.SourceObjectType
}

// GetSourceObjectTypeOk returns a tuple with the SourceObjectType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EquipmentDeviceSummary) GetSourceObjectTypeOk() (*string, bool) {
	if o == nil || IsNil(o.SourceObjectType) {
		return nil, false
	}
	return o.SourceObjectType, true
}

// HasSourceObjectType returns a boolean if a field has been set.
func (o *EquipmentDeviceSummary) HasSourceObjectType() bool {
	if o != nil && !IsNil(o.SourceObjectType) {
		return true
	}

	return false
}

// SetSourceObjectType gets a reference to the given string and assigns it to the SourceObjectType field.
func (o *EquipmentDeviceSummary) SetSourceObjectType(v string) {
	o.SourceObjectType = &v
}

// GetComputeBlade returns the ComputeBlade field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EquipmentDeviceSummary) GetComputeBlade() ComputeBladeRelationship {
	if o == nil || IsNil(o.ComputeBlade.Get()) {
		var ret ComputeBladeRelationship
		return ret
	}
	return *o.ComputeBlade.Get()
}

// GetComputeBladeOk returns a tuple with the ComputeBlade field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EquipmentDeviceSummary) GetComputeBladeOk() (*ComputeBladeRelationship, bool) {
	if o == nil {
		return nil, false
	}
	return o.ComputeBlade.Get(), o.ComputeBlade.IsSet()
}

// HasComputeBlade returns a boolean if a field has been set.
func (o *EquipmentDeviceSummary) HasComputeBlade() bool {
	if o != nil && o.ComputeBlade.IsSet() {
		return true
	}

	return false
}

// SetComputeBlade gets a reference to the given NullableComputeBladeRelationship and assigns it to the ComputeBlade field.
func (o *EquipmentDeviceSummary) SetComputeBlade(v ComputeBladeRelationship) {
	o.ComputeBlade.Set(&v)
}

// SetComputeBladeNil sets the value for ComputeBlade to be an explicit nil
func (o *EquipmentDeviceSummary) SetComputeBladeNil() {
	o.ComputeBlade.Set(nil)
}

// UnsetComputeBlade ensures that no value is present for ComputeBlade, not even an explicit nil
func (o *EquipmentDeviceSummary) UnsetComputeBlade() {
	o.ComputeBlade.Unset()
}

// GetComputeRackUnit returns the ComputeRackUnit field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EquipmentDeviceSummary) GetComputeRackUnit() ComputeRackUnitRelationship {
	if o == nil || IsNil(o.ComputeRackUnit.Get()) {
		var ret ComputeRackUnitRelationship
		return ret
	}
	return *o.ComputeRackUnit.Get()
}

// GetComputeRackUnitOk returns a tuple with the ComputeRackUnit field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EquipmentDeviceSummary) GetComputeRackUnitOk() (*ComputeRackUnitRelationship, bool) {
	if o == nil {
		return nil, false
	}
	return o.ComputeRackUnit.Get(), o.ComputeRackUnit.IsSet()
}

// HasComputeRackUnit returns a boolean if a field has been set.
func (o *EquipmentDeviceSummary) HasComputeRackUnit() bool {
	if o != nil && o.ComputeRackUnit.IsSet() {
		return true
	}

	return false
}

// SetComputeRackUnit gets a reference to the given NullableComputeRackUnitRelationship and assigns it to the ComputeRackUnit field.
func (o *EquipmentDeviceSummary) SetComputeRackUnit(v ComputeRackUnitRelationship) {
	o.ComputeRackUnit.Set(&v)
}

// SetComputeRackUnitNil sets the value for ComputeRackUnit to be an explicit nil
func (o *EquipmentDeviceSummary) SetComputeRackUnitNil() {
	o.ComputeRackUnit.Set(nil)
}

// UnsetComputeRackUnit ensures that no value is present for ComputeRackUnit, not even an explicit nil
func (o *EquipmentDeviceSummary) UnsetComputeRackUnit() {
	o.ComputeRackUnit.Unset()
}

// GetCustomPermissionResources returns the CustomPermissionResources field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EquipmentDeviceSummary) GetCustomPermissionResources() []MoBaseMoRelationship {
	if o == nil {
		var ret []MoBaseMoRelationship
		return ret
	}
	return o.CustomPermissionResources
}

// GetCustomPermissionResourcesOk returns a tuple with the CustomPermissionResources field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EquipmentDeviceSummary) GetCustomPermissionResourcesOk() ([]MoBaseMoRelationship, bool) {
	if o == nil || IsNil(o.CustomPermissionResources) {
		return nil, false
	}
	return o.CustomPermissionResources, true
}

// HasCustomPermissionResources returns a boolean if a field has been set.
func (o *EquipmentDeviceSummary) HasCustomPermissionResources() bool {
	if o != nil && !IsNil(o.CustomPermissionResources) {
		return true
	}

	return false
}

// SetCustomPermissionResources gets a reference to the given []MoBaseMoRelationship and assigns it to the CustomPermissionResources field.
func (o *EquipmentDeviceSummary) SetCustomPermissionResources(v []MoBaseMoRelationship) {
	o.CustomPermissionResources = v
}

// GetEquipmentChassis returns the EquipmentChassis field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EquipmentDeviceSummary) GetEquipmentChassis() EquipmentChassisRelationship {
	if o == nil || IsNil(o.EquipmentChassis.Get()) {
		var ret EquipmentChassisRelationship
		return ret
	}
	return *o.EquipmentChassis.Get()
}

// GetEquipmentChassisOk returns a tuple with the EquipmentChassis field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EquipmentDeviceSummary) GetEquipmentChassisOk() (*EquipmentChassisRelationship, bool) {
	if o == nil {
		return nil, false
	}
	return o.EquipmentChassis.Get(), o.EquipmentChassis.IsSet()
}

// HasEquipmentChassis returns a boolean if a field has been set.
func (o *EquipmentDeviceSummary) HasEquipmentChassis() bool {
	if o != nil && o.EquipmentChassis.IsSet() {
		return true
	}

	return false
}

// SetEquipmentChassis gets a reference to the given NullableEquipmentChassisRelationship and assigns it to the EquipmentChassis field.
func (o *EquipmentDeviceSummary) SetEquipmentChassis(v EquipmentChassisRelationship) {
	o.EquipmentChassis.Set(&v)
}

// SetEquipmentChassisNil sets the value for EquipmentChassis to be an explicit nil
func (o *EquipmentDeviceSummary) SetEquipmentChassisNil() {
	o.EquipmentChassis.Set(nil)
}

// UnsetEquipmentChassis ensures that no value is present for EquipmentChassis, not even an explicit nil
func (o *EquipmentDeviceSummary) UnsetEquipmentChassis() {
	o.EquipmentChassis.Unset()
}

// GetEquipmentFex returns the EquipmentFex field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EquipmentDeviceSummary) GetEquipmentFex() EquipmentFexRelationship {
	if o == nil || IsNil(o.EquipmentFex.Get()) {
		var ret EquipmentFexRelationship
		return ret
	}
	return *o.EquipmentFex.Get()
}

// GetEquipmentFexOk returns a tuple with the EquipmentFex field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EquipmentDeviceSummary) GetEquipmentFexOk() (*EquipmentFexRelationship, bool) {
	if o == nil {
		return nil, false
	}
	return o.EquipmentFex.Get(), o.EquipmentFex.IsSet()
}

// HasEquipmentFex returns a boolean if a field has been set.
func (o *EquipmentDeviceSummary) HasEquipmentFex() bool {
	if o != nil && o.EquipmentFex.IsSet() {
		return true
	}

	return false
}

// SetEquipmentFex gets a reference to the given NullableEquipmentFexRelationship and assigns it to the EquipmentFex field.
func (o *EquipmentDeviceSummary) SetEquipmentFex(v EquipmentFexRelationship) {
	o.EquipmentFex.Set(&v)
}

// SetEquipmentFexNil sets the value for EquipmentFex to be an explicit nil
func (o *EquipmentDeviceSummary) SetEquipmentFexNil() {
	o.EquipmentFex.Set(nil)
}

// UnsetEquipmentFex ensures that no value is present for EquipmentFex, not even an explicit nil
func (o *EquipmentDeviceSummary) UnsetEquipmentFex() {
	o.EquipmentFex.Unset()
}

// GetInventoryDeviceInfo returns the InventoryDeviceInfo field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EquipmentDeviceSummary) GetInventoryDeviceInfo() InventoryDeviceInfoRelationship {
	if o == nil || IsNil(o.InventoryDeviceInfo.Get()) {
		var ret InventoryDeviceInfoRelationship
		return ret
	}
	return *o.InventoryDeviceInfo.Get()
}

// GetInventoryDeviceInfoOk returns a tuple with the InventoryDeviceInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EquipmentDeviceSummary) GetInventoryDeviceInfoOk() (*InventoryDeviceInfoRelationship, bool) {
	if o == nil {
		return nil, false
	}
	return o.InventoryDeviceInfo.Get(), o.InventoryDeviceInfo.IsSet()
}

// HasInventoryDeviceInfo returns a boolean if a field has been set.
func (o *EquipmentDeviceSummary) HasInventoryDeviceInfo() bool {
	if o != nil && o.InventoryDeviceInfo.IsSet() {
		return true
	}

	return false
}

// SetInventoryDeviceInfo gets a reference to the given NullableInventoryDeviceInfoRelationship and assigns it to the InventoryDeviceInfo field.
func (o *EquipmentDeviceSummary) SetInventoryDeviceInfo(v InventoryDeviceInfoRelationship) {
	o.InventoryDeviceInfo.Set(&v)
}

// SetInventoryDeviceInfoNil sets the value for InventoryDeviceInfo to be an explicit nil
func (o *EquipmentDeviceSummary) SetInventoryDeviceInfoNil() {
	o.InventoryDeviceInfo.Set(nil)
}

// UnsetInventoryDeviceInfo ensures that no value is present for InventoryDeviceInfo, not even an explicit nil
func (o *EquipmentDeviceSummary) UnsetInventoryDeviceInfo() {
	o.InventoryDeviceInfo.Unset()
}

// GetInventoryParent returns the InventoryParent field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EquipmentDeviceSummary) GetInventoryParent() MoBaseMoRelationship {
	if o == nil || IsNil(o.InventoryParent.Get()) {
		var ret MoBaseMoRelationship
		return ret
	}
	return *o.InventoryParent.Get()
}

// GetInventoryParentOk returns a tuple with the InventoryParent field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EquipmentDeviceSummary) GetInventoryParentOk() (*MoBaseMoRelationship, bool) {
	if o == nil {
		return nil, false
	}
	return o.InventoryParent.Get(), o.InventoryParent.IsSet()
}

// HasInventoryParent returns a boolean if a field has been set.
func (o *EquipmentDeviceSummary) HasInventoryParent() bool {
	if o != nil && o.InventoryParent.IsSet() {
		return true
	}

	return false
}

// SetInventoryParent gets a reference to the given NullableMoBaseMoRelationship and assigns it to the InventoryParent field.
func (o *EquipmentDeviceSummary) SetInventoryParent(v MoBaseMoRelationship) {
	o.InventoryParent.Set(&v)
}

// SetInventoryParentNil sets the value for InventoryParent to be an explicit nil
func (o *EquipmentDeviceSummary) SetInventoryParentNil() {
	o.InventoryParent.Set(nil)
}

// UnsetInventoryParent ensures that no value is present for InventoryParent, not even an explicit nil
func (o *EquipmentDeviceSummary) UnsetInventoryParent() {
	o.InventoryParent.Unset()
}

// GetRegisteredDevice returns the RegisteredDevice field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EquipmentDeviceSummary) GetRegisteredDevice() AssetDeviceRegistrationRelationship {
	if o == nil || IsNil(o.RegisteredDevice.Get()) {
		var ret AssetDeviceRegistrationRelationship
		return ret
	}
	return *o.RegisteredDevice.Get()
}

// GetRegisteredDeviceOk returns a tuple with the RegisteredDevice field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EquipmentDeviceSummary) GetRegisteredDeviceOk() (*AssetDeviceRegistrationRelationship, bool) {
	if o == nil {
		return nil, false
	}
	return o.RegisteredDevice.Get(), o.RegisteredDevice.IsSet()
}

// HasRegisteredDevice returns a boolean if a field has been set.
func (o *EquipmentDeviceSummary) HasRegisteredDevice() bool {
	if o != nil && o.RegisteredDevice.IsSet() {
		return true
	}

	return false
}

// SetRegisteredDevice gets a reference to the given NullableAssetDeviceRegistrationRelationship and assigns it to the RegisteredDevice field.
func (o *EquipmentDeviceSummary) SetRegisteredDevice(v AssetDeviceRegistrationRelationship) {
	o.RegisteredDevice.Set(&v)
}

// SetRegisteredDeviceNil sets the value for RegisteredDevice to be an explicit nil
func (o *EquipmentDeviceSummary) SetRegisteredDeviceNil() {
	o.RegisteredDevice.Set(nil)
}

// UnsetRegisteredDevice ensures that no value is present for RegisteredDevice, not even an explicit nil
func (o *EquipmentDeviceSummary) UnsetRegisteredDevice() {
	o.RegisteredDevice.Unset()
}

func (o EquipmentDeviceSummary) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EquipmentDeviceSummary) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	serializedMoBaseMo, errMoBaseMo := json.Marshal(o.MoBaseMo)
	if errMoBaseMo != nil {
		return map[string]interface{}{}, errMoBaseMo
	}
	errMoBaseMo = json.Unmarshal([]byte(serializedMoBaseMo), &toSerialize)
	if errMoBaseMo != nil {
		return map[string]interface{}{}, errMoBaseMo
	}
	if _, exists := toSerialize["ClassId"]; !exists {
		toSerialize["ClassId"] = o.GetDefaultClassId()
	}
	toSerialize["ClassId"] = o.ClassId
	if _, exists := toSerialize["ObjectType"]; !exists {
		toSerialize["ObjectType"] = o.GetDefaultObjectType()
	}
	toSerialize["ObjectType"] = o.ObjectType
	if !IsNil(o.Dn) {
		toSerialize["Dn"] = o.Dn
	}
	if !IsNil(o.Model) {
		toSerialize["Model"] = o.Model
	}
	if !IsNil(o.Serial) {
		toSerialize["Serial"] = o.Serial
	}
	if !IsNil(o.SourceObjectType) {
		toSerialize["SourceObjectType"] = o.SourceObjectType
	}
	if o.ComputeBlade.IsSet() {
		toSerialize["ComputeBlade"] = o.ComputeBlade.Get()
	}
	if o.ComputeRackUnit.IsSet() {
		toSerialize["ComputeRackUnit"] = o.ComputeRackUnit.Get()
	}
	if o.CustomPermissionResources != nil {
		toSerialize["CustomPermissionResources"] = o.CustomPermissionResources
	}
	if o.EquipmentChassis.IsSet() {
		toSerialize["EquipmentChassis"] = o.EquipmentChassis.Get()
	}
	if o.EquipmentFex.IsSet() {
		toSerialize["EquipmentFex"] = o.EquipmentFex.Get()
	}
	if o.InventoryDeviceInfo.IsSet() {
		toSerialize["InventoryDeviceInfo"] = o.InventoryDeviceInfo.Get()
	}
	if o.InventoryParent.IsSet() {
		toSerialize["InventoryParent"] = o.InventoryParent.Get()
	}
	if o.RegisteredDevice.IsSet() {
		toSerialize["RegisteredDevice"] = o.RegisteredDevice.Get()
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *EquipmentDeviceSummary) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"ClassId",
		"ObjectType",
	}

	// defaultValueFuncMap captures the default values for required properties.
	// These values are used when required properties are missing from the payload.
	defaultValueFuncMap := map[string]func() interface{}{
		"ClassId":    o.GetDefaultClassId,
		"ObjectType": o.GetDefaultObjectType,
	}
	var defaultValueApplied bool
	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			if _, ok := defaultValueFuncMap[requiredProperty]; ok {
				allProperties[requiredProperty] = defaultValueFuncMap[requiredProperty]()
				defaultValueApplied = true
			}
		}
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	if defaultValueApplied {
		data, err = json.Marshal(allProperties)
		if err != nil {
			return err
		}
	}
	type EquipmentDeviceSummaryWithoutEmbeddedStruct struct {
		// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.
		ClassId string `json:"ClassId"`
		// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
		ObjectType string `json:"ObjectType"`
		// The distinguished name that unambiguously identifies an object in the system.
		Dn *string `json:"Dn,omitempty"`
		// This field identifies the model of the given component.
		Model *string `json:"Model,omitempty"`
		// This field identifies the serial number of the given component.
		Serial *string `json:"Serial,omitempty"`
		// The source object type of the given component.
		SourceObjectType *string                             `json:"SourceObjectType,omitempty"`
		ComputeBlade     NullableComputeBladeRelationship    `json:"ComputeBlade,omitempty"`
		ComputeRackUnit  NullableComputeRackUnitRelationship `json:"ComputeRackUnit,omitempty"`
		// An array of relationships to moBaseMo resources.
		CustomPermissionResources []MoBaseMoRelationship                      `json:"CustomPermissionResources,omitempty"`
		EquipmentChassis          NullableEquipmentChassisRelationship        `json:"EquipmentChassis,omitempty"`
		EquipmentFex              NullableEquipmentFexRelationship            `json:"EquipmentFex,omitempty"`
		InventoryDeviceInfo       NullableInventoryDeviceInfoRelationship     `json:"InventoryDeviceInfo,omitempty"`
		InventoryParent           NullableMoBaseMoRelationship                `json:"InventoryParent,omitempty"`
		RegisteredDevice          NullableAssetDeviceRegistrationRelationship `json:"RegisteredDevice,omitempty"`
	}

	varEquipmentDeviceSummaryWithoutEmbeddedStruct := EquipmentDeviceSummaryWithoutEmbeddedStruct{}

	err = json.Unmarshal(data, &varEquipmentDeviceSummaryWithoutEmbeddedStruct)
	if err == nil {
		varEquipmentDeviceSummary := _EquipmentDeviceSummary{}
		varEquipmentDeviceSummary.ClassId = varEquipmentDeviceSummaryWithoutEmbeddedStruct.ClassId
		varEquipmentDeviceSummary.ObjectType = varEquipmentDeviceSummaryWithoutEmbeddedStruct.ObjectType
		varEquipmentDeviceSummary.Dn = varEquipmentDeviceSummaryWithoutEmbeddedStruct.Dn
		varEquipmentDeviceSummary.Model = varEquipmentDeviceSummaryWithoutEmbeddedStruct.Model
		varEquipmentDeviceSummary.Serial = varEquipmentDeviceSummaryWithoutEmbeddedStruct.Serial
		varEquipmentDeviceSummary.SourceObjectType = varEquipmentDeviceSummaryWithoutEmbeddedStruct.SourceObjectType
		varEquipmentDeviceSummary.ComputeBlade = varEquipmentDeviceSummaryWithoutEmbeddedStruct.ComputeBlade
		varEquipmentDeviceSummary.ComputeRackUnit = varEquipmentDeviceSummaryWithoutEmbeddedStruct.ComputeRackUnit
		varEquipmentDeviceSummary.CustomPermissionResources = varEquipmentDeviceSummaryWithoutEmbeddedStruct.CustomPermissionResources
		varEquipmentDeviceSummary.EquipmentChassis = varEquipmentDeviceSummaryWithoutEmbeddedStruct.EquipmentChassis
		varEquipmentDeviceSummary.EquipmentFex = varEquipmentDeviceSummaryWithoutEmbeddedStruct.EquipmentFex
		varEquipmentDeviceSummary.InventoryDeviceInfo = varEquipmentDeviceSummaryWithoutEmbeddedStruct.InventoryDeviceInfo
		varEquipmentDeviceSummary.InventoryParent = varEquipmentDeviceSummaryWithoutEmbeddedStruct.InventoryParent
		varEquipmentDeviceSummary.RegisteredDevice = varEquipmentDeviceSummaryWithoutEmbeddedStruct.RegisteredDevice
		*o = EquipmentDeviceSummary(varEquipmentDeviceSummary)
	} else {
		return err
	}

	varEquipmentDeviceSummary := _EquipmentDeviceSummary{}

	err = json.Unmarshal(data, &varEquipmentDeviceSummary)
	if err == nil {
		o.MoBaseMo = varEquipmentDeviceSummary.MoBaseMo
	} else {
		return err
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "ClassId")
		delete(additionalProperties, "ObjectType")
		delete(additionalProperties, "Dn")
		delete(additionalProperties, "Model")
		delete(additionalProperties, "Serial")
		delete(additionalProperties, "SourceObjectType")
		delete(additionalProperties, "ComputeBlade")
		delete(additionalProperties, "ComputeRackUnit")
		delete(additionalProperties, "CustomPermissionResources")
		delete(additionalProperties, "EquipmentChassis")
		delete(additionalProperties, "EquipmentFex")
		delete(additionalProperties, "InventoryDeviceInfo")
		delete(additionalProperties, "InventoryParent")
		delete(additionalProperties, "RegisteredDevice")

		// remove fields from embedded structs
		reflectMoBaseMo := reflect.ValueOf(o.MoBaseMo)
		for i := 0; i < reflectMoBaseMo.Type().NumField(); i++ {
			t := reflectMoBaseMo.Type().Field(i)

			if jsonTag := t.Tag.Get("json"); jsonTag != "" {
				fieldName := ""
				if commaIdx := strings.Index(jsonTag, ","); commaIdx > 0 {
					fieldName = jsonTag[:commaIdx]
				} else {
					fieldName = jsonTag
				}
				if fieldName != "AdditionalProperties" {
					delete(additionalProperties, fieldName)
				}
			}
		}

		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableEquipmentDeviceSummary struct {
	value *EquipmentDeviceSummary
	isSet bool
}

func (v NullableEquipmentDeviceSummary) Get() *EquipmentDeviceSummary {
	return v.value
}

func (v *NullableEquipmentDeviceSummary) Set(val *EquipmentDeviceSummary) {
	v.value = val
	v.isSet = true
}

func (v NullableEquipmentDeviceSummary) IsSet() bool {
	return v.isSet
}

func (v *NullableEquipmentDeviceSummary) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEquipmentDeviceSummary(val *EquipmentDeviceSummary) *NullableEquipmentDeviceSummary {
	return &NullableEquipmentDeviceSummary{value: val, isSet: true}
}

func (v NullableEquipmentDeviceSummary) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEquipmentDeviceSummary) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
