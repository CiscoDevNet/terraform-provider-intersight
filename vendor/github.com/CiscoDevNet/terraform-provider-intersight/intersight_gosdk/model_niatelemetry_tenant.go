/*
Cisco Intersight

Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations. The Intersight OpenAPI document defines the complete set of properties that are returned in the HTTP response. From that perspective, a client can expect that no additional properties are returned, unless these properties are explicitly defined in the OpenAPI document. However, when a client uses an older version of the Intersight OpenAPI document, the server may send additional properties because the software is more recent than the client. In that case, the client may receive properties that it does not know about. Some generated SDKs perform a strict validation of the HTTP response body against the OpenAPI document.

API version: 1.0.11-2024100405
Contact: intersight@cisco.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package intersight

import (
	"encoding/json"
	"fmt"
	"reflect"
	"strings"
)

// checks if the NiatelemetryTenant type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NiatelemetryTenant{}

// NiatelemetryTenant Object is available at Tenant scope.
type NiatelemetryTenant struct {
	MoBaseMo
	// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.
	ClassId string `json:"ClassId"`
	// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
	ObjectType string `json:"ObjectType"`
	// Number of Bidirectional Forwarding Detection bfdIfPol Model Objects.
	BfdIfPolCount *int64 `json:"BfdIfPolCount,omitempty"`
	// Number of objects with Bidirectional Forwarding Detection Interface Policy.
	BfdIfpCount *int64 `json:"BfdIfpCount,omitempty"`
	// Number of tenants with Dynamic Host Configuration Protocol enabled.
	DhcpRsProvCount *int64 `json:"DhcpRsProvCount,omitempty"`
	// Dn for the tenants present.
	Dn *string `json:"Dn,omitempty"`
	// Number of objects with First hop security. Checks for presence of IP source gaurd, dynamic arp inspection.
	FhsBdPolCount *int64 `json:"FhsBdPolCount,omitempty"`
	// Number of application profiles per tenant.
	FvApCount *int64 `json:"FvApCount,omitempty"`
	// Number of bridge domains with hardware proxy enabled per tenant.
	FvBdCount *int64 `json:"FvBdCount,omitempty"`
	// Number of bridge domain subnets per tenant.
	FvBdSubnetCount *int64 `json:"FvBdSubnetCount,omitempty"`
	// Number of bridge domains with ARP flodding disabled per tenant.
	FvBdnoArpCount *int64 `json:"FvBdnoArpCount,omitempty"`
	// Count of number of endpoints per tenant.
	FvCepCount *int64 `json:"FvCepCount,omitempty"`
	// Number of objects with First hop security. Checks for presence of IP source gaurd, dynamic arp inspection.
	FvRsBdToFhsCount *int64 `json:"FvRsBdToFhsCount,omitempty"`
	// Number of bridge domains connected to layer 3 out per tenant.
	FvRsBdToOutCount *int64 `json:"FvRsBdToOutCount,omitempty"`
	// Number of Multi-Site objects.
	FvSiteConnpCount *int64 `json:"FvSiteConnpCount,omitempty"`
	// Number of subnets per tenant.
	FvSubnetCount *int64 `json:"FvSubnetCount,omitempty"`
	// Number of IP static routes per tenant.
	IpStaticRouteCount *int64 `json:"IpStaticRouteCount,omitempty"`
	// Number of layer 3 multicasts.
	L3MulticastCount *int64 `json:"L3MulticastCount,omitempty"`
	// Number of layer 3 multicast CtxP.
	L3MulticastCtxCount *int64 `json:"L3MulticastCtxCount,omitempty"`
	// Number of layer 3 multicast IfP.
	L3MulticastIfCount *int64 `json:"L3MulticastIfCount,omitempty"`
	// Number of L3 out objects for the tenants present.
	L3outCount *int64 `json:"L3outCount,omitempty"`
	// Number of Quality Of Service Custom Policy.
	QosCustomPolCount *int64 `json:"QosCustomPolCount,omitempty"`
	// Type of record DCNM / APIC / SE. This determines the type of platform where inventory was collected.
	RecordType *string `json:"RecordType,omitempty"`
	// Version of record being pushed. This determines what was the API version for data available from the device.
	RecordVersion *string `json:"RecordVersion,omitempty"`
	// The Site name represents an APIC cluster. Service Engine can onboard multiple APIC clusters / sites.
	SiteName *string `json:"SiteName,omitempty"`
	// SSM property feature usage.
	Ssm *string `json:"Ssm,omitempty"`
	// Number of context-level ssm translate policies per tenant.
	SsmCount *int64 `json:"SsmCount,omitempty"`
	// Number of TCAM optimization enabled per tenant.
	TcamOptCount *int64 `json:"TcamOptCount,omitempty"`
	// Health of each tenant in the APIC.
	TenantHealth *int64 `json:"TenantHealth,omitempty"`
	// Number of ITrace route endpoint per tenant.
	TraceRouteEpCount *int64 `json:"TraceRouteEpCount,omitempty"`
	// Number of ITrace endpoint external routes per tenant.
	TraceRouteEpExtCount *int64 `json:"TraceRouteEpExtCount,omitempty"`
	// Number of ITrace external endpoint routes per tenant.
	TraceRouteExtEpCount *int64 `json:"TraceRouteExtEpCount,omitempty"`
	// Number of ITrace external routes per tenant.
	TraceRouteExtExtCount *int64 `json:"TraceRouteExtExtCount,omitempty"`
	// Number of objects with L4 to L7 Services graph.
	VnsAbsGraphCount *int64 `json:"VnsAbsGraphCount,omitempty"`
	// Number of objects with Policy Based Routing standby Node. Checks the Policy Based Routing backup policy.
	VnsBackupPolCount *int64 `json:"VnsBackupPolCount,omitempty"`
	// Number of objects with Policy Based Routing standby Node. Policy based redirect requires a destination to redirect traffic.
	VnsRedirectDestCount *int64 `json:"VnsRedirectDestCount,omitempty"`
	// Number of Policy Based Routing and Policy Based Service Insertion objects. Includes without L4-L7 package.
	VnsSvcRedirectPolCount *int64 `json:"VnsSvcRedirectPolCount,omitempty"`
	// Number of Vrfs per tenant.
	VrfCount *int64 `json:"VrfCount,omitempty"`
	// Number of Zoning Policy per tenant.
	VzBrCpCount *int64 `json:"VzBrCpCount,omitempty"`
	// Number of Client Contract between End Point Groups per tenant.
	VzRtConsCount *int64 `json:"VzRtConsCount,omitempty"`
	// Number of Client Contract between End Point Groups per tenant.
	VzRtProvCount        *int64                                      `json:"VzRtProvCount,omitempty"`
	RegisteredDevice     NullableAssetDeviceRegistrationRelationship `json:"RegisteredDevice,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _NiatelemetryTenant NiatelemetryTenant

// NewNiatelemetryTenant instantiates a new NiatelemetryTenant object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNiatelemetryTenant(classId string, objectType string) *NiatelemetryTenant {
	this := NiatelemetryTenant{}
	this.ClassId = classId
	this.ObjectType = objectType
	return &this
}

// NewNiatelemetryTenantWithDefaults instantiates a new NiatelemetryTenant object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNiatelemetryTenantWithDefaults() *NiatelemetryTenant {
	this := NiatelemetryTenant{}
	var classId string = "niatelemetry.Tenant"
	this.ClassId = classId
	var objectType string = "niatelemetry.Tenant"
	this.ObjectType = objectType
	return &this
}

// GetClassId returns the ClassId field value
func (o *NiatelemetryTenant) GetClassId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ClassId
}

// GetClassIdOk returns a tuple with the ClassId field value
// and a boolean to check if the value has been set.
func (o *NiatelemetryTenant) GetClassIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ClassId, true
}

// SetClassId sets field value
func (o *NiatelemetryTenant) SetClassId(v string) {
	o.ClassId = v
}

// GetDefaultClassId returns the default value "niatelemetry.Tenant" of the ClassId field.
func (o *NiatelemetryTenant) GetDefaultClassId() interface{} {
	return "niatelemetry.Tenant"
}

// GetObjectType returns the ObjectType field value
func (o *NiatelemetryTenant) GetObjectType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ObjectType
}

// GetObjectTypeOk returns a tuple with the ObjectType field value
// and a boolean to check if the value has been set.
func (o *NiatelemetryTenant) GetObjectTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ObjectType, true
}

// SetObjectType sets field value
func (o *NiatelemetryTenant) SetObjectType(v string) {
	o.ObjectType = v
}

// GetDefaultObjectType returns the default value "niatelemetry.Tenant" of the ObjectType field.
func (o *NiatelemetryTenant) GetDefaultObjectType() interface{} {
	return "niatelemetry.Tenant"
}

// GetBfdIfPolCount returns the BfdIfPolCount field value if set, zero value otherwise.
func (o *NiatelemetryTenant) GetBfdIfPolCount() int64 {
	if o == nil || IsNil(o.BfdIfPolCount) {
		var ret int64
		return ret
	}
	return *o.BfdIfPolCount
}

// GetBfdIfPolCountOk returns a tuple with the BfdIfPolCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NiatelemetryTenant) GetBfdIfPolCountOk() (*int64, bool) {
	if o == nil || IsNil(o.BfdIfPolCount) {
		return nil, false
	}
	return o.BfdIfPolCount, true
}

// HasBfdIfPolCount returns a boolean if a field has been set.
func (o *NiatelemetryTenant) HasBfdIfPolCount() bool {
	if o != nil && !IsNil(o.BfdIfPolCount) {
		return true
	}

	return false
}

// SetBfdIfPolCount gets a reference to the given int64 and assigns it to the BfdIfPolCount field.
func (o *NiatelemetryTenant) SetBfdIfPolCount(v int64) {
	o.BfdIfPolCount = &v
}

// GetBfdIfpCount returns the BfdIfpCount field value if set, zero value otherwise.
func (o *NiatelemetryTenant) GetBfdIfpCount() int64 {
	if o == nil || IsNil(o.BfdIfpCount) {
		var ret int64
		return ret
	}
	return *o.BfdIfpCount
}

// GetBfdIfpCountOk returns a tuple with the BfdIfpCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NiatelemetryTenant) GetBfdIfpCountOk() (*int64, bool) {
	if o == nil || IsNil(o.BfdIfpCount) {
		return nil, false
	}
	return o.BfdIfpCount, true
}

// HasBfdIfpCount returns a boolean if a field has been set.
func (o *NiatelemetryTenant) HasBfdIfpCount() bool {
	if o != nil && !IsNil(o.BfdIfpCount) {
		return true
	}

	return false
}

// SetBfdIfpCount gets a reference to the given int64 and assigns it to the BfdIfpCount field.
func (o *NiatelemetryTenant) SetBfdIfpCount(v int64) {
	o.BfdIfpCount = &v
}

// GetDhcpRsProvCount returns the DhcpRsProvCount field value if set, zero value otherwise.
func (o *NiatelemetryTenant) GetDhcpRsProvCount() int64 {
	if o == nil || IsNil(o.DhcpRsProvCount) {
		var ret int64
		return ret
	}
	return *o.DhcpRsProvCount
}

// GetDhcpRsProvCountOk returns a tuple with the DhcpRsProvCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NiatelemetryTenant) GetDhcpRsProvCountOk() (*int64, bool) {
	if o == nil || IsNil(o.DhcpRsProvCount) {
		return nil, false
	}
	return o.DhcpRsProvCount, true
}

// HasDhcpRsProvCount returns a boolean if a field has been set.
func (o *NiatelemetryTenant) HasDhcpRsProvCount() bool {
	if o != nil && !IsNil(o.DhcpRsProvCount) {
		return true
	}

	return false
}

// SetDhcpRsProvCount gets a reference to the given int64 and assigns it to the DhcpRsProvCount field.
func (o *NiatelemetryTenant) SetDhcpRsProvCount(v int64) {
	o.DhcpRsProvCount = &v
}

// GetDn returns the Dn field value if set, zero value otherwise.
func (o *NiatelemetryTenant) GetDn() string {
	if o == nil || IsNil(o.Dn) {
		var ret string
		return ret
	}
	return *o.Dn
}

// GetDnOk returns a tuple with the Dn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NiatelemetryTenant) GetDnOk() (*string, bool) {
	if o == nil || IsNil(o.Dn) {
		return nil, false
	}
	return o.Dn, true
}

// HasDn returns a boolean if a field has been set.
func (o *NiatelemetryTenant) HasDn() bool {
	if o != nil && !IsNil(o.Dn) {
		return true
	}

	return false
}

// SetDn gets a reference to the given string and assigns it to the Dn field.
func (o *NiatelemetryTenant) SetDn(v string) {
	o.Dn = &v
}

// GetFhsBdPolCount returns the FhsBdPolCount field value if set, zero value otherwise.
func (o *NiatelemetryTenant) GetFhsBdPolCount() int64 {
	if o == nil || IsNil(o.FhsBdPolCount) {
		var ret int64
		return ret
	}
	return *o.FhsBdPolCount
}

// GetFhsBdPolCountOk returns a tuple with the FhsBdPolCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NiatelemetryTenant) GetFhsBdPolCountOk() (*int64, bool) {
	if o == nil || IsNil(o.FhsBdPolCount) {
		return nil, false
	}
	return o.FhsBdPolCount, true
}

// HasFhsBdPolCount returns a boolean if a field has been set.
func (o *NiatelemetryTenant) HasFhsBdPolCount() bool {
	if o != nil && !IsNil(o.FhsBdPolCount) {
		return true
	}

	return false
}

// SetFhsBdPolCount gets a reference to the given int64 and assigns it to the FhsBdPolCount field.
func (o *NiatelemetryTenant) SetFhsBdPolCount(v int64) {
	o.FhsBdPolCount = &v
}

// GetFvApCount returns the FvApCount field value if set, zero value otherwise.
func (o *NiatelemetryTenant) GetFvApCount() int64 {
	if o == nil || IsNil(o.FvApCount) {
		var ret int64
		return ret
	}
	return *o.FvApCount
}

// GetFvApCountOk returns a tuple with the FvApCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NiatelemetryTenant) GetFvApCountOk() (*int64, bool) {
	if o == nil || IsNil(o.FvApCount) {
		return nil, false
	}
	return o.FvApCount, true
}

// HasFvApCount returns a boolean if a field has been set.
func (o *NiatelemetryTenant) HasFvApCount() bool {
	if o != nil && !IsNil(o.FvApCount) {
		return true
	}

	return false
}

// SetFvApCount gets a reference to the given int64 and assigns it to the FvApCount field.
func (o *NiatelemetryTenant) SetFvApCount(v int64) {
	o.FvApCount = &v
}

// GetFvBdCount returns the FvBdCount field value if set, zero value otherwise.
func (o *NiatelemetryTenant) GetFvBdCount() int64 {
	if o == nil || IsNil(o.FvBdCount) {
		var ret int64
		return ret
	}
	return *o.FvBdCount
}

// GetFvBdCountOk returns a tuple with the FvBdCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NiatelemetryTenant) GetFvBdCountOk() (*int64, bool) {
	if o == nil || IsNil(o.FvBdCount) {
		return nil, false
	}
	return o.FvBdCount, true
}

// HasFvBdCount returns a boolean if a field has been set.
func (o *NiatelemetryTenant) HasFvBdCount() bool {
	if o != nil && !IsNil(o.FvBdCount) {
		return true
	}

	return false
}

// SetFvBdCount gets a reference to the given int64 and assigns it to the FvBdCount field.
func (o *NiatelemetryTenant) SetFvBdCount(v int64) {
	o.FvBdCount = &v
}

// GetFvBdSubnetCount returns the FvBdSubnetCount field value if set, zero value otherwise.
func (o *NiatelemetryTenant) GetFvBdSubnetCount() int64 {
	if o == nil || IsNil(o.FvBdSubnetCount) {
		var ret int64
		return ret
	}
	return *o.FvBdSubnetCount
}

// GetFvBdSubnetCountOk returns a tuple with the FvBdSubnetCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NiatelemetryTenant) GetFvBdSubnetCountOk() (*int64, bool) {
	if o == nil || IsNil(o.FvBdSubnetCount) {
		return nil, false
	}
	return o.FvBdSubnetCount, true
}

// HasFvBdSubnetCount returns a boolean if a field has been set.
func (o *NiatelemetryTenant) HasFvBdSubnetCount() bool {
	if o != nil && !IsNil(o.FvBdSubnetCount) {
		return true
	}

	return false
}

// SetFvBdSubnetCount gets a reference to the given int64 and assigns it to the FvBdSubnetCount field.
func (o *NiatelemetryTenant) SetFvBdSubnetCount(v int64) {
	o.FvBdSubnetCount = &v
}

// GetFvBdnoArpCount returns the FvBdnoArpCount field value if set, zero value otherwise.
func (o *NiatelemetryTenant) GetFvBdnoArpCount() int64 {
	if o == nil || IsNil(o.FvBdnoArpCount) {
		var ret int64
		return ret
	}
	return *o.FvBdnoArpCount
}

// GetFvBdnoArpCountOk returns a tuple with the FvBdnoArpCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NiatelemetryTenant) GetFvBdnoArpCountOk() (*int64, bool) {
	if o == nil || IsNil(o.FvBdnoArpCount) {
		return nil, false
	}
	return o.FvBdnoArpCount, true
}

// HasFvBdnoArpCount returns a boolean if a field has been set.
func (o *NiatelemetryTenant) HasFvBdnoArpCount() bool {
	if o != nil && !IsNil(o.FvBdnoArpCount) {
		return true
	}

	return false
}

// SetFvBdnoArpCount gets a reference to the given int64 and assigns it to the FvBdnoArpCount field.
func (o *NiatelemetryTenant) SetFvBdnoArpCount(v int64) {
	o.FvBdnoArpCount = &v
}

// GetFvCepCount returns the FvCepCount field value if set, zero value otherwise.
func (o *NiatelemetryTenant) GetFvCepCount() int64 {
	if o == nil || IsNil(o.FvCepCount) {
		var ret int64
		return ret
	}
	return *o.FvCepCount
}

// GetFvCepCountOk returns a tuple with the FvCepCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NiatelemetryTenant) GetFvCepCountOk() (*int64, bool) {
	if o == nil || IsNil(o.FvCepCount) {
		return nil, false
	}
	return o.FvCepCount, true
}

// HasFvCepCount returns a boolean if a field has been set.
func (o *NiatelemetryTenant) HasFvCepCount() bool {
	if o != nil && !IsNil(o.FvCepCount) {
		return true
	}

	return false
}

// SetFvCepCount gets a reference to the given int64 and assigns it to the FvCepCount field.
func (o *NiatelemetryTenant) SetFvCepCount(v int64) {
	o.FvCepCount = &v
}

// GetFvRsBdToFhsCount returns the FvRsBdToFhsCount field value if set, zero value otherwise.
func (o *NiatelemetryTenant) GetFvRsBdToFhsCount() int64 {
	if o == nil || IsNil(o.FvRsBdToFhsCount) {
		var ret int64
		return ret
	}
	return *o.FvRsBdToFhsCount
}

// GetFvRsBdToFhsCountOk returns a tuple with the FvRsBdToFhsCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NiatelemetryTenant) GetFvRsBdToFhsCountOk() (*int64, bool) {
	if o == nil || IsNil(o.FvRsBdToFhsCount) {
		return nil, false
	}
	return o.FvRsBdToFhsCount, true
}

// HasFvRsBdToFhsCount returns a boolean if a field has been set.
func (o *NiatelemetryTenant) HasFvRsBdToFhsCount() bool {
	if o != nil && !IsNil(o.FvRsBdToFhsCount) {
		return true
	}

	return false
}

// SetFvRsBdToFhsCount gets a reference to the given int64 and assigns it to the FvRsBdToFhsCount field.
func (o *NiatelemetryTenant) SetFvRsBdToFhsCount(v int64) {
	o.FvRsBdToFhsCount = &v
}

// GetFvRsBdToOutCount returns the FvRsBdToOutCount field value if set, zero value otherwise.
func (o *NiatelemetryTenant) GetFvRsBdToOutCount() int64 {
	if o == nil || IsNil(o.FvRsBdToOutCount) {
		var ret int64
		return ret
	}
	return *o.FvRsBdToOutCount
}

// GetFvRsBdToOutCountOk returns a tuple with the FvRsBdToOutCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NiatelemetryTenant) GetFvRsBdToOutCountOk() (*int64, bool) {
	if o == nil || IsNil(o.FvRsBdToOutCount) {
		return nil, false
	}
	return o.FvRsBdToOutCount, true
}

// HasFvRsBdToOutCount returns a boolean if a field has been set.
func (o *NiatelemetryTenant) HasFvRsBdToOutCount() bool {
	if o != nil && !IsNil(o.FvRsBdToOutCount) {
		return true
	}

	return false
}

// SetFvRsBdToOutCount gets a reference to the given int64 and assigns it to the FvRsBdToOutCount field.
func (o *NiatelemetryTenant) SetFvRsBdToOutCount(v int64) {
	o.FvRsBdToOutCount = &v
}

// GetFvSiteConnpCount returns the FvSiteConnpCount field value if set, zero value otherwise.
func (o *NiatelemetryTenant) GetFvSiteConnpCount() int64 {
	if o == nil || IsNil(o.FvSiteConnpCount) {
		var ret int64
		return ret
	}
	return *o.FvSiteConnpCount
}

// GetFvSiteConnpCountOk returns a tuple with the FvSiteConnpCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NiatelemetryTenant) GetFvSiteConnpCountOk() (*int64, bool) {
	if o == nil || IsNil(o.FvSiteConnpCount) {
		return nil, false
	}
	return o.FvSiteConnpCount, true
}

// HasFvSiteConnpCount returns a boolean if a field has been set.
func (o *NiatelemetryTenant) HasFvSiteConnpCount() bool {
	if o != nil && !IsNil(o.FvSiteConnpCount) {
		return true
	}

	return false
}

// SetFvSiteConnpCount gets a reference to the given int64 and assigns it to the FvSiteConnpCount field.
func (o *NiatelemetryTenant) SetFvSiteConnpCount(v int64) {
	o.FvSiteConnpCount = &v
}

// GetFvSubnetCount returns the FvSubnetCount field value if set, zero value otherwise.
func (o *NiatelemetryTenant) GetFvSubnetCount() int64 {
	if o == nil || IsNil(o.FvSubnetCount) {
		var ret int64
		return ret
	}
	return *o.FvSubnetCount
}

// GetFvSubnetCountOk returns a tuple with the FvSubnetCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NiatelemetryTenant) GetFvSubnetCountOk() (*int64, bool) {
	if o == nil || IsNil(o.FvSubnetCount) {
		return nil, false
	}
	return o.FvSubnetCount, true
}

// HasFvSubnetCount returns a boolean if a field has been set.
func (o *NiatelemetryTenant) HasFvSubnetCount() bool {
	if o != nil && !IsNil(o.FvSubnetCount) {
		return true
	}

	return false
}

// SetFvSubnetCount gets a reference to the given int64 and assigns it to the FvSubnetCount field.
func (o *NiatelemetryTenant) SetFvSubnetCount(v int64) {
	o.FvSubnetCount = &v
}

// GetIpStaticRouteCount returns the IpStaticRouteCount field value if set, zero value otherwise.
func (o *NiatelemetryTenant) GetIpStaticRouteCount() int64 {
	if o == nil || IsNil(o.IpStaticRouteCount) {
		var ret int64
		return ret
	}
	return *o.IpStaticRouteCount
}

// GetIpStaticRouteCountOk returns a tuple with the IpStaticRouteCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NiatelemetryTenant) GetIpStaticRouteCountOk() (*int64, bool) {
	if o == nil || IsNil(o.IpStaticRouteCount) {
		return nil, false
	}
	return o.IpStaticRouteCount, true
}

// HasIpStaticRouteCount returns a boolean if a field has been set.
func (o *NiatelemetryTenant) HasIpStaticRouteCount() bool {
	if o != nil && !IsNil(o.IpStaticRouteCount) {
		return true
	}

	return false
}

// SetIpStaticRouteCount gets a reference to the given int64 and assigns it to the IpStaticRouteCount field.
func (o *NiatelemetryTenant) SetIpStaticRouteCount(v int64) {
	o.IpStaticRouteCount = &v
}

// GetL3MulticastCount returns the L3MulticastCount field value if set, zero value otherwise.
func (o *NiatelemetryTenant) GetL3MulticastCount() int64 {
	if o == nil || IsNil(o.L3MulticastCount) {
		var ret int64
		return ret
	}
	return *o.L3MulticastCount
}

// GetL3MulticastCountOk returns a tuple with the L3MulticastCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NiatelemetryTenant) GetL3MulticastCountOk() (*int64, bool) {
	if o == nil || IsNil(o.L3MulticastCount) {
		return nil, false
	}
	return o.L3MulticastCount, true
}

// HasL3MulticastCount returns a boolean if a field has been set.
func (o *NiatelemetryTenant) HasL3MulticastCount() bool {
	if o != nil && !IsNil(o.L3MulticastCount) {
		return true
	}

	return false
}

// SetL3MulticastCount gets a reference to the given int64 and assigns it to the L3MulticastCount field.
func (o *NiatelemetryTenant) SetL3MulticastCount(v int64) {
	o.L3MulticastCount = &v
}

// GetL3MulticastCtxCount returns the L3MulticastCtxCount field value if set, zero value otherwise.
func (o *NiatelemetryTenant) GetL3MulticastCtxCount() int64 {
	if o == nil || IsNil(o.L3MulticastCtxCount) {
		var ret int64
		return ret
	}
	return *o.L3MulticastCtxCount
}

// GetL3MulticastCtxCountOk returns a tuple with the L3MulticastCtxCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NiatelemetryTenant) GetL3MulticastCtxCountOk() (*int64, bool) {
	if o == nil || IsNil(o.L3MulticastCtxCount) {
		return nil, false
	}
	return o.L3MulticastCtxCount, true
}

// HasL3MulticastCtxCount returns a boolean if a field has been set.
func (o *NiatelemetryTenant) HasL3MulticastCtxCount() bool {
	if o != nil && !IsNil(o.L3MulticastCtxCount) {
		return true
	}

	return false
}

// SetL3MulticastCtxCount gets a reference to the given int64 and assigns it to the L3MulticastCtxCount field.
func (o *NiatelemetryTenant) SetL3MulticastCtxCount(v int64) {
	o.L3MulticastCtxCount = &v
}

// GetL3MulticastIfCount returns the L3MulticastIfCount field value if set, zero value otherwise.
func (o *NiatelemetryTenant) GetL3MulticastIfCount() int64 {
	if o == nil || IsNil(o.L3MulticastIfCount) {
		var ret int64
		return ret
	}
	return *o.L3MulticastIfCount
}

// GetL3MulticastIfCountOk returns a tuple with the L3MulticastIfCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NiatelemetryTenant) GetL3MulticastIfCountOk() (*int64, bool) {
	if o == nil || IsNil(o.L3MulticastIfCount) {
		return nil, false
	}
	return o.L3MulticastIfCount, true
}

// HasL3MulticastIfCount returns a boolean if a field has been set.
func (o *NiatelemetryTenant) HasL3MulticastIfCount() bool {
	if o != nil && !IsNil(o.L3MulticastIfCount) {
		return true
	}

	return false
}

// SetL3MulticastIfCount gets a reference to the given int64 and assigns it to the L3MulticastIfCount field.
func (o *NiatelemetryTenant) SetL3MulticastIfCount(v int64) {
	o.L3MulticastIfCount = &v
}

// GetL3outCount returns the L3outCount field value if set, zero value otherwise.
func (o *NiatelemetryTenant) GetL3outCount() int64 {
	if o == nil || IsNil(o.L3outCount) {
		var ret int64
		return ret
	}
	return *o.L3outCount
}

// GetL3outCountOk returns a tuple with the L3outCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NiatelemetryTenant) GetL3outCountOk() (*int64, bool) {
	if o == nil || IsNil(o.L3outCount) {
		return nil, false
	}
	return o.L3outCount, true
}

// HasL3outCount returns a boolean if a field has been set.
func (o *NiatelemetryTenant) HasL3outCount() bool {
	if o != nil && !IsNil(o.L3outCount) {
		return true
	}

	return false
}

// SetL3outCount gets a reference to the given int64 and assigns it to the L3outCount field.
func (o *NiatelemetryTenant) SetL3outCount(v int64) {
	o.L3outCount = &v
}

// GetQosCustomPolCount returns the QosCustomPolCount field value if set, zero value otherwise.
func (o *NiatelemetryTenant) GetQosCustomPolCount() int64 {
	if o == nil || IsNil(o.QosCustomPolCount) {
		var ret int64
		return ret
	}
	return *o.QosCustomPolCount
}

// GetQosCustomPolCountOk returns a tuple with the QosCustomPolCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NiatelemetryTenant) GetQosCustomPolCountOk() (*int64, bool) {
	if o == nil || IsNil(o.QosCustomPolCount) {
		return nil, false
	}
	return o.QosCustomPolCount, true
}

// HasQosCustomPolCount returns a boolean if a field has been set.
func (o *NiatelemetryTenant) HasQosCustomPolCount() bool {
	if o != nil && !IsNil(o.QosCustomPolCount) {
		return true
	}

	return false
}

// SetQosCustomPolCount gets a reference to the given int64 and assigns it to the QosCustomPolCount field.
func (o *NiatelemetryTenant) SetQosCustomPolCount(v int64) {
	o.QosCustomPolCount = &v
}

// GetRecordType returns the RecordType field value if set, zero value otherwise.
func (o *NiatelemetryTenant) GetRecordType() string {
	if o == nil || IsNil(o.RecordType) {
		var ret string
		return ret
	}
	return *o.RecordType
}

// GetRecordTypeOk returns a tuple with the RecordType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NiatelemetryTenant) GetRecordTypeOk() (*string, bool) {
	if o == nil || IsNil(o.RecordType) {
		return nil, false
	}
	return o.RecordType, true
}

// HasRecordType returns a boolean if a field has been set.
func (o *NiatelemetryTenant) HasRecordType() bool {
	if o != nil && !IsNil(o.RecordType) {
		return true
	}

	return false
}

// SetRecordType gets a reference to the given string and assigns it to the RecordType field.
func (o *NiatelemetryTenant) SetRecordType(v string) {
	o.RecordType = &v
}

// GetRecordVersion returns the RecordVersion field value if set, zero value otherwise.
func (o *NiatelemetryTenant) GetRecordVersion() string {
	if o == nil || IsNil(o.RecordVersion) {
		var ret string
		return ret
	}
	return *o.RecordVersion
}

// GetRecordVersionOk returns a tuple with the RecordVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NiatelemetryTenant) GetRecordVersionOk() (*string, bool) {
	if o == nil || IsNil(o.RecordVersion) {
		return nil, false
	}
	return o.RecordVersion, true
}

// HasRecordVersion returns a boolean if a field has been set.
func (o *NiatelemetryTenant) HasRecordVersion() bool {
	if o != nil && !IsNil(o.RecordVersion) {
		return true
	}

	return false
}

// SetRecordVersion gets a reference to the given string and assigns it to the RecordVersion field.
func (o *NiatelemetryTenant) SetRecordVersion(v string) {
	o.RecordVersion = &v
}

// GetSiteName returns the SiteName field value if set, zero value otherwise.
func (o *NiatelemetryTenant) GetSiteName() string {
	if o == nil || IsNil(o.SiteName) {
		var ret string
		return ret
	}
	return *o.SiteName
}

// GetSiteNameOk returns a tuple with the SiteName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NiatelemetryTenant) GetSiteNameOk() (*string, bool) {
	if o == nil || IsNil(o.SiteName) {
		return nil, false
	}
	return o.SiteName, true
}

// HasSiteName returns a boolean if a field has been set.
func (o *NiatelemetryTenant) HasSiteName() bool {
	if o != nil && !IsNil(o.SiteName) {
		return true
	}

	return false
}

// SetSiteName gets a reference to the given string and assigns it to the SiteName field.
func (o *NiatelemetryTenant) SetSiteName(v string) {
	o.SiteName = &v
}

// GetSsm returns the Ssm field value if set, zero value otherwise.
func (o *NiatelemetryTenant) GetSsm() string {
	if o == nil || IsNil(o.Ssm) {
		var ret string
		return ret
	}
	return *o.Ssm
}

// GetSsmOk returns a tuple with the Ssm field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NiatelemetryTenant) GetSsmOk() (*string, bool) {
	if o == nil || IsNil(o.Ssm) {
		return nil, false
	}
	return o.Ssm, true
}

// HasSsm returns a boolean if a field has been set.
func (o *NiatelemetryTenant) HasSsm() bool {
	if o != nil && !IsNil(o.Ssm) {
		return true
	}

	return false
}

// SetSsm gets a reference to the given string and assigns it to the Ssm field.
func (o *NiatelemetryTenant) SetSsm(v string) {
	o.Ssm = &v
}

// GetSsmCount returns the SsmCount field value if set, zero value otherwise.
func (o *NiatelemetryTenant) GetSsmCount() int64 {
	if o == nil || IsNil(o.SsmCount) {
		var ret int64
		return ret
	}
	return *o.SsmCount
}

// GetSsmCountOk returns a tuple with the SsmCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NiatelemetryTenant) GetSsmCountOk() (*int64, bool) {
	if o == nil || IsNil(o.SsmCount) {
		return nil, false
	}
	return o.SsmCount, true
}

// HasSsmCount returns a boolean if a field has been set.
func (o *NiatelemetryTenant) HasSsmCount() bool {
	if o != nil && !IsNil(o.SsmCount) {
		return true
	}

	return false
}

// SetSsmCount gets a reference to the given int64 and assigns it to the SsmCount field.
func (o *NiatelemetryTenant) SetSsmCount(v int64) {
	o.SsmCount = &v
}

// GetTcamOptCount returns the TcamOptCount field value if set, zero value otherwise.
func (o *NiatelemetryTenant) GetTcamOptCount() int64 {
	if o == nil || IsNil(o.TcamOptCount) {
		var ret int64
		return ret
	}
	return *o.TcamOptCount
}

// GetTcamOptCountOk returns a tuple with the TcamOptCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NiatelemetryTenant) GetTcamOptCountOk() (*int64, bool) {
	if o == nil || IsNil(o.TcamOptCount) {
		return nil, false
	}
	return o.TcamOptCount, true
}

// HasTcamOptCount returns a boolean if a field has been set.
func (o *NiatelemetryTenant) HasTcamOptCount() bool {
	if o != nil && !IsNil(o.TcamOptCount) {
		return true
	}

	return false
}

// SetTcamOptCount gets a reference to the given int64 and assigns it to the TcamOptCount field.
func (o *NiatelemetryTenant) SetTcamOptCount(v int64) {
	o.TcamOptCount = &v
}

// GetTenantHealth returns the TenantHealth field value if set, zero value otherwise.
func (o *NiatelemetryTenant) GetTenantHealth() int64 {
	if o == nil || IsNil(o.TenantHealth) {
		var ret int64
		return ret
	}
	return *o.TenantHealth
}

// GetTenantHealthOk returns a tuple with the TenantHealth field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NiatelemetryTenant) GetTenantHealthOk() (*int64, bool) {
	if o == nil || IsNil(o.TenantHealth) {
		return nil, false
	}
	return o.TenantHealth, true
}

// HasTenantHealth returns a boolean if a field has been set.
func (o *NiatelemetryTenant) HasTenantHealth() bool {
	if o != nil && !IsNil(o.TenantHealth) {
		return true
	}

	return false
}

// SetTenantHealth gets a reference to the given int64 and assigns it to the TenantHealth field.
func (o *NiatelemetryTenant) SetTenantHealth(v int64) {
	o.TenantHealth = &v
}

// GetTraceRouteEpCount returns the TraceRouteEpCount field value if set, zero value otherwise.
func (o *NiatelemetryTenant) GetTraceRouteEpCount() int64 {
	if o == nil || IsNil(o.TraceRouteEpCount) {
		var ret int64
		return ret
	}
	return *o.TraceRouteEpCount
}

// GetTraceRouteEpCountOk returns a tuple with the TraceRouteEpCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NiatelemetryTenant) GetTraceRouteEpCountOk() (*int64, bool) {
	if o == nil || IsNil(o.TraceRouteEpCount) {
		return nil, false
	}
	return o.TraceRouteEpCount, true
}

// HasTraceRouteEpCount returns a boolean if a field has been set.
func (o *NiatelemetryTenant) HasTraceRouteEpCount() bool {
	if o != nil && !IsNil(o.TraceRouteEpCount) {
		return true
	}

	return false
}

// SetTraceRouteEpCount gets a reference to the given int64 and assigns it to the TraceRouteEpCount field.
func (o *NiatelemetryTenant) SetTraceRouteEpCount(v int64) {
	o.TraceRouteEpCount = &v
}

// GetTraceRouteEpExtCount returns the TraceRouteEpExtCount field value if set, zero value otherwise.
func (o *NiatelemetryTenant) GetTraceRouteEpExtCount() int64 {
	if o == nil || IsNil(o.TraceRouteEpExtCount) {
		var ret int64
		return ret
	}
	return *o.TraceRouteEpExtCount
}

// GetTraceRouteEpExtCountOk returns a tuple with the TraceRouteEpExtCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NiatelemetryTenant) GetTraceRouteEpExtCountOk() (*int64, bool) {
	if o == nil || IsNil(o.TraceRouteEpExtCount) {
		return nil, false
	}
	return o.TraceRouteEpExtCount, true
}

// HasTraceRouteEpExtCount returns a boolean if a field has been set.
func (o *NiatelemetryTenant) HasTraceRouteEpExtCount() bool {
	if o != nil && !IsNil(o.TraceRouteEpExtCount) {
		return true
	}

	return false
}

// SetTraceRouteEpExtCount gets a reference to the given int64 and assigns it to the TraceRouteEpExtCount field.
func (o *NiatelemetryTenant) SetTraceRouteEpExtCount(v int64) {
	o.TraceRouteEpExtCount = &v
}

// GetTraceRouteExtEpCount returns the TraceRouteExtEpCount field value if set, zero value otherwise.
func (o *NiatelemetryTenant) GetTraceRouteExtEpCount() int64 {
	if o == nil || IsNil(o.TraceRouteExtEpCount) {
		var ret int64
		return ret
	}
	return *o.TraceRouteExtEpCount
}

// GetTraceRouteExtEpCountOk returns a tuple with the TraceRouteExtEpCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NiatelemetryTenant) GetTraceRouteExtEpCountOk() (*int64, bool) {
	if o == nil || IsNil(o.TraceRouteExtEpCount) {
		return nil, false
	}
	return o.TraceRouteExtEpCount, true
}

// HasTraceRouteExtEpCount returns a boolean if a field has been set.
func (o *NiatelemetryTenant) HasTraceRouteExtEpCount() bool {
	if o != nil && !IsNil(o.TraceRouteExtEpCount) {
		return true
	}

	return false
}

// SetTraceRouteExtEpCount gets a reference to the given int64 and assigns it to the TraceRouteExtEpCount field.
func (o *NiatelemetryTenant) SetTraceRouteExtEpCount(v int64) {
	o.TraceRouteExtEpCount = &v
}

// GetTraceRouteExtExtCount returns the TraceRouteExtExtCount field value if set, zero value otherwise.
func (o *NiatelemetryTenant) GetTraceRouteExtExtCount() int64 {
	if o == nil || IsNil(o.TraceRouteExtExtCount) {
		var ret int64
		return ret
	}
	return *o.TraceRouteExtExtCount
}

// GetTraceRouteExtExtCountOk returns a tuple with the TraceRouteExtExtCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NiatelemetryTenant) GetTraceRouteExtExtCountOk() (*int64, bool) {
	if o == nil || IsNil(o.TraceRouteExtExtCount) {
		return nil, false
	}
	return o.TraceRouteExtExtCount, true
}

// HasTraceRouteExtExtCount returns a boolean if a field has been set.
func (o *NiatelemetryTenant) HasTraceRouteExtExtCount() bool {
	if o != nil && !IsNil(o.TraceRouteExtExtCount) {
		return true
	}

	return false
}

// SetTraceRouteExtExtCount gets a reference to the given int64 and assigns it to the TraceRouteExtExtCount field.
func (o *NiatelemetryTenant) SetTraceRouteExtExtCount(v int64) {
	o.TraceRouteExtExtCount = &v
}

// GetVnsAbsGraphCount returns the VnsAbsGraphCount field value if set, zero value otherwise.
func (o *NiatelemetryTenant) GetVnsAbsGraphCount() int64 {
	if o == nil || IsNil(o.VnsAbsGraphCount) {
		var ret int64
		return ret
	}
	return *o.VnsAbsGraphCount
}

// GetVnsAbsGraphCountOk returns a tuple with the VnsAbsGraphCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NiatelemetryTenant) GetVnsAbsGraphCountOk() (*int64, bool) {
	if o == nil || IsNil(o.VnsAbsGraphCount) {
		return nil, false
	}
	return o.VnsAbsGraphCount, true
}

// HasVnsAbsGraphCount returns a boolean if a field has been set.
func (o *NiatelemetryTenant) HasVnsAbsGraphCount() bool {
	if o != nil && !IsNil(o.VnsAbsGraphCount) {
		return true
	}

	return false
}

// SetVnsAbsGraphCount gets a reference to the given int64 and assigns it to the VnsAbsGraphCount field.
func (o *NiatelemetryTenant) SetVnsAbsGraphCount(v int64) {
	o.VnsAbsGraphCount = &v
}

// GetVnsBackupPolCount returns the VnsBackupPolCount field value if set, zero value otherwise.
func (o *NiatelemetryTenant) GetVnsBackupPolCount() int64 {
	if o == nil || IsNil(o.VnsBackupPolCount) {
		var ret int64
		return ret
	}
	return *o.VnsBackupPolCount
}

// GetVnsBackupPolCountOk returns a tuple with the VnsBackupPolCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NiatelemetryTenant) GetVnsBackupPolCountOk() (*int64, bool) {
	if o == nil || IsNil(o.VnsBackupPolCount) {
		return nil, false
	}
	return o.VnsBackupPolCount, true
}

// HasVnsBackupPolCount returns a boolean if a field has been set.
func (o *NiatelemetryTenant) HasVnsBackupPolCount() bool {
	if o != nil && !IsNil(o.VnsBackupPolCount) {
		return true
	}

	return false
}

// SetVnsBackupPolCount gets a reference to the given int64 and assigns it to the VnsBackupPolCount field.
func (o *NiatelemetryTenant) SetVnsBackupPolCount(v int64) {
	o.VnsBackupPolCount = &v
}

// GetVnsRedirectDestCount returns the VnsRedirectDestCount field value if set, zero value otherwise.
func (o *NiatelemetryTenant) GetVnsRedirectDestCount() int64 {
	if o == nil || IsNil(o.VnsRedirectDestCount) {
		var ret int64
		return ret
	}
	return *o.VnsRedirectDestCount
}

// GetVnsRedirectDestCountOk returns a tuple with the VnsRedirectDestCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NiatelemetryTenant) GetVnsRedirectDestCountOk() (*int64, bool) {
	if o == nil || IsNil(o.VnsRedirectDestCount) {
		return nil, false
	}
	return o.VnsRedirectDestCount, true
}

// HasVnsRedirectDestCount returns a boolean if a field has been set.
func (o *NiatelemetryTenant) HasVnsRedirectDestCount() bool {
	if o != nil && !IsNil(o.VnsRedirectDestCount) {
		return true
	}

	return false
}

// SetVnsRedirectDestCount gets a reference to the given int64 and assigns it to the VnsRedirectDestCount field.
func (o *NiatelemetryTenant) SetVnsRedirectDestCount(v int64) {
	o.VnsRedirectDestCount = &v
}

// GetVnsSvcRedirectPolCount returns the VnsSvcRedirectPolCount field value if set, zero value otherwise.
func (o *NiatelemetryTenant) GetVnsSvcRedirectPolCount() int64 {
	if o == nil || IsNil(o.VnsSvcRedirectPolCount) {
		var ret int64
		return ret
	}
	return *o.VnsSvcRedirectPolCount
}

// GetVnsSvcRedirectPolCountOk returns a tuple with the VnsSvcRedirectPolCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NiatelemetryTenant) GetVnsSvcRedirectPolCountOk() (*int64, bool) {
	if o == nil || IsNil(o.VnsSvcRedirectPolCount) {
		return nil, false
	}
	return o.VnsSvcRedirectPolCount, true
}

// HasVnsSvcRedirectPolCount returns a boolean if a field has been set.
func (o *NiatelemetryTenant) HasVnsSvcRedirectPolCount() bool {
	if o != nil && !IsNil(o.VnsSvcRedirectPolCount) {
		return true
	}

	return false
}

// SetVnsSvcRedirectPolCount gets a reference to the given int64 and assigns it to the VnsSvcRedirectPolCount field.
func (o *NiatelemetryTenant) SetVnsSvcRedirectPolCount(v int64) {
	o.VnsSvcRedirectPolCount = &v
}

// GetVrfCount returns the VrfCount field value if set, zero value otherwise.
func (o *NiatelemetryTenant) GetVrfCount() int64 {
	if o == nil || IsNil(o.VrfCount) {
		var ret int64
		return ret
	}
	return *o.VrfCount
}

// GetVrfCountOk returns a tuple with the VrfCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NiatelemetryTenant) GetVrfCountOk() (*int64, bool) {
	if o == nil || IsNil(o.VrfCount) {
		return nil, false
	}
	return o.VrfCount, true
}

// HasVrfCount returns a boolean if a field has been set.
func (o *NiatelemetryTenant) HasVrfCount() bool {
	if o != nil && !IsNil(o.VrfCount) {
		return true
	}

	return false
}

// SetVrfCount gets a reference to the given int64 and assigns it to the VrfCount field.
func (o *NiatelemetryTenant) SetVrfCount(v int64) {
	o.VrfCount = &v
}

// GetVzBrCpCount returns the VzBrCpCount field value if set, zero value otherwise.
func (o *NiatelemetryTenant) GetVzBrCpCount() int64 {
	if o == nil || IsNil(o.VzBrCpCount) {
		var ret int64
		return ret
	}
	return *o.VzBrCpCount
}

// GetVzBrCpCountOk returns a tuple with the VzBrCpCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NiatelemetryTenant) GetVzBrCpCountOk() (*int64, bool) {
	if o == nil || IsNil(o.VzBrCpCount) {
		return nil, false
	}
	return o.VzBrCpCount, true
}

// HasVzBrCpCount returns a boolean if a field has been set.
func (o *NiatelemetryTenant) HasVzBrCpCount() bool {
	if o != nil && !IsNil(o.VzBrCpCount) {
		return true
	}

	return false
}

// SetVzBrCpCount gets a reference to the given int64 and assigns it to the VzBrCpCount field.
func (o *NiatelemetryTenant) SetVzBrCpCount(v int64) {
	o.VzBrCpCount = &v
}

// GetVzRtConsCount returns the VzRtConsCount field value if set, zero value otherwise.
func (o *NiatelemetryTenant) GetVzRtConsCount() int64 {
	if o == nil || IsNil(o.VzRtConsCount) {
		var ret int64
		return ret
	}
	return *o.VzRtConsCount
}

// GetVzRtConsCountOk returns a tuple with the VzRtConsCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NiatelemetryTenant) GetVzRtConsCountOk() (*int64, bool) {
	if o == nil || IsNil(o.VzRtConsCount) {
		return nil, false
	}
	return o.VzRtConsCount, true
}

// HasVzRtConsCount returns a boolean if a field has been set.
func (o *NiatelemetryTenant) HasVzRtConsCount() bool {
	if o != nil && !IsNil(o.VzRtConsCount) {
		return true
	}

	return false
}

// SetVzRtConsCount gets a reference to the given int64 and assigns it to the VzRtConsCount field.
func (o *NiatelemetryTenant) SetVzRtConsCount(v int64) {
	o.VzRtConsCount = &v
}

// GetVzRtProvCount returns the VzRtProvCount field value if set, zero value otherwise.
func (o *NiatelemetryTenant) GetVzRtProvCount() int64 {
	if o == nil || IsNil(o.VzRtProvCount) {
		var ret int64
		return ret
	}
	return *o.VzRtProvCount
}

// GetVzRtProvCountOk returns a tuple with the VzRtProvCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NiatelemetryTenant) GetVzRtProvCountOk() (*int64, bool) {
	if o == nil || IsNil(o.VzRtProvCount) {
		return nil, false
	}
	return o.VzRtProvCount, true
}

// HasVzRtProvCount returns a boolean if a field has been set.
func (o *NiatelemetryTenant) HasVzRtProvCount() bool {
	if o != nil && !IsNil(o.VzRtProvCount) {
		return true
	}

	return false
}

// SetVzRtProvCount gets a reference to the given int64 and assigns it to the VzRtProvCount field.
func (o *NiatelemetryTenant) SetVzRtProvCount(v int64) {
	o.VzRtProvCount = &v
}

// GetRegisteredDevice returns the RegisteredDevice field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NiatelemetryTenant) GetRegisteredDevice() AssetDeviceRegistrationRelationship {
	if o == nil || IsNil(o.RegisteredDevice.Get()) {
		var ret AssetDeviceRegistrationRelationship
		return ret
	}
	return *o.RegisteredDevice.Get()
}

// GetRegisteredDeviceOk returns a tuple with the RegisteredDevice field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NiatelemetryTenant) GetRegisteredDeviceOk() (*AssetDeviceRegistrationRelationship, bool) {
	if o == nil {
		return nil, false
	}
	return o.RegisteredDevice.Get(), o.RegisteredDevice.IsSet()
}

// HasRegisteredDevice returns a boolean if a field has been set.
func (o *NiatelemetryTenant) HasRegisteredDevice() bool {
	if o != nil && o.RegisteredDevice.IsSet() {
		return true
	}

	return false
}

// SetRegisteredDevice gets a reference to the given NullableAssetDeviceRegistrationRelationship and assigns it to the RegisteredDevice field.
func (o *NiatelemetryTenant) SetRegisteredDevice(v AssetDeviceRegistrationRelationship) {
	o.RegisteredDevice.Set(&v)
}

// SetRegisteredDeviceNil sets the value for RegisteredDevice to be an explicit nil
func (o *NiatelemetryTenant) SetRegisteredDeviceNil() {
	o.RegisteredDevice.Set(nil)
}

// UnsetRegisteredDevice ensures that no value is present for RegisteredDevice, not even an explicit nil
func (o *NiatelemetryTenant) UnsetRegisteredDevice() {
	o.RegisteredDevice.Unset()
}

func (o NiatelemetryTenant) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NiatelemetryTenant) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	serializedMoBaseMo, errMoBaseMo := json.Marshal(o.MoBaseMo)
	if errMoBaseMo != nil {
		return map[string]interface{}{}, errMoBaseMo
	}
	errMoBaseMo = json.Unmarshal([]byte(serializedMoBaseMo), &toSerialize)
	if errMoBaseMo != nil {
		return map[string]interface{}{}, errMoBaseMo
	}
	if _, exists := toSerialize["ClassId"]; !exists {
		toSerialize["ClassId"] = o.GetDefaultClassId()
	}
	toSerialize["ClassId"] = o.ClassId
	if _, exists := toSerialize["ObjectType"]; !exists {
		toSerialize["ObjectType"] = o.GetDefaultObjectType()
	}
	toSerialize["ObjectType"] = o.ObjectType
	if !IsNil(o.BfdIfPolCount) {
		toSerialize["BfdIfPolCount"] = o.BfdIfPolCount
	}
	if !IsNil(o.BfdIfpCount) {
		toSerialize["BfdIfpCount"] = o.BfdIfpCount
	}
	if !IsNil(o.DhcpRsProvCount) {
		toSerialize["DhcpRsProvCount"] = o.DhcpRsProvCount
	}
	if !IsNil(o.Dn) {
		toSerialize["Dn"] = o.Dn
	}
	if !IsNil(o.FhsBdPolCount) {
		toSerialize["FhsBdPolCount"] = o.FhsBdPolCount
	}
	if !IsNil(o.FvApCount) {
		toSerialize["FvApCount"] = o.FvApCount
	}
	if !IsNil(o.FvBdCount) {
		toSerialize["FvBdCount"] = o.FvBdCount
	}
	if !IsNil(o.FvBdSubnetCount) {
		toSerialize["FvBdSubnetCount"] = o.FvBdSubnetCount
	}
	if !IsNil(o.FvBdnoArpCount) {
		toSerialize["FvBdnoArpCount"] = o.FvBdnoArpCount
	}
	if !IsNil(o.FvCepCount) {
		toSerialize["FvCepCount"] = o.FvCepCount
	}
	if !IsNil(o.FvRsBdToFhsCount) {
		toSerialize["FvRsBdToFhsCount"] = o.FvRsBdToFhsCount
	}
	if !IsNil(o.FvRsBdToOutCount) {
		toSerialize["FvRsBdToOutCount"] = o.FvRsBdToOutCount
	}
	if !IsNil(o.FvSiteConnpCount) {
		toSerialize["FvSiteConnpCount"] = o.FvSiteConnpCount
	}
	if !IsNil(o.FvSubnetCount) {
		toSerialize["FvSubnetCount"] = o.FvSubnetCount
	}
	if !IsNil(o.IpStaticRouteCount) {
		toSerialize["IpStaticRouteCount"] = o.IpStaticRouteCount
	}
	if !IsNil(o.L3MulticastCount) {
		toSerialize["L3MulticastCount"] = o.L3MulticastCount
	}
	if !IsNil(o.L3MulticastCtxCount) {
		toSerialize["L3MulticastCtxCount"] = o.L3MulticastCtxCount
	}
	if !IsNil(o.L3MulticastIfCount) {
		toSerialize["L3MulticastIfCount"] = o.L3MulticastIfCount
	}
	if !IsNil(o.L3outCount) {
		toSerialize["L3outCount"] = o.L3outCount
	}
	if !IsNil(o.QosCustomPolCount) {
		toSerialize["QosCustomPolCount"] = o.QosCustomPolCount
	}
	if !IsNil(o.RecordType) {
		toSerialize["RecordType"] = o.RecordType
	}
	if !IsNil(o.RecordVersion) {
		toSerialize["RecordVersion"] = o.RecordVersion
	}
	if !IsNil(o.SiteName) {
		toSerialize["SiteName"] = o.SiteName
	}
	if !IsNil(o.Ssm) {
		toSerialize["Ssm"] = o.Ssm
	}
	if !IsNil(o.SsmCount) {
		toSerialize["SsmCount"] = o.SsmCount
	}
	if !IsNil(o.TcamOptCount) {
		toSerialize["TcamOptCount"] = o.TcamOptCount
	}
	if !IsNil(o.TenantHealth) {
		toSerialize["TenantHealth"] = o.TenantHealth
	}
	if !IsNil(o.TraceRouteEpCount) {
		toSerialize["TraceRouteEpCount"] = o.TraceRouteEpCount
	}
	if !IsNil(o.TraceRouteEpExtCount) {
		toSerialize["TraceRouteEpExtCount"] = o.TraceRouteEpExtCount
	}
	if !IsNil(o.TraceRouteExtEpCount) {
		toSerialize["TraceRouteExtEpCount"] = o.TraceRouteExtEpCount
	}
	if !IsNil(o.TraceRouteExtExtCount) {
		toSerialize["TraceRouteExtExtCount"] = o.TraceRouteExtExtCount
	}
	if !IsNil(o.VnsAbsGraphCount) {
		toSerialize["VnsAbsGraphCount"] = o.VnsAbsGraphCount
	}
	if !IsNil(o.VnsBackupPolCount) {
		toSerialize["VnsBackupPolCount"] = o.VnsBackupPolCount
	}
	if !IsNil(o.VnsRedirectDestCount) {
		toSerialize["VnsRedirectDestCount"] = o.VnsRedirectDestCount
	}
	if !IsNil(o.VnsSvcRedirectPolCount) {
		toSerialize["VnsSvcRedirectPolCount"] = o.VnsSvcRedirectPolCount
	}
	if !IsNil(o.VrfCount) {
		toSerialize["VrfCount"] = o.VrfCount
	}
	if !IsNil(o.VzBrCpCount) {
		toSerialize["VzBrCpCount"] = o.VzBrCpCount
	}
	if !IsNil(o.VzRtConsCount) {
		toSerialize["VzRtConsCount"] = o.VzRtConsCount
	}
	if !IsNil(o.VzRtProvCount) {
		toSerialize["VzRtProvCount"] = o.VzRtProvCount
	}
	if o.RegisteredDevice.IsSet() {
		toSerialize["RegisteredDevice"] = o.RegisteredDevice.Get()
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *NiatelemetryTenant) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"ClassId",
		"ObjectType",
	}

	// defaultValueFuncMap captures the default values for required properties.
	// These values are used when required properties are missing from the payload.
	defaultValueFuncMap := map[string]func() interface{}{
		"ClassId":    o.GetDefaultClassId,
		"ObjectType": o.GetDefaultObjectType,
	}
	var defaultValueApplied bool
	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			if _, ok := defaultValueFuncMap[requiredProperty]; ok {
				allProperties[requiredProperty] = defaultValueFuncMap[requiredProperty]()
				defaultValueApplied = true
			}
		}
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	if defaultValueApplied {
		data, err = json.Marshal(allProperties)
		if err != nil {
			return err
		}
	}
	type NiatelemetryTenantWithoutEmbeddedStruct struct {
		// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.
		ClassId string `json:"ClassId"`
		// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
		ObjectType string `json:"ObjectType"`
		// Number of Bidirectional Forwarding Detection bfdIfPol Model Objects.
		BfdIfPolCount *int64 `json:"BfdIfPolCount,omitempty"`
		// Number of objects with Bidirectional Forwarding Detection Interface Policy.
		BfdIfpCount *int64 `json:"BfdIfpCount,omitempty"`
		// Number of tenants with Dynamic Host Configuration Protocol enabled.
		DhcpRsProvCount *int64 `json:"DhcpRsProvCount,omitempty"`
		// Dn for the tenants present.
		Dn *string `json:"Dn,omitempty"`
		// Number of objects with First hop security. Checks for presence of IP source gaurd, dynamic arp inspection.
		FhsBdPolCount *int64 `json:"FhsBdPolCount,omitempty"`
		// Number of application profiles per tenant.
		FvApCount *int64 `json:"FvApCount,omitempty"`
		// Number of bridge domains with hardware proxy enabled per tenant.
		FvBdCount *int64 `json:"FvBdCount,omitempty"`
		// Number of bridge domain subnets per tenant.
		FvBdSubnetCount *int64 `json:"FvBdSubnetCount,omitempty"`
		// Number of bridge domains with ARP flodding disabled per tenant.
		FvBdnoArpCount *int64 `json:"FvBdnoArpCount,omitempty"`
		// Count of number of endpoints per tenant.
		FvCepCount *int64 `json:"FvCepCount,omitempty"`
		// Number of objects with First hop security. Checks for presence of IP source gaurd, dynamic arp inspection.
		FvRsBdToFhsCount *int64 `json:"FvRsBdToFhsCount,omitempty"`
		// Number of bridge domains connected to layer 3 out per tenant.
		FvRsBdToOutCount *int64 `json:"FvRsBdToOutCount,omitempty"`
		// Number of Multi-Site objects.
		FvSiteConnpCount *int64 `json:"FvSiteConnpCount,omitempty"`
		// Number of subnets per tenant.
		FvSubnetCount *int64 `json:"FvSubnetCount,omitempty"`
		// Number of IP static routes per tenant.
		IpStaticRouteCount *int64 `json:"IpStaticRouteCount,omitempty"`
		// Number of layer 3 multicasts.
		L3MulticastCount *int64 `json:"L3MulticastCount,omitempty"`
		// Number of layer 3 multicast CtxP.
		L3MulticastCtxCount *int64 `json:"L3MulticastCtxCount,omitempty"`
		// Number of layer 3 multicast IfP.
		L3MulticastIfCount *int64 `json:"L3MulticastIfCount,omitempty"`
		// Number of L3 out objects for the tenants present.
		L3outCount *int64 `json:"L3outCount,omitempty"`
		// Number of Quality Of Service Custom Policy.
		QosCustomPolCount *int64 `json:"QosCustomPolCount,omitempty"`
		// Type of record DCNM / APIC / SE. This determines the type of platform where inventory was collected.
		RecordType *string `json:"RecordType,omitempty"`
		// Version of record being pushed. This determines what was the API version for data available from the device.
		RecordVersion *string `json:"RecordVersion,omitempty"`
		// The Site name represents an APIC cluster. Service Engine can onboard multiple APIC clusters / sites.
		SiteName *string `json:"SiteName,omitempty"`
		// SSM property feature usage.
		Ssm *string `json:"Ssm,omitempty"`
		// Number of context-level ssm translate policies per tenant.
		SsmCount *int64 `json:"SsmCount,omitempty"`
		// Number of TCAM optimization enabled per tenant.
		TcamOptCount *int64 `json:"TcamOptCount,omitempty"`
		// Health of each tenant in the APIC.
		TenantHealth *int64 `json:"TenantHealth,omitempty"`
		// Number of ITrace route endpoint per tenant.
		TraceRouteEpCount *int64 `json:"TraceRouteEpCount,omitempty"`
		// Number of ITrace endpoint external routes per tenant.
		TraceRouteEpExtCount *int64 `json:"TraceRouteEpExtCount,omitempty"`
		// Number of ITrace external endpoint routes per tenant.
		TraceRouteExtEpCount *int64 `json:"TraceRouteExtEpCount,omitempty"`
		// Number of ITrace external routes per tenant.
		TraceRouteExtExtCount *int64 `json:"TraceRouteExtExtCount,omitempty"`
		// Number of objects with L4 to L7 Services graph.
		VnsAbsGraphCount *int64 `json:"VnsAbsGraphCount,omitempty"`
		// Number of objects with Policy Based Routing standby Node. Checks the Policy Based Routing backup policy.
		VnsBackupPolCount *int64 `json:"VnsBackupPolCount,omitempty"`
		// Number of objects with Policy Based Routing standby Node. Policy based redirect requires a destination to redirect traffic.
		VnsRedirectDestCount *int64 `json:"VnsRedirectDestCount,omitempty"`
		// Number of Policy Based Routing and Policy Based Service Insertion objects. Includes without L4-L7 package.
		VnsSvcRedirectPolCount *int64 `json:"VnsSvcRedirectPolCount,omitempty"`
		// Number of Vrfs per tenant.
		VrfCount *int64 `json:"VrfCount,omitempty"`
		// Number of Zoning Policy per tenant.
		VzBrCpCount *int64 `json:"VzBrCpCount,omitempty"`
		// Number of Client Contract between End Point Groups per tenant.
		VzRtConsCount *int64 `json:"VzRtConsCount,omitempty"`
		// Number of Client Contract between End Point Groups per tenant.
		VzRtProvCount    *int64                                      `json:"VzRtProvCount,omitempty"`
		RegisteredDevice NullableAssetDeviceRegistrationRelationship `json:"RegisteredDevice,omitempty"`
	}

	varNiatelemetryTenantWithoutEmbeddedStruct := NiatelemetryTenantWithoutEmbeddedStruct{}

	err = json.Unmarshal(data, &varNiatelemetryTenantWithoutEmbeddedStruct)
	if err == nil {
		varNiatelemetryTenant := _NiatelemetryTenant{}
		varNiatelemetryTenant.ClassId = varNiatelemetryTenantWithoutEmbeddedStruct.ClassId
		varNiatelemetryTenant.ObjectType = varNiatelemetryTenantWithoutEmbeddedStruct.ObjectType
		varNiatelemetryTenant.BfdIfPolCount = varNiatelemetryTenantWithoutEmbeddedStruct.BfdIfPolCount
		varNiatelemetryTenant.BfdIfpCount = varNiatelemetryTenantWithoutEmbeddedStruct.BfdIfpCount
		varNiatelemetryTenant.DhcpRsProvCount = varNiatelemetryTenantWithoutEmbeddedStruct.DhcpRsProvCount
		varNiatelemetryTenant.Dn = varNiatelemetryTenantWithoutEmbeddedStruct.Dn
		varNiatelemetryTenant.FhsBdPolCount = varNiatelemetryTenantWithoutEmbeddedStruct.FhsBdPolCount
		varNiatelemetryTenant.FvApCount = varNiatelemetryTenantWithoutEmbeddedStruct.FvApCount
		varNiatelemetryTenant.FvBdCount = varNiatelemetryTenantWithoutEmbeddedStruct.FvBdCount
		varNiatelemetryTenant.FvBdSubnetCount = varNiatelemetryTenantWithoutEmbeddedStruct.FvBdSubnetCount
		varNiatelemetryTenant.FvBdnoArpCount = varNiatelemetryTenantWithoutEmbeddedStruct.FvBdnoArpCount
		varNiatelemetryTenant.FvCepCount = varNiatelemetryTenantWithoutEmbeddedStruct.FvCepCount
		varNiatelemetryTenant.FvRsBdToFhsCount = varNiatelemetryTenantWithoutEmbeddedStruct.FvRsBdToFhsCount
		varNiatelemetryTenant.FvRsBdToOutCount = varNiatelemetryTenantWithoutEmbeddedStruct.FvRsBdToOutCount
		varNiatelemetryTenant.FvSiteConnpCount = varNiatelemetryTenantWithoutEmbeddedStruct.FvSiteConnpCount
		varNiatelemetryTenant.FvSubnetCount = varNiatelemetryTenantWithoutEmbeddedStruct.FvSubnetCount
		varNiatelemetryTenant.IpStaticRouteCount = varNiatelemetryTenantWithoutEmbeddedStruct.IpStaticRouteCount
		varNiatelemetryTenant.L3MulticastCount = varNiatelemetryTenantWithoutEmbeddedStruct.L3MulticastCount
		varNiatelemetryTenant.L3MulticastCtxCount = varNiatelemetryTenantWithoutEmbeddedStruct.L3MulticastCtxCount
		varNiatelemetryTenant.L3MulticastIfCount = varNiatelemetryTenantWithoutEmbeddedStruct.L3MulticastIfCount
		varNiatelemetryTenant.L3outCount = varNiatelemetryTenantWithoutEmbeddedStruct.L3outCount
		varNiatelemetryTenant.QosCustomPolCount = varNiatelemetryTenantWithoutEmbeddedStruct.QosCustomPolCount
		varNiatelemetryTenant.RecordType = varNiatelemetryTenantWithoutEmbeddedStruct.RecordType
		varNiatelemetryTenant.RecordVersion = varNiatelemetryTenantWithoutEmbeddedStruct.RecordVersion
		varNiatelemetryTenant.SiteName = varNiatelemetryTenantWithoutEmbeddedStruct.SiteName
		varNiatelemetryTenant.Ssm = varNiatelemetryTenantWithoutEmbeddedStruct.Ssm
		varNiatelemetryTenant.SsmCount = varNiatelemetryTenantWithoutEmbeddedStruct.SsmCount
		varNiatelemetryTenant.TcamOptCount = varNiatelemetryTenantWithoutEmbeddedStruct.TcamOptCount
		varNiatelemetryTenant.TenantHealth = varNiatelemetryTenantWithoutEmbeddedStruct.TenantHealth
		varNiatelemetryTenant.TraceRouteEpCount = varNiatelemetryTenantWithoutEmbeddedStruct.TraceRouteEpCount
		varNiatelemetryTenant.TraceRouteEpExtCount = varNiatelemetryTenantWithoutEmbeddedStruct.TraceRouteEpExtCount
		varNiatelemetryTenant.TraceRouteExtEpCount = varNiatelemetryTenantWithoutEmbeddedStruct.TraceRouteExtEpCount
		varNiatelemetryTenant.TraceRouteExtExtCount = varNiatelemetryTenantWithoutEmbeddedStruct.TraceRouteExtExtCount
		varNiatelemetryTenant.VnsAbsGraphCount = varNiatelemetryTenantWithoutEmbeddedStruct.VnsAbsGraphCount
		varNiatelemetryTenant.VnsBackupPolCount = varNiatelemetryTenantWithoutEmbeddedStruct.VnsBackupPolCount
		varNiatelemetryTenant.VnsRedirectDestCount = varNiatelemetryTenantWithoutEmbeddedStruct.VnsRedirectDestCount
		varNiatelemetryTenant.VnsSvcRedirectPolCount = varNiatelemetryTenantWithoutEmbeddedStruct.VnsSvcRedirectPolCount
		varNiatelemetryTenant.VrfCount = varNiatelemetryTenantWithoutEmbeddedStruct.VrfCount
		varNiatelemetryTenant.VzBrCpCount = varNiatelemetryTenantWithoutEmbeddedStruct.VzBrCpCount
		varNiatelemetryTenant.VzRtConsCount = varNiatelemetryTenantWithoutEmbeddedStruct.VzRtConsCount
		varNiatelemetryTenant.VzRtProvCount = varNiatelemetryTenantWithoutEmbeddedStruct.VzRtProvCount
		varNiatelemetryTenant.RegisteredDevice = varNiatelemetryTenantWithoutEmbeddedStruct.RegisteredDevice
		*o = NiatelemetryTenant(varNiatelemetryTenant)
	} else {
		return err
	}

	varNiatelemetryTenant := _NiatelemetryTenant{}

	err = json.Unmarshal(data, &varNiatelemetryTenant)
	if err == nil {
		o.MoBaseMo = varNiatelemetryTenant.MoBaseMo
	} else {
		return err
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "ClassId")
		delete(additionalProperties, "ObjectType")
		delete(additionalProperties, "BfdIfPolCount")
		delete(additionalProperties, "BfdIfpCount")
		delete(additionalProperties, "DhcpRsProvCount")
		delete(additionalProperties, "Dn")
		delete(additionalProperties, "FhsBdPolCount")
		delete(additionalProperties, "FvApCount")
		delete(additionalProperties, "FvBdCount")
		delete(additionalProperties, "FvBdSubnetCount")
		delete(additionalProperties, "FvBdnoArpCount")
		delete(additionalProperties, "FvCepCount")
		delete(additionalProperties, "FvRsBdToFhsCount")
		delete(additionalProperties, "FvRsBdToOutCount")
		delete(additionalProperties, "FvSiteConnpCount")
		delete(additionalProperties, "FvSubnetCount")
		delete(additionalProperties, "IpStaticRouteCount")
		delete(additionalProperties, "L3MulticastCount")
		delete(additionalProperties, "L3MulticastCtxCount")
		delete(additionalProperties, "L3MulticastIfCount")
		delete(additionalProperties, "L3outCount")
		delete(additionalProperties, "QosCustomPolCount")
		delete(additionalProperties, "RecordType")
		delete(additionalProperties, "RecordVersion")
		delete(additionalProperties, "SiteName")
		delete(additionalProperties, "Ssm")
		delete(additionalProperties, "SsmCount")
		delete(additionalProperties, "TcamOptCount")
		delete(additionalProperties, "TenantHealth")
		delete(additionalProperties, "TraceRouteEpCount")
		delete(additionalProperties, "TraceRouteEpExtCount")
		delete(additionalProperties, "TraceRouteExtEpCount")
		delete(additionalProperties, "TraceRouteExtExtCount")
		delete(additionalProperties, "VnsAbsGraphCount")
		delete(additionalProperties, "VnsBackupPolCount")
		delete(additionalProperties, "VnsRedirectDestCount")
		delete(additionalProperties, "VnsSvcRedirectPolCount")
		delete(additionalProperties, "VrfCount")
		delete(additionalProperties, "VzBrCpCount")
		delete(additionalProperties, "VzRtConsCount")
		delete(additionalProperties, "VzRtProvCount")
		delete(additionalProperties, "RegisteredDevice")

		// remove fields from embedded structs
		reflectMoBaseMo := reflect.ValueOf(o.MoBaseMo)
		for i := 0; i < reflectMoBaseMo.Type().NumField(); i++ {
			t := reflectMoBaseMo.Type().Field(i)

			if jsonTag := t.Tag.Get("json"); jsonTag != "" {
				fieldName := ""
				if commaIdx := strings.Index(jsonTag, ","); commaIdx > 0 {
					fieldName = jsonTag[:commaIdx]
				} else {
					fieldName = jsonTag
				}
				if fieldName != "AdditionalProperties" {
					delete(additionalProperties, fieldName)
				}
			}
		}

		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableNiatelemetryTenant struct {
	value *NiatelemetryTenant
	isSet bool
}

func (v NullableNiatelemetryTenant) Get() *NiatelemetryTenant {
	return v.value
}

func (v *NullableNiatelemetryTenant) Set(val *NiatelemetryTenant) {
	v.value = val
	v.isSet = true
}

func (v NullableNiatelemetryTenant) IsSet() bool {
	return v.isSet
}

func (v *NullableNiatelemetryTenant) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNiatelemetryTenant(val *NiatelemetryTenant) *NullableNiatelemetryTenant {
	return &NullableNiatelemetryTenant{value: val, isSet: true}
}

func (v NullableNiatelemetryTenant) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNiatelemetryTenant) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
