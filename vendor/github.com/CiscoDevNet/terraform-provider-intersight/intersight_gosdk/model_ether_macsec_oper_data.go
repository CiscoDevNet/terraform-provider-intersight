/*
Cisco Intersight

Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations. The Intersight OpenAPI document defines the complete set of properties that are returned in the HTTP response. From that perspective, a client can expect that no additional properties are returned, unless these properties are explicitly defined in the OpenAPI document. However, when a client uses an older version of the Intersight OpenAPI document, the server may send additional properties because the software is more recent than the client. In that case, the client may receive properties that it does not know about. Some generated SDKs perform a strict validation of the HTTP response body against the OpenAPI document.

API version: 1.0.11-2025071017
Contact: intersight@cisco.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package intersight

import (
	"encoding/json"
	"fmt"
	"reflect"
	"strings"
)

// checks if the EtherMacsecOperData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EtherMacsecOperData{}

// EtherMacsecOperData Configuration information for the MacSecPolicy configured on an Ethernet uplink port or uplink port channel.
type EtherMacsecOperData struct {
	MoBaseComplexType
	// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.
	ClassId string `json:"ClassId"`
	// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
	ObjectType string `json:"ObjectType"`
	// The authentication mode used for MACsec encryption.
	AuthMode *string `json:"AuthMode,omitempty"`
	// Cipher suite to be used for MACsec encryption.
	CipherSuite *string `json:"CipherSuite,omitempty"`
	// The MACsec confidentiality offset specifies the number of bytes starting from the frame header. MACsec encrypts only the bytes after the offset in a frame.
	ConfidentialityOffset *string `json:"ConfidentialityOffset,omitempty"`
	// The value indicates that the device is acting as a key server, responsible for distributing encryption keys to other devices in the MACsec-enabled session.
	KeyServer *string `json:"KeyServer,omitempty"`
	// The state of the MACsec session.
	SessionState *string `json:"SessionState,omitempty"`
	// The reason for the MACsec session state.
	StateReason          *string `json:"StateReason,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _EtherMacsecOperData EtherMacsecOperData

// NewEtherMacsecOperData instantiates a new EtherMacsecOperData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEtherMacsecOperData(classId string, objectType string) *EtherMacsecOperData {
	this := EtherMacsecOperData{}
	this.ClassId = classId
	this.ObjectType = objectType
	return &this
}

// NewEtherMacsecOperDataWithDefaults instantiates a new EtherMacsecOperData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEtherMacsecOperDataWithDefaults() *EtherMacsecOperData {
	this := EtherMacsecOperData{}
	var classId string = "ether.MacsecOperData"
	this.ClassId = classId
	var objectType string = "ether.MacsecOperData"
	this.ObjectType = objectType
	return &this
}

// GetClassId returns the ClassId field value
func (o *EtherMacsecOperData) GetClassId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ClassId
}

// GetClassIdOk returns a tuple with the ClassId field value
// and a boolean to check if the value has been set.
func (o *EtherMacsecOperData) GetClassIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ClassId, true
}

// SetClassId sets field value
func (o *EtherMacsecOperData) SetClassId(v string) {
	o.ClassId = v
}

// GetDefaultClassId returns the default value "ether.MacsecOperData" of the ClassId field.
func (o *EtherMacsecOperData) GetDefaultClassId() interface{} {
	return "ether.MacsecOperData"
}

// GetObjectType returns the ObjectType field value
func (o *EtherMacsecOperData) GetObjectType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ObjectType
}

// GetObjectTypeOk returns a tuple with the ObjectType field value
// and a boolean to check if the value has been set.
func (o *EtherMacsecOperData) GetObjectTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ObjectType, true
}

// SetObjectType sets field value
func (o *EtherMacsecOperData) SetObjectType(v string) {
	o.ObjectType = v
}

// GetDefaultObjectType returns the default value "ether.MacsecOperData" of the ObjectType field.
func (o *EtherMacsecOperData) GetDefaultObjectType() interface{} {
	return "ether.MacsecOperData"
}

// GetAuthMode returns the AuthMode field value if set, zero value otherwise.
func (o *EtherMacsecOperData) GetAuthMode() string {
	if o == nil || IsNil(o.AuthMode) {
		var ret string
		return ret
	}
	return *o.AuthMode
}

// GetAuthModeOk returns a tuple with the AuthMode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EtherMacsecOperData) GetAuthModeOk() (*string, bool) {
	if o == nil || IsNil(o.AuthMode) {
		return nil, false
	}
	return o.AuthMode, true
}

// HasAuthMode returns a boolean if a field has been set.
func (o *EtherMacsecOperData) HasAuthMode() bool {
	if o != nil && !IsNil(o.AuthMode) {
		return true
	}

	return false
}

// SetAuthMode gets a reference to the given string and assigns it to the AuthMode field.
func (o *EtherMacsecOperData) SetAuthMode(v string) {
	o.AuthMode = &v
}

// GetCipherSuite returns the CipherSuite field value if set, zero value otherwise.
func (o *EtherMacsecOperData) GetCipherSuite() string {
	if o == nil || IsNil(o.CipherSuite) {
		var ret string
		return ret
	}
	return *o.CipherSuite
}

// GetCipherSuiteOk returns a tuple with the CipherSuite field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EtherMacsecOperData) GetCipherSuiteOk() (*string, bool) {
	if o == nil || IsNil(o.CipherSuite) {
		return nil, false
	}
	return o.CipherSuite, true
}

// HasCipherSuite returns a boolean if a field has been set.
func (o *EtherMacsecOperData) HasCipherSuite() bool {
	if o != nil && !IsNil(o.CipherSuite) {
		return true
	}

	return false
}

// SetCipherSuite gets a reference to the given string and assigns it to the CipherSuite field.
func (o *EtherMacsecOperData) SetCipherSuite(v string) {
	o.CipherSuite = &v
}

// GetConfidentialityOffset returns the ConfidentialityOffset field value if set, zero value otherwise.
func (o *EtherMacsecOperData) GetConfidentialityOffset() string {
	if o == nil || IsNil(o.ConfidentialityOffset) {
		var ret string
		return ret
	}
	return *o.ConfidentialityOffset
}

// GetConfidentialityOffsetOk returns a tuple with the ConfidentialityOffset field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EtherMacsecOperData) GetConfidentialityOffsetOk() (*string, bool) {
	if o == nil || IsNil(o.ConfidentialityOffset) {
		return nil, false
	}
	return o.ConfidentialityOffset, true
}

// HasConfidentialityOffset returns a boolean if a field has been set.
func (o *EtherMacsecOperData) HasConfidentialityOffset() bool {
	if o != nil && !IsNil(o.ConfidentialityOffset) {
		return true
	}

	return false
}

// SetConfidentialityOffset gets a reference to the given string and assigns it to the ConfidentialityOffset field.
func (o *EtherMacsecOperData) SetConfidentialityOffset(v string) {
	o.ConfidentialityOffset = &v
}

// GetKeyServer returns the KeyServer field value if set, zero value otherwise.
func (o *EtherMacsecOperData) GetKeyServer() string {
	if o == nil || IsNil(o.KeyServer) {
		var ret string
		return ret
	}
	return *o.KeyServer
}

// GetKeyServerOk returns a tuple with the KeyServer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EtherMacsecOperData) GetKeyServerOk() (*string, bool) {
	if o == nil || IsNil(o.KeyServer) {
		return nil, false
	}
	return o.KeyServer, true
}

// HasKeyServer returns a boolean if a field has been set.
func (o *EtherMacsecOperData) HasKeyServer() bool {
	if o != nil && !IsNil(o.KeyServer) {
		return true
	}

	return false
}

// SetKeyServer gets a reference to the given string and assigns it to the KeyServer field.
func (o *EtherMacsecOperData) SetKeyServer(v string) {
	o.KeyServer = &v
}

// GetSessionState returns the SessionState field value if set, zero value otherwise.
func (o *EtherMacsecOperData) GetSessionState() string {
	if o == nil || IsNil(o.SessionState) {
		var ret string
		return ret
	}
	return *o.SessionState
}

// GetSessionStateOk returns a tuple with the SessionState field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EtherMacsecOperData) GetSessionStateOk() (*string, bool) {
	if o == nil || IsNil(o.SessionState) {
		return nil, false
	}
	return o.SessionState, true
}

// HasSessionState returns a boolean if a field has been set.
func (o *EtherMacsecOperData) HasSessionState() bool {
	if o != nil && !IsNil(o.SessionState) {
		return true
	}

	return false
}

// SetSessionState gets a reference to the given string and assigns it to the SessionState field.
func (o *EtherMacsecOperData) SetSessionState(v string) {
	o.SessionState = &v
}

// GetStateReason returns the StateReason field value if set, zero value otherwise.
func (o *EtherMacsecOperData) GetStateReason() string {
	if o == nil || IsNil(o.StateReason) {
		var ret string
		return ret
	}
	return *o.StateReason
}

// GetStateReasonOk returns a tuple with the StateReason field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EtherMacsecOperData) GetStateReasonOk() (*string, bool) {
	if o == nil || IsNil(o.StateReason) {
		return nil, false
	}
	return o.StateReason, true
}

// HasStateReason returns a boolean if a field has been set.
func (o *EtherMacsecOperData) HasStateReason() bool {
	if o != nil && !IsNil(o.StateReason) {
		return true
	}

	return false
}

// SetStateReason gets a reference to the given string and assigns it to the StateReason field.
func (o *EtherMacsecOperData) SetStateReason(v string) {
	o.StateReason = &v
}

func (o EtherMacsecOperData) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EtherMacsecOperData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	serializedMoBaseComplexType, errMoBaseComplexType := json.Marshal(o.MoBaseComplexType)
	if errMoBaseComplexType != nil {
		return map[string]interface{}{}, errMoBaseComplexType
	}
	errMoBaseComplexType = json.Unmarshal([]byte(serializedMoBaseComplexType), &toSerialize)
	if errMoBaseComplexType != nil {
		return map[string]interface{}{}, errMoBaseComplexType
	}
	if _, exists := toSerialize["ClassId"]; !exists {
		toSerialize["ClassId"] = o.GetDefaultClassId()
	}
	toSerialize["ClassId"] = o.ClassId
	if _, exists := toSerialize["ObjectType"]; !exists {
		toSerialize["ObjectType"] = o.GetDefaultObjectType()
	}
	toSerialize["ObjectType"] = o.ObjectType
	if !IsNil(o.AuthMode) {
		toSerialize["AuthMode"] = o.AuthMode
	}
	if !IsNil(o.CipherSuite) {
		toSerialize["CipherSuite"] = o.CipherSuite
	}
	if !IsNil(o.ConfidentialityOffset) {
		toSerialize["ConfidentialityOffset"] = o.ConfidentialityOffset
	}
	if !IsNil(o.KeyServer) {
		toSerialize["KeyServer"] = o.KeyServer
	}
	if !IsNil(o.SessionState) {
		toSerialize["SessionState"] = o.SessionState
	}
	if !IsNil(o.StateReason) {
		toSerialize["StateReason"] = o.StateReason
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *EtherMacsecOperData) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"ClassId",
		"ObjectType",
	}

	// defaultValueFuncMap captures the default values for required properties.
	// These values are used when required properties are missing from the payload.
	defaultValueFuncMap := map[string]func() interface{}{
		"ClassId":    o.GetDefaultClassId,
		"ObjectType": o.GetDefaultObjectType,
	}
	var defaultValueApplied bool
	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			if _, ok := defaultValueFuncMap[requiredProperty]; ok {
				allProperties[requiredProperty] = defaultValueFuncMap[requiredProperty]()
				defaultValueApplied = true
			}
		}
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	if defaultValueApplied {
		data, err = json.Marshal(allProperties)
		if err != nil {
			return err
		}
	}
	type EtherMacsecOperDataWithoutEmbeddedStruct struct {
		// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.
		ClassId string `json:"ClassId"`
		// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
		ObjectType string `json:"ObjectType"`
		// The authentication mode used for MACsec encryption.
		AuthMode *string `json:"AuthMode,omitempty"`
		// Cipher suite to be used for MACsec encryption.
		CipherSuite *string `json:"CipherSuite,omitempty"`
		// The MACsec confidentiality offset specifies the number of bytes starting from the frame header. MACsec encrypts only the bytes after the offset in a frame.
		ConfidentialityOffset *string `json:"ConfidentialityOffset,omitempty"`
		// The value indicates that the device is acting as a key server, responsible for distributing encryption keys to other devices in the MACsec-enabled session.
		KeyServer *string `json:"KeyServer,omitempty"`
		// The state of the MACsec session.
		SessionState *string `json:"SessionState,omitempty"`
		// The reason for the MACsec session state.
		StateReason *string `json:"StateReason,omitempty"`
	}

	varEtherMacsecOperDataWithoutEmbeddedStruct := EtherMacsecOperDataWithoutEmbeddedStruct{}

	err = json.Unmarshal(data, &varEtherMacsecOperDataWithoutEmbeddedStruct)
	if err == nil {
		varEtherMacsecOperData := _EtherMacsecOperData{}
		varEtherMacsecOperData.ClassId = varEtherMacsecOperDataWithoutEmbeddedStruct.ClassId
		varEtherMacsecOperData.ObjectType = varEtherMacsecOperDataWithoutEmbeddedStruct.ObjectType
		varEtherMacsecOperData.AuthMode = varEtherMacsecOperDataWithoutEmbeddedStruct.AuthMode
		varEtherMacsecOperData.CipherSuite = varEtherMacsecOperDataWithoutEmbeddedStruct.CipherSuite
		varEtherMacsecOperData.ConfidentialityOffset = varEtherMacsecOperDataWithoutEmbeddedStruct.ConfidentialityOffset
		varEtherMacsecOperData.KeyServer = varEtherMacsecOperDataWithoutEmbeddedStruct.KeyServer
		varEtherMacsecOperData.SessionState = varEtherMacsecOperDataWithoutEmbeddedStruct.SessionState
		varEtherMacsecOperData.StateReason = varEtherMacsecOperDataWithoutEmbeddedStruct.StateReason
		*o = EtherMacsecOperData(varEtherMacsecOperData)
	} else {
		return err
	}

	varEtherMacsecOperData := _EtherMacsecOperData{}

	err = json.Unmarshal(data, &varEtherMacsecOperData)
	if err == nil {
		o.MoBaseComplexType = varEtherMacsecOperData.MoBaseComplexType
	} else {
		return err
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "ClassId")
		delete(additionalProperties, "ObjectType")
		delete(additionalProperties, "AuthMode")
		delete(additionalProperties, "CipherSuite")
		delete(additionalProperties, "ConfidentialityOffset")
		delete(additionalProperties, "KeyServer")
		delete(additionalProperties, "SessionState")
		delete(additionalProperties, "StateReason")

		// remove fields from embedded structs
		reflectMoBaseComplexType := reflect.ValueOf(o.MoBaseComplexType)
		for i := 0; i < reflectMoBaseComplexType.Type().NumField(); i++ {
			t := reflectMoBaseComplexType.Type().Field(i)

			if jsonTag := t.Tag.Get("json"); jsonTag != "" {
				fieldName := ""
				if commaIdx := strings.Index(jsonTag, ","); commaIdx > 0 {
					fieldName = jsonTag[:commaIdx]
				} else {
					fieldName = jsonTag
				}
				if fieldName != "AdditionalProperties" {
					delete(additionalProperties, fieldName)
				}
			}
		}

		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableEtherMacsecOperData struct {
	value *EtherMacsecOperData
	isSet bool
}

func (v NullableEtherMacsecOperData) Get() *EtherMacsecOperData {
	return v.value
}

func (v *NullableEtherMacsecOperData) Set(val *EtherMacsecOperData) {
	v.value = val
	v.isSet = true
}

func (v NullableEtherMacsecOperData) IsSet() bool {
	return v.isSet
}

func (v *NullableEtherMacsecOperData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEtherMacsecOperData(val *EtherMacsecOperData) *NullableEtherMacsecOperData {
	return &NullableEtherMacsecOperData{value: val, isSet: true}
}

func (v NullableEtherMacsecOperData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEtherMacsecOperData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
