/*
Cisco Intersight

Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations. The Intersight OpenAPI document defines the complete set of properties that are returned in the HTTP response. From that perspective, a client can expect that no additional properties are returned, unless these properties are explicitly defined in the OpenAPI document. However, when a client uses an older version of the Intersight OpenAPI document, the server may send additional properties because the software is more recent than the client. In that case, the client may receive properties that it does not know about. Some generated SDKs perform a strict validation of the HTTP response body against the OpenAPI document.

API version: 1.0.11-2025101412
Contact: intersight@cisco.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package intersight

import (
	"encoding/json"
	"fmt"
	"reflect"
	"strings"
)

// checks if the WorkloadBlueprint type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &WorkloadBlueprint{}

// WorkloadBlueprint A blueprint detailed description.
type WorkloadBlueprint struct {
	MoBaseMo
	// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.
	ClassId string `json:"ClassId"`
	// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
	ObjectType            string                                   `json:"ObjectType"`
	BlueprintDependencies []BlueprintBlueprintDefinitionDependency `json:"BlueprintDependencies,omitempty"`
	// The flag to indicate that this is the default version of the blueprint.
	DefaultVersion *bool `json:"DefaultVersion,omitempty"`
	// The description for this blueprint which provides information on what are the pre-requisites to deploy the blueprint and what features are supported on the blueprint.
	Description *string `json:"Description,omitempty" validate:"regexp=^$|^[a-zA-Z0-9]+[\\\\x00-\\\\xFF]*$"`
	// When set to false the blueprint is created for use within internal services.
	ExternalMeta              *bool                              `json:"ExternalMeta,omitempty"`
	GeneratedObjectDefinition []BlueprintGeneratedObjectMetadata `json:"GeneratedObjectDefinition,omitempty"`
	InputDefinition           []WorkflowBaseDataType             `json:"InputDefinition,omitempty"`
	InputOperationMetadata    []BlueprintInputOperationType      `json:"InputOperationMetadata,omitempty"`
	// A user friendly short name to identify the blueprint. Name can only contain letters (a-z, A-Z), numbers (0-9), hyphen (-), period (.), colon (:), space ( ) or an underscore (_).
	Label *string `json:"Label,omitempty" validate:"regexp=^[a-zA-Z0-9]+[\\\\sa-zA-Z0-9_.:-]{1,31}$"`
	// The name for this blueprint. You can have multiple versions of the blueprint with the same name. Name can only contain letters (a-z, A-Z), numbers (0-9), or an underscore (_).
	Name *string `json:"Name,omitempty" validate:"regexp=^[a-zA-Z0-9][a-zA-Z0-9_]{0,31}$"`
	// The Intersight platforms supported by this blueprint. * `None` - Default value is none, platform is not mentioned. * `UnifiedEdge` - The blueprint is created for Unified Edge platform.
	PlatformType          *string                               `json:"PlatformType,omitempty"`
	ResourceDefinition    NullableBlueprintResourceConstraints  `json:"ResourceDefinition,omitempty"`
	ServiceItems          []BlueprintServiceItemDefinition      `json:"ServiceItems,omitempty"`
	ValidationInformation NullableWorkflowValidationInformation `json:"ValidationInformation,omitempty"`
	// The version of the blueprint to support multiple versions.
	Version              *int64                              `json:"Version,omitempty"`
	Catalog              NullableWorkflowCatalogRelationship `json:"Catalog,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _WorkloadBlueprint WorkloadBlueprint

// NewWorkloadBlueprint instantiates a new WorkloadBlueprint object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWorkloadBlueprint(classId string, objectType string) *WorkloadBlueprint {
	this := WorkloadBlueprint{}
	this.ClassId = classId
	this.ObjectType = objectType
	var defaultVersion bool = false
	this.DefaultVersion = &defaultVersion
	var externalMeta bool = false
	this.ExternalMeta = &externalMeta
	var platformType string = "None"
	this.PlatformType = &platformType
	var version int64 = 1
	this.Version = &version
	return &this
}

// NewWorkloadBlueprintWithDefaults instantiates a new WorkloadBlueprint object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWorkloadBlueprintWithDefaults() *WorkloadBlueprint {
	this := WorkloadBlueprint{}
	var classId string = "workload.Blueprint"
	this.ClassId = classId
	var objectType string = "workload.Blueprint"
	this.ObjectType = objectType
	var defaultVersion bool = false
	this.DefaultVersion = &defaultVersion
	var externalMeta bool = false
	this.ExternalMeta = &externalMeta
	var platformType string = "None"
	this.PlatformType = &platformType
	var version int64 = 1
	this.Version = &version
	return &this
}

// GetClassId returns the ClassId field value
func (o *WorkloadBlueprint) GetClassId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ClassId
}

// GetClassIdOk returns a tuple with the ClassId field value
// and a boolean to check if the value has been set.
func (o *WorkloadBlueprint) GetClassIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ClassId, true
}

// SetClassId sets field value
func (o *WorkloadBlueprint) SetClassId(v string) {
	o.ClassId = v
}

// GetDefaultClassId returns the default value "workload.Blueprint" of the ClassId field.
func (o *WorkloadBlueprint) GetDefaultClassId() interface{} {
	return "workload.Blueprint"
}

// GetObjectType returns the ObjectType field value
func (o *WorkloadBlueprint) GetObjectType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ObjectType
}

// GetObjectTypeOk returns a tuple with the ObjectType field value
// and a boolean to check if the value has been set.
func (o *WorkloadBlueprint) GetObjectTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ObjectType, true
}

// SetObjectType sets field value
func (o *WorkloadBlueprint) SetObjectType(v string) {
	o.ObjectType = v
}

// GetDefaultObjectType returns the default value "workload.Blueprint" of the ObjectType field.
func (o *WorkloadBlueprint) GetDefaultObjectType() interface{} {
	return "workload.Blueprint"
}

// GetBlueprintDependencies returns the BlueprintDependencies field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *WorkloadBlueprint) GetBlueprintDependencies() []BlueprintBlueprintDefinitionDependency {
	if o == nil {
		var ret []BlueprintBlueprintDefinitionDependency
		return ret
	}
	return o.BlueprintDependencies
}

// GetBlueprintDependenciesOk returns a tuple with the BlueprintDependencies field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *WorkloadBlueprint) GetBlueprintDependenciesOk() ([]BlueprintBlueprintDefinitionDependency, bool) {
	if o == nil || IsNil(o.BlueprintDependencies) {
		return nil, false
	}
	return o.BlueprintDependencies, true
}

// HasBlueprintDependencies returns a boolean if a field has been set.
func (o *WorkloadBlueprint) HasBlueprintDependencies() bool {
	if o != nil && !IsNil(o.BlueprintDependencies) {
		return true
	}

	return false
}

// SetBlueprintDependencies gets a reference to the given []BlueprintBlueprintDefinitionDependency and assigns it to the BlueprintDependencies field.
func (o *WorkloadBlueprint) SetBlueprintDependencies(v []BlueprintBlueprintDefinitionDependency) {
	o.BlueprintDependencies = v
}

// GetDefaultVersion returns the DefaultVersion field value if set, zero value otherwise.
func (o *WorkloadBlueprint) GetDefaultVersion() bool {
	if o == nil || IsNil(o.DefaultVersion) {
		var ret bool
		return ret
	}
	return *o.DefaultVersion
}

// GetDefaultVersionOk returns a tuple with the DefaultVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkloadBlueprint) GetDefaultVersionOk() (*bool, bool) {
	if o == nil || IsNil(o.DefaultVersion) {
		return nil, false
	}
	return o.DefaultVersion, true
}

// HasDefaultVersion returns a boolean if a field has been set.
func (o *WorkloadBlueprint) HasDefaultVersion() bool {
	if o != nil && !IsNil(o.DefaultVersion) {
		return true
	}

	return false
}

// SetDefaultVersion gets a reference to the given bool and assigns it to the DefaultVersion field.
func (o *WorkloadBlueprint) SetDefaultVersion(v bool) {
	o.DefaultVersion = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *WorkloadBlueprint) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkloadBlueprint) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *WorkloadBlueprint) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *WorkloadBlueprint) SetDescription(v string) {
	o.Description = &v
}

// GetExternalMeta returns the ExternalMeta field value if set, zero value otherwise.
func (o *WorkloadBlueprint) GetExternalMeta() bool {
	if o == nil || IsNil(o.ExternalMeta) {
		var ret bool
		return ret
	}
	return *o.ExternalMeta
}

// GetExternalMetaOk returns a tuple with the ExternalMeta field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkloadBlueprint) GetExternalMetaOk() (*bool, bool) {
	if o == nil || IsNil(o.ExternalMeta) {
		return nil, false
	}
	return o.ExternalMeta, true
}

// HasExternalMeta returns a boolean if a field has been set.
func (o *WorkloadBlueprint) HasExternalMeta() bool {
	if o != nil && !IsNil(o.ExternalMeta) {
		return true
	}

	return false
}

// SetExternalMeta gets a reference to the given bool and assigns it to the ExternalMeta field.
func (o *WorkloadBlueprint) SetExternalMeta(v bool) {
	o.ExternalMeta = &v
}

// GetGeneratedObjectDefinition returns the GeneratedObjectDefinition field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *WorkloadBlueprint) GetGeneratedObjectDefinition() []BlueprintGeneratedObjectMetadata {
	if o == nil {
		var ret []BlueprintGeneratedObjectMetadata
		return ret
	}
	return o.GeneratedObjectDefinition
}

// GetGeneratedObjectDefinitionOk returns a tuple with the GeneratedObjectDefinition field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *WorkloadBlueprint) GetGeneratedObjectDefinitionOk() ([]BlueprintGeneratedObjectMetadata, bool) {
	if o == nil || IsNil(o.GeneratedObjectDefinition) {
		return nil, false
	}
	return o.GeneratedObjectDefinition, true
}

// HasGeneratedObjectDefinition returns a boolean if a field has been set.
func (o *WorkloadBlueprint) HasGeneratedObjectDefinition() bool {
	if o != nil && !IsNil(o.GeneratedObjectDefinition) {
		return true
	}

	return false
}

// SetGeneratedObjectDefinition gets a reference to the given []BlueprintGeneratedObjectMetadata and assigns it to the GeneratedObjectDefinition field.
func (o *WorkloadBlueprint) SetGeneratedObjectDefinition(v []BlueprintGeneratedObjectMetadata) {
	o.GeneratedObjectDefinition = v
}

// GetInputDefinition returns the InputDefinition field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *WorkloadBlueprint) GetInputDefinition() []WorkflowBaseDataType {
	if o == nil {
		var ret []WorkflowBaseDataType
		return ret
	}
	return o.InputDefinition
}

// GetInputDefinitionOk returns a tuple with the InputDefinition field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *WorkloadBlueprint) GetInputDefinitionOk() ([]WorkflowBaseDataType, bool) {
	if o == nil || IsNil(o.InputDefinition) {
		return nil, false
	}
	return o.InputDefinition, true
}

// HasInputDefinition returns a boolean if a field has been set.
func (o *WorkloadBlueprint) HasInputDefinition() bool {
	if o != nil && !IsNil(o.InputDefinition) {
		return true
	}

	return false
}

// SetInputDefinition gets a reference to the given []WorkflowBaseDataType and assigns it to the InputDefinition field.
func (o *WorkloadBlueprint) SetInputDefinition(v []WorkflowBaseDataType) {
	o.InputDefinition = v
}

// GetInputOperationMetadata returns the InputOperationMetadata field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *WorkloadBlueprint) GetInputOperationMetadata() []BlueprintInputOperationType {
	if o == nil {
		var ret []BlueprintInputOperationType
		return ret
	}
	return o.InputOperationMetadata
}

// GetInputOperationMetadataOk returns a tuple with the InputOperationMetadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *WorkloadBlueprint) GetInputOperationMetadataOk() ([]BlueprintInputOperationType, bool) {
	if o == nil || IsNil(o.InputOperationMetadata) {
		return nil, false
	}
	return o.InputOperationMetadata, true
}

// HasInputOperationMetadata returns a boolean if a field has been set.
func (o *WorkloadBlueprint) HasInputOperationMetadata() bool {
	if o != nil && !IsNil(o.InputOperationMetadata) {
		return true
	}

	return false
}

// SetInputOperationMetadata gets a reference to the given []BlueprintInputOperationType and assigns it to the InputOperationMetadata field.
func (o *WorkloadBlueprint) SetInputOperationMetadata(v []BlueprintInputOperationType) {
	o.InputOperationMetadata = v
}

// GetLabel returns the Label field value if set, zero value otherwise.
func (o *WorkloadBlueprint) GetLabel() string {
	if o == nil || IsNil(o.Label) {
		var ret string
		return ret
	}
	return *o.Label
}

// GetLabelOk returns a tuple with the Label field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkloadBlueprint) GetLabelOk() (*string, bool) {
	if o == nil || IsNil(o.Label) {
		return nil, false
	}
	return o.Label, true
}

// HasLabel returns a boolean if a field has been set.
func (o *WorkloadBlueprint) HasLabel() bool {
	if o != nil && !IsNil(o.Label) {
		return true
	}

	return false
}

// SetLabel gets a reference to the given string and assigns it to the Label field.
func (o *WorkloadBlueprint) SetLabel(v string) {
	o.Label = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *WorkloadBlueprint) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkloadBlueprint) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *WorkloadBlueprint) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *WorkloadBlueprint) SetName(v string) {
	o.Name = &v
}

// GetPlatformType returns the PlatformType field value if set, zero value otherwise.
func (o *WorkloadBlueprint) GetPlatformType() string {
	if o == nil || IsNil(o.PlatformType) {
		var ret string
		return ret
	}
	return *o.PlatformType
}

// GetPlatformTypeOk returns a tuple with the PlatformType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkloadBlueprint) GetPlatformTypeOk() (*string, bool) {
	if o == nil || IsNil(o.PlatformType) {
		return nil, false
	}
	return o.PlatformType, true
}

// HasPlatformType returns a boolean if a field has been set.
func (o *WorkloadBlueprint) HasPlatformType() bool {
	if o != nil && !IsNil(o.PlatformType) {
		return true
	}

	return false
}

// SetPlatformType gets a reference to the given string and assigns it to the PlatformType field.
func (o *WorkloadBlueprint) SetPlatformType(v string) {
	o.PlatformType = &v
}

// GetResourceDefinition returns the ResourceDefinition field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *WorkloadBlueprint) GetResourceDefinition() BlueprintResourceConstraints {
	if o == nil || IsNil(o.ResourceDefinition.Get()) {
		var ret BlueprintResourceConstraints
		return ret
	}
	return *o.ResourceDefinition.Get()
}

// GetResourceDefinitionOk returns a tuple with the ResourceDefinition field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *WorkloadBlueprint) GetResourceDefinitionOk() (*BlueprintResourceConstraints, bool) {
	if o == nil {
		return nil, false
	}
	return o.ResourceDefinition.Get(), o.ResourceDefinition.IsSet()
}

// HasResourceDefinition returns a boolean if a field has been set.
func (o *WorkloadBlueprint) HasResourceDefinition() bool {
	if o != nil && o.ResourceDefinition.IsSet() {
		return true
	}

	return false
}

// SetResourceDefinition gets a reference to the given NullableBlueprintResourceConstraints and assigns it to the ResourceDefinition field.
func (o *WorkloadBlueprint) SetResourceDefinition(v BlueprintResourceConstraints) {
	o.ResourceDefinition.Set(&v)
}

// SetResourceDefinitionNil sets the value for ResourceDefinition to be an explicit nil
func (o *WorkloadBlueprint) SetResourceDefinitionNil() {
	o.ResourceDefinition.Set(nil)
}

// UnsetResourceDefinition ensures that no value is present for ResourceDefinition, not even an explicit nil
func (o *WorkloadBlueprint) UnsetResourceDefinition() {
	o.ResourceDefinition.Unset()
}

// GetServiceItems returns the ServiceItems field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *WorkloadBlueprint) GetServiceItems() []BlueprintServiceItemDefinition {
	if o == nil {
		var ret []BlueprintServiceItemDefinition
		return ret
	}
	return o.ServiceItems
}

// GetServiceItemsOk returns a tuple with the ServiceItems field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *WorkloadBlueprint) GetServiceItemsOk() ([]BlueprintServiceItemDefinition, bool) {
	if o == nil || IsNil(o.ServiceItems) {
		return nil, false
	}
	return o.ServiceItems, true
}

// HasServiceItems returns a boolean if a field has been set.
func (o *WorkloadBlueprint) HasServiceItems() bool {
	if o != nil && !IsNil(o.ServiceItems) {
		return true
	}

	return false
}

// SetServiceItems gets a reference to the given []BlueprintServiceItemDefinition and assigns it to the ServiceItems field.
func (o *WorkloadBlueprint) SetServiceItems(v []BlueprintServiceItemDefinition) {
	o.ServiceItems = v
}

// GetValidationInformation returns the ValidationInformation field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *WorkloadBlueprint) GetValidationInformation() WorkflowValidationInformation {
	if o == nil || IsNil(o.ValidationInformation.Get()) {
		var ret WorkflowValidationInformation
		return ret
	}
	return *o.ValidationInformation.Get()
}

// GetValidationInformationOk returns a tuple with the ValidationInformation field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *WorkloadBlueprint) GetValidationInformationOk() (*WorkflowValidationInformation, bool) {
	if o == nil {
		return nil, false
	}
	return o.ValidationInformation.Get(), o.ValidationInformation.IsSet()
}

// HasValidationInformation returns a boolean if a field has been set.
func (o *WorkloadBlueprint) HasValidationInformation() bool {
	if o != nil && o.ValidationInformation.IsSet() {
		return true
	}

	return false
}

// SetValidationInformation gets a reference to the given NullableWorkflowValidationInformation and assigns it to the ValidationInformation field.
func (o *WorkloadBlueprint) SetValidationInformation(v WorkflowValidationInformation) {
	o.ValidationInformation.Set(&v)
}

// SetValidationInformationNil sets the value for ValidationInformation to be an explicit nil
func (o *WorkloadBlueprint) SetValidationInformationNil() {
	o.ValidationInformation.Set(nil)
}

// UnsetValidationInformation ensures that no value is present for ValidationInformation, not even an explicit nil
func (o *WorkloadBlueprint) UnsetValidationInformation() {
	o.ValidationInformation.Unset()
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *WorkloadBlueprint) GetVersion() int64 {
	if o == nil || IsNil(o.Version) {
		var ret int64
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkloadBlueprint) GetVersionOk() (*int64, bool) {
	if o == nil || IsNil(o.Version) {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *WorkloadBlueprint) HasVersion() bool {
	if o != nil && !IsNil(o.Version) {
		return true
	}

	return false
}

// SetVersion gets a reference to the given int64 and assigns it to the Version field.
func (o *WorkloadBlueprint) SetVersion(v int64) {
	o.Version = &v
}

// GetCatalog returns the Catalog field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *WorkloadBlueprint) GetCatalog() WorkflowCatalogRelationship {
	if o == nil || IsNil(o.Catalog.Get()) {
		var ret WorkflowCatalogRelationship
		return ret
	}
	return *o.Catalog.Get()
}

// GetCatalogOk returns a tuple with the Catalog field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *WorkloadBlueprint) GetCatalogOk() (*WorkflowCatalogRelationship, bool) {
	if o == nil {
		return nil, false
	}
	return o.Catalog.Get(), o.Catalog.IsSet()
}

// HasCatalog returns a boolean if a field has been set.
func (o *WorkloadBlueprint) HasCatalog() bool {
	if o != nil && o.Catalog.IsSet() {
		return true
	}

	return false
}

// SetCatalog gets a reference to the given NullableWorkflowCatalogRelationship and assigns it to the Catalog field.
func (o *WorkloadBlueprint) SetCatalog(v WorkflowCatalogRelationship) {
	o.Catalog.Set(&v)
}

// SetCatalogNil sets the value for Catalog to be an explicit nil
func (o *WorkloadBlueprint) SetCatalogNil() {
	o.Catalog.Set(nil)
}

// UnsetCatalog ensures that no value is present for Catalog, not even an explicit nil
func (o *WorkloadBlueprint) UnsetCatalog() {
	o.Catalog.Unset()
}

func (o WorkloadBlueprint) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o WorkloadBlueprint) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	serializedMoBaseMo, errMoBaseMo := json.Marshal(o.MoBaseMo)
	if errMoBaseMo != nil {
		return map[string]interface{}{}, errMoBaseMo
	}
	errMoBaseMo = json.Unmarshal([]byte(serializedMoBaseMo), &toSerialize)
	if errMoBaseMo != nil {
		return map[string]interface{}{}, errMoBaseMo
	}
	if _, exists := toSerialize["ClassId"]; !exists {
		toSerialize["ClassId"] = o.GetDefaultClassId()
	}
	toSerialize["ClassId"] = o.ClassId
	if _, exists := toSerialize["ObjectType"]; !exists {
		toSerialize["ObjectType"] = o.GetDefaultObjectType()
	}
	toSerialize["ObjectType"] = o.ObjectType
	if o.BlueprintDependencies != nil {
		toSerialize["BlueprintDependencies"] = o.BlueprintDependencies
	}
	if !IsNil(o.DefaultVersion) {
		toSerialize["DefaultVersion"] = o.DefaultVersion
	}
	if !IsNil(o.Description) {
		toSerialize["Description"] = o.Description
	}
	if !IsNil(o.ExternalMeta) {
		toSerialize["ExternalMeta"] = o.ExternalMeta
	}
	if o.GeneratedObjectDefinition != nil {
		toSerialize["GeneratedObjectDefinition"] = o.GeneratedObjectDefinition
	}
	if o.InputDefinition != nil {
		toSerialize["InputDefinition"] = o.InputDefinition
	}
	if o.InputOperationMetadata != nil {
		toSerialize["InputOperationMetadata"] = o.InputOperationMetadata
	}
	if !IsNil(o.Label) {
		toSerialize["Label"] = o.Label
	}
	if !IsNil(o.Name) {
		toSerialize["Name"] = o.Name
	}
	if !IsNil(o.PlatformType) {
		toSerialize["PlatformType"] = o.PlatformType
	}
	if o.ResourceDefinition.IsSet() {
		toSerialize["ResourceDefinition"] = o.ResourceDefinition.Get()
	}
	if o.ServiceItems != nil {
		toSerialize["ServiceItems"] = o.ServiceItems
	}
	if o.ValidationInformation.IsSet() {
		toSerialize["ValidationInformation"] = o.ValidationInformation.Get()
	}
	if !IsNil(o.Version) {
		toSerialize["Version"] = o.Version
	}
	if o.Catalog.IsSet() {
		toSerialize["Catalog"] = o.Catalog.Get()
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *WorkloadBlueprint) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"ClassId",
		"ObjectType",
	}

	// defaultValueFuncMap captures the default values for required properties.
	// These values are used when required properties are missing from the payload.
	defaultValueFuncMap := map[string]func() interface{}{
		"ClassId":    o.GetDefaultClassId,
		"ObjectType": o.GetDefaultObjectType,
	}
	var defaultValueApplied bool
	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			if _, ok := defaultValueFuncMap[requiredProperty]; ok {
				allProperties[requiredProperty] = defaultValueFuncMap[requiredProperty]()
				defaultValueApplied = true
			}
		}
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	if defaultValueApplied {
		data, err = json.Marshal(allProperties)
		if err != nil {
			return err
		}
	}
	type WorkloadBlueprintWithoutEmbeddedStruct struct {
		// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.
		ClassId string `json:"ClassId"`
		// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
		ObjectType            string                                   `json:"ObjectType"`
		BlueprintDependencies []BlueprintBlueprintDefinitionDependency `json:"BlueprintDependencies,omitempty"`
		// The flag to indicate that this is the default version of the blueprint.
		DefaultVersion *bool `json:"DefaultVersion,omitempty"`
		// The description for this blueprint which provides information on what are the pre-requisites to deploy the blueprint and what features are supported on the blueprint.
		Description *string `json:"Description,omitempty" validate:"regexp=^$|^[a-zA-Z0-9]+[\\\\x00-\\\\xFF]*$"`
		// When set to false the blueprint is created for use within internal services.
		ExternalMeta              *bool                              `json:"ExternalMeta,omitempty"`
		GeneratedObjectDefinition []BlueprintGeneratedObjectMetadata `json:"GeneratedObjectDefinition,omitempty"`
		InputDefinition           []WorkflowBaseDataType             `json:"InputDefinition,omitempty"`
		InputOperationMetadata    []BlueprintInputOperationType      `json:"InputOperationMetadata,omitempty"`
		// A user friendly short name to identify the blueprint. Name can only contain letters (a-z, A-Z), numbers (0-9), hyphen (-), period (.), colon (:), space ( ) or an underscore (_).
		Label *string `json:"Label,omitempty" validate:"regexp=^[a-zA-Z0-9]+[\\\\sa-zA-Z0-9_.:-]{1,31}$"`
		// The name for this blueprint. You can have multiple versions of the blueprint with the same name. Name can only contain letters (a-z, A-Z), numbers (0-9), or an underscore (_).
		Name *string `json:"Name,omitempty" validate:"regexp=^[a-zA-Z0-9][a-zA-Z0-9_]{0,31}$"`
		// The Intersight platforms supported by this blueprint. * `None` - Default value is none, platform is not mentioned. * `UnifiedEdge` - The blueprint is created for Unified Edge platform.
		PlatformType          *string                               `json:"PlatformType,omitempty"`
		ResourceDefinition    NullableBlueprintResourceConstraints  `json:"ResourceDefinition,omitempty"`
		ServiceItems          []BlueprintServiceItemDefinition      `json:"ServiceItems,omitempty"`
		ValidationInformation NullableWorkflowValidationInformation `json:"ValidationInformation,omitempty"`
		// The version of the blueprint to support multiple versions.
		Version *int64                              `json:"Version,omitempty"`
		Catalog NullableWorkflowCatalogRelationship `json:"Catalog,omitempty"`
	}

	varWorkloadBlueprintWithoutEmbeddedStruct := WorkloadBlueprintWithoutEmbeddedStruct{}

	err = json.Unmarshal(data, &varWorkloadBlueprintWithoutEmbeddedStruct)
	if err == nil {
		varWorkloadBlueprint := _WorkloadBlueprint{}
		varWorkloadBlueprint.ClassId = varWorkloadBlueprintWithoutEmbeddedStruct.ClassId
		varWorkloadBlueprint.ObjectType = varWorkloadBlueprintWithoutEmbeddedStruct.ObjectType
		varWorkloadBlueprint.BlueprintDependencies = varWorkloadBlueprintWithoutEmbeddedStruct.BlueprintDependencies
		varWorkloadBlueprint.DefaultVersion = varWorkloadBlueprintWithoutEmbeddedStruct.DefaultVersion
		varWorkloadBlueprint.Description = varWorkloadBlueprintWithoutEmbeddedStruct.Description
		varWorkloadBlueprint.ExternalMeta = varWorkloadBlueprintWithoutEmbeddedStruct.ExternalMeta
		varWorkloadBlueprint.GeneratedObjectDefinition = varWorkloadBlueprintWithoutEmbeddedStruct.GeneratedObjectDefinition
		varWorkloadBlueprint.InputDefinition = varWorkloadBlueprintWithoutEmbeddedStruct.InputDefinition
		varWorkloadBlueprint.InputOperationMetadata = varWorkloadBlueprintWithoutEmbeddedStruct.InputOperationMetadata
		varWorkloadBlueprint.Label = varWorkloadBlueprintWithoutEmbeddedStruct.Label
		varWorkloadBlueprint.Name = varWorkloadBlueprintWithoutEmbeddedStruct.Name
		varWorkloadBlueprint.PlatformType = varWorkloadBlueprintWithoutEmbeddedStruct.PlatformType
		varWorkloadBlueprint.ResourceDefinition = varWorkloadBlueprintWithoutEmbeddedStruct.ResourceDefinition
		varWorkloadBlueprint.ServiceItems = varWorkloadBlueprintWithoutEmbeddedStruct.ServiceItems
		varWorkloadBlueprint.ValidationInformation = varWorkloadBlueprintWithoutEmbeddedStruct.ValidationInformation
		varWorkloadBlueprint.Version = varWorkloadBlueprintWithoutEmbeddedStruct.Version
		varWorkloadBlueprint.Catalog = varWorkloadBlueprintWithoutEmbeddedStruct.Catalog
		*o = WorkloadBlueprint(varWorkloadBlueprint)
	} else {
		return err
	}

	varWorkloadBlueprint := _WorkloadBlueprint{}

	err = json.Unmarshal(data, &varWorkloadBlueprint)
	if err == nil {
		o.MoBaseMo = varWorkloadBlueprint.MoBaseMo
	} else {
		return err
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "ClassId")
		delete(additionalProperties, "ObjectType")
		delete(additionalProperties, "BlueprintDependencies")
		delete(additionalProperties, "DefaultVersion")
		delete(additionalProperties, "Description")
		delete(additionalProperties, "ExternalMeta")
		delete(additionalProperties, "GeneratedObjectDefinition")
		delete(additionalProperties, "InputDefinition")
		delete(additionalProperties, "InputOperationMetadata")
		delete(additionalProperties, "Label")
		delete(additionalProperties, "Name")
		delete(additionalProperties, "PlatformType")
		delete(additionalProperties, "ResourceDefinition")
		delete(additionalProperties, "ServiceItems")
		delete(additionalProperties, "ValidationInformation")
		delete(additionalProperties, "Version")
		delete(additionalProperties, "Catalog")

		// remove fields from embedded structs
		reflectMoBaseMo := reflect.ValueOf(o.MoBaseMo)
		for i := 0; i < reflectMoBaseMo.Type().NumField(); i++ {
			t := reflectMoBaseMo.Type().Field(i)

			if jsonTag := t.Tag.Get("json"); jsonTag != "" {
				fieldName := ""
				if commaIdx := strings.Index(jsonTag, ","); commaIdx > 0 {
					fieldName = jsonTag[:commaIdx]
				} else {
					fieldName = jsonTag
				}
				if fieldName != "AdditionalProperties" {
					delete(additionalProperties, fieldName)
				}
			}
		}

		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableWorkloadBlueprint struct {
	value *WorkloadBlueprint
	isSet bool
}

func (v NullableWorkloadBlueprint) Get() *WorkloadBlueprint {
	return v.value
}

func (v *NullableWorkloadBlueprint) Set(val *WorkloadBlueprint) {
	v.value = val
	v.isSet = true
}

func (v NullableWorkloadBlueprint) IsSet() bool {
	return v.isSet
}

func (v *NullableWorkloadBlueprint) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWorkloadBlueprint(val *WorkloadBlueprint) *NullableWorkloadBlueprint {
	return &NullableWorkloadBlueprint{value: val, isSet: true}
}

func (v NullableWorkloadBlueprint) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWorkloadBlueprint) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
