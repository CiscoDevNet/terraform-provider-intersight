/*
Cisco Intersight

Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations. The Intersight OpenAPI document defines the complete set of properties that are returned in the HTTP response. From that perspective, a client can expect that no additional properties are returned, unless these properties are explicitly defined in the OpenAPI document. However, when a client uses an older version of the Intersight OpenAPI document, the server may send additional properties because the software is more recent than the client. In that case, the client may receive properties that it does not know about. Some generated SDKs perform a strict validation of the HTTP response body against the OpenAPI document.

API version: 1.0.9-5808
Contact: intersight@cisco.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package intersight

import (
	"encoding/json"
	"reflect"
	"strings"
)

// HyperflexServiceAuthToken A Service auth token entity that represents HyperFlex Data Platform service AAA token.
type HyperflexServiceAuthToken struct {
	MoBaseMo
	// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.
	ClassId string `json:"ClassId"`
	// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
	ObjectType string `json:"ObjectType"`
	// Client Id or tenant Id of the entity that uses the service auth token.
	ClientId *string `json:"ClientId,omitempty"`
	// Version of Container Storage Interface (CSI) that the tokenOwner is associated with.
	CsiVersion *string `json:"CsiVersion,omitempty"`
	// Service auth token that has been created by HyperFlex cluster.
	ServiceAuthToken *string `json:"ServiceAuthToken,omitempty"`
	// Represents status of ervice auth claim or revocation. * `Unknown` - Unknown claim state of the service auth token. * `Claiming` - The service auth token claim is in progress. * `Claimed` - The service auth token has been successfully claimed. * `FailedToClaim` - Cannot claim the service auth token on the underlying HyperFlex cluster. * `Revoking` - The service auth token revocation is in progress. * `Revoked` - The service auth token revocation has been successfully revoked. * `FailedToRevoke` - Cannot revoke the service auth token on the underlying HyperFlex cluster.
	Status               *string                               `json:"Status,omitempty"`
	Cluster              *HyperflexClusterRelationship         `json:"Cluster,omitempty"`
	Organization         *OrganizationOrganizationRelationship `json:"Organization,omitempty"`
	TokenOwner           *MoBaseMoRelationship                 `json:"TokenOwner,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _HyperflexServiceAuthToken HyperflexServiceAuthToken

// NewHyperflexServiceAuthToken instantiates a new HyperflexServiceAuthToken object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHyperflexServiceAuthToken(classId string, objectType string) *HyperflexServiceAuthToken {
	this := HyperflexServiceAuthToken{}
	this.ClassId = classId
	this.ObjectType = objectType
	return &this
}

// NewHyperflexServiceAuthTokenWithDefaults instantiates a new HyperflexServiceAuthToken object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHyperflexServiceAuthTokenWithDefaults() *HyperflexServiceAuthToken {
	this := HyperflexServiceAuthToken{}
	var classId string = "hyperflex.ServiceAuthToken"
	this.ClassId = classId
	var objectType string = "hyperflex.ServiceAuthToken"
	this.ObjectType = objectType
	return &this
}

// GetClassId returns the ClassId field value
func (o *HyperflexServiceAuthToken) GetClassId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ClassId
}

// GetClassIdOk returns a tuple with the ClassId field value
// and a boolean to check if the value has been set.
func (o *HyperflexServiceAuthToken) GetClassIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ClassId, true
}

// SetClassId sets field value
func (o *HyperflexServiceAuthToken) SetClassId(v string) {
	o.ClassId = v
}

// GetObjectType returns the ObjectType field value
func (o *HyperflexServiceAuthToken) GetObjectType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ObjectType
}

// GetObjectTypeOk returns a tuple with the ObjectType field value
// and a boolean to check if the value has been set.
func (o *HyperflexServiceAuthToken) GetObjectTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ObjectType, true
}

// SetObjectType sets field value
func (o *HyperflexServiceAuthToken) SetObjectType(v string) {
	o.ObjectType = v
}

// GetClientId returns the ClientId field value if set, zero value otherwise.
func (o *HyperflexServiceAuthToken) GetClientId() string {
	if o == nil || o.ClientId == nil {
		var ret string
		return ret
	}
	return *o.ClientId
}

// GetClientIdOk returns a tuple with the ClientId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HyperflexServiceAuthToken) GetClientIdOk() (*string, bool) {
	if o == nil || o.ClientId == nil {
		return nil, false
	}
	return o.ClientId, true
}

// HasClientId returns a boolean if a field has been set.
func (o *HyperflexServiceAuthToken) HasClientId() bool {
	if o != nil && o.ClientId != nil {
		return true
	}

	return false
}

// SetClientId gets a reference to the given string and assigns it to the ClientId field.
func (o *HyperflexServiceAuthToken) SetClientId(v string) {
	o.ClientId = &v
}

// GetCsiVersion returns the CsiVersion field value if set, zero value otherwise.
func (o *HyperflexServiceAuthToken) GetCsiVersion() string {
	if o == nil || o.CsiVersion == nil {
		var ret string
		return ret
	}
	return *o.CsiVersion
}

// GetCsiVersionOk returns a tuple with the CsiVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HyperflexServiceAuthToken) GetCsiVersionOk() (*string, bool) {
	if o == nil || o.CsiVersion == nil {
		return nil, false
	}
	return o.CsiVersion, true
}

// HasCsiVersion returns a boolean if a field has been set.
func (o *HyperflexServiceAuthToken) HasCsiVersion() bool {
	if o != nil && o.CsiVersion != nil {
		return true
	}

	return false
}

// SetCsiVersion gets a reference to the given string and assigns it to the CsiVersion field.
func (o *HyperflexServiceAuthToken) SetCsiVersion(v string) {
	o.CsiVersion = &v
}

// GetServiceAuthToken returns the ServiceAuthToken field value if set, zero value otherwise.
func (o *HyperflexServiceAuthToken) GetServiceAuthToken() string {
	if o == nil || o.ServiceAuthToken == nil {
		var ret string
		return ret
	}
	return *o.ServiceAuthToken
}

// GetServiceAuthTokenOk returns a tuple with the ServiceAuthToken field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HyperflexServiceAuthToken) GetServiceAuthTokenOk() (*string, bool) {
	if o == nil || o.ServiceAuthToken == nil {
		return nil, false
	}
	return o.ServiceAuthToken, true
}

// HasServiceAuthToken returns a boolean if a field has been set.
func (o *HyperflexServiceAuthToken) HasServiceAuthToken() bool {
	if o != nil && o.ServiceAuthToken != nil {
		return true
	}

	return false
}

// SetServiceAuthToken gets a reference to the given string and assigns it to the ServiceAuthToken field.
func (o *HyperflexServiceAuthToken) SetServiceAuthToken(v string) {
	o.ServiceAuthToken = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *HyperflexServiceAuthToken) GetStatus() string {
	if o == nil || o.Status == nil {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HyperflexServiceAuthToken) GetStatusOk() (*string, bool) {
	if o == nil || o.Status == nil {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *HyperflexServiceAuthToken) HasStatus() bool {
	if o != nil && o.Status != nil {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *HyperflexServiceAuthToken) SetStatus(v string) {
	o.Status = &v
}

// GetCluster returns the Cluster field value if set, zero value otherwise.
func (o *HyperflexServiceAuthToken) GetCluster() HyperflexClusterRelationship {
	if o == nil || o.Cluster == nil {
		var ret HyperflexClusterRelationship
		return ret
	}
	return *o.Cluster
}

// GetClusterOk returns a tuple with the Cluster field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HyperflexServiceAuthToken) GetClusterOk() (*HyperflexClusterRelationship, bool) {
	if o == nil || o.Cluster == nil {
		return nil, false
	}
	return o.Cluster, true
}

// HasCluster returns a boolean if a field has been set.
func (o *HyperflexServiceAuthToken) HasCluster() bool {
	if o != nil && o.Cluster != nil {
		return true
	}

	return false
}

// SetCluster gets a reference to the given HyperflexClusterRelationship and assigns it to the Cluster field.
func (o *HyperflexServiceAuthToken) SetCluster(v HyperflexClusterRelationship) {
	o.Cluster = &v
}

// GetOrganization returns the Organization field value if set, zero value otherwise.
func (o *HyperflexServiceAuthToken) GetOrganization() OrganizationOrganizationRelationship {
	if o == nil || o.Organization == nil {
		var ret OrganizationOrganizationRelationship
		return ret
	}
	return *o.Organization
}

// GetOrganizationOk returns a tuple with the Organization field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HyperflexServiceAuthToken) GetOrganizationOk() (*OrganizationOrganizationRelationship, bool) {
	if o == nil || o.Organization == nil {
		return nil, false
	}
	return o.Organization, true
}

// HasOrganization returns a boolean if a field has been set.
func (o *HyperflexServiceAuthToken) HasOrganization() bool {
	if o != nil && o.Organization != nil {
		return true
	}

	return false
}

// SetOrganization gets a reference to the given OrganizationOrganizationRelationship and assigns it to the Organization field.
func (o *HyperflexServiceAuthToken) SetOrganization(v OrganizationOrganizationRelationship) {
	o.Organization = &v
}

// GetTokenOwner returns the TokenOwner field value if set, zero value otherwise.
func (o *HyperflexServiceAuthToken) GetTokenOwner() MoBaseMoRelationship {
	if o == nil || o.TokenOwner == nil {
		var ret MoBaseMoRelationship
		return ret
	}
	return *o.TokenOwner
}

// GetTokenOwnerOk returns a tuple with the TokenOwner field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HyperflexServiceAuthToken) GetTokenOwnerOk() (*MoBaseMoRelationship, bool) {
	if o == nil || o.TokenOwner == nil {
		return nil, false
	}
	return o.TokenOwner, true
}

// HasTokenOwner returns a boolean if a field has been set.
func (o *HyperflexServiceAuthToken) HasTokenOwner() bool {
	if o != nil && o.TokenOwner != nil {
		return true
	}

	return false
}

// SetTokenOwner gets a reference to the given MoBaseMoRelationship and assigns it to the TokenOwner field.
func (o *HyperflexServiceAuthToken) SetTokenOwner(v MoBaseMoRelationship) {
	o.TokenOwner = &v
}

func (o HyperflexServiceAuthToken) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	serializedMoBaseMo, errMoBaseMo := json.Marshal(o.MoBaseMo)
	if errMoBaseMo != nil {
		return []byte{}, errMoBaseMo
	}
	errMoBaseMo = json.Unmarshal([]byte(serializedMoBaseMo), &toSerialize)
	if errMoBaseMo != nil {
		return []byte{}, errMoBaseMo
	}
	if true {
		toSerialize["ClassId"] = o.ClassId
	}
	if true {
		toSerialize["ObjectType"] = o.ObjectType
	}
	if o.ClientId != nil {
		toSerialize["ClientId"] = o.ClientId
	}
	if o.CsiVersion != nil {
		toSerialize["CsiVersion"] = o.CsiVersion
	}
	if o.ServiceAuthToken != nil {
		toSerialize["ServiceAuthToken"] = o.ServiceAuthToken
	}
	if o.Status != nil {
		toSerialize["Status"] = o.Status
	}
	if o.Cluster != nil {
		toSerialize["Cluster"] = o.Cluster
	}
	if o.Organization != nil {
		toSerialize["Organization"] = o.Organization
	}
	if o.TokenOwner != nil {
		toSerialize["TokenOwner"] = o.TokenOwner
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *HyperflexServiceAuthToken) UnmarshalJSON(bytes []byte) (err error) {
	type HyperflexServiceAuthTokenWithoutEmbeddedStruct struct {
		// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.
		ClassId string `json:"ClassId"`
		// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
		ObjectType string `json:"ObjectType"`
		// Client Id or tenant Id of the entity that uses the service auth token.
		ClientId *string `json:"ClientId,omitempty"`
		// Version of Container Storage Interface (CSI) that the tokenOwner is associated with.
		CsiVersion *string `json:"CsiVersion,omitempty"`
		// Service auth token that has been created by HyperFlex cluster.
		ServiceAuthToken *string `json:"ServiceAuthToken,omitempty"`
		// Represents status of ervice auth claim or revocation. * `Unknown` - Unknown claim state of the service auth token. * `Claiming` - The service auth token claim is in progress. * `Claimed` - The service auth token has been successfully claimed. * `FailedToClaim` - Cannot claim the service auth token on the underlying HyperFlex cluster. * `Revoking` - The service auth token revocation is in progress. * `Revoked` - The service auth token revocation has been successfully revoked. * `FailedToRevoke` - Cannot revoke the service auth token on the underlying HyperFlex cluster.
		Status       *string                               `json:"Status,omitempty"`
		Cluster      *HyperflexClusterRelationship         `json:"Cluster,omitempty"`
		Organization *OrganizationOrganizationRelationship `json:"Organization,omitempty"`
		TokenOwner   *MoBaseMoRelationship                 `json:"TokenOwner,omitempty"`
	}

	varHyperflexServiceAuthTokenWithoutEmbeddedStruct := HyperflexServiceAuthTokenWithoutEmbeddedStruct{}

	err = json.Unmarshal(bytes, &varHyperflexServiceAuthTokenWithoutEmbeddedStruct)
	if err == nil {
		varHyperflexServiceAuthToken := _HyperflexServiceAuthToken{}
		varHyperflexServiceAuthToken.ClassId = varHyperflexServiceAuthTokenWithoutEmbeddedStruct.ClassId
		varHyperflexServiceAuthToken.ObjectType = varHyperflexServiceAuthTokenWithoutEmbeddedStruct.ObjectType
		varHyperflexServiceAuthToken.ClientId = varHyperflexServiceAuthTokenWithoutEmbeddedStruct.ClientId
		varHyperflexServiceAuthToken.CsiVersion = varHyperflexServiceAuthTokenWithoutEmbeddedStruct.CsiVersion
		varHyperflexServiceAuthToken.ServiceAuthToken = varHyperflexServiceAuthTokenWithoutEmbeddedStruct.ServiceAuthToken
		varHyperflexServiceAuthToken.Status = varHyperflexServiceAuthTokenWithoutEmbeddedStruct.Status
		varHyperflexServiceAuthToken.Cluster = varHyperflexServiceAuthTokenWithoutEmbeddedStruct.Cluster
		varHyperflexServiceAuthToken.Organization = varHyperflexServiceAuthTokenWithoutEmbeddedStruct.Organization
		varHyperflexServiceAuthToken.TokenOwner = varHyperflexServiceAuthTokenWithoutEmbeddedStruct.TokenOwner
		*o = HyperflexServiceAuthToken(varHyperflexServiceAuthToken)
	} else {
		return err
	}

	varHyperflexServiceAuthToken := _HyperflexServiceAuthToken{}

	err = json.Unmarshal(bytes, &varHyperflexServiceAuthToken)
	if err == nil {
		o.MoBaseMo = varHyperflexServiceAuthToken.MoBaseMo
	} else {
		return err
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "ClassId")
		delete(additionalProperties, "ObjectType")
		delete(additionalProperties, "ClientId")
		delete(additionalProperties, "CsiVersion")
		delete(additionalProperties, "ServiceAuthToken")
		delete(additionalProperties, "Status")
		delete(additionalProperties, "Cluster")
		delete(additionalProperties, "Organization")
		delete(additionalProperties, "TokenOwner")

		// remove fields from embedded structs
		reflectMoBaseMo := reflect.ValueOf(o.MoBaseMo)
		for i := 0; i < reflectMoBaseMo.Type().NumField(); i++ {
			t := reflectMoBaseMo.Type().Field(i)

			if jsonTag := t.Tag.Get("json"); jsonTag != "" {
				fieldName := ""
				if commaIdx := strings.Index(jsonTag, ","); commaIdx > 0 {
					fieldName = jsonTag[:commaIdx]
				} else {
					fieldName = jsonTag
				}
				if fieldName != "AdditionalProperties" {
					delete(additionalProperties, fieldName)
				}
			}
		}

		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableHyperflexServiceAuthToken struct {
	value *HyperflexServiceAuthToken
	isSet bool
}

func (v NullableHyperflexServiceAuthToken) Get() *HyperflexServiceAuthToken {
	return v.value
}

func (v *NullableHyperflexServiceAuthToken) Set(val *HyperflexServiceAuthToken) {
	v.value = val
	v.isSet = true
}

func (v NullableHyperflexServiceAuthToken) IsSet() bool {
	return v.isSet
}

func (v *NullableHyperflexServiceAuthToken) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHyperflexServiceAuthToken(val *HyperflexServiceAuthToken) *NullableHyperflexServiceAuthToken {
	return &NullableHyperflexServiceAuthToken{value: val, isSet: true}
}

func (v NullableHyperflexServiceAuthToken) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHyperflexServiceAuthToken) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
