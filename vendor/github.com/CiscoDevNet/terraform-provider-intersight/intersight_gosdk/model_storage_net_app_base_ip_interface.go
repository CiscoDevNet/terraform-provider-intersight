/*
Cisco Intersight

Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations. The Intersight OpenAPI document defines the complete set of properties that are returned in the HTTP response. From that perspective, a client can expect that no additional properties are returned, unless these properties are explicitly defined in the OpenAPI document. However, when a client uses an older version of the Intersight OpenAPI document, the server may send additional properties because the software is more recent than the client. In that case, the client may receive properties that it does not know about. Some generated SDKs perform a strict validation of the HTTP response body against the OpenAPI document.

API version: 1.0.11-2024100405
Contact: intersight@cisco.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package intersight

import (
	"encoding/json"
	"fmt"
	"reflect"
	"strings"
)

// checks if the StorageNetAppBaseIpInterface type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &StorageNetAppBaseIpInterface{}

// StorageNetAppBaseIpInterface NetApp IP interface is a logical interface.
type StorageNetAppBaseIpInterface struct {
	MoBaseMo
	// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data. The enum values provides the list of concrete types that can be instantiated from this abstract type.
	ClassId string `json:"ClassId"`
	// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property. The enum values provides the list of concrete types that can be instantiated from this abstract type.
	ObjectType string `json:"ObjectType"`
	// Name of the current node of IP interface.
	CurrentNode *string `json:"CurrentNode,omitempty"`
	// Name of the current port of IP interface.
	CurrentPort *string `json:"CurrentPort,omitempty"`
	// IP interface is enabled or not.
	Enabled *string `json:"Enabled,omitempty"`
	// Name of home node of IP interface.
	HomeNode *string `json:"HomeNode,omitempty"`
	// Name of home port of IP interface.
	HomePort *string `json:"HomePort,omitempty"`
	// Reports whether the IP interface is home or has failed over to its HA peer.
	InterfaceIsHome *string `json:"InterfaceIsHome,omitempty"`
	// The state of the IP interface. * `Down` - The state is set to down if the interface is not enabled. * `Up` - The state is set to up if the interface is enabled.
	InterfaceState *string `json:"InterfaceState,omitempty"`
	// The IP address of interface.
	IpAddress *string `json:"IpAddress,omitempty"`
	// IP address family of interface. * `IPv4` - IP address family type is IPv4. * `IPv6` - IP address family type is IP6.
	IpFamily *string `json:"IpFamily,omitempty"`
	// The name of the IPspace of the IP interface.
	Ipspace *string `json:"Ipspace,omitempty"`
	// Reports whether the IP interface is home or has failed over to its HA peer.
	// Deprecated
	IsHome *bool `json:"IsHome,omitempty"`
	// Defines where an interface may failover, [ home_port_only, default, home_node_only, sfo_partners_only, broadcast_domain_only ].
	LocationFailover *string `json:"LocationFailover,omitempty"`
	// The name of the IP interface.
	Name *string `json:"Name,omitempty"`
	// The netmask of the interface.
	Netmask *string `json:"Netmask,omitempty"`
	// Service policy name of IP interface.
	ServicePolicyName *string `json:"ServicePolicyName,omitempty"`
	// Service policy UUID of IP interface.
	ServicePolicyUuid *string  `json:"ServicePolicyUuid,omitempty" validate:"regexp=^$|^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"`
	Services          []string `json:"Services,omitempty"`
	// The state of the IP interface. * `down` - An inactive port is listed as Down. * `up` - An active port is listed as Up. * `present` - An active port is listed as present.
	// Deprecated
	State *string `json:"State,omitempty"`
	// The storage virtual machine name for the interface.
	SvmName *string `json:"SvmName,omitempty"`
	// Uuid of NetApp IP Interface.
	Uuid                 *string `json:"Uuid,omitempty" validate:"regexp=^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"`
	AdditionalProperties map[string]interface{}
}

type _StorageNetAppBaseIpInterface StorageNetAppBaseIpInterface

// NewStorageNetAppBaseIpInterface instantiates a new StorageNetAppBaseIpInterface object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStorageNetAppBaseIpInterface(classId string, objectType string) *StorageNetAppBaseIpInterface {
	this := StorageNetAppBaseIpInterface{}
	this.ClassId = classId
	this.ObjectType = objectType
	return &this
}

// NewStorageNetAppBaseIpInterfaceWithDefaults instantiates a new StorageNetAppBaseIpInterface object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStorageNetAppBaseIpInterfaceWithDefaults() *StorageNetAppBaseIpInterface {
	this := StorageNetAppBaseIpInterface{}
	return &this
}

// GetClassId returns the ClassId field value
func (o *StorageNetAppBaseIpInterface) GetClassId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ClassId
}

// GetClassIdOk returns a tuple with the ClassId field value
// and a boolean to check if the value has been set.
func (o *StorageNetAppBaseIpInterface) GetClassIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ClassId, true
}

// SetClassId sets field value
func (o *StorageNetAppBaseIpInterface) SetClassId(v string) {
	o.ClassId = v
}

// GetObjectType returns the ObjectType field value
func (o *StorageNetAppBaseIpInterface) GetObjectType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ObjectType
}

// GetObjectTypeOk returns a tuple with the ObjectType field value
// and a boolean to check if the value has been set.
func (o *StorageNetAppBaseIpInterface) GetObjectTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ObjectType, true
}

// SetObjectType sets field value
func (o *StorageNetAppBaseIpInterface) SetObjectType(v string) {
	o.ObjectType = v
}

// GetCurrentNode returns the CurrentNode field value if set, zero value otherwise.
func (o *StorageNetAppBaseIpInterface) GetCurrentNode() string {
	if o == nil || IsNil(o.CurrentNode) {
		var ret string
		return ret
	}
	return *o.CurrentNode
}

// GetCurrentNodeOk returns a tuple with the CurrentNode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageNetAppBaseIpInterface) GetCurrentNodeOk() (*string, bool) {
	if o == nil || IsNil(o.CurrentNode) {
		return nil, false
	}
	return o.CurrentNode, true
}

// HasCurrentNode returns a boolean if a field has been set.
func (o *StorageNetAppBaseIpInterface) HasCurrentNode() bool {
	if o != nil && !IsNil(o.CurrentNode) {
		return true
	}

	return false
}

// SetCurrentNode gets a reference to the given string and assigns it to the CurrentNode field.
func (o *StorageNetAppBaseIpInterface) SetCurrentNode(v string) {
	o.CurrentNode = &v
}

// GetCurrentPort returns the CurrentPort field value if set, zero value otherwise.
func (o *StorageNetAppBaseIpInterface) GetCurrentPort() string {
	if o == nil || IsNil(o.CurrentPort) {
		var ret string
		return ret
	}
	return *o.CurrentPort
}

// GetCurrentPortOk returns a tuple with the CurrentPort field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageNetAppBaseIpInterface) GetCurrentPortOk() (*string, bool) {
	if o == nil || IsNil(o.CurrentPort) {
		return nil, false
	}
	return o.CurrentPort, true
}

// HasCurrentPort returns a boolean if a field has been set.
func (o *StorageNetAppBaseIpInterface) HasCurrentPort() bool {
	if o != nil && !IsNil(o.CurrentPort) {
		return true
	}

	return false
}

// SetCurrentPort gets a reference to the given string and assigns it to the CurrentPort field.
func (o *StorageNetAppBaseIpInterface) SetCurrentPort(v string) {
	o.CurrentPort = &v
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *StorageNetAppBaseIpInterface) GetEnabled() string {
	if o == nil || IsNil(o.Enabled) {
		var ret string
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageNetAppBaseIpInterface) GetEnabledOk() (*string, bool) {
	if o == nil || IsNil(o.Enabled) {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *StorageNetAppBaseIpInterface) HasEnabled() bool {
	if o != nil && !IsNil(o.Enabled) {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given string and assigns it to the Enabled field.
func (o *StorageNetAppBaseIpInterface) SetEnabled(v string) {
	o.Enabled = &v
}

// GetHomeNode returns the HomeNode field value if set, zero value otherwise.
func (o *StorageNetAppBaseIpInterface) GetHomeNode() string {
	if o == nil || IsNil(o.HomeNode) {
		var ret string
		return ret
	}
	return *o.HomeNode
}

// GetHomeNodeOk returns a tuple with the HomeNode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageNetAppBaseIpInterface) GetHomeNodeOk() (*string, bool) {
	if o == nil || IsNil(o.HomeNode) {
		return nil, false
	}
	return o.HomeNode, true
}

// HasHomeNode returns a boolean if a field has been set.
func (o *StorageNetAppBaseIpInterface) HasHomeNode() bool {
	if o != nil && !IsNil(o.HomeNode) {
		return true
	}

	return false
}

// SetHomeNode gets a reference to the given string and assigns it to the HomeNode field.
func (o *StorageNetAppBaseIpInterface) SetHomeNode(v string) {
	o.HomeNode = &v
}

// GetHomePort returns the HomePort field value if set, zero value otherwise.
func (o *StorageNetAppBaseIpInterface) GetHomePort() string {
	if o == nil || IsNil(o.HomePort) {
		var ret string
		return ret
	}
	return *o.HomePort
}

// GetHomePortOk returns a tuple with the HomePort field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageNetAppBaseIpInterface) GetHomePortOk() (*string, bool) {
	if o == nil || IsNil(o.HomePort) {
		return nil, false
	}
	return o.HomePort, true
}

// HasHomePort returns a boolean if a field has been set.
func (o *StorageNetAppBaseIpInterface) HasHomePort() bool {
	if o != nil && !IsNil(o.HomePort) {
		return true
	}

	return false
}

// SetHomePort gets a reference to the given string and assigns it to the HomePort field.
func (o *StorageNetAppBaseIpInterface) SetHomePort(v string) {
	o.HomePort = &v
}

// GetInterfaceIsHome returns the InterfaceIsHome field value if set, zero value otherwise.
func (o *StorageNetAppBaseIpInterface) GetInterfaceIsHome() string {
	if o == nil || IsNil(o.InterfaceIsHome) {
		var ret string
		return ret
	}
	return *o.InterfaceIsHome
}

// GetInterfaceIsHomeOk returns a tuple with the InterfaceIsHome field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageNetAppBaseIpInterface) GetInterfaceIsHomeOk() (*string, bool) {
	if o == nil || IsNil(o.InterfaceIsHome) {
		return nil, false
	}
	return o.InterfaceIsHome, true
}

// HasInterfaceIsHome returns a boolean if a field has been set.
func (o *StorageNetAppBaseIpInterface) HasInterfaceIsHome() bool {
	if o != nil && !IsNil(o.InterfaceIsHome) {
		return true
	}

	return false
}

// SetInterfaceIsHome gets a reference to the given string and assigns it to the InterfaceIsHome field.
func (o *StorageNetAppBaseIpInterface) SetInterfaceIsHome(v string) {
	o.InterfaceIsHome = &v
}

// GetInterfaceState returns the InterfaceState field value if set, zero value otherwise.
func (o *StorageNetAppBaseIpInterface) GetInterfaceState() string {
	if o == nil || IsNil(o.InterfaceState) {
		var ret string
		return ret
	}
	return *o.InterfaceState
}

// GetInterfaceStateOk returns a tuple with the InterfaceState field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageNetAppBaseIpInterface) GetInterfaceStateOk() (*string, bool) {
	if o == nil || IsNil(o.InterfaceState) {
		return nil, false
	}
	return o.InterfaceState, true
}

// HasInterfaceState returns a boolean if a field has been set.
func (o *StorageNetAppBaseIpInterface) HasInterfaceState() bool {
	if o != nil && !IsNil(o.InterfaceState) {
		return true
	}

	return false
}

// SetInterfaceState gets a reference to the given string and assigns it to the InterfaceState field.
func (o *StorageNetAppBaseIpInterface) SetInterfaceState(v string) {
	o.InterfaceState = &v
}

// GetIpAddress returns the IpAddress field value if set, zero value otherwise.
func (o *StorageNetAppBaseIpInterface) GetIpAddress() string {
	if o == nil || IsNil(o.IpAddress) {
		var ret string
		return ret
	}
	return *o.IpAddress
}

// GetIpAddressOk returns a tuple with the IpAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageNetAppBaseIpInterface) GetIpAddressOk() (*string, bool) {
	if o == nil || IsNil(o.IpAddress) {
		return nil, false
	}
	return o.IpAddress, true
}

// HasIpAddress returns a boolean if a field has been set.
func (o *StorageNetAppBaseIpInterface) HasIpAddress() bool {
	if o != nil && !IsNil(o.IpAddress) {
		return true
	}

	return false
}

// SetIpAddress gets a reference to the given string and assigns it to the IpAddress field.
func (o *StorageNetAppBaseIpInterface) SetIpAddress(v string) {
	o.IpAddress = &v
}

// GetIpFamily returns the IpFamily field value if set, zero value otherwise.
func (o *StorageNetAppBaseIpInterface) GetIpFamily() string {
	if o == nil || IsNil(o.IpFamily) {
		var ret string
		return ret
	}
	return *o.IpFamily
}

// GetIpFamilyOk returns a tuple with the IpFamily field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageNetAppBaseIpInterface) GetIpFamilyOk() (*string, bool) {
	if o == nil || IsNil(o.IpFamily) {
		return nil, false
	}
	return o.IpFamily, true
}

// HasIpFamily returns a boolean if a field has been set.
func (o *StorageNetAppBaseIpInterface) HasIpFamily() bool {
	if o != nil && !IsNil(o.IpFamily) {
		return true
	}

	return false
}

// SetIpFamily gets a reference to the given string and assigns it to the IpFamily field.
func (o *StorageNetAppBaseIpInterface) SetIpFamily(v string) {
	o.IpFamily = &v
}

// GetIpspace returns the Ipspace field value if set, zero value otherwise.
func (o *StorageNetAppBaseIpInterface) GetIpspace() string {
	if o == nil || IsNil(o.Ipspace) {
		var ret string
		return ret
	}
	return *o.Ipspace
}

// GetIpspaceOk returns a tuple with the Ipspace field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageNetAppBaseIpInterface) GetIpspaceOk() (*string, bool) {
	if o == nil || IsNil(o.Ipspace) {
		return nil, false
	}
	return o.Ipspace, true
}

// HasIpspace returns a boolean if a field has been set.
func (o *StorageNetAppBaseIpInterface) HasIpspace() bool {
	if o != nil && !IsNil(o.Ipspace) {
		return true
	}

	return false
}

// SetIpspace gets a reference to the given string and assigns it to the Ipspace field.
func (o *StorageNetAppBaseIpInterface) SetIpspace(v string) {
	o.Ipspace = &v
}

// GetIsHome returns the IsHome field value if set, zero value otherwise.
// Deprecated
func (o *StorageNetAppBaseIpInterface) GetIsHome() bool {
	if o == nil || IsNil(o.IsHome) {
		var ret bool
		return ret
	}
	return *o.IsHome
}

// GetIsHomeOk returns a tuple with the IsHome field value if set, nil otherwise
// and a boolean to check if the value has been set.
// Deprecated
func (o *StorageNetAppBaseIpInterface) GetIsHomeOk() (*bool, bool) {
	if o == nil || IsNil(o.IsHome) {
		return nil, false
	}
	return o.IsHome, true
}

// HasIsHome returns a boolean if a field has been set.
func (o *StorageNetAppBaseIpInterface) HasIsHome() bool {
	if o != nil && !IsNil(o.IsHome) {
		return true
	}

	return false
}

// SetIsHome gets a reference to the given bool and assigns it to the IsHome field.
// Deprecated
func (o *StorageNetAppBaseIpInterface) SetIsHome(v bool) {
	o.IsHome = &v
}

// GetLocationFailover returns the LocationFailover field value if set, zero value otherwise.
func (o *StorageNetAppBaseIpInterface) GetLocationFailover() string {
	if o == nil || IsNil(o.LocationFailover) {
		var ret string
		return ret
	}
	return *o.LocationFailover
}

// GetLocationFailoverOk returns a tuple with the LocationFailover field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageNetAppBaseIpInterface) GetLocationFailoverOk() (*string, bool) {
	if o == nil || IsNil(o.LocationFailover) {
		return nil, false
	}
	return o.LocationFailover, true
}

// HasLocationFailover returns a boolean if a field has been set.
func (o *StorageNetAppBaseIpInterface) HasLocationFailover() bool {
	if o != nil && !IsNil(o.LocationFailover) {
		return true
	}

	return false
}

// SetLocationFailover gets a reference to the given string and assigns it to the LocationFailover field.
func (o *StorageNetAppBaseIpInterface) SetLocationFailover(v string) {
	o.LocationFailover = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *StorageNetAppBaseIpInterface) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageNetAppBaseIpInterface) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *StorageNetAppBaseIpInterface) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *StorageNetAppBaseIpInterface) SetName(v string) {
	o.Name = &v
}

// GetNetmask returns the Netmask field value if set, zero value otherwise.
func (o *StorageNetAppBaseIpInterface) GetNetmask() string {
	if o == nil || IsNil(o.Netmask) {
		var ret string
		return ret
	}
	return *o.Netmask
}

// GetNetmaskOk returns a tuple with the Netmask field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageNetAppBaseIpInterface) GetNetmaskOk() (*string, bool) {
	if o == nil || IsNil(o.Netmask) {
		return nil, false
	}
	return o.Netmask, true
}

// HasNetmask returns a boolean if a field has been set.
func (o *StorageNetAppBaseIpInterface) HasNetmask() bool {
	if o != nil && !IsNil(o.Netmask) {
		return true
	}

	return false
}

// SetNetmask gets a reference to the given string and assigns it to the Netmask field.
func (o *StorageNetAppBaseIpInterface) SetNetmask(v string) {
	o.Netmask = &v
}

// GetServicePolicyName returns the ServicePolicyName field value if set, zero value otherwise.
func (o *StorageNetAppBaseIpInterface) GetServicePolicyName() string {
	if o == nil || IsNil(o.ServicePolicyName) {
		var ret string
		return ret
	}
	return *o.ServicePolicyName
}

// GetServicePolicyNameOk returns a tuple with the ServicePolicyName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageNetAppBaseIpInterface) GetServicePolicyNameOk() (*string, bool) {
	if o == nil || IsNil(o.ServicePolicyName) {
		return nil, false
	}
	return o.ServicePolicyName, true
}

// HasServicePolicyName returns a boolean if a field has been set.
func (o *StorageNetAppBaseIpInterface) HasServicePolicyName() bool {
	if o != nil && !IsNil(o.ServicePolicyName) {
		return true
	}

	return false
}

// SetServicePolicyName gets a reference to the given string and assigns it to the ServicePolicyName field.
func (o *StorageNetAppBaseIpInterface) SetServicePolicyName(v string) {
	o.ServicePolicyName = &v
}

// GetServicePolicyUuid returns the ServicePolicyUuid field value if set, zero value otherwise.
func (o *StorageNetAppBaseIpInterface) GetServicePolicyUuid() string {
	if o == nil || IsNil(o.ServicePolicyUuid) {
		var ret string
		return ret
	}
	return *o.ServicePolicyUuid
}

// GetServicePolicyUuidOk returns a tuple with the ServicePolicyUuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageNetAppBaseIpInterface) GetServicePolicyUuidOk() (*string, bool) {
	if o == nil || IsNil(o.ServicePolicyUuid) {
		return nil, false
	}
	return o.ServicePolicyUuid, true
}

// HasServicePolicyUuid returns a boolean if a field has been set.
func (o *StorageNetAppBaseIpInterface) HasServicePolicyUuid() bool {
	if o != nil && !IsNil(o.ServicePolicyUuid) {
		return true
	}

	return false
}

// SetServicePolicyUuid gets a reference to the given string and assigns it to the ServicePolicyUuid field.
func (o *StorageNetAppBaseIpInterface) SetServicePolicyUuid(v string) {
	o.ServicePolicyUuid = &v
}

// GetServices returns the Services field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *StorageNetAppBaseIpInterface) GetServices() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.Services
}

// GetServicesOk returns a tuple with the Services field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *StorageNetAppBaseIpInterface) GetServicesOk() ([]string, bool) {
	if o == nil || IsNil(o.Services) {
		return nil, false
	}
	return o.Services, true
}

// HasServices returns a boolean if a field has been set.
func (o *StorageNetAppBaseIpInterface) HasServices() bool {
	if o != nil && !IsNil(o.Services) {
		return true
	}

	return false
}

// SetServices gets a reference to the given []string and assigns it to the Services field.
func (o *StorageNetAppBaseIpInterface) SetServices(v []string) {
	o.Services = v
}

// GetState returns the State field value if set, zero value otherwise.
// Deprecated
func (o *StorageNetAppBaseIpInterface) GetState() string {
	if o == nil || IsNil(o.State) {
		var ret string
		return ret
	}
	return *o.State
}

// GetStateOk returns a tuple with the State field value if set, nil otherwise
// and a boolean to check if the value has been set.
// Deprecated
func (o *StorageNetAppBaseIpInterface) GetStateOk() (*string, bool) {
	if o == nil || IsNil(o.State) {
		return nil, false
	}
	return o.State, true
}

// HasState returns a boolean if a field has been set.
func (o *StorageNetAppBaseIpInterface) HasState() bool {
	if o != nil && !IsNil(o.State) {
		return true
	}

	return false
}

// SetState gets a reference to the given string and assigns it to the State field.
// Deprecated
func (o *StorageNetAppBaseIpInterface) SetState(v string) {
	o.State = &v
}

// GetSvmName returns the SvmName field value if set, zero value otherwise.
func (o *StorageNetAppBaseIpInterface) GetSvmName() string {
	if o == nil || IsNil(o.SvmName) {
		var ret string
		return ret
	}
	return *o.SvmName
}

// GetSvmNameOk returns a tuple with the SvmName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageNetAppBaseIpInterface) GetSvmNameOk() (*string, bool) {
	if o == nil || IsNil(o.SvmName) {
		return nil, false
	}
	return o.SvmName, true
}

// HasSvmName returns a boolean if a field has been set.
func (o *StorageNetAppBaseIpInterface) HasSvmName() bool {
	if o != nil && !IsNil(o.SvmName) {
		return true
	}

	return false
}

// SetSvmName gets a reference to the given string and assigns it to the SvmName field.
func (o *StorageNetAppBaseIpInterface) SetSvmName(v string) {
	o.SvmName = &v
}

// GetUuid returns the Uuid field value if set, zero value otherwise.
func (o *StorageNetAppBaseIpInterface) GetUuid() string {
	if o == nil || IsNil(o.Uuid) {
		var ret string
		return ret
	}
	return *o.Uuid
}

// GetUuidOk returns a tuple with the Uuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageNetAppBaseIpInterface) GetUuidOk() (*string, bool) {
	if o == nil || IsNil(o.Uuid) {
		return nil, false
	}
	return o.Uuid, true
}

// HasUuid returns a boolean if a field has been set.
func (o *StorageNetAppBaseIpInterface) HasUuid() bool {
	if o != nil && !IsNil(o.Uuid) {
		return true
	}

	return false
}

// SetUuid gets a reference to the given string and assigns it to the Uuid field.
func (o *StorageNetAppBaseIpInterface) SetUuid(v string) {
	o.Uuid = &v
}

func (o StorageNetAppBaseIpInterface) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o StorageNetAppBaseIpInterface) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	serializedMoBaseMo, errMoBaseMo := json.Marshal(o.MoBaseMo)
	if errMoBaseMo != nil {
		return map[string]interface{}{}, errMoBaseMo
	}
	errMoBaseMo = json.Unmarshal([]byte(serializedMoBaseMo), &toSerialize)
	if errMoBaseMo != nil {
		return map[string]interface{}{}, errMoBaseMo
	}
	toSerialize["ClassId"] = o.ClassId
	toSerialize["ObjectType"] = o.ObjectType
	if !IsNil(o.CurrentNode) {
		toSerialize["CurrentNode"] = o.CurrentNode
	}
	if !IsNil(o.CurrentPort) {
		toSerialize["CurrentPort"] = o.CurrentPort
	}
	if !IsNil(o.Enabled) {
		toSerialize["Enabled"] = o.Enabled
	}
	if !IsNil(o.HomeNode) {
		toSerialize["HomeNode"] = o.HomeNode
	}
	if !IsNil(o.HomePort) {
		toSerialize["HomePort"] = o.HomePort
	}
	if !IsNil(o.InterfaceIsHome) {
		toSerialize["InterfaceIsHome"] = o.InterfaceIsHome
	}
	if !IsNil(o.InterfaceState) {
		toSerialize["InterfaceState"] = o.InterfaceState
	}
	if !IsNil(o.IpAddress) {
		toSerialize["IpAddress"] = o.IpAddress
	}
	if !IsNil(o.IpFamily) {
		toSerialize["IpFamily"] = o.IpFamily
	}
	if !IsNil(o.Ipspace) {
		toSerialize["Ipspace"] = o.Ipspace
	}
	if !IsNil(o.IsHome) {
		toSerialize["IsHome"] = o.IsHome
	}
	if !IsNil(o.LocationFailover) {
		toSerialize["LocationFailover"] = o.LocationFailover
	}
	if !IsNil(o.Name) {
		toSerialize["Name"] = o.Name
	}
	if !IsNil(o.Netmask) {
		toSerialize["Netmask"] = o.Netmask
	}
	if !IsNil(o.ServicePolicyName) {
		toSerialize["ServicePolicyName"] = o.ServicePolicyName
	}
	if !IsNil(o.ServicePolicyUuid) {
		toSerialize["ServicePolicyUuid"] = o.ServicePolicyUuid
	}
	if o.Services != nil {
		toSerialize["Services"] = o.Services
	}
	if !IsNil(o.State) {
		toSerialize["State"] = o.State
	}
	if !IsNil(o.SvmName) {
		toSerialize["SvmName"] = o.SvmName
	}
	if !IsNil(o.Uuid) {
		toSerialize["Uuid"] = o.Uuid
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *StorageNetAppBaseIpInterface) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"ClassId",
		"ObjectType",
	}

	// defaultValueFuncMap captures the default values for required properties.
	// These values are used when required properties are missing from the payload.
	defaultValueFuncMap := map[string]func() interface{}{}
	var defaultValueApplied bool
	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			if _, ok := defaultValueFuncMap[requiredProperty]; ok {
				allProperties[requiredProperty] = defaultValueFuncMap[requiredProperty]()
				defaultValueApplied = true
			}
		}
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	if defaultValueApplied {
		data, err = json.Marshal(allProperties)
		if err != nil {
			return err
		}
	}
	type StorageNetAppBaseIpInterfaceWithoutEmbeddedStruct struct {
		// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data. The enum values provides the list of concrete types that can be instantiated from this abstract type.
		ClassId string `json:"ClassId"`
		// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property. The enum values provides the list of concrete types that can be instantiated from this abstract type.
		ObjectType string `json:"ObjectType"`
		// Name of the current node of IP interface.
		CurrentNode *string `json:"CurrentNode,omitempty"`
		// Name of the current port of IP interface.
		CurrentPort *string `json:"CurrentPort,omitempty"`
		// IP interface is enabled or not.
		Enabled *string `json:"Enabled,omitempty"`
		// Name of home node of IP interface.
		HomeNode *string `json:"HomeNode,omitempty"`
		// Name of home port of IP interface.
		HomePort *string `json:"HomePort,omitempty"`
		// Reports whether the IP interface is home or has failed over to its HA peer.
		InterfaceIsHome *string `json:"InterfaceIsHome,omitempty"`
		// The state of the IP interface. * `Down` - The state is set to down if the interface is not enabled. * `Up` - The state is set to up if the interface is enabled.
		InterfaceState *string `json:"InterfaceState,omitempty"`
		// The IP address of interface.
		IpAddress *string `json:"IpAddress,omitempty"`
		// IP address family of interface. * `IPv4` - IP address family type is IPv4. * `IPv6` - IP address family type is IP6.
		IpFamily *string `json:"IpFamily,omitempty"`
		// The name of the IPspace of the IP interface.
		Ipspace *string `json:"Ipspace,omitempty"`
		// Reports whether the IP interface is home or has failed over to its HA peer.
		// Deprecated
		IsHome *bool `json:"IsHome,omitempty"`
		// Defines where an interface may failover, [ home_port_only, default, home_node_only, sfo_partners_only, broadcast_domain_only ].
		LocationFailover *string `json:"LocationFailover,omitempty"`
		// The name of the IP interface.
		Name *string `json:"Name,omitempty"`
		// The netmask of the interface.
		Netmask *string `json:"Netmask,omitempty"`
		// Service policy name of IP interface.
		ServicePolicyName *string `json:"ServicePolicyName,omitempty"`
		// Service policy UUID of IP interface.
		ServicePolicyUuid *string  `json:"ServicePolicyUuid,omitempty" validate:"regexp=^$|^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"`
		Services          []string `json:"Services,omitempty"`
		// The state of the IP interface. * `down` - An inactive port is listed as Down. * `up` - An active port is listed as Up. * `present` - An active port is listed as present.
		// Deprecated
		State *string `json:"State,omitempty"`
		// The storage virtual machine name for the interface.
		SvmName *string `json:"SvmName,omitempty"`
		// Uuid of NetApp IP Interface.
		Uuid *string `json:"Uuid,omitempty" validate:"regexp=^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"`
	}

	varStorageNetAppBaseIpInterfaceWithoutEmbeddedStruct := StorageNetAppBaseIpInterfaceWithoutEmbeddedStruct{}

	err = json.Unmarshal(data, &varStorageNetAppBaseIpInterfaceWithoutEmbeddedStruct)
	if err == nil {
		varStorageNetAppBaseIpInterface := _StorageNetAppBaseIpInterface{}
		varStorageNetAppBaseIpInterface.ClassId = varStorageNetAppBaseIpInterfaceWithoutEmbeddedStruct.ClassId
		varStorageNetAppBaseIpInterface.ObjectType = varStorageNetAppBaseIpInterfaceWithoutEmbeddedStruct.ObjectType
		varStorageNetAppBaseIpInterface.CurrentNode = varStorageNetAppBaseIpInterfaceWithoutEmbeddedStruct.CurrentNode
		varStorageNetAppBaseIpInterface.CurrentPort = varStorageNetAppBaseIpInterfaceWithoutEmbeddedStruct.CurrentPort
		varStorageNetAppBaseIpInterface.Enabled = varStorageNetAppBaseIpInterfaceWithoutEmbeddedStruct.Enabled
		varStorageNetAppBaseIpInterface.HomeNode = varStorageNetAppBaseIpInterfaceWithoutEmbeddedStruct.HomeNode
		varStorageNetAppBaseIpInterface.HomePort = varStorageNetAppBaseIpInterfaceWithoutEmbeddedStruct.HomePort
		varStorageNetAppBaseIpInterface.InterfaceIsHome = varStorageNetAppBaseIpInterfaceWithoutEmbeddedStruct.InterfaceIsHome
		varStorageNetAppBaseIpInterface.InterfaceState = varStorageNetAppBaseIpInterfaceWithoutEmbeddedStruct.InterfaceState
		varStorageNetAppBaseIpInterface.IpAddress = varStorageNetAppBaseIpInterfaceWithoutEmbeddedStruct.IpAddress
		varStorageNetAppBaseIpInterface.IpFamily = varStorageNetAppBaseIpInterfaceWithoutEmbeddedStruct.IpFamily
		varStorageNetAppBaseIpInterface.Ipspace = varStorageNetAppBaseIpInterfaceWithoutEmbeddedStruct.Ipspace
		varStorageNetAppBaseIpInterface.IsHome = varStorageNetAppBaseIpInterfaceWithoutEmbeddedStruct.IsHome
		varStorageNetAppBaseIpInterface.LocationFailover = varStorageNetAppBaseIpInterfaceWithoutEmbeddedStruct.LocationFailover
		varStorageNetAppBaseIpInterface.Name = varStorageNetAppBaseIpInterfaceWithoutEmbeddedStruct.Name
		varStorageNetAppBaseIpInterface.Netmask = varStorageNetAppBaseIpInterfaceWithoutEmbeddedStruct.Netmask
		varStorageNetAppBaseIpInterface.ServicePolicyName = varStorageNetAppBaseIpInterfaceWithoutEmbeddedStruct.ServicePolicyName
		varStorageNetAppBaseIpInterface.ServicePolicyUuid = varStorageNetAppBaseIpInterfaceWithoutEmbeddedStruct.ServicePolicyUuid
		varStorageNetAppBaseIpInterface.Services = varStorageNetAppBaseIpInterfaceWithoutEmbeddedStruct.Services
		varStorageNetAppBaseIpInterface.State = varStorageNetAppBaseIpInterfaceWithoutEmbeddedStruct.State
		varStorageNetAppBaseIpInterface.SvmName = varStorageNetAppBaseIpInterfaceWithoutEmbeddedStruct.SvmName
		varStorageNetAppBaseIpInterface.Uuid = varStorageNetAppBaseIpInterfaceWithoutEmbeddedStruct.Uuid
		*o = StorageNetAppBaseIpInterface(varStorageNetAppBaseIpInterface)
	} else {
		return err
	}

	varStorageNetAppBaseIpInterface := _StorageNetAppBaseIpInterface{}

	err = json.Unmarshal(data, &varStorageNetAppBaseIpInterface)
	if err == nil {
		o.MoBaseMo = varStorageNetAppBaseIpInterface.MoBaseMo
	} else {
		return err
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "ClassId")
		delete(additionalProperties, "ObjectType")
		delete(additionalProperties, "CurrentNode")
		delete(additionalProperties, "CurrentPort")
		delete(additionalProperties, "Enabled")
		delete(additionalProperties, "HomeNode")
		delete(additionalProperties, "HomePort")
		delete(additionalProperties, "InterfaceIsHome")
		delete(additionalProperties, "InterfaceState")
		delete(additionalProperties, "IpAddress")
		delete(additionalProperties, "IpFamily")
		delete(additionalProperties, "Ipspace")
		delete(additionalProperties, "IsHome")
		delete(additionalProperties, "LocationFailover")
		delete(additionalProperties, "Name")
		delete(additionalProperties, "Netmask")
		delete(additionalProperties, "ServicePolicyName")
		delete(additionalProperties, "ServicePolicyUuid")
		delete(additionalProperties, "Services")
		delete(additionalProperties, "State")
		delete(additionalProperties, "SvmName")
		delete(additionalProperties, "Uuid")

		// remove fields from embedded structs
		reflectMoBaseMo := reflect.ValueOf(o.MoBaseMo)
		for i := 0; i < reflectMoBaseMo.Type().NumField(); i++ {
			t := reflectMoBaseMo.Type().Field(i)

			if jsonTag := t.Tag.Get("json"); jsonTag != "" {
				fieldName := ""
				if commaIdx := strings.Index(jsonTag, ","); commaIdx > 0 {
					fieldName = jsonTag[:commaIdx]
				} else {
					fieldName = jsonTag
				}
				if fieldName != "AdditionalProperties" {
					delete(additionalProperties, fieldName)
				}
			}
		}

		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableStorageNetAppBaseIpInterface struct {
	value *StorageNetAppBaseIpInterface
	isSet bool
}

func (v NullableStorageNetAppBaseIpInterface) Get() *StorageNetAppBaseIpInterface {
	return v.value
}

func (v *NullableStorageNetAppBaseIpInterface) Set(val *StorageNetAppBaseIpInterface) {
	v.value = val
	v.isSet = true
}

func (v NullableStorageNetAppBaseIpInterface) IsSet() bool {
	return v.isSet
}

func (v *NullableStorageNetAppBaseIpInterface) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStorageNetAppBaseIpInterface(val *StorageNetAppBaseIpInterface) *NullableStorageNetAppBaseIpInterface {
	return &NullableStorageNetAppBaseIpInterface{value: val, isSet: true}
}

func (v NullableStorageNetAppBaseIpInterface) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStorageNetAppBaseIpInterface) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
