/*
Cisco Intersight

Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations. The Intersight OpenAPI document defines the complete set of properties that are returned in the HTTP response. From that perspective, a client can expect that no additional properties are returned, unless these properties are explicitly defined in the OpenAPI document. However, when a client uses an older version of the Intersight OpenAPI document, the server may send additional properties because the software is more recent than the client. In that case, the client may receive properties that it does not know about. Some generated SDKs perform a strict validation of the HTTP response body against the OpenAPI document.

API version: 1.0.11-16342
Contact: intersight@cisco.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package intersight

import (
	"encoding/json"
)

// TelemetryDruidRangeFilter The range filter is a replacement for the bound filter. It compares against any type of column and is designed to have has more SQL compliant behavior than the bound filter. It won't match null values, even if you don't specify a lower bound.
type TelemetryDruidRangeFilter struct {
	Type string `json:"type"`
	// Input column or virtual column name to filter.
	Column string `json:"column"`
	// String specifying the type of bounds to match. For example STRING, LONG, DOUBLE, FLOAT, ARRAY<STRING>, ARRAY<LONG>, or any other Druid type. The matchValueType determines how Druid interprets the matchValue to assist in converting to the type of the matched column and also defines the type of comparison used when matching values.
	MatchValueType string `json:"matchValueType"`
	// Lower bound value to match. At least one of lower or upper must not be null.
	Lower interface{} `json:"lower,omitempty"`
	// Upper bound value to match. At least one of lower or upper must not be null.
	Upper interface{} `json:"upper,omitempty"`
	// Boolean indicating if lower bound is open in the interval of values defined by the range (\">\" instead of \">=\").
	LowerOpen *bool `json:"lowerOpen,omitempty"`
	// Boolean indicating if upper bound is open on the interval of values defined by the range (\"<\" instead of \"<=\").
	UpperOpen            *bool `json:"upperOpen,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _TelemetryDruidRangeFilter TelemetryDruidRangeFilter

// NewTelemetryDruidRangeFilter instantiates a new TelemetryDruidRangeFilter object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTelemetryDruidRangeFilter(type_ string, column string, matchValueType string) *TelemetryDruidRangeFilter {
	this := TelemetryDruidRangeFilter{}
	this.Type = type_
	this.Column = column
	this.MatchValueType = matchValueType
	return &this
}

// NewTelemetryDruidRangeFilterWithDefaults instantiates a new TelemetryDruidRangeFilter object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTelemetryDruidRangeFilterWithDefaults() *TelemetryDruidRangeFilter {
	this := TelemetryDruidRangeFilter{}
	return &this
}

// GetType returns the Type field value
func (o *TelemetryDruidRangeFilter) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *TelemetryDruidRangeFilter) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *TelemetryDruidRangeFilter) SetType(v string) {
	o.Type = v
}

// GetColumn returns the Column field value
func (o *TelemetryDruidRangeFilter) GetColumn() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Column
}

// GetColumnOk returns a tuple with the Column field value
// and a boolean to check if the value has been set.
func (o *TelemetryDruidRangeFilter) GetColumnOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Column, true
}

// SetColumn sets field value
func (o *TelemetryDruidRangeFilter) SetColumn(v string) {
	o.Column = v
}

// GetMatchValueType returns the MatchValueType field value
func (o *TelemetryDruidRangeFilter) GetMatchValueType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.MatchValueType
}

// GetMatchValueTypeOk returns a tuple with the MatchValueType field value
// and a boolean to check if the value has been set.
func (o *TelemetryDruidRangeFilter) GetMatchValueTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MatchValueType, true
}

// SetMatchValueType sets field value
func (o *TelemetryDruidRangeFilter) SetMatchValueType(v string) {
	o.MatchValueType = v
}

// GetLower returns the Lower field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TelemetryDruidRangeFilter) GetLower() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.Lower
}

// GetLowerOk returns a tuple with the Lower field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TelemetryDruidRangeFilter) GetLowerOk() (*interface{}, bool) {
	if o == nil || o.Lower == nil {
		return nil, false
	}
	return &o.Lower, true
}

// HasLower returns a boolean if a field has been set.
func (o *TelemetryDruidRangeFilter) HasLower() bool {
	if o != nil && o.Lower != nil {
		return true
	}

	return false
}

// SetLower gets a reference to the given interface{} and assigns it to the Lower field.
func (o *TelemetryDruidRangeFilter) SetLower(v interface{}) {
	o.Lower = v
}

// GetUpper returns the Upper field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TelemetryDruidRangeFilter) GetUpper() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.Upper
}

// GetUpperOk returns a tuple with the Upper field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TelemetryDruidRangeFilter) GetUpperOk() (*interface{}, bool) {
	if o == nil || o.Upper == nil {
		return nil, false
	}
	return &o.Upper, true
}

// HasUpper returns a boolean if a field has been set.
func (o *TelemetryDruidRangeFilter) HasUpper() bool {
	if o != nil && o.Upper != nil {
		return true
	}

	return false
}

// SetUpper gets a reference to the given interface{} and assigns it to the Upper field.
func (o *TelemetryDruidRangeFilter) SetUpper(v interface{}) {
	o.Upper = v
}

// GetLowerOpen returns the LowerOpen field value if set, zero value otherwise.
func (o *TelemetryDruidRangeFilter) GetLowerOpen() bool {
	if o == nil || o.LowerOpen == nil {
		var ret bool
		return ret
	}
	return *o.LowerOpen
}

// GetLowerOpenOk returns a tuple with the LowerOpen field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TelemetryDruidRangeFilter) GetLowerOpenOk() (*bool, bool) {
	if o == nil || o.LowerOpen == nil {
		return nil, false
	}
	return o.LowerOpen, true
}

// HasLowerOpen returns a boolean if a field has been set.
func (o *TelemetryDruidRangeFilter) HasLowerOpen() bool {
	if o != nil && o.LowerOpen != nil {
		return true
	}

	return false
}

// SetLowerOpen gets a reference to the given bool and assigns it to the LowerOpen field.
func (o *TelemetryDruidRangeFilter) SetLowerOpen(v bool) {
	o.LowerOpen = &v
}

// GetUpperOpen returns the UpperOpen field value if set, zero value otherwise.
func (o *TelemetryDruidRangeFilter) GetUpperOpen() bool {
	if o == nil || o.UpperOpen == nil {
		var ret bool
		return ret
	}
	return *o.UpperOpen
}

// GetUpperOpenOk returns a tuple with the UpperOpen field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TelemetryDruidRangeFilter) GetUpperOpenOk() (*bool, bool) {
	if o == nil || o.UpperOpen == nil {
		return nil, false
	}
	return o.UpperOpen, true
}

// HasUpperOpen returns a boolean if a field has been set.
func (o *TelemetryDruidRangeFilter) HasUpperOpen() bool {
	if o != nil && o.UpperOpen != nil {
		return true
	}

	return false
}

// SetUpperOpen gets a reference to the given bool and assigns it to the UpperOpen field.
func (o *TelemetryDruidRangeFilter) SetUpperOpen(v bool) {
	o.UpperOpen = &v
}

func (o TelemetryDruidRangeFilter) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["type"] = o.Type
	}
	if true {
		toSerialize["column"] = o.Column
	}
	if true {
		toSerialize["matchValueType"] = o.MatchValueType
	}
	if o.Lower != nil {
		toSerialize["lower"] = o.Lower
	}
	if o.Upper != nil {
		toSerialize["upper"] = o.Upper
	}
	if o.LowerOpen != nil {
		toSerialize["lowerOpen"] = o.LowerOpen
	}
	if o.UpperOpen != nil {
		toSerialize["upperOpen"] = o.UpperOpen
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *TelemetryDruidRangeFilter) UnmarshalJSON(bytes []byte) (err error) {
	varTelemetryDruidRangeFilter := _TelemetryDruidRangeFilter{}

	if err = json.Unmarshal(bytes, &varTelemetryDruidRangeFilter); err == nil {
		*o = TelemetryDruidRangeFilter(varTelemetryDruidRangeFilter)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "type")
		delete(additionalProperties, "column")
		delete(additionalProperties, "matchValueType")
		delete(additionalProperties, "lower")
		delete(additionalProperties, "upper")
		delete(additionalProperties, "lowerOpen")
		delete(additionalProperties, "upperOpen")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableTelemetryDruidRangeFilter struct {
	value *TelemetryDruidRangeFilter
	isSet bool
}

func (v NullableTelemetryDruidRangeFilter) Get() *TelemetryDruidRangeFilter {
	return v.value
}

func (v *NullableTelemetryDruidRangeFilter) Set(val *TelemetryDruidRangeFilter) {
	v.value = val
	v.isSet = true
}

func (v NullableTelemetryDruidRangeFilter) IsSet() bool {
	return v.isSet
}

func (v *NullableTelemetryDruidRangeFilter) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTelemetryDruidRangeFilter(val *TelemetryDruidRangeFilter) *NullableTelemetryDruidRangeFilter {
	return &NullableTelemetryDruidRangeFilter{value: val, isSet: true}
}

func (v NullableTelemetryDruidRangeFilter) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTelemetryDruidRangeFilter) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
