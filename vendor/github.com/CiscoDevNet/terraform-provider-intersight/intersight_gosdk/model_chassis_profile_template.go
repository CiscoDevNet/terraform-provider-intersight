/*
Cisco Intersight

Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations. The Intersight OpenAPI document defines the complete set of properties that are returned in the HTTP response. From that perspective, a client can expect that no additional properties are returned, unless these properties are explicitly defined in the OpenAPI document. However, when a client uses an older version of the Intersight OpenAPI document, the server may send additional properties because the software is more recent than the client. In that case, the client may receive properties that it does not know about. Some generated SDKs perform a strict validation of the HTTP response body against the OpenAPI document.

API version: 1.0.11-18775
Contact: intersight@cisco.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package intersight

import (
	"encoding/json"
	"fmt"
	"reflect"
	"strings"
)

// checks if the ChassisProfileTemplate type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ChassisProfileTemplate{}

// ChassisProfileTemplate The Chassis Profile Template consists of common chassis profile configurations, which can be reused across multiple profiles. Chassis profiles can be created from the template using the Derive operation. Additionally, an existing profile can be attached to a template to use the configuration set in the template. To derive chassis profiles from a chassis profile template, you must use the synchronous /v1/bulk/MoCloners bulk API. Deriving profiles from a Chassis Profile Template URL: /v1/bulk/MoCloners Method: POST Body: >  {     \"Sources\":[       {         \"Moid\":\"64fb5d17656e6f301e43045b\",         \"ObjectType\":\"chassis.ProfileTemplate\"       }],     \"Targets\":[       {         \"Name\":\"template1_DERIVED-1”,         \"ObjectType\":\"chassis.Profile\",         \"Organization\":           {             \"ObjectType\":\"organization.Organization\",             \"Moid\":\"64b0b9ef697265301e52ea0c\"           },         \"Description\":\"\",         \"Tags\":[],         \"AssignedChassis\":           {             \"Moid\":\"65efe097617675301ecf186f\",             \"ObjectType\":\"equipment.Chassis           }       }]  } The API response includes the derived Chassis profile MO details. Template Updates When the profile template is updated, a call to the /v1/bulk/MoMergers API is to be made by the client, to synchronize the template changes to all derived profile instances. Updating profiles from a Chassis Profile Template URL: /v1/bulk/MoMergers Method: POST Body: >  {     \"Sources\":[       {         \"Moid\":\"64fb5d17656e6f301e43045b\",         \"ObjectType\":\"chassis.ProfileTemplate\"       }],     \"Targets\":[       {         \"Moid\":\"6502ffc8656e6f301e5e9f6b\",         \"ObjectType\":\"chassis.Profile\"       }],     \"MergeAction\":\"Replace\"  } The response of the MoMerger API call would contain the changed profiles.
type ChassisProfileTemplate struct {
	ChassisBaseProfile
	// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.
	ClassId string `json:"ClassId"`
	// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
	ObjectType string `json:"ObjectType"`
	// The count of the chassis profiles derived from the template.
	Usage                *int64                                       `json:"Usage,omitempty"`
	Organization         NullableOrganizationOrganizationRelationship `json:"Organization,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ChassisProfileTemplate ChassisProfileTemplate

// NewChassisProfileTemplate instantiates a new ChassisProfileTemplate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewChassisProfileTemplate(classId string, objectType string) *ChassisProfileTemplate {
	this := ChassisProfileTemplate{}
	this.ClassId = classId
	this.ObjectType = objectType
	var type_ string = "instance"
	this.Type = &type_
	var action string = "No-op"
	this.Action = &action
	var targetPlatform string = "FIAttached"
	this.TargetPlatform = &targetPlatform
	return &this
}

// NewChassisProfileTemplateWithDefaults instantiates a new ChassisProfileTemplate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewChassisProfileTemplateWithDefaults() *ChassisProfileTemplate {
	this := ChassisProfileTemplate{}
	var classId string = "chassis.ProfileTemplate"
	this.ClassId = classId
	var objectType string = "chassis.ProfileTemplate"
	this.ObjectType = objectType
	return &this
}

// GetClassId returns the ClassId field value
func (o *ChassisProfileTemplate) GetClassId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ClassId
}

// GetClassIdOk returns a tuple with the ClassId field value
// and a boolean to check if the value has been set.
func (o *ChassisProfileTemplate) GetClassIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ClassId, true
}

// SetClassId sets field value
func (o *ChassisProfileTemplate) SetClassId(v string) {
	o.ClassId = v
}

// GetDefaultClassId returns the default value "chassis.ProfileTemplate" of the ClassId field.
func (o *ChassisProfileTemplate) GetDefaultClassId() interface{} {
	return "chassis.ProfileTemplate"
}

// GetObjectType returns the ObjectType field value
func (o *ChassisProfileTemplate) GetObjectType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ObjectType
}

// GetObjectTypeOk returns a tuple with the ObjectType field value
// and a boolean to check if the value has been set.
func (o *ChassisProfileTemplate) GetObjectTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ObjectType, true
}

// SetObjectType sets field value
func (o *ChassisProfileTemplate) SetObjectType(v string) {
	o.ObjectType = v
}

// GetDefaultObjectType returns the default value "chassis.ProfileTemplate" of the ObjectType field.
func (o *ChassisProfileTemplate) GetDefaultObjectType() interface{} {
	return "chassis.ProfileTemplate"
}

// GetUsage returns the Usage field value if set, zero value otherwise.
func (o *ChassisProfileTemplate) GetUsage() int64 {
	if o == nil || IsNil(o.Usage) {
		var ret int64
		return ret
	}
	return *o.Usage
}

// GetUsageOk returns a tuple with the Usage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChassisProfileTemplate) GetUsageOk() (*int64, bool) {
	if o == nil || IsNil(o.Usage) {
		return nil, false
	}
	return o.Usage, true
}

// HasUsage returns a boolean if a field has been set.
func (o *ChassisProfileTemplate) HasUsage() bool {
	if o != nil && !IsNil(o.Usage) {
		return true
	}

	return false
}

// SetUsage gets a reference to the given int64 and assigns it to the Usage field.
func (o *ChassisProfileTemplate) SetUsage(v int64) {
	o.Usage = &v
}

// GetOrganization returns the Organization field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ChassisProfileTemplate) GetOrganization() OrganizationOrganizationRelationship {
	if o == nil || IsNil(o.Organization.Get()) {
		var ret OrganizationOrganizationRelationship
		return ret
	}
	return *o.Organization.Get()
}

// GetOrganizationOk returns a tuple with the Organization field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ChassisProfileTemplate) GetOrganizationOk() (*OrganizationOrganizationRelationship, bool) {
	if o == nil {
		return nil, false
	}
	return o.Organization.Get(), o.Organization.IsSet()
}

// HasOrganization returns a boolean if a field has been set.
func (o *ChassisProfileTemplate) HasOrganization() bool {
	if o != nil && o.Organization.IsSet() {
		return true
	}

	return false
}

// SetOrganization gets a reference to the given NullableOrganizationOrganizationRelationship and assigns it to the Organization field.
func (o *ChassisProfileTemplate) SetOrganization(v OrganizationOrganizationRelationship) {
	o.Organization.Set(&v)
}

// SetOrganizationNil sets the value for Organization to be an explicit nil
func (o *ChassisProfileTemplate) SetOrganizationNil() {
	o.Organization.Set(nil)
}

// UnsetOrganization ensures that no value is present for Organization, not even an explicit nil
func (o *ChassisProfileTemplate) UnsetOrganization() {
	o.Organization.Unset()
}

func (o ChassisProfileTemplate) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ChassisProfileTemplate) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	serializedChassisBaseProfile, errChassisBaseProfile := json.Marshal(o.ChassisBaseProfile)
	if errChassisBaseProfile != nil {
		return map[string]interface{}{}, errChassisBaseProfile
	}
	errChassisBaseProfile = json.Unmarshal([]byte(serializedChassisBaseProfile), &toSerialize)
	if errChassisBaseProfile != nil {
		return map[string]interface{}{}, errChassisBaseProfile
	}
	if _, exists := toSerialize["ClassId"]; !exists {
		toSerialize["ClassId"] = o.GetDefaultClassId()
	}
	toSerialize["ClassId"] = o.ClassId
	if _, exists := toSerialize["ObjectType"]; !exists {
		toSerialize["ObjectType"] = o.GetDefaultObjectType()
	}
	toSerialize["ObjectType"] = o.ObjectType
	if !IsNil(o.Usage) {
		toSerialize["Usage"] = o.Usage
	}
	if o.Organization.IsSet() {
		toSerialize["Organization"] = o.Organization.Get()
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ChassisProfileTemplate) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"ClassId",
		"ObjectType",
	}

	// defaultValueFuncMap captures the default values for required properties.
	// These values are used when required properties are missing from the payload.
	defaultValueFuncMap := map[string]func() interface{}{
		"ClassId":    o.GetDefaultClassId,
		"ObjectType": o.GetDefaultObjectType,
	}
	var defaultValueApplied bool
	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			if _, ok := defaultValueFuncMap[requiredProperty]; ok {
				allProperties[requiredProperty] = defaultValueFuncMap[requiredProperty]()
				defaultValueApplied = true
			}
		}
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	if defaultValueApplied {
		data, err = json.Marshal(allProperties)
		if err != nil {
			return err
		}
	}
	type ChassisProfileTemplateWithoutEmbeddedStruct struct {
		// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.
		ClassId string `json:"ClassId"`
		// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
		ObjectType string `json:"ObjectType"`
		// The count of the chassis profiles derived from the template.
		Usage        *int64                                       `json:"Usage,omitempty"`
		Organization NullableOrganizationOrganizationRelationship `json:"Organization,omitempty"`
	}

	varChassisProfileTemplateWithoutEmbeddedStruct := ChassisProfileTemplateWithoutEmbeddedStruct{}

	err = json.Unmarshal(data, &varChassisProfileTemplateWithoutEmbeddedStruct)
	if err == nil {
		varChassisProfileTemplate := _ChassisProfileTemplate{}
		varChassisProfileTemplate.ClassId = varChassisProfileTemplateWithoutEmbeddedStruct.ClassId
		varChassisProfileTemplate.ObjectType = varChassisProfileTemplateWithoutEmbeddedStruct.ObjectType
		varChassisProfileTemplate.Usage = varChassisProfileTemplateWithoutEmbeddedStruct.Usage
		varChassisProfileTemplate.Organization = varChassisProfileTemplateWithoutEmbeddedStruct.Organization
		*o = ChassisProfileTemplate(varChassisProfileTemplate)
	} else {
		return err
	}

	varChassisProfileTemplate := _ChassisProfileTemplate{}

	err = json.Unmarshal(data, &varChassisProfileTemplate)
	if err == nil {
		o.ChassisBaseProfile = varChassisProfileTemplate.ChassisBaseProfile
	} else {
		return err
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "ClassId")
		delete(additionalProperties, "ObjectType")
		delete(additionalProperties, "Usage")
		delete(additionalProperties, "Organization")

		// remove fields from embedded structs
		reflectChassisBaseProfile := reflect.ValueOf(o.ChassisBaseProfile)
		for i := 0; i < reflectChassisBaseProfile.Type().NumField(); i++ {
			t := reflectChassisBaseProfile.Type().Field(i)

			if jsonTag := t.Tag.Get("json"); jsonTag != "" {
				fieldName := ""
				if commaIdx := strings.Index(jsonTag, ","); commaIdx > 0 {
					fieldName = jsonTag[:commaIdx]
				} else {
					fieldName = jsonTag
				}
				if fieldName != "AdditionalProperties" {
					delete(additionalProperties, fieldName)
				}
			}
		}

		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableChassisProfileTemplate struct {
	value *ChassisProfileTemplate
	isSet bool
}

func (v NullableChassisProfileTemplate) Get() *ChassisProfileTemplate {
	return v.value
}

func (v *NullableChassisProfileTemplate) Set(val *ChassisProfileTemplate) {
	v.value = val
	v.isSet = true
}

func (v NullableChassisProfileTemplate) IsSet() bool {
	return v.isSet
}

func (v *NullableChassisProfileTemplate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableChassisProfileTemplate(val *ChassisProfileTemplate) *NullableChassisProfileTemplate {
	return &NullableChassisProfileTemplate{value: val, isSet: true}
}

func (v NullableChassisProfileTemplate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableChassisProfileTemplate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
