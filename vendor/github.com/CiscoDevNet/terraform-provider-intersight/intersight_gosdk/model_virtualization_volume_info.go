/*
Cisco Intersight

Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations. The Intersight OpenAPI document defines the complete set of properties that are returned in the HTTP response. From that perspective, a client can expect that no additional properties are returned, unless these properties are explicitly defined in the OpenAPI document. However, when a client uses an older version of the Intersight OpenAPI document, the server may send additional properties because the software is more recent than the client. In that case, the client may receive properties that it does not know about. Some generated SDKs perform a strict validation of the HTTP response body against the OpenAPI document.

API version: 1.0.11-18534
Contact: intersight@cisco.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package intersight

import (
	"encoding/json"
	"fmt"
	"reflect"
	"strings"
)

// checks if the VirtualizationVolumeInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VirtualizationVolumeInfo{}

// VirtualizationVolumeInfo Information about the volume.
type VirtualizationVolumeInfo struct {
	MoBaseComplexType
	// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.
	ClassId string `json:"ClassId"`
	// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
	ObjectType string `json:"ObjectType"`
	// Set to true, if the volume should be a root disk.
	Bootable *bool `json:"Bootable,omitempty"`
	// Set to true, to delete the volume on termination of the VM the volume is attached to.
	DeleteOnTermination *bool `json:"DeleteOnTermination,omitempty"`
	// Set to true, if the volume should be encrypted.
	Encryption *bool `json:"Encryption,omitempty"`
	// IOPS for the volume for applicable volume types.
	Iops *int64 `json:"Iops,omitempty"`
	// Order of the disk attachment to the VM.
	Order *int64 `json:"Order,omitempty"`
	// Throughput for the volume for applicable volume types.
	Throughput *int64 `json:"Throughput,omitempty"`
	// Unique volume id assigned by the cloud provider.
	VolumeId *string `json:"VolumeId,omitempty"`
	// Name assigned to the volume created.
	VolumeName *string `json:"VolumeName,omitempty"`
	// Size of the volume created in GB.
	VolumeSize *int64 `json:"VolumeSize,omitempty"`
	// Id of the volume or storage type of this volume.
	VolumeType           *string `json:"VolumeType,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _VirtualizationVolumeInfo VirtualizationVolumeInfo

// NewVirtualizationVolumeInfo instantiates a new VirtualizationVolumeInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVirtualizationVolumeInfo(classId string, objectType string) *VirtualizationVolumeInfo {
	this := VirtualizationVolumeInfo{}
	this.ClassId = classId
	this.ObjectType = objectType
	return &this
}

// NewVirtualizationVolumeInfoWithDefaults instantiates a new VirtualizationVolumeInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVirtualizationVolumeInfoWithDefaults() *VirtualizationVolumeInfo {
	this := VirtualizationVolumeInfo{}
	var classId string = "virtualization.VolumeInfo"
	this.ClassId = classId
	var objectType string = "virtualization.VolumeInfo"
	this.ObjectType = objectType
	return &this
}

// GetClassId returns the ClassId field value
func (o *VirtualizationVolumeInfo) GetClassId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ClassId
}

// GetClassIdOk returns a tuple with the ClassId field value
// and a boolean to check if the value has been set.
func (o *VirtualizationVolumeInfo) GetClassIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ClassId, true
}

// SetClassId sets field value
func (o *VirtualizationVolumeInfo) SetClassId(v string) {
	o.ClassId = v
}

// GetDefaultClassId returns the default value "virtualization.VolumeInfo" of the ClassId field.
func (o *VirtualizationVolumeInfo) GetDefaultClassId() interface{} {
	return "virtualization.VolumeInfo"
}

// GetObjectType returns the ObjectType field value
func (o *VirtualizationVolumeInfo) GetObjectType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ObjectType
}

// GetObjectTypeOk returns a tuple with the ObjectType field value
// and a boolean to check if the value has been set.
func (o *VirtualizationVolumeInfo) GetObjectTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ObjectType, true
}

// SetObjectType sets field value
func (o *VirtualizationVolumeInfo) SetObjectType(v string) {
	o.ObjectType = v
}

// GetDefaultObjectType returns the default value "virtualization.VolumeInfo" of the ObjectType field.
func (o *VirtualizationVolumeInfo) GetDefaultObjectType() interface{} {
	return "virtualization.VolumeInfo"
}

// GetBootable returns the Bootable field value if set, zero value otherwise.
func (o *VirtualizationVolumeInfo) GetBootable() bool {
	if o == nil || IsNil(o.Bootable) {
		var ret bool
		return ret
	}
	return *o.Bootable
}

// GetBootableOk returns a tuple with the Bootable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualizationVolumeInfo) GetBootableOk() (*bool, bool) {
	if o == nil || IsNil(o.Bootable) {
		return nil, false
	}
	return o.Bootable, true
}

// HasBootable returns a boolean if a field has been set.
func (o *VirtualizationVolumeInfo) HasBootable() bool {
	if o != nil && !IsNil(o.Bootable) {
		return true
	}

	return false
}

// SetBootable gets a reference to the given bool and assigns it to the Bootable field.
func (o *VirtualizationVolumeInfo) SetBootable(v bool) {
	o.Bootable = &v
}

// GetDeleteOnTermination returns the DeleteOnTermination field value if set, zero value otherwise.
func (o *VirtualizationVolumeInfo) GetDeleteOnTermination() bool {
	if o == nil || IsNil(o.DeleteOnTermination) {
		var ret bool
		return ret
	}
	return *o.DeleteOnTermination
}

// GetDeleteOnTerminationOk returns a tuple with the DeleteOnTermination field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualizationVolumeInfo) GetDeleteOnTerminationOk() (*bool, bool) {
	if o == nil || IsNil(o.DeleteOnTermination) {
		return nil, false
	}
	return o.DeleteOnTermination, true
}

// HasDeleteOnTermination returns a boolean if a field has been set.
func (o *VirtualizationVolumeInfo) HasDeleteOnTermination() bool {
	if o != nil && !IsNil(o.DeleteOnTermination) {
		return true
	}

	return false
}

// SetDeleteOnTermination gets a reference to the given bool and assigns it to the DeleteOnTermination field.
func (o *VirtualizationVolumeInfo) SetDeleteOnTermination(v bool) {
	o.DeleteOnTermination = &v
}

// GetEncryption returns the Encryption field value if set, zero value otherwise.
func (o *VirtualizationVolumeInfo) GetEncryption() bool {
	if o == nil || IsNil(o.Encryption) {
		var ret bool
		return ret
	}
	return *o.Encryption
}

// GetEncryptionOk returns a tuple with the Encryption field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualizationVolumeInfo) GetEncryptionOk() (*bool, bool) {
	if o == nil || IsNil(o.Encryption) {
		return nil, false
	}
	return o.Encryption, true
}

// HasEncryption returns a boolean if a field has been set.
func (o *VirtualizationVolumeInfo) HasEncryption() bool {
	if o != nil && !IsNil(o.Encryption) {
		return true
	}

	return false
}

// SetEncryption gets a reference to the given bool and assigns it to the Encryption field.
func (o *VirtualizationVolumeInfo) SetEncryption(v bool) {
	o.Encryption = &v
}

// GetIops returns the Iops field value if set, zero value otherwise.
func (o *VirtualizationVolumeInfo) GetIops() int64 {
	if o == nil || IsNil(o.Iops) {
		var ret int64
		return ret
	}
	return *o.Iops
}

// GetIopsOk returns a tuple with the Iops field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualizationVolumeInfo) GetIopsOk() (*int64, bool) {
	if o == nil || IsNil(o.Iops) {
		return nil, false
	}
	return o.Iops, true
}

// HasIops returns a boolean if a field has been set.
func (o *VirtualizationVolumeInfo) HasIops() bool {
	if o != nil && !IsNil(o.Iops) {
		return true
	}

	return false
}

// SetIops gets a reference to the given int64 and assigns it to the Iops field.
func (o *VirtualizationVolumeInfo) SetIops(v int64) {
	o.Iops = &v
}

// GetOrder returns the Order field value if set, zero value otherwise.
func (o *VirtualizationVolumeInfo) GetOrder() int64 {
	if o == nil || IsNil(o.Order) {
		var ret int64
		return ret
	}
	return *o.Order
}

// GetOrderOk returns a tuple with the Order field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualizationVolumeInfo) GetOrderOk() (*int64, bool) {
	if o == nil || IsNil(o.Order) {
		return nil, false
	}
	return o.Order, true
}

// HasOrder returns a boolean if a field has been set.
func (o *VirtualizationVolumeInfo) HasOrder() bool {
	if o != nil && !IsNil(o.Order) {
		return true
	}

	return false
}

// SetOrder gets a reference to the given int64 and assigns it to the Order field.
func (o *VirtualizationVolumeInfo) SetOrder(v int64) {
	o.Order = &v
}

// GetThroughput returns the Throughput field value if set, zero value otherwise.
func (o *VirtualizationVolumeInfo) GetThroughput() int64 {
	if o == nil || IsNil(o.Throughput) {
		var ret int64
		return ret
	}
	return *o.Throughput
}

// GetThroughputOk returns a tuple with the Throughput field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualizationVolumeInfo) GetThroughputOk() (*int64, bool) {
	if o == nil || IsNil(o.Throughput) {
		return nil, false
	}
	return o.Throughput, true
}

// HasThroughput returns a boolean if a field has been set.
func (o *VirtualizationVolumeInfo) HasThroughput() bool {
	if o != nil && !IsNil(o.Throughput) {
		return true
	}

	return false
}

// SetThroughput gets a reference to the given int64 and assigns it to the Throughput field.
func (o *VirtualizationVolumeInfo) SetThroughput(v int64) {
	o.Throughput = &v
}

// GetVolumeId returns the VolumeId field value if set, zero value otherwise.
func (o *VirtualizationVolumeInfo) GetVolumeId() string {
	if o == nil || IsNil(o.VolumeId) {
		var ret string
		return ret
	}
	return *o.VolumeId
}

// GetVolumeIdOk returns a tuple with the VolumeId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualizationVolumeInfo) GetVolumeIdOk() (*string, bool) {
	if o == nil || IsNil(o.VolumeId) {
		return nil, false
	}
	return o.VolumeId, true
}

// HasVolumeId returns a boolean if a field has been set.
func (o *VirtualizationVolumeInfo) HasVolumeId() bool {
	if o != nil && !IsNil(o.VolumeId) {
		return true
	}

	return false
}

// SetVolumeId gets a reference to the given string and assigns it to the VolumeId field.
func (o *VirtualizationVolumeInfo) SetVolumeId(v string) {
	o.VolumeId = &v
}

// GetVolumeName returns the VolumeName field value if set, zero value otherwise.
func (o *VirtualizationVolumeInfo) GetVolumeName() string {
	if o == nil || IsNil(o.VolumeName) {
		var ret string
		return ret
	}
	return *o.VolumeName
}

// GetVolumeNameOk returns a tuple with the VolumeName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualizationVolumeInfo) GetVolumeNameOk() (*string, bool) {
	if o == nil || IsNil(o.VolumeName) {
		return nil, false
	}
	return o.VolumeName, true
}

// HasVolumeName returns a boolean if a field has been set.
func (o *VirtualizationVolumeInfo) HasVolumeName() bool {
	if o != nil && !IsNil(o.VolumeName) {
		return true
	}

	return false
}

// SetVolumeName gets a reference to the given string and assigns it to the VolumeName field.
func (o *VirtualizationVolumeInfo) SetVolumeName(v string) {
	o.VolumeName = &v
}

// GetVolumeSize returns the VolumeSize field value if set, zero value otherwise.
func (o *VirtualizationVolumeInfo) GetVolumeSize() int64 {
	if o == nil || IsNil(o.VolumeSize) {
		var ret int64
		return ret
	}
	return *o.VolumeSize
}

// GetVolumeSizeOk returns a tuple with the VolumeSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualizationVolumeInfo) GetVolumeSizeOk() (*int64, bool) {
	if o == nil || IsNil(o.VolumeSize) {
		return nil, false
	}
	return o.VolumeSize, true
}

// HasVolumeSize returns a boolean if a field has been set.
func (o *VirtualizationVolumeInfo) HasVolumeSize() bool {
	if o != nil && !IsNil(o.VolumeSize) {
		return true
	}

	return false
}

// SetVolumeSize gets a reference to the given int64 and assigns it to the VolumeSize field.
func (o *VirtualizationVolumeInfo) SetVolumeSize(v int64) {
	o.VolumeSize = &v
}

// GetVolumeType returns the VolumeType field value if set, zero value otherwise.
func (o *VirtualizationVolumeInfo) GetVolumeType() string {
	if o == nil || IsNil(o.VolumeType) {
		var ret string
		return ret
	}
	return *o.VolumeType
}

// GetVolumeTypeOk returns a tuple with the VolumeType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualizationVolumeInfo) GetVolumeTypeOk() (*string, bool) {
	if o == nil || IsNil(o.VolumeType) {
		return nil, false
	}
	return o.VolumeType, true
}

// HasVolumeType returns a boolean if a field has been set.
func (o *VirtualizationVolumeInfo) HasVolumeType() bool {
	if o != nil && !IsNil(o.VolumeType) {
		return true
	}

	return false
}

// SetVolumeType gets a reference to the given string and assigns it to the VolumeType field.
func (o *VirtualizationVolumeInfo) SetVolumeType(v string) {
	o.VolumeType = &v
}

func (o VirtualizationVolumeInfo) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VirtualizationVolumeInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	serializedMoBaseComplexType, errMoBaseComplexType := json.Marshal(o.MoBaseComplexType)
	if errMoBaseComplexType != nil {
		return map[string]interface{}{}, errMoBaseComplexType
	}
	errMoBaseComplexType = json.Unmarshal([]byte(serializedMoBaseComplexType), &toSerialize)
	if errMoBaseComplexType != nil {
		return map[string]interface{}{}, errMoBaseComplexType
	}
	if _, exists := toSerialize["ClassId"]; !exists {
		toSerialize["ClassId"] = o.GetDefaultClassId()
	}
	toSerialize["ClassId"] = o.ClassId
	if _, exists := toSerialize["ObjectType"]; !exists {
		toSerialize["ObjectType"] = o.GetDefaultObjectType()
	}
	toSerialize["ObjectType"] = o.ObjectType
	if !IsNil(o.Bootable) {
		toSerialize["Bootable"] = o.Bootable
	}
	if !IsNil(o.DeleteOnTermination) {
		toSerialize["DeleteOnTermination"] = o.DeleteOnTermination
	}
	if !IsNil(o.Encryption) {
		toSerialize["Encryption"] = o.Encryption
	}
	if !IsNil(o.Iops) {
		toSerialize["Iops"] = o.Iops
	}
	if !IsNil(o.Order) {
		toSerialize["Order"] = o.Order
	}
	if !IsNil(o.Throughput) {
		toSerialize["Throughput"] = o.Throughput
	}
	if !IsNil(o.VolumeId) {
		toSerialize["VolumeId"] = o.VolumeId
	}
	if !IsNil(o.VolumeName) {
		toSerialize["VolumeName"] = o.VolumeName
	}
	if !IsNil(o.VolumeSize) {
		toSerialize["VolumeSize"] = o.VolumeSize
	}
	if !IsNil(o.VolumeType) {
		toSerialize["VolumeType"] = o.VolumeType
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *VirtualizationVolumeInfo) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"ClassId",
		"ObjectType",
	}

	// defaultValueFuncMap captures the default values for required properties.
	// These values are used when required properties are missing from the payload.
	defaultValueFuncMap := map[string]func() interface{}{
		"ClassId":    o.GetDefaultClassId,
		"ObjectType": o.GetDefaultObjectType,
	}
	var defaultValueApplied bool
	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			if _, ok := defaultValueFuncMap[requiredProperty]; ok {
				allProperties[requiredProperty] = defaultValueFuncMap[requiredProperty]()
				defaultValueApplied = true
			}
		}
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	if defaultValueApplied {
		data, err = json.Marshal(allProperties)
		if err != nil {
			return err
		}
	}
	type VirtualizationVolumeInfoWithoutEmbeddedStruct struct {
		// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.
		ClassId string `json:"ClassId"`
		// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
		ObjectType string `json:"ObjectType"`
		// Set to true, if the volume should be a root disk.
		Bootable *bool `json:"Bootable,omitempty"`
		// Set to true, to delete the volume on termination of the VM the volume is attached to.
		DeleteOnTermination *bool `json:"DeleteOnTermination,omitempty"`
		// Set to true, if the volume should be encrypted.
		Encryption *bool `json:"Encryption,omitempty"`
		// IOPS for the volume for applicable volume types.
		Iops *int64 `json:"Iops,omitempty"`
		// Order of the disk attachment to the VM.
		Order *int64 `json:"Order,omitempty"`
		// Throughput for the volume for applicable volume types.
		Throughput *int64 `json:"Throughput,omitempty"`
		// Unique volume id assigned by the cloud provider.
		VolumeId *string `json:"VolumeId,omitempty"`
		// Name assigned to the volume created.
		VolumeName *string `json:"VolumeName,omitempty"`
		// Size of the volume created in GB.
		VolumeSize *int64 `json:"VolumeSize,omitempty"`
		// Id of the volume or storage type of this volume.
		VolumeType *string `json:"VolumeType,omitempty"`
	}

	varVirtualizationVolumeInfoWithoutEmbeddedStruct := VirtualizationVolumeInfoWithoutEmbeddedStruct{}

	err = json.Unmarshal(data, &varVirtualizationVolumeInfoWithoutEmbeddedStruct)
	if err == nil {
		varVirtualizationVolumeInfo := _VirtualizationVolumeInfo{}
		varVirtualizationVolumeInfo.ClassId = varVirtualizationVolumeInfoWithoutEmbeddedStruct.ClassId
		varVirtualizationVolumeInfo.ObjectType = varVirtualizationVolumeInfoWithoutEmbeddedStruct.ObjectType
		varVirtualizationVolumeInfo.Bootable = varVirtualizationVolumeInfoWithoutEmbeddedStruct.Bootable
		varVirtualizationVolumeInfo.DeleteOnTermination = varVirtualizationVolumeInfoWithoutEmbeddedStruct.DeleteOnTermination
		varVirtualizationVolumeInfo.Encryption = varVirtualizationVolumeInfoWithoutEmbeddedStruct.Encryption
		varVirtualizationVolumeInfo.Iops = varVirtualizationVolumeInfoWithoutEmbeddedStruct.Iops
		varVirtualizationVolumeInfo.Order = varVirtualizationVolumeInfoWithoutEmbeddedStruct.Order
		varVirtualizationVolumeInfo.Throughput = varVirtualizationVolumeInfoWithoutEmbeddedStruct.Throughput
		varVirtualizationVolumeInfo.VolumeId = varVirtualizationVolumeInfoWithoutEmbeddedStruct.VolumeId
		varVirtualizationVolumeInfo.VolumeName = varVirtualizationVolumeInfoWithoutEmbeddedStruct.VolumeName
		varVirtualizationVolumeInfo.VolumeSize = varVirtualizationVolumeInfoWithoutEmbeddedStruct.VolumeSize
		varVirtualizationVolumeInfo.VolumeType = varVirtualizationVolumeInfoWithoutEmbeddedStruct.VolumeType
		*o = VirtualizationVolumeInfo(varVirtualizationVolumeInfo)
	} else {
		return err
	}

	varVirtualizationVolumeInfo := _VirtualizationVolumeInfo{}

	err = json.Unmarshal(data, &varVirtualizationVolumeInfo)
	if err == nil {
		o.MoBaseComplexType = varVirtualizationVolumeInfo.MoBaseComplexType
	} else {
		return err
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "ClassId")
		delete(additionalProperties, "ObjectType")
		delete(additionalProperties, "Bootable")
		delete(additionalProperties, "DeleteOnTermination")
		delete(additionalProperties, "Encryption")
		delete(additionalProperties, "Iops")
		delete(additionalProperties, "Order")
		delete(additionalProperties, "Throughput")
		delete(additionalProperties, "VolumeId")
		delete(additionalProperties, "VolumeName")
		delete(additionalProperties, "VolumeSize")
		delete(additionalProperties, "VolumeType")

		// remove fields from embedded structs
		reflectMoBaseComplexType := reflect.ValueOf(o.MoBaseComplexType)
		for i := 0; i < reflectMoBaseComplexType.Type().NumField(); i++ {
			t := reflectMoBaseComplexType.Type().Field(i)

			if jsonTag := t.Tag.Get("json"); jsonTag != "" {
				fieldName := ""
				if commaIdx := strings.Index(jsonTag, ","); commaIdx > 0 {
					fieldName = jsonTag[:commaIdx]
				} else {
					fieldName = jsonTag
				}
				if fieldName != "AdditionalProperties" {
					delete(additionalProperties, fieldName)
				}
			}
		}

		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableVirtualizationVolumeInfo struct {
	value *VirtualizationVolumeInfo
	isSet bool
}

func (v NullableVirtualizationVolumeInfo) Get() *VirtualizationVolumeInfo {
	return v.value
}

func (v *NullableVirtualizationVolumeInfo) Set(val *VirtualizationVolumeInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableVirtualizationVolumeInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableVirtualizationVolumeInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVirtualizationVolumeInfo(val *VirtualizationVolumeInfo) *NullableVirtualizationVolumeInfo {
	return &NullableVirtualizationVolumeInfo{value: val, isSet: true}
}

func (v NullableVirtualizationVolumeInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVirtualizationVolumeInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
