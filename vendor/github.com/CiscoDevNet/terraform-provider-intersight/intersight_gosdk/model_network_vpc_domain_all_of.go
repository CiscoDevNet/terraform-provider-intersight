/*
Cisco Intersight

Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations. The Intersight OpenAPI document defines the complete set of properties that are returned in the HTTP response. From that perspective, a client can expect that no additional properties are returned, unless these properties are explicitly defined in the OpenAPI document. However, when a client uses an older version of the Intersight OpenAPI document, the server may send additional properties because the software is more recent than the client. In that case, the client may receive properties that it does not know about. Some generated SDKs perform a strict validation of the HTTP response body against the OpenAPI document.

API version: 1.0.11-14237
Contact: intersight@cisco.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package intersight

import (
	"encoding/json"
)

// NetworkVpcDomainAllOf Definition of the list of properties defined in 'network.VpcDomain', excluding properties defined in parent classes.
type NetworkVpcDomainAllOf struct {
	// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.
	ClassId string `json:"ClassId"`
	// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
	ObjectType string `json:"ObjectType"`
	// Auto recovery status of the virtual port channel domain.
	AutoRecoveryStatus *string `json:"AutoRecoveryStatus,omitempty"`
	// Consistency status of the virtual port channel domain.
	ConsistencyStatus *string `json:"ConsistencyStatus,omitempty"`
	// Dual Active Excluded VLANs of the virtual port channel domain.
	DualActiveExcludedVlans *int64 `json:"DualActiveExcludedVlans,omitempty"`
	// Keep alive status of the virtual port channel domain.
	KeepAliveStatus *string `json:"KeepAliveStatus,omitempty"`
	// Peer status of the virtual port channel domain.
	PeerStatus *string `json:"PeerStatus,omitempty"`
	// Role of the virtual port channel domain.
	Role *string `json:"Role,omitempty"`
	// Identity of the virtual port channel domain.
	VpcDomainId *int64 `json:"VpcDomainId,omitempty"`
	// Number of VPCs configured on the virtual port channel domain.
	VpcsConfiguredCount  *int64                               `json:"VpcsConfiguredCount,omitempty"`
	NetworkElement       *NetworkElementRelationship          `json:"NetworkElement,omitempty"`
	RegisteredDevice     *AssetDeviceRegistrationRelationship `json:"RegisteredDevice,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _NetworkVpcDomainAllOf NetworkVpcDomainAllOf

// NewNetworkVpcDomainAllOf instantiates a new NetworkVpcDomainAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNetworkVpcDomainAllOf(classId string, objectType string) *NetworkVpcDomainAllOf {
	this := NetworkVpcDomainAllOf{}
	this.ClassId = classId
	this.ObjectType = objectType
	return &this
}

// NewNetworkVpcDomainAllOfWithDefaults instantiates a new NetworkVpcDomainAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNetworkVpcDomainAllOfWithDefaults() *NetworkVpcDomainAllOf {
	this := NetworkVpcDomainAllOf{}
	var classId string = "network.VpcDomain"
	this.ClassId = classId
	var objectType string = "network.VpcDomain"
	this.ObjectType = objectType
	return &this
}

// GetClassId returns the ClassId field value
func (o *NetworkVpcDomainAllOf) GetClassId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ClassId
}

// GetClassIdOk returns a tuple with the ClassId field value
// and a boolean to check if the value has been set.
func (o *NetworkVpcDomainAllOf) GetClassIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ClassId, true
}

// SetClassId sets field value
func (o *NetworkVpcDomainAllOf) SetClassId(v string) {
	o.ClassId = v
}

// GetObjectType returns the ObjectType field value
func (o *NetworkVpcDomainAllOf) GetObjectType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ObjectType
}

// GetObjectTypeOk returns a tuple with the ObjectType field value
// and a boolean to check if the value has been set.
func (o *NetworkVpcDomainAllOf) GetObjectTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ObjectType, true
}

// SetObjectType sets field value
func (o *NetworkVpcDomainAllOf) SetObjectType(v string) {
	o.ObjectType = v
}

// GetAutoRecoveryStatus returns the AutoRecoveryStatus field value if set, zero value otherwise.
func (o *NetworkVpcDomainAllOf) GetAutoRecoveryStatus() string {
	if o == nil || o.AutoRecoveryStatus == nil {
		var ret string
		return ret
	}
	return *o.AutoRecoveryStatus
}

// GetAutoRecoveryStatusOk returns a tuple with the AutoRecoveryStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkVpcDomainAllOf) GetAutoRecoveryStatusOk() (*string, bool) {
	if o == nil || o.AutoRecoveryStatus == nil {
		return nil, false
	}
	return o.AutoRecoveryStatus, true
}

// HasAutoRecoveryStatus returns a boolean if a field has been set.
func (o *NetworkVpcDomainAllOf) HasAutoRecoveryStatus() bool {
	if o != nil && o.AutoRecoveryStatus != nil {
		return true
	}

	return false
}

// SetAutoRecoveryStatus gets a reference to the given string and assigns it to the AutoRecoveryStatus field.
func (o *NetworkVpcDomainAllOf) SetAutoRecoveryStatus(v string) {
	o.AutoRecoveryStatus = &v
}

// GetConsistencyStatus returns the ConsistencyStatus field value if set, zero value otherwise.
func (o *NetworkVpcDomainAllOf) GetConsistencyStatus() string {
	if o == nil || o.ConsistencyStatus == nil {
		var ret string
		return ret
	}
	return *o.ConsistencyStatus
}

// GetConsistencyStatusOk returns a tuple with the ConsistencyStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkVpcDomainAllOf) GetConsistencyStatusOk() (*string, bool) {
	if o == nil || o.ConsistencyStatus == nil {
		return nil, false
	}
	return o.ConsistencyStatus, true
}

// HasConsistencyStatus returns a boolean if a field has been set.
func (o *NetworkVpcDomainAllOf) HasConsistencyStatus() bool {
	if o != nil && o.ConsistencyStatus != nil {
		return true
	}

	return false
}

// SetConsistencyStatus gets a reference to the given string and assigns it to the ConsistencyStatus field.
func (o *NetworkVpcDomainAllOf) SetConsistencyStatus(v string) {
	o.ConsistencyStatus = &v
}

// GetDualActiveExcludedVlans returns the DualActiveExcludedVlans field value if set, zero value otherwise.
func (o *NetworkVpcDomainAllOf) GetDualActiveExcludedVlans() int64 {
	if o == nil || o.DualActiveExcludedVlans == nil {
		var ret int64
		return ret
	}
	return *o.DualActiveExcludedVlans
}

// GetDualActiveExcludedVlansOk returns a tuple with the DualActiveExcludedVlans field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkVpcDomainAllOf) GetDualActiveExcludedVlansOk() (*int64, bool) {
	if o == nil || o.DualActiveExcludedVlans == nil {
		return nil, false
	}
	return o.DualActiveExcludedVlans, true
}

// HasDualActiveExcludedVlans returns a boolean if a field has been set.
func (o *NetworkVpcDomainAllOf) HasDualActiveExcludedVlans() bool {
	if o != nil && o.DualActiveExcludedVlans != nil {
		return true
	}

	return false
}

// SetDualActiveExcludedVlans gets a reference to the given int64 and assigns it to the DualActiveExcludedVlans field.
func (o *NetworkVpcDomainAllOf) SetDualActiveExcludedVlans(v int64) {
	o.DualActiveExcludedVlans = &v
}

// GetKeepAliveStatus returns the KeepAliveStatus field value if set, zero value otherwise.
func (o *NetworkVpcDomainAllOf) GetKeepAliveStatus() string {
	if o == nil || o.KeepAliveStatus == nil {
		var ret string
		return ret
	}
	return *o.KeepAliveStatus
}

// GetKeepAliveStatusOk returns a tuple with the KeepAliveStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkVpcDomainAllOf) GetKeepAliveStatusOk() (*string, bool) {
	if o == nil || o.KeepAliveStatus == nil {
		return nil, false
	}
	return o.KeepAliveStatus, true
}

// HasKeepAliveStatus returns a boolean if a field has been set.
func (o *NetworkVpcDomainAllOf) HasKeepAliveStatus() bool {
	if o != nil && o.KeepAliveStatus != nil {
		return true
	}

	return false
}

// SetKeepAliveStatus gets a reference to the given string and assigns it to the KeepAliveStatus field.
func (o *NetworkVpcDomainAllOf) SetKeepAliveStatus(v string) {
	o.KeepAliveStatus = &v
}

// GetPeerStatus returns the PeerStatus field value if set, zero value otherwise.
func (o *NetworkVpcDomainAllOf) GetPeerStatus() string {
	if o == nil || o.PeerStatus == nil {
		var ret string
		return ret
	}
	return *o.PeerStatus
}

// GetPeerStatusOk returns a tuple with the PeerStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkVpcDomainAllOf) GetPeerStatusOk() (*string, bool) {
	if o == nil || o.PeerStatus == nil {
		return nil, false
	}
	return o.PeerStatus, true
}

// HasPeerStatus returns a boolean if a field has been set.
func (o *NetworkVpcDomainAllOf) HasPeerStatus() bool {
	if o != nil && o.PeerStatus != nil {
		return true
	}

	return false
}

// SetPeerStatus gets a reference to the given string and assigns it to the PeerStatus field.
func (o *NetworkVpcDomainAllOf) SetPeerStatus(v string) {
	o.PeerStatus = &v
}

// GetRole returns the Role field value if set, zero value otherwise.
func (o *NetworkVpcDomainAllOf) GetRole() string {
	if o == nil || o.Role == nil {
		var ret string
		return ret
	}
	return *o.Role
}

// GetRoleOk returns a tuple with the Role field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkVpcDomainAllOf) GetRoleOk() (*string, bool) {
	if o == nil || o.Role == nil {
		return nil, false
	}
	return o.Role, true
}

// HasRole returns a boolean if a field has been set.
func (o *NetworkVpcDomainAllOf) HasRole() bool {
	if o != nil && o.Role != nil {
		return true
	}

	return false
}

// SetRole gets a reference to the given string and assigns it to the Role field.
func (o *NetworkVpcDomainAllOf) SetRole(v string) {
	o.Role = &v
}

// GetVpcDomainId returns the VpcDomainId field value if set, zero value otherwise.
func (o *NetworkVpcDomainAllOf) GetVpcDomainId() int64 {
	if o == nil || o.VpcDomainId == nil {
		var ret int64
		return ret
	}
	return *o.VpcDomainId
}

// GetVpcDomainIdOk returns a tuple with the VpcDomainId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkVpcDomainAllOf) GetVpcDomainIdOk() (*int64, bool) {
	if o == nil || o.VpcDomainId == nil {
		return nil, false
	}
	return o.VpcDomainId, true
}

// HasVpcDomainId returns a boolean if a field has been set.
func (o *NetworkVpcDomainAllOf) HasVpcDomainId() bool {
	if o != nil && o.VpcDomainId != nil {
		return true
	}

	return false
}

// SetVpcDomainId gets a reference to the given int64 and assigns it to the VpcDomainId field.
func (o *NetworkVpcDomainAllOf) SetVpcDomainId(v int64) {
	o.VpcDomainId = &v
}

// GetVpcsConfiguredCount returns the VpcsConfiguredCount field value if set, zero value otherwise.
func (o *NetworkVpcDomainAllOf) GetVpcsConfiguredCount() int64 {
	if o == nil || o.VpcsConfiguredCount == nil {
		var ret int64
		return ret
	}
	return *o.VpcsConfiguredCount
}

// GetVpcsConfiguredCountOk returns a tuple with the VpcsConfiguredCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkVpcDomainAllOf) GetVpcsConfiguredCountOk() (*int64, bool) {
	if o == nil || o.VpcsConfiguredCount == nil {
		return nil, false
	}
	return o.VpcsConfiguredCount, true
}

// HasVpcsConfiguredCount returns a boolean if a field has been set.
func (o *NetworkVpcDomainAllOf) HasVpcsConfiguredCount() bool {
	if o != nil && o.VpcsConfiguredCount != nil {
		return true
	}

	return false
}

// SetVpcsConfiguredCount gets a reference to the given int64 and assigns it to the VpcsConfiguredCount field.
func (o *NetworkVpcDomainAllOf) SetVpcsConfiguredCount(v int64) {
	o.VpcsConfiguredCount = &v
}

// GetNetworkElement returns the NetworkElement field value if set, zero value otherwise.
func (o *NetworkVpcDomainAllOf) GetNetworkElement() NetworkElementRelationship {
	if o == nil || o.NetworkElement == nil {
		var ret NetworkElementRelationship
		return ret
	}
	return *o.NetworkElement
}

// GetNetworkElementOk returns a tuple with the NetworkElement field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkVpcDomainAllOf) GetNetworkElementOk() (*NetworkElementRelationship, bool) {
	if o == nil || o.NetworkElement == nil {
		return nil, false
	}
	return o.NetworkElement, true
}

// HasNetworkElement returns a boolean if a field has been set.
func (o *NetworkVpcDomainAllOf) HasNetworkElement() bool {
	if o != nil && o.NetworkElement != nil {
		return true
	}

	return false
}

// SetNetworkElement gets a reference to the given NetworkElementRelationship and assigns it to the NetworkElement field.
func (o *NetworkVpcDomainAllOf) SetNetworkElement(v NetworkElementRelationship) {
	o.NetworkElement = &v
}

// GetRegisteredDevice returns the RegisteredDevice field value if set, zero value otherwise.
func (o *NetworkVpcDomainAllOf) GetRegisteredDevice() AssetDeviceRegistrationRelationship {
	if o == nil || o.RegisteredDevice == nil {
		var ret AssetDeviceRegistrationRelationship
		return ret
	}
	return *o.RegisteredDevice
}

// GetRegisteredDeviceOk returns a tuple with the RegisteredDevice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkVpcDomainAllOf) GetRegisteredDeviceOk() (*AssetDeviceRegistrationRelationship, bool) {
	if o == nil || o.RegisteredDevice == nil {
		return nil, false
	}
	return o.RegisteredDevice, true
}

// HasRegisteredDevice returns a boolean if a field has been set.
func (o *NetworkVpcDomainAllOf) HasRegisteredDevice() bool {
	if o != nil && o.RegisteredDevice != nil {
		return true
	}

	return false
}

// SetRegisteredDevice gets a reference to the given AssetDeviceRegistrationRelationship and assigns it to the RegisteredDevice field.
func (o *NetworkVpcDomainAllOf) SetRegisteredDevice(v AssetDeviceRegistrationRelationship) {
	o.RegisteredDevice = &v
}

func (o NetworkVpcDomainAllOf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["ClassId"] = o.ClassId
	}
	if true {
		toSerialize["ObjectType"] = o.ObjectType
	}
	if o.AutoRecoveryStatus != nil {
		toSerialize["AutoRecoveryStatus"] = o.AutoRecoveryStatus
	}
	if o.ConsistencyStatus != nil {
		toSerialize["ConsistencyStatus"] = o.ConsistencyStatus
	}
	if o.DualActiveExcludedVlans != nil {
		toSerialize["DualActiveExcludedVlans"] = o.DualActiveExcludedVlans
	}
	if o.KeepAliveStatus != nil {
		toSerialize["KeepAliveStatus"] = o.KeepAliveStatus
	}
	if o.PeerStatus != nil {
		toSerialize["PeerStatus"] = o.PeerStatus
	}
	if o.Role != nil {
		toSerialize["Role"] = o.Role
	}
	if o.VpcDomainId != nil {
		toSerialize["VpcDomainId"] = o.VpcDomainId
	}
	if o.VpcsConfiguredCount != nil {
		toSerialize["VpcsConfiguredCount"] = o.VpcsConfiguredCount
	}
	if o.NetworkElement != nil {
		toSerialize["NetworkElement"] = o.NetworkElement
	}
	if o.RegisteredDevice != nil {
		toSerialize["RegisteredDevice"] = o.RegisteredDevice
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *NetworkVpcDomainAllOf) UnmarshalJSON(bytes []byte) (err error) {
	varNetworkVpcDomainAllOf := _NetworkVpcDomainAllOf{}

	if err = json.Unmarshal(bytes, &varNetworkVpcDomainAllOf); err == nil {
		*o = NetworkVpcDomainAllOf(varNetworkVpcDomainAllOf)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "ClassId")
		delete(additionalProperties, "ObjectType")
		delete(additionalProperties, "AutoRecoveryStatus")
		delete(additionalProperties, "ConsistencyStatus")
		delete(additionalProperties, "DualActiveExcludedVlans")
		delete(additionalProperties, "KeepAliveStatus")
		delete(additionalProperties, "PeerStatus")
		delete(additionalProperties, "Role")
		delete(additionalProperties, "VpcDomainId")
		delete(additionalProperties, "VpcsConfiguredCount")
		delete(additionalProperties, "NetworkElement")
		delete(additionalProperties, "RegisteredDevice")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableNetworkVpcDomainAllOf struct {
	value *NetworkVpcDomainAllOf
	isSet bool
}

func (v NullableNetworkVpcDomainAllOf) Get() *NetworkVpcDomainAllOf {
	return v.value
}

func (v *NullableNetworkVpcDomainAllOf) Set(val *NetworkVpcDomainAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableNetworkVpcDomainAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableNetworkVpcDomainAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNetworkVpcDomainAllOf(val *NetworkVpcDomainAllOf) *NullableNetworkVpcDomainAllOf {
	return &NullableNetworkVpcDomainAllOf{value: val, isSet: true}
}

func (v NullableNetworkVpcDomainAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNetworkVpcDomainAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
