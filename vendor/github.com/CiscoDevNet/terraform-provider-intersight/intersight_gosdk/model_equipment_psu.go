/*
Cisco Intersight

Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations. The Intersight OpenAPI document defines the complete set of properties that are returned in the HTTP response. From that perspective, a client can expect that no additional properties are returned, unless these properties are explicitly defined in the OpenAPI document. However, when a client uses an older version of the Intersight OpenAPI document, the server may send additional properties because the software is more recent than the client. In that case, the client may receive properties that it does not know about. Some generated SDKs perform a strict validation of the HTTP response body against the OpenAPI document.

API version: 1.0.11-2024100405
Contact: intersight@cisco.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package intersight

import (
	"encoding/json"
	"fmt"
	"reflect"
	"strings"
)

// checks if the EquipmentPsu type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EquipmentPsu{}

// EquipmentPsu This represents power supply unit for chassis/server.
type EquipmentPsu struct {
	EquipmentBase
	// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.
	ClassId string `json:"ClassId"`
	// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
	ObjectType string `json:"ObjectType"`
	// This field is to provide description for the power supply unit.
	Description *string `json:"Description,omitempty"`
	// This field is to provide name for the power supply unit.
	Name       *string  `json:"Name,omitempty"`
	OperReason []string `json:"OperReason,omitempty"`
	// This field identifies the psu operational state.
	OperState *string `json:"OperState,omitempty"`
	// This field identifies the Part Number for this Power Supply Unit.
	PartNumber *string `json:"PartNumber,omitempty"`
	// This field identifies the Product ID for the Power Supply.
	Pid *string `json:"Pid,omitempty"`
	// This field identifies the Firmware Version of the Power Supply.
	PsuFwVersion *string `json:"PsuFwVersion,omitempty"`
	// This represents power supply unit identifier in chassis/server.
	PsuId *int64 `json:"PsuId,omitempty"`
	// This field identifies the input source for the Power Supply.
	PsuInputSrc *string `json:"PsuInputSrc,omitempty"`
	// This field identifies the type of the Power Supply.
	PsuType *string `json:"PsuType,omitempty"`
	// This field identifies the Wattage of the Power Supply.
	PsuWattage *string `json:"PsuWattage,omitempty"`
	// This field identifies the Stockkeeping Unit for this Power Supply.
	Sku *string `json:"Sku,omitempty"`
	// This field identifies the Vendor ID for this Power Supply Unit.
	Vid *string `json:"Vid,omitempty"`
	// This field is used to indicate the voltage state for this Power Supply.
	Voltage                *string                                     `json:"Voltage,omitempty"`
	ComputeRackUnit        NullableComputeRackUnitRelationship         `json:"ComputeRackUnit,omitempty"`
	EquipmentChassis       NullableEquipmentChassisRelationship        `json:"EquipmentChassis,omitempty"`
	EquipmentFex           NullableEquipmentFexRelationship            `json:"EquipmentFex,omitempty"`
	EquipmentRackEnclosure NullableEquipmentRackEnclosureRelationship  `json:"EquipmentRackEnclosure,omitempty"`
	InventoryDeviceInfo    NullableInventoryDeviceInfoRelationship     `json:"InventoryDeviceInfo,omitempty"`
	NetworkElement         NullableNetworkElementRelationship          `json:"NetworkElement,omitempty"`
	RegisteredDevice       NullableAssetDeviceRegistrationRelationship `json:"RegisteredDevice,omitempty"`
	AdditionalProperties   map[string]interface{}
}

type _EquipmentPsu EquipmentPsu

// NewEquipmentPsu instantiates a new EquipmentPsu object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEquipmentPsu(classId string, objectType string) *EquipmentPsu {
	this := EquipmentPsu{}
	this.ClassId = classId
	this.ObjectType = objectType
	return &this
}

// NewEquipmentPsuWithDefaults instantiates a new EquipmentPsu object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEquipmentPsuWithDefaults() *EquipmentPsu {
	this := EquipmentPsu{}
	var classId string = "equipment.Psu"
	this.ClassId = classId
	var objectType string = "equipment.Psu"
	this.ObjectType = objectType
	return &this
}

// GetClassId returns the ClassId field value
func (o *EquipmentPsu) GetClassId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ClassId
}

// GetClassIdOk returns a tuple with the ClassId field value
// and a boolean to check if the value has been set.
func (o *EquipmentPsu) GetClassIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ClassId, true
}

// SetClassId sets field value
func (o *EquipmentPsu) SetClassId(v string) {
	o.ClassId = v
}

// GetDefaultClassId returns the default value "equipment.Psu" of the ClassId field.
func (o *EquipmentPsu) GetDefaultClassId() interface{} {
	return "equipment.Psu"
}

// GetObjectType returns the ObjectType field value
func (o *EquipmentPsu) GetObjectType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ObjectType
}

// GetObjectTypeOk returns a tuple with the ObjectType field value
// and a boolean to check if the value has been set.
func (o *EquipmentPsu) GetObjectTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ObjectType, true
}

// SetObjectType sets field value
func (o *EquipmentPsu) SetObjectType(v string) {
	o.ObjectType = v
}

// GetDefaultObjectType returns the default value "equipment.Psu" of the ObjectType field.
func (o *EquipmentPsu) GetDefaultObjectType() interface{} {
	return "equipment.Psu"
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *EquipmentPsu) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EquipmentPsu) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *EquipmentPsu) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *EquipmentPsu) SetDescription(v string) {
	o.Description = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *EquipmentPsu) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EquipmentPsu) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *EquipmentPsu) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *EquipmentPsu) SetName(v string) {
	o.Name = &v
}

// GetOperReason returns the OperReason field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EquipmentPsu) GetOperReason() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.OperReason
}

// GetOperReasonOk returns a tuple with the OperReason field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EquipmentPsu) GetOperReasonOk() ([]string, bool) {
	if o == nil || IsNil(o.OperReason) {
		return nil, false
	}
	return o.OperReason, true
}

// HasOperReason returns a boolean if a field has been set.
func (o *EquipmentPsu) HasOperReason() bool {
	if o != nil && !IsNil(o.OperReason) {
		return true
	}

	return false
}

// SetOperReason gets a reference to the given []string and assigns it to the OperReason field.
func (o *EquipmentPsu) SetOperReason(v []string) {
	o.OperReason = v
}

// GetOperState returns the OperState field value if set, zero value otherwise.
func (o *EquipmentPsu) GetOperState() string {
	if o == nil || IsNil(o.OperState) {
		var ret string
		return ret
	}
	return *o.OperState
}

// GetOperStateOk returns a tuple with the OperState field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EquipmentPsu) GetOperStateOk() (*string, bool) {
	if o == nil || IsNil(o.OperState) {
		return nil, false
	}
	return o.OperState, true
}

// HasOperState returns a boolean if a field has been set.
func (o *EquipmentPsu) HasOperState() bool {
	if o != nil && !IsNil(o.OperState) {
		return true
	}

	return false
}

// SetOperState gets a reference to the given string and assigns it to the OperState field.
func (o *EquipmentPsu) SetOperState(v string) {
	o.OperState = &v
}

// GetPartNumber returns the PartNumber field value if set, zero value otherwise.
func (o *EquipmentPsu) GetPartNumber() string {
	if o == nil || IsNil(o.PartNumber) {
		var ret string
		return ret
	}
	return *o.PartNumber
}

// GetPartNumberOk returns a tuple with the PartNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EquipmentPsu) GetPartNumberOk() (*string, bool) {
	if o == nil || IsNil(o.PartNumber) {
		return nil, false
	}
	return o.PartNumber, true
}

// HasPartNumber returns a boolean if a field has been set.
func (o *EquipmentPsu) HasPartNumber() bool {
	if o != nil && !IsNil(o.PartNumber) {
		return true
	}

	return false
}

// SetPartNumber gets a reference to the given string and assigns it to the PartNumber field.
func (o *EquipmentPsu) SetPartNumber(v string) {
	o.PartNumber = &v
}

// GetPid returns the Pid field value if set, zero value otherwise.
func (o *EquipmentPsu) GetPid() string {
	if o == nil || IsNil(o.Pid) {
		var ret string
		return ret
	}
	return *o.Pid
}

// GetPidOk returns a tuple with the Pid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EquipmentPsu) GetPidOk() (*string, bool) {
	if o == nil || IsNil(o.Pid) {
		return nil, false
	}
	return o.Pid, true
}

// HasPid returns a boolean if a field has been set.
func (o *EquipmentPsu) HasPid() bool {
	if o != nil && !IsNil(o.Pid) {
		return true
	}

	return false
}

// SetPid gets a reference to the given string and assigns it to the Pid field.
func (o *EquipmentPsu) SetPid(v string) {
	o.Pid = &v
}

// GetPsuFwVersion returns the PsuFwVersion field value if set, zero value otherwise.
func (o *EquipmentPsu) GetPsuFwVersion() string {
	if o == nil || IsNil(o.PsuFwVersion) {
		var ret string
		return ret
	}
	return *o.PsuFwVersion
}

// GetPsuFwVersionOk returns a tuple with the PsuFwVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EquipmentPsu) GetPsuFwVersionOk() (*string, bool) {
	if o == nil || IsNil(o.PsuFwVersion) {
		return nil, false
	}
	return o.PsuFwVersion, true
}

// HasPsuFwVersion returns a boolean if a field has been set.
func (o *EquipmentPsu) HasPsuFwVersion() bool {
	if o != nil && !IsNil(o.PsuFwVersion) {
		return true
	}

	return false
}

// SetPsuFwVersion gets a reference to the given string and assigns it to the PsuFwVersion field.
func (o *EquipmentPsu) SetPsuFwVersion(v string) {
	o.PsuFwVersion = &v
}

// GetPsuId returns the PsuId field value if set, zero value otherwise.
func (o *EquipmentPsu) GetPsuId() int64 {
	if o == nil || IsNil(o.PsuId) {
		var ret int64
		return ret
	}
	return *o.PsuId
}

// GetPsuIdOk returns a tuple with the PsuId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EquipmentPsu) GetPsuIdOk() (*int64, bool) {
	if o == nil || IsNil(o.PsuId) {
		return nil, false
	}
	return o.PsuId, true
}

// HasPsuId returns a boolean if a field has been set.
func (o *EquipmentPsu) HasPsuId() bool {
	if o != nil && !IsNil(o.PsuId) {
		return true
	}

	return false
}

// SetPsuId gets a reference to the given int64 and assigns it to the PsuId field.
func (o *EquipmentPsu) SetPsuId(v int64) {
	o.PsuId = &v
}

// GetPsuInputSrc returns the PsuInputSrc field value if set, zero value otherwise.
func (o *EquipmentPsu) GetPsuInputSrc() string {
	if o == nil || IsNil(o.PsuInputSrc) {
		var ret string
		return ret
	}
	return *o.PsuInputSrc
}

// GetPsuInputSrcOk returns a tuple with the PsuInputSrc field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EquipmentPsu) GetPsuInputSrcOk() (*string, bool) {
	if o == nil || IsNil(o.PsuInputSrc) {
		return nil, false
	}
	return o.PsuInputSrc, true
}

// HasPsuInputSrc returns a boolean if a field has been set.
func (o *EquipmentPsu) HasPsuInputSrc() bool {
	if o != nil && !IsNil(o.PsuInputSrc) {
		return true
	}

	return false
}

// SetPsuInputSrc gets a reference to the given string and assigns it to the PsuInputSrc field.
func (o *EquipmentPsu) SetPsuInputSrc(v string) {
	o.PsuInputSrc = &v
}

// GetPsuType returns the PsuType field value if set, zero value otherwise.
func (o *EquipmentPsu) GetPsuType() string {
	if o == nil || IsNil(o.PsuType) {
		var ret string
		return ret
	}
	return *o.PsuType
}

// GetPsuTypeOk returns a tuple with the PsuType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EquipmentPsu) GetPsuTypeOk() (*string, bool) {
	if o == nil || IsNil(o.PsuType) {
		return nil, false
	}
	return o.PsuType, true
}

// HasPsuType returns a boolean if a field has been set.
func (o *EquipmentPsu) HasPsuType() bool {
	if o != nil && !IsNil(o.PsuType) {
		return true
	}

	return false
}

// SetPsuType gets a reference to the given string and assigns it to the PsuType field.
func (o *EquipmentPsu) SetPsuType(v string) {
	o.PsuType = &v
}

// GetPsuWattage returns the PsuWattage field value if set, zero value otherwise.
func (o *EquipmentPsu) GetPsuWattage() string {
	if o == nil || IsNil(o.PsuWattage) {
		var ret string
		return ret
	}
	return *o.PsuWattage
}

// GetPsuWattageOk returns a tuple with the PsuWattage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EquipmentPsu) GetPsuWattageOk() (*string, bool) {
	if o == nil || IsNil(o.PsuWattage) {
		return nil, false
	}
	return o.PsuWattage, true
}

// HasPsuWattage returns a boolean if a field has been set.
func (o *EquipmentPsu) HasPsuWattage() bool {
	if o != nil && !IsNil(o.PsuWattage) {
		return true
	}

	return false
}

// SetPsuWattage gets a reference to the given string and assigns it to the PsuWattage field.
func (o *EquipmentPsu) SetPsuWattage(v string) {
	o.PsuWattage = &v
}

// GetSku returns the Sku field value if set, zero value otherwise.
func (o *EquipmentPsu) GetSku() string {
	if o == nil || IsNil(o.Sku) {
		var ret string
		return ret
	}
	return *o.Sku
}

// GetSkuOk returns a tuple with the Sku field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EquipmentPsu) GetSkuOk() (*string, bool) {
	if o == nil || IsNil(o.Sku) {
		return nil, false
	}
	return o.Sku, true
}

// HasSku returns a boolean if a field has been set.
func (o *EquipmentPsu) HasSku() bool {
	if o != nil && !IsNil(o.Sku) {
		return true
	}

	return false
}

// SetSku gets a reference to the given string and assigns it to the Sku field.
func (o *EquipmentPsu) SetSku(v string) {
	o.Sku = &v
}

// GetVid returns the Vid field value if set, zero value otherwise.
func (o *EquipmentPsu) GetVid() string {
	if o == nil || IsNil(o.Vid) {
		var ret string
		return ret
	}
	return *o.Vid
}

// GetVidOk returns a tuple with the Vid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EquipmentPsu) GetVidOk() (*string, bool) {
	if o == nil || IsNil(o.Vid) {
		return nil, false
	}
	return o.Vid, true
}

// HasVid returns a boolean if a field has been set.
func (o *EquipmentPsu) HasVid() bool {
	if o != nil && !IsNil(o.Vid) {
		return true
	}

	return false
}

// SetVid gets a reference to the given string and assigns it to the Vid field.
func (o *EquipmentPsu) SetVid(v string) {
	o.Vid = &v
}

// GetVoltage returns the Voltage field value if set, zero value otherwise.
func (o *EquipmentPsu) GetVoltage() string {
	if o == nil || IsNil(o.Voltage) {
		var ret string
		return ret
	}
	return *o.Voltage
}

// GetVoltageOk returns a tuple with the Voltage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EquipmentPsu) GetVoltageOk() (*string, bool) {
	if o == nil || IsNil(o.Voltage) {
		return nil, false
	}
	return o.Voltage, true
}

// HasVoltage returns a boolean if a field has been set.
func (o *EquipmentPsu) HasVoltage() bool {
	if o != nil && !IsNil(o.Voltage) {
		return true
	}

	return false
}

// SetVoltage gets a reference to the given string and assigns it to the Voltage field.
func (o *EquipmentPsu) SetVoltage(v string) {
	o.Voltage = &v
}

// GetComputeRackUnit returns the ComputeRackUnit field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EquipmentPsu) GetComputeRackUnit() ComputeRackUnitRelationship {
	if o == nil || IsNil(o.ComputeRackUnit.Get()) {
		var ret ComputeRackUnitRelationship
		return ret
	}
	return *o.ComputeRackUnit.Get()
}

// GetComputeRackUnitOk returns a tuple with the ComputeRackUnit field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EquipmentPsu) GetComputeRackUnitOk() (*ComputeRackUnitRelationship, bool) {
	if o == nil {
		return nil, false
	}
	return o.ComputeRackUnit.Get(), o.ComputeRackUnit.IsSet()
}

// HasComputeRackUnit returns a boolean if a field has been set.
func (o *EquipmentPsu) HasComputeRackUnit() bool {
	if o != nil && o.ComputeRackUnit.IsSet() {
		return true
	}

	return false
}

// SetComputeRackUnit gets a reference to the given NullableComputeRackUnitRelationship and assigns it to the ComputeRackUnit field.
func (o *EquipmentPsu) SetComputeRackUnit(v ComputeRackUnitRelationship) {
	o.ComputeRackUnit.Set(&v)
}

// SetComputeRackUnitNil sets the value for ComputeRackUnit to be an explicit nil
func (o *EquipmentPsu) SetComputeRackUnitNil() {
	o.ComputeRackUnit.Set(nil)
}

// UnsetComputeRackUnit ensures that no value is present for ComputeRackUnit, not even an explicit nil
func (o *EquipmentPsu) UnsetComputeRackUnit() {
	o.ComputeRackUnit.Unset()
}

// GetEquipmentChassis returns the EquipmentChassis field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EquipmentPsu) GetEquipmentChassis() EquipmentChassisRelationship {
	if o == nil || IsNil(o.EquipmentChassis.Get()) {
		var ret EquipmentChassisRelationship
		return ret
	}
	return *o.EquipmentChassis.Get()
}

// GetEquipmentChassisOk returns a tuple with the EquipmentChassis field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EquipmentPsu) GetEquipmentChassisOk() (*EquipmentChassisRelationship, bool) {
	if o == nil {
		return nil, false
	}
	return o.EquipmentChassis.Get(), o.EquipmentChassis.IsSet()
}

// HasEquipmentChassis returns a boolean if a field has been set.
func (o *EquipmentPsu) HasEquipmentChassis() bool {
	if o != nil && o.EquipmentChassis.IsSet() {
		return true
	}

	return false
}

// SetEquipmentChassis gets a reference to the given NullableEquipmentChassisRelationship and assigns it to the EquipmentChassis field.
func (o *EquipmentPsu) SetEquipmentChassis(v EquipmentChassisRelationship) {
	o.EquipmentChassis.Set(&v)
}

// SetEquipmentChassisNil sets the value for EquipmentChassis to be an explicit nil
func (o *EquipmentPsu) SetEquipmentChassisNil() {
	o.EquipmentChassis.Set(nil)
}

// UnsetEquipmentChassis ensures that no value is present for EquipmentChassis, not even an explicit nil
func (o *EquipmentPsu) UnsetEquipmentChassis() {
	o.EquipmentChassis.Unset()
}

// GetEquipmentFex returns the EquipmentFex field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EquipmentPsu) GetEquipmentFex() EquipmentFexRelationship {
	if o == nil || IsNil(o.EquipmentFex.Get()) {
		var ret EquipmentFexRelationship
		return ret
	}
	return *o.EquipmentFex.Get()
}

// GetEquipmentFexOk returns a tuple with the EquipmentFex field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EquipmentPsu) GetEquipmentFexOk() (*EquipmentFexRelationship, bool) {
	if o == nil {
		return nil, false
	}
	return o.EquipmentFex.Get(), o.EquipmentFex.IsSet()
}

// HasEquipmentFex returns a boolean if a field has been set.
func (o *EquipmentPsu) HasEquipmentFex() bool {
	if o != nil && o.EquipmentFex.IsSet() {
		return true
	}

	return false
}

// SetEquipmentFex gets a reference to the given NullableEquipmentFexRelationship and assigns it to the EquipmentFex field.
func (o *EquipmentPsu) SetEquipmentFex(v EquipmentFexRelationship) {
	o.EquipmentFex.Set(&v)
}

// SetEquipmentFexNil sets the value for EquipmentFex to be an explicit nil
func (o *EquipmentPsu) SetEquipmentFexNil() {
	o.EquipmentFex.Set(nil)
}

// UnsetEquipmentFex ensures that no value is present for EquipmentFex, not even an explicit nil
func (o *EquipmentPsu) UnsetEquipmentFex() {
	o.EquipmentFex.Unset()
}

// GetEquipmentRackEnclosure returns the EquipmentRackEnclosure field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EquipmentPsu) GetEquipmentRackEnclosure() EquipmentRackEnclosureRelationship {
	if o == nil || IsNil(o.EquipmentRackEnclosure.Get()) {
		var ret EquipmentRackEnclosureRelationship
		return ret
	}
	return *o.EquipmentRackEnclosure.Get()
}

// GetEquipmentRackEnclosureOk returns a tuple with the EquipmentRackEnclosure field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EquipmentPsu) GetEquipmentRackEnclosureOk() (*EquipmentRackEnclosureRelationship, bool) {
	if o == nil {
		return nil, false
	}
	return o.EquipmentRackEnclosure.Get(), o.EquipmentRackEnclosure.IsSet()
}

// HasEquipmentRackEnclosure returns a boolean if a field has been set.
func (o *EquipmentPsu) HasEquipmentRackEnclosure() bool {
	if o != nil && o.EquipmentRackEnclosure.IsSet() {
		return true
	}

	return false
}

// SetEquipmentRackEnclosure gets a reference to the given NullableEquipmentRackEnclosureRelationship and assigns it to the EquipmentRackEnclosure field.
func (o *EquipmentPsu) SetEquipmentRackEnclosure(v EquipmentRackEnclosureRelationship) {
	o.EquipmentRackEnclosure.Set(&v)
}

// SetEquipmentRackEnclosureNil sets the value for EquipmentRackEnclosure to be an explicit nil
func (o *EquipmentPsu) SetEquipmentRackEnclosureNil() {
	o.EquipmentRackEnclosure.Set(nil)
}

// UnsetEquipmentRackEnclosure ensures that no value is present for EquipmentRackEnclosure, not even an explicit nil
func (o *EquipmentPsu) UnsetEquipmentRackEnclosure() {
	o.EquipmentRackEnclosure.Unset()
}

// GetInventoryDeviceInfo returns the InventoryDeviceInfo field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EquipmentPsu) GetInventoryDeviceInfo() InventoryDeviceInfoRelationship {
	if o == nil || IsNil(o.InventoryDeviceInfo.Get()) {
		var ret InventoryDeviceInfoRelationship
		return ret
	}
	return *o.InventoryDeviceInfo.Get()
}

// GetInventoryDeviceInfoOk returns a tuple with the InventoryDeviceInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EquipmentPsu) GetInventoryDeviceInfoOk() (*InventoryDeviceInfoRelationship, bool) {
	if o == nil {
		return nil, false
	}
	return o.InventoryDeviceInfo.Get(), o.InventoryDeviceInfo.IsSet()
}

// HasInventoryDeviceInfo returns a boolean if a field has been set.
func (o *EquipmentPsu) HasInventoryDeviceInfo() bool {
	if o != nil && o.InventoryDeviceInfo.IsSet() {
		return true
	}

	return false
}

// SetInventoryDeviceInfo gets a reference to the given NullableInventoryDeviceInfoRelationship and assigns it to the InventoryDeviceInfo field.
func (o *EquipmentPsu) SetInventoryDeviceInfo(v InventoryDeviceInfoRelationship) {
	o.InventoryDeviceInfo.Set(&v)
}

// SetInventoryDeviceInfoNil sets the value for InventoryDeviceInfo to be an explicit nil
func (o *EquipmentPsu) SetInventoryDeviceInfoNil() {
	o.InventoryDeviceInfo.Set(nil)
}

// UnsetInventoryDeviceInfo ensures that no value is present for InventoryDeviceInfo, not even an explicit nil
func (o *EquipmentPsu) UnsetInventoryDeviceInfo() {
	o.InventoryDeviceInfo.Unset()
}

// GetNetworkElement returns the NetworkElement field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EquipmentPsu) GetNetworkElement() NetworkElementRelationship {
	if o == nil || IsNil(o.NetworkElement.Get()) {
		var ret NetworkElementRelationship
		return ret
	}
	return *o.NetworkElement.Get()
}

// GetNetworkElementOk returns a tuple with the NetworkElement field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EquipmentPsu) GetNetworkElementOk() (*NetworkElementRelationship, bool) {
	if o == nil {
		return nil, false
	}
	return o.NetworkElement.Get(), o.NetworkElement.IsSet()
}

// HasNetworkElement returns a boolean if a field has been set.
func (o *EquipmentPsu) HasNetworkElement() bool {
	if o != nil && o.NetworkElement.IsSet() {
		return true
	}

	return false
}

// SetNetworkElement gets a reference to the given NullableNetworkElementRelationship and assigns it to the NetworkElement field.
func (o *EquipmentPsu) SetNetworkElement(v NetworkElementRelationship) {
	o.NetworkElement.Set(&v)
}

// SetNetworkElementNil sets the value for NetworkElement to be an explicit nil
func (o *EquipmentPsu) SetNetworkElementNil() {
	o.NetworkElement.Set(nil)
}

// UnsetNetworkElement ensures that no value is present for NetworkElement, not even an explicit nil
func (o *EquipmentPsu) UnsetNetworkElement() {
	o.NetworkElement.Unset()
}

// GetRegisteredDevice returns the RegisteredDevice field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EquipmentPsu) GetRegisteredDevice() AssetDeviceRegistrationRelationship {
	if o == nil || IsNil(o.RegisteredDevice.Get()) {
		var ret AssetDeviceRegistrationRelationship
		return ret
	}
	return *o.RegisteredDevice.Get()
}

// GetRegisteredDeviceOk returns a tuple with the RegisteredDevice field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EquipmentPsu) GetRegisteredDeviceOk() (*AssetDeviceRegistrationRelationship, bool) {
	if o == nil {
		return nil, false
	}
	return o.RegisteredDevice.Get(), o.RegisteredDevice.IsSet()
}

// HasRegisteredDevice returns a boolean if a field has been set.
func (o *EquipmentPsu) HasRegisteredDevice() bool {
	if o != nil && o.RegisteredDevice.IsSet() {
		return true
	}

	return false
}

// SetRegisteredDevice gets a reference to the given NullableAssetDeviceRegistrationRelationship and assigns it to the RegisteredDevice field.
func (o *EquipmentPsu) SetRegisteredDevice(v AssetDeviceRegistrationRelationship) {
	o.RegisteredDevice.Set(&v)
}

// SetRegisteredDeviceNil sets the value for RegisteredDevice to be an explicit nil
func (o *EquipmentPsu) SetRegisteredDeviceNil() {
	o.RegisteredDevice.Set(nil)
}

// UnsetRegisteredDevice ensures that no value is present for RegisteredDevice, not even an explicit nil
func (o *EquipmentPsu) UnsetRegisteredDevice() {
	o.RegisteredDevice.Unset()
}

func (o EquipmentPsu) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EquipmentPsu) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	serializedEquipmentBase, errEquipmentBase := json.Marshal(o.EquipmentBase)
	if errEquipmentBase != nil {
		return map[string]interface{}{}, errEquipmentBase
	}
	errEquipmentBase = json.Unmarshal([]byte(serializedEquipmentBase), &toSerialize)
	if errEquipmentBase != nil {
		return map[string]interface{}{}, errEquipmentBase
	}
	if _, exists := toSerialize["ClassId"]; !exists {
		toSerialize["ClassId"] = o.GetDefaultClassId()
	}
	toSerialize["ClassId"] = o.ClassId
	if _, exists := toSerialize["ObjectType"]; !exists {
		toSerialize["ObjectType"] = o.GetDefaultObjectType()
	}
	toSerialize["ObjectType"] = o.ObjectType
	if !IsNil(o.Description) {
		toSerialize["Description"] = o.Description
	}
	if !IsNil(o.Name) {
		toSerialize["Name"] = o.Name
	}
	if o.OperReason != nil {
		toSerialize["OperReason"] = o.OperReason
	}
	if !IsNil(o.OperState) {
		toSerialize["OperState"] = o.OperState
	}
	if !IsNil(o.PartNumber) {
		toSerialize["PartNumber"] = o.PartNumber
	}
	if !IsNil(o.Pid) {
		toSerialize["Pid"] = o.Pid
	}
	if !IsNil(o.PsuFwVersion) {
		toSerialize["PsuFwVersion"] = o.PsuFwVersion
	}
	if !IsNil(o.PsuId) {
		toSerialize["PsuId"] = o.PsuId
	}
	if !IsNil(o.PsuInputSrc) {
		toSerialize["PsuInputSrc"] = o.PsuInputSrc
	}
	if !IsNil(o.PsuType) {
		toSerialize["PsuType"] = o.PsuType
	}
	if !IsNil(o.PsuWattage) {
		toSerialize["PsuWattage"] = o.PsuWattage
	}
	if !IsNil(o.Sku) {
		toSerialize["Sku"] = o.Sku
	}
	if !IsNil(o.Vid) {
		toSerialize["Vid"] = o.Vid
	}
	if !IsNil(o.Voltage) {
		toSerialize["Voltage"] = o.Voltage
	}
	if o.ComputeRackUnit.IsSet() {
		toSerialize["ComputeRackUnit"] = o.ComputeRackUnit.Get()
	}
	if o.EquipmentChassis.IsSet() {
		toSerialize["EquipmentChassis"] = o.EquipmentChassis.Get()
	}
	if o.EquipmentFex.IsSet() {
		toSerialize["EquipmentFex"] = o.EquipmentFex.Get()
	}
	if o.EquipmentRackEnclosure.IsSet() {
		toSerialize["EquipmentRackEnclosure"] = o.EquipmentRackEnclosure.Get()
	}
	if o.InventoryDeviceInfo.IsSet() {
		toSerialize["InventoryDeviceInfo"] = o.InventoryDeviceInfo.Get()
	}
	if o.NetworkElement.IsSet() {
		toSerialize["NetworkElement"] = o.NetworkElement.Get()
	}
	if o.RegisteredDevice.IsSet() {
		toSerialize["RegisteredDevice"] = o.RegisteredDevice.Get()
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *EquipmentPsu) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"ClassId",
		"ObjectType",
	}

	// defaultValueFuncMap captures the default values for required properties.
	// These values are used when required properties are missing from the payload.
	defaultValueFuncMap := map[string]func() interface{}{
		"ClassId":    o.GetDefaultClassId,
		"ObjectType": o.GetDefaultObjectType,
	}
	var defaultValueApplied bool
	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			if _, ok := defaultValueFuncMap[requiredProperty]; ok {
				allProperties[requiredProperty] = defaultValueFuncMap[requiredProperty]()
				defaultValueApplied = true
			}
		}
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	if defaultValueApplied {
		data, err = json.Marshal(allProperties)
		if err != nil {
			return err
		}
	}
	type EquipmentPsuWithoutEmbeddedStruct struct {
		// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.
		ClassId string `json:"ClassId"`
		// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
		ObjectType string `json:"ObjectType"`
		// This field is to provide description for the power supply unit.
		Description *string `json:"Description,omitempty"`
		// This field is to provide name for the power supply unit.
		Name       *string  `json:"Name,omitempty"`
		OperReason []string `json:"OperReason,omitempty"`
		// This field identifies the psu operational state.
		OperState *string `json:"OperState,omitempty"`
		// This field identifies the Part Number for this Power Supply Unit.
		PartNumber *string `json:"PartNumber,omitempty"`
		// This field identifies the Product ID for the Power Supply.
		Pid *string `json:"Pid,omitempty"`
		// This field identifies the Firmware Version of the Power Supply.
		PsuFwVersion *string `json:"PsuFwVersion,omitempty"`
		// This represents power supply unit identifier in chassis/server.
		PsuId *int64 `json:"PsuId,omitempty"`
		// This field identifies the input source for the Power Supply.
		PsuInputSrc *string `json:"PsuInputSrc,omitempty"`
		// This field identifies the type of the Power Supply.
		PsuType *string `json:"PsuType,omitempty"`
		// This field identifies the Wattage of the Power Supply.
		PsuWattage *string `json:"PsuWattage,omitempty"`
		// This field identifies the Stockkeeping Unit for this Power Supply.
		Sku *string `json:"Sku,omitempty"`
		// This field identifies the Vendor ID for this Power Supply Unit.
		Vid *string `json:"Vid,omitempty"`
		// This field is used to indicate the voltage state for this Power Supply.
		Voltage                *string                                     `json:"Voltage,omitempty"`
		ComputeRackUnit        NullableComputeRackUnitRelationship         `json:"ComputeRackUnit,omitempty"`
		EquipmentChassis       NullableEquipmentChassisRelationship        `json:"EquipmentChassis,omitempty"`
		EquipmentFex           NullableEquipmentFexRelationship            `json:"EquipmentFex,omitempty"`
		EquipmentRackEnclosure NullableEquipmentRackEnclosureRelationship  `json:"EquipmentRackEnclosure,omitempty"`
		InventoryDeviceInfo    NullableInventoryDeviceInfoRelationship     `json:"InventoryDeviceInfo,omitempty"`
		NetworkElement         NullableNetworkElementRelationship          `json:"NetworkElement,omitempty"`
		RegisteredDevice       NullableAssetDeviceRegistrationRelationship `json:"RegisteredDevice,omitempty"`
	}

	varEquipmentPsuWithoutEmbeddedStruct := EquipmentPsuWithoutEmbeddedStruct{}

	err = json.Unmarshal(data, &varEquipmentPsuWithoutEmbeddedStruct)
	if err == nil {
		varEquipmentPsu := _EquipmentPsu{}
		varEquipmentPsu.ClassId = varEquipmentPsuWithoutEmbeddedStruct.ClassId
		varEquipmentPsu.ObjectType = varEquipmentPsuWithoutEmbeddedStruct.ObjectType
		varEquipmentPsu.Description = varEquipmentPsuWithoutEmbeddedStruct.Description
		varEquipmentPsu.Name = varEquipmentPsuWithoutEmbeddedStruct.Name
		varEquipmentPsu.OperReason = varEquipmentPsuWithoutEmbeddedStruct.OperReason
		varEquipmentPsu.OperState = varEquipmentPsuWithoutEmbeddedStruct.OperState
		varEquipmentPsu.PartNumber = varEquipmentPsuWithoutEmbeddedStruct.PartNumber
		varEquipmentPsu.Pid = varEquipmentPsuWithoutEmbeddedStruct.Pid
		varEquipmentPsu.PsuFwVersion = varEquipmentPsuWithoutEmbeddedStruct.PsuFwVersion
		varEquipmentPsu.PsuId = varEquipmentPsuWithoutEmbeddedStruct.PsuId
		varEquipmentPsu.PsuInputSrc = varEquipmentPsuWithoutEmbeddedStruct.PsuInputSrc
		varEquipmentPsu.PsuType = varEquipmentPsuWithoutEmbeddedStruct.PsuType
		varEquipmentPsu.PsuWattage = varEquipmentPsuWithoutEmbeddedStruct.PsuWattage
		varEquipmentPsu.Sku = varEquipmentPsuWithoutEmbeddedStruct.Sku
		varEquipmentPsu.Vid = varEquipmentPsuWithoutEmbeddedStruct.Vid
		varEquipmentPsu.Voltage = varEquipmentPsuWithoutEmbeddedStruct.Voltage
		varEquipmentPsu.ComputeRackUnit = varEquipmentPsuWithoutEmbeddedStruct.ComputeRackUnit
		varEquipmentPsu.EquipmentChassis = varEquipmentPsuWithoutEmbeddedStruct.EquipmentChassis
		varEquipmentPsu.EquipmentFex = varEquipmentPsuWithoutEmbeddedStruct.EquipmentFex
		varEquipmentPsu.EquipmentRackEnclosure = varEquipmentPsuWithoutEmbeddedStruct.EquipmentRackEnclosure
		varEquipmentPsu.InventoryDeviceInfo = varEquipmentPsuWithoutEmbeddedStruct.InventoryDeviceInfo
		varEquipmentPsu.NetworkElement = varEquipmentPsuWithoutEmbeddedStruct.NetworkElement
		varEquipmentPsu.RegisteredDevice = varEquipmentPsuWithoutEmbeddedStruct.RegisteredDevice
		*o = EquipmentPsu(varEquipmentPsu)
	} else {
		return err
	}

	varEquipmentPsu := _EquipmentPsu{}

	err = json.Unmarshal(data, &varEquipmentPsu)
	if err == nil {
		o.EquipmentBase = varEquipmentPsu.EquipmentBase
	} else {
		return err
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "ClassId")
		delete(additionalProperties, "ObjectType")
		delete(additionalProperties, "Description")
		delete(additionalProperties, "Name")
		delete(additionalProperties, "OperReason")
		delete(additionalProperties, "OperState")
		delete(additionalProperties, "PartNumber")
		delete(additionalProperties, "Pid")
		delete(additionalProperties, "PsuFwVersion")
		delete(additionalProperties, "PsuId")
		delete(additionalProperties, "PsuInputSrc")
		delete(additionalProperties, "PsuType")
		delete(additionalProperties, "PsuWattage")
		delete(additionalProperties, "Sku")
		delete(additionalProperties, "Vid")
		delete(additionalProperties, "Voltage")
		delete(additionalProperties, "ComputeRackUnit")
		delete(additionalProperties, "EquipmentChassis")
		delete(additionalProperties, "EquipmentFex")
		delete(additionalProperties, "EquipmentRackEnclosure")
		delete(additionalProperties, "InventoryDeviceInfo")
		delete(additionalProperties, "NetworkElement")
		delete(additionalProperties, "RegisteredDevice")

		// remove fields from embedded structs
		reflectEquipmentBase := reflect.ValueOf(o.EquipmentBase)
		for i := 0; i < reflectEquipmentBase.Type().NumField(); i++ {
			t := reflectEquipmentBase.Type().Field(i)

			if jsonTag := t.Tag.Get("json"); jsonTag != "" {
				fieldName := ""
				if commaIdx := strings.Index(jsonTag, ","); commaIdx > 0 {
					fieldName = jsonTag[:commaIdx]
				} else {
					fieldName = jsonTag
				}
				if fieldName != "AdditionalProperties" {
					delete(additionalProperties, fieldName)
				}
			}
		}

		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableEquipmentPsu struct {
	value *EquipmentPsu
	isSet bool
}

func (v NullableEquipmentPsu) Get() *EquipmentPsu {
	return v.value
}

func (v *NullableEquipmentPsu) Set(val *EquipmentPsu) {
	v.value = val
	v.isSet = true
}

func (v NullableEquipmentPsu) IsSet() bool {
	return v.isSet
}

func (v *NullableEquipmentPsu) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEquipmentPsu(val *EquipmentPsu) *NullableEquipmentPsu {
	return &NullableEquipmentPsu{value: val, isSet: true}
}

func (v NullableEquipmentPsu) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEquipmentPsu) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
