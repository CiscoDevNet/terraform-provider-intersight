/*
Cisco Intersight

Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations. The Intersight OpenAPI document defines the complete set of properties that are returned in the HTTP response. From that perspective, a client can expect that no additional properties are returned, unless these properties are explicitly defined in the OpenAPI document. However, when a client uses an older version of the Intersight OpenAPI document, the server may send additional properties because the software is more recent than the client. In that case, the client may receive properties that it does not know about. Some generated SDKs perform a strict validation of the HTTP response body against the OpenAPI document.

API version: 1.0.11-2025101412
Contact: intersight@cisco.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package intersight

import (
	"encoding/json"
	"fmt"
	"reflect"
	"strings"
)

// checks if the PciEndpoint type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PciEndpoint{}

// PciEndpoint PCIe endpoints that are connected to a PCIe switch.
type PciEndpoint struct {
	InventoryBase
	// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.
	ClassId string `json:"ClassId"`
	// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
	ObjectType string `json:"ObjectType"`
	// The identifier of the enclosure device of the actual physical device to which the logical PCIe endpoint is pointing to.
	DeviceEnclosureId *int64 `json:"DeviceEnclosureId,omitempty"`
	// The identifier of the actual physical device to which the logical PCIe endpoint is pointing to.
	DeviceId *int64 `json:"DeviceId,omitempty"`
	// The type of the actual physical device to which the logical PCIe endpoint is pointing to. * `Unknown` - The device type of the physical device is unknown. * `NetworkAdapter` - The device type of the physical device is a NIC adapter. * `CPU` - The device type of the physical device is CPU. * `GPU` - The device type of the physical device is GPU.
	DeviceType *string `json:"DeviceType,omitempty"`
	// The identifier of the PCIe endpoint within a X-Fabric module PCIe switch.
	EndpointId *string `json:"EndpointId,omitempty"`
	// The name of the PCIe endpoint, as reported by the XFM platform software (BMC).
	Name       *string  `json:"Name,omitempty"`
	OperReason []string `json:"OperReason,omitempty"`
	// Operational state of the PCIe endpoint.
	OperState *string `json:"OperState,omitempty"`
	// The unique identifier of the PCIe endpoint as reported by the chassis expander management controller.
	Uri                  *string                                         `json:"Uri,omitempty"`
	InventoryDeviceInfo  NullableInventoryDeviceInfoRelationship         `json:"InventoryDeviceInfo,omitempty"`
	PciSwitch            NullablePciSwitchRelationship                   `json:"PciSwitch,omitempty"`
	PciSwitchPort        NullablePciPortRelationship                     `json:"PciSwitchPort,omitempty"`
	PciZone              NullablePciZoneRelationship                     `json:"PciZone,omitempty"`
	ProcessorUnit        NullableProcessorUnitRelationship               `json:"ProcessorUnit,omitempty"`
	RegisteredDevice     NullableAssetDeviceRegistrationRelationship     `json:"RegisteredDevice,omitempty"`
	SharedAdapterUnit    NullableEquipmentSharedAdapterUnitRelationship  `json:"SharedAdapterUnit,omitempty"`
	SharedGraphicsCard   NullableEquipmentSharedGraphicsCardRelationship `json:"SharedGraphicsCard,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _PciEndpoint PciEndpoint

// NewPciEndpoint instantiates a new PciEndpoint object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPciEndpoint(classId string, objectType string) *PciEndpoint {
	this := PciEndpoint{}
	this.ClassId = classId
	this.ObjectType = objectType
	return &this
}

// NewPciEndpointWithDefaults instantiates a new PciEndpoint object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPciEndpointWithDefaults() *PciEndpoint {
	this := PciEndpoint{}
	var classId string = "pci.Endpoint"
	this.ClassId = classId
	var objectType string = "pci.Endpoint"
	this.ObjectType = objectType
	return &this
}

// GetClassId returns the ClassId field value
func (o *PciEndpoint) GetClassId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ClassId
}

// GetClassIdOk returns a tuple with the ClassId field value
// and a boolean to check if the value has been set.
func (o *PciEndpoint) GetClassIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ClassId, true
}

// SetClassId sets field value
func (o *PciEndpoint) SetClassId(v string) {
	o.ClassId = v
}

// GetDefaultClassId returns the default value "pci.Endpoint" of the ClassId field.
func (o *PciEndpoint) GetDefaultClassId() interface{} {
	return "pci.Endpoint"
}

// GetObjectType returns the ObjectType field value
func (o *PciEndpoint) GetObjectType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ObjectType
}

// GetObjectTypeOk returns a tuple with the ObjectType field value
// and a boolean to check if the value has been set.
func (o *PciEndpoint) GetObjectTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ObjectType, true
}

// SetObjectType sets field value
func (o *PciEndpoint) SetObjectType(v string) {
	o.ObjectType = v
}

// GetDefaultObjectType returns the default value "pci.Endpoint" of the ObjectType field.
func (o *PciEndpoint) GetDefaultObjectType() interface{} {
	return "pci.Endpoint"
}

// GetDeviceEnclosureId returns the DeviceEnclosureId field value if set, zero value otherwise.
func (o *PciEndpoint) GetDeviceEnclosureId() int64 {
	if o == nil || IsNil(o.DeviceEnclosureId) {
		var ret int64
		return ret
	}
	return *o.DeviceEnclosureId
}

// GetDeviceEnclosureIdOk returns a tuple with the DeviceEnclosureId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PciEndpoint) GetDeviceEnclosureIdOk() (*int64, bool) {
	if o == nil || IsNil(o.DeviceEnclosureId) {
		return nil, false
	}
	return o.DeviceEnclosureId, true
}

// HasDeviceEnclosureId returns a boolean if a field has been set.
func (o *PciEndpoint) HasDeviceEnclosureId() bool {
	if o != nil && !IsNil(o.DeviceEnclosureId) {
		return true
	}

	return false
}

// SetDeviceEnclosureId gets a reference to the given int64 and assigns it to the DeviceEnclosureId field.
func (o *PciEndpoint) SetDeviceEnclosureId(v int64) {
	o.DeviceEnclosureId = &v
}

// GetDeviceId returns the DeviceId field value if set, zero value otherwise.
func (o *PciEndpoint) GetDeviceId() int64 {
	if o == nil || IsNil(o.DeviceId) {
		var ret int64
		return ret
	}
	return *o.DeviceId
}

// GetDeviceIdOk returns a tuple with the DeviceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PciEndpoint) GetDeviceIdOk() (*int64, bool) {
	if o == nil || IsNil(o.DeviceId) {
		return nil, false
	}
	return o.DeviceId, true
}

// HasDeviceId returns a boolean if a field has been set.
func (o *PciEndpoint) HasDeviceId() bool {
	if o != nil && !IsNil(o.DeviceId) {
		return true
	}

	return false
}

// SetDeviceId gets a reference to the given int64 and assigns it to the DeviceId field.
func (o *PciEndpoint) SetDeviceId(v int64) {
	o.DeviceId = &v
}

// GetDeviceType returns the DeviceType field value if set, zero value otherwise.
func (o *PciEndpoint) GetDeviceType() string {
	if o == nil || IsNil(o.DeviceType) {
		var ret string
		return ret
	}
	return *o.DeviceType
}

// GetDeviceTypeOk returns a tuple with the DeviceType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PciEndpoint) GetDeviceTypeOk() (*string, bool) {
	if o == nil || IsNil(o.DeviceType) {
		return nil, false
	}
	return o.DeviceType, true
}

// HasDeviceType returns a boolean if a field has been set.
func (o *PciEndpoint) HasDeviceType() bool {
	if o != nil && !IsNil(o.DeviceType) {
		return true
	}

	return false
}

// SetDeviceType gets a reference to the given string and assigns it to the DeviceType field.
func (o *PciEndpoint) SetDeviceType(v string) {
	o.DeviceType = &v
}

// GetEndpointId returns the EndpointId field value if set, zero value otherwise.
func (o *PciEndpoint) GetEndpointId() string {
	if o == nil || IsNil(o.EndpointId) {
		var ret string
		return ret
	}
	return *o.EndpointId
}

// GetEndpointIdOk returns a tuple with the EndpointId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PciEndpoint) GetEndpointIdOk() (*string, bool) {
	if o == nil || IsNil(o.EndpointId) {
		return nil, false
	}
	return o.EndpointId, true
}

// HasEndpointId returns a boolean if a field has been set.
func (o *PciEndpoint) HasEndpointId() bool {
	if o != nil && !IsNil(o.EndpointId) {
		return true
	}

	return false
}

// SetEndpointId gets a reference to the given string and assigns it to the EndpointId field.
func (o *PciEndpoint) SetEndpointId(v string) {
	o.EndpointId = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *PciEndpoint) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PciEndpoint) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *PciEndpoint) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *PciEndpoint) SetName(v string) {
	o.Name = &v
}

// GetOperReason returns the OperReason field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PciEndpoint) GetOperReason() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.OperReason
}

// GetOperReasonOk returns a tuple with the OperReason field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PciEndpoint) GetOperReasonOk() ([]string, bool) {
	if o == nil || IsNil(o.OperReason) {
		return nil, false
	}
	return o.OperReason, true
}

// HasOperReason returns a boolean if a field has been set.
func (o *PciEndpoint) HasOperReason() bool {
	if o != nil && !IsNil(o.OperReason) {
		return true
	}

	return false
}

// SetOperReason gets a reference to the given []string and assigns it to the OperReason field.
func (o *PciEndpoint) SetOperReason(v []string) {
	o.OperReason = v
}

// GetOperState returns the OperState field value if set, zero value otherwise.
func (o *PciEndpoint) GetOperState() string {
	if o == nil || IsNil(o.OperState) {
		var ret string
		return ret
	}
	return *o.OperState
}

// GetOperStateOk returns a tuple with the OperState field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PciEndpoint) GetOperStateOk() (*string, bool) {
	if o == nil || IsNil(o.OperState) {
		return nil, false
	}
	return o.OperState, true
}

// HasOperState returns a boolean if a field has been set.
func (o *PciEndpoint) HasOperState() bool {
	if o != nil && !IsNil(o.OperState) {
		return true
	}

	return false
}

// SetOperState gets a reference to the given string and assigns it to the OperState field.
func (o *PciEndpoint) SetOperState(v string) {
	o.OperState = &v
}

// GetUri returns the Uri field value if set, zero value otherwise.
func (o *PciEndpoint) GetUri() string {
	if o == nil || IsNil(o.Uri) {
		var ret string
		return ret
	}
	return *o.Uri
}

// GetUriOk returns a tuple with the Uri field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PciEndpoint) GetUriOk() (*string, bool) {
	if o == nil || IsNil(o.Uri) {
		return nil, false
	}
	return o.Uri, true
}

// HasUri returns a boolean if a field has been set.
func (o *PciEndpoint) HasUri() bool {
	if o != nil && !IsNil(o.Uri) {
		return true
	}

	return false
}

// SetUri gets a reference to the given string and assigns it to the Uri field.
func (o *PciEndpoint) SetUri(v string) {
	o.Uri = &v
}

// GetInventoryDeviceInfo returns the InventoryDeviceInfo field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PciEndpoint) GetInventoryDeviceInfo() InventoryDeviceInfoRelationship {
	if o == nil || IsNil(o.InventoryDeviceInfo.Get()) {
		var ret InventoryDeviceInfoRelationship
		return ret
	}
	return *o.InventoryDeviceInfo.Get()
}

// GetInventoryDeviceInfoOk returns a tuple with the InventoryDeviceInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PciEndpoint) GetInventoryDeviceInfoOk() (*InventoryDeviceInfoRelationship, bool) {
	if o == nil {
		return nil, false
	}
	return o.InventoryDeviceInfo.Get(), o.InventoryDeviceInfo.IsSet()
}

// HasInventoryDeviceInfo returns a boolean if a field has been set.
func (o *PciEndpoint) HasInventoryDeviceInfo() bool {
	if o != nil && o.InventoryDeviceInfo.IsSet() {
		return true
	}

	return false
}

// SetInventoryDeviceInfo gets a reference to the given NullableInventoryDeviceInfoRelationship and assigns it to the InventoryDeviceInfo field.
func (o *PciEndpoint) SetInventoryDeviceInfo(v InventoryDeviceInfoRelationship) {
	o.InventoryDeviceInfo.Set(&v)
}

// SetInventoryDeviceInfoNil sets the value for InventoryDeviceInfo to be an explicit nil
func (o *PciEndpoint) SetInventoryDeviceInfoNil() {
	o.InventoryDeviceInfo.Set(nil)
}

// UnsetInventoryDeviceInfo ensures that no value is present for InventoryDeviceInfo, not even an explicit nil
func (o *PciEndpoint) UnsetInventoryDeviceInfo() {
	o.InventoryDeviceInfo.Unset()
}

// GetPciSwitch returns the PciSwitch field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PciEndpoint) GetPciSwitch() PciSwitchRelationship {
	if o == nil || IsNil(o.PciSwitch.Get()) {
		var ret PciSwitchRelationship
		return ret
	}
	return *o.PciSwitch.Get()
}

// GetPciSwitchOk returns a tuple with the PciSwitch field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PciEndpoint) GetPciSwitchOk() (*PciSwitchRelationship, bool) {
	if o == nil {
		return nil, false
	}
	return o.PciSwitch.Get(), o.PciSwitch.IsSet()
}

// HasPciSwitch returns a boolean if a field has been set.
func (o *PciEndpoint) HasPciSwitch() bool {
	if o != nil && o.PciSwitch.IsSet() {
		return true
	}

	return false
}

// SetPciSwitch gets a reference to the given NullablePciSwitchRelationship and assigns it to the PciSwitch field.
func (o *PciEndpoint) SetPciSwitch(v PciSwitchRelationship) {
	o.PciSwitch.Set(&v)
}

// SetPciSwitchNil sets the value for PciSwitch to be an explicit nil
func (o *PciEndpoint) SetPciSwitchNil() {
	o.PciSwitch.Set(nil)
}

// UnsetPciSwitch ensures that no value is present for PciSwitch, not even an explicit nil
func (o *PciEndpoint) UnsetPciSwitch() {
	o.PciSwitch.Unset()
}

// GetPciSwitchPort returns the PciSwitchPort field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PciEndpoint) GetPciSwitchPort() PciPortRelationship {
	if o == nil || IsNil(o.PciSwitchPort.Get()) {
		var ret PciPortRelationship
		return ret
	}
	return *o.PciSwitchPort.Get()
}

// GetPciSwitchPortOk returns a tuple with the PciSwitchPort field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PciEndpoint) GetPciSwitchPortOk() (*PciPortRelationship, bool) {
	if o == nil {
		return nil, false
	}
	return o.PciSwitchPort.Get(), o.PciSwitchPort.IsSet()
}

// HasPciSwitchPort returns a boolean if a field has been set.
func (o *PciEndpoint) HasPciSwitchPort() bool {
	if o != nil && o.PciSwitchPort.IsSet() {
		return true
	}

	return false
}

// SetPciSwitchPort gets a reference to the given NullablePciPortRelationship and assigns it to the PciSwitchPort field.
func (o *PciEndpoint) SetPciSwitchPort(v PciPortRelationship) {
	o.PciSwitchPort.Set(&v)
}

// SetPciSwitchPortNil sets the value for PciSwitchPort to be an explicit nil
func (o *PciEndpoint) SetPciSwitchPortNil() {
	o.PciSwitchPort.Set(nil)
}

// UnsetPciSwitchPort ensures that no value is present for PciSwitchPort, not even an explicit nil
func (o *PciEndpoint) UnsetPciSwitchPort() {
	o.PciSwitchPort.Unset()
}

// GetPciZone returns the PciZone field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PciEndpoint) GetPciZone() PciZoneRelationship {
	if o == nil || IsNil(o.PciZone.Get()) {
		var ret PciZoneRelationship
		return ret
	}
	return *o.PciZone.Get()
}

// GetPciZoneOk returns a tuple with the PciZone field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PciEndpoint) GetPciZoneOk() (*PciZoneRelationship, bool) {
	if o == nil {
		return nil, false
	}
	return o.PciZone.Get(), o.PciZone.IsSet()
}

// HasPciZone returns a boolean if a field has been set.
func (o *PciEndpoint) HasPciZone() bool {
	if o != nil && o.PciZone.IsSet() {
		return true
	}

	return false
}

// SetPciZone gets a reference to the given NullablePciZoneRelationship and assigns it to the PciZone field.
func (o *PciEndpoint) SetPciZone(v PciZoneRelationship) {
	o.PciZone.Set(&v)
}

// SetPciZoneNil sets the value for PciZone to be an explicit nil
func (o *PciEndpoint) SetPciZoneNil() {
	o.PciZone.Set(nil)
}

// UnsetPciZone ensures that no value is present for PciZone, not even an explicit nil
func (o *PciEndpoint) UnsetPciZone() {
	o.PciZone.Unset()
}

// GetProcessorUnit returns the ProcessorUnit field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PciEndpoint) GetProcessorUnit() ProcessorUnitRelationship {
	if o == nil || IsNil(o.ProcessorUnit.Get()) {
		var ret ProcessorUnitRelationship
		return ret
	}
	return *o.ProcessorUnit.Get()
}

// GetProcessorUnitOk returns a tuple with the ProcessorUnit field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PciEndpoint) GetProcessorUnitOk() (*ProcessorUnitRelationship, bool) {
	if o == nil {
		return nil, false
	}
	return o.ProcessorUnit.Get(), o.ProcessorUnit.IsSet()
}

// HasProcessorUnit returns a boolean if a field has been set.
func (o *PciEndpoint) HasProcessorUnit() bool {
	if o != nil && o.ProcessorUnit.IsSet() {
		return true
	}

	return false
}

// SetProcessorUnit gets a reference to the given NullableProcessorUnitRelationship and assigns it to the ProcessorUnit field.
func (o *PciEndpoint) SetProcessorUnit(v ProcessorUnitRelationship) {
	o.ProcessorUnit.Set(&v)
}

// SetProcessorUnitNil sets the value for ProcessorUnit to be an explicit nil
func (o *PciEndpoint) SetProcessorUnitNil() {
	o.ProcessorUnit.Set(nil)
}

// UnsetProcessorUnit ensures that no value is present for ProcessorUnit, not even an explicit nil
func (o *PciEndpoint) UnsetProcessorUnit() {
	o.ProcessorUnit.Unset()
}

// GetRegisteredDevice returns the RegisteredDevice field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PciEndpoint) GetRegisteredDevice() AssetDeviceRegistrationRelationship {
	if o == nil || IsNil(o.RegisteredDevice.Get()) {
		var ret AssetDeviceRegistrationRelationship
		return ret
	}
	return *o.RegisteredDevice.Get()
}

// GetRegisteredDeviceOk returns a tuple with the RegisteredDevice field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PciEndpoint) GetRegisteredDeviceOk() (*AssetDeviceRegistrationRelationship, bool) {
	if o == nil {
		return nil, false
	}
	return o.RegisteredDevice.Get(), o.RegisteredDevice.IsSet()
}

// HasRegisteredDevice returns a boolean if a field has been set.
func (o *PciEndpoint) HasRegisteredDevice() bool {
	if o != nil && o.RegisteredDevice.IsSet() {
		return true
	}

	return false
}

// SetRegisteredDevice gets a reference to the given NullableAssetDeviceRegistrationRelationship and assigns it to the RegisteredDevice field.
func (o *PciEndpoint) SetRegisteredDevice(v AssetDeviceRegistrationRelationship) {
	o.RegisteredDevice.Set(&v)
}

// SetRegisteredDeviceNil sets the value for RegisteredDevice to be an explicit nil
func (o *PciEndpoint) SetRegisteredDeviceNil() {
	o.RegisteredDevice.Set(nil)
}

// UnsetRegisteredDevice ensures that no value is present for RegisteredDevice, not even an explicit nil
func (o *PciEndpoint) UnsetRegisteredDevice() {
	o.RegisteredDevice.Unset()
}

// GetSharedAdapterUnit returns the SharedAdapterUnit field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PciEndpoint) GetSharedAdapterUnit() EquipmentSharedAdapterUnitRelationship {
	if o == nil || IsNil(o.SharedAdapterUnit.Get()) {
		var ret EquipmentSharedAdapterUnitRelationship
		return ret
	}
	return *o.SharedAdapterUnit.Get()
}

// GetSharedAdapterUnitOk returns a tuple with the SharedAdapterUnit field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PciEndpoint) GetSharedAdapterUnitOk() (*EquipmentSharedAdapterUnitRelationship, bool) {
	if o == nil {
		return nil, false
	}
	return o.SharedAdapterUnit.Get(), o.SharedAdapterUnit.IsSet()
}

// HasSharedAdapterUnit returns a boolean if a field has been set.
func (o *PciEndpoint) HasSharedAdapterUnit() bool {
	if o != nil && o.SharedAdapterUnit.IsSet() {
		return true
	}

	return false
}

// SetSharedAdapterUnit gets a reference to the given NullableEquipmentSharedAdapterUnitRelationship and assigns it to the SharedAdapterUnit field.
func (o *PciEndpoint) SetSharedAdapterUnit(v EquipmentSharedAdapterUnitRelationship) {
	o.SharedAdapterUnit.Set(&v)
}

// SetSharedAdapterUnitNil sets the value for SharedAdapterUnit to be an explicit nil
func (o *PciEndpoint) SetSharedAdapterUnitNil() {
	o.SharedAdapterUnit.Set(nil)
}

// UnsetSharedAdapterUnit ensures that no value is present for SharedAdapterUnit, not even an explicit nil
func (o *PciEndpoint) UnsetSharedAdapterUnit() {
	o.SharedAdapterUnit.Unset()
}

// GetSharedGraphicsCard returns the SharedGraphicsCard field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PciEndpoint) GetSharedGraphicsCard() EquipmentSharedGraphicsCardRelationship {
	if o == nil || IsNil(o.SharedGraphicsCard.Get()) {
		var ret EquipmentSharedGraphicsCardRelationship
		return ret
	}
	return *o.SharedGraphicsCard.Get()
}

// GetSharedGraphicsCardOk returns a tuple with the SharedGraphicsCard field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PciEndpoint) GetSharedGraphicsCardOk() (*EquipmentSharedGraphicsCardRelationship, bool) {
	if o == nil {
		return nil, false
	}
	return o.SharedGraphicsCard.Get(), o.SharedGraphicsCard.IsSet()
}

// HasSharedGraphicsCard returns a boolean if a field has been set.
func (o *PciEndpoint) HasSharedGraphicsCard() bool {
	if o != nil && o.SharedGraphicsCard.IsSet() {
		return true
	}

	return false
}

// SetSharedGraphicsCard gets a reference to the given NullableEquipmentSharedGraphicsCardRelationship and assigns it to the SharedGraphicsCard field.
func (o *PciEndpoint) SetSharedGraphicsCard(v EquipmentSharedGraphicsCardRelationship) {
	o.SharedGraphicsCard.Set(&v)
}

// SetSharedGraphicsCardNil sets the value for SharedGraphicsCard to be an explicit nil
func (o *PciEndpoint) SetSharedGraphicsCardNil() {
	o.SharedGraphicsCard.Set(nil)
}

// UnsetSharedGraphicsCard ensures that no value is present for SharedGraphicsCard, not even an explicit nil
func (o *PciEndpoint) UnsetSharedGraphicsCard() {
	o.SharedGraphicsCard.Unset()
}

func (o PciEndpoint) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PciEndpoint) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	serializedInventoryBase, errInventoryBase := json.Marshal(o.InventoryBase)
	if errInventoryBase != nil {
		return map[string]interface{}{}, errInventoryBase
	}
	errInventoryBase = json.Unmarshal([]byte(serializedInventoryBase), &toSerialize)
	if errInventoryBase != nil {
		return map[string]interface{}{}, errInventoryBase
	}
	if _, exists := toSerialize["ClassId"]; !exists {
		toSerialize["ClassId"] = o.GetDefaultClassId()
	}
	toSerialize["ClassId"] = o.ClassId
	if _, exists := toSerialize["ObjectType"]; !exists {
		toSerialize["ObjectType"] = o.GetDefaultObjectType()
	}
	toSerialize["ObjectType"] = o.ObjectType
	if !IsNil(o.DeviceEnclosureId) {
		toSerialize["DeviceEnclosureId"] = o.DeviceEnclosureId
	}
	if !IsNil(o.DeviceId) {
		toSerialize["DeviceId"] = o.DeviceId
	}
	if !IsNil(o.DeviceType) {
		toSerialize["DeviceType"] = o.DeviceType
	}
	if !IsNil(o.EndpointId) {
		toSerialize["EndpointId"] = o.EndpointId
	}
	if !IsNil(o.Name) {
		toSerialize["Name"] = o.Name
	}
	if o.OperReason != nil {
		toSerialize["OperReason"] = o.OperReason
	}
	if !IsNil(o.OperState) {
		toSerialize["OperState"] = o.OperState
	}
	if !IsNil(o.Uri) {
		toSerialize["Uri"] = o.Uri
	}
	if o.InventoryDeviceInfo.IsSet() {
		toSerialize["InventoryDeviceInfo"] = o.InventoryDeviceInfo.Get()
	}
	if o.PciSwitch.IsSet() {
		toSerialize["PciSwitch"] = o.PciSwitch.Get()
	}
	if o.PciSwitchPort.IsSet() {
		toSerialize["PciSwitchPort"] = o.PciSwitchPort.Get()
	}
	if o.PciZone.IsSet() {
		toSerialize["PciZone"] = o.PciZone.Get()
	}
	if o.ProcessorUnit.IsSet() {
		toSerialize["ProcessorUnit"] = o.ProcessorUnit.Get()
	}
	if o.RegisteredDevice.IsSet() {
		toSerialize["RegisteredDevice"] = o.RegisteredDevice.Get()
	}
	if o.SharedAdapterUnit.IsSet() {
		toSerialize["SharedAdapterUnit"] = o.SharedAdapterUnit.Get()
	}
	if o.SharedGraphicsCard.IsSet() {
		toSerialize["SharedGraphicsCard"] = o.SharedGraphicsCard.Get()
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *PciEndpoint) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"ClassId",
		"ObjectType",
	}

	// defaultValueFuncMap captures the default values for required properties.
	// These values are used when required properties are missing from the payload.
	defaultValueFuncMap := map[string]func() interface{}{
		"ClassId":    o.GetDefaultClassId,
		"ObjectType": o.GetDefaultObjectType,
	}
	var defaultValueApplied bool
	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			if _, ok := defaultValueFuncMap[requiredProperty]; ok {
				allProperties[requiredProperty] = defaultValueFuncMap[requiredProperty]()
				defaultValueApplied = true
			}
		}
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	if defaultValueApplied {
		data, err = json.Marshal(allProperties)
		if err != nil {
			return err
		}
	}
	type PciEndpointWithoutEmbeddedStruct struct {
		// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.
		ClassId string `json:"ClassId"`
		// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
		ObjectType string `json:"ObjectType"`
		// The identifier of the enclosure device of the actual physical device to which the logical PCIe endpoint is pointing to.
		DeviceEnclosureId *int64 `json:"DeviceEnclosureId,omitempty"`
		// The identifier of the actual physical device to which the logical PCIe endpoint is pointing to.
		DeviceId *int64 `json:"DeviceId,omitempty"`
		// The type of the actual physical device to which the logical PCIe endpoint is pointing to. * `Unknown` - The device type of the physical device is unknown. * `NetworkAdapter` - The device type of the physical device is a NIC adapter. * `CPU` - The device type of the physical device is CPU. * `GPU` - The device type of the physical device is GPU.
		DeviceType *string `json:"DeviceType,omitempty"`
		// The identifier of the PCIe endpoint within a X-Fabric module PCIe switch.
		EndpointId *string `json:"EndpointId,omitempty"`
		// The name of the PCIe endpoint, as reported by the XFM platform software (BMC).
		Name       *string  `json:"Name,omitempty"`
		OperReason []string `json:"OperReason,omitempty"`
		// Operational state of the PCIe endpoint.
		OperState *string `json:"OperState,omitempty"`
		// The unique identifier of the PCIe endpoint as reported by the chassis expander management controller.
		Uri                 *string                                         `json:"Uri,omitempty"`
		InventoryDeviceInfo NullableInventoryDeviceInfoRelationship         `json:"InventoryDeviceInfo,omitempty"`
		PciSwitch           NullablePciSwitchRelationship                   `json:"PciSwitch,omitempty"`
		PciSwitchPort       NullablePciPortRelationship                     `json:"PciSwitchPort,omitempty"`
		PciZone             NullablePciZoneRelationship                     `json:"PciZone,omitempty"`
		ProcessorUnit       NullableProcessorUnitRelationship               `json:"ProcessorUnit,omitempty"`
		RegisteredDevice    NullableAssetDeviceRegistrationRelationship     `json:"RegisteredDevice,omitempty"`
		SharedAdapterUnit   NullableEquipmentSharedAdapterUnitRelationship  `json:"SharedAdapterUnit,omitempty"`
		SharedGraphicsCard  NullableEquipmentSharedGraphicsCardRelationship `json:"SharedGraphicsCard,omitempty"`
	}

	varPciEndpointWithoutEmbeddedStruct := PciEndpointWithoutEmbeddedStruct{}

	err = json.Unmarshal(data, &varPciEndpointWithoutEmbeddedStruct)
	if err == nil {
		varPciEndpoint := _PciEndpoint{}
		varPciEndpoint.ClassId = varPciEndpointWithoutEmbeddedStruct.ClassId
		varPciEndpoint.ObjectType = varPciEndpointWithoutEmbeddedStruct.ObjectType
		varPciEndpoint.DeviceEnclosureId = varPciEndpointWithoutEmbeddedStruct.DeviceEnclosureId
		varPciEndpoint.DeviceId = varPciEndpointWithoutEmbeddedStruct.DeviceId
		varPciEndpoint.DeviceType = varPciEndpointWithoutEmbeddedStruct.DeviceType
		varPciEndpoint.EndpointId = varPciEndpointWithoutEmbeddedStruct.EndpointId
		varPciEndpoint.Name = varPciEndpointWithoutEmbeddedStruct.Name
		varPciEndpoint.OperReason = varPciEndpointWithoutEmbeddedStruct.OperReason
		varPciEndpoint.OperState = varPciEndpointWithoutEmbeddedStruct.OperState
		varPciEndpoint.Uri = varPciEndpointWithoutEmbeddedStruct.Uri
		varPciEndpoint.InventoryDeviceInfo = varPciEndpointWithoutEmbeddedStruct.InventoryDeviceInfo
		varPciEndpoint.PciSwitch = varPciEndpointWithoutEmbeddedStruct.PciSwitch
		varPciEndpoint.PciSwitchPort = varPciEndpointWithoutEmbeddedStruct.PciSwitchPort
		varPciEndpoint.PciZone = varPciEndpointWithoutEmbeddedStruct.PciZone
		varPciEndpoint.ProcessorUnit = varPciEndpointWithoutEmbeddedStruct.ProcessorUnit
		varPciEndpoint.RegisteredDevice = varPciEndpointWithoutEmbeddedStruct.RegisteredDevice
		varPciEndpoint.SharedAdapterUnit = varPciEndpointWithoutEmbeddedStruct.SharedAdapterUnit
		varPciEndpoint.SharedGraphicsCard = varPciEndpointWithoutEmbeddedStruct.SharedGraphicsCard
		*o = PciEndpoint(varPciEndpoint)
	} else {
		return err
	}

	varPciEndpoint := _PciEndpoint{}

	err = json.Unmarshal(data, &varPciEndpoint)
	if err == nil {
		o.InventoryBase = varPciEndpoint.InventoryBase
	} else {
		return err
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "ClassId")
		delete(additionalProperties, "ObjectType")
		delete(additionalProperties, "DeviceEnclosureId")
		delete(additionalProperties, "DeviceId")
		delete(additionalProperties, "DeviceType")
		delete(additionalProperties, "EndpointId")
		delete(additionalProperties, "Name")
		delete(additionalProperties, "OperReason")
		delete(additionalProperties, "OperState")
		delete(additionalProperties, "Uri")
		delete(additionalProperties, "InventoryDeviceInfo")
		delete(additionalProperties, "PciSwitch")
		delete(additionalProperties, "PciSwitchPort")
		delete(additionalProperties, "PciZone")
		delete(additionalProperties, "ProcessorUnit")
		delete(additionalProperties, "RegisteredDevice")
		delete(additionalProperties, "SharedAdapterUnit")
		delete(additionalProperties, "SharedGraphicsCard")

		// remove fields from embedded structs
		reflectInventoryBase := reflect.ValueOf(o.InventoryBase)
		for i := 0; i < reflectInventoryBase.Type().NumField(); i++ {
			t := reflectInventoryBase.Type().Field(i)

			if jsonTag := t.Tag.Get("json"); jsonTag != "" {
				fieldName := ""
				if commaIdx := strings.Index(jsonTag, ","); commaIdx > 0 {
					fieldName = jsonTag[:commaIdx]
				} else {
					fieldName = jsonTag
				}
				if fieldName != "AdditionalProperties" {
					delete(additionalProperties, fieldName)
				}
			}
		}

		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullablePciEndpoint struct {
	value *PciEndpoint
	isSet bool
}

func (v NullablePciEndpoint) Get() *PciEndpoint {
	return v.value
}

func (v *NullablePciEndpoint) Set(val *PciEndpoint) {
	v.value = val
	v.isSet = true
}

func (v NullablePciEndpoint) IsSet() bool {
	return v.isSet
}

func (v *NullablePciEndpoint) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePciEndpoint(val *PciEndpoint) *NullablePciEndpoint {
	return &NullablePciEndpoint{value: val, isSet: true}
}

func (v NullablePciEndpoint) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePciEndpoint) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
