/*
Cisco Intersight

Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations. The Intersight OpenAPI document defines the complete set of properties that are returned in the HTTP response. From that perspective, a client can expect that no additional properties are returned, unless these properties are explicitly defined in the OpenAPI document. However, when a client uses an older version of the Intersight OpenAPI document, the server may send additional properties because the software is more recent than the client. In that case, the client may receive properties that it does not know about. Some generated SDKs perform a strict validation of the HTTP response body against the OpenAPI document.

API version: 1.0.11-18775
Contact: intersight@cisco.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package intersight

import (
	"encoding/json"
	"fmt"
	"reflect"
	"strings"
	"time"
)

// checks if the LicenseAccountLicenseData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LicenseAccountLicenseData{}

// LicenseAccountLicenseData License information for an account.
type LicenseAccountLicenseData struct {
	MoBaseMo
	// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.
	ClassId string `json:"ClassId"`
	// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
	ObjectType string `json:"ObjectType"`
	// Root user's ID of the account.
	AccountId *string `json:"AccountId,omitempty"`
	// Agent trusted store data.
	AgentData *string `json:"AgentData,omitempty"`
	// Authorization expiration time.
	AuthExpireTime *string `json:"AuthExpireTime,omitempty"`
	// Intial authorization time.
	AuthInitialTime *string `json:"AuthInitialTime,omitempty"`
	// Next time for the authorization.
	AuthNextTime *string `json:"AuthNextTime,omitempty"`
	// Account license data category name.
	Category *string `json:"Category,omitempty"`
	// Default license tier set by the user. * `Base` - Base as a License type. It is default license type. * `Essential` - Essential as a License type. * `Standard` - Standard as a License type. * `Advantage` - Advantage as a License type. * `Premier` - Premier as a License type. * `IWO-Essential` - IWO-Essential as a License type. * `IWO-Advantage` - IWO-Advantage as a License type. * `IWO-Premier` - IWO-Premier as a License type. * `IKS-Advantage` - IKS-Advantage as a License type. * `INC-Premier-1GFixed` - Premier 1G Fixed license tier for Intersight Nexus Cloud. * `INC-Premier-10GFixed` - Premier 10G Fixed license tier for Intersight Nexus Cloud. * `INC-Premier-100GFixed` - Premier 100G Fixed license tier for Intersight Nexus Cloud. * `INC-Premier-Mod4Slot` - Premier Modular 4 slot license tier for Intersight Nexus Cloud. * `INC-Premier-Mod8Slot` - Premier Modular 8 slot license tier for Intersight Nexus Cloud. * `INC-Premier-D2OpsFixed` - Premier D2Ops fixed license tier for Intersight Nexus Cloud. * `INC-Premier-D2OpsMod` - Premier D2Ops modular license tier for Intersight Nexus Cloud. * `INC-Premier-CentralizedMod8Slot` - Premier modular license tier of switch type CentralizedMod8Slot for Intersight Nexus Cloud. * `INC-Premier-DistributedMod8Slot` - Premier modular license tier of switch type DistributedMod8Slot for Intersight Nexus Cloud. * `IntersightTrial` - Virtual dummy license type to indicate trial. Used for UI display of trial mode Intersight tiers. * `IWOTrial` - Virtual dummy license type to indicate trial. Used for UI display of trial mode IKS tiers. * `IKSTrial` - Virtual dummy license type to indicate trial. Used for UI display of trial mode IWO tiers. * `INCTrial` - Virtual dummy license type to indicate trial. Used for UI display of trial mode Nexus tiers.
	DefaultLicenseType *string `json:"DefaultLicenseType,omitempty"`
	// Default license tier for newer model M7+ servers set by the user. * `Base` - Base as a License type. It is default license type. * `Essential` - Essential as a License type. * `Standard` - Standard as a License type. * `Advantage` - Advantage as a License type. * `Premier` - Premier as a License type. * `IWO-Essential` - IWO-Essential as a License type. * `IWO-Advantage` - IWO-Advantage as a License type. * `IWO-Premier` - IWO-Premier as a License type. * `IKS-Advantage` - IKS-Advantage as a License type. * `INC-Premier-1GFixed` - Premier 1G Fixed license tier for Intersight Nexus Cloud. * `INC-Premier-10GFixed` - Premier 10G Fixed license tier for Intersight Nexus Cloud. * `INC-Premier-100GFixed` - Premier 100G Fixed license tier for Intersight Nexus Cloud. * `INC-Premier-Mod4Slot` - Premier Modular 4 slot license tier for Intersight Nexus Cloud. * `INC-Premier-Mod8Slot` - Premier Modular 8 slot license tier for Intersight Nexus Cloud. * `INC-Premier-D2OpsFixed` - Premier D2Ops fixed license tier for Intersight Nexus Cloud. * `INC-Premier-D2OpsMod` - Premier D2Ops modular license tier for Intersight Nexus Cloud. * `INC-Premier-CentralizedMod8Slot` - Premier modular license tier of switch type CentralizedMod8Slot for Intersight Nexus Cloud. * `INC-Premier-DistributedMod8Slot` - Premier modular license tier of switch type DistributedMod8Slot for Intersight Nexus Cloud. * `IntersightTrial` - Virtual dummy license type to indicate trial. Used for UI display of trial mode Intersight tiers. * `IWOTrial` - Virtual dummy license type to indicate trial. Used for UI display of trial mode IKS tiers. * `IKSTrial` - Virtual dummy license type to indicate trial. Used for UI display of trial mode IWO tiers. * `INCTrial` - Virtual dummy license type to indicate trial. Used for UI display of trial mode Nexus tiers.
	DefaultLicenseTypeNewerModels *string `json:"DefaultLicenseTypeNewerModels,omitempty"`
	// The detailed error message when there is any error related to license sync of this account.
	ErrorDesc *string `json:"ErrorDesc,omitempty"`
	// Account license data group name.
	Group *string `json:"Group,omitempty"`
	// The highest license tier which is in compliant of this account. * `Base` - Base as a License type. It is default license type. * `Essential` - Essential as a License type. * `Standard` - Standard as a License type. * `Advantage` - Advantage as a License type. * `Premier` - Premier as a License type. * `IWO-Essential` - IWO-Essential as a License type. * `IWO-Advantage` - IWO-Advantage as a License type. * `IWO-Premier` - IWO-Premier as a License type. * `IKS-Advantage` - IKS-Advantage as a License type. * `INC-Premier-1GFixed` - Premier 1G Fixed license tier for Intersight Nexus Cloud. * `INC-Premier-10GFixed` - Premier 10G Fixed license tier for Intersight Nexus Cloud. * `INC-Premier-100GFixed` - Premier 100G Fixed license tier for Intersight Nexus Cloud. * `INC-Premier-Mod4Slot` - Premier Modular 4 slot license tier for Intersight Nexus Cloud. * `INC-Premier-Mod8Slot` - Premier Modular 8 slot license tier for Intersight Nexus Cloud. * `INC-Premier-D2OpsFixed` - Premier D2Ops fixed license tier for Intersight Nexus Cloud. * `INC-Premier-D2OpsMod` - Premier D2Ops modular license tier for Intersight Nexus Cloud. * `INC-Premier-CentralizedMod8Slot` - Premier modular license tier of switch type CentralizedMod8Slot for Intersight Nexus Cloud. * `INC-Premier-DistributedMod8Slot` - Premier modular license tier of switch type DistributedMod8Slot for Intersight Nexus Cloud. * `IntersightTrial` - Virtual dummy license type to indicate trial. Used for UI display of trial mode Intersight tiers. * `IWOTrial` - Virtual dummy license type to indicate trial. Used for UI display of trial mode IKS tiers. * `IKSTrial` - Virtual dummy license type to indicate trial. Used for UI display of trial mode IWO tiers. * `INCTrial` - Virtual dummy license type to indicate trial. Used for UI display of trial mode Nexus tiers.
	HighestCompliantLicenseTier *string `json:"HighestCompliantLicenseTier,omitempty"`
	// Specifies last sync time with CSSM.
	LastCssmSync *time.Time `json:"LastCssmSync,omitempty"`
	// Specifies last certificate renew time with SA.
	LastRenew *time.Time `json:"LastRenew,omitempty"`
	// Specifies last sync time with SA.
	LastSync *time.Time `json:"LastSync,omitempty"`
	// Record's last update datetime.
	LastUpdatedTime *time.Time `json:"LastUpdatedTime,omitempty"`
	// Aggregrated mode for the agent.
	LicenseState *string `json:"LicenseState,omitempty"`
	// Tech-support info of a smart-agent.
	LicenseTechSupportInfo *string `json:"LicenseTechSupportInfo,omitempty"`
	// Registration exipiration time.
	RegisterExpireTime *string `json:"RegisterExpireTime,omitempty"`
	// Initial time of registration.
	RegisterInitialTime *string `json:"RegisterInitialTime,omitempty"`
	// Next time for the license registration.
	RegisterNextTime *string `json:"RegisterNextTime,omitempty"`
	// Registration status of a smart-agent.
	RegistrationStatus *string `json:"RegistrationStatus,omitempty"`
	// License renewal failure message.
	RenewFailureString *string `json:"RenewFailureString,omitempty"`
	// Name of the smart account.
	SmartAccount *string `json:"SmartAccount,omitempty"`
	// Domain Name of the smart account.
	SmartAccountDomain *string `json:"SmartAccountDomain,omitempty"`
	// Indicate whether API integration is enabled.
	SmartApiEnabled *bool `json:"SmartApiEnabled,omitempty"`
	// The detailed error message when there is any smart API sync error related to this account.
	SmartApiSyncStatus *string `json:"SmartApiSyncStatus,omitempty"`
	// Current sync status for the account.
	SyncStatus *string `json:"SyncStatus,omitempty"`
	// Name of the virtual account.
	VirtualAccount            *string                                              `json:"VirtualAccount,omitempty"`
	Account                   NullableIamAccountRelationship                       `json:"Account,omitempty"`
	CustomerOp                NullableLicenseCustomerOpRelationship                `json:"CustomerOp,omitempty"`
	IksCustomerOp             NullableLicenseIksCustomerOpRelationship             `json:"IksCustomerOp,omitempty"`
	IksLicenseCount           NullableLicenseIksLicenseCountRelationship           `json:"IksLicenseCount,omitempty"`
	IncCustomerOp             NullableLicenseIncCustomerOpRelationship             `json:"IncCustomerOp,omitempty"`
	IncLicenseCount           NullableLicenseIncLicenseCountRelationship           `json:"IncLicenseCount,omitempty"`
	IwoCustomerOp             NullableLicenseIwoCustomerOpRelationship             `json:"IwoCustomerOp,omitempty"`
	IwoLicenseCount           NullableLicenseIwoLicenseCountRelationship           `json:"IwoLicenseCount,omitempty"`
	LicenseInfoView           NullableLicenseLicenseInfoViewRelationship           `json:"LicenseInfoView,omitempty"`
	LicenseRegistrationStatus NullableLicenseLicenseRegistrationStatusRelationship `json:"LicenseRegistrationStatus,omitempty"`
	// An array of relationships to licenseLicenseInfo resources.
	Licenseinfos         []LicenseLicenseInfoRelationship             `json:"Licenseinfos,omitempty"`
	SmartlicenseToken    NullableLicenseSmartlicenseTokenRelationship `json:"SmartlicenseToken,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _LicenseAccountLicenseData LicenseAccountLicenseData

// NewLicenseAccountLicenseData instantiates a new LicenseAccountLicenseData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLicenseAccountLicenseData(classId string, objectType string) *LicenseAccountLicenseData {
	this := LicenseAccountLicenseData{}
	this.ClassId = classId
	this.ObjectType = objectType
	var defaultLicenseType string = "Base"
	this.DefaultLicenseType = &defaultLicenseType
	var defaultLicenseTypeNewerModels string = "Base"
	this.DefaultLicenseTypeNewerModels = &defaultLicenseTypeNewerModels
	return &this
}

// NewLicenseAccountLicenseDataWithDefaults instantiates a new LicenseAccountLicenseData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLicenseAccountLicenseDataWithDefaults() *LicenseAccountLicenseData {
	this := LicenseAccountLicenseData{}
	var classId string = "license.AccountLicenseData"
	this.ClassId = classId
	var objectType string = "license.AccountLicenseData"
	this.ObjectType = objectType
	var defaultLicenseType string = "Base"
	this.DefaultLicenseType = &defaultLicenseType
	var defaultLicenseTypeNewerModels string = "Base"
	this.DefaultLicenseTypeNewerModels = &defaultLicenseTypeNewerModels
	return &this
}

// GetClassId returns the ClassId field value
func (o *LicenseAccountLicenseData) GetClassId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ClassId
}

// GetClassIdOk returns a tuple with the ClassId field value
// and a boolean to check if the value has been set.
func (o *LicenseAccountLicenseData) GetClassIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ClassId, true
}

// SetClassId sets field value
func (o *LicenseAccountLicenseData) SetClassId(v string) {
	o.ClassId = v
}

// GetDefaultClassId returns the default value "license.AccountLicenseData" of the ClassId field.
func (o *LicenseAccountLicenseData) GetDefaultClassId() interface{} {
	return "license.AccountLicenseData"
}

// GetObjectType returns the ObjectType field value
func (o *LicenseAccountLicenseData) GetObjectType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ObjectType
}

// GetObjectTypeOk returns a tuple with the ObjectType field value
// and a boolean to check if the value has been set.
func (o *LicenseAccountLicenseData) GetObjectTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ObjectType, true
}

// SetObjectType sets field value
func (o *LicenseAccountLicenseData) SetObjectType(v string) {
	o.ObjectType = v
}

// GetDefaultObjectType returns the default value "license.AccountLicenseData" of the ObjectType field.
func (o *LicenseAccountLicenseData) GetDefaultObjectType() interface{} {
	return "license.AccountLicenseData"
}

// GetAccountId returns the AccountId field value if set, zero value otherwise.
func (o *LicenseAccountLicenseData) GetAccountId() string {
	if o == nil || IsNil(o.AccountId) {
		var ret string
		return ret
	}
	return *o.AccountId
}

// GetAccountIdOk returns a tuple with the AccountId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LicenseAccountLicenseData) GetAccountIdOk() (*string, bool) {
	if o == nil || IsNil(o.AccountId) {
		return nil, false
	}
	return o.AccountId, true
}

// HasAccountId returns a boolean if a field has been set.
func (o *LicenseAccountLicenseData) HasAccountId() bool {
	if o != nil && !IsNil(o.AccountId) {
		return true
	}

	return false
}

// SetAccountId gets a reference to the given string and assigns it to the AccountId field.
func (o *LicenseAccountLicenseData) SetAccountId(v string) {
	o.AccountId = &v
}

// GetAgentData returns the AgentData field value if set, zero value otherwise.
func (o *LicenseAccountLicenseData) GetAgentData() string {
	if o == nil || IsNil(o.AgentData) {
		var ret string
		return ret
	}
	return *o.AgentData
}

// GetAgentDataOk returns a tuple with the AgentData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LicenseAccountLicenseData) GetAgentDataOk() (*string, bool) {
	if o == nil || IsNil(o.AgentData) {
		return nil, false
	}
	return o.AgentData, true
}

// HasAgentData returns a boolean if a field has been set.
func (o *LicenseAccountLicenseData) HasAgentData() bool {
	if o != nil && !IsNil(o.AgentData) {
		return true
	}

	return false
}

// SetAgentData gets a reference to the given string and assigns it to the AgentData field.
func (o *LicenseAccountLicenseData) SetAgentData(v string) {
	o.AgentData = &v
}

// GetAuthExpireTime returns the AuthExpireTime field value if set, zero value otherwise.
func (o *LicenseAccountLicenseData) GetAuthExpireTime() string {
	if o == nil || IsNil(o.AuthExpireTime) {
		var ret string
		return ret
	}
	return *o.AuthExpireTime
}

// GetAuthExpireTimeOk returns a tuple with the AuthExpireTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LicenseAccountLicenseData) GetAuthExpireTimeOk() (*string, bool) {
	if o == nil || IsNil(o.AuthExpireTime) {
		return nil, false
	}
	return o.AuthExpireTime, true
}

// HasAuthExpireTime returns a boolean if a field has been set.
func (o *LicenseAccountLicenseData) HasAuthExpireTime() bool {
	if o != nil && !IsNil(o.AuthExpireTime) {
		return true
	}

	return false
}

// SetAuthExpireTime gets a reference to the given string and assigns it to the AuthExpireTime field.
func (o *LicenseAccountLicenseData) SetAuthExpireTime(v string) {
	o.AuthExpireTime = &v
}

// GetAuthInitialTime returns the AuthInitialTime field value if set, zero value otherwise.
func (o *LicenseAccountLicenseData) GetAuthInitialTime() string {
	if o == nil || IsNil(o.AuthInitialTime) {
		var ret string
		return ret
	}
	return *o.AuthInitialTime
}

// GetAuthInitialTimeOk returns a tuple with the AuthInitialTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LicenseAccountLicenseData) GetAuthInitialTimeOk() (*string, bool) {
	if o == nil || IsNil(o.AuthInitialTime) {
		return nil, false
	}
	return o.AuthInitialTime, true
}

// HasAuthInitialTime returns a boolean if a field has been set.
func (o *LicenseAccountLicenseData) HasAuthInitialTime() bool {
	if o != nil && !IsNil(o.AuthInitialTime) {
		return true
	}

	return false
}

// SetAuthInitialTime gets a reference to the given string and assigns it to the AuthInitialTime field.
func (o *LicenseAccountLicenseData) SetAuthInitialTime(v string) {
	o.AuthInitialTime = &v
}

// GetAuthNextTime returns the AuthNextTime field value if set, zero value otherwise.
func (o *LicenseAccountLicenseData) GetAuthNextTime() string {
	if o == nil || IsNil(o.AuthNextTime) {
		var ret string
		return ret
	}
	return *o.AuthNextTime
}

// GetAuthNextTimeOk returns a tuple with the AuthNextTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LicenseAccountLicenseData) GetAuthNextTimeOk() (*string, bool) {
	if o == nil || IsNil(o.AuthNextTime) {
		return nil, false
	}
	return o.AuthNextTime, true
}

// HasAuthNextTime returns a boolean if a field has been set.
func (o *LicenseAccountLicenseData) HasAuthNextTime() bool {
	if o != nil && !IsNil(o.AuthNextTime) {
		return true
	}

	return false
}

// SetAuthNextTime gets a reference to the given string and assigns it to the AuthNextTime field.
func (o *LicenseAccountLicenseData) SetAuthNextTime(v string) {
	o.AuthNextTime = &v
}

// GetCategory returns the Category field value if set, zero value otherwise.
func (o *LicenseAccountLicenseData) GetCategory() string {
	if o == nil || IsNil(o.Category) {
		var ret string
		return ret
	}
	return *o.Category
}

// GetCategoryOk returns a tuple with the Category field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LicenseAccountLicenseData) GetCategoryOk() (*string, bool) {
	if o == nil || IsNil(o.Category) {
		return nil, false
	}
	return o.Category, true
}

// HasCategory returns a boolean if a field has been set.
func (o *LicenseAccountLicenseData) HasCategory() bool {
	if o != nil && !IsNil(o.Category) {
		return true
	}

	return false
}

// SetCategory gets a reference to the given string and assigns it to the Category field.
func (o *LicenseAccountLicenseData) SetCategory(v string) {
	o.Category = &v
}

// GetDefaultLicenseType returns the DefaultLicenseType field value if set, zero value otherwise.
func (o *LicenseAccountLicenseData) GetDefaultLicenseType() string {
	if o == nil || IsNil(o.DefaultLicenseType) {
		var ret string
		return ret
	}
	return *o.DefaultLicenseType
}

// GetDefaultLicenseTypeOk returns a tuple with the DefaultLicenseType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LicenseAccountLicenseData) GetDefaultLicenseTypeOk() (*string, bool) {
	if o == nil || IsNil(o.DefaultLicenseType) {
		return nil, false
	}
	return o.DefaultLicenseType, true
}

// HasDefaultLicenseType returns a boolean if a field has been set.
func (o *LicenseAccountLicenseData) HasDefaultLicenseType() bool {
	if o != nil && !IsNil(o.DefaultLicenseType) {
		return true
	}

	return false
}

// SetDefaultLicenseType gets a reference to the given string and assigns it to the DefaultLicenseType field.
func (o *LicenseAccountLicenseData) SetDefaultLicenseType(v string) {
	o.DefaultLicenseType = &v
}

// GetDefaultLicenseTypeNewerModels returns the DefaultLicenseTypeNewerModels field value if set, zero value otherwise.
func (o *LicenseAccountLicenseData) GetDefaultLicenseTypeNewerModels() string {
	if o == nil || IsNil(o.DefaultLicenseTypeNewerModels) {
		var ret string
		return ret
	}
	return *o.DefaultLicenseTypeNewerModels
}

// GetDefaultLicenseTypeNewerModelsOk returns a tuple with the DefaultLicenseTypeNewerModels field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LicenseAccountLicenseData) GetDefaultLicenseTypeNewerModelsOk() (*string, bool) {
	if o == nil || IsNil(o.DefaultLicenseTypeNewerModels) {
		return nil, false
	}
	return o.DefaultLicenseTypeNewerModels, true
}

// HasDefaultLicenseTypeNewerModels returns a boolean if a field has been set.
func (o *LicenseAccountLicenseData) HasDefaultLicenseTypeNewerModels() bool {
	if o != nil && !IsNil(o.DefaultLicenseTypeNewerModels) {
		return true
	}

	return false
}

// SetDefaultLicenseTypeNewerModels gets a reference to the given string and assigns it to the DefaultLicenseTypeNewerModels field.
func (o *LicenseAccountLicenseData) SetDefaultLicenseTypeNewerModels(v string) {
	o.DefaultLicenseTypeNewerModels = &v
}

// GetErrorDesc returns the ErrorDesc field value if set, zero value otherwise.
func (o *LicenseAccountLicenseData) GetErrorDesc() string {
	if o == nil || IsNil(o.ErrorDesc) {
		var ret string
		return ret
	}
	return *o.ErrorDesc
}

// GetErrorDescOk returns a tuple with the ErrorDesc field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LicenseAccountLicenseData) GetErrorDescOk() (*string, bool) {
	if o == nil || IsNil(o.ErrorDesc) {
		return nil, false
	}
	return o.ErrorDesc, true
}

// HasErrorDesc returns a boolean if a field has been set.
func (o *LicenseAccountLicenseData) HasErrorDesc() bool {
	if o != nil && !IsNil(o.ErrorDesc) {
		return true
	}

	return false
}

// SetErrorDesc gets a reference to the given string and assigns it to the ErrorDesc field.
func (o *LicenseAccountLicenseData) SetErrorDesc(v string) {
	o.ErrorDesc = &v
}

// GetGroup returns the Group field value if set, zero value otherwise.
func (o *LicenseAccountLicenseData) GetGroup() string {
	if o == nil || IsNil(o.Group) {
		var ret string
		return ret
	}
	return *o.Group
}

// GetGroupOk returns a tuple with the Group field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LicenseAccountLicenseData) GetGroupOk() (*string, bool) {
	if o == nil || IsNil(o.Group) {
		return nil, false
	}
	return o.Group, true
}

// HasGroup returns a boolean if a field has been set.
func (o *LicenseAccountLicenseData) HasGroup() bool {
	if o != nil && !IsNil(o.Group) {
		return true
	}

	return false
}

// SetGroup gets a reference to the given string and assigns it to the Group field.
func (o *LicenseAccountLicenseData) SetGroup(v string) {
	o.Group = &v
}

// GetHighestCompliantLicenseTier returns the HighestCompliantLicenseTier field value if set, zero value otherwise.
func (o *LicenseAccountLicenseData) GetHighestCompliantLicenseTier() string {
	if o == nil || IsNil(o.HighestCompliantLicenseTier) {
		var ret string
		return ret
	}
	return *o.HighestCompliantLicenseTier
}

// GetHighestCompliantLicenseTierOk returns a tuple with the HighestCompliantLicenseTier field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LicenseAccountLicenseData) GetHighestCompliantLicenseTierOk() (*string, bool) {
	if o == nil || IsNil(o.HighestCompliantLicenseTier) {
		return nil, false
	}
	return o.HighestCompliantLicenseTier, true
}

// HasHighestCompliantLicenseTier returns a boolean if a field has been set.
func (o *LicenseAccountLicenseData) HasHighestCompliantLicenseTier() bool {
	if o != nil && !IsNil(o.HighestCompliantLicenseTier) {
		return true
	}

	return false
}

// SetHighestCompliantLicenseTier gets a reference to the given string and assigns it to the HighestCompliantLicenseTier field.
func (o *LicenseAccountLicenseData) SetHighestCompliantLicenseTier(v string) {
	o.HighestCompliantLicenseTier = &v
}

// GetLastCssmSync returns the LastCssmSync field value if set, zero value otherwise.
func (o *LicenseAccountLicenseData) GetLastCssmSync() time.Time {
	if o == nil || IsNil(o.LastCssmSync) {
		var ret time.Time
		return ret
	}
	return *o.LastCssmSync
}

// GetLastCssmSyncOk returns a tuple with the LastCssmSync field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LicenseAccountLicenseData) GetLastCssmSyncOk() (*time.Time, bool) {
	if o == nil || IsNil(o.LastCssmSync) {
		return nil, false
	}
	return o.LastCssmSync, true
}

// HasLastCssmSync returns a boolean if a field has been set.
func (o *LicenseAccountLicenseData) HasLastCssmSync() bool {
	if o != nil && !IsNil(o.LastCssmSync) {
		return true
	}

	return false
}

// SetLastCssmSync gets a reference to the given time.Time and assigns it to the LastCssmSync field.
func (o *LicenseAccountLicenseData) SetLastCssmSync(v time.Time) {
	o.LastCssmSync = &v
}

// GetLastRenew returns the LastRenew field value if set, zero value otherwise.
func (o *LicenseAccountLicenseData) GetLastRenew() time.Time {
	if o == nil || IsNil(o.LastRenew) {
		var ret time.Time
		return ret
	}
	return *o.LastRenew
}

// GetLastRenewOk returns a tuple with the LastRenew field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LicenseAccountLicenseData) GetLastRenewOk() (*time.Time, bool) {
	if o == nil || IsNil(o.LastRenew) {
		return nil, false
	}
	return o.LastRenew, true
}

// HasLastRenew returns a boolean if a field has been set.
func (o *LicenseAccountLicenseData) HasLastRenew() bool {
	if o != nil && !IsNil(o.LastRenew) {
		return true
	}

	return false
}

// SetLastRenew gets a reference to the given time.Time and assigns it to the LastRenew field.
func (o *LicenseAccountLicenseData) SetLastRenew(v time.Time) {
	o.LastRenew = &v
}

// GetLastSync returns the LastSync field value if set, zero value otherwise.
func (o *LicenseAccountLicenseData) GetLastSync() time.Time {
	if o == nil || IsNil(o.LastSync) {
		var ret time.Time
		return ret
	}
	return *o.LastSync
}

// GetLastSyncOk returns a tuple with the LastSync field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LicenseAccountLicenseData) GetLastSyncOk() (*time.Time, bool) {
	if o == nil || IsNil(o.LastSync) {
		return nil, false
	}
	return o.LastSync, true
}

// HasLastSync returns a boolean if a field has been set.
func (o *LicenseAccountLicenseData) HasLastSync() bool {
	if o != nil && !IsNil(o.LastSync) {
		return true
	}

	return false
}

// SetLastSync gets a reference to the given time.Time and assigns it to the LastSync field.
func (o *LicenseAccountLicenseData) SetLastSync(v time.Time) {
	o.LastSync = &v
}

// GetLastUpdatedTime returns the LastUpdatedTime field value if set, zero value otherwise.
func (o *LicenseAccountLicenseData) GetLastUpdatedTime() time.Time {
	if o == nil || IsNil(o.LastUpdatedTime) {
		var ret time.Time
		return ret
	}
	return *o.LastUpdatedTime
}

// GetLastUpdatedTimeOk returns a tuple with the LastUpdatedTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LicenseAccountLicenseData) GetLastUpdatedTimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.LastUpdatedTime) {
		return nil, false
	}
	return o.LastUpdatedTime, true
}

// HasLastUpdatedTime returns a boolean if a field has been set.
func (o *LicenseAccountLicenseData) HasLastUpdatedTime() bool {
	if o != nil && !IsNil(o.LastUpdatedTime) {
		return true
	}

	return false
}

// SetLastUpdatedTime gets a reference to the given time.Time and assigns it to the LastUpdatedTime field.
func (o *LicenseAccountLicenseData) SetLastUpdatedTime(v time.Time) {
	o.LastUpdatedTime = &v
}

// GetLicenseState returns the LicenseState field value if set, zero value otherwise.
func (o *LicenseAccountLicenseData) GetLicenseState() string {
	if o == nil || IsNil(o.LicenseState) {
		var ret string
		return ret
	}
	return *o.LicenseState
}

// GetLicenseStateOk returns a tuple with the LicenseState field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LicenseAccountLicenseData) GetLicenseStateOk() (*string, bool) {
	if o == nil || IsNil(o.LicenseState) {
		return nil, false
	}
	return o.LicenseState, true
}

// HasLicenseState returns a boolean if a field has been set.
func (o *LicenseAccountLicenseData) HasLicenseState() bool {
	if o != nil && !IsNil(o.LicenseState) {
		return true
	}

	return false
}

// SetLicenseState gets a reference to the given string and assigns it to the LicenseState field.
func (o *LicenseAccountLicenseData) SetLicenseState(v string) {
	o.LicenseState = &v
}

// GetLicenseTechSupportInfo returns the LicenseTechSupportInfo field value if set, zero value otherwise.
func (o *LicenseAccountLicenseData) GetLicenseTechSupportInfo() string {
	if o == nil || IsNil(o.LicenseTechSupportInfo) {
		var ret string
		return ret
	}
	return *o.LicenseTechSupportInfo
}

// GetLicenseTechSupportInfoOk returns a tuple with the LicenseTechSupportInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LicenseAccountLicenseData) GetLicenseTechSupportInfoOk() (*string, bool) {
	if o == nil || IsNil(o.LicenseTechSupportInfo) {
		return nil, false
	}
	return o.LicenseTechSupportInfo, true
}

// HasLicenseTechSupportInfo returns a boolean if a field has been set.
func (o *LicenseAccountLicenseData) HasLicenseTechSupportInfo() bool {
	if o != nil && !IsNil(o.LicenseTechSupportInfo) {
		return true
	}

	return false
}

// SetLicenseTechSupportInfo gets a reference to the given string and assigns it to the LicenseTechSupportInfo field.
func (o *LicenseAccountLicenseData) SetLicenseTechSupportInfo(v string) {
	o.LicenseTechSupportInfo = &v
}

// GetRegisterExpireTime returns the RegisterExpireTime field value if set, zero value otherwise.
func (o *LicenseAccountLicenseData) GetRegisterExpireTime() string {
	if o == nil || IsNil(o.RegisterExpireTime) {
		var ret string
		return ret
	}
	return *o.RegisterExpireTime
}

// GetRegisterExpireTimeOk returns a tuple with the RegisterExpireTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LicenseAccountLicenseData) GetRegisterExpireTimeOk() (*string, bool) {
	if o == nil || IsNil(o.RegisterExpireTime) {
		return nil, false
	}
	return o.RegisterExpireTime, true
}

// HasRegisterExpireTime returns a boolean if a field has been set.
func (o *LicenseAccountLicenseData) HasRegisterExpireTime() bool {
	if o != nil && !IsNil(o.RegisterExpireTime) {
		return true
	}

	return false
}

// SetRegisterExpireTime gets a reference to the given string and assigns it to the RegisterExpireTime field.
func (o *LicenseAccountLicenseData) SetRegisterExpireTime(v string) {
	o.RegisterExpireTime = &v
}

// GetRegisterInitialTime returns the RegisterInitialTime field value if set, zero value otherwise.
func (o *LicenseAccountLicenseData) GetRegisterInitialTime() string {
	if o == nil || IsNil(o.RegisterInitialTime) {
		var ret string
		return ret
	}
	return *o.RegisterInitialTime
}

// GetRegisterInitialTimeOk returns a tuple with the RegisterInitialTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LicenseAccountLicenseData) GetRegisterInitialTimeOk() (*string, bool) {
	if o == nil || IsNil(o.RegisterInitialTime) {
		return nil, false
	}
	return o.RegisterInitialTime, true
}

// HasRegisterInitialTime returns a boolean if a field has been set.
func (o *LicenseAccountLicenseData) HasRegisterInitialTime() bool {
	if o != nil && !IsNil(o.RegisterInitialTime) {
		return true
	}

	return false
}

// SetRegisterInitialTime gets a reference to the given string and assigns it to the RegisterInitialTime field.
func (o *LicenseAccountLicenseData) SetRegisterInitialTime(v string) {
	o.RegisterInitialTime = &v
}

// GetRegisterNextTime returns the RegisterNextTime field value if set, zero value otherwise.
func (o *LicenseAccountLicenseData) GetRegisterNextTime() string {
	if o == nil || IsNil(o.RegisterNextTime) {
		var ret string
		return ret
	}
	return *o.RegisterNextTime
}

// GetRegisterNextTimeOk returns a tuple with the RegisterNextTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LicenseAccountLicenseData) GetRegisterNextTimeOk() (*string, bool) {
	if o == nil || IsNil(o.RegisterNextTime) {
		return nil, false
	}
	return o.RegisterNextTime, true
}

// HasRegisterNextTime returns a boolean if a field has been set.
func (o *LicenseAccountLicenseData) HasRegisterNextTime() bool {
	if o != nil && !IsNil(o.RegisterNextTime) {
		return true
	}

	return false
}

// SetRegisterNextTime gets a reference to the given string and assigns it to the RegisterNextTime field.
func (o *LicenseAccountLicenseData) SetRegisterNextTime(v string) {
	o.RegisterNextTime = &v
}

// GetRegistrationStatus returns the RegistrationStatus field value if set, zero value otherwise.
func (o *LicenseAccountLicenseData) GetRegistrationStatus() string {
	if o == nil || IsNil(o.RegistrationStatus) {
		var ret string
		return ret
	}
	return *o.RegistrationStatus
}

// GetRegistrationStatusOk returns a tuple with the RegistrationStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LicenseAccountLicenseData) GetRegistrationStatusOk() (*string, bool) {
	if o == nil || IsNil(o.RegistrationStatus) {
		return nil, false
	}
	return o.RegistrationStatus, true
}

// HasRegistrationStatus returns a boolean if a field has been set.
func (o *LicenseAccountLicenseData) HasRegistrationStatus() bool {
	if o != nil && !IsNil(o.RegistrationStatus) {
		return true
	}

	return false
}

// SetRegistrationStatus gets a reference to the given string and assigns it to the RegistrationStatus field.
func (o *LicenseAccountLicenseData) SetRegistrationStatus(v string) {
	o.RegistrationStatus = &v
}

// GetRenewFailureString returns the RenewFailureString field value if set, zero value otherwise.
func (o *LicenseAccountLicenseData) GetRenewFailureString() string {
	if o == nil || IsNil(o.RenewFailureString) {
		var ret string
		return ret
	}
	return *o.RenewFailureString
}

// GetRenewFailureStringOk returns a tuple with the RenewFailureString field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LicenseAccountLicenseData) GetRenewFailureStringOk() (*string, bool) {
	if o == nil || IsNil(o.RenewFailureString) {
		return nil, false
	}
	return o.RenewFailureString, true
}

// HasRenewFailureString returns a boolean if a field has been set.
func (o *LicenseAccountLicenseData) HasRenewFailureString() bool {
	if o != nil && !IsNil(o.RenewFailureString) {
		return true
	}

	return false
}

// SetRenewFailureString gets a reference to the given string and assigns it to the RenewFailureString field.
func (o *LicenseAccountLicenseData) SetRenewFailureString(v string) {
	o.RenewFailureString = &v
}

// GetSmartAccount returns the SmartAccount field value if set, zero value otherwise.
func (o *LicenseAccountLicenseData) GetSmartAccount() string {
	if o == nil || IsNil(o.SmartAccount) {
		var ret string
		return ret
	}
	return *o.SmartAccount
}

// GetSmartAccountOk returns a tuple with the SmartAccount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LicenseAccountLicenseData) GetSmartAccountOk() (*string, bool) {
	if o == nil || IsNil(o.SmartAccount) {
		return nil, false
	}
	return o.SmartAccount, true
}

// HasSmartAccount returns a boolean if a field has been set.
func (o *LicenseAccountLicenseData) HasSmartAccount() bool {
	if o != nil && !IsNil(o.SmartAccount) {
		return true
	}

	return false
}

// SetSmartAccount gets a reference to the given string and assigns it to the SmartAccount field.
func (o *LicenseAccountLicenseData) SetSmartAccount(v string) {
	o.SmartAccount = &v
}

// GetSmartAccountDomain returns the SmartAccountDomain field value if set, zero value otherwise.
func (o *LicenseAccountLicenseData) GetSmartAccountDomain() string {
	if o == nil || IsNil(o.SmartAccountDomain) {
		var ret string
		return ret
	}
	return *o.SmartAccountDomain
}

// GetSmartAccountDomainOk returns a tuple with the SmartAccountDomain field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LicenseAccountLicenseData) GetSmartAccountDomainOk() (*string, bool) {
	if o == nil || IsNil(o.SmartAccountDomain) {
		return nil, false
	}
	return o.SmartAccountDomain, true
}

// HasSmartAccountDomain returns a boolean if a field has been set.
func (o *LicenseAccountLicenseData) HasSmartAccountDomain() bool {
	if o != nil && !IsNil(o.SmartAccountDomain) {
		return true
	}

	return false
}

// SetSmartAccountDomain gets a reference to the given string and assigns it to the SmartAccountDomain field.
func (o *LicenseAccountLicenseData) SetSmartAccountDomain(v string) {
	o.SmartAccountDomain = &v
}

// GetSmartApiEnabled returns the SmartApiEnabled field value if set, zero value otherwise.
func (o *LicenseAccountLicenseData) GetSmartApiEnabled() bool {
	if o == nil || IsNil(o.SmartApiEnabled) {
		var ret bool
		return ret
	}
	return *o.SmartApiEnabled
}

// GetSmartApiEnabledOk returns a tuple with the SmartApiEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LicenseAccountLicenseData) GetSmartApiEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.SmartApiEnabled) {
		return nil, false
	}
	return o.SmartApiEnabled, true
}

// HasSmartApiEnabled returns a boolean if a field has been set.
func (o *LicenseAccountLicenseData) HasSmartApiEnabled() bool {
	if o != nil && !IsNil(o.SmartApiEnabled) {
		return true
	}

	return false
}

// SetSmartApiEnabled gets a reference to the given bool and assigns it to the SmartApiEnabled field.
func (o *LicenseAccountLicenseData) SetSmartApiEnabled(v bool) {
	o.SmartApiEnabled = &v
}

// GetSmartApiSyncStatus returns the SmartApiSyncStatus field value if set, zero value otherwise.
func (o *LicenseAccountLicenseData) GetSmartApiSyncStatus() string {
	if o == nil || IsNil(o.SmartApiSyncStatus) {
		var ret string
		return ret
	}
	return *o.SmartApiSyncStatus
}

// GetSmartApiSyncStatusOk returns a tuple with the SmartApiSyncStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LicenseAccountLicenseData) GetSmartApiSyncStatusOk() (*string, bool) {
	if o == nil || IsNil(o.SmartApiSyncStatus) {
		return nil, false
	}
	return o.SmartApiSyncStatus, true
}

// HasSmartApiSyncStatus returns a boolean if a field has been set.
func (o *LicenseAccountLicenseData) HasSmartApiSyncStatus() bool {
	if o != nil && !IsNil(o.SmartApiSyncStatus) {
		return true
	}

	return false
}

// SetSmartApiSyncStatus gets a reference to the given string and assigns it to the SmartApiSyncStatus field.
func (o *LicenseAccountLicenseData) SetSmartApiSyncStatus(v string) {
	o.SmartApiSyncStatus = &v
}

// GetSyncStatus returns the SyncStatus field value if set, zero value otherwise.
func (o *LicenseAccountLicenseData) GetSyncStatus() string {
	if o == nil || IsNil(o.SyncStatus) {
		var ret string
		return ret
	}
	return *o.SyncStatus
}

// GetSyncStatusOk returns a tuple with the SyncStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LicenseAccountLicenseData) GetSyncStatusOk() (*string, bool) {
	if o == nil || IsNil(o.SyncStatus) {
		return nil, false
	}
	return o.SyncStatus, true
}

// HasSyncStatus returns a boolean if a field has been set.
func (o *LicenseAccountLicenseData) HasSyncStatus() bool {
	if o != nil && !IsNil(o.SyncStatus) {
		return true
	}

	return false
}

// SetSyncStatus gets a reference to the given string and assigns it to the SyncStatus field.
func (o *LicenseAccountLicenseData) SetSyncStatus(v string) {
	o.SyncStatus = &v
}

// GetVirtualAccount returns the VirtualAccount field value if set, zero value otherwise.
func (o *LicenseAccountLicenseData) GetVirtualAccount() string {
	if o == nil || IsNil(o.VirtualAccount) {
		var ret string
		return ret
	}
	return *o.VirtualAccount
}

// GetVirtualAccountOk returns a tuple with the VirtualAccount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LicenseAccountLicenseData) GetVirtualAccountOk() (*string, bool) {
	if o == nil || IsNil(o.VirtualAccount) {
		return nil, false
	}
	return o.VirtualAccount, true
}

// HasVirtualAccount returns a boolean if a field has been set.
func (o *LicenseAccountLicenseData) HasVirtualAccount() bool {
	if o != nil && !IsNil(o.VirtualAccount) {
		return true
	}

	return false
}

// SetVirtualAccount gets a reference to the given string and assigns it to the VirtualAccount field.
func (o *LicenseAccountLicenseData) SetVirtualAccount(v string) {
	o.VirtualAccount = &v
}

// GetAccount returns the Account field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *LicenseAccountLicenseData) GetAccount() IamAccountRelationship {
	if o == nil || IsNil(o.Account.Get()) {
		var ret IamAccountRelationship
		return ret
	}
	return *o.Account.Get()
}

// GetAccountOk returns a tuple with the Account field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *LicenseAccountLicenseData) GetAccountOk() (*IamAccountRelationship, bool) {
	if o == nil {
		return nil, false
	}
	return o.Account.Get(), o.Account.IsSet()
}

// HasAccount returns a boolean if a field has been set.
func (o *LicenseAccountLicenseData) HasAccount() bool {
	if o != nil && o.Account.IsSet() {
		return true
	}

	return false
}

// SetAccount gets a reference to the given NullableIamAccountRelationship and assigns it to the Account field.
func (o *LicenseAccountLicenseData) SetAccount(v IamAccountRelationship) {
	o.Account.Set(&v)
}

// SetAccountNil sets the value for Account to be an explicit nil
func (o *LicenseAccountLicenseData) SetAccountNil() {
	o.Account.Set(nil)
}

// UnsetAccount ensures that no value is present for Account, not even an explicit nil
func (o *LicenseAccountLicenseData) UnsetAccount() {
	o.Account.Unset()
}

// GetCustomerOp returns the CustomerOp field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *LicenseAccountLicenseData) GetCustomerOp() LicenseCustomerOpRelationship {
	if o == nil || IsNil(o.CustomerOp.Get()) {
		var ret LicenseCustomerOpRelationship
		return ret
	}
	return *o.CustomerOp.Get()
}

// GetCustomerOpOk returns a tuple with the CustomerOp field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *LicenseAccountLicenseData) GetCustomerOpOk() (*LicenseCustomerOpRelationship, bool) {
	if o == nil {
		return nil, false
	}
	return o.CustomerOp.Get(), o.CustomerOp.IsSet()
}

// HasCustomerOp returns a boolean if a field has been set.
func (o *LicenseAccountLicenseData) HasCustomerOp() bool {
	if o != nil && o.CustomerOp.IsSet() {
		return true
	}

	return false
}

// SetCustomerOp gets a reference to the given NullableLicenseCustomerOpRelationship and assigns it to the CustomerOp field.
func (o *LicenseAccountLicenseData) SetCustomerOp(v LicenseCustomerOpRelationship) {
	o.CustomerOp.Set(&v)
}

// SetCustomerOpNil sets the value for CustomerOp to be an explicit nil
func (o *LicenseAccountLicenseData) SetCustomerOpNil() {
	o.CustomerOp.Set(nil)
}

// UnsetCustomerOp ensures that no value is present for CustomerOp, not even an explicit nil
func (o *LicenseAccountLicenseData) UnsetCustomerOp() {
	o.CustomerOp.Unset()
}

// GetIksCustomerOp returns the IksCustomerOp field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *LicenseAccountLicenseData) GetIksCustomerOp() LicenseIksCustomerOpRelationship {
	if o == nil || IsNil(o.IksCustomerOp.Get()) {
		var ret LicenseIksCustomerOpRelationship
		return ret
	}
	return *o.IksCustomerOp.Get()
}

// GetIksCustomerOpOk returns a tuple with the IksCustomerOp field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *LicenseAccountLicenseData) GetIksCustomerOpOk() (*LicenseIksCustomerOpRelationship, bool) {
	if o == nil {
		return nil, false
	}
	return o.IksCustomerOp.Get(), o.IksCustomerOp.IsSet()
}

// HasIksCustomerOp returns a boolean if a field has been set.
func (o *LicenseAccountLicenseData) HasIksCustomerOp() bool {
	if o != nil && o.IksCustomerOp.IsSet() {
		return true
	}

	return false
}

// SetIksCustomerOp gets a reference to the given NullableLicenseIksCustomerOpRelationship and assigns it to the IksCustomerOp field.
func (o *LicenseAccountLicenseData) SetIksCustomerOp(v LicenseIksCustomerOpRelationship) {
	o.IksCustomerOp.Set(&v)
}

// SetIksCustomerOpNil sets the value for IksCustomerOp to be an explicit nil
func (o *LicenseAccountLicenseData) SetIksCustomerOpNil() {
	o.IksCustomerOp.Set(nil)
}

// UnsetIksCustomerOp ensures that no value is present for IksCustomerOp, not even an explicit nil
func (o *LicenseAccountLicenseData) UnsetIksCustomerOp() {
	o.IksCustomerOp.Unset()
}

// GetIksLicenseCount returns the IksLicenseCount field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *LicenseAccountLicenseData) GetIksLicenseCount() LicenseIksLicenseCountRelationship {
	if o == nil || IsNil(o.IksLicenseCount.Get()) {
		var ret LicenseIksLicenseCountRelationship
		return ret
	}
	return *o.IksLicenseCount.Get()
}

// GetIksLicenseCountOk returns a tuple with the IksLicenseCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *LicenseAccountLicenseData) GetIksLicenseCountOk() (*LicenseIksLicenseCountRelationship, bool) {
	if o == nil {
		return nil, false
	}
	return o.IksLicenseCount.Get(), o.IksLicenseCount.IsSet()
}

// HasIksLicenseCount returns a boolean if a field has been set.
func (o *LicenseAccountLicenseData) HasIksLicenseCount() bool {
	if o != nil && o.IksLicenseCount.IsSet() {
		return true
	}

	return false
}

// SetIksLicenseCount gets a reference to the given NullableLicenseIksLicenseCountRelationship and assigns it to the IksLicenseCount field.
func (o *LicenseAccountLicenseData) SetIksLicenseCount(v LicenseIksLicenseCountRelationship) {
	o.IksLicenseCount.Set(&v)
}

// SetIksLicenseCountNil sets the value for IksLicenseCount to be an explicit nil
func (o *LicenseAccountLicenseData) SetIksLicenseCountNil() {
	o.IksLicenseCount.Set(nil)
}

// UnsetIksLicenseCount ensures that no value is present for IksLicenseCount, not even an explicit nil
func (o *LicenseAccountLicenseData) UnsetIksLicenseCount() {
	o.IksLicenseCount.Unset()
}

// GetIncCustomerOp returns the IncCustomerOp field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *LicenseAccountLicenseData) GetIncCustomerOp() LicenseIncCustomerOpRelationship {
	if o == nil || IsNil(o.IncCustomerOp.Get()) {
		var ret LicenseIncCustomerOpRelationship
		return ret
	}
	return *o.IncCustomerOp.Get()
}

// GetIncCustomerOpOk returns a tuple with the IncCustomerOp field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *LicenseAccountLicenseData) GetIncCustomerOpOk() (*LicenseIncCustomerOpRelationship, bool) {
	if o == nil {
		return nil, false
	}
	return o.IncCustomerOp.Get(), o.IncCustomerOp.IsSet()
}

// HasIncCustomerOp returns a boolean if a field has been set.
func (o *LicenseAccountLicenseData) HasIncCustomerOp() bool {
	if o != nil && o.IncCustomerOp.IsSet() {
		return true
	}

	return false
}

// SetIncCustomerOp gets a reference to the given NullableLicenseIncCustomerOpRelationship and assigns it to the IncCustomerOp field.
func (o *LicenseAccountLicenseData) SetIncCustomerOp(v LicenseIncCustomerOpRelationship) {
	o.IncCustomerOp.Set(&v)
}

// SetIncCustomerOpNil sets the value for IncCustomerOp to be an explicit nil
func (o *LicenseAccountLicenseData) SetIncCustomerOpNil() {
	o.IncCustomerOp.Set(nil)
}

// UnsetIncCustomerOp ensures that no value is present for IncCustomerOp, not even an explicit nil
func (o *LicenseAccountLicenseData) UnsetIncCustomerOp() {
	o.IncCustomerOp.Unset()
}

// GetIncLicenseCount returns the IncLicenseCount field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *LicenseAccountLicenseData) GetIncLicenseCount() LicenseIncLicenseCountRelationship {
	if o == nil || IsNil(o.IncLicenseCount.Get()) {
		var ret LicenseIncLicenseCountRelationship
		return ret
	}
	return *o.IncLicenseCount.Get()
}

// GetIncLicenseCountOk returns a tuple with the IncLicenseCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *LicenseAccountLicenseData) GetIncLicenseCountOk() (*LicenseIncLicenseCountRelationship, bool) {
	if o == nil {
		return nil, false
	}
	return o.IncLicenseCount.Get(), o.IncLicenseCount.IsSet()
}

// HasIncLicenseCount returns a boolean if a field has been set.
func (o *LicenseAccountLicenseData) HasIncLicenseCount() bool {
	if o != nil && o.IncLicenseCount.IsSet() {
		return true
	}

	return false
}

// SetIncLicenseCount gets a reference to the given NullableLicenseIncLicenseCountRelationship and assigns it to the IncLicenseCount field.
func (o *LicenseAccountLicenseData) SetIncLicenseCount(v LicenseIncLicenseCountRelationship) {
	o.IncLicenseCount.Set(&v)
}

// SetIncLicenseCountNil sets the value for IncLicenseCount to be an explicit nil
func (o *LicenseAccountLicenseData) SetIncLicenseCountNil() {
	o.IncLicenseCount.Set(nil)
}

// UnsetIncLicenseCount ensures that no value is present for IncLicenseCount, not even an explicit nil
func (o *LicenseAccountLicenseData) UnsetIncLicenseCount() {
	o.IncLicenseCount.Unset()
}

// GetIwoCustomerOp returns the IwoCustomerOp field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *LicenseAccountLicenseData) GetIwoCustomerOp() LicenseIwoCustomerOpRelationship {
	if o == nil || IsNil(o.IwoCustomerOp.Get()) {
		var ret LicenseIwoCustomerOpRelationship
		return ret
	}
	return *o.IwoCustomerOp.Get()
}

// GetIwoCustomerOpOk returns a tuple with the IwoCustomerOp field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *LicenseAccountLicenseData) GetIwoCustomerOpOk() (*LicenseIwoCustomerOpRelationship, bool) {
	if o == nil {
		return nil, false
	}
	return o.IwoCustomerOp.Get(), o.IwoCustomerOp.IsSet()
}

// HasIwoCustomerOp returns a boolean if a field has been set.
func (o *LicenseAccountLicenseData) HasIwoCustomerOp() bool {
	if o != nil && o.IwoCustomerOp.IsSet() {
		return true
	}

	return false
}

// SetIwoCustomerOp gets a reference to the given NullableLicenseIwoCustomerOpRelationship and assigns it to the IwoCustomerOp field.
func (o *LicenseAccountLicenseData) SetIwoCustomerOp(v LicenseIwoCustomerOpRelationship) {
	o.IwoCustomerOp.Set(&v)
}

// SetIwoCustomerOpNil sets the value for IwoCustomerOp to be an explicit nil
func (o *LicenseAccountLicenseData) SetIwoCustomerOpNil() {
	o.IwoCustomerOp.Set(nil)
}

// UnsetIwoCustomerOp ensures that no value is present for IwoCustomerOp, not even an explicit nil
func (o *LicenseAccountLicenseData) UnsetIwoCustomerOp() {
	o.IwoCustomerOp.Unset()
}

// GetIwoLicenseCount returns the IwoLicenseCount field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *LicenseAccountLicenseData) GetIwoLicenseCount() LicenseIwoLicenseCountRelationship {
	if o == nil || IsNil(o.IwoLicenseCount.Get()) {
		var ret LicenseIwoLicenseCountRelationship
		return ret
	}
	return *o.IwoLicenseCount.Get()
}

// GetIwoLicenseCountOk returns a tuple with the IwoLicenseCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *LicenseAccountLicenseData) GetIwoLicenseCountOk() (*LicenseIwoLicenseCountRelationship, bool) {
	if o == nil {
		return nil, false
	}
	return o.IwoLicenseCount.Get(), o.IwoLicenseCount.IsSet()
}

// HasIwoLicenseCount returns a boolean if a field has been set.
func (o *LicenseAccountLicenseData) HasIwoLicenseCount() bool {
	if o != nil && o.IwoLicenseCount.IsSet() {
		return true
	}

	return false
}

// SetIwoLicenseCount gets a reference to the given NullableLicenseIwoLicenseCountRelationship and assigns it to the IwoLicenseCount field.
func (o *LicenseAccountLicenseData) SetIwoLicenseCount(v LicenseIwoLicenseCountRelationship) {
	o.IwoLicenseCount.Set(&v)
}

// SetIwoLicenseCountNil sets the value for IwoLicenseCount to be an explicit nil
func (o *LicenseAccountLicenseData) SetIwoLicenseCountNil() {
	o.IwoLicenseCount.Set(nil)
}

// UnsetIwoLicenseCount ensures that no value is present for IwoLicenseCount, not even an explicit nil
func (o *LicenseAccountLicenseData) UnsetIwoLicenseCount() {
	o.IwoLicenseCount.Unset()
}

// GetLicenseInfoView returns the LicenseInfoView field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *LicenseAccountLicenseData) GetLicenseInfoView() LicenseLicenseInfoViewRelationship {
	if o == nil || IsNil(o.LicenseInfoView.Get()) {
		var ret LicenseLicenseInfoViewRelationship
		return ret
	}
	return *o.LicenseInfoView.Get()
}

// GetLicenseInfoViewOk returns a tuple with the LicenseInfoView field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *LicenseAccountLicenseData) GetLicenseInfoViewOk() (*LicenseLicenseInfoViewRelationship, bool) {
	if o == nil {
		return nil, false
	}
	return o.LicenseInfoView.Get(), o.LicenseInfoView.IsSet()
}

// HasLicenseInfoView returns a boolean if a field has been set.
func (o *LicenseAccountLicenseData) HasLicenseInfoView() bool {
	if o != nil && o.LicenseInfoView.IsSet() {
		return true
	}

	return false
}

// SetLicenseInfoView gets a reference to the given NullableLicenseLicenseInfoViewRelationship and assigns it to the LicenseInfoView field.
func (o *LicenseAccountLicenseData) SetLicenseInfoView(v LicenseLicenseInfoViewRelationship) {
	o.LicenseInfoView.Set(&v)
}

// SetLicenseInfoViewNil sets the value for LicenseInfoView to be an explicit nil
func (o *LicenseAccountLicenseData) SetLicenseInfoViewNil() {
	o.LicenseInfoView.Set(nil)
}

// UnsetLicenseInfoView ensures that no value is present for LicenseInfoView, not even an explicit nil
func (o *LicenseAccountLicenseData) UnsetLicenseInfoView() {
	o.LicenseInfoView.Unset()
}

// GetLicenseRegistrationStatus returns the LicenseRegistrationStatus field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *LicenseAccountLicenseData) GetLicenseRegistrationStatus() LicenseLicenseRegistrationStatusRelationship {
	if o == nil || IsNil(o.LicenseRegistrationStatus.Get()) {
		var ret LicenseLicenseRegistrationStatusRelationship
		return ret
	}
	return *o.LicenseRegistrationStatus.Get()
}

// GetLicenseRegistrationStatusOk returns a tuple with the LicenseRegistrationStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *LicenseAccountLicenseData) GetLicenseRegistrationStatusOk() (*LicenseLicenseRegistrationStatusRelationship, bool) {
	if o == nil {
		return nil, false
	}
	return o.LicenseRegistrationStatus.Get(), o.LicenseRegistrationStatus.IsSet()
}

// HasLicenseRegistrationStatus returns a boolean if a field has been set.
func (o *LicenseAccountLicenseData) HasLicenseRegistrationStatus() bool {
	if o != nil && o.LicenseRegistrationStatus.IsSet() {
		return true
	}

	return false
}

// SetLicenseRegistrationStatus gets a reference to the given NullableLicenseLicenseRegistrationStatusRelationship and assigns it to the LicenseRegistrationStatus field.
func (o *LicenseAccountLicenseData) SetLicenseRegistrationStatus(v LicenseLicenseRegistrationStatusRelationship) {
	o.LicenseRegistrationStatus.Set(&v)
}

// SetLicenseRegistrationStatusNil sets the value for LicenseRegistrationStatus to be an explicit nil
func (o *LicenseAccountLicenseData) SetLicenseRegistrationStatusNil() {
	o.LicenseRegistrationStatus.Set(nil)
}

// UnsetLicenseRegistrationStatus ensures that no value is present for LicenseRegistrationStatus, not even an explicit nil
func (o *LicenseAccountLicenseData) UnsetLicenseRegistrationStatus() {
	o.LicenseRegistrationStatus.Unset()
}

// GetLicenseinfos returns the Licenseinfos field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *LicenseAccountLicenseData) GetLicenseinfos() []LicenseLicenseInfoRelationship {
	if o == nil {
		var ret []LicenseLicenseInfoRelationship
		return ret
	}
	return o.Licenseinfos
}

// GetLicenseinfosOk returns a tuple with the Licenseinfos field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *LicenseAccountLicenseData) GetLicenseinfosOk() ([]LicenseLicenseInfoRelationship, bool) {
	if o == nil || IsNil(o.Licenseinfos) {
		return nil, false
	}
	return o.Licenseinfos, true
}

// HasLicenseinfos returns a boolean if a field has been set.
func (o *LicenseAccountLicenseData) HasLicenseinfos() bool {
	if o != nil && !IsNil(o.Licenseinfos) {
		return true
	}

	return false
}

// SetLicenseinfos gets a reference to the given []LicenseLicenseInfoRelationship and assigns it to the Licenseinfos field.
func (o *LicenseAccountLicenseData) SetLicenseinfos(v []LicenseLicenseInfoRelationship) {
	o.Licenseinfos = v
}

// GetSmartlicenseToken returns the SmartlicenseToken field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *LicenseAccountLicenseData) GetSmartlicenseToken() LicenseSmartlicenseTokenRelationship {
	if o == nil || IsNil(o.SmartlicenseToken.Get()) {
		var ret LicenseSmartlicenseTokenRelationship
		return ret
	}
	return *o.SmartlicenseToken.Get()
}

// GetSmartlicenseTokenOk returns a tuple with the SmartlicenseToken field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *LicenseAccountLicenseData) GetSmartlicenseTokenOk() (*LicenseSmartlicenseTokenRelationship, bool) {
	if o == nil {
		return nil, false
	}
	return o.SmartlicenseToken.Get(), o.SmartlicenseToken.IsSet()
}

// HasSmartlicenseToken returns a boolean if a field has been set.
func (o *LicenseAccountLicenseData) HasSmartlicenseToken() bool {
	if o != nil && o.SmartlicenseToken.IsSet() {
		return true
	}

	return false
}

// SetSmartlicenseToken gets a reference to the given NullableLicenseSmartlicenseTokenRelationship and assigns it to the SmartlicenseToken field.
func (o *LicenseAccountLicenseData) SetSmartlicenseToken(v LicenseSmartlicenseTokenRelationship) {
	o.SmartlicenseToken.Set(&v)
}

// SetSmartlicenseTokenNil sets the value for SmartlicenseToken to be an explicit nil
func (o *LicenseAccountLicenseData) SetSmartlicenseTokenNil() {
	o.SmartlicenseToken.Set(nil)
}

// UnsetSmartlicenseToken ensures that no value is present for SmartlicenseToken, not even an explicit nil
func (o *LicenseAccountLicenseData) UnsetSmartlicenseToken() {
	o.SmartlicenseToken.Unset()
}

func (o LicenseAccountLicenseData) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LicenseAccountLicenseData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	serializedMoBaseMo, errMoBaseMo := json.Marshal(o.MoBaseMo)
	if errMoBaseMo != nil {
		return map[string]interface{}{}, errMoBaseMo
	}
	errMoBaseMo = json.Unmarshal([]byte(serializedMoBaseMo), &toSerialize)
	if errMoBaseMo != nil {
		return map[string]interface{}{}, errMoBaseMo
	}
	if _, exists := toSerialize["ClassId"]; !exists {
		toSerialize["ClassId"] = o.GetDefaultClassId()
	}
	toSerialize["ClassId"] = o.ClassId
	if _, exists := toSerialize["ObjectType"]; !exists {
		toSerialize["ObjectType"] = o.GetDefaultObjectType()
	}
	toSerialize["ObjectType"] = o.ObjectType
	if !IsNil(o.AccountId) {
		toSerialize["AccountId"] = o.AccountId
	}
	if !IsNil(o.AgentData) {
		toSerialize["AgentData"] = o.AgentData
	}
	if !IsNil(o.AuthExpireTime) {
		toSerialize["AuthExpireTime"] = o.AuthExpireTime
	}
	if !IsNil(o.AuthInitialTime) {
		toSerialize["AuthInitialTime"] = o.AuthInitialTime
	}
	if !IsNil(o.AuthNextTime) {
		toSerialize["AuthNextTime"] = o.AuthNextTime
	}
	if !IsNil(o.Category) {
		toSerialize["Category"] = o.Category
	}
	if !IsNil(o.DefaultLicenseType) {
		toSerialize["DefaultLicenseType"] = o.DefaultLicenseType
	}
	if !IsNil(o.DefaultLicenseTypeNewerModels) {
		toSerialize["DefaultLicenseTypeNewerModels"] = o.DefaultLicenseTypeNewerModels
	}
	if !IsNil(o.ErrorDesc) {
		toSerialize["ErrorDesc"] = o.ErrorDesc
	}
	if !IsNil(o.Group) {
		toSerialize["Group"] = o.Group
	}
	if !IsNil(o.HighestCompliantLicenseTier) {
		toSerialize["HighestCompliantLicenseTier"] = o.HighestCompliantLicenseTier
	}
	if !IsNil(o.LastCssmSync) {
		toSerialize["LastCssmSync"] = o.LastCssmSync
	}
	if !IsNil(o.LastRenew) {
		toSerialize["LastRenew"] = o.LastRenew
	}
	if !IsNil(o.LastSync) {
		toSerialize["LastSync"] = o.LastSync
	}
	if !IsNil(o.LastUpdatedTime) {
		toSerialize["LastUpdatedTime"] = o.LastUpdatedTime
	}
	if !IsNil(o.LicenseState) {
		toSerialize["LicenseState"] = o.LicenseState
	}
	if !IsNil(o.LicenseTechSupportInfo) {
		toSerialize["LicenseTechSupportInfo"] = o.LicenseTechSupportInfo
	}
	if !IsNil(o.RegisterExpireTime) {
		toSerialize["RegisterExpireTime"] = o.RegisterExpireTime
	}
	if !IsNil(o.RegisterInitialTime) {
		toSerialize["RegisterInitialTime"] = o.RegisterInitialTime
	}
	if !IsNil(o.RegisterNextTime) {
		toSerialize["RegisterNextTime"] = o.RegisterNextTime
	}
	if !IsNil(o.RegistrationStatus) {
		toSerialize["RegistrationStatus"] = o.RegistrationStatus
	}
	if !IsNil(o.RenewFailureString) {
		toSerialize["RenewFailureString"] = o.RenewFailureString
	}
	if !IsNil(o.SmartAccount) {
		toSerialize["SmartAccount"] = o.SmartAccount
	}
	if !IsNil(o.SmartAccountDomain) {
		toSerialize["SmartAccountDomain"] = o.SmartAccountDomain
	}
	if !IsNil(o.SmartApiEnabled) {
		toSerialize["SmartApiEnabled"] = o.SmartApiEnabled
	}
	if !IsNil(o.SmartApiSyncStatus) {
		toSerialize["SmartApiSyncStatus"] = o.SmartApiSyncStatus
	}
	if !IsNil(o.SyncStatus) {
		toSerialize["SyncStatus"] = o.SyncStatus
	}
	if !IsNil(o.VirtualAccount) {
		toSerialize["VirtualAccount"] = o.VirtualAccount
	}
	if o.Account.IsSet() {
		toSerialize["Account"] = o.Account.Get()
	}
	if o.CustomerOp.IsSet() {
		toSerialize["CustomerOp"] = o.CustomerOp.Get()
	}
	if o.IksCustomerOp.IsSet() {
		toSerialize["IksCustomerOp"] = o.IksCustomerOp.Get()
	}
	if o.IksLicenseCount.IsSet() {
		toSerialize["IksLicenseCount"] = o.IksLicenseCount.Get()
	}
	if o.IncCustomerOp.IsSet() {
		toSerialize["IncCustomerOp"] = o.IncCustomerOp.Get()
	}
	if o.IncLicenseCount.IsSet() {
		toSerialize["IncLicenseCount"] = o.IncLicenseCount.Get()
	}
	if o.IwoCustomerOp.IsSet() {
		toSerialize["IwoCustomerOp"] = o.IwoCustomerOp.Get()
	}
	if o.IwoLicenseCount.IsSet() {
		toSerialize["IwoLicenseCount"] = o.IwoLicenseCount.Get()
	}
	if o.LicenseInfoView.IsSet() {
		toSerialize["LicenseInfoView"] = o.LicenseInfoView.Get()
	}
	if o.LicenseRegistrationStatus.IsSet() {
		toSerialize["LicenseRegistrationStatus"] = o.LicenseRegistrationStatus.Get()
	}
	if o.Licenseinfos != nil {
		toSerialize["Licenseinfos"] = o.Licenseinfos
	}
	if o.SmartlicenseToken.IsSet() {
		toSerialize["SmartlicenseToken"] = o.SmartlicenseToken.Get()
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *LicenseAccountLicenseData) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"ClassId",
		"ObjectType",
	}

	// defaultValueFuncMap captures the default values for required properties.
	// These values are used when required properties are missing from the payload.
	defaultValueFuncMap := map[string]func() interface{}{
		"ClassId":    o.GetDefaultClassId,
		"ObjectType": o.GetDefaultObjectType,
	}
	var defaultValueApplied bool
	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			if _, ok := defaultValueFuncMap[requiredProperty]; ok {
				allProperties[requiredProperty] = defaultValueFuncMap[requiredProperty]()
				defaultValueApplied = true
			}
		}
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	if defaultValueApplied {
		data, err = json.Marshal(allProperties)
		if err != nil {
			return err
		}
	}
	type LicenseAccountLicenseDataWithoutEmbeddedStruct struct {
		// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.
		ClassId string `json:"ClassId"`
		// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
		ObjectType string `json:"ObjectType"`
		// Root user's ID of the account.
		AccountId *string `json:"AccountId,omitempty"`
		// Agent trusted store data.
		AgentData *string `json:"AgentData,omitempty"`
		// Authorization expiration time.
		AuthExpireTime *string `json:"AuthExpireTime,omitempty"`
		// Intial authorization time.
		AuthInitialTime *string `json:"AuthInitialTime,omitempty"`
		// Next time for the authorization.
		AuthNextTime *string `json:"AuthNextTime,omitempty"`
		// Account license data category name.
		Category *string `json:"Category,omitempty"`
		// Default license tier set by the user. * `Base` - Base as a License type. It is default license type. * `Essential` - Essential as a License type. * `Standard` - Standard as a License type. * `Advantage` - Advantage as a License type. * `Premier` - Premier as a License type. * `IWO-Essential` - IWO-Essential as a License type. * `IWO-Advantage` - IWO-Advantage as a License type. * `IWO-Premier` - IWO-Premier as a License type. * `IKS-Advantage` - IKS-Advantage as a License type. * `INC-Premier-1GFixed` - Premier 1G Fixed license tier for Intersight Nexus Cloud. * `INC-Premier-10GFixed` - Premier 10G Fixed license tier for Intersight Nexus Cloud. * `INC-Premier-100GFixed` - Premier 100G Fixed license tier for Intersight Nexus Cloud. * `INC-Premier-Mod4Slot` - Premier Modular 4 slot license tier for Intersight Nexus Cloud. * `INC-Premier-Mod8Slot` - Premier Modular 8 slot license tier for Intersight Nexus Cloud. * `INC-Premier-D2OpsFixed` - Premier D2Ops fixed license tier for Intersight Nexus Cloud. * `INC-Premier-D2OpsMod` - Premier D2Ops modular license tier for Intersight Nexus Cloud. * `INC-Premier-CentralizedMod8Slot` - Premier modular license tier of switch type CentralizedMod8Slot for Intersight Nexus Cloud. * `INC-Premier-DistributedMod8Slot` - Premier modular license tier of switch type DistributedMod8Slot for Intersight Nexus Cloud. * `IntersightTrial` - Virtual dummy license type to indicate trial. Used for UI display of trial mode Intersight tiers. * `IWOTrial` - Virtual dummy license type to indicate trial. Used for UI display of trial mode IKS tiers. * `IKSTrial` - Virtual dummy license type to indicate trial. Used for UI display of trial mode IWO tiers. * `INCTrial` - Virtual dummy license type to indicate trial. Used for UI display of trial mode Nexus tiers.
		DefaultLicenseType *string `json:"DefaultLicenseType,omitempty"`
		// Default license tier for newer model M7+ servers set by the user. * `Base` - Base as a License type. It is default license type. * `Essential` - Essential as a License type. * `Standard` - Standard as a License type. * `Advantage` - Advantage as a License type. * `Premier` - Premier as a License type. * `IWO-Essential` - IWO-Essential as a License type. * `IWO-Advantage` - IWO-Advantage as a License type. * `IWO-Premier` - IWO-Premier as a License type. * `IKS-Advantage` - IKS-Advantage as a License type. * `INC-Premier-1GFixed` - Premier 1G Fixed license tier for Intersight Nexus Cloud. * `INC-Premier-10GFixed` - Premier 10G Fixed license tier for Intersight Nexus Cloud. * `INC-Premier-100GFixed` - Premier 100G Fixed license tier for Intersight Nexus Cloud. * `INC-Premier-Mod4Slot` - Premier Modular 4 slot license tier for Intersight Nexus Cloud. * `INC-Premier-Mod8Slot` - Premier Modular 8 slot license tier for Intersight Nexus Cloud. * `INC-Premier-D2OpsFixed` - Premier D2Ops fixed license tier for Intersight Nexus Cloud. * `INC-Premier-D2OpsMod` - Premier D2Ops modular license tier for Intersight Nexus Cloud. * `INC-Premier-CentralizedMod8Slot` - Premier modular license tier of switch type CentralizedMod8Slot for Intersight Nexus Cloud. * `INC-Premier-DistributedMod8Slot` - Premier modular license tier of switch type DistributedMod8Slot for Intersight Nexus Cloud. * `IntersightTrial` - Virtual dummy license type to indicate trial. Used for UI display of trial mode Intersight tiers. * `IWOTrial` - Virtual dummy license type to indicate trial. Used for UI display of trial mode IKS tiers. * `IKSTrial` - Virtual dummy license type to indicate trial. Used for UI display of trial mode IWO tiers. * `INCTrial` - Virtual dummy license type to indicate trial. Used for UI display of trial mode Nexus tiers.
		DefaultLicenseTypeNewerModels *string `json:"DefaultLicenseTypeNewerModels,omitempty"`
		// The detailed error message when there is any error related to license sync of this account.
		ErrorDesc *string `json:"ErrorDesc,omitempty"`
		// Account license data group name.
		Group *string `json:"Group,omitempty"`
		// The highest license tier which is in compliant of this account. * `Base` - Base as a License type. It is default license type. * `Essential` - Essential as a License type. * `Standard` - Standard as a License type. * `Advantage` - Advantage as a License type. * `Premier` - Premier as a License type. * `IWO-Essential` - IWO-Essential as a License type. * `IWO-Advantage` - IWO-Advantage as a License type. * `IWO-Premier` - IWO-Premier as a License type. * `IKS-Advantage` - IKS-Advantage as a License type. * `INC-Premier-1GFixed` - Premier 1G Fixed license tier for Intersight Nexus Cloud. * `INC-Premier-10GFixed` - Premier 10G Fixed license tier for Intersight Nexus Cloud. * `INC-Premier-100GFixed` - Premier 100G Fixed license tier for Intersight Nexus Cloud. * `INC-Premier-Mod4Slot` - Premier Modular 4 slot license tier for Intersight Nexus Cloud. * `INC-Premier-Mod8Slot` - Premier Modular 8 slot license tier for Intersight Nexus Cloud. * `INC-Premier-D2OpsFixed` - Premier D2Ops fixed license tier for Intersight Nexus Cloud. * `INC-Premier-D2OpsMod` - Premier D2Ops modular license tier for Intersight Nexus Cloud. * `INC-Premier-CentralizedMod8Slot` - Premier modular license tier of switch type CentralizedMod8Slot for Intersight Nexus Cloud. * `INC-Premier-DistributedMod8Slot` - Premier modular license tier of switch type DistributedMod8Slot for Intersight Nexus Cloud. * `IntersightTrial` - Virtual dummy license type to indicate trial. Used for UI display of trial mode Intersight tiers. * `IWOTrial` - Virtual dummy license type to indicate trial. Used for UI display of trial mode IKS tiers. * `IKSTrial` - Virtual dummy license type to indicate trial. Used for UI display of trial mode IWO tiers. * `INCTrial` - Virtual dummy license type to indicate trial. Used for UI display of trial mode Nexus tiers.
		HighestCompliantLicenseTier *string `json:"HighestCompliantLicenseTier,omitempty"`
		// Specifies last sync time with CSSM.
		LastCssmSync *time.Time `json:"LastCssmSync,omitempty"`
		// Specifies last certificate renew time with SA.
		LastRenew *time.Time `json:"LastRenew,omitempty"`
		// Specifies last sync time with SA.
		LastSync *time.Time `json:"LastSync,omitempty"`
		// Record's last update datetime.
		LastUpdatedTime *time.Time `json:"LastUpdatedTime,omitempty"`
		// Aggregrated mode for the agent.
		LicenseState *string `json:"LicenseState,omitempty"`
		// Tech-support info of a smart-agent.
		LicenseTechSupportInfo *string `json:"LicenseTechSupportInfo,omitempty"`
		// Registration exipiration time.
		RegisterExpireTime *string `json:"RegisterExpireTime,omitempty"`
		// Initial time of registration.
		RegisterInitialTime *string `json:"RegisterInitialTime,omitempty"`
		// Next time for the license registration.
		RegisterNextTime *string `json:"RegisterNextTime,omitempty"`
		// Registration status of a smart-agent.
		RegistrationStatus *string `json:"RegistrationStatus,omitempty"`
		// License renewal failure message.
		RenewFailureString *string `json:"RenewFailureString,omitempty"`
		// Name of the smart account.
		SmartAccount *string `json:"SmartAccount,omitempty"`
		// Domain Name of the smart account.
		SmartAccountDomain *string `json:"SmartAccountDomain,omitempty"`
		// Indicate whether API integration is enabled.
		SmartApiEnabled *bool `json:"SmartApiEnabled,omitempty"`
		// The detailed error message when there is any smart API sync error related to this account.
		SmartApiSyncStatus *string `json:"SmartApiSyncStatus,omitempty"`
		// Current sync status for the account.
		SyncStatus *string `json:"SyncStatus,omitempty"`
		// Name of the virtual account.
		VirtualAccount            *string                                              `json:"VirtualAccount,omitempty"`
		Account                   NullableIamAccountRelationship                       `json:"Account,omitempty"`
		CustomerOp                NullableLicenseCustomerOpRelationship                `json:"CustomerOp,omitempty"`
		IksCustomerOp             NullableLicenseIksCustomerOpRelationship             `json:"IksCustomerOp,omitempty"`
		IksLicenseCount           NullableLicenseIksLicenseCountRelationship           `json:"IksLicenseCount,omitempty"`
		IncCustomerOp             NullableLicenseIncCustomerOpRelationship             `json:"IncCustomerOp,omitempty"`
		IncLicenseCount           NullableLicenseIncLicenseCountRelationship           `json:"IncLicenseCount,omitempty"`
		IwoCustomerOp             NullableLicenseIwoCustomerOpRelationship             `json:"IwoCustomerOp,omitempty"`
		IwoLicenseCount           NullableLicenseIwoLicenseCountRelationship           `json:"IwoLicenseCount,omitempty"`
		LicenseInfoView           NullableLicenseLicenseInfoViewRelationship           `json:"LicenseInfoView,omitempty"`
		LicenseRegistrationStatus NullableLicenseLicenseRegistrationStatusRelationship `json:"LicenseRegistrationStatus,omitempty"`
		// An array of relationships to licenseLicenseInfo resources.
		Licenseinfos      []LicenseLicenseInfoRelationship             `json:"Licenseinfos,omitempty"`
		SmartlicenseToken NullableLicenseSmartlicenseTokenRelationship `json:"SmartlicenseToken,omitempty"`
	}

	varLicenseAccountLicenseDataWithoutEmbeddedStruct := LicenseAccountLicenseDataWithoutEmbeddedStruct{}

	err = json.Unmarshal(data, &varLicenseAccountLicenseDataWithoutEmbeddedStruct)
	if err == nil {
		varLicenseAccountLicenseData := _LicenseAccountLicenseData{}
		varLicenseAccountLicenseData.ClassId = varLicenseAccountLicenseDataWithoutEmbeddedStruct.ClassId
		varLicenseAccountLicenseData.ObjectType = varLicenseAccountLicenseDataWithoutEmbeddedStruct.ObjectType
		varLicenseAccountLicenseData.AccountId = varLicenseAccountLicenseDataWithoutEmbeddedStruct.AccountId
		varLicenseAccountLicenseData.AgentData = varLicenseAccountLicenseDataWithoutEmbeddedStruct.AgentData
		varLicenseAccountLicenseData.AuthExpireTime = varLicenseAccountLicenseDataWithoutEmbeddedStruct.AuthExpireTime
		varLicenseAccountLicenseData.AuthInitialTime = varLicenseAccountLicenseDataWithoutEmbeddedStruct.AuthInitialTime
		varLicenseAccountLicenseData.AuthNextTime = varLicenseAccountLicenseDataWithoutEmbeddedStruct.AuthNextTime
		varLicenseAccountLicenseData.Category = varLicenseAccountLicenseDataWithoutEmbeddedStruct.Category
		varLicenseAccountLicenseData.DefaultLicenseType = varLicenseAccountLicenseDataWithoutEmbeddedStruct.DefaultLicenseType
		varLicenseAccountLicenseData.DefaultLicenseTypeNewerModels = varLicenseAccountLicenseDataWithoutEmbeddedStruct.DefaultLicenseTypeNewerModels
		varLicenseAccountLicenseData.ErrorDesc = varLicenseAccountLicenseDataWithoutEmbeddedStruct.ErrorDesc
		varLicenseAccountLicenseData.Group = varLicenseAccountLicenseDataWithoutEmbeddedStruct.Group
		varLicenseAccountLicenseData.HighestCompliantLicenseTier = varLicenseAccountLicenseDataWithoutEmbeddedStruct.HighestCompliantLicenseTier
		varLicenseAccountLicenseData.LastCssmSync = varLicenseAccountLicenseDataWithoutEmbeddedStruct.LastCssmSync
		varLicenseAccountLicenseData.LastRenew = varLicenseAccountLicenseDataWithoutEmbeddedStruct.LastRenew
		varLicenseAccountLicenseData.LastSync = varLicenseAccountLicenseDataWithoutEmbeddedStruct.LastSync
		varLicenseAccountLicenseData.LastUpdatedTime = varLicenseAccountLicenseDataWithoutEmbeddedStruct.LastUpdatedTime
		varLicenseAccountLicenseData.LicenseState = varLicenseAccountLicenseDataWithoutEmbeddedStruct.LicenseState
		varLicenseAccountLicenseData.LicenseTechSupportInfo = varLicenseAccountLicenseDataWithoutEmbeddedStruct.LicenseTechSupportInfo
		varLicenseAccountLicenseData.RegisterExpireTime = varLicenseAccountLicenseDataWithoutEmbeddedStruct.RegisterExpireTime
		varLicenseAccountLicenseData.RegisterInitialTime = varLicenseAccountLicenseDataWithoutEmbeddedStruct.RegisterInitialTime
		varLicenseAccountLicenseData.RegisterNextTime = varLicenseAccountLicenseDataWithoutEmbeddedStruct.RegisterNextTime
		varLicenseAccountLicenseData.RegistrationStatus = varLicenseAccountLicenseDataWithoutEmbeddedStruct.RegistrationStatus
		varLicenseAccountLicenseData.RenewFailureString = varLicenseAccountLicenseDataWithoutEmbeddedStruct.RenewFailureString
		varLicenseAccountLicenseData.SmartAccount = varLicenseAccountLicenseDataWithoutEmbeddedStruct.SmartAccount
		varLicenseAccountLicenseData.SmartAccountDomain = varLicenseAccountLicenseDataWithoutEmbeddedStruct.SmartAccountDomain
		varLicenseAccountLicenseData.SmartApiEnabled = varLicenseAccountLicenseDataWithoutEmbeddedStruct.SmartApiEnabled
		varLicenseAccountLicenseData.SmartApiSyncStatus = varLicenseAccountLicenseDataWithoutEmbeddedStruct.SmartApiSyncStatus
		varLicenseAccountLicenseData.SyncStatus = varLicenseAccountLicenseDataWithoutEmbeddedStruct.SyncStatus
		varLicenseAccountLicenseData.VirtualAccount = varLicenseAccountLicenseDataWithoutEmbeddedStruct.VirtualAccount
		varLicenseAccountLicenseData.Account = varLicenseAccountLicenseDataWithoutEmbeddedStruct.Account
		varLicenseAccountLicenseData.CustomerOp = varLicenseAccountLicenseDataWithoutEmbeddedStruct.CustomerOp
		varLicenseAccountLicenseData.IksCustomerOp = varLicenseAccountLicenseDataWithoutEmbeddedStruct.IksCustomerOp
		varLicenseAccountLicenseData.IksLicenseCount = varLicenseAccountLicenseDataWithoutEmbeddedStruct.IksLicenseCount
		varLicenseAccountLicenseData.IncCustomerOp = varLicenseAccountLicenseDataWithoutEmbeddedStruct.IncCustomerOp
		varLicenseAccountLicenseData.IncLicenseCount = varLicenseAccountLicenseDataWithoutEmbeddedStruct.IncLicenseCount
		varLicenseAccountLicenseData.IwoCustomerOp = varLicenseAccountLicenseDataWithoutEmbeddedStruct.IwoCustomerOp
		varLicenseAccountLicenseData.IwoLicenseCount = varLicenseAccountLicenseDataWithoutEmbeddedStruct.IwoLicenseCount
		varLicenseAccountLicenseData.LicenseInfoView = varLicenseAccountLicenseDataWithoutEmbeddedStruct.LicenseInfoView
		varLicenseAccountLicenseData.LicenseRegistrationStatus = varLicenseAccountLicenseDataWithoutEmbeddedStruct.LicenseRegistrationStatus
		varLicenseAccountLicenseData.Licenseinfos = varLicenseAccountLicenseDataWithoutEmbeddedStruct.Licenseinfos
		varLicenseAccountLicenseData.SmartlicenseToken = varLicenseAccountLicenseDataWithoutEmbeddedStruct.SmartlicenseToken
		*o = LicenseAccountLicenseData(varLicenseAccountLicenseData)
	} else {
		return err
	}

	varLicenseAccountLicenseData := _LicenseAccountLicenseData{}

	err = json.Unmarshal(data, &varLicenseAccountLicenseData)
	if err == nil {
		o.MoBaseMo = varLicenseAccountLicenseData.MoBaseMo
	} else {
		return err
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "ClassId")
		delete(additionalProperties, "ObjectType")
		delete(additionalProperties, "AccountId")
		delete(additionalProperties, "AgentData")
		delete(additionalProperties, "AuthExpireTime")
		delete(additionalProperties, "AuthInitialTime")
		delete(additionalProperties, "AuthNextTime")
		delete(additionalProperties, "Category")
		delete(additionalProperties, "DefaultLicenseType")
		delete(additionalProperties, "DefaultLicenseTypeNewerModels")
		delete(additionalProperties, "ErrorDesc")
		delete(additionalProperties, "Group")
		delete(additionalProperties, "HighestCompliantLicenseTier")
		delete(additionalProperties, "LastCssmSync")
		delete(additionalProperties, "LastRenew")
		delete(additionalProperties, "LastSync")
		delete(additionalProperties, "LastUpdatedTime")
		delete(additionalProperties, "LicenseState")
		delete(additionalProperties, "LicenseTechSupportInfo")
		delete(additionalProperties, "RegisterExpireTime")
		delete(additionalProperties, "RegisterInitialTime")
		delete(additionalProperties, "RegisterNextTime")
		delete(additionalProperties, "RegistrationStatus")
		delete(additionalProperties, "RenewFailureString")
		delete(additionalProperties, "SmartAccount")
		delete(additionalProperties, "SmartAccountDomain")
		delete(additionalProperties, "SmartApiEnabled")
		delete(additionalProperties, "SmartApiSyncStatus")
		delete(additionalProperties, "SyncStatus")
		delete(additionalProperties, "VirtualAccount")
		delete(additionalProperties, "Account")
		delete(additionalProperties, "CustomerOp")
		delete(additionalProperties, "IksCustomerOp")
		delete(additionalProperties, "IksLicenseCount")
		delete(additionalProperties, "IncCustomerOp")
		delete(additionalProperties, "IncLicenseCount")
		delete(additionalProperties, "IwoCustomerOp")
		delete(additionalProperties, "IwoLicenseCount")
		delete(additionalProperties, "LicenseInfoView")
		delete(additionalProperties, "LicenseRegistrationStatus")
		delete(additionalProperties, "Licenseinfos")
		delete(additionalProperties, "SmartlicenseToken")

		// remove fields from embedded structs
		reflectMoBaseMo := reflect.ValueOf(o.MoBaseMo)
		for i := 0; i < reflectMoBaseMo.Type().NumField(); i++ {
			t := reflectMoBaseMo.Type().Field(i)

			if jsonTag := t.Tag.Get("json"); jsonTag != "" {
				fieldName := ""
				if commaIdx := strings.Index(jsonTag, ","); commaIdx > 0 {
					fieldName = jsonTag[:commaIdx]
				} else {
					fieldName = jsonTag
				}
				if fieldName != "AdditionalProperties" {
					delete(additionalProperties, fieldName)
				}
			}
		}

		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableLicenseAccountLicenseData struct {
	value *LicenseAccountLicenseData
	isSet bool
}

func (v NullableLicenseAccountLicenseData) Get() *LicenseAccountLicenseData {
	return v.value
}

func (v *NullableLicenseAccountLicenseData) Set(val *LicenseAccountLicenseData) {
	v.value = val
	v.isSet = true
}

func (v NullableLicenseAccountLicenseData) IsSet() bool {
	return v.isSet
}

func (v *NullableLicenseAccountLicenseData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLicenseAccountLicenseData(val *LicenseAccountLicenseData) *NullableLicenseAccountLicenseData {
	return &NullableLicenseAccountLicenseData{value: val, isSet: true}
}

func (v NullableLicenseAccountLicenseData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLicenseAccountLicenseData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
