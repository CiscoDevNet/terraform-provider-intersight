/*
Cisco Intersight

Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations. The Intersight OpenAPI document defines the complete set of properties that are returned in the HTTP response. From that perspective, a client can expect that no additional properties are returned, unless these properties are explicitly defined in the OpenAPI document. However, when a client uses an older version of the Intersight OpenAPI document, the server may send additional properties because the software is more recent than the client. In that case, the client may receive properties that it does not know about. Some generated SDKs perform a strict validation of the HTTP response body against the OpenAPI document.

API version: 1.0.11-18775
Contact: intersight@cisco.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package intersight

import (
	"encoding/json"
	"fmt"
	"reflect"
	"strings"
)

// checks if the KubernetesAddonDefinition type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &KubernetesAddonDefinition{}

// KubernetesAddonDefinition An addon that can be added to any Kubernetes cluster.
type KubernetesAddonDefinition struct {
	MoBaseMo
	// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.
	ClassId string `json:"ClassId"`
	// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
	ObjectType string `json:"ObjectType"`
	// Description of the addon component.
	ChartUrl *string `json:"ChartUrl,omitempty"`
	// Default installation strategy for the release. * `None` - Unspecified install strategy. * `NoAction` - No install action performed. * `InstallOnly` - Only install in green field. No action in case of failure or removal. * `Always` - Attempt install if chart is not already installed.
	DefaultInstallStrategy *string `json:"DefaultInstallStrategy,omitempty"`
	// Default namespace to install the release.
	DefaultNamespace *string `json:"DefaultNamespace,omitempty"`
	// Default upgrade strategy for the release. * `None` - Unspecified upgrade strategy. * `NoAction` - This choice enables No upgrades to be performed. * `UpgradeOnly` - Attempt upgrade if chart or overrides options change, no action on upgrade failure. * `ReinstallOnFailure` - Attempt upgrade first. Remove and install on upgrade failure. * `AlwaysReinstall` - Always remove older release and reinstall.
	DefaultUpgradeStrategy *string `json:"DefaultUpgradeStrategy,omitempty"`
	// Description of the addon component.
	Description *string `json:"Description,omitempty"`
	// Digest used to verify the integrity of an addon.
	Digest *string `json:"Digest,omitempty"`
	// Icon used to represent the addon in UI.
	IconUrl *string  `json:"IconUrl,omitempty"`
	Labels  []string `json:"Labels,omitempty"`
	// Name of an addon component.
	Name *string `json:"Name,omitempty"`
	// Properties that can be overridden for an addon.
	Overrides *string  `json:"Overrides,omitempty"`
	Platforms []string `json:"Platforms,omitempty"`
	// Version of the addon component.
	Version              *string                                      `json:"Version,omitempty"`
	Catalog              NullableKubernetesCatalogRelationship        `json:"Catalog,omitempty"`
	Organization         NullableOrganizationOrganizationRelationship `json:"Organization,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _KubernetesAddonDefinition KubernetesAddonDefinition

// NewKubernetesAddonDefinition instantiates a new KubernetesAddonDefinition object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewKubernetesAddonDefinition(classId string, objectType string) *KubernetesAddonDefinition {
	this := KubernetesAddonDefinition{}
	this.ClassId = classId
	this.ObjectType = objectType
	var defaultInstallStrategy string = "None"
	this.DefaultInstallStrategy = &defaultInstallStrategy
	var defaultUpgradeStrategy string = "None"
	this.DefaultUpgradeStrategy = &defaultUpgradeStrategy
	return &this
}

// NewKubernetesAddonDefinitionWithDefaults instantiates a new KubernetesAddonDefinition object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewKubernetesAddonDefinitionWithDefaults() *KubernetesAddonDefinition {
	this := KubernetesAddonDefinition{}
	var classId string = "kubernetes.AddonDefinition"
	this.ClassId = classId
	var objectType string = "kubernetes.AddonDefinition"
	this.ObjectType = objectType
	var defaultInstallStrategy string = "None"
	this.DefaultInstallStrategy = &defaultInstallStrategy
	var defaultUpgradeStrategy string = "None"
	this.DefaultUpgradeStrategy = &defaultUpgradeStrategy
	return &this
}

// GetClassId returns the ClassId field value
func (o *KubernetesAddonDefinition) GetClassId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ClassId
}

// GetClassIdOk returns a tuple with the ClassId field value
// and a boolean to check if the value has been set.
func (o *KubernetesAddonDefinition) GetClassIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ClassId, true
}

// SetClassId sets field value
func (o *KubernetesAddonDefinition) SetClassId(v string) {
	o.ClassId = v
}

// GetDefaultClassId returns the default value "kubernetes.AddonDefinition" of the ClassId field.
func (o *KubernetesAddonDefinition) GetDefaultClassId() interface{} {
	return "kubernetes.AddonDefinition"
}

// GetObjectType returns the ObjectType field value
func (o *KubernetesAddonDefinition) GetObjectType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ObjectType
}

// GetObjectTypeOk returns a tuple with the ObjectType field value
// and a boolean to check if the value has been set.
func (o *KubernetesAddonDefinition) GetObjectTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ObjectType, true
}

// SetObjectType sets field value
func (o *KubernetesAddonDefinition) SetObjectType(v string) {
	o.ObjectType = v
}

// GetDefaultObjectType returns the default value "kubernetes.AddonDefinition" of the ObjectType field.
func (o *KubernetesAddonDefinition) GetDefaultObjectType() interface{} {
	return "kubernetes.AddonDefinition"
}

// GetChartUrl returns the ChartUrl field value if set, zero value otherwise.
func (o *KubernetesAddonDefinition) GetChartUrl() string {
	if o == nil || IsNil(o.ChartUrl) {
		var ret string
		return ret
	}
	return *o.ChartUrl
}

// GetChartUrlOk returns a tuple with the ChartUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KubernetesAddonDefinition) GetChartUrlOk() (*string, bool) {
	if o == nil || IsNil(o.ChartUrl) {
		return nil, false
	}
	return o.ChartUrl, true
}

// HasChartUrl returns a boolean if a field has been set.
func (o *KubernetesAddonDefinition) HasChartUrl() bool {
	if o != nil && !IsNil(o.ChartUrl) {
		return true
	}

	return false
}

// SetChartUrl gets a reference to the given string and assigns it to the ChartUrl field.
func (o *KubernetesAddonDefinition) SetChartUrl(v string) {
	o.ChartUrl = &v
}

// GetDefaultInstallStrategy returns the DefaultInstallStrategy field value if set, zero value otherwise.
func (o *KubernetesAddonDefinition) GetDefaultInstallStrategy() string {
	if o == nil || IsNil(o.DefaultInstallStrategy) {
		var ret string
		return ret
	}
	return *o.DefaultInstallStrategy
}

// GetDefaultInstallStrategyOk returns a tuple with the DefaultInstallStrategy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KubernetesAddonDefinition) GetDefaultInstallStrategyOk() (*string, bool) {
	if o == nil || IsNil(o.DefaultInstallStrategy) {
		return nil, false
	}
	return o.DefaultInstallStrategy, true
}

// HasDefaultInstallStrategy returns a boolean if a field has been set.
func (o *KubernetesAddonDefinition) HasDefaultInstallStrategy() bool {
	if o != nil && !IsNil(o.DefaultInstallStrategy) {
		return true
	}

	return false
}

// SetDefaultInstallStrategy gets a reference to the given string and assigns it to the DefaultInstallStrategy field.
func (o *KubernetesAddonDefinition) SetDefaultInstallStrategy(v string) {
	o.DefaultInstallStrategy = &v
}

// GetDefaultNamespace returns the DefaultNamespace field value if set, zero value otherwise.
func (o *KubernetesAddonDefinition) GetDefaultNamespace() string {
	if o == nil || IsNil(o.DefaultNamespace) {
		var ret string
		return ret
	}
	return *o.DefaultNamespace
}

// GetDefaultNamespaceOk returns a tuple with the DefaultNamespace field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KubernetesAddonDefinition) GetDefaultNamespaceOk() (*string, bool) {
	if o == nil || IsNil(o.DefaultNamespace) {
		return nil, false
	}
	return o.DefaultNamespace, true
}

// HasDefaultNamespace returns a boolean if a field has been set.
func (o *KubernetesAddonDefinition) HasDefaultNamespace() bool {
	if o != nil && !IsNil(o.DefaultNamespace) {
		return true
	}

	return false
}

// SetDefaultNamespace gets a reference to the given string and assigns it to the DefaultNamespace field.
func (o *KubernetesAddonDefinition) SetDefaultNamespace(v string) {
	o.DefaultNamespace = &v
}

// GetDefaultUpgradeStrategy returns the DefaultUpgradeStrategy field value if set, zero value otherwise.
func (o *KubernetesAddonDefinition) GetDefaultUpgradeStrategy() string {
	if o == nil || IsNil(o.DefaultUpgradeStrategy) {
		var ret string
		return ret
	}
	return *o.DefaultUpgradeStrategy
}

// GetDefaultUpgradeStrategyOk returns a tuple with the DefaultUpgradeStrategy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KubernetesAddonDefinition) GetDefaultUpgradeStrategyOk() (*string, bool) {
	if o == nil || IsNil(o.DefaultUpgradeStrategy) {
		return nil, false
	}
	return o.DefaultUpgradeStrategy, true
}

// HasDefaultUpgradeStrategy returns a boolean if a field has been set.
func (o *KubernetesAddonDefinition) HasDefaultUpgradeStrategy() bool {
	if o != nil && !IsNil(o.DefaultUpgradeStrategy) {
		return true
	}

	return false
}

// SetDefaultUpgradeStrategy gets a reference to the given string and assigns it to the DefaultUpgradeStrategy field.
func (o *KubernetesAddonDefinition) SetDefaultUpgradeStrategy(v string) {
	o.DefaultUpgradeStrategy = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *KubernetesAddonDefinition) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KubernetesAddonDefinition) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *KubernetesAddonDefinition) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *KubernetesAddonDefinition) SetDescription(v string) {
	o.Description = &v
}

// GetDigest returns the Digest field value if set, zero value otherwise.
func (o *KubernetesAddonDefinition) GetDigest() string {
	if o == nil || IsNil(o.Digest) {
		var ret string
		return ret
	}
	return *o.Digest
}

// GetDigestOk returns a tuple with the Digest field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KubernetesAddonDefinition) GetDigestOk() (*string, bool) {
	if o == nil || IsNil(o.Digest) {
		return nil, false
	}
	return o.Digest, true
}

// HasDigest returns a boolean if a field has been set.
func (o *KubernetesAddonDefinition) HasDigest() bool {
	if o != nil && !IsNil(o.Digest) {
		return true
	}

	return false
}

// SetDigest gets a reference to the given string and assigns it to the Digest field.
func (o *KubernetesAddonDefinition) SetDigest(v string) {
	o.Digest = &v
}

// GetIconUrl returns the IconUrl field value if set, zero value otherwise.
func (o *KubernetesAddonDefinition) GetIconUrl() string {
	if o == nil || IsNil(o.IconUrl) {
		var ret string
		return ret
	}
	return *o.IconUrl
}

// GetIconUrlOk returns a tuple with the IconUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KubernetesAddonDefinition) GetIconUrlOk() (*string, bool) {
	if o == nil || IsNil(o.IconUrl) {
		return nil, false
	}
	return o.IconUrl, true
}

// HasIconUrl returns a boolean if a field has been set.
func (o *KubernetesAddonDefinition) HasIconUrl() bool {
	if o != nil && !IsNil(o.IconUrl) {
		return true
	}

	return false
}

// SetIconUrl gets a reference to the given string and assigns it to the IconUrl field.
func (o *KubernetesAddonDefinition) SetIconUrl(v string) {
	o.IconUrl = &v
}

// GetLabels returns the Labels field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *KubernetesAddonDefinition) GetLabels() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.Labels
}

// GetLabelsOk returns a tuple with the Labels field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *KubernetesAddonDefinition) GetLabelsOk() ([]string, bool) {
	if o == nil || IsNil(o.Labels) {
		return nil, false
	}
	return o.Labels, true
}

// HasLabels returns a boolean if a field has been set.
func (o *KubernetesAddonDefinition) HasLabels() bool {
	if o != nil && !IsNil(o.Labels) {
		return true
	}

	return false
}

// SetLabels gets a reference to the given []string and assigns it to the Labels field.
func (o *KubernetesAddonDefinition) SetLabels(v []string) {
	o.Labels = v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *KubernetesAddonDefinition) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KubernetesAddonDefinition) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *KubernetesAddonDefinition) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *KubernetesAddonDefinition) SetName(v string) {
	o.Name = &v
}

// GetOverrides returns the Overrides field value if set, zero value otherwise.
func (o *KubernetesAddonDefinition) GetOverrides() string {
	if o == nil || IsNil(o.Overrides) {
		var ret string
		return ret
	}
	return *o.Overrides
}

// GetOverridesOk returns a tuple with the Overrides field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KubernetesAddonDefinition) GetOverridesOk() (*string, bool) {
	if o == nil || IsNil(o.Overrides) {
		return nil, false
	}
	return o.Overrides, true
}

// HasOverrides returns a boolean if a field has been set.
func (o *KubernetesAddonDefinition) HasOverrides() bool {
	if o != nil && !IsNil(o.Overrides) {
		return true
	}

	return false
}

// SetOverrides gets a reference to the given string and assigns it to the Overrides field.
func (o *KubernetesAddonDefinition) SetOverrides(v string) {
	o.Overrides = &v
}

// GetPlatforms returns the Platforms field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *KubernetesAddonDefinition) GetPlatforms() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.Platforms
}

// GetPlatformsOk returns a tuple with the Platforms field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *KubernetesAddonDefinition) GetPlatformsOk() ([]string, bool) {
	if o == nil || IsNil(o.Platforms) {
		return nil, false
	}
	return o.Platforms, true
}

// HasPlatforms returns a boolean if a field has been set.
func (o *KubernetesAddonDefinition) HasPlatforms() bool {
	if o != nil && !IsNil(o.Platforms) {
		return true
	}

	return false
}

// SetPlatforms gets a reference to the given []string and assigns it to the Platforms field.
func (o *KubernetesAddonDefinition) SetPlatforms(v []string) {
	o.Platforms = v
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *KubernetesAddonDefinition) GetVersion() string {
	if o == nil || IsNil(o.Version) {
		var ret string
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KubernetesAddonDefinition) GetVersionOk() (*string, bool) {
	if o == nil || IsNil(o.Version) {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *KubernetesAddonDefinition) HasVersion() bool {
	if o != nil && !IsNil(o.Version) {
		return true
	}

	return false
}

// SetVersion gets a reference to the given string and assigns it to the Version field.
func (o *KubernetesAddonDefinition) SetVersion(v string) {
	o.Version = &v
}

// GetCatalog returns the Catalog field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *KubernetesAddonDefinition) GetCatalog() KubernetesCatalogRelationship {
	if o == nil || IsNil(o.Catalog.Get()) {
		var ret KubernetesCatalogRelationship
		return ret
	}
	return *o.Catalog.Get()
}

// GetCatalogOk returns a tuple with the Catalog field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *KubernetesAddonDefinition) GetCatalogOk() (*KubernetesCatalogRelationship, bool) {
	if o == nil {
		return nil, false
	}
	return o.Catalog.Get(), o.Catalog.IsSet()
}

// HasCatalog returns a boolean if a field has been set.
func (o *KubernetesAddonDefinition) HasCatalog() bool {
	if o != nil && o.Catalog.IsSet() {
		return true
	}

	return false
}

// SetCatalog gets a reference to the given NullableKubernetesCatalogRelationship and assigns it to the Catalog field.
func (o *KubernetesAddonDefinition) SetCatalog(v KubernetesCatalogRelationship) {
	o.Catalog.Set(&v)
}

// SetCatalogNil sets the value for Catalog to be an explicit nil
func (o *KubernetesAddonDefinition) SetCatalogNil() {
	o.Catalog.Set(nil)
}

// UnsetCatalog ensures that no value is present for Catalog, not even an explicit nil
func (o *KubernetesAddonDefinition) UnsetCatalog() {
	o.Catalog.Unset()
}

// GetOrganization returns the Organization field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *KubernetesAddonDefinition) GetOrganization() OrganizationOrganizationRelationship {
	if o == nil || IsNil(o.Organization.Get()) {
		var ret OrganizationOrganizationRelationship
		return ret
	}
	return *o.Organization.Get()
}

// GetOrganizationOk returns a tuple with the Organization field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *KubernetesAddonDefinition) GetOrganizationOk() (*OrganizationOrganizationRelationship, bool) {
	if o == nil {
		return nil, false
	}
	return o.Organization.Get(), o.Organization.IsSet()
}

// HasOrganization returns a boolean if a field has been set.
func (o *KubernetesAddonDefinition) HasOrganization() bool {
	if o != nil && o.Organization.IsSet() {
		return true
	}

	return false
}

// SetOrganization gets a reference to the given NullableOrganizationOrganizationRelationship and assigns it to the Organization field.
func (o *KubernetesAddonDefinition) SetOrganization(v OrganizationOrganizationRelationship) {
	o.Organization.Set(&v)
}

// SetOrganizationNil sets the value for Organization to be an explicit nil
func (o *KubernetesAddonDefinition) SetOrganizationNil() {
	o.Organization.Set(nil)
}

// UnsetOrganization ensures that no value is present for Organization, not even an explicit nil
func (o *KubernetesAddonDefinition) UnsetOrganization() {
	o.Organization.Unset()
}

func (o KubernetesAddonDefinition) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o KubernetesAddonDefinition) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	serializedMoBaseMo, errMoBaseMo := json.Marshal(o.MoBaseMo)
	if errMoBaseMo != nil {
		return map[string]interface{}{}, errMoBaseMo
	}
	errMoBaseMo = json.Unmarshal([]byte(serializedMoBaseMo), &toSerialize)
	if errMoBaseMo != nil {
		return map[string]interface{}{}, errMoBaseMo
	}
	if _, exists := toSerialize["ClassId"]; !exists {
		toSerialize["ClassId"] = o.GetDefaultClassId()
	}
	toSerialize["ClassId"] = o.ClassId
	if _, exists := toSerialize["ObjectType"]; !exists {
		toSerialize["ObjectType"] = o.GetDefaultObjectType()
	}
	toSerialize["ObjectType"] = o.ObjectType
	if !IsNil(o.ChartUrl) {
		toSerialize["ChartUrl"] = o.ChartUrl
	}
	if !IsNil(o.DefaultInstallStrategy) {
		toSerialize["DefaultInstallStrategy"] = o.DefaultInstallStrategy
	}
	if !IsNil(o.DefaultNamespace) {
		toSerialize["DefaultNamespace"] = o.DefaultNamespace
	}
	if !IsNil(o.DefaultUpgradeStrategy) {
		toSerialize["DefaultUpgradeStrategy"] = o.DefaultUpgradeStrategy
	}
	if !IsNil(o.Description) {
		toSerialize["Description"] = o.Description
	}
	if !IsNil(o.Digest) {
		toSerialize["Digest"] = o.Digest
	}
	if !IsNil(o.IconUrl) {
		toSerialize["IconUrl"] = o.IconUrl
	}
	if o.Labels != nil {
		toSerialize["Labels"] = o.Labels
	}
	if !IsNil(o.Name) {
		toSerialize["Name"] = o.Name
	}
	if !IsNil(o.Overrides) {
		toSerialize["Overrides"] = o.Overrides
	}
	if o.Platforms != nil {
		toSerialize["Platforms"] = o.Platforms
	}
	if !IsNil(o.Version) {
		toSerialize["Version"] = o.Version
	}
	if o.Catalog.IsSet() {
		toSerialize["Catalog"] = o.Catalog.Get()
	}
	if o.Organization.IsSet() {
		toSerialize["Organization"] = o.Organization.Get()
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *KubernetesAddonDefinition) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"ClassId",
		"ObjectType",
	}

	// defaultValueFuncMap captures the default values for required properties.
	// These values are used when required properties are missing from the payload.
	defaultValueFuncMap := map[string]func() interface{}{
		"ClassId":    o.GetDefaultClassId,
		"ObjectType": o.GetDefaultObjectType,
	}
	var defaultValueApplied bool
	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			if _, ok := defaultValueFuncMap[requiredProperty]; ok {
				allProperties[requiredProperty] = defaultValueFuncMap[requiredProperty]()
				defaultValueApplied = true
			}
		}
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	if defaultValueApplied {
		data, err = json.Marshal(allProperties)
		if err != nil {
			return err
		}
	}
	type KubernetesAddonDefinitionWithoutEmbeddedStruct struct {
		// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.
		ClassId string `json:"ClassId"`
		// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
		ObjectType string `json:"ObjectType"`
		// Description of the addon component.
		ChartUrl *string `json:"ChartUrl,omitempty"`
		// Default installation strategy for the release. * `None` - Unspecified install strategy. * `NoAction` - No install action performed. * `InstallOnly` - Only install in green field. No action in case of failure or removal. * `Always` - Attempt install if chart is not already installed.
		DefaultInstallStrategy *string `json:"DefaultInstallStrategy,omitempty"`
		// Default namespace to install the release.
		DefaultNamespace *string `json:"DefaultNamespace,omitempty"`
		// Default upgrade strategy for the release. * `None` - Unspecified upgrade strategy. * `NoAction` - This choice enables No upgrades to be performed. * `UpgradeOnly` - Attempt upgrade if chart or overrides options change, no action on upgrade failure. * `ReinstallOnFailure` - Attempt upgrade first. Remove and install on upgrade failure. * `AlwaysReinstall` - Always remove older release and reinstall.
		DefaultUpgradeStrategy *string `json:"DefaultUpgradeStrategy,omitempty"`
		// Description of the addon component.
		Description *string `json:"Description,omitempty"`
		// Digest used to verify the integrity of an addon.
		Digest *string `json:"Digest,omitempty"`
		// Icon used to represent the addon in UI.
		IconUrl *string  `json:"IconUrl,omitempty"`
		Labels  []string `json:"Labels,omitempty"`
		// Name of an addon component.
		Name *string `json:"Name,omitempty"`
		// Properties that can be overridden for an addon.
		Overrides *string  `json:"Overrides,omitempty"`
		Platforms []string `json:"Platforms,omitempty"`
		// Version of the addon component.
		Version      *string                                      `json:"Version,omitempty"`
		Catalog      NullableKubernetesCatalogRelationship        `json:"Catalog,omitempty"`
		Organization NullableOrganizationOrganizationRelationship `json:"Organization,omitempty"`
	}

	varKubernetesAddonDefinitionWithoutEmbeddedStruct := KubernetesAddonDefinitionWithoutEmbeddedStruct{}

	err = json.Unmarshal(data, &varKubernetesAddonDefinitionWithoutEmbeddedStruct)
	if err == nil {
		varKubernetesAddonDefinition := _KubernetesAddonDefinition{}
		varKubernetesAddonDefinition.ClassId = varKubernetesAddonDefinitionWithoutEmbeddedStruct.ClassId
		varKubernetesAddonDefinition.ObjectType = varKubernetesAddonDefinitionWithoutEmbeddedStruct.ObjectType
		varKubernetesAddonDefinition.ChartUrl = varKubernetesAddonDefinitionWithoutEmbeddedStruct.ChartUrl
		varKubernetesAddonDefinition.DefaultInstallStrategy = varKubernetesAddonDefinitionWithoutEmbeddedStruct.DefaultInstallStrategy
		varKubernetesAddonDefinition.DefaultNamespace = varKubernetesAddonDefinitionWithoutEmbeddedStruct.DefaultNamespace
		varKubernetesAddonDefinition.DefaultUpgradeStrategy = varKubernetesAddonDefinitionWithoutEmbeddedStruct.DefaultUpgradeStrategy
		varKubernetesAddonDefinition.Description = varKubernetesAddonDefinitionWithoutEmbeddedStruct.Description
		varKubernetesAddonDefinition.Digest = varKubernetesAddonDefinitionWithoutEmbeddedStruct.Digest
		varKubernetesAddonDefinition.IconUrl = varKubernetesAddonDefinitionWithoutEmbeddedStruct.IconUrl
		varKubernetesAddonDefinition.Labels = varKubernetesAddonDefinitionWithoutEmbeddedStruct.Labels
		varKubernetesAddonDefinition.Name = varKubernetesAddonDefinitionWithoutEmbeddedStruct.Name
		varKubernetesAddonDefinition.Overrides = varKubernetesAddonDefinitionWithoutEmbeddedStruct.Overrides
		varKubernetesAddonDefinition.Platforms = varKubernetesAddonDefinitionWithoutEmbeddedStruct.Platforms
		varKubernetesAddonDefinition.Version = varKubernetesAddonDefinitionWithoutEmbeddedStruct.Version
		varKubernetesAddonDefinition.Catalog = varKubernetesAddonDefinitionWithoutEmbeddedStruct.Catalog
		varKubernetesAddonDefinition.Organization = varKubernetesAddonDefinitionWithoutEmbeddedStruct.Organization
		*o = KubernetesAddonDefinition(varKubernetesAddonDefinition)
	} else {
		return err
	}

	varKubernetesAddonDefinition := _KubernetesAddonDefinition{}

	err = json.Unmarshal(data, &varKubernetesAddonDefinition)
	if err == nil {
		o.MoBaseMo = varKubernetesAddonDefinition.MoBaseMo
	} else {
		return err
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "ClassId")
		delete(additionalProperties, "ObjectType")
		delete(additionalProperties, "ChartUrl")
		delete(additionalProperties, "DefaultInstallStrategy")
		delete(additionalProperties, "DefaultNamespace")
		delete(additionalProperties, "DefaultUpgradeStrategy")
		delete(additionalProperties, "Description")
		delete(additionalProperties, "Digest")
		delete(additionalProperties, "IconUrl")
		delete(additionalProperties, "Labels")
		delete(additionalProperties, "Name")
		delete(additionalProperties, "Overrides")
		delete(additionalProperties, "Platforms")
		delete(additionalProperties, "Version")
		delete(additionalProperties, "Catalog")
		delete(additionalProperties, "Organization")

		// remove fields from embedded structs
		reflectMoBaseMo := reflect.ValueOf(o.MoBaseMo)
		for i := 0; i < reflectMoBaseMo.Type().NumField(); i++ {
			t := reflectMoBaseMo.Type().Field(i)

			if jsonTag := t.Tag.Get("json"); jsonTag != "" {
				fieldName := ""
				if commaIdx := strings.Index(jsonTag, ","); commaIdx > 0 {
					fieldName = jsonTag[:commaIdx]
				} else {
					fieldName = jsonTag
				}
				if fieldName != "AdditionalProperties" {
					delete(additionalProperties, fieldName)
				}
			}
		}

		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableKubernetesAddonDefinition struct {
	value *KubernetesAddonDefinition
	isSet bool
}

func (v NullableKubernetesAddonDefinition) Get() *KubernetesAddonDefinition {
	return v.value
}

func (v *NullableKubernetesAddonDefinition) Set(val *KubernetesAddonDefinition) {
	v.value = val
	v.isSet = true
}

func (v NullableKubernetesAddonDefinition) IsSet() bool {
	return v.isSet
}

func (v *NullableKubernetesAddonDefinition) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableKubernetesAddonDefinition(val *KubernetesAddonDefinition) *NullableKubernetesAddonDefinition {
	return &NullableKubernetesAddonDefinition{value: val, isSet: true}
}

func (v NullableKubernetesAddonDefinition) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableKubernetesAddonDefinition) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
