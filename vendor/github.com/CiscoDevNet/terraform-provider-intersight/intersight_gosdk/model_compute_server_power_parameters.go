/*
Cisco Intersight

Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations. The Intersight OpenAPI document defines the complete set of properties that are returned in the HTTP response. From that perspective, a client can expect that no additional properties are returned, unless these properties are explicitly defined in the OpenAPI document. However, when a client uses an older version of the Intersight OpenAPI document, the server may send additional properties because the software is more recent than the client. In that case, the client may receive properties that it does not know about. Some generated SDKs perform a strict validation of the HTTP response body against the OpenAPI document.

API version: 1.0.11-2025091920
Contact: intersight@cisco.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package intersight

import (
	"encoding/json"
	"fmt"
	"reflect"
	"strings"
)

// checks if the ComputeServerPowerParameters type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ComputeServerPowerParameters{}

// ComputeServerPowerParameters Managed object used to track server power parameters information.
type ComputeServerPowerParameters struct {
	InventoryBase
	// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.
	ClassId string `json:"ClassId"`
	// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
	ObjectType string `json:"ObjectType"`
	// This field identifies the maximum power that has been allocated to the blade by CMC in Watts. Power budget for the chassis is configured by the power policy. That budget is then divided among the blades in the chassis by CMC.
	PowerAllocation *int64 `json:"PowerAllocation,omitempty"`
	// Power Priority level of the Server. This priority is used to determine the initial power allocation for servers. This field is only supported for Cisco UCS B series and X series servers. * `Unknown` - Power allocation priority of server is either unknown or not supported on CMC firmware version. * `Low` - Power allocation priority of server is low. * `Medium` - Power allocation priority of server is medium. * `High` - Power allocation priority of server is high.
	PowerPriority *string `json:"PowerPriority,omitempty"`
	// Status of Power Profiling setting of the Server. If Enabled, this field allows the power manager to run power profiling utility to determine the power needs of the server. This field is only supported for Cisco UCS X series servers. * `Unknown` - Power Profiling state is either unknown for the server or not supported on BMC firmware version. * `Enabled` - Power Profiling is enabled for the server. * `Disabled` - Power Profiling is either disabled for the server or not supported on BMC firmware version.
	PowerProfiling *string `json:"PowerProfiling,omitempty"`
	// Value of the power restore policy for the server. In the absence of Intersight connectivity, the server will use this state to recover the host power after a power loss event. * `Unknown` - Power restore state for the server is either Unknown or not supported on BMC firmware version. * `Always On` - Power restore state for server is set to Always On. * `Always Off` - Power restore state for server is set to Always Off. * `Last State` - Power restore state for server is set to Last State.
	PowerRestore *string `json:"PowerRestore,omitempty"`
	// Processor Package Power Limit (PPL) of a server. PPL refers to the amount of power that a CPU can draw from the power supply. The Processor Package Power Limit (PPL) feature is currently available exclusively on Cisco UCS C225/C245 M8 servers. * `Unknown` - Processor package power limit is either unknown for the server or not supported on BMC firmware version. * `Default` - Processor package power limit is default for the server. * `Maximum` - Processor package power limit is maximum for the server. * `Minimum` - Processor package power limit is minimum for the server.
	ProcessorPackagePowerLimit *string                                     `json:"ProcessorPackagePowerLimit,omitempty"`
	ComputeBlade               NullableComputeBladeRelationship            `json:"ComputeBlade,omitempty"`
	ComputeRackUnit            NullableComputeRackUnitRelationship         `json:"ComputeRackUnit,omitempty"`
	RegisteredDevice           NullableAssetDeviceRegistrationRelationship `json:"RegisteredDevice,omitempty"`
	AdditionalProperties       map[string]interface{}
}

type _ComputeServerPowerParameters ComputeServerPowerParameters

// NewComputeServerPowerParameters instantiates a new ComputeServerPowerParameters object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewComputeServerPowerParameters(classId string, objectType string) *ComputeServerPowerParameters {
	this := ComputeServerPowerParameters{}
	this.ClassId = classId
	this.ObjectType = objectType
	return &this
}

// NewComputeServerPowerParametersWithDefaults instantiates a new ComputeServerPowerParameters object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewComputeServerPowerParametersWithDefaults() *ComputeServerPowerParameters {
	this := ComputeServerPowerParameters{}
	var classId string = "compute.ServerPowerParameters"
	this.ClassId = classId
	var objectType string = "compute.ServerPowerParameters"
	this.ObjectType = objectType
	return &this
}

// GetClassId returns the ClassId field value
func (o *ComputeServerPowerParameters) GetClassId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ClassId
}

// GetClassIdOk returns a tuple with the ClassId field value
// and a boolean to check if the value has been set.
func (o *ComputeServerPowerParameters) GetClassIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ClassId, true
}

// SetClassId sets field value
func (o *ComputeServerPowerParameters) SetClassId(v string) {
	o.ClassId = v
}

// GetDefaultClassId returns the default value "compute.ServerPowerParameters" of the ClassId field.
func (o *ComputeServerPowerParameters) GetDefaultClassId() interface{} {
	return "compute.ServerPowerParameters"
}

// GetObjectType returns the ObjectType field value
func (o *ComputeServerPowerParameters) GetObjectType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ObjectType
}

// GetObjectTypeOk returns a tuple with the ObjectType field value
// and a boolean to check if the value has been set.
func (o *ComputeServerPowerParameters) GetObjectTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ObjectType, true
}

// SetObjectType sets field value
func (o *ComputeServerPowerParameters) SetObjectType(v string) {
	o.ObjectType = v
}

// GetDefaultObjectType returns the default value "compute.ServerPowerParameters" of the ObjectType field.
func (o *ComputeServerPowerParameters) GetDefaultObjectType() interface{} {
	return "compute.ServerPowerParameters"
}

// GetPowerAllocation returns the PowerAllocation field value if set, zero value otherwise.
func (o *ComputeServerPowerParameters) GetPowerAllocation() int64 {
	if o == nil || IsNil(o.PowerAllocation) {
		var ret int64
		return ret
	}
	return *o.PowerAllocation
}

// GetPowerAllocationOk returns a tuple with the PowerAllocation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComputeServerPowerParameters) GetPowerAllocationOk() (*int64, bool) {
	if o == nil || IsNil(o.PowerAllocation) {
		return nil, false
	}
	return o.PowerAllocation, true
}

// HasPowerAllocation returns a boolean if a field has been set.
func (o *ComputeServerPowerParameters) HasPowerAllocation() bool {
	if o != nil && !IsNil(o.PowerAllocation) {
		return true
	}

	return false
}

// SetPowerAllocation gets a reference to the given int64 and assigns it to the PowerAllocation field.
func (o *ComputeServerPowerParameters) SetPowerAllocation(v int64) {
	o.PowerAllocation = &v
}

// GetPowerPriority returns the PowerPriority field value if set, zero value otherwise.
func (o *ComputeServerPowerParameters) GetPowerPriority() string {
	if o == nil || IsNil(o.PowerPriority) {
		var ret string
		return ret
	}
	return *o.PowerPriority
}

// GetPowerPriorityOk returns a tuple with the PowerPriority field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComputeServerPowerParameters) GetPowerPriorityOk() (*string, bool) {
	if o == nil || IsNil(o.PowerPriority) {
		return nil, false
	}
	return o.PowerPriority, true
}

// HasPowerPriority returns a boolean if a field has been set.
func (o *ComputeServerPowerParameters) HasPowerPriority() bool {
	if o != nil && !IsNil(o.PowerPriority) {
		return true
	}

	return false
}

// SetPowerPriority gets a reference to the given string and assigns it to the PowerPriority field.
func (o *ComputeServerPowerParameters) SetPowerPriority(v string) {
	o.PowerPriority = &v
}

// GetPowerProfiling returns the PowerProfiling field value if set, zero value otherwise.
func (o *ComputeServerPowerParameters) GetPowerProfiling() string {
	if o == nil || IsNil(o.PowerProfiling) {
		var ret string
		return ret
	}
	return *o.PowerProfiling
}

// GetPowerProfilingOk returns a tuple with the PowerProfiling field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComputeServerPowerParameters) GetPowerProfilingOk() (*string, bool) {
	if o == nil || IsNil(o.PowerProfiling) {
		return nil, false
	}
	return o.PowerProfiling, true
}

// HasPowerProfiling returns a boolean if a field has been set.
func (o *ComputeServerPowerParameters) HasPowerProfiling() bool {
	if o != nil && !IsNil(o.PowerProfiling) {
		return true
	}

	return false
}

// SetPowerProfiling gets a reference to the given string and assigns it to the PowerProfiling field.
func (o *ComputeServerPowerParameters) SetPowerProfiling(v string) {
	o.PowerProfiling = &v
}

// GetPowerRestore returns the PowerRestore field value if set, zero value otherwise.
func (o *ComputeServerPowerParameters) GetPowerRestore() string {
	if o == nil || IsNil(o.PowerRestore) {
		var ret string
		return ret
	}
	return *o.PowerRestore
}

// GetPowerRestoreOk returns a tuple with the PowerRestore field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComputeServerPowerParameters) GetPowerRestoreOk() (*string, bool) {
	if o == nil || IsNil(o.PowerRestore) {
		return nil, false
	}
	return o.PowerRestore, true
}

// HasPowerRestore returns a boolean if a field has been set.
func (o *ComputeServerPowerParameters) HasPowerRestore() bool {
	if o != nil && !IsNil(o.PowerRestore) {
		return true
	}

	return false
}

// SetPowerRestore gets a reference to the given string and assigns it to the PowerRestore field.
func (o *ComputeServerPowerParameters) SetPowerRestore(v string) {
	o.PowerRestore = &v
}

// GetProcessorPackagePowerLimit returns the ProcessorPackagePowerLimit field value if set, zero value otherwise.
func (o *ComputeServerPowerParameters) GetProcessorPackagePowerLimit() string {
	if o == nil || IsNil(o.ProcessorPackagePowerLimit) {
		var ret string
		return ret
	}
	return *o.ProcessorPackagePowerLimit
}

// GetProcessorPackagePowerLimitOk returns a tuple with the ProcessorPackagePowerLimit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComputeServerPowerParameters) GetProcessorPackagePowerLimitOk() (*string, bool) {
	if o == nil || IsNil(o.ProcessorPackagePowerLimit) {
		return nil, false
	}
	return o.ProcessorPackagePowerLimit, true
}

// HasProcessorPackagePowerLimit returns a boolean if a field has been set.
func (o *ComputeServerPowerParameters) HasProcessorPackagePowerLimit() bool {
	if o != nil && !IsNil(o.ProcessorPackagePowerLimit) {
		return true
	}

	return false
}

// SetProcessorPackagePowerLimit gets a reference to the given string and assigns it to the ProcessorPackagePowerLimit field.
func (o *ComputeServerPowerParameters) SetProcessorPackagePowerLimit(v string) {
	o.ProcessorPackagePowerLimit = &v
}

// GetComputeBlade returns the ComputeBlade field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ComputeServerPowerParameters) GetComputeBlade() ComputeBladeRelationship {
	if o == nil || IsNil(o.ComputeBlade.Get()) {
		var ret ComputeBladeRelationship
		return ret
	}
	return *o.ComputeBlade.Get()
}

// GetComputeBladeOk returns a tuple with the ComputeBlade field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ComputeServerPowerParameters) GetComputeBladeOk() (*ComputeBladeRelationship, bool) {
	if o == nil {
		return nil, false
	}
	return o.ComputeBlade.Get(), o.ComputeBlade.IsSet()
}

// HasComputeBlade returns a boolean if a field has been set.
func (o *ComputeServerPowerParameters) HasComputeBlade() bool {
	if o != nil && o.ComputeBlade.IsSet() {
		return true
	}

	return false
}

// SetComputeBlade gets a reference to the given NullableComputeBladeRelationship and assigns it to the ComputeBlade field.
func (o *ComputeServerPowerParameters) SetComputeBlade(v ComputeBladeRelationship) {
	o.ComputeBlade.Set(&v)
}

// SetComputeBladeNil sets the value for ComputeBlade to be an explicit nil
func (o *ComputeServerPowerParameters) SetComputeBladeNil() {
	o.ComputeBlade.Set(nil)
}

// UnsetComputeBlade ensures that no value is present for ComputeBlade, not even an explicit nil
func (o *ComputeServerPowerParameters) UnsetComputeBlade() {
	o.ComputeBlade.Unset()
}

// GetComputeRackUnit returns the ComputeRackUnit field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ComputeServerPowerParameters) GetComputeRackUnit() ComputeRackUnitRelationship {
	if o == nil || IsNil(o.ComputeRackUnit.Get()) {
		var ret ComputeRackUnitRelationship
		return ret
	}
	return *o.ComputeRackUnit.Get()
}

// GetComputeRackUnitOk returns a tuple with the ComputeRackUnit field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ComputeServerPowerParameters) GetComputeRackUnitOk() (*ComputeRackUnitRelationship, bool) {
	if o == nil {
		return nil, false
	}
	return o.ComputeRackUnit.Get(), o.ComputeRackUnit.IsSet()
}

// HasComputeRackUnit returns a boolean if a field has been set.
func (o *ComputeServerPowerParameters) HasComputeRackUnit() bool {
	if o != nil && o.ComputeRackUnit.IsSet() {
		return true
	}

	return false
}

// SetComputeRackUnit gets a reference to the given NullableComputeRackUnitRelationship and assigns it to the ComputeRackUnit field.
func (o *ComputeServerPowerParameters) SetComputeRackUnit(v ComputeRackUnitRelationship) {
	o.ComputeRackUnit.Set(&v)
}

// SetComputeRackUnitNil sets the value for ComputeRackUnit to be an explicit nil
func (o *ComputeServerPowerParameters) SetComputeRackUnitNil() {
	o.ComputeRackUnit.Set(nil)
}

// UnsetComputeRackUnit ensures that no value is present for ComputeRackUnit, not even an explicit nil
func (o *ComputeServerPowerParameters) UnsetComputeRackUnit() {
	o.ComputeRackUnit.Unset()
}

// GetRegisteredDevice returns the RegisteredDevice field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ComputeServerPowerParameters) GetRegisteredDevice() AssetDeviceRegistrationRelationship {
	if o == nil || IsNil(o.RegisteredDevice.Get()) {
		var ret AssetDeviceRegistrationRelationship
		return ret
	}
	return *o.RegisteredDevice.Get()
}

// GetRegisteredDeviceOk returns a tuple with the RegisteredDevice field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ComputeServerPowerParameters) GetRegisteredDeviceOk() (*AssetDeviceRegistrationRelationship, bool) {
	if o == nil {
		return nil, false
	}
	return o.RegisteredDevice.Get(), o.RegisteredDevice.IsSet()
}

// HasRegisteredDevice returns a boolean if a field has been set.
func (o *ComputeServerPowerParameters) HasRegisteredDevice() bool {
	if o != nil && o.RegisteredDevice.IsSet() {
		return true
	}

	return false
}

// SetRegisteredDevice gets a reference to the given NullableAssetDeviceRegistrationRelationship and assigns it to the RegisteredDevice field.
func (o *ComputeServerPowerParameters) SetRegisteredDevice(v AssetDeviceRegistrationRelationship) {
	o.RegisteredDevice.Set(&v)
}

// SetRegisteredDeviceNil sets the value for RegisteredDevice to be an explicit nil
func (o *ComputeServerPowerParameters) SetRegisteredDeviceNil() {
	o.RegisteredDevice.Set(nil)
}

// UnsetRegisteredDevice ensures that no value is present for RegisteredDevice, not even an explicit nil
func (o *ComputeServerPowerParameters) UnsetRegisteredDevice() {
	o.RegisteredDevice.Unset()
}

func (o ComputeServerPowerParameters) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ComputeServerPowerParameters) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	serializedInventoryBase, errInventoryBase := json.Marshal(o.InventoryBase)
	if errInventoryBase != nil {
		return map[string]interface{}{}, errInventoryBase
	}
	errInventoryBase = json.Unmarshal([]byte(serializedInventoryBase), &toSerialize)
	if errInventoryBase != nil {
		return map[string]interface{}{}, errInventoryBase
	}
	if _, exists := toSerialize["ClassId"]; !exists {
		toSerialize["ClassId"] = o.GetDefaultClassId()
	}
	toSerialize["ClassId"] = o.ClassId
	if _, exists := toSerialize["ObjectType"]; !exists {
		toSerialize["ObjectType"] = o.GetDefaultObjectType()
	}
	toSerialize["ObjectType"] = o.ObjectType
	if !IsNil(o.PowerAllocation) {
		toSerialize["PowerAllocation"] = o.PowerAllocation
	}
	if !IsNil(o.PowerPriority) {
		toSerialize["PowerPriority"] = o.PowerPriority
	}
	if !IsNil(o.PowerProfiling) {
		toSerialize["PowerProfiling"] = o.PowerProfiling
	}
	if !IsNil(o.PowerRestore) {
		toSerialize["PowerRestore"] = o.PowerRestore
	}
	if !IsNil(o.ProcessorPackagePowerLimit) {
		toSerialize["ProcessorPackagePowerLimit"] = o.ProcessorPackagePowerLimit
	}
	if o.ComputeBlade.IsSet() {
		toSerialize["ComputeBlade"] = o.ComputeBlade.Get()
	}
	if o.ComputeRackUnit.IsSet() {
		toSerialize["ComputeRackUnit"] = o.ComputeRackUnit.Get()
	}
	if o.RegisteredDevice.IsSet() {
		toSerialize["RegisteredDevice"] = o.RegisteredDevice.Get()
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ComputeServerPowerParameters) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"ClassId",
		"ObjectType",
	}

	// defaultValueFuncMap captures the default values for required properties.
	// These values are used when required properties are missing from the payload.
	defaultValueFuncMap := map[string]func() interface{}{
		"ClassId":    o.GetDefaultClassId,
		"ObjectType": o.GetDefaultObjectType,
	}
	var defaultValueApplied bool
	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			if _, ok := defaultValueFuncMap[requiredProperty]; ok {
				allProperties[requiredProperty] = defaultValueFuncMap[requiredProperty]()
				defaultValueApplied = true
			}
		}
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	if defaultValueApplied {
		data, err = json.Marshal(allProperties)
		if err != nil {
			return err
		}
	}
	type ComputeServerPowerParametersWithoutEmbeddedStruct struct {
		// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.
		ClassId string `json:"ClassId"`
		// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
		ObjectType string `json:"ObjectType"`
		// This field identifies the maximum power that has been allocated to the blade by CMC in Watts. Power budget for the chassis is configured by the power policy. That budget is then divided among the blades in the chassis by CMC.
		PowerAllocation *int64 `json:"PowerAllocation,omitempty"`
		// Power Priority level of the Server. This priority is used to determine the initial power allocation for servers. This field is only supported for Cisco UCS B series and X series servers. * `Unknown` - Power allocation priority of server is either unknown or not supported on CMC firmware version. * `Low` - Power allocation priority of server is low. * `Medium` - Power allocation priority of server is medium. * `High` - Power allocation priority of server is high.
		PowerPriority *string `json:"PowerPriority,omitempty"`
		// Status of Power Profiling setting of the Server. If Enabled, this field allows the power manager to run power profiling utility to determine the power needs of the server. This field is only supported for Cisco UCS X series servers. * `Unknown` - Power Profiling state is either unknown for the server or not supported on BMC firmware version. * `Enabled` - Power Profiling is enabled for the server. * `Disabled` - Power Profiling is either disabled for the server or not supported on BMC firmware version.
		PowerProfiling *string `json:"PowerProfiling,omitempty"`
		// Value of the power restore policy for the server. In the absence of Intersight connectivity, the server will use this state to recover the host power after a power loss event. * `Unknown` - Power restore state for the server is either Unknown or not supported on BMC firmware version. * `Always On` - Power restore state for server is set to Always On. * `Always Off` - Power restore state for server is set to Always Off. * `Last State` - Power restore state for server is set to Last State.
		PowerRestore *string `json:"PowerRestore,omitempty"`
		// Processor Package Power Limit (PPL) of a server. PPL refers to the amount of power that a CPU can draw from the power supply. The Processor Package Power Limit (PPL) feature is currently available exclusively on Cisco UCS C225/C245 M8 servers. * `Unknown` - Processor package power limit is either unknown for the server or not supported on BMC firmware version. * `Default` - Processor package power limit is default for the server. * `Maximum` - Processor package power limit is maximum for the server. * `Minimum` - Processor package power limit is minimum for the server.
		ProcessorPackagePowerLimit *string                                     `json:"ProcessorPackagePowerLimit,omitempty"`
		ComputeBlade               NullableComputeBladeRelationship            `json:"ComputeBlade,omitempty"`
		ComputeRackUnit            NullableComputeRackUnitRelationship         `json:"ComputeRackUnit,omitempty"`
		RegisteredDevice           NullableAssetDeviceRegistrationRelationship `json:"RegisteredDevice,omitempty"`
	}

	varComputeServerPowerParametersWithoutEmbeddedStruct := ComputeServerPowerParametersWithoutEmbeddedStruct{}

	err = json.Unmarshal(data, &varComputeServerPowerParametersWithoutEmbeddedStruct)
	if err == nil {
		varComputeServerPowerParameters := _ComputeServerPowerParameters{}
		varComputeServerPowerParameters.ClassId = varComputeServerPowerParametersWithoutEmbeddedStruct.ClassId
		varComputeServerPowerParameters.ObjectType = varComputeServerPowerParametersWithoutEmbeddedStruct.ObjectType
		varComputeServerPowerParameters.PowerAllocation = varComputeServerPowerParametersWithoutEmbeddedStruct.PowerAllocation
		varComputeServerPowerParameters.PowerPriority = varComputeServerPowerParametersWithoutEmbeddedStruct.PowerPriority
		varComputeServerPowerParameters.PowerProfiling = varComputeServerPowerParametersWithoutEmbeddedStruct.PowerProfiling
		varComputeServerPowerParameters.PowerRestore = varComputeServerPowerParametersWithoutEmbeddedStruct.PowerRestore
		varComputeServerPowerParameters.ProcessorPackagePowerLimit = varComputeServerPowerParametersWithoutEmbeddedStruct.ProcessorPackagePowerLimit
		varComputeServerPowerParameters.ComputeBlade = varComputeServerPowerParametersWithoutEmbeddedStruct.ComputeBlade
		varComputeServerPowerParameters.ComputeRackUnit = varComputeServerPowerParametersWithoutEmbeddedStruct.ComputeRackUnit
		varComputeServerPowerParameters.RegisteredDevice = varComputeServerPowerParametersWithoutEmbeddedStruct.RegisteredDevice
		*o = ComputeServerPowerParameters(varComputeServerPowerParameters)
	} else {
		return err
	}

	varComputeServerPowerParameters := _ComputeServerPowerParameters{}

	err = json.Unmarshal(data, &varComputeServerPowerParameters)
	if err == nil {
		o.InventoryBase = varComputeServerPowerParameters.InventoryBase
	} else {
		return err
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "ClassId")
		delete(additionalProperties, "ObjectType")
		delete(additionalProperties, "PowerAllocation")
		delete(additionalProperties, "PowerPriority")
		delete(additionalProperties, "PowerProfiling")
		delete(additionalProperties, "PowerRestore")
		delete(additionalProperties, "ProcessorPackagePowerLimit")
		delete(additionalProperties, "ComputeBlade")
		delete(additionalProperties, "ComputeRackUnit")
		delete(additionalProperties, "RegisteredDevice")

		// remove fields from embedded structs
		reflectInventoryBase := reflect.ValueOf(o.InventoryBase)
		for i := 0; i < reflectInventoryBase.Type().NumField(); i++ {
			t := reflectInventoryBase.Type().Field(i)

			if jsonTag := t.Tag.Get("json"); jsonTag != "" {
				fieldName := ""
				if commaIdx := strings.Index(jsonTag, ","); commaIdx > 0 {
					fieldName = jsonTag[:commaIdx]
				} else {
					fieldName = jsonTag
				}
				if fieldName != "AdditionalProperties" {
					delete(additionalProperties, fieldName)
				}
			}
		}

		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableComputeServerPowerParameters struct {
	value *ComputeServerPowerParameters
	isSet bool
}

func (v NullableComputeServerPowerParameters) Get() *ComputeServerPowerParameters {
	return v.value
}

func (v *NullableComputeServerPowerParameters) Set(val *ComputeServerPowerParameters) {
	v.value = val
	v.isSet = true
}

func (v NullableComputeServerPowerParameters) IsSet() bool {
	return v.isSet
}

func (v *NullableComputeServerPowerParameters) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableComputeServerPowerParameters(val *ComputeServerPowerParameters) *NullableComputeServerPowerParameters {
	return &NullableComputeServerPowerParameters{value: val, isSet: true}
}

func (v NullableComputeServerPowerParameters) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableComputeServerPowerParameters) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
