/*
Cisco Intersight

Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations. The Intersight OpenAPI document defines the complete set of properties that are returned in the HTTP response. From that perspective, a client can expect that no additional properties are returned, unless these properties are explicitly defined in the OpenAPI document. However, when a client uses an older version of the Intersight OpenAPI document, the server may send additional properties because the software is more recent than the client. In that case, the client may receive properties that it does not know about. Some generated SDKs perform a strict validation of the HTTP response body against the OpenAPI document.

API version: 1.0.11-2024100405
Contact: intersight@cisco.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package intersight

import (
	"encoding/json"
	"fmt"
	"reflect"
	"strings"
)

// checks if the SdaaciConnection type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SdaaciConnection{}

// SdaaciConnection SDA-ACI direct-connect connection.
type SdaaciConnection struct {
	MoBaseMo
	// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.
	ClassId string `json:"ClassId"`
	// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
	ObjectType string `json:"ObjectType"`
	// ACI L3Out Name User Input.
	AciL3Out *string `json:"AciL3Out,omitempty"`
	// Name of the Match Rule in Cisco APIC.
	AciMatchRuleName *string `json:"AciMatchRuleName,omitempty"`
	// ACI tenant Name for Selected APIC Target.
	AciTenant *string `json:"AciTenant,omitempty"`
	// Campus fabric site id in which the border node has configured.
	CampusFabricSite *string `json:"CampusFabricSite,omitempty"`
	// Application EPG Name of this connection.
	Epg *string `json:"Epg,omitempty"`
	// EPG Subnet Ipv4Cidr which is configured on APIC.
	EpgSubnet *string `json:"EpgSubnet,omitempty" validate:"regexp=^$|^([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5]).([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5]).([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5]).([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\/([0-9]|[1-2][0-9]|3[0-2])$"`
	// Device within the selected domain used to configure Firewall.
	FirewallDevice *string `json:"FirewallDevice,omitempty"`
	// Domain used to configure Firewall.
	FirewallDomain *string `json:"FirewallDomain,omitempty"`
	// L3Out Node Profile in Cisco APIC.
	NodeProfile *string `json:"NodeProfile,omitempty"`
	// Connection status between SDA and ACI. * `NotConnected` - Connection Status NotConnected. * `Connected` - Connection Status Connected.
	Status *string `json:"Status,omitempty"`
	// Transit id for given border node.
	Transit *string `json:"Transit,omitempty"`
	// Virtual Network of this connection.
	VirtualNetwork *string `json:"VirtualNetwork,omitempty"`
	// Contains both VN and EPG of this connection.
	VnEpg *string `json:"VnEpg,omitempty"`
	// APIC Tenant VRF from APIC.
	Vrf                  *string                                      `json:"Vrf,omitempty"`
	ApicTarget           NullableAssetTargetRelationship              `json:"ApicTarget,omitempty"`
	DnacTarget           NullableAssetTargetRelationship              `json:"DnacTarget,omitempty"`
	FmcTarget            NullableAssetTargetRelationship              `json:"FmcTarget,omitempty"`
	Organization         NullableOrganizationOrganizationRelationship `json:"Organization,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _SdaaciConnection SdaaciConnection

// NewSdaaciConnection instantiates a new SdaaciConnection object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSdaaciConnection(classId string, objectType string) *SdaaciConnection {
	this := SdaaciConnection{}
	this.ClassId = classId
	this.ObjectType = objectType
	var status string = "NotConnected"
	this.Status = &status
	return &this
}

// NewSdaaciConnectionWithDefaults instantiates a new SdaaciConnection object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSdaaciConnectionWithDefaults() *SdaaciConnection {
	this := SdaaciConnection{}
	var classId string = "sdaaci.Connection"
	this.ClassId = classId
	var objectType string = "sdaaci.Connection"
	this.ObjectType = objectType
	var status string = "NotConnected"
	this.Status = &status
	return &this
}

// GetClassId returns the ClassId field value
func (o *SdaaciConnection) GetClassId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ClassId
}

// GetClassIdOk returns a tuple with the ClassId field value
// and a boolean to check if the value has been set.
func (o *SdaaciConnection) GetClassIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ClassId, true
}

// SetClassId sets field value
func (o *SdaaciConnection) SetClassId(v string) {
	o.ClassId = v
}

// GetDefaultClassId returns the default value "sdaaci.Connection" of the ClassId field.
func (o *SdaaciConnection) GetDefaultClassId() interface{} {
	return "sdaaci.Connection"
}

// GetObjectType returns the ObjectType field value
func (o *SdaaciConnection) GetObjectType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ObjectType
}

// GetObjectTypeOk returns a tuple with the ObjectType field value
// and a boolean to check if the value has been set.
func (o *SdaaciConnection) GetObjectTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ObjectType, true
}

// SetObjectType sets field value
func (o *SdaaciConnection) SetObjectType(v string) {
	o.ObjectType = v
}

// GetDefaultObjectType returns the default value "sdaaci.Connection" of the ObjectType field.
func (o *SdaaciConnection) GetDefaultObjectType() interface{} {
	return "sdaaci.Connection"
}

// GetAciL3Out returns the AciL3Out field value if set, zero value otherwise.
func (o *SdaaciConnection) GetAciL3Out() string {
	if o == nil || IsNil(o.AciL3Out) {
		var ret string
		return ret
	}
	return *o.AciL3Out
}

// GetAciL3OutOk returns a tuple with the AciL3Out field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SdaaciConnection) GetAciL3OutOk() (*string, bool) {
	if o == nil || IsNil(o.AciL3Out) {
		return nil, false
	}
	return o.AciL3Out, true
}

// HasAciL3Out returns a boolean if a field has been set.
func (o *SdaaciConnection) HasAciL3Out() bool {
	if o != nil && !IsNil(o.AciL3Out) {
		return true
	}

	return false
}

// SetAciL3Out gets a reference to the given string and assigns it to the AciL3Out field.
func (o *SdaaciConnection) SetAciL3Out(v string) {
	o.AciL3Out = &v
}

// GetAciMatchRuleName returns the AciMatchRuleName field value if set, zero value otherwise.
func (o *SdaaciConnection) GetAciMatchRuleName() string {
	if o == nil || IsNil(o.AciMatchRuleName) {
		var ret string
		return ret
	}
	return *o.AciMatchRuleName
}

// GetAciMatchRuleNameOk returns a tuple with the AciMatchRuleName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SdaaciConnection) GetAciMatchRuleNameOk() (*string, bool) {
	if o == nil || IsNil(o.AciMatchRuleName) {
		return nil, false
	}
	return o.AciMatchRuleName, true
}

// HasAciMatchRuleName returns a boolean if a field has been set.
func (o *SdaaciConnection) HasAciMatchRuleName() bool {
	if o != nil && !IsNil(o.AciMatchRuleName) {
		return true
	}

	return false
}

// SetAciMatchRuleName gets a reference to the given string and assigns it to the AciMatchRuleName field.
func (o *SdaaciConnection) SetAciMatchRuleName(v string) {
	o.AciMatchRuleName = &v
}

// GetAciTenant returns the AciTenant field value if set, zero value otherwise.
func (o *SdaaciConnection) GetAciTenant() string {
	if o == nil || IsNil(o.AciTenant) {
		var ret string
		return ret
	}
	return *o.AciTenant
}

// GetAciTenantOk returns a tuple with the AciTenant field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SdaaciConnection) GetAciTenantOk() (*string, bool) {
	if o == nil || IsNil(o.AciTenant) {
		return nil, false
	}
	return o.AciTenant, true
}

// HasAciTenant returns a boolean if a field has been set.
func (o *SdaaciConnection) HasAciTenant() bool {
	if o != nil && !IsNil(o.AciTenant) {
		return true
	}

	return false
}

// SetAciTenant gets a reference to the given string and assigns it to the AciTenant field.
func (o *SdaaciConnection) SetAciTenant(v string) {
	o.AciTenant = &v
}

// GetCampusFabricSite returns the CampusFabricSite field value if set, zero value otherwise.
func (o *SdaaciConnection) GetCampusFabricSite() string {
	if o == nil || IsNil(o.CampusFabricSite) {
		var ret string
		return ret
	}
	return *o.CampusFabricSite
}

// GetCampusFabricSiteOk returns a tuple with the CampusFabricSite field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SdaaciConnection) GetCampusFabricSiteOk() (*string, bool) {
	if o == nil || IsNil(o.CampusFabricSite) {
		return nil, false
	}
	return o.CampusFabricSite, true
}

// HasCampusFabricSite returns a boolean if a field has been set.
func (o *SdaaciConnection) HasCampusFabricSite() bool {
	if o != nil && !IsNil(o.CampusFabricSite) {
		return true
	}

	return false
}

// SetCampusFabricSite gets a reference to the given string and assigns it to the CampusFabricSite field.
func (o *SdaaciConnection) SetCampusFabricSite(v string) {
	o.CampusFabricSite = &v
}

// GetEpg returns the Epg field value if set, zero value otherwise.
func (o *SdaaciConnection) GetEpg() string {
	if o == nil || IsNil(o.Epg) {
		var ret string
		return ret
	}
	return *o.Epg
}

// GetEpgOk returns a tuple with the Epg field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SdaaciConnection) GetEpgOk() (*string, bool) {
	if o == nil || IsNil(o.Epg) {
		return nil, false
	}
	return o.Epg, true
}

// HasEpg returns a boolean if a field has been set.
func (o *SdaaciConnection) HasEpg() bool {
	if o != nil && !IsNil(o.Epg) {
		return true
	}

	return false
}

// SetEpg gets a reference to the given string and assigns it to the Epg field.
func (o *SdaaciConnection) SetEpg(v string) {
	o.Epg = &v
}

// GetEpgSubnet returns the EpgSubnet field value if set, zero value otherwise.
func (o *SdaaciConnection) GetEpgSubnet() string {
	if o == nil || IsNil(o.EpgSubnet) {
		var ret string
		return ret
	}
	return *o.EpgSubnet
}

// GetEpgSubnetOk returns a tuple with the EpgSubnet field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SdaaciConnection) GetEpgSubnetOk() (*string, bool) {
	if o == nil || IsNil(o.EpgSubnet) {
		return nil, false
	}
	return o.EpgSubnet, true
}

// HasEpgSubnet returns a boolean if a field has been set.
func (o *SdaaciConnection) HasEpgSubnet() bool {
	if o != nil && !IsNil(o.EpgSubnet) {
		return true
	}

	return false
}

// SetEpgSubnet gets a reference to the given string and assigns it to the EpgSubnet field.
func (o *SdaaciConnection) SetEpgSubnet(v string) {
	o.EpgSubnet = &v
}

// GetFirewallDevice returns the FirewallDevice field value if set, zero value otherwise.
func (o *SdaaciConnection) GetFirewallDevice() string {
	if o == nil || IsNil(o.FirewallDevice) {
		var ret string
		return ret
	}
	return *o.FirewallDevice
}

// GetFirewallDeviceOk returns a tuple with the FirewallDevice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SdaaciConnection) GetFirewallDeviceOk() (*string, bool) {
	if o == nil || IsNil(o.FirewallDevice) {
		return nil, false
	}
	return o.FirewallDevice, true
}

// HasFirewallDevice returns a boolean if a field has been set.
func (o *SdaaciConnection) HasFirewallDevice() bool {
	if o != nil && !IsNil(o.FirewallDevice) {
		return true
	}

	return false
}

// SetFirewallDevice gets a reference to the given string and assigns it to the FirewallDevice field.
func (o *SdaaciConnection) SetFirewallDevice(v string) {
	o.FirewallDevice = &v
}

// GetFirewallDomain returns the FirewallDomain field value if set, zero value otherwise.
func (o *SdaaciConnection) GetFirewallDomain() string {
	if o == nil || IsNil(o.FirewallDomain) {
		var ret string
		return ret
	}
	return *o.FirewallDomain
}

// GetFirewallDomainOk returns a tuple with the FirewallDomain field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SdaaciConnection) GetFirewallDomainOk() (*string, bool) {
	if o == nil || IsNil(o.FirewallDomain) {
		return nil, false
	}
	return o.FirewallDomain, true
}

// HasFirewallDomain returns a boolean if a field has been set.
func (o *SdaaciConnection) HasFirewallDomain() bool {
	if o != nil && !IsNil(o.FirewallDomain) {
		return true
	}

	return false
}

// SetFirewallDomain gets a reference to the given string and assigns it to the FirewallDomain field.
func (o *SdaaciConnection) SetFirewallDomain(v string) {
	o.FirewallDomain = &v
}

// GetNodeProfile returns the NodeProfile field value if set, zero value otherwise.
func (o *SdaaciConnection) GetNodeProfile() string {
	if o == nil || IsNil(o.NodeProfile) {
		var ret string
		return ret
	}
	return *o.NodeProfile
}

// GetNodeProfileOk returns a tuple with the NodeProfile field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SdaaciConnection) GetNodeProfileOk() (*string, bool) {
	if o == nil || IsNil(o.NodeProfile) {
		return nil, false
	}
	return o.NodeProfile, true
}

// HasNodeProfile returns a boolean if a field has been set.
func (o *SdaaciConnection) HasNodeProfile() bool {
	if o != nil && !IsNil(o.NodeProfile) {
		return true
	}

	return false
}

// SetNodeProfile gets a reference to the given string and assigns it to the NodeProfile field.
func (o *SdaaciConnection) SetNodeProfile(v string) {
	o.NodeProfile = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *SdaaciConnection) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SdaaciConnection) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *SdaaciConnection) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *SdaaciConnection) SetStatus(v string) {
	o.Status = &v
}

// GetTransit returns the Transit field value if set, zero value otherwise.
func (o *SdaaciConnection) GetTransit() string {
	if o == nil || IsNil(o.Transit) {
		var ret string
		return ret
	}
	return *o.Transit
}

// GetTransitOk returns a tuple with the Transit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SdaaciConnection) GetTransitOk() (*string, bool) {
	if o == nil || IsNil(o.Transit) {
		return nil, false
	}
	return o.Transit, true
}

// HasTransit returns a boolean if a field has been set.
func (o *SdaaciConnection) HasTransit() bool {
	if o != nil && !IsNil(o.Transit) {
		return true
	}

	return false
}

// SetTransit gets a reference to the given string and assigns it to the Transit field.
func (o *SdaaciConnection) SetTransit(v string) {
	o.Transit = &v
}

// GetVirtualNetwork returns the VirtualNetwork field value if set, zero value otherwise.
func (o *SdaaciConnection) GetVirtualNetwork() string {
	if o == nil || IsNil(o.VirtualNetwork) {
		var ret string
		return ret
	}
	return *o.VirtualNetwork
}

// GetVirtualNetworkOk returns a tuple with the VirtualNetwork field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SdaaciConnection) GetVirtualNetworkOk() (*string, bool) {
	if o == nil || IsNil(o.VirtualNetwork) {
		return nil, false
	}
	return o.VirtualNetwork, true
}

// HasVirtualNetwork returns a boolean if a field has been set.
func (o *SdaaciConnection) HasVirtualNetwork() bool {
	if o != nil && !IsNil(o.VirtualNetwork) {
		return true
	}

	return false
}

// SetVirtualNetwork gets a reference to the given string and assigns it to the VirtualNetwork field.
func (o *SdaaciConnection) SetVirtualNetwork(v string) {
	o.VirtualNetwork = &v
}

// GetVnEpg returns the VnEpg field value if set, zero value otherwise.
func (o *SdaaciConnection) GetVnEpg() string {
	if o == nil || IsNil(o.VnEpg) {
		var ret string
		return ret
	}
	return *o.VnEpg
}

// GetVnEpgOk returns a tuple with the VnEpg field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SdaaciConnection) GetVnEpgOk() (*string, bool) {
	if o == nil || IsNil(o.VnEpg) {
		return nil, false
	}
	return o.VnEpg, true
}

// HasVnEpg returns a boolean if a field has been set.
func (o *SdaaciConnection) HasVnEpg() bool {
	if o != nil && !IsNil(o.VnEpg) {
		return true
	}

	return false
}

// SetVnEpg gets a reference to the given string and assigns it to the VnEpg field.
func (o *SdaaciConnection) SetVnEpg(v string) {
	o.VnEpg = &v
}

// GetVrf returns the Vrf field value if set, zero value otherwise.
func (o *SdaaciConnection) GetVrf() string {
	if o == nil || IsNil(o.Vrf) {
		var ret string
		return ret
	}
	return *o.Vrf
}

// GetVrfOk returns a tuple with the Vrf field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SdaaciConnection) GetVrfOk() (*string, bool) {
	if o == nil || IsNil(o.Vrf) {
		return nil, false
	}
	return o.Vrf, true
}

// HasVrf returns a boolean if a field has been set.
func (o *SdaaciConnection) HasVrf() bool {
	if o != nil && !IsNil(o.Vrf) {
		return true
	}

	return false
}

// SetVrf gets a reference to the given string and assigns it to the Vrf field.
func (o *SdaaciConnection) SetVrf(v string) {
	o.Vrf = &v
}

// GetApicTarget returns the ApicTarget field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SdaaciConnection) GetApicTarget() AssetTargetRelationship {
	if o == nil || IsNil(o.ApicTarget.Get()) {
		var ret AssetTargetRelationship
		return ret
	}
	return *o.ApicTarget.Get()
}

// GetApicTargetOk returns a tuple with the ApicTarget field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SdaaciConnection) GetApicTargetOk() (*AssetTargetRelationship, bool) {
	if o == nil {
		return nil, false
	}
	return o.ApicTarget.Get(), o.ApicTarget.IsSet()
}

// HasApicTarget returns a boolean if a field has been set.
func (o *SdaaciConnection) HasApicTarget() bool {
	if o != nil && o.ApicTarget.IsSet() {
		return true
	}

	return false
}

// SetApicTarget gets a reference to the given NullableAssetTargetRelationship and assigns it to the ApicTarget field.
func (o *SdaaciConnection) SetApicTarget(v AssetTargetRelationship) {
	o.ApicTarget.Set(&v)
}

// SetApicTargetNil sets the value for ApicTarget to be an explicit nil
func (o *SdaaciConnection) SetApicTargetNil() {
	o.ApicTarget.Set(nil)
}

// UnsetApicTarget ensures that no value is present for ApicTarget, not even an explicit nil
func (o *SdaaciConnection) UnsetApicTarget() {
	o.ApicTarget.Unset()
}

// GetDnacTarget returns the DnacTarget field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SdaaciConnection) GetDnacTarget() AssetTargetRelationship {
	if o == nil || IsNil(o.DnacTarget.Get()) {
		var ret AssetTargetRelationship
		return ret
	}
	return *o.DnacTarget.Get()
}

// GetDnacTargetOk returns a tuple with the DnacTarget field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SdaaciConnection) GetDnacTargetOk() (*AssetTargetRelationship, bool) {
	if o == nil {
		return nil, false
	}
	return o.DnacTarget.Get(), o.DnacTarget.IsSet()
}

// HasDnacTarget returns a boolean if a field has been set.
func (o *SdaaciConnection) HasDnacTarget() bool {
	if o != nil && o.DnacTarget.IsSet() {
		return true
	}

	return false
}

// SetDnacTarget gets a reference to the given NullableAssetTargetRelationship and assigns it to the DnacTarget field.
func (o *SdaaciConnection) SetDnacTarget(v AssetTargetRelationship) {
	o.DnacTarget.Set(&v)
}

// SetDnacTargetNil sets the value for DnacTarget to be an explicit nil
func (o *SdaaciConnection) SetDnacTargetNil() {
	o.DnacTarget.Set(nil)
}

// UnsetDnacTarget ensures that no value is present for DnacTarget, not even an explicit nil
func (o *SdaaciConnection) UnsetDnacTarget() {
	o.DnacTarget.Unset()
}

// GetFmcTarget returns the FmcTarget field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SdaaciConnection) GetFmcTarget() AssetTargetRelationship {
	if o == nil || IsNil(o.FmcTarget.Get()) {
		var ret AssetTargetRelationship
		return ret
	}
	return *o.FmcTarget.Get()
}

// GetFmcTargetOk returns a tuple with the FmcTarget field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SdaaciConnection) GetFmcTargetOk() (*AssetTargetRelationship, bool) {
	if o == nil {
		return nil, false
	}
	return o.FmcTarget.Get(), o.FmcTarget.IsSet()
}

// HasFmcTarget returns a boolean if a field has been set.
func (o *SdaaciConnection) HasFmcTarget() bool {
	if o != nil && o.FmcTarget.IsSet() {
		return true
	}

	return false
}

// SetFmcTarget gets a reference to the given NullableAssetTargetRelationship and assigns it to the FmcTarget field.
func (o *SdaaciConnection) SetFmcTarget(v AssetTargetRelationship) {
	o.FmcTarget.Set(&v)
}

// SetFmcTargetNil sets the value for FmcTarget to be an explicit nil
func (o *SdaaciConnection) SetFmcTargetNil() {
	o.FmcTarget.Set(nil)
}

// UnsetFmcTarget ensures that no value is present for FmcTarget, not even an explicit nil
func (o *SdaaciConnection) UnsetFmcTarget() {
	o.FmcTarget.Unset()
}

// GetOrganization returns the Organization field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SdaaciConnection) GetOrganization() OrganizationOrganizationRelationship {
	if o == nil || IsNil(o.Organization.Get()) {
		var ret OrganizationOrganizationRelationship
		return ret
	}
	return *o.Organization.Get()
}

// GetOrganizationOk returns a tuple with the Organization field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SdaaciConnection) GetOrganizationOk() (*OrganizationOrganizationRelationship, bool) {
	if o == nil {
		return nil, false
	}
	return o.Organization.Get(), o.Organization.IsSet()
}

// HasOrganization returns a boolean if a field has been set.
func (o *SdaaciConnection) HasOrganization() bool {
	if o != nil && o.Organization.IsSet() {
		return true
	}

	return false
}

// SetOrganization gets a reference to the given NullableOrganizationOrganizationRelationship and assigns it to the Organization field.
func (o *SdaaciConnection) SetOrganization(v OrganizationOrganizationRelationship) {
	o.Organization.Set(&v)
}

// SetOrganizationNil sets the value for Organization to be an explicit nil
func (o *SdaaciConnection) SetOrganizationNil() {
	o.Organization.Set(nil)
}

// UnsetOrganization ensures that no value is present for Organization, not even an explicit nil
func (o *SdaaciConnection) UnsetOrganization() {
	o.Organization.Unset()
}

func (o SdaaciConnection) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SdaaciConnection) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	serializedMoBaseMo, errMoBaseMo := json.Marshal(o.MoBaseMo)
	if errMoBaseMo != nil {
		return map[string]interface{}{}, errMoBaseMo
	}
	errMoBaseMo = json.Unmarshal([]byte(serializedMoBaseMo), &toSerialize)
	if errMoBaseMo != nil {
		return map[string]interface{}{}, errMoBaseMo
	}
	if _, exists := toSerialize["ClassId"]; !exists {
		toSerialize["ClassId"] = o.GetDefaultClassId()
	}
	toSerialize["ClassId"] = o.ClassId
	if _, exists := toSerialize["ObjectType"]; !exists {
		toSerialize["ObjectType"] = o.GetDefaultObjectType()
	}
	toSerialize["ObjectType"] = o.ObjectType
	if !IsNil(o.AciL3Out) {
		toSerialize["AciL3Out"] = o.AciL3Out
	}
	if !IsNil(o.AciMatchRuleName) {
		toSerialize["AciMatchRuleName"] = o.AciMatchRuleName
	}
	if !IsNil(o.AciTenant) {
		toSerialize["AciTenant"] = o.AciTenant
	}
	if !IsNil(o.CampusFabricSite) {
		toSerialize["CampusFabricSite"] = o.CampusFabricSite
	}
	if !IsNil(o.Epg) {
		toSerialize["Epg"] = o.Epg
	}
	if !IsNil(o.EpgSubnet) {
		toSerialize["EpgSubnet"] = o.EpgSubnet
	}
	if !IsNil(o.FirewallDevice) {
		toSerialize["FirewallDevice"] = o.FirewallDevice
	}
	if !IsNil(o.FirewallDomain) {
		toSerialize["FirewallDomain"] = o.FirewallDomain
	}
	if !IsNil(o.NodeProfile) {
		toSerialize["NodeProfile"] = o.NodeProfile
	}
	if !IsNil(o.Status) {
		toSerialize["Status"] = o.Status
	}
	if !IsNil(o.Transit) {
		toSerialize["Transit"] = o.Transit
	}
	if !IsNil(o.VirtualNetwork) {
		toSerialize["VirtualNetwork"] = o.VirtualNetwork
	}
	if !IsNil(o.VnEpg) {
		toSerialize["VnEpg"] = o.VnEpg
	}
	if !IsNil(o.Vrf) {
		toSerialize["Vrf"] = o.Vrf
	}
	if o.ApicTarget.IsSet() {
		toSerialize["ApicTarget"] = o.ApicTarget.Get()
	}
	if o.DnacTarget.IsSet() {
		toSerialize["DnacTarget"] = o.DnacTarget.Get()
	}
	if o.FmcTarget.IsSet() {
		toSerialize["FmcTarget"] = o.FmcTarget.Get()
	}
	if o.Organization.IsSet() {
		toSerialize["Organization"] = o.Organization.Get()
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *SdaaciConnection) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"ClassId",
		"ObjectType",
	}

	// defaultValueFuncMap captures the default values for required properties.
	// These values are used when required properties are missing from the payload.
	defaultValueFuncMap := map[string]func() interface{}{
		"ClassId":    o.GetDefaultClassId,
		"ObjectType": o.GetDefaultObjectType,
	}
	var defaultValueApplied bool
	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			if _, ok := defaultValueFuncMap[requiredProperty]; ok {
				allProperties[requiredProperty] = defaultValueFuncMap[requiredProperty]()
				defaultValueApplied = true
			}
		}
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	if defaultValueApplied {
		data, err = json.Marshal(allProperties)
		if err != nil {
			return err
		}
	}
	type SdaaciConnectionWithoutEmbeddedStruct struct {
		// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.
		ClassId string `json:"ClassId"`
		// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
		ObjectType string `json:"ObjectType"`
		// ACI L3Out Name User Input.
		AciL3Out *string `json:"AciL3Out,omitempty"`
		// Name of the Match Rule in Cisco APIC.
		AciMatchRuleName *string `json:"AciMatchRuleName,omitempty"`
		// ACI tenant Name for Selected APIC Target.
		AciTenant *string `json:"AciTenant,omitempty"`
		// Campus fabric site id in which the border node has configured.
		CampusFabricSite *string `json:"CampusFabricSite,omitempty"`
		// Application EPG Name of this connection.
		Epg *string `json:"Epg,omitempty"`
		// EPG Subnet Ipv4Cidr which is configured on APIC.
		EpgSubnet *string `json:"EpgSubnet,omitempty" validate:"regexp=^$|^([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5]).([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5]).([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5]).([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\/([0-9]|[1-2][0-9]|3[0-2])$"`
		// Device within the selected domain used to configure Firewall.
		FirewallDevice *string `json:"FirewallDevice,omitempty"`
		// Domain used to configure Firewall.
		FirewallDomain *string `json:"FirewallDomain,omitempty"`
		// L3Out Node Profile in Cisco APIC.
		NodeProfile *string `json:"NodeProfile,omitempty"`
		// Connection status between SDA and ACI. * `NotConnected` - Connection Status NotConnected. * `Connected` - Connection Status Connected.
		Status *string `json:"Status,omitempty"`
		// Transit id for given border node.
		Transit *string `json:"Transit,omitempty"`
		// Virtual Network of this connection.
		VirtualNetwork *string `json:"VirtualNetwork,omitempty"`
		// Contains both VN and EPG of this connection.
		VnEpg *string `json:"VnEpg,omitempty"`
		// APIC Tenant VRF from APIC.
		Vrf          *string                                      `json:"Vrf,omitempty"`
		ApicTarget   NullableAssetTargetRelationship              `json:"ApicTarget,omitempty"`
		DnacTarget   NullableAssetTargetRelationship              `json:"DnacTarget,omitempty"`
		FmcTarget    NullableAssetTargetRelationship              `json:"FmcTarget,omitempty"`
		Organization NullableOrganizationOrganizationRelationship `json:"Organization,omitempty"`
	}

	varSdaaciConnectionWithoutEmbeddedStruct := SdaaciConnectionWithoutEmbeddedStruct{}

	err = json.Unmarshal(data, &varSdaaciConnectionWithoutEmbeddedStruct)
	if err == nil {
		varSdaaciConnection := _SdaaciConnection{}
		varSdaaciConnection.ClassId = varSdaaciConnectionWithoutEmbeddedStruct.ClassId
		varSdaaciConnection.ObjectType = varSdaaciConnectionWithoutEmbeddedStruct.ObjectType
		varSdaaciConnection.AciL3Out = varSdaaciConnectionWithoutEmbeddedStruct.AciL3Out
		varSdaaciConnection.AciMatchRuleName = varSdaaciConnectionWithoutEmbeddedStruct.AciMatchRuleName
		varSdaaciConnection.AciTenant = varSdaaciConnectionWithoutEmbeddedStruct.AciTenant
		varSdaaciConnection.CampusFabricSite = varSdaaciConnectionWithoutEmbeddedStruct.CampusFabricSite
		varSdaaciConnection.Epg = varSdaaciConnectionWithoutEmbeddedStruct.Epg
		varSdaaciConnection.EpgSubnet = varSdaaciConnectionWithoutEmbeddedStruct.EpgSubnet
		varSdaaciConnection.FirewallDevice = varSdaaciConnectionWithoutEmbeddedStruct.FirewallDevice
		varSdaaciConnection.FirewallDomain = varSdaaciConnectionWithoutEmbeddedStruct.FirewallDomain
		varSdaaciConnection.NodeProfile = varSdaaciConnectionWithoutEmbeddedStruct.NodeProfile
		varSdaaciConnection.Status = varSdaaciConnectionWithoutEmbeddedStruct.Status
		varSdaaciConnection.Transit = varSdaaciConnectionWithoutEmbeddedStruct.Transit
		varSdaaciConnection.VirtualNetwork = varSdaaciConnectionWithoutEmbeddedStruct.VirtualNetwork
		varSdaaciConnection.VnEpg = varSdaaciConnectionWithoutEmbeddedStruct.VnEpg
		varSdaaciConnection.Vrf = varSdaaciConnectionWithoutEmbeddedStruct.Vrf
		varSdaaciConnection.ApicTarget = varSdaaciConnectionWithoutEmbeddedStruct.ApicTarget
		varSdaaciConnection.DnacTarget = varSdaaciConnectionWithoutEmbeddedStruct.DnacTarget
		varSdaaciConnection.FmcTarget = varSdaaciConnectionWithoutEmbeddedStruct.FmcTarget
		varSdaaciConnection.Organization = varSdaaciConnectionWithoutEmbeddedStruct.Organization
		*o = SdaaciConnection(varSdaaciConnection)
	} else {
		return err
	}

	varSdaaciConnection := _SdaaciConnection{}

	err = json.Unmarshal(data, &varSdaaciConnection)
	if err == nil {
		o.MoBaseMo = varSdaaciConnection.MoBaseMo
	} else {
		return err
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "ClassId")
		delete(additionalProperties, "ObjectType")
		delete(additionalProperties, "AciL3Out")
		delete(additionalProperties, "AciMatchRuleName")
		delete(additionalProperties, "AciTenant")
		delete(additionalProperties, "CampusFabricSite")
		delete(additionalProperties, "Epg")
		delete(additionalProperties, "EpgSubnet")
		delete(additionalProperties, "FirewallDevice")
		delete(additionalProperties, "FirewallDomain")
		delete(additionalProperties, "NodeProfile")
		delete(additionalProperties, "Status")
		delete(additionalProperties, "Transit")
		delete(additionalProperties, "VirtualNetwork")
		delete(additionalProperties, "VnEpg")
		delete(additionalProperties, "Vrf")
		delete(additionalProperties, "ApicTarget")
		delete(additionalProperties, "DnacTarget")
		delete(additionalProperties, "FmcTarget")
		delete(additionalProperties, "Organization")

		// remove fields from embedded structs
		reflectMoBaseMo := reflect.ValueOf(o.MoBaseMo)
		for i := 0; i < reflectMoBaseMo.Type().NumField(); i++ {
			t := reflectMoBaseMo.Type().Field(i)

			if jsonTag := t.Tag.Get("json"); jsonTag != "" {
				fieldName := ""
				if commaIdx := strings.Index(jsonTag, ","); commaIdx > 0 {
					fieldName = jsonTag[:commaIdx]
				} else {
					fieldName = jsonTag
				}
				if fieldName != "AdditionalProperties" {
					delete(additionalProperties, fieldName)
				}
			}
		}

		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableSdaaciConnection struct {
	value *SdaaciConnection
	isSet bool
}

func (v NullableSdaaciConnection) Get() *SdaaciConnection {
	return v.value
}

func (v *NullableSdaaciConnection) Set(val *SdaaciConnection) {
	v.value = val
	v.isSet = true
}

func (v NullableSdaaciConnection) IsSet() bool {
	return v.isSet
}

func (v *NullableSdaaciConnection) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSdaaciConnection(val *SdaaciConnection) *NullableSdaaciConnection {
	return &NullableSdaaciConnection{value: val, isSet: true}
}

func (v NullableSdaaciConnection) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSdaaciConnection) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
