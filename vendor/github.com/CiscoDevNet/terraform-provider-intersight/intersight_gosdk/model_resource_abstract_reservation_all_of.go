/*
Cisco Intersight

Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations. The Intersight OpenAPI document defines the complete set of properties that are returned in the HTTP response. From that perspective, a client can expect that no additional properties are returned, unless these properties are explicitly defined in the OpenAPI document. However, when a client uses an older version of the Intersight OpenAPI document, the server may send additional properties because the software is more recent than the client. In that case, the client may receive properties that it does not know about. Some generated SDKs perform a strict validation of the HTTP response body against the OpenAPI document.

API version: 1.0.11-16342
Contact: intersight@cisco.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package intersight

import (
	"encoding/json"
	"time"
)

// ResourceAbstractReservationAllOf Definition of the list of properties defined in 'resource.AbstractReservation', excluding properties defined in parent classes.
type ResourceAbstractReservationAllOf struct {
	// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data. The enum values provides the list of concrete types that can be instantiated from this abstract type.
	ClassId string `json:"ClassId"`
	// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property. The enum values provides the list of concrete types that can be instantiated from this abstract type.
	ObjectType string `json:"ObjectType"`
	// Details of the use case for which the reservation was created, such as decommissioning.
	Description *string `json:"Description,omitempty"`
	// The resource reservation includes an expiration date and a timestamp indicating when this management object will be cleared. The expiration date is set during the decommissioning process and is maintained for a period of 3 months.
	Expiration *time.Time `json:"Expiration,omitempty"`
	// The unique identification of the resource is based on the resource OData string, which is mentioned as part of the ReservationSelector. For example, 'Serial eq 'EM6259AE6B'.
	ReservationSelector *string `json:"ReservationSelector,omitempty"`
	// The type of resource that is placed into resource groups or pools. Resource Type can be either 'compute.Blade' or 'compute.RackUnit for pools.
	ResourceType *string `json:"ResourceType,omitempty"`
	// The reservation status can be in the 'Created', 'Processing', 'Failed', or 'Finished' state. * `Created` - By default, a reservation is in Created status. * `Processing` - A reservation is changed to Processing status for appliance mode resource claim requests. * `Failed` - A reservation is changed to Failed status if the validations on resources, resource groups fails. * `Finished` - A reservation is changed to Finished status if the validations on resources, resource groups are successful. The resource moids in reservation will be added to resource groups using OData filters.
	Status               *string               `json:"Status,omitempty"`
	Identity             *MoBaseMoRelationship `json:"Identity,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ResourceAbstractReservationAllOf ResourceAbstractReservationAllOf

// NewResourceAbstractReservationAllOf instantiates a new ResourceAbstractReservationAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewResourceAbstractReservationAllOf(classId string, objectType string) *ResourceAbstractReservationAllOf {
	this := ResourceAbstractReservationAllOf{}
	this.ClassId = classId
	this.ObjectType = objectType
	return &this
}

// NewResourceAbstractReservationAllOfWithDefaults instantiates a new ResourceAbstractReservationAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewResourceAbstractReservationAllOfWithDefaults() *ResourceAbstractReservationAllOf {
	this := ResourceAbstractReservationAllOf{}
	var classId string = "resourcepool.MembershipReservation"
	this.ClassId = classId
	var objectType string = "resourcepool.MembershipReservation"
	this.ObjectType = objectType
	return &this
}

// GetClassId returns the ClassId field value
func (o *ResourceAbstractReservationAllOf) GetClassId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ClassId
}

// GetClassIdOk returns a tuple with the ClassId field value
// and a boolean to check if the value has been set.
func (o *ResourceAbstractReservationAllOf) GetClassIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ClassId, true
}

// SetClassId sets field value
func (o *ResourceAbstractReservationAllOf) SetClassId(v string) {
	o.ClassId = v
}

// GetObjectType returns the ObjectType field value
func (o *ResourceAbstractReservationAllOf) GetObjectType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ObjectType
}

// GetObjectTypeOk returns a tuple with the ObjectType field value
// and a boolean to check if the value has been set.
func (o *ResourceAbstractReservationAllOf) GetObjectTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ObjectType, true
}

// SetObjectType sets field value
func (o *ResourceAbstractReservationAllOf) SetObjectType(v string) {
	o.ObjectType = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *ResourceAbstractReservationAllOf) GetDescription() string {
	if o == nil || o.Description == nil {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResourceAbstractReservationAllOf) GetDescriptionOk() (*string, bool) {
	if o == nil || o.Description == nil {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *ResourceAbstractReservationAllOf) HasDescription() bool {
	if o != nil && o.Description != nil {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *ResourceAbstractReservationAllOf) SetDescription(v string) {
	o.Description = &v
}

// GetExpiration returns the Expiration field value if set, zero value otherwise.
func (o *ResourceAbstractReservationAllOf) GetExpiration() time.Time {
	if o == nil || o.Expiration == nil {
		var ret time.Time
		return ret
	}
	return *o.Expiration
}

// GetExpirationOk returns a tuple with the Expiration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResourceAbstractReservationAllOf) GetExpirationOk() (*time.Time, bool) {
	if o == nil || o.Expiration == nil {
		return nil, false
	}
	return o.Expiration, true
}

// HasExpiration returns a boolean if a field has been set.
func (o *ResourceAbstractReservationAllOf) HasExpiration() bool {
	if o != nil && o.Expiration != nil {
		return true
	}

	return false
}

// SetExpiration gets a reference to the given time.Time and assigns it to the Expiration field.
func (o *ResourceAbstractReservationAllOf) SetExpiration(v time.Time) {
	o.Expiration = &v
}

// GetReservationSelector returns the ReservationSelector field value if set, zero value otherwise.
func (o *ResourceAbstractReservationAllOf) GetReservationSelector() string {
	if o == nil || o.ReservationSelector == nil {
		var ret string
		return ret
	}
	return *o.ReservationSelector
}

// GetReservationSelectorOk returns a tuple with the ReservationSelector field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResourceAbstractReservationAllOf) GetReservationSelectorOk() (*string, bool) {
	if o == nil || o.ReservationSelector == nil {
		return nil, false
	}
	return o.ReservationSelector, true
}

// HasReservationSelector returns a boolean if a field has been set.
func (o *ResourceAbstractReservationAllOf) HasReservationSelector() bool {
	if o != nil && o.ReservationSelector != nil {
		return true
	}

	return false
}

// SetReservationSelector gets a reference to the given string and assigns it to the ReservationSelector field.
func (o *ResourceAbstractReservationAllOf) SetReservationSelector(v string) {
	o.ReservationSelector = &v
}

// GetResourceType returns the ResourceType field value if set, zero value otherwise.
func (o *ResourceAbstractReservationAllOf) GetResourceType() string {
	if o == nil || o.ResourceType == nil {
		var ret string
		return ret
	}
	return *o.ResourceType
}

// GetResourceTypeOk returns a tuple with the ResourceType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResourceAbstractReservationAllOf) GetResourceTypeOk() (*string, bool) {
	if o == nil || o.ResourceType == nil {
		return nil, false
	}
	return o.ResourceType, true
}

// HasResourceType returns a boolean if a field has been set.
func (o *ResourceAbstractReservationAllOf) HasResourceType() bool {
	if o != nil && o.ResourceType != nil {
		return true
	}

	return false
}

// SetResourceType gets a reference to the given string and assigns it to the ResourceType field.
func (o *ResourceAbstractReservationAllOf) SetResourceType(v string) {
	o.ResourceType = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *ResourceAbstractReservationAllOf) GetStatus() string {
	if o == nil || o.Status == nil {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResourceAbstractReservationAllOf) GetStatusOk() (*string, bool) {
	if o == nil || o.Status == nil {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *ResourceAbstractReservationAllOf) HasStatus() bool {
	if o != nil && o.Status != nil {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *ResourceAbstractReservationAllOf) SetStatus(v string) {
	o.Status = &v
}

// GetIdentity returns the Identity field value if set, zero value otherwise.
func (o *ResourceAbstractReservationAllOf) GetIdentity() MoBaseMoRelationship {
	if o == nil || o.Identity == nil {
		var ret MoBaseMoRelationship
		return ret
	}
	return *o.Identity
}

// GetIdentityOk returns a tuple with the Identity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResourceAbstractReservationAllOf) GetIdentityOk() (*MoBaseMoRelationship, bool) {
	if o == nil || o.Identity == nil {
		return nil, false
	}
	return o.Identity, true
}

// HasIdentity returns a boolean if a field has been set.
func (o *ResourceAbstractReservationAllOf) HasIdentity() bool {
	if o != nil && o.Identity != nil {
		return true
	}

	return false
}

// SetIdentity gets a reference to the given MoBaseMoRelationship and assigns it to the Identity field.
func (o *ResourceAbstractReservationAllOf) SetIdentity(v MoBaseMoRelationship) {
	o.Identity = &v
}

func (o ResourceAbstractReservationAllOf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["ClassId"] = o.ClassId
	}
	if true {
		toSerialize["ObjectType"] = o.ObjectType
	}
	if o.Description != nil {
		toSerialize["Description"] = o.Description
	}
	if o.Expiration != nil {
		toSerialize["Expiration"] = o.Expiration
	}
	if o.ReservationSelector != nil {
		toSerialize["ReservationSelector"] = o.ReservationSelector
	}
	if o.ResourceType != nil {
		toSerialize["ResourceType"] = o.ResourceType
	}
	if o.Status != nil {
		toSerialize["Status"] = o.Status
	}
	if o.Identity != nil {
		toSerialize["Identity"] = o.Identity
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *ResourceAbstractReservationAllOf) UnmarshalJSON(bytes []byte) (err error) {
	varResourceAbstractReservationAllOf := _ResourceAbstractReservationAllOf{}

	if err = json.Unmarshal(bytes, &varResourceAbstractReservationAllOf); err == nil {
		*o = ResourceAbstractReservationAllOf(varResourceAbstractReservationAllOf)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "ClassId")
		delete(additionalProperties, "ObjectType")
		delete(additionalProperties, "Description")
		delete(additionalProperties, "Expiration")
		delete(additionalProperties, "ReservationSelector")
		delete(additionalProperties, "ResourceType")
		delete(additionalProperties, "Status")
		delete(additionalProperties, "Identity")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableResourceAbstractReservationAllOf struct {
	value *ResourceAbstractReservationAllOf
	isSet bool
}

func (v NullableResourceAbstractReservationAllOf) Get() *ResourceAbstractReservationAllOf {
	return v.value
}

func (v *NullableResourceAbstractReservationAllOf) Set(val *ResourceAbstractReservationAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableResourceAbstractReservationAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableResourceAbstractReservationAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResourceAbstractReservationAllOf(val *ResourceAbstractReservationAllOf) *NullableResourceAbstractReservationAllOf {
	return &NullableResourceAbstractReservationAllOf{value: val, isSet: true}
}

func (v NullableResourceAbstractReservationAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResourceAbstractReservationAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
