/*
Cisco Intersight

Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations. The Intersight OpenAPI document defines the complete set of properties that are returned in the HTTP response. From that perspective, a client can expect that no additional properties are returned, unless these properties are explicitly defined in the OpenAPI document. However, when a client uses an older version of the Intersight OpenAPI document, the server may send additional properties because the software is more recent than the client. In that case, the client may receive properties that it does not know about. Some generated SDKs perform a strict validation of the HTTP response body against the OpenAPI document.

API version: 1.0.11-2025062323
Contact: intersight@cisco.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package intersight

import (
	"encoding/json"
	"fmt"
	"reflect"
	"strings"
)

// checks if the CoremanagementCoreFile type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CoremanagementCoreFile{}

// CoremanagementCoreFile Core file meta data for individual core files on device.
type CoremanagementCoreFile struct {
	MoBaseMo
	// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.
	ClassId string `json:"ClassId"`
	// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
	ObjectType string `json:"ObjectType"`
	// Admin state prop to trigger file upload. * `None` - Admin configured None State. * `Upload` - Admin configured Upload State.
	AdminState *string `json:"AdminState,omitempty"`
	// The Url to download the core file. It will be set only after successful completion of core file upload to storage service.
	CoreFileDownloadUrl *string `json:"CoreFileDownloadUrl,omitempty"`
	// The device object type for the end point.
	DeviceType *string `json:"DeviceType,omitempty"`
	// Endpoint device identifier. In IMM devices, it will be Fabric Interconnect hostname.
	EndpointIdentifier *string `json:"EndpointIdentifier,omitempty"`
	// The name of core file from endpoint device.
	FileName *string `json:"FileName,omitempty"`
	// File size of core file in bytes.
	FileSize *int64 `json:"FileSize,omitempty"`
	// Node id within cluster where core file is present.
	NodeId *string `json:"NodeId,omitempty"`
	// Product identification of the device.
	Pid *string `json:"Pid,omitempty"`
	// Reason for upload failure, if any. In successful upload case, it will be empty.
	Reason *string `json:"Reason,omitempty"`
	// Serial number of the device.
	Serial *string `json:"Serial,omitempty"`
	// Status of core file upload. Valid values are InventoryComplete (default), UploadInProgress, Completed, UploadFailed, FileDownloadUrlCreationFailed, CoreRemovedDownloadOnly. * `InventoryComplete` - Default status for all mos before file upload is requested. * `UploadInProgress` - File upload is in progress. * `UploadFailed` - File upload to storage service failed. * `Completed` - File upload to storage service completed successfully. * `FileDownloadUrlCreationFailed` - File upload to storage service completed successfully but download url creation failed. * `CoreRemovedDownloadOnly` - File upload to storage service completed successfully but file removed from endpoint device.
	Status               *string                                     `json:"Status,omitempty"`
	InventoryParent      NullableMoBaseMoRelationship                `json:"InventoryParent,omitempty"`
	RegisteredDevice     NullableAssetDeviceRegistrationRelationship `json:"RegisteredDevice,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _CoremanagementCoreFile CoremanagementCoreFile

// NewCoremanagementCoreFile instantiates a new CoremanagementCoreFile object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCoremanagementCoreFile(classId string, objectType string) *CoremanagementCoreFile {
	this := CoremanagementCoreFile{}
	this.ClassId = classId
	this.ObjectType = objectType
	var adminState string = "None"
	this.AdminState = &adminState
	return &this
}

// NewCoremanagementCoreFileWithDefaults instantiates a new CoremanagementCoreFile object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCoremanagementCoreFileWithDefaults() *CoremanagementCoreFile {
	this := CoremanagementCoreFile{}
	var classId string = "coremanagement.CoreFile"
	this.ClassId = classId
	var objectType string = "coremanagement.CoreFile"
	this.ObjectType = objectType
	var adminState string = "None"
	this.AdminState = &adminState
	return &this
}

// GetClassId returns the ClassId field value
func (o *CoremanagementCoreFile) GetClassId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ClassId
}

// GetClassIdOk returns a tuple with the ClassId field value
// and a boolean to check if the value has been set.
func (o *CoremanagementCoreFile) GetClassIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ClassId, true
}

// SetClassId sets field value
func (o *CoremanagementCoreFile) SetClassId(v string) {
	o.ClassId = v
}

// GetDefaultClassId returns the default value "coremanagement.CoreFile" of the ClassId field.
func (o *CoremanagementCoreFile) GetDefaultClassId() interface{} {
	return "coremanagement.CoreFile"
}

// GetObjectType returns the ObjectType field value
func (o *CoremanagementCoreFile) GetObjectType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ObjectType
}

// GetObjectTypeOk returns a tuple with the ObjectType field value
// and a boolean to check if the value has been set.
func (o *CoremanagementCoreFile) GetObjectTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ObjectType, true
}

// SetObjectType sets field value
func (o *CoremanagementCoreFile) SetObjectType(v string) {
	o.ObjectType = v
}

// GetDefaultObjectType returns the default value "coremanagement.CoreFile" of the ObjectType field.
func (o *CoremanagementCoreFile) GetDefaultObjectType() interface{} {
	return "coremanagement.CoreFile"
}

// GetAdminState returns the AdminState field value if set, zero value otherwise.
func (o *CoremanagementCoreFile) GetAdminState() string {
	if o == nil || IsNil(o.AdminState) {
		var ret string
		return ret
	}
	return *o.AdminState
}

// GetAdminStateOk returns a tuple with the AdminState field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoremanagementCoreFile) GetAdminStateOk() (*string, bool) {
	if o == nil || IsNil(o.AdminState) {
		return nil, false
	}
	return o.AdminState, true
}

// HasAdminState returns a boolean if a field has been set.
func (o *CoremanagementCoreFile) HasAdminState() bool {
	if o != nil && !IsNil(o.AdminState) {
		return true
	}

	return false
}

// SetAdminState gets a reference to the given string and assigns it to the AdminState field.
func (o *CoremanagementCoreFile) SetAdminState(v string) {
	o.AdminState = &v
}

// GetCoreFileDownloadUrl returns the CoreFileDownloadUrl field value if set, zero value otherwise.
func (o *CoremanagementCoreFile) GetCoreFileDownloadUrl() string {
	if o == nil || IsNil(o.CoreFileDownloadUrl) {
		var ret string
		return ret
	}
	return *o.CoreFileDownloadUrl
}

// GetCoreFileDownloadUrlOk returns a tuple with the CoreFileDownloadUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoremanagementCoreFile) GetCoreFileDownloadUrlOk() (*string, bool) {
	if o == nil || IsNil(o.CoreFileDownloadUrl) {
		return nil, false
	}
	return o.CoreFileDownloadUrl, true
}

// HasCoreFileDownloadUrl returns a boolean if a field has been set.
func (o *CoremanagementCoreFile) HasCoreFileDownloadUrl() bool {
	if o != nil && !IsNil(o.CoreFileDownloadUrl) {
		return true
	}

	return false
}

// SetCoreFileDownloadUrl gets a reference to the given string and assigns it to the CoreFileDownloadUrl field.
func (o *CoremanagementCoreFile) SetCoreFileDownloadUrl(v string) {
	o.CoreFileDownloadUrl = &v
}

// GetDeviceType returns the DeviceType field value if set, zero value otherwise.
func (o *CoremanagementCoreFile) GetDeviceType() string {
	if o == nil || IsNil(o.DeviceType) {
		var ret string
		return ret
	}
	return *o.DeviceType
}

// GetDeviceTypeOk returns a tuple with the DeviceType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoremanagementCoreFile) GetDeviceTypeOk() (*string, bool) {
	if o == nil || IsNil(o.DeviceType) {
		return nil, false
	}
	return o.DeviceType, true
}

// HasDeviceType returns a boolean if a field has been set.
func (o *CoremanagementCoreFile) HasDeviceType() bool {
	if o != nil && !IsNil(o.DeviceType) {
		return true
	}

	return false
}

// SetDeviceType gets a reference to the given string and assigns it to the DeviceType field.
func (o *CoremanagementCoreFile) SetDeviceType(v string) {
	o.DeviceType = &v
}

// GetEndpointIdentifier returns the EndpointIdentifier field value if set, zero value otherwise.
func (o *CoremanagementCoreFile) GetEndpointIdentifier() string {
	if o == nil || IsNil(o.EndpointIdentifier) {
		var ret string
		return ret
	}
	return *o.EndpointIdentifier
}

// GetEndpointIdentifierOk returns a tuple with the EndpointIdentifier field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoremanagementCoreFile) GetEndpointIdentifierOk() (*string, bool) {
	if o == nil || IsNil(o.EndpointIdentifier) {
		return nil, false
	}
	return o.EndpointIdentifier, true
}

// HasEndpointIdentifier returns a boolean if a field has been set.
func (o *CoremanagementCoreFile) HasEndpointIdentifier() bool {
	if o != nil && !IsNil(o.EndpointIdentifier) {
		return true
	}

	return false
}

// SetEndpointIdentifier gets a reference to the given string and assigns it to the EndpointIdentifier field.
func (o *CoremanagementCoreFile) SetEndpointIdentifier(v string) {
	o.EndpointIdentifier = &v
}

// GetFileName returns the FileName field value if set, zero value otherwise.
func (o *CoremanagementCoreFile) GetFileName() string {
	if o == nil || IsNil(o.FileName) {
		var ret string
		return ret
	}
	return *o.FileName
}

// GetFileNameOk returns a tuple with the FileName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoremanagementCoreFile) GetFileNameOk() (*string, bool) {
	if o == nil || IsNil(o.FileName) {
		return nil, false
	}
	return o.FileName, true
}

// HasFileName returns a boolean if a field has been set.
func (o *CoremanagementCoreFile) HasFileName() bool {
	if o != nil && !IsNil(o.FileName) {
		return true
	}

	return false
}

// SetFileName gets a reference to the given string and assigns it to the FileName field.
func (o *CoremanagementCoreFile) SetFileName(v string) {
	o.FileName = &v
}

// GetFileSize returns the FileSize field value if set, zero value otherwise.
func (o *CoremanagementCoreFile) GetFileSize() int64 {
	if o == nil || IsNil(o.FileSize) {
		var ret int64
		return ret
	}
	return *o.FileSize
}

// GetFileSizeOk returns a tuple with the FileSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoremanagementCoreFile) GetFileSizeOk() (*int64, bool) {
	if o == nil || IsNil(o.FileSize) {
		return nil, false
	}
	return o.FileSize, true
}

// HasFileSize returns a boolean if a field has been set.
func (o *CoremanagementCoreFile) HasFileSize() bool {
	if o != nil && !IsNil(o.FileSize) {
		return true
	}

	return false
}

// SetFileSize gets a reference to the given int64 and assigns it to the FileSize field.
func (o *CoremanagementCoreFile) SetFileSize(v int64) {
	o.FileSize = &v
}

// GetNodeId returns the NodeId field value if set, zero value otherwise.
func (o *CoremanagementCoreFile) GetNodeId() string {
	if o == nil || IsNil(o.NodeId) {
		var ret string
		return ret
	}
	return *o.NodeId
}

// GetNodeIdOk returns a tuple with the NodeId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoremanagementCoreFile) GetNodeIdOk() (*string, bool) {
	if o == nil || IsNil(o.NodeId) {
		return nil, false
	}
	return o.NodeId, true
}

// HasNodeId returns a boolean if a field has been set.
func (o *CoremanagementCoreFile) HasNodeId() bool {
	if o != nil && !IsNil(o.NodeId) {
		return true
	}

	return false
}

// SetNodeId gets a reference to the given string and assigns it to the NodeId field.
func (o *CoremanagementCoreFile) SetNodeId(v string) {
	o.NodeId = &v
}

// GetPid returns the Pid field value if set, zero value otherwise.
func (o *CoremanagementCoreFile) GetPid() string {
	if o == nil || IsNil(o.Pid) {
		var ret string
		return ret
	}
	return *o.Pid
}

// GetPidOk returns a tuple with the Pid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoremanagementCoreFile) GetPidOk() (*string, bool) {
	if o == nil || IsNil(o.Pid) {
		return nil, false
	}
	return o.Pid, true
}

// HasPid returns a boolean if a field has been set.
func (o *CoremanagementCoreFile) HasPid() bool {
	if o != nil && !IsNil(o.Pid) {
		return true
	}

	return false
}

// SetPid gets a reference to the given string and assigns it to the Pid field.
func (o *CoremanagementCoreFile) SetPid(v string) {
	o.Pid = &v
}

// GetReason returns the Reason field value if set, zero value otherwise.
func (o *CoremanagementCoreFile) GetReason() string {
	if o == nil || IsNil(o.Reason) {
		var ret string
		return ret
	}
	return *o.Reason
}

// GetReasonOk returns a tuple with the Reason field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoremanagementCoreFile) GetReasonOk() (*string, bool) {
	if o == nil || IsNil(o.Reason) {
		return nil, false
	}
	return o.Reason, true
}

// HasReason returns a boolean if a field has been set.
func (o *CoremanagementCoreFile) HasReason() bool {
	if o != nil && !IsNil(o.Reason) {
		return true
	}

	return false
}

// SetReason gets a reference to the given string and assigns it to the Reason field.
func (o *CoremanagementCoreFile) SetReason(v string) {
	o.Reason = &v
}

// GetSerial returns the Serial field value if set, zero value otherwise.
func (o *CoremanagementCoreFile) GetSerial() string {
	if o == nil || IsNil(o.Serial) {
		var ret string
		return ret
	}
	return *o.Serial
}

// GetSerialOk returns a tuple with the Serial field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoremanagementCoreFile) GetSerialOk() (*string, bool) {
	if o == nil || IsNil(o.Serial) {
		return nil, false
	}
	return o.Serial, true
}

// HasSerial returns a boolean if a field has been set.
func (o *CoremanagementCoreFile) HasSerial() bool {
	if o != nil && !IsNil(o.Serial) {
		return true
	}

	return false
}

// SetSerial gets a reference to the given string and assigns it to the Serial field.
func (o *CoremanagementCoreFile) SetSerial(v string) {
	o.Serial = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *CoremanagementCoreFile) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoremanagementCoreFile) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *CoremanagementCoreFile) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *CoremanagementCoreFile) SetStatus(v string) {
	o.Status = &v
}

// GetInventoryParent returns the InventoryParent field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CoremanagementCoreFile) GetInventoryParent() MoBaseMoRelationship {
	if o == nil || IsNil(o.InventoryParent.Get()) {
		var ret MoBaseMoRelationship
		return ret
	}
	return *o.InventoryParent.Get()
}

// GetInventoryParentOk returns a tuple with the InventoryParent field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CoremanagementCoreFile) GetInventoryParentOk() (*MoBaseMoRelationship, bool) {
	if o == nil {
		return nil, false
	}
	return o.InventoryParent.Get(), o.InventoryParent.IsSet()
}

// HasInventoryParent returns a boolean if a field has been set.
func (o *CoremanagementCoreFile) HasInventoryParent() bool {
	if o != nil && o.InventoryParent.IsSet() {
		return true
	}

	return false
}

// SetInventoryParent gets a reference to the given NullableMoBaseMoRelationship and assigns it to the InventoryParent field.
func (o *CoremanagementCoreFile) SetInventoryParent(v MoBaseMoRelationship) {
	o.InventoryParent.Set(&v)
}

// SetInventoryParentNil sets the value for InventoryParent to be an explicit nil
func (o *CoremanagementCoreFile) SetInventoryParentNil() {
	o.InventoryParent.Set(nil)
}

// UnsetInventoryParent ensures that no value is present for InventoryParent, not even an explicit nil
func (o *CoremanagementCoreFile) UnsetInventoryParent() {
	o.InventoryParent.Unset()
}

// GetRegisteredDevice returns the RegisteredDevice field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CoremanagementCoreFile) GetRegisteredDevice() AssetDeviceRegistrationRelationship {
	if o == nil || IsNil(o.RegisteredDevice.Get()) {
		var ret AssetDeviceRegistrationRelationship
		return ret
	}
	return *o.RegisteredDevice.Get()
}

// GetRegisteredDeviceOk returns a tuple with the RegisteredDevice field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CoremanagementCoreFile) GetRegisteredDeviceOk() (*AssetDeviceRegistrationRelationship, bool) {
	if o == nil {
		return nil, false
	}
	return o.RegisteredDevice.Get(), o.RegisteredDevice.IsSet()
}

// HasRegisteredDevice returns a boolean if a field has been set.
func (o *CoremanagementCoreFile) HasRegisteredDevice() bool {
	if o != nil && o.RegisteredDevice.IsSet() {
		return true
	}

	return false
}

// SetRegisteredDevice gets a reference to the given NullableAssetDeviceRegistrationRelationship and assigns it to the RegisteredDevice field.
func (o *CoremanagementCoreFile) SetRegisteredDevice(v AssetDeviceRegistrationRelationship) {
	o.RegisteredDevice.Set(&v)
}

// SetRegisteredDeviceNil sets the value for RegisteredDevice to be an explicit nil
func (o *CoremanagementCoreFile) SetRegisteredDeviceNil() {
	o.RegisteredDevice.Set(nil)
}

// UnsetRegisteredDevice ensures that no value is present for RegisteredDevice, not even an explicit nil
func (o *CoremanagementCoreFile) UnsetRegisteredDevice() {
	o.RegisteredDevice.Unset()
}

func (o CoremanagementCoreFile) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CoremanagementCoreFile) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	serializedMoBaseMo, errMoBaseMo := json.Marshal(o.MoBaseMo)
	if errMoBaseMo != nil {
		return map[string]interface{}{}, errMoBaseMo
	}
	errMoBaseMo = json.Unmarshal([]byte(serializedMoBaseMo), &toSerialize)
	if errMoBaseMo != nil {
		return map[string]interface{}{}, errMoBaseMo
	}
	if _, exists := toSerialize["ClassId"]; !exists {
		toSerialize["ClassId"] = o.GetDefaultClassId()
	}
	toSerialize["ClassId"] = o.ClassId
	if _, exists := toSerialize["ObjectType"]; !exists {
		toSerialize["ObjectType"] = o.GetDefaultObjectType()
	}
	toSerialize["ObjectType"] = o.ObjectType
	if !IsNil(o.AdminState) {
		toSerialize["AdminState"] = o.AdminState
	}
	if !IsNil(o.CoreFileDownloadUrl) {
		toSerialize["CoreFileDownloadUrl"] = o.CoreFileDownloadUrl
	}
	if !IsNil(o.DeviceType) {
		toSerialize["DeviceType"] = o.DeviceType
	}
	if !IsNil(o.EndpointIdentifier) {
		toSerialize["EndpointIdentifier"] = o.EndpointIdentifier
	}
	if !IsNil(o.FileName) {
		toSerialize["FileName"] = o.FileName
	}
	if !IsNil(o.FileSize) {
		toSerialize["FileSize"] = o.FileSize
	}
	if !IsNil(o.NodeId) {
		toSerialize["NodeId"] = o.NodeId
	}
	if !IsNil(o.Pid) {
		toSerialize["Pid"] = o.Pid
	}
	if !IsNil(o.Reason) {
		toSerialize["Reason"] = o.Reason
	}
	if !IsNil(o.Serial) {
		toSerialize["Serial"] = o.Serial
	}
	if !IsNil(o.Status) {
		toSerialize["Status"] = o.Status
	}
	if o.InventoryParent.IsSet() {
		toSerialize["InventoryParent"] = o.InventoryParent.Get()
	}
	if o.RegisteredDevice.IsSet() {
		toSerialize["RegisteredDevice"] = o.RegisteredDevice.Get()
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *CoremanagementCoreFile) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"ClassId",
		"ObjectType",
	}

	// defaultValueFuncMap captures the default values for required properties.
	// These values are used when required properties are missing from the payload.
	defaultValueFuncMap := map[string]func() interface{}{
		"ClassId":    o.GetDefaultClassId,
		"ObjectType": o.GetDefaultObjectType,
	}
	var defaultValueApplied bool
	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			if _, ok := defaultValueFuncMap[requiredProperty]; ok {
				allProperties[requiredProperty] = defaultValueFuncMap[requiredProperty]()
				defaultValueApplied = true
			}
		}
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	if defaultValueApplied {
		data, err = json.Marshal(allProperties)
		if err != nil {
			return err
		}
	}
	type CoremanagementCoreFileWithoutEmbeddedStruct struct {
		// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.
		ClassId string `json:"ClassId"`
		// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
		ObjectType string `json:"ObjectType"`
		// Admin state prop to trigger file upload. * `None` - Admin configured None State. * `Upload` - Admin configured Upload State.
		AdminState *string `json:"AdminState,omitempty"`
		// The Url to download the core file. It will be set only after successful completion of core file upload to storage service.
		CoreFileDownloadUrl *string `json:"CoreFileDownloadUrl,omitempty"`
		// The device object type for the end point.
		DeviceType *string `json:"DeviceType,omitempty"`
		// Endpoint device identifier. In IMM devices, it will be Fabric Interconnect hostname.
		EndpointIdentifier *string `json:"EndpointIdentifier,omitempty"`
		// The name of core file from endpoint device.
		FileName *string `json:"FileName,omitempty"`
		// File size of core file in bytes.
		FileSize *int64 `json:"FileSize,omitempty"`
		// Node id within cluster where core file is present.
		NodeId *string `json:"NodeId,omitempty"`
		// Product identification of the device.
		Pid *string `json:"Pid,omitempty"`
		// Reason for upload failure, if any. In successful upload case, it will be empty.
		Reason *string `json:"Reason,omitempty"`
		// Serial number of the device.
		Serial *string `json:"Serial,omitempty"`
		// Status of core file upload. Valid values are InventoryComplete (default), UploadInProgress, Completed, UploadFailed, FileDownloadUrlCreationFailed, CoreRemovedDownloadOnly. * `InventoryComplete` - Default status for all mos before file upload is requested. * `UploadInProgress` - File upload is in progress. * `UploadFailed` - File upload to storage service failed. * `Completed` - File upload to storage service completed successfully. * `FileDownloadUrlCreationFailed` - File upload to storage service completed successfully but download url creation failed. * `CoreRemovedDownloadOnly` - File upload to storage service completed successfully but file removed from endpoint device.
		Status           *string                                     `json:"Status,omitempty"`
		InventoryParent  NullableMoBaseMoRelationship                `json:"InventoryParent,omitempty"`
		RegisteredDevice NullableAssetDeviceRegistrationRelationship `json:"RegisteredDevice,omitempty"`
	}

	varCoremanagementCoreFileWithoutEmbeddedStruct := CoremanagementCoreFileWithoutEmbeddedStruct{}

	err = json.Unmarshal(data, &varCoremanagementCoreFileWithoutEmbeddedStruct)
	if err == nil {
		varCoremanagementCoreFile := _CoremanagementCoreFile{}
		varCoremanagementCoreFile.ClassId = varCoremanagementCoreFileWithoutEmbeddedStruct.ClassId
		varCoremanagementCoreFile.ObjectType = varCoremanagementCoreFileWithoutEmbeddedStruct.ObjectType
		varCoremanagementCoreFile.AdminState = varCoremanagementCoreFileWithoutEmbeddedStruct.AdminState
		varCoremanagementCoreFile.CoreFileDownloadUrl = varCoremanagementCoreFileWithoutEmbeddedStruct.CoreFileDownloadUrl
		varCoremanagementCoreFile.DeviceType = varCoremanagementCoreFileWithoutEmbeddedStruct.DeviceType
		varCoremanagementCoreFile.EndpointIdentifier = varCoremanagementCoreFileWithoutEmbeddedStruct.EndpointIdentifier
		varCoremanagementCoreFile.FileName = varCoremanagementCoreFileWithoutEmbeddedStruct.FileName
		varCoremanagementCoreFile.FileSize = varCoremanagementCoreFileWithoutEmbeddedStruct.FileSize
		varCoremanagementCoreFile.NodeId = varCoremanagementCoreFileWithoutEmbeddedStruct.NodeId
		varCoremanagementCoreFile.Pid = varCoremanagementCoreFileWithoutEmbeddedStruct.Pid
		varCoremanagementCoreFile.Reason = varCoremanagementCoreFileWithoutEmbeddedStruct.Reason
		varCoremanagementCoreFile.Serial = varCoremanagementCoreFileWithoutEmbeddedStruct.Serial
		varCoremanagementCoreFile.Status = varCoremanagementCoreFileWithoutEmbeddedStruct.Status
		varCoremanagementCoreFile.InventoryParent = varCoremanagementCoreFileWithoutEmbeddedStruct.InventoryParent
		varCoremanagementCoreFile.RegisteredDevice = varCoremanagementCoreFileWithoutEmbeddedStruct.RegisteredDevice
		*o = CoremanagementCoreFile(varCoremanagementCoreFile)
	} else {
		return err
	}

	varCoremanagementCoreFile := _CoremanagementCoreFile{}

	err = json.Unmarshal(data, &varCoremanagementCoreFile)
	if err == nil {
		o.MoBaseMo = varCoremanagementCoreFile.MoBaseMo
	} else {
		return err
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "ClassId")
		delete(additionalProperties, "ObjectType")
		delete(additionalProperties, "AdminState")
		delete(additionalProperties, "CoreFileDownloadUrl")
		delete(additionalProperties, "DeviceType")
		delete(additionalProperties, "EndpointIdentifier")
		delete(additionalProperties, "FileName")
		delete(additionalProperties, "FileSize")
		delete(additionalProperties, "NodeId")
		delete(additionalProperties, "Pid")
		delete(additionalProperties, "Reason")
		delete(additionalProperties, "Serial")
		delete(additionalProperties, "Status")
		delete(additionalProperties, "InventoryParent")
		delete(additionalProperties, "RegisteredDevice")

		// remove fields from embedded structs
		reflectMoBaseMo := reflect.ValueOf(o.MoBaseMo)
		for i := 0; i < reflectMoBaseMo.Type().NumField(); i++ {
			t := reflectMoBaseMo.Type().Field(i)

			if jsonTag := t.Tag.Get("json"); jsonTag != "" {
				fieldName := ""
				if commaIdx := strings.Index(jsonTag, ","); commaIdx > 0 {
					fieldName = jsonTag[:commaIdx]
				} else {
					fieldName = jsonTag
				}
				if fieldName != "AdditionalProperties" {
					delete(additionalProperties, fieldName)
				}
			}
		}

		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableCoremanagementCoreFile struct {
	value *CoremanagementCoreFile
	isSet bool
}

func (v NullableCoremanagementCoreFile) Get() *CoremanagementCoreFile {
	return v.value
}

func (v *NullableCoremanagementCoreFile) Set(val *CoremanagementCoreFile) {
	v.value = val
	v.isSet = true
}

func (v NullableCoremanagementCoreFile) IsSet() bool {
	return v.isSet
}

func (v *NullableCoremanagementCoreFile) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCoremanagementCoreFile(val *CoremanagementCoreFile) *NullableCoremanagementCoreFile {
	return &NullableCoremanagementCoreFile{value: val, isSet: true}
}

func (v NullableCoremanagementCoreFile) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCoremanagementCoreFile) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
