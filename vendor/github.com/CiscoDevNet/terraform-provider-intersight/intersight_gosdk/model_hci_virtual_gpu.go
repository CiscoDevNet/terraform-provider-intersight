/*
Cisco Intersight

Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations. The Intersight OpenAPI document defines the complete set of properties that are returned in the HTTP response. From that perspective, a client can expect that no additional properties are returned, unless these properties are explicitly defined in the OpenAPI document. However, when a client uses an older version of the Intersight OpenAPI document, the server may send additional properties because the software is more recent than the client. In that case, the client may receive properties that it does not know about. Some generated SDKs perform a strict validation of the HTTP response body against the OpenAPI document.

API version: 1.0.11-2025062323
Contact: intersight@cisco.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package intersight

import (
	"encoding/json"
	"fmt"
	"reflect"
	"strings"
)

// checks if the HciVirtualGpu type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &HciVirtualGpu{}

// HciVirtualGpu Virtual GPU managed by a cluster and reported by Prism Central.
type HciVirtualGpu struct {
	MoBaseMo
	// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.
	ClassId string `json:"ClassId"`
	// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
	ObjectType        string   `json:"ObjectType"`
	AllocatedVmExtIds []string `json:"AllocatedVmExtIds,omitempty"`
	// If the GPU resources is available to be allocated to virtual machines (VMs)  within this cluster.
	Assignable *bool `json:"Assignable,omitempty"`
	// The unique identifier of the cluster which owns this virtual GPU.
	ClusterExtId *string `json:"ClusterExtId,omitempty"`
	// The GPU type of the virtual GPU in an integer format. It is similar to DeviceName  which shows the GPU type in string format.
	DeviceId *int64 `json:"DeviceId,omitempty"`
	// The GPU type of the virtual GPU in string format. It is similar to DeviceId which shows the GPU type in integer format.
	DeviceName *string `json:"DeviceName,omitempty"`
	// The fraction of the physical GPU assigned.
	Fraction *int64 `json:"Fraction,omitempty"`
	// The frame buffer size in bytes of the virtual GPU.
	FrameBufferSizeBytes *int64 `json:"FrameBufferSizeBytes,omitempty"`
	// The guest driver version of the virtual GPU.
	GuestDriverVersion *string `json:"GuestDriverVersion,omitempty"`
	// The in use status of the virtual GPU.
	IsInUse  *bool    `json:"IsInUse,omitempty"`
	Licenses []string `json:"Licenses,omitempty"`
	// The maximum instances per VM of the virtual GPU.
	MaxInstancesPerVm *int64 `json:"MaxInstancesPerVm,omitempty"`
	// The maximum resolution of the virtual GPU.
	MaxResolution *string `json:"MaxResolution,omitempty"`
	// Each GPU in a system may be physically connected to a specific CPU socket or NUMA node.  The numaNode value specifies which node the GPU is associated with.  In a NUMA system, a computer's memory is divided into multiple nodes. Each node is a  combination of processors and a portion of the system's memory. While processors can  access memory from all nodes, they have faster access to the memory in their own node  compared to memory in other nodes.
	NumaNode *string `json:"NumaNode,omitempty"`
	// The number of virtual display heads of the virtual GPU.
	NumberOfVirtualDisplayHeads *int64 `json:"NumberOfVirtualDisplayHeads,omitempty"`
	// The SBDF address of the virtual GPU.
	Sbdf *string `json:"Sbdf,omitempty"`
	// The type of the irtual GPU. Possible values are PASSTHROUGH_GRAPHICS, PASSTHROUGH_COMPUTE, VIRTUAL.
	Type *string `json:"Type,omitempty"`
	// The vendor name of the virtual GPU.
	Vendor *string `json:"Vendor,omitempty"`
	// The unique identifier of the virtual GPU.
	VirtualGpuExtId *string `json:"VirtualGpuExtId,omitempty"`
	// An array of relationships to hciBaseVm resources.
	AllocatedVms         []HciBaseVmRelationship                     `json:"AllocatedVms,omitempty"`
	Cluster              NullableHciClusterRelationship              `json:"Cluster,omitempty"`
	RegisteredDevice     NullableAssetDeviceRegistrationRelationship `json:"RegisteredDevice,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _HciVirtualGpu HciVirtualGpu

// NewHciVirtualGpu instantiates a new HciVirtualGpu object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHciVirtualGpu(classId string, objectType string) *HciVirtualGpu {
	this := HciVirtualGpu{}
	this.ClassId = classId
	this.ObjectType = objectType
	return &this
}

// NewHciVirtualGpuWithDefaults instantiates a new HciVirtualGpu object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHciVirtualGpuWithDefaults() *HciVirtualGpu {
	this := HciVirtualGpu{}
	var classId string = "hci.VirtualGpu"
	this.ClassId = classId
	var objectType string = "hci.VirtualGpu"
	this.ObjectType = objectType
	return &this
}

// GetClassId returns the ClassId field value
func (o *HciVirtualGpu) GetClassId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ClassId
}

// GetClassIdOk returns a tuple with the ClassId field value
// and a boolean to check if the value has been set.
func (o *HciVirtualGpu) GetClassIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ClassId, true
}

// SetClassId sets field value
func (o *HciVirtualGpu) SetClassId(v string) {
	o.ClassId = v
}

// GetDefaultClassId returns the default value "hci.VirtualGpu" of the ClassId field.
func (o *HciVirtualGpu) GetDefaultClassId() interface{} {
	return "hci.VirtualGpu"
}

// GetObjectType returns the ObjectType field value
func (o *HciVirtualGpu) GetObjectType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ObjectType
}

// GetObjectTypeOk returns a tuple with the ObjectType field value
// and a boolean to check if the value has been set.
func (o *HciVirtualGpu) GetObjectTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ObjectType, true
}

// SetObjectType sets field value
func (o *HciVirtualGpu) SetObjectType(v string) {
	o.ObjectType = v
}

// GetDefaultObjectType returns the default value "hci.VirtualGpu" of the ObjectType field.
func (o *HciVirtualGpu) GetDefaultObjectType() interface{} {
	return "hci.VirtualGpu"
}

// GetAllocatedVmExtIds returns the AllocatedVmExtIds field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HciVirtualGpu) GetAllocatedVmExtIds() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.AllocatedVmExtIds
}

// GetAllocatedVmExtIdsOk returns a tuple with the AllocatedVmExtIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HciVirtualGpu) GetAllocatedVmExtIdsOk() ([]string, bool) {
	if o == nil || IsNil(o.AllocatedVmExtIds) {
		return nil, false
	}
	return o.AllocatedVmExtIds, true
}

// HasAllocatedVmExtIds returns a boolean if a field has been set.
func (o *HciVirtualGpu) HasAllocatedVmExtIds() bool {
	if o != nil && !IsNil(o.AllocatedVmExtIds) {
		return true
	}

	return false
}

// SetAllocatedVmExtIds gets a reference to the given []string and assigns it to the AllocatedVmExtIds field.
func (o *HciVirtualGpu) SetAllocatedVmExtIds(v []string) {
	o.AllocatedVmExtIds = v
}

// GetAssignable returns the Assignable field value if set, zero value otherwise.
func (o *HciVirtualGpu) GetAssignable() bool {
	if o == nil || IsNil(o.Assignable) {
		var ret bool
		return ret
	}
	return *o.Assignable
}

// GetAssignableOk returns a tuple with the Assignable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HciVirtualGpu) GetAssignableOk() (*bool, bool) {
	if o == nil || IsNil(o.Assignable) {
		return nil, false
	}
	return o.Assignable, true
}

// HasAssignable returns a boolean if a field has been set.
func (o *HciVirtualGpu) HasAssignable() bool {
	if o != nil && !IsNil(o.Assignable) {
		return true
	}

	return false
}

// SetAssignable gets a reference to the given bool and assigns it to the Assignable field.
func (o *HciVirtualGpu) SetAssignable(v bool) {
	o.Assignable = &v
}

// GetClusterExtId returns the ClusterExtId field value if set, zero value otherwise.
func (o *HciVirtualGpu) GetClusterExtId() string {
	if o == nil || IsNil(o.ClusterExtId) {
		var ret string
		return ret
	}
	return *o.ClusterExtId
}

// GetClusterExtIdOk returns a tuple with the ClusterExtId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HciVirtualGpu) GetClusterExtIdOk() (*string, bool) {
	if o == nil || IsNil(o.ClusterExtId) {
		return nil, false
	}
	return o.ClusterExtId, true
}

// HasClusterExtId returns a boolean if a field has been set.
func (o *HciVirtualGpu) HasClusterExtId() bool {
	if o != nil && !IsNil(o.ClusterExtId) {
		return true
	}

	return false
}

// SetClusterExtId gets a reference to the given string and assigns it to the ClusterExtId field.
func (o *HciVirtualGpu) SetClusterExtId(v string) {
	o.ClusterExtId = &v
}

// GetDeviceId returns the DeviceId field value if set, zero value otherwise.
func (o *HciVirtualGpu) GetDeviceId() int64 {
	if o == nil || IsNil(o.DeviceId) {
		var ret int64
		return ret
	}
	return *o.DeviceId
}

// GetDeviceIdOk returns a tuple with the DeviceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HciVirtualGpu) GetDeviceIdOk() (*int64, bool) {
	if o == nil || IsNil(o.DeviceId) {
		return nil, false
	}
	return o.DeviceId, true
}

// HasDeviceId returns a boolean if a field has been set.
func (o *HciVirtualGpu) HasDeviceId() bool {
	if o != nil && !IsNil(o.DeviceId) {
		return true
	}

	return false
}

// SetDeviceId gets a reference to the given int64 and assigns it to the DeviceId field.
func (o *HciVirtualGpu) SetDeviceId(v int64) {
	o.DeviceId = &v
}

// GetDeviceName returns the DeviceName field value if set, zero value otherwise.
func (o *HciVirtualGpu) GetDeviceName() string {
	if o == nil || IsNil(o.DeviceName) {
		var ret string
		return ret
	}
	return *o.DeviceName
}

// GetDeviceNameOk returns a tuple with the DeviceName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HciVirtualGpu) GetDeviceNameOk() (*string, bool) {
	if o == nil || IsNil(o.DeviceName) {
		return nil, false
	}
	return o.DeviceName, true
}

// HasDeviceName returns a boolean if a field has been set.
func (o *HciVirtualGpu) HasDeviceName() bool {
	if o != nil && !IsNil(o.DeviceName) {
		return true
	}

	return false
}

// SetDeviceName gets a reference to the given string and assigns it to the DeviceName field.
func (o *HciVirtualGpu) SetDeviceName(v string) {
	o.DeviceName = &v
}

// GetFraction returns the Fraction field value if set, zero value otherwise.
func (o *HciVirtualGpu) GetFraction() int64 {
	if o == nil || IsNil(o.Fraction) {
		var ret int64
		return ret
	}
	return *o.Fraction
}

// GetFractionOk returns a tuple with the Fraction field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HciVirtualGpu) GetFractionOk() (*int64, bool) {
	if o == nil || IsNil(o.Fraction) {
		return nil, false
	}
	return o.Fraction, true
}

// HasFraction returns a boolean if a field has been set.
func (o *HciVirtualGpu) HasFraction() bool {
	if o != nil && !IsNil(o.Fraction) {
		return true
	}

	return false
}

// SetFraction gets a reference to the given int64 and assigns it to the Fraction field.
func (o *HciVirtualGpu) SetFraction(v int64) {
	o.Fraction = &v
}

// GetFrameBufferSizeBytes returns the FrameBufferSizeBytes field value if set, zero value otherwise.
func (o *HciVirtualGpu) GetFrameBufferSizeBytes() int64 {
	if o == nil || IsNil(o.FrameBufferSizeBytes) {
		var ret int64
		return ret
	}
	return *o.FrameBufferSizeBytes
}

// GetFrameBufferSizeBytesOk returns a tuple with the FrameBufferSizeBytes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HciVirtualGpu) GetFrameBufferSizeBytesOk() (*int64, bool) {
	if o == nil || IsNil(o.FrameBufferSizeBytes) {
		return nil, false
	}
	return o.FrameBufferSizeBytes, true
}

// HasFrameBufferSizeBytes returns a boolean if a field has been set.
func (o *HciVirtualGpu) HasFrameBufferSizeBytes() bool {
	if o != nil && !IsNil(o.FrameBufferSizeBytes) {
		return true
	}

	return false
}

// SetFrameBufferSizeBytes gets a reference to the given int64 and assigns it to the FrameBufferSizeBytes field.
func (o *HciVirtualGpu) SetFrameBufferSizeBytes(v int64) {
	o.FrameBufferSizeBytes = &v
}

// GetGuestDriverVersion returns the GuestDriverVersion field value if set, zero value otherwise.
func (o *HciVirtualGpu) GetGuestDriverVersion() string {
	if o == nil || IsNil(o.GuestDriverVersion) {
		var ret string
		return ret
	}
	return *o.GuestDriverVersion
}

// GetGuestDriverVersionOk returns a tuple with the GuestDriverVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HciVirtualGpu) GetGuestDriverVersionOk() (*string, bool) {
	if o == nil || IsNil(o.GuestDriverVersion) {
		return nil, false
	}
	return o.GuestDriverVersion, true
}

// HasGuestDriverVersion returns a boolean if a field has been set.
func (o *HciVirtualGpu) HasGuestDriverVersion() bool {
	if o != nil && !IsNil(o.GuestDriverVersion) {
		return true
	}

	return false
}

// SetGuestDriverVersion gets a reference to the given string and assigns it to the GuestDriverVersion field.
func (o *HciVirtualGpu) SetGuestDriverVersion(v string) {
	o.GuestDriverVersion = &v
}

// GetIsInUse returns the IsInUse field value if set, zero value otherwise.
func (o *HciVirtualGpu) GetIsInUse() bool {
	if o == nil || IsNil(o.IsInUse) {
		var ret bool
		return ret
	}
	return *o.IsInUse
}

// GetIsInUseOk returns a tuple with the IsInUse field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HciVirtualGpu) GetIsInUseOk() (*bool, bool) {
	if o == nil || IsNil(o.IsInUse) {
		return nil, false
	}
	return o.IsInUse, true
}

// HasIsInUse returns a boolean if a field has been set.
func (o *HciVirtualGpu) HasIsInUse() bool {
	if o != nil && !IsNil(o.IsInUse) {
		return true
	}

	return false
}

// SetIsInUse gets a reference to the given bool and assigns it to the IsInUse field.
func (o *HciVirtualGpu) SetIsInUse(v bool) {
	o.IsInUse = &v
}

// GetLicenses returns the Licenses field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HciVirtualGpu) GetLicenses() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.Licenses
}

// GetLicensesOk returns a tuple with the Licenses field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HciVirtualGpu) GetLicensesOk() ([]string, bool) {
	if o == nil || IsNil(o.Licenses) {
		return nil, false
	}
	return o.Licenses, true
}

// HasLicenses returns a boolean if a field has been set.
func (o *HciVirtualGpu) HasLicenses() bool {
	if o != nil && !IsNil(o.Licenses) {
		return true
	}

	return false
}

// SetLicenses gets a reference to the given []string and assigns it to the Licenses field.
func (o *HciVirtualGpu) SetLicenses(v []string) {
	o.Licenses = v
}

// GetMaxInstancesPerVm returns the MaxInstancesPerVm field value if set, zero value otherwise.
func (o *HciVirtualGpu) GetMaxInstancesPerVm() int64 {
	if o == nil || IsNil(o.MaxInstancesPerVm) {
		var ret int64
		return ret
	}
	return *o.MaxInstancesPerVm
}

// GetMaxInstancesPerVmOk returns a tuple with the MaxInstancesPerVm field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HciVirtualGpu) GetMaxInstancesPerVmOk() (*int64, bool) {
	if o == nil || IsNil(o.MaxInstancesPerVm) {
		return nil, false
	}
	return o.MaxInstancesPerVm, true
}

// HasMaxInstancesPerVm returns a boolean if a field has been set.
func (o *HciVirtualGpu) HasMaxInstancesPerVm() bool {
	if o != nil && !IsNil(o.MaxInstancesPerVm) {
		return true
	}

	return false
}

// SetMaxInstancesPerVm gets a reference to the given int64 and assigns it to the MaxInstancesPerVm field.
func (o *HciVirtualGpu) SetMaxInstancesPerVm(v int64) {
	o.MaxInstancesPerVm = &v
}

// GetMaxResolution returns the MaxResolution field value if set, zero value otherwise.
func (o *HciVirtualGpu) GetMaxResolution() string {
	if o == nil || IsNil(o.MaxResolution) {
		var ret string
		return ret
	}
	return *o.MaxResolution
}

// GetMaxResolutionOk returns a tuple with the MaxResolution field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HciVirtualGpu) GetMaxResolutionOk() (*string, bool) {
	if o == nil || IsNil(o.MaxResolution) {
		return nil, false
	}
	return o.MaxResolution, true
}

// HasMaxResolution returns a boolean if a field has been set.
func (o *HciVirtualGpu) HasMaxResolution() bool {
	if o != nil && !IsNil(o.MaxResolution) {
		return true
	}

	return false
}

// SetMaxResolution gets a reference to the given string and assigns it to the MaxResolution field.
func (o *HciVirtualGpu) SetMaxResolution(v string) {
	o.MaxResolution = &v
}

// GetNumaNode returns the NumaNode field value if set, zero value otherwise.
func (o *HciVirtualGpu) GetNumaNode() string {
	if o == nil || IsNil(o.NumaNode) {
		var ret string
		return ret
	}
	return *o.NumaNode
}

// GetNumaNodeOk returns a tuple with the NumaNode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HciVirtualGpu) GetNumaNodeOk() (*string, bool) {
	if o == nil || IsNil(o.NumaNode) {
		return nil, false
	}
	return o.NumaNode, true
}

// HasNumaNode returns a boolean if a field has been set.
func (o *HciVirtualGpu) HasNumaNode() bool {
	if o != nil && !IsNil(o.NumaNode) {
		return true
	}

	return false
}

// SetNumaNode gets a reference to the given string and assigns it to the NumaNode field.
func (o *HciVirtualGpu) SetNumaNode(v string) {
	o.NumaNode = &v
}

// GetNumberOfVirtualDisplayHeads returns the NumberOfVirtualDisplayHeads field value if set, zero value otherwise.
func (o *HciVirtualGpu) GetNumberOfVirtualDisplayHeads() int64 {
	if o == nil || IsNil(o.NumberOfVirtualDisplayHeads) {
		var ret int64
		return ret
	}
	return *o.NumberOfVirtualDisplayHeads
}

// GetNumberOfVirtualDisplayHeadsOk returns a tuple with the NumberOfVirtualDisplayHeads field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HciVirtualGpu) GetNumberOfVirtualDisplayHeadsOk() (*int64, bool) {
	if o == nil || IsNil(o.NumberOfVirtualDisplayHeads) {
		return nil, false
	}
	return o.NumberOfVirtualDisplayHeads, true
}

// HasNumberOfVirtualDisplayHeads returns a boolean if a field has been set.
func (o *HciVirtualGpu) HasNumberOfVirtualDisplayHeads() bool {
	if o != nil && !IsNil(o.NumberOfVirtualDisplayHeads) {
		return true
	}

	return false
}

// SetNumberOfVirtualDisplayHeads gets a reference to the given int64 and assigns it to the NumberOfVirtualDisplayHeads field.
func (o *HciVirtualGpu) SetNumberOfVirtualDisplayHeads(v int64) {
	o.NumberOfVirtualDisplayHeads = &v
}

// GetSbdf returns the Sbdf field value if set, zero value otherwise.
func (o *HciVirtualGpu) GetSbdf() string {
	if o == nil || IsNil(o.Sbdf) {
		var ret string
		return ret
	}
	return *o.Sbdf
}

// GetSbdfOk returns a tuple with the Sbdf field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HciVirtualGpu) GetSbdfOk() (*string, bool) {
	if o == nil || IsNil(o.Sbdf) {
		return nil, false
	}
	return o.Sbdf, true
}

// HasSbdf returns a boolean if a field has been set.
func (o *HciVirtualGpu) HasSbdf() bool {
	if o != nil && !IsNil(o.Sbdf) {
		return true
	}

	return false
}

// SetSbdf gets a reference to the given string and assigns it to the Sbdf field.
func (o *HciVirtualGpu) SetSbdf(v string) {
	o.Sbdf = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *HciVirtualGpu) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HciVirtualGpu) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *HciVirtualGpu) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *HciVirtualGpu) SetType(v string) {
	o.Type = &v
}

// GetVendor returns the Vendor field value if set, zero value otherwise.
func (o *HciVirtualGpu) GetVendor() string {
	if o == nil || IsNil(o.Vendor) {
		var ret string
		return ret
	}
	return *o.Vendor
}

// GetVendorOk returns a tuple with the Vendor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HciVirtualGpu) GetVendorOk() (*string, bool) {
	if o == nil || IsNil(o.Vendor) {
		return nil, false
	}
	return o.Vendor, true
}

// HasVendor returns a boolean if a field has been set.
func (o *HciVirtualGpu) HasVendor() bool {
	if o != nil && !IsNil(o.Vendor) {
		return true
	}

	return false
}

// SetVendor gets a reference to the given string and assigns it to the Vendor field.
func (o *HciVirtualGpu) SetVendor(v string) {
	o.Vendor = &v
}

// GetVirtualGpuExtId returns the VirtualGpuExtId field value if set, zero value otherwise.
func (o *HciVirtualGpu) GetVirtualGpuExtId() string {
	if o == nil || IsNil(o.VirtualGpuExtId) {
		var ret string
		return ret
	}
	return *o.VirtualGpuExtId
}

// GetVirtualGpuExtIdOk returns a tuple with the VirtualGpuExtId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HciVirtualGpu) GetVirtualGpuExtIdOk() (*string, bool) {
	if o == nil || IsNil(o.VirtualGpuExtId) {
		return nil, false
	}
	return o.VirtualGpuExtId, true
}

// HasVirtualGpuExtId returns a boolean if a field has been set.
func (o *HciVirtualGpu) HasVirtualGpuExtId() bool {
	if o != nil && !IsNil(o.VirtualGpuExtId) {
		return true
	}

	return false
}

// SetVirtualGpuExtId gets a reference to the given string and assigns it to the VirtualGpuExtId field.
func (o *HciVirtualGpu) SetVirtualGpuExtId(v string) {
	o.VirtualGpuExtId = &v
}

// GetAllocatedVms returns the AllocatedVms field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HciVirtualGpu) GetAllocatedVms() []HciBaseVmRelationship {
	if o == nil {
		var ret []HciBaseVmRelationship
		return ret
	}
	return o.AllocatedVms
}

// GetAllocatedVmsOk returns a tuple with the AllocatedVms field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HciVirtualGpu) GetAllocatedVmsOk() ([]HciBaseVmRelationship, bool) {
	if o == nil || IsNil(o.AllocatedVms) {
		return nil, false
	}
	return o.AllocatedVms, true
}

// HasAllocatedVms returns a boolean if a field has been set.
func (o *HciVirtualGpu) HasAllocatedVms() bool {
	if o != nil && !IsNil(o.AllocatedVms) {
		return true
	}

	return false
}

// SetAllocatedVms gets a reference to the given []HciBaseVmRelationship and assigns it to the AllocatedVms field.
func (o *HciVirtualGpu) SetAllocatedVms(v []HciBaseVmRelationship) {
	o.AllocatedVms = v
}

// GetCluster returns the Cluster field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HciVirtualGpu) GetCluster() HciClusterRelationship {
	if o == nil || IsNil(o.Cluster.Get()) {
		var ret HciClusterRelationship
		return ret
	}
	return *o.Cluster.Get()
}

// GetClusterOk returns a tuple with the Cluster field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HciVirtualGpu) GetClusterOk() (*HciClusterRelationship, bool) {
	if o == nil {
		return nil, false
	}
	return o.Cluster.Get(), o.Cluster.IsSet()
}

// HasCluster returns a boolean if a field has been set.
func (o *HciVirtualGpu) HasCluster() bool {
	if o != nil && o.Cluster.IsSet() {
		return true
	}

	return false
}

// SetCluster gets a reference to the given NullableHciClusterRelationship and assigns it to the Cluster field.
func (o *HciVirtualGpu) SetCluster(v HciClusterRelationship) {
	o.Cluster.Set(&v)
}

// SetClusterNil sets the value for Cluster to be an explicit nil
func (o *HciVirtualGpu) SetClusterNil() {
	o.Cluster.Set(nil)
}

// UnsetCluster ensures that no value is present for Cluster, not even an explicit nil
func (o *HciVirtualGpu) UnsetCluster() {
	o.Cluster.Unset()
}

// GetRegisteredDevice returns the RegisteredDevice field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HciVirtualGpu) GetRegisteredDevice() AssetDeviceRegistrationRelationship {
	if o == nil || IsNil(o.RegisteredDevice.Get()) {
		var ret AssetDeviceRegistrationRelationship
		return ret
	}
	return *o.RegisteredDevice.Get()
}

// GetRegisteredDeviceOk returns a tuple with the RegisteredDevice field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HciVirtualGpu) GetRegisteredDeviceOk() (*AssetDeviceRegistrationRelationship, bool) {
	if o == nil {
		return nil, false
	}
	return o.RegisteredDevice.Get(), o.RegisteredDevice.IsSet()
}

// HasRegisteredDevice returns a boolean if a field has been set.
func (o *HciVirtualGpu) HasRegisteredDevice() bool {
	if o != nil && o.RegisteredDevice.IsSet() {
		return true
	}

	return false
}

// SetRegisteredDevice gets a reference to the given NullableAssetDeviceRegistrationRelationship and assigns it to the RegisteredDevice field.
func (o *HciVirtualGpu) SetRegisteredDevice(v AssetDeviceRegistrationRelationship) {
	o.RegisteredDevice.Set(&v)
}

// SetRegisteredDeviceNil sets the value for RegisteredDevice to be an explicit nil
func (o *HciVirtualGpu) SetRegisteredDeviceNil() {
	o.RegisteredDevice.Set(nil)
}

// UnsetRegisteredDevice ensures that no value is present for RegisteredDevice, not even an explicit nil
func (o *HciVirtualGpu) UnsetRegisteredDevice() {
	o.RegisteredDevice.Unset()
}

func (o HciVirtualGpu) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o HciVirtualGpu) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	serializedMoBaseMo, errMoBaseMo := json.Marshal(o.MoBaseMo)
	if errMoBaseMo != nil {
		return map[string]interface{}{}, errMoBaseMo
	}
	errMoBaseMo = json.Unmarshal([]byte(serializedMoBaseMo), &toSerialize)
	if errMoBaseMo != nil {
		return map[string]interface{}{}, errMoBaseMo
	}
	if _, exists := toSerialize["ClassId"]; !exists {
		toSerialize["ClassId"] = o.GetDefaultClassId()
	}
	toSerialize["ClassId"] = o.ClassId
	if _, exists := toSerialize["ObjectType"]; !exists {
		toSerialize["ObjectType"] = o.GetDefaultObjectType()
	}
	toSerialize["ObjectType"] = o.ObjectType
	if o.AllocatedVmExtIds != nil {
		toSerialize["AllocatedVmExtIds"] = o.AllocatedVmExtIds
	}
	if !IsNil(o.Assignable) {
		toSerialize["Assignable"] = o.Assignable
	}
	if !IsNil(o.ClusterExtId) {
		toSerialize["ClusterExtId"] = o.ClusterExtId
	}
	if !IsNil(o.DeviceId) {
		toSerialize["DeviceId"] = o.DeviceId
	}
	if !IsNil(o.DeviceName) {
		toSerialize["DeviceName"] = o.DeviceName
	}
	if !IsNil(o.Fraction) {
		toSerialize["Fraction"] = o.Fraction
	}
	if !IsNil(o.FrameBufferSizeBytes) {
		toSerialize["FrameBufferSizeBytes"] = o.FrameBufferSizeBytes
	}
	if !IsNil(o.GuestDriverVersion) {
		toSerialize["GuestDriverVersion"] = o.GuestDriverVersion
	}
	if !IsNil(o.IsInUse) {
		toSerialize["IsInUse"] = o.IsInUse
	}
	if o.Licenses != nil {
		toSerialize["Licenses"] = o.Licenses
	}
	if !IsNil(o.MaxInstancesPerVm) {
		toSerialize["MaxInstancesPerVm"] = o.MaxInstancesPerVm
	}
	if !IsNil(o.MaxResolution) {
		toSerialize["MaxResolution"] = o.MaxResolution
	}
	if !IsNil(o.NumaNode) {
		toSerialize["NumaNode"] = o.NumaNode
	}
	if !IsNil(o.NumberOfVirtualDisplayHeads) {
		toSerialize["NumberOfVirtualDisplayHeads"] = o.NumberOfVirtualDisplayHeads
	}
	if !IsNil(o.Sbdf) {
		toSerialize["Sbdf"] = o.Sbdf
	}
	if !IsNil(o.Type) {
		toSerialize["Type"] = o.Type
	}
	if !IsNil(o.Vendor) {
		toSerialize["Vendor"] = o.Vendor
	}
	if !IsNil(o.VirtualGpuExtId) {
		toSerialize["VirtualGpuExtId"] = o.VirtualGpuExtId
	}
	if o.AllocatedVms != nil {
		toSerialize["AllocatedVms"] = o.AllocatedVms
	}
	if o.Cluster.IsSet() {
		toSerialize["Cluster"] = o.Cluster.Get()
	}
	if o.RegisteredDevice.IsSet() {
		toSerialize["RegisteredDevice"] = o.RegisteredDevice.Get()
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *HciVirtualGpu) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"ClassId",
		"ObjectType",
	}

	// defaultValueFuncMap captures the default values for required properties.
	// These values are used when required properties are missing from the payload.
	defaultValueFuncMap := map[string]func() interface{}{
		"ClassId":    o.GetDefaultClassId,
		"ObjectType": o.GetDefaultObjectType,
	}
	var defaultValueApplied bool
	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			if _, ok := defaultValueFuncMap[requiredProperty]; ok {
				allProperties[requiredProperty] = defaultValueFuncMap[requiredProperty]()
				defaultValueApplied = true
			}
		}
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	if defaultValueApplied {
		data, err = json.Marshal(allProperties)
		if err != nil {
			return err
		}
	}
	type HciVirtualGpuWithoutEmbeddedStruct struct {
		// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.
		ClassId string `json:"ClassId"`
		// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
		ObjectType        string   `json:"ObjectType"`
		AllocatedVmExtIds []string `json:"AllocatedVmExtIds,omitempty"`
		// If the GPU resources is available to be allocated to virtual machines (VMs)  within this cluster.
		Assignable *bool `json:"Assignable,omitempty"`
		// The unique identifier of the cluster which owns this virtual GPU.
		ClusterExtId *string `json:"ClusterExtId,omitempty"`
		// The GPU type of the virtual GPU in an integer format. It is similar to DeviceName  which shows the GPU type in string format.
		DeviceId *int64 `json:"DeviceId,omitempty"`
		// The GPU type of the virtual GPU in string format. It is similar to DeviceId which shows the GPU type in integer format.
		DeviceName *string `json:"DeviceName,omitempty"`
		// The fraction of the physical GPU assigned.
		Fraction *int64 `json:"Fraction,omitempty"`
		// The frame buffer size in bytes of the virtual GPU.
		FrameBufferSizeBytes *int64 `json:"FrameBufferSizeBytes,omitempty"`
		// The guest driver version of the virtual GPU.
		GuestDriverVersion *string `json:"GuestDriverVersion,omitempty"`
		// The in use status of the virtual GPU.
		IsInUse  *bool    `json:"IsInUse,omitempty"`
		Licenses []string `json:"Licenses,omitempty"`
		// The maximum instances per VM of the virtual GPU.
		MaxInstancesPerVm *int64 `json:"MaxInstancesPerVm,omitempty"`
		// The maximum resolution of the virtual GPU.
		MaxResolution *string `json:"MaxResolution,omitempty"`
		// Each GPU in a system may be physically connected to a specific CPU socket or NUMA node.  The numaNode value specifies which node the GPU is associated with.  In a NUMA system, a computer's memory is divided into multiple nodes. Each node is a  combination of processors and a portion of the system's memory. While processors can  access memory from all nodes, they have faster access to the memory in their own node  compared to memory in other nodes.
		NumaNode *string `json:"NumaNode,omitempty"`
		// The number of virtual display heads of the virtual GPU.
		NumberOfVirtualDisplayHeads *int64 `json:"NumberOfVirtualDisplayHeads,omitempty"`
		// The SBDF address of the virtual GPU.
		Sbdf *string `json:"Sbdf,omitempty"`
		// The type of the irtual GPU. Possible values are PASSTHROUGH_GRAPHICS, PASSTHROUGH_COMPUTE, VIRTUAL.
		Type *string `json:"Type,omitempty"`
		// The vendor name of the virtual GPU.
		Vendor *string `json:"Vendor,omitempty"`
		// The unique identifier of the virtual GPU.
		VirtualGpuExtId *string `json:"VirtualGpuExtId,omitempty"`
		// An array of relationships to hciBaseVm resources.
		AllocatedVms     []HciBaseVmRelationship                     `json:"AllocatedVms,omitempty"`
		Cluster          NullableHciClusterRelationship              `json:"Cluster,omitempty"`
		RegisteredDevice NullableAssetDeviceRegistrationRelationship `json:"RegisteredDevice,omitempty"`
	}

	varHciVirtualGpuWithoutEmbeddedStruct := HciVirtualGpuWithoutEmbeddedStruct{}

	err = json.Unmarshal(data, &varHciVirtualGpuWithoutEmbeddedStruct)
	if err == nil {
		varHciVirtualGpu := _HciVirtualGpu{}
		varHciVirtualGpu.ClassId = varHciVirtualGpuWithoutEmbeddedStruct.ClassId
		varHciVirtualGpu.ObjectType = varHciVirtualGpuWithoutEmbeddedStruct.ObjectType
		varHciVirtualGpu.AllocatedVmExtIds = varHciVirtualGpuWithoutEmbeddedStruct.AllocatedVmExtIds
		varHciVirtualGpu.Assignable = varHciVirtualGpuWithoutEmbeddedStruct.Assignable
		varHciVirtualGpu.ClusterExtId = varHciVirtualGpuWithoutEmbeddedStruct.ClusterExtId
		varHciVirtualGpu.DeviceId = varHciVirtualGpuWithoutEmbeddedStruct.DeviceId
		varHciVirtualGpu.DeviceName = varHciVirtualGpuWithoutEmbeddedStruct.DeviceName
		varHciVirtualGpu.Fraction = varHciVirtualGpuWithoutEmbeddedStruct.Fraction
		varHciVirtualGpu.FrameBufferSizeBytes = varHciVirtualGpuWithoutEmbeddedStruct.FrameBufferSizeBytes
		varHciVirtualGpu.GuestDriverVersion = varHciVirtualGpuWithoutEmbeddedStruct.GuestDriverVersion
		varHciVirtualGpu.IsInUse = varHciVirtualGpuWithoutEmbeddedStruct.IsInUse
		varHciVirtualGpu.Licenses = varHciVirtualGpuWithoutEmbeddedStruct.Licenses
		varHciVirtualGpu.MaxInstancesPerVm = varHciVirtualGpuWithoutEmbeddedStruct.MaxInstancesPerVm
		varHciVirtualGpu.MaxResolution = varHciVirtualGpuWithoutEmbeddedStruct.MaxResolution
		varHciVirtualGpu.NumaNode = varHciVirtualGpuWithoutEmbeddedStruct.NumaNode
		varHciVirtualGpu.NumberOfVirtualDisplayHeads = varHciVirtualGpuWithoutEmbeddedStruct.NumberOfVirtualDisplayHeads
		varHciVirtualGpu.Sbdf = varHciVirtualGpuWithoutEmbeddedStruct.Sbdf
		varHciVirtualGpu.Type = varHciVirtualGpuWithoutEmbeddedStruct.Type
		varHciVirtualGpu.Vendor = varHciVirtualGpuWithoutEmbeddedStruct.Vendor
		varHciVirtualGpu.VirtualGpuExtId = varHciVirtualGpuWithoutEmbeddedStruct.VirtualGpuExtId
		varHciVirtualGpu.AllocatedVms = varHciVirtualGpuWithoutEmbeddedStruct.AllocatedVms
		varHciVirtualGpu.Cluster = varHciVirtualGpuWithoutEmbeddedStruct.Cluster
		varHciVirtualGpu.RegisteredDevice = varHciVirtualGpuWithoutEmbeddedStruct.RegisteredDevice
		*o = HciVirtualGpu(varHciVirtualGpu)
	} else {
		return err
	}

	varHciVirtualGpu := _HciVirtualGpu{}

	err = json.Unmarshal(data, &varHciVirtualGpu)
	if err == nil {
		o.MoBaseMo = varHciVirtualGpu.MoBaseMo
	} else {
		return err
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "ClassId")
		delete(additionalProperties, "ObjectType")
		delete(additionalProperties, "AllocatedVmExtIds")
		delete(additionalProperties, "Assignable")
		delete(additionalProperties, "ClusterExtId")
		delete(additionalProperties, "DeviceId")
		delete(additionalProperties, "DeviceName")
		delete(additionalProperties, "Fraction")
		delete(additionalProperties, "FrameBufferSizeBytes")
		delete(additionalProperties, "GuestDriverVersion")
		delete(additionalProperties, "IsInUse")
		delete(additionalProperties, "Licenses")
		delete(additionalProperties, "MaxInstancesPerVm")
		delete(additionalProperties, "MaxResolution")
		delete(additionalProperties, "NumaNode")
		delete(additionalProperties, "NumberOfVirtualDisplayHeads")
		delete(additionalProperties, "Sbdf")
		delete(additionalProperties, "Type")
		delete(additionalProperties, "Vendor")
		delete(additionalProperties, "VirtualGpuExtId")
		delete(additionalProperties, "AllocatedVms")
		delete(additionalProperties, "Cluster")
		delete(additionalProperties, "RegisteredDevice")

		// remove fields from embedded structs
		reflectMoBaseMo := reflect.ValueOf(o.MoBaseMo)
		for i := 0; i < reflectMoBaseMo.Type().NumField(); i++ {
			t := reflectMoBaseMo.Type().Field(i)

			if jsonTag := t.Tag.Get("json"); jsonTag != "" {
				fieldName := ""
				if commaIdx := strings.Index(jsonTag, ","); commaIdx > 0 {
					fieldName = jsonTag[:commaIdx]
				} else {
					fieldName = jsonTag
				}
				if fieldName != "AdditionalProperties" {
					delete(additionalProperties, fieldName)
				}
			}
		}

		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableHciVirtualGpu struct {
	value *HciVirtualGpu
	isSet bool
}

func (v NullableHciVirtualGpu) Get() *HciVirtualGpu {
	return v.value
}

func (v *NullableHciVirtualGpu) Set(val *HciVirtualGpu) {
	v.value = val
	v.isSet = true
}

func (v NullableHciVirtualGpu) IsSet() bool {
	return v.isSet
}

func (v *NullableHciVirtualGpu) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHciVirtualGpu(val *HciVirtualGpu) *NullableHciVirtualGpu {
	return &NullableHciVirtualGpu{value: val, isSet: true}
}

func (v NullableHciVirtualGpu) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHciVirtualGpu) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
