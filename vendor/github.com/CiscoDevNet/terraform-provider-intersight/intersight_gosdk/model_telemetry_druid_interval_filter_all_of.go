/*
Cisco Intersight

Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations. The Intersight OpenAPI document defines the complete set of properties that are returned in the HTTP response. From that perspective, a client can expect that no additional properties are returned, unless these properties are explicitly defined in the OpenAPI document. However, when a client uses an older version of the Intersight OpenAPI document, the server may send additional properties because the software is more recent than the client. In that case, the client may receive properties that it does not know about. Some generated SDKs perform a strict validation of the HTTP response body against the OpenAPI document.

API version: 1.0.11-15711
Contact: intersight@cisco.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package intersight

import (
	"encoding/json"
)

// TelemetryDruidIntervalFilterAllOf struct for TelemetryDruidIntervalFilterAllOf
type TelemetryDruidIntervalFilterAllOf struct {
	Type string `json:"type"`
	// Input column or virtual column name to filter.
	Dimension string `json:"dimension"`
	// A JSON array containing ISO-8601 interval strings that defines the time ranges to filter on.
	Intervals            []string                          `json:"intervals"`
	ExtractionFn         *TelemetryDruidExtractionFunction `json:"extractionFn,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _TelemetryDruidIntervalFilterAllOf TelemetryDruidIntervalFilterAllOf

// NewTelemetryDruidIntervalFilterAllOf instantiates a new TelemetryDruidIntervalFilterAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTelemetryDruidIntervalFilterAllOf(type_ string, dimension string, intervals []string) *TelemetryDruidIntervalFilterAllOf {
	this := TelemetryDruidIntervalFilterAllOf{}
	this.Type = type_
	this.Dimension = dimension
	this.Intervals = intervals
	return &this
}

// NewTelemetryDruidIntervalFilterAllOfWithDefaults instantiates a new TelemetryDruidIntervalFilterAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTelemetryDruidIntervalFilterAllOfWithDefaults() *TelemetryDruidIntervalFilterAllOf {
	this := TelemetryDruidIntervalFilterAllOf{}
	return &this
}

// GetType returns the Type field value
func (o *TelemetryDruidIntervalFilterAllOf) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *TelemetryDruidIntervalFilterAllOf) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *TelemetryDruidIntervalFilterAllOf) SetType(v string) {
	o.Type = v
}

// GetDimension returns the Dimension field value
func (o *TelemetryDruidIntervalFilterAllOf) GetDimension() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Dimension
}

// GetDimensionOk returns a tuple with the Dimension field value
// and a boolean to check if the value has been set.
func (o *TelemetryDruidIntervalFilterAllOf) GetDimensionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Dimension, true
}

// SetDimension sets field value
func (o *TelemetryDruidIntervalFilterAllOf) SetDimension(v string) {
	o.Dimension = v
}

// GetIntervals returns the Intervals field value
func (o *TelemetryDruidIntervalFilterAllOf) GetIntervals() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Intervals
}

// GetIntervalsOk returns a tuple with the Intervals field value
// and a boolean to check if the value has been set.
func (o *TelemetryDruidIntervalFilterAllOf) GetIntervalsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Intervals, true
}

// SetIntervals sets field value
func (o *TelemetryDruidIntervalFilterAllOf) SetIntervals(v []string) {
	o.Intervals = v
}

// GetExtractionFn returns the ExtractionFn field value if set, zero value otherwise.
func (o *TelemetryDruidIntervalFilterAllOf) GetExtractionFn() TelemetryDruidExtractionFunction {
	if o == nil || o.ExtractionFn == nil {
		var ret TelemetryDruidExtractionFunction
		return ret
	}
	return *o.ExtractionFn
}

// GetExtractionFnOk returns a tuple with the ExtractionFn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TelemetryDruidIntervalFilterAllOf) GetExtractionFnOk() (*TelemetryDruidExtractionFunction, bool) {
	if o == nil || o.ExtractionFn == nil {
		return nil, false
	}
	return o.ExtractionFn, true
}

// HasExtractionFn returns a boolean if a field has been set.
func (o *TelemetryDruidIntervalFilterAllOf) HasExtractionFn() bool {
	if o != nil && o.ExtractionFn != nil {
		return true
	}

	return false
}

// SetExtractionFn gets a reference to the given TelemetryDruidExtractionFunction and assigns it to the ExtractionFn field.
func (o *TelemetryDruidIntervalFilterAllOf) SetExtractionFn(v TelemetryDruidExtractionFunction) {
	o.ExtractionFn = &v
}

func (o TelemetryDruidIntervalFilterAllOf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["type"] = o.Type
	}
	if true {
		toSerialize["dimension"] = o.Dimension
	}
	if true {
		toSerialize["intervals"] = o.Intervals
	}
	if o.ExtractionFn != nil {
		toSerialize["extractionFn"] = o.ExtractionFn
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *TelemetryDruidIntervalFilterAllOf) UnmarshalJSON(bytes []byte) (err error) {
	varTelemetryDruidIntervalFilterAllOf := _TelemetryDruidIntervalFilterAllOf{}

	if err = json.Unmarshal(bytes, &varTelemetryDruidIntervalFilterAllOf); err == nil {
		*o = TelemetryDruidIntervalFilterAllOf(varTelemetryDruidIntervalFilterAllOf)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "type")
		delete(additionalProperties, "dimension")
		delete(additionalProperties, "intervals")
		delete(additionalProperties, "extractionFn")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableTelemetryDruidIntervalFilterAllOf struct {
	value *TelemetryDruidIntervalFilterAllOf
	isSet bool
}

func (v NullableTelemetryDruidIntervalFilterAllOf) Get() *TelemetryDruidIntervalFilterAllOf {
	return v.value
}

func (v *NullableTelemetryDruidIntervalFilterAllOf) Set(val *TelemetryDruidIntervalFilterAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableTelemetryDruidIntervalFilterAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableTelemetryDruidIntervalFilterAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTelemetryDruidIntervalFilterAllOf(val *TelemetryDruidIntervalFilterAllOf) *NullableTelemetryDruidIntervalFilterAllOf {
	return &NullableTelemetryDruidIntervalFilterAllOf{value: val, isSet: true}
}

func (v NullableTelemetryDruidIntervalFilterAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTelemetryDruidIntervalFilterAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
