/*
Cisco Intersight

Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations. The Intersight OpenAPI document defines the complete set of properties that are returned in the HTTP response. From that perspective, a client can expect that no additional properties are returned, unless these properties are explicitly defined in the OpenAPI document. However, when a client uses an older version of the Intersight OpenAPI document, the server may send additional properties because the software is more recent than the client. In that case, the client may receive properties that it does not know about. Some generated SDKs perform a strict validation of the HTTP response body against the OpenAPI document.

API version: 1.0.11-10371
Contact: intersight@cisco.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package intersight

import (
	"encoding/json"
)

// StorageNetAppBaseSnapMirrorPolicyAllOf Definition of the list of properties defined in 'storage.NetAppBaseSnapMirrorPolicy', excluding properties defined in parent classes.
type StorageNetAppBaseSnapMirrorPolicyAllOf struct {
	// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data. The enum values provides the list of concrete types that can be instantiated from this abstract type.
	ClassId string `json:"ClassId"`
	// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property. The enum values provides the list of concrete types that can be instantiated from this abstract type.
	ObjectType string `json:"ObjectType"`
	// Comment associated with the policy.
	Comment *string `json:"Comment,omitempty"`
	// Name of the NetApp SnapMirror policy.
	Name *string `json:"Name,omitempty"`
	// Identifies whether the SnapMirror policy is owned by the storage virtual machine or the cluster.
	Scope *string `json:"Scope,omitempty"`
	// SnapMirror policy sync_type is either sync, strict_sync, or automated_failover. Property is applicable only to the policies of type \"sync\".
	SyncType *string `json:"SyncType,omitempty"`
	// Name of the schedule used to update asynchronous relationships.
	TransferScheduleName *string `json:"TransferScheduleName,omitempty"`
	// Uuid of the schedule used to update asynchronous relationships.
	TransferScheduleUuid *string `json:"TransferScheduleUuid,omitempty"`
	// SnapMirror policy type can be async, sync, or continuous.
	Type *string `json:"Type,omitempty"`
	// Uuid of the NetApp SnapMirror policy.
	Uuid                 *string `json:"Uuid,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _StorageNetAppBaseSnapMirrorPolicyAllOf StorageNetAppBaseSnapMirrorPolicyAllOf

// NewStorageNetAppBaseSnapMirrorPolicyAllOf instantiates a new StorageNetAppBaseSnapMirrorPolicyAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStorageNetAppBaseSnapMirrorPolicyAllOf(classId string, objectType string) *StorageNetAppBaseSnapMirrorPolicyAllOf {
	this := StorageNetAppBaseSnapMirrorPolicyAllOf{}
	this.ClassId = classId
	this.ObjectType = objectType
	return &this
}

// NewStorageNetAppBaseSnapMirrorPolicyAllOfWithDefaults instantiates a new StorageNetAppBaseSnapMirrorPolicyAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStorageNetAppBaseSnapMirrorPolicyAllOfWithDefaults() *StorageNetAppBaseSnapMirrorPolicyAllOf {
	this := StorageNetAppBaseSnapMirrorPolicyAllOf{}
	return &this
}

// GetClassId returns the ClassId field value
func (o *StorageNetAppBaseSnapMirrorPolicyAllOf) GetClassId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ClassId
}

// GetClassIdOk returns a tuple with the ClassId field value
// and a boolean to check if the value has been set.
func (o *StorageNetAppBaseSnapMirrorPolicyAllOf) GetClassIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ClassId, true
}

// SetClassId sets field value
func (o *StorageNetAppBaseSnapMirrorPolicyAllOf) SetClassId(v string) {
	o.ClassId = v
}

// GetObjectType returns the ObjectType field value
func (o *StorageNetAppBaseSnapMirrorPolicyAllOf) GetObjectType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ObjectType
}

// GetObjectTypeOk returns a tuple with the ObjectType field value
// and a boolean to check if the value has been set.
func (o *StorageNetAppBaseSnapMirrorPolicyAllOf) GetObjectTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ObjectType, true
}

// SetObjectType sets field value
func (o *StorageNetAppBaseSnapMirrorPolicyAllOf) SetObjectType(v string) {
	o.ObjectType = v
}

// GetComment returns the Comment field value if set, zero value otherwise.
func (o *StorageNetAppBaseSnapMirrorPolicyAllOf) GetComment() string {
	if o == nil || o.Comment == nil {
		var ret string
		return ret
	}
	return *o.Comment
}

// GetCommentOk returns a tuple with the Comment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageNetAppBaseSnapMirrorPolicyAllOf) GetCommentOk() (*string, bool) {
	if o == nil || o.Comment == nil {
		return nil, false
	}
	return o.Comment, true
}

// HasComment returns a boolean if a field has been set.
func (o *StorageNetAppBaseSnapMirrorPolicyAllOf) HasComment() bool {
	if o != nil && o.Comment != nil {
		return true
	}

	return false
}

// SetComment gets a reference to the given string and assigns it to the Comment field.
func (o *StorageNetAppBaseSnapMirrorPolicyAllOf) SetComment(v string) {
	o.Comment = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *StorageNetAppBaseSnapMirrorPolicyAllOf) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageNetAppBaseSnapMirrorPolicyAllOf) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *StorageNetAppBaseSnapMirrorPolicyAllOf) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *StorageNetAppBaseSnapMirrorPolicyAllOf) SetName(v string) {
	o.Name = &v
}

// GetScope returns the Scope field value if set, zero value otherwise.
func (o *StorageNetAppBaseSnapMirrorPolicyAllOf) GetScope() string {
	if o == nil || o.Scope == nil {
		var ret string
		return ret
	}
	return *o.Scope
}

// GetScopeOk returns a tuple with the Scope field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageNetAppBaseSnapMirrorPolicyAllOf) GetScopeOk() (*string, bool) {
	if o == nil || o.Scope == nil {
		return nil, false
	}
	return o.Scope, true
}

// HasScope returns a boolean if a field has been set.
func (o *StorageNetAppBaseSnapMirrorPolicyAllOf) HasScope() bool {
	if o != nil && o.Scope != nil {
		return true
	}

	return false
}

// SetScope gets a reference to the given string and assigns it to the Scope field.
func (o *StorageNetAppBaseSnapMirrorPolicyAllOf) SetScope(v string) {
	o.Scope = &v
}

// GetSyncType returns the SyncType field value if set, zero value otherwise.
func (o *StorageNetAppBaseSnapMirrorPolicyAllOf) GetSyncType() string {
	if o == nil || o.SyncType == nil {
		var ret string
		return ret
	}
	return *o.SyncType
}

// GetSyncTypeOk returns a tuple with the SyncType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageNetAppBaseSnapMirrorPolicyAllOf) GetSyncTypeOk() (*string, bool) {
	if o == nil || o.SyncType == nil {
		return nil, false
	}
	return o.SyncType, true
}

// HasSyncType returns a boolean if a field has been set.
func (o *StorageNetAppBaseSnapMirrorPolicyAllOf) HasSyncType() bool {
	if o != nil && o.SyncType != nil {
		return true
	}

	return false
}

// SetSyncType gets a reference to the given string and assigns it to the SyncType field.
func (o *StorageNetAppBaseSnapMirrorPolicyAllOf) SetSyncType(v string) {
	o.SyncType = &v
}

// GetTransferScheduleName returns the TransferScheduleName field value if set, zero value otherwise.
func (o *StorageNetAppBaseSnapMirrorPolicyAllOf) GetTransferScheduleName() string {
	if o == nil || o.TransferScheduleName == nil {
		var ret string
		return ret
	}
	return *o.TransferScheduleName
}

// GetTransferScheduleNameOk returns a tuple with the TransferScheduleName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageNetAppBaseSnapMirrorPolicyAllOf) GetTransferScheduleNameOk() (*string, bool) {
	if o == nil || o.TransferScheduleName == nil {
		return nil, false
	}
	return o.TransferScheduleName, true
}

// HasTransferScheduleName returns a boolean if a field has been set.
func (o *StorageNetAppBaseSnapMirrorPolicyAllOf) HasTransferScheduleName() bool {
	if o != nil && o.TransferScheduleName != nil {
		return true
	}

	return false
}

// SetTransferScheduleName gets a reference to the given string and assigns it to the TransferScheduleName field.
func (o *StorageNetAppBaseSnapMirrorPolicyAllOf) SetTransferScheduleName(v string) {
	o.TransferScheduleName = &v
}

// GetTransferScheduleUuid returns the TransferScheduleUuid field value if set, zero value otherwise.
func (o *StorageNetAppBaseSnapMirrorPolicyAllOf) GetTransferScheduleUuid() string {
	if o == nil || o.TransferScheduleUuid == nil {
		var ret string
		return ret
	}
	return *o.TransferScheduleUuid
}

// GetTransferScheduleUuidOk returns a tuple with the TransferScheduleUuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageNetAppBaseSnapMirrorPolicyAllOf) GetTransferScheduleUuidOk() (*string, bool) {
	if o == nil || o.TransferScheduleUuid == nil {
		return nil, false
	}
	return o.TransferScheduleUuid, true
}

// HasTransferScheduleUuid returns a boolean if a field has been set.
func (o *StorageNetAppBaseSnapMirrorPolicyAllOf) HasTransferScheduleUuid() bool {
	if o != nil && o.TransferScheduleUuid != nil {
		return true
	}

	return false
}

// SetTransferScheduleUuid gets a reference to the given string and assigns it to the TransferScheduleUuid field.
func (o *StorageNetAppBaseSnapMirrorPolicyAllOf) SetTransferScheduleUuid(v string) {
	o.TransferScheduleUuid = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *StorageNetAppBaseSnapMirrorPolicyAllOf) GetType() string {
	if o == nil || o.Type == nil {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageNetAppBaseSnapMirrorPolicyAllOf) GetTypeOk() (*string, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *StorageNetAppBaseSnapMirrorPolicyAllOf) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *StorageNetAppBaseSnapMirrorPolicyAllOf) SetType(v string) {
	o.Type = &v
}

// GetUuid returns the Uuid field value if set, zero value otherwise.
func (o *StorageNetAppBaseSnapMirrorPolicyAllOf) GetUuid() string {
	if o == nil || o.Uuid == nil {
		var ret string
		return ret
	}
	return *o.Uuid
}

// GetUuidOk returns a tuple with the Uuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageNetAppBaseSnapMirrorPolicyAllOf) GetUuidOk() (*string, bool) {
	if o == nil || o.Uuid == nil {
		return nil, false
	}
	return o.Uuid, true
}

// HasUuid returns a boolean if a field has been set.
func (o *StorageNetAppBaseSnapMirrorPolicyAllOf) HasUuid() bool {
	if o != nil && o.Uuid != nil {
		return true
	}

	return false
}

// SetUuid gets a reference to the given string and assigns it to the Uuid field.
func (o *StorageNetAppBaseSnapMirrorPolicyAllOf) SetUuid(v string) {
	o.Uuid = &v
}

func (o StorageNetAppBaseSnapMirrorPolicyAllOf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["ClassId"] = o.ClassId
	}
	if true {
		toSerialize["ObjectType"] = o.ObjectType
	}
	if o.Comment != nil {
		toSerialize["Comment"] = o.Comment
	}
	if o.Name != nil {
		toSerialize["Name"] = o.Name
	}
	if o.Scope != nil {
		toSerialize["Scope"] = o.Scope
	}
	if o.SyncType != nil {
		toSerialize["SyncType"] = o.SyncType
	}
	if o.TransferScheduleName != nil {
		toSerialize["TransferScheduleName"] = o.TransferScheduleName
	}
	if o.TransferScheduleUuid != nil {
		toSerialize["TransferScheduleUuid"] = o.TransferScheduleUuid
	}
	if o.Type != nil {
		toSerialize["Type"] = o.Type
	}
	if o.Uuid != nil {
		toSerialize["Uuid"] = o.Uuid
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *StorageNetAppBaseSnapMirrorPolicyAllOf) UnmarshalJSON(bytes []byte) (err error) {
	varStorageNetAppBaseSnapMirrorPolicyAllOf := _StorageNetAppBaseSnapMirrorPolicyAllOf{}

	if err = json.Unmarshal(bytes, &varStorageNetAppBaseSnapMirrorPolicyAllOf); err == nil {
		*o = StorageNetAppBaseSnapMirrorPolicyAllOf(varStorageNetAppBaseSnapMirrorPolicyAllOf)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "ClassId")
		delete(additionalProperties, "ObjectType")
		delete(additionalProperties, "Comment")
		delete(additionalProperties, "Name")
		delete(additionalProperties, "Scope")
		delete(additionalProperties, "SyncType")
		delete(additionalProperties, "TransferScheduleName")
		delete(additionalProperties, "TransferScheduleUuid")
		delete(additionalProperties, "Type")
		delete(additionalProperties, "Uuid")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableStorageNetAppBaseSnapMirrorPolicyAllOf struct {
	value *StorageNetAppBaseSnapMirrorPolicyAllOf
	isSet bool
}

func (v NullableStorageNetAppBaseSnapMirrorPolicyAllOf) Get() *StorageNetAppBaseSnapMirrorPolicyAllOf {
	return v.value
}

func (v *NullableStorageNetAppBaseSnapMirrorPolicyAllOf) Set(val *StorageNetAppBaseSnapMirrorPolicyAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableStorageNetAppBaseSnapMirrorPolicyAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableStorageNetAppBaseSnapMirrorPolicyAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStorageNetAppBaseSnapMirrorPolicyAllOf(val *StorageNetAppBaseSnapMirrorPolicyAllOf) *NullableStorageNetAppBaseSnapMirrorPolicyAllOf {
	return &NullableStorageNetAppBaseSnapMirrorPolicyAllOf{value: val, isSet: true}
}

func (v NullableStorageNetAppBaseSnapMirrorPolicyAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStorageNetAppBaseSnapMirrorPolicyAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
