/*
Cisco Intersight

Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations. The Intersight OpenAPI document defines the complete set of properties that are returned in the HTTP response. From that perspective, a client can expect that no additional properties are returned, unless these properties are explicitly defined in the OpenAPI document. However, when a client uses an older version of the Intersight OpenAPI document, the server may send additional properties because the software is more recent than the client. In that case, the client may receive properties that it does not know about. Some generated SDKs perform a strict validation of the HTTP response body against the OpenAPI document.

API version: 1.0.11-2024100405
Contact: intersight@cisco.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package intersight

import (
	"encoding/json"
	"fmt"
	"reflect"
	"strings"
	"time"
)

// checks if the ApplianceUpgrade type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ApplianceUpgrade{}

// ApplianceUpgrade Upgrade tracks the Intersight Appliance's software upgrades. Intersight Appliance's upgrade service automatically creates an Upgrade managed object when there is a pending software upgrade. User may modify an active Upgrade managed object to reset the software upgrade start time. However, user may not be able to postpone an upgrade beyond the limit enforced by the upgrade grace period set in the software manifest.
type ApplianceUpgrade struct {
	MoBaseMo
	// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.
	ClassId string `json:"ClassId"`
	// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
	ObjectType string `json:"ObjectType"`
	// Indicates if the software upgrade is active or not.
	Active *bool `json:"Active,omitempty"`
	// True if all nodes in cluster are pingable, otherwise false.
	AllNodesPingable *bool `json:"AllNodesPingable,omitempty"`
	// Indicates that the request was automatically created by the system.
	AutoCreated     *bool                      `json:"AutoCreated,omitempty"`
	CompletedPhases []OnpremUpgradePhase       `json:"CompletedPhases,omitempty"`
	CurrentPhase    NullableOnpremUpgradePhase `json:"CurrentPhase,omitempty"`
	// Description of the software upgrade.
	Description *string `json:"Description,omitempty"`
	// Elapsed time in seconds during the software upgrade.
	ElapsedTime *int64 `json:"ElapsedTime,omitempty"`
	// End date of the software upgrade.
	EndTime *time.Time `json:"EndTime,omitempty"`
	// Error code for Intersight Appliance's software upgrade. In case of failure - this code will help decide if software upgrade can be retried.
	ErrorCode *int64 `json:"ErrorCode,omitempty"`
	// Software upgrade manifest's fingerprint.
	Fingerprint *string `json:"Fingerprint,omitempty"`
	// Track if software upgrade is upgrading or rolling back.
	IsRollingBack *bool `json:"IsRollingBack,omitempty"`
	// Indicates if the upgrade is triggered by user or due to schedule.
	IsUserTriggered *bool                 `json:"IsUserTriggered,omitempty"`
	Messages        []string              `json:"Messages,omitempty"`
	NodeInfo        []ApplianceNodeIpInfo `json:"NodeInfo,omitempty"`
	// Track if rollback is needed.
	RollbackNeeded *bool                `json:"RollbackNeeded,omitempty"`
	RollbackPhases []OnpremUpgradePhase `json:"RollbackPhases,omitempty"`
	// Status of the Intersight Appliance's software rollback status.
	RollbackStatus *string  `json:"RollbackStatus,omitempty"`
	Services       []string `json:"Services,omitempty"`
	// Start date of the software upgrade. UI can modify startTime to re-schedule an upgrade.
	StartTime *time.Time `json:"StartTime,omitempty"`
	// Status of the Intersight Appliance's software upgrade.
	Status *string `json:"Status,omitempty"`
	// Total number of nodes this upgrade will run on.
	TotalNodes *int64 `json:"TotalNodes,omitempty"`
	// TotalPhase represents the total number of the upgradePhases for one upgrade.
	TotalPhases *int64   `json:"TotalPhases,omitempty"`
	UiPackages  []string `json:"UiPackages,omitempty"`
	// Software upgrade manifest's version.
	Version              *string                                  `json:"Version,omitempty"`
	Account              NullableIamAccountRelationship           `json:"Account,omitempty"`
	ImageBundle          NullableApplianceImageBundleRelationship `json:"ImageBundle,omitempty"`
	Requires             NullableApplianceUpgradeRelationship     `json:"Requires,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ApplianceUpgrade ApplianceUpgrade

// NewApplianceUpgrade instantiates a new ApplianceUpgrade object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApplianceUpgrade(classId string, objectType string) *ApplianceUpgrade {
	this := ApplianceUpgrade{}
	this.ClassId = classId
	this.ObjectType = objectType
	var rollbackNeeded bool = false
	this.RollbackNeeded = &rollbackNeeded
	return &this
}

// NewApplianceUpgradeWithDefaults instantiates a new ApplianceUpgrade object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApplianceUpgradeWithDefaults() *ApplianceUpgrade {
	this := ApplianceUpgrade{}
	var classId string = "appliance.Upgrade"
	this.ClassId = classId
	var objectType string = "appliance.Upgrade"
	this.ObjectType = objectType
	var rollbackNeeded bool = false
	this.RollbackNeeded = &rollbackNeeded
	return &this
}

// GetClassId returns the ClassId field value
func (o *ApplianceUpgrade) GetClassId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ClassId
}

// GetClassIdOk returns a tuple with the ClassId field value
// and a boolean to check if the value has been set.
func (o *ApplianceUpgrade) GetClassIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ClassId, true
}

// SetClassId sets field value
func (o *ApplianceUpgrade) SetClassId(v string) {
	o.ClassId = v
}

// GetDefaultClassId returns the default value "appliance.Upgrade" of the ClassId field.
func (o *ApplianceUpgrade) GetDefaultClassId() interface{} {
	return "appliance.Upgrade"
}

// GetObjectType returns the ObjectType field value
func (o *ApplianceUpgrade) GetObjectType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ObjectType
}

// GetObjectTypeOk returns a tuple with the ObjectType field value
// and a boolean to check if the value has been set.
func (o *ApplianceUpgrade) GetObjectTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ObjectType, true
}

// SetObjectType sets field value
func (o *ApplianceUpgrade) SetObjectType(v string) {
	o.ObjectType = v
}

// GetDefaultObjectType returns the default value "appliance.Upgrade" of the ObjectType field.
func (o *ApplianceUpgrade) GetDefaultObjectType() interface{} {
	return "appliance.Upgrade"
}

// GetActive returns the Active field value if set, zero value otherwise.
func (o *ApplianceUpgrade) GetActive() bool {
	if o == nil || IsNil(o.Active) {
		var ret bool
		return ret
	}
	return *o.Active
}

// GetActiveOk returns a tuple with the Active field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplianceUpgrade) GetActiveOk() (*bool, bool) {
	if o == nil || IsNil(o.Active) {
		return nil, false
	}
	return o.Active, true
}

// HasActive returns a boolean if a field has been set.
func (o *ApplianceUpgrade) HasActive() bool {
	if o != nil && !IsNil(o.Active) {
		return true
	}

	return false
}

// SetActive gets a reference to the given bool and assigns it to the Active field.
func (o *ApplianceUpgrade) SetActive(v bool) {
	o.Active = &v
}

// GetAllNodesPingable returns the AllNodesPingable field value if set, zero value otherwise.
func (o *ApplianceUpgrade) GetAllNodesPingable() bool {
	if o == nil || IsNil(o.AllNodesPingable) {
		var ret bool
		return ret
	}
	return *o.AllNodesPingable
}

// GetAllNodesPingableOk returns a tuple with the AllNodesPingable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplianceUpgrade) GetAllNodesPingableOk() (*bool, bool) {
	if o == nil || IsNil(o.AllNodesPingable) {
		return nil, false
	}
	return o.AllNodesPingable, true
}

// HasAllNodesPingable returns a boolean if a field has been set.
func (o *ApplianceUpgrade) HasAllNodesPingable() bool {
	if o != nil && !IsNil(o.AllNodesPingable) {
		return true
	}

	return false
}

// SetAllNodesPingable gets a reference to the given bool and assigns it to the AllNodesPingable field.
func (o *ApplianceUpgrade) SetAllNodesPingable(v bool) {
	o.AllNodesPingable = &v
}

// GetAutoCreated returns the AutoCreated field value if set, zero value otherwise.
func (o *ApplianceUpgrade) GetAutoCreated() bool {
	if o == nil || IsNil(o.AutoCreated) {
		var ret bool
		return ret
	}
	return *o.AutoCreated
}

// GetAutoCreatedOk returns a tuple with the AutoCreated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplianceUpgrade) GetAutoCreatedOk() (*bool, bool) {
	if o == nil || IsNil(o.AutoCreated) {
		return nil, false
	}
	return o.AutoCreated, true
}

// HasAutoCreated returns a boolean if a field has been set.
func (o *ApplianceUpgrade) HasAutoCreated() bool {
	if o != nil && !IsNil(o.AutoCreated) {
		return true
	}

	return false
}

// SetAutoCreated gets a reference to the given bool and assigns it to the AutoCreated field.
func (o *ApplianceUpgrade) SetAutoCreated(v bool) {
	o.AutoCreated = &v
}

// GetCompletedPhases returns the CompletedPhases field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ApplianceUpgrade) GetCompletedPhases() []OnpremUpgradePhase {
	if o == nil {
		var ret []OnpremUpgradePhase
		return ret
	}
	return o.CompletedPhases
}

// GetCompletedPhasesOk returns a tuple with the CompletedPhases field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ApplianceUpgrade) GetCompletedPhasesOk() ([]OnpremUpgradePhase, bool) {
	if o == nil || IsNil(o.CompletedPhases) {
		return nil, false
	}
	return o.CompletedPhases, true
}

// HasCompletedPhases returns a boolean if a field has been set.
func (o *ApplianceUpgrade) HasCompletedPhases() bool {
	if o != nil && !IsNil(o.CompletedPhases) {
		return true
	}

	return false
}

// SetCompletedPhases gets a reference to the given []OnpremUpgradePhase and assigns it to the CompletedPhases field.
func (o *ApplianceUpgrade) SetCompletedPhases(v []OnpremUpgradePhase) {
	o.CompletedPhases = v
}

// GetCurrentPhase returns the CurrentPhase field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ApplianceUpgrade) GetCurrentPhase() OnpremUpgradePhase {
	if o == nil || IsNil(o.CurrentPhase.Get()) {
		var ret OnpremUpgradePhase
		return ret
	}
	return *o.CurrentPhase.Get()
}

// GetCurrentPhaseOk returns a tuple with the CurrentPhase field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ApplianceUpgrade) GetCurrentPhaseOk() (*OnpremUpgradePhase, bool) {
	if o == nil {
		return nil, false
	}
	return o.CurrentPhase.Get(), o.CurrentPhase.IsSet()
}

// HasCurrentPhase returns a boolean if a field has been set.
func (o *ApplianceUpgrade) HasCurrentPhase() bool {
	if o != nil && o.CurrentPhase.IsSet() {
		return true
	}

	return false
}

// SetCurrentPhase gets a reference to the given NullableOnpremUpgradePhase and assigns it to the CurrentPhase field.
func (o *ApplianceUpgrade) SetCurrentPhase(v OnpremUpgradePhase) {
	o.CurrentPhase.Set(&v)
}

// SetCurrentPhaseNil sets the value for CurrentPhase to be an explicit nil
func (o *ApplianceUpgrade) SetCurrentPhaseNil() {
	o.CurrentPhase.Set(nil)
}

// UnsetCurrentPhase ensures that no value is present for CurrentPhase, not even an explicit nil
func (o *ApplianceUpgrade) UnsetCurrentPhase() {
	o.CurrentPhase.Unset()
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *ApplianceUpgrade) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplianceUpgrade) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *ApplianceUpgrade) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *ApplianceUpgrade) SetDescription(v string) {
	o.Description = &v
}

// GetElapsedTime returns the ElapsedTime field value if set, zero value otherwise.
func (o *ApplianceUpgrade) GetElapsedTime() int64 {
	if o == nil || IsNil(o.ElapsedTime) {
		var ret int64
		return ret
	}
	return *o.ElapsedTime
}

// GetElapsedTimeOk returns a tuple with the ElapsedTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplianceUpgrade) GetElapsedTimeOk() (*int64, bool) {
	if o == nil || IsNil(o.ElapsedTime) {
		return nil, false
	}
	return o.ElapsedTime, true
}

// HasElapsedTime returns a boolean if a field has been set.
func (o *ApplianceUpgrade) HasElapsedTime() bool {
	if o != nil && !IsNil(o.ElapsedTime) {
		return true
	}

	return false
}

// SetElapsedTime gets a reference to the given int64 and assigns it to the ElapsedTime field.
func (o *ApplianceUpgrade) SetElapsedTime(v int64) {
	o.ElapsedTime = &v
}

// GetEndTime returns the EndTime field value if set, zero value otherwise.
func (o *ApplianceUpgrade) GetEndTime() time.Time {
	if o == nil || IsNil(o.EndTime) {
		var ret time.Time
		return ret
	}
	return *o.EndTime
}

// GetEndTimeOk returns a tuple with the EndTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplianceUpgrade) GetEndTimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.EndTime) {
		return nil, false
	}
	return o.EndTime, true
}

// HasEndTime returns a boolean if a field has been set.
func (o *ApplianceUpgrade) HasEndTime() bool {
	if o != nil && !IsNil(o.EndTime) {
		return true
	}

	return false
}

// SetEndTime gets a reference to the given time.Time and assigns it to the EndTime field.
func (o *ApplianceUpgrade) SetEndTime(v time.Time) {
	o.EndTime = &v
}

// GetErrorCode returns the ErrorCode field value if set, zero value otherwise.
func (o *ApplianceUpgrade) GetErrorCode() int64 {
	if o == nil || IsNil(o.ErrorCode) {
		var ret int64
		return ret
	}
	return *o.ErrorCode
}

// GetErrorCodeOk returns a tuple with the ErrorCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplianceUpgrade) GetErrorCodeOk() (*int64, bool) {
	if o == nil || IsNil(o.ErrorCode) {
		return nil, false
	}
	return o.ErrorCode, true
}

// HasErrorCode returns a boolean if a field has been set.
func (o *ApplianceUpgrade) HasErrorCode() bool {
	if o != nil && !IsNil(o.ErrorCode) {
		return true
	}

	return false
}

// SetErrorCode gets a reference to the given int64 and assigns it to the ErrorCode field.
func (o *ApplianceUpgrade) SetErrorCode(v int64) {
	o.ErrorCode = &v
}

// GetFingerprint returns the Fingerprint field value if set, zero value otherwise.
func (o *ApplianceUpgrade) GetFingerprint() string {
	if o == nil || IsNil(o.Fingerprint) {
		var ret string
		return ret
	}
	return *o.Fingerprint
}

// GetFingerprintOk returns a tuple with the Fingerprint field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplianceUpgrade) GetFingerprintOk() (*string, bool) {
	if o == nil || IsNil(o.Fingerprint) {
		return nil, false
	}
	return o.Fingerprint, true
}

// HasFingerprint returns a boolean if a field has been set.
func (o *ApplianceUpgrade) HasFingerprint() bool {
	if o != nil && !IsNil(o.Fingerprint) {
		return true
	}

	return false
}

// SetFingerprint gets a reference to the given string and assigns it to the Fingerprint field.
func (o *ApplianceUpgrade) SetFingerprint(v string) {
	o.Fingerprint = &v
}

// GetIsRollingBack returns the IsRollingBack field value if set, zero value otherwise.
func (o *ApplianceUpgrade) GetIsRollingBack() bool {
	if o == nil || IsNil(o.IsRollingBack) {
		var ret bool
		return ret
	}
	return *o.IsRollingBack
}

// GetIsRollingBackOk returns a tuple with the IsRollingBack field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplianceUpgrade) GetIsRollingBackOk() (*bool, bool) {
	if o == nil || IsNil(o.IsRollingBack) {
		return nil, false
	}
	return o.IsRollingBack, true
}

// HasIsRollingBack returns a boolean if a field has been set.
func (o *ApplianceUpgrade) HasIsRollingBack() bool {
	if o != nil && !IsNil(o.IsRollingBack) {
		return true
	}

	return false
}

// SetIsRollingBack gets a reference to the given bool and assigns it to the IsRollingBack field.
func (o *ApplianceUpgrade) SetIsRollingBack(v bool) {
	o.IsRollingBack = &v
}

// GetIsUserTriggered returns the IsUserTriggered field value if set, zero value otherwise.
func (o *ApplianceUpgrade) GetIsUserTriggered() bool {
	if o == nil || IsNil(o.IsUserTriggered) {
		var ret bool
		return ret
	}
	return *o.IsUserTriggered
}

// GetIsUserTriggeredOk returns a tuple with the IsUserTriggered field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplianceUpgrade) GetIsUserTriggeredOk() (*bool, bool) {
	if o == nil || IsNil(o.IsUserTriggered) {
		return nil, false
	}
	return o.IsUserTriggered, true
}

// HasIsUserTriggered returns a boolean if a field has been set.
func (o *ApplianceUpgrade) HasIsUserTriggered() bool {
	if o != nil && !IsNil(o.IsUserTriggered) {
		return true
	}

	return false
}

// SetIsUserTriggered gets a reference to the given bool and assigns it to the IsUserTriggered field.
func (o *ApplianceUpgrade) SetIsUserTriggered(v bool) {
	o.IsUserTriggered = &v
}

// GetMessages returns the Messages field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ApplianceUpgrade) GetMessages() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.Messages
}

// GetMessagesOk returns a tuple with the Messages field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ApplianceUpgrade) GetMessagesOk() ([]string, bool) {
	if o == nil || IsNil(o.Messages) {
		return nil, false
	}
	return o.Messages, true
}

// HasMessages returns a boolean if a field has been set.
func (o *ApplianceUpgrade) HasMessages() bool {
	if o != nil && !IsNil(o.Messages) {
		return true
	}

	return false
}

// SetMessages gets a reference to the given []string and assigns it to the Messages field.
func (o *ApplianceUpgrade) SetMessages(v []string) {
	o.Messages = v
}

// GetNodeInfo returns the NodeInfo field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ApplianceUpgrade) GetNodeInfo() []ApplianceNodeIpInfo {
	if o == nil {
		var ret []ApplianceNodeIpInfo
		return ret
	}
	return o.NodeInfo
}

// GetNodeInfoOk returns a tuple with the NodeInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ApplianceUpgrade) GetNodeInfoOk() ([]ApplianceNodeIpInfo, bool) {
	if o == nil || IsNil(o.NodeInfo) {
		return nil, false
	}
	return o.NodeInfo, true
}

// HasNodeInfo returns a boolean if a field has been set.
func (o *ApplianceUpgrade) HasNodeInfo() bool {
	if o != nil && !IsNil(o.NodeInfo) {
		return true
	}

	return false
}

// SetNodeInfo gets a reference to the given []ApplianceNodeIpInfo and assigns it to the NodeInfo field.
func (o *ApplianceUpgrade) SetNodeInfo(v []ApplianceNodeIpInfo) {
	o.NodeInfo = v
}

// GetRollbackNeeded returns the RollbackNeeded field value if set, zero value otherwise.
func (o *ApplianceUpgrade) GetRollbackNeeded() bool {
	if o == nil || IsNil(o.RollbackNeeded) {
		var ret bool
		return ret
	}
	return *o.RollbackNeeded
}

// GetRollbackNeededOk returns a tuple with the RollbackNeeded field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplianceUpgrade) GetRollbackNeededOk() (*bool, bool) {
	if o == nil || IsNil(o.RollbackNeeded) {
		return nil, false
	}
	return o.RollbackNeeded, true
}

// HasRollbackNeeded returns a boolean if a field has been set.
func (o *ApplianceUpgrade) HasRollbackNeeded() bool {
	if o != nil && !IsNil(o.RollbackNeeded) {
		return true
	}

	return false
}

// SetRollbackNeeded gets a reference to the given bool and assigns it to the RollbackNeeded field.
func (o *ApplianceUpgrade) SetRollbackNeeded(v bool) {
	o.RollbackNeeded = &v
}

// GetRollbackPhases returns the RollbackPhases field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ApplianceUpgrade) GetRollbackPhases() []OnpremUpgradePhase {
	if o == nil {
		var ret []OnpremUpgradePhase
		return ret
	}
	return o.RollbackPhases
}

// GetRollbackPhasesOk returns a tuple with the RollbackPhases field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ApplianceUpgrade) GetRollbackPhasesOk() ([]OnpremUpgradePhase, bool) {
	if o == nil || IsNil(o.RollbackPhases) {
		return nil, false
	}
	return o.RollbackPhases, true
}

// HasRollbackPhases returns a boolean if a field has been set.
func (o *ApplianceUpgrade) HasRollbackPhases() bool {
	if o != nil && !IsNil(o.RollbackPhases) {
		return true
	}

	return false
}

// SetRollbackPhases gets a reference to the given []OnpremUpgradePhase and assigns it to the RollbackPhases field.
func (o *ApplianceUpgrade) SetRollbackPhases(v []OnpremUpgradePhase) {
	o.RollbackPhases = v
}

// GetRollbackStatus returns the RollbackStatus field value if set, zero value otherwise.
func (o *ApplianceUpgrade) GetRollbackStatus() string {
	if o == nil || IsNil(o.RollbackStatus) {
		var ret string
		return ret
	}
	return *o.RollbackStatus
}

// GetRollbackStatusOk returns a tuple with the RollbackStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplianceUpgrade) GetRollbackStatusOk() (*string, bool) {
	if o == nil || IsNil(o.RollbackStatus) {
		return nil, false
	}
	return o.RollbackStatus, true
}

// HasRollbackStatus returns a boolean if a field has been set.
func (o *ApplianceUpgrade) HasRollbackStatus() bool {
	if o != nil && !IsNil(o.RollbackStatus) {
		return true
	}

	return false
}

// SetRollbackStatus gets a reference to the given string and assigns it to the RollbackStatus field.
func (o *ApplianceUpgrade) SetRollbackStatus(v string) {
	o.RollbackStatus = &v
}

// GetServices returns the Services field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ApplianceUpgrade) GetServices() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.Services
}

// GetServicesOk returns a tuple with the Services field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ApplianceUpgrade) GetServicesOk() ([]string, bool) {
	if o == nil || IsNil(o.Services) {
		return nil, false
	}
	return o.Services, true
}

// HasServices returns a boolean if a field has been set.
func (o *ApplianceUpgrade) HasServices() bool {
	if o != nil && !IsNil(o.Services) {
		return true
	}

	return false
}

// SetServices gets a reference to the given []string and assigns it to the Services field.
func (o *ApplianceUpgrade) SetServices(v []string) {
	o.Services = v
}

// GetStartTime returns the StartTime field value if set, zero value otherwise.
func (o *ApplianceUpgrade) GetStartTime() time.Time {
	if o == nil || IsNil(o.StartTime) {
		var ret time.Time
		return ret
	}
	return *o.StartTime
}

// GetStartTimeOk returns a tuple with the StartTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplianceUpgrade) GetStartTimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.StartTime) {
		return nil, false
	}
	return o.StartTime, true
}

// HasStartTime returns a boolean if a field has been set.
func (o *ApplianceUpgrade) HasStartTime() bool {
	if o != nil && !IsNil(o.StartTime) {
		return true
	}

	return false
}

// SetStartTime gets a reference to the given time.Time and assigns it to the StartTime field.
func (o *ApplianceUpgrade) SetStartTime(v time.Time) {
	o.StartTime = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *ApplianceUpgrade) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplianceUpgrade) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *ApplianceUpgrade) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *ApplianceUpgrade) SetStatus(v string) {
	o.Status = &v
}

// GetTotalNodes returns the TotalNodes field value if set, zero value otherwise.
func (o *ApplianceUpgrade) GetTotalNodes() int64 {
	if o == nil || IsNil(o.TotalNodes) {
		var ret int64
		return ret
	}
	return *o.TotalNodes
}

// GetTotalNodesOk returns a tuple with the TotalNodes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplianceUpgrade) GetTotalNodesOk() (*int64, bool) {
	if o == nil || IsNil(o.TotalNodes) {
		return nil, false
	}
	return o.TotalNodes, true
}

// HasTotalNodes returns a boolean if a field has been set.
func (o *ApplianceUpgrade) HasTotalNodes() bool {
	if o != nil && !IsNil(o.TotalNodes) {
		return true
	}

	return false
}

// SetTotalNodes gets a reference to the given int64 and assigns it to the TotalNodes field.
func (o *ApplianceUpgrade) SetTotalNodes(v int64) {
	o.TotalNodes = &v
}

// GetTotalPhases returns the TotalPhases field value if set, zero value otherwise.
func (o *ApplianceUpgrade) GetTotalPhases() int64 {
	if o == nil || IsNil(o.TotalPhases) {
		var ret int64
		return ret
	}
	return *o.TotalPhases
}

// GetTotalPhasesOk returns a tuple with the TotalPhases field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplianceUpgrade) GetTotalPhasesOk() (*int64, bool) {
	if o == nil || IsNil(o.TotalPhases) {
		return nil, false
	}
	return o.TotalPhases, true
}

// HasTotalPhases returns a boolean if a field has been set.
func (o *ApplianceUpgrade) HasTotalPhases() bool {
	if o != nil && !IsNil(o.TotalPhases) {
		return true
	}

	return false
}

// SetTotalPhases gets a reference to the given int64 and assigns it to the TotalPhases field.
func (o *ApplianceUpgrade) SetTotalPhases(v int64) {
	o.TotalPhases = &v
}

// GetUiPackages returns the UiPackages field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ApplianceUpgrade) GetUiPackages() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.UiPackages
}

// GetUiPackagesOk returns a tuple with the UiPackages field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ApplianceUpgrade) GetUiPackagesOk() ([]string, bool) {
	if o == nil || IsNil(o.UiPackages) {
		return nil, false
	}
	return o.UiPackages, true
}

// HasUiPackages returns a boolean if a field has been set.
func (o *ApplianceUpgrade) HasUiPackages() bool {
	if o != nil && !IsNil(o.UiPackages) {
		return true
	}

	return false
}

// SetUiPackages gets a reference to the given []string and assigns it to the UiPackages field.
func (o *ApplianceUpgrade) SetUiPackages(v []string) {
	o.UiPackages = v
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *ApplianceUpgrade) GetVersion() string {
	if o == nil || IsNil(o.Version) {
		var ret string
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplianceUpgrade) GetVersionOk() (*string, bool) {
	if o == nil || IsNil(o.Version) {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *ApplianceUpgrade) HasVersion() bool {
	if o != nil && !IsNil(o.Version) {
		return true
	}

	return false
}

// SetVersion gets a reference to the given string and assigns it to the Version field.
func (o *ApplianceUpgrade) SetVersion(v string) {
	o.Version = &v
}

// GetAccount returns the Account field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ApplianceUpgrade) GetAccount() IamAccountRelationship {
	if o == nil || IsNil(o.Account.Get()) {
		var ret IamAccountRelationship
		return ret
	}
	return *o.Account.Get()
}

// GetAccountOk returns a tuple with the Account field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ApplianceUpgrade) GetAccountOk() (*IamAccountRelationship, bool) {
	if o == nil {
		return nil, false
	}
	return o.Account.Get(), o.Account.IsSet()
}

// HasAccount returns a boolean if a field has been set.
func (o *ApplianceUpgrade) HasAccount() bool {
	if o != nil && o.Account.IsSet() {
		return true
	}

	return false
}

// SetAccount gets a reference to the given NullableIamAccountRelationship and assigns it to the Account field.
func (o *ApplianceUpgrade) SetAccount(v IamAccountRelationship) {
	o.Account.Set(&v)
}

// SetAccountNil sets the value for Account to be an explicit nil
func (o *ApplianceUpgrade) SetAccountNil() {
	o.Account.Set(nil)
}

// UnsetAccount ensures that no value is present for Account, not even an explicit nil
func (o *ApplianceUpgrade) UnsetAccount() {
	o.Account.Unset()
}

// GetImageBundle returns the ImageBundle field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ApplianceUpgrade) GetImageBundle() ApplianceImageBundleRelationship {
	if o == nil || IsNil(o.ImageBundle.Get()) {
		var ret ApplianceImageBundleRelationship
		return ret
	}
	return *o.ImageBundle.Get()
}

// GetImageBundleOk returns a tuple with the ImageBundle field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ApplianceUpgrade) GetImageBundleOk() (*ApplianceImageBundleRelationship, bool) {
	if o == nil {
		return nil, false
	}
	return o.ImageBundle.Get(), o.ImageBundle.IsSet()
}

// HasImageBundle returns a boolean if a field has been set.
func (o *ApplianceUpgrade) HasImageBundle() bool {
	if o != nil && o.ImageBundle.IsSet() {
		return true
	}

	return false
}

// SetImageBundle gets a reference to the given NullableApplianceImageBundleRelationship and assigns it to the ImageBundle field.
func (o *ApplianceUpgrade) SetImageBundle(v ApplianceImageBundleRelationship) {
	o.ImageBundle.Set(&v)
}

// SetImageBundleNil sets the value for ImageBundle to be an explicit nil
func (o *ApplianceUpgrade) SetImageBundleNil() {
	o.ImageBundle.Set(nil)
}

// UnsetImageBundle ensures that no value is present for ImageBundle, not even an explicit nil
func (o *ApplianceUpgrade) UnsetImageBundle() {
	o.ImageBundle.Unset()
}

// GetRequires returns the Requires field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ApplianceUpgrade) GetRequires() ApplianceUpgradeRelationship {
	if o == nil || IsNil(o.Requires.Get()) {
		var ret ApplianceUpgradeRelationship
		return ret
	}
	return *o.Requires.Get()
}

// GetRequiresOk returns a tuple with the Requires field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ApplianceUpgrade) GetRequiresOk() (*ApplianceUpgradeRelationship, bool) {
	if o == nil {
		return nil, false
	}
	return o.Requires.Get(), o.Requires.IsSet()
}

// HasRequires returns a boolean if a field has been set.
func (o *ApplianceUpgrade) HasRequires() bool {
	if o != nil && o.Requires.IsSet() {
		return true
	}

	return false
}

// SetRequires gets a reference to the given NullableApplianceUpgradeRelationship and assigns it to the Requires field.
func (o *ApplianceUpgrade) SetRequires(v ApplianceUpgradeRelationship) {
	o.Requires.Set(&v)
}

// SetRequiresNil sets the value for Requires to be an explicit nil
func (o *ApplianceUpgrade) SetRequiresNil() {
	o.Requires.Set(nil)
}

// UnsetRequires ensures that no value is present for Requires, not even an explicit nil
func (o *ApplianceUpgrade) UnsetRequires() {
	o.Requires.Unset()
}

func (o ApplianceUpgrade) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ApplianceUpgrade) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	serializedMoBaseMo, errMoBaseMo := json.Marshal(o.MoBaseMo)
	if errMoBaseMo != nil {
		return map[string]interface{}{}, errMoBaseMo
	}
	errMoBaseMo = json.Unmarshal([]byte(serializedMoBaseMo), &toSerialize)
	if errMoBaseMo != nil {
		return map[string]interface{}{}, errMoBaseMo
	}
	if _, exists := toSerialize["ClassId"]; !exists {
		toSerialize["ClassId"] = o.GetDefaultClassId()
	}
	toSerialize["ClassId"] = o.ClassId
	if _, exists := toSerialize["ObjectType"]; !exists {
		toSerialize["ObjectType"] = o.GetDefaultObjectType()
	}
	toSerialize["ObjectType"] = o.ObjectType
	if !IsNil(o.Active) {
		toSerialize["Active"] = o.Active
	}
	if !IsNil(o.AllNodesPingable) {
		toSerialize["AllNodesPingable"] = o.AllNodesPingable
	}
	if !IsNil(o.AutoCreated) {
		toSerialize["AutoCreated"] = o.AutoCreated
	}
	if o.CompletedPhases != nil {
		toSerialize["CompletedPhases"] = o.CompletedPhases
	}
	if o.CurrentPhase.IsSet() {
		toSerialize["CurrentPhase"] = o.CurrentPhase.Get()
	}
	if !IsNil(o.Description) {
		toSerialize["Description"] = o.Description
	}
	if !IsNil(o.ElapsedTime) {
		toSerialize["ElapsedTime"] = o.ElapsedTime
	}
	if !IsNil(o.EndTime) {
		toSerialize["EndTime"] = o.EndTime
	}
	if !IsNil(o.ErrorCode) {
		toSerialize["ErrorCode"] = o.ErrorCode
	}
	if !IsNil(o.Fingerprint) {
		toSerialize["Fingerprint"] = o.Fingerprint
	}
	if !IsNil(o.IsRollingBack) {
		toSerialize["IsRollingBack"] = o.IsRollingBack
	}
	if !IsNil(o.IsUserTriggered) {
		toSerialize["IsUserTriggered"] = o.IsUserTriggered
	}
	if o.Messages != nil {
		toSerialize["Messages"] = o.Messages
	}
	if o.NodeInfo != nil {
		toSerialize["NodeInfo"] = o.NodeInfo
	}
	if !IsNil(o.RollbackNeeded) {
		toSerialize["RollbackNeeded"] = o.RollbackNeeded
	}
	if o.RollbackPhases != nil {
		toSerialize["RollbackPhases"] = o.RollbackPhases
	}
	if !IsNil(o.RollbackStatus) {
		toSerialize["RollbackStatus"] = o.RollbackStatus
	}
	if o.Services != nil {
		toSerialize["Services"] = o.Services
	}
	if !IsNil(o.StartTime) {
		toSerialize["StartTime"] = o.StartTime
	}
	if !IsNil(o.Status) {
		toSerialize["Status"] = o.Status
	}
	if !IsNil(o.TotalNodes) {
		toSerialize["TotalNodes"] = o.TotalNodes
	}
	if !IsNil(o.TotalPhases) {
		toSerialize["TotalPhases"] = o.TotalPhases
	}
	if o.UiPackages != nil {
		toSerialize["UiPackages"] = o.UiPackages
	}
	if !IsNil(o.Version) {
		toSerialize["Version"] = o.Version
	}
	if o.Account.IsSet() {
		toSerialize["Account"] = o.Account.Get()
	}
	if o.ImageBundle.IsSet() {
		toSerialize["ImageBundle"] = o.ImageBundle.Get()
	}
	if o.Requires.IsSet() {
		toSerialize["Requires"] = o.Requires.Get()
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ApplianceUpgrade) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"ClassId",
		"ObjectType",
	}

	// defaultValueFuncMap captures the default values for required properties.
	// These values are used when required properties are missing from the payload.
	defaultValueFuncMap := map[string]func() interface{}{
		"ClassId":    o.GetDefaultClassId,
		"ObjectType": o.GetDefaultObjectType,
	}
	var defaultValueApplied bool
	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			if _, ok := defaultValueFuncMap[requiredProperty]; ok {
				allProperties[requiredProperty] = defaultValueFuncMap[requiredProperty]()
				defaultValueApplied = true
			}
		}
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	if defaultValueApplied {
		data, err = json.Marshal(allProperties)
		if err != nil {
			return err
		}
	}
	type ApplianceUpgradeWithoutEmbeddedStruct struct {
		// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.
		ClassId string `json:"ClassId"`
		// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
		ObjectType string `json:"ObjectType"`
		// Indicates if the software upgrade is active or not.
		Active *bool `json:"Active,omitempty"`
		// True if all nodes in cluster are pingable, otherwise false.
		AllNodesPingable *bool `json:"AllNodesPingable,omitempty"`
		// Indicates that the request was automatically created by the system.
		AutoCreated     *bool                      `json:"AutoCreated,omitempty"`
		CompletedPhases []OnpremUpgradePhase       `json:"CompletedPhases,omitempty"`
		CurrentPhase    NullableOnpremUpgradePhase `json:"CurrentPhase,omitempty"`
		// Description of the software upgrade.
		Description *string `json:"Description,omitempty"`
		// Elapsed time in seconds during the software upgrade.
		ElapsedTime *int64 `json:"ElapsedTime,omitempty"`
		// End date of the software upgrade.
		EndTime *time.Time `json:"EndTime,omitempty"`
		// Error code for Intersight Appliance's software upgrade. In case of failure - this code will help decide if software upgrade can be retried.
		ErrorCode *int64 `json:"ErrorCode,omitempty"`
		// Software upgrade manifest's fingerprint.
		Fingerprint *string `json:"Fingerprint,omitempty"`
		// Track if software upgrade is upgrading or rolling back.
		IsRollingBack *bool `json:"IsRollingBack,omitempty"`
		// Indicates if the upgrade is triggered by user or due to schedule.
		IsUserTriggered *bool                 `json:"IsUserTriggered,omitempty"`
		Messages        []string              `json:"Messages,omitempty"`
		NodeInfo        []ApplianceNodeIpInfo `json:"NodeInfo,omitempty"`
		// Track if rollback is needed.
		RollbackNeeded *bool                `json:"RollbackNeeded,omitempty"`
		RollbackPhases []OnpremUpgradePhase `json:"RollbackPhases,omitempty"`
		// Status of the Intersight Appliance's software rollback status.
		RollbackStatus *string  `json:"RollbackStatus,omitempty"`
		Services       []string `json:"Services,omitempty"`
		// Start date of the software upgrade. UI can modify startTime to re-schedule an upgrade.
		StartTime *time.Time `json:"StartTime,omitempty"`
		// Status of the Intersight Appliance's software upgrade.
		Status *string `json:"Status,omitempty"`
		// Total number of nodes this upgrade will run on.
		TotalNodes *int64 `json:"TotalNodes,omitempty"`
		// TotalPhase represents the total number of the upgradePhases for one upgrade.
		TotalPhases *int64   `json:"TotalPhases,omitempty"`
		UiPackages  []string `json:"UiPackages,omitempty"`
		// Software upgrade manifest's version.
		Version     *string                                  `json:"Version,omitempty"`
		Account     NullableIamAccountRelationship           `json:"Account,omitempty"`
		ImageBundle NullableApplianceImageBundleRelationship `json:"ImageBundle,omitempty"`
		Requires    NullableApplianceUpgradeRelationship     `json:"Requires,omitempty"`
	}

	varApplianceUpgradeWithoutEmbeddedStruct := ApplianceUpgradeWithoutEmbeddedStruct{}

	err = json.Unmarshal(data, &varApplianceUpgradeWithoutEmbeddedStruct)
	if err == nil {
		varApplianceUpgrade := _ApplianceUpgrade{}
		varApplianceUpgrade.ClassId = varApplianceUpgradeWithoutEmbeddedStruct.ClassId
		varApplianceUpgrade.ObjectType = varApplianceUpgradeWithoutEmbeddedStruct.ObjectType
		varApplianceUpgrade.Active = varApplianceUpgradeWithoutEmbeddedStruct.Active
		varApplianceUpgrade.AllNodesPingable = varApplianceUpgradeWithoutEmbeddedStruct.AllNodesPingable
		varApplianceUpgrade.AutoCreated = varApplianceUpgradeWithoutEmbeddedStruct.AutoCreated
		varApplianceUpgrade.CompletedPhases = varApplianceUpgradeWithoutEmbeddedStruct.CompletedPhases
		varApplianceUpgrade.CurrentPhase = varApplianceUpgradeWithoutEmbeddedStruct.CurrentPhase
		varApplianceUpgrade.Description = varApplianceUpgradeWithoutEmbeddedStruct.Description
		varApplianceUpgrade.ElapsedTime = varApplianceUpgradeWithoutEmbeddedStruct.ElapsedTime
		varApplianceUpgrade.EndTime = varApplianceUpgradeWithoutEmbeddedStruct.EndTime
		varApplianceUpgrade.ErrorCode = varApplianceUpgradeWithoutEmbeddedStruct.ErrorCode
		varApplianceUpgrade.Fingerprint = varApplianceUpgradeWithoutEmbeddedStruct.Fingerprint
		varApplianceUpgrade.IsRollingBack = varApplianceUpgradeWithoutEmbeddedStruct.IsRollingBack
		varApplianceUpgrade.IsUserTriggered = varApplianceUpgradeWithoutEmbeddedStruct.IsUserTriggered
		varApplianceUpgrade.Messages = varApplianceUpgradeWithoutEmbeddedStruct.Messages
		varApplianceUpgrade.NodeInfo = varApplianceUpgradeWithoutEmbeddedStruct.NodeInfo
		varApplianceUpgrade.RollbackNeeded = varApplianceUpgradeWithoutEmbeddedStruct.RollbackNeeded
		varApplianceUpgrade.RollbackPhases = varApplianceUpgradeWithoutEmbeddedStruct.RollbackPhases
		varApplianceUpgrade.RollbackStatus = varApplianceUpgradeWithoutEmbeddedStruct.RollbackStatus
		varApplianceUpgrade.Services = varApplianceUpgradeWithoutEmbeddedStruct.Services
		varApplianceUpgrade.StartTime = varApplianceUpgradeWithoutEmbeddedStruct.StartTime
		varApplianceUpgrade.Status = varApplianceUpgradeWithoutEmbeddedStruct.Status
		varApplianceUpgrade.TotalNodes = varApplianceUpgradeWithoutEmbeddedStruct.TotalNodes
		varApplianceUpgrade.TotalPhases = varApplianceUpgradeWithoutEmbeddedStruct.TotalPhases
		varApplianceUpgrade.UiPackages = varApplianceUpgradeWithoutEmbeddedStruct.UiPackages
		varApplianceUpgrade.Version = varApplianceUpgradeWithoutEmbeddedStruct.Version
		varApplianceUpgrade.Account = varApplianceUpgradeWithoutEmbeddedStruct.Account
		varApplianceUpgrade.ImageBundle = varApplianceUpgradeWithoutEmbeddedStruct.ImageBundle
		varApplianceUpgrade.Requires = varApplianceUpgradeWithoutEmbeddedStruct.Requires
		*o = ApplianceUpgrade(varApplianceUpgrade)
	} else {
		return err
	}

	varApplianceUpgrade := _ApplianceUpgrade{}

	err = json.Unmarshal(data, &varApplianceUpgrade)
	if err == nil {
		o.MoBaseMo = varApplianceUpgrade.MoBaseMo
	} else {
		return err
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "ClassId")
		delete(additionalProperties, "ObjectType")
		delete(additionalProperties, "Active")
		delete(additionalProperties, "AllNodesPingable")
		delete(additionalProperties, "AutoCreated")
		delete(additionalProperties, "CompletedPhases")
		delete(additionalProperties, "CurrentPhase")
		delete(additionalProperties, "Description")
		delete(additionalProperties, "ElapsedTime")
		delete(additionalProperties, "EndTime")
		delete(additionalProperties, "ErrorCode")
		delete(additionalProperties, "Fingerprint")
		delete(additionalProperties, "IsRollingBack")
		delete(additionalProperties, "IsUserTriggered")
		delete(additionalProperties, "Messages")
		delete(additionalProperties, "NodeInfo")
		delete(additionalProperties, "RollbackNeeded")
		delete(additionalProperties, "RollbackPhases")
		delete(additionalProperties, "RollbackStatus")
		delete(additionalProperties, "Services")
		delete(additionalProperties, "StartTime")
		delete(additionalProperties, "Status")
		delete(additionalProperties, "TotalNodes")
		delete(additionalProperties, "TotalPhases")
		delete(additionalProperties, "UiPackages")
		delete(additionalProperties, "Version")
		delete(additionalProperties, "Account")
		delete(additionalProperties, "ImageBundle")
		delete(additionalProperties, "Requires")

		// remove fields from embedded structs
		reflectMoBaseMo := reflect.ValueOf(o.MoBaseMo)
		for i := 0; i < reflectMoBaseMo.Type().NumField(); i++ {
			t := reflectMoBaseMo.Type().Field(i)

			if jsonTag := t.Tag.Get("json"); jsonTag != "" {
				fieldName := ""
				if commaIdx := strings.Index(jsonTag, ","); commaIdx > 0 {
					fieldName = jsonTag[:commaIdx]
				} else {
					fieldName = jsonTag
				}
				if fieldName != "AdditionalProperties" {
					delete(additionalProperties, fieldName)
				}
			}
		}

		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableApplianceUpgrade struct {
	value *ApplianceUpgrade
	isSet bool
}

func (v NullableApplianceUpgrade) Get() *ApplianceUpgrade {
	return v.value
}

func (v *NullableApplianceUpgrade) Set(val *ApplianceUpgrade) {
	v.value = val
	v.isSet = true
}

func (v NullableApplianceUpgrade) IsSet() bool {
	return v.isSet
}

func (v *NullableApplianceUpgrade) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApplianceUpgrade(val *ApplianceUpgrade) *NullableApplianceUpgrade {
	return &NullableApplianceUpgrade{value: val, isSet: true}
}

func (v NullableApplianceUpgrade) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApplianceUpgrade) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
