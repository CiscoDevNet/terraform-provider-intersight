/*
Cisco Intersight

Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations. The Intersight OpenAPI document defines the complete set of properties that are returned in the HTTP response. From that perspective, a client can expect that no additional properties are returned, unless these properties are explicitly defined in the OpenAPI document. However, when a client uses an older version of the Intersight OpenAPI document, the server may send additional properties because the software is more recent than the client. In that case, the client may receive properties that it does not know about. Some generated SDKs perform a strict validation of the HTTP response body against the OpenAPI document.

API version: 1.0.11-2025062323
Contact: intersight@cisco.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package intersight

import (
	"encoding/json"
	"fmt"
	"reflect"
	"strings"
)

// checks if the HciAhvGuestTools type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &HciAhvGuestTools{}

// HciAhvGuestTools The details of the Nutanix Guest Tools.
type HciAhvGuestTools struct {
	MoBaseComplexType
	// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.
	ClassId string `json:"ClassId"`
	// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
	ObjectType string `json:"ObjectType"`
	// The available version of the Nutanix Guest Tools.
	AvailableVersion *string  `json:"AvailableVersion,omitempty"`
	Capabilities     []string `json:"Capabilities,omitempty"`
	// The guest OS version of the Nutanix Guest Tools.
	GuestOsVersion *string `json:"GuestOsVersion,omitempty"`
	// Indicates if the Nutanix Guest Tools is enabled.
	IsEnabled *bool `json:"IsEnabled,omitempty"`
	// Indicates if the Nutanix Guest Tools is installed.
	IsInstalled *bool `json:"IsInstalled,omitempty"`
	// Indicates if the Nutanix Guest Tools ISO is inserted.
	IsIsoInserted *bool `json:"IsIsoInserted,omitempty"`
	// Indicates if the Nutanix Guest Tools is reachable.
	IsReachable *bool `json:"IsReachable,omitempty"`
	// Indicates if the Nutanix Guest Tools VM mobility driver is installed.
	IsVmMobilityDriverInstalled *bool `json:"IsVmMobilityDriverInstalled,omitempty"`
	// Indicates if the Nutanix Guest Tools is VSS snapshot capable.
	IsVssSnapshotCapable *bool `json:"IsVssSnapshotCapable,omitempty"`
	// The version of the Nutanix Guest Tools.
	Version              *string `json:"Version,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _HciAhvGuestTools HciAhvGuestTools

// NewHciAhvGuestTools instantiates a new HciAhvGuestTools object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHciAhvGuestTools(classId string, objectType string) *HciAhvGuestTools {
	this := HciAhvGuestTools{}
	this.ClassId = classId
	this.ObjectType = objectType
	return &this
}

// NewHciAhvGuestToolsWithDefaults instantiates a new HciAhvGuestTools object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHciAhvGuestToolsWithDefaults() *HciAhvGuestTools {
	this := HciAhvGuestTools{}
	var classId string = "hci.AhvGuestTools"
	this.ClassId = classId
	var objectType string = "hci.AhvGuestTools"
	this.ObjectType = objectType
	return &this
}

// GetClassId returns the ClassId field value
func (o *HciAhvGuestTools) GetClassId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ClassId
}

// GetClassIdOk returns a tuple with the ClassId field value
// and a boolean to check if the value has been set.
func (o *HciAhvGuestTools) GetClassIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ClassId, true
}

// SetClassId sets field value
func (o *HciAhvGuestTools) SetClassId(v string) {
	o.ClassId = v
}

// GetDefaultClassId returns the default value "hci.AhvGuestTools" of the ClassId field.
func (o *HciAhvGuestTools) GetDefaultClassId() interface{} {
	return "hci.AhvGuestTools"
}

// GetObjectType returns the ObjectType field value
func (o *HciAhvGuestTools) GetObjectType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ObjectType
}

// GetObjectTypeOk returns a tuple with the ObjectType field value
// and a boolean to check if the value has been set.
func (o *HciAhvGuestTools) GetObjectTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ObjectType, true
}

// SetObjectType sets field value
func (o *HciAhvGuestTools) SetObjectType(v string) {
	o.ObjectType = v
}

// GetDefaultObjectType returns the default value "hci.AhvGuestTools" of the ObjectType field.
func (o *HciAhvGuestTools) GetDefaultObjectType() interface{} {
	return "hci.AhvGuestTools"
}

// GetAvailableVersion returns the AvailableVersion field value if set, zero value otherwise.
func (o *HciAhvGuestTools) GetAvailableVersion() string {
	if o == nil || IsNil(o.AvailableVersion) {
		var ret string
		return ret
	}
	return *o.AvailableVersion
}

// GetAvailableVersionOk returns a tuple with the AvailableVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HciAhvGuestTools) GetAvailableVersionOk() (*string, bool) {
	if o == nil || IsNil(o.AvailableVersion) {
		return nil, false
	}
	return o.AvailableVersion, true
}

// HasAvailableVersion returns a boolean if a field has been set.
func (o *HciAhvGuestTools) HasAvailableVersion() bool {
	if o != nil && !IsNil(o.AvailableVersion) {
		return true
	}

	return false
}

// SetAvailableVersion gets a reference to the given string and assigns it to the AvailableVersion field.
func (o *HciAhvGuestTools) SetAvailableVersion(v string) {
	o.AvailableVersion = &v
}

// GetCapabilities returns the Capabilities field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HciAhvGuestTools) GetCapabilities() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.Capabilities
}

// GetCapabilitiesOk returns a tuple with the Capabilities field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HciAhvGuestTools) GetCapabilitiesOk() ([]string, bool) {
	if o == nil || IsNil(o.Capabilities) {
		return nil, false
	}
	return o.Capabilities, true
}

// HasCapabilities returns a boolean if a field has been set.
func (o *HciAhvGuestTools) HasCapabilities() bool {
	if o != nil && !IsNil(o.Capabilities) {
		return true
	}

	return false
}

// SetCapabilities gets a reference to the given []string and assigns it to the Capabilities field.
func (o *HciAhvGuestTools) SetCapabilities(v []string) {
	o.Capabilities = v
}

// GetGuestOsVersion returns the GuestOsVersion field value if set, zero value otherwise.
func (o *HciAhvGuestTools) GetGuestOsVersion() string {
	if o == nil || IsNil(o.GuestOsVersion) {
		var ret string
		return ret
	}
	return *o.GuestOsVersion
}

// GetGuestOsVersionOk returns a tuple with the GuestOsVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HciAhvGuestTools) GetGuestOsVersionOk() (*string, bool) {
	if o == nil || IsNil(o.GuestOsVersion) {
		return nil, false
	}
	return o.GuestOsVersion, true
}

// HasGuestOsVersion returns a boolean if a field has been set.
func (o *HciAhvGuestTools) HasGuestOsVersion() bool {
	if o != nil && !IsNil(o.GuestOsVersion) {
		return true
	}

	return false
}

// SetGuestOsVersion gets a reference to the given string and assigns it to the GuestOsVersion field.
func (o *HciAhvGuestTools) SetGuestOsVersion(v string) {
	o.GuestOsVersion = &v
}

// GetIsEnabled returns the IsEnabled field value if set, zero value otherwise.
func (o *HciAhvGuestTools) GetIsEnabled() bool {
	if o == nil || IsNil(o.IsEnabled) {
		var ret bool
		return ret
	}
	return *o.IsEnabled
}

// GetIsEnabledOk returns a tuple with the IsEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HciAhvGuestTools) GetIsEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.IsEnabled) {
		return nil, false
	}
	return o.IsEnabled, true
}

// HasIsEnabled returns a boolean if a field has been set.
func (o *HciAhvGuestTools) HasIsEnabled() bool {
	if o != nil && !IsNil(o.IsEnabled) {
		return true
	}

	return false
}

// SetIsEnabled gets a reference to the given bool and assigns it to the IsEnabled field.
func (o *HciAhvGuestTools) SetIsEnabled(v bool) {
	o.IsEnabled = &v
}

// GetIsInstalled returns the IsInstalled field value if set, zero value otherwise.
func (o *HciAhvGuestTools) GetIsInstalled() bool {
	if o == nil || IsNil(o.IsInstalled) {
		var ret bool
		return ret
	}
	return *o.IsInstalled
}

// GetIsInstalledOk returns a tuple with the IsInstalled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HciAhvGuestTools) GetIsInstalledOk() (*bool, bool) {
	if o == nil || IsNil(o.IsInstalled) {
		return nil, false
	}
	return o.IsInstalled, true
}

// HasIsInstalled returns a boolean if a field has been set.
func (o *HciAhvGuestTools) HasIsInstalled() bool {
	if o != nil && !IsNil(o.IsInstalled) {
		return true
	}

	return false
}

// SetIsInstalled gets a reference to the given bool and assigns it to the IsInstalled field.
func (o *HciAhvGuestTools) SetIsInstalled(v bool) {
	o.IsInstalled = &v
}

// GetIsIsoInserted returns the IsIsoInserted field value if set, zero value otherwise.
func (o *HciAhvGuestTools) GetIsIsoInserted() bool {
	if o == nil || IsNil(o.IsIsoInserted) {
		var ret bool
		return ret
	}
	return *o.IsIsoInserted
}

// GetIsIsoInsertedOk returns a tuple with the IsIsoInserted field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HciAhvGuestTools) GetIsIsoInsertedOk() (*bool, bool) {
	if o == nil || IsNil(o.IsIsoInserted) {
		return nil, false
	}
	return o.IsIsoInserted, true
}

// HasIsIsoInserted returns a boolean if a field has been set.
func (o *HciAhvGuestTools) HasIsIsoInserted() bool {
	if o != nil && !IsNil(o.IsIsoInserted) {
		return true
	}

	return false
}

// SetIsIsoInserted gets a reference to the given bool and assigns it to the IsIsoInserted field.
func (o *HciAhvGuestTools) SetIsIsoInserted(v bool) {
	o.IsIsoInserted = &v
}

// GetIsReachable returns the IsReachable field value if set, zero value otherwise.
func (o *HciAhvGuestTools) GetIsReachable() bool {
	if o == nil || IsNil(o.IsReachable) {
		var ret bool
		return ret
	}
	return *o.IsReachable
}

// GetIsReachableOk returns a tuple with the IsReachable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HciAhvGuestTools) GetIsReachableOk() (*bool, bool) {
	if o == nil || IsNil(o.IsReachable) {
		return nil, false
	}
	return o.IsReachable, true
}

// HasIsReachable returns a boolean if a field has been set.
func (o *HciAhvGuestTools) HasIsReachable() bool {
	if o != nil && !IsNil(o.IsReachable) {
		return true
	}

	return false
}

// SetIsReachable gets a reference to the given bool and assigns it to the IsReachable field.
func (o *HciAhvGuestTools) SetIsReachable(v bool) {
	o.IsReachable = &v
}

// GetIsVmMobilityDriverInstalled returns the IsVmMobilityDriverInstalled field value if set, zero value otherwise.
func (o *HciAhvGuestTools) GetIsVmMobilityDriverInstalled() bool {
	if o == nil || IsNil(o.IsVmMobilityDriverInstalled) {
		var ret bool
		return ret
	}
	return *o.IsVmMobilityDriverInstalled
}

// GetIsVmMobilityDriverInstalledOk returns a tuple with the IsVmMobilityDriverInstalled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HciAhvGuestTools) GetIsVmMobilityDriverInstalledOk() (*bool, bool) {
	if o == nil || IsNil(o.IsVmMobilityDriverInstalled) {
		return nil, false
	}
	return o.IsVmMobilityDriverInstalled, true
}

// HasIsVmMobilityDriverInstalled returns a boolean if a field has been set.
func (o *HciAhvGuestTools) HasIsVmMobilityDriverInstalled() bool {
	if o != nil && !IsNil(o.IsVmMobilityDriverInstalled) {
		return true
	}

	return false
}

// SetIsVmMobilityDriverInstalled gets a reference to the given bool and assigns it to the IsVmMobilityDriverInstalled field.
func (o *HciAhvGuestTools) SetIsVmMobilityDriverInstalled(v bool) {
	o.IsVmMobilityDriverInstalled = &v
}

// GetIsVssSnapshotCapable returns the IsVssSnapshotCapable field value if set, zero value otherwise.
func (o *HciAhvGuestTools) GetIsVssSnapshotCapable() bool {
	if o == nil || IsNil(o.IsVssSnapshotCapable) {
		var ret bool
		return ret
	}
	return *o.IsVssSnapshotCapable
}

// GetIsVssSnapshotCapableOk returns a tuple with the IsVssSnapshotCapable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HciAhvGuestTools) GetIsVssSnapshotCapableOk() (*bool, bool) {
	if o == nil || IsNil(o.IsVssSnapshotCapable) {
		return nil, false
	}
	return o.IsVssSnapshotCapable, true
}

// HasIsVssSnapshotCapable returns a boolean if a field has been set.
func (o *HciAhvGuestTools) HasIsVssSnapshotCapable() bool {
	if o != nil && !IsNil(o.IsVssSnapshotCapable) {
		return true
	}

	return false
}

// SetIsVssSnapshotCapable gets a reference to the given bool and assigns it to the IsVssSnapshotCapable field.
func (o *HciAhvGuestTools) SetIsVssSnapshotCapable(v bool) {
	o.IsVssSnapshotCapable = &v
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *HciAhvGuestTools) GetVersion() string {
	if o == nil || IsNil(o.Version) {
		var ret string
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HciAhvGuestTools) GetVersionOk() (*string, bool) {
	if o == nil || IsNil(o.Version) {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *HciAhvGuestTools) HasVersion() bool {
	if o != nil && !IsNil(o.Version) {
		return true
	}

	return false
}

// SetVersion gets a reference to the given string and assigns it to the Version field.
func (o *HciAhvGuestTools) SetVersion(v string) {
	o.Version = &v
}

func (o HciAhvGuestTools) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o HciAhvGuestTools) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	serializedMoBaseComplexType, errMoBaseComplexType := json.Marshal(o.MoBaseComplexType)
	if errMoBaseComplexType != nil {
		return map[string]interface{}{}, errMoBaseComplexType
	}
	errMoBaseComplexType = json.Unmarshal([]byte(serializedMoBaseComplexType), &toSerialize)
	if errMoBaseComplexType != nil {
		return map[string]interface{}{}, errMoBaseComplexType
	}
	if _, exists := toSerialize["ClassId"]; !exists {
		toSerialize["ClassId"] = o.GetDefaultClassId()
	}
	toSerialize["ClassId"] = o.ClassId
	if _, exists := toSerialize["ObjectType"]; !exists {
		toSerialize["ObjectType"] = o.GetDefaultObjectType()
	}
	toSerialize["ObjectType"] = o.ObjectType
	if !IsNil(o.AvailableVersion) {
		toSerialize["AvailableVersion"] = o.AvailableVersion
	}
	if o.Capabilities != nil {
		toSerialize["Capabilities"] = o.Capabilities
	}
	if !IsNil(o.GuestOsVersion) {
		toSerialize["GuestOsVersion"] = o.GuestOsVersion
	}
	if !IsNil(o.IsEnabled) {
		toSerialize["IsEnabled"] = o.IsEnabled
	}
	if !IsNil(o.IsInstalled) {
		toSerialize["IsInstalled"] = o.IsInstalled
	}
	if !IsNil(o.IsIsoInserted) {
		toSerialize["IsIsoInserted"] = o.IsIsoInserted
	}
	if !IsNil(o.IsReachable) {
		toSerialize["IsReachable"] = o.IsReachable
	}
	if !IsNil(o.IsVmMobilityDriverInstalled) {
		toSerialize["IsVmMobilityDriverInstalled"] = o.IsVmMobilityDriverInstalled
	}
	if !IsNil(o.IsVssSnapshotCapable) {
		toSerialize["IsVssSnapshotCapable"] = o.IsVssSnapshotCapable
	}
	if !IsNil(o.Version) {
		toSerialize["Version"] = o.Version
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *HciAhvGuestTools) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"ClassId",
		"ObjectType",
	}

	// defaultValueFuncMap captures the default values for required properties.
	// These values are used when required properties are missing from the payload.
	defaultValueFuncMap := map[string]func() interface{}{
		"ClassId":    o.GetDefaultClassId,
		"ObjectType": o.GetDefaultObjectType,
	}
	var defaultValueApplied bool
	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			if _, ok := defaultValueFuncMap[requiredProperty]; ok {
				allProperties[requiredProperty] = defaultValueFuncMap[requiredProperty]()
				defaultValueApplied = true
			}
		}
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	if defaultValueApplied {
		data, err = json.Marshal(allProperties)
		if err != nil {
			return err
		}
	}
	type HciAhvGuestToolsWithoutEmbeddedStruct struct {
		// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.
		ClassId string `json:"ClassId"`
		// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
		ObjectType string `json:"ObjectType"`
		// The available version of the Nutanix Guest Tools.
		AvailableVersion *string  `json:"AvailableVersion,omitempty"`
		Capabilities     []string `json:"Capabilities,omitempty"`
		// The guest OS version of the Nutanix Guest Tools.
		GuestOsVersion *string `json:"GuestOsVersion,omitempty"`
		// Indicates if the Nutanix Guest Tools is enabled.
		IsEnabled *bool `json:"IsEnabled,omitempty"`
		// Indicates if the Nutanix Guest Tools is installed.
		IsInstalled *bool `json:"IsInstalled,omitempty"`
		// Indicates if the Nutanix Guest Tools ISO is inserted.
		IsIsoInserted *bool `json:"IsIsoInserted,omitempty"`
		// Indicates if the Nutanix Guest Tools is reachable.
		IsReachable *bool `json:"IsReachable,omitempty"`
		// Indicates if the Nutanix Guest Tools VM mobility driver is installed.
		IsVmMobilityDriverInstalled *bool `json:"IsVmMobilityDriverInstalled,omitempty"`
		// Indicates if the Nutanix Guest Tools is VSS snapshot capable.
		IsVssSnapshotCapable *bool `json:"IsVssSnapshotCapable,omitempty"`
		// The version of the Nutanix Guest Tools.
		Version *string `json:"Version,omitempty"`
	}

	varHciAhvGuestToolsWithoutEmbeddedStruct := HciAhvGuestToolsWithoutEmbeddedStruct{}

	err = json.Unmarshal(data, &varHciAhvGuestToolsWithoutEmbeddedStruct)
	if err == nil {
		varHciAhvGuestTools := _HciAhvGuestTools{}
		varHciAhvGuestTools.ClassId = varHciAhvGuestToolsWithoutEmbeddedStruct.ClassId
		varHciAhvGuestTools.ObjectType = varHciAhvGuestToolsWithoutEmbeddedStruct.ObjectType
		varHciAhvGuestTools.AvailableVersion = varHciAhvGuestToolsWithoutEmbeddedStruct.AvailableVersion
		varHciAhvGuestTools.Capabilities = varHciAhvGuestToolsWithoutEmbeddedStruct.Capabilities
		varHciAhvGuestTools.GuestOsVersion = varHciAhvGuestToolsWithoutEmbeddedStruct.GuestOsVersion
		varHciAhvGuestTools.IsEnabled = varHciAhvGuestToolsWithoutEmbeddedStruct.IsEnabled
		varHciAhvGuestTools.IsInstalled = varHciAhvGuestToolsWithoutEmbeddedStruct.IsInstalled
		varHciAhvGuestTools.IsIsoInserted = varHciAhvGuestToolsWithoutEmbeddedStruct.IsIsoInserted
		varHciAhvGuestTools.IsReachable = varHciAhvGuestToolsWithoutEmbeddedStruct.IsReachable
		varHciAhvGuestTools.IsVmMobilityDriverInstalled = varHciAhvGuestToolsWithoutEmbeddedStruct.IsVmMobilityDriverInstalled
		varHciAhvGuestTools.IsVssSnapshotCapable = varHciAhvGuestToolsWithoutEmbeddedStruct.IsVssSnapshotCapable
		varHciAhvGuestTools.Version = varHciAhvGuestToolsWithoutEmbeddedStruct.Version
		*o = HciAhvGuestTools(varHciAhvGuestTools)
	} else {
		return err
	}

	varHciAhvGuestTools := _HciAhvGuestTools{}

	err = json.Unmarshal(data, &varHciAhvGuestTools)
	if err == nil {
		o.MoBaseComplexType = varHciAhvGuestTools.MoBaseComplexType
	} else {
		return err
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "ClassId")
		delete(additionalProperties, "ObjectType")
		delete(additionalProperties, "AvailableVersion")
		delete(additionalProperties, "Capabilities")
		delete(additionalProperties, "GuestOsVersion")
		delete(additionalProperties, "IsEnabled")
		delete(additionalProperties, "IsInstalled")
		delete(additionalProperties, "IsIsoInserted")
		delete(additionalProperties, "IsReachable")
		delete(additionalProperties, "IsVmMobilityDriverInstalled")
		delete(additionalProperties, "IsVssSnapshotCapable")
		delete(additionalProperties, "Version")

		// remove fields from embedded structs
		reflectMoBaseComplexType := reflect.ValueOf(o.MoBaseComplexType)
		for i := 0; i < reflectMoBaseComplexType.Type().NumField(); i++ {
			t := reflectMoBaseComplexType.Type().Field(i)

			if jsonTag := t.Tag.Get("json"); jsonTag != "" {
				fieldName := ""
				if commaIdx := strings.Index(jsonTag, ","); commaIdx > 0 {
					fieldName = jsonTag[:commaIdx]
				} else {
					fieldName = jsonTag
				}
				if fieldName != "AdditionalProperties" {
					delete(additionalProperties, fieldName)
				}
			}
		}

		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableHciAhvGuestTools struct {
	value *HciAhvGuestTools
	isSet bool
}

func (v NullableHciAhvGuestTools) Get() *HciAhvGuestTools {
	return v.value
}

func (v *NullableHciAhvGuestTools) Set(val *HciAhvGuestTools) {
	v.value = val
	v.isSet = true
}

func (v NullableHciAhvGuestTools) IsSet() bool {
	return v.isSet
}

func (v *NullableHciAhvGuestTools) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHciAhvGuestTools(val *HciAhvGuestTools) *NullableHciAhvGuestTools {
	return &NullableHciAhvGuestTools{value: val, isSet: true}
}

func (v NullableHciAhvGuestTools) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHciAhvGuestTools) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
