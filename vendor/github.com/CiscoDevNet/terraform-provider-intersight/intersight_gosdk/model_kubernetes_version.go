/*
Cisco Intersight

Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations. The Intersight OpenAPI document defines the complete set of properties that are returned in the HTTP response. From that perspective, a client can expect that no additional properties are returned, unless these properties are explicitly defined in the OpenAPI document. However, when a client uses an older version of the Intersight OpenAPI document, the server may send additional properties because the software is more recent than the client. In that case, the client may receive properties that it does not know about. Some generated SDKs perform a strict validation of the HTTP response body against the OpenAPI document.

API version: 1.0.11-2024100405
Contact: intersight@cisco.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package intersight

import (
	"encoding/json"
	"fmt"
	"reflect"
	"strings"
)

// checks if the KubernetesVersion type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &KubernetesVersion{}

// KubernetesVersion A policy capturing software versions for a Kubernetes cluster.
type KubernetesVersion struct {
	MoBaseMo
	// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.
	ClassId string `json:"ClassId"`
	// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
	ObjectType      string                            `json:"ObjectType"`
	EssentialAddons []KubernetesAddonVersionReference `json:"EssentialAddons,omitempty"`
	// Version of helm operator to use for this kubernetes version.
	HelmOperatorVersion *string `json:"HelmOperatorVersion,omitempty"`
	// The iks utility container to use for the kubernetes version.
	IksUtilityContainer *string `json:"IksUtilityContainer,omitempty"`
	// Desired Kubernetes version.
	KubernetesVersion *string `json:"KubernetesVersion,omitempty" validate:"regexp=^$|^v[0-9]+\\\\.[0-9]+\\\\.[0-9]+$"`
	// The name of this IKS kubernetes version.
	Name                        *string                                           `json:"Name,omitempty"`
	BootIso                     NullableSoftwareSolutionDistributableRelationship `json:"BootIso,omitempty"`
	Catalog                     NullableKubernetesCatalogRelationship             `json:"Catalog,omitempty"`
	OvaImageTemplate            NullableSoftwareSolutionDistributableRelationship `json:"OvaImageTemplate,omitempty"`
	Qcow2NodeTemplate           NullableSoftwareSolutionDistributableRelationship `json:"Qcow2NodeTemplate,omitempty"`
	Qcow2VirtualMachineTemplate NullableSoftwareSolutionDistributableRelationship `json:"Qcow2VirtualMachineTemplate,omitempty"`
	AdditionalProperties        map[string]interface{}
}

type _KubernetesVersion KubernetesVersion

// NewKubernetesVersion instantiates a new KubernetesVersion object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewKubernetesVersion(classId string, objectType string) *KubernetesVersion {
	this := KubernetesVersion{}
	this.ClassId = classId
	this.ObjectType = objectType
	return &this
}

// NewKubernetesVersionWithDefaults instantiates a new KubernetesVersion object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewKubernetesVersionWithDefaults() *KubernetesVersion {
	this := KubernetesVersion{}
	var classId string = "kubernetes.Version"
	this.ClassId = classId
	var objectType string = "kubernetes.Version"
	this.ObjectType = objectType
	return &this
}

// GetClassId returns the ClassId field value
func (o *KubernetesVersion) GetClassId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ClassId
}

// GetClassIdOk returns a tuple with the ClassId field value
// and a boolean to check if the value has been set.
func (o *KubernetesVersion) GetClassIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ClassId, true
}

// SetClassId sets field value
func (o *KubernetesVersion) SetClassId(v string) {
	o.ClassId = v
}

// GetDefaultClassId returns the default value "kubernetes.Version" of the ClassId field.
func (o *KubernetesVersion) GetDefaultClassId() interface{} {
	return "kubernetes.Version"
}

// GetObjectType returns the ObjectType field value
func (o *KubernetesVersion) GetObjectType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ObjectType
}

// GetObjectTypeOk returns a tuple with the ObjectType field value
// and a boolean to check if the value has been set.
func (o *KubernetesVersion) GetObjectTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ObjectType, true
}

// SetObjectType sets field value
func (o *KubernetesVersion) SetObjectType(v string) {
	o.ObjectType = v
}

// GetDefaultObjectType returns the default value "kubernetes.Version" of the ObjectType field.
func (o *KubernetesVersion) GetDefaultObjectType() interface{} {
	return "kubernetes.Version"
}

// GetEssentialAddons returns the EssentialAddons field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *KubernetesVersion) GetEssentialAddons() []KubernetesAddonVersionReference {
	if o == nil {
		var ret []KubernetesAddonVersionReference
		return ret
	}
	return o.EssentialAddons
}

// GetEssentialAddonsOk returns a tuple with the EssentialAddons field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *KubernetesVersion) GetEssentialAddonsOk() ([]KubernetesAddonVersionReference, bool) {
	if o == nil || IsNil(o.EssentialAddons) {
		return nil, false
	}
	return o.EssentialAddons, true
}

// HasEssentialAddons returns a boolean if a field has been set.
func (o *KubernetesVersion) HasEssentialAddons() bool {
	if o != nil && !IsNil(o.EssentialAddons) {
		return true
	}

	return false
}

// SetEssentialAddons gets a reference to the given []KubernetesAddonVersionReference and assigns it to the EssentialAddons field.
func (o *KubernetesVersion) SetEssentialAddons(v []KubernetesAddonVersionReference) {
	o.EssentialAddons = v
}

// GetHelmOperatorVersion returns the HelmOperatorVersion field value if set, zero value otherwise.
func (o *KubernetesVersion) GetHelmOperatorVersion() string {
	if o == nil || IsNil(o.HelmOperatorVersion) {
		var ret string
		return ret
	}
	return *o.HelmOperatorVersion
}

// GetHelmOperatorVersionOk returns a tuple with the HelmOperatorVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KubernetesVersion) GetHelmOperatorVersionOk() (*string, bool) {
	if o == nil || IsNil(o.HelmOperatorVersion) {
		return nil, false
	}
	return o.HelmOperatorVersion, true
}

// HasHelmOperatorVersion returns a boolean if a field has been set.
func (o *KubernetesVersion) HasHelmOperatorVersion() bool {
	if o != nil && !IsNil(o.HelmOperatorVersion) {
		return true
	}

	return false
}

// SetHelmOperatorVersion gets a reference to the given string and assigns it to the HelmOperatorVersion field.
func (o *KubernetesVersion) SetHelmOperatorVersion(v string) {
	o.HelmOperatorVersion = &v
}

// GetIksUtilityContainer returns the IksUtilityContainer field value if set, zero value otherwise.
func (o *KubernetesVersion) GetIksUtilityContainer() string {
	if o == nil || IsNil(o.IksUtilityContainer) {
		var ret string
		return ret
	}
	return *o.IksUtilityContainer
}

// GetIksUtilityContainerOk returns a tuple with the IksUtilityContainer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KubernetesVersion) GetIksUtilityContainerOk() (*string, bool) {
	if o == nil || IsNil(o.IksUtilityContainer) {
		return nil, false
	}
	return o.IksUtilityContainer, true
}

// HasIksUtilityContainer returns a boolean if a field has been set.
func (o *KubernetesVersion) HasIksUtilityContainer() bool {
	if o != nil && !IsNil(o.IksUtilityContainer) {
		return true
	}

	return false
}

// SetIksUtilityContainer gets a reference to the given string and assigns it to the IksUtilityContainer field.
func (o *KubernetesVersion) SetIksUtilityContainer(v string) {
	o.IksUtilityContainer = &v
}

// GetKubernetesVersion returns the KubernetesVersion field value if set, zero value otherwise.
func (o *KubernetesVersion) GetKubernetesVersion() string {
	if o == nil || IsNil(o.KubernetesVersion) {
		var ret string
		return ret
	}
	return *o.KubernetesVersion
}

// GetKubernetesVersionOk returns a tuple with the KubernetesVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KubernetesVersion) GetKubernetesVersionOk() (*string, bool) {
	if o == nil || IsNil(o.KubernetesVersion) {
		return nil, false
	}
	return o.KubernetesVersion, true
}

// HasKubernetesVersion returns a boolean if a field has been set.
func (o *KubernetesVersion) HasKubernetesVersion() bool {
	if o != nil && !IsNil(o.KubernetesVersion) {
		return true
	}

	return false
}

// SetKubernetesVersion gets a reference to the given string and assigns it to the KubernetesVersion field.
func (o *KubernetesVersion) SetKubernetesVersion(v string) {
	o.KubernetesVersion = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *KubernetesVersion) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KubernetesVersion) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *KubernetesVersion) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *KubernetesVersion) SetName(v string) {
	o.Name = &v
}

// GetBootIso returns the BootIso field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *KubernetesVersion) GetBootIso() SoftwareSolutionDistributableRelationship {
	if o == nil || IsNil(o.BootIso.Get()) {
		var ret SoftwareSolutionDistributableRelationship
		return ret
	}
	return *o.BootIso.Get()
}

// GetBootIsoOk returns a tuple with the BootIso field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *KubernetesVersion) GetBootIsoOk() (*SoftwareSolutionDistributableRelationship, bool) {
	if o == nil {
		return nil, false
	}
	return o.BootIso.Get(), o.BootIso.IsSet()
}

// HasBootIso returns a boolean if a field has been set.
func (o *KubernetesVersion) HasBootIso() bool {
	if o != nil && o.BootIso.IsSet() {
		return true
	}

	return false
}

// SetBootIso gets a reference to the given NullableSoftwareSolutionDistributableRelationship and assigns it to the BootIso field.
func (o *KubernetesVersion) SetBootIso(v SoftwareSolutionDistributableRelationship) {
	o.BootIso.Set(&v)
}

// SetBootIsoNil sets the value for BootIso to be an explicit nil
func (o *KubernetesVersion) SetBootIsoNil() {
	o.BootIso.Set(nil)
}

// UnsetBootIso ensures that no value is present for BootIso, not even an explicit nil
func (o *KubernetesVersion) UnsetBootIso() {
	o.BootIso.Unset()
}

// GetCatalog returns the Catalog field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *KubernetesVersion) GetCatalog() KubernetesCatalogRelationship {
	if o == nil || IsNil(o.Catalog.Get()) {
		var ret KubernetesCatalogRelationship
		return ret
	}
	return *o.Catalog.Get()
}

// GetCatalogOk returns a tuple with the Catalog field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *KubernetesVersion) GetCatalogOk() (*KubernetesCatalogRelationship, bool) {
	if o == nil {
		return nil, false
	}
	return o.Catalog.Get(), o.Catalog.IsSet()
}

// HasCatalog returns a boolean if a field has been set.
func (o *KubernetesVersion) HasCatalog() bool {
	if o != nil && o.Catalog.IsSet() {
		return true
	}

	return false
}

// SetCatalog gets a reference to the given NullableKubernetesCatalogRelationship and assigns it to the Catalog field.
func (o *KubernetesVersion) SetCatalog(v KubernetesCatalogRelationship) {
	o.Catalog.Set(&v)
}

// SetCatalogNil sets the value for Catalog to be an explicit nil
func (o *KubernetesVersion) SetCatalogNil() {
	o.Catalog.Set(nil)
}

// UnsetCatalog ensures that no value is present for Catalog, not even an explicit nil
func (o *KubernetesVersion) UnsetCatalog() {
	o.Catalog.Unset()
}

// GetOvaImageTemplate returns the OvaImageTemplate field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *KubernetesVersion) GetOvaImageTemplate() SoftwareSolutionDistributableRelationship {
	if o == nil || IsNil(o.OvaImageTemplate.Get()) {
		var ret SoftwareSolutionDistributableRelationship
		return ret
	}
	return *o.OvaImageTemplate.Get()
}

// GetOvaImageTemplateOk returns a tuple with the OvaImageTemplate field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *KubernetesVersion) GetOvaImageTemplateOk() (*SoftwareSolutionDistributableRelationship, bool) {
	if o == nil {
		return nil, false
	}
	return o.OvaImageTemplate.Get(), o.OvaImageTemplate.IsSet()
}

// HasOvaImageTemplate returns a boolean if a field has been set.
func (o *KubernetesVersion) HasOvaImageTemplate() bool {
	if o != nil && o.OvaImageTemplate.IsSet() {
		return true
	}

	return false
}

// SetOvaImageTemplate gets a reference to the given NullableSoftwareSolutionDistributableRelationship and assigns it to the OvaImageTemplate field.
func (o *KubernetesVersion) SetOvaImageTemplate(v SoftwareSolutionDistributableRelationship) {
	o.OvaImageTemplate.Set(&v)
}

// SetOvaImageTemplateNil sets the value for OvaImageTemplate to be an explicit nil
func (o *KubernetesVersion) SetOvaImageTemplateNil() {
	o.OvaImageTemplate.Set(nil)
}

// UnsetOvaImageTemplate ensures that no value is present for OvaImageTemplate, not even an explicit nil
func (o *KubernetesVersion) UnsetOvaImageTemplate() {
	o.OvaImageTemplate.Unset()
}

// GetQcow2NodeTemplate returns the Qcow2NodeTemplate field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *KubernetesVersion) GetQcow2NodeTemplate() SoftwareSolutionDistributableRelationship {
	if o == nil || IsNil(o.Qcow2NodeTemplate.Get()) {
		var ret SoftwareSolutionDistributableRelationship
		return ret
	}
	return *o.Qcow2NodeTemplate.Get()
}

// GetQcow2NodeTemplateOk returns a tuple with the Qcow2NodeTemplate field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *KubernetesVersion) GetQcow2NodeTemplateOk() (*SoftwareSolutionDistributableRelationship, bool) {
	if o == nil {
		return nil, false
	}
	return o.Qcow2NodeTemplate.Get(), o.Qcow2NodeTemplate.IsSet()
}

// HasQcow2NodeTemplate returns a boolean if a field has been set.
func (o *KubernetesVersion) HasQcow2NodeTemplate() bool {
	if o != nil && o.Qcow2NodeTemplate.IsSet() {
		return true
	}

	return false
}

// SetQcow2NodeTemplate gets a reference to the given NullableSoftwareSolutionDistributableRelationship and assigns it to the Qcow2NodeTemplate field.
func (o *KubernetesVersion) SetQcow2NodeTemplate(v SoftwareSolutionDistributableRelationship) {
	o.Qcow2NodeTemplate.Set(&v)
}

// SetQcow2NodeTemplateNil sets the value for Qcow2NodeTemplate to be an explicit nil
func (o *KubernetesVersion) SetQcow2NodeTemplateNil() {
	o.Qcow2NodeTemplate.Set(nil)
}

// UnsetQcow2NodeTemplate ensures that no value is present for Qcow2NodeTemplate, not even an explicit nil
func (o *KubernetesVersion) UnsetQcow2NodeTemplate() {
	o.Qcow2NodeTemplate.Unset()
}

// GetQcow2VirtualMachineTemplate returns the Qcow2VirtualMachineTemplate field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *KubernetesVersion) GetQcow2VirtualMachineTemplate() SoftwareSolutionDistributableRelationship {
	if o == nil || IsNil(o.Qcow2VirtualMachineTemplate.Get()) {
		var ret SoftwareSolutionDistributableRelationship
		return ret
	}
	return *o.Qcow2VirtualMachineTemplate.Get()
}

// GetQcow2VirtualMachineTemplateOk returns a tuple with the Qcow2VirtualMachineTemplate field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *KubernetesVersion) GetQcow2VirtualMachineTemplateOk() (*SoftwareSolutionDistributableRelationship, bool) {
	if o == nil {
		return nil, false
	}
	return o.Qcow2VirtualMachineTemplate.Get(), o.Qcow2VirtualMachineTemplate.IsSet()
}

// HasQcow2VirtualMachineTemplate returns a boolean if a field has been set.
func (o *KubernetesVersion) HasQcow2VirtualMachineTemplate() bool {
	if o != nil && o.Qcow2VirtualMachineTemplate.IsSet() {
		return true
	}

	return false
}

// SetQcow2VirtualMachineTemplate gets a reference to the given NullableSoftwareSolutionDistributableRelationship and assigns it to the Qcow2VirtualMachineTemplate field.
func (o *KubernetesVersion) SetQcow2VirtualMachineTemplate(v SoftwareSolutionDistributableRelationship) {
	o.Qcow2VirtualMachineTemplate.Set(&v)
}

// SetQcow2VirtualMachineTemplateNil sets the value for Qcow2VirtualMachineTemplate to be an explicit nil
func (o *KubernetesVersion) SetQcow2VirtualMachineTemplateNil() {
	o.Qcow2VirtualMachineTemplate.Set(nil)
}

// UnsetQcow2VirtualMachineTemplate ensures that no value is present for Qcow2VirtualMachineTemplate, not even an explicit nil
func (o *KubernetesVersion) UnsetQcow2VirtualMachineTemplate() {
	o.Qcow2VirtualMachineTemplate.Unset()
}

func (o KubernetesVersion) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o KubernetesVersion) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	serializedMoBaseMo, errMoBaseMo := json.Marshal(o.MoBaseMo)
	if errMoBaseMo != nil {
		return map[string]interface{}{}, errMoBaseMo
	}
	errMoBaseMo = json.Unmarshal([]byte(serializedMoBaseMo), &toSerialize)
	if errMoBaseMo != nil {
		return map[string]interface{}{}, errMoBaseMo
	}
	if _, exists := toSerialize["ClassId"]; !exists {
		toSerialize["ClassId"] = o.GetDefaultClassId()
	}
	toSerialize["ClassId"] = o.ClassId
	if _, exists := toSerialize["ObjectType"]; !exists {
		toSerialize["ObjectType"] = o.GetDefaultObjectType()
	}
	toSerialize["ObjectType"] = o.ObjectType
	if o.EssentialAddons != nil {
		toSerialize["EssentialAddons"] = o.EssentialAddons
	}
	if !IsNil(o.HelmOperatorVersion) {
		toSerialize["HelmOperatorVersion"] = o.HelmOperatorVersion
	}
	if !IsNil(o.IksUtilityContainer) {
		toSerialize["IksUtilityContainer"] = o.IksUtilityContainer
	}
	if !IsNil(o.KubernetesVersion) {
		toSerialize["KubernetesVersion"] = o.KubernetesVersion
	}
	if !IsNil(o.Name) {
		toSerialize["Name"] = o.Name
	}
	if o.BootIso.IsSet() {
		toSerialize["BootIso"] = o.BootIso.Get()
	}
	if o.Catalog.IsSet() {
		toSerialize["Catalog"] = o.Catalog.Get()
	}
	if o.OvaImageTemplate.IsSet() {
		toSerialize["OvaImageTemplate"] = o.OvaImageTemplate.Get()
	}
	if o.Qcow2NodeTemplate.IsSet() {
		toSerialize["Qcow2NodeTemplate"] = o.Qcow2NodeTemplate.Get()
	}
	if o.Qcow2VirtualMachineTemplate.IsSet() {
		toSerialize["Qcow2VirtualMachineTemplate"] = o.Qcow2VirtualMachineTemplate.Get()
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *KubernetesVersion) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"ClassId",
		"ObjectType",
	}

	// defaultValueFuncMap captures the default values for required properties.
	// These values are used when required properties are missing from the payload.
	defaultValueFuncMap := map[string]func() interface{}{
		"ClassId":    o.GetDefaultClassId,
		"ObjectType": o.GetDefaultObjectType,
	}
	var defaultValueApplied bool
	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			if _, ok := defaultValueFuncMap[requiredProperty]; ok {
				allProperties[requiredProperty] = defaultValueFuncMap[requiredProperty]()
				defaultValueApplied = true
			}
		}
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	if defaultValueApplied {
		data, err = json.Marshal(allProperties)
		if err != nil {
			return err
		}
	}
	type KubernetesVersionWithoutEmbeddedStruct struct {
		// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.
		ClassId string `json:"ClassId"`
		// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
		ObjectType      string                            `json:"ObjectType"`
		EssentialAddons []KubernetesAddonVersionReference `json:"EssentialAddons,omitempty"`
		// Version of helm operator to use for this kubernetes version.
		HelmOperatorVersion *string `json:"HelmOperatorVersion,omitempty"`
		// The iks utility container to use for the kubernetes version.
		IksUtilityContainer *string `json:"IksUtilityContainer,omitempty"`
		// Desired Kubernetes version.
		KubernetesVersion *string `json:"KubernetesVersion,omitempty" validate:"regexp=^$|^v[0-9]+\\\\.[0-9]+\\\\.[0-9]+$"`
		// The name of this IKS kubernetes version.
		Name                        *string                                           `json:"Name,omitempty"`
		BootIso                     NullableSoftwareSolutionDistributableRelationship `json:"BootIso,omitempty"`
		Catalog                     NullableKubernetesCatalogRelationship             `json:"Catalog,omitempty"`
		OvaImageTemplate            NullableSoftwareSolutionDistributableRelationship `json:"OvaImageTemplate,omitempty"`
		Qcow2NodeTemplate           NullableSoftwareSolutionDistributableRelationship `json:"Qcow2NodeTemplate,omitempty"`
		Qcow2VirtualMachineTemplate NullableSoftwareSolutionDistributableRelationship `json:"Qcow2VirtualMachineTemplate,omitempty"`
	}

	varKubernetesVersionWithoutEmbeddedStruct := KubernetesVersionWithoutEmbeddedStruct{}

	err = json.Unmarshal(data, &varKubernetesVersionWithoutEmbeddedStruct)
	if err == nil {
		varKubernetesVersion := _KubernetesVersion{}
		varKubernetesVersion.ClassId = varKubernetesVersionWithoutEmbeddedStruct.ClassId
		varKubernetesVersion.ObjectType = varKubernetesVersionWithoutEmbeddedStruct.ObjectType
		varKubernetesVersion.EssentialAddons = varKubernetesVersionWithoutEmbeddedStruct.EssentialAddons
		varKubernetesVersion.HelmOperatorVersion = varKubernetesVersionWithoutEmbeddedStruct.HelmOperatorVersion
		varKubernetesVersion.IksUtilityContainer = varKubernetesVersionWithoutEmbeddedStruct.IksUtilityContainer
		varKubernetesVersion.KubernetesVersion = varKubernetesVersionWithoutEmbeddedStruct.KubernetesVersion
		varKubernetesVersion.Name = varKubernetesVersionWithoutEmbeddedStruct.Name
		varKubernetesVersion.BootIso = varKubernetesVersionWithoutEmbeddedStruct.BootIso
		varKubernetesVersion.Catalog = varKubernetesVersionWithoutEmbeddedStruct.Catalog
		varKubernetesVersion.OvaImageTemplate = varKubernetesVersionWithoutEmbeddedStruct.OvaImageTemplate
		varKubernetesVersion.Qcow2NodeTemplate = varKubernetesVersionWithoutEmbeddedStruct.Qcow2NodeTemplate
		varKubernetesVersion.Qcow2VirtualMachineTemplate = varKubernetesVersionWithoutEmbeddedStruct.Qcow2VirtualMachineTemplate
		*o = KubernetesVersion(varKubernetesVersion)
	} else {
		return err
	}

	varKubernetesVersion := _KubernetesVersion{}

	err = json.Unmarshal(data, &varKubernetesVersion)
	if err == nil {
		o.MoBaseMo = varKubernetesVersion.MoBaseMo
	} else {
		return err
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "ClassId")
		delete(additionalProperties, "ObjectType")
		delete(additionalProperties, "EssentialAddons")
		delete(additionalProperties, "HelmOperatorVersion")
		delete(additionalProperties, "IksUtilityContainer")
		delete(additionalProperties, "KubernetesVersion")
		delete(additionalProperties, "Name")
		delete(additionalProperties, "BootIso")
		delete(additionalProperties, "Catalog")
		delete(additionalProperties, "OvaImageTemplate")
		delete(additionalProperties, "Qcow2NodeTemplate")
		delete(additionalProperties, "Qcow2VirtualMachineTemplate")

		// remove fields from embedded structs
		reflectMoBaseMo := reflect.ValueOf(o.MoBaseMo)
		for i := 0; i < reflectMoBaseMo.Type().NumField(); i++ {
			t := reflectMoBaseMo.Type().Field(i)

			if jsonTag := t.Tag.Get("json"); jsonTag != "" {
				fieldName := ""
				if commaIdx := strings.Index(jsonTag, ","); commaIdx > 0 {
					fieldName = jsonTag[:commaIdx]
				} else {
					fieldName = jsonTag
				}
				if fieldName != "AdditionalProperties" {
					delete(additionalProperties, fieldName)
				}
			}
		}

		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableKubernetesVersion struct {
	value *KubernetesVersion
	isSet bool
}

func (v NullableKubernetesVersion) Get() *KubernetesVersion {
	return v.value
}

func (v *NullableKubernetesVersion) Set(val *KubernetesVersion) {
	v.value = val
	v.isSet = true
}

func (v NullableKubernetesVersion) IsSet() bool {
	return v.isSet
}

func (v *NullableKubernetesVersion) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableKubernetesVersion(val *KubernetesVersion) *NullableKubernetesVersion {
	return &NullableKubernetesVersion{value: val, isSet: true}
}

func (v NullableKubernetesVersion) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableKubernetesVersion) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
