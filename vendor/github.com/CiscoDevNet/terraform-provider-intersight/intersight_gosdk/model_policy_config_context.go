/*
Cisco Intersight

Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations. The Intersight OpenAPI document defines the complete set of properties that are returned in the HTTP response. From that perspective, a client can expect that no additional properties are returned, unless these properties are explicitly defined in the OpenAPI document. However, when a client uses an older version of the Intersight OpenAPI document, the server may send additional properties because the software is more recent than the client. In that case, the client may receive properties that it does not know about. Some generated SDKs perform a strict validation of the HTTP response body against the OpenAPI document.

API version: 1.0.11-18775
Contact: intersight@cisco.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package intersight

import (
	"encoding/json"
	"fmt"
	"reflect"
	"strings"
)

// checks if the PolicyConfigContext type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PolicyConfigContext{}

// PolicyConfigContext Configuration related state and results.
type PolicyConfigContext struct {
	MoBaseComplexType
	// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.
	ClassId string `json:"ClassId"`
	// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
	ObjectType string `json:"ObjectType"`
	// Indicates a profile's configuration deploying state. Values -- Assigned, Not-assigned, Associated, Pending-changes, Out-of-sync, Validating, Configuring, Failed.
	ConfigState *string `json:"ConfigState,omitempty"`
	// Indicates a profile's configuration deploying state. Values -- Assigned, Not-assigned, Associated, InConsistent, Validating, Configuring, Failed, Activating, UnConfiguring. * `None` - The default state is none. * `Not-assigned` - Server is not assigned to the profile. * `Assigned` - Server is assigned to the profile and the configurations are not yet deployed. * `Preparing` - Preparing to deploy the configuration. * `Validating` - Profile validation in progress. * `Configuring` - Profile deploy operation is in progress. * `UnConfiguring` - Server is unassigned and config cleanup is in progress. * `Analyzing` - Profile changes are being analyzed. * `Activating` - Configuration is being activated at the endpoint. * `Inconsistent` - Profile is inconsistent with the endpoint configuration. * `Associated` - The profile configuration has been applied to the endpoint and no inconsistencies have been detected. * `Failed` - The last action on the profile has failed. * `Not-complete` - Config import operation on the profile is not complete. * `Waiting-for-resource` - Waiting for the resource to be allocated for the profile. * `Partially-deployed` - The profile configuration has been applied on a subset of endpoints.
	ConfigStateSummary *string `json:"ConfigStateSummary,omitempty"`
	// The type of configuration running on the profile. Since profile deployments can configure multiple different settings, configType indicates which type of configuration is currently in progress.
	ConfigType *string `json:"ConfigType,omitempty"`
	// System action to trigger the appropriate workflow. Values -- No_op, ConfigChange, Deploy, Unbind.
	ControlAction *string `json:"ControlAction,omitempty"`
	// Indicates a profile's error state. Values -- Validation-error (Static validation error), Pre-config-error (Runtime validation error), Config-error (Runtime configuration error).
	ErrorState          *string  `json:"ErrorState,omitempty"`
	InconsistencyReason []string `json:"InconsistencyReason,omitempty"`
	// Combined state (configState, and operational state of the associated physical resource) to indicate the current state of the profile. Values -- n/a, Power-off, Pending-changes, Configuring, Ok, Failed.
	OperState            *string `json:"OperState,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _PolicyConfigContext PolicyConfigContext

// NewPolicyConfigContext instantiates a new PolicyConfigContext object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPolicyConfigContext(classId string, objectType string) *PolicyConfigContext {
	this := PolicyConfigContext{}
	this.ClassId = classId
	this.ObjectType = objectType
	return &this
}

// NewPolicyConfigContextWithDefaults instantiates a new PolicyConfigContext object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPolicyConfigContextWithDefaults() *PolicyConfigContext {
	this := PolicyConfigContext{}
	var classId string = "policy.ConfigContext"
	this.ClassId = classId
	var objectType string = "policy.ConfigContext"
	this.ObjectType = objectType
	return &this
}

// GetClassId returns the ClassId field value
func (o *PolicyConfigContext) GetClassId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ClassId
}

// GetClassIdOk returns a tuple with the ClassId field value
// and a boolean to check if the value has been set.
func (o *PolicyConfigContext) GetClassIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ClassId, true
}

// SetClassId sets field value
func (o *PolicyConfigContext) SetClassId(v string) {
	o.ClassId = v
}

// GetDefaultClassId returns the default value "policy.ConfigContext" of the ClassId field.
func (o *PolicyConfigContext) GetDefaultClassId() interface{} {
	return "policy.ConfigContext"
}

// GetObjectType returns the ObjectType field value
func (o *PolicyConfigContext) GetObjectType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ObjectType
}

// GetObjectTypeOk returns a tuple with the ObjectType field value
// and a boolean to check if the value has been set.
func (o *PolicyConfigContext) GetObjectTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ObjectType, true
}

// SetObjectType sets field value
func (o *PolicyConfigContext) SetObjectType(v string) {
	o.ObjectType = v
}

// GetDefaultObjectType returns the default value "policy.ConfigContext" of the ObjectType field.
func (o *PolicyConfigContext) GetDefaultObjectType() interface{} {
	return "policy.ConfigContext"
}

// GetConfigState returns the ConfigState field value if set, zero value otherwise.
func (o *PolicyConfigContext) GetConfigState() string {
	if o == nil || IsNil(o.ConfigState) {
		var ret string
		return ret
	}
	return *o.ConfigState
}

// GetConfigStateOk returns a tuple with the ConfigState field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PolicyConfigContext) GetConfigStateOk() (*string, bool) {
	if o == nil || IsNil(o.ConfigState) {
		return nil, false
	}
	return o.ConfigState, true
}

// HasConfigState returns a boolean if a field has been set.
func (o *PolicyConfigContext) HasConfigState() bool {
	if o != nil && !IsNil(o.ConfigState) {
		return true
	}

	return false
}

// SetConfigState gets a reference to the given string and assigns it to the ConfigState field.
func (o *PolicyConfigContext) SetConfigState(v string) {
	o.ConfigState = &v
}

// GetConfigStateSummary returns the ConfigStateSummary field value if set, zero value otherwise.
func (o *PolicyConfigContext) GetConfigStateSummary() string {
	if o == nil || IsNil(o.ConfigStateSummary) {
		var ret string
		return ret
	}
	return *o.ConfigStateSummary
}

// GetConfigStateSummaryOk returns a tuple with the ConfigStateSummary field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PolicyConfigContext) GetConfigStateSummaryOk() (*string, bool) {
	if o == nil || IsNil(o.ConfigStateSummary) {
		return nil, false
	}
	return o.ConfigStateSummary, true
}

// HasConfigStateSummary returns a boolean if a field has been set.
func (o *PolicyConfigContext) HasConfigStateSummary() bool {
	if o != nil && !IsNil(o.ConfigStateSummary) {
		return true
	}

	return false
}

// SetConfigStateSummary gets a reference to the given string and assigns it to the ConfigStateSummary field.
func (o *PolicyConfigContext) SetConfigStateSummary(v string) {
	o.ConfigStateSummary = &v
}

// GetConfigType returns the ConfigType field value if set, zero value otherwise.
func (o *PolicyConfigContext) GetConfigType() string {
	if o == nil || IsNil(o.ConfigType) {
		var ret string
		return ret
	}
	return *o.ConfigType
}

// GetConfigTypeOk returns a tuple with the ConfigType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PolicyConfigContext) GetConfigTypeOk() (*string, bool) {
	if o == nil || IsNil(o.ConfigType) {
		return nil, false
	}
	return o.ConfigType, true
}

// HasConfigType returns a boolean if a field has been set.
func (o *PolicyConfigContext) HasConfigType() bool {
	if o != nil && !IsNil(o.ConfigType) {
		return true
	}

	return false
}

// SetConfigType gets a reference to the given string and assigns it to the ConfigType field.
func (o *PolicyConfigContext) SetConfigType(v string) {
	o.ConfigType = &v
}

// GetControlAction returns the ControlAction field value if set, zero value otherwise.
func (o *PolicyConfigContext) GetControlAction() string {
	if o == nil || IsNil(o.ControlAction) {
		var ret string
		return ret
	}
	return *o.ControlAction
}

// GetControlActionOk returns a tuple with the ControlAction field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PolicyConfigContext) GetControlActionOk() (*string, bool) {
	if o == nil || IsNil(o.ControlAction) {
		return nil, false
	}
	return o.ControlAction, true
}

// HasControlAction returns a boolean if a field has been set.
func (o *PolicyConfigContext) HasControlAction() bool {
	if o != nil && !IsNil(o.ControlAction) {
		return true
	}

	return false
}

// SetControlAction gets a reference to the given string and assigns it to the ControlAction field.
func (o *PolicyConfigContext) SetControlAction(v string) {
	o.ControlAction = &v
}

// GetErrorState returns the ErrorState field value if set, zero value otherwise.
func (o *PolicyConfigContext) GetErrorState() string {
	if o == nil || IsNil(o.ErrorState) {
		var ret string
		return ret
	}
	return *o.ErrorState
}

// GetErrorStateOk returns a tuple with the ErrorState field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PolicyConfigContext) GetErrorStateOk() (*string, bool) {
	if o == nil || IsNil(o.ErrorState) {
		return nil, false
	}
	return o.ErrorState, true
}

// HasErrorState returns a boolean if a field has been set.
func (o *PolicyConfigContext) HasErrorState() bool {
	if o != nil && !IsNil(o.ErrorState) {
		return true
	}

	return false
}

// SetErrorState gets a reference to the given string and assigns it to the ErrorState field.
func (o *PolicyConfigContext) SetErrorState(v string) {
	o.ErrorState = &v
}

// GetInconsistencyReason returns the InconsistencyReason field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PolicyConfigContext) GetInconsistencyReason() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.InconsistencyReason
}

// GetInconsistencyReasonOk returns a tuple with the InconsistencyReason field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PolicyConfigContext) GetInconsistencyReasonOk() ([]string, bool) {
	if o == nil || IsNil(o.InconsistencyReason) {
		return nil, false
	}
	return o.InconsistencyReason, true
}

// HasInconsistencyReason returns a boolean if a field has been set.
func (o *PolicyConfigContext) HasInconsistencyReason() bool {
	if o != nil && !IsNil(o.InconsistencyReason) {
		return true
	}

	return false
}

// SetInconsistencyReason gets a reference to the given []string and assigns it to the InconsistencyReason field.
func (o *PolicyConfigContext) SetInconsistencyReason(v []string) {
	o.InconsistencyReason = v
}

// GetOperState returns the OperState field value if set, zero value otherwise.
func (o *PolicyConfigContext) GetOperState() string {
	if o == nil || IsNil(o.OperState) {
		var ret string
		return ret
	}
	return *o.OperState
}

// GetOperStateOk returns a tuple with the OperState field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PolicyConfigContext) GetOperStateOk() (*string, bool) {
	if o == nil || IsNil(o.OperState) {
		return nil, false
	}
	return o.OperState, true
}

// HasOperState returns a boolean if a field has been set.
func (o *PolicyConfigContext) HasOperState() bool {
	if o != nil && !IsNil(o.OperState) {
		return true
	}

	return false
}

// SetOperState gets a reference to the given string and assigns it to the OperState field.
func (o *PolicyConfigContext) SetOperState(v string) {
	o.OperState = &v
}

func (o PolicyConfigContext) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PolicyConfigContext) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	serializedMoBaseComplexType, errMoBaseComplexType := json.Marshal(o.MoBaseComplexType)
	if errMoBaseComplexType != nil {
		return map[string]interface{}{}, errMoBaseComplexType
	}
	errMoBaseComplexType = json.Unmarshal([]byte(serializedMoBaseComplexType), &toSerialize)
	if errMoBaseComplexType != nil {
		return map[string]interface{}{}, errMoBaseComplexType
	}
	if _, exists := toSerialize["ClassId"]; !exists {
		toSerialize["ClassId"] = o.GetDefaultClassId()
	}
	toSerialize["ClassId"] = o.ClassId
	if _, exists := toSerialize["ObjectType"]; !exists {
		toSerialize["ObjectType"] = o.GetDefaultObjectType()
	}
	toSerialize["ObjectType"] = o.ObjectType
	if !IsNil(o.ConfigState) {
		toSerialize["ConfigState"] = o.ConfigState
	}
	if !IsNil(o.ConfigStateSummary) {
		toSerialize["ConfigStateSummary"] = o.ConfigStateSummary
	}
	if !IsNil(o.ConfigType) {
		toSerialize["ConfigType"] = o.ConfigType
	}
	if !IsNil(o.ControlAction) {
		toSerialize["ControlAction"] = o.ControlAction
	}
	if !IsNil(o.ErrorState) {
		toSerialize["ErrorState"] = o.ErrorState
	}
	if o.InconsistencyReason != nil {
		toSerialize["InconsistencyReason"] = o.InconsistencyReason
	}
	if !IsNil(o.OperState) {
		toSerialize["OperState"] = o.OperState
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *PolicyConfigContext) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"ClassId",
		"ObjectType",
	}

	// defaultValueFuncMap captures the default values for required properties.
	// These values are used when required properties are missing from the payload.
	defaultValueFuncMap := map[string]func() interface{}{
		"ClassId":    o.GetDefaultClassId,
		"ObjectType": o.GetDefaultObjectType,
	}
	var defaultValueApplied bool
	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			if _, ok := defaultValueFuncMap[requiredProperty]; ok {
				allProperties[requiredProperty] = defaultValueFuncMap[requiredProperty]()
				defaultValueApplied = true
			}
		}
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	if defaultValueApplied {
		data, err = json.Marshal(allProperties)
		if err != nil {
			return err
		}
	}
	type PolicyConfigContextWithoutEmbeddedStruct struct {
		// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.
		ClassId string `json:"ClassId"`
		// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
		ObjectType string `json:"ObjectType"`
		// Indicates a profile's configuration deploying state. Values -- Assigned, Not-assigned, Associated, Pending-changes, Out-of-sync, Validating, Configuring, Failed.
		ConfigState *string `json:"ConfigState,omitempty"`
		// Indicates a profile's configuration deploying state. Values -- Assigned, Not-assigned, Associated, InConsistent, Validating, Configuring, Failed, Activating, UnConfiguring. * `None` - The default state is none. * `Not-assigned` - Server is not assigned to the profile. * `Assigned` - Server is assigned to the profile and the configurations are not yet deployed. * `Preparing` - Preparing to deploy the configuration. * `Validating` - Profile validation in progress. * `Configuring` - Profile deploy operation is in progress. * `UnConfiguring` - Server is unassigned and config cleanup is in progress. * `Analyzing` - Profile changes are being analyzed. * `Activating` - Configuration is being activated at the endpoint. * `Inconsistent` - Profile is inconsistent with the endpoint configuration. * `Associated` - The profile configuration has been applied to the endpoint and no inconsistencies have been detected. * `Failed` - The last action on the profile has failed. * `Not-complete` - Config import operation on the profile is not complete. * `Waiting-for-resource` - Waiting for the resource to be allocated for the profile. * `Partially-deployed` - The profile configuration has been applied on a subset of endpoints.
		ConfigStateSummary *string `json:"ConfigStateSummary,omitempty"`
		// The type of configuration running on the profile. Since profile deployments can configure multiple different settings, configType indicates which type of configuration is currently in progress.
		ConfigType *string `json:"ConfigType,omitempty"`
		// System action to trigger the appropriate workflow. Values -- No_op, ConfigChange, Deploy, Unbind.
		ControlAction *string `json:"ControlAction,omitempty"`
		// Indicates a profile's error state. Values -- Validation-error (Static validation error), Pre-config-error (Runtime validation error), Config-error (Runtime configuration error).
		ErrorState          *string  `json:"ErrorState,omitempty"`
		InconsistencyReason []string `json:"InconsistencyReason,omitempty"`
		// Combined state (configState, and operational state of the associated physical resource) to indicate the current state of the profile. Values -- n/a, Power-off, Pending-changes, Configuring, Ok, Failed.
		OperState *string `json:"OperState,omitempty"`
	}

	varPolicyConfigContextWithoutEmbeddedStruct := PolicyConfigContextWithoutEmbeddedStruct{}

	err = json.Unmarshal(data, &varPolicyConfigContextWithoutEmbeddedStruct)
	if err == nil {
		varPolicyConfigContext := _PolicyConfigContext{}
		varPolicyConfigContext.ClassId = varPolicyConfigContextWithoutEmbeddedStruct.ClassId
		varPolicyConfigContext.ObjectType = varPolicyConfigContextWithoutEmbeddedStruct.ObjectType
		varPolicyConfigContext.ConfigState = varPolicyConfigContextWithoutEmbeddedStruct.ConfigState
		varPolicyConfigContext.ConfigStateSummary = varPolicyConfigContextWithoutEmbeddedStruct.ConfigStateSummary
		varPolicyConfigContext.ConfigType = varPolicyConfigContextWithoutEmbeddedStruct.ConfigType
		varPolicyConfigContext.ControlAction = varPolicyConfigContextWithoutEmbeddedStruct.ControlAction
		varPolicyConfigContext.ErrorState = varPolicyConfigContextWithoutEmbeddedStruct.ErrorState
		varPolicyConfigContext.InconsistencyReason = varPolicyConfigContextWithoutEmbeddedStruct.InconsistencyReason
		varPolicyConfigContext.OperState = varPolicyConfigContextWithoutEmbeddedStruct.OperState
		*o = PolicyConfigContext(varPolicyConfigContext)
	} else {
		return err
	}

	varPolicyConfigContext := _PolicyConfigContext{}

	err = json.Unmarshal(data, &varPolicyConfigContext)
	if err == nil {
		o.MoBaseComplexType = varPolicyConfigContext.MoBaseComplexType
	} else {
		return err
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "ClassId")
		delete(additionalProperties, "ObjectType")
		delete(additionalProperties, "ConfigState")
		delete(additionalProperties, "ConfigStateSummary")
		delete(additionalProperties, "ConfigType")
		delete(additionalProperties, "ControlAction")
		delete(additionalProperties, "ErrorState")
		delete(additionalProperties, "InconsistencyReason")
		delete(additionalProperties, "OperState")

		// remove fields from embedded structs
		reflectMoBaseComplexType := reflect.ValueOf(o.MoBaseComplexType)
		for i := 0; i < reflectMoBaseComplexType.Type().NumField(); i++ {
			t := reflectMoBaseComplexType.Type().Field(i)

			if jsonTag := t.Tag.Get("json"); jsonTag != "" {
				fieldName := ""
				if commaIdx := strings.Index(jsonTag, ","); commaIdx > 0 {
					fieldName = jsonTag[:commaIdx]
				} else {
					fieldName = jsonTag
				}
				if fieldName != "AdditionalProperties" {
					delete(additionalProperties, fieldName)
				}
			}
		}

		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullablePolicyConfigContext struct {
	value *PolicyConfigContext
	isSet bool
}

func (v NullablePolicyConfigContext) Get() *PolicyConfigContext {
	return v.value
}

func (v *NullablePolicyConfigContext) Set(val *PolicyConfigContext) {
	v.value = val
	v.isSet = true
}

func (v NullablePolicyConfigContext) IsSet() bool {
	return v.isSet
}

func (v *NullablePolicyConfigContext) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePolicyConfigContext(val *PolicyConfigContext) *NullablePolicyConfigContext {
	return &NullablePolicyConfigContext{value: val, isSet: true}
}

func (v NullablePolicyConfigContext) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePolicyConfigContext) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
