/*
Cisco Intersight

Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations. The Intersight OpenAPI document defines the complete set of properties that are returned in the HTTP response. From that perspective, a client can expect that no additional properties are returned, unless these properties are explicitly defined in the OpenAPI document. However, when a client uses an older version of the Intersight OpenAPI document, the server may send additional properties because the software is more recent than the client. In that case, the client may receive properties that it does not know about. Some generated SDKs perform a strict validation of the HTTP response body against the OpenAPI document.

API version: 1.0.11-2025091920
Contact: intersight@cisco.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package intersight

import (
	"encoding/json"
	"fmt"
	"reflect"
	"strings"
)

// checks if the WorkloadBaseBlueprintReference type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &WorkloadBaseBlueprintReference{}

// WorkloadBaseBlueprintReference Base type to capture all details about the referenced blueprint. This base type will be used to capture referenced blueprint details within Workload and Deployments.
type WorkloadBaseBlueprintReference struct {
	MoBaseComplexType
	// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data. The enum values provides the list of concrete types that can be instantiated from this abstract type.
	ClassId string `json:"ClassId"`
	// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property. The enum values provides the list of concrete types that can be instantiated from this abstract type.
	ObjectType string   `json:"ObjectType"`
	Blueprint  *MoMoRef `json:"Blueprint,omitempty"`
	// The input data for the referred blueprint. All required inputs of the blueprint must have a value provided.
	Input interface{} `json:"Input,omitempty"`
	// The name for the referred blueprint. This name must be unique within the workload definition.
	Name *string `json:"Name,omitempty" validate:"regexp=^[a-zA-Z0-9][a-zA-Z0-9- _]{0,31}$"`
	// The reference name for the blueprint which is derived by the system.
	RefName              *string                            `json:"RefName,omitempty" validate:"regexp=^$|^[a-zA-Z0-9][a-zA-Z0-9_]{0,31}$"`
	ResourceConstraint   NullableWorkloadResourceConstraint `json:"ResourceConstraint,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _WorkloadBaseBlueprintReference WorkloadBaseBlueprintReference

// NewWorkloadBaseBlueprintReference instantiates a new WorkloadBaseBlueprintReference object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWorkloadBaseBlueprintReference(classId string, objectType string) *WorkloadBaseBlueprintReference {
	this := WorkloadBaseBlueprintReference{}
	this.ClassId = classId
	this.ObjectType = objectType
	return &this
}

// NewWorkloadBaseBlueprintReferenceWithDefaults instantiates a new WorkloadBaseBlueprintReference object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWorkloadBaseBlueprintReferenceWithDefaults() *WorkloadBaseBlueprintReference {
	this := WorkloadBaseBlueprintReference{}
	return &this
}

// GetClassId returns the ClassId field value
func (o *WorkloadBaseBlueprintReference) GetClassId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ClassId
}

// GetClassIdOk returns a tuple with the ClassId field value
// and a boolean to check if the value has been set.
func (o *WorkloadBaseBlueprintReference) GetClassIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ClassId, true
}

// SetClassId sets field value
func (o *WorkloadBaseBlueprintReference) SetClassId(v string) {
	o.ClassId = v
}

// GetObjectType returns the ObjectType field value
func (o *WorkloadBaseBlueprintReference) GetObjectType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ObjectType
}

// GetObjectTypeOk returns a tuple with the ObjectType field value
// and a boolean to check if the value has been set.
func (o *WorkloadBaseBlueprintReference) GetObjectTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ObjectType, true
}

// SetObjectType sets field value
func (o *WorkloadBaseBlueprintReference) SetObjectType(v string) {
	o.ObjectType = v
}

// GetBlueprint returns the Blueprint field value if set, zero value otherwise.
func (o *WorkloadBaseBlueprintReference) GetBlueprint() MoMoRef {
	if o == nil || IsNil(o.Blueprint) {
		var ret MoMoRef
		return ret
	}
	return *o.Blueprint
}

// GetBlueprintOk returns a tuple with the Blueprint field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkloadBaseBlueprintReference) GetBlueprintOk() (*MoMoRef, bool) {
	if o == nil || IsNil(o.Blueprint) {
		return nil, false
	}
	return o.Blueprint, true
}

// HasBlueprint returns a boolean if a field has been set.
func (o *WorkloadBaseBlueprintReference) HasBlueprint() bool {
	if o != nil && !IsNil(o.Blueprint) {
		return true
	}

	return false
}

// SetBlueprint gets a reference to the given MoMoRef and assigns it to the Blueprint field.
func (o *WorkloadBaseBlueprintReference) SetBlueprint(v MoMoRef) {
	o.Blueprint = &v
}

// GetInput returns the Input field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *WorkloadBaseBlueprintReference) GetInput() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.Input
}

// GetInputOk returns a tuple with the Input field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *WorkloadBaseBlueprintReference) GetInputOk() (*interface{}, bool) {
	if o == nil || IsNil(o.Input) {
		return nil, false
	}
	return &o.Input, true
}

// HasInput returns a boolean if a field has been set.
func (o *WorkloadBaseBlueprintReference) HasInput() bool {
	if o != nil && !IsNil(o.Input) {
		return true
	}

	return false
}

// SetInput gets a reference to the given interface{} and assigns it to the Input field.
func (o *WorkloadBaseBlueprintReference) SetInput(v interface{}) {
	o.Input = v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *WorkloadBaseBlueprintReference) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkloadBaseBlueprintReference) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *WorkloadBaseBlueprintReference) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *WorkloadBaseBlueprintReference) SetName(v string) {
	o.Name = &v
}

// GetRefName returns the RefName field value if set, zero value otherwise.
func (o *WorkloadBaseBlueprintReference) GetRefName() string {
	if o == nil || IsNil(o.RefName) {
		var ret string
		return ret
	}
	return *o.RefName
}

// GetRefNameOk returns a tuple with the RefName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkloadBaseBlueprintReference) GetRefNameOk() (*string, bool) {
	if o == nil || IsNil(o.RefName) {
		return nil, false
	}
	return o.RefName, true
}

// HasRefName returns a boolean if a field has been set.
func (o *WorkloadBaseBlueprintReference) HasRefName() bool {
	if o != nil && !IsNil(o.RefName) {
		return true
	}

	return false
}

// SetRefName gets a reference to the given string and assigns it to the RefName field.
func (o *WorkloadBaseBlueprintReference) SetRefName(v string) {
	o.RefName = &v
}

// GetResourceConstraint returns the ResourceConstraint field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *WorkloadBaseBlueprintReference) GetResourceConstraint() WorkloadResourceConstraint {
	if o == nil || IsNil(o.ResourceConstraint.Get()) {
		var ret WorkloadResourceConstraint
		return ret
	}
	return *o.ResourceConstraint.Get()
}

// GetResourceConstraintOk returns a tuple with the ResourceConstraint field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *WorkloadBaseBlueprintReference) GetResourceConstraintOk() (*WorkloadResourceConstraint, bool) {
	if o == nil {
		return nil, false
	}
	return o.ResourceConstraint.Get(), o.ResourceConstraint.IsSet()
}

// HasResourceConstraint returns a boolean if a field has been set.
func (o *WorkloadBaseBlueprintReference) HasResourceConstraint() bool {
	if o != nil && o.ResourceConstraint.IsSet() {
		return true
	}

	return false
}

// SetResourceConstraint gets a reference to the given NullableWorkloadResourceConstraint and assigns it to the ResourceConstraint field.
func (o *WorkloadBaseBlueprintReference) SetResourceConstraint(v WorkloadResourceConstraint) {
	o.ResourceConstraint.Set(&v)
}

// SetResourceConstraintNil sets the value for ResourceConstraint to be an explicit nil
func (o *WorkloadBaseBlueprintReference) SetResourceConstraintNil() {
	o.ResourceConstraint.Set(nil)
}

// UnsetResourceConstraint ensures that no value is present for ResourceConstraint, not even an explicit nil
func (o *WorkloadBaseBlueprintReference) UnsetResourceConstraint() {
	o.ResourceConstraint.Unset()
}

func (o WorkloadBaseBlueprintReference) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o WorkloadBaseBlueprintReference) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	serializedMoBaseComplexType, errMoBaseComplexType := json.Marshal(o.MoBaseComplexType)
	if errMoBaseComplexType != nil {
		return map[string]interface{}{}, errMoBaseComplexType
	}
	errMoBaseComplexType = json.Unmarshal([]byte(serializedMoBaseComplexType), &toSerialize)
	if errMoBaseComplexType != nil {
		return map[string]interface{}{}, errMoBaseComplexType
	}
	toSerialize["ClassId"] = o.ClassId
	toSerialize["ObjectType"] = o.ObjectType
	if !IsNil(o.Blueprint) {
		toSerialize["Blueprint"] = o.Blueprint
	}
	if o.Input != nil {
		toSerialize["Input"] = o.Input
	}
	if !IsNil(o.Name) {
		toSerialize["Name"] = o.Name
	}
	if !IsNil(o.RefName) {
		toSerialize["RefName"] = o.RefName
	}
	if o.ResourceConstraint.IsSet() {
		toSerialize["ResourceConstraint"] = o.ResourceConstraint.Get()
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *WorkloadBaseBlueprintReference) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"ClassId",
		"ObjectType",
	}

	// defaultValueFuncMap captures the default values for required properties.
	// These values are used when required properties are missing from the payload.
	defaultValueFuncMap := map[string]func() interface{}{}
	var defaultValueApplied bool
	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			if _, ok := defaultValueFuncMap[requiredProperty]; ok {
				allProperties[requiredProperty] = defaultValueFuncMap[requiredProperty]()
				defaultValueApplied = true
			}
		}
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	if defaultValueApplied {
		data, err = json.Marshal(allProperties)
		if err != nil {
			return err
		}
	}
	type WorkloadBaseBlueprintReferenceWithoutEmbeddedStruct struct {
		// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data. The enum values provides the list of concrete types that can be instantiated from this abstract type.
		ClassId string `json:"ClassId"`
		// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property. The enum values provides the list of concrete types that can be instantiated from this abstract type.
		ObjectType string   `json:"ObjectType"`
		Blueprint  *MoMoRef `json:"Blueprint,omitempty"`
		// The input data for the referred blueprint. All required inputs of the blueprint must have a value provided.
		Input interface{} `json:"Input,omitempty"`
		// The name for the referred blueprint. This name must be unique within the workload definition.
		Name *string `json:"Name,omitempty" validate:"regexp=^[a-zA-Z0-9][a-zA-Z0-9- _]{0,31}$"`
		// The reference name for the blueprint which is derived by the system.
		RefName            *string                            `json:"RefName,omitempty" validate:"regexp=^$|^[a-zA-Z0-9][a-zA-Z0-9_]{0,31}$"`
		ResourceConstraint NullableWorkloadResourceConstraint `json:"ResourceConstraint,omitempty"`
	}

	varWorkloadBaseBlueprintReferenceWithoutEmbeddedStruct := WorkloadBaseBlueprintReferenceWithoutEmbeddedStruct{}

	err = json.Unmarshal(data, &varWorkloadBaseBlueprintReferenceWithoutEmbeddedStruct)
	if err == nil {
		varWorkloadBaseBlueprintReference := _WorkloadBaseBlueprintReference{}
		varWorkloadBaseBlueprintReference.ClassId = varWorkloadBaseBlueprintReferenceWithoutEmbeddedStruct.ClassId
		varWorkloadBaseBlueprintReference.ObjectType = varWorkloadBaseBlueprintReferenceWithoutEmbeddedStruct.ObjectType
		varWorkloadBaseBlueprintReference.Blueprint = varWorkloadBaseBlueprintReferenceWithoutEmbeddedStruct.Blueprint
		varWorkloadBaseBlueprintReference.Input = varWorkloadBaseBlueprintReferenceWithoutEmbeddedStruct.Input
		varWorkloadBaseBlueprintReference.Name = varWorkloadBaseBlueprintReferenceWithoutEmbeddedStruct.Name
		varWorkloadBaseBlueprintReference.RefName = varWorkloadBaseBlueprintReferenceWithoutEmbeddedStruct.RefName
		varWorkloadBaseBlueprintReference.ResourceConstraint = varWorkloadBaseBlueprintReferenceWithoutEmbeddedStruct.ResourceConstraint
		*o = WorkloadBaseBlueprintReference(varWorkloadBaseBlueprintReference)
	} else {
		return err
	}

	varWorkloadBaseBlueprintReference := _WorkloadBaseBlueprintReference{}

	err = json.Unmarshal(data, &varWorkloadBaseBlueprintReference)
	if err == nil {
		o.MoBaseComplexType = varWorkloadBaseBlueprintReference.MoBaseComplexType
	} else {
		return err
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "ClassId")
		delete(additionalProperties, "ObjectType")
		delete(additionalProperties, "Blueprint")
		delete(additionalProperties, "Input")
		delete(additionalProperties, "Name")
		delete(additionalProperties, "RefName")
		delete(additionalProperties, "ResourceConstraint")

		// remove fields from embedded structs
		reflectMoBaseComplexType := reflect.ValueOf(o.MoBaseComplexType)
		for i := 0; i < reflectMoBaseComplexType.Type().NumField(); i++ {
			t := reflectMoBaseComplexType.Type().Field(i)

			if jsonTag := t.Tag.Get("json"); jsonTag != "" {
				fieldName := ""
				if commaIdx := strings.Index(jsonTag, ","); commaIdx > 0 {
					fieldName = jsonTag[:commaIdx]
				} else {
					fieldName = jsonTag
				}
				if fieldName != "AdditionalProperties" {
					delete(additionalProperties, fieldName)
				}
			}
		}

		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableWorkloadBaseBlueprintReference struct {
	value *WorkloadBaseBlueprintReference
	isSet bool
}

func (v NullableWorkloadBaseBlueprintReference) Get() *WorkloadBaseBlueprintReference {
	return v.value
}

func (v *NullableWorkloadBaseBlueprintReference) Set(val *WorkloadBaseBlueprintReference) {
	v.value = val
	v.isSet = true
}

func (v NullableWorkloadBaseBlueprintReference) IsSet() bool {
	return v.isSet
}

func (v *NullableWorkloadBaseBlueprintReference) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWorkloadBaseBlueprintReference(val *WorkloadBaseBlueprintReference) *NullableWorkloadBaseBlueprintReference {
	return &NullableWorkloadBaseBlueprintReference{value: val, isSet: true}
}

func (v NullableWorkloadBaseBlueprintReference) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWorkloadBaseBlueprintReference) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
