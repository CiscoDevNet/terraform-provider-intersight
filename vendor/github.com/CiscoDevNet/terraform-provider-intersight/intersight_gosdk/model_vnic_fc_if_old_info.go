/*
Cisco Intersight

Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations. The Intersight OpenAPI document defines the complete set of properties that are returned in the HTTP response. From that perspective, a client can expect that no additional properties are returned, unless these properties are explicitly defined in the OpenAPI document. However, when a client uses an older version of the Intersight OpenAPI document, the server may send additional properties because the software is more recent than the client. In that case, the client may receive properties that it does not know about. Some generated SDKs perform a strict validation of the HTTP response body against the OpenAPI document.

API version: 1.0.11-2025101412
Contact: intersight@cisco.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package intersight

import (
	"encoding/json"
	"fmt"
	"reflect"
	"strings"
)

// checks if the VnicFcIfOldInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VnicFcIfOldInfo{}

// VnicFcIfOldInfo Deployed information related to lease and vif id.
type VnicFcIfOldInfo struct {
	MoBaseComplexType
	// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.
	ClassId string `json:"ClassId"`
	// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
	ObjectType string `json:"ObjectType"`
	// The WWPN address must be in hexadecimal format xx:xx:xx:xx:xx:xx:xx:xx. Allowed ranges are 20:00:00:00:00:00:00:00 to 20:FF:FF:FF:FF:FF:FF:FF or from 50:00:00:00:00:00:00:00 to 5F:FF:FF:FF:FF:FF:FF:FF. To ensure uniqueness of WWN's in the SAN fabric, you are strongly encouraged to use the WWN prefix - 20:00:00:25:B5:xx:xx:xx.
	StaticWwpnAddress *string `json:"StaticWwpnAddress,omitempty" validate:"regexp=^$|((^20|5[0-9a-fA-F]{1}):([0-9a-fA-F]{2}:){6}([0-9a-fA-F]{2})$)"`
	// Old Vif id that was associated with the interface.
	VifId *int64 `json:"VifId,omitempty"`
	// The WWPN address that is assigned to the vHBA based on the wwn pool that has been assigned to the SAN Connectivity Policy.
	Wwpn *string `json:"Wwpn,omitempty" validate:"regexp=^$|((^20|5[0-9a-fA-F]{1}):([0-9a-fA-F]{2}:){6}([0-9a-fA-F]{2})$)"`
	// Type of allocation selected to assign a WWPN address to the vhba. * `POOL` - The user selects a pool from which the mac/wwn address will be leased for the Virtual Interface. * `STATIC` - The user assigns a static mac/wwn address for the Virtual Interface.
	WwpnAddressType      *string  `json:"WwpnAddressType,omitempty"`
	WwpnPool             *MoMoRef `json:"WwpnPool,omitempty"`
	Wwpnlease            *MoMoRef `json:"Wwpnlease,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _VnicFcIfOldInfo VnicFcIfOldInfo

// NewVnicFcIfOldInfo instantiates a new VnicFcIfOldInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVnicFcIfOldInfo(classId string, objectType string) *VnicFcIfOldInfo {
	this := VnicFcIfOldInfo{}
	this.ClassId = classId
	this.ObjectType = objectType
	return &this
}

// NewVnicFcIfOldInfoWithDefaults instantiates a new VnicFcIfOldInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVnicFcIfOldInfoWithDefaults() *VnicFcIfOldInfo {
	this := VnicFcIfOldInfo{}
	var classId string = "vnic.FcIfOldInfo"
	this.ClassId = classId
	var objectType string = "vnic.FcIfOldInfo"
	this.ObjectType = objectType
	return &this
}

// GetClassId returns the ClassId field value
func (o *VnicFcIfOldInfo) GetClassId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ClassId
}

// GetClassIdOk returns a tuple with the ClassId field value
// and a boolean to check if the value has been set.
func (o *VnicFcIfOldInfo) GetClassIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ClassId, true
}

// SetClassId sets field value
func (o *VnicFcIfOldInfo) SetClassId(v string) {
	o.ClassId = v
}

// GetDefaultClassId returns the default value "vnic.FcIfOldInfo" of the ClassId field.
func (o *VnicFcIfOldInfo) GetDefaultClassId() interface{} {
	return "vnic.FcIfOldInfo"
}

// GetObjectType returns the ObjectType field value
func (o *VnicFcIfOldInfo) GetObjectType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ObjectType
}

// GetObjectTypeOk returns a tuple with the ObjectType field value
// and a boolean to check if the value has been set.
func (o *VnicFcIfOldInfo) GetObjectTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ObjectType, true
}

// SetObjectType sets field value
func (o *VnicFcIfOldInfo) SetObjectType(v string) {
	o.ObjectType = v
}

// GetDefaultObjectType returns the default value "vnic.FcIfOldInfo" of the ObjectType field.
func (o *VnicFcIfOldInfo) GetDefaultObjectType() interface{} {
	return "vnic.FcIfOldInfo"
}

// GetStaticWwpnAddress returns the StaticWwpnAddress field value if set, zero value otherwise.
func (o *VnicFcIfOldInfo) GetStaticWwpnAddress() string {
	if o == nil || IsNil(o.StaticWwpnAddress) {
		var ret string
		return ret
	}
	return *o.StaticWwpnAddress
}

// GetStaticWwpnAddressOk returns a tuple with the StaticWwpnAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VnicFcIfOldInfo) GetStaticWwpnAddressOk() (*string, bool) {
	if o == nil || IsNil(o.StaticWwpnAddress) {
		return nil, false
	}
	return o.StaticWwpnAddress, true
}

// HasStaticWwpnAddress returns a boolean if a field has been set.
func (o *VnicFcIfOldInfo) HasStaticWwpnAddress() bool {
	if o != nil && !IsNil(o.StaticWwpnAddress) {
		return true
	}

	return false
}

// SetStaticWwpnAddress gets a reference to the given string and assigns it to the StaticWwpnAddress field.
func (o *VnicFcIfOldInfo) SetStaticWwpnAddress(v string) {
	o.StaticWwpnAddress = &v
}

// GetVifId returns the VifId field value if set, zero value otherwise.
func (o *VnicFcIfOldInfo) GetVifId() int64 {
	if o == nil || IsNil(o.VifId) {
		var ret int64
		return ret
	}
	return *o.VifId
}

// GetVifIdOk returns a tuple with the VifId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VnicFcIfOldInfo) GetVifIdOk() (*int64, bool) {
	if o == nil || IsNil(o.VifId) {
		return nil, false
	}
	return o.VifId, true
}

// HasVifId returns a boolean if a field has been set.
func (o *VnicFcIfOldInfo) HasVifId() bool {
	if o != nil && !IsNil(o.VifId) {
		return true
	}

	return false
}

// SetVifId gets a reference to the given int64 and assigns it to the VifId field.
func (o *VnicFcIfOldInfo) SetVifId(v int64) {
	o.VifId = &v
}

// GetWwpn returns the Wwpn field value if set, zero value otherwise.
func (o *VnicFcIfOldInfo) GetWwpn() string {
	if o == nil || IsNil(o.Wwpn) {
		var ret string
		return ret
	}
	return *o.Wwpn
}

// GetWwpnOk returns a tuple with the Wwpn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VnicFcIfOldInfo) GetWwpnOk() (*string, bool) {
	if o == nil || IsNil(o.Wwpn) {
		return nil, false
	}
	return o.Wwpn, true
}

// HasWwpn returns a boolean if a field has been set.
func (o *VnicFcIfOldInfo) HasWwpn() bool {
	if o != nil && !IsNil(o.Wwpn) {
		return true
	}

	return false
}

// SetWwpn gets a reference to the given string and assigns it to the Wwpn field.
func (o *VnicFcIfOldInfo) SetWwpn(v string) {
	o.Wwpn = &v
}

// GetWwpnAddressType returns the WwpnAddressType field value if set, zero value otherwise.
func (o *VnicFcIfOldInfo) GetWwpnAddressType() string {
	if o == nil || IsNil(o.WwpnAddressType) {
		var ret string
		return ret
	}
	return *o.WwpnAddressType
}

// GetWwpnAddressTypeOk returns a tuple with the WwpnAddressType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VnicFcIfOldInfo) GetWwpnAddressTypeOk() (*string, bool) {
	if o == nil || IsNil(o.WwpnAddressType) {
		return nil, false
	}
	return o.WwpnAddressType, true
}

// HasWwpnAddressType returns a boolean if a field has been set.
func (o *VnicFcIfOldInfo) HasWwpnAddressType() bool {
	if o != nil && !IsNil(o.WwpnAddressType) {
		return true
	}

	return false
}

// SetWwpnAddressType gets a reference to the given string and assigns it to the WwpnAddressType field.
func (o *VnicFcIfOldInfo) SetWwpnAddressType(v string) {
	o.WwpnAddressType = &v
}

// GetWwpnPool returns the WwpnPool field value if set, zero value otherwise.
func (o *VnicFcIfOldInfo) GetWwpnPool() MoMoRef {
	if o == nil || IsNil(o.WwpnPool) {
		var ret MoMoRef
		return ret
	}
	return *o.WwpnPool
}

// GetWwpnPoolOk returns a tuple with the WwpnPool field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VnicFcIfOldInfo) GetWwpnPoolOk() (*MoMoRef, bool) {
	if o == nil || IsNil(o.WwpnPool) {
		return nil, false
	}
	return o.WwpnPool, true
}

// HasWwpnPool returns a boolean if a field has been set.
func (o *VnicFcIfOldInfo) HasWwpnPool() bool {
	if o != nil && !IsNil(o.WwpnPool) {
		return true
	}

	return false
}

// SetWwpnPool gets a reference to the given MoMoRef and assigns it to the WwpnPool field.
func (o *VnicFcIfOldInfo) SetWwpnPool(v MoMoRef) {
	o.WwpnPool = &v
}

// GetWwpnlease returns the Wwpnlease field value if set, zero value otherwise.
func (o *VnicFcIfOldInfo) GetWwpnlease() MoMoRef {
	if o == nil || IsNil(o.Wwpnlease) {
		var ret MoMoRef
		return ret
	}
	return *o.Wwpnlease
}

// GetWwpnleaseOk returns a tuple with the Wwpnlease field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VnicFcIfOldInfo) GetWwpnleaseOk() (*MoMoRef, bool) {
	if o == nil || IsNil(o.Wwpnlease) {
		return nil, false
	}
	return o.Wwpnlease, true
}

// HasWwpnlease returns a boolean if a field has been set.
func (o *VnicFcIfOldInfo) HasWwpnlease() bool {
	if o != nil && !IsNil(o.Wwpnlease) {
		return true
	}

	return false
}

// SetWwpnlease gets a reference to the given MoMoRef and assigns it to the Wwpnlease field.
func (o *VnicFcIfOldInfo) SetWwpnlease(v MoMoRef) {
	o.Wwpnlease = &v
}

func (o VnicFcIfOldInfo) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VnicFcIfOldInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	serializedMoBaseComplexType, errMoBaseComplexType := json.Marshal(o.MoBaseComplexType)
	if errMoBaseComplexType != nil {
		return map[string]interface{}{}, errMoBaseComplexType
	}
	errMoBaseComplexType = json.Unmarshal([]byte(serializedMoBaseComplexType), &toSerialize)
	if errMoBaseComplexType != nil {
		return map[string]interface{}{}, errMoBaseComplexType
	}
	if _, exists := toSerialize["ClassId"]; !exists {
		toSerialize["ClassId"] = o.GetDefaultClassId()
	}
	toSerialize["ClassId"] = o.ClassId
	if _, exists := toSerialize["ObjectType"]; !exists {
		toSerialize["ObjectType"] = o.GetDefaultObjectType()
	}
	toSerialize["ObjectType"] = o.ObjectType
	if !IsNil(o.StaticWwpnAddress) {
		toSerialize["StaticWwpnAddress"] = o.StaticWwpnAddress
	}
	if !IsNil(o.VifId) {
		toSerialize["VifId"] = o.VifId
	}
	if !IsNil(o.Wwpn) {
		toSerialize["Wwpn"] = o.Wwpn
	}
	if !IsNil(o.WwpnAddressType) {
		toSerialize["WwpnAddressType"] = o.WwpnAddressType
	}
	if !IsNil(o.WwpnPool) {
		toSerialize["WwpnPool"] = o.WwpnPool
	}
	if !IsNil(o.Wwpnlease) {
		toSerialize["Wwpnlease"] = o.Wwpnlease
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *VnicFcIfOldInfo) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"ClassId",
		"ObjectType",
	}

	// defaultValueFuncMap captures the default values for required properties.
	// These values are used when required properties are missing from the payload.
	defaultValueFuncMap := map[string]func() interface{}{
		"ClassId":    o.GetDefaultClassId,
		"ObjectType": o.GetDefaultObjectType,
	}
	var defaultValueApplied bool
	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			if _, ok := defaultValueFuncMap[requiredProperty]; ok {
				allProperties[requiredProperty] = defaultValueFuncMap[requiredProperty]()
				defaultValueApplied = true
			}
		}
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	if defaultValueApplied {
		data, err = json.Marshal(allProperties)
		if err != nil {
			return err
		}
	}
	type VnicFcIfOldInfoWithoutEmbeddedStruct struct {
		// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.
		ClassId string `json:"ClassId"`
		// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
		ObjectType string `json:"ObjectType"`
		// The WWPN address must be in hexadecimal format xx:xx:xx:xx:xx:xx:xx:xx. Allowed ranges are 20:00:00:00:00:00:00:00 to 20:FF:FF:FF:FF:FF:FF:FF or from 50:00:00:00:00:00:00:00 to 5F:FF:FF:FF:FF:FF:FF:FF. To ensure uniqueness of WWN's in the SAN fabric, you are strongly encouraged to use the WWN prefix - 20:00:00:25:B5:xx:xx:xx.
		StaticWwpnAddress *string `json:"StaticWwpnAddress,omitempty" validate:"regexp=^$|((^20|5[0-9a-fA-F]{1}):([0-9a-fA-F]{2}:){6}([0-9a-fA-F]{2})$)"`
		// Old Vif id that was associated with the interface.
		VifId *int64 `json:"VifId,omitempty"`
		// The WWPN address that is assigned to the vHBA based on the wwn pool that has been assigned to the SAN Connectivity Policy.
		Wwpn *string `json:"Wwpn,omitempty" validate:"regexp=^$|((^20|5[0-9a-fA-F]{1}):([0-9a-fA-F]{2}:){6}([0-9a-fA-F]{2})$)"`
		// Type of allocation selected to assign a WWPN address to the vhba. * `POOL` - The user selects a pool from which the mac/wwn address will be leased for the Virtual Interface. * `STATIC` - The user assigns a static mac/wwn address for the Virtual Interface.
		WwpnAddressType *string  `json:"WwpnAddressType,omitempty"`
		WwpnPool        *MoMoRef `json:"WwpnPool,omitempty"`
		Wwpnlease       *MoMoRef `json:"Wwpnlease,omitempty"`
	}

	varVnicFcIfOldInfoWithoutEmbeddedStruct := VnicFcIfOldInfoWithoutEmbeddedStruct{}

	err = json.Unmarshal(data, &varVnicFcIfOldInfoWithoutEmbeddedStruct)
	if err == nil {
		varVnicFcIfOldInfo := _VnicFcIfOldInfo{}
		varVnicFcIfOldInfo.ClassId = varVnicFcIfOldInfoWithoutEmbeddedStruct.ClassId
		varVnicFcIfOldInfo.ObjectType = varVnicFcIfOldInfoWithoutEmbeddedStruct.ObjectType
		varVnicFcIfOldInfo.StaticWwpnAddress = varVnicFcIfOldInfoWithoutEmbeddedStruct.StaticWwpnAddress
		varVnicFcIfOldInfo.VifId = varVnicFcIfOldInfoWithoutEmbeddedStruct.VifId
		varVnicFcIfOldInfo.Wwpn = varVnicFcIfOldInfoWithoutEmbeddedStruct.Wwpn
		varVnicFcIfOldInfo.WwpnAddressType = varVnicFcIfOldInfoWithoutEmbeddedStruct.WwpnAddressType
		varVnicFcIfOldInfo.WwpnPool = varVnicFcIfOldInfoWithoutEmbeddedStruct.WwpnPool
		varVnicFcIfOldInfo.Wwpnlease = varVnicFcIfOldInfoWithoutEmbeddedStruct.Wwpnlease
		*o = VnicFcIfOldInfo(varVnicFcIfOldInfo)
	} else {
		return err
	}

	varVnicFcIfOldInfo := _VnicFcIfOldInfo{}

	err = json.Unmarshal(data, &varVnicFcIfOldInfo)
	if err == nil {
		o.MoBaseComplexType = varVnicFcIfOldInfo.MoBaseComplexType
	} else {
		return err
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "ClassId")
		delete(additionalProperties, "ObjectType")
		delete(additionalProperties, "StaticWwpnAddress")
		delete(additionalProperties, "VifId")
		delete(additionalProperties, "Wwpn")
		delete(additionalProperties, "WwpnAddressType")
		delete(additionalProperties, "WwpnPool")
		delete(additionalProperties, "Wwpnlease")

		// remove fields from embedded structs
		reflectMoBaseComplexType := reflect.ValueOf(o.MoBaseComplexType)
		for i := 0; i < reflectMoBaseComplexType.Type().NumField(); i++ {
			t := reflectMoBaseComplexType.Type().Field(i)

			if jsonTag := t.Tag.Get("json"); jsonTag != "" {
				fieldName := ""
				if commaIdx := strings.Index(jsonTag, ","); commaIdx > 0 {
					fieldName = jsonTag[:commaIdx]
				} else {
					fieldName = jsonTag
				}
				if fieldName != "AdditionalProperties" {
					delete(additionalProperties, fieldName)
				}
			}
		}

		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableVnicFcIfOldInfo struct {
	value *VnicFcIfOldInfo
	isSet bool
}

func (v NullableVnicFcIfOldInfo) Get() *VnicFcIfOldInfo {
	return v.value
}

func (v *NullableVnicFcIfOldInfo) Set(val *VnicFcIfOldInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableVnicFcIfOldInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableVnicFcIfOldInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVnicFcIfOldInfo(val *VnicFcIfOldInfo) *NullableVnicFcIfOldInfo {
	return &NullableVnicFcIfOldInfo{value: val, isSet: true}
}

func (v NullableVnicFcIfOldInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVnicFcIfOldInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
