/*
Cisco Intersight

Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations. The Intersight OpenAPI document defines the complete set of properties that are returned in the HTTP response. From that perspective, a client can expect that no additional properties are returned, unless these properties are explicitly defined in the OpenAPI document. However, when a client uses an older version of the Intersight OpenAPI document, the server may send additional properties because the software is more recent than the client. In that case, the client may receive properties that it does not know about. Some generated SDKs perform a strict validation of the HTTP response body against the OpenAPI document.

API version: 1.0.11-2025101412
Contact: intersight@cisco.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package intersight

import (
	"encoding/json"
	"fmt"
	"reflect"
	"strings"
)

// checks if the PciNodeSetting type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PciNodeSetting{}

// PciNodeSetting Models the configurable properties of a PCIe Node in Intersight.
type PciNodeSetting struct {
	InventoryBase
	// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.
	ClassId string `json:"ClassId"`
	// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
	ObjectType string `json:"ObjectType"`
	// User configured action on the PCIe Node. * `None` - Placeholder default value for PCIe Node admin state property. * `Reboot` - PCIe node reboot state property value.
	AdminAction *string `json:"AdminAction,omitempty"`
	// User configured state of the locator LED for the PCIe Node. * `None` - No operation property for locator led. * `On` - The Locator Led is turned on. * `Off` - The Locator Led is turned off.
	AdminLocatorLedState *string `json:"AdminLocatorLedState,omitempty"`
	// The configured state of these settings in the target server. The value is any one of Applied, Applying, Failed. Applied - This state denotes that the settings are applied successfully in the target server. Applying - This state denotes that the settings are being applied in the target server. Failed - This state denotes that the settings could not be applied in the target server. * `Applied` - User configured settings are in applied state. * `Applying` - User settings are being applied on the target server. * `Scheduled` - User configured settings are scheduled to be applied. * `Failed` - User configured settings could not be applied.
	ConfigState *string `json:"ConfigState,omitempty"`
	// The property used to identify the PCIe node it is associated with.
	Name                 *string                                     `json:"Name,omitempty"`
	NodeOpStatus         []ComputeServerOpStatus                     `json:"NodeOpStatus,omitempty"`
	LocatorLed           NullableEquipmentLocatorLedRelationship     `json:"LocatorLed,omitempty"`
	PciNode              NullablePciNodeRelationship                 `json:"PciNode,omitempty"`
	RegisteredDevice     NullableAssetDeviceRegistrationRelationship `json:"RegisteredDevice,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _PciNodeSetting PciNodeSetting

// NewPciNodeSetting instantiates a new PciNodeSetting object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPciNodeSetting(classId string, objectType string) *PciNodeSetting {
	this := PciNodeSetting{}
	this.ClassId = classId
	this.ObjectType = objectType
	var adminAction string = "None"
	this.AdminAction = &adminAction
	var adminLocatorLedState string = "None"
	this.AdminLocatorLedState = &adminLocatorLedState
	return &this
}

// NewPciNodeSettingWithDefaults instantiates a new PciNodeSetting object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPciNodeSettingWithDefaults() *PciNodeSetting {
	this := PciNodeSetting{}
	var classId string = "pci.NodeSetting"
	this.ClassId = classId
	var objectType string = "pci.NodeSetting"
	this.ObjectType = objectType
	var adminAction string = "None"
	this.AdminAction = &adminAction
	var adminLocatorLedState string = "None"
	this.AdminLocatorLedState = &adminLocatorLedState
	return &this
}

// GetClassId returns the ClassId field value
func (o *PciNodeSetting) GetClassId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ClassId
}

// GetClassIdOk returns a tuple with the ClassId field value
// and a boolean to check if the value has been set.
func (o *PciNodeSetting) GetClassIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ClassId, true
}

// SetClassId sets field value
func (o *PciNodeSetting) SetClassId(v string) {
	o.ClassId = v
}

// GetDefaultClassId returns the default value "pci.NodeSetting" of the ClassId field.
func (o *PciNodeSetting) GetDefaultClassId() interface{} {
	return "pci.NodeSetting"
}

// GetObjectType returns the ObjectType field value
func (o *PciNodeSetting) GetObjectType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ObjectType
}

// GetObjectTypeOk returns a tuple with the ObjectType field value
// and a boolean to check if the value has been set.
func (o *PciNodeSetting) GetObjectTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ObjectType, true
}

// SetObjectType sets field value
func (o *PciNodeSetting) SetObjectType(v string) {
	o.ObjectType = v
}

// GetDefaultObjectType returns the default value "pci.NodeSetting" of the ObjectType field.
func (o *PciNodeSetting) GetDefaultObjectType() interface{} {
	return "pci.NodeSetting"
}

// GetAdminAction returns the AdminAction field value if set, zero value otherwise.
func (o *PciNodeSetting) GetAdminAction() string {
	if o == nil || IsNil(o.AdminAction) {
		var ret string
		return ret
	}
	return *o.AdminAction
}

// GetAdminActionOk returns a tuple with the AdminAction field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PciNodeSetting) GetAdminActionOk() (*string, bool) {
	if o == nil || IsNil(o.AdminAction) {
		return nil, false
	}
	return o.AdminAction, true
}

// HasAdminAction returns a boolean if a field has been set.
func (o *PciNodeSetting) HasAdminAction() bool {
	if o != nil && !IsNil(o.AdminAction) {
		return true
	}

	return false
}

// SetAdminAction gets a reference to the given string and assigns it to the AdminAction field.
func (o *PciNodeSetting) SetAdminAction(v string) {
	o.AdminAction = &v
}

// GetAdminLocatorLedState returns the AdminLocatorLedState field value if set, zero value otherwise.
func (o *PciNodeSetting) GetAdminLocatorLedState() string {
	if o == nil || IsNil(o.AdminLocatorLedState) {
		var ret string
		return ret
	}
	return *o.AdminLocatorLedState
}

// GetAdminLocatorLedStateOk returns a tuple with the AdminLocatorLedState field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PciNodeSetting) GetAdminLocatorLedStateOk() (*string, bool) {
	if o == nil || IsNil(o.AdminLocatorLedState) {
		return nil, false
	}
	return o.AdminLocatorLedState, true
}

// HasAdminLocatorLedState returns a boolean if a field has been set.
func (o *PciNodeSetting) HasAdminLocatorLedState() bool {
	if o != nil && !IsNil(o.AdminLocatorLedState) {
		return true
	}

	return false
}

// SetAdminLocatorLedState gets a reference to the given string and assigns it to the AdminLocatorLedState field.
func (o *PciNodeSetting) SetAdminLocatorLedState(v string) {
	o.AdminLocatorLedState = &v
}

// GetConfigState returns the ConfigState field value if set, zero value otherwise.
func (o *PciNodeSetting) GetConfigState() string {
	if o == nil || IsNil(o.ConfigState) {
		var ret string
		return ret
	}
	return *o.ConfigState
}

// GetConfigStateOk returns a tuple with the ConfigState field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PciNodeSetting) GetConfigStateOk() (*string, bool) {
	if o == nil || IsNil(o.ConfigState) {
		return nil, false
	}
	return o.ConfigState, true
}

// HasConfigState returns a boolean if a field has been set.
func (o *PciNodeSetting) HasConfigState() bool {
	if o != nil && !IsNil(o.ConfigState) {
		return true
	}

	return false
}

// SetConfigState gets a reference to the given string and assigns it to the ConfigState field.
func (o *PciNodeSetting) SetConfigState(v string) {
	o.ConfigState = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *PciNodeSetting) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PciNodeSetting) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *PciNodeSetting) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *PciNodeSetting) SetName(v string) {
	o.Name = &v
}

// GetNodeOpStatus returns the NodeOpStatus field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PciNodeSetting) GetNodeOpStatus() []ComputeServerOpStatus {
	if o == nil {
		var ret []ComputeServerOpStatus
		return ret
	}
	return o.NodeOpStatus
}

// GetNodeOpStatusOk returns a tuple with the NodeOpStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PciNodeSetting) GetNodeOpStatusOk() ([]ComputeServerOpStatus, bool) {
	if o == nil || IsNil(o.NodeOpStatus) {
		return nil, false
	}
	return o.NodeOpStatus, true
}

// HasNodeOpStatus returns a boolean if a field has been set.
func (o *PciNodeSetting) HasNodeOpStatus() bool {
	if o != nil && !IsNil(o.NodeOpStatus) {
		return true
	}

	return false
}

// SetNodeOpStatus gets a reference to the given []ComputeServerOpStatus and assigns it to the NodeOpStatus field.
func (o *PciNodeSetting) SetNodeOpStatus(v []ComputeServerOpStatus) {
	o.NodeOpStatus = v
}

// GetLocatorLed returns the LocatorLed field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PciNodeSetting) GetLocatorLed() EquipmentLocatorLedRelationship {
	if o == nil || IsNil(o.LocatorLed.Get()) {
		var ret EquipmentLocatorLedRelationship
		return ret
	}
	return *o.LocatorLed.Get()
}

// GetLocatorLedOk returns a tuple with the LocatorLed field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PciNodeSetting) GetLocatorLedOk() (*EquipmentLocatorLedRelationship, bool) {
	if o == nil {
		return nil, false
	}
	return o.LocatorLed.Get(), o.LocatorLed.IsSet()
}

// HasLocatorLed returns a boolean if a field has been set.
func (o *PciNodeSetting) HasLocatorLed() bool {
	if o != nil && o.LocatorLed.IsSet() {
		return true
	}

	return false
}

// SetLocatorLed gets a reference to the given NullableEquipmentLocatorLedRelationship and assigns it to the LocatorLed field.
func (o *PciNodeSetting) SetLocatorLed(v EquipmentLocatorLedRelationship) {
	o.LocatorLed.Set(&v)
}

// SetLocatorLedNil sets the value for LocatorLed to be an explicit nil
func (o *PciNodeSetting) SetLocatorLedNil() {
	o.LocatorLed.Set(nil)
}

// UnsetLocatorLed ensures that no value is present for LocatorLed, not even an explicit nil
func (o *PciNodeSetting) UnsetLocatorLed() {
	o.LocatorLed.Unset()
}

// GetPciNode returns the PciNode field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PciNodeSetting) GetPciNode() PciNodeRelationship {
	if o == nil || IsNil(o.PciNode.Get()) {
		var ret PciNodeRelationship
		return ret
	}
	return *o.PciNode.Get()
}

// GetPciNodeOk returns a tuple with the PciNode field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PciNodeSetting) GetPciNodeOk() (*PciNodeRelationship, bool) {
	if o == nil {
		return nil, false
	}
	return o.PciNode.Get(), o.PciNode.IsSet()
}

// HasPciNode returns a boolean if a field has been set.
func (o *PciNodeSetting) HasPciNode() bool {
	if o != nil && o.PciNode.IsSet() {
		return true
	}

	return false
}

// SetPciNode gets a reference to the given NullablePciNodeRelationship and assigns it to the PciNode field.
func (o *PciNodeSetting) SetPciNode(v PciNodeRelationship) {
	o.PciNode.Set(&v)
}

// SetPciNodeNil sets the value for PciNode to be an explicit nil
func (o *PciNodeSetting) SetPciNodeNil() {
	o.PciNode.Set(nil)
}

// UnsetPciNode ensures that no value is present for PciNode, not even an explicit nil
func (o *PciNodeSetting) UnsetPciNode() {
	o.PciNode.Unset()
}

// GetRegisteredDevice returns the RegisteredDevice field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PciNodeSetting) GetRegisteredDevice() AssetDeviceRegistrationRelationship {
	if o == nil || IsNil(o.RegisteredDevice.Get()) {
		var ret AssetDeviceRegistrationRelationship
		return ret
	}
	return *o.RegisteredDevice.Get()
}

// GetRegisteredDeviceOk returns a tuple with the RegisteredDevice field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PciNodeSetting) GetRegisteredDeviceOk() (*AssetDeviceRegistrationRelationship, bool) {
	if o == nil {
		return nil, false
	}
	return o.RegisteredDevice.Get(), o.RegisteredDevice.IsSet()
}

// HasRegisteredDevice returns a boolean if a field has been set.
func (o *PciNodeSetting) HasRegisteredDevice() bool {
	if o != nil && o.RegisteredDevice.IsSet() {
		return true
	}

	return false
}

// SetRegisteredDevice gets a reference to the given NullableAssetDeviceRegistrationRelationship and assigns it to the RegisteredDevice field.
func (o *PciNodeSetting) SetRegisteredDevice(v AssetDeviceRegistrationRelationship) {
	o.RegisteredDevice.Set(&v)
}

// SetRegisteredDeviceNil sets the value for RegisteredDevice to be an explicit nil
func (o *PciNodeSetting) SetRegisteredDeviceNil() {
	o.RegisteredDevice.Set(nil)
}

// UnsetRegisteredDevice ensures that no value is present for RegisteredDevice, not even an explicit nil
func (o *PciNodeSetting) UnsetRegisteredDevice() {
	o.RegisteredDevice.Unset()
}

func (o PciNodeSetting) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PciNodeSetting) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	serializedInventoryBase, errInventoryBase := json.Marshal(o.InventoryBase)
	if errInventoryBase != nil {
		return map[string]interface{}{}, errInventoryBase
	}
	errInventoryBase = json.Unmarshal([]byte(serializedInventoryBase), &toSerialize)
	if errInventoryBase != nil {
		return map[string]interface{}{}, errInventoryBase
	}
	if _, exists := toSerialize["ClassId"]; !exists {
		toSerialize["ClassId"] = o.GetDefaultClassId()
	}
	toSerialize["ClassId"] = o.ClassId
	if _, exists := toSerialize["ObjectType"]; !exists {
		toSerialize["ObjectType"] = o.GetDefaultObjectType()
	}
	toSerialize["ObjectType"] = o.ObjectType
	if !IsNil(o.AdminAction) {
		toSerialize["AdminAction"] = o.AdminAction
	}
	if !IsNil(o.AdminLocatorLedState) {
		toSerialize["AdminLocatorLedState"] = o.AdminLocatorLedState
	}
	if !IsNil(o.ConfigState) {
		toSerialize["ConfigState"] = o.ConfigState
	}
	if !IsNil(o.Name) {
		toSerialize["Name"] = o.Name
	}
	if o.NodeOpStatus != nil {
		toSerialize["NodeOpStatus"] = o.NodeOpStatus
	}
	if o.LocatorLed.IsSet() {
		toSerialize["LocatorLed"] = o.LocatorLed.Get()
	}
	if o.PciNode.IsSet() {
		toSerialize["PciNode"] = o.PciNode.Get()
	}
	if o.RegisteredDevice.IsSet() {
		toSerialize["RegisteredDevice"] = o.RegisteredDevice.Get()
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *PciNodeSetting) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"ClassId",
		"ObjectType",
	}

	// defaultValueFuncMap captures the default values for required properties.
	// These values are used when required properties are missing from the payload.
	defaultValueFuncMap := map[string]func() interface{}{
		"ClassId":    o.GetDefaultClassId,
		"ObjectType": o.GetDefaultObjectType,
	}
	var defaultValueApplied bool
	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			if _, ok := defaultValueFuncMap[requiredProperty]; ok {
				allProperties[requiredProperty] = defaultValueFuncMap[requiredProperty]()
				defaultValueApplied = true
			}
		}
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	if defaultValueApplied {
		data, err = json.Marshal(allProperties)
		if err != nil {
			return err
		}
	}
	type PciNodeSettingWithoutEmbeddedStruct struct {
		// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.
		ClassId string `json:"ClassId"`
		// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
		ObjectType string `json:"ObjectType"`
		// User configured action on the PCIe Node. * `None` - Placeholder default value for PCIe Node admin state property. * `Reboot` - PCIe node reboot state property value.
		AdminAction *string `json:"AdminAction,omitempty"`
		// User configured state of the locator LED for the PCIe Node. * `None` - No operation property for locator led. * `On` - The Locator Led is turned on. * `Off` - The Locator Led is turned off.
		AdminLocatorLedState *string `json:"AdminLocatorLedState,omitempty"`
		// The configured state of these settings in the target server. The value is any one of Applied, Applying, Failed. Applied - This state denotes that the settings are applied successfully in the target server. Applying - This state denotes that the settings are being applied in the target server. Failed - This state denotes that the settings could not be applied in the target server. * `Applied` - User configured settings are in applied state. * `Applying` - User settings are being applied on the target server. * `Scheduled` - User configured settings are scheduled to be applied. * `Failed` - User configured settings could not be applied.
		ConfigState *string `json:"ConfigState,omitempty"`
		// The property used to identify the PCIe node it is associated with.
		Name             *string                                     `json:"Name,omitempty"`
		NodeOpStatus     []ComputeServerOpStatus                     `json:"NodeOpStatus,omitempty"`
		LocatorLed       NullableEquipmentLocatorLedRelationship     `json:"LocatorLed,omitempty"`
		PciNode          NullablePciNodeRelationship                 `json:"PciNode,omitempty"`
		RegisteredDevice NullableAssetDeviceRegistrationRelationship `json:"RegisteredDevice,omitempty"`
	}

	varPciNodeSettingWithoutEmbeddedStruct := PciNodeSettingWithoutEmbeddedStruct{}

	err = json.Unmarshal(data, &varPciNodeSettingWithoutEmbeddedStruct)
	if err == nil {
		varPciNodeSetting := _PciNodeSetting{}
		varPciNodeSetting.ClassId = varPciNodeSettingWithoutEmbeddedStruct.ClassId
		varPciNodeSetting.ObjectType = varPciNodeSettingWithoutEmbeddedStruct.ObjectType
		varPciNodeSetting.AdminAction = varPciNodeSettingWithoutEmbeddedStruct.AdminAction
		varPciNodeSetting.AdminLocatorLedState = varPciNodeSettingWithoutEmbeddedStruct.AdminLocatorLedState
		varPciNodeSetting.ConfigState = varPciNodeSettingWithoutEmbeddedStruct.ConfigState
		varPciNodeSetting.Name = varPciNodeSettingWithoutEmbeddedStruct.Name
		varPciNodeSetting.NodeOpStatus = varPciNodeSettingWithoutEmbeddedStruct.NodeOpStatus
		varPciNodeSetting.LocatorLed = varPciNodeSettingWithoutEmbeddedStruct.LocatorLed
		varPciNodeSetting.PciNode = varPciNodeSettingWithoutEmbeddedStruct.PciNode
		varPciNodeSetting.RegisteredDevice = varPciNodeSettingWithoutEmbeddedStruct.RegisteredDevice
		*o = PciNodeSetting(varPciNodeSetting)
	} else {
		return err
	}

	varPciNodeSetting := _PciNodeSetting{}

	err = json.Unmarshal(data, &varPciNodeSetting)
	if err == nil {
		o.InventoryBase = varPciNodeSetting.InventoryBase
	} else {
		return err
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "ClassId")
		delete(additionalProperties, "ObjectType")
		delete(additionalProperties, "AdminAction")
		delete(additionalProperties, "AdminLocatorLedState")
		delete(additionalProperties, "ConfigState")
		delete(additionalProperties, "Name")
		delete(additionalProperties, "NodeOpStatus")
		delete(additionalProperties, "LocatorLed")
		delete(additionalProperties, "PciNode")
		delete(additionalProperties, "RegisteredDevice")

		// remove fields from embedded structs
		reflectInventoryBase := reflect.ValueOf(o.InventoryBase)
		for i := 0; i < reflectInventoryBase.Type().NumField(); i++ {
			t := reflectInventoryBase.Type().Field(i)

			if jsonTag := t.Tag.Get("json"); jsonTag != "" {
				fieldName := ""
				if commaIdx := strings.Index(jsonTag, ","); commaIdx > 0 {
					fieldName = jsonTag[:commaIdx]
				} else {
					fieldName = jsonTag
				}
				if fieldName != "AdditionalProperties" {
					delete(additionalProperties, fieldName)
				}
			}
		}

		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullablePciNodeSetting struct {
	value *PciNodeSetting
	isSet bool
}

func (v NullablePciNodeSetting) Get() *PciNodeSetting {
	return v.value
}

func (v *NullablePciNodeSetting) Set(val *PciNodeSetting) {
	v.value = val
	v.isSet = true
}

func (v NullablePciNodeSetting) IsSet() bool {
	return v.isSet
}

func (v *NullablePciNodeSetting) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePciNodeSetting(val *PciNodeSetting) *NullablePciNodeSetting {
	return &NullablePciNodeSetting{value: val, isSet: true}
}

func (v NullablePciNodeSetting) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePciNodeSetting) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
