/*
Cisco Intersight

Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations. The Intersight OpenAPI document defines the complete set of properties that are returned in the HTTP response. From that perspective, a client can expect that no additional properties are returned, unless these properties are explicitly defined in the OpenAPI document. However, when a client uses an older version of the Intersight OpenAPI document, the server may send additional properties because the software is more recent than the client. In that case, the client may receive properties that it does not know about. Some generated SDKs perform a strict validation of the HTTP response body against the OpenAPI document.

API version: 1.0.11-16342
Contact: intersight@cisco.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package intersight

import (
	"encoding/json"
	"time"
)

// SchedulerTaskScheduleStatusAllOf Definition of the list of properties defined in 'scheduler.TaskScheduleStatus', excluding properties defined in parent classes.
type SchedulerTaskScheduleStatusAllOf struct {
	// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.
	ClassId string `json:"ClassId"`
	// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
	ObjectType string `json:"ObjectType"`
	// The task completion count, which includes both successful executions and any failures.
	Count *int64 `json:"Count,omitempty"`
	// The status of the current task. * `None` - No status is set (default). * `Scheduled` - The status is set when a task is scheduled. * `Running` - The status is set when a task is running. * `Completed` - The status is set when a task is complete. * `Failed` - The status is set when a task fails. * `Suspended` - The status is set when a task is suspended. * `Skipped` - The status is set when a task is skipped because the previous task is still running.
	CurrentStatus *string `json:"CurrentStatus,omitempty"`
	// Indicates if this task was suspended by the system.
	IsSystemSuspended *bool `json:"IsSystemSuspended,omitempty"`
	// The next run time for a recurrently scheduled the task.
	NextRunStartTime *time.Time `json:"NextRunStartTime,omitempty"`
	// The time when the last occurrence of scheduled task completed.
	PrevRunEndTime *time.Time `json:"PrevRunEndTime,omitempty"`
	// The previous time the scheduled task was run.
	PrevRunStartTime *time.Time `json:"PrevRunStartTime,omitempty"`
	// The reason why the task failed or suspended.
	Reason               *string `json:"Reason,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _SchedulerTaskScheduleStatusAllOf SchedulerTaskScheduleStatusAllOf

// NewSchedulerTaskScheduleStatusAllOf instantiates a new SchedulerTaskScheduleStatusAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSchedulerTaskScheduleStatusAllOf(classId string, objectType string) *SchedulerTaskScheduleStatusAllOf {
	this := SchedulerTaskScheduleStatusAllOf{}
	this.ClassId = classId
	this.ObjectType = objectType
	return &this
}

// NewSchedulerTaskScheduleStatusAllOfWithDefaults instantiates a new SchedulerTaskScheduleStatusAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSchedulerTaskScheduleStatusAllOfWithDefaults() *SchedulerTaskScheduleStatusAllOf {
	this := SchedulerTaskScheduleStatusAllOf{}
	var classId string = "scheduler.TaskScheduleStatus"
	this.ClassId = classId
	var objectType string = "scheduler.TaskScheduleStatus"
	this.ObjectType = objectType
	return &this
}

// GetClassId returns the ClassId field value
func (o *SchedulerTaskScheduleStatusAllOf) GetClassId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ClassId
}

// GetClassIdOk returns a tuple with the ClassId field value
// and a boolean to check if the value has been set.
func (o *SchedulerTaskScheduleStatusAllOf) GetClassIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ClassId, true
}

// SetClassId sets field value
func (o *SchedulerTaskScheduleStatusAllOf) SetClassId(v string) {
	o.ClassId = v
}

// GetObjectType returns the ObjectType field value
func (o *SchedulerTaskScheduleStatusAllOf) GetObjectType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ObjectType
}

// GetObjectTypeOk returns a tuple with the ObjectType field value
// and a boolean to check if the value has been set.
func (o *SchedulerTaskScheduleStatusAllOf) GetObjectTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ObjectType, true
}

// SetObjectType sets field value
func (o *SchedulerTaskScheduleStatusAllOf) SetObjectType(v string) {
	o.ObjectType = v
}

// GetCount returns the Count field value if set, zero value otherwise.
func (o *SchedulerTaskScheduleStatusAllOf) GetCount() int64 {
	if o == nil || o.Count == nil {
		var ret int64
		return ret
	}
	return *o.Count
}

// GetCountOk returns a tuple with the Count field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchedulerTaskScheduleStatusAllOf) GetCountOk() (*int64, bool) {
	if o == nil || o.Count == nil {
		return nil, false
	}
	return o.Count, true
}

// HasCount returns a boolean if a field has been set.
func (o *SchedulerTaskScheduleStatusAllOf) HasCount() bool {
	if o != nil && o.Count != nil {
		return true
	}

	return false
}

// SetCount gets a reference to the given int64 and assigns it to the Count field.
func (o *SchedulerTaskScheduleStatusAllOf) SetCount(v int64) {
	o.Count = &v
}

// GetCurrentStatus returns the CurrentStatus field value if set, zero value otherwise.
func (o *SchedulerTaskScheduleStatusAllOf) GetCurrentStatus() string {
	if o == nil || o.CurrentStatus == nil {
		var ret string
		return ret
	}
	return *o.CurrentStatus
}

// GetCurrentStatusOk returns a tuple with the CurrentStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchedulerTaskScheduleStatusAllOf) GetCurrentStatusOk() (*string, bool) {
	if o == nil || o.CurrentStatus == nil {
		return nil, false
	}
	return o.CurrentStatus, true
}

// HasCurrentStatus returns a boolean if a field has been set.
func (o *SchedulerTaskScheduleStatusAllOf) HasCurrentStatus() bool {
	if o != nil && o.CurrentStatus != nil {
		return true
	}

	return false
}

// SetCurrentStatus gets a reference to the given string and assigns it to the CurrentStatus field.
func (o *SchedulerTaskScheduleStatusAllOf) SetCurrentStatus(v string) {
	o.CurrentStatus = &v
}

// GetIsSystemSuspended returns the IsSystemSuspended field value if set, zero value otherwise.
func (o *SchedulerTaskScheduleStatusAllOf) GetIsSystemSuspended() bool {
	if o == nil || o.IsSystemSuspended == nil {
		var ret bool
		return ret
	}
	return *o.IsSystemSuspended
}

// GetIsSystemSuspendedOk returns a tuple with the IsSystemSuspended field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchedulerTaskScheduleStatusAllOf) GetIsSystemSuspendedOk() (*bool, bool) {
	if o == nil || o.IsSystemSuspended == nil {
		return nil, false
	}
	return o.IsSystemSuspended, true
}

// HasIsSystemSuspended returns a boolean if a field has been set.
func (o *SchedulerTaskScheduleStatusAllOf) HasIsSystemSuspended() bool {
	if o != nil && o.IsSystemSuspended != nil {
		return true
	}

	return false
}

// SetIsSystemSuspended gets a reference to the given bool and assigns it to the IsSystemSuspended field.
func (o *SchedulerTaskScheduleStatusAllOf) SetIsSystemSuspended(v bool) {
	o.IsSystemSuspended = &v
}

// GetNextRunStartTime returns the NextRunStartTime field value if set, zero value otherwise.
func (o *SchedulerTaskScheduleStatusAllOf) GetNextRunStartTime() time.Time {
	if o == nil || o.NextRunStartTime == nil {
		var ret time.Time
		return ret
	}
	return *o.NextRunStartTime
}

// GetNextRunStartTimeOk returns a tuple with the NextRunStartTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchedulerTaskScheduleStatusAllOf) GetNextRunStartTimeOk() (*time.Time, bool) {
	if o == nil || o.NextRunStartTime == nil {
		return nil, false
	}
	return o.NextRunStartTime, true
}

// HasNextRunStartTime returns a boolean if a field has been set.
func (o *SchedulerTaskScheduleStatusAllOf) HasNextRunStartTime() bool {
	if o != nil && o.NextRunStartTime != nil {
		return true
	}

	return false
}

// SetNextRunStartTime gets a reference to the given time.Time and assigns it to the NextRunStartTime field.
func (o *SchedulerTaskScheduleStatusAllOf) SetNextRunStartTime(v time.Time) {
	o.NextRunStartTime = &v
}

// GetPrevRunEndTime returns the PrevRunEndTime field value if set, zero value otherwise.
func (o *SchedulerTaskScheduleStatusAllOf) GetPrevRunEndTime() time.Time {
	if o == nil || o.PrevRunEndTime == nil {
		var ret time.Time
		return ret
	}
	return *o.PrevRunEndTime
}

// GetPrevRunEndTimeOk returns a tuple with the PrevRunEndTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchedulerTaskScheduleStatusAllOf) GetPrevRunEndTimeOk() (*time.Time, bool) {
	if o == nil || o.PrevRunEndTime == nil {
		return nil, false
	}
	return o.PrevRunEndTime, true
}

// HasPrevRunEndTime returns a boolean if a field has been set.
func (o *SchedulerTaskScheduleStatusAllOf) HasPrevRunEndTime() bool {
	if o != nil && o.PrevRunEndTime != nil {
		return true
	}

	return false
}

// SetPrevRunEndTime gets a reference to the given time.Time and assigns it to the PrevRunEndTime field.
func (o *SchedulerTaskScheduleStatusAllOf) SetPrevRunEndTime(v time.Time) {
	o.PrevRunEndTime = &v
}

// GetPrevRunStartTime returns the PrevRunStartTime field value if set, zero value otherwise.
func (o *SchedulerTaskScheduleStatusAllOf) GetPrevRunStartTime() time.Time {
	if o == nil || o.PrevRunStartTime == nil {
		var ret time.Time
		return ret
	}
	return *o.PrevRunStartTime
}

// GetPrevRunStartTimeOk returns a tuple with the PrevRunStartTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchedulerTaskScheduleStatusAllOf) GetPrevRunStartTimeOk() (*time.Time, bool) {
	if o == nil || o.PrevRunStartTime == nil {
		return nil, false
	}
	return o.PrevRunStartTime, true
}

// HasPrevRunStartTime returns a boolean if a field has been set.
func (o *SchedulerTaskScheduleStatusAllOf) HasPrevRunStartTime() bool {
	if o != nil && o.PrevRunStartTime != nil {
		return true
	}

	return false
}

// SetPrevRunStartTime gets a reference to the given time.Time and assigns it to the PrevRunStartTime field.
func (o *SchedulerTaskScheduleStatusAllOf) SetPrevRunStartTime(v time.Time) {
	o.PrevRunStartTime = &v
}

// GetReason returns the Reason field value if set, zero value otherwise.
func (o *SchedulerTaskScheduleStatusAllOf) GetReason() string {
	if o == nil || o.Reason == nil {
		var ret string
		return ret
	}
	return *o.Reason
}

// GetReasonOk returns a tuple with the Reason field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchedulerTaskScheduleStatusAllOf) GetReasonOk() (*string, bool) {
	if o == nil || o.Reason == nil {
		return nil, false
	}
	return o.Reason, true
}

// HasReason returns a boolean if a field has been set.
func (o *SchedulerTaskScheduleStatusAllOf) HasReason() bool {
	if o != nil && o.Reason != nil {
		return true
	}

	return false
}

// SetReason gets a reference to the given string and assigns it to the Reason field.
func (o *SchedulerTaskScheduleStatusAllOf) SetReason(v string) {
	o.Reason = &v
}

func (o SchedulerTaskScheduleStatusAllOf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["ClassId"] = o.ClassId
	}
	if true {
		toSerialize["ObjectType"] = o.ObjectType
	}
	if o.Count != nil {
		toSerialize["Count"] = o.Count
	}
	if o.CurrentStatus != nil {
		toSerialize["CurrentStatus"] = o.CurrentStatus
	}
	if o.IsSystemSuspended != nil {
		toSerialize["IsSystemSuspended"] = o.IsSystemSuspended
	}
	if o.NextRunStartTime != nil {
		toSerialize["NextRunStartTime"] = o.NextRunStartTime
	}
	if o.PrevRunEndTime != nil {
		toSerialize["PrevRunEndTime"] = o.PrevRunEndTime
	}
	if o.PrevRunStartTime != nil {
		toSerialize["PrevRunStartTime"] = o.PrevRunStartTime
	}
	if o.Reason != nil {
		toSerialize["Reason"] = o.Reason
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *SchedulerTaskScheduleStatusAllOf) UnmarshalJSON(bytes []byte) (err error) {
	varSchedulerTaskScheduleStatusAllOf := _SchedulerTaskScheduleStatusAllOf{}

	if err = json.Unmarshal(bytes, &varSchedulerTaskScheduleStatusAllOf); err == nil {
		*o = SchedulerTaskScheduleStatusAllOf(varSchedulerTaskScheduleStatusAllOf)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "ClassId")
		delete(additionalProperties, "ObjectType")
		delete(additionalProperties, "Count")
		delete(additionalProperties, "CurrentStatus")
		delete(additionalProperties, "IsSystemSuspended")
		delete(additionalProperties, "NextRunStartTime")
		delete(additionalProperties, "PrevRunEndTime")
		delete(additionalProperties, "PrevRunStartTime")
		delete(additionalProperties, "Reason")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableSchedulerTaskScheduleStatusAllOf struct {
	value *SchedulerTaskScheduleStatusAllOf
	isSet bool
}

func (v NullableSchedulerTaskScheduleStatusAllOf) Get() *SchedulerTaskScheduleStatusAllOf {
	return v.value
}

func (v *NullableSchedulerTaskScheduleStatusAllOf) Set(val *SchedulerTaskScheduleStatusAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableSchedulerTaskScheduleStatusAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableSchedulerTaskScheduleStatusAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSchedulerTaskScheduleStatusAllOf(val *SchedulerTaskScheduleStatusAllOf) *NullableSchedulerTaskScheduleStatusAllOf {
	return &NullableSchedulerTaskScheduleStatusAllOf{value: val, isSet: true}
}

func (v NullableSchedulerTaskScheduleStatusAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSchedulerTaskScheduleStatusAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
