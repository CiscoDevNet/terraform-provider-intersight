/*
Cisco Intersight

Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations. The Intersight OpenAPI document defines the complete set of properties that are returned in the HTTP response. From that perspective, a client can expect that no additional properties are returned, unless these properties are explicitly defined in the OpenAPI document. However, when a client uses an older version of the Intersight OpenAPI document, the server may send additional properties because the software is more recent than the client. In that case, the client may receive properties that it does not know about. Some generated SDKs perform a strict validation of the HTTP response body against the OpenAPI document.

API version: 1.0.11-2025071017
Contact: intersight@cisco.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package intersight

import (
	"encoding/json"
	"fmt"
	"reflect"
	"strings"
)

// checks if the StorageHitachiNvmSubsystem type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &StorageHitachiNvmSubsystem{}

// StorageHitachiNvmSubsystem NVM subsystem entity in Hitachi storage array.
type StorageHitachiNvmSubsystem struct {
	MoBaseMo
	// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.
	ClassId string `json:"ClassId"`
	// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
	ObjectType string `json:"ObjectType"`
	// Host mode of the NVM subsystem.
	HostMode        *string          `json:"HostMode,omitempty"`
	HostModeOptions []int64          `json:"HostModeOptions,omitempty"`
	HostNqns        []StorageHostNqn `json:"HostNqns,omitempty"`
	// NVM subsystem ID. NVM subsystem is a resource to manage system components in an NVMe-oF connection.
	Name           *string                `json:"Name,omitempty"`
	NamespacePaths []StorageNamespacePath `json:"NamespacePaths,omitempty"`
	// Namespace security settings.
	NamespaceSecuritySetting *string            `json:"NamespaceSecuritySetting,omitempty"`
	Namespaces               []StorageNamespace `json:"Namespaces,omitempty"`
	// NVM subsystem name. Can be up to 32 characters long.
	NvmSubsystemName *string `json:"NvmSubsystemName,omitempty"`
	// Subsystem NQN. If the NVM subsystem is virtualized, the NQN of the virtualized NVM subsystem is output.
	NvmSubsystemNqn *string  `json:"NvmSubsystemNqn,omitempty"`
	PortIds         []string `json:"PortIds,omitempty"`
	// Resource group ID of the resource group to which the NVM subsystem belongs.
	ResourceGroupId *int64 `json:"ResourceGroupId,omitempty"`
	// Status of the T10 PI mode of the port.
	T10piMode *string `json:"T10piMode,omitempty"`
	// The Virtual NVM Subsystem ID property is applicable for use with storage systems in the VSP 5000 series.
	VirtualNvmSubsystemId *int64                                      `json:"VirtualNvmSubsystemId,omitempty"`
	Array                 NullableStorageHitachiArrayRelationship     `json:"Array,omitempty"`
	RegisteredDevice      NullableAssetDeviceRegistrationRelationship `json:"RegisteredDevice,omitempty"`
	AdditionalProperties  map[string]interface{}
}

type _StorageHitachiNvmSubsystem StorageHitachiNvmSubsystem

// NewStorageHitachiNvmSubsystem instantiates a new StorageHitachiNvmSubsystem object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStorageHitachiNvmSubsystem(classId string, objectType string) *StorageHitachiNvmSubsystem {
	this := StorageHitachiNvmSubsystem{}
	this.ClassId = classId
	this.ObjectType = objectType
	return &this
}

// NewStorageHitachiNvmSubsystemWithDefaults instantiates a new StorageHitachiNvmSubsystem object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStorageHitachiNvmSubsystemWithDefaults() *StorageHitachiNvmSubsystem {
	this := StorageHitachiNvmSubsystem{}
	var classId string = "storage.HitachiNvmSubsystem"
	this.ClassId = classId
	var objectType string = "storage.HitachiNvmSubsystem"
	this.ObjectType = objectType
	return &this
}

// GetClassId returns the ClassId field value
func (o *StorageHitachiNvmSubsystem) GetClassId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ClassId
}

// GetClassIdOk returns a tuple with the ClassId field value
// and a boolean to check if the value has been set.
func (o *StorageHitachiNvmSubsystem) GetClassIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ClassId, true
}

// SetClassId sets field value
func (o *StorageHitachiNvmSubsystem) SetClassId(v string) {
	o.ClassId = v
}

// GetDefaultClassId returns the default value "storage.HitachiNvmSubsystem" of the ClassId field.
func (o *StorageHitachiNvmSubsystem) GetDefaultClassId() interface{} {
	return "storage.HitachiNvmSubsystem"
}

// GetObjectType returns the ObjectType field value
func (o *StorageHitachiNvmSubsystem) GetObjectType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ObjectType
}

// GetObjectTypeOk returns a tuple with the ObjectType field value
// and a boolean to check if the value has been set.
func (o *StorageHitachiNvmSubsystem) GetObjectTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ObjectType, true
}

// SetObjectType sets field value
func (o *StorageHitachiNvmSubsystem) SetObjectType(v string) {
	o.ObjectType = v
}

// GetDefaultObjectType returns the default value "storage.HitachiNvmSubsystem" of the ObjectType field.
func (o *StorageHitachiNvmSubsystem) GetDefaultObjectType() interface{} {
	return "storage.HitachiNvmSubsystem"
}

// GetHostMode returns the HostMode field value if set, zero value otherwise.
func (o *StorageHitachiNvmSubsystem) GetHostMode() string {
	if o == nil || IsNil(o.HostMode) {
		var ret string
		return ret
	}
	return *o.HostMode
}

// GetHostModeOk returns a tuple with the HostMode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageHitachiNvmSubsystem) GetHostModeOk() (*string, bool) {
	if o == nil || IsNil(o.HostMode) {
		return nil, false
	}
	return o.HostMode, true
}

// HasHostMode returns a boolean if a field has been set.
func (o *StorageHitachiNvmSubsystem) HasHostMode() bool {
	if o != nil && !IsNil(o.HostMode) {
		return true
	}

	return false
}

// SetHostMode gets a reference to the given string and assigns it to the HostMode field.
func (o *StorageHitachiNvmSubsystem) SetHostMode(v string) {
	o.HostMode = &v
}

// GetHostModeOptions returns the HostModeOptions field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *StorageHitachiNvmSubsystem) GetHostModeOptions() []int64 {
	if o == nil {
		var ret []int64
		return ret
	}
	return o.HostModeOptions
}

// GetHostModeOptionsOk returns a tuple with the HostModeOptions field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *StorageHitachiNvmSubsystem) GetHostModeOptionsOk() ([]int64, bool) {
	if o == nil || IsNil(o.HostModeOptions) {
		return nil, false
	}
	return o.HostModeOptions, true
}

// HasHostModeOptions returns a boolean if a field has been set.
func (o *StorageHitachiNvmSubsystem) HasHostModeOptions() bool {
	if o != nil && !IsNil(o.HostModeOptions) {
		return true
	}

	return false
}

// SetHostModeOptions gets a reference to the given []int64 and assigns it to the HostModeOptions field.
func (o *StorageHitachiNvmSubsystem) SetHostModeOptions(v []int64) {
	o.HostModeOptions = v
}

// GetHostNqns returns the HostNqns field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *StorageHitachiNvmSubsystem) GetHostNqns() []StorageHostNqn {
	if o == nil {
		var ret []StorageHostNqn
		return ret
	}
	return o.HostNqns
}

// GetHostNqnsOk returns a tuple with the HostNqns field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *StorageHitachiNvmSubsystem) GetHostNqnsOk() ([]StorageHostNqn, bool) {
	if o == nil || IsNil(o.HostNqns) {
		return nil, false
	}
	return o.HostNqns, true
}

// HasHostNqns returns a boolean if a field has been set.
func (o *StorageHitachiNvmSubsystem) HasHostNqns() bool {
	if o != nil && !IsNil(o.HostNqns) {
		return true
	}

	return false
}

// SetHostNqns gets a reference to the given []StorageHostNqn and assigns it to the HostNqns field.
func (o *StorageHitachiNvmSubsystem) SetHostNqns(v []StorageHostNqn) {
	o.HostNqns = v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *StorageHitachiNvmSubsystem) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageHitachiNvmSubsystem) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *StorageHitachiNvmSubsystem) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *StorageHitachiNvmSubsystem) SetName(v string) {
	o.Name = &v
}

// GetNamespacePaths returns the NamespacePaths field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *StorageHitachiNvmSubsystem) GetNamespacePaths() []StorageNamespacePath {
	if o == nil {
		var ret []StorageNamespacePath
		return ret
	}
	return o.NamespacePaths
}

// GetNamespacePathsOk returns a tuple with the NamespacePaths field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *StorageHitachiNvmSubsystem) GetNamespacePathsOk() ([]StorageNamespacePath, bool) {
	if o == nil || IsNil(o.NamespacePaths) {
		return nil, false
	}
	return o.NamespacePaths, true
}

// HasNamespacePaths returns a boolean if a field has been set.
func (o *StorageHitachiNvmSubsystem) HasNamespacePaths() bool {
	if o != nil && !IsNil(o.NamespacePaths) {
		return true
	}

	return false
}

// SetNamespacePaths gets a reference to the given []StorageNamespacePath and assigns it to the NamespacePaths field.
func (o *StorageHitachiNvmSubsystem) SetNamespacePaths(v []StorageNamespacePath) {
	o.NamespacePaths = v
}

// GetNamespaceSecuritySetting returns the NamespaceSecuritySetting field value if set, zero value otherwise.
func (o *StorageHitachiNvmSubsystem) GetNamespaceSecuritySetting() string {
	if o == nil || IsNil(o.NamespaceSecuritySetting) {
		var ret string
		return ret
	}
	return *o.NamespaceSecuritySetting
}

// GetNamespaceSecuritySettingOk returns a tuple with the NamespaceSecuritySetting field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageHitachiNvmSubsystem) GetNamespaceSecuritySettingOk() (*string, bool) {
	if o == nil || IsNil(o.NamespaceSecuritySetting) {
		return nil, false
	}
	return o.NamespaceSecuritySetting, true
}

// HasNamespaceSecuritySetting returns a boolean if a field has been set.
func (o *StorageHitachiNvmSubsystem) HasNamespaceSecuritySetting() bool {
	if o != nil && !IsNil(o.NamespaceSecuritySetting) {
		return true
	}

	return false
}

// SetNamespaceSecuritySetting gets a reference to the given string and assigns it to the NamespaceSecuritySetting field.
func (o *StorageHitachiNvmSubsystem) SetNamespaceSecuritySetting(v string) {
	o.NamespaceSecuritySetting = &v
}

// GetNamespaces returns the Namespaces field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *StorageHitachiNvmSubsystem) GetNamespaces() []StorageNamespace {
	if o == nil {
		var ret []StorageNamespace
		return ret
	}
	return o.Namespaces
}

// GetNamespacesOk returns a tuple with the Namespaces field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *StorageHitachiNvmSubsystem) GetNamespacesOk() ([]StorageNamespace, bool) {
	if o == nil || IsNil(o.Namespaces) {
		return nil, false
	}
	return o.Namespaces, true
}

// HasNamespaces returns a boolean if a field has been set.
func (o *StorageHitachiNvmSubsystem) HasNamespaces() bool {
	if o != nil && !IsNil(o.Namespaces) {
		return true
	}

	return false
}

// SetNamespaces gets a reference to the given []StorageNamespace and assigns it to the Namespaces field.
func (o *StorageHitachiNvmSubsystem) SetNamespaces(v []StorageNamespace) {
	o.Namespaces = v
}

// GetNvmSubsystemName returns the NvmSubsystemName field value if set, zero value otherwise.
func (o *StorageHitachiNvmSubsystem) GetNvmSubsystemName() string {
	if o == nil || IsNil(o.NvmSubsystemName) {
		var ret string
		return ret
	}
	return *o.NvmSubsystemName
}

// GetNvmSubsystemNameOk returns a tuple with the NvmSubsystemName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageHitachiNvmSubsystem) GetNvmSubsystemNameOk() (*string, bool) {
	if o == nil || IsNil(o.NvmSubsystemName) {
		return nil, false
	}
	return o.NvmSubsystemName, true
}

// HasNvmSubsystemName returns a boolean if a field has been set.
func (o *StorageHitachiNvmSubsystem) HasNvmSubsystemName() bool {
	if o != nil && !IsNil(o.NvmSubsystemName) {
		return true
	}

	return false
}

// SetNvmSubsystemName gets a reference to the given string and assigns it to the NvmSubsystemName field.
func (o *StorageHitachiNvmSubsystem) SetNvmSubsystemName(v string) {
	o.NvmSubsystemName = &v
}

// GetNvmSubsystemNqn returns the NvmSubsystemNqn field value if set, zero value otherwise.
func (o *StorageHitachiNvmSubsystem) GetNvmSubsystemNqn() string {
	if o == nil || IsNil(o.NvmSubsystemNqn) {
		var ret string
		return ret
	}
	return *o.NvmSubsystemNqn
}

// GetNvmSubsystemNqnOk returns a tuple with the NvmSubsystemNqn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageHitachiNvmSubsystem) GetNvmSubsystemNqnOk() (*string, bool) {
	if o == nil || IsNil(o.NvmSubsystemNqn) {
		return nil, false
	}
	return o.NvmSubsystemNqn, true
}

// HasNvmSubsystemNqn returns a boolean if a field has been set.
func (o *StorageHitachiNvmSubsystem) HasNvmSubsystemNqn() bool {
	if o != nil && !IsNil(o.NvmSubsystemNqn) {
		return true
	}

	return false
}

// SetNvmSubsystemNqn gets a reference to the given string and assigns it to the NvmSubsystemNqn field.
func (o *StorageHitachiNvmSubsystem) SetNvmSubsystemNqn(v string) {
	o.NvmSubsystemNqn = &v
}

// GetPortIds returns the PortIds field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *StorageHitachiNvmSubsystem) GetPortIds() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.PortIds
}

// GetPortIdsOk returns a tuple with the PortIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *StorageHitachiNvmSubsystem) GetPortIdsOk() ([]string, bool) {
	if o == nil || IsNil(o.PortIds) {
		return nil, false
	}
	return o.PortIds, true
}

// HasPortIds returns a boolean if a field has been set.
func (o *StorageHitachiNvmSubsystem) HasPortIds() bool {
	if o != nil && !IsNil(o.PortIds) {
		return true
	}

	return false
}

// SetPortIds gets a reference to the given []string and assigns it to the PortIds field.
func (o *StorageHitachiNvmSubsystem) SetPortIds(v []string) {
	o.PortIds = v
}

// GetResourceGroupId returns the ResourceGroupId field value if set, zero value otherwise.
func (o *StorageHitachiNvmSubsystem) GetResourceGroupId() int64 {
	if o == nil || IsNil(o.ResourceGroupId) {
		var ret int64
		return ret
	}
	return *o.ResourceGroupId
}

// GetResourceGroupIdOk returns a tuple with the ResourceGroupId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageHitachiNvmSubsystem) GetResourceGroupIdOk() (*int64, bool) {
	if o == nil || IsNil(o.ResourceGroupId) {
		return nil, false
	}
	return o.ResourceGroupId, true
}

// HasResourceGroupId returns a boolean if a field has been set.
func (o *StorageHitachiNvmSubsystem) HasResourceGroupId() bool {
	if o != nil && !IsNil(o.ResourceGroupId) {
		return true
	}

	return false
}

// SetResourceGroupId gets a reference to the given int64 and assigns it to the ResourceGroupId field.
func (o *StorageHitachiNvmSubsystem) SetResourceGroupId(v int64) {
	o.ResourceGroupId = &v
}

// GetT10piMode returns the T10piMode field value if set, zero value otherwise.
func (o *StorageHitachiNvmSubsystem) GetT10piMode() string {
	if o == nil || IsNil(o.T10piMode) {
		var ret string
		return ret
	}
	return *o.T10piMode
}

// GetT10piModeOk returns a tuple with the T10piMode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageHitachiNvmSubsystem) GetT10piModeOk() (*string, bool) {
	if o == nil || IsNil(o.T10piMode) {
		return nil, false
	}
	return o.T10piMode, true
}

// HasT10piMode returns a boolean if a field has been set.
func (o *StorageHitachiNvmSubsystem) HasT10piMode() bool {
	if o != nil && !IsNil(o.T10piMode) {
		return true
	}

	return false
}

// SetT10piMode gets a reference to the given string and assigns it to the T10piMode field.
func (o *StorageHitachiNvmSubsystem) SetT10piMode(v string) {
	o.T10piMode = &v
}

// GetVirtualNvmSubsystemId returns the VirtualNvmSubsystemId field value if set, zero value otherwise.
func (o *StorageHitachiNvmSubsystem) GetVirtualNvmSubsystemId() int64 {
	if o == nil || IsNil(o.VirtualNvmSubsystemId) {
		var ret int64
		return ret
	}
	return *o.VirtualNvmSubsystemId
}

// GetVirtualNvmSubsystemIdOk returns a tuple with the VirtualNvmSubsystemId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageHitachiNvmSubsystem) GetVirtualNvmSubsystemIdOk() (*int64, bool) {
	if o == nil || IsNil(o.VirtualNvmSubsystemId) {
		return nil, false
	}
	return o.VirtualNvmSubsystemId, true
}

// HasVirtualNvmSubsystemId returns a boolean if a field has been set.
func (o *StorageHitachiNvmSubsystem) HasVirtualNvmSubsystemId() bool {
	if o != nil && !IsNil(o.VirtualNvmSubsystemId) {
		return true
	}

	return false
}

// SetVirtualNvmSubsystemId gets a reference to the given int64 and assigns it to the VirtualNvmSubsystemId field.
func (o *StorageHitachiNvmSubsystem) SetVirtualNvmSubsystemId(v int64) {
	o.VirtualNvmSubsystemId = &v
}

// GetArray returns the Array field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *StorageHitachiNvmSubsystem) GetArray() StorageHitachiArrayRelationship {
	if o == nil || IsNil(o.Array.Get()) {
		var ret StorageHitachiArrayRelationship
		return ret
	}
	return *o.Array.Get()
}

// GetArrayOk returns a tuple with the Array field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *StorageHitachiNvmSubsystem) GetArrayOk() (*StorageHitachiArrayRelationship, bool) {
	if o == nil {
		return nil, false
	}
	return o.Array.Get(), o.Array.IsSet()
}

// HasArray returns a boolean if a field has been set.
func (o *StorageHitachiNvmSubsystem) HasArray() bool {
	if o != nil && o.Array.IsSet() {
		return true
	}

	return false
}

// SetArray gets a reference to the given NullableStorageHitachiArrayRelationship and assigns it to the Array field.
func (o *StorageHitachiNvmSubsystem) SetArray(v StorageHitachiArrayRelationship) {
	o.Array.Set(&v)
}

// SetArrayNil sets the value for Array to be an explicit nil
func (o *StorageHitachiNvmSubsystem) SetArrayNil() {
	o.Array.Set(nil)
}

// UnsetArray ensures that no value is present for Array, not even an explicit nil
func (o *StorageHitachiNvmSubsystem) UnsetArray() {
	o.Array.Unset()
}

// GetRegisteredDevice returns the RegisteredDevice field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *StorageHitachiNvmSubsystem) GetRegisteredDevice() AssetDeviceRegistrationRelationship {
	if o == nil || IsNil(o.RegisteredDevice.Get()) {
		var ret AssetDeviceRegistrationRelationship
		return ret
	}
	return *o.RegisteredDevice.Get()
}

// GetRegisteredDeviceOk returns a tuple with the RegisteredDevice field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *StorageHitachiNvmSubsystem) GetRegisteredDeviceOk() (*AssetDeviceRegistrationRelationship, bool) {
	if o == nil {
		return nil, false
	}
	return o.RegisteredDevice.Get(), o.RegisteredDevice.IsSet()
}

// HasRegisteredDevice returns a boolean if a field has been set.
func (o *StorageHitachiNvmSubsystem) HasRegisteredDevice() bool {
	if o != nil && o.RegisteredDevice.IsSet() {
		return true
	}

	return false
}

// SetRegisteredDevice gets a reference to the given NullableAssetDeviceRegistrationRelationship and assigns it to the RegisteredDevice field.
func (o *StorageHitachiNvmSubsystem) SetRegisteredDevice(v AssetDeviceRegistrationRelationship) {
	o.RegisteredDevice.Set(&v)
}

// SetRegisteredDeviceNil sets the value for RegisteredDevice to be an explicit nil
func (o *StorageHitachiNvmSubsystem) SetRegisteredDeviceNil() {
	o.RegisteredDevice.Set(nil)
}

// UnsetRegisteredDevice ensures that no value is present for RegisteredDevice, not even an explicit nil
func (o *StorageHitachiNvmSubsystem) UnsetRegisteredDevice() {
	o.RegisteredDevice.Unset()
}

func (o StorageHitachiNvmSubsystem) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o StorageHitachiNvmSubsystem) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	serializedMoBaseMo, errMoBaseMo := json.Marshal(o.MoBaseMo)
	if errMoBaseMo != nil {
		return map[string]interface{}{}, errMoBaseMo
	}
	errMoBaseMo = json.Unmarshal([]byte(serializedMoBaseMo), &toSerialize)
	if errMoBaseMo != nil {
		return map[string]interface{}{}, errMoBaseMo
	}
	if _, exists := toSerialize["ClassId"]; !exists {
		toSerialize["ClassId"] = o.GetDefaultClassId()
	}
	toSerialize["ClassId"] = o.ClassId
	if _, exists := toSerialize["ObjectType"]; !exists {
		toSerialize["ObjectType"] = o.GetDefaultObjectType()
	}
	toSerialize["ObjectType"] = o.ObjectType
	if !IsNil(o.HostMode) {
		toSerialize["HostMode"] = o.HostMode
	}
	if o.HostModeOptions != nil {
		toSerialize["HostModeOptions"] = o.HostModeOptions
	}
	if o.HostNqns != nil {
		toSerialize["HostNqns"] = o.HostNqns
	}
	if !IsNil(o.Name) {
		toSerialize["Name"] = o.Name
	}
	if o.NamespacePaths != nil {
		toSerialize["NamespacePaths"] = o.NamespacePaths
	}
	if !IsNil(o.NamespaceSecuritySetting) {
		toSerialize["NamespaceSecuritySetting"] = o.NamespaceSecuritySetting
	}
	if o.Namespaces != nil {
		toSerialize["Namespaces"] = o.Namespaces
	}
	if !IsNil(o.NvmSubsystemName) {
		toSerialize["NvmSubsystemName"] = o.NvmSubsystemName
	}
	if !IsNil(o.NvmSubsystemNqn) {
		toSerialize["NvmSubsystemNqn"] = o.NvmSubsystemNqn
	}
	if o.PortIds != nil {
		toSerialize["PortIds"] = o.PortIds
	}
	if !IsNil(o.ResourceGroupId) {
		toSerialize["ResourceGroupId"] = o.ResourceGroupId
	}
	if !IsNil(o.T10piMode) {
		toSerialize["T10piMode"] = o.T10piMode
	}
	if !IsNil(o.VirtualNvmSubsystemId) {
		toSerialize["VirtualNvmSubsystemId"] = o.VirtualNvmSubsystemId
	}
	if o.Array.IsSet() {
		toSerialize["Array"] = o.Array.Get()
	}
	if o.RegisteredDevice.IsSet() {
		toSerialize["RegisteredDevice"] = o.RegisteredDevice.Get()
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *StorageHitachiNvmSubsystem) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"ClassId",
		"ObjectType",
	}

	// defaultValueFuncMap captures the default values for required properties.
	// These values are used when required properties are missing from the payload.
	defaultValueFuncMap := map[string]func() interface{}{
		"ClassId":    o.GetDefaultClassId,
		"ObjectType": o.GetDefaultObjectType,
	}
	var defaultValueApplied bool
	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			if _, ok := defaultValueFuncMap[requiredProperty]; ok {
				allProperties[requiredProperty] = defaultValueFuncMap[requiredProperty]()
				defaultValueApplied = true
			}
		}
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	if defaultValueApplied {
		data, err = json.Marshal(allProperties)
		if err != nil {
			return err
		}
	}
	type StorageHitachiNvmSubsystemWithoutEmbeddedStruct struct {
		// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.
		ClassId string `json:"ClassId"`
		// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
		ObjectType string `json:"ObjectType"`
		// Host mode of the NVM subsystem.
		HostMode        *string          `json:"HostMode,omitempty"`
		HostModeOptions []int64          `json:"HostModeOptions,omitempty"`
		HostNqns        []StorageHostNqn `json:"HostNqns,omitempty"`
		// NVM subsystem ID. NVM subsystem is a resource to manage system components in an NVMe-oF connection.
		Name           *string                `json:"Name,omitempty"`
		NamespacePaths []StorageNamespacePath `json:"NamespacePaths,omitempty"`
		// Namespace security settings.
		NamespaceSecuritySetting *string            `json:"NamespaceSecuritySetting,omitempty"`
		Namespaces               []StorageNamespace `json:"Namespaces,omitempty"`
		// NVM subsystem name. Can be up to 32 characters long.
		NvmSubsystemName *string `json:"NvmSubsystemName,omitempty"`
		// Subsystem NQN. If the NVM subsystem is virtualized, the NQN of the virtualized NVM subsystem is output.
		NvmSubsystemNqn *string  `json:"NvmSubsystemNqn,omitempty"`
		PortIds         []string `json:"PortIds,omitempty"`
		// Resource group ID of the resource group to which the NVM subsystem belongs.
		ResourceGroupId *int64 `json:"ResourceGroupId,omitempty"`
		// Status of the T10 PI mode of the port.
		T10piMode *string `json:"T10piMode,omitempty"`
		// The Virtual NVM Subsystem ID property is applicable for use with storage systems in the VSP 5000 series.
		VirtualNvmSubsystemId *int64                                      `json:"VirtualNvmSubsystemId,omitempty"`
		Array                 NullableStorageHitachiArrayRelationship     `json:"Array,omitempty"`
		RegisteredDevice      NullableAssetDeviceRegistrationRelationship `json:"RegisteredDevice,omitempty"`
	}

	varStorageHitachiNvmSubsystemWithoutEmbeddedStruct := StorageHitachiNvmSubsystemWithoutEmbeddedStruct{}

	err = json.Unmarshal(data, &varStorageHitachiNvmSubsystemWithoutEmbeddedStruct)
	if err == nil {
		varStorageHitachiNvmSubsystem := _StorageHitachiNvmSubsystem{}
		varStorageHitachiNvmSubsystem.ClassId = varStorageHitachiNvmSubsystemWithoutEmbeddedStruct.ClassId
		varStorageHitachiNvmSubsystem.ObjectType = varStorageHitachiNvmSubsystemWithoutEmbeddedStruct.ObjectType
		varStorageHitachiNvmSubsystem.HostMode = varStorageHitachiNvmSubsystemWithoutEmbeddedStruct.HostMode
		varStorageHitachiNvmSubsystem.HostModeOptions = varStorageHitachiNvmSubsystemWithoutEmbeddedStruct.HostModeOptions
		varStorageHitachiNvmSubsystem.HostNqns = varStorageHitachiNvmSubsystemWithoutEmbeddedStruct.HostNqns
		varStorageHitachiNvmSubsystem.Name = varStorageHitachiNvmSubsystemWithoutEmbeddedStruct.Name
		varStorageHitachiNvmSubsystem.NamespacePaths = varStorageHitachiNvmSubsystemWithoutEmbeddedStruct.NamespacePaths
		varStorageHitachiNvmSubsystem.NamespaceSecuritySetting = varStorageHitachiNvmSubsystemWithoutEmbeddedStruct.NamespaceSecuritySetting
		varStorageHitachiNvmSubsystem.Namespaces = varStorageHitachiNvmSubsystemWithoutEmbeddedStruct.Namespaces
		varStorageHitachiNvmSubsystem.NvmSubsystemName = varStorageHitachiNvmSubsystemWithoutEmbeddedStruct.NvmSubsystemName
		varStorageHitachiNvmSubsystem.NvmSubsystemNqn = varStorageHitachiNvmSubsystemWithoutEmbeddedStruct.NvmSubsystemNqn
		varStorageHitachiNvmSubsystem.PortIds = varStorageHitachiNvmSubsystemWithoutEmbeddedStruct.PortIds
		varStorageHitachiNvmSubsystem.ResourceGroupId = varStorageHitachiNvmSubsystemWithoutEmbeddedStruct.ResourceGroupId
		varStorageHitachiNvmSubsystem.T10piMode = varStorageHitachiNvmSubsystemWithoutEmbeddedStruct.T10piMode
		varStorageHitachiNvmSubsystem.VirtualNvmSubsystemId = varStorageHitachiNvmSubsystemWithoutEmbeddedStruct.VirtualNvmSubsystemId
		varStorageHitachiNvmSubsystem.Array = varStorageHitachiNvmSubsystemWithoutEmbeddedStruct.Array
		varStorageHitachiNvmSubsystem.RegisteredDevice = varStorageHitachiNvmSubsystemWithoutEmbeddedStruct.RegisteredDevice
		*o = StorageHitachiNvmSubsystem(varStorageHitachiNvmSubsystem)
	} else {
		return err
	}

	varStorageHitachiNvmSubsystem := _StorageHitachiNvmSubsystem{}

	err = json.Unmarshal(data, &varStorageHitachiNvmSubsystem)
	if err == nil {
		o.MoBaseMo = varStorageHitachiNvmSubsystem.MoBaseMo
	} else {
		return err
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "ClassId")
		delete(additionalProperties, "ObjectType")
		delete(additionalProperties, "HostMode")
		delete(additionalProperties, "HostModeOptions")
		delete(additionalProperties, "HostNqns")
		delete(additionalProperties, "Name")
		delete(additionalProperties, "NamespacePaths")
		delete(additionalProperties, "NamespaceSecuritySetting")
		delete(additionalProperties, "Namespaces")
		delete(additionalProperties, "NvmSubsystemName")
		delete(additionalProperties, "NvmSubsystemNqn")
		delete(additionalProperties, "PortIds")
		delete(additionalProperties, "ResourceGroupId")
		delete(additionalProperties, "T10piMode")
		delete(additionalProperties, "VirtualNvmSubsystemId")
		delete(additionalProperties, "Array")
		delete(additionalProperties, "RegisteredDevice")

		// remove fields from embedded structs
		reflectMoBaseMo := reflect.ValueOf(o.MoBaseMo)
		for i := 0; i < reflectMoBaseMo.Type().NumField(); i++ {
			t := reflectMoBaseMo.Type().Field(i)

			if jsonTag := t.Tag.Get("json"); jsonTag != "" {
				fieldName := ""
				if commaIdx := strings.Index(jsonTag, ","); commaIdx > 0 {
					fieldName = jsonTag[:commaIdx]
				} else {
					fieldName = jsonTag
				}
				if fieldName != "AdditionalProperties" {
					delete(additionalProperties, fieldName)
				}
			}
		}

		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableStorageHitachiNvmSubsystem struct {
	value *StorageHitachiNvmSubsystem
	isSet bool
}

func (v NullableStorageHitachiNvmSubsystem) Get() *StorageHitachiNvmSubsystem {
	return v.value
}

func (v *NullableStorageHitachiNvmSubsystem) Set(val *StorageHitachiNvmSubsystem) {
	v.value = val
	v.isSet = true
}

func (v NullableStorageHitachiNvmSubsystem) IsSet() bool {
	return v.isSet
}

func (v *NullableStorageHitachiNvmSubsystem) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStorageHitachiNvmSubsystem(val *StorageHitachiNvmSubsystem) *NullableStorageHitachiNvmSubsystem {
	return &NullableStorageHitachiNvmSubsystem{value: val, isSet: true}
}

func (v NullableStorageHitachiNvmSubsystem) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStorageHitachiNvmSubsystem) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
