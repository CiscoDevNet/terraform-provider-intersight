/*
Cisco Intersight

Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations. The Intersight OpenAPI document defines the complete set of properties that are returned in the HTTP response. From that perspective, a client can expect that no additional properties are returned, unless these properties are explicitly defined in the OpenAPI document. However, when a client uses an older version of the Intersight OpenAPI document, the server may send additional properties because the software is more recent than the client. In that case, the client may receive properties that it does not know about. Some generated SDKs perform a strict validation of the HTTP response body against the OpenAPI document.

API version: 1.0.11-18775
Contact: intersight@cisco.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package intersight

import (
	"encoding/json"
	"fmt"
	"reflect"
	"strings"
	"time"
)

// checks if the IamSession type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &IamSession{}

// IamSession The web session of a user. After a user logs into Intersight, a session object is created. Session object is deleted upon logout, idle timeout, expiry timeout, or manual deletion.
type IamSession struct {
	SessionAbstractSession
	// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.
	ClassId string `json:"ClassId"`
	// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
	ObjectType         string                  `json:"ObjectType"`
	AccountPermissions []IamAccountPermissions `json:"AccountPermissions,omitempty"`
	// Expiration time for the session.
	Expiration *time.Time `json:"Expiration,omitempty"`
	// Failed logins since last login for admin user.
	FailedLogins *int64 `json:"FailedLogins,omitempty"`
	// Idle time expiration for the session.
	IdleTimeExpiration *time.Time `json:"IdleTimeExpiration,omitempty"`
	// The client address from which last login is initiated.
	LastLoginClient *string `json:"LastLoginClient,omitempty"`
	// The last login time for user.
	LastLoginTime *time.Time                        `json:"LastLoginTime,omitempty"`
	Scope         NullableIamSwitchScopePermissions `json:"Scope,omitempty"`
	// Session token shared with the user agent which is used to identify the user session when API requests are received to perform authorization.
	SessionId            *string                           `json:"SessionId,omitempty"`
	Permission           NullableIamPermissionRelationship `json:"Permission,omitempty"`
	User                 NullableIamUserRelationship       `json:"User,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _IamSession IamSession

// NewIamSession instantiates a new IamSession object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIamSession(classId string, objectType string) *IamSession {
	this := IamSession{}
	this.ClassId = classId
	this.ObjectType = objectType
	var status string = "Active"
	this.Status = &status
	return &this
}

// NewIamSessionWithDefaults instantiates a new IamSession object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIamSessionWithDefaults() *IamSession {
	this := IamSession{}
	var classId string = "iam.Session"
	this.ClassId = classId
	var objectType string = "iam.Session"
	this.ObjectType = objectType
	return &this
}

// GetClassId returns the ClassId field value
func (o *IamSession) GetClassId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ClassId
}

// GetClassIdOk returns a tuple with the ClassId field value
// and a boolean to check if the value has been set.
func (o *IamSession) GetClassIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ClassId, true
}

// SetClassId sets field value
func (o *IamSession) SetClassId(v string) {
	o.ClassId = v
}

// GetDefaultClassId returns the default value "iam.Session" of the ClassId field.
func (o *IamSession) GetDefaultClassId() interface{} {
	return "iam.Session"
}

// GetObjectType returns the ObjectType field value
func (o *IamSession) GetObjectType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ObjectType
}

// GetObjectTypeOk returns a tuple with the ObjectType field value
// and a boolean to check if the value has been set.
func (o *IamSession) GetObjectTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ObjectType, true
}

// SetObjectType sets field value
func (o *IamSession) SetObjectType(v string) {
	o.ObjectType = v
}

// GetDefaultObjectType returns the default value "iam.Session" of the ObjectType field.
func (o *IamSession) GetDefaultObjectType() interface{} {
	return "iam.Session"
}

// GetAccountPermissions returns the AccountPermissions field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IamSession) GetAccountPermissions() []IamAccountPermissions {
	if o == nil {
		var ret []IamAccountPermissions
		return ret
	}
	return o.AccountPermissions
}

// GetAccountPermissionsOk returns a tuple with the AccountPermissions field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IamSession) GetAccountPermissionsOk() ([]IamAccountPermissions, bool) {
	if o == nil || IsNil(o.AccountPermissions) {
		return nil, false
	}
	return o.AccountPermissions, true
}

// HasAccountPermissions returns a boolean if a field has been set.
func (o *IamSession) HasAccountPermissions() bool {
	if o != nil && !IsNil(o.AccountPermissions) {
		return true
	}

	return false
}

// SetAccountPermissions gets a reference to the given []IamAccountPermissions and assigns it to the AccountPermissions field.
func (o *IamSession) SetAccountPermissions(v []IamAccountPermissions) {
	o.AccountPermissions = v
}

// GetExpiration returns the Expiration field value if set, zero value otherwise.
func (o *IamSession) GetExpiration() time.Time {
	if o == nil || IsNil(o.Expiration) {
		var ret time.Time
		return ret
	}
	return *o.Expiration
}

// GetExpirationOk returns a tuple with the Expiration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IamSession) GetExpirationOk() (*time.Time, bool) {
	if o == nil || IsNil(o.Expiration) {
		return nil, false
	}
	return o.Expiration, true
}

// HasExpiration returns a boolean if a field has been set.
func (o *IamSession) HasExpiration() bool {
	if o != nil && !IsNil(o.Expiration) {
		return true
	}

	return false
}

// SetExpiration gets a reference to the given time.Time and assigns it to the Expiration field.
func (o *IamSession) SetExpiration(v time.Time) {
	o.Expiration = &v
}

// GetFailedLogins returns the FailedLogins field value if set, zero value otherwise.
func (o *IamSession) GetFailedLogins() int64 {
	if o == nil || IsNil(o.FailedLogins) {
		var ret int64
		return ret
	}
	return *o.FailedLogins
}

// GetFailedLoginsOk returns a tuple with the FailedLogins field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IamSession) GetFailedLoginsOk() (*int64, bool) {
	if o == nil || IsNil(o.FailedLogins) {
		return nil, false
	}
	return o.FailedLogins, true
}

// HasFailedLogins returns a boolean if a field has been set.
func (o *IamSession) HasFailedLogins() bool {
	if o != nil && !IsNil(o.FailedLogins) {
		return true
	}

	return false
}

// SetFailedLogins gets a reference to the given int64 and assigns it to the FailedLogins field.
func (o *IamSession) SetFailedLogins(v int64) {
	o.FailedLogins = &v
}

// GetIdleTimeExpiration returns the IdleTimeExpiration field value if set, zero value otherwise.
func (o *IamSession) GetIdleTimeExpiration() time.Time {
	if o == nil || IsNil(o.IdleTimeExpiration) {
		var ret time.Time
		return ret
	}
	return *o.IdleTimeExpiration
}

// GetIdleTimeExpirationOk returns a tuple with the IdleTimeExpiration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IamSession) GetIdleTimeExpirationOk() (*time.Time, bool) {
	if o == nil || IsNil(o.IdleTimeExpiration) {
		return nil, false
	}
	return o.IdleTimeExpiration, true
}

// HasIdleTimeExpiration returns a boolean if a field has been set.
func (o *IamSession) HasIdleTimeExpiration() bool {
	if o != nil && !IsNil(o.IdleTimeExpiration) {
		return true
	}

	return false
}

// SetIdleTimeExpiration gets a reference to the given time.Time and assigns it to the IdleTimeExpiration field.
func (o *IamSession) SetIdleTimeExpiration(v time.Time) {
	o.IdleTimeExpiration = &v
}

// GetLastLoginClient returns the LastLoginClient field value if set, zero value otherwise.
func (o *IamSession) GetLastLoginClient() string {
	if o == nil || IsNil(o.LastLoginClient) {
		var ret string
		return ret
	}
	return *o.LastLoginClient
}

// GetLastLoginClientOk returns a tuple with the LastLoginClient field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IamSession) GetLastLoginClientOk() (*string, bool) {
	if o == nil || IsNil(o.LastLoginClient) {
		return nil, false
	}
	return o.LastLoginClient, true
}

// HasLastLoginClient returns a boolean if a field has been set.
func (o *IamSession) HasLastLoginClient() bool {
	if o != nil && !IsNil(o.LastLoginClient) {
		return true
	}

	return false
}

// SetLastLoginClient gets a reference to the given string and assigns it to the LastLoginClient field.
func (o *IamSession) SetLastLoginClient(v string) {
	o.LastLoginClient = &v
}

// GetLastLoginTime returns the LastLoginTime field value if set, zero value otherwise.
func (o *IamSession) GetLastLoginTime() time.Time {
	if o == nil || IsNil(o.LastLoginTime) {
		var ret time.Time
		return ret
	}
	return *o.LastLoginTime
}

// GetLastLoginTimeOk returns a tuple with the LastLoginTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IamSession) GetLastLoginTimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.LastLoginTime) {
		return nil, false
	}
	return o.LastLoginTime, true
}

// HasLastLoginTime returns a boolean if a field has been set.
func (o *IamSession) HasLastLoginTime() bool {
	if o != nil && !IsNil(o.LastLoginTime) {
		return true
	}

	return false
}

// SetLastLoginTime gets a reference to the given time.Time and assigns it to the LastLoginTime field.
func (o *IamSession) SetLastLoginTime(v time.Time) {
	o.LastLoginTime = &v
}

// GetScope returns the Scope field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IamSession) GetScope() IamSwitchScopePermissions {
	if o == nil || IsNil(o.Scope.Get()) {
		var ret IamSwitchScopePermissions
		return ret
	}
	return *o.Scope.Get()
}

// GetScopeOk returns a tuple with the Scope field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IamSession) GetScopeOk() (*IamSwitchScopePermissions, bool) {
	if o == nil {
		return nil, false
	}
	return o.Scope.Get(), o.Scope.IsSet()
}

// HasScope returns a boolean if a field has been set.
func (o *IamSession) HasScope() bool {
	if o != nil && o.Scope.IsSet() {
		return true
	}

	return false
}

// SetScope gets a reference to the given NullableIamSwitchScopePermissions and assigns it to the Scope field.
func (o *IamSession) SetScope(v IamSwitchScopePermissions) {
	o.Scope.Set(&v)
}

// SetScopeNil sets the value for Scope to be an explicit nil
func (o *IamSession) SetScopeNil() {
	o.Scope.Set(nil)
}

// UnsetScope ensures that no value is present for Scope, not even an explicit nil
func (o *IamSession) UnsetScope() {
	o.Scope.Unset()
}

// GetSessionId returns the SessionId field value if set, zero value otherwise.
func (o *IamSession) GetSessionId() string {
	if o == nil || IsNil(o.SessionId) {
		var ret string
		return ret
	}
	return *o.SessionId
}

// GetSessionIdOk returns a tuple with the SessionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IamSession) GetSessionIdOk() (*string, bool) {
	if o == nil || IsNil(o.SessionId) {
		return nil, false
	}
	return o.SessionId, true
}

// HasSessionId returns a boolean if a field has been set.
func (o *IamSession) HasSessionId() bool {
	if o != nil && !IsNil(o.SessionId) {
		return true
	}

	return false
}

// SetSessionId gets a reference to the given string and assigns it to the SessionId field.
func (o *IamSession) SetSessionId(v string) {
	o.SessionId = &v
}

// GetPermission returns the Permission field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IamSession) GetPermission() IamPermissionRelationship {
	if o == nil || IsNil(o.Permission.Get()) {
		var ret IamPermissionRelationship
		return ret
	}
	return *o.Permission.Get()
}

// GetPermissionOk returns a tuple with the Permission field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IamSession) GetPermissionOk() (*IamPermissionRelationship, bool) {
	if o == nil {
		return nil, false
	}
	return o.Permission.Get(), o.Permission.IsSet()
}

// HasPermission returns a boolean if a field has been set.
func (o *IamSession) HasPermission() bool {
	if o != nil && o.Permission.IsSet() {
		return true
	}

	return false
}

// SetPermission gets a reference to the given NullableIamPermissionRelationship and assigns it to the Permission field.
func (o *IamSession) SetPermission(v IamPermissionRelationship) {
	o.Permission.Set(&v)
}

// SetPermissionNil sets the value for Permission to be an explicit nil
func (o *IamSession) SetPermissionNil() {
	o.Permission.Set(nil)
}

// UnsetPermission ensures that no value is present for Permission, not even an explicit nil
func (o *IamSession) UnsetPermission() {
	o.Permission.Unset()
}

// GetUser returns the User field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IamSession) GetUser() IamUserRelationship {
	if o == nil || IsNil(o.User.Get()) {
		var ret IamUserRelationship
		return ret
	}
	return *o.User.Get()
}

// GetUserOk returns a tuple with the User field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IamSession) GetUserOk() (*IamUserRelationship, bool) {
	if o == nil {
		return nil, false
	}
	return o.User.Get(), o.User.IsSet()
}

// HasUser returns a boolean if a field has been set.
func (o *IamSession) HasUser() bool {
	if o != nil && o.User.IsSet() {
		return true
	}

	return false
}

// SetUser gets a reference to the given NullableIamUserRelationship and assigns it to the User field.
func (o *IamSession) SetUser(v IamUserRelationship) {
	o.User.Set(&v)
}

// SetUserNil sets the value for User to be an explicit nil
func (o *IamSession) SetUserNil() {
	o.User.Set(nil)
}

// UnsetUser ensures that no value is present for User, not even an explicit nil
func (o *IamSession) UnsetUser() {
	o.User.Unset()
}

func (o IamSession) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IamSession) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	serializedSessionAbstractSession, errSessionAbstractSession := json.Marshal(o.SessionAbstractSession)
	if errSessionAbstractSession != nil {
		return map[string]interface{}{}, errSessionAbstractSession
	}
	errSessionAbstractSession = json.Unmarshal([]byte(serializedSessionAbstractSession), &toSerialize)
	if errSessionAbstractSession != nil {
		return map[string]interface{}{}, errSessionAbstractSession
	}
	if _, exists := toSerialize["ClassId"]; !exists {
		toSerialize["ClassId"] = o.GetDefaultClassId()
	}
	toSerialize["ClassId"] = o.ClassId
	if _, exists := toSerialize["ObjectType"]; !exists {
		toSerialize["ObjectType"] = o.GetDefaultObjectType()
	}
	toSerialize["ObjectType"] = o.ObjectType
	if o.AccountPermissions != nil {
		toSerialize["AccountPermissions"] = o.AccountPermissions
	}
	if !IsNil(o.Expiration) {
		toSerialize["Expiration"] = o.Expiration
	}
	if !IsNil(o.FailedLogins) {
		toSerialize["FailedLogins"] = o.FailedLogins
	}
	if !IsNil(o.IdleTimeExpiration) {
		toSerialize["IdleTimeExpiration"] = o.IdleTimeExpiration
	}
	if !IsNil(o.LastLoginClient) {
		toSerialize["LastLoginClient"] = o.LastLoginClient
	}
	if !IsNil(o.LastLoginTime) {
		toSerialize["LastLoginTime"] = o.LastLoginTime
	}
	if o.Scope.IsSet() {
		toSerialize["Scope"] = o.Scope.Get()
	}
	if !IsNil(o.SessionId) {
		toSerialize["SessionId"] = o.SessionId
	}
	if o.Permission.IsSet() {
		toSerialize["Permission"] = o.Permission.Get()
	}
	if o.User.IsSet() {
		toSerialize["User"] = o.User.Get()
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *IamSession) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"ClassId",
		"ObjectType",
	}

	// defaultValueFuncMap captures the default values for required properties.
	// These values are used when required properties are missing from the payload.
	defaultValueFuncMap := map[string]func() interface{}{
		"ClassId":    o.GetDefaultClassId,
		"ObjectType": o.GetDefaultObjectType,
	}
	var defaultValueApplied bool
	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			if _, ok := defaultValueFuncMap[requiredProperty]; ok {
				allProperties[requiredProperty] = defaultValueFuncMap[requiredProperty]()
				defaultValueApplied = true
			}
		}
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	if defaultValueApplied {
		data, err = json.Marshal(allProperties)
		if err != nil {
			return err
		}
	}
	type IamSessionWithoutEmbeddedStruct struct {
		// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.
		ClassId string `json:"ClassId"`
		// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
		ObjectType         string                  `json:"ObjectType"`
		AccountPermissions []IamAccountPermissions `json:"AccountPermissions,omitempty"`
		// Expiration time for the session.
		Expiration *time.Time `json:"Expiration,omitempty"`
		// Failed logins since last login for admin user.
		FailedLogins *int64 `json:"FailedLogins,omitempty"`
		// Idle time expiration for the session.
		IdleTimeExpiration *time.Time `json:"IdleTimeExpiration,omitempty"`
		// The client address from which last login is initiated.
		LastLoginClient *string `json:"LastLoginClient,omitempty"`
		// The last login time for user.
		LastLoginTime *time.Time                        `json:"LastLoginTime,omitempty"`
		Scope         NullableIamSwitchScopePermissions `json:"Scope,omitempty"`
		// Session token shared with the user agent which is used to identify the user session when API requests are received to perform authorization.
		SessionId  *string                           `json:"SessionId,omitempty"`
		Permission NullableIamPermissionRelationship `json:"Permission,omitempty"`
		User       NullableIamUserRelationship       `json:"User,omitempty"`
	}

	varIamSessionWithoutEmbeddedStruct := IamSessionWithoutEmbeddedStruct{}

	err = json.Unmarshal(data, &varIamSessionWithoutEmbeddedStruct)
	if err == nil {
		varIamSession := _IamSession{}
		varIamSession.ClassId = varIamSessionWithoutEmbeddedStruct.ClassId
		varIamSession.ObjectType = varIamSessionWithoutEmbeddedStruct.ObjectType
		varIamSession.AccountPermissions = varIamSessionWithoutEmbeddedStruct.AccountPermissions
		varIamSession.Expiration = varIamSessionWithoutEmbeddedStruct.Expiration
		varIamSession.FailedLogins = varIamSessionWithoutEmbeddedStruct.FailedLogins
		varIamSession.IdleTimeExpiration = varIamSessionWithoutEmbeddedStruct.IdleTimeExpiration
		varIamSession.LastLoginClient = varIamSessionWithoutEmbeddedStruct.LastLoginClient
		varIamSession.LastLoginTime = varIamSessionWithoutEmbeddedStruct.LastLoginTime
		varIamSession.Scope = varIamSessionWithoutEmbeddedStruct.Scope
		varIamSession.SessionId = varIamSessionWithoutEmbeddedStruct.SessionId
		varIamSession.Permission = varIamSessionWithoutEmbeddedStruct.Permission
		varIamSession.User = varIamSessionWithoutEmbeddedStruct.User
		*o = IamSession(varIamSession)
	} else {
		return err
	}

	varIamSession := _IamSession{}

	err = json.Unmarshal(data, &varIamSession)
	if err == nil {
		o.SessionAbstractSession = varIamSession.SessionAbstractSession
	} else {
		return err
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "ClassId")
		delete(additionalProperties, "ObjectType")
		delete(additionalProperties, "AccountPermissions")
		delete(additionalProperties, "Expiration")
		delete(additionalProperties, "FailedLogins")
		delete(additionalProperties, "IdleTimeExpiration")
		delete(additionalProperties, "LastLoginClient")
		delete(additionalProperties, "LastLoginTime")
		delete(additionalProperties, "Scope")
		delete(additionalProperties, "SessionId")
		delete(additionalProperties, "Permission")
		delete(additionalProperties, "User")

		// remove fields from embedded structs
		reflectSessionAbstractSession := reflect.ValueOf(o.SessionAbstractSession)
		for i := 0; i < reflectSessionAbstractSession.Type().NumField(); i++ {
			t := reflectSessionAbstractSession.Type().Field(i)

			if jsonTag := t.Tag.Get("json"); jsonTag != "" {
				fieldName := ""
				if commaIdx := strings.Index(jsonTag, ","); commaIdx > 0 {
					fieldName = jsonTag[:commaIdx]
				} else {
					fieldName = jsonTag
				}
				if fieldName != "AdditionalProperties" {
					delete(additionalProperties, fieldName)
				}
			}
		}

		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableIamSession struct {
	value *IamSession
	isSet bool
}

func (v NullableIamSession) Get() *IamSession {
	return v.value
}

func (v *NullableIamSession) Set(val *IamSession) {
	v.value = val
	v.isSet = true
}

func (v NullableIamSession) IsSet() bool {
	return v.isSet
}

func (v *NullableIamSession) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIamSession(val *IamSession) *NullableIamSession {
	return &NullableIamSession{value: val, isSet: true}
}

func (v NullableIamSession) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIamSession) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
