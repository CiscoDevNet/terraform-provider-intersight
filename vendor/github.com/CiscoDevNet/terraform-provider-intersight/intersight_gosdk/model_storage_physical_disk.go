/*
Cisco Intersight

Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations. The Intersight OpenAPI document defines the complete set of properties that are returned in the HTTP response. From that perspective, a client can expect that no additional properties are returned, unless these properties are explicitly defined in the OpenAPI document. However, when a client uses an older version of the Intersight OpenAPI document, the server may send additional properties because the software is more recent than the client. In that case, the client may receive properties that it does not know about. Some generated SDKs perform a strict validation of the HTTP response body against the OpenAPI document.

API version: 1.0.11-18775
Contact: intersight@cisco.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package intersight

import (
	"encoding/json"
	"fmt"
	"reflect"
	"strings"
)

// checks if the StoragePhysicalDisk type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &StoragePhysicalDisk{}

// StoragePhysicalDisk Physical Disk on a server.
type StoragePhysicalDisk struct {
	EquipmentBase
	// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.
	ClassId string `json:"ClassId"`
	// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
	ObjectType string `json:"ObjectType"`
	// List of background operations underway.
	BackgroundOperations *string `json:"BackgroundOperations,omitempty"`
	// The block size of the physical disk in bytes.
	BlockSize *string `json:"BlockSize,omitempty"`
	// This field identifies the disk drive as bootable if set to true.
	Bootable *string `json:"Bootable,omitempty"`
	// The current configuration checkpoint of the physical disk.
	ConfigurationCheckpoint *string `json:"ConfigurationCheckpoint,omitempty"`
	// The current configuration state of the physical disk.
	ConfigurationState *string `json:"ConfigurationState,omitempty"`
	// This field displays the description of the physical disk.
	Description *string `json:"Description,omitempty"`
	// The physical disk is disabled for removal.
	DisabledForRemoval *bool `json:"DisabledForRemoval,omitempty"`
	// The discovered path of the physical disk.
	DiscoveredPath *string `json:"DiscoveredPath,omitempty"`
	// This field identifies the ID assigned to physical disks.
	DiskId *string `json:"DiskId,omitempty"`
	// This field identifies the health of the disk.
	DiskState *string `json:"DiskState,omitempty"`
	// This field identifies the disk firmware running in the disk.
	DriveFirmware *string `json:"DriveFirmware,omitempty"`
	// The drive state as reported by the controller.
	DriveState *string `json:"DriveState,omitempty"`
	// Encryption status of the physical disk.
	EncryptionStatus *string `json:"EncryptionStatus,omitempty"`
	// Possibility of physical disk failure.
	FailurePredicted *bool `json:"FailurePredicted,omitempty"`
	// Full-Disk Encryption capability parameter of the physical disk.
	FdeCapable *string `json:"FdeCapable,omitempty"`
	// Type of hotspare configured on the physical disk.
	HotSpareType *string `json:"HotSpareType,omitempty"`
	// Status of the locator LED corresponding to the physical disk.
	IndicatorLed *string `json:"IndicatorLed,omitempty"`
	// This field indicates whether the physical disk is supported on the server or not.
	IsPlatformSupported *bool `json:"IsPlatformSupported,omitempty"`
	// The speed of the link between the drive and the controller.
	LinkSpeed *string `json:"LinkSpeed,omitempty"`
	// The current link state of the physical disk.
	LinkState *string `json:"LinkState,omitempty"`
	// Maximum operating temperature of drive in Celsius.
	MaximumOperatingTemperature *int64 `json:"MaximumOperatingTemperature,omitempty"`
	// Media error count on the physical disk.
	MediaErrorCount *int64 `json:"MediaErrorCount,omitempty"`
	// Detailed name of the physical disk.
	Name *string `json:"Name,omitempty"`
	// Physical disk non-coerced size in bytes.
	NonCoercedSizeBytes *int64 `json:"NonCoercedSizeBytes,omitempty"`
	// The number of blocks present on the physical disk.
	NumBlocks *string `json:"NumBlocks,omitempty"`
	// Operational power of the physical disk.
	OperPowerState *string `json:"OperPowerState,omitempty"`
	// For certain states, indicates the reason why the operState is in that state.
	OperQualifierReason *string `json:"OperQualifierReason,omitempty"`
	// This field identifies the disk operability of the disk.
	Operability *string `json:"Operability,omitempty"`
	// Operating temperature of drive in Celsius.
	OperatingTemperature *int64 `json:"OperatingTemperature,omitempty"`
	// This field displays the part number of the physical disk.
	PartNumber *string `json:"PartNumber,omitempty"`
	// Percentage of write cycles remaining in a solid state drive (SSD).
	PercentLifeLeft *int64 `json:"PercentLifeLeft,omitempty"`
	// Percentage of reserve capacity consumed.
	PercentReservedCapacityConsumed *int64 `json:"PercentReservedCapacityConsumed,omitempty"`
	// Performance at which the device operating expressed in percentage.
	PerformancePercent *int64 `json:"PerformancePercent,omitempty"`
	// The block size of the installed physical disk.
	PhysicalBlockSize *string `json:"PhysicalBlockSize,omitempty"`
	// This field displays the product ID of the physical disk.
	Pid *string `json:"Pid,omitempty"`
	// Number of powercycles the drive has undergone.
	PowerCycleCount *int64 `json:"PowerCycleCount,omitempty"`
	// Number of hours the drive has been powered on.
	PowerOnHours *int64 `json:"PowerOnHours,omitempty"`
	// Percentage of life used based on five year life span of Cisco supported drives.
	PowerOnHoursPercentage *int64 `json:"PowerOnHoursPercentage,omitempty"`
	// Predicted physical disk life left in percentage.
	PredictedMediaLifeLeftPercent *int64 `json:"PredictedMediaLifeLeftPercent,omitempty"`
	// Error count on the physical disk.
	PredictiveFailureCount *int64 `json:"PredictiveFailureCount,omitempty"`
	// This field identifies the disk protocol used for communication.
	Protocol *string `json:"Protocol,omitempty"`
	// The raw size of the physical disk in MB.
	RawSize *string `json:"RawSize,omitempty"`
	// The number of read errors that are permitted while accessing the drive/card.
	ReadErrorCountThreshold *int64 `json:"ReadErrorCountThreshold,omitempty"`
	// Number of IO Errors that occured while reading data from the disk.
	ReadIoErrorCount *int64 `json:"ReadIoErrorCount,omitempty"`
	// This field identifies whether the disk is encrypted.
	Secured *string `json:"Secured,omitempty"`
	// The size of the physical disk in MB.
	Size *string `json:"Size,omitempty"`
	// Thermal state of the physical disk.
	Thermal *string `json:"Thermal,omitempty"`
	// Rated threshold operating temperature in Celsius.
	ThresholdOperatingTemperature *int64 `json:"ThresholdOperatingTemperature,omitempty"`
	// This field identifies the type of the physical disk.
	Type *string `json:"Type,omitempty"`
	// The variant type of the physical disk.
	VariantType *string `json:"VariantType,omitempty"`
	// The number of days an SSD has gone through with the write cycles.
	WearStatusInDays *int64 `json:"WearStatusInDays,omitempty"`
	// The number of write errors that are permitted while accessing the drive/card.
	WriteErrorCountThreshold *int64 `json:"WriteErrorCountThreshold,omitempty"`
	// Number of IO Errors that occured while writing data to the disk.
	WriteIoErrorCount   *int64                                  `json:"WriteIoErrorCount,omitempty"`
	InventoryDeviceInfo NullableInventoryDeviceInfoRelationship `json:"InventoryDeviceInfo,omitempty"`
	LocatorLed          NullableEquipmentLocatorLedRelationship `json:"LocatorLed,omitempty"`
	// An array of relationships to storagePhysicalDiskExtension resources.
	PhysicalDiskExtensions []StoragePhysicalDiskExtensionRelationship  `json:"PhysicalDiskExtensions,omitempty"`
	RegisteredDevice       NullableAssetDeviceRegistrationRelationship `json:"RegisteredDevice,omitempty"`
	// An array of relationships to firmwareRunningFirmware resources.
	RunningFirmware []FirmwareRunningFirmwareRelationship `json:"RunningFirmware,omitempty"`
	// An array of relationships to storageSasPort resources.
	SasPorts             []StorageSasPortRelationship          `json:"SasPorts,omitempty"`
	StorageController    NullableStorageControllerRelationship `json:"StorageController,omitempty"`
	StorageEnclosure     NullableStorageEnclosureRelationship  `json:"StorageEnclosure,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _StoragePhysicalDisk StoragePhysicalDisk

// NewStoragePhysicalDisk instantiates a new StoragePhysicalDisk object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStoragePhysicalDisk(classId string, objectType string) *StoragePhysicalDisk {
	this := StoragePhysicalDisk{}
	this.ClassId = classId
	this.ObjectType = objectType
	return &this
}

// NewStoragePhysicalDiskWithDefaults instantiates a new StoragePhysicalDisk object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStoragePhysicalDiskWithDefaults() *StoragePhysicalDisk {
	this := StoragePhysicalDisk{}
	var classId string = "storage.PhysicalDisk"
	this.ClassId = classId
	var objectType string = "storage.PhysicalDisk"
	this.ObjectType = objectType
	return &this
}

// GetClassId returns the ClassId field value
func (o *StoragePhysicalDisk) GetClassId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ClassId
}

// GetClassIdOk returns a tuple with the ClassId field value
// and a boolean to check if the value has been set.
func (o *StoragePhysicalDisk) GetClassIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ClassId, true
}

// SetClassId sets field value
func (o *StoragePhysicalDisk) SetClassId(v string) {
	o.ClassId = v
}

// GetDefaultClassId returns the default value "storage.PhysicalDisk" of the ClassId field.
func (o *StoragePhysicalDisk) GetDefaultClassId() interface{} {
	return "storage.PhysicalDisk"
}

// GetObjectType returns the ObjectType field value
func (o *StoragePhysicalDisk) GetObjectType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ObjectType
}

// GetObjectTypeOk returns a tuple with the ObjectType field value
// and a boolean to check if the value has been set.
func (o *StoragePhysicalDisk) GetObjectTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ObjectType, true
}

// SetObjectType sets field value
func (o *StoragePhysicalDisk) SetObjectType(v string) {
	o.ObjectType = v
}

// GetDefaultObjectType returns the default value "storage.PhysicalDisk" of the ObjectType field.
func (o *StoragePhysicalDisk) GetDefaultObjectType() interface{} {
	return "storage.PhysicalDisk"
}

// GetBackgroundOperations returns the BackgroundOperations field value if set, zero value otherwise.
func (o *StoragePhysicalDisk) GetBackgroundOperations() string {
	if o == nil || IsNil(o.BackgroundOperations) {
		var ret string
		return ret
	}
	return *o.BackgroundOperations
}

// GetBackgroundOperationsOk returns a tuple with the BackgroundOperations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StoragePhysicalDisk) GetBackgroundOperationsOk() (*string, bool) {
	if o == nil || IsNil(o.BackgroundOperations) {
		return nil, false
	}
	return o.BackgroundOperations, true
}

// HasBackgroundOperations returns a boolean if a field has been set.
func (o *StoragePhysicalDisk) HasBackgroundOperations() bool {
	if o != nil && !IsNil(o.BackgroundOperations) {
		return true
	}

	return false
}

// SetBackgroundOperations gets a reference to the given string and assigns it to the BackgroundOperations field.
func (o *StoragePhysicalDisk) SetBackgroundOperations(v string) {
	o.BackgroundOperations = &v
}

// GetBlockSize returns the BlockSize field value if set, zero value otherwise.
func (o *StoragePhysicalDisk) GetBlockSize() string {
	if o == nil || IsNil(o.BlockSize) {
		var ret string
		return ret
	}
	return *o.BlockSize
}

// GetBlockSizeOk returns a tuple with the BlockSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StoragePhysicalDisk) GetBlockSizeOk() (*string, bool) {
	if o == nil || IsNil(o.BlockSize) {
		return nil, false
	}
	return o.BlockSize, true
}

// HasBlockSize returns a boolean if a field has been set.
func (o *StoragePhysicalDisk) HasBlockSize() bool {
	if o != nil && !IsNil(o.BlockSize) {
		return true
	}

	return false
}

// SetBlockSize gets a reference to the given string and assigns it to the BlockSize field.
func (o *StoragePhysicalDisk) SetBlockSize(v string) {
	o.BlockSize = &v
}

// GetBootable returns the Bootable field value if set, zero value otherwise.
func (o *StoragePhysicalDisk) GetBootable() string {
	if o == nil || IsNil(o.Bootable) {
		var ret string
		return ret
	}
	return *o.Bootable
}

// GetBootableOk returns a tuple with the Bootable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StoragePhysicalDisk) GetBootableOk() (*string, bool) {
	if o == nil || IsNil(o.Bootable) {
		return nil, false
	}
	return o.Bootable, true
}

// HasBootable returns a boolean if a field has been set.
func (o *StoragePhysicalDisk) HasBootable() bool {
	if o != nil && !IsNil(o.Bootable) {
		return true
	}

	return false
}

// SetBootable gets a reference to the given string and assigns it to the Bootable field.
func (o *StoragePhysicalDisk) SetBootable(v string) {
	o.Bootable = &v
}

// GetConfigurationCheckpoint returns the ConfigurationCheckpoint field value if set, zero value otherwise.
func (o *StoragePhysicalDisk) GetConfigurationCheckpoint() string {
	if o == nil || IsNil(o.ConfigurationCheckpoint) {
		var ret string
		return ret
	}
	return *o.ConfigurationCheckpoint
}

// GetConfigurationCheckpointOk returns a tuple with the ConfigurationCheckpoint field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StoragePhysicalDisk) GetConfigurationCheckpointOk() (*string, bool) {
	if o == nil || IsNil(o.ConfigurationCheckpoint) {
		return nil, false
	}
	return o.ConfigurationCheckpoint, true
}

// HasConfigurationCheckpoint returns a boolean if a field has been set.
func (o *StoragePhysicalDisk) HasConfigurationCheckpoint() bool {
	if o != nil && !IsNil(o.ConfigurationCheckpoint) {
		return true
	}

	return false
}

// SetConfigurationCheckpoint gets a reference to the given string and assigns it to the ConfigurationCheckpoint field.
func (o *StoragePhysicalDisk) SetConfigurationCheckpoint(v string) {
	o.ConfigurationCheckpoint = &v
}

// GetConfigurationState returns the ConfigurationState field value if set, zero value otherwise.
func (o *StoragePhysicalDisk) GetConfigurationState() string {
	if o == nil || IsNil(o.ConfigurationState) {
		var ret string
		return ret
	}
	return *o.ConfigurationState
}

// GetConfigurationStateOk returns a tuple with the ConfigurationState field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StoragePhysicalDisk) GetConfigurationStateOk() (*string, bool) {
	if o == nil || IsNil(o.ConfigurationState) {
		return nil, false
	}
	return o.ConfigurationState, true
}

// HasConfigurationState returns a boolean if a field has been set.
func (o *StoragePhysicalDisk) HasConfigurationState() bool {
	if o != nil && !IsNil(o.ConfigurationState) {
		return true
	}

	return false
}

// SetConfigurationState gets a reference to the given string and assigns it to the ConfigurationState field.
func (o *StoragePhysicalDisk) SetConfigurationState(v string) {
	o.ConfigurationState = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *StoragePhysicalDisk) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StoragePhysicalDisk) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *StoragePhysicalDisk) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *StoragePhysicalDisk) SetDescription(v string) {
	o.Description = &v
}

// GetDisabledForRemoval returns the DisabledForRemoval field value if set, zero value otherwise.
func (o *StoragePhysicalDisk) GetDisabledForRemoval() bool {
	if o == nil || IsNil(o.DisabledForRemoval) {
		var ret bool
		return ret
	}
	return *o.DisabledForRemoval
}

// GetDisabledForRemovalOk returns a tuple with the DisabledForRemoval field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StoragePhysicalDisk) GetDisabledForRemovalOk() (*bool, bool) {
	if o == nil || IsNil(o.DisabledForRemoval) {
		return nil, false
	}
	return o.DisabledForRemoval, true
}

// HasDisabledForRemoval returns a boolean if a field has been set.
func (o *StoragePhysicalDisk) HasDisabledForRemoval() bool {
	if o != nil && !IsNil(o.DisabledForRemoval) {
		return true
	}

	return false
}

// SetDisabledForRemoval gets a reference to the given bool and assigns it to the DisabledForRemoval field.
func (o *StoragePhysicalDisk) SetDisabledForRemoval(v bool) {
	o.DisabledForRemoval = &v
}

// GetDiscoveredPath returns the DiscoveredPath field value if set, zero value otherwise.
func (o *StoragePhysicalDisk) GetDiscoveredPath() string {
	if o == nil || IsNil(o.DiscoveredPath) {
		var ret string
		return ret
	}
	return *o.DiscoveredPath
}

// GetDiscoveredPathOk returns a tuple with the DiscoveredPath field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StoragePhysicalDisk) GetDiscoveredPathOk() (*string, bool) {
	if o == nil || IsNil(o.DiscoveredPath) {
		return nil, false
	}
	return o.DiscoveredPath, true
}

// HasDiscoveredPath returns a boolean if a field has been set.
func (o *StoragePhysicalDisk) HasDiscoveredPath() bool {
	if o != nil && !IsNil(o.DiscoveredPath) {
		return true
	}

	return false
}

// SetDiscoveredPath gets a reference to the given string and assigns it to the DiscoveredPath field.
func (o *StoragePhysicalDisk) SetDiscoveredPath(v string) {
	o.DiscoveredPath = &v
}

// GetDiskId returns the DiskId field value if set, zero value otherwise.
func (o *StoragePhysicalDisk) GetDiskId() string {
	if o == nil || IsNil(o.DiskId) {
		var ret string
		return ret
	}
	return *o.DiskId
}

// GetDiskIdOk returns a tuple with the DiskId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StoragePhysicalDisk) GetDiskIdOk() (*string, bool) {
	if o == nil || IsNil(o.DiskId) {
		return nil, false
	}
	return o.DiskId, true
}

// HasDiskId returns a boolean if a field has been set.
func (o *StoragePhysicalDisk) HasDiskId() bool {
	if o != nil && !IsNil(o.DiskId) {
		return true
	}

	return false
}

// SetDiskId gets a reference to the given string and assigns it to the DiskId field.
func (o *StoragePhysicalDisk) SetDiskId(v string) {
	o.DiskId = &v
}

// GetDiskState returns the DiskState field value if set, zero value otherwise.
func (o *StoragePhysicalDisk) GetDiskState() string {
	if o == nil || IsNil(o.DiskState) {
		var ret string
		return ret
	}
	return *o.DiskState
}

// GetDiskStateOk returns a tuple with the DiskState field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StoragePhysicalDisk) GetDiskStateOk() (*string, bool) {
	if o == nil || IsNil(o.DiskState) {
		return nil, false
	}
	return o.DiskState, true
}

// HasDiskState returns a boolean if a field has been set.
func (o *StoragePhysicalDisk) HasDiskState() bool {
	if o != nil && !IsNil(o.DiskState) {
		return true
	}

	return false
}

// SetDiskState gets a reference to the given string and assigns it to the DiskState field.
func (o *StoragePhysicalDisk) SetDiskState(v string) {
	o.DiskState = &v
}

// GetDriveFirmware returns the DriveFirmware field value if set, zero value otherwise.
func (o *StoragePhysicalDisk) GetDriveFirmware() string {
	if o == nil || IsNil(o.DriveFirmware) {
		var ret string
		return ret
	}
	return *o.DriveFirmware
}

// GetDriveFirmwareOk returns a tuple with the DriveFirmware field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StoragePhysicalDisk) GetDriveFirmwareOk() (*string, bool) {
	if o == nil || IsNil(o.DriveFirmware) {
		return nil, false
	}
	return o.DriveFirmware, true
}

// HasDriveFirmware returns a boolean if a field has been set.
func (o *StoragePhysicalDisk) HasDriveFirmware() bool {
	if o != nil && !IsNil(o.DriveFirmware) {
		return true
	}

	return false
}

// SetDriveFirmware gets a reference to the given string and assigns it to the DriveFirmware field.
func (o *StoragePhysicalDisk) SetDriveFirmware(v string) {
	o.DriveFirmware = &v
}

// GetDriveState returns the DriveState field value if set, zero value otherwise.
func (o *StoragePhysicalDisk) GetDriveState() string {
	if o == nil || IsNil(o.DriveState) {
		var ret string
		return ret
	}
	return *o.DriveState
}

// GetDriveStateOk returns a tuple with the DriveState field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StoragePhysicalDisk) GetDriveStateOk() (*string, bool) {
	if o == nil || IsNil(o.DriveState) {
		return nil, false
	}
	return o.DriveState, true
}

// HasDriveState returns a boolean if a field has been set.
func (o *StoragePhysicalDisk) HasDriveState() bool {
	if o != nil && !IsNil(o.DriveState) {
		return true
	}

	return false
}

// SetDriveState gets a reference to the given string and assigns it to the DriveState field.
func (o *StoragePhysicalDisk) SetDriveState(v string) {
	o.DriveState = &v
}

// GetEncryptionStatus returns the EncryptionStatus field value if set, zero value otherwise.
func (o *StoragePhysicalDisk) GetEncryptionStatus() string {
	if o == nil || IsNil(o.EncryptionStatus) {
		var ret string
		return ret
	}
	return *o.EncryptionStatus
}

// GetEncryptionStatusOk returns a tuple with the EncryptionStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StoragePhysicalDisk) GetEncryptionStatusOk() (*string, bool) {
	if o == nil || IsNil(o.EncryptionStatus) {
		return nil, false
	}
	return o.EncryptionStatus, true
}

// HasEncryptionStatus returns a boolean if a field has been set.
func (o *StoragePhysicalDisk) HasEncryptionStatus() bool {
	if o != nil && !IsNil(o.EncryptionStatus) {
		return true
	}

	return false
}

// SetEncryptionStatus gets a reference to the given string and assigns it to the EncryptionStatus field.
func (o *StoragePhysicalDisk) SetEncryptionStatus(v string) {
	o.EncryptionStatus = &v
}

// GetFailurePredicted returns the FailurePredicted field value if set, zero value otherwise.
func (o *StoragePhysicalDisk) GetFailurePredicted() bool {
	if o == nil || IsNil(o.FailurePredicted) {
		var ret bool
		return ret
	}
	return *o.FailurePredicted
}

// GetFailurePredictedOk returns a tuple with the FailurePredicted field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StoragePhysicalDisk) GetFailurePredictedOk() (*bool, bool) {
	if o == nil || IsNil(o.FailurePredicted) {
		return nil, false
	}
	return o.FailurePredicted, true
}

// HasFailurePredicted returns a boolean if a field has been set.
func (o *StoragePhysicalDisk) HasFailurePredicted() bool {
	if o != nil && !IsNil(o.FailurePredicted) {
		return true
	}

	return false
}

// SetFailurePredicted gets a reference to the given bool and assigns it to the FailurePredicted field.
func (o *StoragePhysicalDisk) SetFailurePredicted(v bool) {
	o.FailurePredicted = &v
}

// GetFdeCapable returns the FdeCapable field value if set, zero value otherwise.
func (o *StoragePhysicalDisk) GetFdeCapable() string {
	if o == nil || IsNil(o.FdeCapable) {
		var ret string
		return ret
	}
	return *o.FdeCapable
}

// GetFdeCapableOk returns a tuple with the FdeCapable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StoragePhysicalDisk) GetFdeCapableOk() (*string, bool) {
	if o == nil || IsNil(o.FdeCapable) {
		return nil, false
	}
	return o.FdeCapable, true
}

// HasFdeCapable returns a boolean if a field has been set.
func (o *StoragePhysicalDisk) HasFdeCapable() bool {
	if o != nil && !IsNil(o.FdeCapable) {
		return true
	}

	return false
}

// SetFdeCapable gets a reference to the given string and assigns it to the FdeCapable field.
func (o *StoragePhysicalDisk) SetFdeCapable(v string) {
	o.FdeCapable = &v
}

// GetHotSpareType returns the HotSpareType field value if set, zero value otherwise.
func (o *StoragePhysicalDisk) GetHotSpareType() string {
	if o == nil || IsNil(o.HotSpareType) {
		var ret string
		return ret
	}
	return *o.HotSpareType
}

// GetHotSpareTypeOk returns a tuple with the HotSpareType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StoragePhysicalDisk) GetHotSpareTypeOk() (*string, bool) {
	if o == nil || IsNil(o.HotSpareType) {
		return nil, false
	}
	return o.HotSpareType, true
}

// HasHotSpareType returns a boolean if a field has been set.
func (o *StoragePhysicalDisk) HasHotSpareType() bool {
	if o != nil && !IsNil(o.HotSpareType) {
		return true
	}

	return false
}

// SetHotSpareType gets a reference to the given string and assigns it to the HotSpareType field.
func (o *StoragePhysicalDisk) SetHotSpareType(v string) {
	o.HotSpareType = &v
}

// GetIndicatorLed returns the IndicatorLed field value if set, zero value otherwise.
func (o *StoragePhysicalDisk) GetIndicatorLed() string {
	if o == nil || IsNil(o.IndicatorLed) {
		var ret string
		return ret
	}
	return *o.IndicatorLed
}

// GetIndicatorLedOk returns a tuple with the IndicatorLed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StoragePhysicalDisk) GetIndicatorLedOk() (*string, bool) {
	if o == nil || IsNil(o.IndicatorLed) {
		return nil, false
	}
	return o.IndicatorLed, true
}

// HasIndicatorLed returns a boolean if a field has been set.
func (o *StoragePhysicalDisk) HasIndicatorLed() bool {
	if o != nil && !IsNil(o.IndicatorLed) {
		return true
	}

	return false
}

// SetIndicatorLed gets a reference to the given string and assigns it to the IndicatorLed field.
func (o *StoragePhysicalDisk) SetIndicatorLed(v string) {
	o.IndicatorLed = &v
}

// GetIsPlatformSupported returns the IsPlatformSupported field value if set, zero value otherwise.
func (o *StoragePhysicalDisk) GetIsPlatformSupported() bool {
	if o == nil || IsNil(o.IsPlatformSupported) {
		var ret bool
		return ret
	}
	return *o.IsPlatformSupported
}

// GetIsPlatformSupportedOk returns a tuple with the IsPlatformSupported field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StoragePhysicalDisk) GetIsPlatformSupportedOk() (*bool, bool) {
	if o == nil || IsNil(o.IsPlatformSupported) {
		return nil, false
	}
	return o.IsPlatformSupported, true
}

// HasIsPlatformSupported returns a boolean if a field has been set.
func (o *StoragePhysicalDisk) HasIsPlatformSupported() bool {
	if o != nil && !IsNil(o.IsPlatformSupported) {
		return true
	}

	return false
}

// SetIsPlatformSupported gets a reference to the given bool and assigns it to the IsPlatformSupported field.
func (o *StoragePhysicalDisk) SetIsPlatformSupported(v bool) {
	o.IsPlatformSupported = &v
}

// GetLinkSpeed returns the LinkSpeed field value if set, zero value otherwise.
func (o *StoragePhysicalDisk) GetLinkSpeed() string {
	if o == nil || IsNil(o.LinkSpeed) {
		var ret string
		return ret
	}
	return *o.LinkSpeed
}

// GetLinkSpeedOk returns a tuple with the LinkSpeed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StoragePhysicalDisk) GetLinkSpeedOk() (*string, bool) {
	if o == nil || IsNil(o.LinkSpeed) {
		return nil, false
	}
	return o.LinkSpeed, true
}

// HasLinkSpeed returns a boolean if a field has been set.
func (o *StoragePhysicalDisk) HasLinkSpeed() bool {
	if o != nil && !IsNil(o.LinkSpeed) {
		return true
	}

	return false
}

// SetLinkSpeed gets a reference to the given string and assigns it to the LinkSpeed field.
func (o *StoragePhysicalDisk) SetLinkSpeed(v string) {
	o.LinkSpeed = &v
}

// GetLinkState returns the LinkState field value if set, zero value otherwise.
func (o *StoragePhysicalDisk) GetLinkState() string {
	if o == nil || IsNil(o.LinkState) {
		var ret string
		return ret
	}
	return *o.LinkState
}

// GetLinkStateOk returns a tuple with the LinkState field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StoragePhysicalDisk) GetLinkStateOk() (*string, bool) {
	if o == nil || IsNil(o.LinkState) {
		return nil, false
	}
	return o.LinkState, true
}

// HasLinkState returns a boolean if a field has been set.
func (o *StoragePhysicalDisk) HasLinkState() bool {
	if o != nil && !IsNil(o.LinkState) {
		return true
	}

	return false
}

// SetLinkState gets a reference to the given string and assigns it to the LinkState field.
func (o *StoragePhysicalDisk) SetLinkState(v string) {
	o.LinkState = &v
}

// GetMaximumOperatingTemperature returns the MaximumOperatingTemperature field value if set, zero value otherwise.
func (o *StoragePhysicalDisk) GetMaximumOperatingTemperature() int64 {
	if o == nil || IsNil(o.MaximumOperatingTemperature) {
		var ret int64
		return ret
	}
	return *o.MaximumOperatingTemperature
}

// GetMaximumOperatingTemperatureOk returns a tuple with the MaximumOperatingTemperature field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StoragePhysicalDisk) GetMaximumOperatingTemperatureOk() (*int64, bool) {
	if o == nil || IsNil(o.MaximumOperatingTemperature) {
		return nil, false
	}
	return o.MaximumOperatingTemperature, true
}

// HasMaximumOperatingTemperature returns a boolean if a field has been set.
func (o *StoragePhysicalDisk) HasMaximumOperatingTemperature() bool {
	if o != nil && !IsNil(o.MaximumOperatingTemperature) {
		return true
	}

	return false
}

// SetMaximumOperatingTemperature gets a reference to the given int64 and assigns it to the MaximumOperatingTemperature field.
func (o *StoragePhysicalDisk) SetMaximumOperatingTemperature(v int64) {
	o.MaximumOperatingTemperature = &v
}

// GetMediaErrorCount returns the MediaErrorCount field value if set, zero value otherwise.
func (o *StoragePhysicalDisk) GetMediaErrorCount() int64 {
	if o == nil || IsNil(o.MediaErrorCount) {
		var ret int64
		return ret
	}
	return *o.MediaErrorCount
}

// GetMediaErrorCountOk returns a tuple with the MediaErrorCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StoragePhysicalDisk) GetMediaErrorCountOk() (*int64, bool) {
	if o == nil || IsNil(o.MediaErrorCount) {
		return nil, false
	}
	return o.MediaErrorCount, true
}

// HasMediaErrorCount returns a boolean if a field has been set.
func (o *StoragePhysicalDisk) HasMediaErrorCount() bool {
	if o != nil && !IsNil(o.MediaErrorCount) {
		return true
	}

	return false
}

// SetMediaErrorCount gets a reference to the given int64 and assigns it to the MediaErrorCount field.
func (o *StoragePhysicalDisk) SetMediaErrorCount(v int64) {
	o.MediaErrorCount = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *StoragePhysicalDisk) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StoragePhysicalDisk) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *StoragePhysicalDisk) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *StoragePhysicalDisk) SetName(v string) {
	o.Name = &v
}

// GetNonCoercedSizeBytes returns the NonCoercedSizeBytes field value if set, zero value otherwise.
func (o *StoragePhysicalDisk) GetNonCoercedSizeBytes() int64 {
	if o == nil || IsNil(o.NonCoercedSizeBytes) {
		var ret int64
		return ret
	}
	return *o.NonCoercedSizeBytes
}

// GetNonCoercedSizeBytesOk returns a tuple with the NonCoercedSizeBytes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StoragePhysicalDisk) GetNonCoercedSizeBytesOk() (*int64, bool) {
	if o == nil || IsNil(o.NonCoercedSizeBytes) {
		return nil, false
	}
	return o.NonCoercedSizeBytes, true
}

// HasNonCoercedSizeBytes returns a boolean if a field has been set.
func (o *StoragePhysicalDisk) HasNonCoercedSizeBytes() bool {
	if o != nil && !IsNil(o.NonCoercedSizeBytes) {
		return true
	}

	return false
}

// SetNonCoercedSizeBytes gets a reference to the given int64 and assigns it to the NonCoercedSizeBytes field.
func (o *StoragePhysicalDisk) SetNonCoercedSizeBytes(v int64) {
	o.NonCoercedSizeBytes = &v
}

// GetNumBlocks returns the NumBlocks field value if set, zero value otherwise.
func (o *StoragePhysicalDisk) GetNumBlocks() string {
	if o == nil || IsNil(o.NumBlocks) {
		var ret string
		return ret
	}
	return *o.NumBlocks
}

// GetNumBlocksOk returns a tuple with the NumBlocks field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StoragePhysicalDisk) GetNumBlocksOk() (*string, bool) {
	if o == nil || IsNil(o.NumBlocks) {
		return nil, false
	}
	return o.NumBlocks, true
}

// HasNumBlocks returns a boolean if a field has been set.
func (o *StoragePhysicalDisk) HasNumBlocks() bool {
	if o != nil && !IsNil(o.NumBlocks) {
		return true
	}

	return false
}

// SetNumBlocks gets a reference to the given string and assigns it to the NumBlocks field.
func (o *StoragePhysicalDisk) SetNumBlocks(v string) {
	o.NumBlocks = &v
}

// GetOperPowerState returns the OperPowerState field value if set, zero value otherwise.
func (o *StoragePhysicalDisk) GetOperPowerState() string {
	if o == nil || IsNil(o.OperPowerState) {
		var ret string
		return ret
	}
	return *o.OperPowerState
}

// GetOperPowerStateOk returns a tuple with the OperPowerState field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StoragePhysicalDisk) GetOperPowerStateOk() (*string, bool) {
	if o == nil || IsNil(o.OperPowerState) {
		return nil, false
	}
	return o.OperPowerState, true
}

// HasOperPowerState returns a boolean if a field has been set.
func (o *StoragePhysicalDisk) HasOperPowerState() bool {
	if o != nil && !IsNil(o.OperPowerState) {
		return true
	}

	return false
}

// SetOperPowerState gets a reference to the given string and assigns it to the OperPowerState field.
func (o *StoragePhysicalDisk) SetOperPowerState(v string) {
	o.OperPowerState = &v
}

// GetOperQualifierReason returns the OperQualifierReason field value if set, zero value otherwise.
func (o *StoragePhysicalDisk) GetOperQualifierReason() string {
	if o == nil || IsNil(o.OperQualifierReason) {
		var ret string
		return ret
	}
	return *o.OperQualifierReason
}

// GetOperQualifierReasonOk returns a tuple with the OperQualifierReason field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StoragePhysicalDisk) GetOperQualifierReasonOk() (*string, bool) {
	if o == nil || IsNil(o.OperQualifierReason) {
		return nil, false
	}
	return o.OperQualifierReason, true
}

// HasOperQualifierReason returns a boolean if a field has been set.
func (o *StoragePhysicalDisk) HasOperQualifierReason() bool {
	if o != nil && !IsNil(o.OperQualifierReason) {
		return true
	}

	return false
}

// SetOperQualifierReason gets a reference to the given string and assigns it to the OperQualifierReason field.
func (o *StoragePhysicalDisk) SetOperQualifierReason(v string) {
	o.OperQualifierReason = &v
}

// GetOperability returns the Operability field value if set, zero value otherwise.
func (o *StoragePhysicalDisk) GetOperability() string {
	if o == nil || IsNil(o.Operability) {
		var ret string
		return ret
	}
	return *o.Operability
}

// GetOperabilityOk returns a tuple with the Operability field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StoragePhysicalDisk) GetOperabilityOk() (*string, bool) {
	if o == nil || IsNil(o.Operability) {
		return nil, false
	}
	return o.Operability, true
}

// HasOperability returns a boolean if a field has been set.
func (o *StoragePhysicalDisk) HasOperability() bool {
	if o != nil && !IsNil(o.Operability) {
		return true
	}

	return false
}

// SetOperability gets a reference to the given string and assigns it to the Operability field.
func (o *StoragePhysicalDisk) SetOperability(v string) {
	o.Operability = &v
}

// GetOperatingTemperature returns the OperatingTemperature field value if set, zero value otherwise.
func (o *StoragePhysicalDisk) GetOperatingTemperature() int64 {
	if o == nil || IsNil(o.OperatingTemperature) {
		var ret int64
		return ret
	}
	return *o.OperatingTemperature
}

// GetOperatingTemperatureOk returns a tuple with the OperatingTemperature field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StoragePhysicalDisk) GetOperatingTemperatureOk() (*int64, bool) {
	if o == nil || IsNil(o.OperatingTemperature) {
		return nil, false
	}
	return o.OperatingTemperature, true
}

// HasOperatingTemperature returns a boolean if a field has been set.
func (o *StoragePhysicalDisk) HasOperatingTemperature() bool {
	if o != nil && !IsNil(o.OperatingTemperature) {
		return true
	}

	return false
}

// SetOperatingTemperature gets a reference to the given int64 and assigns it to the OperatingTemperature field.
func (o *StoragePhysicalDisk) SetOperatingTemperature(v int64) {
	o.OperatingTemperature = &v
}

// GetPartNumber returns the PartNumber field value if set, zero value otherwise.
func (o *StoragePhysicalDisk) GetPartNumber() string {
	if o == nil || IsNil(o.PartNumber) {
		var ret string
		return ret
	}
	return *o.PartNumber
}

// GetPartNumberOk returns a tuple with the PartNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StoragePhysicalDisk) GetPartNumberOk() (*string, bool) {
	if o == nil || IsNil(o.PartNumber) {
		return nil, false
	}
	return o.PartNumber, true
}

// HasPartNumber returns a boolean if a field has been set.
func (o *StoragePhysicalDisk) HasPartNumber() bool {
	if o != nil && !IsNil(o.PartNumber) {
		return true
	}

	return false
}

// SetPartNumber gets a reference to the given string and assigns it to the PartNumber field.
func (o *StoragePhysicalDisk) SetPartNumber(v string) {
	o.PartNumber = &v
}

// GetPercentLifeLeft returns the PercentLifeLeft field value if set, zero value otherwise.
func (o *StoragePhysicalDisk) GetPercentLifeLeft() int64 {
	if o == nil || IsNil(o.PercentLifeLeft) {
		var ret int64
		return ret
	}
	return *o.PercentLifeLeft
}

// GetPercentLifeLeftOk returns a tuple with the PercentLifeLeft field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StoragePhysicalDisk) GetPercentLifeLeftOk() (*int64, bool) {
	if o == nil || IsNil(o.PercentLifeLeft) {
		return nil, false
	}
	return o.PercentLifeLeft, true
}

// HasPercentLifeLeft returns a boolean if a field has been set.
func (o *StoragePhysicalDisk) HasPercentLifeLeft() bool {
	if o != nil && !IsNil(o.PercentLifeLeft) {
		return true
	}

	return false
}

// SetPercentLifeLeft gets a reference to the given int64 and assigns it to the PercentLifeLeft field.
func (o *StoragePhysicalDisk) SetPercentLifeLeft(v int64) {
	o.PercentLifeLeft = &v
}

// GetPercentReservedCapacityConsumed returns the PercentReservedCapacityConsumed field value if set, zero value otherwise.
func (o *StoragePhysicalDisk) GetPercentReservedCapacityConsumed() int64 {
	if o == nil || IsNil(o.PercentReservedCapacityConsumed) {
		var ret int64
		return ret
	}
	return *o.PercentReservedCapacityConsumed
}

// GetPercentReservedCapacityConsumedOk returns a tuple with the PercentReservedCapacityConsumed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StoragePhysicalDisk) GetPercentReservedCapacityConsumedOk() (*int64, bool) {
	if o == nil || IsNil(o.PercentReservedCapacityConsumed) {
		return nil, false
	}
	return o.PercentReservedCapacityConsumed, true
}

// HasPercentReservedCapacityConsumed returns a boolean if a field has been set.
func (o *StoragePhysicalDisk) HasPercentReservedCapacityConsumed() bool {
	if o != nil && !IsNil(o.PercentReservedCapacityConsumed) {
		return true
	}

	return false
}

// SetPercentReservedCapacityConsumed gets a reference to the given int64 and assigns it to the PercentReservedCapacityConsumed field.
func (o *StoragePhysicalDisk) SetPercentReservedCapacityConsumed(v int64) {
	o.PercentReservedCapacityConsumed = &v
}

// GetPerformancePercent returns the PerformancePercent field value if set, zero value otherwise.
func (o *StoragePhysicalDisk) GetPerformancePercent() int64 {
	if o == nil || IsNil(o.PerformancePercent) {
		var ret int64
		return ret
	}
	return *o.PerformancePercent
}

// GetPerformancePercentOk returns a tuple with the PerformancePercent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StoragePhysicalDisk) GetPerformancePercentOk() (*int64, bool) {
	if o == nil || IsNil(o.PerformancePercent) {
		return nil, false
	}
	return o.PerformancePercent, true
}

// HasPerformancePercent returns a boolean if a field has been set.
func (o *StoragePhysicalDisk) HasPerformancePercent() bool {
	if o != nil && !IsNil(o.PerformancePercent) {
		return true
	}

	return false
}

// SetPerformancePercent gets a reference to the given int64 and assigns it to the PerformancePercent field.
func (o *StoragePhysicalDisk) SetPerformancePercent(v int64) {
	o.PerformancePercent = &v
}

// GetPhysicalBlockSize returns the PhysicalBlockSize field value if set, zero value otherwise.
func (o *StoragePhysicalDisk) GetPhysicalBlockSize() string {
	if o == nil || IsNil(o.PhysicalBlockSize) {
		var ret string
		return ret
	}
	return *o.PhysicalBlockSize
}

// GetPhysicalBlockSizeOk returns a tuple with the PhysicalBlockSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StoragePhysicalDisk) GetPhysicalBlockSizeOk() (*string, bool) {
	if o == nil || IsNil(o.PhysicalBlockSize) {
		return nil, false
	}
	return o.PhysicalBlockSize, true
}

// HasPhysicalBlockSize returns a boolean if a field has been set.
func (o *StoragePhysicalDisk) HasPhysicalBlockSize() bool {
	if o != nil && !IsNil(o.PhysicalBlockSize) {
		return true
	}

	return false
}

// SetPhysicalBlockSize gets a reference to the given string and assigns it to the PhysicalBlockSize field.
func (o *StoragePhysicalDisk) SetPhysicalBlockSize(v string) {
	o.PhysicalBlockSize = &v
}

// GetPid returns the Pid field value if set, zero value otherwise.
func (o *StoragePhysicalDisk) GetPid() string {
	if o == nil || IsNil(o.Pid) {
		var ret string
		return ret
	}
	return *o.Pid
}

// GetPidOk returns a tuple with the Pid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StoragePhysicalDisk) GetPidOk() (*string, bool) {
	if o == nil || IsNil(o.Pid) {
		return nil, false
	}
	return o.Pid, true
}

// HasPid returns a boolean if a field has been set.
func (o *StoragePhysicalDisk) HasPid() bool {
	if o != nil && !IsNil(o.Pid) {
		return true
	}

	return false
}

// SetPid gets a reference to the given string and assigns it to the Pid field.
func (o *StoragePhysicalDisk) SetPid(v string) {
	o.Pid = &v
}

// GetPowerCycleCount returns the PowerCycleCount field value if set, zero value otherwise.
func (o *StoragePhysicalDisk) GetPowerCycleCount() int64 {
	if o == nil || IsNil(o.PowerCycleCount) {
		var ret int64
		return ret
	}
	return *o.PowerCycleCount
}

// GetPowerCycleCountOk returns a tuple with the PowerCycleCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StoragePhysicalDisk) GetPowerCycleCountOk() (*int64, bool) {
	if o == nil || IsNil(o.PowerCycleCount) {
		return nil, false
	}
	return o.PowerCycleCount, true
}

// HasPowerCycleCount returns a boolean if a field has been set.
func (o *StoragePhysicalDisk) HasPowerCycleCount() bool {
	if o != nil && !IsNil(o.PowerCycleCount) {
		return true
	}

	return false
}

// SetPowerCycleCount gets a reference to the given int64 and assigns it to the PowerCycleCount field.
func (o *StoragePhysicalDisk) SetPowerCycleCount(v int64) {
	o.PowerCycleCount = &v
}

// GetPowerOnHours returns the PowerOnHours field value if set, zero value otherwise.
func (o *StoragePhysicalDisk) GetPowerOnHours() int64 {
	if o == nil || IsNil(o.PowerOnHours) {
		var ret int64
		return ret
	}
	return *o.PowerOnHours
}

// GetPowerOnHoursOk returns a tuple with the PowerOnHours field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StoragePhysicalDisk) GetPowerOnHoursOk() (*int64, bool) {
	if o == nil || IsNil(o.PowerOnHours) {
		return nil, false
	}
	return o.PowerOnHours, true
}

// HasPowerOnHours returns a boolean if a field has been set.
func (o *StoragePhysicalDisk) HasPowerOnHours() bool {
	if o != nil && !IsNil(o.PowerOnHours) {
		return true
	}

	return false
}

// SetPowerOnHours gets a reference to the given int64 and assigns it to the PowerOnHours field.
func (o *StoragePhysicalDisk) SetPowerOnHours(v int64) {
	o.PowerOnHours = &v
}

// GetPowerOnHoursPercentage returns the PowerOnHoursPercentage field value if set, zero value otherwise.
func (o *StoragePhysicalDisk) GetPowerOnHoursPercentage() int64 {
	if o == nil || IsNil(o.PowerOnHoursPercentage) {
		var ret int64
		return ret
	}
	return *o.PowerOnHoursPercentage
}

// GetPowerOnHoursPercentageOk returns a tuple with the PowerOnHoursPercentage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StoragePhysicalDisk) GetPowerOnHoursPercentageOk() (*int64, bool) {
	if o == nil || IsNil(o.PowerOnHoursPercentage) {
		return nil, false
	}
	return o.PowerOnHoursPercentage, true
}

// HasPowerOnHoursPercentage returns a boolean if a field has been set.
func (o *StoragePhysicalDisk) HasPowerOnHoursPercentage() bool {
	if o != nil && !IsNil(o.PowerOnHoursPercentage) {
		return true
	}

	return false
}

// SetPowerOnHoursPercentage gets a reference to the given int64 and assigns it to the PowerOnHoursPercentage field.
func (o *StoragePhysicalDisk) SetPowerOnHoursPercentage(v int64) {
	o.PowerOnHoursPercentage = &v
}

// GetPredictedMediaLifeLeftPercent returns the PredictedMediaLifeLeftPercent field value if set, zero value otherwise.
func (o *StoragePhysicalDisk) GetPredictedMediaLifeLeftPercent() int64 {
	if o == nil || IsNil(o.PredictedMediaLifeLeftPercent) {
		var ret int64
		return ret
	}
	return *o.PredictedMediaLifeLeftPercent
}

// GetPredictedMediaLifeLeftPercentOk returns a tuple with the PredictedMediaLifeLeftPercent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StoragePhysicalDisk) GetPredictedMediaLifeLeftPercentOk() (*int64, bool) {
	if o == nil || IsNil(o.PredictedMediaLifeLeftPercent) {
		return nil, false
	}
	return o.PredictedMediaLifeLeftPercent, true
}

// HasPredictedMediaLifeLeftPercent returns a boolean if a field has been set.
func (o *StoragePhysicalDisk) HasPredictedMediaLifeLeftPercent() bool {
	if o != nil && !IsNil(o.PredictedMediaLifeLeftPercent) {
		return true
	}

	return false
}

// SetPredictedMediaLifeLeftPercent gets a reference to the given int64 and assigns it to the PredictedMediaLifeLeftPercent field.
func (o *StoragePhysicalDisk) SetPredictedMediaLifeLeftPercent(v int64) {
	o.PredictedMediaLifeLeftPercent = &v
}

// GetPredictiveFailureCount returns the PredictiveFailureCount field value if set, zero value otherwise.
func (o *StoragePhysicalDisk) GetPredictiveFailureCount() int64 {
	if o == nil || IsNil(o.PredictiveFailureCount) {
		var ret int64
		return ret
	}
	return *o.PredictiveFailureCount
}

// GetPredictiveFailureCountOk returns a tuple with the PredictiveFailureCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StoragePhysicalDisk) GetPredictiveFailureCountOk() (*int64, bool) {
	if o == nil || IsNil(o.PredictiveFailureCount) {
		return nil, false
	}
	return o.PredictiveFailureCount, true
}

// HasPredictiveFailureCount returns a boolean if a field has been set.
func (o *StoragePhysicalDisk) HasPredictiveFailureCount() bool {
	if o != nil && !IsNil(o.PredictiveFailureCount) {
		return true
	}

	return false
}

// SetPredictiveFailureCount gets a reference to the given int64 and assigns it to the PredictiveFailureCount field.
func (o *StoragePhysicalDisk) SetPredictiveFailureCount(v int64) {
	o.PredictiveFailureCount = &v
}

// GetProtocol returns the Protocol field value if set, zero value otherwise.
func (o *StoragePhysicalDisk) GetProtocol() string {
	if o == nil || IsNil(o.Protocol) {
		var ret string
		return ret
	}
	return *o.Protocol
}

// GetProtocolOk returns a tuple with the Protocol field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StoragePhysicalDisk) GetProtocolOk() (*string, bool) {
	if o == nil || IsNil(o.Protocol) {
		return nil, false
	}
	return o.Protocol, true
}

// HasProtocol returns a boolean if a field has been set.
func (o *StoragePhysicalDisk) HasProtocol() bool {
	if o != nil && !IsNil(o.Protocol) {
		return true
	}

	return false
}

// SetProtocol gets a reference to the given string and assigns it to the Protocol field.
func (o *StoragePhysicalDisk) SetProtocol(v string) {
	o.Protocol = &v
}

// GetRawSize returns the RawSize field value if set, zero value otherwise.
func (o *StoragePhysicalDisk) GetRawSize() string {
	if o == nil || IsNil(o.RawSize) {
		var ret string
		return ret
	}
	return *o.RawSize
}

// GetRawSizeOk returns a tuple with the RawSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StoragePhysicalDisk) GetRawSizeOk() (*string, bool) {
	if o == nil || IsNil(o.RawSize) {
		return nil, false
	}
	return o.RawSize, true
}

// HasRawSize returns a boolean if a field has been set.
func (o *StoragePhysicalDisk) HasRawSize() bool {
	if o != nil && !IsNil(o.RawSize) {
		return true
	}

	return false
}

// SetRawSize gets a reference to the given string and assigns it to the RawSize field.
func (o *StoragePhysicalDisk) SetRawSize(v string) {
	o.RawSize = &v
}

// GetReadErrorCountThreshold returns the ReadErrorCountThreshold field value if set, zero value otherwise.
func (o *StoragePhysicalDisk) GetReadErrorCountThreshold() int64 {
	if o == nil || IsNil(o.ReadErrorCountThreshold) {
		var ret int64
		return ret
	}
	return *o.ReadErrorCountThreshold
}

// GetReadErrorCountThresholdOk returns a tuple with the ReadErrorCountThreshold field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StoragePhysicalDisk) GetReadErrorCountThresholdOk() (*int64, bool) {
	if o == nil || IsNil(o.ReadErrorCountThreshold) {
		return nil, false
	}
	return o.ReadErrorCountThreshold, true
}

// HasReadErrorCountThreshold returns a boolean if a field has been set.
func (o *StoragePhysicalDisk) HasReadErrorCountThreshold() bool {
	if o != nil && !IsNil(o.ReadErrorCountThreshold) {
		return true
	}

	return false
}

// SetReadErrorCountThreshold gets a reference to the given int64 and assigns it to the ReadErrorCountThreshold field.
func (o *StoragePhysicalDisk) SetReadErrorCountThreshold(v int64) {
	o.ReadErrorCountThreshold = &v
}

// GetReadIoErrorCount returns the ReadIoErrorCount field value if set, zero value otherwise.
func (o *StoragePhysicalDisk) GetReadIoErrorCount() int64 {
	if o == nil || IsNil(o.ReadIoErrorCount) {
		var ret int64
		return ret
	}
	return *o.ReadIoErrorCount
}

// GetReadIoErrorCountOk returns a tuple with the ReadIoErrorCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StoragePhysicalDisk) GetReadIoErrorCountOk() (*int64, bool) {
	if o == nil || IsNil(o.ReadIoErrorCount) {
		return nil, false
	}
	return o.ReadIoErrorCount, true
}

// HasReadIoErrorCount returns a boolean if a field has been set.
func (o *StoragePhysicalDisk) HasReadIoErrorCount() bool {
	if o != nil && !IsNil(o.ReadIoErrorCount) {
		return true
	}

	return false
}

// SetReadIoErrorCount gets a reference to the given int64 and assigns it to the ReadIoErrorCount field.
func (o *StoragePhysicalDisk) SetReadIoErrorCount(v int64) {
	o.ReadIoErrorCount = &v
}

// GetSecured returns the Secured field value if set, zero value otherwise.
func (o *StoragePhysicalDisk) GetSecured() string {
	if o == nil || IsNil(o.Secured) {
		var ret string
		return ret
	}
	return *o.Secured
}

// GetSecuredOk returns a tuple with the Secured field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StoragePhysicalDisk) GetSecuredOk() (*string, bool) {
	if o == nil || IsNil(o.Secured) {
		return nil, false
	}
	return o.Secured, true
}

// HasSecured returns a boolean if a field has been set.
func (o *StoragePhysicalDisk) HasSecured() bool {
	if o != nil && !IsNil(o.Secured) {
		return true
	}

	return false
}

// SetSecured gets a reference to the given string and assigns it to the Secured field.
func (o *StoragePhysicalDisk) SetSecured(v string) {
	o.Secured = &v
}

// GetSize returns the Size field value if set, zero value otherwise.
func (o *StoragePhysicalDisk) GetSize() string {
	if o == nil || IsNil(o.Size) {
		var ret string
		return ret
	}
	return *o.Size
}

// GetSizeOk returns a tuple with the Size field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StoragePhysicalDisk) GetSizeOk() (*string, bool) {
	if o == nil || IsNil(o.Size) {
		return nil, false
	}
	return o.Size, true
}

// HasSize returns a boolean if a field has been set.
func (o *StoragePhysicalDisk) HasSize() bool {
	if o != nil && !IsNil(o.Size) {
		return true
	}

	return false
}

// SetSize gets a reference to the given string and assigns it to the Size field.
func (o *StoragePhysicalDisk) SetSize(v string) {
	o.Size = &v
}

// GetThermal returns the Thermal field value if set, zero value otherwise.
func (o *StoragePhysicalDisk) GetThermal() string {
	if o == nil || IsNil(o.Thermal) {
		var ret string
		return ret
	}
	return *o.Thermal
}

// GetThermalOk returns a tuple with the Thermal field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StoragePhysicalDisk) GetThermalOk() (*string, bool) {
	if o == nil || IsNil(o.Thermal) {
		return nil, false
	}
	return o.Thermal, true
}

// HasThermal returns a boolean if a field has been set.
func (o *StoragePhysicalDisk) HasThermal() bool {
	if o != nil && !IsNil(o.Thermal) {
		return true
	}

	return false
}

// SetThermal gets a reference to the given string and assigns it to the Thermal field.
func (o *StoragePhysicalDisk) SetThermal(v string) {
	o.Thermal = &v
}

// GetThresholdOperatingTemperature returns the ThresholdOperatingTemperature field value if set, zero value otherwise.
func (o *StoragePhysicalDisk) GetThresholdOperatingTemperature() int64 {
	if o == nil || IsNil(o.ThresholdOperatingTemperature) {
		var ret int64
		return ret
	}
	return *o.ThresholdOperatingTemperature
}

// GetThresholdOperatingTemperatureOk returns a tuple with the ThresholdOperatingTemperature field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StoragePhysicalDisk) GetThresholdOperatingTemperatureOk() (*int64, bool) {
	if o == nil || IsNil(o.ThresholdOperatingTemperature) {
		return nil, false
	}
	return o.ThresholdOperatingTemperature, true
}

// HasThresholdOperatingTemperature returns a boolean if a field has been set.
func (o *StoragePhysicalDisk) HasThresholdOperatingTemperature() bool {
	if o != nil && !IsNil(o.ThresholdOperatingTemperature) {
		return true
	}

	return false
}

// SetThresholdOperatingTemperature gets a reference to the given int64 and assigns it to the ThresholdOperatingTemperature field.
func (o *StoragePhysicalDisk) SetThresholdOperatingTemperature(v int64) {
	o.ThresholdOperatingTemperature = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *StoragePhysicalDisk) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StoragePhysicalDisk) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *StoragePhysicalDisk) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *StoragePhysicalDisk) SetType(v string) {
	o.Type = &v
}

// GetVariantType returns the VariantType field value if set, zero value otherwise.
func (o *StoragePhysicalDisk) GetVariantType() string {
	if o == nil || IsNil(o.VariantType) {
		var ret string
		return ret
	}
	return *o.VariantType
}

// GetVariantTypeOk returns a tuple with the VariantType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StoragePhysicalDisk) GetVariantTypeOk() (*string, bool) {
	if o == nil || IsNil(o.VariantType) {
		return nil, false
	}
	return o.VariantType, true
}

// HasVariantType returns a boolean if a field has been set.
func (o *StoragePhysicalDisk) HasVariantType() bool {
	if o != nil && !IsNil(o.VariantType) {
		return true
	}

	return false
}

// SetVariantType gets a reference to the given string and assigns it to the VariantType field.
func (o *StoragePhysicalDisk) SetVariantType(v string) {
	o.VariantType = &v
}

// GetWearStatusInDays returns the WearStatusInDays field value if set, zero value otherwise.
func (o *StoragePhysicalDisk) GetWearStatusInDays() int64 {
	if o == nil || IsNil(o.WearStatusInDays) {
		var ret int64
		return ret
	}
	return *o.WearStatusInDays
}

// GetWearStatusInDaysOk returns a tuple with the WearStatusInDays field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StoragePhysicalDisk) GetWearStatusInDaysOk() (*int64, bool) {
	if o == nil || IsNil(o.WearStatusInDays) {
		return nil, false
	}
	return o.WearStatusInDays, true
}

// HasWearStatusInDays returns a boolean if a field has been set.
func (o *StoragePhysicalDisk) HasWearStatusInDays() bool {
	if o != nil && !IsNil(o.WearStatusInDays) {
		return true
	}

	return false
}

// SetWearStatusInDays gets a reference to the given int64 and assigns it to the WearStatusInDays field.
func (o *StoragePhysicalDisk) SetWearStatusInDays(v int64) {
	o.WearStatusInDays = &v
}

// GetWriteErrorCountThreshold returns the WriteErrorCountThreshold field value if set, zero value otherwise.
func (o *StoragePhysicalDisk) GetWriteErrorCountThreshold() int64 {
	if o == nil || IsNil(o.WriteErrorCountThreshold) {
		var ret int64
		return ret
	}
	return *o.WriteErrorCountThreshold
}

// GetWriteErrorCountThresholdOk returns a tuple with the WriteErrorCountThreshold field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StoragePhysicalDisk) GetWriteErrorCountThresholdOk() (*int64, bool) {
	if o == nil || IsNil(o.WriteErrorCountThreshold) {
		return nil, false
	}
	return o.WriteErrorCountThreshold, true
}

// HasWriteErrorCountThreshold returns a boolean if a field has been set.
func (o *StoragePhysicalDisk) HasWriteErrorCountThreshold() bool {
	if o != nil && !IsNil(o.WriteErrorCountThreshold) {
		return true
	}

	return false
}

// SetWriteErrorCountThreshold gets a reference to the given int64 and assigns it to the WriteErrorCountThreshold field.
func (o *StoragePhysicalDisk) SetWriteErrorCountThreshold(v int64) {
	o.WriteErrorCountThreshold = &v
}

// GetWriteIoErrorCount returns the WriteIoErrorCount field value if set, zero value otherwise.
func (o *StoragePhysicalDisk) GetWriteIoErrorCount() int64 {
	if o == nil || IsNil(o.WriteIoErrorCount) {
		var ret int64
		return ret
	}
	return *o.WriteIoErrorCount
}

// GetWriteIoErrorCountOk returns a tuple with the WriteIoErrorCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StoragePhysicalDisk) GetWriteIoErrorCountOk() (*int64, bool) {
	if o == nil || IsNil(o.WriteIoErrorCount) {
		return nil, false
	}
	return o.WriteIoErrorCount, true
}

// HasWriteIoErrorCount returns a boolean if a field has been set.
func (o *StoragePhysicalDisk) HasWriteIoErrorCount() bool {
	if o != nil && !IsNil(o.WriteIoErrorCount) {
		return true
	}

	return false
}

// SetWriteIoErrorCount gets a reference to the given int64 and assigns it to the WriteIoErrorCount field.
func (o *StoragePhysicalDisk) SetWriteIoErrorCount(v int64) {
	o.WriteIoErrorCount = &v
}

// GetInventoryDeviceInfo returns the InventoryDeviceInfo field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *StoragePhysicalDisk) GetInventoryDeviceInfo() InventoryDeviceInfoRelationship {
	if o == nil || IsNil(o.InventoryDeviceInfo.Get()) {
		var ret InventoryDeviceInfoRelationship
		return ret
	}
	return *o.InventoryDeviceInfo.Get()
}

// GetInventoryDeviceInfoOk returns a tuple with the InventoryDeviceInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *StoragePhysicalDisk) GetInventoryDeviceInfoOk() (*InventoryDeviceInfoRelationship, bool) {
	if o == nil {
		return nil, false
	}
	return o.InventoryDeviceInfo.Get(), o.InventoryDeviceInfo.IsSet()
}

// HasInventoryDeviceInfo returns a boolean if a field has been set.
func (o *StoragePhysicalDisk) HasInventoryDeviceInfo() bool {
	if o != nil && o.InventoryDeviceInfo.IsSet() {
		return true
	}

	return false
}

// SetInventoryDeviceInfo gets a reference to the given NullableInventoryDeviceInfoRelationship and assigns it to the InventoryDeviceInfo field.
func (o *StoragePhysicalDisk) SetInventoryDeviceInfo(v InventoryDeviceInfoRelationship) {
	o.InventoryDeviceInfo.Set(&v)
}

// SetInventoryDeviceInfoNil sets the value for InventoryDeviceInfo to be an explicit nil
func (o *StoragePhysicalDisk) SetInventoryDeviceInfoNil() {
	o.InventoryDeviceInfo.Set(nil)
}

// UnsetInventoryDeviceInfo ensures that no value is present for InventoryDeviceInfo, not even an explicit nil
func (o *StoragePhysicalDisk) UnsetInventoryDeviceInfo() {
	o.InventoryDeviceInfo.Unset()
}

// GetLocatorLed returns the LocatorLed field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *StoragePhysicalDisk) GetLocatorLed() EquipmentLocatorLedRelationship {
	if o == nil || IsNil(o.LocatorLed.Get()) {
		var ret EquipmentLocatorLedRelationship
		return ret
	}
	return *o.LocatorLed.Get()
}

// GetLocatorLedOk returns a tuple with the LocatorLed field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *StoragePhysicalDisk) GetLocatorLedOk() (*EquipmentLocatorLedRelationship, bool) {
	if o == nil {
		return nil, false
	}
	return o.LocatorLed.Get(), o.LocatorLed.IsSet()
}

// HasLocatorLed returns a boolean if a field has been set.
func (o *StoragePhysicalDisk) HasLocatorLed() bool {
	if o != nil && o.LocatorLed.IsSet() {
		return true
	}

	return false
}

// SetLocatorLed gets a reference to the given NullableEquipmentLocatorLedRelationship and assigns it to the LocatorLed field.
func (o *StoragePhysicalDisk) SetLocatorLed(v EquipmentLocatorLedRelationship) {
	o.LocatorLed.Set(&v)
}

// SetLocatorLedNil sets the value for LocatorLed to be an explicit nil
func (o *StoragePhysicalDisk) SetLocatorLedNil() {
	o.LocatorLed.Set(nil)
}

// UnsetLocatorLed ensures that no value is present for LocatorLed, not even an explicit nil
func (o *StoragePhysicalDisk) UnsetLocatorLed() {
	o.LocatorLed.Unset()
}

// GetPhysicalDiskExtensions returns the PhysicalDiskExtensions field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *StoragePhysicalDisk) GetPhysicalDiskExtensions() []StoragePhysicalDiskExtensionRelationship {
	if o == nil {
		var ret []StoragePhysicalDiskExtensionRelationship
		return ret
	}
	return o.PhysicalDiskExtensions
}

// GetPhysicalDiskExtensionsOk returns a tuple with the PhysicalDiskExtensions field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *StoragePhysicalDisk) GetPhysicalDiskExtensionsOk() ([]StoragePhysicalDiskExtensionRelationship, bool) {
	if o == nil || IsNil(o.PhysicalDiskExtensions) {
		return nil, false
	}
	return o.PhysicalDiskExtensions, true
}

// HasPhysicalDiskExtensions returns a boolean if a field has been set.
func (o *StoragePhysicalDisk) HasPhysicalDiskExtensions() bool {
	if o != nil && !IsNil(o.PhysicalDiskExtensions) {
		return true
	}

	return false
}

// SetPhysicalDiskExtensions gets a reference to the given []StoragePhysicalDiskExtensionRelationship and assigns it to the PhysicalDiskExtensions field.
func (o *StoragePhysicalDisk) SetPhysicalDiskExtensions(v []StoragePhysicalDiskExtensionRelationship) {
	o.PhysicalDiskExtensions = v
}

// GetRegisteredDevice returns the RegisteredDevice field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *StoragePhysicalDisk) GetRegisteredDevice() AssetDeviceRegistrationRelationship {
	if o == nil || IsNil(o.RegisteredDevice.Get()) {
		var ret AssetDeviceRegistrationRelationship
		return ret
	}
	return *o.RegisteredDevice.Get()
}

// GetRegisteredDeviceOk returns a tuple with the RegisteredDevice field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *StoragePhysicalDisk) GetRegisteredDeviceOk() (*AssetDeviceRegistrationRelationship, bool) {
	if o == nil {
		return nil, false
	}
	return o.RegisteredDevice.Get(), o.RegisteredDevice.IsSet()
}

// HasRegisteredDevice returns a boolean if a field has been set.
func (o *StoragePhysicalDisk) HasRegisteredDevice() bool {
	if o != nil && o.RegisteredDevice.IsSet() {
		return true
	}

	return false
}

// SetRegisteredDevice gets a reference to the given NullableAssetDeviceRegistrationRelationship and assigns it to the RegisteredDevice field.
func (o *StoragePhysicalDisk) SetRegisteredDevice(v AssetDeviceRegistrationRelationship) {
	o.RegisteredDevice.Set(&v)
}

// SetRegisteredDeviceNil sets the value for RegisteredDevice to be an explicit nil
func (o *StoragePhysicalDisk) SetRegisteredDeviceNil() {
	o.RegisteredDevice.Set(nil)
}

// UnsetRegisteredDevice ensures that no value is present for RegisteredDevice, not even an explicit nil
func (o *StoragePhysicalDisk) UnsetRegisteredDevice() {
	o.RegisteredDevice.Unset()
}

// GetRunningFirmware returns the RunningFirmware field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *StoragePhysicalDisk) GetRunningFirmware() []FirmwareRunningFirmwareRelationship {
	if o == nil {
		var ret []FirmwareRunningFirmwareRelationship
		return ret
	}
	return o.RunningFirmware
}

// GetRunningFirmwareOk returns a tuple with the RunningFirmware field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *StoragePhysicalDisk) GetRunningFirmwareOk() ([]FirmwareRunningFirmwareRelationship, bool) {
	if o == nil || IsNil(o.RunningFirmware) {
		return nil, false
	}
	return o.RunningFirmware, true
}

// HasRunningFirmware returns a boolean if a field has been set.
func (o *StoragePhysicalDisk) HasRunningFirmware() bool {
	if o != nil && !IsNil(o.RunningFirmware) {
		return true
	}

	return false
}

// SetRunningFirmware gets a reference to the given []FirmwareRunningFirmwareRelationship and assigns it to the RunningFirmware field.
func (o *StoragePhysicalDisk) SetRunningFirmware(v []FirmwareRunningFirmwareRelationship) {
	o.RunningFirmware = v
}

// GetSasPorts returns the SasPorts field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *StoragePhysicalDisk) GetSasPorts() []StorageSasPortRelationship {
	if o == nil {
		var ret []StorageSasPortRelationship
		return ret
	}
	return o.SasPorts
}

// GetSasPortsOk returns a tuple with the SasPorts field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *StoragePhysicalDisk) GetSasPortsOk() ([]StorageSasPortRelationship, bool) {
	if o == nil || IsNil(o.SasPorts) {
		return nil, false
	}
	return o.SasPorts, true
}

// HasSasPorts returns a boolean if a field has been set.
func (o *StoragePhysicalDisk) HasSasPorts() bool {
	if o != nil && !IsNil(o.SasPorts) {
		return true
	}

	return false
}

// SetSasPorts gets a reference to the given []StorageSasPortRelationship and assigns it to the SasPorts field.
func (o *StoragePhysicalDisk) SetSasPorts(v []StorageSasPortRelationship) {
	o.SasPorts = v
}

// GetStorageController returns the StorageController field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *StoragePhysicalDisk) GetStorageController() StorageControllerRelationship {
	if o == nil || IsNil(o.StorageController.Get()) {
		var ret StorageControllerRelationship
		return ret
	}
	return *o.StorageController.Get()
}

// GetStorageControllerOk returns a tuple with the StorageController field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *StoragePhysicalDisk) GetStorageControllerOk() (*StorageControllerRelationship, bool) {
	if o == nil {
		return nil, false
	}
	return o.StorageController.Get(), o.StorageController.IsSet()
}

// HasStorageController returns a boolean if a field has been set.
func (o *StoragePhysicalDisk) HasStorageController() bool {
	if o != nil && o.StorageController.IsSet() {
		return true
	}

	return false
}

// SetStorageController gets a reference to the given NullableStorageControllerRelationship and assigns it to the StorageController field.
func (o *StoragePhysicalDisk) SetStorageController(v StorageControllerRelationship) {
	o.StorageController.Set(&v)
}

// SetStorageControllerNil sets the value for StorageController to be an explicit nil
func (o *StoragePhysicalDisk) SetStorageControllerNil() {
	o.StorageController.Set(nil)
}

// UnsetStorageController ensures that no value is present for StorageController, not even an explicit nil
func (o *StoragePhysicalDisk) UnsetStorageController() {
	o.StorageController.Unset()
}

// GetStorageEnclosure returns the StorageEnclosure field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *StoragePhysicalDisk) GetStorageEnclosure() StorageEnclosureRelationship {
	if o == nil || IsNil(o.StorageEnclosure.Get()) {
		var ret StorageEnclosureRelationship
		return ret
	}
	return *o.StorageEnclosure.Get()
}

// GetStorageEnclosureOk returns a tuple with the StorageEnclosure field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *StoragePhysicalDisk) GetStorageEnclosureOk() (*StorageEnclosureRelationship, bool) {
	if o == nil {
		return nil, false
	}
	return o.StorageEnclosure.Get(), o.StorageEnclosure.IsSet()
}

// HasStorageEnclosure returns a boolean if a field has been set.
func (o *StoragePhysicalDisk) HasStorageEnclosure() bool {
	if o != nil && o.StorageEnclosure.IsSet() {
		return true
	}

	return false
}

// SetStorageEnclosure gets a reference to the given NullableStorageEnclosureRelationship and assigns it to the StorageEnclosure field.
func (o *StoragePhysicalDisk) SetStorageEnclosure(v StorageEnclosureRelationship) {
	o.StorageEnclosure.Set(&v)
}

// SetStorageEnclosureNil sets the value for StorageEnclosure to be an explicit nil
func (o *StoragePhysicalDisk) SetStorageEnclosureNil() {
	o.StorageEnclosure.Set(nil)
}

// UnsetStorageEnclosure ensures that no value is present for StorageEnclosure, not even an explicit nil
func (o *StoragePhysicalDisk) UnsetStorageEnclosure() {
	o.StorageEnclosure.Unset()
}

func (o StoragePhysicalDisk) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o StoragePhysicalDisk) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	serializedEquipmentBase, errEquipmentBase := json.Marshal(o.EquipmentBase)
	if errEquipmentBase != nil {
		return map[string]interface{}{}, errEquipmentBase
	}
	errEquipmentBase = json.Unmarshal([]byte(serializedEquipmentBase), &toSerialize)
	if errEquipmentBase != nil {
		return map[string]interface{}{}, errEquipmentBase
	}
	if _, exists := toSerialize["ClassId"]; !exists {
		toSerialize["ClassId"] = o.GetDefaultClassId()
	}
	toSerialize["ClassId"] = o.ClassId
	if _, exists := toSerialize["ObjectType"]; !exists {
		toSerialize["ObjectType"] = o.GetDefaultObjectType()
	}
	toSerialize["ObjectType"] = o.ObjectType
	if !IsNil(o.BackgroundOperations) {
		toSerialize["BackgroundOperations"] = o.BackgroundOperations
	}
	if !IsNil(o.BlockSize) {
		toSerialize["BlockSize"] = o.BlockSize
	}
	if !IsNil(o.Bootable) {
		toSerialize["Bootable"] = o.Bootable
	}
	if !IsNil(o.ConfigurationCheckpoint) {
		toSerialize["ConfigurationCheckpoint"] = o.ConfigurationCheckpoint
	}
	if !IsNil(o.ConfigurationState) {
		toSerialize["ConfigurationState"] = o.ConfigurationState
	}
	if !IsNil(o.Description) {
		toSerialize["Description"] = o.Description
	}
	if !IsNil(o.DisabledForRemoval) {
		toSerialize["DisabledForRemoval"] = o.DisabledForRemoval
	}
	if !IsNil(o.DiscoveredPath) {
		toSerialize["DiscoveredPath"] = o.DiscoveredPath
	}
	if !IsNil(o.DiskId) {
		toSerialize["DiskId"] = o.DiskId
	}
	if !IsNil(o.DiskState) {
		toSerialize["DiskState"] = o.DiskState
	}
	if !IsNil(o.DriveFirmware) {
		toSerialize["DriveFirmware"] = o.DriveFirmware
	}
	if !IsNil(o.DriveState) {
		toSerialize["DriveState"] = o.DriveState
	}
	if !IsNil(o.EncryptionStatus) {
		toSerialize["EncryptionStatus"] = o.EncryptionStatus
	}
	if !IsNil(o.FailurePredicted) {
		toSerialize["FailurePredicted"] = o.FailurePredicted
	}
	if !IsNil(o.FdeCapable) {
		toSerialize["FdeCapable"] = o.FdeCapable
	}
	if !IsNil(o.HotSpareType) {
		toSerialize["HotSpareType"] = o.HotSpareType
	}
	if !IsNil(o.IndicatorLed) {
		toSerialize["IndicatorLed"] = o.IndicatorLed
	}
	if !IsNil(o.IsPlatformSupported) {
		toSerialize["IsPlatformSupported"] = o.IsPlatformSupported
	}
	if !IsNil(o.LinkSpeed) {
		toSerialize["LinkSpeed"] = o.LinkSpeed
	}
	if !IsNil(o.LinkState) {
		toSerialize["LinkState"] = o.LinkState
	}
	if !IsNil(o.MaximumOperatingTemperature) {
		toSerialize["MaximumOperatingTemperature"] = o.MaximumOperatingTemperature
	}
	if !IsNil(o.MediaErrorCount) {
		toSerialize["MediaErrorCount"] = o.MediaErrorCount
	}
	if !IsNil(o.Name) {
		toSerialize["Name"] = o.Name
	}
	if !IsNil(o.NonCoercedSizeBytes) {
		toSerialize["NonCoercedSizeBytes"] = o.NonCoercedSizeBytes
	}
	if !IsNil(o.NumBlocks) {
		toSerialize["NumBlocks"] = o.NumBlocks
	}
	if !IsNil(o.OperPowerState) {
		toSerialize["OperPowerState"] = o.OperPowerState
	}
	if !IsNil(o.OperQualifierReason) {
		toSerialize["OperQualifierReason"] = o.OperQualifierReason
	}
	if !IsNil(o.Operability) {
		toSerialize["Operability"] = o.Operability
	}
	if !IsNil(o.OperatingTemperature) {
		toSerialize["OperatingTemperature"] = o.OperatingTemperature
	}
	if !IsNil(o.PartNumber) {
		toSerialize["PartNumber"] = o.PartNumber
	}
	if !IsNil(o.PercentLifeLeft) {
		toSerialize["PercentLifeLeft"] = o.PercentLifeLeft
	}
	if !IsNil(o.PercentReservedCapacityConsumed) {
		toSerialize["PercentReservedCapacityConsumed"] = o.PercentReservedCapacityConsumed
	}
	if !IsNil(o.PerformancePercent) {
		toSerialize["PerformancePercent"] = o.PerformancePercent
	}
	if !IsNil(o.PhysicalBlockSize) {
		toSerialize["PhysicalBlockSize"] = o.PhysicalBlockSize
	}
	if !IsNil(o.Pid) {
		toSerialize["Pid"] = o.Pid
	}
	if !IsNil(o.PowerCycleCount) {
		toSerialize["PowerCycleCount"] = o.PowerCycleCount
	}
	if !IsNil(o.PowerOnHours) {
		toSerialize["PowerOnHours"] = o.PowerOnHours
	}
	if !IsNil(o.PowerOnHoursPercentage) {
		toSerialize["PowerOnHoursPercentage"] = o.PowerOnHoursPercentage
	}
	if !IsNil(o.PredictedMediaLifeLeftPercent) {
		toSerialize["PredictedMediaLifeLeftPercent"] = o.PredictedMediaLifeLeftPercent
	}
	if !IsNil(o.PredictiveFailureCount) {
		toSerialize["PredictiveFailureCount"] = o.PredictiveFailureCount
	}
	if !IsNil(o.Protocol) {
		toSerialize["Protocol"] = o.Protocol
	}
	if !IsNil(o.RawSize) {
		toSerialize["RawSize"] = o.RawSize
	}
	if !IsNil(o.ReadErrorCountThreshold) {
		toSerialize["ReadErrorCountThreshold"] = o.ReadErrorCountThreshold
	}
	if !IsNil(o.ReadIoErrorCount) {
		toSerialize["ReadIoErrorCount"] = o.ReadIoErrorCount
	}
	if !IsNil(o.Secured) {
		toSerialize["Secured"] = o.Secured
	}
	if !IsNil(o.Size) {
		toSerialize["Size"] = o.Size
	}
	if !IsNil(o.Thermal) {
		toSerialize["Thermal"] = o.Thermal
	}
	if !IsNil(o.ThresholdOperatingTemperature) {
		toSerialize["ThresholdOperatingTemperature"] = o.ThresholdOperatingTemperature
	}
	if !IsNil(o.Type) {
		toSerialize["Type"] = o.Type
	}
	if !IsNil(o.VariantType) {
		toSerialize["VariantType"] = o.VariantType
	}
	if !IsNil(o.WearStatusInDays) {
		toSerialize["WearStatusInDays"] = o.WearStatusInDays
	}
	if !IsNil(o.WriteErrorCountThreshold) {
		toSerialize["WriteErrorCountThreshold"] = o.WriteErrorCountThreshold
	}
	if !IsNil(o.WriteIoErrorCount) {
		toSerialize["WriteIoErrorCount"] = o.WriteIoErrorCount
	}
	if o.InventoryDeviceInfo.IsSet() {
		toSerialize["InventoryDeviceInfo"] = o.InventoryDeviceInfo.Get()
	}
	if o.LocatorLed.IsSet() {
		toSerialize["LocatorLed"] = o.LocatorLed.Get()
	}
	if o.PhysicalDiskExtensions != nil {
		toSerialize["PhysicalDiskExtensions"] = o.PhysicalDiskExtensions
	}
	if o.RegisteredDevice.IsSet() {
		toSerialize["RegisteredDevice"] = o.RegisteredDevice.Get()
	}
	if o.RunningFirmware != nil {
		toSerialize["RunningFirmware"] = o.RunningFirmware
	}
	if o.SasPorts != nil {
		toSerialize["SasPorts"] = o.SasPorts
	}
	if o.StorageController.IsSet() {
		toSerialize["StorageController"] = o.StorageController.Get()
	}
	if o.StorageEnclosure.IsSet() {
		toSerialize["StorageEnclosure"] = o.StorageEnclosure.Get()
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *StoragePhysicalDisk) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"ClassId",
		"ObjectType",
	}

	// defaultValueFuncMap captures the default values for required properties.
	// These values are used when required properties are missing from the payload.
	defaultValueFuncMap := map[string]func() interface{}{
		"ClassId":    o.GetDefaultClassId,
		"ObjectType": o.GetDefaultObjectType,
	}
	var defaultValueApplied bool
	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			if _, ok := defaultValueFuncMap[requiredProperty]; ok {
				allProperties[requiredProperty] = defaultValueFuncMap[requiredProperty]()
				defaultValueApplied = true
			}
		}
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	if defaultValueApplied {
		data, err = json.Marshal(allProperties)
		if err != nil {
			return err
		}
	}
	type StoragePhysicalDiskWithoutEmbeddedStruct struct {
		// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.
		ClassId string `json:"ClassId"`
		// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
		ObjectType string `json:"ObjectType"`
		// List of background operations underway.
		BackgroundOperations *string `json:"BackgroundOperations,omitempty"`
		// The block size of the physical disk in bytes.
		BlockSize *string `json:"BlockSize,omitempty"`
		// This field identifies the disk drive as bootable if set to true.
		Bootable *string `json:"Bootable,omitempty"`
		// The current configuration checkpoint of the physical disk.
		ConfigurationCheckpoint *string `json:"ConfigurationCheckpoint,omitempty"`
		// The current configuration state of the physical disk.
		ConfigurationState *string `json:"ConfigurationState,omitempty"`
		// This field displays the description of the physical disk.
		Description *string `json:"Description,omitempty"`
		// The physical disk is disabled for removal.
		DisabledForRemoval *bool `json:"DisabledForRemoval,omitempty"`
		// The discovered path of the physical disk.
		DiscoveredPath *string `json:"DiscoveredPath,omitempty"`
		// This field identifies the ID assigned to physical disks.
		DiskId *string `json:"DiskId,omitempty"`
		// This field identifies the health of the disk.
		DiskState *string `json:"DiskState,omitempty"`
		// This field identifies the disk firmware running in the disk.
		DriveFirmware *string `json:"DriveFirmware,omitempty"`
		// The drive state as reported by the controller.
		DriveState *string `json:"DriveState,omitempty"`
		// Encryption status of the physical disk.
		EncryptionStatus *string `json:"EncryptionStatus,omitempty"`
		// Possibility of physical disk failure.
		FailurePredicted *bool `json:"FailurePredicted,omitempty"`
		// Full-Disk Encryption capability parameter of the physical disk.
		FdeCapable *string `json:"FdeCapable,omitempty"`
		// Type of hotspare configured on the physical disk.
		HotSpareType *string `json:"HotSpareType,omitempty"`
		// Status of the locator LED corresponding to the physical disk.
		IndicatorLed *string `json:"IndicatorLed,omitempty"`
		// This field indicates whether the physical disk is supported on the server or not.
		IsPlatformSupported *bool `json:"IsPlatformSupported,omitempty"`
		// The speed of the link between the drive and the controller.
		LinkSpeed *string `json:"LinkSpeed,omitempty"`
		// The current link state of the physical disk.
		LinkState *string `json:"LinkState,omitempty"`
		// Maximum operating temperature of drive in Celsius.
		MaximumOperatingTemperature *int64 `json:"MaximumOperatingTemperature,omitempty"`
		// Media error count on the physical disk.
		MediaErrorCount *int64 `json:"MediaErrorCount,omitempty"`
		// Detailed name of the physical disk.
		Name *string `json:"Name,omitempty"`
		// Physical disk non-coerced size in bytes.
		NonCoercedSizeBytes *int64 `json:"NonCoercedSizeBytes,omitempty"`
		// The number of blocks present on the physical disk.
		NumBlocks *string `json:"NumBlocks,omitempty"`
		// Operational power of the physical disk.
		OperPowerState *string `json:"OperPowerState,omitempty"`
		// For certain states, indicates the reason why the operState is in that state.
		OperQualifierReason *string `json:"OperQualifierReason,omitempty"`
		// This field identifies the disk operability of the disk.
		Operability *string `json:"Operability,omitempty"`
		// Operating temperature of drive in Celsius.
		OperatingTemperature *int64 `json:"OperatingTemperature,omitempty"`
		// This field displays the part number of the physical disk.
		PartNumber *string `json:"PartNumber,omitempty"`
		// Percentage of write cycles remaining in a solid state drive (SSD).
		PercentLifeLeft *int64 `json:"PercentLifeLeft,omitempty"`
		// Percentage of reserve capacity consumed.
		PercentReservedCapacityConsumed *int64 `json:"PercentReservedCapacityConsumed,omitempty"`
		// Performance at which the device operating expressed in percentage.
		PerformancePercent *int64 `json:"PerformancePercent,omitempty"`
		// The block size of the installed physical disk.
		PhysicalBlockSize *string `json:"PhysicalBlockSize,omitempty"`
		// This field displays the product ID of the physical disk.
		Pid *string `json:"Pid,omitempty"`
		// Number of powercycles the drive has undergone.
		PowerCycleCount *int64 `json:"PowerCycleCount,omitempty"`
		// Number of hours the drive has been powered on.
		PowerOnHours *int64 `json:"PowerOnHours,omitempty"`
		// Percentage of life used based on five year life span of Cisco supported drives.
		PowerOnHoursPercentage *int64 `json:"PowerOnHoursPercentage,omitempty"`
		// Predicted physical disk life left in percentage.
		PredictedMediaLifeLeftPercent *int64 `json:"PredictedMediaLifeLeftPercent,omitempty"`
		// Error count on the physical disk.
		PredictiveFailureCount *int64 `json:"PredictiveFailureCount,omitempty"`
		// This field identifies the disk protocol used for communication.
		Protocol *string `json:"Protocol,omitempty"`
		// The raw size of the physical disk in MB.
		RawSize *string `json:"RawSize,omitempty"`
		// The number of read errors that are permitted while accessing the drive/card.
		ReadErrorCountThreshold *int64 `json:"ReadErrorCountThreshold,omitempty"`
		// Number of IO Errors that occured while reading data from the disk.
		ReadIoErrorCount *int64 `json:"ReadIoErrorCount,omitempty"`
		// This field identifies whether the disk is encrypted.
		Secured *string `json:"Secured,omitempty"`
		// The size of the physical disk in MB.
		Size *string `json:"Size,omitempty"`
		// Thermal state of the physical disk.
		Thermal *string `json:"Thermal,omitempty"`
		// Rated threshold operating temperature in Celsius.
		ThresholdOperatingTemperature *int64 `json:"ThresholdOperatingTemperature,omitempty"`
		// This field identifies the type of the physical disk.
		Type *string `json:"Type,omitempty"`
		// The variant type of the physical disk.
		VariantType *string `json:"VariantType,omitempty"`
		// The number of days an SSD has gone through with the write cycles.
		WearStatusInDays *int64 `json:"WearStatusInDays,omitempty"`
		// The number of write errors that are permitted while accessing the drive/card.
		WriteErrorCountThreshold *int64 `json:"WriteErrorCountThreshold,omitempty"`
		// Number of IO Errors that occured while writing data to the disk.
		WriteIoErrorCount   *int64                                  `json:"WriteIoErrorCount,omitempty"`
		InventoryDeviceInfo NullableInventoryDeviceInfoRelationship `json:"InventoryDeviceInfo,omitempty"`
		LocatorLed          NullableEquipmentLocatorLedRelationship `json:"LocatorLed,omitempty"`
		// An array of relationships to storagePhysicalDiskExtension resources.
		PhysicalDiskExtensions []StoragePhysicalDiskExtensionRelationship  `json:"PhysicalDiskExtensions,omitempty"`
		RegisteredDevice       NullableAssetDeviceRegistrationRelationship `json:"RegisteredDevice,omitempty"`
		// An array of relationships to firmwareRunningFirmware resources.
		RunningFirmware []FirmwareRunningFirmwareRelationship `json:"RunningFirmware,omitempty"`
		// An array of relationships to storageSasPort resources.
		SasPorts          []StorageSasPortRelationship          `json:"SasPorts,omitempty"`
		StorageController NullableStorageControllerRelationship `json:"StorageController,omitempty"`
		StorageEnclosure  NullableStorageEnclosureRelationship  `json:"StorageEnclosure,omitempty"`
	}

	varStoragePhysicalDiskWithoutEmbeddedStruct := StoragePhysicalDiskWithoutEmbeddedStruct{}

	err = json.Unmarshal(data, &varStoragePhysicalDiskWithoutEmbeddedStruct)
	if err == nil {
		varStoragePhysicalDisk := _StoragePhysicalDisk{}
		varStoragePhysicalDisk.ClassId = varStoragePhysicalDiskWithoutEmbeddedStruct.ClassId
		varStoragePhysicalDisk.ObjectType = varStoragePhysicalDiskWithoutEmbeddedStruct.ObjectType
		varStoragePhysicalDisk.BackgroundOperations = varStoragePhysicalDiskWithoutEmbeddedStruct.BackgroundOperations
		varStoragePhysicalDisk.BlockSize = varStoragePhysicalDiskWithoutEmbeddedStruct.BlockSize
		varStoragePhysicalDisk.Bootable = varStoragePhysicalDiskWithoutEmbeddedStruct.Bootable
		varStoragePhysicalDisk.ConfigurationCheckpoint = varStoragePhysicalDiskWithoutEmbeddedStruct.ConfigurationCheckpoint
		varStoragePhysicalDisk.ConfigurationState = varStoragePhysicalDiskWithoutEmbeddedStruct.ConfigurationState
		varStoragePhysicalDisk.Description = varStoragePhysicalDiskWithoutEmbeddedStruct.Description
		varStoragePhysicalDisk.DisabledForRemoval = varStoragePhysicalDiskWithoutEmbeddedStruct.DisabledForRemoval
		varStoragePhysicalDisk.DiscoveredPath = varStoragePhysicalDiskWithoutEmbeddedStruct.DiscoveredPath
		varStoragePhysicalDisk.DiskId = varStoragePhysicalDiskWithoutEmbeddedStruct.DiskId
		varStoragePhysicalDisk.DiskState = varStoragePhysicalDiskWithoutEmbeddedStruct.DiskState
		varStoragePhysicalDisk.DriveFirmware = varStoragePhysicalDiskWithoutEmbeddedStruct.DriveFirmware
		varStoragePhysicalDisk.DriveState = varStoragePhysicalDiskWithoutEmbeddedStruct.DriveState
		varStoragePhysicalDisk.EncryptionStatus = varStoragePhysicalDiskWithoutEmbeddedStruct.EncryptionStatus
		varStoragePhysicalDisk.FailurePredicted = varStoragePhysicalDiskWithoutEmbeddedStruct.FailurePredicted
		varStoragePhysicalDisk.FdeCapable = varStoragePhysicalDiskWithoutEmbeddedStruct.FdeCapable
		varStoragePhysicalDisk.HotSpareType = varStoragePhysicalDiskWithoutEmbeddedStruct.HotSpareType
		varStoragePhysicalDisk.IndicatorLed = varStoragePhysicalDiskWithoutEmbeddedStruct.IndicatorLed
		varStoragePhysicalDisk.IsPlatformSupported = varStoragePhysicalDiskWithoutEmbeddedStruct.IsPlatformSupported
		varStoragePhysicalDisk.LinkSpeed = varStoragePhysicalDiskWithoutEmbeddedStruct.LinkSpeed
		varStoragePhysicalDisk.LinkState = varStoragePhysicalDiskWithoutEmbeddedStruct.LinkState
		varStoragePhysicalDisk.MaximumOperatingTemperature = varStoragePhysicalDiskWithoutEmbeddedStruct.MaximumOperatingTemperature
		varStoragePhysicalDisk.MediaErrorCount = varStoragePhysicalDiskWithoutEmbeddedStruct.MediaErrorCount
		varStoragePhysicalDisk.Name = varStoragePhysicalDiskWithoutEmbeddedStruct.Name
		varStoragePhysicalDisk.NonCoercedSizeBytes = varStoragePhysicalDiskWithoutEmbeddedStruct.NonCoercedSizeBytes
		varStoragePhysicalDisk.NumBlocks = varStoragePhysicalDiskWithoutEmbeddedStruct.NumBlocks
		varStoragePhysicalDisk.OperPowerState = varStoragePhysicalDiskWithoutEmbeddedStruct.OperPowerState
		varStoragePhysicalDisk.OperQualifierReason = varStoragePhysicalDiskWithoutEmbeddedStruct.OperQualifierReason
		varStoragePhysicalDisk.Operability = varStoragePhysicalDiskWithoutEmbeddedStruct.Operability
		varStoragePhysicalDisk.OperatingTemperature = varStoragePhysicalDiskWithoutEmbeddedStruct.OperatingTemperature
		varStoragePhysicalDisk.PartNumber = varStoragePhysicalDiskWithoutEmbeddedStruct.PartNumber
		varStoragePhysicalDisk.PercentLifeLeft = varStoragePhysicalDiskWithoutEmbeddedStruct.PercentLifeLeft
		varStoragePhysicalDisk.PercentReservedCapacityConsumed = varStoragePhysicalDiskWithoutEmbeddedStruct.PercentReservedCapacityConsumed
		varStoragePhysicalDisk.PerformancePercent = varStoragePhysicalDiskWithoutEmbeddedStruct.PerformancePercent
		varStoragePhysicalDisk.PhysicalBlockSize = varStoragePhysicalDiskWithoutEmbeddedStruct.PhysicalBlockSize
		varStoragePhysicalDisk.Pid = varStoragePhysicalDiskWithoutEmbeddedStruct.Pid
		varStoragePhysicalDisk.PowerCycleCount = varStoragePhysicalDiskWithoutEmbeddedStruct.PowerCycleCount
		varStoragePhysicalDisk.PowerOnHours = varStoragePhysicalDiskWithoutEmbeddedStruct.PowerOnHours
		varStoragePhysicalDisk.PowerOnHoursPercentage = varStoragePhysicalDiskWithoutEmbeddedStruct.PowerOnHoursPercentage
		varStoragePhysicalDisk.PredictedMediaLifeLeftPercent = varStoragePhysicalDiskWithoutEmbeddedStruct.PredictedMediaLifeLeftPercent
		varStoragePhysicalDisk.PredictiveFailureCount = varStoragePhysicalDiskWithoutEmbeddedStruct.PredictiveFailureCount
		varStoragePhysicalDisk.Protocol = varStoragePhysicalDiskWithoutEmbeddedStruct.Protocol
		varStoragePhysicalDisk.RawSize = varStoragePhysicalDiskWithoutEmbeddedStruct.RawSize
		varStoragePhysicalDisk.ReadErrorCountThreshold = varStoragePhysicalDiskWithoutEmbeddedStruct.ReadErrorCountThreshold
		varStoragePhysicalDisk.ReadIoErrorCount = varStoragePhysicalDiskWithoutEmbeddedStruct.ReadIoErrorCount
		varStoragePhysicalDisk.Secured = varStoragePhysicalDiskWithoutEmbeddedStruct.Secured
		varStoragePhysicalDisk.Size = varStoragePhysicalDiskWithoutEmbeddedStruct.Size
		varStoragePhysicalDisk.Thermal = varStoragePhysicalDiskWithoutEmbeddedStruct.Thermal
		varStoragePhysicalDisk.ThresholdOperatingTemperature = varStoragePhysicalDiskWithoutEmbeddedStruct.ThresholdOperatingTemperature
		varStoragePhysicalDisk.Type = varStoragePhysicalDiskWithoutEmbeddedStruct.Type
		varStoragePhysicalDisk.VariantType = varStoragePhysicalDiskWithoutEmbeddedStruct.VariantType
		varStoragePhysicalDisk.WearStatusInDays = varStoragePhysicalDiskWithoutEmbeddedStruct.WearStatusInDays
		varStoragePhysicalDisk.WriteErrorCountThreshold = varStoragePhysicalDiskWithoutEmbeddedStruct.WriteErrorCountThreshold
		varStoragePhysicalDisk.WriteIoErrorCount = varStoragePhysicalDiskWithoutEmbeddedStruct.WriteIoErrorCount
		varStoragePhysicalDisk.InventoryDeviceInfo = varStoragePhysicalDiskWithoutEmbeddedStruct.InventoryDeviceInfo
		varStoragePhysicalDisk.LocatorLed = varStoragePhysicalDiskWithoutEmbeddedStruct.LocatorLed
		varStoragePhysicalDisk.PhysicalDiskExtensions = varStoragePhysicalDiskWithoutEmbeddedStruct.PhysicalDiskExtensions
		varStoragePhysicalDisk.RegisteredDevice = varStoragePhysicalDiskWithoutEmbeddedStruct.RegisteredDevice
		varStoragePhysicalDisk.RunningFirmware = varStoragePhysicalDiskWithoutEmbeddedStruct.RunningFirmware
		varStoragePhysicalDisk.SasPorts = varStoragePhysicalDiskWithoutEmbeddedStruct.SasPorts
		varStoragePhysicalDisk.StorageController = varStoragePhysicalDiskWithoutEmbeddedStruct.StorageController
		varStoragePhysicalDisk.StorageEnclosure = varStoragePhysicalDiskWithoutEmbeddedStruct.StorageEnclosure
		*o = StoragePhysicalDisk(varStoragePhysicalDisk)
	} else {
		return err
	}

	varStoragePhysicalDisk := _StoragePhysicalDisk{}

	err = json.Unmarshal(data, &varStoragePhysicalDisk)
	if err == nil {
		o.EquipmentBase = varStoragePhysicalDisk.EquipmentBase
	} else {
		return err
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "ClassId")
		delete(additionalProperties, "ObjectType")
		delete(additionalProperties, "BackgroundOperations")
		delete(additionalProperties, "BlockSize")
		delete(additionalProperties, "Bootable")
		delete(additionalProperties, "ConfigurationCheckpoint")
		delete(additionalProperties, "ConfigurationState")
		delete(additionalProperties, "Description")
		delete(additionalProperties, "DisabledForRemoval")
		delete(additionalProperties, "DiscoveredPath")
		delete(additionalProperties, "DiskId")
		delete(additionalProperties, "DiskState")
		delete(additionalProperties, "DriveFirmware")
		delete(additionalProperties, "DriveState")
		delete(additionalProperties, "EncryptionStatus")
		delete(additionalProperties, "FailurePredicted")
		delete(additionalProperties, "FdeCapable")
		delete(additionalProperties, "HotSpareType")
		delete(additionalProperties, "IndicatorLed")
		delete(additionalProperties, "IsPlatformSupported")
		delete(additionalProperties, "LinkSpeed")
		delete(additionalProperties, "LinkState")
		delete(additionalProperties, "MaximumOperatingTemperature")
		delete(additionalProperties, "MediaErrorCount")
		delete(additionalProperties, "Name")
		delete(additionalProperties, "NonCoercedSizeBytes")
		delete(additionalProperties, "NumBlocks")
		delete(additionalProperties, "OperPowerState")
		delete(additionalProperties, "OperQualifierReason")
		delete(additionalProperties, "Operability")
		delete(additionalProperties, "OperatingTemperature")
		delete(additionalProperties, "PartNumber")
		delete(additionalProperties, "PercentLifeLeft")
		delete(additionalProperties, "PercentReservedCapacityConsumed")
		delete(additionalProperties, "PerformancePercent")
		delete(additionalProperties, "PhysicalBlockSize")
		delete(additionalProperties, "Pid")
		delete(additionalProperties, "PowerCycleCount")
		delete(additionalProperties, "PowerOnHours")
		delete(additionalProperties, "PowerOnHoursPercentage")
		delete(additionalProperties, "PredictedMediaLifeLeftPercent")
		delete(additionalProperties, "PredictiveFailureCount")
		delete(additionalProperties, "Protocol")
		delete(additionalProperties, "RawSize")
		delete(additionalProperties, "ReadErrorCountThreshold")
		delete(additionalProperties, "ReadIoErrorCount")
		delete(additionalProperties, "Secured")
		delete(additionalProperties, "Size")
		delete(additionalProperties, "Thermal")
		delete(additionalProperties, "ThresholdOperatingTemperature")
		delete(additionalProperties, "Type")
		delete(additionalProperties, "VariantType")
		delete(additionalProperties, "WearStatusInDays")
		delete(additionalProperties, "WriteErrorCountThreshold")
		delete(additionalProperties, "WriteIoErrorCount")
		delete(additionalProperties, "InventoryDeviceInfo")
		delete(additionalProperties, "LocatorLed")
		delete(additionalProperties, "PhysicalDiskExtensions")
		delete(additionalProperties, "RegisteredDevice")
		delete(additionalProperties, "RunningFirmware")
		delete(additionalProperties, "SasPorts")
		delete(additionalProperties, "StorageController")
		delete(additionalProperties, "StorageEnclosure")

		// remove fields from embedded structs
		reflectEquipmentBase := reflect.ValueOf(o.EquipmentBase)
		for i := 0; i < reflectEquipmentBase.Type().NumField(); i++ {
			t := reflectEquipmentBase.Type().Field(i)

			if jsonTag := t.Tag.Get("json"); jsonTag != "" {
				fieldName := ""
				if commaIdx := strings.Index(jsonTag, ","); commaIdx > 0 {
					fieldName = jsonTag[:commaIdx]
				} else {
					fieldName = jsonTag
				}
				if fieldName != "AdditionalProperties" {
					delete(additionalProperties, fieldName)
				}
			}
		}

		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableStoragePhysicalDisk struct {
	value *StoragePhysicalDisk
	isSet bool
}

func (v NullableStoragePhysicalDisk) Get() *StoragePhysicalDisk {
	return v.value
}

func (v *NullableStoragePhysicalDisk) Set(val *StoragePhysicalDisk) {
	v.value = val
	v.isSet = true
}

func (v NullableStoragePhysicalDisk) IsSet() bool {
	return v.isSet
}

func (v *NullableStoragePhysicalDisk) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStoragePhysicalDisk(val *StoragePhysicalDisk) *NullableStoragePhysicalDisk {
	return &NullableStoragePhysicalDisk{value: val, isSet: true}
}

func (v NullableStoragePhysicalDisk) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStoragePhysicalDisk) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
