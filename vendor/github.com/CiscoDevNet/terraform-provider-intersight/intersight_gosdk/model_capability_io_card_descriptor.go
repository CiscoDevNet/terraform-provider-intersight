/*
Cisco Intersight

Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations. The Intersight OpenAPI document defines the complete set of properties that are returned in the HTTP response. From that perspective, a client can expect that no additional properties are returned, unless these properties are explicitly defined in the OpenAPI document. However, when a client uses an older version of the Intersight OpenAPI document, the server may send additional properties because the software is more recent than the client. In that case, the client may receive properties that it does not know about. Some generated SDKs perform a strict validation of the HTTP response body against the OpenAPI document.

API version: 1.0.11-2024100405
Contact: intersight@cisco.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package intersight

import (
	"encoding/json"
	"fmt"
	"reflect"
	"strings"
)

// checks if the CapabilityIoCardDescriptor type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CapabilityIoCardDescriptor{}

// CapabilityIoCardDescriptor Descriptor that uniquely identifies an IO card module.
type CapabilityIoCardDescriptor struct {
	CapabilityHardwareDescriptor
	// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.
	ClassId string `json:"ClassId"`
	// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
	ObjectType string `json:"ObjectType"`
	// Identifies the bif port number for the iocard module.
	BifPortNum *int64 `json:"BifPortNum,omitempty"`
	// Identifies whether the iocard module is a part of the UCSX Direct chassis.
	IsUcsxDirectIoCard *bool `json:"IsUcsxDirectIoCard,omitempty"`
	// Identifies whether host port-channel is required to be configured for the iocard module.
	NativeHifPortChannelRequired *bool `json:"NativeHifPortChannelRequired,omitempty"`
	// Primary port number for native speed configuration for the iocard module.
	NativeSpeedMasterPortNum *int64 `json:"NativeSpeedMasterPortNum,omitempty"`
	// Number of hif ports per blade for the iocard module.
	NumHifPorts *int64 `json:"NumHifPorts,omitempty"`
	// Revision for the iocard module.
	Revision *string `json:"Revision,omitempty"`
	// Connectivity information between UIF Uplink ports and IOM ports. * `inline` - UIF uplink ports and IOM ports are connected inline. * `cross-connected` - UIF uplink ports and IOM ports are cross-connected, a case in washington chassis.
	UifConnectivity      *string  `json:"UifConnectivity,omitempty"`
	UnsupportedPolicies  []string `json:"UnsupportedPolicies,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _CapabilityIoCardDescriptor CapabilityIoCardDescriptor

// NewCapabilityIoCardDescriptor instantiates a new CapabilityIoCardDescriptor object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCapabilityIoCardDescriptor(classId string, objectType string) *CapabilityIoCardDescriptor {
	this := CapabilityIoCardDescriptor{}
	this.ClassId = classId
	this.ObjectType = objectType
	var isUcsxDirectIoCard bool = false
	this.IsUcsxDirectIoCard = &isUcsxDirectIoCard
	var nativeHifPortChannelRequired bool = true
	this.NativeHifPortChannelRequired = &nativeHifPortChannelRequired
	var uifConnectivity string = "inline"
	this.UifConnectivity = &uifConnectivity
	return &this
}

// NewCapabilityIoCardDescriptorWithDefaults instantiates a new CapabilityIoCardDescriptor object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCapabilityIoCardDescriptorWithDefaults() *CapabilityIoCardDescriptor {
	this := CapabilityIoCardDescriptor{}
	var classId string = "capability.IoCardDescriptor"
	this.ClassId = classId
	var objectType string = "capability.IoCardDescriptor"
	this.ObjectType = objectType
	var isUcsxDirectIoCard bool = false
	this.IsUcsxDirectIoCard = &isUcsxDirectIoCard
	var nativeHifPortChannelRequired bool = true
	this.NativeHifPortChannelRequired = &nativeHifPortChannelRequired
	var uifConnectivity string = "inline"
	this.UifConnectivity = &uifConnectivity
	return &this
}

// GetClassId returns the ClassId field value
func (o *CapabilityIoCardDescriptor) GetClassId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ClassId
}

// GetClassIdOk returns a tuple with the ClassId field value
// and a boolean to check if the value has been set.
func (o *CapabilityIoCardDescriptor) GetClassIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ClassId, true
}

// SetClassId sets field value
func (o *CapabilityIoCardDescriptor) SetClassId(v string) {
	o.ClassId = v
}

// GetDefaultClassId returns the default value "capability.IoCardDescriptor" of the ClassId field.
func (o *CapabilityIoCardDescriptor) GetDefaultClassId() interface{} {
	return "capability.IoCardDescriptor"
}

// GetObjectType returns the ObjectType field value
func (o *CapabilityIoCardDescriptor) GetObjectType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ObjectType
}

// GetObjectTypeOk returns a tuple with the ObjectType field value
// and a boolean to check if the value has been set.
func (o *CapabilityIoCardDescriptor) GetObjectTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ObjectType, true
}

// SetObjectType sets field value
func (o *CapabilityIoCardDescriptor) SetObjectType(v string) {
	o.ObjectType = v
}

// GetDefaultObjectType returns the default value "capability.IoCardDescriptor" of the ObjectType field.
func (o *CapabilityIoCardDescriptor) GetDefaultObjectType() interface{} {
	return "capability.IoCardDescriptor"
}

// GetBifPortNum returns the BifPortNum field value if set, zero value otherwise.
func (o *CapabilityIoCardDescriptor) GetBifPortNum() int64 {
	if o == nil || IsNil(o.BifPortNum) {
		var ret int64
		return ret
	}
	return *o.BifPortNum
}

// GetBifPortNumOk returns a tuple with the BifPortNum field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CapabilityIoCardDescriptor) GetBifPortNumOk() (*int64, bool) {
	if o == nil || IsNil(o.BifPortNum) {
		return nil, false
	}
	return o.BifPortNum, true
}

// HasBifPortNum returns a boolean if a field has been set.
func (o *CapabilityIoCardDescriptor) HasBifPortNum() bool {
	if o != nil && !IsNil(o.BifPortNum) {
		return true
	}

	return false
}

// SetBifPortNum gets a reference to the given int64 and assigns it to the BifPortNum field.
func (o *CapabilityIoCardDescriptor) SetBifPortNum(v int64) {
	o.BifPortNum = &v
}

// GetIsUcsxDirectIoCard returns the IsUcsxDirectIoCard field value if set, zero value otherwise.
func (o *CapabilityIoCardDescriptor) GetIsUcsxDirectIoCard() bool {
	if o == nil || IsNil(o.IsUcsxDirectIoCard) {
		var ret bool
		return ret
	}
	return *o.IsUcsxDirectIoCard
}

// GetIsUcsxDirectIoCardOk returns a tuple with the IsUcsxDirectIoCard field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CapabilityIoCardDescriptor) GetIsUcsxDirectIoCardOk() (*bool, bool) {
	if o == nil || IsNil(o.IsUcsxDirectIoCard) {
		return nil, false
	}
	return o.IsUcsxDirectIoCard, true
}

// HasIsUcsxDirectIoCard returns a boolean if a field has been set.
func (o *CapabilityIoCardDescriptor) HasIsUcsxDirectIoCard() bool {
	if o != nil && !IsNil(o.IsUcsxDirectIoCard) {
		return true
	}

	return false
}

// SetIsUcsxDirectIoCard gets a reference to the given bool and assigns it to the IsUcsxDirectIoCard field.
func (o *CapabilityIoCardDescriptor) SetIsUcsxDirectIoCard(v bool) {
	o.IsUcsxDirectIoCard = &v
}

// GetNativeHifPortChannelRequired returns the NativeHifPortChannelRequired field value if set, zero value otherwise.
func (o *CapabilityIoCardDescriptor) GetNativeHifPortChannelRequired() bool {
	if o == nil || IsNil(o.NativeHifPortChannelRequired) {
		var ret bool
		return ret
	}
	return *o.NativeHifPortChannelRequired
}

// GetNativeHifPortChannelRequiredOk returns a tuple with the NativeHifPortChannelRequired field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CapabilityIoCardDescriptor) GetNativeHifPortChannelRequiredOk() (*bool, bool) {
	if o == nil || IsNil(o.NativeHifPortChannelRequired) {
		return nil, false
	}
	return o.NativeHifPortChannelRequired, true
}

// HasNativeHifPortChannelRequired returns a boolean if a field has been set.
func (o *CapabilityIoCardDescriptor) HasNativeHifPortChannelRequired() bool {
	if o != nil && !IsNil(o.NativeHifPortChannelRequired) {
		return true
	}

	return false
}

// SetNativeHifPortChannelRequired gets a reference to the given bool and assigns it to the NativeHifPortChannelRequired field.
func (o *CapabilityIoCardDescriptor) SetNativeHifPortChannelRequired(v bool) {
	o.NativeHifPortChannelRequired = &v
}

// GetNativeSpeedMasterPortNum returns the NativeSpeedMasterPortNum field value if set, zero value otherwise.
func (o *CapabilityIoCardDescriptor) GetNativeSpeedMasterPortNum() int64 {
	if o == nil || IsNil(o.NativeSpeedMasterPortNum) {
		var ret int64
		return ret
	}
	return *o.NativeSpeedMasterPortNum
}

// GetNativeSpeedMasterPortNumOk returns a tuple with the NativeSpeedMasterPortNum field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CapabilityIoCardDescriptor) GetNativeSpeedMasterPortNumOk() (*int64, bool) {
	if o == nil || IsNil(o.NativeSpeedMasterPortNum) {
		return nil, false
	}
	return o.NativeSpeedMasterPortNum, true
}

// HasNativeSpeedMasterPortNum returns a boolean if a field has been set.
func (o *CapabilityIoCardDescriptor) HasNativeSpeedMasterPortNum() bool {
	if o != nil && !IsNil(o.NativeSpeedMasterPortNum) {
		return true
	}

	return false
}

// SetNativeSpeedMasterPortNum gets a reference to the given int64 and assigns it to the NativeSpeedMasterPortNum field.
func (o *CapabilityIoCardDescriptor) SetNativeSpeedMasterPortNum(v int64) {
	o.NativeSpeedMasterPortNum = &v
}

// GetNumHifPorts returns the NumHifPorts field value if set, zero value otherwise.
func (o *CapabilityIoCardDescriptor) GetNumHifPorts() int64 {
	if o == nil || IsNil(o.NumHifPorts) {
		var ret int64
		return ret
	}
	return *o.NumHifPorts
}

// GetNumHifPortsOk returns a tuple with the NumHifPorts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CapabilityIoCardDescriptor) GetNumHifPortsOk() (*int64, bool) {
	if o == nil || IsNil(o.NumHifPorts) {
		return nil, false
	}
	return o.NumHifPorts, true
}

// HasNumHifPorts returns a boolean if a field has been set.
func (o *CapabilityIoCardDescriptor) HasNumHifPorts() bool {
	if o != nil && !IsNil(o.NumHifPorts) {
		return true
	}

	return false
}

// SetNumHifPorts gets a reference to the given int64 and assigns it to the NumHifPorts field.
func (o *CapabilityIoCardDescriptor) SetNumHifPorts(v int64) {
	o.NumHifPorts = &v
}

// GetRevision returns the Revision field value if set, zero value otherwise.
func (o *CapabilityIoCardDescriptor) GetRevision() string {
	if o == nil || IsNil(o.Revision) {
		var ret string
		return ret
	}
	return *o.Revision
}

// GetRevisionOk returns a tuple with the Revision field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CapabilityIoCardDescriptor) GetRevisionOk() (*string, bool) {
	if o == nil || IsNil(o.Revision) {
		return nil, false
	}
	return o.Revision, true
}

// HasRevision returns a boolean if a field has been set.
func (o *CapabilityIoCardDescriptor) HasRevision() bool {
	if o != nil && !IsNil(o.Revision) {
		return true
	}

	return false
}

// SetRevision gets a reference to the given string and assigns it to the Revision field.
func (o *CapabilityIoCardDescriptor) SetRevision(v string) {
	o.Revision = &v
}

// GetUifConnectivity returns the UifConnectivity field value if set, zero value otherwise.
func (o *CapabilityIoCardDescriptor) GetUifConnectivity() string {
	if o == nil || IsNil(o.UifConnectivity) {
		var ret string
		return ret
	}
	return *o.UifConnectivity
}

// GetUifConnectivityOk returns a tuple with the UifConnectivity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CapabilityIoCardDescriptor) GetUifConnectivityOk() (*string, bool) {
	if o == nil || IsNil(o.UifConnectivity) {
		return nil, false
	}
	return o.UifConnectivity, true
}

// HasUifConnectivity returns a boolean if a field has been set.
func (o *CapabilityIoCardDescriptor) HasUifConnectivity() bool {
	if o != nil && !IsNil(o.UifConnectivity) {
		return true
	}

	return false
}

// SetUifConnectivity gets a reference to the given string and assigns it to the UifConnectivity field.
func (o *CapabilityIoCardDescriptor) SetUifConnectivity(v string) {
	o.UifConnectivity = &v
}

// GetUnsupportedPolicies returns the UnsupportedPolicies field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CapabilityIoCardDescriptor) GetUnsupportedPolicies() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.UnsupportedPolicies
}

// GetUnsupportedPoliciesOk returns a tuple with the UnsupportedPolicies field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CapabilityIoCardDescriptor) GetUnsupportedPoliciesOk() ([]string, bool) {
	if o == nil || IsNil(o.UnsupportedPolicies) {
		return nil, false
	}
	return o.UnsupportedPolicies, true
}

// HasUnsupportedPolicies returns a boolean if a field has been set.
func (o *CapabilityIoCardDescriptor) HasUnsupportedPolicies() bool {
	if o != nil && !IsNil(o.UnsupportedPolicies) {
		return true
	}

	return false
}

// SetUnsupportedPolicies gets a reference to the given []string and assigns it to the UnsupportedPolicies field.
func (o *CapabilityIoCardDescriptor) SetUnsupportedPolicies(v []string) {
	o.UnsupportedPolicies = v
}

func (o CapabilityIoCardDescriptor) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CapabilityIoCardDescriptor) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	serializedCapabilityHardwareDescriptor, errCapabilityHardwareDescriptor := json.Marshal(o.CapabilityHardwareDescriptor)
	if errCapabilityHardwareDescriptor != nil {
		return map[string]interface{}{}, errCapabilityHardwareDescriptor
	}
	errCapabilityHardwareDescriptor = json.Unmarshal([]byte(serializedCapabilityHardwareDescriptor), &toSerialize)
	if errCapabilityHardwareDescriptor != nil {
		return map[string]interface{}{}, errCapabilityHardwareDescriptor
	}
	if _, exists := toSerialize["ClassId"]; !exists {
		toSerialize["ClassId"] = o.GetDefaultClassId()
	}
	toSerialize["ClassId"] = o.ClassId
	if _, exists := toSerialize["ObjectType"]; !exists {
		toSerialize["ObjectType"] = o.GetDefaultObjectType()
	}
	toSerialize["ObjectType"] = o.ObjectType
	if !IsNil(o.BifPortNum) {
		toSerialize["BifPortNum"] = o.BifPortNum
	}
	if !IsNil(o.IsUcsxDirectIoCard) {
		toSerialize["IsUcsxDirectIoCard"] = o.IsUcsxDirectIoCard
	}
	if !IsNil(o.NativeHifPortChannelRequired) {
		toSerialize["NativeHifPortChannelRequired"] = o.NativeHifPortChannelRequired
	}
	if !IsNil(o.NativeSpeedMasterPortNum) {
		toSerialize["NativeSpeedMasterPortNum"] = o.NativeSpeedMasterPortNum
	}
	if !IsNil(o.NumHifPorts) {
		toSerialize["NumHifPorts"] = o.NumHifPorts
	}
	if !IsNil(o.Revision) {
		toSerialize["Revision"] = o.Revision
	}
	if !IsNil(o.UifConnectivity) {
		toSerialize["UifConnectivity"] = o.UifConnectivity
	}
	if o.UnsupportedPolicies != nil {
		toSerialize["UnsupportedPolicies"] = o.UnsupportedPolicies
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *CapabilityIoCardDescriptor) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"ClassId",
		"ObjectType",
	}

	// defaultValueFuncMap captures the default values for required properties.
	// These values are used when required properties are missing from the payload.
	defaultValueFuncMap := map[string]func() interface{}{
		"ClassId":    o.GetDefaultClassId,
		"ObjectType": o.GetDefaultObjectType,
	}
	var defaultValueApplied bool
	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			if _, ok := defaultValueFuncMap[requiredProperty]; ok {
				allProperties[requiredProperty] = defaultValueFuncMap[requiredProperty]()
				defaultValueApplied = true
			}
		}
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	if defaultValueApplied {
		data, err = json.Marshal(allProperties)
		if err != nil {
			return err
		}
	}
	type CapabilityIoCardDescriptorWithoutEmbeddedStruct struct {
		// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.
		ClassId string `json:"ClassId"`
		// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
		ObjectType string `json:"ObjectType"`
		// Identifies the bif port number for the iocard module.
		BifPortNum *int64 `json:"BifPortNum,omitempty"`
		// Identifies whether the iocard module is a part of the UCSX Direct chassis.
		IsUcsxDirectIoCard *bool `json:"IsUcsxDirectIoCard,omitempty"`
		// Identifies whether host port-channel is required to be configured for the iocard module.
		NativeHifPortChannelRequired *bool `json:"NativeHifPortChannelRequired,omitempty"`
		// Primary port number for native speed configuration for the iocard module.
		NativeSpeedMasterPortNum *int64 `json:"NativeSpeedMasterPortNum,omitempty"`
		// Number of hif ports per blade for the iocard module.
		NumHifPorts *int64 `json:"NumHifPorts,omitempty"`
		// Revision for the iocard module.
		Revision *string `json:"Revision,omitempty"`
		// Connectivity information between UIF Uplink ports and IOM ports. * `inline` - UIF uplink ports and IOM ports are connected inline. * `cross-connected` - UIF uplink ports and IOM ports are cross-connected, a case in washington chassis.
		UifConnectivity     *string  `json:"UifConnectivity,omitempty"`
		UnsupportedPolicies []string `json:"UnsupportedPolicies,omitempty"`
	}

	varCapabilityIoCardDescriptorWithoutEmbeddedStruct := CapabilityIoCardDescriptorWithoutEmbeddedStruct{}

	err = json.Unmarshal(data, &varCapabilityIoCardDescriptorWithoutEmbeddedStruct)
	if err == nil {
		varCapabilityIoCardDescriptor := _CapabilityIoCardDescriptor{}
		varCapabilityIoCardDescriptor.ClassId = varCapabilityIoCardDescriptorWithoutEmbeddedStruct.ClassId
		varCapabilityIoCardDescriptor.ObjectType = varCapabilityIoCardDescriptorWithoutEmbeddedStruct.ObjectType
		varCapabilityIoCardDescriptor.BifPortNum = varCapabilityIoCardDescriptorWithoutEmbeddedStruct.BifPortNum
		varCapabilityIoCardDescriptor.IsUcsxDirectIoCard = varCapabilityIoCardDescriptorWithoutEmbeddedStruct.IsUcsxDirectIoCard
		varCapabilityIoCardDescriptor.NativeHifPortChannelRequired = varCapabilityIoCardDescriptorWithoutEmbeddedStruct.NativeHifPortChannelRequired
		varCapabilityIoCardDescriptor.NativeSpeedMasterPortNum = varCapabilityIoCardDescriptorWithoutEmbeddedStruct.NativeSpeedMasterPortNum
		varCapabilityIoCardDescriptor.NumHifPorts = varCapabilityIoCardDescriptorWithoutEmbeddedStruct.NumHifPorts
		varCapabilityIoCardDescriptor.Revision = varCapabilityIoCardDescriptorWithoutEmbeddedStruct.Revision
		varCapabilityIoCardDescriptor.UifConnectivity = varCapabilityIoCardDescriptorWithoutEmbeddedStruct.UifConnectivity
		varCapabilityIoCardDescriptor.UnsupportedPolicies = varCapabilityIoCardDescriptorWithoutEmbeddedStruct.UnsupportedPolicies
		*o = CapabilityIoCardDescriptor(varCapabilityIoCardDescriptor)
	} else {
		return err
	}

	varCapabilityIoCardDescriptor := _CapabilityIoCardDescriptor{}

	err = json.Unmarshal(data, &varCapabilityIoCardDescriptor)
	if err == nil {
		o.CapabilityHardwareDescriptor = varCapabilityIoCardDescriptor.CapabilityHardwareDescriptor
	} else {
		return err
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "ClassId")
		delete(additionalProperties, "ObjectType")
		delete(additionalProperties, "BifPortNum")
		delete(additionalProperties, "IsUcsxDirectIoCard")
		delete(additionalProperties, "NativeHifPortChannelRequired")
		delete(additionalProperties, "NativeSpeedMasterPortNum")
		delete(additionalProperties, "NumHifPorts")
		delete(additionalProperties, "Revision")
		delete(additionalProperties, "UifConnectivity")
		delete(additionalProperties, "UnsupportedPolicies")

		// remove fields from embedded structs
		reflectCapabilityHardwareDescriptor := reflect.ValueOf(o.CapabilityHardwareDescriptor)
		for i := 0; i < reflectCapabilityHardwareDescriptor.Type().NumField(); i++ {
			t := reflectCapabilityHardwareDescriptor.Type().Field(i)

			if jsonTag := t.Tag.Get("json"); jsonTag != "" {
				fieldName := ""
				if commaIdx := strings.Index(jsonTag, ","); commaIdx > 0 {
					fieldName = jsonTag[:commaIdx]
				} else {
					fieldName = jsonTag
				}
				if fieldName != "AdditionalProperties" {
					delete(additionalProperties, fieldName)
				}
			}
		}

		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableCapabilityIoCardDescriptor struct {
	value *CapabilityIoCardDescriptor
	isSet bool
}

func (v NullableCapabilityIoCardDescriptor) Get() *CapabilityIoCardDescriptor {
	return v.value
}

func (v *NullableCapabilityIoCardDescriptor) Set(val *CapabilityIoCardDescriptor) {
	v.value = val
	v.isSet = true
}

func (v NullableCapabilityIoCardDescriptor) IsSet() bool {
	return v.isSet
}

func (v *NullableCapabilityIoCardDescriptor) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCapabilityIoCardDescriptor(val *CapabilityIoCardDescriptor) *NullableCapabilityIoCardDescriptor {
	return &NullableCapabilityIoCardDescriptor{value: val, isSet: true}
}

func (v NullableCapabilityIoCardDescriptor) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCapabilityIoCardDescriptor) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
