/*
 * Cisco Intersight
 *
 * Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations. The Intersight OpenAPI document defines the complete set of properties that are returned in the HTTP response. From that perspective, a client can expect that no additional properties are returned, unless these properties are explicitly defined in the OpenAPI document. However, when a client uses an older version of the Intersight OpenAPI document, the server may send additional properties because the software is more recent than the client. In that case, the client may receive properties that it does not know about. Some generated SDKs perform a strict validation of the HTTP response body against the OpenAPI document. This document was created on 2021-07-21T16:37:30Z.
 *
 * API version: 1.0.9-4403
 * Contact: intersight@cisco.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package intersight

import (
	"encoding/json"
	"reflect"
	"strings"
)

// CapabilitySwitchCapability Type to represent additional switch specific capabilities.
type CapabilitySwitchCapability struct {
	CapabilitySwitchCapabilityDef
	// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.
	ClassId string `json:"ClassId"`
	// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
	ObjectType string `json:"ObjectType"`
	// Default Fcoe VLAN associated with this switch.
	DefaultFcoeVlan *int64 `json:"DefaultFcoeVlan,omitempty"`
	// Dynamic VIFs support on this switch.
	DynamicVifsSupported *bool `json:"DynamicVifsSupported,omitempty"`
	// Fan Modules support on this switch.
	FanModulesSupported        *bool                 `json:"FanModulesSupported,omitempty"`
	FcEndHostModeReservedVsans []CapabilityPortRange `json:"FcEndHostModeReservedVsans,omitempty"`
	// Fc Uplink ports auto negotiation speed support on this switch.
	FcUplinkPortsAutoNegotiationSupported *bool `json:"FcUplinkPortsAutoNegotiationSupported,omitempty"`
	// Locator Beacon LED support on this switch.
	LocatorBeaconSupported *bool `json:"LocatorBeaconSupported,omitempty"`
	// Maximum allowed physical ports on this switch.
	MaxPorts *int64 `json:"MaxPorts,omitempty"`
	// Maximum allowed physical slots on this switch.
	MaxSlots                  *int64                                `json:"MaxSlots,omitempty"`
	NetworkLimits             NullableCapabilitySwitchNetworkLimits `json:"NetworkLimits,omitempty"`
	PortsSupporting100gSpeed  []CapabilityPortRange                 `json:"PortsSupporting100gSpeed,omitempty"`
	PortsSupporting10gSpeed   []CapabilityPortRange                 `json:"PortsSupporting10gSpeed,omitempty"`
	PortsSupporting1gSpeed    []CapabilityPortRange                 `json:"PortsSupporting1gSpeed,omitempty"`
	PortsSupporting25gSpeed   []CapabilityPortRange                 `json:"PortsSupporting25gSpeed,omitempty"`
	PortsSupporting40gSpeed   []CapabilityPortRange                 `json:"PortsSupporting40gSpeed,omitempty"`
	PortsSupportingBreakout   []CapabilityPortRange                 `json:"PortsSupportingBreakout,omitempty"`
	PortsSupportingFcoe       []CapabilityPortRange                 `json:"PortsSupportingFcoe,omitempty"`
	PortsSupportingServerRole []CapabilityPortRange                 `json:"PortsSupportingServerRole,omitempty"`
	ReservedVsans             []CapabilityPortRange                 `json:"ReservedVsans,omitempty"`
	// Sereno Adaptor with Netflow support on this switch.
	SerenoNetflowSupported    *bool                                 `json:"SerenoNetflowSupported,omitempty"`
	StorageLimits             NullableCapabilitySwitchStorageLimits `json:"StorageLimits,omitempty"`
	SwitchingModeCapabilities []CapabilitySwitchingModeCapability   `json:"SwitchingModeCapabilities,omitempty"`
	SystemLimits              NullableCapabilitySwitchSystemLimits  `json:"SystemLimits,omitempty"`
	UnifiedPorts              []CapabilityPortRange                 `json:"UnifiedPorts,omitempty"`
	// The Slider rule for Unified ports on this switch.
	UnifiedRule          *string `json:"UnifiedRule,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _CapabilitySwitchCapability CapabilitySwitchCapability

// NewCapabilitySwitchCapability instantiates a new CapabilitySwitchCapability object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCapabilitySwitchCapability(classId string, objectType string) *CapabilitySwitchCapability {
	this := CapabilitySwitchCapability{}
	this.ClassId = classId
	this.ObjectType = objectType
	return &this
}

// NewCapabilitySwitchCapabilityWithDefaults instantiates a new CapabilitySwitchCapability object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCapabilitySwitchCapabilityWithDefaults() *CapabilitySwitchCapability {
	this := CapabilitySwitchCapability{}
	var classId string = "capability.SwitchCapability"
	this.ClassId = classId
	var objectType string = "capability.SwitchCapability"
	this.ObjectType = objectType
	return &this
}

// GetClassId returns the ClassId field value
func (o *CapabilitySwitchCapability) GetClassId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ClassId
}

// GetClassIdOk returns a tuple with the ClassId field value
// and a boolean to check if the value has been set.
func (o *CapabilitySwitchCapability) GetClassIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ClassId, true
}

// SetClassId sets field value
func (o *CapabilitySwitchCapability) SetClassId(v string) {
	o.ClassId = v
}

// GetObjectType returns the ObjectType field value
func (o *CapabilitySwitchCapability) GetObjectType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ObjectType
}

// GetObjectTypeOk returns a tuple with the ObjectType field value
// and a boolean to check if the value has been set.
func (o *CapabilitySwitchCapability) GetObjectTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ObjectType, true
}

// SetObjectType sets field value
func (o *CapabilitySwitchCapability) SetObjectType(v string) {
	o.ObjectType = v
}

// GetDefaultFcoeVlan returns the DefaultFcoeVlan field value if set, zero value otherwise.
func (o *CapabilitySwitchCapability) GetDefaultFcoeVlan() int64 {
	if o == nil || o.DefaultFcoeVlan == nil {
		var ret int64
		return ret
	}
	return *o.DefaultFcoeVlan
}

// GetDefaultFcoeVlanOk returns a tuple with the DefaultFcoeVlan field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CapabilitySwitchCapability) GetDefaultFcoeVlanOk() (*int64, bool) {
	if o == nil || o.DefaultFcoeVlan == nil {
		return nil, false
	}
	return o.DefaultFcoeVlan, true
}

// HasDefaultFcoeVlan returns a boolean if a field has been set.
func (o *CapabilitySwitchCapability) HasDefaultFcoeVlan() bool {
	if o != nil && o.DefaultFcoeVlan != nil {
		return true
	}

	return false
}

// SetDefaultFcoeVlan gets a reference to the given int64 and assigns it to the DefaultFcoeVlan field.
func (o *CapabilitySwitchCapability) SetDefaultFcoeVlan(v int64) {
	o.DefaultFcoeVlan = &v
}

// GetDynamicVifsSupported returns the DynamicVifsSupported field value if set, zero value otherwise.
func (o *CapabilitySwitchCapability) GetDynamicVifsSupported() bool {
	if o == nil || o.DynamicVifsSupported == nil {
		var ret bool
		return ret
	}
	return *o.DynamicVifsSupported
}

// GetDynamicVifsSupportedOk returns a tuple with the DynamicVifsSupported field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CapabilitySwitchCapability) GetDynamicVifsSupportedOk() (*bool, bool) {
	if o == nil || o.DynamicVifsSupported == nil {
		return nil, false
	}
	return o.DynamicVifsSupported, true
}

// HasDynamicVifsSupported returns a boolean if a field has been set.
func (o *CapabilitySwitchCapability) HasDynamicVifsSupported() bool {
	if o != nil && o.DynamicVifsSupported != nil {
		return true
	}

	return false
}

// SetDynamicVifsSupported gets a reference to the given bool and assigns it to the DynamicVifsSupported field.
func (o *CapabilitySwitchCapability) SetDynamicVifsSupported(v bool) {
	o.DynamicVifsSupported = &v
}

// GetFanModulesSupported returns the FanModulesSupported field value if set, zero value otherwise.
func (o *CapabilitySwitchCapability) GetFanModulesSupported() bool {
	if o == nil || o.FanModulesSupported == nil {
		var ret bool
		return ret
	}
	return *o.FanModulesSupported
}

// GetFanModulesSupportedOk returns a tuple with the FanModulesSupported field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CapabilitySwitchCapability) GetFanModulesSupportedOk() (*bool, bool) {
	if o == nil || o.FanModulesSupported == nil {
		return nil, false
	}
	return o.FanModulesSupported, true
}

// HasFanModulesSupported returns a boolean if a field has been set.
func (o *CapabilitySwitchCapability) HasFanModulesSupported() bool {
	if o != nil && o.FanModulesSupported != nil {
		return true
	}

	return false
}

// SetFanModulesSupported gets a reference to the given bool and assigns it to the FanModulesSupported field.
func (o *CapabilitySwitchCapability) SetFanModulesSupported(v bool) {
	o.FanModulesSupported = &v
}

// GetFcEndHostModeReservedVsans returns the FcEndHostModeReservedVsans field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CapabilitySwitchCapability) GetFcEndHostModeReservedVsans() []CapabilityPortRange {
	if o == nil {
		var ret []CapabilityPortRange
		return ret
	}
	return o.FcEndHostModeReservedVsans
}

// GetFcEndHostModeReservedVsansOk returns a tuple with the FcEndHostModeReservedVsans field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CapabilitySwitchCapability) GetFcEndHostModeReservedVsansOk() (*[]CapabilityPortRange, bool) {
	if o == nil || o.FcEndHostModeReservedVsans == nil {
		return nil, false
	}
	return &o.FcEndHostModeReservedVsans, true
}

// HasFcEndHostModeReservedVsans returns a boolean if a field has been set.
func (o *CapabilitySwitchCapability) HasFcEndHostModeReservedVsans() bool {
	if o != nil && o.FcEndHostModeReservedVsans != nil {
		return true
	}

	return false
}

// SetFcEndHostModeReservedVsans gets a reference to the given []CapabilityPortRange and assigns it to the FcEndHostModeReservedVsans field.
func (o *CapabilitySwitchCapability) SetFcEndHostModeReservedVsans(v []CapabilityPortRange) {
	o.FcEndHostModeReservedVsans = v
}

// GetFcUplinkPortsAutoNegotiationSupported returns the FcUplinkPortsAutoNegotiationSupported field value if set, zero value otherwise.
func (o *CapabilitySwitchCapability) GetFcUplinkPortsAutoNegotiationSupported() bool {
	if o == nil || o.FcUplinkPortsAutoNegotiationSupported == nil {
		var ret bool
		return ret
	}
	return *o.FcUplinkPortsAutoNegotiationSupported
}

// GetFcUplinkPortsAutoNegotiationSupportedOk returns a tuple with the FcUplinkPortsAutoNegotiationSupported field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CapabilitySwitchCapability) GetFcUplinkPortsAutoNegotiationSupportedOk() (*bool, bool) {
	if o == nil || o.FcUplinkPortsAutoNegotiationSupported == nil {
		return nil, false
	}
	return o.FcUplinkPortsAutoNegotiationSupported, true
}

// HasFcUplinkPortsAutoNegotiationSupported returns a boolean if a field has been set.
func (o *CapabilitySwitchCapability) HasFcUplinkPortsAutoNegotiationSupported() bool {
	if o != nil && o.FcUplinkPortsAutoNegotiationSupported != nil {
		return true
	}

	return false
}

// SetFcUplinkPortsAutoNegotiationSupported gets a reference to the given bool and assigns it to the FcUplinkPortsAutoNegotiationSupported field.
func (o *CapabilitySwitchCapability) SetFcUplinkPortsAutoNegotiationSupported(v bool) {
	o.FcUplinkPortsAutoNegotiationSupported = &v
}

// GetLocatorBeaconSupported returns the LocatorBeaconSupported field value if set, zero value otherwise.
func (o *CapabilitySwitchCapability) GetLocatorBeaconSupported() bool {
	if o == nil || o.LocatorBeaconSupported == nil {
		var ret bool
		return ret
	}
	return *o.LocatorBeaconSupported
}

// GetLocatorBeaconSupportedOk returns a tuple with the LocatorBeaconSupported field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CapabilitySwitchCapability) GetLocatorBeaconSupportedOk() (*bool, bool) {
	if o == nil || o.LocatorBeaconSupported == nil {
		return nil, false
	}
	return o.LocatorBeaconSupported, true
}

// HasLocatorBeaconSupported returns a boolean if a field has been set.
func (o *CapabilitySwitchCapability) HasLocatorBeaconSupported() bool {
	if o != nil && o.LocatorBeaconSupported != nil {
		return true
	}

	return false
}

// SetLocatorBeaconSupported gets a reference to the given bool and assigns it to the LocatorBeaconSupported field.
func (o *CapabilitySwitchCapability) SetLocatorBeaconSupported(v bool) {
	o.LocatorBeaconSupported = &v
}

// GetMaxPorts returns the MaxPorts field value if set, zero value otherwise.
func (o *CapabilitySwitchCapability) GetMaxPorts() int64 {
	if o == nil || o.MaxPorts == nil {
		var ret int64
		return ret
	}
	return *o.MaxPorts
}

// GetMaxPortsOk returns a tuple with the MaxPorts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CapabilitySwitchCapability) GetMaxPortsOk() (*int64, bool) {
	if o == nil || o.MaxPorts == nil {
		return nil, false
	}
	return o.MaxPorts, true
}

// HasMaxPorts returns a boolean if a field has been set.
func (o *CapabilitySwitchCapability) HasMaxPorts() bool {
	if o != nil && o.MaxPorts != nil {
		return true
	}

	return false
}

// SetMaxPorts gets a reference to the given int64 and assigns it to the MaxPorts field.
func (o *CapabilitySwitchCapability) SetMaxPorts(v int64) {
	o.MaxPorts = &v
}

// GetMaxSlots returns the MaxSlots field value if set, zero value otherwise.
func (o *CapabilitySwitchCapability) GetMaxSlots() int64 {
	if o == nil || o.MaxSlots == nil {
		var ret int64
		return ret
	}
	return *o.MaxSlots
}

// GetMaxSlotsOk returns a tuple with the MaxSlots field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CapabilitySwitchCapability) GetMaxSlotsOk() (*int64, bool) {
	if o == nil || o.MaxSlots == nil {
		return nil, false
	}
	return o.MaxSlots, true
}

// HasMaxSlots returns a boolean if a field has been set.
func (o *CapabilitySwitchCapability) HasMaxSlots() bool {
	if o != nil && o.MaxSlots != nil {
		return true
	}

	return false
}

// SetMaxSlots gets a reference to the given int64 and assigns it to the MaxSlots field.
func (o *CapabilitySwitchCapability) SetMaxSlots(v int64) {
	o.MaxSlots = &v
}

// GetNetworkLimits returns the NetworkLimits field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CapabilitySwitchCapability) GetNetworkLimits() CapabilitySwitchNetworkLimits {
	if o == nil || o.NetworkLimits.Get() == nil {
		var ret CapabilitySwitchNetworkLimits
		return ret
	}
	return *o.NetworkLimits.Get()
}

// GetNetworkLimitsOk returns a tuple with the NetworkLimits field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CapabilitySwitchCapability) GetNetworkLimitsOk() (*CapabilitySwitchNetworkLimits, bool) {
	if o == nil {
		return nil, false
	}
	return o.NetworkLimits.Get(), o.NetworkLimits.IsSet()
}

// HasNetworkLimits returns a boolean if a field has been set.
func (o *CapabilitySwitchCapability) HasNetworkLimits() bool {
	if o != nil && o.NetworkLimits.IsSet() {
		return true
	}

	return false
}

// SetNetworkLimits gets a reference to the given NullableCapabilitySwitchNetworkLimits and assigns it to the NetworkLimits field.
func (o *CapabilitySwitchCapability) SetNetworkLimits(v CapabilitySwitchNetworkLimits) {
	o.NetworkLimits.Set(&v)
}

// SetNetworkLimitsNil sets the value for NetworkLimits to be an explicit nil
func (o *CapabilitySwitchCapability) SetNetworkLimitsNil() {
	o.NetworkLimits.Set(nil)
}

// UnsetNetworkLimits ensures that no value is present for NetworkLimits, not even an explicit nil
func (o *CapabilitySwitchCapability) UnsetNetworkLimits() {
	o.NetworkLimits.Unset()
}

// GetPortsSupporting100gSpeed returns the PortsSupporting100gSpeed field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CapabilitySwitchCapability) GetPortsSupporting100gSpeed() []CapabilityPortRange {
	if o == nil {
		var ret []CapabilityPortRange
		return ret
	}
	return o.PortsSupporting100gSpeed
}

// GetPortsSupporting100gSpeedOk returns a tuple with the PortsSupporting100gSpeed field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CapabilitySwitchCapability) GetPortsSupporting100gSpeedOk() (*[]CapabilityPortRange, bool) {
	if o == nil || o.PortsSupporting100gSpeed == nil {
		return nil, false
	}
	return &o.PortsSupporting100gSpeed, true
}

// HasPortsSupporting100gSpeed returns a boolean if a field has been set.
func (o *CapabilitySwitchCapability) HasPortsSupporting100gSpeed() bool {
	if o != nil && o.PortsSupporting100gSpeed != nil {
		return true
	}

	return false
}

// SetPortsSupporting100gSpeed gets a reference to the given []CapabilityPortRange and assigns it to the PortsSupporting100gSpeed field.
func (o *CapabilitySwitchCapability) SetPortsSupporting100gSpeed(v []CapabilityPortRange) {
	o.PortsSupporting100gSpeed = v
}

// GetPortsSupporting10gSpeed returns the PortsSupporting10gSpeed field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CapabilitySwitchCapability) GetPortsSupporting10gSpeed() []CapabilityPortRange {
	if o == nil {
		var ret []CapabilityPortRange
		return ret
	}
	return o.PortsSupporting10gSpeed
}

// GetPortsSupporting10gSpeedOk returns a tuple with the PortsSupporting10gSpeed field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CapabilitySwitchCapability) GetPortsSupporting10gSpeedOk() (*[]CapabilityPortRange, bool) {
	if o == nil || o.PortsSupporting10gSpeed == nil {
		return nil, false
	}
	return &o.PortsSupporting10gSpeed, true
}

// HasPortsSupporting10gSpeed returns a boolean if a field has been set.
func (o *CapabilitySwitchCapability) HasPortsSupporting10gSpeed() bool {
	if o != nil && o.PortsSupporting10gSpeed != nil {
		return true
	}

	return false
}

// SetPortsSupporting10gSpeed gets a reference to the given []CapabilityPortRange and assigns it to the PortsSupporting10gSpeed field.
func (o *CapabilitySwitchCapability) SetPortsSupporting10gSpeed(v []CapabilityPortRange) {
	o.PortsSupporting10gSpeed = v
}

// GetPortsSupporting1gSpeed returns the PortsSupporting1gSpeed field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CapabilitySwitchCapability) GetPortsSupporting1gSpeed() []CapabilityPortRange {
	if o == nil {
		var ret []CapabilityPortRange
		return ret
	}
	return o.PortsSupporting1gSpeed
}

// GetPortsSupporting1gSpeedOk returns a tuple with the PortsSupporting1gSpeed field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CapabilitySwitchCapability) GetPortsSupporting1gSpeedOk() (*[]CapabilityPortRange, bool) {
	if o == nil || o.PortsSupporting1gSpeed == nil {
		return nil, false
	}
	return &o.PortsSupporting1gSpeed, true
}

// HasPortsSupporting1gSpeed returns a boolean if a field has been set.
func (o *CapabilitySwitchCapability) HasPortsSupporting1gSpeed() bool {
	if o != nil && o.PortsSupporting1gSpeed != nil {
		return true
	}

	return false
}

// SetPortsSupporting1gSpeed gets a reference to the given []CapabilityPortRange and assigns it to the PortsSupporting1gSpeed field.
func (o *CapabilitySwitchCapability) SetPortsSupporting1gSpeed(v []CapabilityPortRange) {
	o.PortsSupporting1gSpeed = v
}

// GetPortsSupporting25gSpeed returns the PortsSupporting25gSpeed field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CapabilitySwitchCapability) GetPortsSupporting25gSpeed() []CapabilityPortRange {
	if o == nil {
		var ret []CapabilityPortRange
		return ret
	}
	return o.PortsSupporting25gSpeed
}

// GetPortsSupporting25gSpeedOk returns a tuple with the PortsSupporting25gSpeed field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CapabilitySwitchCapability) GetPortsSupporting25gSpeedOk() (*[]CapabilityPortRange, bool) {
	if o == nil || o.PortsSupporting25gSpeed == nil {
		return nil, false
	}
	return &o.PortsSupporting25gSpeed, true
}

// HasPortsSupporting25gSpeed returns a boolean if a field has been set.
func (o *CapabilitySwitchCapability) HasPortsSupporting25gSpeed() bool {
	if o != nil && o.PortsSupporting25gSpeed != nil {
		return true
	}

	return false
}

// SetPortsSupporting25gSpeed gets a reference to the given []CapabilityPortRange and assigns it to the PortsSupporting25gSpeed field.
func (o *CapabilitySwitchCapability) SetPortsSupporting25gSpeed(v []CapabilityPortRange) {
	o.PortsSupporting25gSpeed = v
}

// GetPortsSupporting40gSpeed returns the PortsSupporting40gSpeed field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CapabilitySwitchCapability) GetPortsSupporting40gSpeed() []CapabilityPortRange {
	if o == nil {
		var ret []CapabilityPortRange
		return ret
	}
	return o.PortsSupporting40gSpeed
}

// GetPortsSupporting40gSpeedOk returns a tuple with the PortsSupporting40gSpeed field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CapabilitySwitchCapability) GetPortsSupporting40gSpeedOk() (*[]CapabilityPortRange, bool) {
	if o == nil || o.PortsSupporting40gSpeed == nil {
		return nil, false
	}
	return &o.PortsSupporting40gSpeed, true
}

// HasPortsSupporting40gSpeed returns a boolean if a field has been set.
func (o *CapabilitySwitchCapability) HasPortsSupporting40gSpeed() bool {
	if o != nil && o.PortsSupporting40gSpeed != nil {
		return true
	}

	return false
}

// SetPortsSupporting40gSpeed gets a reference to the given []CapabilityPortRange and assigns it to the PortsSupporting40gSpeed field.
func (o *CapabilitySwitchCapability) SetPortsSupporting40gSpeed(v []CapabilityPortRange) {
	o.PortsSupporting40gSpeed = v
}

// GetPortsSupportingBreakout returns the PortsSupportingBreakout field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CapabilitySwitchCapability) GetPortsSupportingBreakout() []CapabilityPortRange {
	if o == nil {
		var ret []CapabilityPortRange
		return ret
	}
	return o.PortsSupportingBreakout
}

// GetPortsSupportingBreakoutOk returns a tuple with the PortsSupportingBreakout field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CapabilitySwitchCapability) GetPortsSupportingBreakoutOk() (*[]CapabilityPortRange, bool) {
	if o == nil || o.PortsSupportingBreakout == nil {
		return nil, false
	}
	return &o.PortsSupportingBreakout, true
}

// HasPortsSupportingBreakout returns a boolean if a field has been set.
func (o *CapabilitySwitchCapability) HasPortsSupportingBreakout() bool {
	if o != nil && o.PortsSupportingBreakout != nil {
		return true
	}

	return false
}

// SetPortsSupportingBreakout gets a reference to the given []CapabilityPortRange and assigns it to the PortsSupportingBreakout field.
func (o *CapabilitySwitchCapability) SetPortsSupportingBreakout(v []CapabilityPortRange) {
	o.PortsSupportingBreakout = v
}

// GetPortsSupportingFcoe returns the PortsSupportingFcoe field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CapabilitySwitchCapability) GetPortsSupportingFcoe() []CapabilityPortRange {
	if o == nil {
		var ret []CapabilityPortRange
		return ret
	}
	return o.PortsSupportingFcoe
}

// GetPortsSupportingFcoeOk returns a tuple with the PortsSupportingFcoe field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CapabilitySwitchCapability) GetPortsSupportingFcoeOk() (*[]CapabilityPortRange, bool) {
	if o == nil || o.PortsSupportingFcoe == nil {
		return nil, false
	}
	return &o.PortsSupportingFcoe, true
}

// HasPortsSupportingFcoe returns a boolean if a field has been set.
func (o *CapabilitySwitchCapability) HasPortsSupportingFcoe() bool {
	if o != nil && o.PortsSupportingFcoe != nil {
		return true
	}

	return false
}

// SetPortsSupportingFcoe gets a reference to the given []CapabilityPortRange and assigns it to the PortsSupportingFcoe field.
func (o *CapabilitySwitchCapability) SetPortsSupportingFcoe(v []CapabilityPortRange) {
	o.PortsSupportingFcoe = v
}

// GetPortsSupportingServerRole returns the PortsSupportingServerRole field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CapabilitySwitchCapability) GetPortsSupportingServerRole() []CapabilityPortRange {
	if o == nil {
		var ret []CapabilityPortRange
		return ret
	}
	return o.PortsSupportingServerRole
}

// GetPortsSupportingServerRoleOk returns a tuple with the PortsSupportingServerRole field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CapabilitySwitchCapability) GetPortsSupportingServerRoleOk() (*[]CapabilityPortRange, bool) {
	if o == nil || o.PortsSupportingServerRole == nil {
		return nil, false
	}
	return &o.PortsSupportingServerRole, true
}

// HasPortsSupportingServerRole returns a boolean if a field has been set.
func (o *CapabilitySwitchCapability) HasPortsSupportingServerRole() bool {
	if o != nil && o.PortsSupportingServerRole != nil {
		return true
	}

	return false
}

// SetPortsSupportingServerRole gets a reference to the given []CapabilityPortRange and assigns it to the PortsSupportingServerRole field.
func (o *CapabilitySwitchCapability) SetPortsSupportingServerRole(v []CapabilityPortRange) {
	o.PortsSupportingServerRole = v
}

// GetReservedVsans returns the ReservedVsans field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CapabilitySwitchCapability) GetReservedVsans() []CapabilityPortRange {
	if o == nil {
		var ret []CapabilityPortRange
		return ret
	}
	return o.ReservedVsans
}

// GetReservedVsansOk returns a tuple with the ReservedVsans field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CapabilitySwitchCapability) GetReservedVsansOk() (*[]CapabilityPortRange, bool) {
	if o == nil || o.ReservedVsans == nil {
		return nil, false
	}
	return &o.ReservedVsans, true
}

// HasReservedVsans returns a boolean if a field has been set.
func (o *CapabilitySwitchCapability) HasReservedVsans() bool {
	if o != nil && o.ReservedVsans != nil {
		return true
	}

	return false
}

// SetReservedVsans gets a reference to the given []CapabilityPortRange and assigns it to the ReservedVsans field.
func (o *CapabilitySwitchCapability) SetReservedVsans(v []CapabilityPortRange) {
	o.ReservedVsans = v
}

// GetSerenoNetflowSupported returns the SerenoNetflowSupported field value if set, zero value otherwise.
func (o *CapabilitySwitchCapability) GetSerenoNetflowSupported() bool {
	if o == nil || o.SerenoNetflowSupported == nil {
		var ret bool
		return ret
	}
	return *o.SerenoNetflowSupported
}

// GetSerenoNetflowSupportedOk returns a tuple with the SerenoNetflowSupported field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CapabilitySwitchCapability) GetSerenoNetflowSupportedOk() (*bool, bool) {
	if o == nil || o.SerenoNetflowSupported == nil {
		return nil, false
	}
	return o.SerenoNetflowSupported, true
}

// HasSerenoNetflowSupported returns a boolean if a field has been set.
func (o *CapabilitySwitchCapability) HasSerenoNetflowSupported() bool {
	if o != nil && o.SerenoNetflowSupported != nil {
		return true
	}

	return false
}

// SetSerenoNetflowSupported gets a reference to the given bool and assigns it to the SerenoNetflowSupported field.
func (o *CapabilitySwitchCapability) SetSerenoNetflowSupported(v bool) {
	o.SerenoNetflowSupported = &v
}

// GetStorageLimits returns the StorageLimits field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CapabilitySwitchCapability) GetStorageLimits() CapabilitySwitchStorageLimits {
	if o == nil || o.StorageLimits.Get() == nil {
		var ret CapabilitySwitchStorageLimits
		return ret
	}
	return *o.StorageLimits.Get()
}

// GetStorageLimitsOk returns a tuple with the StorageLimits field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CapabilitySwitchCapability) GetStorageLimitsOk() (*CapabilitySwitchStorageLimits, bool) {
	if o == nil {
		return nil, false
	}
	return o.StorageLimits.Get(), o.StorageLimits.IsSet()
}

// HasStorageLimits returns a boolean if a field has been set.
func (o *CapabilitySwitchCapability) HasStorageLimits() bool {
	if o != nil && o.StorageLimits.IsSet() {
		return true
	}

	return false
}

// SetStorageLimits gets a reference to the given NullableCapabilitySwitchStorageLimits and assigns it to the StorageLimits field.
func (o *CapabilitySwitchCapability) SetStorageLimits(v CapabilitySwitchStorageLimits) {
	o.StorageLimits.Set(&v)
}

// SetStorageLimitsNil sets the value for StorageLimits to be an explicit nil
func (o *CapabilitySwitchCapability) SetStorageLimitsNil() {
	o.StorageLimits.Set(nil)
}

// UnsetStorageLimits ensures that no value is present for StorageLimits, not even an explicit nil
func (o *CapabilitySwitchCapability) UnsetStorageLimits() {
	o.StorageLimits.Unset()
}

// GetSwitchingModeCapabilities returns the SwitchingModeCapabilities field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CapabilitySwitchCapability) GetSwitchingModeCapabilities() []CapabilitySwitchingModeCapability {
	if o == nil {
		var ret []CapabilitySwitchingModeCapability
		return ret
	}
	return o.SwitchingModeCapabilities
}

// GetSwitchingModeCapabilitiesOk returns a tuple with the SwitchingModeCapabilities field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CapabilitySwitchCapability) GetSwitchingModeCapabilitiesOk() (*[]CapabilitySwitchingModeCapability, bool) {
	if o == nil || o.SwitchingModeCapabilities == nil {
		return nil, false
	}
	return &o.SwitchingModeCapabilities, true
}

// HasSwitchingModeCapabilities returns a boolean if a field has been set.
func (o *CapabilitySwitchCapability) HasSwitchingModeCapabilities() bool {
	if o != nil && o.SwitchingModeCapabilities != nil {
		return true
	}

	return false
}

// SetSwitchingModeCapabilities gets a reference to the given []CapabilitySwitchingModeCapability and assigns it to the SwitchingModeCapabilities field.
func (o *CapabilitySwitchCapability) SetSwitchingModeCapabilities(v []CapabilitySwitchingModeCapability) {
	o.SwitchingModeCapabilities = v
}

// GetSystemLimits returns the SystemLimits field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CapabilitySwitchCapability) GetSystemLimits() CapabilitySwitchSystemLimits {
	if o == nil || o.SystemLimits.Get() == nil {
		var ret CapabilitySwitchSystemLimits
		return ret
	}
	return *o.SystemLimits.Get()
}

// GetSystemLimitsOk returns a tuple with the SystemLimits field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CapabilitySwitchCapability) GetSystemLimitsOk() (*CapabilitySwitchSystemLimits, bool) {
	if o == nil {
		return nil, false
	}
	return o.SystemLimits.Get(), o.SystemLimits.IsSet()
}

// HasSystemLimits returns a boolean if a field has been set.
func (o *CapabilitySwitchCapability) HasSystemLimits() bool {
	if o != nil && o.SystemLimits.IsSet() {
		return true
	}

	return false
}

// SetSystemLimits gets a reference to the given NullableCapabilitySwitchSystemLimits and assigns it to the SystemLimits field.
func (o *CapabilitySwitchCapability) SetSystemLimits(v CapabilitySwitchSystemLimits) {
	o.SystemLimits.Set(&v)
}

// SetSystemLimitsNil sets the value for SystemLimits to be an explicit nil
func (o *CapabilitySwitchCapability) SetSystemLimitsNil() {
	o.SystemLimits.Set(nil)
}

// UnsetSystemLimits ensures that no value is present for SystemLimits, not even an explicit nil
func (o *CapabilitySwitchCapability) UnsetSystemLimits() {
	o.SystemLimits.Unset()
}

// GetUnifiedPorts returns the UnifiedPorts field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CapabilitySwitchCapability) GetUnifiedPorts() []CapabilityPortRange {
	if o == nil {
		var ret []CapabilityPortRange
		return ret
	}
	return o.UnifiedPorts
}

// GetUnifiedPortsOk returns a tuple with the UnifiedPorts field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CapabilitySwitchCapability) GetUnifiedPortsOk() (*[]CapabilityPortRange, bool) {
	if o == nil || o.UnifiedPorts == nil {
		return nil, false
	}
	return &o.UnifiedPorts, true
}

// HasUnifiedPorts returns a boolean if a field has been set.
func (o *CapabilitySwitchCapability) HasUnifiedPorts() bool {
	if o != nil && o.UnifiedPorts != nil {
		return true
	}

	return false
}

// SetUnifiedPorts gets a reference to the given []CapabilityPortRange and assigns it to the UnifiedPorts field.
func (o *CapabilitySwitchCapability) SetUnifiedPorts(v []CapabilityPortRange) {
	o.UnifiedPorts = v
}

// GetUnifiedRule returns the UnifiedRule field value if set, zero value otherwise.
func (o *CapabilitySwitchCapability) GetUnifiedRule() string {
	if o == nil || o.UnifiedRule == nil {
		var ret string
		return ret
	}
	return *o.UnifiedRule
}

// GetUnifiedRuleOk returns a tuple with the UnifiedRule field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CapabilitySwitchCapability) GetUnifiedRuleOk() (*string, bool) {
	if o == nil || o.UnifiedRule == nil {
		return nil, false
	}
	return o.UnifiedRule, true
}

// HasUnifiedRule returns a boolean if a field has been set.
func (o *CapabilitySwitchCapability) HasUnifiedRule() bool {
	if o != nil && o.UnifiedRule != nil {
		return true
	}

	return false
}

// SetUnifiedRule gets a reference to the given string and assigns it to the UnifiedRule field.
func (o *CapabilitySwitchCapability) SetUnifiedRule(v string) {
	o.UnifiedRule = &v
}

func (o CapabilitySwitchCapability) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	serializedCapabilitySwitchCapabilityDef, errCapabilitySwitchCapabilityDef := json.Marshal(o.CapabilitySwitchCapabilityDef)
	if errCapabilitySwitchCapabilityDef != nil {
		return []byte{}, errCapabilitySwitchCapabilityDef
	}
	errCapabilitySwitchCapabilityDef = json.Unmarshal([]byte(serializedCapabilitySwitchCapabilityDef), &toSerialize)
	if errCapabilitySwitchCapabilityDef != nil {
		return []byte{}, errCapabilitySwitchCapabilityDef
	}
	if true {
		toSerialize["ClassId"] = o.ClassId
	}
	if true {
		toSerialize["ObjectType"] = o.ObjectType
	}
	if o.DefaultFcoeVlan != nil {
		toSerialize["DefaultFcoeVlan"] = o.DefaultFcoeVlan
	}
	if o.DynamicVifsSupported != nil {
		toSerialize["DynamicVifsSupported"] = o.DynamicVifsSupported
	}
	if o.FanModulesSupported != nil {
		toSerialize["FanModulesSupported"] = o.FanModulesSupported
	}
	if o.FcEndHostModeReservedVsans != nil {
		toSerialize["FcEndHostModeReservedVsans"] = o.FcEndHostModeReservedVsans
	}
	if o.FcUplinkPortsAutoNegotiationSupported != nil {
		toSerialize["FcUplinkPortsAutoNegotiationSupported"] = o.FcUplinkPortsAutoNegotiationSupported
	}
	if o.LocatorBeaconSupported != nil {
		toSerialize["LocatorBeaconSupported"] = o.LocatorBeaconSupported
	}
	if o.MaxPorts != nil {
		toSerialize["MaxPorts"] = o.MaxPorts
	}
	if o.MaxSlots != nil {
		toSerialize["MaxSlots"] = o.MaxSlots
	}
	if o.NetworkLimits.IsSet() {
		toSerialize["NetworkLimits"] = o.NetworkLimits.Get()
	}
	if o.PortsSupporting100gSpeed != nil {
		toSerialize["PortsSupporting100gSpeed"] = o.PortsSupporting100gSpeed
	}
	if o.PortsSupporting10gSpeed != nil {
		toSerialize["PortsSupporting10gSpeed"] = o.PortsSupporting10gSpeed
	}
	if o.PortsSupporting1gSpeed != nil {
		toSerialize["PortsSupporting1gSpeed"] = o.PortsSupporting1gSpeed
	}
	if o.PortsSupporting25gSpeed != nil {
		toSerialize["PortsSupporting25gSpeed"] = o.PortsSupporting25gSpeed
	}
	if o.PortsSupporting40gSpeed != nil {
		toSerialize["PortsSupporting40gSpeed"] = o.PortsSupporting40gSpeed
	}
	if o.PortsSupportingBreakout != nil {
		toSerialize["PortsSupportingBreakout"] = o.PortsSupportingBreakout
	}
	if o.PortsSupportingFcoe != nil {
		toSerialize["PortsSupportingFcoe"] = o.PortsSupportingFcoe
	}
	if o.PortsSupportingServerRole != nil {
		toSerialize["PortsSupportingServerRole"] = o.PortsSupportingServerRole
	}
	if o.ReservedVsans != nil {
		toSerialize["ReservedVsans"] = o.ReservedVsans
	}
	if o.SerenoNetflowSupported != nil {
		toSerialize["SerenoNetflowSupported"] = o.SerenoNetflowSupported
	}
	if o.StorageLimits.IsSet() {
		toSerialize["StorageLimits"] = o.StorageLimits.Get()
	}
	if o.SwitchingModeCapabilities != nil {
		toSerialize["SwitchingModeCapabilities"] = o.SwitchingModeCapabilities
	}
	if o.SystemLimits.IsSet() {
		toSerialize["SystemLimits"] = o.SystemLimits.Get()
	}
	if o.UnifiedPorts != nil {
		toSerialize["UnifiedPorts"] = o.UnifiedPorts
	}
	if o.UnifiedRule != nil {
		toSerialize["UnifiedRule"] = o.UnifiedRule
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *CapabilitySwitchCapability) UnmarshalJSON(bytes []byte) (err error) {
	type CapabilitySwitchCapabilityWithoutEmbeddedStruct struct {
		// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.
		ClassId string `json:"ClassId"`
		// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
		ObjectType string `json:"ObjectType"`
		// Default Fcoe VLAN associated with this switch.
		DefaultFcoeVlan *int64 `json:"DefaultFcoeVlan,omitempty"`
		// Dynamic VIFs support on this switch.
		DynamicVifsSupported *bool `json:"DynamicVifsSupported,omitempty"`
		// Fan Modules support on this switch.
		FanModulesSupported        *bool                 `json:"FanModulesSupported,omitempty"`
		FcEndHostModeReservedVsans []CapabilityPortRange `json:"FcEndHostModeReservedVsans,omitempty"`
		// Fc Uplink ports auto negotiation speed support on this switch.
		FcUplinkPortsAutoNegotiationSupported *bool `json:"FcUplinkPortsAutoNegotiationSupported,omitempty"`
		// Locator Beacon LED support on this switch.
		LocatorBeaconSupported *bool `json:"LocatorBeaconSupported,omitempty"`
		// Maximum allowed physical ports on this switch.
		MaxPorts *int64 `json:"MaxPorts,omitempty"`
		// Maximum allowed physical slots on this switch.
		MaxSlots                  *int64                                `json:"MaxSlots,omitempty"`
		NetworkLimits             NullableCapabilitySwitchNetworkLimits `json:"NetworkLimits,omitempty"`
		PortsSupporting100gSpeed  []CapabilityPortRange                 `json:"PortsSupporting100gSpeed,omitempty"`
		PortsSupporting10gSpeed   []CapabilityPortRange                 `json:"PortsSupporting10gSpeed,omitempty"`
		PortsSupporting1gSpeed    []CapabilityPortRange                 `json:"PortsSupporting1gSpeed,omitempty"`
		PortsSupporting25gSpeed   []CapabilityPortRange                 `json:"PortsSupporting25gSpeed,omitempty"`
		PortsSupporting40gSpeed   []CapabilityPortRange                 `json:"PortsSupporting40gSpeed,omitempty"`
		PortsSupportingBreakout   []CapabilityPortRange                 `json:"PortsSupportingBreakout,omitempty"`
		PortsSupportingFcoe       []CapabilityPortRange                 `json:"PortsSupportingFcoe,omitempty"`
		PortsSupportingServerRole []CapabilityPortRange                 `json:"PortsSupportingServerRole,omitempty"`
		ReservedVsans             []CapabilityPortRange                 `json:"ReservedVsans,omitempty"`
		// Sereno Adaptor with Netflow support on this switch.
		SerenoNetflowSupported    *bool                                 `json:"SerenoNetflowSupported,omitempty"`
		StorageLimits             NullableCapabilitySwitchStorageLimits `json:"StorageLimits,omitempty"`
		SwitchingModeCapabilities []CapabilitySwitchingModeCapability   `json:"SwitchingModeCapabilities,omitempty"`
		SystemLimits              NullableCapabilitySwitchSystemLimits  `json:"SystemLimits,omitempty"`
		UnifiedPorts              []CapabilityPortRange                 `json:"UnifiedPorts,omitempty"`
		// The Slider rule for Unified ports on this switch.
		UnifiedRule *string `json:"UnifiedRule,omitempty"`
	}

	varCapabilitySwitchCapabilityWithoutEmbeddedStruct := CapabilitySwitchCapabilityWithoutEmbeddedStruct{}

	err = json.Unmarshal(bytes, &varCapabilitySwitchCapabilityWithoutEmbeddedStruct)
	if err == nil {
		varCapabilitySwitchCapability := _CapabilitySwitchCapability{}
		varCapabilitySwitchCapability.ClassId = varCapabilitySwitchCapabilityWithoutEmbeddedStruct.ClassId
		varCapabilitySwitchCapability.ObjectType = varCapabilitySwitchCapabilityWithoutEmbeddedStruct.ObjectType
		varCapabilitySwitchCapability.DefaultFcoeVlan = varCapabilitySwitchCapabilityWithoutEmbeddedStruct.DefaultFcoeVlan
		varCapabilitySwitchCapability.DynamicVifsSupported = varCapabilitySwitchCapabilityWithoutEmbeddedStruct.DynamicVifsSupported
		varCapabilitySwitchCapability.FanModulesSupported = varCapabilitySwitchCapabilityWithoutEmbeddedStruct.FanModulesSupported
		varCapabilitySwitchCapability.FcEndHostModeReservedVsans = varCapabilitySwitchCapabilityWithoutEmbeddedStruct.FcEndHostModeReservedVsans
		varCapabilitySwitchCapability.FcUplinkPortsAutoNegotiationSupported = varCapabilitySwitchCapabilityWithoutEmbeddedStruct.FcUplinkPortsAutoNegotiationSupported
		varCapabilitySwitchCapability.LocatorBeaconSupported = varCapabilitySwitchCapabilityWithoutEmbeddedStruct.LocatorBeaconSupported
		varCapabilitySwitchCapability.MaxPorts = varCapabilitySwitchCapabilityWithoutEmbeddedStruct.MaxPorts
		varCapabilitySwitchCapability.MaxSlots = varCapabilitySwitchCapabilityWithoutEmbeddedStruct.MaxSlots
		varCapabilitySwitchCapability.NetworkLimits = varCapabilitySwitchCapabilityWithoutEmbeddedStruct.NetworkLimits
		varCapabilitySwitchCapability.PortsSupporting100gSpeed = varCapabilitySwitchCapabilityWithoutEmbeddedStruct.PortsSupporting100gSpeed
		varCapabilitySwitchCapability.PortsSupporting10gSpeed = varCapabilitySwitchCapabilityWithoutEmbeddedStruct.PortsSupporting10gSpeed
		varCapabilitySwitchCapability.PortsSupporting1gSpeed = varCapabilitySwitchCapabilityWithoutEmbeddedStruct.PortsSupporting1gSpeed
		varCapabilitySwitchCapability.PortsSupporting25gSpeed = varCapabilitySwitchCapabilityWithoutEmbeddedStruct.PortsSupporting25gSpeed
		varCapabilitySwitchCapability.PortsSupporting40gSpeed = varCapabilitySwitchCapabilityWithoutEmbeddedStruct.PortsSupporting40gSpeed
		varCapabilitySwitchCapability.PortsSupportingBreakout = varCapabilitySwitchCapabilityWithoutEmbeddedStruct.PortsSupportingBreakout
		varCapabilitySwitchCapability.PortsSupportingFcoe = varCapabilitySwitchCapabilityWithoutEmbeddedStruct.PortsSupportingFcoe
		varCapabilitySwitchCapability.PortsSupportingServerRole = varCapabilitySwitchCapabilityWithoutEmbeddedStruct.PortsSupportingServerRole
		varCapabilitySwitchCapability.ReservedVsans = varCapabilitySwitchCapabilityWithoutEmbeddedStruct.ReservedVsans
		varCapabilitySwitchCapability.SerenoNetflowSupported = varCapabilitySwitchCapabilityWithoutEmbeddedStruct.SerenoNetflowSupported
		varCapabilitySwitchCapability.StorageLimits = varCapabilitySwitchCapabilityWithoutEmbeddedStruct.StorageLimits
		varCapabilitySwitchCapability.SwitchingModeCapabilities = varCapabilitySwitchCapabilityWithoutEmbeddedStruct.SwitchingModeCapabilities
		varCapabilitySwitchCapability.SystemLimits = varCapabilitySwitchCapabilityWithoutEmbeddedStruct.SystemLimits
		varCapabilitySwitchCapability.UnifiedPorts = varCapabilitySwitchCapabilityWithoutEmbeddedStruct.UnifiedPorts
		varCapabilitySwitchCapability.UnifiedRule = varCapabilitySwitchCapabilityWithoutEmbeddedStruct.UnifiedRule
		*o = CapabilitySwitchCapability(varCapabilitySwitchCapability)
	} else {
		return err
	}

	varCapabilitySwitchCapability := _CapabilitySwitchCapability{}

	err = json.Unmarshal(bytes, &varCapabilitySwitchCapability)
	if err == nil {
		o.CapabilitySwitchCapabilityDef = varCapabilitySwitchCapability.CapabilitySwitchCapabilityDef
	} else {
		return err
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "ClassId")
		delete(additionalProperties, "ObjectType")
		delete(additionalProperties, "DefaultFcoeVlan")
		delete(additionalProperties, "DynamicVifsSupported")
		delete(additionalProperties, "FanModulesSupported")
		delete(additionalProperties, "FcEndHostModeReservedVsans")
		delete(additionalProperties, "FcUplinkPortsAutoNegotiationSupported")
		delete(additionalProperties, "LocatorBeaconSupported")
		delete(additionalProperties, "MaxPorts")
		delete(additionalProperties, "MaxSlots")
		delete(additionalProperties, "NetworkLimits")
		delete(additionalProperties, "PortsSupporting100gSpeed")
		delete(additionalProperties, "PortsSupporting10gSpeed")
		delete(additionalProperties, "PortsSupporting1gSpeed")
		delete(additionalProperties, "PortsSupporting25gSpeed")
		delete(additionalProperties, "PortsSupporting40gSpeed")
		delete(additionalProperties, "PortsSupportingBreakout")
		delete(additionalProperties, "PortsSupportingFcoe")
		delete(additionalProperties, "PortsSupportingServerRole")
		delete(additionalProperties, "ReservedVsans")
		delete(additionalProperties, "SerenoNetflowSupported")
		delete(additionalProperties, "StorageLimits")
		delete(additionalProperties, "SwitchingModeCapabilities")
		delete(additionalProperties, "SystemLimits")
		delete(additionalProperties, "UnifiedPorts")
		delete(additionalProperties, "UnifiedRule")

		// remove fields from embedded structs
		reflectCapabilitySwitchCapabilityDef := reflect.ValueOf(o.CapabilitySwitchCapabilityDef)
		for i := 0; i < reflectCapabilitySwitchCapabilityDef.Type().NumField(); i++ {
			t := reflectCapabilitySwitchCapabilityDef.Type().Field(i)

			if jsonTag := t.Tag.Get("json"); jsonTag != "" {
				fieldName := ""
				if commaIdx := strings.Index(jsonTag, ","); commaIdx > 0 {
					fieldName = jsonTag[:commaIdx]
				} else {
					fieldName = jsonTag
				}
				if fieldName != "AdditionalProperties" {
					delete(additionalProperties, fieldName)
				}
			}
		}

		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableCapabilitySwitchCapability struct {
	value *CapabilitySwitchCapability
	isSet bool
}

func (v NullableCapabilitySwitchCapability) Get() *CapabilitySwitchCapability {
	return v.value
}

func (v *NullableCapabilitySwitchCapability) Set(val *CapabilitySwitchCapability) {
	v.value = val
	v.isSet = true
}

func (v NullableCapabilitySwitchCapability) IsSet() bool {
	return v.isSet
}

func (v *NullableCapabilitySwitchCapability) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCapabilitySwitchCapability(val *CapabilitySwitchCapability) *NullableCapabilitySwitchCapability {
	return &NullableCapabilitySwitchCapability{value: val, isSet: true}
}

func (v NullableCapabilitySwitchCapability) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCapabilitySwitchCapability) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
