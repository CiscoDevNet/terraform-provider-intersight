/*
Cisco Intersight

Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations. The Intersight OpenAPI document defines the complete set of properties that are returned in the HTTP response. From that perspective, a client can expect that no additional properties are returned, unless these properties are explicitly defined in the OpenAPI document. However, when a client uses an older version of the Intersight OpenAPI document, the server may send additional properties because the software is more recent than the client. In that case, the client may receive properties that it does not know about. Some generated SDKs perform a strict validation of the HTTP response body against the OpenAPI document.

API version: 1.0.11-2025101412
Contact: intersight@cisco.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package intersight

import (
	"encoding/json"
	"fmt"
	"reflect"
	"strings"
)

// checks if the PciPort type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PciPort{}

// PciPort PCIe Switch port on the PCIe Switch.
type PciPort struct {
	InventoryBase
	// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.
	ClassId string `json:"ClassId"`
	// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
	ObjectType string `json:"ObjectType"`
	// The name of the PCIe Switch Port. Name will be of the format 'PCIe Port <$id>'.
	Name       *string  `json:"Name,omitempty"`
	OperReason []string `json:"OperReason,omitempty"`
	// The operational status of the PCIe switch port.
	OperState *string `json:"OperState,omitempty"`
	// The identifier of the PCIe switch port.
	PortId *int64 `json:"PortId,omitempty"`
	// The current role of the PCIe switch port. * `Unconfigured` - Indicates that the PCIe switch port role is currently unconfigured. * `Downstream` - Indicates that the PCIe switch port role is currently downstream. A downstream port connects to a PCIe peripheral device such as a GPU or a network adapter. * `Upstream` - Indicates that the PCIe switch port role is currently upstream. An upstream port connects to a PCIe root complex such as a CPU. * `Unknown` - Indicates that the PCIe switch port role is currently unknown.
	Role *string `json:"Role,omitempty"`
	// The unique identifier of the PCIe switch port as reported by chassis expander module management controller.
	Uri *string `json:"Uri,omitempty"`
	// The link width of the PCIe switch port.
	Width                *int64                                      `json:"Width,omitempty"`
	InventoryDeviceInfo  NullableInventoryDeviceInfoRelationship     `json:"InventoryDeviceInfo,omitempty"`
	PciEndpoint          NullablePciEndpointRelationship             `json:"PciEndpoint,omitempty"`
	PciSwitch            NullablePciSwitchRelationship               `json:"PciSwitch,omitempty"`
	RegisteredDevice     NullableAssetDeviceRegistrationRelationship `json:"RegisteredDevice,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _PciPort PciPort

// NewPciPort instantiates a new PciPort object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPciPort(classId string, objectType string) *PciPort {
	this := PciPort{}
	this.ClassId = classId
	this.ObjectType = objectType
	return &this
}

// NewPciPortWithDefaults instantiates a new PciPort object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPciPortWithDefaults() *PciPort {
	this := PciPort{}
	var classId string = "pci.Port"
	this.ClassId = classId
	var objectType string = "pci.Port"
	this.ObjectType = objectType
	return &this
}

// GetClassId returns the ClassId field value
func (o *PciPort) GetClassId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ClassId
}

// GetClassIdOk returns a tuple with the ClassId field value
// and a boolean to check if the value has been set.
func (o *PciPort) GetClassIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ClassId, true
}

// SetClassId sets field value
func (o *PciPort) SetClassId(v string) {
	o.ClassId = v
}

// GetDefaultClassId returns the default value "pci.Port" of the ClassId field.
func (o *PciPort) GetDefaultClassId() interface{} {
	return "pci.Port"
}

// GetObjectType returns the ObjectType field value
func (o *PciPort) GetObjectType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ObjectType
}

// GetObjectTypeOk returns a tuple with the ObjectType field value
// and a boolean to check if the value has been set.
func (o *PciPort) GetObjectTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ObjectType, true
}

// SetObjectType sets field value
func (o *PciPort) SetObjectType(v string) {
	o.ObjectType = v
}

// GetDefaultObjectType returns the default value "pci.Port" of the ObjectType field.
func (o *PciPort) GetDefaultObjectType() interface{} {
	return "pci.Port"
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *PciPort) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PciPort) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *PciPort) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *PciPort) SetName(v string) {
	o.Name = &v
}

// GetOperReason returns the OperReason field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PciPort) GetOperReason() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.OperReason
}

// GetOperReasonOk returns a tuple with the OperReason field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PciPort) GetOperReasonOk() ([]string, bool) {
	if o == nil || IsNil(o.OperReason) {
		return nil, false
	}
	return o.OperReason, true
}

// HasOperReason returns a boolean if a field has been set.
func (o *PciPort) HasOperReason() bool {
	if o != nil && !IsNil(o.OperReason) {
		return true
	}

	return false
}

// SetOperReason gets a reference to the given []string and assigns it to the OperReason field.
func (o *PciPort) SetOperReason(v []string) {
	o.OperReason = v
}

// GetOperState returns the OperState field value if set, zero value otherwise.
func (o *PciPort) GetOperState() string {
	if o == nil || IsNil(o.OperState) {
		var ret string
		return ret
	}
	return *o.OperState
}

// GetOperStateOk returns a tuple with the OperState field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PciPort) GetOperStateOk() (*string, bool) {
	if o == nil || IsNil(o.OperState) {
		return nil, false
	}
	return o.OperState, true
}

// HasOperState returns a boolean if a field has been set.
func (o *PciPort) HasOperState() bool {
	if o != nil && !IsNil(o.OperState) {
		return true
	}

	return false
}

// SetOperState gets a reference to the given string and assigns it to the OperState field.
func (o *PciPort) SetOperState(v string) {
	o.OperState = &v
}

// GetPortId returns the PortId field value if set, zero value otherwise.
func (o *PciPort) GetPortId() int64 {
	if o == nil || IsNil(o.PortId) {
		var ret int64
		return ret
	}
	return *o.PortId
}

// GetPortIdOk returns a tuple with the PortId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PciPort) GetPortIdOk() (*int64, bool) {
	if o == nil || IsNil(o.PortId) {
		return nil, false
	}
	return o.PortId, true
}

// HasPortId returns a boolean if a field has been set.
func (o *PciPort) HasPortId() bool {
	if o != nil && !IsNil(o.PortId) {
		return true
	}

	return false
}

// SetPortId gets a reference to the given int64 and assigns it to the PortId field.
func (o *PciPort) SetPortId(v int64) {
	o.PortId = &v
}

// GetRole returns the Role field value if set, zero value otherwise.
func (o *PciPort) GetRole() string {
	if o == nil || IsNil(o.Role) {
		var ret string
		return ret
	}
	return *o.Role
}

// GetRoleOk returns a tuple with the Role field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PciPort) GetRoleOk() (*string, bool) {
	if o == nil || IsNil(o.Role) {
		return nil, false
	}
	return o.Role, true
}

// HasRole returns a boolean if a field has been set.
func (o *PciPort) HasRole() bool {
	if o != nil && !IsNil(o.Role) {
		return true
	}

	return false
}

// SetRole gets a reference to the given string and assigns it to the Role field.
func (o *PciPort) SetRole(v string) {
	o.Role = &v
}

// GetUri returns the Uri field value if set, zero value otherwise.
func (o *PciPort) GetUri() string {
	if o == nil || IsNil(o.Uri) {
		var ret string
		return ret
	}
	return *o.Uri
}

// GetUriOk returns a tuple with the Uri field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PciPort) GetUriOk() (*string, bool) {
	if o == nil || IsNil(o.Uri) {
		return nil, false
	}
	return o.Uri, true
}

// HasUri returns a boolean if a field has been set.
func (o *PciPort) HasUri() bool {
	if o != nil && !IsNil(o.Uri) {
		return true
	}

	return false
}

// SetUri gets a reference to the given string and assigns it to the Uri field.
func (o *PciPort) SetUri(v string) {
	o.Uri = &v
}

// GetWidth returns the Width field value if set, zero value otherwise.
func (o *PciPort) GetWidth() int64 {
	if o == nil || IsNil(o.Width) {
		var ret int64
		return ret
	}
	return *o.Width
}

// GetWidthOk returns a tuple with the Width field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PciPort) GetWidthOk() (*int64, bool) {
	if o == nil || IsNil(o.Width) {
		return nil, false
	}
	return o.Width, true
}

// HasWidth returns a boolean if a field has been set.
func (o *PciPort) HasWidth() bool {
	if o != nil && !IsNil(o.Width) {
		return true
	}

	return false
}

// SetWidth gets a reference to the given int64 and assigns it to the Width field.
func (o *PciPort) SetWidth(v int64) {
	o.Width = &v
}

// GetInventoryDeviceInfo returns the InventoryDeviceInfo field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PciPort) GetInventoryDeviceInfo() InventoryDeviceInfoRelationship {
	if o == nil || IsNil(o.InventoryDeviceInfo.Get()) {
		var ret InventoryDeviceInfoRelationship
		return ret
	}
	return *o.InventoryDeviceInfo.Get()
}

// GetInventoryDeviceInfoOk returns a tuple with the InventoryDeviceInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PciPort) GetInventoryDeviceInfoOk() (*InventoryDeviceInfoRelationship, bool) {
	if o == nil {
		return nil, false
	}
	return o.InventoryDeviceInfo.Get(), o.InventoryDeviceInfo.IsSet()
}

// HasInventoryDeviceInfo returns a boolean if a field has been set.
func (o *PciPort) HasInventoryDeviceInfo() bool {
	if o != nil && o.InventoryDeviceInfo.IsSet() {
		return true
	}

	return false
}

// SetInventoryDeviceInfo gets a reference to the given NullableInventoryDeviceInfoRelationship and assigns it to the InventoryDeviceInfo field.
func (o *PciPort) SetInventoryDeviceInfo(v InventoryDeviceInfoRelationship) {
	o.InventoryDeviceInfo.Set(&v)
}

// SetInventoryDeviceInfoNil sets the value for InventoryDeviceInfo to be an explicit nil
func (o *PciPort) SetInventoryDeviceInfoNil() {
	o.InventoryDeviceInfo.Set(nil)
}

// UnsetInventoryDeviceInfo ensures that no value is present for InventoryDeviceInfo, not even an explicit nil
func (o *PciPort) UnsetInventoryDeviceInfo() {
	o.InventoryDeviceInfo.Unset()
}

// GetPciEndpoint returns the PciEndpoint field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PciPort) GetPciEndpoint() PciEndpointRelationship {
	if o == nil || IsNil(o.PciEndpoint.Get()) {
		var ret PciEndpointRelationship
		return ret
	}
	return *o.PciEndpoint.Get()
}

// GetPciEndpointOk returns a tuple with the PciEndpoint field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PciPort) GetPciEndpointOk() (*PciEndpointRelationship, bool) {
	if o == nil {
		return nil, false
	}
	return o.PciEndpoint.Get(), o.PciEndpoint.IsSet()
}

// HasPciEndpoint returns a boolean if a field has been set.
func (o *PciPort) HasPciEndpoint() bool {
	if o != nil && o.PciEndpoint.IsSet() {
		return true
	}

	return false
}

// SetPciEndpoint gets a reference to the given NullablePciEndpointRelationship and assigns it to the PciEndpoint field.
func (o *PciPort) SetPciEndpoint(v PciEndpointRelationship) {
	o.PciEndpoint.Set(&v)
}

// SetPciEndpointNil sets the value for PciEndpoint to be an explicit nil
func (o *PciPort) SetPciEndpointNil() {
	o.PciEndpoint.Set(nil)
}

// UnsetPciEndpoint ensures that no value is present for PciEndpoint, not even an explicit nil
func (o *PciPort) UnsetPciEndpoint() {
	o.PciEndpoint.Unset()
}

// GetPciSwitch returns the PciSwitch field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PciPort) GetPciSwitch() PciSwitchRelationship {
	if o == nil || IsNil(o.PciSwitch.Get()) {
		var ret PciSwitchRelationship
		return ret
	}
	return *o.PciSwitch.Get()
}

// GetPciSwitchOk returns a tuple with the PciSwitch field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PciPort) GetPciSwitchOk() (*PciSwitchRelationship, bool) {
	if o == nil {
		return nil, false
	}
	return o.PciSwitch.Get(), o.PciSwitch.IsSet()
}

// HasPciSwitch returns a boolean if a field has been set.
func (o *PciPort) HasPciSwitch() bool {
	if o != nil && o.PciSwitch.IsSet() {
		return true
	}

	return false
}

// SetPciSwitch gets a reference to the given NullablePciSwitchRelationship and assigns it to the PciSwitch field.
func (o *PciPort) SetPciSwitch(v PciSwitchRelationship) {
	o.PciSwitch.Set(&v)
}

// SetPciSwitchNil sets the value for PciSwitch to be an explicit nil
func (o *PciPort) SetPciSwitchNil() {
	o.PciSwitch.Set(nil)
}

// UnsetPciSwitch ensures that no value is present for PciSwitch, not even an explicit nil
func (o *PciPort) UnsetPciSwitch() {
	o.PciSwitch.Unset()
}

// GetRegisteredDevice returns the RegisteredDevice field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PciPort) GetRegisteredDevice() AssetDeviceRegistrationRelationship {
	if o == nil || IsNil(o.RegisteredDevice.Get()) {
		var ret AssetDeviceRegistrationRelationship
		return ret
	}
	return *o.RegisteredDevice.Get()
}

// GetRegisteredDeviceOk returns a tuple with the RegisteredDevice field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PciPort) GetRegisteredDeviceOk() (*AssetDeviceRegistrationRelationship, bool) {
	if o == nil {
		return nil, false
	}
	return o.RegisteredDevice.Get(), o.RegisteredDevice.IsSet()
}

// HasRegisteredDevice returns a boolean if a field has been set.
func (o *PciPort) HasRegisteredDevice() bool {
	if o != nil && o.RegisteredDevice.IsSet() {
		return true
	}

	return false
}

// SetRegisteredDevice gets a reference to the given NullableAssetDeviceRegistrationRelationship and assigns it to the RegisteredDevice field.
func (o *PciPort) SetRegisteredDevice(v AssetDeviceRegistrationRelationship) {
	o.RegisteredDevice.Set(&v)
}

// SetRegisteredDeviceNil sets the value for RegisteredDevice to be an explicit nil
func (o *PciPort) SetRegisteredDeviceNil() {
	o.RegisteredDevice.Set(nil)
}

// UnsetRegisteredDevice ensures that no value is present for RegisteredDevice, not even an explicit nil
func (o *PciPort) UnsetRegisteredDevice() {
	o.RegisteredDevice.Unset()
}

func (o PciPort) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PciPort) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	serializedInventoryBase, errInventoryBase := json.Marshal(o.InventoryBase)
	if errInventoryBase != nil {
		return map[string]interface{}{}, errInventoryBase
	}
	errInventoryBase = json.Unmarshal([]byte(serializedInventoryBase), &toSerialize)
	if errInventoryBase != nil {
		return map[string]interface{}{}, errInventoryBase
	}
	if _, exists := toSerialize["ClassId"]; !exists {
		toSerialize["ClassId"] = o.GetDefaultClassId()
	}
	toSerialize["ClassId"] = o.ClassId
	if _, exists := toSerialize["ObjectType"]; !exists {
		toSerialize["ObjectType"] = o.GetDefaultObjectType()
	}
	toSerialize["ObjectType"] = o.ObjectType
	if !IsNil(o.Name) {
		toSerialize["Name"] = o.Name
	}
	if o.OperReason != nil {
		toSerialize["OperReason"] = o.OperReason
	}
	if !IsNil(o.OperState) {
		toSerialize["OperState"] = o.OperState
	}
	if !IsNil(o.PortId) {
		toSerialize["PortId"] = o.PortId
	}
	if !IsNil(o.Role) {
		toSerialize["Role"] = o.Role
	}
	if !IsNil(o.Uri) {
		toSerialize["Uri"] = o.Uri
	}
	if !IsNil(o.Width) {
		toSerialize["Width"] = o.Width
	}
	if o.InventoryDeviceInfo.IsSet() {
		toSerialize["InventoryDeviceInfo"] = o.InventoryDeviceInfo.Get()
	}
	if o.PciEndpoint.IsSet() {
		toSerialize["PciEndpoint"] = o.PciEndpoint.Get()
	}
	if o.PciSwitch.IsSet() {
		toSerialize["PciSwitch"] = o.PciSwitch.Get()
	}
	if o.RegisteredDevice.IsSet() {
		toSerialize["RegisteredDevice"] = o.RegisteredDevice.Get()
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *PciPort) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"ClassId",
		"ObjectType",
	}

	// defaultValueFuncMap captures the default values for required properties.
	// These values are used when required properties are missing from the payload.
	defaultValueFuncMap := map[string]func() interface{}{
		"ClassId":    o.GetDefaultClassId,
		"ObjectType": o.GetDefaultObjectType,
	}
	var defaultValueApplied bool
	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			if _, ok := defaultValueFuncMap[requiredProperty]; ok {
				allProperties[requiredProperty] = defaultValueFuncMap[requiredProperty]()
				defaultValueApplied = true
			}
		}
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	if defaultValueApplied {
		data, err = json.Marshal(allProperties)
		if err != nil {
			return err
		}
	}
	type PciPortWithoutEmbeddedStruct struct {
		// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.
		ClassId string `json:"ClassId"`
		// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
		ObjectType string `json:"ObjectType"`
		// The name of the PCIe Switch Port. Name will be of the format 'PCIe Port <$id>'.
		Name       *string  `json:"Name,omitempty"`
		OperReason []string `json:"OperReason,omitempty"`
		// The operational status of the PCIe switch port.
		OperState *string `json:"OperState,omitempty"`
		// The identifier of the PCIe switch port.
		PortId *int64 `json:"PortId,omitempty"`
		// The current role of the PCIe switch port. * `Unconfigured` - Indicates that the PCIe switch port role is currently unconfigured. * `Downstream` - Indicates that the PCIe switch port role is currently downstream. A downstream port connects to a PCIe peripheral device such as a GPU or a network adapter. * `Upstream` - Indicates that the PCIe switch port role is currently upstream. An upstream port connects to a PCIe root complex such as a CPU. * `Unknown` - Indicates that the PCIe switch port role is currently unknown.
		Role *string `json:"Role,omitempty"`
		// The unique identifier of the PCIe switch port as reported by chassis expander module management controller.
		Uri *string `json:"Uri,omitempty"`
		// The link width of the PCIe switch port.
		Width               *int64                                      `json:"Width,omitempty"`
		InventoryDeviceInfo NullableInventoryDeviceInfoRelationship     `json:"InventoryDeviceInfo,omitempty"`
		PciEndpoint         NullablePciEndpointRelationship             `json:"PciEndpoint,omitempty"`
		PciSwitch           NullablePciSwitchRelationship               `json:"PciSwitch,omitempty"`
		RegisteredDevice    NullableAssetDeviceRegistrationRelationship `json:"RegisteredDevice,omitempty"`
	}

	varPciPortWithoutEmbeddedStruct := PciPortWithoutEmbeddedStruct{}

	err = json.Unmarshal(data, &varPciPortWithoutEmbeddedStruct)
	if err == nil {
		varPciPort := _PciPort{}
		varPciPort.ClassId = varPciPortWithoutEmbeddedStruct.ClassId
		varPciPort.ObjectType = varPciPortWithoutEmbeddedStruct.ObjectType
		varPciPort.Name = varPciPortWithoutEmbeddedStruct.Name
		varPciPort.OperReason = varPciPortWithoutEmbeddedStruct.OperReason
		varPciPort.OperState = varPciPortWithoutEmbeddedStruct.OperState
		varPciPort.PortId = varPciPortWithoutEmbeddedStruct.PortId
		varPciPort.Role = varPciPortWithoutEmbeddedStruct.Role
		varPciPort.Uri = varPciPortWithoutEmbeddedStruct.Uri
		varPciPort.Width = varPciPortWithoutEmbeddedStruct.Width
		varPciPort.InventoryDeviceInfo = varPciPortWithoutEmbeddedStruct.InventoryDeviceInfo
		varPciPort.PciEndpoint = varPciPortWithoutEmbeddedStruct.PciEndpoint
		varPciPort.PciSwitch = varPciPortWithoutEmbeddedStruct.PciSwitch
		varPciPort.RegisteredDevice = varPciPortWithoutEmbeddedStruct.RegisteredDevice
		*o = PciPort(varPciPort)
	} else {
		return err
	}

	varPciPort := _PciPort{}

	err = json.Unmarshal(data, &varPciPort)
	if err == nil {
		o.InventoryBase = varPciPort.InventoryBase
	} else {
		return err
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "ClassId")
		delete(additionalProperties, "ObjectType")
		delete(additionalProperties, "Name")
		delete(additionalProperties, "OperReason")
		delete(additionalProperties, "OperState")
		delete(additionalProperties, "PortId")
		delete(additionalProperties, "Role")
		delete(additionalProperties, "Uri")
		delete(additionalProperties, "Width")
		delete(additionalProperties, "InventoryDeviceInfo")
		delete(additionalProperties, "PciEndpoint")
		delete(additionalProperties, "PciSwitch")
		delete(additionalProperties, "RegisteredDevice")

		// remove fields from embedded structs
		reflectInventoryBase := reflect.ValueOf(o.InventoryBase)
		for i := 0; i < reflectInventoryBase.Type().NumField(); i++ {
			t := reflectInventoryBase.Type().Field(i)

			if jsonTag := t.Tag.Get("json"); jsonTag != "" {
				fieldName := ""
				if commaIdx := strings.Index(jsonTag, ","); commaIdx > 0 {
					fieldName = jsonTag[:commaIdx]
				} else {
					fieldName = jsonTag
				}
				if fieldName != "AdditionalProperties" {
					delete(additionalProperties, fieldName)
				}
			}
		}

		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullablePciPort struct {
	value *PciPort
	isSet bool
}

func (v NullablePciPort) Get() *PciPort {
	return v.value
}

func (v *NullablePciPort) Set(val *PciPort) {
	v.value = val
	v.isSet = true
}

func (v NullablePciPort) IsSet() bool {
	return v.isSet
}

func (v *NullablePciPort) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePciPort(val *PciPort) *NullablePciPort {
	return &NullablePciPort{value: val, isSet: true}
}

func (v NullablePciPort) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePciPort) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
