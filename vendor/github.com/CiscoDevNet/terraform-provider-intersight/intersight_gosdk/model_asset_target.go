/*
Cisco Intersight

Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations. The Intersight OpenAPI document defines the complete set of properties that are returned in the HTTP response. From that perspective, a client can expect that no additional properties are returned, unless these properties are explicitly defined in the OpenAPI document. However, when a client uses an older version of the Intersight OpenAPI document, the server may send additional properties because the software is more recent than the client. In that case, the client may receive properties that it does not know about. Some generated SDKs perform a strict validation of the HTTP response body against the OpenAPI document.

API version: 1.0.11-2024100405
Contact: intersight@cisco.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package intersight

import (
	"encoding/json"
	"fmt"
	"reflect"
	"strings"
)

// checks if the AssetTarget type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AssetTarget{}

// AssetTarget Target represents an entity which can be managed by Intersight. This includes physical entities like UCS and HyperFlex servers and software entities like VMware vCenter and Microsoft Azure cloud accounts.
type AssetTarget struct {
	MoBaseMo
	// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.
	ClassId string `json:"ClassId"`
	// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
	ObjectType   string                    `json:"ObjectType"`
	AlarmSummary NullableAssetAlarmSummary `json:"AlarmSummary,omitempty"`
	// The name or email id of the user who claimed the target.
	ClaimedByUserName *string           `json:"ClaimedByUserName,omitempty"`
	Connections       []AssetConnection `json:"Connections,omitempty"`
	// The Device Connector version for target types which are managed by via embedded Device Connector.
	ConnectorVersion *string `json:"ConnectorVersion,omitempty"`
	// ExternalIpAddress is applicable for targets which are managed via an Intersight Device Connector. The value is the IP Address of the target as seen from Intersight. It is either the IP Address of the managed target's interface which has a route to the internet or a NAT IP Address when the target is deployed in a private network.
	ExternalIpAddress *string  `json:"ExternalIpAddress,omitempty"`
	IpAddress         []string `json:"IpAddress,omitempty"`
	// The location from which Intersight manages the target. * `Unknown` - The management mechanism is not detected. Unknown is used as a default by the implementation and is not an allowed user input. * `Intersight` - Management of a target is performed directly from Intersight. Network connections are established from Intersight to a management interface of the Target and authenticated using user provided credentials. * `IntersightAssist` - Management of a target is performed via a selected Intersight Assist. Network connections are established from the Intersight Assist to a management interface of the Target. * `DeviceConnector` - An Intersight Device Connector running within the Target establishes a connection to Intersight and management of the target is performed via this connection.
	ManagementLocation *string `json:"ManagementLocation,omitempty"`
	// A user provided name for the managed target.
	Name      *string  `json:"Name,omitempty"`
	ProductId []string `json:"ProductId,omitempty"`
	// For targets which are managed by an embedded Intersight Device Connector, this field indicates that an administrator of the target has disabled management operations of the Device Connector and only monitoring is permitted.
	ReadOnly *bool          `json:"ReadOnly,omitempty"`
	Services []AssetService `json:"Services,omitempty"`
	// Status indicates if Intersight can establish a connection and authenticate with the managed target. Status does not include information about the functional health of the target. * `` - The target details have been persisted but Intersight has not yet attempted to connect to the target. * `Connected` - Intersight is able to establish a connection to the target and initiate management activities. * `NotConnected` - Intersight is unable to establish a connection to the target. * `ClaimInProgress` - Claim of the target is in progress. A connection to the target has not been fully established. * `UnclaimInProgress` - Unclaim of the target is in progress. Intersight is able to connect to the target and all management operations are supported. * `Unclaimed` - The device was un-claimed from the users account by an Administrator of the device. Also indicates the failure to claim Targets of type HTTP Endpoint in Intersight. * `Claimed` - Target of type HTTP Endpoint is successfully claimed in Intersight. Currently no validation is performed to verify the Target connectivity from Intersight at the time of creation. However invoking API from Intersight Orchestrator fails if this Target is not reachable from Intersight or if Target API credentials are incorrect.
	Status *string `json:"Status,omitempty"`
	// StatusErrorReason provides additional context for the Status.
	StatusErrorReason *string  `json:"StatusErrorReason,omitempty"`
	TargetId          []string `json:"TargetId,omitempty"`
	// The type of the managed target. For example a UCS Server or VMware Vcenter target. * `` - An unrecognized platform type. * `APIC` - A Cisco Application Policy Infrastructure Controller (APIC) cluster. * `CAPIC` - A Cisco Cloud Application Policy Infrastructure Controller (Cloud APIC) instance. * `DCNM` - A Cisco Data Center Network Manager (DCNM) instance. * `UCSFI` - A Cisco UCS Fabric Interconnect that is managed by Cisco UCS Manager (UCSM). * `UCSFIISM` - A Cisco UCS Fabric Interconnect that is managed by Cisco Intersight. * `IMC` - A standalone Cisco UCS rack server (Deprecated). * `IMCM4` - A standalone Cisco UCS C-Series or S-Series M4 server. * `IMCM5` - A standalone Cisco UCS C-Series or S-Series M5 server. * `IMCRack` - A standalone Cisco UCS C-Series or S-Series M6 or newer server. * `UCSIOM` - A Cisco UCS Blade Chassis I/O Module (IOM). * `HX` - A Cisco HyperFlex (HX) cluster. * `UCSD` - A Cisco UCS Director (UCSD) instance. * `IntersightAppliance` - A Cisco Intersight Connected Virtual Appliance instance. * `IntersightAssist` - A Cisco Intersight Assist instance. * `PureStorageFlashArray` - A Pure Storage FlashArray that is managed using Cisco Intersight Assist. Cisco Intersight Workload Optimizer and storage management features are supported on this device. * `NexusDevice` - A Cisco Nexus Network Switch that is managed using Cisco Intersight Assist. * `ACISwitch` - A Cisco Nexus Network Switch with the embedded Device Connector and is a part of the Cisco ACI fabric. * `NexusSwitch` - A standalone Cisco Nexus Network Switch with the embedded Device Connector. * `MDSSwitch` - A Cisco MDS Switch that is managed using the embedded Device Connector. * `MDSDevice` - A Cisco MDS Switch that is managed using Cisco Intersight Assist. * `UCSC890` - A standalone Cisco UCS C890 server managed using Cisco Intersight Assist. * `RedfishServer` - A generic target type for servers that support Redfish APIs and is managed using Cisco Intersight Assist. Support is limited to HPE and Dell Servers. * `NetAppOntap` - A Netapp ONTAP Storage system that is managed using Cisco Intersight Assist. Cisco Intersight Workload Optimizer features are supported on this device. * `NetAppActiveIqUnifiedManager` - A NetApp Active IQ Unified Manager (AIQUM) that is managed using Cisco Intersight Assist. * `EmcScaleIo` - An EMC ScaleIO Software Defined Storage system that is managed using Cisco Intersight Assist. Cisco Intersight Workload Optimizer features are supported on this device. * `EmcVmax` - An EMC VMAX 2 or 3 series enterprise storage array that is managed using Cisco Intersight Assist. Cisco Intersight Workload Optimizer features are supported on this device. * `EmcVplex` - An EMC VPLEX virtual storage system that is managed using Cisco Intersight Assist. Cisco Intersight Workload Optimizer features are supported on this device. * `EmcXtremIo` - An EMC XtremIO SSD storage system that is managed using Cisco Intersight Assist. Cisco Intersight Workload Optimizer features are supported on this device. * `VmwareVcenter` - A VMware vCenter instance that is managed using Cisco Intersight Assist. Cisco Intersight Workload Optimizer and Virtualization features are supported on this hypervisor. * `MicrosoftHyperV` - A Microsoft Hyper-V host that is managed using Cisco Intersight Assist. Optionally, other hosts in the cluster can be discovered through this host. Cisco Intersight Workload Optimizer features are supported on this hypervisor. * `AppDynamics` - An AppDynamics controller running in a SaaS or on-prem datacenter. On-prem AppDynamics instance is managed using Cisco Intersight Assist. Cisco Intersight Workload Optimizer features are supported on this controller. * `Dynatrace` - A Dynatrace Server instance running in a SaaS or on-prem datacenter. On-prem Dynatrace instance is managed using Cisco Intersight Assist. Cisco Intersight Workload Optimizer features are supported on this server. * `NewRelic` - A NewRelic user account. The NewRelic instance monitors the application infrastructure. Cisco Intersight Workload Optimizer features are supported on this server. * `ServiceNow` - A cloud-based workflow automation platform that enables enterprise organizations to improve operational efficiencies by streamlining and automating routine work tasks. * `Umbrella` - Umbrella cloud target that discovers and monitors an organization. It discovers entities like Datacenters, Devices, Tunnels, Networks, etc. * `CloudFoundry` - An open source cloud platform on which developers can build, deploy, run and scale applications. * `MicrosoftAzureApplicationInsights` - A feature of Azure Monitor, is an extensible Application Performance Management service for developers and DevOps professionals to monitor their live applications. * `OpenStack` - An OpenStack target manages Virtual Machines, Physical Machines, Datacenters and Virtual Datacenters using different OpenStack services as administrative endpoints. * `MicrosoftSqlServer` - A Microsoft SQL database server that is managed using Cisco Intersight Assist. Cisco Intersight Workload Optimizer features are supported on this database. * `MySqlServer` - A MySQL database server that is managed using Cisco Intersight Assist. Cisco Intersight Workload Optimizer features are supported on this database. * `OracleDatabaseServer` - An Oracle database server that is managed using Cisco Intersight Assist. Cisco Intersight Workload Optimizer features are supported on this database. * `IBMWebSphereApplicationServer` - An IBM WebSphere Application server that is managed using Cisco Intersight Assist. Cisco Intersight Workload Optimizer features are supported on this application server. * `OracleWebLogicServer` - Oracle WebLogic Server is a unified and extensible platform for developing, deploying and running enterprise applications, such as Java, for on-premises and in the cloud. WebLogic Server offers a robust, mature, and scalable implementation of Java Enterprise Edition (EE) and Jakarta EE. * `ApacheTomcatServer` - An Apache Tomcat server that is managed using Cisco Intersight Assist. Cisco Intersight Workload Optimizer features are supported on this server. * `JavaVirtualMachine` - A JVM Application with JMX configured that is managed using Cisco Intersight Assist. Cisco Intersight Workload Optimizer features are supported on this application. * `RedHatJBossApplicationServer` - JBoss Application Server is an open-source, cross-platform Java application server developed by JBoss, a division of Red Hat Inc. It is an open-source implementation of Java 2 Enterprise Edition (J2EE) that is used for implementing Java applications and other Web-based applications and software. * `Kubernetes` - A Kubernetes cluster that runs containerized applications, with Kubernetes Collector installed. Cisco Intersight Workload Optimizer features are supported on Kubernetes cluster. * `AmazonWebService` - An Amazon Web Service cloud account. Cisco Intersight Workload Optimizer and Virtualization features are supported on this cloud. * `AmazonWebServiceBilling` - An Amazon Web Service cloud billing account used to retrieve billing information stored in S3 bucket. Cisco Intersight Workload Optimizer features are supported on this cloud. * `GoogleCloudPlatform` - A Google Cloud Platform service account with access to one or more projects. Cisco Intersight Workload Optimizer features are supported on this cloud. * `GoogleCloudPlatformBilling` - A Google Cloud Platform service account used to retrieve billing information from BigQuery. Cisco Intersight Workload Optimizer features are supported on this cloud. * `MicrosoftAzureServicePrincipal` - A Microsoft Azure Service Principal account with access to Azure subscriptions. Cisco Intersight Workload Optimizer features are supported on this cloud. * `MicrosoftAzureEnterpriseAgreement` - A Microsoft Azure Enterprise Agreement enrolment used to retrieve pricing and billing information. Cisco Intersight Workload Optimizer features are supported on this cloud. * `MicrosoftAzureBilling` - A Microsoft Azure Service Principal account with access to billing information. Cisco Intersight Workload Optimizer features are supported on this cloud. * `DellCompellent` - A Dell EMC SC Series (Compellent) storage system that is managed using Cisco Intersight Assist. Cisco Intersight Workload Optimizer features are supported on this device. * `HPE3Par` - A HPE 3PAR StoreServ system that is managed using Cisco Intersight Assist. Cisco Intersight Workload Optimizer features are supported on this device. * `RedHatEnterpriseVirtualization` - A Red Hat Enterprise Virtualization Hypervisor system that manages Virtual Machines. * `NutanixAcropolis` - A Nutanix Acropolis cluster that is managed using Cisco Intersight Assist. Cisco Intersight Workload Optimizer features are supported on this cluster. * `NutanixPrismCentral` - A Nutanix Prism Central cluster. Prism central is a virtual appliance for managing Nutanix clusters and services. * `HPEOneView` - A HPE OneView system that is managed using Cisco Intersight Assist. Cisco Intersight Workload Optimizer features are supported on this system. * `ServiceEngine` - Cisco Application Services Engine. Cisco Application Services Engine is a platform to deploy and manage applications. * `HitachiVirtualStoragePlatform` - A Hitachi Virtual Storage Platform (Hitachi VSP) that is managed using Cisco Intersight Assist. * `GenericTarget` - A generic third-party target supported only in Partner Integration Appliance. This target type is used for development purposes and will not be supported in production environment. * `IMCBlade` - A Cisco UCS blade server managed by Cisco Intersight. * `TerraformCloud` - A Terraform Cloud Business Tier account. * `TerraformAgent` - A Terraform Cloud Agent that will be deployed on Cisco Intersight Assist. The agent can be used to plan and apply Terraform runs from a Terraform Cloud workspace. * `CustomTarget` - CustomTarget is deprecated. Use HTTPEndpoint type to claim HTTP endpoints. * `AnsibleEndpoint` - An external endpoint that is added as a target which can be accessed through Ansible in Intersight Cloud Orchestrator automation workflows. * `HTTPEndpoint` - An HTTP endpoint that can be accessed in Intersight Orchestrator workflows directly or using Cisco Intersight Assist. Authentication Schemes supported are Basic and Bearer Token. * `SSHEndpoint` - An SSH endpoint that can be accessed in Intersight Orchestrator workflows using Cisco Intersight Assist. * `CiscoCatalyst` - A Cisco Catalyst networking switch device. * `PowerShellEndpoint` - A Windows operating system server on which PowerShell scripts can be executed using Cisco Intersight Assist. * `CiscoDNAC` - A Cisco Digital Network Architecture (DNA) Center appliance. * `CiscoFMC` - A Cisco Secure Firewall Management Center. * `ViptelaCloud` - A Cisco Viptela SD-WAN Cloud. * `MerakiCloud` - A Cisco Meraki Organization. * `CiscoISE` - A Cisco Identity Services Engine (ISE) target.
	TargetType *string `json:"TargetType,omitempty"`
	// The vendor of the managed target.
	Vendor  *string                         `json:"Vendor,omitempty"`
	Account NullableIamAccountRelationship  `json:"Account,omitempty"`
	Assist  NullableAssetTargetRelationship `json:"Assist,omitempty"`
	// An array of relationships to moBaseMo resources.
	CustomPermissionResources []MoBaseMoRelationship                      `json:"CustomPermissionResources,omitempty"`
	RegisteredDevice          NullableAssetDeviceRegistrationRelationship `json:"RegisteredDevice,omitempty"`
	TrustPoint                NullableIamTrustPointRelationship           `json:"TrustPoint,omitempty"`
	WorkflowInfo              NullableWorkflowWorkflowInfoRelationship    `json:"WorkflowInfo,omitempty"`
	AdditionalProperties      map[string]interface{}
}

type _AssetTarget AssetTarget

// NewAssetTarget instantiates a new AssetTarget object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAssetTarget(classId string, objectType string) *AssetTarget {
	this := AssetTarget{}
	this.ClassId = classId
	this.ObjectType = objectType
	var managementLocation string = "Unknown"
	this.ManagementLocation = &managementLocation
	var targetType string = ""
	this.TargetType = &targetType
	return &this
}

// NewAssetTargetWithDefaults instantiates a new AssetTarget object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAssetTargetWithDefaults() *AssetTarget {
	this := AssetTarget{}
	var classId string = "asset.Target"
	this.ClassId = classId
	var objectType string = "asset.Target"
	this.ObjectType = objectType
	var managementLocation string = "Unknown"
	this.ManagementLocation = &managementLocation
	var targetType string = ""
	this.TargetType = &targetType
	return &this
}

// GetClassId returns the ClassId field value
func (o *AssetTarget) GetClassId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ClassId
}

// GetClassIdOk returns a tuple with the ClassId field value
// and a boolean to check if the value has been set.
func (o *AssetTarget) GetClassIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ClassId, true
}

// SetClassId sets field value
func (o *AssetTarget) SetClassId(v string) {
	o.ClassId = v
}

// GetDefaultClassId returns the default value "asset.Target" of the ClassId field.
func (o *AssetTarget) GetDefaultClassId() interface{} {
	return "asset.Target"
}

// GetObjectType returns the ObjectType field value
func (o *AssetTarget) GetObjectType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ObjectType
}

// GetObjectTypeOk returns a tuple with the ObjectType field value
// and a boolean to check if the value has been set.
func (o *AssetTarget) GetObjectTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ObjectType, true
}

// SetObjectType sets field value
func (o *AssetTarget) SetObjectType(v string) {
	o.ObjectType = v
}

// GetDefaultObjectType returns the default value "asset.Target" of the ObjectType field.
func (o *AssetTarget) GetDefaultObjectType() interface{} {
	return "asset.Target"
}

// GetAlarmSummary returns the AlarmSummary field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AssetTarget) GetAlarmSummary() AssetAlarmSummary {
	if o == nil || IsNil(o.AlarmSummary.Get()) {
		var ret AssetAlarmSummary
		return ret
	}
	return *o.AlarmSummary.Get()
}

// GetAlarmSummaryOk returns a tuple with the AlarmSummary field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AssetTarget) GetAlarmSummaryOk() (*AssetAlarmSummary, bool) {
	if o == nil {
		return nil, false
	}
	return o.AlarmSummary.Get(), o.AlarmSummary.IsSet()
}

// HasAlarmSummary returns a boolean if a field has been set.
func (o *AssetTarget) HasAlarmSummary() bool {
	if o != nil && o.AlarmSummary.IsSet() {
		return true
	}

	return false
}

// SetAlarmSummary gets a reference to the given NullableAssetAlarmSummary and assigns it to the AlarmSummary field.
func (o *AssetTarget) SetAlarmSummary(v AssetAlarmSummary) {
	o.AlarmSummary.Set(&v)
}

// SetAlarmSummaryNil sets the value for AlarmSummary to be an explicit nil
func (o *AssetTarget) SetAlarmSummaryNil() {
	o.AlarmSummary.Set(nil)
}

// UnsetAlarmSummary ensures that no value is present for AlarmSummary, not even an explicit nil
func (o *AssetTarget) UnsetAlarmSummary() {
	o.AlarmSummary.Unset()
}

// GetClaimedByUserName returns the ClaimedByUserName field value if set, zero value otherwise.
func (o *AssetTarget) GetClaimedByUserName() string {
	if o == nil || IsNil(o.ClaimedByUserName) {
		var ret string
		return ret
	}
	return *o.ClaimedByUserName
}

// GetClaimedByUserNameOk returns a tuple with the ClaimedByUserName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AssetTarget) GetClaimedByUserNameOk() (*string, bool) {
	if o == nil || IsNil(o.ClaimedByUserName) {
		return nil, false
	}
	return o.ClaimedByUserName, true
}

// HasClaimedByUserName returns a boolean if a field has been set.
func (o *AssetTarget) HasClaimedByUserName() bool {
	if o != nil && !IsNil(o.ClaimedByUserName) {
		return true
	}

	return false
}

// SetClaimedByUserName gets a reference to the given string and assigns it to the ClaimedByUserName field.
func (o *AssetTarget) SetClaimedByUserName(v string) {
	o.ClaimedByUserName = &v
}

// GetConnections returns the Connections field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AssetTarget) GetConnections() []AssetConnection {
	if o == nil {
		var ret []AssetConnection
		return ret
	}
	return o.Connections
}

// GetConnectionsOk returns a tuple with the Connections field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AssetTarget) GetConnectionsOk() ([]AssetConnection, bool) {
	if o == nil || IsNil(o.Connections) {
		return nil, false
	}
	return o.Connections, true
}

// HasConnections returns a boolean if a field has been set.
func (o *AssetTarget) HasConnections() bool {
	if o != nil && !IsNil(o.Connections) {
		return true
	}

	return false
}

// SetConnections gets a reference to the given []AssetConnection and assigns it to the Connections field.
func (o *AssetTarget) SetConnections(v []AssetConnection) {
	o.Connections = v
}

// GetConnectorVersion returns the ConnectorVersion field value if set, zero value otherwise.
func (o *AssetTarget) GetConnectorVersion() string {
	if o == nil || IsNil(o.ConnectorVersion) {
		var ret string
		return ret
	}
	return *o.ConnectorVersion
}

// GetConnectorVersionOk returns a tuple with the ConnectorVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AssetTarget) GetConnectorVersionOk() (*string, bool) {
	if o == nil || IsNil(o.ConnectorVersion) {
		return nil, false
	}
	return o.ConnectorVersion, true
}

// HasConnectorVersion returns a boolean if a field has been set.
func (o *AssetTarget) HasConnectorVersion() bool {
	if o != nil && !IsNil(o.ConnectorVersion) {
		return true
	}

	return false
}

// SetConnectorVersion gets a reference to the given string and assigns it to the ConnectorVersion field.
func (o *AssetTarget) SetConnectorVersion(v string) {
	o.ConnectorVersion = &v
}

// GetExternalIpAddress returns the ExternalIpAddress field value if set, zero value otherwise.
func (o *AssetTarget) GetExternalIpAddress() string {
	if o == nil || IsNil(o.ExternalIpAddress) {
		var ret string
		return ret
	}
	return *o.ExternalIpAddress
}

// GetExternalIpAddressOk returns a tuple with the ExternalIpAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AssetTarget) GetExternalIpAddressOk() (*string, bool) {
	if o == nil || IsNil(o.ExternalIpAddress) {
		return nil, false
	}
	return o.ExternalIpAddress, true
}

// HasExternalIpAddress returns a boolean if a field has been set.
func (o *AssetTarget) HasExternalIpAddress() bool {
	if o != nil && !IsNil(o.ExternalIpAddress) {
		return true
	}

	return false
}

// SetExternalIpAddress gets a reference to the given string and assigns it to the ExternalIpAddress field.
func (o *AssetTarget) SetExternalIpAddress(v string) {
	o.ExternalIpAddress = &v
}

// GetIpAddress returns the IpAddress field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AssetTarget) GetIpAddress() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.IpAddress
}

// GetIpAddressOk returns a tuple with the IpAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AssetTarget) GetIpAddressOk() ([]string, bool) {
	if o == nil || IsNil(o.IpAddress) {
		return nil, false
	}
	return o.IpAddress, true
}

// HasIpAddress returns a boolean if a field has been set.
func (o *AssetTarget) HasIpAddress() bool {
	if o != nil && !IsNil(o.IpAddress) {
		return true
	}

	return false
}

// SetIpAddress gets a reference to the given []string and assigns it to the IpAddress field.
func (o *AssetTarget) SetIpAddress(v []string) {
	o.IpAddress = v
}

// GetManagementLocation returns the ManagementLocation field value if set, zero value otherwise.
func (o *AssetTarget) GetManagementLocation() string {
	if o == nil || IsNil(o.ManagementLocation) {
		var ret string
		return ret
	}
	return *o.ManagementLocation
}

// GetManagementLocationOk returns a tuple with the ManagementLocation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AssetTarget) GetManagementLocationOk() (*string, bool) {
	if o == nil || IsNil(o.ManagementLocation) {
		return nil, false
	}
	return o.ManagementLocation, true
}

// HasManagementLocation returns a boolean if a field has been set.
func (o *AssetTarget) HasManagementLocation() bool {
	if o != nil && !IsNil(o.ManagementLocation) {
		return true
	}

	return false
}

// SetManagementLocation gets a reference to the given string and assigns it to the ManagementLocation field.
func (o *AssetTarget) SetManagementLocation(v string) {
	o.ManagementLocation = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *AssetTarget) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AssetTarget) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *AssetTarget) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *AssetTarget) SetName(v string) {
	o.Name = &v
}

// GetProductId returns the ProductId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AssetTarget) GetProductId() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.ProductId
}

// GetProductIdOk returns a tuple with the ProductId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AssetTarget) GetProductIdOk() ([]string, bool) {
	if o == nil || IsNil(o.ProductId) {
		return nil, false
	}
	return o.ProductId, true
}

// HasProductId returns a boolean if a field has been set.
func (o *AssetTarget) HasProductId() bool {
	if o != nil && !IsNil(o.ProductId) {
		return true
	}

	return false
}

// SetProductId gets a reference to the given []string and assigns it to the ProductId field.
func (o *AssetTarget) SetProductId(v []string) {
	o.ProductId = v
}

// GetReadOnly returns the ReadOnly field value if set, zero value otherwise.
func (o *AssetTarget) GetReadOnly() bool {
	if o == nil || IsNil(o.ReadOnly) {
		var ret bool
		return ret
	}
	return *o.ReadOnly
}

// GetReadOnlyOk returns a tuple with the ReadOnly field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AssetTarget) GetReadOnlyOk() (*bool, bool) {
	if o == nil || IsNil(o.ReadOnly) {
		return nil, false
	}
	return o.ReadOnly, true
}

// HasReadOnly returns a boolean if a field has been set.
func (o *AssetTarget) HasReadOnly() bool {
	if o != nil && !IsNil(o.ReadOnly) {
		return true
	}

	return false
}

// SetReadOnly gets a reference to the given bool and assigns it to the ReadOnly field.
func (o *AssetTarget) SetReadOnly(v bool) {
	o.ReadOnly = &v
}

// GetServices returns the Services field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AssetTarget) GetServices() []AssetService {
	if o == nil {
		var ret []AssetService
		return ret
	}
	return o.Services
}

// GetServicesOk returns a tuple with the Services field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AssetTarget) GetServicesOk() ([]AssetService, bool) {
	if o == nil || IsNil(o.Services) {
		return nil, false
	}
	return o.Services, true
}

// HasServices returns a boolean if a field has been set.
func (o *AssetTarget) HasServices() bool {
	if o != nil && !IsNil(o.Services) {
		return true
	}

	return false
}

// SetServices gets a reference to the given []AssetService and assigns it to the Services field.
func (o *AssetTarget) SetServices(v []AssetService) {
	o.Services = v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *AssetTarget) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AssetTarget) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *AssetTarget) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *AssetTarget) SetStatus(v string) {
	o.Status = &v
}

// GetStatusErrorReason returns the StatusErrorReason field value if set, zero value otherwise.
func (o *AssetTarget) GetStatusErrorReason() string {
	if o == nil || IsNil(o.StatusErrorReason) {
		var ret string
		return ret
	}
	return *o.StatusErrorReason
}

// GetStatusErrorReasonOk returns a tuple with the StatusErrorReason field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AssetTarget) GetStatusErrorReasonOk() (*string, bool) {
	if o == nil || IsNil(o.StatusErrorReason) {
		return nil, false
	}
	return o.StatusErrorReason, true
}

// HasStatusErrorReason returns a boolean if a field has been set.
func (o *AssetTarget) HasStatusErrorReason() bool {
	if o != nil && !IsNil(o.StatusErrorReason) {
		return true
	}

	return false
}

// SetStatusErrorReason gets a reference to the given string and assigns it to the StatusErrorReason field.
func (o *AssetTarget) SetStatusErrorReason(v string) {
	o.StatusErrorReason = &v
}

// GetTargetId returns the TargetId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AssetTarget) GetTargetId() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.TargetId
}

// GetTargetIdOk returns a tuple with the TargetId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AssetTarget) GetTargetIdOk() ([]string, bool) {
	if o == nil || IsNil(o.TargetId) {
		return nil, false
	}
	return o.TargetId, true
}

// HasTargetId returns a boolean if a field has been set.
func (o *AssetTarget) HasTargetId() bool {
	if o != nil && !IsNil(o.TargetId) {
		return true
	}

	return false
}

// SetTargetId gets a reference to the given []string and assigns it to the TargetId field.
func (o *AssetTarget) SetTargetId(v []string) {
	o.TargetId = v
}

// GetTargetType returns the TargetType field value if set, zero value otherwise.
func (o *AssetTarget) GetTargetType() string {
	if o == nil || IsNil(o.TargetType) {
		var ret string
		return ret
	}
	return *o.TargetType
}

// GetTargetTypeOk returns a tuple with the TargetType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AssetTarget) GetTargetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.TargetType) {
		return nil, false
	}
	return o.TargetType, true
}

// HasTargetType returns a boolean if a field has been set.
func (o *AssetTarget) HasTargetType() bool {
	if o != nil && !IsNil(o.TargetType) {
		return true
	}

	return false
}

// SetTargetType gets a reference to the given string and assigns it to the TargetType field.
func (o *AssetTarget) SetTargetType(v string) {
	o.TargetType = &v
}

// GetVendor returns the Vendor field value if set, zero value otherwise.
func (o *AssetTarget) GetVendor() string {
	if o == nil || IsNil(o.Vendor) {
		var ret string
		return ret
	}
	return *o.Vendor
}

// GetVendorOk returns a tuple with the Vendor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AssetTarget) GetVendorOk() (*string, bool) {
	if o == nil || IsNil(o.Vendor) {
		return nil, false
	}
	return o.Vendor, true
}

// HasVendor returns a boolean if a field has been set.
func (o *AssetTarget) HasVendor() bool {
	if o != nil && !IsNil(o.Vendor) {
		return true
	}

	return false
}

// SetVendor gets a reference to the given string and assigns it to the Vendor field.
func (o *AssetTarget) SetVendor(v string) {
	o.Vendor = &v
}

// GetAccount returns the Account field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AssetTarget) GetAccount() IamAccountRelationship {
	if o == nil || IsNil(o.Account.Get()) {
		var ret IamAccountRelationship
		return ret
	}
	return *o.Account.Get()
}

// GetAccountOk returns a tuple with the Account field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AssetTarget) GetAccountOk() (*IamAccountRelationship, bool) {
	if o == nil {
		return nil, false
	}
	return o.Account.Get(), o.Account.IsSet()
}

// HasAccount returns a boolean if a field has been set.
func (o *AssetTarget) HasAccount() bool {
	if o != nil && o.Account.IsSet() {
		return true
	}

	return false
}

// SetAccount gets a reference to the given NullableIamAccountRelationship and assigns it to the Account field.
func (o *AssetTarget) SetAccount(v IamAccountRelationship) {
	o.Account.Set(&v)
}

// SetAccountNil sets the value for Account to be an explicit nil
func (o *AssetTarget) SetAccountNil() {
	o.Account.Set(nil)
}

// UnsetAccount ensures that no value is present for Account, not even an explicit nil
func (o *AssetTarget) UnsetAccount() {
	o.Account.Unset()
}

// GetAssist returns the Assist field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AssetTarget) GetAssist() AssetTargetRelationship {
	if o == nil || IsNil(o.Assist.Get()) {
		var ret AssetTargetRelationship
		return ret
	}
	return *o.Assist.Get()
}

// GetAssistOk returns a tuple with the Assist field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AssetTarget) GetAssistOk() (*AssetTargetRelationship, bool) {
	if o == nil {
		return nil, false
	}
	return o.Assist.Get(), o.Assist.IsSet()
}

// HasAssist returns a boolean if a field has been set.
func (o *AssetTarget) HasAssist() bool {
	if o != nil && o.Assist.IsSet() {
		return true
	}

	return false
}

// SetAssist gets a reference to the given NullableAssetTargetRelationship and assigns it to the Assist field.
func (o *AssetTarget) SetAssist(v AssetTargetRelationship) {
	o.Assist.Set(&v)
}

// SetAssistNil sets the value for Assist to be an explicit nil
func (o *AssetTarget) SetAssistNil() {
	o.Assist.Set(nil)
}

// UnsetAssist ensures that no value is present for Assist, not even an explicit nil
func (o *AssetTarget) UnsetAssist() {
	o.Assist.Unset()
}

// GetCustomPermissionResources returns the CustomPermissionResources field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AssetTarget) GetCustomPermissionResources() []MoBaseMoRelationship {
	if o == nil {
		var ret []MoBaseMoRelationship
		return ret
	}
	return o.CustomPermissionResources
}

// GetCustomPermissionResourcesOk returns a tuple with the CustomPermissionResources field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AssetTarget) GetCustomPermissionResourcesOk() ([]MoBaseMoRelationship, bool) {
	if o == nil || IsNil(o.CustomPermissionResources) {
		return nil, false
	}
	return o.CustomPermissionResources, true
}

// HasCustomPermissionResources returns a boolean if a field has been set.
func (o *AssetTarget) HasCustomPermissionResources() bool {
	if o != nil && !IsNil(o.CustomPermissionResources) {
		return true
	}

	return false
}

// SetCustomPermissionResources gets a reference to the given []MoBaseMoRelationship and assigns it to the CustomPermissionResources field.
func (o *AssetTarget) SetCustomPermissionResources(v []MoBaseMoRelationship) {
	o.CustomPermissionResources = v
}

// GetRegisteredDevice returns the RegisteredDevice field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AssetTarget) GetRegisteredDevice() AssetDeviceRegistrationRelationship {
	if o == nil || IsNil(o.RegisteredDevice.Get()) {
		var ret AssetDeviceRegistrationRelationship
		return ret
	}
	return *o.RegisteredDevice.Get()
}

// GetRegisteredDeviceOk returns a tuple with the RegisteredDevice field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AssetTarget) GetRegisteredDeviceOk() (*AssetDeviceRegistrationRelationship, bool) {
	if o == nil {
		return nil, false
	}
	return o.RegisteredDevice.Get(), o.RegisteredDevice.IsSet()
}

// HasRegisteredDevice returns a boolean if a field has been set.
func (o *AssetTarget) HasRegisteredDevice() bool {
	if o != nil && o.RegisteredDevice.IsSet() {
		return true
	}

	return false
}

// SetRegisteredDevice gets a reference to the given NullableAssetDeviceRegistrationRelationship and assigns it to the RegisteredDevice field.
func (o *AssetTarget) SetRegisteredDevice(v AssetDeviceRegistrationRelationship) {
	o.RegisteredDevice.Set(&v)
}

// SetRegisteredDeviceNil sets the value for RegisteredDevice to be an explicit nil
func (o *AssetTarget) SetRegisteredDeviceNil() {
	o.RegisteredDevice.Set(nil)
}

// UnsetRegisteredDevice ensures that no value is present for RegisteredDevice, not even an explicit nil
func (o *AssetTarget) UnsetRegisteredDevice() {
	o.RegisteredDevice.Unset()
}

// GetTrustPoint returns the TrustPoint field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AssetTarget) GetTrustPoint() IamTrustPointRelationship {
	if o == nil || IsNil(o.TrustPoint.Get()) {
		var ret IamTrustPointRelationship
		return ret
	}
	return *o.TrustPoint.Get()
}

// GetTrustPointOk returns a tuple with the TrustPoint field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AssetTarget) GetTrustPointOk() (*IamTrustPointRelationship, bool) {
	if o == nil {
		return nil, false
	}
	return o.TrustPoint.Get(), o.TrustPoint.IsSet()
}

// HasTrustPoint returns a boolean if a field has been set.
func (o *AssetTarget) HasTrustPoint() bool {
	if o != nil && o.TrustPoint.IsSet() {
		return true
	}

	return false
}

// SetTrustPoint gets a reference to the given NullableIamTrustPointRelationship and assigns it to the TrustPoint field.
func (o *AssetTarget) SetTrustPoint(v IamTrustPointRelationship) {
	o.TrustPoint.Set(&v)
}

// SetTrustPointNil sets the value for TrustPoint to be an explicit nil
func (o *AssetTarget) SetTrustPointNil() {
	o.TrustPoint.Set(nil)
}

// UnsetTrustPoint ensures that no value is present for TrustPoint, not even an explicit nil
func (o *AssetTarget) UnsetTrustPoint() {
	o.TrustPoint.Unset()
}

// GetWorkflowInfo returns the WorkflowInfo field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AssetTarget) GetWorkflowInfo() WorkflowWorkflowInfoRelationship {
	if o == nil || IsNil(o.WorkflowInfo.Get()) {
		var ret WorkflowWorkflowInfoRelationship
		return ret
	}
	return *o.WorkflowInfo.Get()
}

// GetWorkflowInfoOk returns a tuple with the WorkflowInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AssetTarget) GetWorkflowInfoOk() (*WorkflowWorkflowInfoRelationship, bool) {
	if o == nil {
		return nil, false
	}
	return o.WorkflowInfo.Get(), o.WorkflowInfo.IsSet()
}

// HasWorkflowInfo returns a boolean if a field has been set.
func (o *AssetTarget) HasWorkflowInfo() bool {
	if o != nil && o.WorkflowInfo.IsSet() {
		return true
	}

	return false
}

// SetWorkflowInfo gets a reference to the given NullableWorkflowWorkflowInfoRelationship and assigns it to the WorkflowInfo field.
func (o *AssetTarget) SetWorkflowInfo(v WorkflowWorkflowInfoRelationship) {
	o.WorkflowInfo.Set(&v)
}

// SetWorkflowInfoNil sets the value for WorkflowInfo to be an explicit nil
func (o *AssetTarget) SetWorkflowInfoNil() {
	o.WorkflowInfo.Set(nil)
}

// UnsetWorkflowInfo ensures that no value is present for WorkflowInfo, not even an explicit nil
func (o *AssetTarget) UnsetWorkflowInfo() {
	o.WorkflowInfo.Unset()
}

func (o AssetTarget) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AssetTarget) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	serializedMoBaseMo, errMoBaseMo := json.Marshal(o.MoBaseMo)
	if errMoBaseMo != nil {
		return map[string]interface{}{}, errMoBaseMo
	}
	errMoBaseMo = json.Unmarshal([]byte(serializedMoBaseMo), &toSerialize)
	if errMoBaseMo != nil {
		return map[string]interface{}{}, errMoBaseMo
	}
	if _, exists := toSerialize["ClassId"]; !exists {
		toSerialize["ClassId"] = o.GetDefaultClassId()
	}
	toSerialize["ClassId"] = o.ClassId
	if _, exists := toSerialize["ObjectType"]; !exists {
		toSerialize["ObjectType"] = o.GetDefaultObjectType()
	}
	toSerialize["ObjectType"] = o.ObjectType
	if o.AlarmSummary.IsSet() {
		toSerialize["AlarmSummary"] = o.AlarmSummary.Get()
	}
	if !IsNil(o.ClaimedByUserName) {
		toSerialize["ClaimedByUserName"] = o.ClaimedByUserName
	}
	if o.Connections != nil {
		toSerialize["Connections"] = o.Connections
	}
	if !IsNil(o.ConnectorVersion) {
		toSerialize["ConnectorVersion"] = o.ConnectorVersion
	}
	if !IsNil(o.ExternalIpAddress) {
		toSerialize["ExternalIpAddress"] = o.ExternalIpAddress
	}
	if o.IpAddress != nil {
		toSerialize["IpAddress"] = o.IpAddress
	}
	if !IsNil(o.ManagementLocation) {
		toSerialize["ManagementLocation"] = o.ManagementLocation
	}
	if !IsNil(o.Name) {
		toSerialize["Name"] = o.Name
	}
	if o.ProductId != nil {
		toSerialize["ProductId"] = o.ProductId
	}
	if !IsNil(o.ReadOnly) {
		toSerialize["ReadOnly"] = o.ReadOnly
	}
	if o.Services != nil {
		toSerialize["Services"] = o.Services
	}
	if !IsNil(o.Status) {
		toSerialize["Status"] = o.Status
	}
	if !IsNil(o.StatusErrorReason) {
		toSerialize["StatusErrorReason"] = o.StatusErrorReason
	}
	if o.TargetId != nil {
		toSerialize["TargetId"] = o.TargetId
	}
	if !IsNil(o.TargetType) {
		toSerialize["TargetType"] = o.TargetType
	}
	if !IsNil(o.Vendor) {
		toSerialize["Vendor"] = o.Vendor
	}
	if o.Account.IsSet() {
		toSerialize["Account"] = o.Account.Get()
	}
	if o.Assist.IsSet() {
		toSerialize["Assist"] = o.Assist.Get()
	}
	if o.CustomPermissionResources != nil {
		toSerialize["CustomPermissionResources"] = o.CustomPermissionResources
	}
	if o.RegisteredDevice.IsSet() {
		toSerialize["RegisteredDevice"] = o.RegisteredDevice.Get()
	}
	if o.TrustPoint.IsSet() {
		toSerialize["TrustPoint"] = o.TrustPoint.Get()
	}
	if o.WorkflowInfo.IsSet() {
		toSerialize["WorkflowInfo"] = o.WorkflowInfo.Get()
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *AssetTarget) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"ClassId",
		"ObjectType",
	}

	// defaultValueFuncMap captures the default values for required properties.
	// These values are used when required properties are missing from the payload.
	defaultValueFuncMap := map[string]func() interface{}{
		"ClassId":    o.GetDefaultClassId,
		"ObjectType": o.GetDefaultObjectType,
	}
	var defaultValueApplied bool
	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			if _, ok := defaultValueFuncMap[requiredProperty]; ok {
				allProperties[requiredProperty] = defaultValueFuncMap[requiredProperty]()
				defaultValueApplied = true
			}
		}
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	if defaultValueApplied {
		data, err = json.Marshal(allProperties)
		if err != nil {
			return err
		}
	}
	type AssetTargetWithoutEmbeddedStruct struct {
		// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.
		ClassId string `json:"ClassId"`
		// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
		ObjectType   string                    `json:"ObjectType"`
		AlarmSummary NullableAssetAlarmSummary `json:"AlarmSummary,omitempty"`
		// The name or email id of the user who claimed the target.
		ClaimedByUserName *string           `json:"ClaimedByUserName,omitempty"`
		Connections       []AssetConnection `json:"Connections,omitempty"`
		// The Device Connector version for target types which are managed by via embedded Device Connector.
		ConnectorVersion *string `json:"ConnectorVersion,omitempty"`
		// ExternalIpAddress is applicable for targets which are managed via an Intersight Device Connector. The value is the IP Address of the target as seen from Intersight. It is either the IP Address of the managed target's interface which has a route to the internet or a NAT IP Address when the target is deployed in a private network.
		ExternalIpAddress *string  `json:"ExternalIpAddress,omitempty"`
		IpAddress         []string `json:"IpAddress,omitempty"`
		// The location from which Intersight manages the target. * `Unknown` - The management mechanism is not detected. Unknown is used as a default by the implementation and is not an allowed user input. * `Intersight` - Management of a target is performed directly from Intersight. Network connections are established from Intersight to a management interface of the Target and authenticated using user provided credentials. * `IntersightAssist` - Management of a target is performed via a selected Intersight Assist. Network connections are established from the Intersight Assist to a management interface of the Target. * `DeviceConnector` - An Intersight Device Connector running within the Target establishes a connection to Intersight and management of the target is performed via this connection.
		ManagementLocation *string `json:"ManagementLocation,omitempty"`
		// A user provided name for the managed target.
		Name      *string  `json:"Name,omitempty"`
		ProductId []string `json:"ProductId,omitempty"`
		// For targets which are managed by an embedded Intersight Device Connector, this field indicates that an administrator of the target has disabled management operations of the Device Connector and only monitoring is permitted.
		ReadOnly *bool          `json:"ReadOnly,omitempty"`
		Services []AssetService `json:"Services,omitempty"`
		// Status indicates if Intersight can establish a connection and authenticate with the managed target. Status does not include information about the functional health of the target. * `` - The target details have been persisted but Intersight has not yet attempted to connect to the target. * `Connected` - Intersight is able to establish a connection to the target and initiate management activities. * `NotConnected` - Intersight is unable to establish a connection to the target. * `ClaimInProgress` - Claim of the target is in progress. A connection to the target has not been fully established. * `UnclaimInProgress` - Unclaim of the target is in progress. Intersight is able to connect to the target and all management operations are supported. * `Unclaimed` - The device was un-claimed from the users account by an Administrator of the device. Also indicates the failure to claim Targets of type HTTP Endpoint in Intersight. * `Claimed` - Target of type HTTP Endpoint is successfully claimed in Intersight. Currently no validation is performed to verify the Target connectivity from Intersight at the time of creation. However invoking API from Intersight Orchestrator fails if this Target is not reachable from Intersight or if Target API credentials are incorrect.
		Status *string `json:"Status,omitempty"`
		// StatusErrorReason provides additional context for the Status.
		StatusErrorReason *string  `json:"StatusErrorReason,omitempty"`
		TargetId          []string `json:"TargetId,omitempty"`
		// The type of the managed target. For example a UCS Server or VMware Vcenter target. * `` - An unrecognized platform type. * `APIC` - A Cisco Application Policy Infrastructure Controller (APIC) cluster. * `CAPIC` - A Cisco Cloud Application Policy Infrastructure Controller (Cloud APIC) instance. * `DCNM` - A Cisco Data Center Network Manager (DCNM) instance. * `UCSFI` - A Cisco UCS Fabric Interconnect that is managed by Cisco UCS Manager (UCSM). * `UCSFIISM` - A Cisco UCS Fabric Interconnect that is managed by Cisco Intersight. * `IMC` - A standalone Cisco UCS rack server (Deprecated). * `IMCM4` - A standalone Cisco UCS C-Series or S-Series M4 server. * `IMCM5` - A standalone Cisco UCS C-Series or S-Series M5 server. * `IMCRack` - A standalone Cisco UCS C-Series or S-Series M6 or newer server. * `UCSIOM` - A Cisco UCS Blade Chassis I/O Module (IOM). * `HX` - A Cisco HyperFlex (HX) cluster. * `UCSD` - A Cisco UCS Director (UCSD) instance. * `IntersightAppliance` - A Cisco Intersight Connected Virtual Appliance instance. * `IntersightAssist` - A Cisco Intersight Assist instance. * `PureStorageFlashArray` - A Pure Storage FlashArray that is managed using Cisco Intersight Assist. Cisco Intersight Workload Optimizer and storage management features are supported on this device. * `NexusDevice` - A Cisco Nexus Network Switch that is managed using Cisco Intersight Assist. * `ACISwitch` - A Cisco Nexus Network Switch with the embedded Device Connector and is a part of the Cisco ACI fabric. * `NexusSwitch` - A standalone Cisco Nexus Network Switch with the embedded Device Connector. * `MDSSwitch` - A Cisco MDS Switch that is managed using the embedded Device Connector. * `MDSDevice` - A Cisco MDS Switch that is managed using Cisco Intersight Assist. * `UCSC890` - A standalone Cisco UCS C890 server managed using Cisco Intersight Assist. * `RedfishServer` - A generic target type for servers that support Redfish APIs and is managed using Cisco Intersight Assist. Support is limited to HPE and Dell Servers. * `NetAppOntap` - A Netapp ONTAP Storage system that is managed using Cisco Intersight Assist. Cisco Intersight Workload Optimizer features are supported on this device. * `NetAppActiveIqUnifiedManager` - A NetApp Active IQ Unified Manager (AIQUM) that is managed using Cisco Intersight Assist. * `EmcScaleIo` - An EMC ScaleIO Software Defined Storage system that is managed using Cisco Intersight Assist. Cisco Intersight Workload Optimizer features are supported on this device. * `EmcVmax` - An EMC VMAX 2 or 3 series enterprise storage array that is managed using Cisco Intersight Assist. Cisco Intersight Workload Optimizer features are supported on this device. * `EmcVplex` - An EMC VPLEX virtual storage system that is managed using Cisco Intersight Assist. Cisco Intersight Workload Optimizer features are supported on this device. * `EmcXtremIo` - An EMC XtremIO SSD storage system that is managed using Cisco Intersight Assist. Cisco Intersight Workload Optimizer features are supported on this device. * `VmwareVcenter` - A VMware vCenter instance that is managed using Cisco Intersight Assist. Cisco Intersight Workload Optimizer and Virtualization features are supported on this hypervisor. * `MicrosoftHyperV` - A Microsoft Hyper-V host that is managed using Cisco Intersight Assist. Optionally, other hosts in the cluster can be discovered through this host. Cisco Intersight Workload Optimizer features are supported on this hypervisor. * `AppDynamics` - An AppDynamics controller running in a SaaS or on-prem datacenter. On-prem AppDynamics instance is managed using Cisco Intersight Assist. Cisco Intersight Workload Optimizer features are supported on this controller. * `Dynatrace` - A Dynatrace Server instance running in a SaaS or on-prem datacenter. On-prem Dynatrace instance is managed using Cisco Intersight Assist. Cisco Intersight Workload Optimizer features are supported on this server. * `NewRelic` - A NewRelic user account. The NewRelic instance monitors the application infrastructure. Cisco Intersight Workload Optimizer features are supported on this server. * `ServiceNow` - A cloud-based workflow automation platform that enables enterprise organizations to improve operational efficiencies by streamlining and automating routine work tasks. * `Umbrella` - Umbrella cloud target that discovers and monitors an organization. It discovers entities like Datacenters, Devices, Tunnels, Networks, etc. * `CloudFoundry` - An open source cloud platform on which developers can build, deploy, run and scale applications. * `MicrosoftAzureApplicationInsights` - A feature of Azure Monitor, is an extensible Application Performance Management service for developers and DevOps professionals to monitor their live applications. * `OpenStack` - An OpenStack target manages Virtual Machines, Physical Machines, Datacenters and Virtual Datacenters using different OpenStack services as administrative endpoints. * `MicrosoftSqlServer` - A Microsoft SQL database server that is managed using Cisco Intersight Assist. Cisco Intersight Workload Optimizer features are supported on this database. * `MySqlServer` - A MySQL database server that is managed using Cisco Intersight Assist. Cisco Intersight Workload Optimizer features are supported on this database. * `OracleDatabaseServer` - An Oracle database server that is managed using Cisco Intersight Assist. Cisco Intersight Workload Optimizer features are supported on this database. * `IBMWebSphereApplicationServer` - An IBM WebSphere Application server that is managed using Cisco Intersight Assist. Cisco Intersight Workload Optimizer features are supported on this application server. * `OracleWebLogicServer` - Oracle WebLogic Server is a unified and extensible platform for developing, deploying and running enterprise applications, such as Java, for on-premises and in the cloud. WebLogic Server offers a robust, mature, and scalable implementation of Java Enterprise Edition (EE) and Jakarta EE. * `ApacheTomcatServer` - An Apache Tomcat server that is managed using Cisco Intersight Assist. Cisco Intersight Workload Optimizer features are supported on this server. * `JavaVirtualMachine` - A JVM Application with JMX configured that is managed using Cisco Intersight Assist. Cisco Intersight Workload Optimizer features are supported on this application. * `RedHatJBossApplicationServer` - JBoss Application Server is an open-source, cross-platform Java application server developed by JBoss, a division of Red Hat Inc. It is an open-source implementation of Java 2 Enterprise Edition (J2EE) that is used for implementing Java applications and other Web-based applications and software. * `Kubernetes` - A Kubernetes cluster that runs containerized applications, with Kubernetes Collector installed. Cisco Intersight Workload Optimizer features are supported on Kubernetes cluster. * `AmazonWebService` - An Amazon Web Service cloud account. Cisco Intersight Workload Optimizer and Virtualization features are supported on this cloud. * `AmazonWebServiceBilling` - An Amazon Web Service cloud billing account used to retrieve billing information stored in S3 bucket. Cisco Intersight Workload Optimizer features are supported on this cloud. * `GoogleCloudPlatform` - A Google Cloud Platform service account with access to one or more projects. Cisco Intersight Workload Optimizer features are supported on this cloud. * `GoogleCloudPlatformBilling` - A Google Cloud Platform service account used to retrieve billing information from BigQuery. Cisco Intersight Workload Optimizer features are supported on this cloud. * `MicrosoftAzureServicePrincipal` - A Microsoft Azure Service Principal account with access to Azure subscriptions. Cisco Intersight Workload Optimizer features are supported on this cloud. * `MicrosoftAzureEnterpriseAgreement` - A Microsoft Azure Enterprise Agreement enrolment used to retrieve pricing and billing information. Cisco Intersight Workload Optimizer features are supported on this cloud. * `MicrosoftAzureBilling` - A Microsoft Azure Service Principal account with access to billing information. Cisco Intersight Workload Optimizer features are supported on this cloud. * `DellCompellent` - A Dell EMC SC Series (Compellent) storage system that is managed using Cisco Intersight Assist. Cisco Intersight Workload Optimizer features are supported on this device. * `HPE3Par` - A HPE 3PAR StoreServ system that is managed using Cisco Intersight Assist. Cisco Intersight Workload Optimizer features are supported on this device. * `RedHatEnterpriseVirtualization` - A Red Hat Enterprise Virtualization Hypervisor system that manages Virtual Machines. * `NutanixAcropolis` - A Nutanix Acropolis cluster that is managed using Cisco Intersight Assist. Cisco Intersight Workload Optimizer features are supported on this cluster. * `NutanixPrismCentral` - A Nutanix Prism Central cluster. Prism central is a virtual appliance for managing Nutanix clusters and services. * `HPEOneView` - A HPE OneView system that is managed using Cisco Intersight Assist. Cisco Intersight Workload Optimizer features are supported on this system. * `ServiceEngine` - Cisco Application Services Engine. Cisco Application Services Engine is a platform to deploy and manage applications. * `HitachiVirtualStoragePlatform` - A Hitachi Virtual Storage Platform (Hitachi VSP) that is managed using Cisco Intersight Assist. * `GenericTarget` - A generic third-party target supported only in Partner Integration Appliance. This target type is used for development purposes and will not be supported in production environment. * `IMCBlade` - A Cisco UCS blade server managed by Cisco Intersight. * `TerraformCloud` - A Terraform Cloud Business Tier account. * `TerraformAgent` - A Terraform Cloud Agent that will be deployed on Cisco Intersight Assist. The agent can be used to plan and apply Terraform runs from a Terraform Cloud workspace. * `CustomTarget` - CustomTarget is deprecated. Use HTTPEndpoint type to claim HTTP endpoints. * `AnsibleEndpoint` - An external endpoint that is added as a target which can be accessed through Ansible in Intersight Cloud Orchestrator automation workflows. * `HTTPEndpoint` - An HTTP endpoint that can be accessed in Intersight Orchestrator workflows directly or using Cisco Intersight Assist. Authentication Schemes supported are Basic and Bearer Token. * `SSHEndpoint` - An SSH endpoint that can be accessed in Intersight Orchestrator workflows using Cisco Intersight Assist. * `CiscoCatalyst` - A Cisco Catalyst networking switch device. * `PowerShellEndpoint` - A Windows operating system server on which PowerShell scripts can be executed using Cisco Intersight Assist. * `CiscoDNAC` - A Cisco Digital Network Architecture (DNA) Center appliance. * `CiscoFMC` - A Cisco Secure Firewall Management Center. * `ViptelaCloud` - A Cisco Viptela SD-WAN Cloud. * `MerakiCloud` - A Cisco Meraki Organization. * `CiscoISE` - A Cisco Identity Services Engine (ISE) target.
		TargetType *string `json:"TargetType,omitempty"`
		// The vendor of the managed target.
		Vendor  *string                         `json:"Vendor,omitempty"`
		Account NullableIamAccountRelationship  `json:"Account,omitempty"`
		Assist  NullableAssetTargetRelationship `json:"Assist,omitempty"`
		// An array of relationships to moBaseMo resources.
		CustomPermissionResources []MoBaseMoRelationship                      `json:"CustomPermissionResources,omitempty"`
		RegisteredDevice          NullableAssetDeviceRegistrationRelationship `json:"RegisteredDevice,omitempty"`
		TrustPoint                NullableIamTrustPointRelationship           `json:"TrustPoint,omitempty"`
		WorkflowInfo              NullableWorkflowWorkflowInfoRelationship    `json:"WorkflowInfo,omitempty"`
	}

	varAssetTargetWithoutEmbeddedStruct := AssetTargetWithoutEmbeddedStruct{}

	err = json.Unmarshal(data, &varAssetTargetWithoutEmbeddedStruct)
	if err == nil {
		varAssetTarget := _AssetTarget{}
		varAssetTarget.ClassId = varAssetTargetWithoutEmbeddedStruct.ClassId
		varAssetTarget.ObjectType = varAssetTargetWithoutEmbeddedStruct.ObjectType
		varAssetTarget.AlarmSummary = varAssetTargetWithoutEmbeddedStruct.AlarmSummary
		varAssetTarget.ClaimedByUserName = varAssetTargetWithoutEmbeddedStruct.ClaimedByUserName
		varAssetTarget.Connections = varAssetTargetWithoutEmbeddedStruct.Connections
		varAssetTarget.ConnectorVersion = varAssetTargetWithoutEmbeddedStruct.ConnectorVersion
		varAssetTarget.ExternalIpAddress = varAssetTargetWithoutEmbeddedStruct.ExternalIpAddress
		varAssetTarget.IpAddress = varAssetTargetWithoutEmbeddedStruct.IpAddress
		varAssetTarget.ManagementLocation = varAssetTargetWithoutEmbeddedStruct.ManagementLocation
		varAssetTarget.Name = varAssetTargetWithoutEmbeddedStruct.Name
		varAssetTarget.ProductId = varAssetTargetWithoutEmbeddedStruct.ProductId
		varAssetTarget.ReadOnly = varAssetTargetWithoutEmbeddedStruct.ReadOnly
		varAssetTarget.Services = varAssetTargetWithoutEmbeddedStruct.Services
		varAssetTarget.Status = varAssetTargetWithoutEmbeddedStruct.Status
		varAssetTarget.StatusErrorReason = varAssetTargetWithoutEmbeddedStruct.StatusErrorReason
		varAssetTarget.TargetId = varAssetTargetWithoutEmbeddedStruct.TargetId
		varAssetTarget.TargetType = varAssetTargetWithoutEmbeddedStruct.TargetType
		varAssetTarget.Vendor = varAssetTargetWithoutEmbeddedStruct.Vendor
		varAssetTarget.Account = varAssetTargetWithoutEmbeddedStruct.Account
		varAssetTarget.Assist = varAssetTargetWithoutEmbeddedStruct.Assist
		varAssetTarget.CustomPermissionResources = varAssetTargetWithoutEmbeddedStruct.CustomPermissionResources
		varAssetTarget.RegisteredDevice = varAssetTargetWithoutEmbeddedStruct.RegisteredDevice
		varAssetTarget.TrustPoint = varAssetTargetWithoutEmbeddedStruct.TrustPoint
		varAssetTarget.WorkflowInfo = varAssetTargetWithoutEmbeddedStruct.WorkflowInfo
		*o = AssetTarget(varAssetTarget)
	} else {
		return err
	}

	varAssetTarget := _AssetTarget{}

	err = json.Unmarshal(data, &varAssetTarget)
	if err == nil {
		o.MoBaseMo = varAssetTarget.MoBaseMo
	} else {
		return err
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "ClassId")
		delete(additionalProperties, "ObjectType")
		delete(additionalProperties, "AlarmSummary")
		delete(additionalProperties, "ClaimedByUserName")
		delete(additionalProperties, "Connections")
		delete(additionalProperties, "ConnectorVersion")
		delete(additionalProperties, "ExternalIpAddress")
		delete(additionalProperties, "IpAddress")
		delete(additionalProperties, "ManagementLocation")
		delete(additionalProperties, "Name")
		delete(additionalProperties, "ProductId")
		delete(additionalProperties, "ReadOnly")
		delete(additionalProperties, "Services")
		delete(additionalProperties, "Status")
		delete(additionalProperties, "StatusErrorReason")
		delete(additionalProperties, "TargetId")
		delete(additionalProperties, "TargetType")
		delete(additionalProperties, "Vendor")
		delete(additionalProperties, "Account")
		delete(additionalProperties, "Assist")
		delete(additionalProperties, "CustomPermissionResources")
		delete(additionalProperties, "RegisteredDevice")
		delete(additionalProperties, "TrustPoint")
		delete(additionalProperties, "WorkflowInfo")

		// remove fields from embedded structs
		reflectMoBaseMo := reflect.ValueOf(o.MoBaseMo)
		for i := 0; i < reflectMoBaseMo.Type().NumField(); i++ {
			t := reflectMoBaseMo.Type().Field(i)

			if jsonTag := t.Tag.Get("json"); jsonTag != "" {
				fieldName := ""
				if commaIdx := strings.Index(jsonTag, ","); commaIdx > 0 {
					fieldName = jsonTag[:commaIdx]
				} else {
					fieldName = jsonTag
				}
				if fieldName != "AdditionalProperties" {
					delete(additionalProperties, fieldName)
				}
			}
		}

		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableAssetTarget struct {
	value *AssetTarget
	isSet bool
}

func (v NullableAssetTarget) Get() *AssetTarget {
	return v.value
}

func (v *NullableAssetTarget) Set(val *AssetTarget) {
	v.value = val
	v.isSet = true
}

func (v NullableAssetTarget) IsSet() bool {
	return v.isSet
}

func (v *NullableAssetTarget) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAssetTarget(val *AssetTarget) *NullableAssetTarget {
	return &NullableAssetTarget{value: val, isSet: true}
}

func (v NullableAssetTarget) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAssetTarget) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
