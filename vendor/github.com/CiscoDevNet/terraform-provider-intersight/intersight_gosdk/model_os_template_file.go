/*
 * Cisco Intersight
 *
 * Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations. The Intersight OpenAPI document defines the complete set of properties that are returned in the HTTP response. From that perspective, a client can expect that no additional properties are returned, unless these properties are explicitly defined in the OpenAPI document. However, when a client uses an older version of the Intersight OpenAPI document, the server may send additional properties because the software is more recent than the client. In that case, the client may receive properties that it does not know about. Some generated SDKs perform a strict validation of the HTTP response body against the OpenAPI document. This document was created on 2021-07-21T16:37:30Z.
 *
 * API version: 1.0.9-4403
 * Contact: intersight@cisco.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package intersight

import (
	"encoding/json"
	"reflect"
	"strings"
)

// OsTemplateFile A TemplateFile is an OS specific answer file that helps with the unattended installation. The file can also be a template file with placeholders instead of actual answers. Intersight supports the golang template syntax specified in https://golang.org/pkg/text/template/. The values for these placeholders shall be given during OS installation in the form of 'additionalProperties' in os.OsInstall object.
type OsTemplateFile struct {
	MoBaseMo
	// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.
	ClassId string `json:"ClassId"`
	// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
	ObjectType string `json:"ObjectType"`
	// The name of the OS Template File that user uploads for unattended installation.
	Name         *string  `json:"Name,omitempty"`
	Placeholders []string `json:"Placeholders,omitempty"`
	// The content of the entire template file is stored as value. The content can either be a static file content or a template content. The template is expected to conform to the golang template syntax.  The placeholders, if any, would be populated and the values provided would be  used to populate this template.
	TemplateContent      *string `json:"TemplateContent,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _OsTemplateFile OsTemplateFile

// NewOsTemplateFile instantiates a new OsTemplateFile object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOsTemplateFile(classId string, objectType string) *OsTemplateFile {
	this := OsTemplateFile{}
	this.ClassId = classId
	this.ObjectType = objectType
	return &this
}

// NewOsTemplateFileWithDefaults instantiates a new OsTemplateFile object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOsTemplateFileWithDefaults() *OsTemplateFile {
	this := OsTemplateFile{}
	var classId string = "os.TemplateFile"
	this.ClassId = classId
	var objectType string = "os.TemplateFile"
	this.ObjectType = objectType
	return &this
}

// GetClassId returns the ClassId field value
func (o *OsTemplateFile) GetClassId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ClassId
}

// GetClassIdOk returns a tuple with the ClassId field value
// and a boolean to check if the value has been set.
func (o *OsTemplateFile) GetClassIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ClassId, true
}

// SetClassId sets field value
func (o *OsTemplateFile) SetClassId(v string) {
	o.ClassId = v
}

// GetObjectType returns the ObjectType field value
func (o *OsTemplateFile) GetObjectType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ObjectType
}

// GetObjectTypeOk returns a tuple with the ObjectType field value
// and a boolean to check if the value has been set.
func (o *OsTemplateFile) GetObjectTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ObjectType, true
}

// SetObjectType sets field value
func (o *OsTemplateFile) SetObjectType(v string) {
	o.ObjectType = v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *OsTemplateFile) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OsTemplateFile) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *OsTemplateFile) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *OsTemplateFile) SetName(v string) {
	o.Name = &v
}

// GetPlaceholders returns the Placeholders field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OsTemplateFile) GetPlaceholders() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.Placeholders
}

// GetPlaceholdersOk returns a tuple with the Placeholders field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OsTemplateFile) GetPlaceholdersOk() (*[]string, bool) {
	if o == nil || o.Placeholders == nil {
		return nil, false
	}
	return &o.Placeholders, true
}

// HasPlaceholders returns a boolean if a field has been set.
func (o *OsTemplateFile) HasPlaceholders() bool {
	if o != nil && o.Placeholders != nil {
		return true
	}

	return false
}

// SetPlaceholders gets a reference to the given []string and assigns it to the Placeholders field.
func (o *OsTemplateFile) SetPlaceholders(v []string) {
	o.Placeholders = v
}

// GetTemplateContent returns the TemplateContent field value if set, zero value otherwise.
func (o *OsTemplateFile) GetTemplateContent() string {
	if o == nil || o.TemplateContent == nil {
		var ret string
		return ret
	}
	return *o.TemplateContent
}

// GetTemplateContentOk returns a tuple with the TemplateContent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OsTemplateFile) GetTemplateContentOk() (*string, bool) {
	if o == nil || o.TemplateContent == nil {
		return nil, false
	}
	return o.TemplateContent, true
}

// HasTemplateContent returns a boolean if a field has been set.
func (o *OsTemplateFile) HasTemplateContent() bool {
	if o != nil && o.TemplateContent != nil {
		return true
	}

	return false
}

// SetTemplateContent gets a reference to the given string and assigns it to the TemplateContent field.
func (o *OsTemplateFile) SetTemplateContent(v string) {
	o.TemplateContent = &v
}

func (o OsTemplateFile) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	serializedMoBaseMo, errMoBaseMo := json.Marshal(o.MoBaseMo)
	if errMoBaseMo != nil {
		return []byte{}, errMoBaseMo
	}
	errMoBaseMo = json.Unmarshal([]byte(serializedMoBaseMo), &toSerialize)
	if errMoBaseMo != nil {
		return []byte{}, errMoBaseMo
	}
	if true {
		toSerialize["ClassId"] = o.ClassId
	}
	if true {
		toSerialize["ObjectType"] = o.ObjectType
	}
	if o.Name != nil {
		toSerialize["Name"] = o.Name
	}
	if o.Placeholders != nil {
		toSerialize["Placeholders"] = o.Placeholders
	}
	if o.TemplateContent != nil {
		toSerialize["TemplateContent"] = o.TemplateContent
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *OsTemplateFile) UnmarshalJSON(bytes []byte) (err error) {
	type OsTemplateFileWithoutEmbeddedStruct struct {
		// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.
		ClassId string `json:"ClassId"`
		// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
		ObjectType string `json:"ObjectType"`
		// The name of the OS Template File that user uploads for unattended installation.
		Name         *string  `json:"Name,omitempty"`
		Placeholders []string `json:"Placeholders,omitempty"`
		// The content of the entire template file is stored as value. The content can either be a static file content or a template content. The template is expected to conform to the golang template syntax.  The placeholders, if any, would be populated and the values provided would be  used to populate this template.
		TemplateContent *string `json:"TemplateContent,omitempty"`
	}

	varOsTemplateFileWithoutEmbeddedStruct := OsTemplateFileWithoutEmbeddedStruct{}

	err = json.Unmarshal(bytes, &varOsTemplateFileWithoutEmbeddedStruct)
	if err == nil {
		varOsTemplateFile := _OsTemplateFile{}
		varOsTemplateFile.ClassId = varOsTemplateFileWithoutEmbeddedStruct.ClassId
		varOsTemplateFile.ObjectType = varOsTemplateFileWithoutEmbeddedStruct.ObjectType
		varOsTemplateFile.Name = varOsTemplateFileWithoutEmbeddedStruct.Name
		varOsTemplateFile.Placeholders = varOsTemplateFileWithoutEmbeddedStruct.Placeholders
		varOsTemplateFile.TemplateContent = varOsTemplateFileWithoutEmbeddedStruct.TemplateContent
		*o = OsTemplateFile(varOsTemplateFile)
	} else {
		return err
	}

	varOsTemplateFile := _OsTemplateFile{}

	err = json.Unmarshal(bytes, &varOsTemplateFile)
	if err == nil {
		o.MoBaseMo = varOsTemplateFile.MoBaseMo
	} else {
		return err
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "ClassId")
		delete(additionalProperties, "ObjectType")
		delete(additionalProperties, "Name")
		delete(additionalProperties, "Placeholders")
		delete(additionalProperties, "TemplateContent")

		// remove fields from embedded structs
		reflectMoBaseMo := reflect.ValueOf(o.MoBaseMo)
		for i := 0; i < reflectMoBaseMo.Type().NumField(); i++ {
			t := reflectMoBaseMo.Type().Field(i)

			if jsonTag := t.Tag.Get("json"); jsonTag != "" {
				fieldName := ""
				if commaIdx := strings.Index(jsonTag, ","); commaIdx > 0 {
					fieldName = jsonTag[:commaIdx]
				} else {
					fieldName = jsonTag
				}
				if fieldName != "AdditionalProperties" {
					delete(additionalProperties, fieldName)
				}
			}
		}

		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableOsTemplateFile struct {
	value *OsTemplateFile
	isSet bool
}

func (v NullableOsTemplateFile) Get() *OsTemplateFile {
	return v.value
}

func (v *NullableOsTemplateFile) Set(val *OsTemplateFile) {
	v.value = val
	v.isSet = true
}

func (v NullableOsTemplateFile) IsSet() bool {
	return v.isSet
}

func (v *NullableOsTemplateFile) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOsTemplateFile(val *OsTemplateFile) *NullableOsTemplateFile {
	return &NullableOsTemplateFile{value: val, isSet: true}
}

func (v NullableOsTemplateFile) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOsTemplateFile) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
