/*
Cisco Intersight

Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations. The Intersight OpenAPI document defines the complete set of properties that are returned in the HTTP response. From that perspective, a client can expect that no additional properties are returned, unless these properties are explicitly defined in the OpenAPI document. However, when a client uses an older version of the Intersight OpenAPI document, the server may send additional properties because the software is more recent than the client. In that case, the client may receive properties that it does not know about. Some generated SDKs perform a strict validation of the HTTP response body against the OpenAPI document.

API version: 1.0.11-18775
Contact: intersight@cisco.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package intersight

import (
	"encoding/json"
)

// checks if the TelemetryNestedFieldVirtualColumnAllOfPathParts type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TelemetryNestedFieldVirtualColumnAllOfPathParts{}

// TelemetryNestedFieldVirtualColumnAllOfPathParts struct for TelemetryNestedFieldVirtualColumnAllOfPathParts
type TelemetryNestedFieldVirtualColumnAllOfPathParts struct {
	// Type of the path part. Use 'field' when accessing a specific field in a nested structure. Use 'arrayElement' when accessing a specific integer position of an array.
	Type *string `json:"type,omitempty"`
	// Name of the field in the field type path part.
	Field *string `json:"field,omitempty"`
	// Index of the array element.
	Index                *int32 `json:"index,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _TelemetryNestedFieldVirtualColumnAllOfPathParts TelemetryNestedFieldVirtualColumnAllOfPathParts

// NewTelemetryNestedFieldVirtualColumnAllOfPathParts instantiates a new TelemetryNestedFieldVirtualColumnAllOfPathParts object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTelemetryNestedFieldVirtualColumnAllOfPathParts() *TelemetryNestedFieldVirtualColumnAllOfPathParts {
	this := TelemetryNestedFieldVirtualColumnAllOfPathParts{}
	return &this
}

// NewTelemetryNestedFieldVirtualColumnAllOfPathPartsWithDefaults instantiates a new TelemetryNestedFieldVirtualColumnAllOfPathParts object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTelemetryNestedFieldVirtualColumnAllOfPathPartsWithDefaults() *TelemetryNestedFieldVirtualColumnAllOfPathParts {
	this := TelemetryNestedFieldVirtualColumnAllOfPathParts{}
	return &this
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *TelemetryNestedFieldVirtualColumnAllOfPathParts) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TelemetryNestedFieldVirtualColumnAllOfPathParts) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *TelemetryNestedFieldVirtualColumnAllOfPathParts) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *TelemetryNestedFieldVirtualColumnAllOfPathParts) SetType(v string) {
	o.Type = &v
}

// GetField returns the Field field value if set, zero value otherwise.
func (o *TelemetryNestedFieldVirtualColumnAllOfPathParts) GetField() string {
	if o == nil || IsNil(o.Field) {
		var ret string
		return ret
	}
	return *o.Field
}

// GetFieldOk returns a tuple with the Field field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TelemetryNestedFieldVirtualColumnAllOfPathParts) GetFieldOk() (*string, bool) {
	if o == nil || IsNil(o.Field) {
		return nil, false
	}
	return o.Field, true
}

// HasField returns a boolean if a field has been set.
func (o *TelemetryNestedFieldVirtualColumnAllOfPathParts) HasField() bool {
	if o != nil && !IsNil(o.Field) {
		return true
	}

	return false
}

// SetField gets a reference to the given string and assigns it to the Field field.
func (o *TelemetryNestedFieldVirtualColumnAllOfPathParts) SetField(v string) {
	o.Field = &v
}

// GetIndex returns the Index field value if set, zero value otherwise.
func (o *TelemetryNestedFieldVirtualColumnAllOfPathParts) GetIndex() int32 {
	if o == nil || IsNil(o.Index) {
		var ret int32
		return ret
	}
	return *o.Index
}

// GetIndexOk returns a tuple with the Index field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TelemetryNestedFieldVirtualColumnAllOfPathParts) GetIndexOk() (*int32, bool) {
	if o == nil || IsNil(o.Index) {
		return nil, false
	}
	return o.Index, true
}

// HasIndex returns a boolean if a field has been set.
func (o *TelemetryNestedFieldVirtualColumnAllOfPathParts) HasIndex() bool {
	if o != nil && !IsNil(o.Index) {
		return true
	}

	return false
}

// SetIndex gets a reference to the given int32 and assigns it to the Index field.
func (o *TelemetryNestedFieldVirtualColumnAllOfPathParts) SetIndex(v int32) {
	o.Index = &v
}

func (o TelemetryNestedFieldVirtualColumnAllOfPathParts) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TelemetryNestedFieldVirtualColumnAllOfPathParts) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Field) {
		toSerialize["field"] = o.Field
	}
	if !IsNil(o.Index) {
		toSerialize["index"] = o.Index
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *TelemetryNestedFieldVirtualColumnAllOfPathParts) UnmarshalJSON(data []byte) (err error) {
	varTelemetryNestedFieldVirtualColumnAllOfPathParts := _TelemetryNestedFieldVirtualColumnAllOfPathParts{}

	err = json.Unmarshal(data, &varTelemetryNestedFieldVirtualColumnAllOfPathParts)

	if err != nil {
		return err
	}

	*o = TelemetryNestedFieldVirtualColumnAllOfPathParts(varTelemetryNestedFieldVirtualColumnAllOfPathParts)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "type")
		delete(additionalProperties, "field")
		delete(additionalProperties, "index")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableTelemetryNestedFieldVirtualColumnAllOfPathParts struct {
	value *TelemetryNestedFieldVirtualColumnAllOfPathParts
	isSet bool
}

func (v NullableTelemetryNestedFieldVirtualColumnAllOfPathParts) Get() *TelemetryNestedFieldVirtualColumnAllOfPathParts {
	return v.value
}

func (v *NullableTelemetryNestedFieldVirtualColumnAllOfPathParts) Set(val *TelemetryNestedFieldVirtualColumnAllOfPathParts) {
	v.value = val
	v.isSet = true
}

func (v NullableTelemetryNestedFieldVirtualColumnAllOfPathParts) IsSet() bool {
	return v.isSet
}

func (v *NullableTelemetryNestedFieldVirtualColumnAllOfPathParts) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTelemetryNestedFieldVirtualColumnAllOfPathParts(val *TelemetryNestedFieldVirtualColumnAllOfPathParts) *NullableTelemetryNestedFieldVirtualColumnAllOfPathParts {
	return &NullableTelemetryNestedFieldVirtualColumnAllOfPathParts{value: val, isSet: true}
}

func (v NullableTelemetryNestedFieldVirtualColumnAllOfPathParts) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTelemetryNestedFieldVirtualColumnAllOfPathParts) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
