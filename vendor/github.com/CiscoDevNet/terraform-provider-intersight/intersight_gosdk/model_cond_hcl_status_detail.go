/*
Cisco Intersight

Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations. The Intersight OpenAPI document defines the complete set of properties that are returned in the HTTP response. From that perspective, a client can expect that no additional properties are returned, unless these properties are explicitly defined in the OpenAPI document. However, when a client uses an older version of the Intersight OpenAPI document, the server may send additional properties because the software is more recent than the client. In that case, the client may receive properties that it does not know about. Some generated SDKs perform a strict validation of the HTTP response body against the OpenAPI document.

API version: 1.0.11-18775
Contact: intersight@cisco.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package intersight

import (
	"encoding/json"
	"fmt"
	"reflect"
	"strings"
)

// checks if the CondHclStatusDetail type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CondHclStatusDetail{}

// CondHclStatusDetail The HCL status detail for each component firmware and driver.
type CondHclStatusDetail struct {
	MoBaseMo
	// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.
	ClassId string `json:"ClassId"`
	// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
	ObjectType string `json:"ObjectType"`
	// The model is considered as part of the hardware profile for the component. This will provide the HCL validation status for the hardware profile. The reasons can be one of the following \"Incompatible-Server-With-Component\" - the server model and component combination is not listed in HCL \"Incompatible-Firmware\" - The server's firmware is not listed for this component's hardware profile \"Incompatible-Component\" - the component's model is not listed in the HCL \"Service-Unavailable\" - HCL data service is unavailable at the moment (try again later). This could be due to HCL data updating \"Not-Evaluated\" - the hardware profile was not evaulated for the component because the server's hw/sw status is not listed or server is exempted. \"Compatible\" - this component's hardware profile is listed in the HCL. * `Missing-Os-Driver-Info` - The validation failed becaue the given server has no OS driver information available in the inventory. Either install ucstools vib or use power shell scripts to tag proper OS information. * `Incompatible-Server-With-Component` - The validation failed for this component because he server model and component model combination was not found in the HCL. * `Incompatible-Processor` - The validation failed because the given processor was not found for the given server PID. * `Incompatible-Os-Info` - The validation failed because the given OS vendor and version was not found in HCL for the server PID and processor combination. * `Incompatible-Component-Model` - The validation failed because the given Component model was not found in the HCL for the given server PID, processor, server Firmware and OS vendor and version. * `Incompatible-Firmware` - The validation failed because the given server firmware or adapter firmware was not found in the HCL for the given server PID, processor, OS vendor and version and component model. * `Incompatible-Driver` - The validation failed because the given driver version was not found in the HCL for the given Server PID, processor, OS vendor and version, server firmware and component firmware. * `Incompatible-Firmware-Driver` - The validation failed because the given component firmware and driver version was not found in the HCL for the given Server PID, processor, OS vendor and version and server firmware. * `Service-Unavailable` - The validation has failed because HCL data service is temporarily not available. The server will be re-evaluated once HCL data service is back online or finished importing new HCL data. * `Service-Error` - The validation has failed because the HCL data service has return a service error or unrecognized result. * `Unrecognized-Protocol` - The validation has failed for the HCL component because the HCL data service has return a validation reason that is unknown to this service. This reason is used as a default failure reason reason in case we cannot map the error reason received from the HCL data service unto one of the other enum values. * `Not-Evaluated` - The validation for the hardware or software HCL status was not yet evaluated because some previous validation had failed. For example if a server's hardware profile fails to validate with HCL, then the server's software status will not be evaluated. * `Compatible` - The validation has passed for this server PID, processor, OS vendor and version, component model, component firmware and driver version.
	HardwareStatus *string `json:"HardwareStatus,omitempty"`
	// The current CIMC version for the server normalized for querying HCL data.
	HclCimcVersion *string `json:"HclCimcVersion,omitempty"`
	// The current driver name of the component we are validating normalized for querying HCL data.
	HclDriverName *string `json:"HclDriverName,omitempty"`
	// The current driver version of the component we are validating normalized for querying HCL data.
	HclDriverVersion *string `json:"HclDriverVersion,omitempty"`
	// The current firmware version of the component model normalized for querying HCL data.
	HclFirmwareVersion *string `json:"HclFirmwareVersion,omitempty"`
	// The component model we are trying to validate normalized for querying HCL data.
	HclModel *string `json:"HclModel,omitempty"`
	// The current CIMC version for the server as received from inventory.
	InvCimcVersion *string `json:"InvCimcVersion,omitempty"`
	// The current driver name of the component we are validating as received from inventory.
	InvDriverName *string `json:"InvDriverName,omitempty"`
	// The current driver version of the component we are validating as received from inventory.
	InvDriverVersion *string `json:"InvDriverVersion,omitempty"`
	// The current firmware version of the component model as received from inventory.
	InvFirmwareVersion *string `json:"InvFirmwareVersion,omitempty"`
	// The component model we are trying to validate as received from inventory.
	InvModel *string `json:"InvModel,omitempty"`
	// The reason for the status. The reason can be one of \"Incompatible-Server-With-Component\" - HCL validation has failed because the server model is not validated with this component \"Incompatible-Processor\" - HCL validation has failed because the processor is not validated with this server \"Incompatible-Os-Info\" - HCL validation has failed because the os vendor and version is not validated with this server \"Incompatible-Component-Model\" - HCL validation has failed because the component model is not validated \"Incompatible-Firmware\" - HCL validation has failed because the component or server firmware version is not validated \"Incompatible-Driver\" - HCL validation has failed because the driver version is not validated \"Incompatible-Firmware-Driver\" - HCL validation has failed because the firmware version and driver version is not validated \"Missing-Os-Driver-Info\" - HCL validation was not performed because we are missing os driver information form the inventory \"Service-Unavailable\" - HCL data service is unavailable at the moment (try again later). This could be due to HCL data updating \"Service-Error\" - HCL data service is available but an error occured when making the request or parsing the response \"Unrecognized-Protocol\" - This service does not recognize the reason code in the response from the HCL data service \"Compatible\" - this component's inventory data has \"Validated\" status with the HCL. \"Not-Evaluated\" - The component is not evaluated against the HCL because the server is exempted. * `Missing-Os-Driver-Info` - The validation failed becaue the given server has no OS driver information available in the inventory. Either install ucstools vib or use power shell scripts to tag proper OS information. * `Incompatible-Server-With-Component` - The validation failed for this component because he server model and component model combination was not found in the HCL. * `Incompatible-Processor` - The validation failed because the given processor was not found for the given server PID. * `Incompatible-Os-Info` - The validation failed because the given OS vendor and version was not found in HCL for the server PID and processor combination. * `Incompatible-Component-Model` - The validation failed because the given Component model was not found in the HCL for the given server PID, processor, server Firmware and OS vendor and version. * `Incompatible-Firmware` - The validation failed because the given server firmware or adapter firmware was not found in the HCL for the given server PID, processor, OS vendor and version and component model. * `Incompatible-Driver` - The validation failed because the given driver version was not found in the HCL for the given Server PID, processor, OS vendor and version, server firmware and component firmware. * `Incompatible-Firmware-Driver` - The validation failed because the given component firmware and driver version was not found in the HCL for the given Server PID, processor, OS vendor and version and server firmware. * `Service-Unavailable` - The validation has failed because HCL data service is temporarily not available. The server will be re-evaluated once HCL data service is back online or finished importing new HCL data. * `Service-Error` - The validation has failed because the HCL data service has return a service error or unrecognized result. * `Unrecognized-Protocol` - The validation has failed for the HCL component because the HCL data service has return a validation reason that is unknown to this service. This reason is used as a default failure reason reason in case we cannot map the error reason received from the HCL data service unto one of the other enum values. * `Not-Evaluated` - The validation for the hardware or software HCL status was not yet evaluated because some previous validation had failed. For example if a server's hardware profile fails to validate with HCL, then the server's software status will not be evaluated. * `Compatible` - The validation has passed for this server PID, processor, OS vendor and version, component model, component firmware and driver version.
	Reason *string `json:"Reason,omitempty"`
	// The firmware, driver name and driver version are considered as part of the software profile for the component. This will provide the HCL validation status for the software profile. The reasons can be one of the following \"Incompatible-Firmware\" - the component's firmware is not listed under the server's hardware and software profile and the component's hardware profile \"Incompatible-Driver\" - the component's driver is not listed under the server's hardware and software profile and the component's hardware profile \"Incompatible-Firmware-Driver\" - the component's firmware and driver are not listed under the server's hardware and software profile and the component's hardware profile \"Service-Unavailable\" - HCL data service is unavailable at the moment (try again later). This could be due to HCL data updating \"Not-Evaluated\" - the component's hardware status was not evaluated because the server's hardware or software profile is not listed or server is exempted. \"Compatible\" - this component's hardware profile is listed in the HCL. * `Missing-Os-Driver-Info` - The validation failed becaue the given server has no OS driver information available in the inventory. Either install ucstools vib or use power shell scripts to tag proper OS information. * `Incompatible-Server-With-Component` - The validation failed for this component because he server model and component model combination was not found in the HCL. * `Incompatible-Processor` - The validation failed because the given processor was not found for the given server PID. * `Incompatible-Os-Info` - The validation failed because the given OS vendor and version was not found in HCL for the server PID and processor combination. * `Incompatible-Component-Model` - The validation failed because the given Component model was not found in the HCL for the given server PID, processor, server Firmware and OS vendor and version. * `Incompatible-Firmware` - The validation failed because the given server firmware or adapter firmware was not found in the HCL for the given server PID, processor, OS vendor and version and component model. * `Incompatible-Driver` - The validation failed because the given driver version was not found in the HCL for the given Server PID, processor, OS vendor and version, server firmware and component firmware. * `Incompatible-Firmware-Driver` - The validation failed because the given component firmware and driver version was not found in the HCL for the given Server PID, processor, OS vendor and version and server firmware. * `Service-Unavailable` - The validation has failed because HCL data service is temporarily not available. The server will be re-evaluated once HCL data service is back online or finished importing new HCL data. * `Service-Error` - The validation has failed because the HCL data service has return a service error or unrecognized result. * `Unrecognized-Protocol` - The validation has failed for the HCL component because the HCL data service has return a validation reason that is unknown to this service. This reason is used as a default failure reason reason in case we cannot map the error reason received from the HCL data service unto one of the other enum values. * `Not-Evaluated` - The validation for the hardware or software HCL status was not yet evaluated because some previous validation had failed. For example if a server's hardware profile fails to validate with HCL, then the server's software status will not be evaluated. * `Compatible` - The validation has passed for this server PID, processor, OS vendor and version, component model, component firmware and driver version.
	SoftwareStatus *string `json:"SoftwareStatus,omitempty"`
	// The status for the component model, firmware version, driver name, and driver version after validating against the HCL. The status can be one of the following \"Unknown\" - we do not have enough information to evaluate against the HCL data \"Validated\" - we have validated this component against the HCL and it has \"Validated\" status \"Not-Validated\" - we have validated this component against the HCL and it has \"Not-Validated\" status. \"Not-Evaluated\" - The component is not evaluated against the HCL because the server is exempted. * `Incomplete` - This means we do not have os information in Intersight for this server. Either install ucstools vib or use power shell scripts to tag proper OS information. * `Not-Found` - At HclStatus level, this means that one of the components has failed validation. At HclStatusDetail level, this means that his component's hardware or software profile was not found in the HCL. * `Not-Listed` - At the HclStatus level, this means that some part of the HCL validation has failed. This could be that either the server's hardware or software profile was not listed in the HCL or one of the components' hardware or software profile was not found in the HCL. * `Validated` - At the HclStatus level, this means that all of the components have passed validation. At HclStatusDetail level, this means that the component's hardware or software profile was found in the HCL. * `Not-Evaluated` - At the HclStatus level this means that this means that SW or Component status has not been evaluated as the previous evaluation step has not passed yet. At the HclStatusDetail level this means that either HW or SW status has not been evaluted because a previous evaluation step has not passed yet.
	Status               *string                           `json:"Status,omitempty"`
	Component            NullableInventoryBaseRelationship `json:"Component,omitempty"`
	HclStatus            NullableCondHclStatusRelationship `json:"HclStatus,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _CondHclStatusDetail CondHclStatusDetail

// NewCondHclStatusDetail instantiates a new CondHclStatusDetail object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCondHclStatusDetail(classId string, objectType string) *CondHclStatusDetail {
	this := CondHclStatusDetail{}
	this.ClassId = classId
	this.ObjectType = objectType
	return &this
}

// NewCondHclStatusDetailWithDefaults instantiates a new CondHclStatusDetail object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCondHclStatusDetailWithDefaults() *CondHclStatusDetail {
	this := CondHclStatusDetail{}
	var classId string = "cond.HclStatusDetail"
	this.ClassId = classId
	var objectType string = "cond.HclStatusDetail"
	this.ObjectType = objectType
	return &this
}

// GetClassId returns the ClassId field value
func (o *CondHclStatusDetail) GetClassId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ClassId
}

// GetClassIdOk returns a tuple with the ClassId field value
// and a boolean to check if the value has been set.
func (o *CondHclStatusDetail) GetClassIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ClassId, true
}

// SetClassId sets field value
func (o *CondHclStatusDetail) SetClassId(v string) {
	o.ClassId = v
}

// GetDefaultClassId returns the default value "cond.HclStatusDetail" of the ClassId field.
func (o *CondHclStatusDetail) GetDefaultClassId() interface{} {
	return "cond.HclStatusDetail"
}

// GetObjectType returns the ObjectType field value
func (o *CondHclStatusDetail) GetObjectType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ObjectType
}

// GetObjectTypeOk returns a tuple with the ObjectType field value
// and a boolean to check if the value has been set.
func (o *CondHclStatusDetail) GetObjectTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ObjectType, true
}

// SetObjectType sets field value
func (o *CondHclStatusDetail) SetObjectType(v string) {
	o.ObjectType = v
}

// GetDefaultObjectType returns the default value "cond.HclStatusDetail" of the ObjectType field.
func (o *CondHclStatusDetail) GetDefaultObjectType() interface{} {
	return "cond.HclStatusDetail"
}

// GetHardwareStatus returns the HardwareStatus field value if set, zero value otherwise.
func (o *CondHclStatusDetail) GetHardwareStatus() string {
	if o == nil || IsNil(o.HardwareStatus) {
		var ret string
		return ret
	}
	return *o.HardwareStatus
}

// GetHardwareStatusOk returns a tuple with the HardwareStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CondHclStatusDetail) GetHardwareStatusOk() (*string, bool) {
	if o == nil || IsNil(o.HardwareStatus) {
		return nil, false
	}
	return o.HardwareStatus, true
}

// HasHardwareStatus returns a boolean if a field has been set.
func (o *CondHclStatusDetail) HasHardwareStatus() bool {
	if o != nil && !IsNil(o.HardwareStatus) {
		return true
	}

	return false
}

// SetHardwareStatus gets a reference to the given string and assigns it to the HardwareStatus field.
func (o *CondHclStatusDetail) SetHardwareStatus(v string) {
	o.HardwareStatus = &v
}

// GetHclCimcVersion returns the HclCimcVersion field value if set, zero value otherwise.
func (o *CondHclStatusDetail) GetHclCimcVersion() string {
	if o == nil || IsNil(o.HclCimcVersion) {
		var ret string
		return ret
	}
	return *o.HclCimcVersion
}

// GetHclCimcVersionOk returns a tuple with the HclCimcVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CondHclStatusDetail) GetHclCimcVersionOk() (*string, bool) {
	if o == nil || IsNil(o.HclCimcVersion) {
		return nil, false
	}
	return o.HclCimcVersion, true
}

// HasHclCimcVersion returns a boolean if a field has been set.
func (o *CondHclStatusDetail) HasHclCimcVersion() bool {
	if o != nil && !IsNil(o.HclCimcVersion) {
		return true
	}

	return false
}

// SetHclCimcVersion gets a reference to the given string and assigns it to the HclCimcVersion field.
func (o *CondHclStatusDetail) SetHclCimcVersion(v string) {
	o.HclCimcVersion = &v
}

// GetHclDriverName returns the HclDriverName field value if set, zero value otherwise.
func (o *CondHclStatusDetail) GetHclDriverName() string {
	if o == nil || IsNil(o.HclDriverName) {
		var ret string
		return ret
	}
	return *o.HclDriverName
}

// GetHclDriverNameOk returns a tuple with the HclDriverName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CondHclStatusDetail) GetHclDriverNameOk() (*string, bool) {
	if o == nil || IsNil(o.HclDriverName) {
		return nil, false
	}
	return o.HclDriverName, true
}

// HasHclDriverName returns a boolean if a field has been set.
func (o *CondHclStatusDetail) HasHclDriverName() bool {
	if o != nil && !IsNil(o.HclDriverName) {
		return true
	}

	return false
}

// SetHclDriverName gets a reference to the given string and assigns it to the HclDriverName field.
func (o *CondHclStatusDetail) SetHclDriverName(v string) {
	o.HclDriverName = &v
}

// GetHclDriverVersion returns the HclDriverVersion field value if set, zero value otherwise.
func (o *CondHclStatusDetail) GetHclDriverVersion() string {
	if o == nil || IsNil(o.HclDriverVersion) {
		var ret string
		return ret
	}
	return *o.HclDriverVersion
}

// GetHclDriverVersionOk returns a tuple with the HclDriverVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CondHclStatusDetail) GetHclDriverVersionOk() (*string, bool) {
	if o == nil || IsNil(o.HclDriverVersion) {
		return nil, false
	}
	return o.HclDriverVersion, true
}

// HasHclDriverVersion returns a boolean if a field has been set.
func (o *CondHclStatusDetail) HasHclDriverVersion() bool {
	if o != nil && !IsNil(o.HclDriverVersion) {
		return true
	}

	return false
}

// SetHclDriverVersion gets a reference to the given string and assigns it to the HclDriverVersion field.
func (o *CondHclStatusDetail) SetHclDriverVersion(v string) {
	o.HclDriverVersion = &v
}

// GetHclFirmwareVersion returns the HclFirmwareVersion field value if set, zero value otherwise.
func (o *CondHclStatusDetail) GetHclFirmwareVersion() string {
	if o == nil || IsNil(o.HclFirmwareVersion) {
		var ret string
		return ret
	}
	return *o.HclFirmwareVersion
}

// GetHclFirmwareVersionOk returns a tuple with the HclFirmwareVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CondHclStatusDetail) GetHclFirmwareVersionOk() (*string, bool) {
	if o == nil || IsNil(o.HclFirmwareVersion) {
		return nil, false
	}
	return o.HclFirmwareVersion, true
}

// HasHclFirmwareVersion returns a boolean if a field has been set.
func (o *CondHclStatusDetail) HasHclFirmwareVersion() bool {
	if o != nil && !IsNil(o.HclFirmwareVersion) {
		return true
	}

	return false
}

// SetHclFirmwareVersion gets a reference to the given string and assigns it to the HclFirmwareVersion field.
func (o *CondHclStatusDetail) SetHclFirmwareVersion(v string) {
	o.HclFirmwareVersion = &v
}

// GetHclModel returns the HclModel field value if set, zero value otherwise.
func (o *CondHclStatusDetail) GetHclModel() string {
	if o == nil || IsNil(o.HclModel) {
		var ret string
		return ret
	}
	return *o.HclModel
}

// GetHclModelOk returns a tuple with the HclModel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CondHclStatusDetail) GetHclModelOk() (*string, bool) {
	if o == nil || IsNil(o.HclModel) {
		return nil, false
	}
	return o.HclModel, true
}

// HasHclModel returns a boolean if a field has been set.
func (o *CondHclStatusDetail) HasHclModel() bool {
	if o != nil && !IsNil(o.HclModel) {
		return true
	}

	return false
}

// SetHclModel gets a reference to the given string and assigns it to the HclModel field.
func (o *CondHclStatusDetail) SetHclModel(v string) {
	o.HclModel = &v
}

// GetInvCimcVersion returns the InvCimcVersion field value if set, zero value otherwise.
func (o *CondHclStatusDetail) GetInvCimcVersion() string {
	if o == nil || IsNil(o.InvCimcVersion) {
		var ret string
		return ret
	}
	return *o.InvCimcVersion
}

// GetInvCimcVersionOk returns a tuple with the InvCimcVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CondHclStatusDetail) GetInvCimcVersionOk() (*string, bool) {
	if o == nil || IsNil(o.InvCimcVersion) {
		return nil, false
	}
	return o.InvCimcVersion, true
}

// HasInvCimcVersion returns a boolean if a field has been set.
func (o *CondHclStatusDetail) HasInvCimcVersion() bool {
	if o != nil && !IsNil(o.InvCimcVersion) {
		return true
	}

	return false
}

// SetInvCimcVersion gets a reference to the given string and assigns it to the InvCimcVersion field.
func (o *CondHclStatusDetail) SetInvCimcVersion(v string) {
	o.InvCimcVersion = &v
}

// GetInvDriverName returns the InvDriverName field value if set, zero value otherwise.
func (o *CondHclStatusDetail) GetInvDriverName() string {
	if o == nil || IsNil(o.InvDriverName) {
		var ret string
		return ret
	}
	return *o.InvDriverName
}

// GetInvDriverNameOk returns a tuple with the InvDriverName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CondHclStatusDetail) GetInvDriverNameOk() (*string, bool) {
	if o == nil || IsNil(o.InvDriverName) {
		return nil, false
	}
	return o.InvDriverName, true
}

// HasInvDriverName returns a boolean if a field has been set.
func (o *CondHclStatusDetail) HasInvDriverName() bool {
	if o != nil && !IsNil(o.InvDriverName) {
		return true
	}

	return false
}

// SetInvDriverName gets a reference to the given string and assigns it to the InvDriverName field.
func (o *CondHclStatusDetail) SetInvDriverName(v string) {
	o.InvDriverName = &v
}

// GetInvDriverVersion returns the InvDriverVersion field value if set, zero value otherwise.
func (o *CondHclStatusDetail) GetInvDriverVersion() string {
	if o == nil || IsNil(o.InvDriverVersion) {
		var ret string
		return ret
	}
	return *o.InvDriverVersion
}

// GetInvDriverVersionOk returns a tuple with the InvDriverVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CondHclStatusDetail) GetInvDriverVersionOk() (*string, bool) {
	if o == nil || IsNil(o.InvDriverVersion) {
		return nil, false
	}
	return o.InvDriverVersion, true
}

// HasInvDriverVersion returns a boolean if a field has been set.
func (o *CondHclStatusDetail) HasInvDriverVersion() bool {
	if o != nil && !IsNil(o.InvDriverVersion) {
		return true
	}

	return false
}

// SetInvDriverVersion gets a reference to the given string and assigns it to the InvDriverVersion field.
func (o *CondHclStatusDetail) SetInvDriverVersion(v string) {
	o.InvDriverVersion = &v
}

// GetInvFirmwareVersion returns the InvFirmwareVersion field value if set, zero value otherwise.
func (o *CondHclStatusDetail) GetInvFirmwareVersion() string {
	if o == nil || IsNil(o.InvFirmwareVersion) {
		var ret string
		return ret
	}
	return *o.InvFirmwareVersion
}

// GetInvFirmwareVersionOk returns a tuple with the InvFirmwareVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CondHclStatusDetail) GetInvFirmwareVersionOk() (*string, bool) {
	if o == nil || IsNil(o.InvFirmwareVersion) {
		return nil, false
	}
	return o.InvFirmwareVersion, true
}

// HasInvFirmwareVersion returns a boolean if a field has been set.
func (o *CondHclStatusDetail) HasInvFirmwareVersion() bool {
	if o != nil && !IsNil(o.InvFirmwareVersion) {
		return true
	}

	return false
}

// SetInvFirmwareVersion gets a reference to the given string and assigns it to the InvFirmwareVersion field.
func (o *CondHclStatusDetail) SetInvFirmwareVersion(v string) {
	o.InvFirmwareVersion = &v
}

// GetInvModel returns the InvModel field value if set, zero value otherwise.
func (o *CondHclStatusDetail) GetInvModel() string {
	if o == nil || IsNil(o.InvModel) {
		var ret string
		return ret
	}
	return *o.InvModel
}

// GetInvModelOk returns a tuple with the InvModel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CondHclStatusDetail) GetInvModelOk() (*string, bool) {
	if o == nil || IsNil(o.InvModel) {
		return nil, false
	}
	return o.InvModel, true
}

// HasInvModel returns a boolean if a field has been set.
func (o *CondHclStatusDetail) HasInvModel() bool {
	if o != nil && !IsNil(o.InvModel) {
		return true
	}

	return false
}

// SetInvModel gets a reference to the given string and assigns it to the InvModel field.
func (o *CondHclStatusDetail) SetInvModel(v string) {
	o.InvModel = &v
}

// GetReason returns the Reason field value if set, zero value otherwise.
func (o *CondHclStatusDetail) GetReason() string {
	if o == nil || IsNil(o.Reason) {
		var ret string
		return ret
	}
	return *o.Reason
}

// GetReasonOk returns a tuple with the Reason field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CondHclStatusDetail) GetReasonOk() (*string, bool) {
	if o == nil || IsNil(o.Reason) {
		return nil, false
	}
	return o.Reason, true
}

// HasReason returns a boolean if a field has been set.
func (o *CondHclStatusDetail) HasReason() bool {
	if o != nil && !IsNil(o.Reason) {
		return true
	}

	return false
}

// SetReason gets a reference to the given string and assigns it to the Reason field.
func (o *CondHclStatusDetail) SetReason(v string) {
	o.Reason = &v
}

// GetSoftwareStatus returns the SoftwareStatus field value if set, zero value otherwise.
func (o *CondHclStatusDetail) GetSoftwareStatus() string {
	if o == nil || IsNil(o.SoftwareStatus) {
		var ret string
		return ret
	}
	return *o.SoftwareStatus
}

// GetSoftwareStatusOk returns a tuple with the SoftwareStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CondHclStatusDetail) GetSoftwareStatusOk() (*string, bool) {
	if o == nil || IsNil(o.SoftwareStatus) {
		return nil, false
	}
	return o.SoftwareStatus, true
}

// HasSoftwareStatus returns a boolean if a field has been set.
func (o *CondHclStatusDetail) HasSoftwareStatus() bool {
	if o != nil && !IsNil(o.SoftwareStatus) {
		return true
	}

	return false
}

// SetSoftwareStatus gets a reference to the given string and assigns it to the SoftwareStatus field.
func (o *CondHclStatusDetail) SetSoftwareStatus(v string) {
	o.SoftwareStatus = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *CondHclStatusDetail) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CondHclStatusDetail) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *CondHclStatusDetail) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *CondHclStatusDetail) SetStatus(v string) {
	o.Status = &v
}

// GetComponent returns the Component field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CondHclStatusDetail) GetComponent() InventoryBaseRelationship {
	if o == nil || IsNil(o.Component.Get()) {
		var ret InventoryBaseRelationship
		return ret
	}
	return *o.Component.Get()
}

// GetComponentOk returns a tuple with the Component field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CondHclStatusDetail) GetComponentOk() (*InventoryBaseRelationship, bool) {
	if o == nil {
		return nil, false
	}
	return o.Component.Get(), o.Component.IsSet()
}

// HasComponent returns a boolean if a field has been set.
func (o *CondHclStatusDetail) HasComponent() bool {
	if o != nil && o.Component.IsSet() {
		return true
	}

	return false
}

// SetComponent gets a reference to the given NullableInventoryBaseRelationship and assigns it to the Component field.
func (o *CondHclStatusDetail) SetComponent(v InventoryBaseRelationship) {
	o.Component.Set(&v)
}

// SetComponentNil sets the value for Component to be an explicit nil
func (o *CondHclStatusDetail) SetComponentNil() {
	o.Component.Set(nil)
}

// UnsetComponent ensures that no value is present for Component, not even an explicit nil
func (o *CondHclStatusDetail) UnsetComponent() {
	o.Component.Unset()
}

// GetHclStatus returns the HclStatus field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CondHclStatusDetail) GetHclStatus() CondHclStatusRelationship {
	if o == nil || IsNil(o.HclStatus.Get()) {
		var ret CondHclStatusRelationship
		return ret
	}
	return *o.HclStatus.Get()
}

// GetHclStatusOk returns a tuple with the HclStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CondHclStatusDetail) GetHclStatusOk() (*CondHclStatusRelationship, bool) {
	if o == nil {
		return nil, false
	}
	return o.HclStatus.Get(), o.HclStatus.IsSet()
}

// HasHclStatus returns a boolean if a field has been set.
func (o *CondHclStatusDetail) HasHclStatus() bool {
	if o != nil && o.HclStatus.IsSet() {
		return true
	}

	return false
}

// SetHclStatus gets a reference to the given NullableCondHclStatusRelationship and assigns it to the HclStatus field.
func (o *CondHclStatusDetail) SetHclStatus(v CondHclStatusRelationship) {
	o.HclStatus.Set(&v)
}

// SetHclStatusNil sets the value for HclStatus to be an explicit nil
func (o *CondHclStatusDetail) SetHclStatusNil() {
	o.HclStatus.Set(nil)
}

// UnsetHclStatus ensures that no value is present for HclStatus, not even an explicit nil
func (o *CondHclStatusDetail) UnsetHclStatus() {
	o.HclStatus.Unset()
}

func (o CondHclStatusDetail) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CondHclStatusDetail) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	serializedMoBaseMo, errMoBaseMo := json.Marshal(o.MoBaseMo)
	if errMoBaseMo != nil {
		return map[string]interface{}{}, errMoBaseMo
	}
	errMoBaseMo = json.Unmarshal([]byte(serializedMoBaseMo), &toSerialize)
	if errMoBaseMo != nil {
		return map[string]interface{}{}, errMoBaseMo
	}
	if _, exists := toSerialize["ClassId"]; !exists {
		toSerialize["ClassId"] = o.GetDefaultClassId()
	}
	toSerialize["ClassId"] = o.ClassId
	if _, exists := toSerialize["ObjectType"]; !exists {
		toSerialize["ObjectType"] = o.GetDefaultObjectType()
	}
	toSerialize["ObjectType"] = o.ObjectType
	if !IsNil(o.HardwareStatus) {
		toSerialize["HardwareStatus"] = o.HardwareStatus
	}
	if !IsNil(o.HclCimcVersion) {
		toSerialize["HclCimcVersion"] = o.HclCimcVersion
	}
	if !IsNil(o.HclDriverName) {
		toSerialize["HclDriverName"] = o.HclDriverName
	}
	if !IsNil(o.HclDriverVersion) {
		toSerialize["HclDriverVersion"] = o.HclDriverVersion
	}
	if !IsNil(o.HclFirmwareVersion) {
		toSerialize["HclFirmwareVersion"] = o.HclFirmwareVersion
	}
	if !IsNil(o.HclModel) {
		toSerialize["HclModel"] = o.HclModel
	}
	if !IsNil(o.InvCimcVersion) {
		toSerialize["InvCimcVersion"] = o.InvCimcVersion
	}
	if !IsNil(o.InvDriverName) {
		toSerialize["InvDriverName"] = o.InvDriverName
	}
	if !IsNil(o.InvDriverVersion) {
		toSerialize["InvDriverVersion"] = o.InvDriverVersion
	}
	if !IsNil(o.InvFirmwareVersion) {
		toSerialize["InvFirmwareVersion"] = o.InvFirmwareVersion
	}
	if !IsNil(o.InvModel) {
		toSerialize["InvModel"] = o.InvModel
	}
	if !IsNil(o.Reason) {
		toSerialize["Reason"] = o.Reason
	}
	if !IsNil(o.SoftwareStatus) {
		toSerialize["SoftwareStatus"] = o.SoftwareStatus
	}
	if !IsNil(o.Status) {
		toSerialize["Status"] = o.Status
	}
	if o.Component.IsSet() {
		toSerialize["Component"] = o.Component.Get()
	}
	if o.HclStatus.IsSet() {
		toSerialize["HclStatus"] = o.HclStatus.Get()
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *CondHclStatusDetail) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"ClassId",
		"ObjectType",
	}

	// defaultValueFuncMap captures the default values for required properties.
	// These values are used when required properties are missing from the payload.
	defaultValueFuncMap := map[string]func() interface{}{
		"ClassId":    o.GetDefaultClassId,
		"ObjectType": o.GetDefaultObjectType,
	}
	var defaultValueApplied bool
	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			if _, ok := defaultValueFuncMap[requiredProperty]; ok {
				allProperties[requiredProperty] = defaultValueFuncMap[requiredProperty]()
				defaultValueApplied = true
			}
		}
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	if defaultValueApplied {
		data, err = json.Marshal(allProperties)
		if err != nil {
			return err
		}
	}
	type CondHclStatusDetailWithoutEmbeddedStruct struct {
		// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.
		ClassId string `json:"ClassId"`
		// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
		ObjectType string `json:"ObjectType"`
		// The model is considered as part of the hardware profile for the component. This will provide the HCL validation status for the hardware profile. The reasons can be one of the following \"Incompatible-Server-With-Component\" - the server model and component combination is not listed in HCL \"Incompatible-Firmware\" - The server's firmware is not listed for this component's hardware profile \"Incompatible-Component\" - the component's model is not listed in the HCL \"Service-Unavailable\" - HCL data service is unavailable at the moment (try again later). This could be due to HCL data updating \"Not-Evaluated\" - the hardware profile was not evaulated for the component because the server's hw/sw status is not listed or server is exempted. \"Compatible\" - this component's hardware profile is listed in the HCL. * `Missing-Os-Driver-Info` - The validation failed becaue the given server has no OS driver information available in the inventory. Either install ucstools vib or use power shell scripts to tag proper OS information. * `Incompatible-Server-With-Component` - The validation failed for this component because he server model and component model combination was not found in the HCL. * `Incompatible-Processor` - The validation failed because the given processor was not found for the given server PID. * `Incompatible-Os-Info` - The validation failed because the given OS vendor and version was not found in HCL for the server PID and processor combination. * `Incompatible-Component-Model` - The validation failed because the given Component model was not found in the HCL for the given server PID, processor, server Firmware and OS vendor and version. * `Incompatible-Firmware` - The validation failed because the given server firmware or adapter firmware was not found in the HCL for the given server PID, processor, OS vendor and version and component model. * `Incompatible-Driver` - The validation failed because the given driver version was not found in the HCL for the given Server PID, processor, OS vendor and version, server firmware and component firmware. * `Incompatible-Firmware-Driver` - The validation failed because the given component firmware and driver version was not found in the HCL for the given Server PID, processor, OS vendor and version and server firmware. * `Service-Unavailable` - The validation has failed because HCL data service is temporarily not available. The server will be re-evaluated once HCL data service is back online or finished importing new HCL data. * `Service-Error` - The validation has failed because the HCL data service has return a service error or unrecognized result. * `Unrecognized-Protocol` - The validation has failed for the HCL component because the HCL data service has return a validation reason that is unknown to this service. This reason is used as a default failure reason reason in case we cannot map the error reason received from the HCL data service unto one of the other enum values. * `Not-Evaluated` - The validation for the hardware or software HCL status was not yet evaluated because some previous validation had failed. For example if a server's hardware profile fails to validate with HCL, then the server's software status will not be evaluated. * `Compatible` - The validation has passed for this server PID, processor, OS vendor and version, component model, component firmware and driver version.
		HardwareStatus *string `json:"HardwareStatus,omitempty"`
		// The current CIMC version for the server normalized for querying HCL data.
		HclCimcVersion *string `json:"HclCimcVersion,omitempty"`
		// The current driver name of the component we are validating normalized for querying HCL data.
		HclDriverName *string `json:"HclDriverName,omitempty"`
		// The current driver version of the component we are validating normalized for querying HCL data.
		HclDriverVersion *string `json:"HclDriverVersion,omitempty"`
		// The current firmware version of the component model normalized for querying HCL data.
		HclFirmwareVersion *string `json:"HclFirmwareVersion,omitempty"`
		// The component model we are trying to validate normalized for querying HCL data.
		HclModel *string `json:"HclModel,omitempty"`
		// The current CIMC version for the server as received from inventory.
		InvCimcVersion *string `json:"InvCimcVersion,omitempty"`
		// The current driver name of the component we are validating as received from inventory.
		InvDriverName *string `json:"InvDriverName,omitempty"`
		// The current driver version of the component we are validating as received from inventory.
		InvDriverVersion *string `json:"InvDriverVersion,omitempty"`
		// The current firmware version of the component model as received from inventory.
		InvFirmwareVersion *string `json:"InvFirmwareVersion,omitempty"`
		// The component model we are trying to validate as received from inventory.
		InvModel *string `json:"InvModel,omitempty"`
		// The reason for the status. The reason can be one of \"Incompatible-Server-With-Component\" - HCL validation has failed because the server model is not validated with this component \"Incompatible-Processor\" - HCL validation has failed because the processor is not validated with this server \"Incompatible-Os-Info\" - HCL validation has failed because the os vendor and version is not validated with this server \"Incompatible-Component-Model\" - HCL validation has failed because the component model is not validated \"Incompatible-Firmware\" - HCL validation has failed because the component or server firmware version is not validated \"Incompatible-Driver\" - HCL validation has failed because the driver version is not validated \"Incompatible-Firmware-Driver\" - HCL validation has failed because the firmware version and driver version is not validated \"Missing-Os-Driver-Info\" - HCL validation was not performed because we are missing os driver information form the inventory \"Service-Unavailable\" - HCL data service is unavailable at the moment (try again later). This could be due to HCL data updating \"Service-Error\" - HCL data service is available but an error occured when making the request or parsing the response \"Unrecognized-Protocol\" - This service does not recognize the reason code in the response from the HCL data service \"Compatible\" - this component's inventory data has \"Validated\" status with the HCL. \"Not-Evaluated\" - The component is not evaluated against the HCL because the server is exempted. * `Missing-Os-Driver-Info` - The validation failed becaue the given server has no OS driver information available in the inventory. Either install ucstools vib or use power shell scripts to tag proper OS information. * `Incompatible-Server-With-Component` - The validation failed for this component because he server model and component model combination was not found in the HCL. * `Incompatible-Processor` - The validation failed because the given processor was not found for the given server PID. * `Incompatible-Os-Info` - The validation failed because the given OS vendor and version was not found in HCL for the server PID and processor combination. * `Incompatible-Component-Model` - The validation failed because the given Component model was not found in the HCL for the given server PID, processor, server Firmware and OS vendor and version. * `Incompatible-Firmware` - The validation failed because the given server firmware or adapter firmware was not found in the HCL for the given server PID, processor, OS vendor and version and component model. * `Incompatible-Driver` - The validation failed because the given driver version was not found in the HCL for the given Server PID, processor, OS vendor and version, server firmware and component firmware. * `Incompatible-Firmware-Driver` - The validation failed because the given component firmware and driver version was not found in the HCL for the given Server PID, processor, OS vendor and version and server firmware. * `Service-Unavailable` - The validation has failed because HCL data service is temporarily not available. The server will be re-evaluated once HCL data service is back online or finished importing new HCL data. * `Service-Error` - The validation has failed because the HCL data service has return a service error or unrecognized result. * `Unrecognized-Protocol` - The validation has failed for the HCL component because the HCL data service has return a validation reason that is unknown to this service. This reason is used as a default failure reason reason in case we cannot map the error reason received from the HCL data service unto one of the other enum values. * `Not-Evaluated` - The validation for the hardware or software HCL status was not yet evaluated because some previous validation had failed. For example if a server's hardware profile fails to validate with HCL, then the server's software status will not be evaluated. * `Compatible` - The validation has passed for this server PID, processor, OS vendor and version, component model, component firmware and driver version.
		Reason *string `json:"Reason,omitempty"`
		// The firmware, driver name and driver version are considered as part of the software profile for the component. This will provide the HCL validation status for the software profile. The reasons can be one of the following \"Incompatible-Firmware\" - the component's firmware is not listed under the server's hardware and software profile and the component's hardware profile \"Incompatible-Driver\" - the component's driver is not listed under the server's hardware and software profile and the component's hardware profile \"Incompatible-Firmware-Driver\" - the component's firmware and driver are not listed under the server's hardware and software profile and the component's hardware profile \"Service-Unavailable\" - HCL data service is unavailable at the moment (try again later). This could be due to HCL data updating \"Not-Evaluated\" - the component's hardware status was not evaluated because the server's hardware or software profile is not listed or server is exempted. \"Compatible\" - this component's hardware profile is listed in the HCL. * `Missing-Os-Driver-Info` - The validation failed becaue the given server has no OS driver information available in the inventory. Either install ucstools vib or use power shell scripts to tag proper OS information. * `Incompatible-Server-With-Component` - The validation failed for this component because he server model and component model combination was not found in the HCL. * `Incompatible-Processor` - The validation failed because the given processor was not found for the given server PID. * `Incompatible-Os-Info` - The validation failed because the given OS vendor and version was not found in HCL for the server PID and processor combination. * `Incompatible-Component-Model` - The validation failed because the given Component model was not found in the HCL for the given server PID, processor, server Firmware and OS vendor and version. * `Incompatible-Firmware` - The validation failed because the given server firmware or adapter firmware was not found in the HCL for the given server PID, processor, OS vendor and version and component model. * `Incompatible-Driver` - The validation failed because the given driver version was not found in the HCL for the given Server PID, processor, OS vendor and version, server firmware and component firmware. * `Incompatible-Firmware-Driver` - The validation failed because the given component firmware and driver version was not found in the HCL for the given Server PID, processor, OS vendor and version and server firmware. * `Service-Unavailable` - The validation has failed because HCL data service is temporarily not available. The server will be re-evaluated once HCL data service is back online or finished importing new HCL data. * `Service-Error` - The validation has failed because the HCL data service has return a service error or unrecognized result. * `Unrecognized-Protocol` - The validation has failed for the HCL component because the HCL data service has return a validation reason that is unknown to this service. This reason is used as a default failure reason reason in case we cannot map the error reason received from the HCL data service unto one of the other enum values. * `Not-Evaluated` - The validation for the hardware or software HCL status was not yet evaluated because some previous validation had failed. For example if a server's hardware profile fails to validate with HCL, then the server's software status will not be evaluated. * `Compatible` - The validation has passed for this server PID, processor, OS vendor and version, component model, component firmware and driver version.
		SoftwareStatus *string `json:"SoftwareStatus,omitempty"`
		// The status for the component model, firmware version, driver name, and driver version after validating against the HCL. The status can be one of the following \"Unknown\" - we do not have enough information to evaluate against the HCL data \"Validated\" - we have validated this component against the HCL and it has \"Validated\" status \"Not-Validated\" - we have validated this component against the HCL and it has \"Not-Validated\" status. \"Not-Evaluated\" - The component is not evaluated against the HCL because the server is exempted. * `Incomplete` - This means we do not have os information in Intersight for this server. Either install ucstools vib or use power shell scripts to tag proper OS information. * `Not-Found` - At HclStatus level, this means that one of the components has failed validation. At HclStatusDetail level, this means that his component's hardware or software profile was not found in the HCL. * `Not-Listed` - At the HclStatus level, this means that some part of the HCL validation has failed. This could be that either the server's hardware or software profile was not listed in the HCL or one of the components' hardware or software profile was not found in the HCL. * `Validated` - At the HclStatus level, this means that all of the components have passed validation. At HclStatusDetail level, this means that the component's hardware or software profile was found in the HCL. * `Not-Evaluated` - At the HclStatus level this means that this means that SW or Component status has not been evaluated as the previous evaluation step has not passed yet. At the HclStatusDetail level this means that either HW or SW status has not been evaluted because a previous evaluation step has not passed yet.
		Status    *string                           `json:"Status,omitempty"`
		Component NullableInventoryBaseRelationship `json:"Component,omitempty"`
		HclStatus NullableCondHclStatusRelationship `json:"HclStatus,omitempty"`
	}

	varCondHclStatusDetailWithoutEmbeddedStruct := CondHclStatusDetailWithoutEmbeddedStruct{}

	err = json.Unmarshal(data, &varCondHclStatusDetailWithoutEmbeddedStruct)
	if err == nil {
		varCondHclStatusDetail := _CondHclStatusDetail{}
		varCondHclStatusDetail.ClassId = varCondHclStatusDetailWithoutEmbeddedStruct.ClassId
		varCondHclStatusDetail.ObjectType = varCondHclStatusDetailWithoutEmbeddedStruct.ObjectType
		varCondHclStatusDetail.HardwareStatus = varCondHclStatusDetailWithoutEmbeddedStruct.HardwareStatus
		varCondHclStatusDetail.HclCimcVersion = varCondHclStatusDetailWithoutEmbeddedStruct.HclCimcVersion
		varCondHclStatusDetail.HclDriverName = varCondHclStatusDetailWithoutEmbeddedStruct.HclDriverName
		varCondHclStatusDetail.HclDriverVersion = varCondHclStatusDetailWithoutEmbeddedStruct.HclDriverVersion
		varCondHclStatusDetail.HclFirmwareVersion = varCondHclStatusDetailWithoutEmbeddedStruct.HclFirmwareVersion
		varCondHclStatusDetail.HclModel = varCondHclStatusDetailWithoutEmbeddedStruct.HclModel
		varCondHclStatusDetail.InvCimcVersion = varCondHclStatusDetailWithoutEmbeddedStruct.InvCimcVersion
		varCondHclStatusDetail.InvDriverName = varCondHclStatusDetailWithoutEmbeddedStruct.InvDriverName
		varCondHclStatusDetail.InvDriverVersion = varCondHclStatusDetailWithoutEmbeddedStruct.InvDriverVersion
		varCondHclStatusDetail.InvFirmwareVersion = varCondHclStatusDetailWithoutEmbeddedStruct.InvFirmwareVersion
		varCondHclStatusDetail.InvModel = varCondHclStatusDetailWithoutEmbeddedStruct.InvModel
		varCondHclStatusDetail.Reason = varCondHclStatusDetailWithoutEmbeddedStruct.Reason
		varCondHclStatusDetail.SoftwareStatus = varCondHclStatusDetailWithoutEmbeddedStruct.SoftwareStatus
		varCondHclStatusDetail.Status = varCondHclStatusDetailWithoutEmbeddedStruct.Status
		varCondHclStatusDetail.Component = varCondHclStatusDetailWithoutEmbeddedStruct.Component
		varCondHclStatusDetail.HclStatus = varCondHclStatusDetailWithoutEmbeddedStruct.HclStatus
		*o = CondHclStatusDetail(varCondHclStatusDetail)
	} else {
		return err
	}

	varCondHclStatusDetail := _CondHclStatusDetail{}

	err = json.Unmarshal(data, &varCondHclStatusDetail)
	if err == nil {
		o.MoBaseMo = varCondHclStatusDetail.MoBaseMo
	} else {
		return err
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "ClassId")
		delete(additionalProperties, "ObjectType")
		delete(additionalProperties, "HardwareStatus")
		delete(additionalProperties, "HclCimcVersion")
		delete(additionalProperties, "HclDriverName")
		delete(additionalProperties, "HclDriverVersion")
		delete(additionalProperties, "HclFirmwareVersion")
		delete(additionalProperties, "HclModel")
		delete(additionalProperties, "InvCimcVersion")
		delete(additionalProperties, "InvDriverName")
		delete(additionalProperties, "InvDriverVersion")
		delete(additionalProperties, "InvFirmwareVersion")
		delete(additionalProperties, "InvModel")
		delete(additionalProperties, "Reason")
		delete(additionalProperties, "SoftwareStatus")
		delete(additionalProperties, "Status")
		delete(additionalProperties, "Component")
		delete(additionalProperties, "HclStatus")

		// remove fields from embedded structs
		reflectMoBaseMo := reflect.ValueOf(o.MoBaseMo)
		for i := 0; i < reflectMoBaseMo.Type().NumField(); i++ {
			t := reflectMoBaseMo.Type().Field(i)

			if jsonTag := t.Tag.Get("json"); jsonTag != "" {
				fieldName := ""
				if commaIdx := strings.Index(jsonTag, ","); commaIdx > 0 {
					fieldName = jsonTag[:commaIdx]
				} else {
					fieldName = jsonTag
				}
				if fieldName != "AdditionalProperties" {
					delete(additionalProperties, fieldName)
				}
			}
		}

		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableCondHclStatusDetail struct {
	value *CondHclStatusDetail
	isSet bool
}

func (v NullableCondHclStatusDetail) Get() *CondHclStatusDetail {
	return v.value
}

func (v *NullableCondHclStatusDetail) Set(val *CondHclStatusDetail) {
	v.value = val
	v.isSet = true
}

func (v NullableCondHclStatusDetail) IsSet() bool {
	return v.isSet
}

func (v *NullableCondHclStatusDetail) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCondHclStatusDetail(val *CondHclStatusDetail) *NullableCondHclStatusDetail {
	return &NullableCondHclStatusDetail{value: val, isSet: true}
}

func (v NullableCondHclStatusDetail) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCondHclStatusDetail) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
