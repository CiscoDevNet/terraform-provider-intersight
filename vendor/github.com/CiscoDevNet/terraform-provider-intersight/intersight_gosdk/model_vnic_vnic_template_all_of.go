/*
Cisco Intersight

Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations. The Intersight OpenAPI document defines the complete set of properties that are returned in the HTTP response. From that perspective, a client can expect that no additional properties are returned, unless these properties are explicitly defined in the OpenAPI document. However, when a client uses an older version of the Intersight OpenAPI document, the server may send additional properties because the software is more recent than the client. In that case, the client may receive properties that it does not know about. Some generated SDKs perform a strict validation of the HTTP response body against the OpenAPI document.

API version: 1.0.11-16342
Contact: intersight@cisco.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package intersight

import (
	"encoding/json"
)

// VnicVnicTemplateAllOf Definition of the list of properties defined in 'vnic.VnicTemplate', excluding properties defined in parent classes.
type VnicVnicTemplateAllOf struct {
	// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.
	ClassId string `json:"ClassId"`
	// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
	ObjectType string `json:"ObjectType"`
	// Description of the vNIC template.
	Description *string `json:"Description,omitempty"`
	// When enabled, the configuration of the derived instances may override the template configuration.
	EnableOverride *bool `json:"EnableOverride,omitempty"`
	// The count of the Lan Connectivity Policies using vNIC template.
	LcpUsageCount *int64 `json:"LcpUsageCount,omitempty"`
	// Name of the virtual ethernet interface.
	Name *string `json:"Name,omitempty"`
	// Name of the peer vNIC which belongs to the peer FI.
	PeerVnicName *string `json:"PeerVnicName,omitempty"`
	// The fabric port to which the vNICs will be associated. * `None` - Fabric Id is not set to either A or B for the standalone case where the server is not connected to Fabric Interconnects. The value 'None' should be used. * `A` - Fabric A of the FI cluster. * `B` - Fabric B of the FI cluster.
	SwitchId        *string                 `json:"SwitchId,omitempty"`
	TemplateActions []MotemplateActionEntry `json:"TemplateActions,omitempty"`
	// The number of objects derived from a Template MO instance.
	UsageCount           *int64                                `json:"UsageCount,omitempty"`
	Organization         *OrganizationOrganizationRelationship `json:"Organization,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _VnicVnicTemplateAllOf VnicVnicTemplateAllOf

// NewVnicVnicTemplateAllOf instantiates a new VnicVnicTemplateAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVnicVnicTemplateAllOf(classId string, objectType string) *VnicVnicTemplateAllOf {
	this := VnicVnicTemplateAllOf{}
	this.ClassId = classId
	this.ObjectType = objectType
	var switchId string = "None"
	this.SwitchId = &switchId
	return &this
}

// NewVnicVnicTemplateAllOfWithDefaults instantiates a new VnicVnicTemplateAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVnicVnicTemplateAllOfWithDefaults() *VnicVnicTemplateAllOf {
	this := VnicVnicTemplateAllOf{}
	var classId string = "vnic.VnicTemplate"
	this.ClassId = classId
	var objectType string = "vnic.VnicTemplate"
	this.ObjectType = objectType
	var switchId string = "None"
	this.SwitchId = &switchId
	return &this
}

// GetClassId returns the ClassId field value
func (o *VnicVnicTemplateAllOf) GetClassId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ClassId
}

// GetClassIdOk returns a tuple with the ClassId field value
// and a boolean to check if the value has been set.
func (o *VnicVnicTemplateAllOf) GetClassIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ClassId, true
}

// SetClassId sets field value
func (o *VnicVnicTemplateAllOf) SetClassId(v string) {
	o.ClassId = v
}

// GetObjectType returns the ObjectType field value
func (o *VnicVnicTemplateAllOf) GetObjectType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ObjectType
}

// GetObjectTypeOk returns a tuple with the ObjectType field value
// and a boolean to check if the value has been set.
func (o *VnicVnicTemplateAllOf) GetObjectTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ObjectType, true
}

// SetObjectType sets field value
func (o *VnicVnicTemplateAllOf) SetObjectType(v string) {
	o.ObjectType = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *VnicVnicTemplateAllOf) GetDescription() string {
	if o == nil || o.Description == nil {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VnicVnicTemplateAllOf) GetDescriptionOk() (*string, bool) {
	if o == nil || o.Description == nil {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *VnicVnicTemplateAllOf) HasDescription() bool {
	if o != nil && o.Description != nil {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *VnicVnicTemplateAllOf) SetDescription(v string) {
	o.Description = &v
}

// GetEnableOverride returns the EnableOverride field value if set, zero value otherwise.
func (o *VnicVnicTemplateAllOf) GetEnableOverride() bool {
	if o == nil || o.EnableOverride == nil {
		var ret bool
		return ret
	}
	return *o.EnableOverride
}

// GetEnableOverrideOk returns a tuple with the EnableOverride field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VnicVnicTemplateAllOf) GetEnableOverrideOk() (*bool, bool) {
	if o == nil || o.EnableOverride == nil {
		return nil, false
	}
	return o.EnableOverride, true
}

// HasEnableOverride returns a boolean if a field has been set.
func (o *VnicVnicTemplateAllOf) HasEnableOverride() bool {
	if o != nil && o.EnableOverride != nil {
		return true
	}

	return false
}

// SetEnableOverride gets a reference to the given bool and assigns it to the EnableOverride field.
func (o *VnicVnicTemplateAllOf) SetEnableOverride(v bool) {
	o.EnableOverride = &v
}

// GetLcpUsageCount returns the LcpUsageCount field value if set, zero value otherwise.
func (o *VnicVnicTemplateAllOf) GetLcpUsageCount() int64 {
	if o == nil || o.LcpUsageCount == nil {
		var ret int64
		return ret
	}
	return *o.LcpUsageCount
}

// GetLcpUsageCountOk returns a tuple with the LcpUsageCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VnicVnicTemplateAllOf) GetLcpUsageCountOk() (*int64, bool) {
	if o == nil || o.LcpUsageCount == nil {
		return nil, false
	}
	return o.LcpUsageCount, true
}

// HasLcpUsageCount returns a boolean if a field has been set.
func (o *VnicVnicTemplateAllOf) HasLcpUsageCount() bool {
	if o != nil && o.LcpUsageCount != nil {
		return true
	}

	return false
}

// SetLcpUsageCount gets a reference to the given int64 and assigns it to the LcpUsageCount field.
func (o *VnicVnicTemplateAllOf) SetLcpUsageCount(v int64) {
	o.LcpUsageCount = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *VnicVnicTemplateAllOf) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VnicVnicTemplateAllOf) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *VnicVnicTemplateAllOf) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *VnicVnicTemplateAllOf) SetName(v string) {
	o.Name = &v
}

// GetPeerVnicName returns the PeerVnicName field value if set, zero value otherwise.
func (o *VnicVnicTemplateAllOf) GetPeerVnicName() string {
	if o == nil || o.PeerVnicName == nil {
		var ret string
		return ret
	}
	return *o.PeerVnicName
}

// GetPeerVnicNameOk returns a tuple with the PeerVnicName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VnicVnicTemplateAllOf) GetPeerVnicNameOk() (*string, bool) {
	if o == nil || o.PeerVnicName == nil {
		return nil, false
	}
	return o.PeerVnicName, true
}

// HasPeerVnicName returns a boolean if a field has been set.
func (o *VnicVnicTemplateAllOf) HasPeerVnicName() bool {
	if o != nil && o.PeerVnicName != nil {
		return true
	}

	return false
}

// SetPeerVnicName gets a reference to the given string and assigns it to the PeerVnicName field.
func (o *VnicVnicTemplateAllOf) SetPeerVnicName(v string) {
	o.PeerVnicName = &v
}

// GetSwitchId returns the SwitchId field value if set, zero value otherwise.
func (o *VnicVnicTemplateAllOf) GetSwitchId() string {
	if o == nil || o.SwitchId == nil {
		var ret string
		return ret
	}
	return *o.SwitchId
}

// GetSwitchIdOk returns a tuple with the SwitchId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VnicVnicTemplateAllOf) GetSwitchIdOk() (*string, bool) {
	if o == nil || o.SwitchId == nil {
		return nil, false
	}
	return o.SwitchId, true
}

// HasSwitchId returns a boolean if a field has been set.
func (o *VnicVnicTemplateAllOf) HasSwitchId() bool {
	if o != nil && o.SwitchId != nil {
		return true
	}

	return false
}

// SetSwitchId gets a reference to the given string and assigns it to the SwitchId field.
func (o *VnicVnicTemplateAllOf) SetSwitchId(v string) {
	o.SwitchId = &v
}

// GetTemplateActions returns the TemplateActions field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VnicVnicTemplateAllOf) GetTemplateActions() []MotemplateActionEntry {
	if o == nil {
		var ret []MotemplateActionEntry
		return ret
	}
	return o.TemplateActions
}

// GetTemplateActionsOk returns a tuple with the TemplateActions field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VnicVnicTemplateAllOf) GetTemplateActionsOk() ([]MotemplateActionEntry, bool) {
	if o == nil || o.TemplateActions == nil {
		return nil, false
	}
	return o.TemplateActions, true
}

// HasTemplateActions returns a boolean if a field has been set.
func (o *VnicVnicTemplateAllOf) HasTemplateActions() bool {
	if o != nil && o.TemplateActions != nil {
		return true
	}

	return false
}

// SetTemplateActions gets a reference to the given []MotemplateActionEntry and assigns it to the TemplateActions field.
func (o *VnicVnicTemplateAllOf) SetTemplateActions(v []MotemplateActionEntry) {
	o.TemplateActions = v
}

// GetUsageCount returns the UsageCount field value if set, zero value otherwise.
func (o *VnicVnicTemplateAllOf) GetUsageCount() int64 {
	if o == nil || o.UsageCount == nil {
		var ret int64
		return ret
	}
	return *o.UsageCount
}

// GetUsageCountOk returns a tuple with the UsageCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VnicVnicTemplateAllOf) GetUsageCountOk() (*int64, bool) {
	if o == nil || o.UsageCount == nil {
		return nil, false
	}
	return o.UsageCount, true
}

// HasUsageCount returns a boolean if a field has been set.
func (o *VnicVnicTemplateAllOf) HasUsageCount() bool {
	if o != nil && o.UsageCount != nil {
		return true
	}

	return false
}

// SetUsageCount gets a reference to the given int64 and assigns it to the UsageCount field.
func (o *VnicVnicTemplateAllOf) SetUsageCount(v int64) {
	o.UsageCount = &v
}

// GetOrganization returns the Organization field value if set, zero value otherwise.
func (o *VnicVnicTemplateAllOf) GetOrganization() OrganizationOrganizationRelationship {
	if o == nil || o.Organization == nil {
		var ret OrganizationOrganizationRelationship
		return ret
	}
	return *o.Organization
}

// GetOrganizationOk returns a tuple with the Organization field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VnicVnicTemplateAllOf) GetOrganizationOk() (*OrganizationOrganizationRelationship, bool) {
	if o == nil || o.Organization == nil {
		return nil, false
	}
	return o.Organization, true
}

// HasOrganization returns a boolean if a field has been set.
func (o *VnicVnicTemplateAllOf) HasOrganization() bool {
	if o != nil && o.Organization != nil {
		return true
	}

	return false
}

// SetOrganization gets a reference to the given OrganizationOrganizationRelationship and assigns it to the Organization field.
func (o *VnicVnicTemplateAllOf) SetOrganization(v OrganizationOrganizationRelationship) {
	o.Organization = &v
}

func (o VnicVnicTemplateAllOf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["ClassId"] = o.ClassId
	}
	if true {
		toSerialize["ObjectType"] = o.ObjectType
	}
	if o.Description != nil {
		toSerialize["Description"] = o.Description
	}
	if o.EnableOverride != nil {
		toSerialize["EnableOverride"] = o.EnableOverride
	}
	if o.LcpUsageCount != nil {
		toSerialize["LcpUsageCount"] = o.LcpUsageCount
	}
	if o.Name != nil {
		toSerialize["Name"] = o.Name
	}
	if o.PeerVnicName != nil {
		toSerialize["PeerVnicName"] = o.PeerVnicName
	}
	if o.SwitchId != nil {
		toSerialize["SwitchId"] = o.SwitchId
	}
	if o.TemplateActions != nil {
		toSerialize["TemplateActions"] = o.TemplateActions
	}
	if o.UsageCount != nil {
		toSerialize["UsageCount"] = o.UsageCount
	}
	if o.Organization != nil {
		toSerialize["Organization"] = o.Organization
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *VnicVnicTemplateAllOf) UnmarshalJSON(bytes []byte) (err error) {
	varVnicVnicTemplateAllOf := _VnicVnicTemplateAllOf{}

	if err = json.Unmarshal(bytes, &varVnicVnicTemplateAllOf); err == nil {
		*o = VnicVnicTemplateAllOf(varVnicVnicTemplateAllOf)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "ClassId")
		delete(additionalProperties, "ObjectType")
		delete(additionalProperties, "Description")
		delete(additionalProperties, "EnableOverride")
		delete(additionalProperties, "LcpUsageCount")
		delete(additionalProperties, "Name")
		delete(additionalProperties, "PeerVnicName")
		delete(additionalProperties, "SwitchId")
		delete(additionalProperties, "TemplateActions")
		delete(additionalProperties, "UsageCount")
		delete(additionalProperties, "Organization")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableVnicVnicTemplateAllOf struct {
	value *VnicVnicTemplateAllOf
	isSet bool
}

func (v NullableVnicVnicTemplateAllOf) Get() *VnicVnicTemplateAllOf {
	return v.value
}

func (v *NullableVnicVnicTemplateAllOf) Set(val *VnicVnicTemplateAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableVnicVnicTemplateAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableVnicVnicTemplateAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVnicVnicTemplateAllOf(val *VnicVnicTemplateAllOf) *NullableVnicVnicTemplateAllOf {
	return &NullableVnicVnicTemplateAllOf{value: val, isSet: true}
}

func (v NullableVnicVnicTemplateAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVnicVnicTemplateAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
