/*
Cisco Intersight

Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations. The Intersight OpenAPI document defines the complete set of properties that are returned in the HTTP response. From that perspective, a client can expect that no additional properties are returned, unless these properties are explicitly defined in the OpenAPI document. However, when a client uses an older version of the Intersight OpenAPI document, the server may send additional properties because the software is more recent than the client. In that case, the client may receive properties that it does not know about. Some generated SDKs perform a strict validation of the HTTP response body against the OpenAPI document.

API version: 1.0.11-2025101412
Contact: intersight@cisco.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package intersight

import (
	"encoding/json"
	"fmt"
	"reflect"
	"strings"
)

// checks if the BlueprintGeneratedObjectMetadata type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BlueprintGeneratedObjectMetadata{}

// BlueprintGeneratedObjectMetadata Type to capture the details of the generated objects.
type BlueprintGeneratedObjectMetadata struct {
	MoBaseComplexType
	// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.
	ClassId string `json:"ClassId"`
	// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
	ObjectType string   `json:"ObjectType"`
	Conditions []string `json:"Conditions,omitempty"`
	// Name for the generated object. The name given for reference in later parts of the blueprint definition. Name can only contain letters (a-z, A-Z), numbers (0-9), hyphen (-) or an underscore (_). The first and last character in name must be an alphanumeric character.
	Name *string `json:"Name,omitempty" validate:"regexp=^[a-zA-Z0-9]+([a-zA-Z0-9-_]*[a-zA-Z0-9])*$"`
	// A template for controlling loop behavior when generating multiple instances of the generated object. The resolved value of the template is expected to be an integer which is used to determine the number of iterations in the loop. Each iteration creates a new instance of the generated object.
	ObjectIteration       *string                                            `json:"ObjectIteration,omitempty"`
	ObjectSource          NullableBlueprintBaseGeneratedObjectSourceMetadata `json:"ObjectSource,omitempty"`
	PreGenerateOperations []BlueprintPreGenerateOperation                    `json:"PreGenerateOperations,omitempty"`
	PropertyIteration     []BlueprintPropertyIteration                       `json:"PropertyIteration,omitempty"`
	// A list of key value pairs where key is the property path and value is the template to derive the value.
	PropertyParameters interface{} `json:"PropertyParameters,omitempty"`
	// The flag to indicate if this object must be generated for this blueprint.
	Required             *bool `json:"Required,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _BlueprintGeneratedObjectMetadata BlueprintGeneratedObjectMetadata

// NewBlueprintGeneratedObjectMetadata instantiates a new BlueprintGeneratedObjectMetadata object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBlueprintGeneratedObjectMetadata(classId string, objectType string) *BlueprintGeneratedObjectMetadata {
	this := BlueprintGeneratedObjectMetadata{}
	this.ClassId = classId
	this.ObjectType = objectType
	var required bool = false
	this.Required = &required
	return &this
}

// NewBlueprintGeneratedObjectMetadataWithDefaults instantiates a new BlueprintGeneratedObjectMetadata object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBlueprintGeneratedObjectMetadataWithDefaults() *BlueprintGeneratedObjectMetadata {
	this := BlueprintGeneratedObjectMetadata{}
	var classId string = "blueprint.GeneratedObjectMetadata"
	this.ClassId = classId
	var objectType string = "blueprint.GeneratedObjectMetadata"
	this.ObjectType = objectType
	var required bool = false
	this.Required = &required
	return &this
}

// GetClassId returns the ClassId field value
func (o *BlueprintGeneratedObjectMetadata) GetClassId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ClassId
}

// GetClassIdOk returns a tuple with the ClassId field value
// and a boolean to check if the value has been set.
func (o *BlueprintGeneratedObjectMetadata) GetClassIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ClassId, true
}

// SetClassId sets field value
func (o *BlueprintGeneratedObjectMetadata) SetClassId(v string) {
	o.ClassId = v
}

// GetDefaultClassId returns the default value "blueprint.GeneratedObjectMetadata" of the ClassId field.
func (o *BlueprintGeneratedObjectMetadata) GetDefaultClassId() interface{} {
	return "blueprint.GeneratedObjectMetadata"
}

// GetObjectType returns the ObjectType field value
func (o *BlueprintGeneratedObjectMetadata) GetObjectType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ObjectType
}

// GetObjectTypeOk returns a tuple with the ObjectType field value
// and a boolean to check if the value has been set.
func (o *BlueprintGeneratedObjectMetadata) GetObjectTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ObjectType, true
}

// SetObjectType sets field value
func (o *BlueprintGeneratedObjectMetadata) SetObjectType(v string) {
	o.ObjectType = v
}

// GetDefaultObjectType returns the default value "blueprint.GeneratedObjectMetadata" of the ObjectType field.
func (o *BlueprintGeneratedObjectMetadata) GetDefaultObjectType() interface{} {
	return "blueprint.GeneratedObjectMetadata"
}

// GetConditions returns the Conditions field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BlueprintGeneratedObjectMetadata) GetConditions() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.Conditions
}

// GetConditionsOk returns a tuple with the Conditions field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BlueprintGeneratedObjectMetadata) GetConditionsOk() ([]string, bool) {
	if o == nil || IsNil(o.Conditions) {
		return nil, false
	}
	return o.Conditions, true
}

// HasConditions returns a boolean if a field has been set.
func (o *BlueprintGeneratedObjectMetadata) HasConditions() bool {
	if o != nil && !IsNil(o.Conditions) {
		return true
	}

	return false
}

// SetConditions gets a reference to the given []string and assigns it to the Conditions field.
func (o *BlueprintGeneratedObjectMetadata) SetConditions(v []string) {
	o.Conditions = v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *BlueprintGeneratedObjectMetadata) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlueprintGeneratedObjectMetadata) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *BlueprintGeneratedObjectMetadata) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *BlueprintGeneratedObjectMetadata) SetName(v string) {
	o.Name = &v
}

// GetObjectIteration returns the ObjectIteration field value if set, zero value otherwise.
func (o *BlueprintGeneratedObjectMetadata) GetObjectIteration() string {
	if o == nil || IsNil(o.ObjectIteration) {
		var ret string
		return ret
	}
	return *o.ObjectIteration
}

// GetObjectIterationOk returns a tuple with the ObjectIteration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlueprintGeneratedObjectMetadata) GetObjectIterationOk() (*string, bool) {
	if o == nil || IsNil(o.ObjectIteration) {
		return nil, false
	}
	return o.ObjectIteration, true
}

// HasObjectIteration returns a boolean if a field has been set.
func (o *BlueprintGeneratedObjectMetadata) HasObjectIteration() bool {
	if o != nil && !IsNil(o.ObjectIteration) {
		return true
	}

	return false
}

// SetObjectIteration gets a reference to the given string and assigns it to the ObjectIteration field.
func (o *BlueprintGeneratedObjectMetadata) SetObjectIteration(v string) {
	o.ObjectIteration = &v
}

// GetObjectSource returns the ObjectSource field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BlueprintGeneratedObjectMetadata) GetObjectSource() BlueprintBaseGeneratedObjectSourceMetadata {
	if o == nil || IsNil(o.ObjectSource.Get()) {
		var ret BlueprintBaseGeneratedObjectSourceMetadata
		return ret
	}
	return *o.ObjectSource.Get()
}

// GetObjectSourceOk returns a tuple with the ObjectSource field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BlueprintGeneratedObjectMetadata) GetObjectSourceOk() (*BlueprintBaseGeneratedObjectSourceMetadata, bool) {
	if o == nil {
		return nil, false
	}
	return o.ObjectSource.Get(), o.ObjectSource.IsSet()
}

// HasObjectSource returns a boolean if a field has been set.
func (o *BlueprintGeneratedObjectMetadata) HasObjectSource() bool {
	if o != nil && o.ObjectSource.IsSet() {
		return true
	}

	return false
}

// SetObjectSource gets a reference to the given NullableBlueprintBaseGeneratedObjectSourceMetadata and assigns it to the ObjectSource field.
func (o *BlueprintGeneratedObjectMetadata) SetObjectSource(v BlueprintBaseGeneratedObjectSourceMetadata) {
	o.ObjectSource.Set(&v)
}

// SetObjectSourceNil sets the value for ObjectSource to be an explicit nil
func (o *BlueprintGeneratedObjectMetadata) SetObjectSourceNil() {
	o.ObjectSource.Set(nil)
}

// UnsetObjectSource ensures that no value is present for ObjectSource, not even an explicit nil
func (o *BlueprintGeneratedObjectMetadata) UnsetObjectSource() {
	o.ObjectSource.Unset()
}

// GetPreGenerateOperations returns the PreGenerateOperations field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BlueprintGeneratedObjectMetadata) GetPreGenerateOperations() []BlueprintPreGenerateOperation {
	if o == nil {
		var ret []BlueprintPreGenerateOperation
		return ret
	}
	return o.PreGenerateOperations
}

// GetPreGenerateOperationsOk returns a tuple with the PreGenerateOperations field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BlueprintGeneratedObjectMetadata) GetPreGenerateOperationsOk() ([]BlueprintPreGenerateOperation, bool) {
	if o == nil || IsNil(o.PreGenerateOperations) {
		return nil, false
	}
	return o.PreGenerateOperations, true
}

// HasPreGenerateOperations returns a boolean if a field has been set.
func (o *BlueprintGeneratedObjectMetadata) HasPreGenerateOperations() bool {
	if o != nil && !IsNil(o.PreGenerateOperations) {
		return true
	}

	return false
}

// SetPreGenerateOperations gets a reference to the given []BlueprintPreGenerateOperation and assigns it to the PreGenerateOperations field.
func (o *BlueprintGeneratedObjectMetadata) SetPreGenerateOperations(v []BlueprintPreGenerateOperation) {
	o.PreGenerateOperations = v
}

// GetPropertyIteration returns the PropertyIteration field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BlueprintGeneratedObjectMetadata) GetPropertyIteration() []BlueprintPropertyIteration {
	if o == nil {
		var ret []BlueprintPropertyIteration
		return ret
	}
	return o.PropertyIteration
}

// GetPropertyIterationOk returns a tuple with the PropertyIteration field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BlueprintGeneratedObjectMetadata) GetPropertyIterationOk() ([]BlueprintPropertyIteration, bool) {
	if o == nil || IsNil(o.PropertyIteration) {
		return nil, false
	}
	return o.PropertyIteration, true
}

// HasPropertyIteration returns a boolean if a field has been set.
func (o *BlueprintGeneratedObjectMetadata) HasPropertyIteration() bool {
	if o != nil && !IsNil(o.PropertyIteration) {
		return true
	}

	return false
}

// SetPropertyIteration gets a reference to the given []BlueprintPropertyIteration and assigns it to the PropertyIteration field.
func (o *BlueprintGeneratedObjectMetadata) SetPropertyIteration(v []BlueprintPropertyIteration) {
	o.PropertyIteration = v
}

// GetPropertyParameters returns the PropertyParameters field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BlueprintGeneratedObjectMetadata) GetPropertyParameters() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.PropertyParameters
}

// GetPropertyParametersOk returns a tuple with the PropertyParameters field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BlueprintGeneratedObjectMetadata) GetPropertyParametersOk() (*interface{}, bool) {
	if o == nil || IsNil(o.PropertyParameters) {
		return nil, false
	}
	return &o.PropertyParameters, true
}

// HasPropertyParameters returns a boolean if a field has been set.
func (o *BlueprintGeneratedObjectMetadata) HasPropertyParameters() bool {
	if o != nil && !IsNil(o.PropertyParameters) {
		return true
	}

	return false
}

// SetPropertyParameters gets a reference to the given interface{} and assigns it to the PropertyParameters field.
func (o *BlueprintGeneratedObjectMetadata) SetPropertyParameters(v interface{}) {
	o.PropertyParameters = v
}

// GetRequired returns the Required field value if set, zero value otherwise.
func (o *BlueprintGeneratedObjectMetadata) GetRequired() bool {
	if o == nil || IsNil(o.Required) {
		var ret bool
		return ret
	}
	return *o.Required
}

// GetRequiredOk returns a tuple with the Required field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlueprintGeneratedObjectMetadata) GetRequiredOk() (*bool, bool) {
	if o == nil || IsNil(o.Required) {
		return nil, false
	}
	return o.Required, true
}

// HasRequired returns a boolean if a field has been set.
func (o *BlueprintGeneratedObjectMetadata) HasRequired() bool {
	if o != nil && !IsNil(o.Required) {
		return true
	}

	return false
}

// SetRequired gets a reference to the given bool and assigns it to the Required field.
func (o *BlueprintGeneratedObjectMetadata) SetRequired(v bool) {
	o.Required = &v
}

func (o BlueprintGeneratedObjectMetadata) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BlueprintGeneratedObjectMetadata) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	serializedMoBaseComplexType, errMoBaseComplexType := json.Marshal(o.MoBaseComplexType)
	if errMoBaseComplexType != nil {
		return map[string]interface{}{}, errMoBaseComplexType
	}
	errMoBaseComplexType = json.Unmarshal([]byte(serializedMoBaseComplexType), &toSerialize)
	if errMoBaseComplexType != nil {
		return map[string]interface{}{}, errMoBaseComplexType
	}
	if _, exists := toSerialize["ClassId"]; !exists {
		toSerialize["ClassId"] = o.GetDefaultClassId()
	}
	toSerialize["ClassId"] = o.ClassId
	if _, exists := toSerialize["ObjectType"]; !exists {
		toSerialize["ObjectType"] = o.GetDefaultObjectType()
	}
	toSerialize["ObjectType"] = o.ObjectType
	if o.Conditions != nil {
		toSerialize["Conditions"] = o.Conditions
	}
	if !IsNil(o.Name) {
		toSerialize["Name"] = o.Name
	}
	if !IsNil(o.ObjectIteration) {
		toSerialize["ObjectIteration"] = o.ObjectIteration
	}
	if o.ObjectSource.IsSet() {
		toSerialize["ObjectSource"] = o.ObjectSource.Get()
	}
	if o.PreGenerateOperations != nil {
		toSerialize["PreGenerateOperations"] = o.PreGenerateOperations
	}
	if o.PropertyIteration != nil {
		toSerialize["PropertyIteration"] = o.PropertyIteration
	}
	if o.PropertyParameters != nil {
		toSerialize["PropertyParameters"] = o.PropertyParameters
	}
	if !IsNil(o.Required) {
		toSerialize["Required"] = o.Required
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *BlueprintGeneratedObjectMetadata) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"ClassId",
		"ObjectType",
	}

	// defaultValueFuncMap captures the default values for required properties.
	// These values are used when required properties are missing from the payload.
	defaultValueFuncMap := map[string]func() interface{}{
		"ClassId":    o.GetDefaultClassId,
		"ObjectType": o.GetDefaultObjectType,
	}
	var defaultValueApplied bool
	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			if _, ok := defaultValueFuncMap[requiredProperty]; ok {
				allProperties[requiredProperty] = defaultValueFuncMap[requiredProperty]()
				defaultValueApplied = true
			}
		}
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	if defaultValueApplied {
		data, err = json.Marshal(allProperties)
		if err != nil {
			return err
		}
	}
	type BlueprintGeneratedObjectMetadataWithoutEmbeddedStruct struct {
		// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.
		ClassId string `json:"ClassId"`
		// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
		ObjectType string   `json:"ObjectType"`
		Conditions []string `json:"Conditions,omitempty"`
		// Name for the generated object. The name given for reference in later parts of the blueprint definition. Name can only contain letters (a-z, A-Z), numbers (0-9), hyphen (-) or an underscore (_). The first and last character in name must be an alphanumeric character.
		Name *string `json:"Name,omitempty" validate:"regexp=^[a-zA-Z0-9]+([a-zA-Z0-9-_]*[a-zA-Z0-9])*$"`
		// A template for controlling loop behavior when generating multiple instances of the generated object. The resolved value of the template is expected to be an integer which is used to determine the number of iterations in the loop. Each iteration creates a new instance of the generated object.
		ObjectIteration       *string                                            `json:"ObjectIteration,omitempty"`
		ObjectSource          NullableBlueprintBaseGeneratedObjectSourceMetadata `json:"ObjectSource,omitempty"`
		PreGenerateOperations []BlueprintPreGenerateOperation                    `json:"PreGenerateOperations,omitempty"`
		PropertyIteration     []BlueprintPropertyIteration                       `json:"PropertyIteration,omitempty"`
		// A list of key value pairs where key is the property path and value is the template to derive the value.
		PropertyParameters interface{} `json:"PropertyParameters,omitempty"`
		// The flag to indicate if this object must be generated for this blueprint.
		Required *bool `json:"Required,omitempty"`
	}

	varBlueprintGeneratedObjectMetadataWithoutEmbeddedStruct := BlueprintGeneratedObjectMetadataWithoutEmbeddedStruct{}

	err = json.Unmarshal(data, &varBlueprintGeneratedObjectMetadataWithoutEmbeddedStruct)
	if err == nil {
		varBlueprintGeneratedObjectMetadata := _BlueprintGeneratedObjectMetadata{}
		varBlueprintGeneratedObjectMetadata.ClassId = varBlueprintGeneratedObjectMetadataWithoutEmbeddedStruct.ClassId
		varBlueprintGeneratedObjectMetadata.ObjectType = varBlueprintGeneratedObjectMetadataWithoutEmbeddedStruct.ObjectType
		varBlueprintGeneratedObjectMetadata.Conditions = varBlueprintGeneratedObjectMetadataWithoutEmbeddedStruct.Conditions
		varBlueprintGeneratedObjectMetadata.Name = varBlueprintGeneratedObjectMetadataWithoutEmbeddedStruct.Name
		varBlueprintGeneratedObjectMetadata.ObjectIteration = varBlueprintGeneratedObjectMetadataWithoutEmbeddedStruct.ObjectIteration
		varBlueprintGeneratedObjectMetadata.ObjectSource = varBlueprintGeneratedObjectMetadataWithoutEmbeddedStruct.ObjectSource
		varBlueprintGeneratedObjectMetadata.PreGenerateOperations = varBlueprintGeneratedObjectMetadataWithoutEmbeddedStruct.PreGenerateOperations
		varBlueprintGeneratedObjectMetadata.PropertyIteration = varBlueprintGeneratedObjectMetadataWithoutEmbeddedStruct.PropertyIteration
		varBlueprintGeneratedObjectMetadata.PropertyParameters = varBlueprintGeneratedObjectMetadataWithoutEmbeddedStruct.PropertyParameters
		varBlueprintGeneratedObjectMetadata.Required = varBlueprintGeneratedObjectMetadataWithoutEmbeddedStruct.Required
		*o = BlueprintGeneratedObjectMetadata(varBlueprintGeneratedObjectMetadata)
	} else {
		return err
	}

	varBlueprintGeneratedObjectMetadata := _BlueprintGeneratedObjectMetadata{}

	err = json.Unmarshal(data, &varBlueprintGeneratedObjectMetadata)
	if err == nil {
		o.MoBaseComplexType = varBlueprintGeneratedObjectMetadata.MoBaseComplexType
	} else {
		return err
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "ClassId")
		delete(additionalProperties, "ObjectType")
		delete(additionalProperties, "Conditions")
		delete(additionalProperties, "Name")
		delete(additionalProperties, "ObjectIteration")
		delete(additionalProperties, "ObjectSource")
		delete(additionalProperties, "PreGenerateOperations")
		delete(additionalProperties, "PropertyIteration")
		delete(additionalProperties, "PropertyParameters")
		delete(additionalProperties, "Required")

		// remove fields from embedded structs
		reflectMoBaseComplexType := reflect.ValueOf(o.MoBaseComplexType)
		for i := 0; i < reflectMoBaseComplexType.Type().NumField(); i++ {
			t := reflectMoBaseComplexType.Type().Field(i)

			if jsonTag := t.Tag.Get("json"); jsonTag != "" {
				fieldName := ""
				if commaIdx := strings.Index(jsonTag, ","); commaIdx > 0 {
					fieldName = jsonTag[:commaIdx]
				} else {
					fieldName = jsonTag
				}
				if fieldName != "AdditionalProperties" {
					delete(additionalProperties, fieldName)
				}
			}
		}

		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableBlueprintGeneratedObjectMetadata struct {
	value *BlueprintGeneratedObjectMetadata
	isSet bool
}

func (v NullableBlueprintGeneratedObjectMetadata) Get() *BlueprintGeneratedObjectMetadata {
	return v.value
}

func (v *NullableBlueprintGeneratedObjectMetadata) Set(val *BlueprintGeneratedObjectMetadata) {
	v.value = val
	v.isSet = true
}

func (v NullableBlueprintGeneratedObjectMetadata) IsSet() bool {
	return v.isSet
}

func (v *NullableBlueprintGeneratedObjectMetadata) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBlueprintGeneratedObjectMetadata(val *BlueprintGeneratedObjectMetadata) *NullableBlueprintGeneratedObjectMetadata {
	return &NullableBlueprintGeneratedObjectMetadata{value: val, isSet: true}
}

func (v NullableBlueprintGeneratedObjectMetadata) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBlueprintGeneratedObjectMetadata) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
