/*
Cisco Intersight

Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations. The Intersight OpenAPI document defines the complete set of properties that are returned in the HTTP response. From that perspective, a client can expect that no additional properties are returned, unless these properties are explicitly defined in the OpenAPI document. However, when a client uses an older version of the Intersight OpenAPI document, the server may send additional properties because the software is more recent than the client. In that case, the client may receive properties that it does not know about. Some generated SDKs perform a strict validation of the HTTP response body against the OpenAPI document.

API version: 1.0.11-18775
Contact: intersight@cisco.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package intersight

import (
	"encoding/json"
	"fmt"
	"reflect"
	"strings"
)

// checks if the KubernetesHttpProxyPolicy type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &KubernetesHttpProxyPolicy{}

// KubernetesHttpProxyPolicy A policy specifying HTTP and HTTPS proxy configuration.
type KubernetesHttpProxyPolicy struct {
	PolicyAbstractPolicy
	// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.
	ClassId string `json:"ClassId"`
	// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
	ObjectType           string                                       `json:"ObjectType"`
	HttpProxy            NullableKubernetesProxyConfig                `json:"HttpProxy,omitempty"`
	HttpsProxy           NullableKubernetesProxyConfig                `json:"HttpsProxy,omitempty"`
	NoProxy              []string                                     `json:"NoProxy,omitempty"`
	Organization         NullableOrganizationOrganizationRelationship `json:"Organization,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _KubernetesHttpProxyPolicy KubernetesHttpProxyPolicy

// NewKubernetesHttpProxyPolicy instantiates a new KubernetesHttpProxyPolicy object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewKubernetesHttpProxyPolicy(classId string, objectType string) *KubernetesHttpProxyPolicy {
	this := KubernetesHttpProxyPolicy{}
	this.ClassId = classId
	this.ObjectType = objectType
	return &this
}

// NewKubernetesHttpProxyPolicyWithDefaults instantiates a new KubernetesHttpProxyPolicy object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewKubernetesHttpProxyPolicyWithDefaults() *KubernetesHttpProxyPolicy {
	this := KubernetesHttpProxyPolicy{}
	var classId string = "kubernetes.HttpProxyPolicy"
	this.ClassId = classId
	var objectType string = "kubernetes.HttpProxyPolicy"
	this.ObjectType = objectType
	return &this
}

// GetClassId returns the ClassId field value
func (o *KubernetesHttpProxyPolicy) GetClassId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ClassId
}

// GetClassIdOk returns a tuple with the ClassId field value
// and a boolean to check if the value has been set.
func (o *KubernetesHttpProxyPolicy) GetClassIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ClassId, true
}

// SetClassId sets field value
func (o *KubernetesHttpProxyPolicy) SetClassId(v string) {
	o.ClassId = v
}

// GetDefaultClassId returns the default value "kubernetes.HttpProxyPolicy" of the ClassId field.
func (o *KubernetesHttpProxyPolicy) GetDefaultClassId() interface{} {
	return "kubernetes.HttpProxyPolicy"
}

// GetObjectType returns the ObjectType field value
func (o *KubernetesHttpProxyPolicy) GetObjectType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ObjectType
}

// GetObjectTypeOk returns a tuple with the ObjectType field value
// and a boolean to check if the value has been set.
func (o *KubernetesHttpProxyPolicy) GetObjectTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ObjectType, true
}

// SetObjectType sets field value
func (o *KubernetesHttpProxyPolicy) SetObjectType(v string) {
	o.ObjectType = v
}

// GetDefaultObjectType returns the default value "kubernetes.HttpProxyPolicy" of the ObjectType field.
func (o *KubernetesHttpProxyPolicy) GetDefaultObjectType() interface{} {
	return "kubernetes.HttpProxyPolicy"
}

// GetHttpProxy returns the HttpProxy field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *KubernetesHttpProxyPolicy) GetHttpProxy() KubernetesProxyConfig {
	if o == nil || IsNil(o.HttpProxy.Get()) {
		var ret KubernetesProxyConfig
		return ret
	}
	return *o.HttpProxy.Get()
}

// GetHttpProxyOk returns a tuple with the HttpProxy field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *KubernetesHttpProxyPolicy) GetHttpProxyOk() (*KubernetesProxyConfig, bool) {
	if o == nil {
		return nil, false
	}
	return o.HttpProxy.Get(), o.HttpProxy.IsSet()
}

// HasHttpProxy returns a boolean if a field has been set.
func (o *KubernetesHttpProxyPolicy) HasHttpProxy() bool {
	if o != nil && o.HttpProxy.IsSet() {
		return true
	}

	return false
}

// SetHttpProxy gets a reference to the given NullableKubernetesProxyConfig and assigns it to the HttpProxy field.
func (o *KubernetesHttpProxyPolicy) SetHttpProxy(v KubernetesProxyConfig) {
	o.HttpProxy.Set(&v)
}

// SetHttpProxyNil sets the value for HttpProxy to be an explicit nil
func (o *KubernetesHttpProxyPolicy) SetHttpProxyNil() {
	o.HttpProxy.Set(nil)
}

// UnsetHttpProxy ensures that no value is present for HttpProxy, not even an explicit nil
func (o *KubernetesHttpProxyPolicy) UnsetHttpProxy() {
	o.HttpProxy.Unset()
}

// GetHttpsProxy returns the HttpsProxy field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *KubernetesHttpProxyPolicy) GetHttpsProxy() KubernetesProxyConfig {
	if o == nil || IsNil(o.HttpsProxy.Get()) {
		var ret KubernetesProxyConfig
		return ret
	}
	return *o.HttpsProxy.Get()
}

// GetHttpsProxyOk returns a tuple with the HttpsProxy field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *KubernetesHttpProxyPolicy) GetHttpsProxyOk() (*KubernetesProxyConfig, bool) {
	if o == nil {
		return nil, false
	}
	return o.HttpsProxy.Get(), o.HttpsProxy.IsSet()
}

// HasHttpsProxy returns a boolean if a field has been set.
func (o *KubernetesHttpProxyPolicy) HasHttpsProxy() bool {
	if o != nil && o.HttpsProxy.IsSet() {
		return true
	}

	return false
}

// SetHttpsProxy gets a reference to the given NullableKubernetesProxyConfig and assigns it to the HttpsProxy field.
func (o *KubernetesHttpProxyPolicy) SetHttpsProxy(v KubernetesProxyConfig) {
	o.HttpsProxy.Set(&v)
}

// SetHttpsProxyNil sets the value for HttpsProxy to be an explicit nil
func (o *KubernetesHttpProxyPolicy) SetHttpsProxyNil() {
	o.HttpsProxy.Set(nil)
}

// UnsetHttpsProxy ensures that no value is present for HttpsProxy, not even an explicit nil
func (o *KubernetesHttpProxyPolicy) UnsetHttpsProxy() {
	o.HttpsProxy.Unset()
}

// GetNoProxy returns the NoProxy field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *KubernetesHttpProxyPolicy) GetNoProxy() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.NoProxy
}

// GetNoProxyOk returns a tuple with the NoProxy field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *KubernetesHttpProxyPolicy) GetNoProxyOk() ([]string, bool) {
	if o == nil || IsNil(o.NoProxy) {
		return nil, false
	}
	return o.NoProxy, true
}

// HasNoProxy returns a boolean if a field has been set.
func (o *KubernetesHttpProxyPolicy) HasNoProxy() bool {
	if o != nil && !IsNil(o.NoProxy) {
		return true
	}

	return false
}

// SetNoProxy gets a reference to the given []string and assigns it to the NoProxy field.
func (o *KubernetesHttpProxyPolicy) SetNoProxy(v []string) {
	o.NoProxy = v
}

// GetOrganization returns the Organization field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *KubernetesHttpProxyPolicy) GetOrganization() OrganizationOrganizationRelationship {
	if o == nil || IsNil(o.Organization.Get()) {
		var ret OrganizationOrganizationRelationship
		return ret
	}
	return *o.Organization.Get()
}

// GetOrganizationOk returns a tuple with the Organization field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *KubernetesHttpProxyPolicy) GetOrganizationOk() (*OrganizationOrganizationRelationship, bool) {
	if o == nil {
		return nil, false
	}
	return o.Organization.Get(), o.Organization.IsSet()
}

// HasOrganization returns a boolean if a field has been set.
func (o *KubernetesHttpProxyPolicy) HasOrganization() bool {
	if o != nil && o.Organization.IsSet() {
		return true
	}

	return false
}

// SetOrganization gets a reference to the given NullableOrganizationOrganizationRelationship and assigns it to the Organization field.
func (o *KubernetesHttpProxyPolicy) SetOrganization(v OrganizationOrganizationRelationship) {
	o.Organization.Set(&v)
}

// SetOrganizationNil sets the value for Organization to be an explicit nil
func (o *KubernetesHttpProxyPolicy) SetOrganizationNil() {
	o.Organization.Set(nil)
}

// UnsetOrganization ensures that no value is present for Organization, not even an explicit nil
func (o *KubernetesHttpProxyPolicy) UnsetOrganization() {
	o.Organization.Unset()
}

func (o KubernetesHttpProxyPolicy) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o KubernetesHttpProxyPolicy) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	serializedPolicyAbstractPolicy, errPolicyAbstractPolicy := json.Marshal(o.PolicyAbstractPolicy)
	if errPolicyAbstractPolicy != nil {
		return map[string]interface{}{}, errPolicyAbstractPolicy
	}
	errPolicyAbstractPolicy = json.Unmarshal([]byte(serializedPolicyAbstractPolicy), &toSerialize)
	if errPolicyAbstractPolicy != nil {
		return map[string]interface{}{}, errPolicyAbstractPolicy
	}
	if _, exists := toSerialize["ClassId"]; !exists {
		toSerialize["ClassId"] = o.GetDefaultClassId()
	}
	toSerialize["ClassId"] = o.ClassId
	if _, exists := toSerialize["ObjectType"]; !exists {
		toSerialize["ObjectType"] = o.GetDefaultObjectType()
	}
	toSerialize["ObjectType"] = o.ObjectType
	if o.HttpProxy.IsSet() {
		toSerialize["HttpProxy"] = o.HttpProxy.Get()
	}
	if o.HttpsProxy.IsSet() {
		toSerialize["HttpsProxy"] = o.HttpsProxy.Get()
	}
	if o.NoProxy != nil {
		toSerialize["NoProxy"] = o.NoProxy
	}
	if o.Organization.IsSet() {
		toSerialize["Organization"] = o.Organization.Get()
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *KubernetesHttpProxyPolicy) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"ClassId",
		"ObjectType",
	}

	// defaultValueFuncMap captures the default values for required properties.
	// These values are used when required properties are missing from the payload.
	defaultValueFuncMap := map[string]func() interface{}{
		"ClassId":    o.GetDefaultClassId,
		"ObjectType": o.GetDefaultObjectType,
	}
	var defaultValueApplied bool
	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			if _, ok := defaultValueFuncMap[requiredProperty]; ok {
				allProperties[requiredProperty] = defaultValueFuncMap[requiredProperty]()
				defaultValueApplied = true
			}
		}
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	if defaultValueApplied {
		data, err = json.Marshal(allProperties)
		if err != nil {
			return err
		}
	}
	type KubernetesHttpProxyPolicyWithoutEmbeddedStruct struct {
		// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.
		ClassId string `json:"ClassId"`
		// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
		ObjectType   string                                       `json:"ObjectType"`
		HttpProxy    NullableKubernetesProxyConfig                `json:"HttpProxy,omitempty"`
		HttpsProxy   NullableKubernetesProxyConfig                `json:"HttpsProxy,omitempty"`
		NoProxy      []string                                     `json:"NoProxy,omitempty"`
		Organization NullableOrganizationOrganizationRelationship `json:"Organization,omitempty"`
	}

	varKubernetesHttpProxyPolicyWithoutEmbeddedStruct := KubernetesHttpProxyPolicyWithoutEmbeddedStruct{}

	err = json.Unmarshal(data, &varKubernetesHttpProxyPolicyWithoutEmbeddedStruct)
	if err == nil {
		varKubernetesHttpProxyPolicy := _KubernetesHttpProxyPolicy{}
		varKubernetesHttpProxyPolicy.ClassId = varKubernetesHttpProxyPolicyWithoutEmbeddedStruct.ClassId
		varKubernetesHttpProxyPolicy.ObjectType = varKubernetesHttpProxyPolicyWithoutEmbeddedStruct.ObjectType
		varKubernetesHttpProxyPolicy.HttpProxy = varKubernetesHttpProxyPolicyWithoutEmbeddedStruct.HttpProxy
		varKubernetesHttpProxyPolicy.HttpsProxy = varKubernetesHttpProxyPolicyWithoutEmbeddedStruct.HttpsProxy
		varKubernetesHttpProxyPolicy.NoProxy = varKubernetesHttpProxyPolicyWithoutEmbeddedStruct.NoProxy
		varKubernetesHttpProxyPolicy.Organization = varKubernetesHttpProxyPolicyWithoutEmbeddedStruct.Organization
		*o = KubernetesHttpProxyPolicy(varKubernetesHttpProxyPolicy)
	} else {
		return err
	}

	varKubernetesHttpProxyPolicy := _KubernetesHttpProxyPolicy{}

	err = json.Unmarshal(data, &varKubernetesHttpProxyPolicy)
	if err == nil {
		o.PolicyAbstractPolicy = varKubernetesHttpProxyPolicy.PolicyAbstractPolicy
	} else {
		return err
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "ClassId")
		delete(additionalProperties, "ObjectType")
		delete(additionalProperties, "HttpProxy")
		delete(additionalProperties, "HttpsProxy")
		delete(additionalProperties, "NoProxy")
		delete(additionalProperties, "Organization")

		// remove fields from embedded structs
		reflectPolicyAbstractPolicy := reflect.ValueOf(o.PolicyAbstractPolicy)
		for i := 0; i < reflectPolicyAbstractPolicy.Type().NumField(); i++ {
			t := reflectPolicyAbstractPolicy.Type().Field(i)

			if jsonTag := t.Tag.Get("json"); jsonTag != "" {
				fieldName := ""
				if commaIdx := strings.Index(jsonTag, ","); commaIdx > 0 {
					fieldName = jsonTag[:commaIdx]
				} else {
					fieldName = jsonTag
				}
				if fieldName != "AdditionalProperties" {
					delete(additionalProperties, fieldName)
				}
			}
		}

		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableKubernetesHttpProxyPolicy struct {
	value *KubernetesHttpProxyPolicy
	isSet bool
}

func (v NullableKubernetesHttpProxyPolicy) Get() *KubernetesHttpProxyPolicy {
	return v.value
}

func (v *NullableKubernetesHttpProxyPolicy) Set(val *KubernetesHttpProxyPolicy) {
	v.value = val
	v.isSet = true
}

func (v NullableKubernetesHttpProxyPolicy) IsSet() bool {
	return v.isSet
}

func (v *NullableKubernetesHttpProxyPolicy) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableKubernetesHttpProxyPolicy(val *KubernetesHttpProxyPolicy) *NullableKubernetesHttpProxyPolicy {
	return &NullableKubernetesHttpProxyPolicy{value: val, isSet: true}
}

func (v NullableKubernetesHttpProxyPolicy) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableKubernetesHttpProxyPolicy) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
