/*
 * Cisco Intersight
 *
 * Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations. The Intersight OpenAPI document defines the complete set of properties that are returned in the HTTP response. From that perspective, a client can expect that no additional properties are returned, unless these properties are explicitly defined in the OpenAPI document. However, when a client uses an older version of the Intersight OpenAPI document, the server may send additional properties because the software is more recent than the client. In that case, the client may receive properties that it does not know about. Some generated SDKs perform a strict validation of the HTTP response body against the OpenAPI document. This document was created on 2021-07-21T16:37:30Z.
 *
 * API version: 1.0.9-4403
 * Contact: intersight@cisco.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package intersight

import (
	"encoding/json"
)

// TelemetryDruidScanRequestAllOf struct for TelemetryDruidScanRequestAllOf
type TelemetryDruidScanRequestAllOf struct {
	DataSource TelemetryDruidDataSource `json:"dataSource"`
	// A JSON Object representing ISO-8601 Intervals. This defines the time ranges to run the query over.
	Intervals []string `json:"intervals"`
	// How the results are represented, list, compactedList or valueVector. Currently only list is supported.
	ResultFormat *string               `json:"resultFormat,omitempty"`
	Filter       *TelemetryDruidFilter `json:"filter,omitempty"`
	// A String array of dimensions and metrics to scan. If left empty, all dimensions and metrics are returned.
	Columns *[]string `json:"columns,omitempty"`
	// The maximum number of rows buffered before being returned to the client.
	BatchSize *int32 `json:"batchSize,omitempty"`
	// How many rows to return. If not specified, all rows will be returned.
	Limit *int32 `json:"limit,omitempty"`
	// The ordering of returned rows based on timestamp. \"ascending\", \"descending\", and \"none\" (default) are supported. Currently, \"ascending\" and \"descending\" are only supported for queries where the __time column is included in the columns field and the requirements outlined in the time ordering section are met.
	Order *string `json:"order,omitempty"`
	// Return results consistent with the legacy \"scan-query\" contrib extension. Defaults to the value set by druid.query.scan.legacy, which in turn defaults to false.
	Legacy               *bool                       `json:"legacy,omitempty"`
	Context              *TelemetryDruidQueryContext `json:"context,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _TelemetryDruidScanRequestAllOf TelemetryDruidScanRequestAllOf

// NewTelemetryDruidScanRequestAllOf instantiates a new TelemetryDruidScanRequestAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTelemetryDruidScanRequestAllOf(dataSource TelemetryDruidDataSource, intervals []string) *TelemetryDruidScanRequestAllOf {
	this := TelemetryDruidScanRequestAllOf{}
	this.DataSource = dataSource
	this.Intervals = intervals
	var resultFormat string = "list"
	this.ResultFormat = &resultFormat
	var batchSize int32 = 20480
	this.BatchSize = &batchSize
	var order string = "none"
	this.Order = &order
	var legacy bool = false
	this.Legacy = &legacy
	return &this
}

// NewTelemetryDruidScanRequestAllOfWithDefaults instantiates a new TelemetryDruidScanRequestAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTelemetryDruidScanRequestAllOfWithDefaults() *TelemetryDruidScanRequestAllOf {
	this := TelemetryDruidScanRequestAllOf{}
	var resultFormat string = "list"
	this.ResultFormat = &resultFormat
	var batchSize int32 = 20480
	this.BatchSize = &batchSize
	var order string = "none"
	this.Order = &order
	var legacy bool = false
	this.Legacy = &legacy
	return &this
}

// GetDataSource returns the DataSource field value
func (o *TelemetryDruidScanRequestAllOf) GetDataSource() TelemetryDruidDataSource {
	if o == nil {
		var ret TelemetryDruidDataSource
		return ret
	}

	return o.DataSource
}

// GetDataSourceOk returns a tuple with the DataSource field value
// and a boolean to check if the value has been set.
func (o *TelemetryDruidScanRequestAllOf) GetDataSourceOk() (*TelemetryDruidDataSource, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DataSource, true
}

// SetDataSource sets field value
func (o *TelemetryDruidScanRequestAllOf) SetDataSource(v TelemetryDruidDataSource) {
	o.DataSource = v
}

// GetIntervals returns the Intervals field value
func (o *TelemetryDruidScanRequestAllOf) GetIntervals() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Intervals
}

// GetIntervalsOk returns a tuple with the Intervals field value
// and a boolean to check if the value has been set.
func (o *TelemetryDruidScanRequestAllOf) GetIntervalsOk() (*[]string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Intervals, true
}

// SetIntervals sets field value
func (o *TelemetryDruidScanRequestAllOf) SetIntervals(v []string) {
	o.Intervals = v
}

// GetResultFormat returns the ResultFormat field value if set, zero value otherwise.
func (o *TelemetryDruidScanRequestAllOf) GetResultFormat() string {
	if o == nil || o.ResultFormat == nil {
		var ret string
		return ret
	}
	return *o.ResultFormat
}

// GetResultFormatOk returns a tuple with the ResultFormat field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TelemetryDruidScanRequestAllOf) GetResultFormatOk() (*string, bool) {
	if o == nil || o.ResultFormat == nil {
		return nil, false
	}
	return o.ResultFormat, true
}

// HasResultFormat returns a boolean if a field has been set.
func (o *TelemetryDruidScanRequestAllOf) HasResultFormat() bool {
	if o != nil && o.ResultFormat != nil {
		return true
	}

	return false
}

// SetResultFormat gets a reference to the given string and assigns it to the ResultFormat field.
func (o *TelemetryDruidScanRequestAllOf) SetResultFormat(v string) {
	o.ResultFormat = &v
}

// GetFilter returns the Filter field value if set, zero value otherwise.
func (o *TelemetryDruidScanRequestAllOf) GetFilter() TelemetryDruidFilter {
	if o == nil || o.Filter == nil {
		var ret TelemetryDruidFilter
		return ret
	}
	return *o.Filter
}

// GetFilterOk returns a tuple with the Filter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TelemetryDruidScanRequestAllOf) GetFilterOk() (*TelemetryDruidFilter, bool) {
	if o == nil || o.Filter == nil {
		return nil, false
	}
	return o.Filter, true
}

// HasFilter returns a boolean if a field has been set.
func (o *TelemetryDruidScanRequestAllOf) HasFilter() bool {
	if o != nil && o.Filter != nil {
		return true
	}

	return false
}

// SetFilter gets a reference to the given TelemetryDruidFilter and assigns it to the Filter field.
func (o *TelemetryDruidScanRequestAllOf) SetFilter(v TelemetryDruidFilter) {
	o.Filter = &v
}

// GetColumns returns the Columns field value if set, zero value otherwise.
func (o *TelemetryDruidScanRequestAllOf) GetColumns() []string {
	if o == nil || o.Columns == nil {
		var ret []string
		return ret
	}
	return *o.Columns
}

// GetColumnsOk returns a tuple with the Columns field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TelemetryDruidScanRequestAllOf) GetColumnsOk() (*[]string, bool) {
	if o == nil || o.Columns == nil {
		return nil, false
	}
	return o.Columns, true
}

// HasColumns returns a boolean if a field has been set.
func (o *TelemetryDruidScanRequestAllOf) HasColumns() bool {
	if o != nil && o.Columns != nil {
		return true
	}

	return false
}

// SetColumns gets a reference to the given []string and assigns it to the Columns field.
func (o *TelemetryDruidScanRequestAllOf) SetColumns(v []string) {
	o.Columns = &v
}

// GetBatchSize returns the BatchSize field value if set, zero value otherwise.
func (o *TelemetryDruidScanRequestAllOf) GetBatchSize() int32 {
	if o == nil || o.BatchSize == nil {
		var ret int32
		return ret
	}
	return *o.BatchSize
}

// GetBatchSizeOk returns a tuple with the BatchSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TelemetryDruidScanRequestAllOf) GetBatchSizeOk() (*int32, bool) {
	if o == nil || o.BatchSize == nil {
		return nil, false
	}
	return o.BatchSize, true
}

// HasBatchSize returns a boolean if a field has been set.
func (o *TelemetryDruidScanRequestAllOf) HasBatchSize() bool {
	if o != nil && o.BatchSize != nil {
		return true
	}

	return false
}

// SetBatchSize gets a reference to the given int32 and assigns it to the BatchSize field.
func (o *TelemetryDruidScanRequestAllOf) SetBatchSize(v int32) {
	o.BatchSize = &v
}

// GetLimit returns the Limit field value if set, zero value otherwise.
func (o *TelemetryDruidScanRequestAllOf) GetLimit() int32 {
	if o == nil || o.Limit == nil {
		var ret int32
		return ret
	}
	return *o.Limit
}

// GetLimitOk returns a tuple with the Limit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TelemetryDruidScanRequestAllOf) GetLimitOk() (*int32, bool) {
	if o == nil || o.Limit == nil {
		return nil, false
	}
	return o.Limit, true
}

// HasLimit returns a boolean if a field has been set.
func (o *TelemetryDruidScanRequestAllOf) HasLimit() bool {
	if o != nil && o.Limit != nil {
		return true
	}

	return false
}

// SetLimit gets a reference to the given int32 and assigns it to the Limit field.
func (o *TelemetryDruidScanRequestAllOf) SetLimit(v int32) {
	o.Limit = &v
}

// GetOrder returns the Order field value if set, zero value otherwise.
func (o *TelemetryDruidScanRequestAllOf) GetOrder() string {
	if o == nil || o.Order == nil {
		var ret string
		return ret
	}
	return *o.Order
}

// GetOrderOk returns a tuple with the Order field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TelemetryDruidScanRequestAllOf) GetOrderOk() (*string, bool) {
	if o == nil || o.Order == nil {
		return nil, false
	}
	return o.Order, true
}

// HasOrder returns a boolean if a field has been set.
func (o *TelemetryDruidScanRequestAllOf) HasOrder() bool {
	if o != nil && o.Order != nil {
		return true
	}

	return false
}

// SetOrder gets a reference to the given string and assigns it to the Order field.
func (o *TelemetryDruidScanRequestAllOf) SetOrder(v string) {
	o.Order = &v
}

// GetLegacy returns the Legacy field value if set, zero value otherwise.
func (o *TelemetryDruidScanRequestAllOf) GetLegacy() bool {
	if o == nil || o.Legacy == nil {
		var ret bool
		return ret
	}
	return *o.Legacy
}

// GetLegacyOk returns a tuple with the Legacy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TelemetryDruidScanRequestAllOf) GetLegacyOk() (*bool, bool) {
	if o == nil || o.Legacy == nil {
		return nil, false
	}
	return o.Legacy, true
}

// HasLegacy returns a boolean if a field has been set.
func (o *TelemetryDruidScanRequestAllOf) HasLegacy() bool {
	if o != nil && o.Legacy != nil {
		return true
	}

	return false
}

// SetLegacy gets a reference to the given bool and assigns it to the Legacy field.
func (o *TelemetryDruidScanRequestAllOf) SetLegacy(v bool) {
	o.Legacy = &v
}

// GetContext returns the Context field value if set, zero value otherwise.
func (o *TelemetryDruidScanRequestAllOf) GetContext() TelemetryDruidQueryContext {
	if o == nil || o.Context == nil {
		var ret TelemetryDruidQueryContext
		return ret
	}
	return *o.Context
}

// GetContextOk returns a tuple with the Context field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TelemetryDruidScanRequestAllOf) GetContextOk() (*TelemetryDruidQueryContext, bool) {
	if o == nil || o.Context == nil {
		return nil, false
	}
	return o.Context, true
}

// HasContext returns a boolean if a field has been set.
func (o *TelemetryDruidScanRequestAllOf) HasContext() bool {
	if o != nil && o.Context != nil {
		return true
	}

	return false
}

// SetContext gets a reference to the given TelemetryDruidQueryContext and assigns it to the Context field.
func (o *TelemetryDruidScanRequestAllOf) SetContext(v TelemetryDruidQueryContext) {
	o.Context = &v
}

func (o TelemetryDruidScanRequestAllOf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["dataSource"] = o.DataSource
	}
	if true {
		toSerialize["intervals"] = o.Intervals
	}
	if o.ResultFormat != nil {
		toSerialize["resultFormat"] = o.ResultFormat
	}
	if o.Filter != nil {
		toSerialize["filter"] = o.Filter
	}
	if o.Columns != nil {
		toSerialize["columns"] = o.Columns
	}
	if o.BatchSize != nil {
		toSerialize["batchSize"] = o.BatchSize
	}
	if o.Limit != nil {
		toSerialize["limit"] = o.Limit
	}
	if o.Order != nil {
		toSerialize["order"] = o.Order
	}
	if o.Legacy != nil {
		toSerialize["legacy"] = o.Legacy
	}
	if o.Context != nil {
		toSerialize["context"] = o.Context
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *TelemetryDruidScanRequestAllOf) UnmarshalJSON(bytes []byte) (err error) {
	varTelemetryDruidScanRequestAllOf := _TelemetryDruidScanRequestAllOf{}

	if err = json.Unmarshal(bytes, &varTelemetryDruidScanRequestAllOf); err == nil {
		*o = TelemetryDruidScanRequestAllOf(varTelemetryDruidScanRequestAllOf)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "dataSource")
		delete(additionalProperties, "intervals")
		delete(additionalProperties, "resultFormat")
		delete(additionalProperties, "filter")
		delete(additionalProperties, "columns")
		delete(additionalProperties, "batchSize")
		delete(additionalProperties, "limit")
		delete(additionalProperties, "order")
		delete(additionalProperties, "legacy")
		delete(additionalProperties, "context")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableTelemetryDruidScanRequestAllOf struct {
	value *TelemetryDruidScanRequestAllOf
	isSet bool
}

func (v NullableTelemetryDruidScanRequestAllOf) Get() *TelemetryDruidScanRequestAllOf {
	return v.value
}

func (v *NullableTelemetryDruidScanRequestAllOf) Set(val *TelemetryDruidScanRequestAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableTelemetryDruidScanRequestAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableTelemetryDruidScanRequestAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTelemetryDruidScanRequestAllOf(val *TelemetryDruidScanRequestAllOf) *NullableTelemetryDruidScanRequestAllOf {
	return &NullableTelemetryDruidScanRequestAllOf{value: val, isSet: true}
}

func (v NullableTelemetryDruidScanRequestAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTelemetryDruidScanRequestAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
