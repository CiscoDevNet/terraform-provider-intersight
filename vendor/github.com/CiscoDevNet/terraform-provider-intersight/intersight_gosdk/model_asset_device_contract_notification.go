/*
Cisco Intersight

Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations. The Intersight OpenAPI document defines the complete set of properties that are returned in the HTTP response. From that perspective, a client can expect that no additional properties are returned, unless these properties are explicitly defined in the OpenAPI document. However, when a client uses an older version of the Intersight OpenAPI document, the server may send additional properties because the software is more recent than the client. In that case, the client may receive properties that it does not know about. Some generated SDKs perform a strict validation of the HTTP response body against the OpenAPI document.

API version: 1.0.9-5208
Contact: intersight@cisco.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package intersight

import (
	"encoding/json"
	"reflect"
	"strings"
	"time"
)

// AssetDeviceContractNotification Appliances use this object to send request to cloud to compute contract status. Cloud uses this to send the contract status response back to appliance.
type AssetDeviceContractNotification struct {
	MoBaseMo
	// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.
	ClassId string `json:"ClassId"`
	// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
	ObjectType string                           `json:"ObjectType"`
	Contract   NullableAssetContractInformation `json:"Contract,omitempty"`
	// Calculated contract status that is derived based on the service line status and contract end date. It is different from serviceLineStatus property. serviceLineStatus gives us ACTIVE, OVERDUE, EXPIRED. These are transformed into Active, Expiring Soon and Not Covered. * `Unknown` - The device's contract status cannot be determined. * `Not Covered` - The Cisco device does not have a valid support contract. * `Active` - The Cisco device is covered under a active support contract. * `Expiring Soon` - The contract for this Cisco device is going to expire in the next 30 days.
	ContractStatus *string `json:"ContractStatus,omitempty"`
	// Reason for contract status. In case of Not Covered, reason is either Terminated or Expired. * `` - There is no reason for the specified contract status. * `Line Item Expired` - The Cisco device does not have a valid support contract, it has expired. * `Line Item Terminated` - The Cisco device does not have a valid support contract, it has been terminated.
	ContractStatusReason *string `json:"ContractStatusReason,omitempty"`
	// Date and time indicating when the contract data is last refreshed.
	ContractUpdatedTime *time.Time `json:"ContractUpdatedTime,omitempty"`
	// End date of the covered product line. The coverage end date is fetched from Cisco SN2INFO API.
	CoveredProductLineEndDate *string `json:"CoveredProductLineEndDate,omitempty"`
	// Unique identifier of the Cisco device.
	DeviceId              *string                          `json:"DeviceId,omitempty"`
	EndCustomer           NullableAssetCustomerInformation `json:"EndCustomer,omitempty"`
	EndUserGlobalUltimate NullableAssetGlobalUltimate      `json:"EndUserGlobalUltimate,omitempty"`
	// Validates if the device is a genuine Cisco device. Validated is done using the Cisco SN2INFO APIs.
	IsValid *bool `json:"IsValid,omitempty"`
	// Item type of this specific Cisco device. example \"Chassis\".
	ItemType *string `json:"ItemType,omitempty"`
	// Maintenance purchase order number for the Cisco device.
	MaintenancePurchaseOrderNumber *string `json:"MaintenancePurchaseOrderNumber,omitempty"`
	// Maintenance sales order number for the Cisco device.
	MaintenanceSalesOrderNumber *string                         `json:"MaintenanceSalesOrderNumber,omitempty"`
	Product                     NullableAssetProductInformation `json:"Product,omitempty"`
	// Purchase order number for the Cisco device. It is a unique number assigned for every purchase.
	PurchaseOrderNumber    *string                     `json:"PurchaseOrderNumber,omitempty"`
	ResellerGlobalUltimate NullableAssetGlobalUltimate `json:"ResellerGlobalUltimate,omitempty"`
	// Sales order number for the Cisco device. It is a unique number assigned for every sale.
	SalesOrderNumber *string `json:"SalesOrderNumber,omitempty"`
	// The type of service contract that covers the Cisco device.
	ServiceDescription *string `json:"ServiceDescription,omitempty"`
	// End date for the Cisco service contract that covers this Cisco device.
	ServiceEndDate *time.Time `json:"ServiceEndDate,omitempty"`
	// The type of service contract that covers the Cisco device.
	ServiceLevel *string `json:"ServiceLevel,omitempty"`
	// The SKU of the service contract that covers the Cisco device.
	ServiceSku *string `json:"ServiceSku,omitempty"`
	// Start date for the Cisco service contract that covers this Cisco device.
	ServiceStartDate *time.Time `json:"ServiceStartDate,omitempty"`
	// Internal property used for triggering and tracking actions for contract information. * `Update` - Sn2Info/Contract information needs to be updated. * `OK` - Sn2Info/Contract information was fetched succcessfuly and updated. * `Failed` - Sn2Info/Contract information was not available  or failed while fetching. * `Retry` - Sn2Info/Contract information update failed and will be retried later.
	StateContract *string `json:"StateContract,omitempty"`
	// Internal property used for triggering and tracking actions for sn2info information. * `Update` - Sn2Info/Contract information needs to be updated. * `OK` - Sn2Info/Contract information was fetched succcessfuly and updated. * `Failed` - Sn2Info/Contract information was not available  or failed while fetching. * `Retry` - Sn2Info/Contract information update failed and will be retried later.
	StateSn2Info *string `json:"StateSn2Info,omitempty"`
	// End date for the warranty that covers the Cisco device.
	WarrantyEndDate *string `json:"WarrantyEndDate,omitempty"`
	// Type of warranty that covers the Cisco device.
	WarrantyType         *string                              `json:"WarrantyType,omitempty"`
	RegisteredDevice     *AssetDeviceRegistrationRelationship `json:"RegisteredDevice,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _AssetDeviceContractNotification AssetDeviceContractNotification

// NewAssetDeviceContractNotification instantiates a new AssetDeviceContractNotification object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAssetDeviceContractNotification(classId string, objectType string) *AssetDeviceContractNotification {
	this := AssetDeviceContractNotification{}
	this.ClassId = classId
	this.ObjectType = objectType
	var contractStatus string = "Unknown"
	this.ContractStatus = &contractStatus
	var contractStatusReason string = ""
	this.ContractStatusReason = &contractStatusReason
	var stateContract string = "Update"
	this.StateContract = &stateContract
	var stateSn2Info string = "Update"
	this.StateSn2Info = &stateSn2Info
	return &this
}

// NewAssetDeviceContractNotificationWithDefaults instantiates a new AssetDeviceContractNotification object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAssetDeviceContractNotificationWithDefaults() *AssetDeviceContractNotification {
	this := AssetDeviceContractNotification{}
	var classId string = "asset.DeviceContractNotification"
	this.ClassId = classId
	var objectType string = "asset.DeviceContractNotification"
	this.ObjectType = objectType
	var contractStatus string = "Unknown"
	this.ContractStatus = &contractStatus
	var contractStatusReason string = ""
	this.ContractStatusReason = &contractStatusReason
	var stateContract string = "Update"
	this.StateContract = &stateContract
	var stateSn2Info string = "Update"
	this.StateSn2Info = &stateSn2Info
	return &this
}

// GetClassId returns the ClassId field value
func (o *AssetDeviceContractNotification) GetClassId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ClassId
}

// GetClassIdOk returns a tuple with the ClassId field value
// and a boolean to check if the value has been set.
func (o *AssetDeviceContractNotification) GetClassIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ClassId, true
}

// SetClassId sets field value
func (o *AssetDeviceContractNotification) SetClassId(v string) {
	o.ClassId = v
}

// GetObjectType returns the ObjectType field value
func (o *AssetDeviceContractNotification) GetObjectType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ObjectType
}

// GetObjectTypeOk returns a tuple with the ObjectType field value
// and a boolean to check if the value has been set.
func (o *AssetDeviceContractNotification) GetObjectTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ObjectType, true
}

// SetObjectType sets field value
func (o *AssetDeviceContractNotification) SetObjectType(v string) {
	o.ObjectType = v
}

// GetContract returns the Contract field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AssetDeviceContractNotification) GetContract() AssetContractInformation {
	if o == nil || o.Contract.Get() == nil {
		var ret AssetContractInformation
		return ret
	}
	return *o.Contract.Get()
}

// GetContractOk returns a tuple with the Contract field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AssetDeviceContractNotification) GetContractOk() (*AssetContractInformation, bool) {
	if o == nil {
		return nil, false
	}
	return o.Contract.Get(), o.Contract.IsSet()
}

// HasContract returns a boolean if a field has been set.
func (o *AssetDeviceContractNotification) HasContract() bool {
	if o != nil && o.Contract.IsSet() {
		return true
	}

	return false
}

// SetContract gets a reference to the given NullableAssetContractInformation and assigns it to the Contract field.
func (o *AssetDeviceContractNotification) SetContract(v AssetContractInformation) {
	o.Contract.Set(&v)
}

// SetContractNil sets the value for Contract to be an explicit nil
func (o *AssetDeviceContractNotification) SetContractNil() {
	o.Contract.Set(nil)
}

// UnsetContract ensures that no value is present for Contract, not even an explicit nil
func (o *AssetDeviceContractNotification) UnsetContract() {
	o.Contract.Unset()
}

// GetContractStatus returns the ContractStatus field value if set, zero value otherwise.
func (o *AssetDeviceContractNotification) GetContractStatus() string {
	if o == nil || o.ContractStatus == nil {
		var ret string
		return ret
	}
	return *o.ContractStatus
}

// GetContractStatusOk returns a tuple with the ContractStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AssetDeviceContractNotification) GetContractStatusOk() (*string, bool) {
	if o == nil || o.ContractStatus == nil {
		return nil, false
	}
	return o.ContractStatus, true
}

// HasContractStatus returns a boolean if a field has been set.
func (o *AssetDeviceContractNotification) HasContractStatus() bool {
	if o != nil && o.ContractStatus != nil {
		return true
	}

	return false
}

// SetContractStatus gets a reference to the given string and assigns it to the ContractStatus field.
func (o *AssetDeviceContractNotification) SetContractStatus(v string) {
	o.ContractStatus = &v
}

// GetContractStatusReason returns the ContractStatusReason field value if set, zero value otherwise.
func (o *AssetDeviceContractNotification) GetContractStatusReason() string {
	if o == nil || o.ContractStatusReason == nil {
		var ret string
		return ret
	}
	return *o.ContractStatusReason
}

// GetContractStatusReasonOk returns a tuple with the ContractStatusReason field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AssetDeviceContractNotification) GetContractStatusReasonOk() (*string, bool) {
	if o == nil || o.ContractStatusReason == nil {
		return nil, false
	}
	return o.ContractStatusReason, true
}

// HasContractStatusReason returns a boolean if a field has been set.
func (o *AssetDeviceContractNotification) HasContractStatusReason() bool {
	if o != nil && o.ContractStatusReason != nil {
		return true
	}

	return false
}

// SetContractStatusReason gets a reference to the given string and assigns it to the ContractStatusReason field.
func (o *AssetDeviceContractNotification) SetContractStatusReason(v string) {
	o.ContractStatusReason = &v
}

// GetContractUpdatedTime returns the ContractUpdatedTime field value if set, zero value otherwise.
func (o *AssetDeviceContractNotification) GetContractUpdatedTime() time.Time {
	if o == nil || o.ContractUpdatedTime == nil {
		var ret time.Time
		return ret
	}
	return *o.ContractUpdatedTime
}

// GetContractUpdatedTimeOk returns a tuple with the ContractUpdatedTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AssetDeviceContractNotification) GetContractUpdatedTimeOk() (*time.Time, bool) {
	if o == nil || o.ContractUpdatedTime == nil {
		return nil, false
	}
	return o.ContractUpdatedTime, true
}

// HasContractUpdatedTime returns a boolean if a field has been set.
func (o *AssetDeviceContractNotification) HasContractUpdatedTime() bool {
	if o != nil && o.ContractUpdatedTime != nil {
		return true
	}

	return false
}

// SetContractUpdatedTime gets a reference to the given time.Time and assigns it to the ContractUpdatedTime field.
func (o *AssetDeviceContractNotification) SetContractUpdatedTime(v time.Time) {
	o.ContractUpdatedTime = &v
}

// GetCoveredProductLineEndDate returns the CoveredProductLineEndDate field value if set, zero value otherwise.
func (o *AssetDeviceContractNotification) GetCoveredProductLineEndDate() string {
	if o == nil || o.CoveredProductLineEndDate == nil {
		var ret string
		return ret
	}
	return *o.CoveredProductLineEndDate
}

// GetCoveredProductLineEndDateOk returns a tuple with the CoveredProductLineEndDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AssetDeviceContractNotification) GetCoveredProductLineEndDateOk() (*string, bool) {
	if o == nil || o.CoveredProductLineEndDate == nil {
		return nil, false
	}
	return o.CoveredProductLineEndDate, true
}

// HasCoveredProductLineEndDate returns a boolean if a field has been set.
func (o *AssetDeviceContractNotification) HasCoveredProductLineEndDate() bool {
	if o != nil && o.CoveredProductLineEndDate != nil {
		return true
	}

	return false
}

// SetCoveredProductLineEndDate gets a reference to the given string and assigns it to the CoveredProductLineEndDate field.
func (o *AssetDeviceContractNotification) SetCoveredProductLineEndDate(v string) {
	o.CoveredProductLineEndDate = &v
}

// GetDeviceId returns the DeviceId field value if set, zero value otherwise.
func (o *AssetDeviceContractNotification) GetDeviceId() string {
	if o == nil || o.DeviceId == nil {
		var ret string
		return ret
	}
	return *o.DeviceId
}

// GetDeviceIdOk returns a tuple with the DeviceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AssetDeviceContractNotification) GetDeviceIdOk() (*string, bool) {
	if o == nil || o.DeviceId == nil {
		return nil, false
	}
	return o.DeviceId, true
}

// HasDeviceId returns a boolean if a field has been set.
func (o *AssetDeviceContractNotification) HasDeviceId() bool {
	if o != nil && o.DeviceId != nil {
		return true
	}

	return false
}

// SetDeviceId gets a reference to the given string and assigns it to the DeviceId field.
func (o *AssetDeviceContractNotification) SetDeviceId(v string) {
	o.DeviceId = &v
}

// GetEndCustomer returns the EndCustomer field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AssetDeviceContractNotification) GetEndCustomer() AssetCustomerInformation {
	if o == nil || o.EndCustomer.Get() == nil {
		var ret AssetCustomerInformation
		return ret
	}
	return *o.EndCustomer.Get()
}

// GetEndCustomerOk returns a tuple with the EndCustomer field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AssetDeviceContractNotification) GetEndCustomerOk() (*AssetCustomerInformation, bool) {
	if o == nil {
		return nil, false
	}
	return o.EndCustomer.Get(), o.EndCustomer.IsSet()
}

// HasEndCustomer returns a boolean if a field has been set.
func (o *AssetDeviceContractNotification) HasEndCustomer() bool {
	if o != nil && o.EndCustomer.IsSet() {
		return true
	}

	return false
}

// SetEndCustomer gets a reference to the given NullableAssetCustomerInformation and assigns it to the EndCustomer field.
func (o *AssetDeviceContractNotification) SetEndCustomer(v AssetCustomerInformation) {
	o.EndCustomer.Set(&v)
}

// SetEndCustomerNil sets the value for EndCustomer to be an explicit nil
func (o *AssetDeviceContractNotification) SetEndCustomerNil() {
	o.EndCustomer.Set(nil)
}

// UnsetEndCustomer ensures that no value is present for EndCustomer, not even an explicit nil
func (o *AssetDeviceContractNotification) UnsetEndCustomer() {
	o.EndCustomer.Unset()
}

// GetEndUserGlobalUltimate returns the EndUserGlobalUltimate field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AssetDeviceContractNotification) GetEndUserGlobalUltimate() AssetGlobalUltimate {
	if o == nil || o.EndUserGlobalUltimate.Get() == nil {
		var ret AssetGlobalUltimate
		return ret
	}
	return *o.EndUserGlobalUltimate.Get()
}

// GetEndUserGlobalUltimateOk returns a tuple with the EndUserGlobalUltimate field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AssetDeviceContractNotification) GetEndUserGlobalUltimateOk() (*AssetGlobalUltimate, bool) {
	if o == nil {
		return nil, false
	}
	return o.EndUserGlobalUltimate.Get(), o.EndUserGlobalUltimate.IsSet()
}

// HasEndUserGlobalUltimate returns a boolean if a field has been set.
func (o *AssetDeviceContractNotification) HasEndUserGlobalUltimate() bool {
	if o != nil && o.EndUserGlobalUltimate.IsSet() {
		return true
	}

	return false
}

// SetEndUserGlobalUltimate gets a reference to the given NullableAssetGlobalUltimate and assigns it to the EndUserGlobalUltimate field.
func (o *AssetDeviceContractNotification) SetEndUserGlobalUltimate(v AssetGlobalUltimate) {
	o.EndUserGlobalUltimate.Set(&v)
}

// SetEndUserGlobalUltimateNil sets the value for EndUserGlobalUltimate to be an explicit nil
func (o *AssetDeviceContractNotification) SetEndUserGlobalUltimateNil() {
	o.EndUserGlobalUltimate.Set(nil)
}

// UnsetEndUserGlobalUltimate ensures that no value is present for EndUserGlobalUltimate, not even an explicit nil
func (o *AssetDeviceContractNotification) UnsetEndUserGlobalUltimate() {
	o.EndUserGlobalUltimate.Unset()
}

// GetIsValid returns the IsValid field value if set, zero value otherwise.
func (o *AssetDeviceContractNotification) GetIsValid() bool {
	if o == nil || o.IsValid == nil {
		var ret bool
		return ret
	}
	return *o.IsValid
}

// GetIsValidOk returns a tuple with the IsValid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AssetDeviceContractNotification) GetIsValidOk() (*bool, bool) {
	if o == nil || o.IsValid == nil {
		return nil, false
	}
	return o.IsValid, true
}

// HasIsValid returns a boolean if a field has been set.
func (o *AssetDeviceContractNotification) HasIsValid() bool {
	if o != nil && o.IsValid != nil {
		return true
	}

	return false
}

// SetIsValid gets a reference to the given bool and assigns it to the IsValid field.
func (o *AssetDeviceContractNotification) SetIsValid(v bool) {
	o.IsValid = &v
}

// GetItemType returns the ItemType field value if set, zero value otherwise.
func (o *AssetDeviceContractNotification) GetItemType() string {
	if o == nil || o.ItemType == nil {
		var ret string
		return ret
	}
	return *o.ItemType
}

// GetItemTypeOk returns a tuple with the ItemType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AssetDeviceContractNotification) GetItemTypeOk() (*string, bool) {
	if o == nil || o.ItemType == nil {
		return nil, false
	}
	return o.ItemType, true
}

// HasItemType returns a boolean if a field has been set.
func (o *AssetDeviceContractNotification) HasItemType() bool {
	if o != nil && o.ItemType != nil {
		return true
	}

	return false
}

// SetItemType gets a reference to the given string and assigns it to the ItemType field.
func (o *AssetDeviceContractNotification) SetItemType(v string) {
	o.ItemType = &v
}

// GetMaintenancePurchaseOrderNumber returns the MaintenancePurchaseOrderNumber field value if set, zero value otherwise.
func (o *AssetDeviceContractNotification) GetMaintenancePurchaseOrderNumber() string {
	if o == nil || o.MaintenancePurchaseOrderNumber == nil {
		var ret string
		return ret
	}
	return *o.MaintenancePurchaseOrderNumber
}

// GetMaintenancePurchaseOrderNumberOk returns a tuple with the MaintenancePurchaseOrderNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AssetDeviceContractNotification) GetMaintenancePurchaseOrderNumberOk() (*string, bool) {
	if o == nil || o.MaintenancePurchaseOrderNumber == nil {
		return nil, false
	}
	return o.MaintenancePurchaseOrderNumber, true
}

// HasMaintenancePurchaseOrderNumber returns a boolean if a field has been set.
func (o *AssetDeviceContractNotification) HasMaintenancePurchaseOrderNumber() bool {
	if o != nil && o.MaintenancePurchaseOrderNumber != nil {
		return true
	}

	return false
}

// SetMaintenancePurchaseOrderNumber gets a reference to the given string and assigns it to the MaintenancePurchaseOrderNumber field.
func (o *AssetDeviceContractNotification) SetMaintenancePurchaseOrderNumber(v string) {
	o.MaintenancePurchaseOrderNumber = &v
}

// GetMaintenanceSalesOrderNumber returns the MaintenanceSalesOrderNumber field value if set, zero value otherwise.
func (o *AssetDeviceContractNotification) GetMaintenanceSalesOrderNumber() string {
	if o == nil || o.MaintenanceSalesOrderNumber == nil {
		var ret string
		return ret
	}
	return *o.MaintenanceSalesOrderNumber
}

// GetMaintenanceSalesOrderNumberOk returns a tuple with the MaintenanceSalesOrderNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AssetDeviceContractNotification) GetMaintenanceSalesOrderNumberOk() (*string, bool) {
	if o == nil || o.MaintenanceSalesOrderNumber == nil {
		return nil, false
	}
	return o.MaintenanceSalesOrderNumber, true
}

// HasMaintenanceSalesOrderNumber returns a boolean if a field has been set.
func (o *AssetDeviceContractNotification) HasMaintenanceSalesOrderNumber() bool {
	if o != nil && o.MaintenanceSalesOrderNumber != nil {
		return true
	}

	return false
}

// SetMaintenanceSalesOrderNumber gets a reference to the given string and assigns it to the MaintenanceSalesOrderNumber field.
func (o *AssetDeviceContractNotification) SetMaintenanceSalesOrderNumber(v string) {
	o.MaintenanceSalesOrderNumber = &v
}

// GetProduct returns the Product field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AssetDeviceContractNotification) GetProduct() AssetProductInformation {
	if o == nil || o.Product.Get() == nil {
		var ret AssetProductInformation
		return ret
	}
	return *o.Product.Get()
}

// GetProductOk returns a tuple with the Product field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AssetDeviceContractNotification) GetProductOk() (*AssetProductInformation, bool) {
	if o == nil {
		return nil, false
	}
	return o.Product.Get(), o.Product.IsSet()
}

// HasProduct returns a boolean if a field has been set.
func (o *AssetDeviceContractNotification) HasProduct() bool {
	if o != nil && o.Product.IsSet() {
		return true
	}

	return false
}

// SetProduct gets a reference to the given NullableAssetProductInformation and assigns it to the Product field.
func (o *AssetDeviceContractNotification) SetProduct(v AssetProductInformation) {
	o.Product.Set(&v)
}

// SetProductNil sets the value for Product to be an explicit nil
func (o *AssetDeviceContractNotification) SetProductNil() {
	o.Product.Set(nil)
}

// UnsetProduct ensures that no value is present for Product, not even an explicit nil
func (o *AssetDeviceContractNotification) UnsetProduct() {
	o.Product.Unset()
}

// GetPurchaseOrderNumber returns the PurchaseOrderNumber field value if set, zero value otherwise.
func (o *AssetDeviceContractNotification) GetPurchaseOrderNumber() string {
	if o == nil || o.PurchaseOrderNumber == nil {
		var ret string
		return ret
	}
	return *o.PurchaseOrderNumber
}

// GetPurchaseOrderNumberOk returns a tuple with the PurchaseOrderNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AssetDeviceContractNotification) GetPurchaseOrderNumberOk() (*string, bool) {
	if o == nil || o.PurchaseOrderNumber == nil {
		return nil, false
	}
	return o.PurchaseOrderNumber, true
}

// HasPurchaseOrderNumber returns a boolean if a field has been set.
func (o *AssetDeviceContractNotification) HasPurchaseOrderNumber() bool {
	if o != nil && o.PurchaseOrderNumber != nil {
		return true
	}

	return false
}

// SetPurchaseOrderNumber gets a reference to the given string and assigns it to the PurchaseOrderNumber field.
func (o *AssetDeviceContractNotification) SetPurchaseOrderNumber(v string) {
	o.PurchaseOrderNumber = &v
}

// GetResellerGlobalUltimate returns the ResellerGlobalUltimate field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AssetDeviceContractNotification) GetResellerGlobalUltimate() AssetGlobalUltimate {
	if o == nil || o.ResellerGlobalUltimate.Get() == nil {
		var ret AssetGlobalUltimate
		return ret
	}
	return *o.ResellerGlobalUltimate.Get()
}

// GetResellerGlobalUltimateOk returns a tuple with the ResellerGlobalUltimate field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AssetDeviceContractNotification) GetResellerGlobalUltimateOk() (*AssetGlobalUltimate, bool) {
	if o == nil {
		return nil, false
	}
	return o.ResellerGlobalUltimate.Get(), o.ResellerGlobalUltimate.IsSet()
}

// HasResellerGlobalUltimate returns a boolean if a field has been set.
func (o *AssetDeviceContractNotification) HasResellerGlobalUltimate() bool {
	if o != nil && o.ResellerGlobalUltimate.IsSet() {
		return true
	}

	return false
}

// SetResellerGlobalUltimate gets a reference to the given NullableAssetGlobalUltimate and assigns it to the ResellerGlobalUltimate field.
func (o *AssetDeviceContractNotification) SetResellerGlobalUltimate(v AssetGlobalUltimate) {
	o.ResellerGlobalUltimate.Set(&v)
}

// SetResellerGlobalUltimateNil sets the value for ResellerGlobalUltimate to be an explicit nil
func (o *AssetDeviceContractNotification) SetResellerGlobalUltimateNil() {
	o.ResellerGlobalUltimate.Set(nil)
}

// UnsetResellerGlobalUltimate ensures that no value is present for ResellerGlobalUltimate, not even an explicit nil
func (o *AssetDeviceContractNotification) UnsetResellerGlobalUltimate() {
	o.ResellerGlobalUltimate.Unset()
}

// GetSalesOrderNumber returns the SalesOrderNumber field value if set, zero value otherwise.
func (o *AssetDeviceContractNotification) GetSalesOrderNumber() string {
	if o == nil || o.SalesOrderNumber == nil {
		var ret string
		return ret
	}
	return *o.SalesOrderNumber
}

// GetSalesOrderNumberOk returns a tuple with the SalesOrderNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AssetDeviceContractNotification) GetSalesOrderNumberOk() (*string, bool) {
	if o == nil || o.SalesOrderNumber == nil {
		return nil, false
	}
	return o.SalesOrderNumber, true
}

// HasSalesOrderNumber returns a boolean if a field has been set.
func (o *AssetDeviceContractNotification) HasSalesOrderNumber() bool {
	if o != nil && o.SalesOrderNumber != nil {
		return true
	}

	return false
}

// SetSalesOrderNumber gets a reference to the given string and assigns it to the SalesOrderNumber field.
func (o *AssetDeviceContractNotification) SetSalesOrderNumber(v string) {
	o.SalesOrderNumber = &v
}

// GetServiceDescription returns the ServiceDescription field value if set, zero value otherwise.
func (o *AssetDeviceContractNotification) GetServiceDescription() string {
	if o == nil || o.ServiceDescription == nil {
		var ret string
		return ret
	}
	return *o.ServiceDescription
}

// GetServiceDescriptionOk returns a tuple with the ServiceDescription field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AssetDeviceContractNotification) GetServiceDescriptionOk() (*string, bool) {
	if o == nil || o.ServiceDescription == nil {
		return nil, false
	}
	return o.ServiceDescription, true
}

// HasServiceDescription returns a boolean if a field has been set.
func (o *AssetDeviceContractNotification) HasServiceDescription() bool {
	if o != nil && o.ServiceDescription != nil {
		return true
	}

	return false
}

// SetServiceDescription gets a reference to the given string and assigns it to the ServiceDescription field.
func (o *AssetDeviceContractNotification) SetServiceDescription(v string) {
	o.ServiceDescription = &v
}

// GetServiceEndDate returns the ServiceEndDate field value if set, zero value otherwise.
func (o *AssetDeviceContractNotification) GetServiceEndDate() time.Time {
	if o == nil || o.ServiceEndDate == nil {
		var ret time.Time
		return ret
	}
	return *o.ServiceEndDate
}

// GetServiceEndDateOk returns a tuple with the ServiceEndDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AssetDeviceContractNotification) GetServiceEndDateOk() (*time.Time, bool) {
	if o == nil || o.ServiceEndDate == nil {
		return nil, false
	}
	return o.ServiceEndDate, true
}

// HasServiceEndDate returns a boolean if a field has been set.
func (o *AssetDeviceContractNotification) HasServiceEndDate() bool {
	if o != nil && o.ServiceEndDate != nil {
		return true
	}

	return false
}

// SetServiceEndDate gets a reference to the given time.Time and assigns it to the ServiceEndDate field.
func (o *AssetDeviceContractNotification) SetServiceEndDate(v time.Time) {
	o.ServiceEndDate = &v
}

// GetServiceLevel returns the ServiceLevel field value if set, zero value otherwise.
func (o *AssetDeviceContractNotification) GetServiceLevel() string {
	if o == nil || o.ServiceLevel == nil {
		var ret string
		return ret
	}
	return *o.ServiceLevel
}

// GetServiceLevelOk returns a tuple with the ServiceLevel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AssetDeviceContractNotification) GetServiceLevelOk() (*string, bool) {
	if o == nil || o.ServiceLevel == nil {
		return nil, false
	}
	return o.ServiceLevel, true
}

// HasServiceLevel returns a boolean if a field has been set.
func (o *AssetDeviceContractNotification) HasServiceLevel() bool {
	if o != nil && o.ServiceLevel != nil {
		return true
	}

	return false
}

// SetServiceLevel gets a reference to the given string and assigns it to the ServiceLevel field.
func (o *AssetDeviceContractNotification) SetServiceLevel(v string) {
	o.ServiceLevel = &v
}

// GetServiceSku returns the ServiceSku field value if set, zero value otherwise.
func (o *AssetDeviceContractNotification) GetServiceSku() string {
	if o == nil || o.ServiceSku == nil {
		var ret string
		return ret
	}
	return *o.ServiceSku
}

// GetServiceSkuOk returns a tuple with the ServiceSku field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AssetDeviceContractNotification) GetServiceSkuOk() (*string, bool) {
	if o == nil || o.ServiceSku == nil {
		return nil, false
	}
	return o.ServiceSku, true
}

// HasServiceSku returns a boolean if a field has been set.
func (o *AssetDeviceContractNotification) HasServiceSku() bool {
	if o != nil && o.ServiceSku != nil {
		return true
	}

	return false
}

// SetServiceSku gets a reference to the given string and assigns it to the ServiceSku field.
func (o *AssetDeviceContractNotification) SetServiceSku(v string) {
	o.ServiceSku = &v
}

// GetServiceStartDate returns the ServiceStartDate field value if set, zero value otherwise.
func (o *AssetDeviceContractNotification) GetServiceStartDate() time.Time {
	if o == nil || o.ServiceStartDate == nil {
		var ret time.Time
		return ret
	}
	return *o.ServiceStartDate
}

// GetServiceStartDateOk returns a tuple with the ServiceStartDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AssetDeviceContractNotification) GetServiceStartDateOk() (*time.Time, bool) {
	if o == nil || o.ServiceStartDate == nil {
		return nil, false
	}
	return o.ServiceStartDate, true
}

// HasServiceStartDate returns a boolean if a field has been set.
func (o *AssetDeviceContractNotification) HasServiceStartDate() bool {
	if o != nil && o.ServiceStartDate != nil {
		return true
	}

	return false
}

// SetServiceStartDate gets a reference to the given time.Time and assigns it to the ServiceStartDate field.
func (o *AssetDeviceContractNotification) SetServiceStartDate(v time.Time) {
	o.ServiceStartDate = &v
}

// GetStateContract returns the StateContract field value if set, zero value otherwise.
func (o *AssetDeviceContractNotification) GetStateContract() string {
	if o == nil || o.StateContract == nil {
		var ret string
		return ret
	}
	return *o.StateContract
}

// GetStateContractOk returns a tuple with the StateContract field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AssetDeviceContractNotification) GetStateContractOk() (*string, bool) {
	if o == nil || o.StateContract == nil {
		return nil, false
	}
	return o.StateContract, true
}

// HasStateContract returns a boolean if a field has been set.
func (o *AssetDeviceContractNotification) HasStateContract() bool {
	if o != nil && o.StateContract != nil {
		return true
	}

	return false
}

// SetStateContract gets a reference to the given string and assigns it to the StateContract field.
func (o *AssetDeviceContractNotification) SetStateContract(v string) {
	o.StateContract = &v
}

// GetStateSn2Info returns the StateSn2Info field value if set, zero value otherwise.
func (o *AssetDeviceContractNotification) GetStateSn2Info() string {
	if o == nil || o.StateSn2Info == nil {
		var ret string
		return ret
	}
	return *o.StateSn2Info
}

// GetStateSn2InfoOk returns a tuple with the StateSn2Info field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AssetDeviceContractNotification) GetStateSn2InfoOk() (*string, bool) {
	if o == nil || o.StateSn2Info == nil {
		return nil, false
	}
	return o.StateSn2Info, true
}

// HasStateSn2Info returns a boolean if a field has been set.
func (o *AssetDeviceContractNotification) HasStateSn2Info() bool {
	if o != nil && o.StateSn2Info != nil {
		return true
	}

	return false
}

// SetStateSn2Info gets a reference to the given string and assigns it to the StateSn2Info field.
func (o *AssetDeviceContractNotification) SetStateSn2Info(v string) {
	o.StateSn2Info = &v
}

// GetWarrantyEndDate returns the WarrantyEndDate field value if set, zero value otherwise.
func (o *AssetDeviceContractNotification) GetWarrantyEndDate() string {
	if o == nil || o.WarrantyEndDate == nil {
		var ret string
		return ret
	}
	return *o.WarrantyEndDate
}

// GetWarrantyEndDateOk returns a tuple with the WarrantyEndDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AssetDeviceContractNotification) GetWarrantyEndDateOk() (*string, bool) {
	if o == nil || o.WarrantyEndDate == nil {
		return nil, false
	}
	return o.WarrantyEndDate, true
}

// HasWarrantyEndDate returns a boolean if a field has been set.
func (o *AssetDeviceContractNotification) HasWarrantyEndDate() bool {
	if o != nil && o.WarrantyEndDate != nil {
		return true
	}

	return false
}

// SetWarrantyEndDate gets a reference to the given string and assigns it to the WarrantyEndDate field.
func (o *AssetDeviceContractNotification) SetWarrantyEndDate(v string) {
	o.WarrantyEndDate = &v
}

// GetWarrantyType returns the WarrantyType field value if set, zero value otherwise.
func (o *AssetDeviceContractNotification) GetWarrantyType() string {
	if o == nil || o.WarrantyType == nil {
		var ret string
		return ret
	}
	return *o.WarrantyType
}

// GetWarrantyTypeOk returns a tuple with the WarrantyType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AssetDeviceContractNotification) GetWarrantyTypeOk() (*string, bool) {
	if o == nil || o.WarrantyType == nil {
		return nil, false
	}
	return o.WarrantyType, true
}

// HasWarrantyType returns a boolean if a field has been set.
func (o *AssetDeviceContractNotification) HasWarrantyType() bool {
	if o != nil && o.WarrantyType != nil {
		return true
	}

	return false
}

// SetWarrantyType gets a reference to the given string and assigns it to the WarrantyType field.
func (o *AssetDeviceContractNotification) SetWarrantyType(v string) {
	o.WarrantyType = &v
}

// GetRegisteredDevice returns the RegisteredDevice field value if set, zero value otherwise.
func (o *AssetDeviceContractNotification) GetRegisteredDevice() AssetDeviceRegistrationRelationship {
	if o == nil || o.RegisteredDevice == nil {
		var ret AssetDeviceRegistrationRelationship
		return ret
	}
	return *o.RegisteredDevice
}

// GetRegisteredDeviceOk returns a tuple with the RegisteredDevice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AssetDeviceContractNotification) GetRegisteredDeviceOk() (*AssetDeviceRegistrationRelationship, bool) {
	if o == nil || o.RegisteredDevice == nil {
		return nil, false
	}
	return o.RegisteredDevice, true
}

// HasRegisteredDevice returns a boolean if a field has been set.
func (o *AssetDeviceContractNotification) HasRegisteredDevice() bool {
	if o != nil && o.RegisteredDevice != nil {
		return true
	}

	return false
}

// SetRegisteredDevice gets a reference to the given AssetDeviceRegistrationRelationship and assigns it to the RegisteredDevice field.
func (o *AssetDeviceContractNotification) SetRegisteredDevice(v AssetDeviceRegistrationRelationship) {
	o.RegisteredDevice = &v
}

func (o AssetDeviceContractNotification) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	serializedMoBaseMo, errMoBaseMo := json.Marshal(o.MoBaseMo)
	if errMoBaseMo != nil {
		return []byte{}, errMoBaseMo
	}
	errMoBaseMo = json.Unmarshal([]byte(serializedMoBaseMo), &toSerialize)
	if errMoBaseMo != nil {
		return []byte{}, errMoBaseMo
	}
	if true {
		toSerialize["ClassId"] = o.ClassId
	}
	if true {
		toSerialize["ObjectType"] = o.ObjectType
	}
	if o.Contract.IsSet() {
		toSerialize["Contract"] = o.Contract.Get()
	}
	if o.ContractStatus != nil {
		toSerialize["ContractStatus"] = o.ContractStatus
	}
	if o.ContractStatusReason != nil {
		toSerialize["ContractStatusReason"] = o.ContractStatusReason
	}
	if o.ContractUpdatedTime != nil {
		toSerialize["ContractUpdatedTime"] = o.ContractUpdatedTime
	}
	if o.CoveredProductLineEndDate != nil {
		toSerialize["CoveredProductLineEndDate"] = o.CoveredProductLineEndDate
	}
	if o.DeviceId != nil {
		toSerialize["DeviceId"] = o.DeviceId
	}
	if o.EndCustomer.IsSet() {
		toSerialize["EndCustomer"] = o.EndCustomer.Get()
	}
	if o.EndUserGlobalUltimate.IsSet() {
		toSerialize["EndUserGlobalUltimate"] = o.EndUserGlobalUltimate.Get()
	}
	if o.IsValid != nil {
		toSerialize["IsValid"] = o.IsValid
	}
	if o.ItemType != nil {
		toSerialize["ItemType"] = o.ItemType
	}
	if o.MaintenancePurchaseOrderNumber != nil {
		toSerialize["MaintenancePurchaseOrderNumber"] = o.MaintenancePurchaseOrderNumber
	}
	if o.MaintenanceSalesOrderNumber != nil {
		toSerialize["MaintenanceSalesOrderNumber"] = o.MaintenanceSalesOrderNumber
	}
	if o.Product.IsSet() {
		toSerialize["Product"] = o.Product.Get()
	}
	if o.PurchaseOrderNumber != nil {
		toSerialize["PurchaseOrderNumber"] = o.PurchaseOrderNumber
	}
	if o.ResellerGlobalUltimate.IsSet() {
		toSerialize["ResellerGlobalUltimate"] = o.ResellerGlobalUltimate.Get()
	}
	if o.SalesOrderNumber != nil {
		toSerialize["SalesOrderNumber"] = o.SalesOrderNumber
	}
	if o.ServiceDescription != nil {
		toSerialize["ServiceDescription"] = o.ServiceDescription
	}
	if o.ServiceEndDate != nil {
		toSerialize["ServiceEndDate"] = o.ServiceEndDate
	}
	if o.ServiceLevel != nil {
		toSerialize["ServiceLevel"] = o.ServiceLevel
	}
	if o.ServiceSku != nil {
		toSerialize["ServiceSku"] = o.ServiceSku
	}
	if o.ServiceStartDate != nil {
		toSerialize["ServiceStartDate"] = o.ServiceStartDate
	}
	if o.StateContract != nil {
		toSerialize["StateContract"] = o.StateContract
	}
	if o.StateSn2Info != nil {
		toSerialize["StateSn2Info"] = o.StateSn2Info
	}
	if o.WarrantyEndDate != nil {
		toSerialize["WarrantyEndDate"] = o.WarrantyEndDate
	}
	if o.WarrantyType != nil {
		toSerialize["WarrantyType"] = o.WarrantyType
	}
	if o.RegisteredDevice != nil {
		toSerialize["RegisteredDevice"] = o.RegisteredDevice
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *AssetDeviceContractNotification) UnmarshalJSON(bytes []byte) (err error) {
	type AssetDeviceContractNotificationWithoutEmbeddedStruct struct {
		// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.
		ClassId string `json:"ClassId"`
		// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
		ObjectType string                           `json:"ObjectType"`
		Contract   NullableAssetContractInformation `json:"Contract,omitempty"`
		// Calculated contract status that is derived based on the service line status and contract end date. It is different from serviceLineStatus property. serviceLineStatus gives us ACTIVE, OVERDUE, EXPIRED. These are transformed into Active, Expiring Soon and Not Covered. * `Unknown` - The device's contract status cannot be determined. * `Not Covered` - The Cisco device does not have a valid support contract. * `Active` - The Cisco device is covered under a active support contract. * `Expiring Soon` - The contract for this Cisco device is going to expire in the next 30 days.
		ContractStatus *string `json:"ContractStatus,omitempty"`
		// Reason for contract status. In case of Not Covered, reason is either Terminated or Expired. * `` - There is no reason for the specified contract status. * `Line Item Expired` - The Cisco device does not have a valid support contract, it has expired. * `Line Item Terminated` - The Cisco device does not have a valid support contract, it has been terminated.
		ContractStatusReason *string `json:"ContractStatusReason,omitempty"`
		// Date and time indicating when the contract data is last refreshed.
		ContractUpdatedTime *time.Time `json:"ContractUpdatedTime,omitempty"`
		// End date of the covered product line. The coverage end date is fetched from Cisco SN2INFO API.
		CoveredProductLineEndDate *string `json:"CoveredProductLineEndDate,omitempty"`
		// Unique identifier of the Cisco device.
		DeviceId              *string                          `json:"DeviceId,omitempty"`
		EndCustomer           NullableAssetCustomerInformation `json:"EndCustomer,omitempty"`
		EndUserGlobalUltimate NullableAssetGlobalUltimate      `json:"EndUserGlobalUltimate,omitempty"`
		// Validates if the device is a genuine Cisco device. Validated is done using the Cisco SN2INFO APIs.
		IsValid *bool `json:"IsValid,omitempty"`
		// Item type of this specific Cisco device. example \"Chassis\".
		ItemType *string `json:"ItemType,omitempty"`
		// Maintenance purchase order number for the Cisco device.
		MaintenancePurchaseOrderNumber *string `json:"MaintenancePurchaseOrderNumber,omitempty"`
		// Maintenance sales order number for the Cisco device.
		MaintenanceSalesOrderNumber *string                         `json:"MaintenanceSalesOrderNumber,omitempty"`
		Product                     NullableAssetProductInformation `json:"Product,omitempty"`
		// Purchase order number for the Cisco device. It is a unique number assigned for every purchase.
		PurchaseOrderNumber    *string                     `json:"PurchaseOrderNumber,omitempty"`
		ResellerGlobalUltimate NullableAssetGlobalUltimate `json:"ResellerGlobalUltimate,omitempty"`
		// Sales order number for the Cisco device. It is a unique number assigned for every sale.
		SalesOrderNumber *string `json:"SalesOrderNumber,omitempty"`
		// The type of service contract that covers the Cisco device.
		ServiceDescription *string `json:"ServiceDescription,omitempty"`
		// End date for the Cisco service contract that covers this Cisco device.
		ServiceEndDate *time.Time `json:"ServiceEndDate,omitempty"`
		// The type of service contract that covers the Cisco device.
		ServiceLevel *string `json:"ServiceLevel,omitempty"`
		// The SKU of the service contract that covers the Cisco device.
		ServiceSku *string `json:"ServiceSku,omitempty"`
		// Start date for the Cisco service contract that covers this Cisco device.
		ServiceStartDate *time.Time `json:"ServiceStartDate,omitempty"`
		// Internal property used for triggering and tracking actions for contract information. * `Update` - Sn2Info/Contract information needs to be updated. * `OK` - Sn2Info/Contract information was fetched succcessfuly and updated. * `Failed` - Sn2Info/Contract information was not available  or failed while fetching. * `Retry` - Sn2Info/Contract information update failed and will be retried later.
		StateContract *string `json:"StateContract,omitempty"`
		// Internal property used for triggering and tracking actions for sn2info information. * `Update` - Sn2Info/Contract information needs to be updated. * `OK` - Sn2Info/Contract information was fetched succcessfuly and updated. * `Failed` - Sn2Info/Contract information was not available  or failed while fetching. * `Retry` - Sn2Info/Contract information update failed and will be retried later.
		StateSn2Info *string `json:"StateSn2Info,omitempty"`
		// End date for the warranty that covers the Cisco device.
		WarrantyEndDate *string `json:"WarrantyEndDate,omitempty"`
		// Type of warranty that covers the Cisco device.
		WarrantyType     *string                              `json:"WarrantyType,omitempty"`
		RegisteredDevice *AssetDeviceRegistrationRelationship `json:"RegisteredDevice,omitempty"`
	}

	varAssetDeviceContractNotificationWithoutEmbeddedStruct := AssetDeviceContractNotificationWithoutEmbeddedStruct{}

	err = json.Unmarshal(bytes, &varAssetDeviceContractNotificationWithoutEmbeddedStruct)
	if err == nil {
		varAssetDeviceContractNotification := _AssetDeviceContractNotification{}
		varAssetDeviceContractNotification.ClassId = varAssetDeviceContractNotificationWithoutEmbeddedStruct.ClassId
		varAssetDeviceContractNotification.ObjectType = varAssetDeviceContractNotificationWithoutEmbeddedStruct.ObjectType
		varAssetDeviceContractNotification.Contract = varAssetDeviceContractNotificationWithoutEmbeddedStruct.Contract
		varAssetDeviceContractNotification.ContractStatus = varAssetDeviceContractNotificationWithoutEmbeddedStruct.ContractStatus
		varAssetDeviceContractNotification.ContractStatusReason = varAssetDeviceContractNotificationWithoutEmbeddedStruct.ContractStatusReason
		varAssetDeviceContractNotification.ContractUpdatedTime = varAssetDeviceContractNotificationWithoutEmbeddedStruct.ContractUpdatedTime
		varAssetDeviceContractNotification.CoveredProductLineEndDate = varAssetDeviceContractNotificationWithoutEmbeddedStruct.CoveredProductLineEndDate
		varAssetDeviceContractNotification.DeviceId = varAssetDeviceContractNotificationWithoutEmbeddedStruct.DeviceId
		varAssetDeviceContractNotification.EndCustomer = varAssetDeviceContractNotificationWithoutEmbeddedStruct.EndCustomer
		varAssetDeviceContractNotification.EndUserGlobalUltimate = varAssetDeviceContractNotificationWithoutEmbeddedStruct.EndUserGlobalUltimate
		varAssetDeviceContractNotification.IsValid = varAssetDeviceContractNotificationWithoutEmbeddedStruct.IsValid
		varAssetDeviceContractNotification.ItemType = varAssetDeviceContractNotificationWithoutEmbeddedStruct.ItemType
		varAssetDeviceContractNotification.MaintenancePurchaseOrderNumber = varAssetDeviceContractNotificationWithoutEmbeddedStruct.MaintenancePurchaseOrderNumber
		varAssetDeviceContractNotification.MaintenanceSalesOrderNumber = varAssetDeviceContractNotificationWithoutEmbeddedStruct.MaintenanceSalesOrderNumber
		varAssetDeviceContractNotification.Product = varAssetDeviceContractNotificationWithoutEmbeddedStruct.Product
		varAssetDeviceContractNotification.PurchaseOrderNumber = varAssetDeviceContractNotificationWithoutEmbeddedStruct.PurchaseOrderNumber
		varAssetDeviceContractNotification.ResellerGlobalUltimate = varAssetDeviceContractNotificationWithoutEmbeddedStruct.ResellerGlobalUltimate
		varAssetDeviceContractNotification.SalesOrderNumber = varAssetDeviceContractNotificationWithoutEmbeddedStruct.SalesOrderNumber
		varAssetDeviceContractNotification.ServiceDescription = varAssetDeviceContractNotificationWithoutEmbeddedStruct.ServiceDescription
		varAssetDeviceContractNotification.ServiceEndDate = varAssetDeviceContractNotificationWithoutEmbeddedStruct.ServiceEndDate
		varAssetDeviceContractNotification.ServiceLevel = varAssetDeviceContractNotificationWithoutEmbeddedStruct.ServiceLevel
		varAssetDeviceContractNotification.ServiceSku = varAssetDeviceContractNotificationWithoutEmbeddedStruct.ServiceSku
		varAssetDeviceContractNotification.ServiceStartDate = varAssetDeviceContractNotificationWithoutEmbeddedStruct.ServiceStartDate
		varAssetDeviceContractNotification.StateContract = varAssetDeviceContractNotificationWithoutEmbeddedStruct.StateContract
		varAssetDeviceContractNotification.StateSn2Info = varAssetDeviceContractNotificationWithoutEmbeddedStruct.StateSn2Info
		varAssetDeviceContractNotification.WarrantyEndDate = varAssetDeviceContractNotificationWithoutEmbeddedStruct.WarrantyEndDate
		varAssetDeviceContractNotification.WarrantyType = varAssetDeviceContractNotificationWithoutEmbeddedStruct.WarrantyType
		varAssetDeviceContractNotification.RegisteredDevice = varAssetDeviceContractNotificationWithoutEmbeddedStruct.RegisteredDevice
		*o = AssetDeviceContractNotification(varAssetDeviceContractNotification)
	} else {
		return err
	}

	varAssetDeviceContractNotification := _AssetDeviceContractNotification{}

	err = json.Unmarshal(bytes, &varAssetDeviceContractNotification)
	if err == nil {
		o.MoBaseMo = varAssetDeviceContractNotification.MoBaseMo
	} else {
		return err
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "ClassId")
		delete(additionalProperties, "ObjectType")
		delete(additionalProperties, "Contract")
		delete(additionalProperties, "ContractStatus")
		delete(additionalProperties, "ContractStatusReason")
		delete(additionalProperties, "ContractUpdatedTime")
		delete(additionalProperties, "CoveredProductLineEndDate")
		delete(additionalProperties, "DeviceId")
		delete(additionalProperties, "EndCustomer")
		delete(additionalProperties, "EndUserGlobalUltimate")
		delete(additionalProperties, "IsValid")
		delete(additionalProperties, "ItemType")
		delete(additionalProperties, "MaintenancePurchaseOrderNumber")
		delete(additionalProperties, "MaintenanceSalesOrderNumber")
		delete(additionalProperties, "Product")
		delete(additionalProperties, "PurchaseOrderNumber")
		delete(additionalProperties, "ResellerGlobalUltimate")
		delete(additionalProperties, "SalesOrderNumber")
		delete(additionalProperties, "ServiceDescription")
		delete(additionalProperties, "ServiceEndDate")
		delete(additionalProperties, "ServiceLevel")
		delete(additionalProperties, "ServiceSku")
		delete(additionalProperties, "ServiceStartDate")
		delete(additionalProperties, "StateContract")
		delete(additionalProperties, "StateSn2Info")
		delete(additionalProperties, "WarrantyEndDate")
		delete(additionalProperties, "WarrantyType")
		delete(additionalProperties, "RegisteredDevice")

		// remove fields from embedded structs
		reflectMoBaseMo := reflect.ValueOf(o.MoBaseMo)
		for i := 0; i < reflectMoBaseMo.Type().NumField(); i++ {
			t := reflectMoBaseMo.Type().Field(i)

			if jsonTag := t.Tag.Get("json"); jsonTag != "" {
				fieldName := ""
				if commaIdx := strings.Index(jsonTag, ","); commaIdx > 0 {
					fieldName = jsonTag[:commaIdx]
				} else {
					fieldName = jsonTag
				}
				if fieldName != "AdditionalProperties" {
					delete(additionalProperties, fieldName)
				}
			}
		}

		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableAssetDeviceContractNotification struct {
	value *AssetDeviceContractNotification
	isSet bool
}

func (v NullableAssetDeviceContractNotification) Get() *AssetDeviceContractNotification {
	return v.value
}

func (v *NullableAssetDeviceContractNotification) Set(val *AssetDeviceContractNotification) {
	v.value = val
	v.isSet = true
}

func (v NullableAssetDeviceContractNotification) IsSet() bool {
	return v.isSet
}

func (v *NullableAssetDeviceContractNotification) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAssetDeviceContractNotification(val *AssetDeviceContractNotification) *NullableAssetDeviceContractNotification {
	return &NullableAssetDeviceContractNotification{value: val, isSet: true}
}

func (v NullableAssetDeviceContractNotification) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAssetDeviceContractNotification) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
