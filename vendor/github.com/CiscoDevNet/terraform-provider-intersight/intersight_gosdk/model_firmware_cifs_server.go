/*
 * Cisco Intersight
 *
 * Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations. The Intersight OpenAPI document defines the complete set of properties that are returned in the HTTP response. From that perspective, a client can expect that no additional properties are returned, unless these properties are explicitly defined in the OpenAPI document. However, when a client uses an older version of the Intersight OpenAPI document, the server may send additional properties because the software is more recent than the client. In that case, the client may receive properties that it does not know about. Some generated SDKs perform a strict validation of the HTTP response body against the OpenAPI document. This document was created on 2021-07-21T16:37:30Z.
 *
 * API version: 1.0.9-4403
 * Contact: intersight@cisco.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package intersight

import (
	"encoding/json"
	"reflect"
	"strings"
)

// FirmwareCifsServer An external file repository accessible through the CIFS protocol.
type FirmwareCifsServer struct {
	MoBaseComplexType
	// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.
	ClassId string `json:"ClassId"`
	// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
	ObjectType string `json:"ObjectType"`
	// The location to the image file. The accepted format is IP-or-hostname/folder1/folder2/.../imageFile.
	FileLocation *string `json:"FileLocation,omitempty"`
	// Mount option (Authentication Protocol) as configured on the CIFS Server. Example:ntlmv2. * `none` - The default authentication protocol is decided by the endpoint. * `ntlm` - The external CIFS server is configured with ntlm as the authentication protocol. * `ntlmi` - Mount options of CIFS file server is ntlmi. * `ntlmv2` - Mount options of CIFS file server is ntlmv2. * `ntlmv2i` - Mount options of CIFS file server is ntlmv2i. * `ntlmssp` - Mount options of CIFS file server is ntlmssp. * `ntlmsspi` - Mount options of CIFS file server is ntlmsspi.
	MountOptions *string `json:"MountOptions,omitempty"`
	// Filename of the image in the remote share location. Example:ucs-c220m5-huu-3.1.2c.iso.
	RemoteFile *string `json:"RemoteFile,omitempty"`
	// CIFS Server Hostname or IP Address. For example:CIFS-server-hostname or 10.10.8.7. The remote share server should have network connectivity with the CIMC of the selected devices for a successful upgrade.
	RemoteIp *string `json:"RemoteIp,omitempty"`
	// Directory where the image is stored. Example:share/subfolder.
	RemoteShare          *string `json:"RemoteShare,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _FirmwareCifsServer FirmwareCifsServer

// NewFirmwareCifsServer instantiates a new FirmwareCifsServer object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFirmwareCifsServer(classId string, objectType string) *FirmwareCifsServer {
	this := FirmwareCifsServer{}
	this.ClassId = classId
	this.ObjectType = objectType
	var mountOptions string = "none"
	this.MountOptions = &mountOptions
	return &this
}

// NewFirmwareCifsServerWithDefaults instantiates a new FirmwareCifsServer object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFirmwareCifsServerWithDefaults() *FirmwareCifsServer {
	this := FirmwareCifsServer{}
	var classId string = "firmware.CifsServer"
	this.ClassId = classId
	var objectType string = "firmware.CifsServer"
	this.ObjectType = objectType
	var mountOptions string = "none"
	this.MountOptions = &mountOptions
	return &this
}

// GetClassId returns the ClassId field value
func (o *FirmwareCifsServer) GetClassId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ClassId
}

// GetClassIdOk returns a tuple with the ClassId field value
// and a boolean to check if the value has been set.
func (o *FirmwareCifsServer) GetClassIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ClassId, true
}

// SetClassId sets field value
func (o *FirmwareCifsServer) SetClassId(v string) {
	o.ClassId = v
}

// GetObjectType returns the ObjectType field value
func (o *FirmwareCifsServer) GetObjectType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ObjectType
}

// GetObjectTypeOk returns a tuple with the ObjectType field value
// and a boolean to check if the value has been set.
func (o *FirmwareCifsServer) GetObjectTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ObjectType, true
}

// SetObjectType sets field value
func (o *FirmwareCifsServer) SetObjectType(v string) {
	o.ObjectType = v
}

// GetFileLocation returns the FileLocation field value if set, zero value otherwise.
func (o *FirmwareCifsServer) GetFileLocation() string {
	if o == nil || o.FileLocation == nil {
		var ret string
		return ret
	}
	return *o.FileLocation
}

// GetFileLocationOk returns a tuple with the FileLocation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FirmwareCifsServer) GetFileLocationOk() (*string, bool) {
	if o == nil || o.FileLocation == nil {
		return nil, false
	}
	return o.FileLocation, true
}

// HasFileLocation returns a boolean if a field has been set.
func (o *FirmwareCifsServer) HasFileLocation() bool {
	if o != nil && o.FileLocation != nil {
		return true
	}

	return false
}

// SetFileLocation gets a reference to the given string and assigns it to the FileLocation field.
func (o *FirmwareCifsServer) SetFileLocation(v string) {
	o.FileLocation = &v
}

// GetMountOptions returns the MountOptions field value if set, zero value otherwise.
func (o *FirmwareCifsServer) GetMountOptions() string {
	if o == nil || o.MountOptions == nil {
		var ret string
		return ret
	}
	return *o.MountOptions
}

// GetMountOptionsOk returns a tuple with the MountOptions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FirmwareCifsServer) GetMountOptionsOk() (*string, bool) {
	if o == nil || o.MountOptions == nil {
		return nil, false
	}
	return o.MountOptions, true
}

// HasMountOptions returns a boolean if a field has been set.
func (o *FirmwareCifsServer) HasMountOptions() bool {
	if o != nil && o.MountOptions != nil {
		return true
	}

	return false
}

// SetMountOptions gets a reference to the given string and assigns it to the MountOptions field.
func (o *FirmwareCifsServer) SetMountOptions(v string) {
	o.MountOptions = &v
}

// GetRemoteFile returns the RemoteFile field value if set, zero value otherwise.
func (o *FirmwareCifsServer) GetRemoteFile() string {
	if o == nil || o.RemoteFile == nil {
		var ret string
		return ret
	}
	return *o.RemoteFile
}

// GetRemoteFileOk returns a tuple with the RemoteFile field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FirmwareCifsServer) GetRemoteFileOk() (*string, bool) {
	if o == nil || o.RemoteFile == nil {
		return nil, false
	}
	return o.RemoteFile, true
}

// HasRemoteFile returns a boolean if a field has been set.
func (o *FirmwareCifsServer) HasRemoteFile() bool {
	if o != nil && o.RemoteFile != nil {
		return true
	}

	return false
}

// SetRemoteFile gets a reference to the given string and assigns it to the RemoteFile field.
func (o *FirmwareCifsServer) SetRemoteFile(v string) {
	o.RemoteFile = &v
}

// GetRemoteIp returns the RemoteIp field value if set, zero value otherwise.
func (o *FirmwareCifsServer) GetRemoteIp() string {
	if o == nil || o.RemoteIp == nil {
		var ret string
		return ret
	}
	return *o.RemoteIp
}

// GetRemoteIpOk returns a tuple with the RemoteIp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FirmwareCifsServer) GetRemoteIpOk() (*string, bool) {
	if o == nil || o.RemoteIp == nil {
		return nil, false
	}
	return o.RemoteIp, true
}

// HasRemoteIp returns a boolean if a field has been set.
func (o *FirmwareCifsServer) HasRemoteIp() bool {
	if o != nil && o.RemoteIp != nil {
		return true
	}

	return false
}

// SetRemoteIp gets a reference to the given string and assigns it to the RemoteIp field.
func (o *FirmwareCifsServer) SetRemoteIp(v string) {
	o.RemoteIp = &v
}

// GetRemoteShare returns the RemoteShare field value if set, zero value otherwise.
func (o *FirmwareCifsServer) GetRemoteShare() string {
	if o == nil || o.RemoteShare == nil {
		var ret string
		return ret
	}
	return *o.RemoteShare
}

// GetRemoteShareOk returns a tuple with the RemoteShare field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FirmwareCifsServer) GetRemoteShareOk() (*string, bool) {
	if o == nil || o.RemoteShare == nil {
		return nil, false
	}
	return o.RemoteShare, true
}

// HasRemoteShare returns a boolean if a field has been set.
func (o *FirmwareCifsServer) HasRemoteShare() bool {
	if o != nil && o.RemoteShare != nil {
		return true
	}

	return false
}

// SetRemoteShare gets a reference to the given string and assigns it to the RemoteShare field.
func (o *FirmwareCifsServer) SetRemoteShare(v string) {
	o.RemoteShare = &v
}

func (o FirmwareCifsServer) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	serializedMoBaseComplexType, errMoBaseComplexType := json.Marshal(o.MoBaseComplexType)
	if errMoBaseComplexType != nil {
		return []byte{}, errMoBaseComplexType
	}
	errMoBaseComplexType = json.Unmarshal([]byte(serializedMoBaseComplexType), &toSerialize)
	if errMoBaseComplexType != nil {
		return []byte{}, errMoBaseComplexType
	}
	if true {
		toSerialize["ClassId"] = o.ClassId
	}
	if true {
		toSerialize["ObjectType"] = o.ObjectType
	}
	if o.FileLocation != nil {
		toSerialize["FileLocation"] = o.FileLocation
	}
	if o.MountOptions != nil {
		toSerialize["MountOptions"] = o.MountOptions
	}
	if o.RemoteFile != nil {
		toSerialize["RemoteFile"] = o.RemoteFile
	}
	if o.RemoteIp != nil {
		toSerialize["RemoteIp"] = o.RemoteIp
	}
	if o.RemoteShare != nil {
		toSerialize["RemoteShare"] = o.RemoteShare
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *FirmwareCifsServer) UnmarshalJSON(bytes []byte) (err error) {
	type FirmwareCifsServerWithoutEmbeddedStruct struct {
		// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.
		ClassId string `json:"ClassId"`
		// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
		ObjectType string `json:"ObjectType"`
		// The location to the image file. The accepted format is IP-or-hostname/folder1/folder2/.../imageFile.
		FileLocation *string `json:"FileLocation,omitempty"`
		// Mount option (Authentication Protocol) as configured on the CIFS Server. Example:ntlmv2. * `none` - The default authentication protocol is decided by the endpoint. * `ntlm` - The external CIFS server is configured with ntlm as the authentication protocol. * `ntlmi` - Mount options of CIFS file server is ntlmi. * `ntlmv2` - Mount options of CIFS file server is ntlmv2. * `ntlmv2i` - Mount options of CIFS file server is ntlmv2i. * `ntlmssp` - Mount options of CIFS file server is ntlmssp. * `ntlmsspi` - Mount options of CIFS file server is ntlmsspi.
		MountOptions *string `json:"MountOptions,omitempty"`
		// Filename of the image in the remote share location. Example:ucs-c220m5-huu-3.1.2c.iso.
		RemoteFile *string `json:"RemoteFile,omitempty"`
		// CIFS Server Hostname or IP Address. For example:CIFS-server-hostname or 10.10.8.7. The remote share server should have network connectivity with the CIMC of the selected devices for a successful upgrade.
		RemoteIp *string `json:"RemoteIp,omitempty"`
		// Directory where the image is stored. Example:share/subfolder.
		RemoteShare *string `json:"RemoteShare,omitempty"`
	}

	varFirmwareCifsServerWithoutEmbeddedStruct := FirmwareCifsServerWithoutEmbeddedStruct{}

	err = json.Unmarshal(bytes, &varFirmwareCifsServerWithoutEmbeddedStruct)
	if err == nil {
		varFirmwareCifsServer := _FirmwareCifsServer{}
		varFirmwareCifsServer.ClassId = varFirmwareCifsServerWithoutEmbeddedStruct.ClassId
		varFirmwareCifsServer.ObjectType = varFirmwareCifsServerWithoutEmbeddedStruct.ObjectType
		varFirmwareCifsServer.FileLocation = varFirmwareCifsServerWithoutEmbeddedStruct.FileLocation
		varFirmwareCifsServer.MountOptions = varFirmwareCifsServerWithoutEmbeddedStruct.MountOptions
		varFirmwareCifsServer.RemoteFile = varFirmwareCifsServerWithoutEmbeddedStruct.RemoteFile
		varFirmwareCifsServer.RemoteIp = varFirmwareCifsServerWithoutEmbeddedStruct.RemoteIp
		varFirmwareCifsServer.RemoteShare = varFirmwareCifsServerWithoutEmbeddedStruct.RemoteShare
		*o = FirmwareCifsServer(varFirmwareCifsServer)
	} else {
		return err
	}

	varFirmwareCifsServer := _FirmwareCifsServer{}

	err = json.Unmarshal(bytes, &varFirmwareCifsServer)
	if err == nil {
		o.MoBaseComplexType = varFirmwareCifsServer.MoBaseComplexType
	} else {
		return err
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "ClassId")
		delete(additionalProperties, "ObjectType")
		delete(additionalProperties, "FileLocation")
		delete(additionalProperties, "MountOptions")
		delete(additionalProperties, "RemoteFile")
		delete(additionalProperties, "RemoteIp")
		delete(additionalProperties, "RemoteShare")

		// remove fields from embedded structs
		reflectMoBaseComplexType := reflect.ValueOf(o.MoBaseComplexType)
		for i := 0; i < reflectMoBaseComplexType.Type().NumField(); i++ {
			t := reflectMoBaseComplexType.Type().Field(i)

			if jsonTag := t.Tag.Get("json"); jsonTag != "" {
				fieldName := ""
				if commaIdx := strings.Index(jsonTag, ","); commaIdx > 0 {
					fieldName = jsonTag[:commaIdx]
				} else {
					fieldName = jsonTag
				}
				if fieldName != "AdditionalProperties" {
					delete(additionalProperties, fieldName)
				}
			}
		}

		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableFirmwareCifsServer struct {
	value *FirmwareCifsServer
	isSet bool
}

func (v NullableFirmwareCifsServer) Get() *FirmwareCifsServer {
	return v.value
}

func (v *NullableFirmwareCifsServer) Set(val *FirmwareCifsServer) {
	v.value = val
	v.isSet = true
}

func (v NullableFirmwareCifsServer) IsSet() bool {
	return v.isSet
}

func (v *NullableFirmwareCifsServer) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFirmwareCifsServer(val *FirmwareCifsServer) *NullableFirmwareCifsServer {
	return &NullableFirmwareCifsServer{value: val, isSet: true}
}

func (v NullableFirmwareCifsServer) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFirmwareCifsServer) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
