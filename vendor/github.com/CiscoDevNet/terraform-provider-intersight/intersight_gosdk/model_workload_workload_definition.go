/*
Cisco Intersight

Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations. The Intersight OpenAPI document defines the complete set of properties that are returned in the HTTP response. From that perspective, a client can expect that no additional properties are returned, unless these properties are explicitly defined in the OpenAPI document. However, when a client uses an older version of the Intersight OpenAPI document, the server may send additional properties because the software is more recent than the client. In that case, the client may receive properties that it does not know about. Some generated SDKs perform a strict validation of the HTTP response body against the OpenAPI document.

API version: 1.0.11-2025092610
Contact: intersight@cisco.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package intersight

import (
	"encoding/json"
	"fmt"
	"reflect"
	"strings"
)

// checks if the WorkloadWorkloadDefinition type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &WorkloadWorkloadDefinition{}

// WorkloadWorkloadDefinition Details of a Workload Definition.
type WorkloadWorkloadDefinition struct {
	MoBaseMo
	// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.
	ClassId string `json:"ClassId"`
	// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
	ObjectType        string                       `json:"ObjectType"`
	Blueprints        []WorkloadBlueprintReference `json:"Blueprints,omitempty"`
	DeploymentSummary []WorkloadStateAggregation   `json:"DeploymentSummary,omitempty"`
	// The description for this workload definition.
	Description *string `json:"Description,omitempty" validate:"regexp=^$|^[a-zA-Z0-9]+[\\\\x00-\\\\xFF]*$"`
	// The name for this Workload. You can have multiple versions of the Workload with the same name. Name can only contain letters (a-z, A-Z), numbers (0-9), space, hyphen (-), or an underscore (_). A refName is generated from the given name, and that along with the version must be unique within an Organization.
	Name         *string  `json:"Name,omitempty" validate:"regexp=^[a-zA-Z0-9][a-zA-Z0-9- _]{0,31}$"`
	PlatformType []string `json:"PlatformType,omitempty"`
	// The flag to indicate that this is the preferred (default) version of the workload.
	PreferredVersion                *bool                           `json:"PreferredVersion,omitempty"`
	PreferredVersionRolloutStrategy NullableWorkloadRolloutStrategy `json:"PreferredVersionRolloutStrategy,omitempty"`
	// A reference name is generated by the system based on the given name by replacing spaces and hyphen in name with underscore. This reference name is used internally and cannot be edited by users. It may only contain letters (a–z, A–Z), numbers (0–9), and underscores (_).
	RefName *string `json:"RefName,omitempty" validate:"regexp=^$|^[a-zA-Z0-9][a-zA-Z0-9_]{0,31}$"`
	// The status of the definition. * `Inactive` - The definition is in an inactive state and there are no workload instances associated with this workload. Changes to input parameters within the workload are allowed in this state. * `Active` - The definition is active and associated with one or more workload instances.
	Status                *string                               `json:"Status,omitempty"`
	ValidationInformation NullableWorkflowValidationInformation `json:"ValidationInformation,omitempty"`
	// The version of the workload to support multiple versions.
	Version              *int64                                       `json:"Version,omitempty"`
	Organization         NullableOrganizationOrganizationRelationship `json:"Organization,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _WorkloadWorkloadDefinition WorkloadWorkloadDefinition

// NewWorkloadWorkloadDefinition instantiates a new WorkloadWorkloadDefinition object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWorkloadWorkloadDefinition(classId string, objectType string) *WorkloadWorkloadDefinition {
	this := WorkloadWorkloadDefinition{}
	this.ClassId = classId
	this.ObjectType = objectType
	var preferredVersion bool = false
	this.PreferredVersion = &preferredVersion
	var status string = "Inactive"
	this.Status = &status
	var version int64 = 1
	this.Version = &version
	return &this
}

// NewWorkloadWorkloadDefinitionWithDefaults instantiates a new WorkloadWorkloadDefinition object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWorkloadWorkloadDefinitionWithDefaults() *WorkloadWorkloadDefinition {
	this := WorkloadWorkloadDefinition{}
	var classId string = "workload.WorkloadDefinition"
	this.ClassId = classId
	var objectType string = "workload.WorkloadDefinition"
	this.ObjectType = objectType
	var preferredVersion bool = false
	this.PreferredVersion = &preferredVersion
	var status string = "Inactive"
	this.Status = &status
	var version int64 = 1
	this.Version = &version
	return &this
}

// GetClassId returns the ClassId field value
func (o *WorkloadWorkloadDefinition) GetClassId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ClassId
}

// GetClassIdOk returns a tuple with the ClassId field value
// and a boolean to check if the value has been set.
func (o *WorkloadWorkloadDefinition) GetClassIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ClassId, true
}

// SetClassId sets field value
func (o *WorkloadWorkloadDefinition) SetClassId(v string) {
	o.ClassId = v
}

// GetDefaultClassId returns the default value "workload.WorkloadDefinition" of the ClassId field.
func (o *WorkloadWorkloadDefinition) GetDefaultClassId() interface{} {
	return "workload.WorkloadDefinition"
}

// GetObjectType returns the ObjectType field value
func (o *WorkloadWorkloadDefinition) GetObjectType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ObjectType
}

// GetObjectTypeOk returns a tuple with the ObjectType field value
// and a boolean to check if the value has been set.
func (o *WorkloadWorkloadDefinition) GetObjectTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ObjectType, true
}

// SetObjectType sets field value
func (o *WorkloadWorkloadDefinition) SetObjectType(v string) {
	o.ObjectType = v
}

// GetDefaultObjectType returns the default value "workload.WorkloadDefinition" of the ObjectType field.
func (o *WorkloadWorkloadDefinition) GetDefaultObjectType() interface{} {
	return "workload.WorkloadDefinition"
}

// GetBlueprints returns the Blueprints field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *WorkloadWorkloadDefinition) GetBlueprints() []WorkloadBlueprintReference {
	if o == nil {
		var ret []WorkloadBlueprintReference
		return ret
	}
	return o.Blueprints
}

// GetBlueprintsOk returns a tuple with the Blueprints field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *WorkloadWorkloadDefinition) GetBlueprintsOk() ([]WorkloadBlueprintReference, bool) {
	if o == nil || IsNil(o.Blueprints) {
		return nil, false
	}
	return o.Blueprints, true
}

// HasBlueprints returns a boolean if a field has been set.
func (o *WorkloadWorkloadDefinition) HasBlueprints() bool {
	if o != nil && !IsNil(o.Blueprints) {
		return true
	}

	return false
}

// SetBlueprints gets a reference to the given []WorkloadBlueprintReference and assigns it to the Blueprints field.
func (o *WorkloadWorkloadDefinition) SetBlueprints(v []WorkloadBlueprintReference) {
	o.Blueprints = v
}

// GetDeploymentSummary returns the DeploymentSummary field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *WorkloadWorkloadDefinition) GetDeploymentSummary() []WorkloadStateAggregation {
	if o == nil {
		var ret []WorkloadStateAggregation
		return ret
	}
	return o.DeploymentSummary
}

// GetDeploymentSummaryOk returns a tuple with the DeploymentSummary field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *WorkloadWorkloadDefinition) GetDeploymentSummaryOk() ([]WorkloadStateAggregation, bool) {
	if o == nil || IsNil(o.DeploymentSummary) {
		return nil, false
	}
	return o.DeploymentSummary, true
}

// HasDeploymentSummary returns a boolean if a field has been set.
func (o *WorkloadWorkloadDefinition) HasDeploymentSummary() bool {
	if o != nil && !IsNil(o.DeploymentSummary) {
		return true
	}

	return false
}

// SetDeploymentSummary gets a reference to the given []WorkloadStateAggregation and assigns it to the DeploymentSummary field.
func (o *WorkloadWorkloadDefinition) SetDeploymentSummary(v []WorkloadStateAggregation) {
	o.DeploymentSummary = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *WorkloadWorkloadDefinition) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkloadWorkloadDefinition) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *WorkloadWorkloadDefinition) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *WorkloadWorkloadDefinition) SetDescription(v string) {
	o.Description = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *WorkloadWorkloadDefinition) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkloadWorkloadDefinition) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *WorkloadWorkloadDefinition) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *WorkloadWorkloadDefinition) SetName(v string) {
	o.Name = &v
}

// GetPlatformType returns the PlatformType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *WorkloadWorkloadDefinition) GetPlatformType() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.PlatformType
}

// GetPlatformTypeOk returns a tuple with the PlatformType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *WorkloadWorkloadDefinition) GetPlatformTypeOk() ([]string, bool) {
	if o == nil || IsNil(o.PlatformType) {
		return nil, false
	}
	return o.PlatformType, true
}

// HasPlatformType returns a boolean if a field has been set.
func (o *WorkloadWorkloadDefinition) HasPlatformType() bool {
	if o != nil && !IsNil(o.PlatformType) {
		return true
	}

	return false
}

// SetPlatformType gets a reference to the given []string and assigns it to the PlatformType field.
func (o *WorkloadWorkloadDefinition) SetPlatformType(v []string) {
	o.PlatformType = v
}

// GetPreferredVersion returns the PreferredVersion field value if set, zero value otherwise.
func (o *WorkloadWorkloadDefinition) GetPreferredVersion() bool {
	if o == nil || IsNil(o.PreferredVersion) {
		var ret bool
		return ret
	}
	return *o.PreferredVersion
}

// GetPreferredVersionOk returns a tuple with the PreferredVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkloadWorkloadDefinition) GetPreferredVersionOk() (*bool, bool) {
	if o == nil || IsNil(o.PreferredVersion) {
		return nil, false
	}
	return o.PreferredVersion, true
}

// HasPreferredVersion returns a boolean if a field has been set.
func (o *WorkloadWorkloadDefinition) HasPreferredVersion() bool {
	if o != nil && !IsNil(o.PreferredVersion) {
		return true
	}

	return false
}

// SetPreferredVersion gets a reference to the given bool and assigns it to the PreferredVersion field.
func (o *WorkloadWorkloadDefinition) SetPreferredVersion(v bool) {
	o.PreferredVersion = &v
}

// GetPreferredVersionRolloutStrategy returns the PreferredVersionRolloutStrategy field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *WorkloadWorkloadDefinition) GetPreferredVersionRolloutStrategy() WorkloadRolloutStrategy {
	if o == nil || IsNil(o.PreferredVersionRolloutStrategy.Get()) {
		var ret WorkloadRolloutStrategy
		return ret
	}
	return *o.PreferredVersionRolloutStrategy.Get()
}

// GetPreferredVersionRolloutStrategyOk returns a tuple with the PreferredVersionRolloutStrategy field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *WorkloadWorkloadDefinition) GetPreferredVersionRolloutStrategyOk() (*WorkloadRolloutStrategy, bool) {
	if o == nil {
		return nil, false
	}
	return o.PreferredVersionRolloutStrategy.Get(), o.PreferredVersionRolloutStrategy.IsSet()
}

// HasPreferredVersionRolloutStrategy returns a boolean if a field has been set.
func (o *WorkloadWorkloadDefinition) HasPreferredVersionRolloutStrategy() bool {
	if o != nil && o.PreferredVersionRolloutStrategy.IsSet() {
		return true
	}

	return false
}

// SetPreferredVersionRolloutStrategy gets a reference to the given NullableWorkloadRolloutStrategy and assigns it to the PreferredVersionRolloutStrategy field.
func (o *WorkloadWorkloadDefinition) SetPreferredVersionRolloutStrategy(v WorkloadRolloutStrategy) {
	o.PreferredVersionRolloutStrategy.Set(&v)
}

// SetPreferredVersionRolloutStrategyNil sets the value for PreferredVersionRolloutStrategy to be an explicit nil
func (o *WorkloadWorkloadDefinition) SetPreferredVersionRolloutStrategyNil() {
	o.PreferredVersionRolloutStrategy.Set(nil)
}

// UnsetPreferredVersionRolloutStrategy ensures that no value is present for PreferredVersionRolloutStrategy, not even an explicit nil
func (o *WorkloadWorkloadDefinition) UnsetPreferredVersionRolloutStrategy() {
	o.PreferredVersionRolloutStrategy.Unset()
}

// GetRefName returns the RefName field value if set, zero value otherwise.
func (o *WorkloadWorkloadDefinition) GetRefName() string {
	if o == nil || IsNil(o.RefName) {
		var ret string
		return ret
	}
	return *o.RefName
}

// GetRefNameOk returns a tuple with the RefName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkloadWorkloadDefinition) GetRefNameOk() (*string, bool) {
	if o == nil || IsNil(o.RefName) {
		return nil, false
	}
	return o.RefName, true
}

// HasRefName returns a boolean if a field has been set.
func (o *WorkloadWorkloadDefinition) HasRefName() bool {
	if o != nil && !IsNil(o.RefName) {
		return true
	}

	return false
}

// SetRefName gets a reference to the given string and assigns it to the RefName field.
func (o *WorkloadWorkloadDefinition) SetRefName(v string) {
	o.RefName = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *WorkloadWorkloadDefinition) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkloadWorkloadDefinition) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *WorkloadWorkloadDefinition) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *WorkloadWorkloadDefinition) SetStatus(v string) {
	o.Status = &v
}

// GetValidationInformation returns the ValidationInformation field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *WorkloadWorkloadDefinition) GetValidationInformation() WorkflowValidationInformation {
	if o == nil || IsNil(o.ValidationInformation.Get()) {
		var ret WorkflowValidationInformation
		return ret
	}
	return *o.ValidationInformation.Get()
}

// GetValidationInformationOk returns a tuple with the ValidationInformation field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *WorkloadWorkloadDefinition) GetValidationInformationOk() (*WorkflowValidationInformation, bool) {
	if o == nil {
		return nil, false
	}
	return o.ValidationInformation.Get(), o.ValidationInformation.IsSet()
}

// HasValidationInformation returns a boolean if a field has been set.
func (o *WorkloadWorkloadDefinition) HasValidationInformation() bool {
	if o != nil && o.ValidationInformation.IsSet() {
		return true
	}

	return false
}

// SetValidationInformation gets a reference to the given NullableWorkflowValidationInformation and assigns it to the ValidationInformation field.
func (o *WorkloadWorkloadDefinition) SetValidationInformation(v WorkflowValidationInformation) {
	o.ValidationInformation.Set(&v)
}

// SetValidationInformationNil sets the value for ValidationInformation to be an explicit nil
func (o *WorkloadWorkloadDefinition) SetValidationInformationNil() {
	o.ValidationInformation.Set(nil)
}

// UnsetValidationInformation ensures that no value is present for ValidationInformation, not even an explicit nil
func (o *WorkloadWorkloadDefinition) UnsetValidationInformation() {
	o.ValidationInformation.Unset()
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *WorkloadWorkloadDefinition) GetVersion() int64 {
	if o == nil || IsNil(o.Version) {
		var ret int64
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkloadWorkloadDefinition) GetVersionOk() (*int64, bool) {
	if o == nil || IsNil(o.Version) {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *WorkloadWorkloadDefinition) HasVersion() bool {
	if o != nil && !IsNil(o.Version) {
		return true
	}

	return false
}

// SetVersion gets a reference to the given int64 and assigns it to the Version field.
func (o *WorkloadWorkloadDefinition) SetVersion(v int64) {
	o.Version = &v
}

// GetOrganization returns the Organization field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *WorkloadWorkloadDefinition) GetOrganization() OrganizationOrganizationRelationship {
	if o == nil || IsNil(o.Organization.Get()) {
		var ret OrganizationOrganizationRelationship
		return ret
	}
	return *o.Organization.Get()
}

// GetOrganizationOk returns a tuple with the Organization field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *WorkloadWorkloadDefinition) GetOrganizationOk() (*OrganizationOrganizationRelationship, bool) {
	if o == nil {
		return nil, false
	}
	return o.Organization.Get(), o.Organization.IsSet()
}

// HasOrganization returns a boolean if a field has been set.
func (o *WorkloadWorkloadDefinition) HasOrganization() bool {
	if o != nil && o.Organization.IsSet() {
		return true
	}

	return false
}

// SetOrganization gets a reference to the given NullableOrganizationOrganizationRelationship and assigns it to the Organization field.
func (o *WorkloadWorkloadDefinition) SetOrganization(v OrganizationOrganizationRelationship) {
	o.Organization.Set(&v)
}

// SetOrganizationNil sets the value for Organization to be an explicit nil
func (o *WorkloadWorkloadDefinition) SetOrganizationNil() {
	o.Organization.Set(nil)
}

// UnsetOrganization ensures that no value is present for Organization, not even an explicit nil
func (o *WorkloadWorkloadDefinition) UnsetOrganization() {
	o.Organization.Unset()
}

func (o WorkloadWorkloadDefinition) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o WorkloadWorkloadDefinition) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	serializedMoBaseMo, errMoBaseMo := json.Marshal(o.MoBaseMo)
	if errMoBaseMo != nil {
		return map[string]interface{}{}, errMoBaseMo
	}
	errMoBaseMo = json.Unmarshal([]byte(serializedMoBaseMo), &toSerialize)
	if errMoBaseMo != nil {
		return map[string]interface{}{}, errMoBaseMo
	}
	if _, exists := toSerialize["ClassId"]; !exists {
		toSerialize["ClassId"] = o.GetDefaultClassId()
	}
	toSerialize["ClassId"] = o.ClassId
	if _, exists := toSerialize["ObjectType"]; !exists {
		toSerialize["ObjectType"] = o.GetDefaultObjectType()
	}
	toSerialize["ObjectType"] = o.ObjectType
	if o.Blueprints != nil {
		toSerialize["Blueprints"] = o.Blueprints
	}
	if o.DeploymentSummary != nil {
		toSerialize["DeploymentSummary"] = o.DeploymentSummary
	}
	if !IsNil(o.Description) {
		toSerialize["Description"] = o.Description
	}
	if !IsNil(o.Name) {
		toSerialize["Name"] = o.Name
	}
	if o.PlatformType != nil {
		toSerialize["PlatformType"] = o.PlatformType
	}
	if !IsNil(o.PreferredVersion) {
		toSerialize["PreferredVersion"] = o.PreferredVersion
	}
	if o.PreferredVersionRolloutStrategy.IsSet() {
		toSerialize["PreferredVersionRolloutStrategy"] = o.PreferredVersionRolloutStrategy.Get()
	}
	if !IsNil(o.RefName) {
		toSerialize["RefName"] = o.RefName
	}
	if !IsNil(o.Status) {
		toSerialize["Status"] = o.Status
	}
	if o.ValidationInformation.IsSet() {
		toSerialize["ValidationInformation"] = o.ValidationInformation.Get()
	}
	if !IsNil(o.Version) {
		toSerialize["Version"] = o.Version
	}
	if o.Organization.IsSet() {
		toSerialize["Organization"] = o.Organization.Get()
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *WorkloadWorkloadDefinition) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"ClassId",
		"ObjectType",
	}

	// defaultValueFuncMap captures the default values for required properties.
	// These values are used when required properties are missing from the payload.
	defaultValueFuncMap := map[string]func() interface{}{
		"ClassId":    o.GetDefaultClassId,
		"ObjectType": o.GetDefaultObjectType,
	}
	var defaultValueApplied bool
	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			if _, ok := defaultValueFuncMap[requiredProperty]; ok {
				allProperties[requiredProperty] = defaultValueFuncMap[requiredProperty]()
				defaultValueApplied = true
			}
		}
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	if defaultValueApplied {
		data, err = json.Marshal(allProperties)
		if err != nil {
			return err
		}
	}
	type WorkloadWorkloadDefinitionWithoutEmbeddedStruct struct {
		// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.
		ClassId string `json:"ClassId"`
		// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
		ObjectType        string                       `json:"ObjectType"`
		Blueprints        []WorkloadBlueprintReference `json:"Blueprints,omitempty"`
		DeploymentSummary []WorkloadStateAggregation   `json:"DeploymentSummary,omitempty"`
		// The description for this workload definition.
		Description *string `json:"Description,omitempty" validate:"regexp=^$|^[a-zA-Z0-9]+[\\\\x00-\\\\xFF]*$"`
		// The name for this Workload. You can have multiple versions of the Workload with the same name. Name can only contain letters (a-z, A-Z), numbers (0-9), space, hyphen (-), or an underscore (_). A refName is generated from the given name, and that along with the version must be unique within an Organization.
		Name         *string  `json:"Name,omitempty" validate:"regexp=^[a-zA-Z0-9][a-zA-Z0-9- _]{0,31}$"`
		PlatformType []string `json:"PlatformType,omitempty"`
		// The flag to indicate that this is the preferred (default) version of the workload.
		PreferredVersion                *bool                           `json:"PreferredVersion,omitempty"`
		PreferredVersionRolloutStrategy NullableWorkloadRolloutStrategy `json:"PreferredVersionRolloutStrategy,omitempty"`
		// A reference name is generated by the system based on the given name by replacing spaces and hyphen in name with underscore. This reference name is used internally and cannot be edited by users. It may only contain letters (a–z, A–Z), numbers (0–9), and underscores (_).
		RefName *string `json:"RefName,omitempty" validate:"regexp=^$|^[a-zA-Z0-9][a-zA-Z0-9_]{0,31}$"`
		// The status of the definition. * `Inactive` - The definition is in an inactive state and there are no workload instances associated with this workload. Changes to input parameters within the workload are allowed in this state. * `Active` - The definition is active and associated with one or more workload instances.
		Status                *string                               `json:"Status,omitempty"`
		ValidationInformation NullableWorkflowValidationInformation `json:"ValidationInformation,omitempty"`
		// The version of the workload to support multiple versions.
		Version      *int64                                       `json:"Version,omitempty"`
		Organization NullableOrganizationOrganizationRelationship `json:"Organization,omitempty"`
	}

	varWorkloadWorkloadDefinitionWithoutEmbeddedStruct := WorkloadWorkloadDefinitionWithoutEmbeddedStruct{}

	err = json.Unmarshal(data, &varWorkloadWorkloadDefinitionWithoutEmbeddedStruct)
	if err == nil {
		varWorkloadWorkloadDefinition := _WorkloadWorkloadDefinition{}
		varWorkloadWorkloadDefinition.ClassId = varWorkloadWorkloadDefinitionWithoutEmbeddedStruct.ClassId
		varWorkloadWorkloadDefinition.ObjectType = varWorkloadWorkloadDefinitionWithoutEmbeddedStruct.ObjectType
		varWorkloadWorkloadDefinition.Blueprints = varWorkloadWorkloadDefinitionWithoutEmbeddedStruct.Blueprints
		varWorkloadWorkloadDefinition.DeploymentSummary = varWorkloadWorkloadDefinitionWithoutEmbeddedStruct.DeploymentSummary
		varWorkloadWorkloadDefinition.Description = varWorkloadWorkloadDefinitionWithoutEmbeddedStruct.Description
		varWorkloadWorkloadDefinition.Name = varWorkloadWorkloadDefinitionWithoutEmbeddedStruct.Name
		varWorkloadWorkloadDefinition.PlatformType = varWorkloadWorkloadDefinitionWithoutEmbeddedStruct.PlatformType
		varWorkloadWorkloadDefinition.PreferredVersion = varWorkloadWorkloadDefinitionWithoutEmbeddedStruct.PreferredVersion
		varWorkloadWorkloadDefinition.PreferredVersionRolloutStrategy = varWorkloadWorkloadDefinitionWithoutEmbeddedStruct.PreferredVersionRolloutStrategy
		varWorkloadWorkloadDefinition.RefName = varWorkloadWorkloadDefinitionWithoutEmbeddedStruct.RefName
		varWorkloadWorkloadDefinition.Status = varWorkloadWorkloadDefinitionWithoutEmbeddedStruct.Status
		varWorkloadWorkloadDefinition.ValidationInformation = varWorkloadWorkloadDefinitionWithoutEmbeddedStruct.ValidationInformation
		varWorkloadWorkloadDefinition.Version = varWorkloadWorkloadDefinitionWithoutEmbeddedStruct.Version
		varWorkloadWorkloadDefinition.Organization = varWorkloadWorkloadDefinitionWithoutEmbeddedStruct.Organization
		*o = WorkloadWorkloadDefinition(varWorkloadWorkloadDefinition)
	} else {
		return err
	}

	varWorkloadWorkloadDefinition := _WorkloadWorkloadDefinition{}

	err = json.Unmarshal(data, &varWorkloadWorkloadDefinition)
	if err == nil {
		o.MoBaseMo = varWorkloadWorkloadDefinition.MoBaseMo
	} else {
		return err
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "ClassId")
		delete(additionalProperties, "ObjectType")
		delete(additionalProperties, "Blueprints")
		delete(additionalProperties, "DeploymentSummary")
		delete(additionalProperties, "Description")
		delete(additionalProperties, "Name")
		delete(additionalProperties, "PlatformType")
		delete(additionalProperties, "PreferredVersion")
		delete(additionalProperties, "PreferredVersionRolloutStrategy")
		delete(additionalProperties, "RefName")
		delete(additionalProperties, "Status")
		delete(additionalProperties, "ValidationInformation")
		delete(additionalProperties, "Version")
		delete(additionalProperties, "Organization")

		// remove fields from embedded structs
		reflectMoBaseMo := reflect.ValueOf(o.MoBaseMo)
		for i := 0; i < reflectMoBaseMo.Type().NumField(); i++ {
			t := reflectMoBaseMo.Type().Field(i)

			if jsonTag := t.Tag.Get("json"); jsonTag != "" {
				fieldName := ""
				if commaIdx := strings.Index(jsonTag, ","); commaIdx > 0 {
					fieldName = jsonTag[:commaIdx]
				} else {
					fieldName = jsonTag
				}
				if fieldName != "AdditionalProperties" {
					delete(additionalProperties, fieldName)
				}
			}
		}

		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableWorkloadWorkloadDefinition struct {
	value *WorkloadWorkloadDefinition
	isSet bool
}

func (v NullableWorkloadWorkloadDefinition) Get() *WorkloadWorkloadDefinition {
	return v.value
}

func (v *NullableWorkloadWorkloadDefinition) Set(val *WorkloadWorkloadDefinition) {
	v.value = val
	v.isSet = true
}

func (v NullableWorkloadWorkloadDefinition) IsSet() bool {
	return v.isSet
}

func (v *NullableWorkloadWorkloadDefinition) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWorkloadWorkloadDefinition(val *WorkloadWorkloadDefinition) *NullableWorkloadWorkloadDefinition {
	return &NullableWorkloadWorkloadDefinition{value: val, isSet: true}
}

func (v NullableWorkloadWorkloadDefinition) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWorkloadWorkloadDefinition) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
