/*
 * Cisco Intersight
 *
 * Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations. The Intersight OpenAPI document defines the complete set of properties that are returned in the HTTP response. From that perspective, a client can expect that no additional properties are returned, unless these properties are explicitly defined in the OpenAPI document. However, when a client uses an older version of the Intersight OpenAPI document, the server may send additional properties because the software is more recent than the client. In that case, the client may receive properties that it does not know about. Some generated SDKs perform a strict validation of the HTTP response body against the OpenAPI document. This document was created on 2021-07-21T16:37:30Z.
 *
 * API version: 1.0.9-4403
 * Contact: intersight@cisco.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package intersight

import (
	"encoding/json"
	"reflect"
	"strings"
)

// NiatelemetryNiaFeatureUsage Object available at Device connector scope for feature and fabric information. This applies to APIC environment currently.
type NiatelemetryNiaFeatureUsage struct {
	MoBaseMo
	// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.
	ClassId string `json:"ClassId"`
	// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
	ObjectType string `json:"ObjectType"`
	// Returns the total number of AAA Ldap Providers.
	AaaLdapProviderCount *int64 `json:"AaaLdapProviderCount,omitempty"`
	// Returns the total number of AAA Radius Providers.
	AaaRadiusProviderCount *int64 `json:"AaaRadiusProviderCount,omitempty"`
	// Returns the total number of AAA Tacacs Providers.
	AaaTacacsProviderCount *int64 `json:"AaaTacacsProviderCount,omitempty"`
	// Number of APIC controllers. This determines the value of controllers for the fabric.
	ApicCount *int64 `json:"ApicCount,omitempty"`
	// Returns if telnet is enabled on APIC.
	ApicIsTelnetEnabled *bool `json:"ApicIsTelnetEnabled,omitempty"`
	// Count of NTP servers configured on APIC.
	ApicNtpCount *int64 `json:"ApicNtpCount,omitempty"`
	// Number of SNMP communities configured on APIC.
	ApicSnmpCommunityCount *int64 `json:"ApicSnmpCommunityCount,omitempty"`
	// Number of logging groups configured on APIC.
	ApicSysLogGrpCount *int64 `json:"ApicSysLogGrpCount,omitempty"`
	// Number of logging sources configured on APIC.
	ApicSysLogSrcCount *int64 `json:"ApicSysLogSrcCount,omitempty"`
	// ACI APPs feature usage scale.
	AppCenterCount *int64 `json:"AppCenterCount,omitempty"`
	// AVE feature usage. This determines if ACI virtual edge feature is enabled or disabled.
	Ave *string `json:"Ave,omitempty"`
	// Number of BDs. This determines the total number of Broadcast Domains across the fabric.
	BdCount *int64 `json:"BdCount,omitempty"`
	// Number of call home smart monitoring policies on the fabric.
	CallhomeSmartGroupCount *int64 `json:"CallhomeSmartGroupCount,omitempty"`
	// Number of Cloudsec SA peers.
	CloudSecPeerCount *int64 `json:"CloudSecPeerCount,omitempty"`
	// Number of compute hypervisors on the fabric.
	CompHvCount *int64 `json:"CompHvCount,omitempty"`
	// Number of system backup configure export policies on the fabric.
	ConfigExportpCount *int64 `json:"ConfigExportpCount,omitempty"`
	// Number of system backup configure jobs on the fabric.
	ConfigJobCount *int64 `json:"ConfigJobCount,omitempty"`
	// Consistency checker application usage. This determines if the fabric has Consistency checker application installed.
	ConsistencyCheckerApp *string `json:"ConsistencyCheckerApp,omitempty"`
	// Number of contracts. This determines the total number of Contracts configured across the fabric.
	ContractCount *int64 `json:"ContractCount,omitempty"`
	// DNS feature usage. This determines the total number of DNS configurations across the fabric.
	DnsCount *int64 `json:"DnsCount,omitempty"`
	// Eigrp feature usage. This determines the total number of EIGRP sessions across the fabric.
	EigrpCount *int64 `json:"EigrpCount,omitempty"`
	// Number of End Point Groups. This determines the total number of End Point Groups across the fabric.
	EpgCount *int64 `json:"EpgCount,omitempty"`
	// Returns the total number of fabric module slots.
	FabricModuleCount *int64 `json:"FabricModuleCount,omitempty"`
	// Number of Multi-Pods per fabric.
	FabricSetuppCount *int64 `json:"FabricSetuppCount,omitempty"`
	// Total number of FCoE N-Port for DOM, VSAn, and VLAN.
	FcoeNportCount *int64 `json:"FcoeNportCount,omitempty"`
	// Number of FCoE N-Port DOM.
	FcoeNportDomCount *int64 `json:"FcoeNportDomCount,omitempty"`
	// Number of FCoE N-Port VLAN.
	FcoeNportVlanCount *int64 `json:"FcoeNportVlanCount,omitempty"`
	// Number of FCoE N-Port VSAN.
	FcoeNportVsanCount *int64 `json:"FcoeNportVsanCount,omitempty"`
	// Number of Internet Protocol Service Level Agreements Monitoring policy objects for object tracking.
	FvSlaDefCount *int64 `json:"FvSlaDefCount,omitempty"`
	// Hsrp feature usage. This determines the total number of HSRP sessions across the fabric.
	HsrpCount *int64 `json:"HsrpCount,omitempty"`
	// Ibgp feature usage. This determines the total number of BGP sessions across the fabric.
	IbgpCount *int64 `json:"IbgpCount,omitempty"`
	// IGMP Access List feature usage. This determines the total number of IGMP access lists configured across the fabric.
	IgmpAccessListCount *int64 `json:"IgmpAccessListCount,omitempty"`
	// IGMP Snooping feature usage. This determines if this feature is enabled or disabled.
	IgmpSnoop *string `json:"IgmpSnoop,omitempty"`
	// Number of IP based End Point Groups. This determines the total number of IP End Point Groups across the fabric.
	IpEpgCount *int64 `json:"IpEpgCount,omitempty"`
	// BGP route reflector usage on APIC.
	IsBgpRouteReflectorsFeatureUsed *bool `json:"IsBgpRouteReflectorsFeatureUsed,omitempty"`
	// Brodge domains feature usage on APIC controller.
	IsBridgeDomainsFeatureUsed *bool `json:"IsBridgeDomainsFeatureUsed,omitempty"`
	// Returns value of isCommonLocalUserName field.
	IsCommonLocalUserName *bool `json:"IsCommonLocalUserName,omitempty"`
	// Contracts feature usage on APIC controller.
	IsContractsFeatureUsed *bool `json:"IsContractsFeatureUsed,omitempty"`
	// EPG feature usage on APIC controller.
	IsEpgFeatureUsed *bool `json:"IsEpgFeatureUsed,omitempty"`
	// Filters feature usage on APIC.
	IsFiltersFeatureUsed *bool `json:"IsFiltersFeatureUsed,omitempty"`
	// Returns if HTTP is configured.
	IsHttpConfigured *bool `json:"IsHttpConfigured,omitempty"`
	// Returns if HTTPS is configured.
	IsHttpsConfigured *bool `json:"IsHttpsConfigured,omitempty"`
	// NTP feature usage on APIC controller.
	IsNtpFeatureUsed *bool `json:"IsNtpFeatureUsed,omitempty"`
	// Ptp feature usage on APIC.
	IsPtpFeatureUsed *bool `json:"IsPtpFeatureUsed,omitempty"`
	// Synce feature usage on APIC.
	IsSynceFeatureUsed *bool `json:"IsSynceFeatureUsed,omitempty"`
	// Status of techsupport collection.
	IsTechSupportCollected *string `json:"IsTechSupportCollected,omitempty"`
	// Tenants feature usage on APIC.
	IsTenantsFeatureUsed *bool `json:"IsTenantsFeatureUsed,omitempty"`
	// VRF feature usage on APIC controller.
	IsVrfsFeatureUsed *bool `json:"IsVrfsFeatureUsed,omitempty"`
	// Isis feature usage. This determines the total number of ISIS sessions across the fabric.
	IsisCount *int64 `json:"IsisCount,omitempty"`
	// L2Multicast feature usage. This determines if this Layer 2 Multicast feature is being enabled / disabled on the fabric.
	L2Multicast *string `json:"L2Multicast,omitempty"`
	// Number of Leafs. This determines the total number of Leaf switches in the fabric.
	LeafCount *int64 `json:"LeafCount,omitempty"`
	// Returns count of local users.
	LocalUsernameCount *int64 `json:"LocalUsernameCount,omitempty"`
	// Returns login block duration value.
	LoginBlockDuration *int64 `json:"LoginBlockDuration,omitempty"`
	// Returns the maximum failed attempts on login.
	LoginMaxFailedAttempts *int64 `json:"LoginMaxFailedAttempts,omitempty"`
	// Returns the maximum failed attempt windows on login.
	LoginMaxFailedAttemptsWindow *int64 `json:"LoginMaxFailedAttemptsWindow,omitempty"`
	// Maintenance Mode feature usage. This determines the number of switches that are currently in maintenance mode.
	MaintenanceModeCount *int64 `json:"MaintenanceModeCount,omitempty"`
	// Management over IPv6 feature usage. This determines the total number of IPv6 configurtaions in the fabric.
	ManagementOverV6Count *int64 `json:"ManagementOverV6Count,omitempty"`
	// Number of Microsoft microsegmentation VmmEpPD objects. Ensures that Microsoft was configured.
	MicrosoftUsegVmmEpPdCount *int64 `json:"MicrosoftUsegVmmEpPdCount,omitempty"`
	// Number of Netflow monitor policies.
	NetFlowCount *int64 `json:"NetFlowCount,omitempty"`
	// NIR application usage. This determines if the fabric has NIR application installed.
	Nir *string `json:"Nir,omitempty"`
	// Open stack feature usage.
	OpenStack *string `json:"OpenStack,omitempty"`
	// Opflex for Kubernetes feature usage. This determines the total number of VMM sessions of type kubernetes.
	OpflexKubernetesCount *int64 `json:"OpflexKubernetesCount,omitempty"`
	// Ospf feature usage. This determines the total number of OSPF sessions across the fabric.
	OspfCount *int64 `json:"OspfCount,omitempty"`
	// Returns count of passwords.
	PasswordHistoryCount *int64 `json:"PasswordHistoryCount,omitempty"`
	// Returns if the password is strong or not.
	PasswordStrengthCheck *string `json:"PasswordStrengthCheck,omitempty"`
	// Returns the number of password strength profile.
	PasswordStrengthProfileCount *int64 `json:"PasswordStrengthProfileCount,omitempty"`
	// POE feature usage. This determines the total number of POE configurations across the fabric.
	PoeCount *int64 `json:"PoeCount,omitempty"`
	// Number of objects with Port Security enabled. Non-Zero value indicates the object as enabled.
	PortSecurityCount *int64 `json:"PortSecurityCount,omitempty"`
	// QinVniTunnel feature usage. This determines if the qinVniTunnel feature is being used on the fabric and the scale of it.
	QinVniTunnelCount *int64 `json:"QinVniTunnelCount,omitempty"`
	// Number of Quality Of Service congestion class.
	QosCongCount *int64 `json:"QosCongCount,omitempty"`
	// Number of Quality Of Service class.
	QosPfcPolCount *int64 `json:"QosPfcPolCount,omitempty"`
	// Returns the value of count of realms.
	RealmCount *int64 `json:"RealmCount,omitempty"`
	// Type of record DCNM / APIC / SE. This determines the type of platform where inventory was collected.
	RecordType *string `json:"RecordType,omitempty"`
	// Version of record being pushed. This determines what was the API version for data available from the device.
	RecordVersion *string `json:"RecordVersion,omitempty"`
	// Number of remote Leafs. This determines the total number of remote leaf switches in the fabric.
	RemoteLeafCount *int64 `json:"RemoteLeafCount,omitempty"`
	// SCVMM feature usage. This determines the total number of SCVMM configurations in the fabric.
	ScvmmCount *int64 `json:"ScvmmCount,omitempty"`
	// SharedL3Out feature usage. This determines the total number of Shared L3 out configured across the fabric.
	SharedL3OutCount *int64 `json:"SharedL3OutCount,omitempty"`
	// The Site name represents an APIC cluster. Service Engine can onboard multiple APIC clusters / sites. There will be a feature usage object per site in Multi site scenario. In multi-site scenario the site name is available in all the requests being made.
	SiteName *string `json:"SiteName,omitempty"`
	// Smart callhome feature usage. This determines if this feature is being enabled or disabled.
	SmartCallHome *string                          `json:"SmartCallHome,omitempty"`
	SmartLicense  NullableNiatelemetrySmartLicense `json:"SmartLicense,omitempty"`
	// Returns count of snapshots.
	SnapshotCount *int64 `json:"SnapshotCount,omitempty"`
	// SNMP feature usage. This determines if this feature is enabled or disabled.
	Snmp *string `json:"Snmp,omitempty"`
	// Returns count of SNMP Community Access.
	SnmpCommunityAccessCount *int64 `json:"SnmpCommunityAccessCount,omitempty"`
	// Number of SNMP monitoring policies on the fabric.
	SnmpGroupCount *int64 `json:"SnmpGroupCount,omitempty"`
	// Returns count of SNMP trap.
	SnmpTrapCount *int64 `json:"SnmpTrapCount,omitempty"`
	// Returns count of SNMP V3 on the fabric.
	SnmpV3Count *int64 `json:"SnmpV3Count,omitempty"`
	// Number of Span Sources and Destinations.
	SpanCount *int64 `json:"SpanCount,omitempty"`
	// Number of Span Destinations with valid state.
	SpanDstCount *int64 `json:"SpanDstCount,omitempty"`
	// Number of Span Sources with valid state.
	SpanSrcCount *int64 `json:"SpanSrcCount,omitempty"`
	// Number of Spines. This determines the total number of spine switches in the fabric.
	SpineCount *int64 `json:"SpineCount,omitempty"`
	// Ssh over IPv6 feature usage. This determines the total number of IPv6 configurtaions in the fabric.
	SshOverV6Count *int64 `json:"SshOverV6Count,omitempty"`
	// Returns count of ssh V2 on the fabric.
	SshV2Count *int64 `json:"SshV2Count,omitempty"`
	// Returns the total number of supervisor module slots.
	SupervisorModuleCount *int64 `json:"SupervisorModuleCount,omitempty"`
	// Number of syslog monitoring policies on the fabric.
	SyslogGroupCount *int64 `json:"SyslogGroupCount,omitempty"`
	// Syslog over IPv6 feature usage. This determines the total number of IPv6 configurtaions in the fabric.
	SyslogOverV6Count *int64 `json:"SyslogOverV6Count,omitempty"`
	// Returns the total number of system controller slots.
	SystemControllerCount *int64 `json:"SystemControllerCount,omitempty"`
	// Number of tacacs monitoring policies on the fabric.
	TacacsGroupCount *int64 `json:"TacacsGroupCount,omitempty"`
	// Number of tenants. This determines the total number of tenants configured across the fabric.
	TenantCount *int64 `json:"TenantCount,omitempty"`
	// Number of tier 2 Leafs. This determines the total number of tier 2 Leaf switches in the fabric.
	TierTwoLeafCount *int64 `json:"TierTwoLeafCount,omitempty"`
	// TWAMP feature usage. This determines if this feature is enabled or disabled.
	Twamp *string `json:"Twamp,omitempty"`
	// VMM uSegmentation feature usage. This determines if microsegmentation feature is enabled or disabled.
	Useg *string `json:"Useg,omitempty"`
	// Number of objects with VmWare vCenter 6.5 support. Checks the controller revision value.
	VmWareVdsCount *int64 `json:"VmWareVdsCount,omitempty"`
	// Number of Virtual Machine Monitor controller policy objects for VMware vCenter.
	VmmCtrlrpCount *int64 `json:"VmmCtrlrpCount,omitempty"`
	// Number of Virtual Machine Monitor domain policy model objects for VMware vCenter.
	VmmDompCount *int64 `json:"VmmDompCount,omitempty"`
	// Microsegmentation Distributed Virtual Switch feature usage. Gets the number of objects associated to VMware vCenter.
	VmmEpPdCount *int64 `json:"VmmEpPdCount,omitempty"`
	// Number of objects with L4-L7 Device Package Import enabled. Checks for the vendor and the model.
	VnsmDevCount *int64 `json:"VnsmDevCount,omitempty"`
	// Virtual pod feature usage. This determines the total number of virtual POD configurations in the fabrics.
	VpodCount *int64 `json:"VpodCount,omitempty"`
	// Timeout for web token in seconds.
	WebtokenTimeoutSeconds *int64                               `json:"WebtokenTimeoutSeconds,omitempty"`
	RegisteredDevice       *AssetDeviceRegistrationRelationship `json:"RegisteredDevice,omitempty"`
	AdditionalProperties   map[string]interface{}
}

type _NiatelemetryNiaFeatureUsage NiatelemetryNiaFeatureUsage

// NewNiatelemetryNiaFeatureUsage instantiates a new NiatelemetryNiaFeatureUsage object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNiatelemetryNiaFeatureUsage(classId string, objectType string) *NiatelemetryNiaFeatureUsage {
	this := NiatelemetryNiaFeatureUsage{}
	this.ClassId = classId
	this.ObjectType = objectType
	return &this
}

// NewNiatelemetryNiaFeatureUsageWithDefaults instantiates a new NiatelemetryNiaFeatureUsage object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNiatelemetryNiaFeatureUsageWithDefaults() *NiatelemetryNiaFeatureUsage {
	this := NiatelemetryNiaFeatureUsage{}
	var classId string = "niatelemetry.NiaFeatureUsage"
	this.ClassId = classId
	var objectType string = "niatelemetry.NiaFeatureUsage"
	this.ObjectType = objectType
	return &this
}

// GetClassId returns the ClassId field value
func (o *NiatelemetryNiaFeatureUsage) GetClassId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ClassId
}

// GetClassIdOk returns a tuple with the ClassId field value
// and a boolean to check if the value has been set.
func (o *NiatelemetryNiaFeatureUsage) GetClassIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ClassId, true
}

// SetClassId sets field value
func (o *NiatelemetryNiaFeatureUsage) SetClassId(v string) {
	o.ClassId = v
}

// GetObjectType returns the ObjectType field value
func (o *NiatelemetryNiaFeatureUsage) GetObjectType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ObjectType
}

// GetObjectTypeOk returns a tuple with the ObjectType field value
// and a boolean to check if the value has been set.
func (o *NiatelemetryNiaFeatureUsage) GetObjectTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ObjectType, true
}

// SetObjectType sets field value
func (o *NiatelemetryNiaFeatureUsage) SetObjectType(v string) {
	o.ObjectType = v
}

// GetAaaLdapProviderCount returns the AaaLdapProviderCount field value if set, zero value otherwise.
func (o *NiatelemetryNiaFeatureUsage) GetAaaLdapProviderCount() int64 {
	if o == nil || o.AaaLdapProviderCount == nil {
		var ret int64
		return ret
	}
	return *o.AaaLdapProviderCount
}

// GetAaaLdapProviderCountOk returns a tuple with the AaaLdapProviderCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NiatelemetryNiaFeatureUsage) GetAaaLdapProviderCountOk() (*int64, bool) {
	if o == nil || o.AaaLdapProviderCount == nil {
		return nil, false
	}
	return o.AaaLdapProviderCount, true
}

// HasAaaLdapProviderCount returns a boolean if a field has been set.
func (o *NiatelemetryNiaFeatureUsage) HasAaaLdapProviderCount() bool {
	if o != nil && o.AaaLdapProviderCount != nil {
		return true
	}

	return false
}

// SetAaaLdapProviderCount gets a reference to the given int64 and assigns it to the AaaLdapProviderCount field.
func (o *NiatelemetryNiaFeatureUsage) SetAaaLdapProviderCount(v int64) {
	o.AaaLdapProviderCount = &v
}

// GetAaaRadiusProviderCount returns the AaaRadiusProviderCount field value if set, zero value otherwise.
func (o *NiatelemetryNiaFeatureUsage) GetAaaRadiusProviderCount() int64 {
	if o == nil || o.AaaRadiusProviderCount == nil {
		var ret int64
		return ret
	}
	return *o.AaaRadiusProviderCount
}

// GetAaaRadiusProviderCountOk returns a tuple with the AaaRadiusProviderCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NiatelemetryNiaFeatureUsage) GetAaaRadiusProviderCountOk() (*int64, bool) {
	if o == nil || o.AaaRadiusProviderCount == nil {
		return nil, false
	}
	return o.AaaRadiusProviderCount, true
}

// HasAaaRadiusProviderCount returns a boolean if a field has been set.
func (o *NiatelemetryNiaFeatureUsage) HasAaaRadiusProviderCount() bool {
	if o != nil && o.AaaRadiusProviderCount != nil {
		return true
	}

	return false
}

// SetAaaRadiusProviderCount gets a reference to the given int64 and assigns it to the AaaRadiusProviderCount field.
func (o *NiatelemetryNiaFeatureUsage) SetAaaRadiusProviderCount(v int64) {
	o.AaaRadiusProviderCount = &v
}

// GetAaaTacacsProviderCount returns the AaaTacacsProviderCount field value if set, zero value otherwise.
func (o *NiatelemetryNiaFeatureUsage) GetAaaTacacsProviderCount() int64 {
	if o == nil || o.AaaTacacsProviderCount == nil {
		var ret int64
		return ret
	}
	return *o.AaaTacacsProviderCount
}

// GetAaaTacacsProviderCountOk returns a tuple with the AaaTacacsProviderCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NiatelemetryNiaFeatureUsage) GetAaaTacacsProviderCountOk() (*int64, bool) {
	if o == nil || o.AaaTacacsProviderCount == nil {
		return nil, false
	}
	return o.AaaTacacsProviderCount, true
}

// HasAaaTacacsProviderCount returns a boolean if a field has been set.
func (o *NiatelemetryNiaFeatureUsage) HasAaaTacacsProviderCount() bool {
	if o != nil && o.AaaTacacsProviderCount != nil {
		return true
	}

	return false
}

// SetAaaTacacsProviderCount gets a reference to the given int64 and assigns it to the AaaTacacsProviderCount field.
func (o *NiatelemetryNiaFeatureUsage) SetAaaTacacsProviderCount(v int64) {
	o.AaaTacacsProviderCount = &v
}

// GetApicCount returns the ApicCount field value if set, zero value otherwise.
func (o *NiatelemetryNiaFeatureUsage) GetApicCount() int64 {
	if o == nil || o.ApicCount == nil {
		var ret int64
		return ret
	}
	return *o.ApicCount
}

// GetApicCountOk returns a tuple with the ApicCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NiatelemetryNiaFeatureUsage) GetApicCountOk() (*int64, bool) {
	if o == nil || o.ApicCount == nil {
		return nil, false
	}
	return o.ApicCount, true
}

// HasApicCount returns a boolean if a field has been set.
func (o *NiatelemetryNiaFeatureUsage) HasApicCount() bool {
	if o != nil && o.ApicCount != nil {
		return true
	}

	return false
}

// SetApicCount gets a reference to the given int64 and assigns it to the ApicCount field.
func (o *NiatelemetryNiaFeatureUsage) SetApicCount(v int64) {
	o.ApicCount = &v
}

// GetApicIsTelnetEnabled returns the ApicIsTelnetEnabled field value if set, zero value otherwise.
func (o *NiatelemetryNiaFeatureUsage) GetApicIsTelnetEnabled() bool {
	if o == nil || o.ApicIsTelnetEnabled == nil {
		var ret bool
		return ret
	}
	return *o.ApicIsTelnetEnabled
}

// GetApicIsTelnetEnabledOk returns a tuple with the ApicIsTelnetEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NiatelemetryNiaFeatureUsage) GetApicIsTelnetEnabledOk() (*bool, bool) {
	if o == nil || o.ApicIsTelnetEnabled == nil {
		return nil, false
	}
	return o.ApicIsTelnetEnabled, true
}

// HasApicIsTelnetEnabled returns a boolean if a field has been set.
func (o *NiatelemetryNiaFeatureUsage) HasApicIsTelnetEnabled() bool {
	if o != nil && o.ApicIsTelnetEnabled != nil {
		return true
	}

	return false
}

// SetApicIsTelnetEnabled gets a reference to the given bool and assigns it to the ApicIsTelnetEnabled field.
func (o *NiatelemetryNiaFeatureUsage) SetApicIsTelnetEnabled(v bool) {
	o.ApicIsTelnetEnabled = &v
}

// GetApicNtpCount returns the ApicNtpCount field value if set, zero value otherwise.
func (o *NiatelemetryNiaFeatureUsage) GetApicNtpCount() int64 {
	if o == nil || o.ApicNtpCount == nil {
		var ret int64
		return ret
	}
	return *o.ApicNtpCount
}

// GetApicNtpCountOk returns a tuple with the ApicNtpCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NiatelemetryNiaFeatureUsage) GetApicNtpCountOk() (*int64, bool) {
	if o == nil || o.ApicNtpCount == nil {
		return nil, false
	}
	return o.ApicNtpCount, true
}

// HasApicNtpCount returns a boolean if a field has been set.
func (o *NiatelemetryNiaFeatureUsage) HasApicNtpCount() bool {
	if o != nil && o.ApicNtpCount != nil {
		return true
	}

	return false
}

// SetApicNtpCount gets a reference to the given int64 and assigns it to the ApicNtpCount field.
func (o *NiatelemetryNiaFeatureUsage) SetApicNtpCount(v int64) {
	o.ApicNtpCount = &v
}

// GetApicSnmpCommunityCount returns the ApicSnmpCommunityCount field value if set, zero value otherwise.
func (o *NiatelemetryNiaFeatureUsage) GetApicSnmpCommunityCount() int64 {
	if o == nil || o.ApicSnmpCommunityCount == nil {
		var ret int64
		return ret
	}
	return *o.ApicSnmpCommunityCount
}

// GetApicSnmpCommunityCountOk returns a tuple with the ApicSnmpCommunityCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NiatelemetryNiaFeatureUsage) GetApicSnmpCommunityCountOk() (*int64, bool) {
	if o == nil || o.ApicSnmpCommunityCount == nil {
		return nil, false
	}
	return o.ApicSnmpCommunityCount, true
}

// HasApicSnmpCommunityCount returns a boolean if a field has been set.
func (o *NiatelemetryNiaFeatureUsage) HasApicSnmpCommunityCount() bool {
	if o != nil && o.ApicSnmpCommunityCount != nil {
		return true
	}

	return false
}

// SetApicSnmpCommunityCount gets a reference to the given int64 and assigns it to the ApicSnmpCommunityCount field.
func (o *NiatelemetryNiaFeatureUsage) SetApicSnmpCommunityCount(v int64) {
	o.ApicSnmpCommunityCount = &v
}

// GetApicSysLogGrpCount returns the ApicSysLogGrpCount field value if set, zero value otherwise.
func (o *NiatelemetryNiaFeatureUsage) GetApicSysLogGrpCount() int64 {
	if o == nil || o.ApicSysLogGrpCount == nil {
		var ret int64
		return ret
	}
	return *o.ApicSysLogGrpCount
}

// GetApicSysLogGrpCountOk returns a tuple with the ApicSysLogGrpCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NiatelemetryNiaFeatureUsage) GetApicSysLogGrpCountOk() (*int64, bool) {
	if o == nil || o.ApicSysLogGrpCount == nil {
		return nil, false
	}
	return o.ApicSysLogGrpCount, true
}

// HasApicSysLogGrpCount returns a boolean if a field has been set.
func (o *NiatelemetryNiaFeatureUsage) HasApicSysLogGrpCount() bool {
	if o != nil && o.ApicSysLogGrpCount != nil {
		return true
	}

	return false
}

// SetApicSysLogGrpCount gets a reference to the given int64 and assigns it to the ApicSysLogGrpCount field.
func (o *NiatelemetryNiaFeatureUsage) SetApicSysLogGrpCount(v int64) {
	o.ApicSysLogGrpCount = &v
}

// GetApicSysLogSrcCount returns the ApicSysLogSrcCount field value if set, zero value otherwise.
func (o *NiatelemetryNiaFeatureUsage) GetApicSysLogSrcCount() int64 {
	if o == nil || o.ApicSysLogSrcCount == nil {
		var ret int64
		return ret
	}
	return *o.ApicSysLogSrcCount
}

// GetApicSysLogSrcCountOk returns a tuple with the ApicSysLogSrcCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NiatelemetryNiaFeatureUsage) GetApicSysLogSrcCountOk() (*int64, bool) {
	if o == nil || o.ApicSysLogSrcCount == nil {
		return nil, false
	}
	return o.ApicSysLogSrcCount, true
}

// HasApicSysLogSrcCount returns a boolean if a field has been set.
func (o *NiatelemetryNiaFeatureUsage) HasApicSysLogSrcCount() bool {
	if o != nil && o.ApicSysLogSrcCount != nil {
		return true
	}

	return false
}

// SetApicSysLogSrcCount gets a reference to the given int64 and assigns it to the ApicSysLogSrcCount field.
func (o *NiatelemetryNiaFeatureUsage) SetApicSysLogSrcCount(v int64) {
	o.ApicSysLogSrcCount = &v
}

// GetAppCenterCount returns the AppCenterCount field value if set, zero value otherwise.
func (o *NiatelemetryNiaFeatureUsage) GetAppCenterCount() int64 {
	if o == nil || o.AppCenterCount == nil {
		var ret int64
		return ret
	}
	return *o.AppCenterCount
}

// GetAppCenterCountOk returns a tuple with the AppCenterCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NiatelemetryNiaFeatureUsage) GetAppCenterCountOk() (*int64, bool) {
	if o == nil || o.AppCenterCount == nil {
		return nil, false
	}
	return o.AppCenterCount, true
}

// HasAppCenterCount returns a boolean if a field has been set.
func (o *NiatelemetryNiaFeatureUsage) HasAppCenterCount() bool {
	if o != nil && o.AppCenterCount != nil {
		return true
	}

	return false
}

// SetAppCenterCount gets a reference to the given int64 and assigns it to the AppCenterCount field.
func (o *NiatelemetryNiaFeatureUsage) SetAppCenterCount(v int64) {
	o.AppCenterCount = &v
}

// GetAve returns the Ave field value if set, zero value otherwise.
func (o *NiatelemetryNiaFeatureUsage) GetAve() string {
	if o == nil || o.Ave == nil {
		var ret string
		return ret
	}
	return *o.Ave
}

// GetAveOk returns a tuple with the Ave field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NiatelemetryNiaFeatureUsage) GetAveOk() (*string, bool) {
	if o == nil || o.Ave == nil {
		return nil, false
	}
	return o.Ave, true
}

// HasAve returns a boolean if a field has been set.
func (o *NiatelemetryNiaFeatureUsage) HasAve() bool {
	if o != nil && o.Ave != nil {
		return true
	}

	return false
}

// SetAve gets a reference to the given string and assigns it to the Ave field.
func (o *NiatelemetryNiaFeatureUsage) SetAve(v string) {
	o.Ave = &v
}

// GetBdCount returns the BdCount field value if set, zero value otherwise.
func (o *NiatelemetryNiaFeatureUsage) GetBdCount() int64 {
	if o == nil || o.BdCount == nil {
		var ret int64
		return ret
	}
	return *o.BdCount
}

// GetBdCountOk returns a tuple with the BdCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NiatelemetryNiaFeatureUsage) GetBdCountOk() (*int64, bool) {
	if o == nil || o.BdCount == nil {
		return nil, false
	}
	return o.BdCount, true
}

// HasBdCount returns a boolean if a field has been set.
func (o *NiatelemetryNiaFeatureUsage) HasBdCount() bool {
	if o != nil && o.BdCount != nil {
		return true
	}

	return false
}

// SetBdCount gets a reference to the given int64 and assigns it to the BdCount field.
func (o *NiatelemetryNiaFeatureUsage) SetBdCount(v int64) {
	o.BdCount = &v
}

// GetCallhomeSmartGroupCount returns the CallhomeSmartGroupCount field value if set, zero value otherwise.
func (o *NiatelemetryNiaFeatureUsage) GetCallhomeSmartGroupCount() int64 {
	if o == nil || o.CallhomeSmartGroupCount == nil {
		var ret int64
		return ret
	}
	return *o.CallhomeSmartGroupCount
}

// GetCallhomeSmartGroupCountOk returns a tuple with the CallhomeSmartGroupCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NiatelemetryNiaFeatureUsage) GetCallhomeSmartGroupCountOk() (*int64, bool) {
	if o == nil || o.CallhomeSmartGroupCount == nil {
		return nil, false
	}
	return o.CallhomeSmartGroupCount, true
}

// HasCallhomeSmartGroupCount returns a boolean if a field has been set.
func (o *NiatelemetryNiaFeatureUsage) HasCallhomeSmartGroupCount() bool {
	if o != nil && o.CallhomeSmartGroupCount != nil {
		return true
	}

	return false
}

// SetCallhomeSmartGroupCount gets a reference to the given int64 and assigns it to the CallhomeSmartGroupCount field.
func (o *NiatelemetryNiaFeatureUsage) SetCallhomeSmartGroupCount(v int64) {
	o.CallhomeSmartGroupCount = &v
}

// GetCloudSecPeerCount returns the CloudSecPeerCount field value if set, zero value otherwise.
func (o *NiatelemetryNiaFeatureUsage) GetCloudSecPeerCount() int64 {
	if o == nil || o.CloudSecPeerCount == nil {
		var ret int64
		return ret
	}
	return *o.CloudSecPeerCount
}

// GetCloudSecPeerCountOk returns a tuple with the CloudSecPeerCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NiatelemetryNiaFeatureUsage) GetCloudSecPeerCountOk() (*int64, bool) {
	if o == nil || o.CloudSecPeerCount == nil {
		return nil, false
	}
	return o.CloudSecPeerCount, true
}

// HasCloudSecPeerCount returns a boolean if a field has been set.
func (o *NiatelemetryNiaFeatureUsage) HasCloudSecPeerCount() bool {
	if o != nil && o.CloudSecPeerCount != nil {
		return true
	}

	return false
}

// SetCloudSecPeerCount gets a reference to the given int64 and assigns it to the CloudSecPeerCount field.
func (o *NiatelemetryNiaFeatureUsage) SetCloudSecPeerCount(v int64) {
	o.CloudSecPeerCount = &v
}

// GetCompHvCount returns the CompHvCount field value if set, zero value otherwise.
func (o *NiatelemetryNiaFeatureUsage) GetCompHvCount() int64 {
	if o == nil || o.CompHvCount == nil {
		var ret int64
		return ret
	}
	return *o.CompHvCount
}

// GetCompHvCountOk returns a tuple with the CompHvCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NiatelemetryNiaFeatureUsage) GetCompHvCountOk() (*int64, bool) {
	if o == nil || o.CompHvCount == nil {
		return nil, false
	}
	return o.CompHvCount, true
}

// HasCompHvCount returns a boolean if a field has been set.
func (o *NiatelemetryNiaFeatureUsage) HasCompHvCount() bool {
	if o != nil && o.CompHvCount != nil {
		return true
	}

	return false
}

// SetCompHvCount gets a reference to the given int64 and assigns it to the CompHvCount field.
func (o *NiatelemetryNiaFeatureUsage) SetCompHvCount(v int64) {
	o.CompHvCount = &v
}

// GetConfigExportpCount returns the ConfigExportpCount field value if set, zero value otherwise.
func (o *NiatelemetryNiaFeatureUsage) GetConfigExportpCount() int64 {
	if o == nil || o.ConfigExportpCount == nil {
		var ret int64
		return ret
	}
	return *o.ConfigExportpCount
}

// GetConfigExportpCountOk returns a tuple with the ConfigExportpCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NiatelemetryNiaFeatureUsage) GetConfigExportpCountOk() (*int64, bool) {
	if o == nil || o.ConfigExportpCount == nil {
		return nil, false
	}
	return o.ConfigExportpCount, true
}

// HasConfigExportpCount returns a boolean if a field has been set.
func (o *NiatelemetryNiaFeatureUsage) HasConfigExportpCount() bool {
	if o != nil && o.ConfigExportpCount != nil {
		return true
	}

	return false
}

// SetConfigExportpCount gets a reference to the given int64 and assigns it to the ConfigExportpCount field.
func (o *NiatelemetryNiaFeatureUsage) SetConfigExportpCount(v int64) {
	o.ConfigExportpCount = &v
}

// GetConfigJobCount returns the ConfigJobCount field value if set, zero value otherwise.
func (o *NiatelemetryNiaFeatureUsage) GetConfigJobCount() int64 {
	if o == nil || o.ConfigJobCount == nil {
		var ret int64
		return ret
	}
	return *o.ConfigJobCount
}

// GetConfigJobCountOk returns a tuple with the ConfigJobCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NiatelemetryNiaFeatureUsage) GetConfigJobCountOk() (*int64, bool) {
	if o == nil || o.ConfigJobCount == nil {
		return nil, false
	}
	return o.ConfigJobCount, true
}

// HasConfigJobCount returns a boolean if a field has been set.
func (o *NiatelemetryNiaFeatureUsage) HasConfigJobCount() bool {
	if o != nil && o.ConfigJobCount != nil {
		return true
	}

	return false
}

// SetConfigJobCount gets a reference to the given int64 and assigns it to the ConfigJobCount field.
func (o *NiatelemetryNiaFeatureUsage) SetConfigJobCount(v int64) {
	o.ConfigJobCount = &v
}

// GetConsistencyCheckerApp returns the ConsistencyCheckerApp field value if set, zero value otherwise.
func (o *NiatelemetryNiaFeatureUsage) GetConsistencyCheckerApp() string {
	if o == nil || o.ConsistencyCheckerApp == nil {
		var ret string
		return ret
	}
	return *o.ConsistencyCheckerApp
}

// GetConsistencyCheckerAppOk returns a tuple with the ConsistencyCheckerApp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NiatelemetryNiaFeatureUsage) GetConsistencyCheckerAppOk() (*string, bool) {
	if o == nil || o.ConsistencyCheckerApp == nil {
		return nil, false
	}
	return o.ConsistencyCheckerApp, true
}

// HasConsistencyCheckerApp returns a boolean if a field has been set.
func (o *NiatelemetryNiaFeatureUsage) HasConsistencyCheckerApp() bool {
	if o != nil && o.ConsistencyCheckerApp != nil {
		return true
	}

	return false
}

// SetConsistencyCheckerApp gets a reference to the given string and assigns it to the ConsistencyCheckerApp field.
func (o *NiatelemetryNiaFeatureUsage) SetConsistencyCheckerApp(v string) {
	o.ConsistencyCheckerApp = &v
}

// GetContractCount returns the ContractCount field value if set, zero value otherwise.
func (o *NiatelemetryNiaFeatureUsage) GetContractCount() int64 {
	if o == nil || o.ContractCount == nil {
		var ret int64
		return ret
	}
	return *o.ContractCount
}

// GetContractCountOk returns a tuple with the ContractCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NiatelemetryNiaFeatureUsage) GetContractCountOk() (*int64, bool) {
	if o == nil || o.ContractCount == nil {
		return nil, false
	}
	return o.ContractCount, true
}

// HasContractCount returns a boolean if a field has been set.
func (o *NiatelemetryNiaFeatureUsage) HasContractCount() bool {
	if o != nil && o.ContractCount != nil {
		return true
	}

	return false
}

// SetContractCount gets a reference to the given int64 and assigns it to the ContractCount field.
func (o *NiatelemetryNiaFeatureUsage) SetContractCount(v int64) {
	o.ContractCount = &v
}

// GetDnsCount returns the DnsCount field value if set, zero value otherwise.
func (o *NiatelemetryNiaFeatureUsage) GetDnsCount() int64 {
	if o == nil || o.DnsCount == nil {
		var ret int64
		return ret
	}
	return *o.DnsCount
}

// GetDnsCountOk returns a tuple with the DnsCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NiatelemetryNiaFeatureUsage) GetDnsCountOk() (*int64, bool) {
	if o == nil || o.DnsCount == nil {
		return nil, false
	}
	return o.DnsCount, true
}

// HasDnsCount returns a boolean if a field has been set.
func (o *NiatelemetryNiaFeatureUsage) HasDnsCount() bool {
	if o != nil && o.DnsCount != nil {
		return true
	}

	return false
}

// SetDnsCount gets a reference to the given int64 and assigns it to the DnsCount field.
func (o *NiatelemetryNiaFeatureUsage) SetDnsCount(v int64) {
	o.DnsCount = &v
}

// GetEigrpCount returns the EigrpCount field value if set, zero value otherwise.
func (o *NiatelemetryNiaFeatureUsage) GetEigrpCount() int64 {
	if o == nil || o.EigrpCount == nil {
		var ret int64
		return ret
	}
	return *o.EigrpCount
}

// GetEigrpCountOk returns a tuple with the EigrpCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NiatelemetryNiaFeatureUsage) GetEigrpCountOk() (*int64, bool) {
	if o == nil || o.EigrpCount == nil {
		return nil, false
	}
	return o.EigrpCount, true
}

// HasEigrpCount returns a boolean if a field has been set.
func (o *NiatelemetryNiaFeatureUsage) HasEigrpCount() bool {
	if o != nil && o.EigrpCount != nil {
		return true
	}

	return false
}

// SetEigrpCount gets a reference to the given int64 and assigns it to the EigrpCount field.
func (o *NiatelemetryNiaFeatureUsage) SetEigrpCount(v int64) {
	o.EigrpCount = &v
}

// GetEpgCount returns the EpgCount field value if set, zero value otherwise.
func (o *NiatelemetryNiaFeatureUsage) GetEpgCount() int64 {
	if o == nil || o.EpgCount == nil {
		var ret int64
		return ret
	}
	return *o.EpgCount
}

// GetEpgCountOk returns a tuple with the EpgCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NiatelemetryNiaFeatureUsage) GetEpgCountOk() (*int64, bool) {
	if o == nil || o.EpgCount == nil {
		return nil, false
	}
	return o.EpgCount, true
}

// HasEpgCount returns a boolean if a field has been set.
func (o *NiatelemetryNiaFeatureUsage) HasEpgCount() bool {
	if o != nil && o.EpgCount != nil {
		return true
	}

	return false
}

// SetEpgCount gets a reference to the given int64 and assigns it to the EpgCount field.
func (o *NiatelemetryNiaFeatureUsage) SetEpgCount(v int64) {
	o.EpgCount = &v
}

// GetFabricModuleCount returns the FabricModuleCount field value if set, zero value otherwise.
func (o *NiatelemetryNiaFeatureUsage) GetFabricModuleCount() int64 {
	if o == nil || o.FabricModuleCount == nil {
		var ret int64
		return ret
	}
	return *o.FabricModuleCount
}

// GetFabricModuleCountOk returns a tuple with the FabricModuleCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NiatelemetryNiaFeatureUsage) GetFabricModuleCountOk() (*int64, bool) {
	if o == nil || o.FabricModuleCount == nil {
		return nil, false
	}
	return o.FabricModuleCount, true
}

// HasFabricModuleCount returns a boolean if a field has been set.
func (o *NiatelemetryNiaFeatureUsage) HasFabricModuleCount() bool {
	if o != nil && o.FabricModuleCount != nil {
		return true
	}

	return false
}

// SetFabricModuleCount gets a reference to the given int64 and assigns it to the FabricModuleCount field.
func (o *NiatelemetryNiaFeatureUsage) SetFabricModuleCount(v int64) {
	o.FabricModuleCount = &v
}

// GetFabricSetuppCount returns the FabricSetuppCount field value if set, zero value otherwise.
func (o *NiatelemetryNiaFeatureUsage) GetFabricSetuppCount() int64 {
	if o == nil || o.FabricSetuppCount == nil {
		var ret int64
		return ret
	}
	return *o.FabricSetuppCount
}

// GetFabricSetuppCountOk returns a tuple with the FabricSetuppCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NiatelemetryNiaFeatureUsage) GetFabricSetuppCountOk() (*int64, bool) {
	if o == nil || o.FabricSetuppCount == nil {
		return nil, false
	}
	return o.FabricSetuppCount, true
}

// HasFabricSetuppCount returns a boolean if a field has been set.
func (o *NiatelemetryNiaFeatureUsage) HasFabricSetuppCount() bool {
	if o != nil && o.FabricSetuppCount != nil {
		return true
	}

	return false
}

// SetFabricSetuppCount gets a reference to the given int64 and assigns it to the FabricSetuppCount field.
func (o *NiatelemetryNiaFeatureUsage) SetFabricSetuppCount(v int64) {
	o.FabricSetuppCount = &v
}

// GetFcoeNportCount returns the FcoeNportCount field value if set, zero value otherwise.
func (o *NiatelemetryNiaFeatureUsage) GetFcoeNportCount() int64 {
	if o == nil || o.FcoeNportCount == nil {
		var ret int64
		return ret
	}
	return *o.FcoeNportCount
}

// GetFcoeNportCountOk returns a tuple with the FcoeNportCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NiatelemetryNiaFeatureUsage) GetFcoeNportCountOk() (*int64, bool) {
	if o == nil || o.FcoeNportCount == nil {
		return nil, false
	}
	return o.FcoeNportCount, true
}

// HasFcoeNportCount returns a boolean if a field has been set.
func (o *NiatelemetryNiaFeatureUsage) HasFcoeNportCount() bool {
	if o != nil && o.FcoeNportCount != nil {
		return true
	}

	return false
}

// SetFcoeNportCount gets a reference to the given int64 and assigns it to the FcoeNportCount field.
func (o *NiatelemetryNiaFeatureUsage) SetFcoeNportCount(v int64) {
	o.FcoeNportCount = &v
}

// GetFcoeNportDomCount returns the FcoeNportDomCount field value if set, zero value otherwise.
func (o *NiatelemetryNiaFeatureUsage) GetFcoeNportDomCount() int64 {
	if o == nil || o.FcoeNportDomCount == nil {
		var ret int64
		return ret
	}
	return *o.FcoeNportDomCount
}

// GetFcoeNportDomCountOk returns a tuple with the FcoeNportDomCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NiatelemetryNiaFeatureUsage) GetFcoeNportDomCountOk() (*int64, bool) {
	if o == nil || o.FcoeNportDomCount == nil {
		return nil, false
	}
	return o.FcoeNportDomCount, true
}

// HasFcoeNportDomCount returns a boolean if a field has been set.
func (o *NiatelemetryNiaFeatureUsage) HasFcoeNportDomCount() bool {
	if o != nil && o.FcoeNportDomCount != nil {
		return true
	}

	return false
}

// SetFcoeNportDomCount gets a reference to the given int64 and assigns it to the FcoeNportDomCount field.
func (o *NiatelemetryNiaFeatureUsage) SetFcoeNportDomCount(v int64) {
	o.FcoeNportDomCount = &v
}

// GetFcoeNportVlanCount returns the FcoeNportVlanCount field value if set, zero value otherwise.
func (o *NiatelemetryNiaFeatureUsage) GetFcoeNportVlanCount() int64 {
	if o == nil || o.FcoeNportVlanCount == nil {
		var ret int64
		return ret
	}
	return *o.FcoeNportVlanCount
}

// GetFcoeNportVlanCountOk returns a tuple with the FcoeNportVlanCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NiatelemetryNiaFeatureUsage) GetFcoeNportVlanCountOk() (*int64, bool) {
	if o == nil || o.FcoeNportVlanCount == nil {
		return nil, false
	}
	return o.FcoeNportVlanCount, true
}

// HasFcoeNportVlanCount returns a boolean if a field has been set.
func (o *NiatelemetryNiaFeatureUsage) HasFcoeNportVlanCount() bool {
	if o != nil && o.FcoeNportVlanCount != nil {
		return true
	}

	return false
}

// SetFcoeNportVlanCount gets a reference to the given int64 and assigns it to the FcoeNportVlanCount field.
func (o *NiatelemetryNiaFeatureUsage) SetFcoeNportVlanCount(v int64) {
	o.FcoeNportVlanCount = &v
}

// GetFcoeNportVsanCount returns the FcoeNportVsanCount field value if set, zero value otherwise.
func (o *NiatelemetryNiaFeatureUsage) GetFcoeNportVsanCount() int64 {
	if o == nil || o.FcoeNportVsanCount == nil {
		var ret int64
		return ret
	}
	return *o.FcoeNportVsanCount
}

// GetFcoeNportVsanCountOk returns a tuple with the FcoeNportVsanCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NiatelemetryNiaFeatureUsage) GetFcoeNportVsanCountOk() (*int64, bool) {
	if o == nil || o.FcoeNportVsanCount == nil {
		return nil, false
	}
	return o.FcoeNportVsanCount, true
}

// HasFcoeNportVsanCount returns a boolean if a field has been set.
func (o *NiatelemetryNiaFeatureUsage) HasFcoeNportVsanCount() bool {
	if o != nil && o.FcoeNportVsanCount != nil {
		return true
	}

	return false
}

// SetFcoeNportVsanCount gets a reference to the given int64 and assigns it to the FcoeNportVsanCount field.
func (o *NiatelemetryNiaFeatureUsage) SetFcoeNportVsanCount(v int64) {
	o.FcoeNportVsanCount = &v
}

// GetFvSlaDefCount returns the FvSlaDefCount field value if set, zero value otherwise.
func (o *NiatelemetryNiaFeatureUsage) GetFvSlaDefCount() int64 {
	if o == nil || o.FvSlaDefCount == nil {
		var ret int64
		return ret
	}
	return *o.FvSlaDefCount
}

// GetFvSlaDefCountOk returns a tuple with the FvSlaDefCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NiatelemetryNiaFeatureUsage) GetFvSlaDefCountOk() (*int64, bool) {
	if o == nil || o.FvSlaDefCount == nil {
		return nil, false
	}
	return o.FvSlaDefCount, true
}

// HasFvSlaDefCount returns a boolean if a field has been set.
func (o *NiatelemetryNiaFeatureUsage) HasFvSlaDefCount() bool {
	if o != nil && o.FvSlaDefCount != nil {
		return true
	}

	return false
}

// SetFvSlaDefCount gets a reference to the given int64 and assigns it to the FvSlaDefCount field.
func (o *NiatelemetryNiaFeatureUsage) SetFvSlaDefCount(v int64) {
	o.FvSlaDefCount = &v
}

// GetHsrpCount returns the HsrpCount field value if set, zero value otherwise.
func (o *NiatelemetryNiaFeatureUsage) GetHsrpCount() int64 {
	if o == nil || o.HsrpCount == nil {
		var ret int64
		return ret
	}
	return *o.HsrpCount
}

// GetHsrpCountOk returns a tuple with the HsrpCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NiatelemetryNiaFeatureUsage) GetHsrpCountOk() (*int64, bool) {
	if o == nil || o.HsrpCount == nil {
		return nil, false
	}
	return o.HsrpCount, true
}

// HasHsrpCount returns a boolean if a field has been set.
func (o *NiatelemetryNiaFeatureUsage) HasHsrpCount() bool {
	if o != nil && o.HsrpCount != nil {
		return true
	}

	return false
}

// SetHsrpCount gets a reference to the given int64 and assigns it to the HsrpCount field.
func (o *NiatelemetryNiaFeatureUsage) SetHsrpCount(v int64) {
	o.HsrpCount = &v
}

// GetIbgpCount returns the IbgpCount field value if set, zero value otherwise.
func (o *NiatelemetryNiaFeatureUsage) GetIbgpCount() int64 {
	if o == nil || o.IbgpCount == nil {
		var ret int64
		return ret
	}
	return *o.IbgpCount
}

// GetIbgpCountOk returns a tuple with the IbgpCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NiatelemetryNiaFeatureUsage) GetIbgpCountOk() (*int64, bool) {
	if o == nil || o.IbgpCount == nil {
		return nil, false
	}
	return o.IbgpCount, true
}

// HasIbgpCount returns a boolean if a field has been set.
func (o *NiatelemetryNiaFeatureUsage) HasIbgpCount() bool {
	if o != nil && o.IbgpCount != nil {
		return true
	}

	return false
}

// SetIbgpCount gets a reference to the given int64 and assigns it to the IbgpCount field.
func (o *NiatelemetryNiaFeatureUsage) SetIbgpCount(v int64) {
	o.IbgpCount = &v
}

// GetIgmpAccessListCount returns the IgmpAccessListCount field value if set, zero value otherwise.
func (o *NiatelemetryNiaFeatureUsage) GetIgmpAccessListCount() int64 {
	if o == nil || o.IgmpAccessListCount == nil {
		var ret int64
		return ret
	}
	return *o.IgmpAccessListCount
}

// GetIgmpAccessListCountOk returns a tuple with the IgmpAccessListCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NiatelemetryNiaFeatureUsage) GetIgmpAccessListCountOk() (*int64, bool) {
	if o == nil || o.IgmpAccessListCount == nil {
		return nil, false
	}
	return o.IgmpAccessListCount, true
}

// HasIgmpAccessListCount returns a boolean if a field has been set.
func (o *NiatelemetryNiaFeatureUsage) HasIgmpAccessListCount() bool {
	if o != nil && o.IgmpAccessListCount != nil {
		return true
	}

	return false
}

// SetIgmpAccessListCount gets a reference to the given int64 and assigns it to the IgmpAccessListCount field.
func (o *NiatelemetryNiaFeatureUsage) SetIgmpAccessListCount(v int64) {
	o.IgmpAccessListCount = &v
}

// GetIgmpSnoop returns the IgmpSnoop field value if set, zero value otherwise.
func (o *NiatelemetryNiaFeatureUsage) GetIgmpSnoop() string {
	if o == nil || o.IgmpSnoop == nil {
		var ret string
		return ret
	}
	return *o.IgmpSnoop
}

// GetIgmpSnoopOk returns a tuple with the IgmpSnoop field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NiatelemetryNiaFeatureUsage) GetIgmpSnoopOk() (*string, bool) {
	if o == nil || o.IgmpSnoop == nil {
		return nil, false
	}
	return o.IgmpSnoop, true
}

// HasIgmpSnoop returns a boolean if a field has been set.
func (o *NiatelemetryNiaFeatureUsage) HasIgmpSnoop() bool {
	if o != nil && o.IgmpSnoop != nil {
		return true
	}

	return false
}

// SetIgmpSnoop gets a reference to the given string and assigns it to the IgmpSnoop field.
func (o *NiatelemetryNiaFeatureUsage) SetIgmpSnoop(v string) {
	o.IgmpSnoop = &v
}

// GetIpEpgCount returns the IpEpgCount field value if set, zero value otherwise.
func (o *NiatelemetryNiaFeatureUsage) GetIpEpgCount() int64 {
	if o == nil || o.IpEpgCount == nil {
		var ret int64
		return ret
	}
	return *o.IpEpgCount
}

// GetIpEpgCountOk returns a tuple with the IpEpgCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NiatelemetryNiaFeatureUsage) GetIpEpgCountOk() (*int64, bool) {
	if o == nil || o.IpEpgCount == nil {
		return nil, false
	}
	return o.IpEpgCount, true
}

// HasIpEpgCount returns a boolean if a field has been set.
func (o *NiatelemetryNiaFeatureUsage) HasIpEpgCount() bool {
	if o != nil && o.IpEpgCount != nil {
		return true
	}

	return false
}

// SetIpEpgCount gets a reference to the given int64 and assigns it to the IpEpgCount field.
func (o *NiatelemetryNiaFeatureUsage) SetIpEpgCount(v int64) {
	o.IpEpgCount = &v
}

// GetIsBgpRouteReflectorsFeatureUsed returns the IsBgpRouteReflectorsFeatureUsed field value if set, zero value otherwise.
func (o *NiatelemetryNiaFeatureUsage) GetIsBgpRouteReflectorsFeatureUsed() bool {
	if o == nil || o.IsBgpRouteReflectorsFeatureUsed == nil {
		var ret bool
		return ret
	}
	return *o.IsBgpRouteReflectorsFeatureUsed
}

// GetIsBgpRouteReflectorsFeatureUsedOk returns a tuple with the IsBgpRouteReflectorsFeatureUsed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NiatelemetryNiaFeatureUsage) GetIsBgpRouteReflectorsFeatureUsedOk() (*bool, bool) {
	if o == nil || o.IsBgpRouteReflectorsFeatureUsed == nil {
		return nil, false
	}
	return o.IsBgpRouteReflectorsFeatureUsed, true
}

// HasIsBgpRouteReflectorsFeatureUsed returns a boolean if a field has been set.
func (o *NiatelemetryNiaFeatureUsage) HasIsBgpRouteReflectorsFeatureUsed() bool {
	if o != nil && o.IsBgpRouteReflectorsFeatureUsed != nil {
		return true
	}

	return false
}

// SetIsBgpRouteReflectorsFeatureUsed gets a reference to the given bool and assigns it to the IsBgpRouteReflectorsFeatureUsed field.
func (o *NiatelemetryNiaFeatureUsage) SetIsBgpRouteReflectorsFeatureUsed(v bool) {
	o.IsBgpRouteReflectorsFeatureUsed = &v
}

// GetIsBridgeDomainsFeatureUsed returns the IsBridgeDomainsFeatureUsed field value if set, zero value otherwise.
func (o *NiatelemetryNiaFeatureUsage) GetIsBridgeDomainsFeatureUsed() bool {
	if o == nil || o.IsBridgeDomainsFeatureUsed == nil {
		var ret bool
		return ret
	}
	return *o.IsBridgeDomainsFeatureUsed
}

// GetIsBridgeDomainsFeatureUsedOk returns a tuple with the IsBridgeDomainsFeatureUsed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NiatelemetryNiaFeatureUsage) GetIsBridgeDomainsFeatureUsedOk() (*bool, bool) {
	if o == nil || o.IsBridgeDomainsFeatureUsed == nil {
		return nil, false
	}
	return o.IsBridgeDomainsFeatureUsed, true
}

// HasIsBridgeDomainsFeatureUsed returns a boolean if a field has been set.
func (o *NiatelemetryNiaFeatureUsage) HasIsBridgeDomainsFeatureUsed() bool {
	if o != nil && o.IsBridgeDomainsFeatureUsed != nil {
		return true
	}

	return false
}

// SetIsBridgeDomainsFeatureUsed gets a reference to the given bool and assigns it to the IsBridgeDomainsFeatureUsed field.
func (o *NiatelemetryNiaFeatureUsage) SetIsBridgeDomainsFeatureUsed(v bool) {
	o.IsBridgeDomainsFeatureUsed = &v
}

// GetIsCommonLocalUserName returns the IsCommonLocalUserName field value if set, zero value otherwise.
func (o *NiatelemetryNiaFeatureUsage) GetIsCommonLocalUserName() bool {
	if o == nil || o.IsCommonLocalUserName == nil {
		var ret bool
		return ret
	}
	return *o.IsCommonLocalUserName
}

// GetIsCommonLocalUserNameOk returns a tuple with the IsCommonLocalUserName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NiatelemetryNiaFeatureUsage) GetIsCommonLocalUserNameOk() (*bool, bool) {
	if o == nil || o.IsCommonLocalUserName == nil {
		return nil, false
	}
	return o.IsCommonLocalUserName, true
}

// HasIsCommonLocalUserName returns a boolean if a field has been set.
func (o *NiatelemetryNiaFeatureUsage) HasIsCommonLocalUserName() bool {
	if o != nil && o.IsCommonLocalUserName != nil {
		return true
	}

	return false
}

// SetIsCommonLocalUserName gets a reference to the given bool and assigns it to the IsCommonLocalUserName field.
func (o *NiatelemetryNiaFeatureUsage) SetIsCommonLocalUserName(v bool) {
	o.IsCommonLocalUserName = &v
}

// GetIsContractsFeatureUsed returns the IsContractsFeatureUsed field value if set, zero value otherwise.
func (o *NiatelemetryNiaFeatureUsage) GetIsContractsFeatureUsed() bool {
	if o == nil || o.IsContractsFeatureUsed == nil {
		var ret bool
		return ret
	}
	return *o.IsContractsFeatureUsed
}

// GetIsContractsFeatureUsedOk returns a tuple with the IsContractsFeatureUsed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NiatelemetryNiaFeatureUsage) GetIsContractsFeatureUsedOk() (*bool, bool) {
	if o == nil || o.IsContractsFeatureUsed == nil {
		return nil, false
	}
	return o.IsContractsFeatureUsed, true
}

// HasIsContractsFeatureUsed returns a boolean if a field has been set.
func (o *NiatelemetryNiaFeatureUsage) HasIsContractsFeatureUsed() bool {
	if o != nil && o.IsContractsFeatureUsed != nil {
		return true
	}

	return false
}

// SetIsContractsFeatureUsed gets a reference to the given bool and assigns it to the IsContractsFeatureUsed field.
func (o *NiatelemetryNiaFeatureUsage) SetIsContractsFeatureUsed(v bool) {
	o.IsContractsFeatureUsed = &v
}

// GetIsEpgFeatureUsed returns the IsEpgFeatureUsed field value if set, zero value otherwise.
func (o *NiatelemetryNiaFeatureUsage) GetIsEpgFeatureUsed() bool {
	if o == nil || o.IsEpgFeatureUsed == nil {
		var ret bool
		return ret
	}
	return *o.IsEpgFeatureUsed
}

// GetIsEpgFeatureUsedOk returns a tuple with the IsEpgFeatureUsed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NiatelemetryNiaFeatureUsage) GetIsEpgFeatureUsedOk() (*bool, bool) {
	if o == nil || o.IsEpgFeatureUsed == nil {
		return nil, false
	}
	return o.IsEpgFeatureUsed, true
}

// HasIsEpgFeatureUsed returns a boolean if a field has been set.
func (o *NiatelemetryNiaFeatureUsage) HasIsEpgFeatureUsed() bool {
	if o != nil && o.IsEpgFeatureUsed != nil {
		return true
	}

	return false
}

// SetIsEpgFeatureUsed gets a reference to the given bool and assigns it to the IsEpgFeatureUsed field.
func (o *NiatelemetryNiaFeatureUsage) SetIsEpgFeatureUsed(v bool) {
	o.IsEpgFeatureUsed = &v
}

// GetIsFiltersFeatureUsed returns the IsFiltersFeatureUsed field value if set, zero value otherwise.
func (o *NiatelemetryNiaFeatureUsage) GetIsFiltersFeatureUsed() bool {
	if o == nil || o.IsFiltersFeatureUsed == nil {
		var ret bool
		return ret
	}
	return *o.IsFiltersFeatureUsed
}

// GetIsFiltersFeatureUsedOk returns a tuple with the IsFiltersFeatureUsed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NiatelemetryNiaFeatureUsage) GetIsFiltersFeatureUsedOk() (*bool, bool) {
	if o == nil || o.IsFiltersFeatureUsed == nil {
		return nil, false
	}
	return o.IsFiltersFeatureUsed, true
}

// HasIsFiltersFeatureUsed returns a boolean if a field has been set.
func (o *NiatelemetryNiaFeatureUsage) HasIsFiltersFeatureUsed() bool {
	if o != nil && o.IsFiltersFeatureUsed != nil {
		return true
	}

	return false
}

// SetIsFiltersFeatureUsed gets a reference to the given bool and assigns it to the IsFiltersFeatureUsed field.
func (o *NiatelemetryNiaFeatureUsage) SetIsFiltersFeatureUsed(v bool) {
	o.IsFiltersFeatureUsed = &v
}

// GetIsHttpConfigured returns the IsHttpConfigured field value if set, zero value otherwise.
func (o *NiatelemetryNiaFeatureUsage) GetIsHttpConfigured() bool {
	if o == nil || o.IsHttpConfigured == nil {
		var ret bool
		return ret
	}
	return *o.IsHttpConfigured
}

// GetIsHttpConfiguredOk returns a tuple with the IsHttpConfigured field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NiatelemetryNiaFeatureUsage) GetIsHttpConfiguredOk() (*bool, bool) {
	if o == nil || o.IsHttpConfigured == nil {
		return nil, false
	}
	return o.IsHttpConfigured, true
}

// HasIsHttpConfigured returns a boolean if a field has been set.
func (o *NiatelemetryNiaFeatureUsage) HasIsHttpConfigured() bool {
	if o != nil && o.IsHttpConfigured != nil {
		return true
	}

	return false
}

// SetIsHttpConfigured gets a reference to the given bool and assigns it to the IsHttpConfigured field.
func (o *NiatelemetryNiaFeatureUsage) SetIsHttpConfigured(v bool) {
	o.IsHttpConfigured = &v
}

// GetIsHttpsConfigured returns the IsHttpsConfigured field value if set, zero value otherwise.
func (o *NiatelemetryNiaFeatureUsage) GetIsHttpsConfigured() bool {
	if o == nil || o.IsHttpsConfigured == nil {
		var ret bool
		return ret
	}
	return *o.IsHttpsConfigured
}

// GetIsHttpsConfiguredOk returns a tuple with the IsHttpsConfigured field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NiatelemetryNiaFeatureUsage) GetIsHttpsConfiguredOk() (*bool, bool) {
	if o == nil || o.IsHttpsConfigured == nil {
		return nil, false
	}
	return o.IsHttpsConfigured, true
}

// HasIsHttpsConfigured returns a boolean if a field has been set.
func (o *NiatelemetryNiaFeatureUsage) HasIsHttpsConfigured() bool {
	if o != nil && o.IsHttpsConfigured != nil {
		return true
	}

	return false
}

// SetIsHttpsConfigured gets a reference to the given bool and assigns it to the IsHttpsConfigured field.
func (o *NiatelemetryNiaFeatureUsage) SetIsHttpsConfigured(v bool) {
	o.IsHttpsConfigured = &v
}

// GetIsNtpFeatureUsed returns the IsNtpFeatureUsed field value if set, zero value otherwise.
func (o *NiatelemetryNiaFeatureUsage) GetIsNtpFeatureUsed() bool {
	if o == nil || o.IsNtpFeatureUsed == nil {
		var ret bool
		return ret
	}
	return *o.IsNtpFeatureUsed
}

// GetIsNtpFeatureUsedOk returns a tuple with the IsNtpFeatureUsed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NiatelemetryNiaFeatureUsage) GetIsNtpFeatureUsedOk() (*bool, bool) {
	if o == nil || o.IsNtpFeatureUsed == nil {
		return nil, false
	}
	return o.IsNtpFeatureUsed, true
}

// HasIsNtpFeatureUsed returns a boolean if a field has been set.
func (o *NiatelemetryNiaFeatureUsage) HasIsNtpFeatureUsed() bool {
	if o != nil && o.IsNtpFeatureUsed != nil {
		return true
	}

	return false
}

// SetIsNtpFeatureUsed gets a reference to the given bool and assigns it to the IsNtpFeatureUsed field.
func (o *NiatelemetryNiaFeatureUsage) SetIsNtpFeatureUsed(v bool) {
	o.IsNtpFeatureUsed = &v
}

// GetIsPtpFeatureUsed returns the IsPtpFeatureUsed field value if set, zero value otherwise.
func (o *NiatelemetryNiaFeatureUsage) GetIsPtpFeatureUsed() bool {
	if o == nil || o.IsPtpFeatureUsed == nil {
		var ret bool
		return ret
	}
	return *o.IsPtpFeatureUsed
}

// GetIsPtpFeatureUsedOk returns a tuple with the IsPtpFeatureUsed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NiatelemetryNiaFeatureUsage) GetIsPtpFeatureUsedOk() (*bool, bool) {
	if o == nil || o.IsPtpFeatureUsed == nil {
		return nil, false
	}
	return o.IsPtpFeatureUsed, true
}

// HasIsPtpFeatureUsed returns a boolean if a field has been set.
func (o *NiatelemetryNiaFeatureUsage) HasIsPtpFeatureUsed() bool {
	if o != nil && o.IsPtpFeatureUsed != nil {
		return true
	}

	return false
}

// SetIsPtpFeatureUsed gets a reference to the given bool and assigns it to the IsPtpFeatureUsed field.
func (o *NiatelemetryNiaFeatureUsage) SetIsPtpFeatureUsed(v bool) {
	o.IsPtpFeatureUsed = &v
}

// GetIsSynceFeatureUsed returns the IsSynceFeatureUsed field value if set, zero value otherwise.
func (o *NiatelemetryNiaFeatureUsage) GetIsSynceFeatureUsed() bool {
	if o == nil || o.IsSynceFeatureUsed == nil {
		var ret bool
		return ret
	}
	return *o.IsSynceFeatureUsed
}

// GetIsSynceFeatureUsedOk returns a tuple with the IsSynceFeatureUsed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NiatelemetryNiaFeatureUsage) GetIsSynceFeatureUsedOk() (*bool, bool) {
	if o == nil || o.IsSynceFeatureUsed == nil {
		return nil, false
	}
	return o.IsSynceFeatureUsed, true
}

// HasIsSynceFeatureUsed returns a boolean if a field has been set.
func (o *NiatelemetryNiaFeatureUsage) HasIsSynceFeatureUsed() bool {
	if o != nil && o.IsSynceFeatureUsed != nil {
		return true
	}

	return false
}

// SetIsSynceFeatureUsed gets a reference to the given bool and assigns it to the IsSynceFeatureUsed field.
func (o *NiatelemetryNiaFeatureUsage) SetIsSynceFeatureUsed(v bool) {
	o.IsSynceFeatureUsed = &v
}

// GetIsTechSupportCollected returns the IsTechSupportCollected field value if set, zero value otherwise.
func (o *NiatelemetryNiaFeatureUsage) GetIsTechSupportCollected() string {
	if o == nil || o.IsTechSupportCollected == nil {
		var ret string
		return ret
	}
	return *o.IsTechSupportCollected
}

// GetIsTechSupportCollectedOk returns a tuple with the IsTechSupportCollected field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NiatelemetryNiaFeatureUsage) GetIsTechSupportCollectedOk() (*string, bool) {
	if o == nil || o.IsTechSupportCollected == nil {
		return nil, false
	}
	return o.IsTechSupportCollected, true
}

// HasIsTechSupportCollected returns a boolean if a field has been set.
func (o *NiatelemetryNiaFeatureUsage) HasIsTechSupportCollected() bool {
	if o != nil && o.IsTechSupportCollected != nil {
		return true
	}

	return false
}

// SetIsTechSupportCollected gets a reference to the given string and assigns it to the IsTechSupportCollected field.
func (o *NiatelemetryNiaFeatureUsage) SetIsTechSupportCollected(v string) {
	o.IsTechSupportCollected = &v
}

// GetIsTenantsFeatureUsed returns the IsTenantsFeatureUsed field value if set, zero value otherwise.
func (o *NiatelemetryNiaFeatureUsage) GetIsTenantsFeatureUsed() bool {
	if o == nil || o.IsTenantsFeatureUsed == nil {
		var ret bool
		return ret
	}
	return *o.IsTenantsFeatureUsed
}

// GetIsTenantsFeatureUsedOk returns a tuple with the IsTenantsFeatureUsed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NiatelemetryNiaFeatureUsage) GetIsTenantsFeatureUsedOk() (*bool, bool) {
	if o == nil || o.IsTenantsFeatureUsed == nil {
		return nil, false
	}
	return o.IsTenantsFeatureUsed, true
}

// HasIsTenantsFeatureUsed returns a boolean if a field has been set.
func (o *NiatelemetryNiaFeatureUsage) HasIsTenantsFeatureUsed() bool {
	if o != nil && o.IsTenantsFeatureUsed != nil {
		return true
	}

	return false
}

// SetIsTenantsFeatureUsed gets a reference to the given bool and assigns it to the IsTenantsFeatureUsed field.
func (o *NiatelemetryNiaFeatureUsage) SetIsTenantsFeatureUsed(v bool) {
	o.IsTenantsFeatureUsed = &v
}

// GetIsVrfsFeatureUsed returns the IsVrfsFeatureUsed field value if set, zero value otherwise.
func (o *NiatelemetryNiaFeatureUsage) GetIsVrfsFeatureUsed() bool {
	if o == nil || o.IsVrfsFeatureUsed == nil {
		var ret bool
		return ret
	}
	return *o.IsVrfsFeatureUsed
}

// GetIsVrfsFeatureUsedOk returns a tuple with the IsVrfsFeatureUsed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NiatelemetryNiaFeatureUsage) GetIsVrfsFeatureUsedOk() (*bool, bool) {
	if o == nil || o.IsVrfsFeatureUsed == nil {
		return nil, false
	}
	return o.IsVrfsFeatureUsed, true
}

// HasIsVrfsFeatureUsed returns a boolean if a field has been set.
func (o *NiatelemetryNiaFeatureUsage) HasIsVrfsFeatureUsed() bool {
	if o != nil && o.IsVrfsFeatureUsed != nil {
		return true
	}

	return false
}

// SetIsVrfsFeatureUsed gets a reference to the given bool and assigns it to the IsVrfsFeatureUsed field.
func (o *NiatelemetryNiaFeatureUsage) SetIsVrfsFeatureUsed(v bool) {
	o.IsVrfsFeatureUsed = &v
}

// GetIsisCount returns the IsisCount field value if set, zero value otherwise.
func (o *NiatelemetryNiaFeatureUsage) GetIsisCount() int64 {
	if o == nil || o.IsisCount == nil {
		var ret int64
		return ret
	}
	return *o.IsisCount
}

// GetIsisCountOk returns a tuple with the IsisCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NiatelemetryNiaFeatureUsage) GetIsisCountOk() (*int64, bool) {
	if o == nil || o.IsisCount == nil {
		return nil, false
	}
	return o.IsisCount, true
}

// HasIsisCount returns a boolean if a field has been set.
func (o *NiatelemetryNiaFeatureUsage) HasIsisCount() bool {
	if o != nil && o.IsisCount != nil {
		return true
	}

	return false
}

// SetIsisCount gets a reference to the given int64 and assigns it to the IsisCount field.
func (o *NiatelemetryNiaFeatureUsage) SetIsisCount(v int64) {
	o.IsisCount = &v
}

// GetL2Multicast returns the L2Multicast field value if set, zero value otherwise.
func (o *NiatelemetryNiaFeatureUsage) GetL2Multicast() string {
	if o == nil || o.L2Multicast == nil {
		var ret string
		return ret
	}
	return *o.L2Multicast
}

// GetL2MulticastOk returns a tuple with the L2Multicast field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NiatelemetryNiaFeatureUsage) GetL2MulticastOk() (*string, bool) {
	if o == nil || o.L2Multicast == nil {
		return nil, false
	}
	return o.L2Multicast, true
}

// HasL2Multicast returns a boolean if a field has been set.
func (o *NiatelemetryNiaFeatureUsage) HasL2Multicast() bool {
	if o != nil && o.L2Multicast != nil {
		return true
	}

	return false
}

// SetL2Multicast gets a reference to the given string and assigns it to the L2Multicast field.
func (o *NiatelemetryNiaFeatureUsage) SetL2Multicast(v string) {
	o.L2Multicast = &v
}

// GetLeafCount returns the LeafCount field value if set, zero value otherwise.
func (o *NiatelemetryNiaFeatureUsage) GetLeafCount() int64 {
	if o == nil || o.LeafCount == nil {
		var ret int64
		return ret
	}
	return *o.LeafCount
}

// GetLeafCountOk returns a tuple with the LeafCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NiatelemetryNiaFeatureUsage) GetLeafCountOk() (*int64, bool) {
	if o == nil || o.LeafCount == nil {
		return nil, false
	}
	return o.LeafCount, true
}

// HasLeafCount returns a boolean if a field has been set.
func (o *NiatelemetryNiaFeatureUsage) HasLeafCount() bool {
	if o != nil && o.LeafCount != nil {
		return true
	}

	return false
}

// SetLeafCount gets a reference to the given int64 and assigns it to the LeafCount field.
func (o *NiatelemetryNiaFeatureUsage) SetLeafCount(v int64) {
	o.LeafCount = &v
}

// GetLocalUsernameCount returns the LocalUsernameCount field value if set, zero value otherwise.
func (o *NiatelemetryNiaFeatureUsage) GetLocalUsernameCount() int64 {
	if o == nil || o.LocalUsernameCount == nil {
		var ret int64
		return ret
	}
	return *o.LocalUsernameCount
}

// GetLocalUsernameCountOk returns a tuple with the LocalUsernameCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NiatelemetryNiaFeatureUsage) GetLocalUsernameCountOk() (*int64, bool) {
	if o == nil || o.LocalUsernameCount == nil {
		return nil, false
	}
	return o.LocalUsernameCount, true
}

// HasLocalUsernameCount returns a boolean if a field has been set.
func (o *NiatelemetryNiaFeatureUsage) HasLocalUsernameCount() bool {
	if o != nil && o.LocalUsernameCount != nil {
		return true
	}

	return false
}

// SetLocalUsernameCount gets a reference to the given int64 and assigns it to the LocalUsernameCount field.
func (o *NiatelemetryNiaFeatureUsage) SetLocalUsernameCount(v int64) {
	o.LocalUsernameCount = &v
}

// GetLoginBlockDuration returns the LoginBlockDuration field value if set, zero value otherwise.
func (o *NiatelemetryNiaFeatureUsage) GetLoginBlockDuration() int64 {
	if o == nil || o.LoginBlockDuration == nil {
		var ret int64
		return ret
	}
	return *o.LoginBlockDuration
}

// GetLoginBlockDurationOk returns a tuple with the LoginBlockDuration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NiatelemetryNiaFeatureUsage) GetLoginBlockDurationOk() (*int64, bool) {
	if o == nil || o.LoginBlockDuration == nil {
		return nil, false
	}
	return o.LoginBlockDuration, true
}

// HasLoginBlockDuration returns a boolean if a field has been set.
func (o *NiatelemetryNiaFeatureUsage) HasLoginBlockDuration() bool {
	if o != nil && o.LoginBlockDuration != nil {
		return true
	}

	return false
}

// SetLoginBlockDuration gets a reference to the given int64 and assigns it to the LoginBlockDuration field.
func (o *NiatelemetryNiaFeatureUsage) SetLoginBlockDuration(v int64) {
	o.LoginBlockDuration = &v
}

// GetLoginMaxFailedAttempts returns the LoginMaxFailedAttempts field value if set, zero value otherwise.
func (o *NiatelemetryNiaFeatureUsage) GetLoginMaxFailedAttempts() int64 {
	if o == nil || o.LoginMaxFailedAttempts == nil {
		var ret int64
		return ret
	}
	return *o.LoginMaxFailedAttempts
}

// GetLoginMaxFailedAttemptsOk returns a tuple with the LoginMaxFailedAttempts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NiatelemetryNiaFeatureUsage) GetLoginMaxFailedAttemptsOk() (*int64, bool) {
	if o == nil || o.LoginMaxFailedAttempts == nil {
		return nil, false
	}
	return o.LoginMaxFailedAttempts, true
}

// HasLoginMaxFailedAttempts returns a boolean if a field has been set.
func (o *NiatelemetryNiaFeatureUsage) HasLoginMaxFailedAttempts() bool {
	if o != nil && o.LoginMaxFailedAttempts != nil {
		return true
	}

	return false
}

// SetLoginMaxFailedAttempts gets a reference to the given int64 and assigns it to the LoginMaxFailedAttempts field.
func (o *NiatelemetryNiaFeatureUsage) SetLoginMaxFailedAttempts(v int64) {
	o.LoginMaxFailedAttempts = &v
}

// GetLoginMaxFailedAttemptsWindow returns the LoginMaxFailedAttemptsWindow field value if set, zero value otherwise.
func (o *NiatelemetryNiaFeatureUsage) GetLoginMaxFailedAttemptsWindow() int64 {
	if o == nil || o.LoginMaxFailedAttemptsWindow == nil {
		var ret int64
		return ret
	}
	return *o.LoginMaxFailedAttemptsWindow
}

// GetLoginMaxFailedAttemptsWindowOk returns a tuple with the LoginMaxFailedAttemptsWindow field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NiatelemetryNiaFeatureUsage) GetLoginMaxFailedAttemptsWindowOk() (*int64, bool) {
	if o == nil || o.LoginMaxFailedAttemptsWindow == nil {
		return nil, false
	}
	return o.LoginMaxFailedAttemptsWindow, true
}

// HasLoginMaxFailedAttemptsWindow returns a boolean if a field has been set.
func (o *NiatelemetryNiaFeatureUsage) HasLoginMaxFailedAttemptsWindow() bool {
	if o != nil && o.LoginMaxFailedAttemptsWindow != nil {
		return true
	}

	return false
}

// SetLoginMaxFailedAttemptsWindow gets a reference to the given int64 and assigns it to the LoginMaxFailedAttemptsWindow field.
func (o *NiatelemetryNiaFeatureUsage) SetLoginMaxFailedAttemptsWindow(v int64) {
	o.LoginMaxFailedAttemptsWindow = &v
}

// GetMaintenanceModeCount returns the MaintenanceModeCount field value if set, zero value otherwise.
func (o *NiatelemetryNiaFeatureUsage) GetMaintenanceModeCount() int64 {
	if o == nil || o.MaintenanceModeCount == nil {
		var ret int64
		return ret
	}
	return *o.MaintenanceModeCount
}

// GetMaintenanceModeCountOk returns a tuple with the MaintenanceModeCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NiatelemetryNiaFeatureUsage) GetMaintenanceModeCountOk() (*int64, bool) {
	if o == nil || o.MaintenanceModeCount == nil {
		return nil, false
	}
	return o.MaintenanceModeCount, true
}

// HasMaintenanceModeCount returns a boolean if a field has been set.
func (o *NiatelemetryNiaFeatureUsage) HasMaintenanceModeCount() bool {
	if o != nil && o.MaintenanceModeCount != nil {
		return true
	}

	return false
}

// SetMaintenanceModeCount gets a reference to the given int64 and assigns it to the MaintenanceModeCount field.
func (o *NiatelemetryNiaFeatureUsage) SetMaintenanceModeCount(v int64) {
	o.MaintenanceModeCount = &v
}

// GetManagementOverV6Count returns the ManagementOverV6Count field value if set, zero value otherwise.
func (o *NiatelemetryNiaFeatureUsage) GetManagementOverV6Count() int64 {
	if o == nil || o.ManagementOverV6Count == nil {
		var ret int64
		return ret
	}
	return *o.ManagementOverV6Count
}

// GetManagementOverV6CountOk returns a tuple with the ManagementOverV6Count field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NiatelemetryNiaFeatureUsage) GetManagementOverV6CountOk() (*int64, bool) {
	if o == nil || o.ManagementOverV6Count == nil {
		return nil, false
	}
	return o.ManagementOverV6Count, true
}

// HasManagementOverV6Count returns a boolean if a field has been set.
func (o *NiatelemetryNiaFeatureUsage) HasManagementOverV6Count() bool {
	if o != nil && o.ManagementOverV6Count != nil {
		return true
	}

	return false
}

// SetManagementOverV6Count gets a reference to the given int64 and assigns it to the ManagementOverV6Count field.
func (o *NiatelemetryNiaFeatureUsage) SetManagementOverV6Count(v int64) {
	o.ManagementOverV6Count = &v
}

// GetMicrosoftUsegVmmEpPdCount returns the MicrosoftUsegVmmEpPdCount field value if set, zero value otherwise.
func (o *NiatelemetryNiaFeatureUsage) GetMicrosoftUsegVmmEpPdCount() int64 {
	if o == nil || o.MicrosoftUsegVmmEpPdCount == nil {
		var ret int64
		return ret
	}
	return *o.MicrosoftUsegVmmEpPdCount
}

// GetMicrosoftUsegVmmEpPdCountOk returns a tuple with the MicrosoftUsegVmmEpPdCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NiatelemetryNiaFeatureUsage) GetMicrosoftUsegVmmEpPdCountOk() (*int64, bool) {
	if o == nil || o.MicrosoftUsegVmmEpPdCount == nil {
		return nil, false
	}
	return o.MicrosoftUsegVmmEpPdCount, true
}

// HasMicrosoftUsegVmmEpPdCount returns a boolean if a field has been set.
func (o *NiatelemetryNiaFeatureUsage) HasMicrosoftUsegVmmEpPdCount() bool {
	if o != nil && o.MicrosoftUsegVmmEpPdCount != nil {
		return true
	}

	return false
}

// SetMicrosoftUsegVmmEpPdCount gets a reference to the given int64 and assigns it to the MicrosoftUsegVmmEpPdCount field.
func (o *NiatelemetryNiaFeatureUsage) SetMicrosoftUsegVmmEpPdCount(v int64) {
	o.MicrosoftUsegVmmEpPdCount = &v
}

// GetNetFlowCount returns the NetFlowCount field value if set, zero value otherwise.
func (o *NiatelemetryNiaFeatureUsage) GetNetFlowCount() int64 {
	if o == nil || o.NetFlowCount == nil {
		var ret int64
		return ret
	}
	return *o.NetFlowCount
}

// GetNetFlowCountOk returns a tuple with the NetFlowCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NiatelemetryNiaFeatureUsage) GetNetFlowCountOk() (*int64, bool) {
	if o == nil || o.NetFlowCount == nil {
		return nil, false
	}
	return o.NetFlowCount, true
}

// HasNetFlowCount returns a boolean if a field has been set.
func (o *NiatelemetryNiaFeatureUsage) HasNetFlowCount() bool {
	if o != nil && o.NetFlowCount != nil {
		return true
	}

	return false
}

// SetNetFlowCount gets a reference to the given int64 and assigns it to the NetFlowCount field.
func (o *NiatelemetryNiaFeatureUsage) SetNetFlowCount(v int64) {
	o.NetFlowCount = &v
}

// GetNir returns the Nir field value if set, zero value otherwise.
func (o *NiatelemetryNiaFeatureUsage) GetNir() string {
	if o == nil || o.Nir == nil {
		var ret string
		return ret
	}
	return *o.Nir
}

// GetNirOk returns a tuple with the Nir field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NiatelemetryNiaFeatureUsage) GetNirOk() (*string, bool) {
	if o == nil || o.Nir == nil {
		return nil, false
	}
	return o.Nir, true
}

// HasNir returns a boolean if a field has been set.
func (o *NiatelemetryNiaFeatureUsage) HasNir() bool {
	if o != nil && o.Nir != nil {
		return true
	}

	return false
}

// SetNir gets a reference to the given string and assigns it to the Nir field.
func (o *NiatelemetryNiaFeatureUsage) SetNir(v string) {
	o.Nir = &v
}

// GetOpenStack returns the OpenStack field value if set, zero value otherwise.
func (o *NiatelemetryNiaFeatureUsage) GetOpenStack() string {
	if o == nil || o.OpenStack == nil {
		var ret string
		return ret
	}
	return *o.OpenStack
}

// GetOpenStackOk returns a tuple with the OpenStack field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NiatelemetryNiaFeatureUsage) GetOpenStackOk() (*string, bool) {
	if o == nil || o.OpenStack == nil {
		return nil, false
	}
	return o.OpenStack, true
}

// HasOpenStack returns a boolean if a field has been set.
func (o *NiatelemetryNiaFeatureUsage) HasOpenStack() bool {
	if o != nil && o.OpenStack != nil {
		return true
	}

	return false
}

// SetOpenStack gets a reference to the given string and assigns it to the OpenStack field.
func (o *NiatelemetryNiaFeatureUsage) SetOpenStack(v string) {
	o.OpenStack = &v
}

// GetOpflexKubernetesCount returns the OpflexKubernetesCount field value if set, zero value otherwise.
func (o *NiatelemetryNiaFeatureUsage) GetOpflexKubernetesCount() int64 {
	if o == nil || o.OpflexKubernetesCount == nil {
		var ret int64
		return ret
	}
	return *o.OpflexKubernetesCount
}

// GetOpflexKubernetesCountOk returns a tuple with the OpflexKubernetesCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NiatelemetryNiaFeatureUsage) GetOpflexKubernetesCountOk() (*int64, bool) {
	if o == nil || o.OpflexKubernetesCount == nil {
		return nil, false
	}
	return o.OpflexKubernetesCount, true
}

// HasOpflexKubernetesCount returns a boolean if a field has been set.
func (o *NiatelemetryNiaFeatureUsage) HasOpflexKubernetesCount() bool {
	if o != nil && o.OpflexKubernetesCount != nil {
		return true
	}

	return false
}

// SetOpflexKubernetesCount gets a reference to the given int64 and assigns it to the OpflexKubernetesCount field.
func (o *NiatelemetryNiaFeatureUsage) SetOpflexKubernetesCount(v int64) {
	o.OpflexKubernetesCount = &v
}

// GetOspfCount returns the OspfCount field value if set, zero value otherwise.
func (o *NiatelemetryNiaFeatureUsage) GetOspfCount() int64 {
	if o == nil || o.OspfCount == nil {
		var ret int64
		return ret
	}
	return *o.OspfCount
}

// GetOspfCountOk returns a tuple with the OspfCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NiatelemetryNiaFeatureUsage) GetOspfCountOk() (*int64, bool) {
	if o == nil || o.OspfCount == nil {
		return nil, false
	}
	return o.OspfCount, true
}

// HasOspfCount returns a boolean if a field has been set.
func (o *NiatelemetryNiaFeatureUsage) HasOspfCount() bool {
	if o != nil && o.OspfCount != nil {
		return true
	}

	return false
}

// SetOspfCount gets a reference to the given int64 and assigns it to the OspfCount field.
func (o *NiatelemetryNiaFeatureUsage) SetOspfCount(v int64) {
	o.OspfCount = &v
}

// GetPasswordHistoryCount returns the PasswordHistoryCount field value if set, zero value otherwise.
func (o *NiatelemetryNiaFeatureUsage) GetPasswordHistoryCount() int64 {
	if o == nil || o.PasswordHistoryCount == nil {
		var ret int64
		return ret
	}
	return *o.PasswordHistoryCount
}

// GetPasswordHistoryCountOk returns a tuple with the PasswordHistoryCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NiatelemetryNiaFeatureUsage) GetPasswordHistoryCountOk() (*int64, bool) {
	if o == nil || o.PasswordHistoryCount == nil {
		return nil, false
	}
	return o.PasswordHistoryCount, true
}

// HasPasswordHistoryCount returns a boolean if a field has been set.
func (o *NiatelemetryNiaFeatureUsage) HasPasswordHistoryCount() bool {
	if o != nil && o.PasswordHistoryCount != nil {
		return true
	}

	return false
}

// SetPasswordHistoryCount gets a reference to the given int64 and assigns it to the PasswordHistoryCount field.
func (o *NiatelemetryNiaFeatureUsage) SetPasswordHistoryCount(v int64) {
	o.PasswordHistoryCount = &v
}

// GetPasswordStrengthCheck returns the PasswordStrengthCheck field value if set, zero value otherwise.
func (o *NiatelemetryNiaFeatureUsage) GetPasswordStrengthCheck() string {
	if o == nil || o.PasswordStrengthCheck == nil {
		var ret string
		return ret
	}
	return *o.PasswordStrengthCheck
}

// GetPasswordStrengthCheckOk returns a tuple with the PasswordStrengthCheck field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NiatelemetryNiaFeatureUsage) GetPasswordStrengthCheckOk() (*string, bool) {
	if o == nil || o.PasswordStrengthCheck == nil {
		return nil, false
	}
	return o.PasswordStrengthCheck, true
}

// HasPasswordStrengthCheck returns a boolean if a field has been set.
func (o *NiatelemetryNiaFeatureUsage) HasPasswordStrengthCheck() bool {
	if o != nil && o.PasswordStrengthCheck != nil {
		return true
	}

	return false
}

// SetPasswordStrengthCheck gets a reference to the given string and assigns it to the PasswordStrengthCheck field.
func (o *NiatelemetryNiaFeatureUsage) SetPasswordStrengthCheck(v string) {
	o.PasswordStrengthCheck = &v
}

// GetPasswordStrengthProfileCount returns the PasswordStrengthProfileCount field value if set, zero value otherwise.
func (o *NiatelemetryNiaFeatureUsage) GetPasswordStrengthProfileCount() int64 {
	if o == nil || o.PasswordStrengthProfileCount == nil {
		var ret int64
		return ret
	}
	return *o.PasswordStrengthProfileCount
}

// GetPasswordStrengthProfileCountOk returns a tuple with the PasswordStrengthProfileCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NiatelemetryNiaFeatureUsage) GetPasswordStrengthProfileCountOk() (*int64, bool) {
	if o == nil || o.PasswordStrengthProfileCount == nil {
		return nil, false
	}
	return o.PasswordStrengthProfileCount, true
}

// HasPasswordStrengthProfileCount returns a boolean if a field has been set.
func (o *NiatelemetryNiaFeatureUsage) HasPasswordStrengthProfileCount() bool {
	if o != nil && o.PasswordStrengthProfileCount != nil {
		return true
	}

	return false
}

// SetPasswordStrengthProfileCount gets a reference to the given int64 and assigns it to the PasswordStrengthProfileCount field.
func (o *NiatelemetryNiaFeatureUsage) SetPasswordStrengthProfileCount(v int64) {
	o.PasswordStrengthProfileCount = &v
}

// GetPoeCount returns the PoeCount field value if set, zero value otherwise.
func (o *NiatelemetryNiaFeatureUsage) GetPoeCount() int64 {
	if o == nil || o.PoeCount == nil {
		var ret int64
		return ret
	}
	return *o.PoeCount
}

// GetPoeCountOk returns a tuple with the PoeCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NiatelemetryNiaFeatureUsage) GetPoeCountOk() (*int64, bool) {
	if o == nil || o.PoeCount == nil {
		return nil, false
	}
	return o.PoeCount, true
}

// HasPoeCount returns a boolean if a field has been set.
func (o *NiatelemetryNiaFeatureUsage) HasPoeCount() bool {
	if o != nil && o.PoeCount != nil {
		return true
	}

	return false
}

// SetPoeCount gets a reference to the given int64 and assigns it to the PoeCount field.
func (o *NiatelemetryNiaFeatureUsage) SetPoeCount(v int64) {
	o.PoeCount = &v
}

// GetPortSecurityCount returns the PortSecurityCount field value if set, zero value otherwise.
func (o *NiatelemetryNiaFeatureUsage) GetPortSecurityCount() int64 {
	if o == nil || o.PortSecurityCount == nil {
		var ret int64
		return ret
	}
	return *o.PortSecurityCount
}

// GetPortSecurityCountOk returns a tuple with the PortSecurityCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NiatelemetryNiaFeatureUsage) GetPortSecurityCountOk() (*int64, bool) {
	if o == nil || o.PortSecurityCount == nil {
		return nil, false
	}
	return o.PortSecurityCount, true
}

// HasPortSecurityCount returns a boolean if a field has been set.
func (o *NiatelemetryNiaFeatureUsage) HasPortSecurityCount() bool {
	if o != nil && o.PortSecurityCount != nil {
		return true
	}

	return false
}

// SetPortSecurityCount gets a reference to the given int64 and assigns it to the PortSecurityCount field.
func (o *NiatelemetryNiaFeatureUsage) SetPortSecurityCount(v int64) {
	o.PortSecurityCount = &v
}

// GetQinVniTunnelCount returns the QinVniTunnelCount field value if set, zero value otherwise.
func (o *NiatelemetryNiaFeatureUsage) GetQinVniTunnelCount() int64 {
	if o == nil || o.QinVniTunnelCount == nil {
		var ret int64
		return ret
	}
	return *o.QinVniTunnelCount
}

// GetQinVniTunnelCountOk returns a tuple with the QinVniTunnelCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NiatelemetryNiaFeatureUsage) GetQinVniTunnelCountOk() (*int64, bool) {
	if o == nil || o.QinVniTunnelCount == nil {
		return nil, false
	}
	return o.QinVniTunnelCount, true
}

// HasQinVniTunnelCount returns a boolean if a field has been set.
func (o *NiatelemetryNiaFeatureUsage) HasQinVniTunnelCount() bool {
	if o != nil && o.QinVniTunnelCount != nil {
		return true
	}

	return false
}

// SetQinVniTunnelCount gets a reference to the given int64 and assigns it to the QinVniTunnelCount field.
func (o *NiatelemetryNiaFeatureUsage) SetQinVniTunnelCount(v int64) {
	o.QinVniTunnelCount = &v
}

// GetQosCongCount returns the QosCongCount field value if set, zero value otherwise.
func (o *NiatelemetryNiaFeatureUsage) GetQosCongCount() int64 {
	if o == nil || o.QosCongCount == nil {
		var ret int64
		return ret
	}
	return *o.QosCongCount
}

// GetQosCongCountOk returns a tuple with the QosCongCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NiatelemetryNiaFeatureUsage) GetQosCongCountOk() (*int64, bool) {
	if o == nil || o.QosCongCount == nil {
		return nil, false
	}
	return o.QosCongCount, true
}

// HasQosCongCount returns a boolean if a field has been set.
func (o *NiatelemetryNiaFeatureUsage) HasQosCongCount() bool {
	if o != nil && o.QosCongCount != nil {
		return true
	}

	return false
}

// SetQosCongCount gets a reference to the given int64 and assigns it to the QosCongCount field.
func (o *NiatelemetryNiaFeatureUsage) SetQosCongCount(v int64) {
	o.QosCongCount = &v
}

// GetQosPfcPolCount returns the QosPfcPolCount field value if set, zero value otherwise.
func (o *NiatelemetryNiaFeatureUsage) GetQosPfcPolCount() int64 {
	if o == nil || o.QosPfcPolCount == nil {
		var ret int64
		return ret
	}
	return *o.QosPfcPolCount
}

// GetQosPfcPolCountOk returns a tuple with the QosPfcPolCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NiatelemetryNiaFeatureUsage) GetQosPfcPolCountOk() (*int64, bool) {
	if o == nil || o.QosPfcPolCount == nil {
		return nil, false
	}
	return o.QosPfcPolCount, true
}

// HasQosPfcPolCount returns a boolean if a field has been set.
func (o *NiatelemetryNiaFeatureUsage) HasQosPfcPolCount() bool {
	if o != nil && o.QosPfcPolCount != nil {
		return true
	}

	return false
}

// SetQosPfcPolCount gets a reference to the given int64 and assigns it to the QosPfcPolCount field.
func (o *NiatelemetryNiaFeatureUsage) SetQosPfcPolCount(v int64) {
	o.QosPfcPolCount = &v
}

// GetRealmCount returns the RealmCount field value if set, zero value otherwise.
func (o *NiatelemetryNiaFeatureUsage) GetRealmCount() int64 {
	if o == nil || o.RealmCount == nil {
		var ret int64
		return ret
	}
	return *o.RealmCount
}

// GetRealmCountOk returns a tuple with the RealmCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NiatelemetryNiaFeatureUsage) GetRealmCountOk() (*int64, bool) {
	if o == nil || o.RealmCount == nil {
		return nil, false
	}
	return o.RealmCount, true
}

// HasRealmCount returns a boolean if a field has been set.
func (o *NiatelemetryNiaFeatureUsage) HasRealmCount() bool {
	if o != nil && o.RealmCount != nil {
		return true
	}

	return false
}

// SetRealmCount gets a reference to the given int64 and assigns it to the RealmCount field.
func (o *NiatelemetryNiaFeatureUsage) SetRealmCount(v int64) {
	o.RealmCount = &v
}

// GetRecordType returns the RecordType field value if set, zero value otherwise.
func (o *NiatelemetryNiaFeatureUsage) GetRecordType() string {
	if o == nil || o.RecordType == nil {
		var ret string
		return ret
	}
	return *o.RecordType
}

// GetRecordTypeOk returns a tuple with the RecordType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NiatelemetryNiaFeatureUsage) GetRecordTypeOk() (*string, bool) {
	if o == nil || o.RecordType == nil {
		return nil, false
	}
	return o.RecordType, true
}

// HasRecordType returns a boolean if a field has been set.
func (o *NiatelemetryNiaFeatureUsage) HasRecordType() bool {
	if o != nil && o.RecordType != nil {
		return true
	}

	return false
}

// SetRecordType gets a reference to the given string and assigns it to the RecordType field.
func (o *NiatelemetryNiaFeatureUsage) SetRecordType(v string) {
	o.RecordType = &v
}

// GetRecordVersion returns the RecordVersion field value if set, zero value otherwise.
func (o *NiatelemetryNiaFeatureUsage) GetRecordVersion() string {
	if o == nil || o.RecordVersion == nil {
		var ret string
		return ret
	}
	return *o.RecordVersion
}

// GetRecordVersionOk returns a tuple with the RecordVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NiatelemetryNiaFeatureUsage) GetRecordVersionOk() (*string, bool) {
	if o == nil || o.RecordVersion == nil {
		return nil, false
	}
	return o.RecordVersion, true
}

// HasRecordVersion returns a boolean if a field has been set.
func (o *NiatelemetryNiaFeatureUsage) HasRecordVersion() bool {
	if o != nil && o.RecordVersion != nil {
		return true
	}

	return false
}

// SetRecordVersion gets a reference to the given string and assigns it to the RecordVersion field.
func (o *NiatelemetryNiaFeatureUsage) SetRecordVersion(v string) {
	o.RecordVersion = &v
}

// GetRemoteLeafCount returns the RemoteLeafCount field value if set, zero value otherwise.
func (o *NiatelemetryNiaFeatureUsage) GetRemoteLeafCount() int64 {
	if o == nil || o.RemoteLeafCount == nil {
		var ret int64
		return ret
	}
	return *o.RemoteLeafCount
}

// GetRemoteLeafCountOk returns a tuple with the RemoteLeafCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NiatelemetryNiaFeatureUsage) GetRemoteLeafCountOk() (*int64, bool) {
	if o == nil || o.RemoteLeafCount == nil {
		return nil, false
	}
	return o.RemoteLeafCount, true
}

// HasRemoteLeafCount returns a boolean if a field has been set.
func (o *NiatelemetryNiaFeatureUsage) HasRemoteLeafCount() bool {
	if o != nil && o.RemoteLeafCount != nil {
		return true
	}

	return false
}

// SetRemoteLeafCount gets a reference to the given int64 and assigns it to the RemoteLeafCount field.
func (o *NiatelemetryNiaFeatureUsage) SetRemoteLeafCount(v int64) {
	o.RemoteLeafCount = &v
}

// GetScvmmCount returns the ScvmmCount field value if set, zero value otherwise.
func (o *NiatelemetryNiaFeatureUsage) GetScvmmCount() int64 {
	if o == nil || o.ScvmmCount == nil {
		var ret int64
		return ret
	}
	return *o.ScvmmCount
}

// GetScvmmCountOk returns a tuple with the ScvmmCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NiatelemetryNiaFeatureUsage) GetScvmmCountOk() (*int64, bool) {
	if o == nil || o.ScvmmCount == nil {
		return nil, false
	}
	return o.ScvmmCount, true
}

// HasScvmmCount returns a boolean if a field has been set.
func (o *NiatelemetryNiaFeatureUsage) HasScvmmCount() bool {
	if o != nil && o.ScvmmCount != nil {
		return true
	}

	return false
}

// SetScvmmCount gets a reference to the given int64 and assigns it to the ScvmmCount field.
func (o *NiatelemetryNiaFeatureUsage) SetScvmmCount(v int64) {
	o.ScvmmCount = &v
}

// GetSharedL3OutCount returns the SharedL3OutCount field value if set, zero value otherwise.
func (o *NiatelemetryNiaFeatureUsage) GetSharedL3OutCount() int64 {
	if o == nil || o.SharedL3OutCount == nil {
		var ret int64
		return ret
	}
	return *o.SharedL3OutCount
}

// GetSharedL3OutCountOk returns a tuple with the SharedL3OutCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NiatelemetryNiaFeatureUsage) GetSharedL3OutCountOk() (*int64, bool) {
	if o == nil || o.SharedL3OutCount == nil {
		return nil, false
	}
	return o.SharedL3OutCount, true
}

// HasSharedL3OutCount returns a boolean if a field has been set.
func (o *NiatelemetryNiaFeatureUsage) HasSharedL3OutCount() bool {
	if o != nil && o.SharedL3OutCount != nil {
		return true
	}

	return false
}

// SetSharedL3OutCount gets a reference to the given int64 and assigns it to the SharedL3OutCount field.
func (o *NiatelemetryNiaFeatureUsage) SetSharedL3OutCount(v int64) {
	o.SharedL3OutCount = &v
}

// GetSiteName returns the SiteName field value if set, zero value otherwise.
func (o *NiatelemetryNiaFeatureUsage) GetSiteName() string {
	if o == nil || o.SiteName == nil {
		var ret string
		return ret
	}
	return *o.SiteName
}

// GetSiteNameOk returns a tuple with the SiteName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NiatelemetryNiaFeatureUsage) GetSiteNameOk() (*string, bool) {
	if o == nil || o.SiteName == nil {
		return nil, false
	}
	return o.SiteName, true
}

// HasSiteName returns a boolean if a field has been set.
func (o *NiatelemetryNiaFeatureUsage) HasSiteName() bool {
	if o != nil && o.SiteName != nil {
		return true
	}

	return false
}

// SetSiteName gets a reference to the given string and assigns it to the SiteName field.
func (o *NiatelemetryNiaFeatureUsage) SetSiteName(v string) {
	o.SiteName = &v
}

// GetSmartCallHome returns the SmartCallHome field value if set, zero value otherwise.
func (o *NiatelemetryNiaFeatureUsage) GetSmartCallHome() string {
	if o == nil || o.SmartCallHome == nil {
		var ret string
		return ret
	}
	return *o.SmartCallHome
}

// GetSmartCallHomeOk returns a tuple with the SmartCallHome field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NiatelemetryNiaFeatureUsage) GetSmartCallHomeOk() (*string, bool) {
	if o == nil || o.SmartCallHome == nil {
		return nil, false
	}
	return o.SmartCallHome, true
}

// HasSmartCallHome returns a boolean if a field has been set.
func (o *NiatelemetryNiaFeatureUsage) HasSmartCallHome() bool {
	if o != nil && o.SmartCallHome != nil {
		return true
	}

	return false
}

// SetSmartCallHome gets a reference to the given string and assigns it to the SmartCallHome field.
func (o *NiatelemetryNiaFeatureUsage) SetSmartCallHome(v string) {
	o.SmartCallHome = &v
}

// GetSmartLicense returns the SmartLicense field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NiatelemetryNiaFeatureUsage) GetSmartLicense() NiatelemetrySmartLicense {
	if o == nil || o.SmartLicense.Get() == nil {
		var ret NiatelemetrySmartLicense
		return ret
	}
	return *o.SmartLicense.Get()
}

// GetSmartLicenseOk returns a tuple with the SmartLicense field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NiatelemetryNiaFeatureUsage) GetSmartLicenseOk() (*NiatelemetrySmartLicense, bool) {
	if o == nil {
		return nil, false
	}
	return o.SmartLicense.Get(), o.SmartLicense.IsSet()
}

// HasSmartLicense returns a boolean if a field has been set.
func (o *NiatelemetryNiaFeatureUsage) HasSmartLicense() bool {
	if o != nil && o.SmartLicense.IsSet() {
		return true
	}

	return false
}

// SetSmartLicense gets a reference to the given NullableNiatelemetrySmartLicense and assigns it to the SmartLicense field.
func (o *NiatelemetryNiaFeatureUsage) SetSmartLicense(v NiatelemetrySmartLicense) {
	o.SmartLicense.Set(&v)
}

// SetSmartLicenseNil sets the value for SmartLicense to be an explicit nil
func (o *NiatelemetryNiaFeatureUsage) SetSmartLicenseNil() {
	o.SmartLicense.Set(nil)
}

// UnsetSmartLicense ensures that no value is present for SmartLicense, not even an explicit nil
func (o *NiatelemetryNiaFeatureUsage) UnsetSmartLicense() {
	o.SmartLicense.Unset()
}

// GetSnapshotCount returns the SnapshotCount field value if set, zero value otherwise.
func (o *NiatelemetryNiaFeatureUsage) GetSnapshotCount() int64 {
	if o == nil || o.SnapshotCount == nil {
		var ret int64
		return ret
	}
	return *o.SnapshotCount
}

// GetSnapshotCountOk returns a tuple with the SnapshotCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NiatelemetryNiaFeatureUsage) GetSnapshotCountOk() (*int64, bool) {
	if o == nil || o.SnapshotCount == nil {
		return nil, false
	}
	return o.SnapshotCount, true
}

// HasSnapshotCount returns a boolean if a field has been set.
func (o *NiatelemetryNiaFeatureUsage) HasSnapshotCount() bool {
	if o != nil && o.SnapshotCount != nil {
		return true
	}

	return false
}

// SetSnapshotCount gets a reference to the given int64 and assigns it to the SnapshotCount field.
func (o *NiatelemetryNiaFeatureUsage) SetSnapshotCount(v int64) {
	o.SnapshotCount = &v
}

// GetSnmp returns the Snmp field value if set, zero value otherwise.
func (o *NiatelemetryNiaFeatureUsage) GetSnmp() string {
	if o == nil || o.Snmp == nil {
		var ret string
		return ret
	}
	return *o.Snmp
}

// GetSnmpOk returns a tuple with the Snmp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NiatelemetryNiaFeatureUsage) GetSnmpOk() (*string, bool) {
	if o == nil || o.Snmp == nil {
		return nil, false
	}
	return o.Snmp, true
}

// HasSnmp returns a boolean if a field has been set.
func (o *NiatelemetryNiaFeatureUsage) HasSnmp() bool {
	if o != nil && o.Snmp != nil {
		return true
	}

	return false
}

// SetSnmp gets a reference to the given string and assigns it to the Snmp field.
func (o *NiatelemetryNiaFeatureUsage) SetSnmp(v string) {
	o.Snmp = &v
}

// GetSnmpCommunityAccessCount returns the SnmpCommunityAccessCount field value if set, zero value otherwise.
func (o *NiatelemetryNiaFeatureUsage) GetSnmpCommunityAccessCount() int64 {
	if o == nil || o.SnmpCommunityAccessCount == nil {
		var ret int64
		return ret
	}
	return *o.SnmpCommunityAccessCount
}

// GetSnmpCommunityAccessCountOk returns a tuple with the SnmpCommunityAccessCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NiatelemetryNiaFeatureUsage) GetSnmpCommunityAccessCountOk() (*int64, bool) {
	if o == nil || o.SnmpCommunityAccessCount == nil {
		return nil, false
	}
	return o.SnmpCommunityAccessCount, true
}

// HasSnmpCommunityAccessCount returns a boolean if a field has been set.
func (o *NiatelemetryNiaFeatureUsage) HasSnmpCommunityAccessCount() bool {
	if o != nil && o.SnmpCommunityAccessCount != nil {
		return true
	}

	return false
}

// SetSnmpCommunityAccessCount gets a reference to the given int64 and assigns it to the SnmpCommunityAccessCount field.
func (o *NiatelemetryNiaFeatureUsage) SetSnmpCommunityAccessCount(v int64) {
	o.SnmpCommunityAccessCount = &v
}

// GetSnmpGroupCount returns the SnmpGroupCount field value if set, zero value otherwise.
func (o *NiatelemetryNiaFeatureUsage) GetSnmpGroupCount() int64 {
	if o == nil || o.SnmpGroupCount == nil {
		var ret int64
		return ret
	}
	return *o.SnmpGroupCount
}

// GetSnmpGroupCountOk returns a tuple with the SnmpGroupCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NiatelemetryNiaFeatureUsage) GetSnmpGroupCountOk() (*int64, bool) {
	if o == nil || o.SnmpGroupCount == nil {
		return nil, false
	}
	return o.SnmpGroupCount, true
}

// HasSnmpGroupCount returns a boolean if a field has been set.
func (o *NiatelemetryNiaFeatureUsage) HasSnmpGroupCount() bool {
	if o != nil && o.SnmpGroupCount != nil {
		return true
	}

	return false
}

// SetSnmpGroupCount gets a reference to the given int64 and assigns it to the SnmpGroupCount field.
func (o *NiatelemetryNiaFeatureUsage) SetSnmpGroupCount(v int64) {
	o.SnmpGroupCount = &v
}

// GetSnmpTrapCount returns the SnmpTrapCount field value if set, zero value otherwise.
func (o *NiatelemetryNiaFeatureUsage) GetSnmpTrapCount() int64 {
	if o == nil || o.SnmpTrapCount == nil {
		var ret int64
		return ret
	}
	return *o.SnmpTrapCount
}

// GetSnmpTrapCountOk returns a tuple with the SnmpTrapCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NiatelemetryNiaFeatureUsage) GetSnmpTrapCountOk() (*int64, bool) {
	if o == nil || o.SnmpTrapCount == nil {
		return nil, false
	}
	return o.SnmpTrapCount, true
}

// HasSnmpTrapCount returns a boolean if a field has been set.
func (o *NiatelemetryNiaFeatureUsage) HasSnmpTrapCount() bool {
	if o != nil && o.SnmpTrapCount != nil {
		return true
	}

	return false
}

// SetSnmpTrapCount gets a reference to the given int64 and assigns it to the SnmpTrapCount field.
func (o *NiatelemetryNiaFeatureUsage) SetSnmpTrapCount(v int64) {
	o.SnmpTrapCount = &v
}

// GetSnmpV3Count returns the SnmpV3Count field value if set, zero value otherwise.
func (o *NiatelemetryNiaFeatureUsage) GetSnmpV3Count() int64 {
	if o == nil || o.SnmpV3Count == nil {
		var ret int64
		return ret
	}
	return *o.SnmpV3Count
}

// GetSnmpV3CountOk returns a tuple with the SnmpV3Count field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NiatelemetryNiaFeatureUsage) GetSnmpV3CountOk() (*int64, bool) {
	if o == nil || o.SnmpV3Count == nil {
		return nil, false
	}
	return o.SnmpV3Count, true
}

// HasSnmpV3Count returns a boolean if a field has been set.
func (o *NiatelemetryNiaFeatureUsage) HasSnmpV3Count() bool {
	if o != nil && o.SnmpV3Count != nil {
		return true
	}

	return false
}

// SetSnmpV3Count gets a reference to the given int64 and assigns it to the SnmpV3Count field.
func (o *NiatelemetryNiaFeatureUsage) SetSnmpV3Count(v int64) {
	o.SnmpV3Count = &v
}

// GetSpanCount returns the SpanCount field value if set, zero value otherwise.
func (o *NiatelemetryNiaFeatureUsage) GetSpanCount() int64 {
	if o == nil || o.SpanCount == nil {
		var ret int64
		return ret
	}
	return *o.SpanCount
}

// GetSpanCountOk returns a tuple with the SpanCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NiatelemetryNiaFeatureUsage) GetSpanCountOk() (*int64, bool) {
	if o == nil || o.SpanCount == nil {
		return nil, false
	}
	return o.SpanCount, true
}

// HasSpanCount returns a boolean if a field has been set.
func (o *NiatelemetryNiaFeatureUsage) HasSpanCount() bool {
	if o != nil && o.SpanCount != nil {
		return true
	}

	return false
}

// SetSpanCount gets a reference to the given int64 and assigns it to the SpanCount field.
func (o *NiatelemetryNiaFeatureUsage) SetSpanCount(v int64) {
	o.SpanCount = &v
}

// GetSpanDstCount returns the SpanDstCount field value if set, zero value otherwise.
func (o *NiatelemetryNiaFeatureUsage) GetSpanDstCount() int64 {
	if o == nil || o.SpanDstCount == nil {
		var ret int64
		return ret
	}
	return *o.SpanDstCount
}

// GetSpanDstCountOk returns a tuple with the SpanDstCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NiatelemetryNiaFeatureUsage) GetSpanDstCountOk() (*int64, bool) {
	if o == nil || o.SpanDstCount == nil {
		return nil, false
	}
	return o.SpanDstCount, true
}

// HasSpanDstCount returns a boolean if a field has been set.
func (o *NiatelemetryNiaFeatureUsage) HasSpanDstCount() bool {
	if o != nil && o.SpanDstCount != nil {
		return true
	}

	return false
}

// SetSpanDstCount gets a reference to the given int64 and assigns it to the SpanDstCount field.
func (o *NiatelemetryNiaFeatureUsage) SetSpanDstCount(v int64) {
	o.SpanDstCount = &v
}

// GetSpanSrcCount returns the SpanSrcCount field value if set, zero value otherwise.
func (o *NiatelemetryNiaFeatureUsage) GetSpanSrcCount() int64 {
	if o == nil || o.SpanSrcCount == nil {
		var ret int64
		return ret
	}
	return *o.SpanSrcCount
}

// GetSpanSrcCountOk returns a tuple with the SpanSrcCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NiatelemetryNiaFeatureUsage) GetSpanSrcCountOk() (*int64, bool) {
	if o == nil || o.SpanSrcCount == nil {
		return nil, false
	}
	return o.SpanSrcCount, true
}

// HasSpanSrcCount returns a boolean if a field has been set.
func (o *NiatelemetryNiaFeatureUsage) HasSpanSrcCount() bool {
	if o != nil && o.SpanSrcCount != nil {
		return true
	}

	return false
}

// SetSpanSrcCount gets a reference to the given int64 and assigns it to the SpanSrcCount field.
func (o *NiatelemetryNiaFeatureUsage) SetSpanSrcCount(v int64) {
	o.SpanSrcCount = &v
}

// GetSpineCount returns the SpineCount field value if set, zero value otherwise.
func (o *NiatelemetryNiaFeatureUsage) GetSpineCount() int64 {
	if o == nil || o.SpineCount == nil {
		var ret int64
		return ret
	}
	return *o.SpineCount
}

// GetSpineCountOk returns a tuple with the SpineCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NiatelemetryNiaFeatureUsage) GetSpineCountOk() (*int64, bool) {
	if o == nil || o.SpineCount == nil {
		return nil, false
	}
	return o.SpineCount, true
}

// HasSpineCount returns a boolean if a field has been set.
func (o *NiatelemetryNiaFeatureUsage) HasSpineCount() bool {
	if o != nil && o.SpineCount != nil {
		return true
	}

	return false
}

// SetSpineCount gets a reference to the given int64 and assigns it to the SpineCount field.
func (o *NiatelemetryNiaFeatureUsage) SetSpineCount(v int64) {
	o.SpineCount = &v
}

// GetSshOverV6Count returns the SshOverV6Count field value if set, zero value otherwise.
func (o *NiatelemetryNiaFeatureUsage) GetSshOverV6Count() int64 {
	if o == nil || o.SshOverV6Count == nil {
		var ret int64
		return ret
	}
	return *o.SshOverV6Count
}

// GetSshOverV6CountOk returns a tuple with the SshOverV6Count field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NiatelemetryNiaFeatureUsage) GetSshOverV6CountOk() (*int64, bool) {
	if o == nil || o.SshOverV6Count == nil {
		return nil, false
	}
	return o.SshOverV6Count, true
}

// HasSshOverV6Count returns a boolean if a field has been set.
func (o *NiatelemetryNiaFeatureUsage) HasSshOverV6Count() bool {
	if o != nil && o.SshOverV6Count != nil {
		return true
	}

	return false
}

// SetSshOverV6Count gets a reference to the given int64 and assigns it to the SshOverV6Count field.
func (o *NiatelemetryNiaFeatureUsage) SetSshOverV6Count(v int64) {
	o.SshOverV6Count = &v
}

// GetSshV2Count returns the SshV2Count field value if set, zero value otherwise.
func (o *NiatelemetryNiaFeatureUsage) GetSshV2Count() int64 {
	if o == nil || o.SshV2Count == nil {
		var ret int64
		return ret
	}
	return *o.SshV2Count
}

// GetSshV2CountOk returns a tuple with the SshV2Count field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NiatelemetryNiaFeatureUsage) GetSshV2CountOk() (*int64, bool) {
	if o == nil || o.SshV2Count == nil {
		return nil, false
	}
	return o.SshV2Count, true
}

// HasSshV2Count returns a boolean if a field has been set.
func (o *NiatelemetryNiaFeatureUsage) HasSshV2Count() bool {
	if o != nil && o.SshV2Count != nil {
		return true
	}

	return false
}

// SetSshV2Count gets a reference to the given int64 and assigns it to the SshV2Count field.
func (o *NiatelemetryNiaFeatureUsage) SetSshV2Count(v int64) {
	o.SshV2Count = &v
}

// GetSupervisorModuleCount returns the SupervisorModuleCount field value if set, zero value otherwise.
func (o *NiatelemetryNiaFeatureUsage) GetSupervisorModuleCount() int64 {
	if o == nil || o.SupervisorModuleCount == nil {
		var ret int64
		return ret
	}
	return *o.SupervisorModuleCount
}

// GetSupervisorModuleCountOk returns a tuple with the SupervisorModuleCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NiatelemetryNiaFeatureUsage) GetSupervisorModuleCountOk() (*int64, bool) {
	if o == nil || o.SupervisorModuleCount == nil {
		return nil, false
	}
	return o.SupervisorModuleCount, true
}

// HasSupervisorModuleCount returns a boolean if a field has been set.
func (o *NiatelemetryNiaFeatureUsage) HasSupervisorModuleCount() bool {
	if o != nil && o.SupervisorModuleCount != nil {
		return true
	}

	return false
}

// SetSupervisorModuleCount gets a reference to the given int64 and assigns it to the SupervisorModuleCount field.
func (o *NiatelemetryNiaFeatureUsage) SetSupervisorModuleCount(v int64) {
	o.SupervisorModuleCount = &v
}

// GetSyslogGroupCount returns the SyslogGroupCount field value if set, zero value otherwise.
func (o *NiatelemetryNiaFeatureUsage) GetSyslogGroupCount() int64 {
	if o == nil || o.SyslogGroupCount == nil {
		var ret int64
		return ret
	}
	return *o.SyslogGroupCount
}

// GetSyslogGroupCountOk returns a tuple with the SyslogGroupCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NiatelemetryNiaFeatureUsage) GetSyslogGroupCountOk() (*int64, bool) {
	if o == nil || o.SyslogGroupCount == nil {
		return nil, false
	}
	return o.SyslogGroupCount, true
}

// HasSyslogGroupCount returns a boolean if a field has been set.
func (o *NiatelemetryNiaFeatureUsage) HasSyslogGroupCount() bool {
	if o != nil && o.SyslogGroupCount != nil {
		return true
	}

	return false
}

// SetSyslogGroupCount gets a reference to the given int64 and assigns it to the SyslogGroupCount field.
func (o *NiatelemetryNiaFeatureUsage) SetSyslogGroupCount(v int64) {
	o.SyslogGroupCount = &v
}

// GetSyslogOverV6Count returns the SyslogOverV6Count field value if set, zero value otherwise.
func (o *NiatelemetryNiaFeatureUsage) GetSyslogOverV6Count() int64 {
	if o == nil || o.SyslogOverV6Count == nil {
		var ret int64
		return ret
	}
	return *o.SyslogOverV6Count
}

// GetSyslogOverV6CountOk returns a tuple with the SyslogOverV6Count field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NiatelemetryNiaFeatureUsage) GetSyslogOverV6CountOk() (*int64, bool) {
	if o == nil || o.SyslogOverV6Count == nil {
		return nil, false
	}
	return o.SyslogOverV6Count, true
}

// HasSyslogOverV6Count returns a boolean if a field has been set.
func (o *NiatelemetryNiaFeatureUsage) HasSyslogOverV6Count() bool {
	if o != nil && o.SyslogOverV6Count != nil {
		return true
	}

	return false
}

// SetSyslogOverV6Count gets a reference to the given int64 and assigns it to the SyslogOverV6Count field.
func (o *NiatelemetryNiaFeatureUsage) SetSyslogOverV6Count(v int64) {
	o.SyslogOverV6Count = &v
}

// GetSystemControllerCount returns the SystemControllerCount field value if set, zero value otherwise.
func (o *NiatelemetryNiaFeatureUsage) GetSystemControllerCount() int64 {
	if o == nil || o.SystemControllerCount == nil {
		var ret int64
		return ret
	}
	return *o.SystemControllerCount
}

// GetSystemControllerCountOk returns a tuple with the SystemControllerCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NiatelemetryNiaFeatureUsage) GetSystemControllerCountOk() (*int64, bool) {
	if o == nil || o.SystemControllerCount == nil {
		return nil, false
	}
	return o.SystemControllerCount, true
}

// HasSystemControllerCount returns a boolean if a field has been set.
func (o *NiatelemetryNiaFeatureUsage) HasSystemControllerCount() bool {
	if o != nil && o.SystemControllerCount != nil {
		return true
	}

	return false
}

// SetSystemControllerCount gets a reference to the given int64 and assigns it to the SystemControllerCount field.
func (o *NiatelemetryNiaFeatureUsage) SetSystemControllerCount(v int64) {
	o.SystemControllerCount = &v
}

// GetTacacsGroupCount returns the TacacsGroupCount field value if set, zero value otherwise.
func (o *NiatelemetryNiaFeatureUsage) GetTacacsGroupCount() int64 {
	if o == nil || o.TacacsGroupCount == nil {
		var ret int64
		return ret
	}
	return *o.TacacsGroupCount
}

// GetTacacsGroupCountOk returns a tuple with the TacacsGroupCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NiatelemetryNiaFeatureUsage) GetTacacsGroupCountOk() (*int64, bool) {
	if o == nil || o.TacacsGroupCount == nil {
		return nil, false
	}
	return o.TacacsGroupCount, true
}

// HasTacacsGroupCount returns a boolean if a field has been set.
func (o *NiatelemetryNiaFeatureUsage) HasTacacsGroupCount() bool {
	if o != nil && o.TacacsGroupCount != nil {
		return true
	}

	return false
}

// SetTacacsGroupCount gets a reference to the given int64 and assigns it to the TacacsGroupCount field.
func (o *NiatelemetryNiaFeatureUsage) SetTacacsGroupCount(v int64) {
	o.TacacsGroupCount = &v
}

// GetTenantCount returns the TenantCount field value if set, zero value otherwise.
func (o *NiatelemetryNiaFeatureUsage) GetTenantCount() int64 {
	if o == nil || o.TenantCount == nil {
		var ret int64
		return ret
	}
	return *o.TenantCount
}

// GetTenantCountOk returns a tuple with the TenantCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NiatelemetryNiaFeatureUsage) GetTenantCountOk() (*int64, bool) {
	if o == nil || o.TenantCount == nil {
		return nil, false
	}
	return o.TenantCount, true
}

// HasTenantCount returns a boolean if a field has been set.
func (o *NiatelemetryNiaFeatureUsage) HasTenantCount() bool {
	if o != nil && o.TenantCount != nil {
		return true
	}

	return false
}

// SetTenantCount gets a reference to the given int64 and assigns it to the TenantCount field.
func (o *NiatelemetryNiaFeatureUsage) SetTenantCount(v int64) {
	o.TenantCount = &v
}

// GetTierTwoLeafCount returns the TierTwoLeafCount field value if set, zero value otherwise.
func (o *NiatelemetryNiaFeatureUsage) GetTierTwoLeafCount() int64 {
	if o == nil || o.TierTwoLeafCount == nil {
		var ret int64
		return ret
	}
	return *o.TierTwoLeafCount
}

// GetTierTwoLeafCountOk returns a tuple with the TierTwoLeafCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NiatelemetryNiaFeatureUsage) GetTierTwoLeafCountOk() (*int64, bool) {
	if o == nil || o.TierTwoLeafCount == nil {
		return nil, false
	}
	return o.TierTwoLeafCount, true
}

// HasTierTwoLeafCount returns a boolean if a field has been set.
func (o *NiatelemetryNiaFeatureUsage) HasTierTwoLeafCount() bool {
	if o != nil && o.TierTwoLeafCount != nil {
		return true
	}

	return false
}

// SetTierTwoLeafCount gets a reference to the given int64 and assigns it to the TierTwoLeafCount field.
func (o *NiatelemetryNiaFeatureUsage) SetTierTwoLeafCount(v int64) {
	o.TierTwoLeafCount = &v
}

// GetTwamp returns the Twamp field value if set, zero value otherwise.
func (o *NiatelemetryNiaFeatureUsage) GetTwamp() string {
	if o == nil || o.Twamp == nil {
		var ret string
		return ret
	}
	return *o.Twamp
}

// GetTwampOk returns a tuple with the Twamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NiatelemetryNiaFeatureUsage) GetTwampOk() (*string, bool) {
	if o == nil || o.Twamp == nil {
		return nil, false
	}
	return o.Twamp, true
}

// HasTwamp returns a boolean if a field has been set.
func (o *NiatelemetryNiaFeatureUsage) HasTwamp() bool {
	if o != nil && o.Twamp != nil {
		return true
	}

	return false
}

// SetTwamp gets a reference to the given string and assigns it to the Twamp field.
func (o *NiatelemetryNiaFeatureUsage) SetTwamp(v string) {
	o.Twamp = &v
}

// GetUseg returns the Useg field value if set, zero value otherwise.
func (o *NiatelemetryNiaFeatureUsage) GetUseg() string {
	if o == nil || o.Useg == nil {
		var ret string
		return ret
	}
	return *o.Useg
}

// GetUsegOk returns a tuple with the Useg field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NiatelemetryNiaFeatureUsage) GetUsegOk() (*string, bool) {
	if o == nil || o.Useg == nil {
		return nil, false
	}
	return o.Useg, true
}

// HasUseg returns a boolean if a field has been set.
func (o *NiatelemetryNiaFeatureUsage) HasUseg() bool {
	if o != nil && o.Useg != nil {
		return true
	}

	return false
}

// SetUseg gets a reference to the given string and assigns it to the Useg field.
func (o *NiatelemetryNiaFeatureUsage) SetUseg(v string) {
	o.Useg = &v
}

// GetVmWareVdsCount returns the VmWareVdsCount field value if set, zero value otherwise.
func (o *NiatelemetryNiaFeatureUsage) GetVmWareVdsCount() int64 {
	if o == nil || o.VmWareVdsCount == nil {
		var ret int64
		return ret
	}
	return *o.VmWareVdsCount
}

// GetVmWareVdsCountOk returns a tuple with the VmWareVdsCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NiatelemetryNiaFeatureUsage) GetVmWareVdsCountOk() (*int64, bool) {
	if o == nil || o.VmWareVdsCount == nil {
		return nil, false
	}
	return o.VmWareVdsCount, true
}

// HasVmWareVdsCount returns a boolean if a field has been set.
func (o *NiatelemetryNiaFeatureUsage) HasVmWareVdsCount() bool {
	if o != nil && o.VmWareVdsCount != nil {
		return true
	}

	return false
}

// SetVmWareVdsCount gets a reference to the given int64 and assigns it to the VmWareVdsCount field.
func (o *NiatelemetryNiaFeatureUsage) SetVmWareVdsCount(v int64) {
	o.VmWareVdsCount = &v
}

// GetVmmCtrlrpCount returns the VmmCtrlrpCount field value if set, zero value otherwise.
func (o *NiatelemetryNiaFeatureUsage) GetVmmCtrlrpCount() int64 {
	if o == nil || o.VmmCtrlrpCount == nil {
		var ret int64
		return ret
	}
	return *o.VmmCtrlrpCount
}

// GetVmmCtrlrpCountOk returns a tuple with the VmmCtrlrpCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NiatelemetryNiaFeatureUsage) GetVmmCtrlrpCountOk() (*int64, bool) {
	if o == nil || o.VmmCtrlrpCount == nil {
		return nil, false
	}
	return o.VmmCtrlrpCount, true
}

// HasVmmCtrlrpCount returns a boolean if a field has been set.
func (o *NiatelemetryNiaFeatureUsage) HasVmmCtrlrpCount() bool {
	if o != nil && o.VmmCtrlrpCount != nil {
		return true
	}

	return false
}

// SetVmmCtrlrpCount gets a reference to the given int64 and assigns it to the VmmCtrlrpCount field.
func (o *NiatelemetryNiaFeatureUsage) SetVmmCtrlrpCount(v int64) {
	o.VmmCtrlrpCount = &v
}

// GetVmmDompCount returns the VmmDompCount field value if set, zero value otherwise.
func (o *NiatelemetryNiaFeatureUsage) GetVmmDompCount() int64 {
	if o == nil || o.VmmDompCount == nil {
		var ret int64
		return ret
	}
	return *o.VmmDompCount
}

// GetVmmDompCountOk returns a tuple with the VmmDompCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NiatelemetryNiaFeatureUsage) GetVmmDompCountOk() (*int64, bool) {
	if o == nil || o.VmmDompCount == nil {
		return nil, false
	}
	return o.VmmDompCount, true
}

// HasVmmDompCount returns a boolean if a field has been set.
func (o *NiatelemetryNiaFeatureUsage) HasVmmDompCount() bool {
	if o != nil && o.VmmDompCount != nil {
		return true
	}

	return false
}

// SetVmmDompCount gets a reference to the given int64 and assigns it to the VmmDompCount field.
func (o *NiatelemetryNiaFeatureUsage) SetVmmDompCount(v int64) {
	o.VmmDompCount = &v
}

// GetVmmEpPdCount returns the VmmEpPdCount field value if set, zero value otherwise.
func (o *NiatelemetryNiaFeatureUsage) GetVmmEpPdCount() int64 {
	if o == nil || o.VmmEpPdCount == nil {
		var ret int64
		return ret
	}
	return *o.VmmEpPdCount
}

// GetVmmEpPdCountOk returns a tuple with the VmmEpPdCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NiatelemetryNiaFeatureUsage) GetVmmEpPdCountOk() (*int64, bool) {
	if o == nil || o.VmmEpPdCount == nil {
		return nil, false
	}
	return o.VmmEpPdCount, true
}

// HasVmmEpPdCount returns a boolean if a field has been set.
func (o *NiatelemetryNiaFeatureUsage) HasVmmEpPdCount() bool {
	if o != nil && o.VmmEpPdCount != nil {
		return true
	}

	return false
}

// SetVmmEpPdCount gets a reference to the given int64 and assigns it to the VmmEpPdCount field.
func (o *NiatelemetryNiaFeatureUsage) SetVmmEpPdCount(v int64) {
	o.VmmEpPdCount = &v
}

// GetVnsmDevCount returns the VnsmDevCount field value if set, zero value otherwise.
func (o *NiatelemetryNiaFeatureUsage) GetVnsmDevCount() int64 {
	if o == nil || o.VnsmDevCount == nil {
		var ret int64
		return ret
	}
	return *o.VnsmDevCount
}

// GetVnsmDevCountOk returns a tuple with the VnsmDevCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NiatelemetryNiaFeatureUsage) GetVnsmDevCountOk() (*int64, bool) {
	if o == nil || o.VnsmDevCount == nil {
		return nil, false
	}
	return o.VnsmDevCount, true
}

// HasVnsmDevCount returns a boolean if a field has been set.
func (o *NiatelemetryNiaFeatureUsage) HasVnsmDevCount() bool {
	if o != nil && o.VnsmDevCount != nil {
		return true
	}

	return false
}

// SetVnsmDevCount gets a reference to the given int64 and assigns it to the VnsmDevCount field.
func (o *NiatelemetryNiaFeatureUsage) SetVnsmDevCount(v int64) {
	o.VnsmDevCount = &v
}

// GetVpodCount returns the VpodCount field value if set, zero value otherwise.
func (o *NiatelemetryNiaFeatureUsage) GetVpodCount() int64 {
	if o == nil || o.VpodCount == nil {
		var ret int64
		return ret
	}
	return *o.VpodCount
}

// GetVpodCountOk returns a tuple with the VpodCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NiatelemetryNiaFeatureUsage) GetVpodCountOk() (*int64, bool) {
	if o == nil || o.VpodCount == nil {
		return nil, false
	}
	return o.VpodCount, true
}

// HasVpodCount returns a boolean if a field has been set.
func (o *NiatelemetryNiaFeatureUsage) HasVpodCount() bool {
	if o != nil && o.VpodCount != nil {
		return true
	}

	return false
}

// SetVpodCount gets a reference to the given int64 and assigns it to the VpodCount field.
func (o *NiatelemetryNiaFeatureUsage) SetVpodCount(v int64) {
	o.VpodCount = &v
}

// GetWebtokenTimeoutSeconds returns the WebtokenTimeoutSeconds field value if set, zero value otherwise.
func (o *NiatelemetryNiaFeatureUsage) GetWebtokenTimeoutSeconds() int64 {
	if o == nil || o.WebtokenTimeoutSeconds == nil {
		var ret int64
		return ret
	}
	return *o.WebtokenTimeoutSeconds
}

// GetWebtokenTimeoutSecondsOk returns a tuple with the WebtokenTimeoutSeconds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NiatelemetryNiaFeatureUsage) GetWebtokenTimeoutSecondsOk() (*int64, bool) {
	if o == nil || o.WebtokenTimeoutSeconds == nil {
		return nil, false
	}
	return o.WebtokenTimeoutSeconds, true
}

// HasWebtokenTimeoutSeconds returns a boolean if a field has been set.
func (o *NiatelemetryNiaFeatureUsage) HasWebtokenTimeoutSeconds() bool {
	if o != nil && o.WebtokenTimeoutSeconds != nil {
		return true
	}

	return false
}

// SetWebtokenTimeoutSeconds gets a reference to the given int64 and assigns it to the WebtokenTimeoutSeconds field.
func (o *NiatelemetryNiaFeatureUsage) SetWebtokenTimeoutSeconds(v int64) {
	o.WebtokenTimeoutSeconds = &v
}

// GetRegisteredDevice returns the RegisteredDevice field value if set, zero value otherwise.
func (o *NiatelemetryNiaFeatureUsage) GetRegisteredDevice() AssetDeviceRegistrationRelationship {
	if o == nil || o.RegisteredDevice == nil {
		var ret AssetDeviceRegistrationRelationship
		return ret
	}
	return *o.RegisteredDevice
}

// GetRegisteredDeviceOk returns a tuple with the RegisteredDevice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NiatelemetryNiaFeatureUsage) GetRegisteredDeviceOk() (*AssetDeviceRegistrationRelationship, bool) {
	if o == nil || o.RegisteredDevice == nil {
		return nil, false
	}
	return o.RegisteredDevice, true
}

// HasRegisteredDevice returns a boolean if a field has been set.
func (o *NiatelemetryNiaFeatureUsage) HasRegisteredDevice() bool {
	if o != nil && o.RegisteredDevice != nil {
		return true
	}

	return false
}

// SetRegisteredDevice gets a reference to the given AssetDeviceRegistrationRelationship and assigns it to the RegisteredDevice field.
func (o *NiatelemetryNiaFeatureUsage) SetRegisteredDevice(v AssetDeviceRegistrationRelationship) {
	o.RegisteredDevice = &v
}

func (o NiatelemetryNiaFeatureUsage) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	serializedMoBaseMo, errMoBaseMo := json.Marshal(o.MoBaseMo)
	if errMoBaseMo != nil {
		return []byte{}, errMoBaseMo
	}
	errMoBaseMo = json.Unmarshal([]byte(serializedMoBaseMo), &toSerialize)
	if errMoBaseMo != nil {
		return []byte{}, errMoBaseMo
	}
	if true {
		toSerialize["ClassId"] = o.ClassId
	}
	if true {
		toSerialize["ObjectType"] = o.ObjectType
	}
	if o.AaaLdapProviderCount != nil {
		toSerialize["AaaLdapProviderCount"] = o.AaaLdapProviderCount
	}
	if o.AaaRadiusProviderCount != nil {
		toSerialize["AaaRadiusProviderCount"] = o.AaaRadiusProviderCount
	}
	if o.AaaTacacsProviderCount != nil {
		toSerialize["AaaTacacsProviderCount"] = o.AaaTacacsProviderCount
	}
	if o.ApicCount != nil {
		toSerialize["ApicCount"] = o.ApicCount
	}
	if o.ApicIsTelnetEnabled != nil {
		toSerialize["ApicIsTelnetEnabled"] = o.ApicIsTelnetEnabled
	}
	if o.ApicNtpCount != nil {
		toSerialize["ApicNtpCount"] = o.ApicNtpCount
	}
	if o.ApicSnmpCommunityCount != nil {
		toSerialize["ApicSnmpCommunityCount"] = o.ApicSnmpCommunityCount
	}
	if o.ApicSysLogGrpCount != nil {
		toSerialize["ApicSysLogGrpCount"] = o.ApicSysLogGrpCount
	}
	if o.ApicSysLogSrcCount != nil {
		toSerialize["ApicSysLogSrcCount"] = o.ApicSysLogSrcCount
	}
	if o.AppCenterCount != nil {
		toSerialize["AppCenterCount"] = o.AppCenterCount
	}
	if o.Ave != nil {
		toSerialize["Ave"] = o.Ave
	}
	if o.BdCount != nil {
		toSerialize["BdCount"] = o.BdCount
	}
	if o.CallhomeSmartGroupCount != nil {
		toSerialize["CallhomeSmartGroupCount"] = o.CallhomeSmartGroupCount
	}
	if o.CloudSecPeerCount != nil {
		toSerialize["CloudSecPeerCount"] = o.CloudSecPeerCount
	}
	if o.CompHvCount != nil {
		toSerialize["CompHvCount"] = o.CompHvCount
	}
	if o.ConfigExportpCount != nil {
		toSerialize["ConfigExportpCount"] = o.ConfigExportpCount
	}
	if o.ConfigJobCount != nil {
		toSerialize["ConfigJobCount"] = o.ConfigJobCount
	}
	if o.ConsistencyCheckerApp != nil {
		toSerialize["ConsistencyCheckerApp"] = o.ConsistencyCheckerApp
	}
	if o.ContractCount != nil {
		toSerialize["ContractCount"] = o.ContractCount
	}
	if o.DnsCount != nil {
		toSerialize["DnsCount"] = o.DnsCount
	}
	if o.EigrpCount != nil {
		toSerialize["EigrpCount"] = o.EigrpCount
	}
	if o.EpgCount != nil {
		toSerialize["EpgCount"] = o.EpgCount
	}
	if o.FabricModuleCount != nil {
		toSerialize["FabricModuleCount"] = o.FabricModuleCount
	}
	if o.FabricSetuppCount != nil {
		toSerialize["FabricSetuppCount"] = o.FabricSetuppCount
	}
	if o.FcoeNportCount != nil {
		toSerialize["FcoeNportCount"] = o.FcoeNportCount
	}
	if o.FcoeNportDomCount != nil {
		toSerialize["FcoeNportDomCount"] = o.FcoeNportDomCount
	}
	if o.FcoeNportVlanCount != nil {
		toSerialize["FcoeNportVlanCount"] = o.FcoeNportVlanCount
	}
	if o.FcoeNportVsanCount != nil {
		toSerialize["FcoeNportVsanCount"] = o.FcoeNportVsanCount
	}
	if o.FvSlaDefCount != nil {
		toSerialize["FvSlaDefCount"] = o.FvSlaDefCount
	}
	if o.HsrpCount != nil {
		toSerialize["HsrpCount"] = o.HsrpCount
	}
	if o.IbgpCount != nil {
		toSerialize["IbgpCount"] = o.IbgpCount
	}
	if o.IgmpAccessListCount != nil {
		toSerialize["IgmpAccessListCount"] = o.IgmpAccessListCount
	}
	if o.IgmpSnoop != nil {
		toSerialize["IgmpSnoop"] = o.IgmpSnoop
	}
	if o.IpEpgCount != nil {
		toSerialize["IpEpgCount"] = o.IpEpgCount
	}
	if o.IsBgpRouteReflectorsFeatureUsed != nil {
		toSerialize["IsBgpRouteReflectorsFeatureUsed"] = o.IsBgpRouteReflectorsFeatureUsed
	}
	if o.IsBridgeDomainsFeatureUsed != nil {
		toSerialize["IsBridgeDomainsFeatureUsed"] = o.IsBridgeDomainsFeatureUsed
	}
	if o.IsCommonLocalUserName != nil {
		toSerialize["IsCommonLocalUserName"] = o.IsCommonLocalUserName
	}
	if o.IsContractsFeatureUsed != nil {
		toSerialize["IsContractsFeatureUsed"] = o.IsContractsFeatureUsed
	}
	if o.IsEpgFeatureUsed != nil {
		toSerialize["IsEpgFeatureUsed"] = o.IsEpgFeatureUsed
	}
	if o.IsFiltersFeatureUsed != nil {
		toSerialize["IsFiltersFeatureUsed"] = o.IsFiltersFeatureUsed
	}
	if o.IsHttpConfigured != nil {
		toSerialize["IsHttpConfigured"] = o.IsHttpConfigured
	}
	if o.IsHttpsConfigured != nil {
		toSerialize["IsHttpsConfigured"] = o.IsHttpsConfigured
	}
	if o.IsNtpFeatureUsed != nil {
		toSerialize["IsNtpFeatureUsed"] = o.IsNtpFeatureUsed
	}
	if o.IsPtpFeatureUsed != nil {
		toSerialize["IsPtpFeatureUsed"] = o.IsPtpFeatureUsed
	}
	if o.IsSynceFeatureUsed != nil {
		toSerialize["IsSynceFeatureUsed"] = o.IsSynceFeatureUsed
	}
	if o.IsTechSupportCollected != nil {
		toSerialize["IsTechSupportCollected"] = o.IsTechSupportCollected
	}
	if o.IsTenantsFeatureUsed != nil {
		toSerialize["IsTenantsFeatureUsed"] = o.IsTenantsFeatureUsed
	}
	if o.IsVrfsFeatureUsed != nil {
		toSerialize["IsVrfsFeatureUsed"] = o.IsVrfsFeatureUsed
	}
	if o.IsisCount != nil {
		toSerialize["IsisCount"] = o.IsisCount
	}
	if o.L2Multicast != nil {
		toSerialize["L2Multicast"] = o.L2Multicast
	}
	if o.LeafCount != nil {
		toSerialize["LeafCount"] = o.LeafCount
	}
	if o.LocalUsernameCount != nil {
		toSerialize["LocalUsernameCount"] = o.LocalUsernameCount
	}
	if o.LoginBlockDuration != nil {
		toSerialize["LoginBlockDuration"] = o.LoginBlockDuration
	}
	if o.LoginMaxFailedAttempts != nil {
		toSerialize["LoginMaxFailedAttempts"] = o.LoginMaxFailedAttempts
	}
	if o.LoginMaxFailedAttemptsWindow != nil {
		toSerialize["LoginMaxFailedAttemptsWindow"] = o.LoginMaxFailedAttemptsWindow
	}
	if o.MaintenanceModeCount != nil {
		toSerialize["MaintenanceModeCount"] = o.MaintenanceModeCount
	}
	if o.ManagementOverV6Count != nil {
		toSerialize["ManagementOverV6Count"] = o.ManagementOverV6Count
	}
	if o.MicrosoftUsegVmmEpPdCount != nil {
		toSerialize["MicrosoftUsegVmmEpPdCount"] = o.MicrosoftUsegVmmEpPdCount
	}
	if o.NetFlowCount != nil {
		toSerialize["NetFlowCount"] = o.NetFlowCount
	}
	if o.Nir != nil {
		toSerialize["Nir"] = o.Nir
	}
	if o.OpenStack != nil {
		toSerialize["OpenStack"] = o.OpenStack
	}
	if o.OpflexKubernetesCount != nil {
		toSerialize["OpflexKubernetesCount"] = o.OpflexKubernetesCount
	}
	if o.OspfCount != nil {
		toSerialize["OspfCount"] = o.OspfCount
	}
	if o.PasswordHistoryCount != nil {
		toSerialize["PasswordHistoryCount"] = o.PasswordHistoryCount
	}
	if o.PasswordStrengthCheck != nil {
		toSerialize["PasswordStrengthCheck"] = o.PasswordStrengthCheck
	}
	if o.PasswordStrengthProfileCount != nil {
		toSerialize["PasswordStrengthProfileCount"] = o.PasswordStrengthProfileCount
	}
	if o.PoeCount != nil {
		toSerialize["PoeCount"] = o.PoeCount
	}
	if o.PortSecurityCount != nil {
		toSerialize["PortSecurityCount"] = o.PortSecurityCount
	}
	if o.QinVniTunnelCount != nil {
		toSerialize["QinVniTunnelCount"] = o.QinVniTunnelCount
	}
	if o.QosCongCount != nil {
		toSerialize["QosCongCount"] = o.QosCongCount
	}
	if o.QosPfcPolCount != nil {
		toSerialize["QosPfcPolCount"] = o.QosPfcPolCount
	}
	if o.RealmCount != nil {
		toSerialize["RealmCount"] = o.RealmCount
	}
	if o.RecordType != nil {
		toSerialize["RecordType"] = o.RecordType
	}
	if o.RecordVersion != nil {
		toSerialize["RecordVersion"] = o.RecordVersion
	}
	if o.RemoteLeafCount != nil {
		toSerialize["RemoteLeafCount"] = o.RemoteLeafCount
	}
	if o.ScvmmCount != nil {
		toSerialize["ScvmmCount"] = o.ScvmmCount
	}
	if o.SharedL3OutCount != nil {
		toSerialize["SharedL3OutCount"] = o.SharedL3OutCount
	}
	if o.SiteName != nil {
		toSerialize["SiteName"] = o.SiteName
	}
	if o.SmartCallHome != nil {
		toSerialize["SmartCallHome"] = o.SmartCallHome
	}
	if o.SmartLicense.IsSet() {
		toSerialize["SmartLicense"] = o.SmartLicense.Get()
	}
	if o.SnapshotCount != nil {
		toSerialize["SnapshotCount"] = o.SnapshotCount
	}
	if o.Snmp != nil {
		toSerialize["Snmp"] = o.Snmp
	}
	if o.SnmpCommunityAccessCount != nil {
		toSerialize["SnmpCommunityAccessCount"] = o.SnmpCommunityAccessCount
	}
	if o.SnmpGroupCount != nil {
		toSerialize["SnmpGroupCount"] = o.SnmpGroupCount
	}
	if o.SnmpTrapCount != nil {
		toSerialize["SnmpTrapCount"] = o.SnmpTrapCount
	}
	if o.SnmpV3Count != nil {
		toSerialize["SnmpV3Count"] = o.SnmpV3Count
	}
	if o.SpanCount != nil {
		toSerialize["SpanCount"] = o.SpanCount
	}
	if o.SpanDstCount != nil {
		toSerialize["SpanDstCount"] = o.SpanDstCount
	}
	if o.SpanSrcCount != nil {
		toSerialize["SpanSrcCount"] = o.SpanSrcCount
	}
	if o.SpineCount != nil {
		toSerialize["SpineCount"] = o.SpineCount
	}
	if o.SshOverV6Count != nil {
		toSerialize["SshOverV6Count"] = o.SshOverV6Count
	}
	if o.SshV2Count != nil {
		toSerialize["SshV2Count"] = o.SshV2Count
	}
	if o.SupervisorModuleCount != nil {
		toSerialize["SupervisorModuleCount"] = o.SupervisorModuleCount
	}
	if o.SyslogGroupCount != nil {
		toSerialize["SyslogGroupCount"] = o.SyslogGroupCount
	}
	if o.SyslogOverV6Count != nil {
		toSerialize["SyslogOverV6Count"] = o.SyslogOverV6Count
	}
	if o.SystemControllerCount != nil {
		toSerialize["SystemControllerCount"] = o.SystemControllerCount
	}
	if o.TacacsGroupCount != nil {
		toSerialize["TacacsGroupCount"] = o.TacacsGroupCount
	}
	if o.TenantCount != nil {
		toSerialize["TenantCount"] = o.TenantCount
	}
	if o.TierTwoLeafCount != nil {
		toSerialize["TierTwoLeafCount"] = o.TierTwoLeafCount
	}
	if o.Twamp != nil {
		toSerialize["Twamp"] = o.Twamp
	}
	if o.Useg != nil {
		toSerialize["Useg"] = o.Useg
	}
	if o.VmWareVdsCount != nil {
		toSerialize["VmWareVdsCount"] = o.VmWareVdsCount
	}
	if o.VmmCtrlrpCount != nil {
		toSerialize["VmmCtrlrpCount"] = o.VmmCtrlrpCount
	}
	if o.VmmDompCount != nil {
		toSerialize["VmmDompCount"] = o.VmmDompCount
	}
	if o.VmmEpPdCount != nil {
		toSerialize["VmmEpPdCount"] = o.VmmEpPdCount
	}
	if o.VnsmDevCount != nil {
		toSerialize["VnsmDevCount"] = o.VnsmDevCount
	}
	if o.VpodCount != nil {
		toSerialize["VpodCount"] = o.VpodCount
	}
	if o.WebtokenTimeoutSeconds != nil {
		toSerialize["WebtokenTimeoutSeconds"] = o.WebtokenTimeoutSeconds
	}
	if o.RegisteredDevice != nil {
		toSerialize["RegisteredDevice"] = o.RegisteredDevice
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *NiatelemetryNiaFeatureUsage) UnmarshalJSON(bytes []byte) (err error) {
	type NiatelemetryNiaFeatureUsageWithoutEmbeddedStruct struct {
		// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.
		ClassId string `json:"ClassId"`
		// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
		ObjectType string `json:"ObjectType"`
		// Returns the total number of AAA Ldap Providers.
		AaaLdapProviderCount *int64 `json:"AaaLdapProviderCount,omitempty"`
		// Returns the total number of AAA Radius Providers.
		AaaRadiusProviderCount *int64 `json:"AaaRadiusProviderCount,omitempty"`
		// Returns the total number of AAA Tacacs Providers.
		AaaTacacsProviderCount *int64 `json:"AaaTacacsProviderCount,omitempty"`
		// Number of APIC controllers. This determines the value of controllers for the fabric.
		ApicCount *int64 `json:"ApicCount,omitempty"`
		// Returns if telnet is enabled on APIC.
		ApicIsTelnetEnabled *bool `json:"ApicIsTelnetEnabled,omitempty"`
		// Count of NTP servers configured on APIC.
		ApicNtpCount *int64 `json:"ApicNtpCount,omitempty"`
		// Number of SNMP communities configured on APIC.
		ApicSnmpCommunityCount *int64 `json:"ApicSnmpCommunityCount,omitempty"`
		// Number of logging groups configured on APIC.
		ApicSysLogGrpCount *int64 `json:"ApicSysLogGrpCount,omitempty"`
		// Number of logging sources configured on APIC.
		ApicSysLogSrcCount *int64 `json:"ApicSysLogSrcCount,omitempty"`
		// ACI APPs feature usage scale.
		AppCenterCount *int64 `json:"AppCenterCount,omitempty"`
		// AVE feature usage. This determines if ACI virtual edge feature is enabled or disabled.
		Ave *string `json:"Ave,omitempty"`
		// Number of BDs. This determines the total number of Broadcast Domains across the fabric.
		BdCount *int64 `json:"BdCount,omitempty"`
		// Number of call home smart monitoring policies on the fabric.
		CallhomeSmartGroupCount *int64 `json:"CallhomeSmartGroupCount,omitempty"`
		// Number of Cloudsec SA peers.
		CloudSecPeerCount *int64 `json:"CloudSecPeerCount,omitempty"`
		// Number of compute hypervisors on the fabric.
		CompHvCount *int64 `json:"CompHvCount,omitempty"`
		// Number of system backup configure export policies on the fabric.
		ConfigExportpCount *int64 `json:"ConfigExportpCount,omitempty"`
		// Number of system backup configure jobs on the fabric.
		ConfigJobCount *int64 `json:"ConfigJobCount,omitempty"`
		// Consistency checker application usage. This determines if the fabric has Consistency checker application installed.
		ConsistencyCheckerApp *string `json:"ConsistencyCheckerApp,omitempty"`
		// Number of contracts. This determines the total number of Contracts configured across the fabric.
		ContractCount *int64 `json:"ContractCount,omitempty"`
		// DNS feature usage. This determines the total number of DNS configurations across the fabric.
		DnsCount *int64 `json:"DnsCount,omitempty"`
		// Eigrp feature usage. This determines the total number of EIGRP sessions across the fabric.
		EigrpCount *int64 `json:"EigrpCount,omitempty"`
		// Number of End Point Groups. This determines the total number of End Point Groups across the fabric.
		EpgCount *int64 `json:"EpgCount,omitempty"`
		// Returns the total number of fabric module slots.
		FabricModuleCount *int64 `json:"FabricModuleCount,omitempty"`
		// Number of Multi-Pods per fabric.
		FabricSetuppCount *int64 `json:"FabricSetuppCount,omitempty"`
		// Total number of FCoE N-Port for DOM, VSAn, and VLAN.
		FcoeNportCount *int64 `json:"FcoeNportCount,omitempty"`
		// Number of FCoE N-Port DOM.
		FcoeNportDomCount *int64 `json:"FcoeNportDomCount,omitempty"`
		// Number of FCoE N-Port VLAN.
		FcoeNportVlanCount *int64 `json:"FcoeNportVlanCount,omitempty"`
		// Number of FCoE N-Port VSAN.
		FcoeNportVsanCount *int64 `json:"FcoeNportVsanCount,omitempty"`
		// Number of Internet Protocol Service Level Agreements Monitoring policy objects for object tracking.
		FvSlaDefCount *int64 `json:"FvSlaDefCount,omitempty"`
		// Hsrp feature usage. This determines the total number of HSRP sessions across the fabric.
		HsrpCount *int64 `json:"HsrpCount,omitempty"`
		// Ibgp feature usage. This determines the total number of BGP sessions across the fabric.
		IbgpCount *int64 `json:"IbgpCount,omitempty"`
		// IGMP Access List feature usage. This determines the total number of IGMP access lists configured across the fabric.
		IgmpAccessListCount *int64 `json:"IgmpAccessListCount,omitempty"`
		// IGMP Snooping feature usage. This determines if this feature is enabled or disabled.
		IgmpSnoop *string `json:"IgmpSnoop,omitempty"`
		// Number of IP based End Point Groups. This determines the total number of IP End Point Groups across the fabric.
		IpEpgCount *int64 `json:"IpEpgCount,omitempty"`
		// BGP route reflector usage on APIC.
		IsBgpRouteReflectorsFeatureUsed *bool `json:"IsBgpRouteReflectorsFeatureUsed,omitempty"`
		// Brodge domains feature usage on APIC controller.
		IsBridgeDomainsFeatureUsed *bool `json:"IsBridgeDomainsFeatureUsed,omitempty"`
		// Returns value of isCommonLocalUserName field.
		IsCommonLocalUserName *bool `json:"IsCommonLocalUserName,omitempty"`
		// Contracts feature usage on APIC controller.
		IsContractsFeatureUsed *bool `json:"IsContractsFeatureUsed,omitempty"`
		// EPG feature usage on APIC controller.
		IsEpgFeatureUsed *bool `json:"IsEpgFeatureUsed,omitempty"`
		// Filters feature usage on APIC.
		IsFiltersFeatureUsed *bool `json:"IsFiltersFeatureUsed,omitempty"`
		// Returns if HTTP is configured.
		IsHttpConfigured *bool `json:"IsHttpConfigured,omitempty"`
		// Returns if HTTPS is configured.
		IsHttpsConfigured *bool `json:"IsHttpsConfigured,omitempty"`
		// NTP feature usage on APIC controller.
		IsNtpFeatureUsed *bool `json:"IsNtpFeatureUsed,omitempty"`
		// Ptp feature usage on APIC.
		IsPtpFeatureUsed *bool `json:"IsPtpFeatureUsed,omitempty"`
		// Synce feature usage on APIC.
		IsSynceFeatureUsed *bool `json:"IsSynceFeatureUsed,omitempty"`
		// Status of techsupport collection.
		IsTechSupportCollected *string `json:"IsTechSupportCollected,omitempty"`
		// Tenants feature usage on APIC.
		IsTenantsFeatureUsed *bool `json:"IsTenantsFeatureUsed,omitempty"`
		// VRF feature usage on APIC controller.
		IsVrfsFeatureUsed *bool `json:"IsVrfsFeatureUsed,omitempty"`
		// Isis feature usage. This determines the total number of ISIS sessions across the fabric.
		IsisCount *int64 `json:"IsisCount,omitempty"`
		// L2Multicast feature usage. This determines if this Layer 2 Multicast feature is being enabled / disabled on the fabric.
		L2Multicast *string `json:"L2Multicast,omitempty"`
		// Number of Leafs. This determines the total number of Leaf switches in the fabric.
		LeafCount *int64 `json:"LeafCount,omitempty"`
		// Returns count of local users.
		LocalUsernameCount *int64 `json:"LocalUsernameCount,omitempty"`
		// Returns login block duration value.
		LoginBlockDuration *int64 `json:"LoginBlockDuration,omitempty"`
		// Returns the maximum failed attempts on login.
		LoginMaxFailedAttempts *int64 `json:"LoginMaxFailedAttempts,omitempty"`
		// Returns the maximum failed attempt windows on login.
		LoginMaxFailedAttemptsWindow *int64 `json:"LoginMaxFailedAttemptsWindow,omitempty"`
		// Maintenance Mode feature usage. This determines the number of switches that are currently in maintenance mode.
		MaintenanceModeCount *int64 `json:"MaintenanceModeCount,omitempty"`
		// Management over IPv6 feature usage. This determines the total number of IPv6 configurtaions in the fabric.
		ManagementOverV6Count *int64 `json:"ManagementOverV6Count,omitempty"`
		// Number of Microsoft microsegmentation VmmEpPD objects. Ensures that Microsoft was configured.
		MicrosoftUsegVmmEpPdCount *int64 `json:"MicrosoftUsegVmmEpPdCount,omitempty"`
		// Number of Netflow monitor policies.
		NetFlowCount *int64 `json:"NetFlowCount,omitempty"`
		// NIR application usage. This determines if the fabric has NIR application installed.
		Nir *string `json:"Nir,omitempty"`
		// Open stack feature usage.
		OpenStack *string `json:"OpenStack,omitempty"`
		// Opflex for Kubernetes feature usage. This determines the total number of VMM sessions of type kubernetes.
		OpflexKubernetesCount *int64 `json:"OpflexKubernetesCount,omitempty"`
		// Ospf feature usage. This determines the total number of OSPF sessions across the fabric.
		OspfCount *int64 `json:"OspfCount,omitempty"`
		// Returns count of passwords.
		PasswordHistoryCount *int64 `json:"PasswordHistoryCount,omitempty"`
		// Returns if the password is strong or not.
		PasswordStrengthCheck *string `json:"PasswordStrengthCheck,omitempty"`
		// Returns the number of password strength profile.
		PasswordStrengthProfileCount *int64 `json:"PasswordStrengthProfileCount,omitempty"`
		// POE feature usage. This determines the total number of POE configurations across the fabric.
		PoeCount *int64 `json:"PoeCount,omitempty"`
		// Number of objects with Port Security enabled. Non-Zero value indicates the object as enabled.
		PortSecurityCount *int64 `json:"PortSecurityCount,omitempty"`
		// QinVniTunnel feature usage. This determines if the qinVniTunnel feature is being used on the fabric and the scale of it.
		QinVniTunnelCount *int64 `json:"QinVniTunnelCount,omitempty"`
		// Number of Quality Of Service congestion class.
		QosCongCount *int64 `json:"QosCongCount,omitempty"`
		// Number of Quality Of Service class.
		QosPfcPolCount *int64 `json:"QosPfcPolCount,omitempty"`
		// Returns the value of count of realms.
		RealmCount *int64 `json:"RealmCount,omitempty"`
		// Type of record DCNM / APIC / SE. This determines the type of platform where inventory was collected.
		RecordType *string `json:"RecordType,omitempty"`
		// Version of record being pushed. This determines what was the API version for data available from the device.
		RecordVersion *string `json:"RecordVersion,omitempty"`
		// Number of remote Leafs. This determines the total number of remote leaf switches in the fabric.
		RemoteLeafCount *int64 `json:"RemoteLeafCount,omitempty"`
		// SCVMM feature usage. This determines the total number of SCVMM configurations in the fabric.
		ScvmmCount *int64 `json:"ScvmmCount,omitempty"`
		// SharedL3Out feature usage. This determines the total number of Shared L3 out configured across the fabric.
		SharedL3OutCount *int64 `json:"SharedL3OutCount,omitempty"`
		// The Site name represents an APIC cluster. Service Engine can onboard multiple APIC clusters / sites. There will be a feature usage object per site in Multi site scenario. In multi-site scenario the site name is available in all the requests being made.
		SiteName *string `json:"SiteName,omitempty"`
		// Smart callhome feature usage. This determines if this feature is being enabled or disabled.
		SmartCallHome *string                          `json:"SmartCallHome,omitempty"`
		SmartLicense  NullableNiatelemetrySmartLicense `json:"SmartLicense,omitempty"`
		// Returns count of snapshots.
		SnapshotCount *int64 `json:"SnapshotCount,omitempty"`
		// SNMP feature usage. This determines if this feature is enabled or disabled.
		Snmp *string `json:"Snmp,omitempty"`
		// Returns count of SNMP Community Access.
		SnmpCommunityAccessCount *int64 `json:"SnmpCommunityAccessCount,omitempty"`
		// Number of SNMP monitoring policies on the fabric.
		SnmpGroupCount *int64 `json:"SnmpGroupCount,omitempty"`
		// Returns count of SNMP trap.
		SnmpTrapCount *int64 `json:"SnmpTrapCount,omitempty"`
		// Returns count of SNMP V3 on the fabric.
		SnmpV3Count *int64 `json:"SnmpV3Count,omitempty"`
		// Number of Span Sources and Destinations.
		SpanCount *int64 `json:"SpanCount,omitempty"`
		// Number of Span Destinations with valid state.
		SpanDstCount *int64 `json:"SpanDstCount,omitempty"`
		// Number of Span Sources with valid state.
		SpanSrcCount *int64 `json:"SpanSrcCount,omitempty"`
		// Number of Spines. This determines the total number of spine switches in the fabric.
		SpineCount *int64 `json:"SpineCount,omitempty"`
		// Ssh over IPv6 feature usage. This determines the total number of IPv6 configurtaions in the fabric.
		SshOverV6Count *int64 `json:"SshOverV6Count,omitempty"`
		// Returns count of ssh V2 on the fabric.
		SshV2Count *int64 `json:"SshV2Count,omitempty"`
		// Returns the total number of supervisor module slots.
		SupervisorModuleCount *int64 `json:"SupervisorModuleCount,omitempty"`
		// Number of syslog monitoring policies on the fabric.
		SyslogGroupCount *int64 `json:"SyslogGroupCount,omitempty"`
		// Syslog over IPv6 feature usage. This determines the total number of IPv6 configurtaions in the fabric.
		SyslogOverV6Count *int64 `json:"SyslogOverV6Count,omitempty"`
		// Returns the total number of system controller slots.
		SystemControllerCount *int64 `json:"SystemControllerCount,omitempty"`
		// Number of tacacs monitoring policies on the fabric.
		TacacsGroupCount *int64 `json:"TacacsGroupCount,omitempty"`
		// Number of tenants. This determines the total number of tenants configured across the fabric.
		TenantCount *int64 `json:"TenantCount,omitempty"`
		// Number of tier 2 Leafs. This determines the total number of tier 2 Leaf switches in the fabric.
		TierTwoLeafCount *int64 `json:"TierTwoLeafCount,omitempty"`
		// TWAMP feature usage. This determines if this feature is enabled or disabled.
		Twamp *string `json:"Twamp,omitempty"`
		// VMM uSegmentation feature usage. This determines if microsegmentation feature is enabled or disabled.
		Useg *string `json:"Useg,omitempty"`
		// Number of objects with VmWare vCenter 6.5 support. Checks the controller revision value.
		VmWareVdsCount *int64 `json:"VmWareVdsCount,omitempty"`
		// Number of Virtual Machine Monitor controller policy objects for VMware vCenter.
		VmmCtrlrpCount *int64 `json:"VmmCtrlrpCount,omitempty"`
		// Number of Virtual Machine Monitor domain policy model objects for VMware vCenter.
		VmmDompCount *int64 `json:"VmmDompCount,omitempty"`
		// Microsegmentation Distributed Virtual Switch feature usage. Gets the number of objects associated to VMware vCenter.
		VmmEpPdCount *int64 `json:"VmmEpPdCount,omitempty"`
		// Number of objects with L4-L7 Device Package Import enabled. Checks for the vendor and the model.
		VnsmDevCount *int64 `json:"VnsmDevCount,omitempty"`
		// Virtual pod feature usage. This determines the total number of virtual POD configurations in the fabrics.
		VpodCount *int64 `json:"VpodCount,omitempty"`
		// Timeout for web token in seconds.
		WebtokenTimeoutSeconds *int64                               `json:"WebtokenTimeoutSeconds,omitempty"`
		RegisteredDevice       *AssetDeviceRegistrationRelationship `json:"RegisteredDevice,omitempty"`
	}

	varNiatelemetryNiaFeatureUsageWithoutEmbeddedStruct := NiatelemetryNiaFeatureUsageWithoutEmbeddedStruct{}

	err = json.Unmarshal(bytes, &varNiatelemetryNiaFeatureUsageWithoutEmbeddedStruct)
	if err == nil {
		varNiatelemetryNiaFeatureUsage := _NiatelemetryNiaFeatureUsage{}
		varNiatelemetryNiaFeatureUsage.ClassId = varNiatelemetryNiaFeatureUsageWithoutEmbeddedStruct.ClassId
		varNiatelemetryNiaFeatureUsage.ObjectType = varNiatelemetryNiaFeatureUsageWithoutEmbeddedStruct.ObjectType
		varNiatelemetryNiaFeatureUsage.AaaLdapProviderCount = varNiatelemetryNiaFeatureUsageWithoutEmbeddedStruct.AaaLdapProviderCount
		varNiatelemetryNiaFeatureUsage.AaaRadiusProviderCount = varNiatelemetryNiaFeatureUsageWithoutEmbeddedStruct.AaaRadiusProviderCount
		varNiatelemetryNiaFeatureUsage.AaaTacacsProviderCount = varNiatelemetryNiaFeatureUsageWithoutEmbeddedStruct.AaaTacacsProviderCount
		varNiatelemetryNiaFeatureUsage.ApicCount = varNiatelemetryNiaFeatureUsageWithoutEmbeddedStruct.ApicCount
		varNiatelemetryNiaFeatureUsage.ApicIsTelnetEnabled = varNiatelemetryNiaFeatureUsageWithoutEmbeddedStruct.ApicIsTelnetEnabled
		varNiatelemetryNiaFeatureUsage.ApicNtpCount = varNiatelemetryNiaFeatureUsageWithoutEmbeddedStruct.ApicNtpCount
		varNiatelemetryNiaFeatureUsage.ApicSnmpCommunityCount = varNiatelemetryNiaFeatureUsageWithoutEmbeddedStruct.ApicSnmpCommunityCount
		varNiatelemetryNiaFeatureUsage.ApicSysLogGrpCount = varNiatelemetryNiaFeatureUsageWithoutEmbeddedStruct.ApicSysLogGrpCount
		varNiatelemetryNiaFeatureUsage.ApicSysLogSrcCount = varNiatelemetryNiaFeatureUsageWithoutEmbeddedStruct.ApicSysLogSrcCount
		varNiatelemetryNiaFeatureUsage.AppCenterCount = varNiatelemetryNiaFeatureUsageWithoutEmbeddedStruct.AppCenterCount
		varNiatelemetryNiaFeatureUsage.Ave = varNiatelemetryNiaFeatureUsageWithoutEmbeddedStruct.Ave
		varNiatelemetryNiaFeatureUsage.BdCount = varNiatelemetryNiaFeatureUsageWithoutEmbeddedStruct.BdCount
		varNiatelemetryNiaFeatureUsage.CallhomeSmartGroupCount = varNiatelemetryNiaFeatureUsageWithoutEmbeddedStruct.CallhomeSmartGroupCount
		varNiatelemetryNiaFeatureUsage.CloudSecPeerCount = varNiatelemetryNiaFeatureUsageWithoutEmbeddedStruct.CloudSecPeerCount
		varNiatelemetryNiaFeatureUsage.CompHvCount = varNiatelemetryNiaFeatureUsageWithoutEmbeddedStruct.CompHvCount
		varNiatelemetryNiaFeatureUsage.ConfigExportpCount = varNiatelemetryNiaFeatureUsageWithoutEmbeddedStruct.ConfigExportpCount
		varNiatelemetryNiaFeatureUsage.ConfigJobCount = varNiatelemetryNiaFeatureUsageWithoutEmbeddedStruct.ConfigJobCount
		varNiatelemetryNiaFeatureUsage.ConsistencyCheckerApp = varNiatelemetryNiaFeatureUsageWithoutEmbeddedStruct.ConsistencyCheckerApp
		varNiatelemetryNiaFeatureUsage.ContractCount = varNiatelemetryNiaFeatureUsageWithoutEmbeddedStruct.ContractCount
		varNiatelemetryNiaFeatureUsage.DnsCount = varNiatelemetryNiaFeatureUsageWithoutEmbeddedStruct.DnsCount
		varNiatelemetryNiaFeatureUsage.EigrpCount = varNiatelemetryNiaFeatureUsageWithoutEmbeddedStruct.EigrpCount
		varNiatelemetryNiaFeatureUsage.EpgCount = varNiatelemetryNiaFeatureUsageWithoutEmbeddedStruct.EpgCount
		varNiatelemetryNiaFeatureUsage.FabricModuleCount = varNiatelemetryNiaFeatureUsageWithoutEmbeddedStruct.FabricModuleCount
		varNiatelemetryNiaFeatureUsage.FabricSetuppCount = varNiatelemetryNiaFeatureUsageWithoutEmbeddedStruct.FabricSetuppCount
		varNiatelemetryNiaFeatureUsage.FcoeNportCount = varNiatelemetryNiaFeatureUsageWithoutEmbeddedStruct.FcoeNportCount
		varNiatelemetryNiaFeatureUsage.FcoeNportDomCount = varNiatelemetryNiaFeatureUsageWithoutEmbeddedStruct.FcoeNportDomCount
		varNiatelemetryNiaFeatureUsage.FcoeNportVlanCount = varNiatelemetryNiaFeatureUsageWithoutEmbeddedStruct.FcoeNportVlanCount
		varNiatelemetryNiaFeatureUsage.FcoeNportVsanCount = varNiatelemetryNiaFeatureUsageWithoutEmbeddedStruct.FcoeNportVsanCount
		varNiatelemetryNiaFeatureUsage.FvSlaDefCount = varNiatelemetryNiaFeatureUsageWithoutEmbeddedStruct.FvSlaDefCount
		varNiatelemetryNiaFeatureUsage.HsrpCount = varNiatelemetryNiaFeatureUsageWithoutEmbeddedStruct.HsrpCount
		varNiatelemetryNiaFeatureUsage.IbgpCount = varNiatelemetryNiaFeatureUsageWithoutEmbeddedStruct.IbgpCount
		varNiatelemetryNiaFeatureUsage.IgmpAccessListCount = varNiatelemetryNiaFeatureUsageWithoutEmbeddedStruct.IgmpAccessListCount
		varNiatelemetryNiaFeatureUsage.IgmpSnoop = varNiatelemetryNiaFeatureUsageWithoutEmbeddedStruct.IgmpSnoop
		varNiatelemetryNiaFeatureUsage.IpEpgCount = varNiatelemetryNiaFeatureUsageWithoutEmbeddedStruct.IpEpgCount
		varNiatelemetryNiaFeatureUsage.IsBgpRouteReflectorsFeatureUsed = varNiatelemetryNiaFeatureUsageWithoutEmbeddedStruct.IsBgpRouteReflectorsFeatureUsed
		varNiatelemetryNiaFeatureUsage.IsBridgeDomainsFeatureUsed = varNiatelemetryNiaFeatureUsageWithoutEmbeddedStruct.IsBridgeDomainsFeatureUsed
		varNiatelemetryNiaFeatureUsage.IsCommonLocalUserName = varNiatelemetryNiaFeatureUsageWithoutEmbeddedStruct.IsCommonLocalUserName
		varNiatelemetryNiaFeatureUsage.IsContractsFeatureUsed = varNiatelemetryNiaFeatureUsageWithoutEmbeddedStruct.IsContractsFeatureUsed
		varNiatelemetryNiaFeatureUsage.IsEpgFeatureUsed = varNiatelemetryNiaFeatureUsageWithoutEmbeddedStruct.IsEpgFeatureUsed
		varNiatelemetryNiaFeatureUsage.IsFiltersFeatureUsed = varNiatelemetryNiaFeatureUsageWithoutEmbeddedStruct.IsFiltersFeatureUsed
		varNiatelemetryNiaFeatureUsage.IsHttpConfigured = varNiatelemetryNiaFeatureUsageWithoutEmbeddedStruct.IsHttpConfigured
		varNiatelemetryNiaFeatureUsage.IsHttpsConfigured = varNiatelemetryNiaFeatureUsageWithoutEmbeddedStruct.IsHttpsConfigured
		varNiatelemetryNiaFeatureUsage.IsNtpFeatureUsed = varNiatelemetryNiaFeatureUsageWithoutEmbeddedStruct.IsNtpFeatureUsed
		varNiatelemetryNiaFeatureUsage.IsPtpFeatureUsed = varNiatelemetryNiaFeatureUsageWithoutEmbeddedStruct.IsPtpFeatureUsed
		varNiatelemetryNiaFeatureUsage.IsSynceFeatureUsed = varNiatelemetryNiaFeatureUsageWithoutEmbeddedStruct.IsSynceFeatureUsed
		varNiatelemetryNiaFeatureUsage.IsTechSupportCollected = varNiatelemetryNiaFeatureUsageWithoutEmbeddedStruct.IsTechSupportCollected
		varNiatelemetryNiaFeatureUsage.IsTenantsFeatureUsed = varNiatelemetryNiaFeatureUsageWithoutEmbeddedStruct.IsTenantsFeatureUsed
		varNiatelemetryNiaFeatureUsage.IsVrfsFeatureUsed = varNiatelemetryNiaFeatureUsageWithoutEmbeddedStruct.IsVrfsFeatureUsed
		varNiatelemetryNiaFeatureUsage.IsisCount = varNiatelemetryNiaFeatureUsageWithoutEmbeddedStruct.IsisCount
		varNiatelemetryNiaFeatureUsage.L2Multicast = varNiatelemetryNiaFeatureUsageWithoutEmbeddedStruct.L2Multicast
		varNiatelemetryNiaFeatureUsage.LeafCount = varNiatelemetryNiaFeatureUsageWithoutEmbeddedStruct.LeafCount
		varNiatelemetryNiaFeatureUsage.LocalUsernameCount = varNiatelemetryNiaFeatureUsageWithoutEmbeddedStruct.LocalUsernameCount
		varNiatelemetryNiaFeatureUsage.LoginBlockDuration = varNiatelemetryNiaFeatureUsageWithoutEmbeddedStruct.LoginBlockDuration
		varNiatelemetryNiaFeatureUsage.LoginMaxFailedAttempts = varNiatelemetryNiaFeatureUsageWithoutEmbeddedStruct.LoginMaxFailedAttempts
		varNiatelemetryNiaFeatureUsage.LoginMaxFailedAttemptsWindow = varNiatelemetryNiaFeatureUsageWithoutEmbeddedStruct.LoginMaxFailedAttemptsWindow
		varNiatelemetryNiaFeatureUsage.MaintenanceModeCount = varNiatelemetryNiaFeatureUsageWithoutEmbeddedStruct.MaintenanceModeCount
		varNiatelemetryNiaFeatureUsage.ManagementOverV6Count = varNiatelemetryNiaFeatureUsageWithoutEmbeddedStruct.ManagementOverV6Count
		varNiatelemetryNiaFeatureUsage.MicrosoftUsegVmmEpPdCount = varNiatelemetryNiaFeatureUsageWithoutEmbeddedStruct.MicrosoftUsegVmmEpPdCount
		varNiatelemetryNiaFeatureUsage.NetFlowCount = varNiatelemetryNiaFeatureUsageWithoutEmbeddedStruct.NetFlowCount
		varNiatelemetryNiaFeatureUsage.Nir = varNiatelemetryNiaFeatureUsageWithoutEmbeddedStruct.Nir
		varNiatelemetryNiaFeatureUsage.OpenStack = varNiatelemetryNiaFeatureUsageWithoutEmbeddedStruct.OpenStack
		varNiatelemetryNiaFeatureUsage.OpflexKubernetesCount = varNiatelemetryNiaFeatureUsageWithoutEmbeddedStruct.OpflexKubernetesCount
		varNiatelemetryNiaFeatureUsage.OspfCount = varNiatelemetryNiaFeatureUsageWithoutEmbeddedStruct.OspfCount
		varNiatelemetryNiaFeatureUsage.PasswordHistoryCount = varNiatelemetryNiaFeatureUsageWithoutEmbeddedStruct.PasswordHistoryCount
		varNiatelemetryNiaFeatureUsage.PasswordStrengthCheck = varNiatelemetryNiaFeatureUsageWithoutEmbeddedStruct.PasswordStrengthCheck
		varNiatelemetryNiaFeatureUsage.PasswordStrengthProfileCount = varNiatelemetryNiaFeatureUsageWithoutEmbeddedStruct.PasswordStrengthProfileCount
		varNiatelemetryNiaFeatureUsage.PoeCount = varNiatelemetryNiaFeatureUsageWithoutEmbeddedStruct.PoeCount
		varNiatelemetryNiaFeatureUsage.PortSecurityCount = varNiatelemetryNiaFeatureUsageWithoutEmbeddedStruct.PortSecurityCount
		varNiatelemetryNiaFeatureUsage.QinVniTunnelCount = varNiatelemetryNiaFeatureUsageWithoutEmbeddedStruct.QinVniTunnelCount
		varNiatelemetryNiaFeatureUsage.QosCongCount = varNiatelemetryNiaFeatureUsageWithoutEmbeddedStruct.QosCongCount
		varNiatelemetryNiaFeatureUsage.QosPfcPolCount = varNiatelemetryNiaFeatureUsageWithoutEmbeddedStruct.QosPfcPolCount
		varNiatelemetryNiaFeatureUsage.RealmCount = varNiatelemetryNiaFeatureUsageWithoutEmbeddedStruct.RealmCount
		varNiatelemetryNiaFeatureUsage.RecordType = varNiatelemetryNiaFeatureUsageWithoutEmbeddedStruct.RecordType
		varNiatelemetryNiaFeatureUsage.RecordVersion = varNiatelemetryNiaFeatureUsageWithoutEmbeddedStruct.RecordVersion
		varNiatelemetryNiaFeatureUsage.RemoteLeafCount = varNiatelemetryNiaFeatureUsageWithoutEmbeddedStruct.RemoteLeafCount
		varNiatelemetryNiaFeatureUsage.ScvmmCount = varNiatelemetryNiaFeatureUsageWithoutEmbeddedStruct.ScvmmCount
		varNiatelemetryNiaFeatureUsage.SharedL3OutCount = varNiatelemetryNiaFeatureUsageWithoutEmbeddedStruct.SharedL3OutCount
		varNiatelemetryNiaFeatureUsage.SiteName = varNiatelemetryNiaFeatureUsageWithoutEmbeddedStruct.SiteName
		varNiatelemetryNiaFeatureUsage.SmartCallHome = varNiatelemetryNiaFeatureUsageWithoutEmbeddedStruct.SmartCallHome
		varNiatelemetryNiaFeatureUsage.SmartLicense = varNiatelemetryNiaFeatureUsageWithoutEmbeddedStruct.SmartLicense
		varNiatelemetryNiaFeatureUsage.SnapshotCount = varNiatelemetryNiaFeatureUsageWithoutEmbeddedStruct.SnapshotCount
		varNiatelemetryNiaFeatureUsage.Snmp = varNiatelemetryNiaFeatureUsageWithoutEmbeddedStruct.Snmp
		varNiatelemetryNiaFeatureUsage.SnmpCommunityAccessCount = varNiatelemetryNiaFeatureUsageWithoutEmbeddedStruct.SnmpCommunityAccessCount
		varNiatelemetryNiaFeatureUsage.SnmpGroupCount = varNiatelemetryNiaFeatureUsageWithoutEmbeddedStruct.SnmpGroupCount
		varNiatelemetryNiaFeatureUsage.SnmpTrapCount = varNiatelemetryNiaFeatureUsageWithoutEmbeddedStruct.SnmpTrapCount
		varNiatelemetryNiaFeatureUsage.SnmpV3Count = varNiatelemetryNiaFeatureUsageWithoutEmbeddedStruct.SnmpV3Count
		varNiatelemetryNiaFeatureUsage.SpanCount = varNiatelemetryNiaFeatureUsageWithoutEmbeddedStruct.SpanCount
		varNiatelemetryNiaFeatureUsage.SpanDstCount = varNiatelemetryNiaFeatureUsageWithoutEmbeddedStruct.SpanDstCount
		varNiatelemetryNiaFeatureUsage.SpanSrcCount = varNiatelemetryNiaFeatureUsageWithoutEmbeddedStruct.SpanSrcCount
		varNiatelemetryNiaFeatureUsage.SpineCount = varNiatelemetryNiaFeatureUsageWithoutEmbeddedStruct.SpineCount
		varNiatelemetryNiaFeatureUsage.SshOverV6Count = varNiatelemetryNiaFeatureUsageWithoutEmbeddedStruct.SshOverV6Count
		varNiatelemetryNiaFeatureUsage.SshV2Count = varNiatelemetryNiaFeatureUsageWithoutEmbeddedStruct.SshV2Count
		varNiatelemetryNiaFeatureUsage.SupervisorModuleCount = varNiatelemetryNiaFeatureUsageWithoutEmbeddedStruct.SupervisorModuleCount
		varNiatelemetryNiaFeatureUsage.SyslogGroupCount = varNiatelemetryNiaFeatureUsageWithoutEmbeddedStruct.SyslogGroupCount
		varNiatelemetryNiaFeatureUsage.SyslogOverV6Count = varNiatelemetryNiaFeatureUsageWithoutEmbeddedStruct.SyslogOverV6Count
		varNiatelemetryNiaFeatureUsage.SystemControllerCount = varNiatelemetryNiaFeatureUsageWithoutEmbeddedStruct.SystemControllerCount
		varNiatelemetryNiaFeatureUsage.TacacsGroupCount = varNiatelemetryNiaFeatureUsageWithoutEmbeddedStruct.TacacsGroupCount
		varNiatelemetryNiaFeatureUsage.TenantCount = varNiatelemetryNiaFeatureUsageWithoutEmbeddedStruct.TenantCount
		varNiatelemetryNiaFeatureUsage.TierTwoLeafCount = varNiatelemetryNiaFeatureUsageWithoutEmbeddedStruct.TierTwoLeafCount
		varNiatelemetryNiaFeatureUsage.Twamp = varNiatelemetryNiaFeatureUsageWithoutEmbeddedStruct.Twamp
		varNiatelemetryNiaFeatureUsage.Useg = varNiatelemetryNiaFeatureUsageWithoutEmbeddedStruct.Useg
		varNiatelemetryNiaFeatureUsage.VmWareVdsCount = varNiatelemetryNiaFeatureUsageWithoutEmbeddedStruct.VmWareVdsCount
		varNiatelemetryNiaFeatureUsage.VmmCtrlrpCount = varNiatelemetryNiaFeatureUsageWithoutEmbeddedStruct.VmmCtrlrpCount
		varNiatelemetryNiaFeatureUsage.VmmDompCount = varNiatelemetryNiaFeatureUsageWithoutEmbeddedStruct.VmmDompCount
		varNiatelemetryNiaFeatureUsage.VmmEpPdCount = varNiatelemetryNiaFeatureUsageWithoutEmbeddedStruct.VmmEpPdCount
		varNiatelemetryNiaFeatureUsage.VnsmDevCount = varNiatelemetryNiaFeatureUsageWithoutEmbeddedStruct.VnsmDevCount
		varNiatelemetryNiaFeatureUsage.VpodCount = varNiatelemetryNiaFeatureUsageWithoutEmbeddedStruct.VpodCount
		varNiatelemetryNiaFeatureUsage.WebtokenTimeoutSeconds = varNiatelemetryNiaFeatureUsageWithoutEmbeddedStruct.WebtokenTimeoutSeconds
		varNiatelemetryNiaFeatureUsage.RegisteredDevice = varNiatelemetryNiaFeatureUsageWithoutEmbeddedStruct.RegisteredDevice
		*o = NiatelemetryNiaFeatureUsage(varNiatelemetryNiaFeatureUsage)
	} else {
		return err
	}

	varNiatelemetryNiaFeatureUsage := _NiatelemetryNiaFeatureUsage{}

	err = json.Unmarshal(bytes, &varNiatelemetryNiaFeatureUsage)
	if err == nil {
		o.MoBaseMo = varNiatelemetryNiaFeatureUsage.MoBaseMo
	} else {
		return err
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "ClassId")
		delete(additionalProperties, "ObjectType")
		delete(additionalProperties, "AaaLdapProviderCount")
		delete(additionalProperties, "AaaRadiusProviderCount")
		delete(additionalProperties, "AaaTacacsProviderCount")
		delete(additionalProperties, "ApicCount")
		delete(additionalProperties, "ApicIsTelnetEnabled")
		delete(additionalProperties, "ApicNtpCount")
		delete(additionalProperties, "ApicSnmpCommunityCount")
		delete(additionalProperties, "ApicSysLogGrpCount")
		delete(additionalProperties, "ApicSysLogSrcCount")
		delete(additionalProperties, "AppCenterCount")
		delete(additionalProperties, "Ave")
		delete(additionalProperties, "BdCount")
		delete(additionalProperties, "CallhomeSmartGroupCount")
		delete(additionalProperties, "CloudSecPeerCount")
		delete(additionalProperties, "CompHvCount")
		delete(additionalProperties, "ConfigExportpCount")
		delete(additionalProperties, "ConfigJobCount")
		delete(additionalProperties, "ConsistencyCheckerApp")
		delete(additionalProperties, "ContractCount")
		delete(additionalProperties, "DnsCount")
		delete(additionalProperties, "EigrpCount")
		delete(additionalProperties, "EpgCount")
		delete(additionalProperties, "FabricModuleCount")
		delete(additionalProperties, "FabricSetuppCount")
		delete(additionalProperties, "FcoeNportCount")
		delete(additionalProperties, "FcoeNportDomCount")
		delete(additionalProperties, "FcoeNportVlanCount")
		delete(additionalProperties, "FcoeNportVsanCount")
		delete(additionalProperties, "FvSlaDefCount")
		delete(additionalProperties, "HsrpCount")
		delete(additionalProperties, "IbgpCount")
		delete(additionalProperties, "IgmpAccessListCount")
		delete(additionalProperties, "IgmpSnoop")
		delete(additionalProperties, "IpEpgCount")
		delete(additionalProperties, "IsBgpRouteReflectorsFeatureUsed")
		delete(additionalProperties, "IsBridgeDomainsFeatureUsed")
		delete(additionalProperties, "IsCommonLocalUserName")
		delete(additionalProperties, "IsContractsFeatureUsed")
		delete(additionalProperties, "IsEpgFeatureUsed")
		delete(additionalProperties, "IsFiltersFeatureUsed")
		delete(additionalProperties, "IsHttpConfigured")
		delete(additionalProperties, "IsHttpsConfigured")
		delete(additionalProperties, "IsNtpFeatureUsed")
		delete(additionalProperties, "IsPtpFeatureUsed")
		delete(additionalProperties, "IsSynceFeatureUsed")
		delete(additionalProperties, "IsTechSupportCollected")
		delete(additionalProperties, "IsTenantsFeatureUsed")
		delete(additionalProperties, "IsVrfsFeatureUsed")
		delete(additionalProperties, "IsisCount")
		delete(additionalProperties, "L2Multicast")
		delete(additionalProperties, "LeafCount")
		delete(additionalProperties, "LocalUsernameCount")
		delete(additionalProperties, "LoginBlockDuration")
		delete(additionalProperties, "LoginMaxFailedAttempts")
		delete(additionalProperties, "LoginMaxFailedAttemptsWindow")
		delete(additionalProperties, "MaintenanceModeCount")
		delete(additionalProperties, "ManagementOverV6Count")
		delete(additionalProperties, "MicrosoftUsegVmmEpPdCount")
		delete(additionalProperties, "NetFlowCount")
		delete(additionalProperties, "Nir")
		delete(additionalProperties, "OpenStack")
		delete(additionalProperties, "OpflexKubernetesCount")
		delete(additionalProperties, "OspfCount")
		delete(additionalProperties, "PasswordHistoryCount")
		delete(additionalProperties, "PasswordStrengthCheck")
		delete(additionalProperties, "PasswordStrengthProfileCount")
		delete(additionalProperties, "PoeCount")
		delete(additionalProperties, "PortSecurityCount")
		delete(additionalProperties, "QinVniTunnelCount")
		delete(additionalProperties, "QosCongCount")
		delete(additionalProperties, "QosPfcPolCount")
		delete(additionalProperties, "RealmCount")
		delete(additionalProperties, "RecordType")
		delete(additionalProperties, "RecordVersion")
		delete(additionalProperties, "RemoteLeafCount")
		delete(additionalProperties, "ScvmmCount")
		delete(additionalProperties, "SharedL3OutCount")
		delete(additionalProperties, "SiteName")
		delete(additionalProperties, "SmartCallHome")
		delete(additionalProperties, "SmartLicense")
		delete(additionalProperties, "SnapshotCount")
		delete(additionalProperties, "Snmp")
		delete(additionalProperties, "SnmpCommunityAccessCount")
		delete(additionalProperties, "SnmpGroupCount")
		delete(additionalProperties, "SnmpTrapCount")
		delete(additionalProperties, "SnmpV3Count")
		delete(additionalProperties, "SpanCount")
		delete(additionalProperties, "SpanDstCount")
		delete(additionalProperties, "SpanSrcCount")
		delete(additionalProperties, "SpineCount")
		delete(additionalProperties, "SshOverV6Count")
		delete(additionalProperties, "SshV2Count")
		delete(additionalProperties, "SupervisorModuleCount")
		delete(additionalProperties, "SyslogGroupCount")
		delete(additionalProperties, "SyslogOverV6Count")
		delete(additionalProperties, "SystemControllerCount")
		delete(additionalProperties, "TacacsGroupCount")
		delete(additionalProperties, "TenantCount")
		delete(additionalProperties, "TierTwoLeafCount")
		delete(additionalProperties, "Twamp")
		delete(additionalProperties, "Useg")
		delete(additionalProperties, "VmWareVdsCount")
		delete(additionalProperties, "VmmCtrlrpCount")
		delete(additionalProperties, "VmmDompCount")
		delete(additionalProperties, "VmmEpPdCount")
		delete(additionalProperties, "VnsmDevCount")
		delete(additionalProperties, "VpodCount")
		delete(additionalProperties, "WebtokenTimeoutSeconds")
		delete(additionalProperties, "RegisteredDevice")

		// remove fields from embedded structs
		reflectMoBaseMo := reflect.ValueOf(o.MoBaseMo)
		for i := 0; i < reflectMoBaseMo.Type().NumField(); i++ {
			t := reflectMoBaseMo.Type().Field(i)

			if jsonTag := t.Tag.Get("json"); jsonTag != "" {
				fieldName := ""
				if commaIdx := strings.Index(jsonTag, ","); commaIdx > 0 {
					fieldName = jsonTag[:commaIdx]
				} else {
					fieldName = jsonTag
				}
				if fieldName != "AdditionalProperties" {
					delete(additionalProperties, fieldName)
				}
			}
		}

		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableNiatelemetryNiaFeatureUsage struct {
	value *NiatelemetryNiaFeatureUsage
	isSet bool
}

func (v NullableNiatelemetryNiaFeatureUsage) Get() *NiatelemetryNiaFeatureUsage {
	return v.value
}

func (v *NullableNiatelemetryNiaFeatureUsage) Set(val *NiatelemetryNiaFeatureUsage) {
	v.value = val
	v.isSet = true
}

func (v NullableNiatelemetryNiaFeatureUsage) IsSet() bool {
	return v.isSet
}

func (v *NullableNiatelemetryNiaFeatureUsage) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNiatelemetryNiaFeatureUsage(val *NiatelemetryNiaFeatureUsage) *NullableNiatelemetryNiaFeatureUsage {
	return &NullableNiatelemetryNiaFeatureUsage{value: val, isSet: true}
}

func (v NullableNiatelemetryNiaFeatureUsage) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNiatelemetryNiaFeatureUsage) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
