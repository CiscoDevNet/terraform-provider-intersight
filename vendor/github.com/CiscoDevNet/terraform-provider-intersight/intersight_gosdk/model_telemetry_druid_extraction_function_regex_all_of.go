/*
Cisco Intersight

Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations. The Intersight OpenAPI document defines the complete set of properties that are returned in the HTTP response. From that perspective, a client can expect that no additional properties are returned, unless these properties are explicitly defined in the OpenAPI document. However, when a client uses an older version of the Intersight OpenAPI document, the server may send additional properties because the software is more recent than the client. In that case, the client may receive properties that it does not know about. Some generated SDKs perform a strict validation of the HTTP response body against the OpenAPI document.

API version: 1.0.11-15711
Contact: intersight@cisco.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package intersight

import (
	"encoding/json"
)

// TelemetryDruidExtractionFunctionRegexAllOf struct for TelemetryDruidExtractionFunctionRegexAllOf
type TelemetryDruidExtractionFunctionRegexAllOf struct {
	Type string `json:"type"`
	Expr string `json:"expr"`
	// group to extract, default 1. If \"index\" is set, it will control which group from the match to extract. Index zero extracts the string matching the entire pattern.
	Index interface{} `json:"index,omitempty"`
	// If the replaceMissingValue property is true, the extraction function will transform dimension values that do not match the regex pattern to a user-specified String. Default value is false.
	ReplaceMissingValue *bool `json:"replaceMissingValue,omitempty"`
	// The replaceMissingValueWith property sets the String that unmatched dimension values will be replaced with, if replaceMissingValue is true. If replaceMissingValueWith is not specified, unmatched dimension values will be replaced with nulls.
	ReplaceMissingValueWith *string `json:"replaceMissingValueWith,omitempty"`
	AdditionalProperties    map[string]interface{}
}

type _TelemetryDruidExtractionFunctionRegexAllOf TelemetryDruidExtractionFunctionRegexAllOf

// NewTelemetryDruidExtractionFunctionRegexAllOf instantiates a new TelemetryDruidExtractionFunctionRegexAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTelemetryDruidExtractionFunctionRegexAllOf(type_ string, expr string) *TelemetryDruidExtractionFunctionRegexAllOf {
	this := TelemetryDruidExtractionFunctionRegexAllOf{}
	this.Type = type_
	this.Expr = expr
	return &this
}

// NewTelemetryDruidExtractionFunctionRegexAllOfWithDefaults instantiates a new TelemetryDruidExtractionFunctionRegexAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTelemetryDruidExtractionFunctionRegexAllOfWithDefaults() *TelemetryDruidExtractionFunctionRegexAllOf {
	this := TelemetryDruidExtractionFunctionRegexAllOf{}
	return &this
}

// GetType returns the Type field value
func (o *TelemetryDruidExtractionFunctionRegexAllOf) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *TelemetryDruidExtractionFunctionRegexAllOf) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *TelemetryDruidExtractionFunctionRegexAllOf) SetType(v string) {
	o.Type = v
}

// GetExpr returns the Expr field value
func (o *TelemetryDruidExtractionFunctionRegexAllOf) GetExpr() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Expr
}

// GetExprOk returns a tuple with the Expr field value
// and a boolean to check if the value has been set.
func (o *TelemetryDruidExtractionFunctionRegexAllOf) GetExprOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Expr, true
}

// SetExpr sets field value
func (o *TelemetryDruidExtractionFunctionRegexAllOf) SetExpr(v string) {
	o.Expr = v
}

// GetIndex returns the Index field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TelemetryDruidExtractionFunctionRegexAllOf) GetIndex() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.Index
}

// GetIndexOk returns a tuple with the Index field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TelemetryDruidExtractionFunctionRegexAllOf) GetIndexOk() (*interface{}, bool) {
	if o == nil || o.Index == nil {
		return nil, false
	}
	return &o.Index, true
}

// HasIndex returns a boolean if a field has been set.
func (o *TelemetryDruidExtractionFunctionRegexAllOf) HasIndex() bool {
	if o != nil && o.Index != nil {
		return true
	}

	return false
}

// SetIndex gets a reference to the given interface{} and assigns it to the Index field.
func (o *TelemetryDruidExtractionFunctionRegexAllOf) SetIndex(v interface{}) {
	o.Index = v
}

// GetReplaceMissingValue returns the ReplaceMissingValue field value if set, zero value otherwise.
func (o *TelemetryDruidExtractionFunctionRegexAllOf) GetReplaceMissingValue() bool {
	if o == nil || o.ReplaceMissingValue == nil {
		var ret bool
		return ret
	}
	return *o.ReplaceMissingValue
}

// GetReplaceMissingValueOk returns a tuple with the ReplaceMissingValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TelemetryDruidExtractionFunctionRegexAllOf) GetReplaceMissingValueOk() (*bool, bool) {
	if o == nil || o.ReplaceMissingValue == nil {
		return nil, false
	}
	return o.ReplaceMissingValue, true
}

// HasReplaceMissingValue returns a boolean if a field has been set.
func (o *TelemetryDruidExtractionFunctionRegexAllOf) HasReplaceMissingValue() bool {
	if o != nil && o.ReplaceMissingValue != nil {
		return true
	}

	return false
}

// SetReplaceMissingValue gets a reference to the given bool and assigns it to the ReplaceMissingValue field.
func (o *TelemetryDruidExtractionFunctionRegexAllOf) SetReplaceMissingValue(v bool) {
	o.ReplaceMissingValue = &v
}

// GetReplaceMissingValueWith returns the ReplaceMissingValueWith field value if set, zero value otherwise.
func (o *TelemetryDruidExtractionFunctionRegexAllOf) GetReplaceMissingValueWith() string {
	if o == nil || o.ReplaceMissingValueWith == nil {
		var ret string
		return ret
	}
	return *o.ReplaceMissingValueWith
}

// GetReplaceMissingValueWithOk returns a tuple with the ReplaceMissingValueWith field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TelemetryDruidExtractionFunctionRegexAllOf) GetReplaceMissingValueWithOk() (*string, bool) {
	if o == nil || o.ReplaceMissingValueWith == nil {
		return nil, false
	}
	return o.ReplaceMissingValueWith, true
}

// HasReplaceMissingValueWith returns a boolean if a field has been set.
func (o *TelemetryDruidExtractionFunctionRegexAllOf) HasReplaceMissingValueWith() bool {
	if o != nil && o.ReplaceMissingValueWith != nil {
		return true
	}

	return false
}

// SetReplaceMissingValueWith gets a reference to the given string and assigns it to the ReplaceMissingValueWith field.
func (o *TelemetryDruidExtractionFunctionRegexAllOf) SetReplaceMissingValueWith(v string) {
	o.ReplaceMissingValueWith = &v
}

func (o TelemetryDruidExtractionFunctionRegexAllOf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["type"] = o.Type
	}
	if true {
		toSerialize["expr"] = o.Expr
	}
	if o.Index != nil {
		toSerialize["index"] = o.Index
	}
	if o.ReplaceMissingValue != nil {
		toSerialize["replaceMissingValue"] = o.ReplaceMissingValue
	}
	if o.ReplaceMissingValueWith != nil {
		toSerialize["replaceMissingValueWith"] = o.ReplaceMissingValueWith
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *TelemetryDruidExtractionFunctionRegexAllOf) UnmarshalJSON(bytes []byte) (err error) {
	varTelemetryDruidExtractionFunctionRegexAllOf := _TelemetryDruidExtractionFunctionRegexAllOf{}

	if err = json.Unmarshal(bytes, &varTelemetryDruidExtractionFunctionRegexAllOf); err == nil {
		*o = TelemetryDruidExtractionFunctionRegexAllOf(varTelemetryDruidExtractionFunctionRegexAllOf)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "type")
		delete(additionalProperties, "expr")
		delete(additionalProperties, "index")
		delete(additionalProperties, "replaceMissingValue")
		delete(additionalProperties, "replaceMissingValueWith")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableTelemetryDruidExtractionFunctionRegexAllOf struct {
	value *TelemetryDruidExtractionFunctionRegexAllOf
	isSet bool
}

func (v NullableTelemetryDruidExtractionFunctionRegexAllOf) Get() *TelemetryDruidExtractionFunctionRegexAllOf {
	return v.value
}

func (v *NullableTelemetryDruidExtractionFunctionRegexAllOf) Set(val *TelemetryDruidExtractionFunctionRegexAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableTelemetryDruidExtractionFunctionRegexAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableTelemetryDruidExtractionFunctionRegexAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTelemetryDruidExtractionFunctionRegexAllOf(val *TelemetryDruidExtractionFunctionRegexAllOf) *NullableTelemetryDruidExtractionFunctionRegexAllOf {
	return &NullableTelemetryDruidExtractionFunctionRegexAllOf{value: val, isSet: true}
}

func (v NullableTelemetryDruidExtractionFunctionRegexAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTelemetryDruidExtractionFunctionRegexAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
