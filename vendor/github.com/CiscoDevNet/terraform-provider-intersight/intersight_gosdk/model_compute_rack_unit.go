/*
Cisco Intersight

Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations. The Intersight OpenAPI document defines the complete set of properties that are returned in the HTTP response. From that perspective, a client can expect that no additional properties are returned, unless these properties are explicitly defined in the OpenAPI document. However, when a client uses an older version of the Intersight OpenAPI document, the server may send additional properties because the software is more recent than the client. In that case, the client may receive properties that it does not know about. Some generated SDKs perform a strict validation of the HTTP response body against the OpenAPI document.

API version: 1.0.11-2024100405
Contact: intersight@cisco.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package intersight

import (
	"encoding/json"
	"fmt"
	"reflect"
	"strings"
)

// checks if the ComputeRackUnit type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ComputeRackUnit{}

// ComputeRackUnit Describes a standalone or FI-attached Rack-mounted server.
type ComputeRackUnit struct {
	ComputePhysical
	// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.
	ClassId string `json:"ClassId"`
	// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
	ObjectType string `json:"ObjectType"`
	// Connectivity Status of RackUnit to Switch - A or B or AB.
	ConnectionStatus *string `json:"ConnectionStatus,omitempty"`
	// RackUnit ID that uniquely identifies the server.
	ServerId *int64 `json:"ServerId,omitempty"`
	// To maintain the Topology workflow run status.
	TopologyScanStatus *string `json:"TopologyScanStatus,omitempty"`
	// An array of relationships to adapterUnit resources.
	Adapters                           []AdapterUnitRelationship                              `json:"Adapters,omitempty"`
	BiosBootmode                       NullableBiosBootModeRelationship                       `json:"BiosBootmode,omitempty"`
	BiosTokenSettings                  NullableBiosTokenSettingsRelationship                  `json:"BiosTokenSettings,omitempty"`
	BiosVfSelectMemoryRasConfiguration NullableBiosVfSelectMemoryRasConfigurationRelationship `json:"BiosVfSelectMemoryRasConfiguration,omitempty"`
	// An array of relationships to biosUnit resources.
	// Deprecated
	Biosunits          []BiosUnitRelationship                   `json:"Biosunits,omitempty"`
	Bmc                NullableManagementControllerRelationship `json:"Bmc,omitempty"`
	Board              NullableComputeBoardRelationship         `json:"Board,omitempty"`
	BootDeviceBootmode NullableBootDeviceBootModeRelationship   `json:"BootDeviceBootmode,omitempty"`
	// An array of relationships to computePersonality resources.
	ComputePersonality []ComputePersonalityRelationship `json:"ComputePersonality,omitempty"`
	// An array of relationships to equipmentFanModule resources.
	Fanmodules []EquipmentFanModuleRelationship `json:"Fanmodules,omitempty"`
	// An array of relationships to inventoryGenericInventoryHolder resources.
	GenericInventoryHolders []InventoryGenericInventoryHolderRelationship `json:"GenericInventoryHolders,omitempty"`
	// An array of relationships to graphicsCard resources.
	GraphicsCards []GraphicsCardRelationship `json:"GraphicsCards,omitempty"`
	// An array of relationships to equipmentHybridDriveSlot resources.
	HybridDriveSlots    []EquipmentHybridDriveSlotRelationship  `json:"HybridDriveSlots,omitempty"`
	InventoryDeviceInfo NullableInventoryDeviceInfoRelationship `json:"InventoryDeviceInfo,omitempty"`
	LocatorLed          NullableEquipmentLocatorLedRelationship `json:"LocatorLed,omitempty"`
	// An array of relationships to memoryArray resources.
	MemoryArrays []MemoryArrayRelationship `json:"MemoryArrays,omitempty"`
	// An array of relationships to pciDevice resources.
	PciDevices []PciDeviceRelationship `json:"PciDevices,omitempty"`
	// An array of relationships to processorUnit resources.
	Processors []ProcessorUnitRelationship `json:"Processors,omitempty"`
	// An array of relationships to equipmentPsu resources.
	Psus              []EquipmentPsuRelationship                     `json:"Psus,omitempty"`
	RackEnclosureSlot NullableEquipmentRackEnclosureSlotRelationship `json:"RackEnclosureSlot,omitempty"`
	RegisteredDevice  NullableAssetDeviceRegistrationRelationship    `json:"RegisteredDevice,omitempty"`
	// An array of relationships to storageSasExpander resources.
	SasExpanders []StorageSasExpanderRelationship `json:"SasExpanders,omitempty"`
	// An array of relationships to storageController resources.
	StorageControllers []StorageControllerRelationship `json:"StorageControllers,omitempty"`
	// An array of relationships to storageEnclosure resources.
	StorageEnclosures []StorageEnclosureRelationship `json:"StorageEnclosures,omitempty"`
	TopSystem         NullableTopSystemRelationship  `json:"TopSystem,omitempty"`
	// An array of relationships to rackUnitPersonality resources.
	UnitPersonality      []RackUnitPersonalityRelationship `json:"UnitPersonality,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ComputeRackUnit ComputeRackUnit

// NewComputeRackUnit instantiates a new ComputeRackUnit object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewComputeRackUnit(classId string, objectType string) *ComputeRackUnit {
	this := ComputeRackUnit{}
	this.ClassId = classId
	this.ObjectType = objectType
	var frontPanelLockState string = "None"
	this.FrontPanelLockState = &frontPanelLockState
	var managementMode string = "IntersightStandalone"
	this.ManagementMode = &managementMode
	return &this
}

// NewComputeRackUnitWithDefaults instantiates a new ComputeRackUnit object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewComputeRackUnitWithDefaults() *ComputeRackUnit {
	this := ComputeRackUnit{}
	var classId string = "compute.RackUnit"
	this.ClassId = classId
	var objectType string = "compute.RackUnit"
	this.ObjectType = objectType
	return &this
}

// GetClassId returns the ClassId field value
func (o *ComputeRackUnit) GetClassId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ClassId
}

// GetClassIdOk returns a tuple with the ClassId field value
// and a boolean to check if the value has been set.
func (o *ComputeRackUnit) GetClassIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ClassId, true
}

// SetClassId sets field value
func (o *ComputeRackUnit) SetClassId(v string) {
	o.ClassId = v
}

// GetDefaultClassId returns the default value "compute.RackUnit" of the ClassId field.
func (o *ComputeRackUnit) GetDefaultClassId() interface{} {
	return "compute.RackUnit"
}

// GetObjectType returns the ObjectType field value
func (o *ComputeRackUnit) GetObjectType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ObjectType
}

// GetObjectTypeOk returns a tuple with the ObjectType field value
// and a boolean to check if the value has been set.
func (o *ComputeRackUnit) GetObjectTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ObjectType, true
}

// SetObjectType sets field value
func (o *ComputeRackUnit) SetObjectType(v string) {
	o.ObjectType = v
}

// GetDefaultObjectType returns the default value "compute.RackUnit" of the ObjectType field.
func (o *ComputeRackUnit) GetDefaultObjectType() interface{} {
	return "compute.RackUnit"
}

// GetConnectionStatus returns the ConnectionStatus field value if set, zero value otherwise.
func (o *ComputeRackUnit) GetConnectionStatus() string {
	if o == nil || IsNil(o.ConnectionStatus) {
		var ret string
		return ret
	}
	return *o.ConnectionStatus
}

// GetConnectionStatusOk returns a tuple with the ConnectionStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComputeRackUnit) GetConnectionStatusOk() (*string, bool) {
	if o == nil || IsNil(o.ConnectionStatus) {
		return nil, false
	}
	return o.ConnectionStatus, true
}

// HasConnectionStatus returns a boolean if a field has been set.
func (o *ComputeRackUnit) HasConnectionStatus() bool {
	if o != nil && !IsNil(o.ConnectionStatus) {
		return true
	}

	return false
}

// SetConnectionStatus gets a reference to the given string and assigns it to the ConnectionStatus field.
func (o *ComputeRackUnit) SetConnectionStatus(v string) {
	o.ConnectionStatus = &v
}

// GetServerId returns the ServerId field value if set, zero value otherwise.
func (o *ComputeRackUnit) GetServerId() int64 {
	if o == nil || IsNil(o.ServerId) {
		var ret int64
		return ret
	}
	return *o.ServerId
}

// GetServerIdOk returns a tuple with the ServerId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComputeRackUnit) GetServerIdOk() (*int64, bool) {
	if o == nil || IsNil(o.ServerId) {
		return nil, false
	}
	return o.ServerId, true
}

// HasServerId returns a boolean if a field has been set.
func (o *ComputeRackUnit) HasServerId() bool {
	if o != nil && !IsNil(o.ServerId) {
		return true
	}

	return false
}

// SetServerId gets a reference to the given int64 and assigns it to the ServerId field.
func (o *ComputeRackUnit) SetServerId(v int64) {
	o.ServerId = &v
}

// GetTopologyScanStatus returns the TopologyScanStatus field value if set, zero value otherwise.
func (o *ComputeRackUnit) GetTopologyScanStatus() string {
	if o == nil || IsNil(o.TopologyScanStatus) {
		var ret string
		return ret
	}
	return *o.TopologyScanStatus
}

// GetTopologyScanStatusOk returns a tuple with the TopologyScanStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComputeRackUnit) GetTopologyScanStatusOk() (*string, bool) {
	if o == nil || IsNil(o.TopologyScanStatus) {
		return nil, false
	}
	return o.TopologyScanStatus, true
}

// HasTopologyScanStatus returns a boolean if a field has been set.
func (o *ComputeRackUnit) HasTopologyScanStatus() bool {
	if o != nil && !IsNil(o.TopologyScanStatus) {
		return true
	}

	return false
}

// SetTopologyScanStatus gets a reference to the given string and assigns it to the TopologyScanStatus field.
func (o *ComputeRackUnit) SetTopologyScanStatus(v string) {
	o.TopologyScanStatus = &v
}

// GetAdapters returns the Adapters field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ComputeRackUnit) GetAdapters() []AdapterUnitRelationship {
	if o == nil {
		var ret []AdapterUnitRelationship
		return ret
	}
	return o.Adapters
}

// GetAdaptersOk returns a tuple with the Adapters field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ComputeRackUnit) GetAdaptersOk() ([]AdapterUnitRelationship, bool) {
	if o == nil || IsNil(o.Adapters) {
		return nil, false
	}
	return o.Adapters, true
}

// HasAdapters returns a boolean if a field has been set.
func (o *ComputeRackUnit) HasAdapters() bool {
	if o != nil && !IsNil(o.Adapters) {
		return true
	}

	return false
}

// SetAdapters gets a reference to the given []AdapterUnitRelationship and assigns it to the Adapters field.
func (o *ComputeRackUnit) SetAdapters(v []AdapterUnitRelationship) {
	o.Adapters = v
}

// GetBiosBootmode returns the BiosBootmode field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ComputeRackUnit) GetBiosBootmode() BiosBootModeRelationship {
	if o == nil || IsNil(o.BiosBootmode.Get()) {
		var ret BiosBootModeRelationship
		return ret
	}
	return *o.BiosBootmode.Get()
}

// GetBiosBootmodeOk returns a tuple with the BiosBootmode field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ComputeRackUnit) GetBiosBootmodeOk() (*BiosBootModeRelationship, bool) {
	if o == nil {
		return nil, false
	}
	return o.BiosBootmode.Get(), o.BiosBootmode.IsSet()
}

// HasBiosBootmode returns a boolean if a field has been set.
func (o *ComputeRackUnit) HasBiosBootmode() bool {
	if o != nil && o.BiosBootmode.IsSet() {
		return true
	}

	return false
}

// SetBiosBootmode gets a reference to the given NullableBiosBootModeRelationship and assigns it to the BiosBootmode field.
func (o *ComputeRackUnit) SetBiosBootmode(v BiosBootModeRelationship) {
	o.BiosBootmode.Set(&v)
}

// SetBiosBootmodeNil sets the value for BiosBootmode to be an explicit nil
func (o *ComputeRackUnit) SetBiosBootmodeNil() {
	o.BiosBootmode.Set(nil)
}

// UnsetBiosBootmode ensures that no value is present for BiosBootmode, not even an explicit nil
func (o *ComputeRackUnit) UnsetBiosBootmode() {
	o.BiosBootmode.Unset()
}

// GetBiosTokenSettings returns the BiosTokenSettings field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ComputeRackUnit) GetBiosTokenSettings() BiosTokenSettingsRelationship {
	if o == nil || IsNil(o.BiosTokenSettings.Get()) {
		var ret BiosTokenSettingsRelationship
		return ret
	}
	return *o.BiosTokenSettings.Get()
}

// GetBiosTokenSettingsOk returns a tuple with the BiosTokenSettings field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ComputeRackUnit) GetBiosTokenSettingsOk() (*BiosTokenSettingsRelationship, bool) {
	if o == nil {
		return nil, false
	}
	return o.BiosTokenSettings.Get(), o.BiosTokenSettings.IsSet()
}

// HasBiosTokenSettings returns a boolean if a field has been set.
func (o *ComputeRackUnit) HasBiosTokenSettings() bool {
	if o != nil && o.BiosTokenSettings.IsSet() {
		return true
	}

	return false
}

// SetBiosTokenSettings gets a reference to the given NullableBiosTokenSettingsRelationship and assigns it to the BiosTokenSettings field.
func (o *ComputeRackUnit) SetBiosTokenSettings(v BiosTokenSettingsRelationship) {
	o.BiosTokenSettings.Set(&v)
}

// SetBiosTokenSettingsNil sets the value for BiosTokenSettings to be an explicit nil
func (o *ComputeRackUnit) SetBiosTokenSettingsNil() {
	o.BiosTokenSettings.Set(nil)
}

// UnsetBiosTokenSettings ensures that no value is present for BiosTokenSettings, not even an explicit nil
func (o *ComputeRackUnit) UnsetBiosTokenSettings() {
	o.BiosTokenSettings.Unset()
}

// GetBiosVfSelectMemoryRasConfiguration returns the BiosVfSelectMemoryRasConfiguration field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ComputeRackUnit) GetBiosVfSelectMemoryRasConfiguration() BiosVfSelectMemoryRasConfigurationRelationship {
	if o == nil || IsNil(o.BiosVfSelectMemoryRasConfiguration.Get()) {
		var ret BiosVfSelectMemoryRasConfigurationRelationship
		return ret
	}
	return *o.BiosVfSelectMemoryRasConfiguration.Get()
}

// GetBiosVfSelectMemoryRasConfigurationOk returns a tuple with the BiosVfSelectMemoryRasConfiguration field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ComputeRackUnit) GetBiosVfSelectMemoryRasConfigurationOk() (*BiosVfSelectMemoryRasConfigurationRelationship, bool) {
	if o == nil {
		return nil, false
	}
	return o.BiosVfSelectMemoryRasConfiguration.Get(), o.BiosVfSelectMemoryRasConfiguration.IsSet()
}

// HasBiosVfSelectMemoryRasConfiguration returns a boolean if a field has been set.
func (o *ComputeRackUnit) HasBiosVfSelectMemoryRasConfiguration() bool {
	if o != nil && o.BiosVfSelectMemoryRasConfiguration.IsSet() {
		return true
	}

	return false
}

// SetBiosVfSelectMemoryRasConfiguration gets a reference to the given NullableBiosVfSelectMemoryRasConfigurationRelationship and assigns it to the BiosVfSelectMemoryRasConfiguration field.
func (o *ComputeRackUnit) SetBiosVfSelectMemoryRasConfiguration(v BiosVfSelectMemoryRasConfigurationRelationship) {
	o.BiosVfSelectMemoryRasConfiguration.Set(&v)
}

// SetBiosVfSelectMemoryRasConfigurationNil sets the value for BiosVfSelectMemoryRasConfiguration to be an explicit nil
func (o *ComputeRackUnit) SetBiosVfSelectMemoryRasConfigurationNil() {
	o.BiosVfSelectMemoryRasConfiguration.Set(nil)
}

// UnsetBiosVfSelectMemoryRasConfiguration ensures that no value is present for BiosVfSelectMemoryRasConfiguration, not even an explicit nil
func (o *ComputeRackUnit) UnsetBiosVfSelectMemoryRasConfiguration() {
	o.BiosVfSelectMemoryRasConfiguration.Unset()
}

// GetBiosunits returns the Biosunits field value if set, zero value otherwise (both if not set or set to explicit null).
// Deprecated
func (o *ComputeRackUnit) GetBiosunits() []BiosUnitRelationship {
	if o == nil {
		var ret []BiosUnitRelationship
		return ret
	}
	return o.Biosunits
}

// GetBiosunitsOk returns a tuple with the Biosunits field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
// Deprecated
func (o *ComputeRackUnit) GetBiosunitsOk() ([]BiosUnitRelationship, bool) {
	if o == nil || IsNil(o.Biosunits) {
		return nil, false
	}
	return o.Biosunits, true
}

// HasBiosunits returns a boolean if a field has been set.
func (o *ComputeRackUnit) HasBiosunits() bool {
	if o != nil && !IsNil(o.Biosunits) {
		return true
	}

	return false
}

// SetBiosunits gets a reference to the given []BiosUnitRelationship and assigns it to the Biosunits field.
// Deprecated
func (o *ComputeRackUnit) SetBiosunits(v []BiosUnitRelationship) {
	o.Biosunits = v
}

// GetBmc returns the Bmc field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ComputeRackUnit) GetBmc() ManagementControllerRelationship {
	if o == nil || IsNil(o.Bmc.Get()) {
		var ret ManagementControllerRelationship
		return ret
	}
	return *o.Bmc.Get()
}

// GetBmcOk returns a tuple with the Bmc field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ComputeRackUnit) GetBmcOk() (*ManagementControllerRelationship, bool) {
	if o == nil {
		return nil, false
	}
	return o.Bmc.Get(), o.Bmc.IsSet()
}

// HasBmc returns a boolean if a field has been set.
func (o *ComputeRackUnit) HasBmc() bool {
	if o != nil && o.Bmc.IsSet() {
		return true
	}

	return false
}

// SetBmc gets a reference to the given NullableManagementControllerRelationship and assigns it to the Bmc field.
func (o *ComputeRackUnit) SetBmc(v ManagementControllerRelationship) {
	o.Bmc.Set(&v)
}

// SetBmcNil sets the value for Bmc to be an explicit nil
func (o *ComputeRackUnit) SetBmcNil() {
	o.Bmc.Set(nil)
}

// UnsetBmc ensures that no value is present for Bmc, not even an explicit nil
func (o *ComputeRackUnit) UnsetBmc() {
	o.Bmc.Unset()
}

// GetBoard returns the Board field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ComputeRackUnit) GetBoard() ComputeBoardRelationship {
	if o == nil || IsNil(o.Board.Get()) {
		var ret ComputeBoardRelationship
		return ret
	}
	return *o.Board.Get()
}

// GetBoardOk returns a tuple with the Board field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ComputeRackUnit) GetBoardOk() (*ComputeBoardRelationship, bool) {
	if o == nil {
		return nil, false
	}
	return o.Board.Get(), o.Board.IsSet()
}

// HasBoard returns a boolean if a field has been set.
func (o *ComputeRackUnit) HasBoard() bool {
	if o != nil && o.Board.IsSet() {
		return true
	}

	return false
}

// SetBoard gets a reference to the given NullableComputeBoardRelationship and assigns it to the Board field.
func (o *ComputeRackUnit) SetBoard(v ComputeBoardRelationship) {
	o.Board.Set(&v)
}

// SetBoardNil sets the value for Board to be an explicit nil
func (o *ComputeRackUnit) SetBoardNil() {
	o.Board.Set(nil)
}

// UnsetBoard ensures that no value is present for Board, not even an explicit nil
func (o *ComputeRackUnit) UnsetBoard() {
	o.Board.Unset()
}

// GetBootDeviceBootmode returns the BootDeviceBootmode field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ComputeRackUnit) GetBootDeviceBootmode() BootDeviceBootModeRelationship {
	if o == nil || IsNil(o.BootDeviceBootmode.Get()) {
		var ret BootDeviceBootModeRelationship
		return ret
	}
	return *o.BootDeviceBootmode.Get()
}

// GetBootDeviceBootmodeOk returns a tuple with the BootDeviceBootmode field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ComputeRackUnit) GetBootDeviceBootmodeOk() (*BootDeviceBootModeRelationship, bool) {
	if o == nil {
		return nil, false
	}
	return o.BootDeviceBootmode.Get(), o.BootDeviceBootmode.IsSet()
}

// HasBootDeviceBootmode returns a boolean if a field has been set.
func (o *ComputeRackUnit) HasBootDeviceBootmode() bool {
	if o != nil && o.BootDeviceBootmode.IsSet() {
		return true
	}

	return false
}

// SetBootDeviceBootmode gets a reference to the given NullableBootDeviceBootModeRelationship and assigns it to the BootDeviceBootmode field.
func (o *ComputeRackUnit) SetBootDeviceBootmode(v BootDeviceBootModeRelationship) {
	o.BootDeviceBootmode.Set(&v)
}

// SetBootDeviceBootmodeNil sets the value for BootDeviceBootmode to be an explicit nil
func (o *ComputeRackUnit) SetBootDeviceBootmodeNil() {
	o.BootDeviceBootmode.Set(nil)
}

// UnsetBootDeviceBootmode ensures that no value is present for BootDeviceBootmode, not even an explicit nil
func (o *ComputeRackUnit) UnsetBootDeviceBootmode() {
	o.BootDeviceBootmode.Unset()
}

// GetComputePersonality returns the ComputePersonality field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ComputeRackUnit) GetComputePersonality() []ComputePersonalityRelationship {
	if o == nil {
		var ret []ComputePersonalityRelationship
		return ret
	}
	return o.ComputePersonality
}

// GetComputePersonalityOk returns a tuple with the ComputePersonality field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ComputeRackUnit) GetComputePersonalityOk() ([]ComputePersonalityRelationship, bool) {
	if o == nil || IsNil(o.ComputePersonality) {
		return nil, false
	}
	return o.ComputePersonality, true
}

// HasComputePersonality returns a boolean if a field has been set.
func (o *ComputeRackUnit) HasComputePersonality() bool {
	if o != nil && !IsNil(o.ComputePersonality) {
		return true
	}

	return false
}

// SetComputePersonality gets a reference to the given []ComputePersonalityRelationship and assigns it to the ComputePersonality field.
func (o *ComputeRackUnit) SetComputePersonality(v []ComputePersonalityRelationship) {
	o.ComputePersonality = v
}

// GetFanmodules returns the Fanmodules field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ComputeRackUnit) GetFanmodules() []EquipmentFanModuleRelationship {
	if o == nil {
		var ret []EquipmentFanModuleRelationship
		return ret
	}
	return o.Fanmodules
}

// GetFanmodulesOk returns a tuple with the Fanmodules field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ComputeRackUnit) GetFanmodulesOk() ([]EquipmentFanModuleRelationship, bool) {
	if o == nil || IsNil(o.Fanmodules) {
		return nil, false
	}
	return o.Fanmodules, true
}

// HasFanmodules returns a boolean if a field has been set.
func (o *ComputeRackUnit) HasFanmodules() bool {
	if o != nil && !IsNil(o.Fanmodules) {
		return true
	}

	return false
}

// SetFanmodules gets a reference to the given []EquipmentFanModuleRelationship and assigns it to the Fanmodules field.
func (o *ComputeRackUnit) SetFanmodules(v []EquipmentFanModuleRelationship) {
	o.Fanmodules = v
}

// GetGenericInventoryHolders returns the GenericInventoryHolders field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ComputeRackUnit) GetGenericInventoryHolders() []InventoryGenericInventoryHolderRelationship {
	if o == nil {
		var ret []InventoryGenericInventoryHolderRelationship
		return ret
	}
	return o.GenericInventoryHolders
}

// GetGenericInventoryHoldersOk returns a tuple with the GenericInventoryHolders field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ComputeRackUnit) GetGenericInventoryHoldersOk() ([]InventoryGenericInventoryHolderRelationship, bool) {
	if o == nil || IsNil(o.GenericInventoryHolders) {
		return nil, false
	}
	return o.GenericInventoryHolders, true
}

// HasGenericInventoryHolders returns a boolean if a field has been set.
func (o *ComputeRackUnit) HasGenericInventoryHolders() bool {
	if o != nil && !IsNil(o.GenericInventoryHolders) {
		return true
	}

	return false
}

// SetGenericInventoryHolders gets a reference to the given []InventoryGenericInventoryHolderRelationship and assigns it to the GenericInventoryHolders field.
func (o *ComputeRackUnit) SetGenericInventoryHolders(v []InventoryGenericInventoryHolderRelationship) {
	o.GenericInventoryHolders = v
}

// GetGraphicsCards returns the GraphicsCards field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ComputeRackUnit) GetGraphicsCards() []GraphicsCardRelationship {
	if o == nil {
		var ret []GraphicsCardRelationship
		return ret
	}
	return o.GraphicsCards
}

// GetGraphicsCardsOk returns a tuple with the GraphicsCards field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ComputeRackUnit) GetGraphicsCardsOk() ([]GraphicsCardRelationship, bool) {
	if o == nil || IsNil(o.GraphicsCards) {
		return nil, false
	}
	return o.GraphicsCards, true
}

// HasGraphicsCards returns a boolean if a field has been set.
func (o *ComputeRackUnit) HasGraphicsCards() bool {
	if o != nil && !IsNil(o.GraphicsCards) {
		return true
	}

	return false
}

// SetGraphicsCards gets a reference to the given []GraphicsCardRelationship and assigns it to the GraphicsCards field.
func (o *ComputeRackUnit) SetGraphicsCards(v []GraphicsCardRelationship) {
	o.GraphicsCards = v
}

// GetHybridDriveSlots returns the HybridDriveSlots field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ComputeRackUnit) GetHybridDriveSlots() []EquipmentHybridDriveSlotRelationship {
	if o == nil {
		var ret []EquipmentHybridDriveSlotRelationship
		return ret
	}
	return o.HybridDriveSlots
}

// GetHybridDriveSlotsOk returns a tuple with the HybridDriveSlots field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ComputeRackUnit) GetHybridDriveSlotsOk() ([]EquipmentHybridDriveSlotRelationship, bool) {
	if o == nil || IsNil(o.HybridDriveSlots) {
		return nil, false
	}
	return o.HybridDriveSlots, true
}

// HasHybridDriveSlots returns a boolean if a field has been set.
func (o *ComputeRackUnit) HasHybridDriveSlots() bool {
	if o != nil && !IsNil(o.HybridDriveSlots) {
		return true
	}

	return false
}

// SetHybridDriveSlots gets a reference to the given []EquipmentHybridDriveSlotRelationship and assigns it to the HybridDriveSlots field.
func (o *ComputeRackUnit) SetHybridDriveSlots(v []EquipmentHybridDriveSlotRelationship) {
	o.HybridDriveSlots = v
}

// GetInventoryDeviceInfo returns the InventoryDeviceInfo field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ComputeRackUnit) GetInventoryDeviceInfo() InventoryDeviceInfoRelationship {
	if o == nil || IsNil(o.InventoryDeviceInfo.Get()) {
		var ret InventoryDeviceInfoRelationship
		return ret
	}
	return *o.InventoryDeviceInfo.Get()
}

// GetInventoryDeviceInfoOk returns a tuple with the InventoryDeviceInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ComputeRackUnit) GetInventoryDeviceInfoOk() (*InventoryDeviceInfoRelationship, bool) {
	if o == nil {
		return nil, false
	}
	return o.InventoryDeviceInfo.Get(), o.InventoryDeviceInfo.IsSet()
}

// HasInventoryDeviceInfo returns a boolean if a field has been set.
func (o *ComputeRackUnit) HasInventoryDeviceInfo() bool {
	if o != nil && o.InventoryDeviceInfo.IsSet() {
		return true
	}

	return false
}

// SetInventoryDeviceInfo gets a reference to the given NullableInventoryDeviceInfoRelationship and assigns it to the InventoryDeviceInfo field.
func (o *ComputeRackUnit) SetInventoryDeviceInfo(v InventoryDeviceInfoRelationship) {
	o.InventoryDeviceInfo.Set(&v)
}

// SetInventoryDeviceInfoNil sets the value for InventoryDeviceInfo to be an explicit nil
func (o *ComputeRackUnit) SetInventoryDeviceInfoNil() {
	o.InventoryDeviceInfo.Set(nil)
}

// UnsetInventoryDeviceInfo ensures that no value is present for InventoryDeviceInfo, not even an explicit nil
func (o *ComputeRackUnit) UnsetInventoryDeviceInfo() {
	o.InventoryDeviceInfo.Unset()
}

// GetLocatorLed returns the LocatorLed field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ComputeRackUnit) GetLocatorLed() EquipmentLocatorLedRelationship {
	if o == nil || IsNil(o.LocatorLed.Get()) {
		var ret EquipmentLocatorLedRelationship
		return ret
	}
	return *o.LocatorLed.Get()
}

// GetLocatorLedOk returns a tuple with the LocatorLed field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ComputeRackUnit) GetLocatorLedOk() (*EquipmentLocatorLedRelationship, bool) {
	if o == nil {
		return nil, false
	}
	return o.LocatorLed.Get(), o.LocatorLed.IsSet()
}

// HasLocatorLed returns a boolean if a field has been set.
func (o *ComputeRackUnit) HasLocatorLed() bool {
	if o != nil && o.LocatorLed.IsSet() {
		return true
	}

	return false
}

// SetLocatorLed gets a reference to the given NullableEquipmentLocatorLedRelationship and assigns it to the LocatorLed field.
func (o *ComputeRackUnit) SetLocatorLed(v EquipmentLocatorLedRelationship) {
	o.LocatorLed.Set(&v)
}

// SetLocatorLedNil sets the value for LocatorLed to be an explicit nil
func (o *ComputeRackUnit) SetLocatorLedNil() {
	o.LocatorLed.Set(nil)
}

// UnsetLocatorLed ensures that no value is present for LocatorLed, not even an explicit nil
func (o *ComputeRackUnit) UnsetLocatorLed() {
	o.LocatorLed.Unset()
}

// GetMemoryArrays returns the MemoryArrays field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ComputeRackUnit) GetMemoryArrays() []MemoryArrayRelationship {
	if o == nil {
		var ret []MemoryArrayRelationship
		return ret
	}
	return o.MemoryArrays
}

// GetMemoryArraysOk returns a tuple with the MemoryArrays field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ComputeRackUnit) GetMemoryArraysOk() ([]MemoryArrayRelationship, bool) {
	if o == nil || IsNil(o.MemoryArrays) {
		return nil, false
	}
	return o.MemoryArrays, true
}

// HasMemoryArrays returns a boolean if a field has been set.
func (o *ComputeRackUnit) HasMemoryArrays() bool {
	if o != nil && !IsNil(o.MemoryArrays) {
		return true
	}

	return false
}

// SetMemoryArrays gets a reference to the given []MemoryArrayRelationship and assigns it to the MemoryArrays field.
func (o *ComputeRackUnit) SetMemoryArrays(v []MemoryArrayRelationship) {
	o.MemoryArrays = v
}

// GetPciDevices returns the PciDevices field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ComputeRackUnit) GetPciDevices() []PciDeviceRelationship {
	if o == nil {
		var ret []PciDeviceRelationship
		return ret
	}
	return o.PciDevices
}

// GetPciDevicesOk returns a tuple with the PciDevices field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ComputeRackUnit) GetPciDevicesOk() ([]PciDeviceRelationship, bool) {
	if o == nil || IsNil(o.PciDevices) {
		return nil, false
	}
	return o.PciDevices, true
}

// HasPciDevices returns a boolean if a field has been set.
func (o *ComputeRackUnit) HasPciDevices() bool {
	if o != nil && !IsNil(o.PciDevices) {
		return true
	}

	return false
}

// SetPciDevices gets a reference to the given []PciDeviceRelationship and assigns it to the PciDevices field.
func (o *ComputeRackUnit) SetPciDevices(v []PciDeviceRelationship) {
	o.PciDevices = v
}

// GetProcessors returns the Processors field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ComputeRackUnit) GetProcessors() []ProcessorUnitRelationship {
	if o == nil {
		var ret []ProcessorUnitRelationship
		return ret
	}
	return o.Processors
}

// GetProcessorsOk returns a tuple with the Processors field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ComputeRackUnit) GetProcessorsOk() ([]ProcessorUnitRelationship, bool) {
	if o == nil || IsNil(o.Processors) {
		return nil, false
	}
	return o.Processors, true
}

// HasProcessors returns a boolean if a field has been set.
func (o *ComputeRackUnit) HasProcessors() bool {
	if o != nil && !IsNil(o.Processors) {
		return true
	}

	return false
}

// SetProcessors gets a reference to the given []ProcessorUnitRelationship and assigns it to the Processors field.
func (o *ComputeRackUnit) SetProcessors(v []ProcessorUnitRelationship) {
	o.Processors = v
}

// GetPsus returns the Psus field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ComputeRackUnit) GetPsus() []EquipmentPsuRelationship {
	if o == nil {
		var ret []EquipmentPsuRelationship
		return ret
	}
	return o.Psus
}

// GetPsusOk returns a tuple with the Psus field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ComputeRackUnit) GetPsusOk() ([]EquipmentPsuRelationship, bool) {
	if o == nil || IsNil(o.Psus) {
		return nil, false
	}
	return o.Psus, true
}

// HasPsus returns a boolean if a field has been set.
func (o *ComputeRackUnit) HasPsus() bool {
	if o != nil && !IsNil(o.Psus) {
		return true
	}

	return false
}

// SetPsus gets a reference to the given []EquipmentPsuRelationship and assigns it to the Psus field.
func (o *ComputeRackUnit) SetPsus(v []EquipmentPsuRelationship) {
	o.Psus = v
}

// GetRackEnclosureSlot returns the RackEnclosureSlot field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ComputeRackUnit) GetRackEnclosureSlot() EquipmentRackEnclosureSlotRelationship {
	if o == nil || IsNil(o.RackEnclosureSlot.Get()) {
		var ret EquipmentRackEnclosureSlotRelationship
		return ret
	}
	return *o.RackEnclosureSlot.Get()
}

// GetRackEnclosureSlotOk returns a tuple with the RackEnclosureSlot field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ComputeRackUnit) GetRackEnclosureSlotOk() (*EquipmentRackEnclosureSlotRelationship, bool) {
	if o == nil {
		return nil, false
	}
	return o.RackEnclosureSlot.Get(), o.RackEnclosureSlot.IsSet()
}

// HasRackEnclosureSlot returns a boolean if a field has been set.
func (o *ComputeRackUnit) HasRackEnclosureSlot() bool {
	if o != nil && o.RackEnclosureSlot.IsSet() {
		return true
	}

	return false
}

// SetRackEnclosureSlot gets a reference to the given NullableEquipmentRackEnclosureSlotRelationship and assigns it to the RackEnclosureSlot field.
func (o *ComputeRackUnit) SetRackEnclosureSlot(v EquipmentRackEnclosureSlotRelationship) {
	o.RackEnclosureSlot.Set(&v)
}

// SetRackEnclosureSlotNil sets the value for RackEnclosureSlot to be an explicit nil
func (o *ComputeRackUnit) SetRackEnclosureSlotNil() {
	o.RackEnclosureSlot.Set(nil)
}

// UnsetRackEnclosureSlot ensures that no value is present for RackEnclosureSlot, not even an explicit nil
func (o *ComputeRackUnit) UnsetRackEnclosureSlot() {
	o.RackEnclosureSlot.Unset()
}

// GetRegisteredDevice returns the RegisteredDevice field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ComputeRackUnit) GetRegisteredDevice() AssetDeviceRegistrationRelationship {
	if o == nil || IsNil(o.RegisteredDevice.Get()) {
		var ret AssetDeviceRegistrationRelationship
		return ret
	}
	return *o.RegisteredDevice.Get()
}

// GetRegisteredDeviceOk returns a tuple with the RegisteredDevice field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ComputeRackUnit) GetRegisteredDeviceOk() (*AssetDeviceRegistrationRelationship, bool) {
	if o == nil {
		return nil, false
	}
	return o.RegisteredDevice.Get(), o.RegisteredDevice.IsSet()
}

// HasRegisteredDevice returns a boolean if a field has been set.
func (o *ComputeRackUnit) HasRegisteredDevice() bool {
	if o != nil && o.RegisteredDevice.IsSet() {
		return true
	}

	return false
}

// SetRegisteredDevice gets a reference to the given NullableAssetDeviceRegistrationRelationship and assigns it to the RegisteredDevice field.
func (o *ComputeRackUnit) SetRegisteredDevice(v AssetDeviceRegistrationRelationship) {
	o.RegisteredDevice.Set(&v)
}

// SetRegisteredDeviceNil sets the value for RegisteredDevice to be an explicit nil
func (o *ComputeRackUnit) SetRegisteredDeviceNil() {
	o.RegisteredDevice.Set(nil)
}

// UnsetRegisteredDevice ensures that no value is present for RegisteredDevice, not even an explicit nil
func (o *ComputeRackUnit) UnsetRegisteredDevice() {
	o.RegisteredDevice.Unset()
}

// GetSasExpanders returns the SasExpanders field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ComputeRackUnit) GetSasExpanders() []StorageSasExpanderRelationship {
	if o == nil {
		var ret []StorageSasExpanderRelationship
		return ret
	}
	return o.SasExpanders
}

// GetSasExpandersOk returns a tuple with the SasExpanders field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ComputeRackUnit) GetSasExpandersOk() ([]StorageSasExpanderRelationship, bool) {
	if o == nil || IsNil(o.SasExpanders) {
		return nil, false
	}
	return o.SasExpanders, true
}

// HasSasExpanders returns a boolean if a field has been set.
func (o *ComputeRackUnit) HasSasExpanders() bool {
	if o != nil && !IsNil(o.SasExpanders) {
		return true
	}

	return false
}

// SetSasExpanders gets a reference to the given []StorageSasExpanderRelationship and assigns it to the SasExpanders field.
func (o *ComputeRackUnit) SetSasExpanders(v []StorageSasExpanderRelationship) {
	o.SasExpanders = v
}

// GetStorageControllers returns the StorageControllers field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ComputeRackUnit) GetStorageControllers() []StorageControllerRelationship {
	if o == nil {
		var ret []StorageControllerRelationship
		return ret
	}
	return o.StorageControllers
}

// GetStorageControllersOk returns a tuple with the StorageControllers field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ComputeRackUnit) GetStorageControllersOk() ([]StorageControllerRelationship, bool) {
	if o == nil || IsNil(o.StorageControllers) {
		return nil, false
	}
	return o.StorageControllers, true
}

// HasStorageControllers returns a boolean if a field has been set.
func (o *ComputeRackUnit) HasStorageControllers() bool {
	if o != nil && !IsNil(o.StorageControllers) {
		return true
	}

	return false
}

// SetStorageControllers gets a reference to the given []StorageControllerRelationship and assigns it to the StorageControllers field.
func (o *ComputeRackUnit) SetStorageControllers(v []StorageControllerRelationship) {
	o.StorageControllers = v
}

// GetStorageEnclosures returns the StorageEnclosures field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ComputeRackUnit) GetStorageEnclosures() []StorageEnclosureRelationship {
	if o == nil {
		var ret []StorageEnclosureRelationship
		return ret
	}
	return o.StorageEnclosures
}

// GetStorageEnclosuresOk returns a tuple with the StorageEnclosures field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ComputeRackUnit) GetStorageEnclosuresOk() ([]StorageEnclosureRelationship, bool) {
	if o == nil || IsNil(o.StorageEnclosures) {
		return nil, false
	}
	return o.StorageEnclosures, true
}

// HasStorageEnclosures returns a boolean if a field has been set.
func (o *ComputeRackUnit) HasStorageEnclosures() bool {
	if o != nil && !IsNil(o.StorageEnclosures) {
		return true
	}

	return false
}

// SetStorageEnclosures gets a reference to the given []StorageEnclosureRelationship and assigns it to the StorageEnclosures field.
func (o *ComputeRackUnit) SetStorageEnclosures(v []StorageEnclosureRelationship) {
	o.StorageEnclosures = v
}

// GetTopSystem returns the TopSystem field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ComputeRackUnit) GetTopSystem() TopSystemRelationship {
	if o == nil || IsNil(o.TopSystem.Get()) {
		var ret TopSystemRelationship
		return ret
	}
	return *o.TopSystem.Get()
}

// GetTopSystemOk returns a tuple with the TopSystem field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ComputeRackUnit) GetTopSystemOk() (*TopSystemRelationship, bool) {
	if o == nil {
		return nil, false
	}
	return o.TopSystem.Get(), o.TopSystem.IsSet()
}

// HasTopSystem returns a boolean if a field has been set.
func (o *ComputeRackUnit) HasTopSystem() bool {
	if o != nil && o.TopSystem.IsSet() {
		return true
	}

	return false
}

// SetTopSystem gets a reference to the given NullableTopSystemRelationship and assigns it to the TopSystem field.
func (o *ComputeRackUnit) SetTopSystem(v TopSystemRelationship) {
	o.TopSystem.Set(&v)
}

// SetTopSystemNil sets the value for TopSystem to be an explicit nil
func (o *ComputeRackUnit) SetTopSystemNil() {
	o.TopSystem.Set(nil)
}

// UnsetTopSystem ensures that no value is present for TopSystem, not even an explicit nil
func (o *ComputeRackUnit) UnsetTopSystem() {
	o.TopSystem.Unset()
}

// GetUnitPersonality returns the UnitPersonality field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ComputeRackUnit) GetUnitPersonality() []RackUnitPersonalityRelationship {
	if o == nil {
		var ret []RackUnitPersonalityRelationship
		return ret
	}
	return o.UnitPersonality
}

// GetUnitPersonalityOk returns a tuple with the UnitPersonality field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ComputeRackUnit) GetUnitPersonalityOk() ([]RackUnitPersonalityRelationship, bool) {
	if o == nil || IsNil(o.UnitPersonality) {
		return nil, false
	}
	return o.UnitPersonality, true
}

// HasUnitPersonality returns a boolean if a field has been set.
func (o *ComputeRackUnit) HasUnitPersonality() bool {
	if o != nil && !IsNil(o.UnitPersonality) {
		return true
	}

	return false
}

// SetUnitPersonality gets a reference to the given []RackUnitPersonalityRelationship and assigns it to the UnitPersonality field.
func (o *ComputeRackUnit) SetUnitPersonality(v []RackUnitPersonalityRelationship) {
	o.UnitPersonality = v
}

func (o ComputeRackUnit) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ComputeRackUnit) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	serializedComputePhysical, errComputePhysical := json.Marshal(o.ComputePhysical)
	if errComputePhysical != nil {
		return map[string]interface{}{}, errComputePhysical
	}
	errComputePhysical = json.Unmarshal([]byte(serializedComputePhysical), &toSerialize)
	if errComputePhysical != nil {
		return map[string]interface{}{}, errComputePhysical
	}
	if _, exists := toSerialize["ClassId"]; !exists {
		toSerialize["ClassId"] = o.GetDefaultClassId()
	}
	toSerialize["ClassId"] = o.ClassId
	if _, exists := toSerialize["ObjectType"]; !exists {
		toSerialize["ObjectType"] = o.GetDefaultObjectType()
	}
	toSerialize["ObjectType"] = o.ObjectType
	if !IsNil(o.ConnectionStatus) {
		toSerialize["ConnectionStatus"] = o.ConnectionStatus
	}
	if !IsNil(o.ServerId) {
		toSerialize["ServerId"] = o.ServerId
	}
	if !IsNil(o.TopologyScanStatus) {
		toSerialize["TopologyScanStatus"] = o.TopologyScanStatus
	}
	if o.Adapters != nil {
		toSerialize["Adapters"] = o.Adapters
	}
	if o.BiosBootmode.IsSet() {
		toSerialize["BiosBootmode"] = o.BiosBootmode.Get()
	}
	if o.BiosTokenSettings.IsSet() {
		toSerialize["BiosTokenSettings"] = o.BiosTokenSettings.Get()
	}
	if o.BiosVfSelectMemoryRasConfiguration.IsSet() {
		toSerialize["BiosVfSelectMemoryRasConfiguration"] = o.BiosVfSelectMemoryRasConfiguration.Get()
	}
	if o.Biosunits != nil {
		toSerialize["Biosunits"] = o.Biosunits
	}
	if o.Bmc.IsSet() {
		toSerialize["Bmc"] = o.Bmc.Get()
	}
	if o.Board.IsSet() {
		toSerialize["Board"] = o.Board.Get()
	}
	if o.BootDeviceBootmode.IsSet() {
		toSerialize["BootDeviceBootmode"] = o.BootDeviceBootmode.Get()
	}
	if o.ComputePersonality != nil {
		toSerialize["ComputePersonality"] = o.ComputePersonality
	}
	if o.Fanmodules != nil {
		toSerialize["Fanmodules"] = o.Fanmodules
	}
	if o.GenericInventoryHolders != nil {
		toSerialize["GenericInventoryHolders"] = o.GenericInventoryHolders
	}
	if o.GraphicsCards != nil {
		toSerialize["GraphicsCards"] = o.GraphicsCards
	}
	if o.HybridDriveSlots != nil {
		toSerialize["HybridDriveSlots"] = o.HybridDriveSlots
	}
	if o.InventoryDeviceInfo.IsSet() {
		toSerialize["InventoryDeviceInfo"] = o.InventoryDeviceInfo.Get()
	}
	if o.LocatorLed.IsSet() {
		toSerialize["LocatorLed"] = o.LocatorLed.Get()
	}
	if o.MemoryArrays != nil {
		toSerialize["MemoryArrays"] = o.MemoryArrays
	}
	if o.PciDevices != nil {
		toSerialize["PciDevices"] = o.PciDevices
	}
	if o.Processors != nil {
		toSerialize["Processors"] = o.Processors
	}
	if o.Psus != nil {
		toSerialize["Psus"] = o.Psus
	}
	if o.RackEnclosureSlot.IsSet() {
		toSerialize["RackEnclosureSlot"] = o.RackEnclosureSlot.Get()
	}
	if o.RegisteredDevice.IsSet() {
		toSerialize["RegisteredDevice"] = o.RegisteredDevice.Get()
	}
	if o.SasExpanders != nil {
		toSerialize["SasExpanders"] = o.SasExpanders
	}
	if o.StorageControllers != nil {
		toSerialize["StorageControllers"] = o.StorageControllers
	}
	if o.StorageEnclosures != nil {
		toSerialize["StorageEnclosures"] = o.StorageEnclosures
	}
	if o.TopSystem.IsSet() {
		toSerialize["TopSystem"] = o.TopSystem.Get()
	}
	if o.UnitPersonality != nil {
		toSerialize["UnitPersonality"] = o.UnitPersonality
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ComputeRackUnit) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"ClassId",
		"ObjectType",
	}

	// defaultValueFuncMap captures the default values for required properties.
	// These values are used when required properties are missing from the payload.
	defaultValueFuncMap := map[string]func() interface{}{
		"ClassId":    o.GetDefaultClassId,
		"ObjectType": o.GetDefaultObjectType,
	}
	var defaultValueApplied bool
	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			if _, ok := defaultValueFuncMap[requiredProperty]; ok {
				allProperties[requiredProperty] = defaultValueFuncMap[requiredProperty]()
				defaultValueApplied = true
			}
		}
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	if defaultValueApplied {
		data, err = json.Marshal(allProperties)
		if err != nil {
			return err
		}
	}
	type ComputeRackUnitWithoutEmbeddedStruct struct {
		// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.
		ClassId string `json:"ClassId"`
		// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
		ObjectType string `json:"ObjectType"`
		// Connectivity Status of RackUnit to Switch - A or B or AB.
		ConnectionStatus *string `json:"ConnectionStatus,omitempty"`
		// RackUnit ID that uniquely identifies the server.
		ServerId *int64 `json:"ServerId,omitempty"`
		// To maintain the Topology workflow run status.
		TopologyScanStatus *string `json:"TopologyScanStatus,omitempty"`
		// An array of relationships to adapterUnit resources.
		Adapters                           []AdapterUnitRelationship                              `json:"Adapters,omitempty"`
		BiosBootmode                       NullableBiosBootModeRelationship                       `json:"BiosBootmode,omitempty"`
		BiosTokenSettings                  NullableBiosTokenSettingsRelationship                  `json:"BiosTokenSettings,omitempty"`
		BiosVfSelectMemoryRasConfiguration NullableBiosVfSelectMemoryRasConfigurationRelationship `json:"BiosVfSelectMemoryRasConfiguration,omitempty"`
		// An array of relationships to biosUnit resources.
		// Deprecated
		Biosunits          []BiosUnitRelationship                   `json:"Biosunits,omitempty"`
		Bmc                NullableManagementControllerRelationship `json:"Bmc,omitempty"`
		Board              NullableComputeBoardRelationship         `json:"Board,omitempty"`
		BootDeviceBootmode NullableBootDeviceBootModeRelationship   `json:"BootDeviceBootmode,omitempty"`
		// An array of relationships to computePersonality resources.
		ComputePersonality []ComputePersonalityRelationship `json:"ComputePersonality,omitempty"`
		// An array of relationships to equipmentFanModule resources.
		Fanmodules []EquipmentFanModuleRelationship `json:"Fanmodules,omitempty"`
		// An array of relationships to inventoryGenericInventoryHolder resources.
		GenericInventoryHolders []InventoryGenericInventoryHolderRelationship `json:"GenericInventoryHolders,omitempty"`
		// An array of relationships to graphicsCard resources.
		GraphicsCards []GraphicsCardRelationship `json:"GraphicsCards,omitempty"`
		// An array of relationships to equipmentHybridDriveSlot resources.
		HybridDriveSlots    []EquipmentHybridDriveSlotRelationship  `json:"HybridDriveSlots,omitempty"`
		InventoryDeviceInfo NullableInventoryDeviceInfoRelationship `json:"InventoryDeviceInfo,omitempty"`
		LocatorLed          NullableEquipmentLocatorLedRelationship `json:"LocatorLed,omitempty"`
		// An array of relationships to memoryArray resources.
		MemoryArrays []MemoryArrayRelationship `json:"MemoryArrays,omitempty"`
		// An array of relationships to pciDevice resources.
		PciDevices []PciDeviceRelationship `json:"PciDevices,omitempty"`
		// An array of relationships to processorUnit resources.
		Processors []ProcessorUnitRelationship `json:"Processors,omitempty"`
		// An array of relationships to equipmentPsu resources.
		Psus              []EquipmentPsuRelationship                     `json:"Psus,omitempty"`
		RackEnclosureSlot NullableEquipmentRackEnclosureSlotRelationship `json:"RackEnclosureSlot,omitempty"`
		RegisteredDevice  NullableAssetDeviceRegistrationRelationship    `json:"RegisteredDevice,omitempty"`
		// An array of relationships to storageSasExpander resources.
		SasExpanders []StorageSasExpanderRelationship `json:"SasExpanders,omitempty"`
		// An array of relationships to storageController resources.
		StorageControllers []StorageControllerRelationship `json:"StorageControllers,omitempty"`
		// An array of relationships to storageEnclosure resources.
		StorageEnclosures []StorageEnclosureRelationship `json:"StorageEnclosures,omitempty"`
		TopSystem         NullableTopSystemRelationship  `json:"TopSystem,omitempty"`
		// An array of relationships to rackUnitPersonality resources.
		UnitPersonality []RackUnitPersonalityRelationship `json:"UnitPersonality,omitempty"`
	}

	varComputeRackUnitWithoutEmbeddedStruct := ComputeRackUnitWithoutEmbeddedStruct{}

	err = json.Unmarshal(data, &varComputeRackUnitWithoutEmbeddedStruct)
	if err == nil {
		varComputeRackUnit := _ComputeRackUnit{}
		varComputeRackUnit.ClassId = varComputeRackUnitWithoutEmbeddedStruct.ClassId
		varComputeRackUnit.ObjectType = varComputeRackUnitWithoutEmbeddedStruct.ObjectType
		varComputeRackUnit.ConnectionStatus = varComputeRackUnitWithoutEmbeddedStruct.ConnectionStatus
		varComputeRackUnit.ServerId = varComputeRackUnitWithoutEmbeddedStruct.ServerId
		varComputeRackUnit.TopologyScanStatus = varComputeRackUnitWithoutEmbeddedStruct.TopologyScanStatus
		varComputeRackUnit.Adapters = varComputeRackUnitWithoutEmbeddedStruct.Adapters
		varComputeRackUnit.BiosBootmode = varComputeRackUnitWithoutEmbeddedStruct.BiosBootmode
		varComputeRackUnit.BiosTokenSettings = varComputeRackUnitWithoutEmbeddedStruct.BiosTokenSettings
		varComputeRackUnit.BiosVfSelectMemoryRasConfiguration = varComputeRackUnitWithoutEmbeddedStruct.BiosVfSelectMemoryRasConfiguration
		varComputeRackUnit.Biosunits = varComputeRackUnitWithoutEmbeddedStruct.Biosunits
		varComputeRackUnit.Bmc = varComputeRackUnitWithoutEmbeddedStruct.Bmc
		varComputeRackUnit.Board = varComputeRackUnitWithoutEmbeddedStruct.Board
		varComputeRackUnit.BootDeviceBootmode = varComputeRackUnitWithoutEmbeddedStruct.BootDeviceBootmode
		varComputeRackUnit.ComputePersonality = varComputeRackUnitWithoutEmbeddedStruct.ComputePersonality
		varComputeRackUnit.Fanmodules = varComputeRackUnitWithoutEmbeddedStruct.Fanmodules
		varComputeRackUnit.GenericInventoryHolders = varComputeRackUnitWithoutEmbeddedStruct.GenericInventoryHolders
		varComputeRackUnit.GraphicsCards = varComputeRackUnitWithoutEmbeddedStruct.GraphicsCards
		varComputeRackUnit.HybridDriveSlots = varComputeRackUnitWithoutEmbeddedStruct.HybridDriveSlots
		varComputeRackUnit.InventoryDeviceInfo = varComputeRackUnitWithoutEmbeddedStruct.InventoryDeviceInfo
		varComputeRackUnit.LocatorLed = varComputeRackUnitWithoutEmbeddedStruct.LocatorLed
		varComputeRackUnit.MemoryArrays = varComputeRackUnitWithoutEmbeddedStruct.MemoryArrays
		varComputeRackUnit.PciDevices = varComputeRackUnitWithoutEmbeddedStruct.PciDevices
		varComputeRackUnit.Processors = varComputeRackUnitWithoutEmbeddedStruct.Processors
		varComputeRackUnit.Psus = varComputeRackUnitWithoutEmbeddedStruct.Psus
		varComputeRackUnit.RackEnclosureSlot = varComputeRackUnitWithoutEmbeddedStruct.RackEnclosureSlot
		varComputeRackUnit.RegisteredDevice = varComputeRackUnitWithoutEmbeddedStruct.RegisteredDevice
		varComputeRackUnit.SasExpanders = varComputeRackUnitWithoutEmbeddedStruct.SasExpanders
		varComputeRackUnit.StorageControllers = varComputeRackUnitWithoutEmbeddedStruct.StorageControllers
		varComputeRackUnit.StorageEnclosures = varComputeRackUnitWithoutEmbeddedStruct.StorageEnclosures
		varComputeRackUnit.TopSystem = varComputeRackUnitWithoutEmbeddedStruct.TopSystem
		varComputeRackUnit.UnitPersonality = varComputeRackUnitWithoutEmbeddedStruct.UnitPersonality
		*o = ComputeRackUnit(varComputeRackUnit)
	} else {
		return err
	}

	varComputeRackUnit := _ComputeRackUnit{}

	err = json.Unmarshal(data, &varComputeRackUnit)
	if err == nil {
		o.ComputePhysical = varComputeRackUnit.ComputePhysical
	} else {
		return err
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "ClassId")
		delete(additionalProperties, "ObjectType")
		delete(additionalProperties, "ConnectionStatus")
		delete(additionalProperties, "ServerId")
		delete(additionalProperties, "TopologyScanStatus")
		delete(additionalProperties, "Adapters")
		delete(additionalProperties, "BiosBootmode")
		delete(additionalProperties, "BiosTokenSettings")
		delete(additionalProperties, "BiosVfSelectMemoryRasConfiguration")
		delete(additionalProperties, "Biosunits")
		delete(additionalProperties, "Bmc")
		delete(additionalProperties, "Board")
		delete(additionalProperties, "BootDeviceBootmode")
		delete(additionalProperties, "ComputePersonality")
		delete(additionalProperties, "Fanmodules")
		delete(additionalProperties, "GenericInventoryHolders")
		delete(additionalProperties, "GraphicsCards")
		delete(additionalProperties, "HybridDriveSlots")
		delete(additionalProperties, "InventoryDeviceInfo")
		delete(additionalProperties, "LocatorLed")
		delete(additionalProperties, "MemoryArrays")
		delete(additionalProperties, "PciDevices")
		delete(additionalProperties, "Processors")
		delete(additionalProperties, "Psus")
		delete(additionalProperties, "RackEnclosureSlot")
		delete(additionalProperties, "RegisteredDevice")
		delete(additionalProperties, "SasExpanders")
		delete(additionalProperties, "StorageControllers")
		delete(additionalProperties, "StorageEnclosures")
		delete(additionalProperties, "TopSystem")
		delete(additionalProperties, "UnitPersonality")

		// remove fields from embedded structs
		reflectComputePhysical := reflect.ValueOf(o.ComputePhysical)
		for i := 0; i < reflectComputePhysical.Type().NumField(); i++ {
			t := reflectComputePhysical.Type().Field(i)

			if jsonTag := t.Tag.Get("json"); jsonTag != "" {
				fieldName := ""
				if commaIdx := strings.Index(jsonTag, ","); commaIdx > 0 {
					fieldName = jsonTag[:commaIdx]
				} else {
					fieldName = jsonTag
				}
				if fieldName != "AdditionalProperties" {
					delete(additionalProperties, fieldName)
				}
			}
		}

		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableComputeRackUnit struct {
	value *ComputeRackUnit
	isSet bool
}

func (v NullableComputeRackUnit) Get() *ComputeRackUnit {
	return v.value
}

func (v *NullableComputeRackUnit) Set(val *ComputeRackUnit) {
	v.value = val
	v.isSet = true
}

func (v NullableComputeRackUnit) IsSet() bool {
	return v.isSet
}

func (v *NullableComputeRackUnit) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableComputeRackUnit(val *ComputeRackUnit) *NullableComputeRackUnit {
	return &NullableComputeRackUnit{value: val, isSet: true}
}

func (v NullableComputeRackUnit) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableComputeRackUnit) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
