/*
Cisco Intersight

Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations. The Intersight OpenAPI document defines the complete set of properties that are returned in the HTTP response. From that perspective, a client can expect that no additional properties are returned, unless these properties are explicitly defined in the OpenAPI document. However, when a client uses an older version of the Intersight OpenAPI document, the server may send additional properties because the software is more recent than the client. In that case, the client may receive properties that it does not know about. Some generated SDKs perform a strict validation of the HTTP response body against the OpenAPI document.

API version: 1.0.11-18775
Contact: intersight@cisco.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package intersight

import (
	"encoding/json"
	"fmt"
	"reflect"
	"strings"
)

// checks if the HyperflexVmRestoreOperation type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &HyperflexVmRestoreOperation{}

// HyperflexVmRestoreOperation Invoke Virtual Machine restore operation.
type HyperflexVmRestoreOperation struct {
	MoBaseMo
	// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.
	ClassId string `json:"ClassId"`
	// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
	ObjectType string `json:"ObjectType"`
	// New name for the Virtual Machine after recovery.
	NewName *string `json:"NewName,omitempty"`
	// Power on the Virtual Machine after recovery.
	PowerOn *bool `json:"PowerOn,omitempty"`
	// Start time for the replication.
	StartTime              *int64                                       `json:"StartTime,omitempty"`
	Organization           NullableOrganizationOrganizationRelationship `json:"Organization,omitempty"`
	RestoreEdgeClusterMoid NullableHyperflexClusterRelationship         `json:"RestoreEdgeClusterMoid,omitempty"`
	VmBackupInfoMoid       NullableHyperflexVmBackupInfoRelationship    `json:"VmBackupInfoMoid,omitempty"`
	VmSnapshotInfoMoid     NullableHyperflexVmSnapshotInfoRelationship  `json:"VmSnapshotInfoMoid,omitempty"`
	AdditionalProperties   map[string]interface{}
}

type _HyperflexVmRestoreOperation HyperflexVmRestoreOperation

// NewHyperflexVmRestoreOperation instantiates a new HyperflexVmRestoreOperation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHyperflexVmRestoreOperation(classId string, objectType string) *HyperflexVmRestoreOperation {
	this := HyperflexVmRestoreOperation{}
	this.ClassId = classId
	this.ObjectType = objectType
	var powerOn bool = true
	this.PowerOn = &powerOn
	return &this
}

// NewHyperflexVmRestoreOperationWithDefaults instantiates a new HyperflexVmRestoreOperation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHyperflexVmRestoreOperationWithDefaults() *HyperflexVmRestoreOperation {
	this := HyperflexVmRestoreOperation{}
	var classId string = "hyperflex.VmRestoreOperation"
	this.ClassId = classId
	var objectType string = "hyperflex.VmRestoreOperation"
	this.ObjectType = objectType
	var powerOn bool = true
	this.PowerOn = &powerOn
	return &this
}

// GetClassId returns the ClassId field value
func (o *HyperflexVmRestoreOperation) GetClassId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ClassId
}

// GetClassIdOk returns a tuple with the ClassId field value
// and a boolean to check if the value has been set.
func (o *HyperflexVmRestoreOperation) GetClassIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ClassId, true
}

// SetClassId sets field value
func (o *HyperflexVmRestoreOperation) SetClassId(v string) {
	o.ClassId = v
}

// GetDefaultClassId returns the default value "hyperflex.VmRestoreOperation" of the ClassId field.
func (o *HyperflexVmRestoreOperation) GetDefaultClassId() interface{} {
	return "hyperflex.VmRestoreOperation"
}

// GetObjectType returns the ObjectType field value
func (o *HyperflexVmRestoreOperation) GetObjectType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ObjectType
}

// GetObjectTypeOk returns a tuple with the ObjectType field value
// and a boolean to check if the value has been set.
func (o *HyperflexVmRestoreOperation) GetObjectTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ObjectType, true
}

// SetObjectType sets field value
func (o *HyperflexVmRestoreOperation) SetObjectType(v string) {
	o.ObjectType = v
}

// GetDefaultObjectType returns the default value "hyperflex.VmRestoreOperation" of the ObjectType field.
func (o *HyperflexVmRestoreOperation) GetDefaultObjectType() interface{} {
	return "hyperflex.VmRestoreOperation"
}

// GetNewName returns the NewName field value if set, zero value otherwise.
func (o *HyperflexVmRestoreOperation) GetNewName() string {
	if o == nil || IsNil(o.NewName) {
		var ret string
		return ret
	}
	return *o.NewName
}

// GetNewNameOk returns a tuple with the NewName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HyperflexVmRestoreOperation) GetNewNameOk() (*string, bool) {
	if o == nil || IsNil(o.NewName) {
		return nil, false
	}
	return o.NewName, true
}

// HasNewName returns a boolean if a field has been set.
func (o *HyperflexVmRestoreOperation) HasNewName() bool {
	if o != nil && !IsNil(o.NewName) {
		return true
	}

	return false
}

// SetNewName gets a reference to the given string and assigns it to the NewName field.
func (o *HyperflexVmRestoreOperation) SetNewName(v string) {
	o.NewName = &v
}

// GetPowerOn returns the PowerOn field value if set, zero value otherwise.
func (o *HyperflexVmRestoreOperation) GetPowerOn() bool {
	if o == nil || IsNil(o.PowerOn) {
		var ret bool
		return ret
	}
	return *o.PowerOn
}

// GetPowerOnOk returns a tuple with the PowerOn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HyperflexVmRestoreOperation) GetPowerOnOk() (*bool, bool) {
	if o == nil || IsNil(o.PowerOn) {
		return nil, false
	}
	return o.PowerOn, true
}

// HasPowerOn returns a boolean if a field has been set.
func (o *HyperflexVmRestoreOperation) HasPowerOn() bool {
	if o != nil && !IsNil(o.PowerOn) {
		return true
	}

	return false
}

// SetPowerOn gets a reference to the given bool and assigns it to the PowerOn field.
func (o *HyperflexVmRestoreOperation) SetPowerOn(v bool) {
	o.PowerOn = &v
}

// GetStartTime returns the StartTime field value if set, zero value otherwise.
func (o *HyperflexVmRestoreOperation) GetStartTime() int64 {
	if o == nil || IsNil(o.StartTime) {
		var ret int64
		return ret
	}
	return *o.StartTime
}

// GetStartTimeOk returns a tuple with the StartTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HyperflexVmRestoreOperation) GetStartTimeOk() (*int64, bool) {
	if o == nil || IsNil(o.StartTime) {
		return nil, false
	}
	return o.StartTime, true
}

// HasStartTime returns a boolean if a field has been set.
func (o *HyperflexVmRestoreOperation) HasStartTime() bool {
	if o != nil && !IsNil(o.StartTime) {
		return true
	}

	return false
}

// SetStartTime gets a reference to the given int64 and assigns it to the StartTime field.
func (o *HyperflexVmRestoreOperation) SetStartTime(v int64) {
	o.StartTime = &v
}

// GetOrganization returns the Organization field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HyperflexVmRestoreOperation) GetOrganization() OrganizationOrganizationRelationship {
	if o == nil || IsNil(o.Organization.Get()) {
		var ret OrganizationOrganizationRelationship
		return ret
	}
	return *o.Organization.Get()
}

// GetOrganizationOk returns a tuple with the Organization field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HyperflexVmRestoreOperation) GetOrganizationOk() (*OrganizationOrganizationRelationship, bool) {
	if o == nil {
		return nil, false
	}
	return o.Organization.Get(), o.Organization.IsSet()
}

// HasOrganization returns a boolean if a field has been set.
func (o *HyperflexVmRestoreOperation) HasOrganization() bool {
	if o != nil && o.Organization.IsSet() {
		return true
	}

	return false
}

// SetOrganization gets a reference to the given NullableOrganizationOrganizationRelationship and assigns it to the Organization field.
func (o *HyperflexVmRestoreOperation) SetOrganization(v OrganizationOrganizationRelationship) {
	o.Organization.Set(&v)
}

// SetOrganizationNil sets the value for Organization to be an explicit nil
func (o *HyperflexVmRestoreOperation) SetOrganizationNil() {
	o.Organization.Set(nil)
}

// UnsetOrganization ensures that no value is present for Organization, not even an explicit nil
func (o *HyperflexVmRestoreOperation) UnsetOrganization() {
	o.Organization.Unset()
}

// GetRestoreEdgeClusterMoid returns the RestoreEdgeClusterMoid field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HyperflexVmRestoreOperation) GetRestoreEdgeClusterMoid() HyperflexClusterRelationship {
	if o == nil || IsNil(o.RestoreEdgeClusterMoid.Get()) {
		var ret HyperflexClusterRelationship
		return ret
	}
	return *o.RestoreEdgeClusterMoid.Get()
}

// GetRestoreEdgeClusterMoidOk returns a tuple with the RestoreEdgeClusterMoid field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HyperflexVmRestoreOperation) GetRestoreEdgeClusterMoidOk() (*HyperflexClusterRelationship, bool) {
	if o == nil {
		return nil, false
	}
	return o.RestoreEdgeClusterMoid.Get(), o.RestoreEdgeClusterMoid.IsSet()
}

// HasRestoreEdgeClusterMoid returns a boolean if a field has been set.
func (o *HyperflexVmRestoreOperation) HasRestoreEdgeClusterMoid() bool {
	if o != nil && o.RestoreEdgeClusterMoid.IsSet() {
		return true
	}

	return false
}

// SetRestoreEdgeClusterMoid gets a reference to the given NullableHyperflexClusterRelationship and assigns it to the RestoreEdgeClusterMoid field.
func (o *HyperflexVmRestoreOperation) SetRestoreEdgeClusterMoid(v HyperflexClusterRelationship) {
	o.RestoreEdgeClusterMoid.Set(&v)
}

// SetRestoreEdgeClusterMoidNil sets the value for RestoreEdgeClusterMoid to be an explicit nil
func (o *HyperflexVmRestoreOperation) SetRestoreEdgeClusterMoidNil() {
	o.RestoreEdgeClusterMoid.Set(nil)
}

// UnsetRestoreEdgeClusterMoid ensures that no value is present for RestoreEdgeClusterMoid, not even an explicit nil
func (o *HyperflexVmRestoreOperation) UnsetRestoreEdgeClusterMoid() {
	o.RestoreEdgeClusterMoid.Unset()
}

// GetVmBackupInfoMoid returns the VmBackupInfoMoid field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HyperflexVmRestoreOperation) GetVmBackupInfoMoid() HyperflexVmBackupInfoRelationship {
	if o == nil || IsNil(o.VmBackupInfoMoid.Get()) {
		var ret HyperflexVmBackupInfoRelationship
		return ret
	}
	return *o.VmBackupInfoMoid.Get()
}

// GetVmBackupInfoMoidOk returns a tuple with the VmBackupInfoMoid field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HyperflexVmRestoreOperation) GetVmBackupInfoMoidOk() (*HyperflexVmBackupInfoRelationship, bool) {
	if o == nil {
		return nil, false
	}
	return o.VmBackupInfoMoid.Get(), o.VmBackupInfoMoid.IsSet()
}

// HasVmBackupInfoMoid returns a boolean if a field has been set.
func (o *HyperflexVmRestoreOperation) HasVmBackupInfoMoid() bool {
	if o != nil && o.VmBackupInfoMoid.IsSet() {
		return true
	}

	return false
}

// SetVmBackupInfoMoid gets a reference to the given NullableHyperflexVmBackupInfoRelationship and assigns it to the VmBackupInfoMoid field.
func (o *HyperflexVmRestoreOperation) SetVmBackupInfoMoid(v HyperflexVmBackupInfoRelationship) {
	o.VmBackupInfoMoid.Set(&v)
}

// SetVmBackupInfoMoidNil sets the value for VmBackupInfoMoid to be an explicit nil
func (o *HyperflexVmRestoreOperation) SetVmBackupInfoMoidNil() {
	o.VmBackupInfoMoid.Set(nil)
}

// UnsetVmBackupInfoMoid ensures that no value is present for VmBackupInfoMoid, not even an explicit nil
func (o *HyperflexVmRestoreOperation) UnsetVmBackupInfoMoid() {
	o.VmBackupInfoMoid.Unset()
}

// GetVmSnapshotInfoMoid returns the VmSnapshotInfoMoid field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HyperflexVmRestoreOperation) GetVmSnapshotInfoMoid() HyperflexVmSnapshotInfoRelationship {
	if o == nil || IsNil(o.VmSnapshotInfoMoid.Get()) {
		var ret HyperflexVmSnapshotInfoRelationship
		return ret
	}
	return *o.VmSnapshotInfoMoid.Get()
}

// GetVmSnapshotInfoMoidOk returns a tuple with the VmSnapshotInfoMoid field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HyperflexVmRestoreOperation) GetVmSnapshotInfoMoidOk() (*HyperflexVmSnapshotInfoRelationship, bool) {
	if o == nil {
		return nil, false
	}
	return o.VmSnapshotInfoMoid.Get(), o.VmSnapshotInfoMoid.IsSet()
}

// HasVmSnapshotInfoMoid returns a boolean if a field has been set.
func (o *HyperflexVmRestoreOperation) HasVmSnapshotInfoMoid() bool {
	if o != nil && o.VmSnapshotInfoMoid.IsSet() {
		return true
	}

	return false
}

// SetVmSnapshotInfoMoid gets a reference to the given NullableHyperflexVmSnapshotInfoRelationship and assigns it to the VmSnapshotInfoMoid field.
func (o *HyperflexVmRestoreOperation) SetVmSnapshotInfoMoid(v HyperflexVmSnapshotInfoRelationship) {
	o.VmSnapshotInfoMoid.Set(&v)
}

// SetVmSnapshotInfoMoidNil sets the value for VmSnapshotInfoMoid to be an explicit nil
func (o *HyperflexVmRestoreOperation) SetVmSnapshotInfoMoidNil() {
	o.VmSnapshotInfoMoid.Set(nil)
}

// UnsetVmSnapshotInfoMoid ensures that no value is present for VmSnapshotInfoMoid, not even an explicit nil
func (o *HyperflexVmRestoreOperation) UnsetVmSnapshotInfoMoid() {
	o.VmSnapshotInfoMoid.Unset()
}

func (o HyperflexVmRestoreOperation) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o HyperflexVmRestoreOperation) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	serializedMoBaseMo, errMoBaseMo := json.Marshal(o.MoBaseMo)
	if errMoBaseMo != nil {
		return map[string]interface{}{}, errMoBaseMo
	}
	errMoBaseMo = json.Unmarshal([]byte(serializedMoBaseMo), &toSerialize)
	if errMoBaseMo != nil {
		return map[string]interface{}{}, errMoBaseMo
	}
	if _, exists := toSerialize["ClassId"]; !exists {
		toSerialize["ClassId"] = o.GetDefaultClassId()
	}
	toSerialize["ClassId"] = o.ClassId
	if _, exists := toSerialize["ObjectType"]; !exists {
		toSerialize["ObjectType"] = o.GetDefaultObjectType()
	}
	toSerialize["ObjectType"] = o.ObjectType
	if !IsNil(o.NewName) {
		toSerialize["NewName"] = o.NewName
	}
	if !IsNil(o.PowerOn) {
		toSerialize["PowerOn"] = o.PowerOn
	}
	if !IsNil(o.StartTime) {
		toSerialize["StartTime"] = o.StartTime
	}
	if o.Organization.IsSet() {
		toSerialize["Organization"] = o.Organization.Get()
	}
	if o.RestoreEdgeClusterMoid.IsSet() {
		toSerialize["RestoreEdgeClusterMoid"] = o.RestoreEdgeClusterMoid.Get()
	}
	if o.VmBackupInfoMoid.IsSet() {
		toSerialize["VmBackupInfoMoid"] = o.VmBackupInfoMoid.Get()
	}
	if o.VmSnapshotInfoMoid.IsSet() {
		toSerialize["VmSnapshotInfoMoid"] = o.VmSnapshotInfoMoid.Get()
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *HyperflexVmRestoreOperation) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"ClassId",
		"ObjectType",
	}

	// defaultValueFuncMap captures the default values for required properties.
	// These values are used when required properties are missing from the payload.
	defaultValueFuncMap := map[string]func() interface{}{
		"ClassId":    o.GetDefaultClassId,
		"ObjectType": o.GetDefaultObjectType,
	}
	var defaultValueApplied bool
	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			if _, ok := defaultValueFuncMap[requiredProperty]; ok {
				allProperties[requiredProperty] = defaultValueFuncMap[requiredProperty]()
				defaultValueApplied = true
			}
		}
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	if defaultValueApplied {
		data, err = json.Marshal(allProperties)
		if err != nil {
			return err
		}
	}
	type HyperflexVmRestoreOperationWithoutEmbeddedStruct struct {
		// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.
		ClassId string `json:"ClassId"`
		// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
		ObjectType string `json:"ObjectType"`
		// New name for the Virtual Machine after recovery.
		NewName *string `json:"NewName,omitempty"`
		// Power on the Virtual Machine after recovery.
		PowerOn *bool `json:"PowerOn,omitempty"`
		// Start time for the replication.
		StartTime              *int64                                       `json:"StartTime,omitempty"`
		Organization           NullableOrganizationOrganizationRelationship `json:"Organization,omitempty"`
		RestoreEdgeClusterMoid NullableHyperflexClusterRelationship         `json:"RestoreEdgeClusterMoid,omitempty"`
		VmBackupInfoMoid       NullableHyperflexVmBackupInfoRelationship    `json:"VmBackupInfoMoid,omitempty"`
		VmSnapshotInfoMoid     NullableHyperflexVmSnapshotInfoRelationship  `json:"VmSnapshotInfoMoid,omitempty"`
	}

	varHyperflexVmRestoreOperationWithoutEmbeddedStruct := HyperflexVmRestoreOperationWithoutEmbeddedStruct{}

	err = json.Unmarshal(data, &varHyperflexVmRestoreOperationWithoutEmbeddedStruct)
	if err == nil {
		varHyperflexVmRestoreOperation := _HyperflexVmRestoreOperation{}
		varHyperflexVmRestoreOperation.ClassId = varHyperflexVmRestoreOperationWithoutEmbeddedStruct.ClassId
		varHyperflexVmRestoreOperation.ObjectType = varHyperflexVmRestoreOperationWithoutEmbeddedStruct.ObjectType
		varHyperflexVmRestoreOperation.NewName = varHyperflexVmRestoreOperationWithoutEmbeddedStruct.NewName
		varHyperflexVmRestoreOperation.PowerOn = varHyperflexVmRestoreOperationWithoutEmbeddedStruct.PowerOn
		varHyperflexVmRestoreOperation.StartTime = varHyperflexVmRestoreOperationWithoutEmbeddedStruct.StartTime
		varHyperflexVmRestoreOperation.Organization = varHyperflexVmRestoreOperationWithoutEmbeddedStruct.Organization
		varHyperflexVmRestoreOperation.RestoreEdgeClusterMoid = varHyperflexVmRestoreOperationWithoutEmbeddedStruct.RestoreEdgeClusterMoid
		varHyperflexVmRestoreOperation.VmBackupInfoMoid = varHyperflexVmRestoreOperationWithoutEmbeddedStruct.VmBackupInfoMoid
		varHyperflexVmRestoreOperation.VmSnapshotInfoMoid = varHyperflexVmRestoreOperationWithoutEmbeddedStruct.VmSnapshotInfoMoid
		*o = HyperflexVmRestoreOperation(varHyperflexVmRestoreOperation)
	} else {
		return err
	}

	varHyperflexVmRestoreOperation := _HyperflexVmRestoreOperation{}

	err = json.Unmarshal(data, &varHyperflexVmRestoreOperation)
	if err == nil {
		o.MoBaseMo = varHyperflexVmRestoreOperation.MoBaseMo
	} else {
		return err
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "ClassId")
		delete(additionalProperties, "ObjectType")
		delete(additionalProperties, "NewName")
		delete(additionalProperties, "PowerOn")
		delete(additionalProperties, "StartTime")
		delete(additionalProperties, "Organization")
		delete(additionalProperties, "RestoreEdgeClusterMoid")
		delete(additionalProperties, "VmBackupInfoMoid")
		delete(additionalProperties, "VmSnapshotInfoMoid")

		// remove fields from embedded structs
		reflectMoBaseMo := reflect.ValueOf(o.MoBaseMo)
		for i := 0; i < reflectMoBaseMo.Type().NumField(); i++ {
			t := reflectMoBaseMo.Type().Field(i)

			if jsonTag := t.Tag.Get("json"); jsonTag != "" {
				fieldName := ""
				if commaIdx := strings.Index(jsonTag, ","); commaIdx > 0 {
					fieldName = jsonTag[:commaIdx]
				} else {
					fieldName = jsonTag
				}
				if fieldName != "AdditionalProperties" {
					delete(additionalProperties, fieldName)
				}
			}
		}

		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableHyperflexVmRestoreOperation struct {
	value *HyperflexVmRestoreOperation
	isSet bool
}

func (v NullableHyperflexVmRestoreOperation) Get() *HyperflexVmRestoreOperation {
	return v.value
}

func (v *NullableHyperflexVmRestoreOperation) Set(val *HyperflexVmRestoreOperation) {
	v.value = val
	v.isSet = true
}

func (v NullableHyperflexVmRestoreOperation) IsSet() bool {
	return v.isSet
}

func (v *NullableHyperflexVmRestoreOperation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHyperflexVmRestoreOperation(val *HyperflexVmRestoreOperation) *NullableHyperflexVmRestoreOperation {
	return &NullableHyperflexVmRestoreOperation{value: val, isSet: true}
}

func (v NullableHyperflexVmRestoreOperation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHyperflexVmRestoreOperation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
