/*
Cisco Intersight

Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations. The Intersight OpenAPI document defines the complete set of properties that are returned in the HTTP response. From that perspective, a client can expect that no additional properties are returned, unless these properties are explicitly defined in the OpenAPI document. However, when a client uses an older version of the Intersight OpenAPI document, the server may send additional properties because the software is more recent than the client. In that case, the client may receive properties that it does not know about. Some generated SDKs perform a strict validation of the HTTP response body against the OpenAPI document.

API version: 1.0.11-18775
Contact: intersight@cisco.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package intersight

import (
	"encoding/json"
	"fmt"
	"reflect"
	"strings"
	"time"
)

// checks if the HyperflexVolume type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &HyperflexVolume{}

// HyperflexVolume A HyperFlex Volume entity.
type HyperflexVolume struct {
	StorageBaseVolume
	// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.
	ClassId string `json:"ClassId"`
	// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
	ObjectType string `json:"ObjectType"`
	// Provisioned Capacity of the volume in bytes.
	Capacity *int64 `json:"Capacity,omitempty"`
	// Client (tenant) ID to which the volume belongs.
	ClientId *string `json:"ClientId,omitempty"`
	// Last modified time as UTC of the volume.
	LastModifiedTime *time.Time `json:"LastModifiedTime,omitempty"`
	// UUID of LUN associated with the volume.
	LunUuid *string `json:"LunUuid,omitempty"`
	// Serial number of the volume.
	SerialNumber *string `json:"SerialNumber,omitempty"`
	// The unique identifier for this volume.
	Uuid *string `json:"Uuid,omitempty"`
	// Access Mode of the volume. * `ReadWriteOnce` - Read write permisisons to a Virtual disk by a single virtual machine. * `ReadWriteMany` - Read write permisisons to a Virtual disk by multiple virtual machines. * `ReadOnlyMany` - Read only permisisons to a Virtual disk by multiple virtual machines. * `` - Unknown disk access mode.
	VolumeAccessMode *string `json:"VolumeAccessMode,omitempty"`
	// Volume creation time in UTC.
	VolumeCreateTime *time.Time `json:"VolumeCreateTime,omitempty"`
	// The mode of the HyperFlex volume. * `Block` - It is a Block virtual disk. * `Filesystem` - It is a File system virtual disk. * `` - Disk mode is either unknown or not supported.
	VolumeMode *string `json:"VolumeMode,omitempty"`
	// The type of the HyperFlex volume.
	VolumeType           *string                                       `json:"VolumeType,omitempty"`
	Cluster              NullableHyperflexClusterRelationship          `json:"Cluster,omitempty"`
	StorageContainer     NullableHyperflexStorageContainerRelationship `json:"StorageContainer,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _HyperflexVolume HyperflexVolume

// NewHyperflexVolume instantiates a new HyperflexVolume object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHyperflexVolume(classId string, objectType string) *HyperflexVolume {
	this := HyperflexVolume{}
	this.ClassId = classId
	this.ObjectType = objectType
	return &this
}

// NewHyperflexVolumeWithDefaults instantiates a new HyperflexVolume object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHyperflexVolumeWithDefaults() *HyperflexVolume {
	this := HyperflexVolume{}
	var classId string = "hyperflex.Volume"
	this.ClassId = classId
	var objectType string = "hyperflex.Volume"
	this.ObjectType = objectType
	return &this
}

// GetClassId returns the ClassId field value
func (o *HyperflexVolume) GetClassId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ClassId
}

// GetClassIdOk returns a tuple with the ClassId field value
// and a boolean to check if the value has been set.
func (o *HyperflexVolume) GetClassIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ClassId, true
}

// SetClassId sets field value
func (o *HyperflexVolume) SetClassId(v string) {
	o.ClassId = v
}

// GetDefaultClassId returns the default value "hyperflex.Volume" of the ClassId field.
func (o *HyperflexVolume) GetDefaultClassId() interface{} {
	return "hyperflex.Volume"
}

// GetObjectType returns the ObjectType field value
func (o *HyperflexVolume) GetObjectType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ObjectType
}

// GetObjectTypeOk returns a tuple with the ObjectType field value
// and a boolean to check if the value has been set.
func (o *HyperflexVolume) GetObjectTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ObjectType, true
}

// SetObjectType sets field value
func (o *HyperflexVolume) SetObjectType(v string) {
	o.ObjectType = v
}

// GetDefaultObjectType returns the default value "hyperflex.Volume" of the ObjectType field.
func (o *HyperflexVolume) GetDefaultObjectType() interface{} {
	return "hyperflex.Volume"
}

// GetCapacity returns the Capacity field value if set, zero value otherwise.
func (o *HyperflexVolume) GetCapacity() int64 {
	if o == nil || IsNil(o.Capacity) {
		var ret int64
		return ret
	}
	return *o.Capacity
}

// GetCapacityOk returns a tuple with the Capacity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HyperflexVolume) GetCapacityOk() (*int64, bool) {
	if o == nil || IsNil(o.Capacity) {
		return nil, false
	}
	return o.Capacity, true
}

// HasCapacity returns a boolean if a field has been set.
func (o *HyperflexVolume) HasCapacity() bool {
	if o != nil && !IsNil(o.Capacity) {
		return true
	}

	return false
}

// SetCapacity gets a reference to the given int64 and assigns it to the Capacity field.
func (o *HyperflexVolume) SetCapacity(v int64) {
	o.Capacity = &v
}

// GetClientId returns the ClientId field value if set, zero value otherwise.
func (o *HyperflexVolume) GetClientId() string {
	if o == nil || IsNil(o.ClientId) {
		var ret string
		return ret
	}
	return *o.ClientId
}

// GetClientIdOk returns a tuple with the ClientId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HyperflexVolume) GetClientIdOk() (*string, bool) {
	if o == nil || IsNil(o.ClientId) {
		return nil, false
	}
	return o.ClientId, true
}

// HasClientId returns a boolean if a field has been set.
func (o *HyperflexVolume) HasClientId() bool {
	if o != nil && !IsNil(o.ClientId) {
		return true
	}

	return false
}

// SetClientId gets a reference to the given string and assigns it to the ClientId field.
func (o *HyperflexVolume) SetClientId(v string) {
	o.ClientId = &v
}

// GetLastModifiedTime returns the LastModifiedTime field value if set, zero value otherwise.
func (o *HyperflexVolume) GetLastModifiedTime() time.Time {
	if o == nil || IsNil(o.LastModifiedTime) {
		var ret time.Time
		return ret
	}
	return *o.LastModifiedTime
}

// GetLastModifiedTimeOk returns a tuple with the LastModifiedTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HyperflexVolume) GetLastModifiedTimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.LastModifiedTime) {
		return nil, false
	}
	return o.LastModifiedTime, true
}

// HasLastModifiedTime returns a boolean if a field has been set.
func (o *HyperflexVolume) HasLastModifiedTime() bool {
	if o != nil && !IsNil(o.LastModifiedTime) {
		return true
	}

	return false
}

// SetLastModifiedTime gets a reference to the given time.Time and assigns it to the LastModifiedTime field.
func (o *HyperflexVolume) SetLastModifiedTime(v time.Time) {
	o.LastModifiedTime = &v
}

// GetLunUuid returns the LunUuid field value if set, zero value otherwise.
func (o *HyperflexVolume) GetLunUuid() string {
	if o == nil || IsNil(o.LunUuid) {
		var ret string
		return ret
	}
	return *o.LunUuid
}

// GetLunUuidOk returns a tuple with the LunUuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HyperflexVolume) GetLunUuidOk() (*string, bool) {
	if o == nil || IsNil(o.LunUuid) {
		return nil, false
	}
	return o.LunUuid, true
}

// HasLunUuid returns a boolean if a field has been set.
func (o *HyperflexVolume) HasLunUuid() bool {
	if o != nil && !IsNil(o.LunUuid) {
		return true
	}

	return false
}

// SetLunUuid gets a reference to the given string and assigns it to the LunUuid field.
func (o *HyperflexVolume) SetLunUuid(v string) {
	o.LunUuid = &v
}

// GetSerialNumber returns the SerialNumber field value if set, zero value otherwise.
func (o *HyperflexVolume) GetSerialNumber() string {
	if o == nil || IsNil(o.SerialNumber) {
		var ret string
		return ret
	}
	return *o.SerialNumber
}

// GetSerialNumberOk returns a tuple with the SerialNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HyperflexVolume) GetSerialNumberOk() (*string, bool) {
	if o == nil || IsNil(o.SerialNumber) {
		return nil, false
	}
	return o.SerialNumber, true
}

// HasSerialNumber returns a boolean if a field has been set.
func (o *HyperflexVolume) HasSerialNumber() bool {
	if o != nil && !IsNil(o.SerialNumber) {
		return true
	}

	return false
}

// SetSerialNumber gets a reference to the given string and assigns it to the SerialNumber field.
func (o *HyperflexVolume) SetSerialNumber(v string) {
	o.SerialNumber = &v
}

// GetUuid returns the Uuid field value if set, zero value otherwise.
func (o *HyperflexVolume) GetUuid() string {
	if o == nil || IsNil(o.Uuid) {
		var ret string
		return ret
	}
	return *o.Uuid
}

// GetUuidOk returns a tuple with the Uuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HyperflexVolume) GetUuidOk() (*string, bool) {
	if o == nil || IsNil(o.Uuid) {
		return nil, false
	}
	return o.Uuid, true
}

// HasUuid returns a boolean if a field has been set.
func (o *HyperflexVolume) HasUuid() bool {
	if o != nil && !IsNil(o.Uuid) {
		return true
	}

	return false
}

// SetUuid gets a reference to the given string and assigns it to the Uuid field.
func (o *HyperflexVolume) SetUuid(v string) {
	o.Uuid = &v
}

// GetVolumeAccessMode returns the VolumeAccessMode field value if set, zero value otherwise.
func (o *HyperflexVolume) GetVolumeAccessMode() string {
	if o == nil || IsNil(o.VolumeAccessMode) {
		var ret string
		return ret
	}
	return *o.VolumeAccessMode
}

// GetVolumeAccessModeOk returns a tuple with the VolumeAccessMode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HyperflexVolume) GetVolumeAccessModeOk() (*string, bool) {
	if o == nil || IsNil(o.VolumeAccessMode) {
		return nil, false
	}
	return o.VolumeAccessMode, true
}

// HasVolumeAccessMode returns a boolean if a field has been set.
func (o *HyperflexVolume) HasVolumeAccessMode() bool {
	if o != nil && !IsNil(o.VolumeAccessMode) {
		return true
	}

	return false
}

// SetVolumeAccessMode gets a reference to the given string and assigns it to the VolumeAccessMode field.
func (o *HyperflexVolume) SetVolumeAccessMode(v string) {
	o.VolumeAccessMode = &v
}

// GetVolumeCreateTime returns the VolumeCreateTime field value if set, zero value otherwise.
func (o *HyperflexVolume) GetVolumeCreateTime() time.Time {
	if o == nil || IsNil(o.VolumeCreateTime) {
		var ret time.Time
		return ret
	}
	return *o.VolumeCreateTime
}

// GetVolumeCreateTimeOk returns a tuple with the VolumeCreateTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HyperflexVolume) GetVolumeCreateTimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.VolumeCreateTime) {
		return nil, false
	}
	return o.VolumeCreateTime, true
}

// HasVolumeCreateTime returns a boolean if a field has been set.
func (o *HyperflexVolume) HasVolumeCreateTime() bool {
	if o != nil && !IsNil(o.VolumeCreateTime) {
		return true
	}

	return false
}

// SetVolumeCreateTime gets a reference to the given time.Time and assigns it to the VolumeCreateTime field.
func (o *HyperflexVolume) SetVolumeCreateTime(v time.Time) {
	o.VolumeCreateTime = &v
}

// GetVolumeMode returns the VolumeMode field value if set, zero value otherwise.
func (o *HyperflexVolume) GetVolumeMode() string {
	if o == nil || IsNil(o.VolumeMode) {
		var ret string
		return ret
	}
	return *o.VolumeMode
}

// GetVolumeModeOk returns a tuple with the VolumeMode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HyperflexVolume) GetVolumeModeOk() (*string, bool) {
	if o == nil || IsNil(o.VolumeMode) {
		return nil, false
	}
	return o.VolumeMode, true
}

// HasVolumeMode returns a boolean if a field has been set.
func (o *HyperflexVolume) HasVolumeMode() bool {
	if o != nil && !IsNil(o.VolumeMode) {
		return true
	}

	return false
}

// SetVolumeMode gets a reference to the given string and assigns it to the VolumeMode field.
func (o *HyperflexVolume) SetVolumeMode(v string) {
	o.VolumeMode = &v
}

// GetVolumeType returns the VolumeType field value if set, zero value otherwise.
func (o *HyperflexVolume) GetVolumeType() string {
	if o == nil || IsNil(o.VolumeType) {
		var ret string
		return ret
	}
	return *o.VolumeType
}

// GetVolumeTypeOk returns a tuple with the VolumeType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HyperflexVolume) GetVolumeTypeOk() (*string, bool) {
	if o == nil || IsNil(o.VolumeType) {
		return nil, false
	}
	return o.VolumeType, true
}

// HasVolumeType returns a boolean if a field has been set.
func (o *HyperflexVolume) HasVolumeType() bool {
	if o != nil && !IsNil(o.VolumeType) {
		return true
	}

	return false
}

// SetVolumeType gets a reference to the given string and assigns it to the VolumeType field.
func (o *HyperflexVolume) SetVolumeType(v string) {
	o.VolumeType = &v
}

// GetCluster returns the Cluster field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HyperflexVolume) GetCluster() HyperflexClusterRelationship {
	if o == nil || IsNil(o.Cluster.Get()) {
		var ret HyperflexClusterRelationship
		return ret
	}
	return *o.Cluster.Get()
}

// GetClusterOk returns a tuple with the Cluster field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HyperflexVolume) GetClusterOk() (*HyperflexClusterRelationship, bool) {
	if o == nil {
		return nil, false
	}
	return o.Cluster.Get(), o.Cluster.IsSet()
}

// HasCluster returns a boolean if a field has been set.
func (o *HyperflexVolume) HasCluster() bool {
	if o != nil && o.Cluster.IsSet() {
		return true
	}

	return false
}

// SetCluster gets a reference to the given NullableHyperflexClusterRelationship and assigns it to the Cluster field.
func (o *HyperflexVolume) SetCluster(v HyperflexClusterRelationship) {
	o.Cluster.Set(&v)
}

// SetClusterNil sets the value for Cluster to be an explicit nil
func (o *HyperflexVolume) SetClusterNil() {
	o.Cluster.Set(nil)
}

// UnsetCluster ensures that no value is present for Cluster, not even an explicit nil
func (o *HyperflexVolume) UnsetCluster() {
	o.Cluster.Unset()
}

// GetStorageContainer returns the StorageContainer field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HyperflexVolume) GetStorageContainer() HyperflexStorageContainerRelationship {
	if o == nil || IsNil(o.StorageContainer.Get()) {
		var ret HyperflexStorageContainerRelationship
		return ret
	}
	return *o.StorageContainer.Get()
}

// GetStorageContainerOk returns a tuple with the StorageContainer field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HyperflexVolume) GetStorageContainerOk() (*HyperflexStorageContainerRelationship, bool) {
	if o == nil {
		return nil, false
	}
	return o.StorageContainer.Get(), o.StorageContainer.IsSet()
}

// HasStorageContainer returns a boolean if a field has been set.
func (o *HyperflexVolume) HasStorageContainer() bool {
	if o != nil && o.StorageContainer.IsSet() {
		return true
	}

	return false
}

// SetStorageContainer gets a reference to the given NullableHyperflexStorageContainerRelationship and assigns it to the StorageContainer field.
func (o *HyperflexVolume) SetStorageContainer(v HyperflexStorageContainerRelationship) {
	o.StorageContainer.Set(&v)
}

// SetStorageContainerNil sets the value for StorageContainer to be an explicit nil
func (o *HyperflexVolume) SetStorageContainerNil() {
	o.StorageContainer.Set(nil)
}

// UnsetStorageContainer ensures that no value is present for StorageContainer, not even an explicit nil
func (o *HyperflexVolume) UnsetStorageContainer() {
	o.StorageContainer.Unset()
}

func (o HyperflexVolume) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o HyperflexVolume) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	serializedStorageBaseVolume, errStorageBaseVolume := json.Marshal(o.StorageBaseVolume)
	if errStorageBaseVolume != nil {
		return map[string]interface{}{}, errStorageBaseVolume
	}
	errStorageBaseVolume = json.Unmarshal([]byte(serializedStorageBaseVolume), &toSerialize)
	if errStorageBaseVolume != nil {
		return map[string]interface{}{}, errStorageBaseVolume
	}
	if _, exists := toSerialize["ClassId"]; !exists {
		toSerialize["ClassId"] = o.GetDefaultClassId()
	}
	toSerialize["ClassId"] = o.ClassId
	if _, exists := toSerialize["ObjectType"]; !exists {
		toSerialize["ObjectType"] = o.GetDefaultObjectType()
	}
	toSerialize["ObjectType"] = o.ObjectType
	if !IsNil(o.Capacity) {
		toSerialize["Capacity"] = o.Capacity
	}
	if !IsNil(o.ClientId) {
		toSerialize["ClientId"] = o.ClientId
	}
	if !IsNil(o.LastModifiedTime) {
		toSerialize["LastModifiedTime"] = o.LastModifiedTime
	}
	if !IsNil(o.LunUuid) {
		toSerialize["LunUuid"] = o.LunUuid
	}
	if !IsNil(o.SerialNumber) {
		toSerialize["SerialNumber"] = o.SerialNumber
	}
	if !IsNil(o.Uuid) {
		toSerialize["Uuid"] = o.Uuid
	}
	if !IsNil(o.VolumeAccessMode) {
		toSerialize["VolumeAccessMode"] = o.VolumeAccessMode
	}
	if !IsNil(o.VolumeCreateTime) {
		toSerialize["VolumeCreateTime"] = o.VolumeCreateTime
	}
	if !IsNil(o.VolumeMode) {
		toSerialize["VolumeMode"] = o.VolumeMode
	}
	if !IsNil(o.VolumeType) {
		toSerialize["VolumeType"] = o.VolumeType
	}
	if o.Cluster.IsSet() {
		toSerialize["Cluster"] = o.Cluster.Get()
	}
	if o.StorageContainer.IsSet() {
		toSerialize["StorageContainer"] = o.StorageContainer.Get()
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *HyperflexVolume) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"ClassId",
		"ObjectType",
	}

	// defaultValueFuncMap captures the default values for required properties.
	// These values are used when required properties are missing from the payload.
	defaultValueFuncMap := map[string]func() interface{}{
		"ClassId":    o.GetDefaultClassId,
		"ObjectType": o.GetDefaultObjectType,
	}
	var defaultValueApplied bool
	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			if _, ok := defaultValueFuncMap[requiredProperty]; ok {
				allProperties[requiredProperty] = defaultValueFuncMap[requiredProperty]()
				defaultValueApplied = true
			}
		}
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	if defaultValueApplied {
		data, err = json.Marshal(allProperties)
		if err != nil {
			return err
		}
	}
	type HyperflexVolumeWithoutEmbeddedStruct struct {
		// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.
		ClassId string `json:"ClassId"`
		// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
		ObjectType string `json:"ObjectType"`
		// Provisioned Capacity of the volume in bytes.
		Capacity *int64 `json:"Capacity,omitempty"`
		// Client (tenant) ID to which the volume belongs.
		ClientId *string `json:"ClientId,omitempty"`
		// Last modified time as UTC of the volume.
		LastModifiedTime *time.Time `json:"LastModifiedTime,omitempty"`
		// UUID of LUN associated with the volume.
		LunUuid *string `json:"LunUuid,omitempty"`
		// Serial number of the volume.
		SerialNumber *string `json:"SerialNumber,omitempty"`
		// The unique identifier for this volume.
		Uuid *string `json:"Uuid,omitempty"`
		// Access Mode of the volume. * `ReadWriteOnce` - Read write permisisons to a Virtual disk by a single virtual machine. * `ReadWriteMany` - Read write permisisons to a Virtual disk by multiple virtual machines. * `ReadOnlyMany` - Read only permisisons to a Virtual disk by multiple virtual machines. * `` - Unknown disk access mode.
		VolumeAccessMode *string `json:"VolumeAccessMode,omitempty"`
		// Volume creation time in UTC.
		VolumeCreateTime *time.Time `json:"VolumeCreateTime,omitempty"`
		// The mode of the HyperFlex volume. * `Block` - It is a Block virtual disk. * `Filesystem` - It is a File system virtual disk. * `` - Disk mode is either unknown or not supported.
		VolumeMode *string `json:"VolumeMode,omitempty"`
		// The type of the HyperFlex volume.
		VolumeType       *string                                       `json:"VolumeType,omitempty"`
		Cluster          NullableHyperflexClusterRelationship          `json:"Cluster,omitempty"`
		StorageContainer NullableHyperflexStorageContainerRelationship `json:"StorageContainer,omitempty"`
	}

	varHyperflexVolumeWithoutEmbeddedStruct := HyperflexVolumeWithoutEmbeddedStruct{}

	err = json.Unmarshal(data, &varHyperflexVolumeWithoutEmbeddedStruct)
	if err == nil {
		varHyperflexVolume := _HyperflexVolume{}
		varHyperflexVolume.ClassId = varHyperflexVolumeWithoutEmbeddedStruct.ClassId
		varHyperflexVolume.ObjectType = varHyperflexVolumeWithoutEmbeddedStruct.ObjectType
		varHyperflexVolume.Capacity = varHyperflexVolumeWithoutEmbeddedStruct.Capacity
		varHyperflexVolume.ClientId = varHyperflexVolumeWithoutEmbeddedStruct.ClientId
		varHyperflexVolume.LastModifiedTime = varHyperflexVolumeWithoutEmbeddedStruct.LastModifiedTime
		varHyperflexVolume.LunUuid = varHyperflexVolumeWithoutEmbeddedStruct.LunUuid
		varHyperflexVolume.SerialNumber = varHyperflexVolumeWithoutEmbeddedStruct.SerialNumber
		varHyperflexVolume.Uuid = varHyperflexVolumeWithoutEmbeddedStruct.Uuid
		varHyperflexVolume.VolumeAccessMode = varHyperflexVolumeWithoutEmbeddedStruct.VolumeAccessMode
		varHyperflexVolume.VolumeCreateTime = varHyperflexVolumeWithoutEmbeddedStruct.VolumeCreateTime
		varHyperflexVolume.VolumeMode = varHyperflexVolumeWithoutEmbeddedStruct.VolumeMode
		varHyperflexVolume.VolumeType = varHyperflexVolumeWithoutEmbeddedStruct.VolumeType
		varHyperflexVolume.Cluster = varHyperflexVolumeWithoutEmbeddedStruct.Cluster
		varHyperflexVolume.StorageContainer = varHyperflexVolumeWithoutEmbeddedStruct.StorageContainer
		*o = HyperflexVolume(varHyperflexVolume)
	} else {
		return err
	}

	varHyperflexVolume := _HyperflexVolume{}

	err = json.Unmarshal(data, &varHyperflexVolume)
	if err == nil {
		o.StorageBaseVolume = varHyperflexVolume.StorageBaseVolume
	} else {
		return err
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "ClassId")
		delete(additionalProperties, "ObjectType")
		delete(additionalProperties, "Capacity")
		delete(additionalProperties, "ClientId")
		delete(additionalProperties, "LastModifiedTime")
		delete(additionalProperties, "LunUuid")
		delete(additionalProperties, "SerialNumber")
		delete(additionalProperties, "Uuid")
		delete(additionalProperties, "VolumeAccessMode")
		delete(additionalProperties, "VolumeCreateTime")
		delete(additionalProperties, "VolumeMode")
		delete(additionalProperties, "VolumeType")
		delete(additionalProperties, "Cluster")
		delete(additionalProperties, "StorageContainer")

		// remove fields from embedded structs
		reflectStorageBaseVolume := reflect.ValueOf(o.StorageBaseVolume)
		for i := 0; i < reflectStorageBaseVolume.Type().NumField(); i++ {
			t := reflectStorageBaseVolume.Type().Field(i)

			if jsonTag := t.Tag.Get("json"); jsonTag != "" {
				fieldName := ""
				if commaIdx := strings.Index(jsonTag, ","); commaIdx > 0 {
					fieldName = jsonTag[:commaIdx]
				} else {
					fieldName = jsonTag
				}
				if fieldName != "AdditionalProperties" {
					delete(additionalProperties, fieldName)
				}
			}
		}

		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableHyperflexVolume struct {
	value *HyperflexVolume
	isSet bool
}

func (v NullableHyperflexVolume) Get() *HyperflexVolume {
	return v.value
}

func (v *NullableHyperflexVolume) Set(val *HyperflexVolume) {
	v.value = val
	v.isSet = true
}

func (v NullableHyperflexVolume) IsSet() bool {
	return v.isSet
}

func (v *NullableHyperflexVolume) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHyperflexVolume(val *HyperflexVolume) *NullableHyperflexVolume {
	return &NullableHyperflexVolume{value: val, isSet: true}
}

func (v NullableHyperflexVolume) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHyperflexVolume) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
