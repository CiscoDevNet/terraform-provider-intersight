/*
Cisco Intersight

Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations. The Intersight OpenAPI document defines the complete set of properties that are returned in the HTTP response. From that perspective, a client can expect that no additional properties are returned, unless these properties are explicitly defined in the OpenAPI document. However, when a client uses an older version of the Intersight OpenAPI document, the server may send additional properties because the software is more recent than the client. In that case, the client may receive properties that it does not know about. Some generated SDKs perform a strict validation of the HTTP response body against the OpenAPI document.

API version: 1.0.11-2025101412
Contact: intersight@cisco.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package intersight

import (
	"encoding/json"
	"fmt"
	"reflect"
	"strings"
	"time"
)

// checks if the FabricSecKey type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FabricSecKey{}

// FabricSecKey A security key used for encrypting and decrypting data frames to ensure secure communication between devices.
type FabricSecKey struct {
	MoBaseComplexType
	// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.
	ClassId string `json:"ClassId"`
	// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
	ObjectType string `json:"ObjectType"`
	// The cryptographic algorithm that employs the cipher-based message authentication code (CMAC) mode of operation with advanced encryption standard (AES). * `AES_256_CMAC` - Uses the AES (Advanced Encryption Standard) algorithm with a 256-bit key to generate a CMAC. * `AES_128_CMAC` - Uses the AES (Advanced Encryption Standard) algorithm with a 128-bit key to generate a CMAC.
	CryptographicAlgorithm *string `json:"CryptographicAlgorithm,omitempty"`
	// Must have an even number of hexadecimal characters (including 0-9 and A-F, only) with a length between 2 and 64 characters. For example, \"10\", \"2000\", \"ABCD1234\".
	Id *string `json:"Id,omitempty" validate:"regexp=^[0-9A-Fa-f]{2}([0-9A-Fa-f]{2}){0,31}$"`
	// Indicates whether the value of the 'octetString' property has been set.
	IsOctetStringSet *bool `json:"IsOctetStringSet,omitempty"`
	// The type of encryption used for the specified key. * `Type-0` - No encryption for the specified octetString. * `Type-6` - Proprietary advanced encryption standard for the specified octetString. * `Type-7` - Proprietary insecure encryption for the specified octetString.
	KeyType *string `json:"KeyType,omitempty"`
	// The key octet string is a shared secret used in cryptographic operations. The valid size and format of the octet string depend on the selected KeyCryptographicAlgorithm and KeyEncryptionType. It should start with the character 'J'.
	OctetString *string `json:"OctetString,omitempty"`
	// The key lifetime duration in seconds after the start time. If a non-zero value is configured for the duration, the end time configuration for the key lifetime is ignored.
	SendLifetimeDuration *int64 `json:"SendLifetimeDuration,omitempty"`
	// The time of day and date when the key becomes inactive.
	SendLifetimeEndTime *time.Time `json:"SendLifetimeEndTime,omitempty"`
	// Indicates that the key remains active indefinitely after the specified start time. When this parameter is set, the end time and duration configurations for the key lifetime are ignored.
	SendLifetimeInfinite *bool `json:"SendLifetimeInfinite,omitempty"`
	// The time of day and date when the key becomes active.
	SendLifetimeStartTime *time.Time `json:"SendLifetimeStartTime,omitempty"`
	// The time zone used for key lifetime configurations. * `UTC` - The Universal Time (UTC) for key lifetime configurations. * `Local` - The local time zone of the device for key lifetime configurations.
	SendLifetimeTimeZone *string `json:"SendLifetimeTimeZone,omitempty"`
	// Indicates that the key is always active. When this parameter is set, all other key lifetime configurations are ignored.
	SendLifetimeUnlimited *bool `json:"SendLifetimeUnlimited,omitempty"`
	AdditionalProperties  map[string]interface{}
}

type _FabricSecKey FabricSecKey

// NewFabricSecKey instantiates a new FabricSecKey object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFabricSecKey(classId string, objectType string) *FabricSecKey {
	this := FabricSecKey{}
	this.ClassId = classId
	this.ObjectType = objectType
	var cryptographicAlgorithm string = "AES_256_CMAC"
	this.CryptographicAlgorithm = &cryptographicAlgorithm
	var keyType string = "Type-0"
	this.KeyType = &keyType
	var sendLifetimeInfinite bool = false
	this.SendLifetimeInfinite = &sendLifetimeInfinite
	var sendLifetimeTimeZone string = "UTC"
	this.SendLifetimeTimeZone = &sendLifetimeTimeZone
	var sendLifetimeUnlimited bool = true
	this.SendLifetimeUnlimited = &sendLifetimeUnlimited
	return &this
}

// NewFabricSecKeyWithDefaults instantiates a new FabricSecKey object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFabricSecKeyWithDefaults() *FabricSecKey {
	this := FabricSecKey{}
	var classId string = "fabric.SecKey"
	this.ClassId = classId
	var objectType string = "fabric.SecKey"
	this.ObjectType = objectType
	var cryptographicAlgorithm string = "AES_256_CMAC"
	this.CryptographicAlgorithm = &cryptographicAlgorithm
	var keyType string = "Type-0"
	this.KeyType = &keyType
	var sendLifetimeInfinite bool = false
	this.SendLifetimeInfinite = &sendLifetimeInfinite
	var sendLifetimeTimeZone string = "UTC"
	this.SendLifetimeTimeZone = &sendLifetimeTimeZone
	var sendLifetimeUnlimited bool = true
	this.SendLifetimeUnlimited = &sendLifetimeUnlimited
	return &this
}

// GetClassId returns the ClassId field value
func (o *FabricSecKey) GetClassId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ClassId
}

// GetClassIdOk returns a tuple with the ClassId field value
// and a boolean to check if the value has been set.
func (o *FabricSecKey) GetClassIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ClassId, true
}

// SetClassId sets field value
func (o *FabricSecKey) SetClassId(v string) {
	o.ClassId = v
}

// GetDefaultClassId returns the default value "fabric.SecKey" of the ClassId field.
func (o *FabricSecKey) GetDefaultClassId() interface{} {
	return "fabric.SecKey"
}

// GetObjectType returns the ObjectType field value
func (o *FabricSecKey) GetObjectType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ObjectType
}

// GetObjectTypeOk returns a tuple with the ObjectType field value
// and a boolean to check if the value has been set.
func (o *FabricSecKey) GetObjectTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ObjectType, true
}

// SetObjectType sets field value
func (o *FabricSecKey) SetObjectType(v string) {
	o.ObjectType = v
}

// GetDefaultObjectType returns the default value "fabric.SecKey" of the ObjectType field.
func (o *FabricSecKey) GetDefaultObjectType() interface{} {
	return "fabric.SecKey"
}

// GetCryptographicAlgorithm returns the CryptographicAlgorithm field value if set, zero value otherwise.
func (o *FabricSecKey) GetCryptographicAlgorithm() string {
	if o == nil || IsNil(o.CryptographicAlgorithm) {
		var ret string
		return ret
	}
	return *o.CryptographicAlgorithm
}

// GetCryptographicAlgorithmOk returns a tuple with the CryptographicAlgorithm field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FabricSecKey) GetCryptographicAlgorithmOk() (*string, bool) {
	if o == nil || IsNil(o.CryptographicAlgorithm) {
		return nil, false
	}
	return o.CryptographicAlgorithm, true
}

// HasCryptographicAlgorithm returns a boolean if a field has been set.
func (o *FabricSecKey) HasCryptographicAlgorithm() bool {
	if o != nil && !IsNil(o.CryptographicAlgorithm) {
		return true
	}

	return false
}

// SetCryptographicAlgorithm gets a reference to the given string and assigns it to the CryptographicAlgorithm field.
func (o *FabricSecKey) SetCryptographicAlgorithm(v string) {
	o.CryptographicAlgorithm = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *FabricSecKey) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FabricSecKey) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *FabricSecKey) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *FabricSecKey) SetId(v string) {
	o.Id = &v
}

// GetIsOctetStringSet returns the IsOctetStringSet field value if set, zero value otherwise.
func (o *FabricSecKey) GetIsOctetStringSet() bool {
	if o == nil || IsNil(o.IsOctetStringSet) {
		var ret bool
		return ret
	}
	return *o.IsOctetStringSet
}

// GetIsOctetStringSetOk returns a tuple with the IsOctetStringSet field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FabricSecKey) GetIsOctetStringSetOk() (*bool, bool) {
	if o == nil || IsNil(o.IsOctetStringSet) {
		return nil, false
	}
	return o.IsOctetStringSet, true
}

// HasIsOctetStringSet returns a boolean if a field has been set.
func (o *FabricSecKey) HasIsOctetStringSet() bool {
	if o != nil && !IsNil(o.IsOctetStringSet) {
		return true
	}

	return false
}

// SetIsOctetStringSet gets a reference to the given bool and assigns it to the IsOctetStringSet field.
func (o *FabricSecKey) SetIsOctetStringSet(v bool) {
	o.IsOctetStringSet = &v
}

// GetKeyType returns the KeyType field value if set, zero value otherwise.
func (o *FabricSecKey) GetKeyType() string {
	if o == nil || IsNil(o.KeyType) {
		var ret string
		return ret
	}
	return *o.KeyType
}

// GetKeyTypeOk returns a tuple with the KeyType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FabricSecKey) GetKeyTypeOk() (*string, bool) {
	if o == nil || IsNil(o.KeyType) {
		return nil, false
	}
	return o.KeyType, true
}

// HasKeyType returns a boolean if a field has been set.
func (o *FabricSecKey) HasKeyType() bool {
	if o != nil && !IsNil(o.KeyType) {
		return true
	}

	return false
}

// SetKeyType gets a reference to the given string and assigns it to the KeyType field.
func (o *FabricSecKey) SetKeyType(v string) {
	o.KeyType = &v
}

// GetOctetString returns the OctetString field value if set, zero value otherwise.
func (o *FabricSecKey) GetOctetString() string {
	if o == nil || IsNil(o.OctetString) {
		var ret string
		return ret
	}
	return *o.OctetString
}

// GetOctetStringOk returns a tuple with the OctetString field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FabricSecKey) GetOctetStringOk() (*string, bool) {
	if o == nil || IsNil(o.OctetString) {
		return nil, false
	}
	return o.OctetString, true
}

// HasOctetString returns a boolean if a field has been set.
func (o *FabricSecKey) HasOctetString() bool {
	if o != nil && !IsNil(o.OctetString) {
		return true
	}

	return false
}

// SetOctetString gets a reference to the given string and assigns it to the OctetString field.
func (o *FabricSecKey) SetOctetString(v string) {
	o.OctetString = &v
}

// GetSendLifetimeDuration returns the SendLifetimeDuration field value if set, zero value otherwise.
func (o *FabricSecKey) GetSendLifetimeDuration() int64 {
	if o == nil || IsNil(o.SendLifetimeDuration) {
		var ret int64
		return ret
	}
	return *o.SendLifetimeDuration
}

// GetSendLifetimeDurationOk returns a tuple with the SendLifetimeDuration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FabricSecKey) GetSendLifetimeDurationOk() (*int64, bool) {
	if o == nil || IsNil(o.SendLifetimeDuration) {
		return nil, false
	}
	return o.SendLifetimeDuration, true
}

// HasSendLifetimeDuration returns a boolean if a field has been set.
func (o *FabricSecKey) HasSendLifetimeDuration() bool {
	if o != nil && !IsNil(o.SendLifetimeDuration) {
		return true
	}

	return false
}

// SetSendLifetimeDuration gets a reference to the given int64 and assigns it to the SendLifetimeDuration field.
func (o *FabricSecKey) SetSendLifetimeDuration(v int64) {
	o.SendLifetimeDuration = &v
}

// GetSendLifetimeEndTime returns the SendLifetimeEndTime field value if set, zero value otherwise.
func (o *FabricSecKey) GetSendLifetimeEndTime() time.Time {
	if o == nil || IsNil(o.SendLifetimeEndTime) {
		var ret time.Time
		return ret
	}
	return *o.SendLifetimeEndTime
}

// GetSendLifetimeEndTimeOk returns a tuple with the SendLifetimeEndTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FabricSecKey) GetSendLifetimeEndTimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.SendLifetimeEndTime) {
		return nil, false
	}
	return o.SendLifetimeEndTime, true
}

// HasSendLifetimeEndTime returns a boolean if a field has been set.
func (o *FabricSecKey) HasSendLifetimeEndTime() bool {
	if o != nil && !IsNil(o.SendLifetimeEndTime) {
		return true
	}

	return false
}

// SetSendLifetimeEndTime gets a reference to the given time.Time and assigns it to the SendLifetimeEndTime field.
func (o *FabricSecKey) SetSendLifetimeEndTime(v time.Time) {
	o.SendLifetimeEndTime = &v
}

// GetSendLifetimeInfinite returns the SendLifetimeInfinite field value if set, zero value otherwise.
func (o *FabricSecKey) GetSendLifetimeInfinite() bool {
	if o == nil || IsNil(o.SendLifetimeInfinite) {
		var ret bool
		return ret
	}
	return *o.SendLifetimeInfinite
}

// GetSendLifetimeInfiniteOk returns a tuple with the SendLifetimeInfinite field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FabricSecKey) GetSendLifetimeInfiniteOk() (*bool, bool) {
	if o == nil || IsNil(o.SendLifetimeInfinite) {
		return nil, false
	}
	return o.SendLifetimeInfinite, true
}

// HasSendLifetimeInfinite returns a boolean if a field has been set.
func (o *FabricSecKey) HasSendLifetimeInfinite() bool {
	if o != nil && !IsNil(o.SendLifetimeInfinite) {
		return true
	}

	return false
}

// SetSendLifetimeInfinite gets a reference to the given bool and assigns it to the SendLifetimeInfinite field.
func (o *FabricSecKey) SetSendLifetimeInfinite(v bool) {
	o.SendLifetimeInfinite = &v
}

// GetSendLifetimeStartTime returns the SendLifetimeStartTime field value if set, zero value otherwise.
func (o *FabricSecKey) GetSendLifetimeStartTime() time.Time {
	if o == nil || IsNil(o.SendLifetimeStartTime) {
		var ret time.Time
		return ret
	}
	return *o.SendLifetimeStartTime
}

// GetSendLifetimeStartTimeOk returns a tuple with the SendLifetimeStartTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FabricSecKey) GetSendLifetimeStartTimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.SendLifetimeStartTime) {
		return nil, false
	}
	return o.SendLifetimeStartTime, true
}

// HasSendLifetimeStartTime returns a boolean if a field has been set.
func (o *FabricSecKey) HasSendLifetimeStartTime() bool {
	if o != nil && !IsNil(o.SendLifetimeStartTime) {
		return true
	}

	return false
}

// SetSendLifetimeStartTime gets a reference to the given time.Time and assigns it to the SendLifetimeStartTime field.
func (o *FabricSecKey) SetSendLifetimeStartTime(v time.Time) {
	o.SendLifetimeStartTime = &v
}

// GetSendLifetimeTimeZone returns the SendLifetimeTimeZone field value if set, zero value otherwise.
func (o *FabricSecKey) GetSendLifetimeTimeZone() string {
	if o == nil || IsNil(o.SendLifetimeTimeZone) {
		var ret string
		return ret
	}
	return *o.SendLifetimeTimeZone
}

// GetSendLifetimeTimeZoneOk returns a tuple with the SendLifetimeTimeZone field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FabricSecKey) GetSendLifetimeTimeZoneOk() (*string, bool) {
	if o == nil || IsNil(o.SendLifetimeTimeZone) {
		return nil, false
	}
	return o.SendLifetimeTimeZone, true
}

// HasSendLifetimeTimeZone returns a boolean if a field has been set.
func (o *FabricSecKey) HasSendLifetimeTimeZone() bool {
	if o != nil && !IsNil(o.SendLifetimeTimeZone) {
		return true
	}

	return false
}

// SetSendLifetimeTimeZone gets a reference to the given string and assigns it to the SendLifetimeTimeZone field.
func (o *FabricSecKey) SetSendLifetimeTimeZone(v string) {
	o.SendLifetimeTimeZone = &v
}

// GetSendLifetimeUnlimited returns the SendLifetimeUnlimited field value if set, zero value otherwise.
func (o *FabricSecKey) GetSendLifetimeUnlimited() bool {
	if o == nil || IsNil(o.SendLifetimeUnlimited) {
		var ret bool
		return ret
	}
	return *o.SendLifetimeUnlimited
}

// GetSendLifetimeUnlimitedOk returns a tuple with the SendLifetimeUnlimited field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FabricSecKey) GetSendLifetimeUnlimitedOk() (*bool, bool) {
	if o == nil || IsNil(o.SendLifetimeUnlimited) {
		return nil, false
	}
	return o.SendLifetimeUnlimited, true
}

// HasSendLifetimeUnlimited returns a boolean if a field has been set.
func (o *FabricSecKey) HasSendLifetimeUnlimited() bool {
	if o != nil && !IsNil(o.SendLifetimeUnlimited) {
		return true
	}

	return false
}

// SetSendLifetimeUnlimited gets a reference to the given bool and assigns it to the SendLifetimeUnlimited field.
func (o *FabricSecKey) SetSendLifetimeUnlimited(v bool) {
	o.SendLifetimeUnlimited = &v
}

func (o FabricSecKey) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FabricSecKey) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	serializedMoBaseComplexType, errMoBaseComplexType := json.Marshal(o.MoBaseComplexType)
	if errMoBaseComplexType != nil {
		return map[string]interface{}{}, errMoBaseComplexType
	}
	errMoBaseComplexType = json.Unmarshal([]byte(serializedMoBaseComplexType), &toSerialize)
	if errMoBaseComplexType != nil {
		return map[string]interface{}{}, errMoBaseComplexType
	}
	if _, exists := toSerialize["ClassId"]; !exists {
		toSerialize["ClassId"] = o.GetDefaultClassId()
	}
	toSerialize["ClassId"] = o.ClassId
	if _, exists := toSerialize["ObjectType"]; !exists {
		toSerialize["ObjectType"] = o.GetDefaultObjectType()
	}
	toSerialize["ObjectType"] = o.ObjectType
	if !IsNil(o.CryptographicAlgorithm) {
		toSerialize["CryptographicAlgorithm"] = o.CryptographicAlgorithm
	}
	if !IsNil(o.Id) {
		toSerialize["Id"] = o.Id
	}
	if !IsNil(o.IsOctetStringSet) {
		toSerialize["IsOctetStringSet"] = o.IsOctetStringSet
	}
	if !IsNil(o.KeyType) {
		toSerialize["KeyType"] = o.KeyType
	}
	if !IsNil(o.OctetString) {
		toSerialize["OctetString"] = o.OctetString
	}
	if !IsNil(o.SendLifetimeDuration) {
		toSerialize["SendLifetimeDuration"] = o.SendLifetimeDuration
	}
	if !IsNil(o.SendLifetimeEndTime) {
		toSerialize["SendLifetimeEndTime"] = o.SendLifetimeEndTime
	}
	if !IsNil(o.SendLifetimeInfinite) {
		toSerialize["SendLifetimeInfinite"] = o.SendLifetimeInfinite
	}
	if !IsNil(o.SendLifetimeStartTime) {
		toSerialize["SendLifetimeStartTime"] = o.SendLifetimeStartTime
	}
	if !IsNil(o.SendLifetimeTimeZone) {
		toSerialize["SendLifetimeTimeZone"] = o.SendLifetimeTimeZone
	}
	if !IsNil(o.SendLifetimeUnlimited) {
		toSerialize["SendLifetimeUnlimited"] = o.SendLifetimeUnlimited
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *FabricSecKey) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"ClassId",
		"ObjectType",
	}

	// defaultValueFuncMap captures the default values for required properties.
	// These values are used when required properties are missing from the payload.
	defaultValueFuncMap := map[string]func() interface{}{
		"ClassId":    o.GetDefaultClassId,
		"ObjectType": o.GetDefaultObjectType,
	}
	var defaultValueApplied bool
	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			if _, ok := defaultValueFuncMap[requiredProperty]; ok {
				allProperties[requiredProperty] = defaultValueFuncMap[requiredProperty]()
				defaultValueApplied = true
			}
		}
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	if defaultValueApplied {
		data, err = json.Marshal(allProperties)
		if err != nil {
			return err
		}
	}
	type FabricSecKeyWithoutEmbeddedStruct struct {
		// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.
		ClassId string `json:"ClassId"`
		// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
		ObjectType string `json:"ObjectType"`
		// The cryptographic algorithm that employs the cipher-based message authentication code (CMAC) mode of operation with advanced encryption standard (AES). * `AES_256_CMAC` - Uses the AES (Advanced Encryption Standard) algorithm with a 256-bit key to generate a CMAC. * `AES_128_CMAC` - Uses the AES (Advanced Encryption Standard) algorithm with a 128-bit key to generate a CMAC.
		CryptographicAlgorithm *string `json:"CryptographicAlgorithm,omitempty"`
		// Must have an even number of hexadecimal characters (including 0-9 and A-F, only) with a length between 2 and 64 characters. For example, \"10\", \"2000\", \"ABCD1234\".
		Id *string `json:"Id,omitempty" validate:"regexp=^[0-9A-Fa-f]{2}([0-9A-Fa-f]{2}){0,31}$"`
		// Indicates whether the value of the 'octetString' property has been set.
		IsOctetStringSet *bool `json:"IsOctetStringSet,omitempty"`
		// The type of encryption used for the specified key. * `Type-0` - No encryption for the specified octetString. * `Type-6` - Proprietary advanced encryption standard for the specified octetString. * `Type-7` - Proprietary insecure encryption for the specified octetString.
		KeyType *string `json:"KeyType,omitempty"`
		// The key octet string is a shared secret used in cryptographic operations. The valid size and format of the octet string depend on the selected KeyCryptographicAlgorithm and KeyEncryptionType. It should start with the character 'J'.
		OctetString *string `json:"OctetString,omitempty"`
		// The key lifetime duration in seconds after the start time. If a non-zero value is configured for the duration, the end time configuration for the key lifetime is ignored.
		SendLifetimeDuration *int64 `json:"SendLifetimeDuration,omitempty"`
		// The time of day and date when the key becomes inactive.
		SendLifetimeEndTime *time.Time `json:"SendLifetimeEndTime,omitempty"`
		// Indicates that the key remains active indefinitely after the specified start time. When this parameter is set, the end time and duration configurations for the key lifetime are ignored.
		SendLifetimeInfinite *bool `json:"SendLifetimeInfinite,omitempty"`
		// The time of day and date when the key becomes active.
		SendLifetimeStartTime *time.Time `json:"SendLifetimeStartTime,omitempty"`
		// The time zone used for key lifetime configurations. * `UTC` - The Universal Time (UTC) for key lifetime configurations. * `Local` - The local time zone of the device for key lifetime configurations.
		SendLifetimeTimeZone *string `json:"SendLifetimeTimeZone,omitempty"`
		// Indicates that the key is always active. When this parameter is set, all other key lifetime configurations are ignored.
		SendLifetimeUnlimited *bool `json:"SendLifetimeUnlimited,omitempty"`
	}

	varFabricSecKeyWithoutEmbeddedStruct := FabricSecKeyWithoutEmbeddedStruct{}

	err = json.Unmarshal(data, &varFabricSecKeyWithoutEmbeddedStruct)
	if err == nil {
		varFabricSecKey := _FabricSecKey{}
		varFabricSecKey.ClassId = varFabricSecKeyWithoutEmbeddedStruct.ClassId
		varFabricSecKey.ObjectType = varFabricSecKeyWithoutEmbeddedStruct.ObjectType
		varFabricSecKey.CryptographicAlgorithm = varFabricSecKeyWithoutEmbeddedStruct.CryptographicAlgorithm
		varFabricSecKey.Id = varFabricSecKeyWithoutEmbeddedStruct.Id
		varFabricSecKey.IsOctetStringSet = varFabricSecKeyWithoutEmbeddedStruct.IsOctetStringSet
		varFabricSecKey.KeyType = varFabricSecKeyWithoutEmbeddedStruct.KeyType
		varFabricSecKey.OctetString = varFabricSecKeyWithoutEmbeddedStruct.OctetString
		varFabricSecKey.SendLifetimeDuration = varFabricSecKeyWithoutEmbeddedStruct.SendLifetimeDuration
		varFabricSecKey.SendLifetimeEndTime = varFabricSecKeyWithoutEmbeddedStruct.SendLifetimeEndTime
		varFabricSecKey.SendLifetimeInfinite = varFabricSecKeyWithoutEmbeddedStruct.SendLifetimeInfinite
		varFabricSecKey.SendLifetimeStartTime = varFabricSecKeyWithoutEmbeddedStruct.SendLifetimeStartTime
		varFabricSecKey.SendLifetimeTimeZone = varFabricSecKeyWithoutEmbeddedStruct.SendLifetimeTimeZone
		varFabricSecKey.SendLifetimeUnlimited = varFabricSecKeyWithoutEmbeddedStruct.SendLifetimeUnlimited
		*o = FabricSecKey(varFabricSecKey)
	} else {
		return err
	}

	varFabricSecKey := _FabricSecKey{}

	err = json.Unmarshal(data, &varFabricSecKey)
	if err == nil {
		o.MoBaseComplexType = varFabricSecKey.MoBaseComplexType
	} else {
		return err
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "ClassId")
		delete(additionalProperties, "ObjectType")
		delete(additionalProperties, "CryptographicAlgorithm")
		delete(additionalProperties, "Id")
		delete(additionalProperties, "IsOctetStringSet")
		delete(additionalProperties, "KeyType")
		delete(additionalProperties, "OctetString")
		delete(additionalProperties, "SendLifetimeDuration")
		delete(additionalProperties, "SendLifetimeEndTime")
		delete(additionalProperties, "SendLifetimeInfinite")
		delete(additionalProperties, "SendLifetimeStartTime")
		delete(additionalProperties, "SendLifetimeTimeZone")
		delete(additionalProperties, "SendLifetimeUnlimited")

		// remove fields from embedded structs
		reflectMoBaseComplexType := reflect.ValueOf(o.MoBaseComplexType)
		for i := 0; i < reflectMoBaseComplexType.Type().NumField(); i++ {
			t := reflectMoBaseComplexType.Type().Field(i)

			if jsonTag := t.Tag.Get("json"); jsonTag != "" {
				fieldName := ""
				if commaIdx := strings.Index(jsonTag, ","); commaIdx > 0 {
					fieldName = jsonTag[:commaIdx]
				} else {
					fieldName = jsonTag
				}
				if fieldName != "AdditionalProperties" {
					delete(additionalProperties, fieldName)
				}
			}
		}

		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableFabricSecKey struct {
	value *FabricSecKey
	isSet bool
}

func (v NullableFabricSecKey) Get() *FabricSecKey {
	return v.value
}

func (v *NullableFabricSecKey) Set(val *FabricSecKey) {
	v.value = val
	v.isSet = true
}

func (v NullableFabricSecKey) IsSet() bool {
	return v.isSet
}

func (v *NullableFabricSecKey) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFabricSecKey(val *FabricSecKey) *NullableFabricSecKey {
	return &NullableFabricSecKey{value: val, isSet: true}
}

func (v NullableFabricSecKey) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFabricSecKey) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
