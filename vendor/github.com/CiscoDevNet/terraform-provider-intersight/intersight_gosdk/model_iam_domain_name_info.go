/*
Cisco Intersight

Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations. The Intersight OpenAPI document defines the complete set of properties that are returned in the HTTP response. From that perspective, a client can expect that no additional properties are returned, unless these properties are explicitly defined in the OpenAPI document. However, when a client uses an older version of the Intersight OpenAPI document, the server may send additional properties because the software is more recent than the client. In that case, the client may receive properties that it does not know about. Some generated SDKs perform a strict validation of the HTTP response body against the OpenAPI document.

API version: 1.0.11-18775
Contact: intersight@cisco.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package intersight

import (
	"encoding/json"
	"fmt"
	"reflect"
	"strings"
	"time"
)

// checks if the IamDomainNameInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &IamDomainNameInfo{}

// IamDomainNameInfo The organisation's domain name such as cisco.com that has been used to log in to Intersight.
type IamDomainNameInfo struct {
	MoBaseMo
	// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.
	ClassId string `json:"ClassId"`
	// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
	ObjectType string `json:"ObjectType"`
	// Regenerate TXT record and validate TXT record. * `generate` - Generate TXT record for domain name ownership validation. * `verify` - Verify TXT record for domain name ownership validation.
	Action *string `json:"Action,omitempty"`
	// Email domain name. When a user enters an email during login in the Intersight home page, the IdP is picked by matching this domain name with the email domain name for authentication.
	DomainName     *string                   `json:"DomainName,omitempty" validate:"regexp=^$|^[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$"`
	FailureDetails NullableIamFailureDetails `json:"FailureDetails,omitempty"`
	// Expiration time of TXT Record.
	RecordExpiryTime *time.Time `json:"RecordExpiryTime,omitempty"`
	// Status of Domain Ownership Verification. * `Pending` - Domain verification is pending. * `Failed` - Domain verification failed. Re-generate token and verify. * `Verified` - Domain verification succeeded. * `Expired` - TXT Record for Domain verification expired.
	Status *string `json:"Status,omitempty"`
	// Resource record used to verify Domain Ownership. Users need to verify the domain by adding the TXT Record in their DNS Host.
	TxtRecord            *string                        `json:"TxtRecord,omitempty"`
	Account              NullableIamAccountRelationship `json:"Account,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _IamDomainNameInfo IamDomainNameInfo

// NewIamDomainNameInfo instantiates a new IamDomainNameInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIamDomainNameInfo(classId string, objectType string) *IamDomainNameInfo {
	this := IamDomainNameInfo{}
	this.ClassId = classId
	this.ObjectType = objectType
	var action string = "generate"
	this.Action = &action
	return &this
}

// NewIamDomainNameInfoWithDefaults instantiates a new IamDomainNameInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIamDomainNameInfoWithDefaults() *IamDomainNameInfo {
	this := IamDomainNameInfo{}
	var classId string = "iam.DomainNameInfo"
	this.ClassId = classId
	var objectType string = "iam.DomainNameInfo"
	this.ObjectType = objectType
	var action string = "generate"
	this.Action = &action
	return &this
}

// GetClassId returns the ClassId field value
func (o *IamDomainNameInfo) GetClassId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ClassId
}

// GetClassIdOk returns a tuple with the ClassId field value
// and a boolean to check if the value has been set.
func (o *IamDomainNameInfo) GetClassIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ClassId, true
}

// SetClassId sets field value
func (o *IamDomainNameInfo) SetClassId(v string) {
	o.ClassId = v
}

// GetDefaultClassId returns the default value "iam.DomainNameInfo" of the ClassId field.
func (o *IamDomainNameInfo) GetDefaultClassId() interface{} {
	return "iam.DomainNameInfo"
}

// GetObjectType returns the ObjectType field value
func (o *IamDomainNameInfo) GetObjectType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ObjectType
}

// GetObjectTypeOk returns a tuple with the ObjectType field value
// and a boolean to check if the value has been set.
func (o *IamDomainNameInfo) GetObjectTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ObjectType, true
}

// SetObjectType sets field value
func (o *IamDomainNameInfo) SetObjectType(v string) {
	o.ObjectType = v
}

// GetDefaultObjectType returns the default value "iam.DomainNameInfo" of the ObjectType field.
func (o *IamDomainNameInfo) GetDefaultObjectType() interface{} {
	return "iam.DomainNameInfo"
}

// GetAction returns the Action field value if set, zero value otherwise.
func (o *IamDomainNameInfo) GetAction() string {
	if o == nil || IsNil(o.Action) {
		var ret string
		return ret
	}
	return *o.Action
}

// GetActionOk returns a tuple with the Action field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IamDomainNameInfo) GetActionOk() (*string, bool) {
	if o == nil || IsNil(o.Action) {
		return nil, false
	}
	return o.Action, true
}

// HasAction returns a boolean if a field has been set.
func (o *IamDomainNameInfo) HasAction() bool {
	if o != nil && !IsNil(o.Action) {
		return true
	}

	return false
}

// SetAction gets a reference to the given string and assigns it to the Action field.
func (o *IamDomainNameInfo) SetAction(v string) {
	o.Action = &v
}

// GetDomainName returns the DomainName field value if set, zero value otherwise.
func (o *IamDomainNameInfo) GetDomainName() string {
	if o == nil || IsNil(o.DomainName) {
		var ret string
		return ret
	}
	return *o.DomainName
}

// GetDomainNameOk returns a tuple with the DomainName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IamDomainNameInfo) GetDomainNameOk() (*string, bool) {
	if o == nil || IsNil(o.DomainName) {
		return nil, false
	}
	return o.DomainName, true
}

// HasDomainName returns a boolean if a field has been set.
func (o *IamDomainNameInfo) HasDomainName() bool {
	if o != nil && !IsNil(o.DomainName) {
		return true
	}

	return false
}

// SetDomainName gets a reference to the given string and assigns it to the DomainName field.
func (o *IamDomainNameInfo) SetDomainName(v string) {
	o.DomainName = &v
}

// GetFailureDetails returns the FailureDetails field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IamDomainNameInfo) GetFailureDetails() IamFailureDetails {
	if o == nil || IsNil(o.FailureDetails.Get()) {
		var ret IamFailureDetails
		return ret
	}
	return *o.FailureDetails.Get()
}

// GetFailureDetailsOk returns a tuple with the FailureDetails field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IamDomainNameInfo) GetFailureDetailsOk() (*IamFailureDetails, bool) {
	if o == nil {
		return nil, false
	}
	return o.FailureDetails.Get(), o.FailureDetails.IsSet()
}

// HasFailureDetails returns a boolean if a field has been set.
func (o *IamDomainNameInfo) HasFailureDetails() bool {
	if o != nil && o.FailureDetails.IsSet() {
		return true
	}

	return false
}

// SetFailureDetails gets a reference to the given NullableIamFailureDetails and assigns it to the FailureDetails field.
func (o *IamDomainNameInfo) SetFailureDetails(v IamFailureDetails) {
	o.FailureDetails.Set(&v)
}

// SetFailureDetailsNil sets the value for FailureDetails to be an explicit nil
func (o *IamDomainNameInfo) SetFailureDetailsNil() {
	o.FailureDetails.Set(nil)
}

// UnsetFailureDetails ensures that no value is present for FailureDetails, not even an explicit nil
func (o *IamDomainNameInfo) UnsetFailureDetails() {
	o.FailureDetails.Unset()
}

// GetRecordExpiryTime returns the RecordExpiryTime field value if set, zero value otherwise.
func (o *IamDomainNameInfo) GetRecordExpiryTime() time.Time {
	if o == nil || IsNil(o.RecordExpiryTime) {
		var ret time.Time
		return ret
	}
	return *o.RecordExpiryTime
}

// GetRecordExpiryTimeOk returns a tuple with the RecordExpiryTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IamDomainNameInfo) GetRecordExpiryTimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.RecordExpiryTime) {
		return nil, false
	}
	return o.RecordExpiryTime, true
}

// HasRecordExpiryTime returns a boolean if a field has been set.
func (o *IamDomainNameInfo) HasRecordExpiryTime() bool {
	if o != nil && !IsNil(o.RecordExpiryTime) {
		return true
	}

	return false
}

// SetRecordExpiryTime gets a reference to the given time.Time and assigns it to the RecordExpiryTime field.
func (o *IamDomainNameInfo) SetRecordExpiryTime(v time.Time) {
	o.RecordExpiryTime = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *IamDomainNameInfo) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IamDomainNameInfo) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *IamDomainNameInfo) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *IamDomainNameInfo) SetStatus(v string) {
	o.Status = &v
}

// GetTxtRecord returns the TxtRecord field value if set, zero value otherwise.
func (o *IamDomainNameInfo) GetTxtRecord() string {
	if o == nil || IsNil(o.TxtRecord) {
		var ret string
		return ret
	}
	return *o.TxtRecord
}

// GetTxtRecordOk returns a tuple with the TxtRecord field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IamDomainNameInfo) GetTxtRecordOk() (*string, bool) {
	if o == nil || IsNil(o.TxtRecord) {
		return nil, false
	}
	return o.TxtRecord, true
}

// HasTxtRecord returns a boolean if a field has been set.
func (o *IamDomainNameInfo) HasTxtRecord() bool {
	if o != nil && !IsNil(o.TxtRecord) {
		return true
	}

	return false
}

// SetTxtRecord gets a reference to the given string and assigns it to the TxtRecord field.
func (o *IamDomainNameInfo) SetTxtRecord(v string) {
	o.TxtRecord = &v
}

// GetAccount returns the Account field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IamDomainNameInfo) GetAccount() IamAccountRelationship {
	if o == nil || IsNil(o.Account.Get()) {
		var ret IamAccountRelationship
		return ret
	}
	return *o.Account.Get()
}

// GetAccountOk returns a tuple with the Account field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IamDomainNameInfo) GetAccountOk() (*IamAccountRelationship, bool) {
	if o == nil {
		return nil, false
	}
	return o.Account.Get(), o.Account.IsSet()
}

// HasAccount returns a boolean if a field has been set.
func (o *IamDomainNameInfo) HasAccount() bool {
	if o != nil && o.Account.IsSet() {
		return true
	}

	return false
}

// SetAccount gets a reference to the given NullableIamAccountRelationship and assigns it to the Account field.
func (o *IamDomainNameInfo) SetAccount(v IamAccountRelationship) {
	o.Account.Set(&v)
}

// SetAccountNil sets the value for Account to be an explicit nil
func (o *IamDomainNameInfo) SetAccountNil() {
	o.Account.Set(nil)
}

// UnsetAccount ensures that no value is present for Account, not even an explicit nil
func (o *IamDomainNameInfo) UnsetAccount() {
	o.Account.Unset()
}

func (o IamDomainNameInfo) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IamDomainNameInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	serializedMoBaseMo, errMoBaseMo := json.Marshal(o.MoBaseMo)
	if errMoBaseMo != nil {
		return map[string]interface{}{}, errMoBaseMo
	}
	errMoBaseMo = json.Unmarshal([]byte(serializedMoBaseMo), &toSerialize)
	if errMoBaseMo != nil {
		return map[string]interface{}{}, errMoBaseMo
	}
	if _, exists := toSerialize["ClassId"]; !exists {
		toSerialize["ClassId"] = o.GetDefaultClassId()
	}
	toSerialize["ClassId"] = o.ClassId
	if _, exists := toSerialize["ObjectType"]; !exists {
		toSerialize["ObjectType"] = o.GetDefaultObjectType()
	}
	toSerialize["ObjectType"] = o.ObjectType
	if !IsNil(o.Action) {
		toSerialize["Action"] = o.Action
	}
	if !IsNil(o.DomainName) {
		toSerialize["DomainName"] = o.DomainName
	}
	if o.FailureDetails.IsSet() {
		toSerialize["FailureDetails"] = o.FailureDetails.Get()
	}
	if !IsNil(o.RecordExpiryTime) {
		toSerialize["RecordExpiryTime"] = o.RecordExpiryTime
	}
	if !IsNil(o.Status) {
		toSerialize["Status"] = o.Status
	}
	if !IsNil(o.TxtRecord) {
		toSerialize["TxtRecord"] = o.TxtRecord
	}
	if o.Account.IsSet() {
		toSerialize["Account"] = o.Account.Get()
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *IamDomainNameInfo) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"ClassId",
		"ObjectType",
	}

	// defaultValueFuncMap captures the default values for required properties.
	// These values are used when required properties are missing from the payload.
	defaultValueFuncMap := map[string]func() interface{}{
		"ClassId":    o.GetDefaultClassId,
		"ObjectType": o.GetDefaultObjectType,
	}
	var defaultValueApplied bool
	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			if _, ok := defaultValueFuncMap[requiredProperty]; ok {
				allProperties[requiredProperty] = defaultValueFuncMap[requiredProperty]()
				defaultValueApplied = true
			}
		}
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	if defaultValueApplied {
		data, err = json.Marshal(allProperties)
		if err != nil {
			return err
		}
	}
	type IamDomainNameInfoWithoutEmbeddedStruct struct {
		// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.
		ClassId string `json:"ClassId"`
		// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
		ObjectType string `json:"ObjectType"`
		// Regenerate TXT record and validate TXT record. * `generate` - Generate TXT record for domain name ownership validation. * `verify` - Verify TXT record for domain name ownership validation.
		Action *string `json:"Action,omitempty"`
		// Email domain name. When a user enters an email during login in the Intersight home page, the IdP is picked by matching this domain name with the email domain name for authentication.
		DomainName     *string                   `json:"DomainName,omitempty" validate:"regexp=^$|^[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$"`
		FailureDetails NullableIamFailureDetails `json:"FailureDetails,omitempty"`
		// Expiration time of TXT Record.
		RecordExpiryTime *time.Time `json:"RecordExpiryTime,omitempty"`
		// Status of Domain Ownership Verification. * `Pending` - Domain verification is pending. * `Failed` - Domain verification failed. Re-generate token and verify. * `Verified` - Domain verification succeeded. * `Expired` - TXT Record for Domain verification expired.
		Status *string `json:"Status,omitempty"`
		// Resource record used to verify Domain Ownership. Users need to verify the domain by adding the TXT Record in their DNS Host.
		TxtRecord *string                        `json:"TxtRecord,omitempty"`
		Account   NullableIamAccountRelationship `json:"Account,omitempty"`
	}

	varIamDomainNameInfoWithoutEmbeddedStruct := IamDomainNameInfoWithoutEmbeddedStruct{}

	err = json.Unmarshal(data, &varIamDomainNameInfoWithoutEmbeddedStruct)
	if err == nil {
		varIamDomainNameInfo := _IamDomainNameInfo{}
		varIamDomainNameInfo.ClassId = varIamDomainNameInfoWithoutEmbeddedStruct.ClassId
		varIamDomainNameInfo.ObjectType = varIamDomainNameInfoWithoutEmbeddedStruct.ObjectType
		varIamDomainNameInfo.Action = varIamDomainNameInfoWithoutEmbeddedStruct.Action
		varIamDomainNameInfo.DomainName = varIamDomainNameInfoWithoutEmbeddedStruct.DomainName
		varIamDomainNameInfo.FailureDetails = varIamDomainNameInfoWithoutEmbeddedStruct.FailureDetails
		varIamDomainNameInfo.RecordExpiryTime = varIamDomainNameInfoWithoutEmbeddedStruct.RecordExpiryTime
		varIamDomainNameInfo.Status = varIamDomainNameInfoWithoutEmbeddedStruct.Status
		varIamDomainNameInfo.TxtRecord = varIamDomainNameInfoWithoutEmbeddedStruct.TxtRecord
		varIamDomainNameInfo.Account = varIamDomainNameInfoWithoutEmbeddedStruct.Account
		*o = IamDomainNameInfo(varIamDomainNameInfo)
	} else {
		return err
	}

	varIamDomainNameInfo := _IamDomainNameInfo{}

	err = json.Unmarshal(data, &varIamDomainNameInfo)
	if err == nil {
		o.MoBaseMo = varIamDomainNameInfo.MoBaseMo
	} else {
		return err
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "ClassId")
		delete(additionalProperties, "ObjectType")
		delete(additionalProperties, "Action")
		delete(additionalProperties, "DomainName")
		delete(additionalProperties, "FailureDetails")
		delete(additionalProperties, "RecordExpiryTime")
		delete(additionalProperties, "Status")
		delete(additionalProperties, "TxtRecord")
		delete(additionalProperties, "Account")

		// remove fields from embedded structs
		reflectMoBaseMo := reflect.ValueOf(o.MoBaseMo)
		for i := 0; i < reflectMoBaseMo.Type().NumField(); i++ {
			t := reflectMoBaseMo.Type().Field(i)

			if jsonTag := t.Tag.Get("json"); jsonTag != "" {
				fieldName := ""
				if commaIdx := strings.Index(jsonTag, ","); commaIdx > 0 {
					fieldName = jsonTag[:commaIdx]
				} else {
					fieldName = jsonTag
				}
				if fieldName != "AdditionalProperties" {
					delete(additionalProperties, fieldName)
				}
			}
		}

		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableIamDomainNameInfo struct {
	value *IamDomainNameInfo
	isSet bool
}

func (v NullableIamDomainNameInfo) Get() *IamDomainNameInfo {
	return v.value
}

func (v *NullableIamDomainNameInfo) Set(val *IamDomainNameInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableIamDomainNameInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableIamDomainNameInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIamDomainNameInfo(val *IamDomainNameInfo) *NullableIamDomainNameInfo {
	return &NullableIamDomainNameInfo{value: val, isSet: true}
}

func (v NullableIamDomainNameInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIamDomainNameInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
