/*
Cisco Intersight

Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations. The Intersight OpenAPI document defines the complete set of properties that are returned in the HTTP response. From that perspective, a client can expect that no additional properties are returned, unless these properties are explicitly defined in the OpenAPI document. However, when a client uses an older version of the Intersight OpenAPI document, the server may send additional properties because the software is more recent than the client. In that case, the client may receive properties that it does not know about. Some generated SDKs perform a strict validation of the HTTP response body against the OpenAPI document.

API version: 1.0.11-2025071017
Contact: intersight@cisco.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package intersight

import (
	"encoding/json"
	"fmt"
	"reflect"
	"strings"
	"time"
)

// checks if the WorkflowMigrationHistory type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &WorkflowMigrationHistory{}

// WorkflowMigrationHistory Migration history of versions for service item instance.
type WorkflowMigrationHistory struct {
	MoBaseComplexType
	// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.
	ClassId string `json:"ClassId"`
	// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
	ObjectType              string   `json:"ObjectType"`
	Destination             *MoMoRef `json:"Destination,omitempty"`
	MigrationActionInstance *MoMoRef `json:"MigrationActionInstance,omitempty"`
	Source                  *MoMoRef `json:"Source,omitempty"`
	// The time when the migration was performed.
	Timestamp            *time.Time `json:"Timestamp,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _WorkflowMigrationHistory WorkflowMigrationHistory

// NewWorkflowMigrationHistory instantiates a new WorkflowMigrationHistory object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWorkflowMigrationHistory(classId string, objectType string) *WorkflowMigrationHistory {
	this := WorkflowMigrationHistory{}
	this.ClassId = classId
	this.ObjectType = objectType
	return &this
}

// NewWorkflowMigrationHistoryWithDefaults instantiates a new WorkflowMigrationHistory object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWorkflowMigrationHistoryWithDefaults() *WorkflowMigrationHistory {
	this := WorkflowMigrationHistory{}
	var classId string = "workflow.MigrationHistory"
	this.ClassId = classId
	var objectType string = "workflow.MigrationHistory"
	this.ObjectType = objectType
	return &this
}

// GetClassId returns the ClassId field value
func (o *WorkflowMigrationHistory) GetClassId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ClassId
}

// GetClassIdOk returns a tuple with the ClassId field value
// and a boolean to check if the value has been set.
func (o *WorkflowMigrationHistory) GetClassIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ClassId, true
}

// SetClassId sets field value
func (o *WorkflowMigrationHistory) SetClassId(v string) {
	o.ClassId = v
}

// GetDefaultClassId returns the default value "workflow.MigrationHistory" of the ClassId field.
func (o *WorkflowMigrationHistory) GetDefaultClassId() interface{} {
	return "workflow.MigrationHistory"
}

// GetObjectType returns the ObjectType field value
func (o *WorkflowMigrationHistory) GetObjectType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ObjectType
}

// GetObjectTypeOk returns a tuple with the ObjectType field value
// and a boolean to check if the value has been set.
func (o *WorkflowMigrationHistory) GetObjectTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ObjectType, true
}

// SetObjectType sets field value
func (o *WorkflowMigrationHistory) SetObjectType(v string) {
	o.ObjectType = v
}

// GetDefaultObjectType returns the default value "workflow.MigrationHistory" of the ObjectType field.
func (o *WorkflowMigrationHistory) GetDefaultObjectType() interface{} {
	return "workflow.MigrationHistory"
}

// GetDestination returns the Destination field value if set, zero value otherwise.
func (o *WorkflowMigrationHistory) GetDestination() MoMoRef {
	if o == nil || IsNil(o.Destination) {
		var ret MoMoRef
		return ret
	}
	return *o.Destination
}

// GetDestinationOk returns a tuple with the Destination field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkflowMigrationHistory) GetDestinationOk() (*MoMoRef, bool) {
	if o == nil || IsNil(o.Destination) {
		return nil, false
	}
	return o.Destination, true
}

// HasDestination returns a boolean if a field has been set.
func (o *WorkflowMigrationHistory) HasDestination() bool {
	if o != nil && !IsNil(o.Destination) {
		return true
	}

	return false
}

// SetDestination gets a reference to the given MoMoRef and assigns it to the Destination field.
func (o *WorkflowMigrationHistory) SetDestination(v MoMoRef) {
	o.Destination = &v
}

// GetMigrationActionInstance returns the MigrationActionInstance field value if set, zero value otherwise.
func (o *WorkflowMigrationHistory) GetMigrationActionInstance() MoMoRef {
	if o == nil || IsNil(o.MigrationActionInstance) {
		var ret MoMoRef
		return ret
	}
	return *o.MigrationActionInstance
}

// GetMigrationActionInstanceOk returns a tuple with the MigrationActionInstance field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkflowMigrationHistory) GetMigrationActionInstanceOk() (*MoMoRef, bool) {
	if o == nil || IsNil(o.MigrationActionInstance) {
		return nil, false
	}
	return o.MigrationActionInstance, true
}

// HasMigrationActionInstance returns a boolean if a field has been set.
func (o *WorkflowMigrationHistory) HasMigrationActionInstance() bool {
	if o != nil && !IsNil(o.MigrationActionInstance) {
		return true
	}

	return false
}

// SetMigrationActionInstance gets a reference to the given MoMoRef and assigns it to the MigrationActionInstance field.
func (o *WorkflowMigrationHistory) SetMigrationActionInstance(v MoMoRef) {
	o.MigrationActionInstance = &v
}

// GetSource returns the Source field value if set, zero value otherwise.
func (o *WorkflowMigrationHistory) GetSource() MoMoRef {
	if o == nil || IsNil(o.Source) {
		var ret MoMoRef
		return ret
	}
	return *o.Source
}

// GetSourceOk returns a tuple with the Source field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkflowMigrationHistory) GetSourceOk() (*MoMoRef, bool) {
	if o == nil || IsNil(o.Source) {
		return nil, false
	}
	return o.Source, true
}

// HasSource returns a boolean if a field has been set.
func (o *WorkflowMigrationHistory) HasSource() bool {
	if o != nil && !IsNil(o.Source) {
		return true
	}

	return false
}

// SetSource gets a reference to the given MoMoRef and assigns it to the Source field.
func (o *WorkflowMigrationHistory) SetSource(v MoMoRef) {
	o.Source = &v
}

// GetTimestamp returns the Timestamp field value if set, zero value otherwise.
func (o *WorkflowMigrationHistory) GetTimestamp() time.Time {
	if o == nil || IsNil(o.Timestamp) {
		var ret time.Time
		return ret
	}
	return *o.Timestamp
}

// GetTimestampOk returns a tuple with the Timestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkflowMigrationHistory) GetTimestampOk() (*time.Time, bool) {
	if o == nil || IsNil(o.Timestamp) {
		return nil, false
	}
	return o.Timestamp, true
}

// HasTimestamp returns a boolean if a field has been set.
func (o *WorkflowMigrationHistory) HasTimestamp() bool {
	if o != nil && !IsNil(o.Timestamp) {
		return true
	}

	return false
}

// SetTimestamp gets a reference to the given time.Time and assigns it to the Timestamp field.
func (o *WorkflowMigrationHistory) SetTimestamp(v time.Time) {
	o.Timestamp = &v
}

func (o WorkflowMigrationHistory) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o WorkflowMigrationHistory) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	serializedMoBaseComplexType, errMoBaseComplexType := json.Marshal(o.MoBaseComplexType)
	if errMoBaseComplexType != nil {
		return map[string]interface{}{}, errMoBaseComplexType
	}
	errMoBaseComplexType = json.Unmarshal([]byte(serializedMoBaseComplexType), &toSerialize)
	if errMoBaseComplexType != nil {
		return map[string]interface{}{}, errMoBaseComplexType
	}
	if _, exists := toSerialize["ClassId"]; !exists {
		toSerialize["ClassId"] = o.GetDefaultClassId()
	}
	toSerialize["ClassId"] = o.ClassId
	if _, exists := toSerialize["ObjectType"]; !exists {
		toSerialize["ObjectType"] = o.GetDefaultObjectType()
	}
	toSerialize["ObjectType"] = o.ObjectType
	if !IsNil(o.Destination) {
		toSerialize["Destination"] = o.Destination
	}
	if !IsNil(o.MigrationActionInstance) {
		toSerialize["MigrationActionInstance"] = o.MigrationActionInstance
	}
	if !IsNil(o.Source) {
		toSerialize["Source"] = o.Source
	}
	if !IsNil(o.Timestamp) {
		toSerialize["Timestamp"] = o.Timestamp
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *WorkflowMigrationHistory) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"ClassId",
		"ObjectType",
	}

	// defaultValueFuncMap captures the default values for required properties.
	// These values are used when required properties are missing from the payload.
	defaultValueFuncMap := map[string]func() interface{}{
		"ClassId":    o.GetDefaultClassId,
		"ObjectType": o.GetDefaultObjectType,
	}
	var defaultValueApplied bool
	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			if _, ok := defaultValueFuncMap[requiredProperty]; ok {
				allProperties[requiredProperty] = defaultValueFuncMap[requiredProperty]()
				defaultValueApplied = true
			}
		}
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	if defaultValueApplied {
		data, err = json.Marshal(allProperties)
		if err != nil {
			return err
		}
	}
	type WorkflowMigrationHistoryWithoutEmbeddedStruct struct {
		// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.
		ClassId string `json:"ClassId"`
		// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
		ObjectType              string   `json:"ObjectType"`
		Destination             *MoMoRef `json:"Destination,omitempty"`
		MigrationActionInstance *MoMoRef `json:"MigrationActionInstance,omitempty"`
		Source                  *MoMoRef `json:"Source,omitempty"`
		// The time when the migration was performed.
		Timestamp *time.Time `json:"Timestamp,omitempty"`
	}

	varWorkflowMigrationHistoryWithoutEmbeddedStruct := WorkflowMigrationHistoryWithoutEmbeddedStruct{}

	err = json.Unmarshal(data, &varWorkflowMigrationHistoryWithoutEmbeddedStruct)
	if err == nil {
		varWorkflowMigrationHistory := _WorkflowMigrationHistory{}
		varWorkflowMigrationHistory.ClassId = varWorkflowMigrationHistoryWithoutEmbeddedStruct.ClassId
		varWorkflowMigrationHistory.ObjectType = varWorkflowMigrationHistoryWithoutEmbeddedStruct.ObjectType
		varWorkflowMigrationHistory.Destination = varWorkflowMigrationHistoryWithoutEmbeddedStruct.Destination
		varWorkflowMigrationHistory.MigrationActionInstance = varWorkflowMigrationHistoryWithoutEmbeddedStruct.MigrationActionInstance
		varWorkflowMigrationHistory.Source = varWorkflowMigrationHistoryWithoutEmbeddedStruct.Source
		varWorkflowMigrationHistory.Timestamp = varWorkflowMigrationHistoryWithoutEmbeddedStruct.Timestamp
		*o = WorkflowMigrationHistory(varWorkflowMigrationHistory)
	} else {
		return err
	}

	varWorkflowMigrationHistory := _WorkflowMigrationHistory{}

	err = json.Unmarshal(data, &varWorkflowMigrationHistory)
	if err == nil {
		o.MoBaseComplexType = varWorkflowMigrationHistory.MoBaseComplexType
	} else {
		return err
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "ClassId")
		delete(additionalProperties, "ObjectType")
		delete(additionalProperties, "Destination")
		delete(additionalProperties, "MigrationActionInstance")
		delete(additionalProperties, "Source")
		delete(additionalProperties, "Timestamp")

		// remove fields from embedded structs
		reflectMoBaseComplexType := reflect.ValueOf(o.MoBaseComplexType)
		for i := 0; i < reflectMoBaseComplexType.Type().NumField(); i++ {
			t := reflectMoBaseComplexType.Type().Field(i)

			if jsonTag := t.Tag.Get("json"); jsonTag != "" {
				fieldName := ""
				if commaIdx := strings.Index(jsonTag, ","); commaIdx > 0 {
					fieldName = jsonTag[:commaIdx]
				} else {
					fieldName = jsonTag
				}
				if fieldName != "AdditionalProperties" {
					delete(additionalProperties, fieldName)
				}
			}
		}

		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableWorkflowMigrationHistory struct {
	value *WorkflowMigrationHistory
	isSet bool
}

func (v NullableWorkflowMigrationHistory) Get() *WorkflowMigrationHistory {
	return v.value
}

func (v *NullableWorkflowMigrationHistory) Set(val *WorkflowMigrationHistory) {
	v.value = val
	v.isSet = true
}

func (v NullableWorkflowMigrationHistory) IsSet() bool {
	return v.isSet
}

func (v *NullableWorkflowMigrationHistory) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWorkflowMigrationHistory(val *WorkflowMigrationHistory) *NullableWorkflowMigrationHistory {
	return &NullableWorkflowMigrationHistory{value: val, isSet: true}
}

func (v NullableWorkflowMigrationHistory) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWorkflowMigrationHistory) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
