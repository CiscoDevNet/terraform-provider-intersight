/*
Cisco Intersight

Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations. The Intersight OpenAPI document defines the complete set of properties that are returned in the HTTP response. From that perspective, a client can expect that no additional properties are returned, unless these properties are explicitly defined in the OpenAPI document. However, when a client uses an older version of the Intersight OpenAPI document, the server may send additional properties because the software is more recent than the client. In that case, the client may receive properties that it does not know about. Some generated SDKs perform a strict validation of the HTTP response body against the OpenAPI document.

API version: 1.0.11-18775
Contact: intersight@cisco.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package intersight

import (
	"encoding/json"
	"fmt"
	"reflect"
	"strings"
)

// checks if the OrganizationOrganization type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OrganizationOrganization{}

// OrganizationOrganization Organization provides multi-tenancy within an account. Multiple organizations can be present under an account. Resources are associated to organization using resource groups. Organization can have heterogeneous resources. Resources can be shared among multiple organizations. Organizations are associated to user permissions and privileges can be specified to provide access control. User can have access to multiple organizations in same permission and with different privileges on each organization.
type OrganizationOrganization struct {
	MoBaseMo
	// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.
	ClassId string `json:"ClassId"`
	// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
	ObjectType string `json:"ObjectType"`
	// The informative description about the usage of this organization.
	Description *string `json:"Description,omitempty"`
	// The name of the organization. There can be multiple organizations under an account.
	Name    *string                        `json:"Name,omitempty" validate:"regexp=^[a-zA-Z0-9_.:-]{1,64}$"`
	Account NullableIamAccountRelationship `json:"Account,omitempty"`
	// An array of relationships to resourceGroup resources.
	ResourceGroups []ResourceGroupRelationship `json:"ResourceGroups,omitempty"`
	// An array of relationships to moBaseMo resources.
	SharedWithResources  []MoBaseMoRelationship `json:"SharedWithResources,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _OrganizationOrganization OrganizationOrganization

// NewOrganizationOrganization instantiates a new OrganizationOrganization object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOrganizationOrganization(classId string, objectType string) *OrganizationOrganization {
	this := OrganizationOrganization{}
	this.ClassId = classId
	this.ObjectType = objectType
	return &this
}

// NewOrganizationOrganizationWithDefaults instantiates a new OrganizationOrganization object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOrganizationOrganizationWithDefaults() *OrganizationOrganization {
	this := OrganizationOrganization{}
	var classId string = "organization.Organization"
	this.ClassId = classId
	var objectType string = "organization.Organization"
	this.ObjectType = objectType
	return &this
}

// GetClassId returns the ClassId field value
func (o *OrganizationOrganization) GetClassId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ClassId
}

// GetClassIdOk returns a tuple with the ClassId field value
// and a boolean to check if the value has been set.
func (o *OrganizationOrganization) GetClassIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ClassId, true
}

// SetClassId sets field value
func (o *OrganizationOrganization) SetClassId(v string) {
	o.ClassId = v
}

// GetDefaultClassId returns the default value "organization.Organization" of the ClassId field.
func (o *OrganizationOrganization) GetDefaultClassId() interface{} {
	return "organization.Organization"
}

// GetObjectType returns the ObjectType field value
func (o *OrganizationOrganization) GetObjectType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ObjectType
}

// GetObjectTypeOk returns a tuple with the ObjectType field value
// and a boolean to check if the value has been set.
func (o *OrganizationOrganization) GetObjectTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ObjectType, true
}

// SetObjectType sets field value
func (o *OrganizationOrganization) SetObjectType(v string) {
	o.ObjectType = v
}

// GetDefaultObjectType returns the default value "organization.Organization" of the ObjectType field.
func (o *OrganizationOrganization) GetDefaultObjectType() interface{} {
	return "organization.Organization"
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *OrganizationOrganization) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrganizationOrganization) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *OrganizationOrganization) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *OrganizationOrganization) SetDescription(v string) {
	o.Description = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *OrganizationOrganization) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrganizationOrganization) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *OrganizationOrganization) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *OrganizationOrganization) SetName(v string) {
	o.Name = &v
}

// GetAccount returns the Account field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OrganizationOrganization) GetAccount() IamAccountRelationship {
	if o == nil || IsNil(o.Account.Get()) {
		var ret IamAccountRelationship
		return ret
	}
	return *o.Account.Get()
}

// GetAccountOk returns a tuple with the Account field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OrganizationOrganization) GetAccountOk() (*IamAccountRelationship, bool) {
	if o == nil {
		return nil, false
	}
	return o.Account.Get(), o.Account.IsSet()
}

// HasAccount returns a boolean if a field has been set.
func (o *OrganizationOrganization) HasAccount() bool {
	if o != nil && o.Account.IsSet() {
		return true
	}

	return false
}

// SetAccount gets a reference to the given NullableIamAccountRelationship and assigns it to the Account field.
func (o *OrganizationOrganization) SetAccount(v IamAccountRelationship) {
	o.Account.Set(&v)
}

// SetAccountNil sets the value for Account to be an explicit nil
func (o *OrganizationOrganization) SetAccountNil() {
	o.Account.Set(nil)
}

// UnsetAccount ensures that no value is present for Account, not even an explicit nil
func (o *OrganizationOrganization) UnsetAccount() {
	o.Account.Unset()
}

// GetResourceGroups returns the ResourceGroups field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OrganizationOrganization) GetResourceGroups() []ResourceGroupRelationship {
	if o == nil {
		var ret []ResourceGroupRelationship
		return ret
	}
	return o.ResourceGroups
}

// GetResourceGroupsOk returns a tuple with the ResourceGroups field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OrganizationOrganization) GetResourceGroupsOk() ([]ResourceGroupRelationship, bool) {
	if o == nil || IsNil(o.ResourceGroups) {
		return nil, false
	}
	return o.ResourceGroups, true
}

// HasResourceGroups returns a boolean if a field has been set.
func (o *OrganizationOrganization) HasResourceGroups() bool {
	if o != nil && !IsNil(o.ResourceGroups) {
		return true
	}

	return false
}

// SetResourceGroups gets a reference to the given []ResourceGroupRelationship and assigns it to the ResourceGroups field.
func (o *OrganizationOrganization) SetResourceGroups(v []ResourceGroupRelationship) {
	o.ResourceGroups = v
}

// GetSharedWithResources returns the SharedWithResources field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OrganizationOrganization) GetSharedWithResources() []MoBaseMoRelationship {
	if o == nil {
		var ret []MoBaseMoRelationship
		return ret
	}
	return o.SharedWithResources
}

// GetSharedWithResourcesOk returns a tuple with the SharedWithResources field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OrganizationOrganization) GetSharedWithResourcesOk() ([]MoBaseMoRelationship, bool) {
	if o == nil || IsNil(o.SharedWithResources) {
		return nil, false
	}
	return o.SharedWithResources, true
}

// HasSharedWithResources returns a boolean if a field has been set.
func (o *OrganizationOrganization) HasSharedWithResources() bool {
	if o != nil && !IsNil(o.SharedWithResources) {
		return true
	}

	return false
}

// SetSharedWithResources gets a reference to the given []MoBaseMoRelationship and assigns it to the SharedWithResources field.
func (o *OrganizationOrganization) SetSharedWithResources(v []MoBaseMoRelationship) {
	o.SharedWithResources = v
}

func (o OrganizationOrganization) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OrganizationOrganization) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	serializedMoBaseMo, errMoBaseMo := json.Marshal(o.MoBaseMo)
	if errMoBaseMo != nil {
		return map[string]interface{}{}, errMoBaseMo
	}
	errMoBaseMo = json.Unmarshal([]byte(serializedMoBaseMo), &toSerialize)
	if errMoBaseMo != nil {
		return map[string]interface{}{}, errMoBaseMo
	}
	if _, exists := toSerialize["ClassId"]; !exists {
		toSerialize["ClassId"] = o.GetDefaultClassId()
	}
	toSerialize["ClassId"] = o.ClassId
	if _, exists := toSerialize["ObjectType"]; !exists {
		toSerialize["ObjectType"] = o.GetDefaultObjectType()
	}
	toSerialize["ObjectType"] = o.ObjectType
	if !IsNil(o.Description) {
		toSerialize["Description"] = o.Description
	}
	if !IsNil(o.Name) {
		toSerialize["Name"] = o.Name
	}
	if o.Account.IsSet() {
		toSerialize["Account"] = o.Account.Get()
	}
	if o.ResourceGroups != nil {
		toSerialize["ResourceGroups"] = o.ResourceGroups
	}
	if o.SharedWithResources != nil {
		toSerialize["SharedWithResources"] = o.SharedWithResources
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *OrganizationOrganization) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"ClassId",
		"ObjectType",
	}

	// defaultValueFuncMap captures the default values for required properties.
	// These values are used when required properties are missing from the payload.
	defaultValueFuncMap := map[string]func() interface{}{
		"ClassId":    o.GetDefaultClassId,
		"ObjectType": o.GetDefaultObjectType,
	}
	var defaultValueApplied bool
	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			if _, ok := defaultValueFuncMap[requiredProperty]; ok {
				allProperties[requiredProperty] = defaultValueFuncMap[requiredProperty]()
				defaultValueApplied = true
			}
		}
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	if defaultValueApplied {
		data, err = json.Marshal(allProperties)
		if err != nil {
			return err
		}
	}
	type OrganizationOrganizationWithoutEmbeddedStruct struct {
		// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.
		ClassId string `json:"ClassId"`
		// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
		ObjectType string `json:"ObjectType"`
		// The informative description about the usage of this organization.
		Description *string `json:"Description,omitempty"`
		// The name of the organization. There can be multiple organizations under an account.
		Name    *string                        `json:"Name,omitempty" validate:"regexp=^[a-zA-Z0-9_.:-]{1,64}$"`
		Account NullableIamAccountRelationship `json:"Account,omitempty"`
		// An array of relationships to resourceGroup resources.
		ResourceGroups []ResourceGroupRelationship `json:"ResourceGroups,omitempty"`
		// An array of relationships to moBaseMo resources.
		SharedWithResources []MoBaseMoRelationship `json:"SharedWithResources,omitempty"`
	}

	varOrganizationOrganizationWithoutEmbeddedStruct := OrganizationOrganizationWithoutEmbeddedStruct{}

	err = json.Unmarshal(data, &varOrganizationOrganizationWithoutEmbeddedStruct)
	if err == nil {
		varOrganizationOrganization := _OrganizationOrganization{}
		varOrganizationOrganization.ClassId = varOrganizationOrganizationWithoutEmbeddedStruct.ClassId
		varOrganizationOrganization.ObjectType = varOrganizationOrganizationWithoutEmbeddedStruct.ObjectType
		varOrganizationOrganization.Description = varOrganizationOrganizationWithoutEmbeddedStruct.Description
		varOrganizationOrganization.Name = varOrganizationOrganizationWithoutEmbeddedStruct.Name
		varOrganizationOrganization.Account = varOrganizationOrganizationWithoutEmbeddedStruct.Account
		varOrganizationOrganization.ResourceGroups = varOrganizationOrganizationWithoutEmbeddedStruct.ResourceGroups
		varOrganizationOrganization.SharedWithResources = varOrganizationOrganizationWithoutEmbeddedStruct.SharedWithResources
		*o = OrganizationOrganization(varOrganizationOrganization)
	} else {
		return err
	}

	varOrganizationOrganization := _OrganizationOrganization{}

	err = json.Unmarshal(data, &varOrganizationOrganization)
	if err == nil {
		o.MoBaseMo = varOrganizationOrganization.MoBaseMo
	} else {
		return err
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "ClassId")
		delete(additionalProperties, "ObjectType")
		delete(additionalProperties, "Description")
		delete(additionalProperties, "Name")
		delete(additionalProperties, "Account")
		delete(additionalProperties, "ResourceGroups")
		delete(additionalProperties, "SharedWithResources")

		// remove fields from embedded structs
		reflectMoBaseMo := reflect.ValueOf(o.MoBaseMo)
		for i := 0; i < reflectMoBaseMo.Type().NumField(); i++ {
			t := reflectMoBaseMo.Type().Field(i)

			if jsonTag := t.Tag.Get("json"); jsonTag != "" {
				fieldName := ""
				if commaIdx := strings.Index(jsonTag, ","); commaIdx > 0 {
					fieldName = jsonTag[:commaIdx]
				} else {
					fieldName = jsonTag
				}
				if fieldName != "AdditionalProperties" {
					delete(additionalProperties, fieldName)
				}
			}
		}

		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableOrganizationOrganization struct {
	value *OrganizationOrganization
	isSet bool
}

func (v NullableOrganizationOrganization) Get() *OrganizationOrganization {
	return v.value
}

func (v *NullableOrganizationOrganization) Set(val *OrganizationOrganization) {
	v.value = val
	v.isSet = true
}

func (v NullableOrganizationOrganization) IsSet() bool {
	return v.isSet
}

func (v *NullableOrganizationOrganization) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOrganizationOrganization(val *OrganizationOrganization) *NullableOrganizationOrganization {
	return &NullableOrganizationOrganization{value: val, isSet: true}
}

func (v NullableOrganizationOrganization) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOrganizationOrganization) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
