/*
Cisco Intersight

Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations. The Intersight OpenAPI document defines the complete set of properties that are returned in the HTTP response. From that perspective, a client can expect that no additional properties are returned, unless these properties are explicitly defined in the OpenAPI document. However, when a client uses an older version of the Intersight OpenAPI document, the server may send additional properties because the software is more recent than the client. In that case, the client may receive properties that it does not know about. Some generated SDKs perform a strict validation of the HTTP response body against the OpenAPI document.

API version: 1.0.11-16342
Contact: intersight@cisco.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package intersight

import (
	"encoding/json"
	"reflect"
	"strings"
)

// WorkspaceFolder Folder contains list of predefined assets like Workflows, Service items, Widgets, etc. it enables customers to make uses of these readily available predefined assets.
type WorkspaceFolder struct {
	MoBaseMo
	// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.
	ClassId string `json:"ClassId"`
	// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
	ObjectType string `json:"ObjectType"`
	// It is to define if folder is archived or not.
	Archived *bool `json:"Archived,omitempty"`
	// The UserID or email who created this folder.
	CreateUser *string `json:"CreateUser,omitempty"`
	// The UserID or email who last modified this folder.
	ModUser *string `json:"ModUser,omitempty"`
	// The name for this folder. You can have multiple versions of the folder with the same name. Name can only contain letters (a-z, A-Z), numbers (0-9), hyphen (-), period (.) or an underscore (_).
	Name *string `json:"Name,omitempty"`
	// An array of relationships to moBaseMo resources.
	Assets       []MoBaseMoRelationship       `json:"Assets,omitempty"`
	Catalog      *WorkflowCatalogRelationship `json:"Catalog,omitempty"`
	ParentFolder *WorkspaceFolderRelationship `json:"ParentFolder,omitempty"`
	// An array of relationships to workspaceFolder resources.
	SubFolders           []WorkspaceFolderRelationship `json:"SubFolders,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _WorkspaceFolder WorkspaceFolder

// NewWorkspaceFolder instantiates a new WorkspaceFolder object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWorkspaceFolder(classId string, objectType string) *WorkspaceFolder {
	this := WorkspaceFolder{}
	this.ClassId = classId
	this.ObjectType = objectType
	var archived bool = false
	this.Archived = &archived
	return &this
}

// NewWorkspaceFolderWithDefaults instantiates a new WorkspaceFolder object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWorkspaceFolderWithDefaults() *WorkspaceFolder {
	this := WorkspaceFolder{}
	var classId string = "workspace.Folder"
	this.ClassId = classId
	var objectType string = "workspace.Folder"
	this.ObjectType = objectType
	var archived bool = false
	this.Archived = &archived
	return &this
}

// GetClassId returns the ClassId field value
func (o *WorkspaceFolder) GetClassId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ClassId
}

// GetClassIdOk returns a tuple with the ClassId field value
// and a boolean to check if the value has been set.
func (o *WorkspaceFolder) GetClassIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ClassId, true
}

// SetClassId sets field value
func (o *WorkspaceFolder) SetClassId(v string) {
	o.ClassId = v
}

// GetObjectType returns the ObjectType field value
func (o *WorkspaceFolder) GetObjectType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ObjectType
}

// GetObjectTypeOk returns a tuple with the ObjectType field value
// and a boolean to check if the value has been set.
func (o *WorkspaceFolder) GetObjectTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ObjectType, true
}

// SetObjectType sets field value
func (o *WorkspaceFolder) SetObjectType(v string) {
	o.ObjectType = v
}

// GetArchived returns the Archived field value if set, zero value otherwise.
func (o *WorkspaceFolder) GetArchived() bool {
	if o == nil || o.Archived == nil {
		var ret bool
		return ret
	}
	return *o.Archived
}

// GetArchivedOk returns a tuple with the Archived field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkspaceFolder) GetArchivedOk() (*bool, bool) {
	if o == nil || o.Archived == nil {
		return nil, false
	}
	return o.Archived, true
}

// HasArchived returns a boolean if a field has been set.
func (o *WorkspaceFolder) HasArchived() bool {
	if o != nil && o.Archived != nil {
		return true
	}

	return false
}

// SetArchived gets a reference to the given bool and assigns it to the Archived field.
func (o *WorkspaceFolder) SetArchived(v bool) {
	o.Archived = &v
}

// GetCreateUser returns the CreateUser field value if set, zero value otherwise.
func (o *WorkspaceFolder) GetCreateUser() string {
	if o == nil || o.CreateUser == nil {
		var ret string
		return ret
	}
	return *o.CreateUser
}

// GetCreateUserOk returns a tuple with the CreateUser field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkspaceFolder) GetCreateUserOk() (*string, bool) {
	if o == nil || o.CreateUser == nil {
		return nil, false
	}
	return o.CreateUser, true
}

// HasCreateUser returns a boolean if a field has been set.
func (o *WorkspaceFolder) HasCreateUser() bool {
	if o != nil && o.CreateUser != nil {
		return true
	}

	return false
}

// SetCreateUser gets a reference to the given string and assigns it to the CreateUser field.
func (o *WorkspaceFolder) SetCreateUser(v string) {
	o.CreateUser = &v
}

// GetModUser returns the ModUser field value if set, zero value otherwise.
func (o *WorkspaceFolder) GetModUser() string {
	if o == nil || o.ModUser == nil {
		var ret string
		return ret
	}
	return *o.ModUser
}

// GetModUserOk returns a tuple with the ModUser field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkspaceFolder) GetModUserOk() (*string, bool) {
	if o == nil || o.ModUser == nil {
		return nil, false
	}
	return o.ModUser, true
}

// HasModUser returns a boolean if a field has been set.
func (o *WorkspaceFolder) HasModUser() bool {
	if o != nil && o.ModUser != nil {
		return true
	}

	return false
}

// SetModUser gets a reference to the given string and assigns it to the ModUser field.
func (o *WorkspaceFolder) SetModUser(v string) {
	o.ModUser = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *WorkspaceFolder) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkspaceFolder) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *WorkspaceFolder) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *WorkspaceFolder) SetName(v string) {
	o.Name = &v
}

// GetAssets returns the Assets field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *WorkspaceFolder) GetAssets() []MoBaseMoRelationship {
	if o == nil {
		var ret []MoBaseMoRelationship
		return ret
	}
	return o.Assets
}

// GetAssetsOk returns a tuple with the Assets field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *WorkspaceFolder) GetAssetsOk() ([]MoBaseMoRelationship, bool) {
	if o == nil || o.Assets == nil {
		return nil, false
	}
	return o.Assets, true
}

// HasAssets returns a boolean if a field has been set.
func (o *WorkspaceFolder) HasAssets() bool {
	if o != nil && o.Assets != nil {
		return true
	}

	return false
}

// SetAssets gets a reference to the given []MoBaseMoRelationship and assigns it to the Assets field.
func (o *WorkspaceFolder) SetAssets(v []MoBaseMoRelationship) {
	o.Assets = v
}

// GetCatalog returns the Catalog field value if set, zero value otherwise.
func (o *WorkspaceFolder) GetCatalog() WorkflowCatalogRelationship {
	if o == nil || o.Catalog == nil {
		var ret WorkflowCatalogRelationship
		return ret
	}
	return *o.Catalog
}

// GetCatalogOk returns a tuple with the Catalog field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkspaceFolder) GetCatalogOk() (*WorkflowCatalogRelationship, bool) {
	if o == nil || o.Catalog == nil {
		return nil, false
	}
	return o.Catalog, true
}

// HasCatalog returns a boolean if a field has been set.
func (o *WorkspaceFolder) HasCatalog() bool {
	if o != nil && o.Catalog != nil {
		return true
	}

	return false
}

// SetCatalog gets a reference to the given WorkflowCatalogRelationship and assigns it to the Catalog field.
func (o *WorkspaceFolder) SetCatalog(v WorkflowCatalogRelationship) {
	o.Catalog = &v
}

// GetParentFolder returns the ParentFolder field value if set, zero value otherwise.
func (o *WorkspaceFolder) GetParentFolder() WorkspaceFolderRelationship {
	if o == nil || o.ParentFolder == nil {
		var ret WorkspaceFolderRelationship
		return ret
	}
	return *o.ParentFolder
}

// GetParentFolderOk returns a tuple with the ParentFolder field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkspaceFolder) GetParentFolderOk() (*WorkspaceFolderRelationship, bool) {
	if o == nil || o.ParentFolder == nil {
		return nil, false
	}
	return o.ParentFolder, true
}

// HasParentFolder returns a boolean if a field has been set.
func (o *WorkspaceFolder) HasParentFolder() bool {
	if o != nil && o.ParentFolder != nil {
		return true
	}

	return false
}

// SetParentFolder gets a reference to the given WorkspaceFolderRelationship and assigns it to the ParentFolder field.
func (o *WorkspaceFolder) SetParentFolder(v WorkspaceFolderRelationship) {
	o.ParentFolder = &v
}

// GetSubFolders returns the SubFolders field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *WorkspaceFolder) GetSubFolders() []WorkspaceFolderRelationship {
	if o == nil {
		var ret []WorkspaceFolderRelationship
		return ret
	}
	return o.SubFolders
}

// GetSubFoldersOk returns a tuple with the SubFolders field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *WorkspaceFolder) GetSubFoldersOk() ([]WorkspaceFolderRelationship, bool) {
	if o == nil || o.SubFolders == nil {
		return nil, false
	}
	return o.SubFolders, true
}

// HasSubFolders returns a boolean if a field has been set.
func (o *WorkspaceFolder) HasSubFolders() bool {
	if o != nil && o.SubFolders != nil {
		return true
	}

	return false
}

// SetSubFolders gets a reference to the given []WorkspaceFolderRelationship and assigns it to the SubFolders field.
func (o *WorkspaceFolder) SetSubFolders(v []WorkspaceFolderRelationship) {
	o.SubFolders = v
}

func (o WorkspaceFolder) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	serializedMoBaseMo, errMoBaseMo := json.Marshal(o.MoBaseMo)
	if errMoBaseMo != nil {
		return []byte{}, errMoBaseMo
	}
	errMoBaseMo = json.Unmarshal([]byte(serializedMoBaseMo), &toSerialize)
	if errMoBaseMo != nil {
		return []byte{}, errMoBaseMo
	}
	if true {
		toSerialize["ClassId"] = o.ClassId
	}
	if true {
		toSerialize["ObjectType"] = o.ObjectType
	}
	if o.Archived != nil {
		toSerialize["Archived"] = o.Archived
	}
	if o.CreateUser != nil {
		toSerialize["CreateUser"] = o.CreateUser
	}
	if o.ModUser != nil {
		toSerialize["ModUser"] = o.ModUser
	}
	if o.Name != nil {
		toSerialize["Name"] = o.Name
	}
	if o.Assets != nil {
		toSerialize["Assets"] = o.Assets
	}
	if o.Catalog != nil {
		toSerialize["Catalog"] = o.Catalog
	}
	if o.ParentFolder != nil {
		toSerialize["ParentFolder"] = o.ParentFolder
	}
	if o.SubFolders != nil {
		toSerialize["SubFolders"] = o.SubFolders
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *WorkspaceFolder) UnmarshalJSON(bytes []byte) (err error) {
	type WorkspaceFolderWithoutEmbeddedStruct struct {
		// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.
		ClassId string `json:"ClassId"`
		// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
		ObjectType string `json:"ObjectType"`
		// It is to define if folder is archived or not.
		Archived *bool `json:"Archived,omitempty"`
		// The UserID or email who created this folder.
		CreateUser *string `json:"CreateUser,omitempty"`
		// The UserID or email who last modified this folder.
		ModUser *string `json:"ModUser,omitempty"`
		// The name for this folder. You can have multiple versions of the folder with the same name. Name can only contain letters (a-z, A-Z), numbers (0-9), hyphen (-), period (.) or an underscore (_).
		Name *string `json:"Name,omitempty"`
		// An array of relationships to moBaseMo resources.
		Assets       []MoBaseMoRelationship       `json:"Assets,omitempty"`
		Catalog      *WorkflowCatalogRelationship `json:"Catalog,omitempty"`
		ParentFolder *WorkspaceFolderRelationship `json:"ParentFolder,omitempty"`
		// An array of relationships to workspaceFolder resources.
		SubFolders []WorkspaceFolderRelationship `json:"SubFolders,omitempty"`
	}

	varWorkspaceFolderWithoutEmbeddedStruct := WorkspaceFolderWithoutEmbeddedStruct{}

	err = json.Unmarshal(bytes, &varWorkspaceFolderWithoutEmbeddedStruct)
	if err == nil {
		varWorkspaceFolder := _WorkspaceFolder{}
		varWorkspaceFolder.ClassId = varWorkspaceFolderWithoutEmbeddedStruct.ClassId
		varWorkspaceFolder.ObjectType = varWorkspaceFolderWithoutEmbeddedStruct.ObjectType
		varWorkspaceFolder.Archived = varWorkspaceFolderWithoutEmbeddedStruct.Archived
		varWorkspaceFolder.CreateUser = varWorkspaceFolderWithoutEmbeddedStruct.CreateUser
		varWorkspaceFolder.ModUser = varWorkspaceFolderWithoutEmbeddedStruct.ModUser
		varWorkspaceFolder.Name = varWorkspaceFolderWithoutEmbeddedStruct.Name
		varWorkspaceFolder.Assets = varWorkspaceFolderWithoutEmbeddedStruct.Assets
		varWorkspaceFolder.Catalog = varWorkspaceFolderWithoutEmbeddedStruct.Catalog
		varWorkspaceFolder.ParentFolder = varWorkspaceFolderWithoutEmbeddedStruct.ParentFolder
		varWorkspaceFolder.SubFolders = varWorkspaceFolderWithoutEmbeddedStruct.SubFolders
		*o = WorkspaceFolder(varWorkspaceFolder)
	} else {
		return err
	}

	varWorkspaceFolder := _WorkspaceFolder{}

	err = json.Unmarshal(bytes, &varWorkspaceFolder)
	if err == nil {
		o.MoBaseMo = varWorkspaceFolder.MoBaseMo
	} else {
		return err
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "ClassId")
		delete(additionalProperties, "ObjectType")
		delete(additionalProperties, "Archived")
		delete(additionalProperties, "CreateUser")
		delete(additionalProperties, "ModUser")
		delete(additionalProperties, "Name")
		delete(additionalProperties, "Assets")
		delete(additionalProperties, "Catalog")
		delete(additionalProperties, "ParentFolder")
		delete(additionalProperties, "SubFolders")

		// remove fields from embedded structs
		reflectMoBaseMo := reflect.ValueOf(o.MoBaseMo)
		for i := 0; i < reflectMoBaseMo.Type().NumField(); i++ {
			t := reflectMoBaseMo.Type().Field(i)

			if jsonTag := t.Tag.Get("json"); jsonTag != "" {
				fieldName := ""
				if commaIdx := strings.Index(jsonTag, ","); commaIdx > 0 {
					fieldName = jsonTag[:commaIdx]
				} else {
					fieldName = jsonTag
				}
				if fieldName != "AdditionalProperties" {
					delete(additionalProperties, fieldName)
				}
			}
		}

		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableWorkspaceFolder struct {
	value *WorkspaceFolder
	isSet bool
}

func (v NullableWorkspaceFolder) Get() *WorkspaceFolder {
	return v.value
}

func (v *NullableWorkspaceFolder) Set(val *WorkspaceFolder) {
	v.value = val
	v.isSet = true
}

func (v NullableWorkspaceFolder) IsSet() bool {
	return v.isSet
}

func (v *NullableWorkspaceFolder) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWorkspaceFolder(val *WorkspaceFolder) *NullableWorkspaceFolder {
	return &NullableWorkspaceFolder{value: val, isSet: true}
}

func (v NullableWorkspaceFolder) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWorkspaceFolder) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
