/*
Cisco Intersight

Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations. The Intersight OpenAPI document defines the complete set of properties that are returned in the HTTP response. From that perspective, a client can expect that no additional properties are returned, unless these properties are explicitly defined in the OpenAPI document. However, when a client uses an older version of the Intersight OpenAPI document, the server may send additional properties because the software is more recent than the client. In that case, the client may receive properties that it does not know about. Some generated SDKs perform a strict validation of the HTTP response body against the OpenAPI document.

API version: 1.0.11-2025051220
Contact: intersight@cisco.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package intersight

import (
	"encoding/json"
	"fmt"
	"reflect"
	"strings"
	"time"
)

// checks if the SmtpPolicyTest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SmtpPolicyTest{}

// SmtpPolicyTest PolicyTest provides data on SMTP policy test status. This data is generated by sending a test email, allowing Account Administrator users to utilize it for testing SMTP policy compliance.
type SmtpPolicyTest struct {
	MoBaseMo
	// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.
	ClassId string `json:"ClassId"`
	// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
	ObjectType string `json:"ObjectType"`
	// If enabled, an attempt will be made to send a test email notification to the configured recipients.
	Enabled *bool `json:"Enabled,omitempty"`
	// Information on the last status, including any encountered error specifics, to assist users in troubleshooting SMTP policy issues.
	LastStatusDetails *string `json:"LastStatusDetails,omitempty"`
	// The date and time of the most recent successful attempt to send a test email notification.
	LastSuccessfulAttemptTime *time.Time `json:"LastSuccessfulAttemptTime,omitempty"`
	// The SMTP policy of the most recent successful attempt to send a test email notification.
	LastSuccessfulPolicy interface{} `json:"LastSuccessfulPolicy,omitempty"`
	// Status of the last test email notification. * `` - Notification has not been tried. * `failed` - Sending notification failed. * `success` - Sending notification successful.
	LastTestStatus       *string                        `json:"LastTestStatus,omitempty"`
	Recipients           []string                       `json:"Recipients,omitempty"`
	Account              NullableIamAccountRelationship `json:"Account,omitempty"`
	Policy               NullableSmtpPolicyRelationship `json:"Policy,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _SmtpPolicyTest SmtpPolicyTest

// NewSmtpPolicyTest instantiates a new SmtpPolicyTest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSmtpPolicyTest(classId string, objectType string) *SmtpPolicyTest {
	this := SmtpPolicyTest{}
	this.ClassId = classId
	this.ObjectType = objectType
	var enabled bool = true
	this.Enabled = &enabled
	return &this
}

// NewSmtpPolicyTestWithDefaults instantiates a new SmtpPolicyTest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSmtpPolicyTestWithDefaults() *SmtpPolicyTest {
	this := SmtpPolicyTest{}
	var classId string = "smtp.PolicyTest"
	this.ClassId = classId
	var objectType string = "smtp.PolicyTest"
	this.ObjectType = objectType
	var enabled bool = true
	this.Enabled = &enabled
	return &this
}

// GetClassId returns the ClassId field value
func (o *SmtpPolicyTest) GetClassId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ClassId
}

// GetClassIdOk returns a tuple with the ClassId field value
// and a boolean to check if the value has been set.
func (o *SmtpPolicyTest) GetClassIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ClassId, true
}

// SetClassId sets field value
func (o *SmtpPolicyTest) SetClassId(v string) {
	o.ClassId = v
}

// GetDefaultClassId returns the default value "smtp.PolicyTest" of the ClassId field.
func (o *SmtpPolicyTest) GetDefaultClassId() interface{} {
	return "smtp.PolicyTest"
}

// GetObjectType returns the ObjectType field value
func (o *SmtpPolicyTest) GetObjectType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ObjectType
}

// GetObjectTypeOk returns a tuple with the ObjectType field value
// and a boolean to check if the value has been set.
func (o *SmtpPolicyTest) GetObjectTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ObjectType, true
}

// SetObjectType sets field value
func (o *SmtpPolicyTest) SetObjectType(v string) {
	o.ObjectType = v
}

// GetDefaultObjectType returns the default value "smtp.PolicyTest" of the ObjectType field.
func (o *SmtpPolicyTest) GetDefaultObjectType() interface{} {
	return "smtp.PolicyTest"
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *SmtpPolicyTest) GetEnabled() bool {
	if o == nil || IsNil(o.Enabled) {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmtpPolicyTest) GetEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.Enabled) {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *SmtpPolicyTest) HasEnabled() bool {
	if o != nil && !IsNil(o.Enabled) {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *SmtpPolicyTest) SetEnabled(v bool) {
	o.Enabled = &v
}

// GetLastStatusDetails returns the LastStatusDetails field value if set, zero value otherwise.
func (o *SmtpPolicyTest) GetLastStatusDetails() string {
	if o == nil || IsNil(o.LastStatusDetails) {
		var ret string
		return ret
	}
	return *o.LastStatusDetails
}

// GetLastStatusDetailsOk returns a tuple with the LastStatusDetails field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmtpPolicyTest) GetLastStatusDetailsOk() (*string, bool) {
	if o == nil || IsNil(o.LastStatusDetails) {
		return nil, false
	}
	return o.LastStatusDetails, true
}

// HasLastStatusDetails returns a boolean if a field has been set.
func (o *SmtpPolicyTest) HasLastStatusDetails() bool {
	if o != nil && !IsNil(o.LastStatusDetails) {
		return true
	}

	return false
}

// SetLastStatusDetails gets a reference to the given string and assigns it to the LastStatusDetails field.
func (o *SmtpPolicyTest) SetLastStatusDetails(v string) {
	o.LastStatusDetails = &v
}

// GetLastSuccessfulAttemptTime returns the LastSuccessfulAttemptTime field value if set, zero value otherwise.
func (o *SmtpPolicyTest) GetLastSuccessfulAttemptTime() time.Time {
	if o == nil || IsNil(o.LastSuccessfulAttemptTime) {
		var ret time.Time
		return ret
	}
	return *o.LastSuccessfulAttemptTime
}

// GetLastSuccessfulAttemptTimeOk returns a tuple with the LastSuccessfulAttemptTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmtpPolicyTest) GetLastSuccessfulAttemptTimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.LastSuccessfulAttemptTime) {
		return nil, false
	}
	return o.LastSuccessfulAttemptTime, true
}

// HasLastSuccessfulAttemptTime returns a boolean if a field has been set.
func (o *SmtpPolicyTest) HasLastSuccessfulAttemptTime() bool {
	if o != nil && !IsNil(o.LastSuccessfulAttemptTime) {
		return true
	}

	return false
}

// SetLastSuccessfulAttemptTime gets a reference to the given time.Time and assigns it to the LastSuccessfulAttemptTime field.
func (o *SmtpPolicyTest) SetLastSuccessfulAttemptTime(v time.Time) {
	o.LastSuccessfulAttemptTime = &v
}

// GetLastSuccessfulPolicy returns the LastSuccessfulPolicy field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SmtpPolicyTest) GetLastSuccessfulPolicy() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.LastSuccessfulPolicy
}

// GetLastSuccessfulPolicyOk returns a tuple with the LastSuccessfulPolicy field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SmtpPolicyTest) GetLastSuccessfulPolicyOk() (*interface{}, bool) {
	if o == nil || IsNil(o.LastSuccessfulPolicy) {
		return nil, false
	}
	return &o.LastSuccessfulPolicy, true
}

// HasLastSuccessfulPolicy returns a boolean if a field has been set.
func (o *SmtpPolicyTest) HasLastSuccessfulPolicy() bool {
	if o != nil && !IsNil(o.LastSuccessfulPolicy) {
		return true
	}

	return false
}

// SetLastSuccessfulPolicy gets a reference to the given interface{} and assigns it to the LastSuccessfulPolicy field.
func (o *SmtpPolicyTest) SetLastSuccessfulPolicy(v interface{}) {
	o.LastSuccessfulPolicy = v
}

// GetLastTestStatus returns the LastTestStatus field value if set, zero value otherwise.
func (o *SmtpPolicyTest) GetLastTestStatus() string {
	if o == nil || IsNil(o.LastTestStatus) {
		var ret string
		return ret
	}
	return *o.LastTestStatus
}

// GetLastTestStatusOk returns a tuple with the LastTestStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmtpPolicyTest) GetLastTestStatusOk() (*string, bool) {
	if o == nil || IsNil(o.LastTestStatus) {
		return nil, false
	}
	return o.LastTestStatus, true
}

// HasLastTestStatus returns a boolean if a field has been set.
func (o *SmtpPolicyTest) HasLastTestStatus() bool {
	if o != nil && !IsNil(o.LastTestStatus) {
		return true
	}

	return false
}

// SetLastTestStatus gets a reference to the given string and assigns it to the LastTestStatus field.
func (o *SmtpPolicyTest) SetLastTestStatus(v string) {
	o.LastTestStatus = &v
}

// GetRecipients returns the Recipients field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SmtpPolicyTest) GetRecipients() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.Recipients
}

// GetRecipientsOk returns a tuple with the Recipients field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SmtpPolicyTest) GetRecipientsOk() ([]string, bool) {
	if o == nil || IsNil(o.Recipients) {
		return nil, false
	}
	return o.Recipients, true
}

// HasRecipients returns a boolean if a field has been set.
func (o *SmtpPolicyTest) HasRecipients() bool {
	if o != nil && !IsNil(o.Recipients) {
		return true
	}

	return false
}

// SetRecipients gets a reference to the given []string and assigns it to the Recipients field.
func (o *SmtpPolicyTest) SetRecipients(v []string) {
	o.Recipients = v
}

// GetAccount returns the Account field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SmtpPolicyTest) GetAccount() IamAccountRelationship {
	if o == nil || IsNil(o.Account.Get()) {
		var ret IamAccountRelationship
		return ret
	}
	return *o.Account.Get()
}

// GetAccountOk returns a tuple with the Account field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SmtpPolicyTest) GetAccountOk() (*IamAccountRelationship, bool) {
	if o == nil {
		return nil, false
	}
	return o.Account.Get(), o.Account.IsSet()
}

// HasAccount returns a boolean if a field has been set.
func (o *SmtpPolicyTest) HasAccount() bool {
	if o != nil && o.Account.IsSet() {
		return true
	}

	return false
}

// SetAccount gets a reference to the given NullableIamAccountRelationship and assigns it to the Account field.
func (o *SmtpPolicyTest) SetAccount(v IamAccountRelationship) {
	o.Account.Set(&v)
}

// SetAccountNil sets the value for Account to be an explicit nil
func (o *SmtpPolicyTest) SetAccountNil() {
	o.Account.Set(nil)
}

// UnsetAccount ensures that no value is present for Account, not even an explicit nil
func (o *SmtpPolicyTest) UnsetAccount() {
	o.Account.Unset()
}

// GetPolicy returns the Policy field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SmtpPolicyTest) GetPolicy() SmtpPolicyRelationship {
	if o == nil || IsNil(o.Policy.Get()) {
		var ret SmtpPolicyRelationship
		return ret
	}
	return *o.Policy.Get()
}

// GetPolicyOk returns a tuple with the Policy field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SmtpPolicyTest) GetPolicyOk() (*SmtpPolicyRelationship, bool) {
	if o == nil {
		return nil, false
	}
	return o.Policy.Get(), o.Policy.IsSet()
}

// HasPolicy returns a boolean if a field has been set.
func (o *SmtpPolicyTest) HasPolicy() bool {
	if o != nil && o.Policy.IsSet() {
		return true
	}

	return false
}

// SetPolicy gets a reference to the given NullableSmtpPolicyRelationship and assigns it to the Policy field.
func (o *SmtpPolicyTest) SetPolicy(v SmtpPolicyRelationship) {
	o.Policy.Set(&v)
}

// SetPolicyNil sets the value for Policy to be an explicit nil
func (o *SmtpPolicyTest) SetPolicyNil() {
	o.Policy.Set(nil)
}

// UnsetPolicy ensures that no value is present for Policy, not even an explicit nil
func (o *SmtpPolicyTest) UnsetPolicy() {
	o.Policy.Unset()
}

func (o SmtpPolicyTest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SmtpPolicyTest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	serializedMoBaseMo, errMoBaseMo := json.Marshal(o.MoBaseMo)
	if errMoBaseMo != nil {
		return map[string]interface{}{}, errMoBaseMo
	}
	errMoBaseMo = json.Unmarshal([]byte(serializedMoBaseMo), &toSerialize)
	if errMoBaseMo != nil {
		return map[string]interface{}{}, errMoBaseMo
	}
	if _, exists := toSerialize["ClassId"]; !exists {
		toSerialize["ClassId"] = o.GetDefaultClassId()
	}
	toSerialize["ClassId"] = o.ClassId
	if _, exists := toSerialize["ObjectType"]; !exists {
		toSerialize["ObjectType"] = o.GetDefaultObjectType()
	}
	toSerialize["ObjectType"] = o.ObjectType
	if !IsNil(o.Enabled) {
		toSerialize["Enabled"] = o.Enabled
	}
	if !IsNil(o.LastStatusDetails) {
		toSerialize["LastStatusDetails"] = o.LastStatusDetails
	}
	if !IsNil(o.LastSuccessfulAttemptTime) {
		toSerialize["LastSuccessfulAttemptTime"] = o.LastSuccessfulAttemptTime
	}
	if o.LastSuccessfulPolicy != nil {
		toSerialize["LastSuccessfulPolicy"] = o.LastSuccessfulPolicy
	}
	if !IsNil(o.LastTestStatus) {
		toSerialize["LastTestStatus"] = o.LastTestStatus
	}
	if o.Recipients != nil {
		toSerialize["Recipients"] = o.Recipients
	}
	if o.Account.IsSet() {
		toSerialize["Account"] = o.Account.Get()
	}
	if o.Policy.IsSet() {
		toSerialize["Policy"] = o.Policy.Get()
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *SmtpPolicyTest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"ClassId",
		"ObjectType",
	}

	// defaultValueFuncMap captures the default values for required properties.
	// These values are used when required properties are missing from the payload.
	defaultValueFuncMap := map[string]func() interface{}{
		"ClassId":    o.GetDefaultClassId,
		"ObjectType": o.GetDefaultObjectType,
	}
	var defaultValueApplied bool
	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			if _, ok := defaultValueFuncMap[requiredProperty]; ok {
				allProperties[requiredProperty] = defaultValueFuncMap[requiredProperty]()
				defaultValueApplied = true
			}
		}
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	if defaultValueApplied {
		data, err = json.Marshal(allProperties)
		if err != nil {
			return err
		}
	}
	type SmtpPolicyTestWithoutEmbeddedStruct struct {
		// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.
		ClassId string `json:"ClassId"`
		// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
		ObjectType string `json:"ObjectType"`
		// If enabled, an attempt will be made to send a test email notification to the configured recipients.
		Enabled *bool `json:"Enabled,omitempty"`
		// Information on the last status, including any encountered error specifics, to assist users in troubleshooting SMTP policy issues.
		LastStatusDetails *string `json:"LastStatusDetails,omitempty"`
		// The date and time of the most recent successful attempt to send a test email notification.
		LastSuccessfulAttemptTime *time.Time `json:"LastSuccessfulAttemptTime,omitempty"`
		// The SMTP policy of the most recent successful attempt to send a test email notification.
		LastSuccessfulPolicy interface{} `json:"LastSuccessfulPolicy,omitempty"`
		// Status of the last test email notification. * `` - Notification has not been tried. * `failed` - Sending notification failed. * `success` - Sending notification successful.
		LastTestStatus *string                        `json:"LastTestStatus,omitempty"`
		Recipients     []string                       `json:"Recipients,omitempty"`
		Account        NullableIamAccountRelationship `json:"Account,omitempty"`
		Policy         NullableSmtpPolicyRelationship `json:"Policy,omitempty"`
	}

	varSmtpPolicyTestWithoutEmbeddedStruct := SmtpPolicyTestWithoutEmbeddedStruct{}

	err = json.Unmarshal(data, &varSmtpPolicyTestWithoutEmbeddedStruct)
	if err == nil {
		varSmtpPolicyTest := _SmtpPolicyTest{}
		varSmtpPolicyTest.ClassId = varSmtpPolicyTestWithoutEmbeddedStruct.ClassId
		varSmtpPolicyTest.ObjectType = varSmtpPolicyTestWithoutEmbeddedStruct.ObjectType
		varSmtpPolicyTest.Enabled = varSmtpPolicyTestWithoutEmbeddedStruct.Enabled
		varSmtpPolicyTest.LastStatusDetails = varSmtpPolicyTestWithoutEmbeddedStruct.LastStatusDetails
		varSmtpPolicyTest.LastSuccessfulAttemptTime = varSmtpPolicyTestWithoutEmbeddedStruct.LastSuccessfulAttemptTime
		varSmtpPolicyTest.LastSuccessfulPolicy = varSmtpPolicyTestWithoutEmbeddedStruct.LastSuccessfulPolicy
		varSmtpPolicyTest.LastTestStatus = varSmtpPolicyTestWithoutEmbeddedStruct.LastTestStatus
		varSmtpPolicyTest.Recipients = varSmtpPolicyTestWithoutEmbeddedStruct.Recipients
		varSmtpPolicyTest.Account = varSmtpPolicyTestWithoutEmbeddedStruct.Account
		varSmtpPolicyTest.Policy = varSmtpPolicyTestWithoutEmbeddedStruct.Policy
		*o = SmtpPolicyTest(varSmtpPolicyTest)
	} else {
		return err
	}

	varSmtpPolicyTest := _SmtpPolicyTest{}

	err = json.Unmarshal(data, &varSmtpPolicyTest)
	if err == nil {
		o.MoBaseMo = varSmtpPolicyTest.MoBaseMo
	} else {
		return err
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "ClassId")
		delete(additionalProperties, "ObjectType")
		delete(additionalProperties, "Enabled")
		delete(additionalProperties, "LastStatusDetails")
		delete(additionalProperties, "LastSuccessfulAttemptTime")
		delete(additionalProperties, "LastSuccessfulPolicy")
		delete(additionalProperties, "LastTestStatus")
		delete(additionalProperties, "Recipients")
		delete(additionalProperties, "Account")
		delete(additionalProperties, "Policy")

		// remove fields from embedded structs
		reflectMoBaseMo := reflect.ValueOf(o.MoBaseMo)
		for i := 0; i < reflectMoBaseMo.Type().NumField(); i++ {
			t := reflectMoBaseMo.Type().Field(i)

			if jsonTag := t.Tag.Get("json"); jsonTag != "" {
				fieldName := ""
				if commaIdx := strings.Index(jsonTag, ","); commaIdx > 0 {
					fieldName = jsonTag[:commaIdx]
				} else {
					fieldName = jsonTag
				}
				if fieldName != "AdditionalProperties" {
					delete(additionalProperties, fieldName)
				}
			}
		}

		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableSmtpPolicyTest struct {
	value *SmtpPolicyTest
	isSet bool
}

func (v NullableSmtpPolicyTest) Get() *SmtpPolicyTest {
	return v.value
}

func (v *NullableSmtpPolicyTest) Set(val *SmtpPolicyTest) {
	v.value = val
	v.isSet = true
}

func (v NullableSmtpPolicyTest) IsSet() bool {
	return v.isSet
}

func (v *NullableSmtpPolicyTest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSmtpPolicyTest(val *SmtpPolicyTest) *NullableSmtpPolicyTest {
	return &NullableSmtpPolicyTest{value: val, isSet: true}
}

func (v NullableSmtpPolicyTest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSmtpPolicyTest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
