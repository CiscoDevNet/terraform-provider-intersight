/*
Cisco Intersight

Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations. The Intersight OpenAPI document defines the complete set of properties that are returned in the HTTP response. From that perspective, a client can expect that no additional properties are returned, unless these properties are explicitly defined in the OpenAPI document. However, when a client uses an older version of the Intersight OpenAPI document, the server may send additional properties because the software is more recent than the client. In that case, the client may receive properties that it does not know about. Some generated SDKs perform a strict validation of the HTTP response body against the OpenAPI document.

API version: 1.0.11-18775
Contact: intersight@cisco.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package intersight

import (
	"encoding/json"
	"fmt"
	"reflect"
	"strings"
)

// checks if the HyperflexCluster type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &HyperflexCluster{}

// HyperflexCluster A HyperFlex cluster. Contains inventory information concerning the health, software versions, storage, and nodes of the cluster.
type HyperflexCluster struct {
	HyperflexBaseCluster
	// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.
	ClassId string `json:"ClassId"`
	// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
	ObjectType string                      `json:"ObjectType"`
	Capability NullableHyperflexCapability `json:"Capability,omitempty"`
	// The storage type of this cluster (All Flash or Hybrid).
	// Deprecated
	ClusterType *int64 `json:"ClusterType,omitempty"`
	// The unique identifier for this HyperFlex cluster.
	ClusterUuid *string `json:"ClusterUuid,omitempty"`
	// The unique identifier of the device registration that represents this HyperFlex cluster's connection to Intersight.
	DeviceId   *string  `json:"DeviceId,omitempty"`
	DnsServers []string `json:"DnsServers,omitempty"`
	// This captures the encryption status for a HyperFlex cluster. Currently it will have the status if HXA-CLU-0020 alarm is raised. In the future it can capture other details.
	EncryptionStatus *string `json:"EncryptionStatus,omitempty"`
	// The number of yellow (warning) and red (critical) alarms stored as an aggregate. The first 16 bits indicate the number of red alarms, and the last 16 bits contain the number of yellow alarms.
	// Deprecated
	FltAggr *int64 `json:"FltAggr,omitempty"`
	// The version and build number of the HyperFlex Data Platform for this cluster. After a cluster upgrade, this version string will be updated on the next inventory cycle to reflect the newly installed version.
	HxdpBuildVersion     *string                               `json:"HxdpBuildVersion,omitempty"`
	NetworkConfiguration NullableHyperflexNetworkConfiguration `json:"NetworkConfiguration,omitempty"`
	NtpServers           []string                              `json:"NtpServers,omitempty"`
	Summary              NullableHyperflexSummary              `json:"Summary,omitempty"`
	// The upgrade status of the HyperFlex cluster. * `Unknown` - The upgrade status of the HyperFlex cluster could not be determined. * `Ok` - The upgrade of the HyperFlex cluster is complete. * `InProgress` - The upgrade of the HyperFlex cluster is in-progress. * `Failed` - The upgrade of the HyperFlex cluster has failed. * `Waiting` - The upgrade of the HyperFlex cluster is waiting to continue execution.
	UpgradeStatus *string `json:"UpgradeStatus,omitempty"`
	// The uplink speed information of the HyperFlex cluster. * `Unknown` - The uplink speed could not be determined. The physical servers are potentially not claimed. * `10G` - The uplink speed is 10G. * `1G` - The uplink speed is 1G.
	UplinkSpeed          *string                               `json:"UplinkSpeed,omitempty"`
	VcenterConfiguration NullableHyperflexVcenterConfiguration `json:"VcenterConfiguration,omitempty"`
	// The number of virtual machines present on this cluster.
	VmCount *int64 `json:"VmCount,omitempty"`
	// The type of availability zone used by the cluster. Physical zones are always used in HyperFlex Stretched Clusters. Logical zones may be used if a cluster has Logical Availability Zones (LAZ) enabled. * `UNKNOWN` - The type of zone configured on the HyperFlex cluster is not known. * `NOT_CONFIGURED` - The zone type is not configured. * `LOGICAL` - The zone is a logical zone created when the logical availability zones (LAZ) feature is enabled on the HyperFlex cluster. * `PHYSICAL` - The zone is a physical zone configured on a stretched HyperFlex cluster.
	ZoneType *string `json:"ZoneType,omitempty"`
	// An array of relationships to hyperflexAlarm resources.
	Alarm      []HyperflexAlarmRelationship            `json:"Alarm,omitempty"`
	Encryption NullableHyperflexEncryptionRelationship `json:"Encryption,omitempty"`
	Health     NullableHyperflexHealthRelationship     `json:"Health,omitempty"`
	License    NullableHyperflexLicenseRelationship    `json:"License,omitempty"`
	// An array of relationships to hyperflexNode resources.
	Nodes            []HyperflexNodeRelationship                 `json:"Nodes,omitempty"`
	RegisteredDevice NullableAssetDeviceRegistrationRelationship `json:"RegisteredDevice,omitempty"`
	// An array of relationships to ippoolPool resources.
	StorageClientIpPools []IppoolPoolRelationship   `json:"StorageClientIpPools,omitempty"`
	StorageClientVrf     NullableVrfVrfRelationship `json:"StorageClientVrf,omitempty"`
	// An array of relationships to storageHyperFlexStorageContainer resources.
	StorageContainers []StorageHyperFlexStorageContainerRelationship `json:"StorageContainers,omitempty"`
	// An array of relationships to storageHyperFlexVolume resources.
	Volumes              []StorageHyperFlexVolumeRelationship `json:"Volumes,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _HyperflexCluster HyperflexCluster

// NewHyperflexCluster instantiates a new HyperflexCluster object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHyperflexCluster(classId string, objectType string) *HyperflexCluster {
	this := HyperflexCluster{}
	this.ClassId = classId
	this.ObjectType = objectType
	var clusterPurpose string = "Storage"
	this.ClusterPurpose = &clusterPurpose
	var hypervisorType string = "ESXi"
	this.HypervisorType = &hypervisorType
	return &this
}

// NewHyperflexClusterWithDefaults instantiates a new HyperflexCluster object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHyperflexClusterWithDefaults() *HyperflexCluster {
	this := HyperflexCluster{}
	var classId string = "hyperflex.Cluster"
	this.ClassId = classId
	var objectType string = "hyperflex.Cluster"
	this.ObjectType = objectType
	return &this
}

// GetClassId returns the ClassId field value
func (o *HyperflexCluster) GetClassId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ClassId
}

// GetClassIdOk returns a tuple with the ClassId field value
// and a boolean to check if the value has been set.
func (o *HyperflexCluster) GetClassIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ClassId, true
}

// SetClassId sets field value
func (o *HyperflexCluster) SetClassId(v string) {
	o.ClassId = v
}

// GetDefaultClassId returns the default value "hyperflex.Cluster" of the ClassId field.
func (o *HyperflexCluster) GetDefaultClassId() interface{} {
	return "hyperflex.Cluster"
}

// GetObjectType returns the ObjectType field value
func (o *HyperflexCluster) GetObjectType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ObjectType
}

// GetObjectTypeOk returns a tuple with the ObjectType field value
// and a boolean to check if the value has been set.
func (o *HyperflexCluster) GetObjectTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ObjectType, true
}

// SetObjectType sets field value
func (o *HyperflexCluster) SetObjectType(v string) {
	o.ObjectType = v
}

// GetDefaultObjectType returns the default value "hyperflex.Cluster" of the ObjectType field.
func (o *HyperflexCluster) GetDefaultObjectType() interface{} {
	return "hyperflex.Cluster"
}

// GetCapability returns the Capability field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HyperflexCluster) GetCapability() HyperflexCapability {
	if o == nil || IsNil(o.Capability.Get()) {
		var ret HyperflexCapability
		return ret
	}
	return *o.Capability.Get()
}

// GetCapabilityOk returns a tuple with the Capability field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HyperflexCluster) GetCapabilityOk() (*HyperflexCapability, bool) {
	if o == nil {
		return nil, false
	}
	return o.Capability.Get(), o.Capability.IsSet()
}

// HasCapability returns a boolean if a field has been set.
func (o *HyperflexCluster) HasCapability() bool {
	if o != nil && o.Capability.IsSet() {
		return true
	}

	return false
}

// SetCapability gets a reference to the given NullableHyperflexCapability and assigns it to the Capability field.
func (o *HyperflexCluster) SetCapability(v HyperflexCapability) {
	o.Capability.Set(&v)
}

// SetCapabilityNil sets the value for Capability to be an explicit nil
func (o *HyperflexCluster) SetCapabilityNil() {
	o.Capability.Set(nil)
}

// UnsetCapability ensures that no value is present for Capability, not even an explicit nil
func (o *HyperflexCluster) UnsetCapability() {
	o.Capability.Unset()
}

// GetClusterType returns the ClusterType field value if set, zero value otherwise.
// Deprecated
func (o *HyperflexCluster) GetClusterType() int64 {
	if o == nil || IsNil(o.ClusterType) {
		var ret int64
		return ret
	}
	return *o.ClusterType
}

// GetClusterTypeOk returns a tuple with the ClusterType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// Deprecated
func (o *HyperflexCluster) GetClusterTypeOk() (*int64, bool) {
	if o == nil || IsNil(o.ClusterType) {
		return nil, false
	}
	return o.ClusterType, true
}

// HasClusterType returns a boolean if a field has been set.
func (o *HyperflexCluster) HasClusterType() bool {
	if o != nil && !IsNil(o.ClusterType) {
		return true
	}

	return false
}

// SetClusterType gets a reference to the given int64 and assigns it to the ClusterType field.
// Deprecated
func (o *HyperflexCluster) SetClusterType(v int64) {
	o.ClusterType = &v
}

// GetClusterUuid returns the ClusterUuid field value if set, zero value otherwise.
func (o *HyperflexCluster) GetClusterUuid() string {
	if o == nil || IsNil(o.ClusterUuid) {
		var ret string
		return ret
	}
	return *o.ClusterUuid
}

// GetClusterUuidOk returns a tuple with the ClusterUuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HyperflexCluster) GetClusterUuidOk() (*string, bool) {
	if o == nil || IsNil(o.ClusterUuid) {
		return nil, false
	}
	return o.ClusterUuid, true
}

// HasClusterUuid returns a boolean if a field has been set.
func (o *HyperflexCluster) HasClusterUuid() bool {
	if o != nil && !IsNil(o.ClusterUuid) {
		return true
	}

	return false
}

// SetClusterUuid gets a reference to the given string and assigns it to the ClusterUuid field.
func (o *HyperflexCluster) SetClusterUuid(v string) {
	o.ClusterUuid = &v
}

// GetDeviceId returns the DeviceId field value if set, zero value otherwise.
func (o *HyperflexCluster) GetDeviceId() string {
	if o == nil || IsNil(o.DeviceId) {
		var ret string
		return ret
	}
	return *o.DeviceId
}

// GetDeviceIdOk returns a tuple with the DeviceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HyperflexCluster) GetDeviceIdOk() (*string, bool) {
	if o == nil || IsNil(o.DeviceId) {
		return nil, false
	}
	return o.DeviceId, true
}

// HasDeviceId returns a boolean if a field has been set.
func (o *HyperflexCluster) HasDeviceId() bool {
	if o != nil && !IsNil(o.DeviceId) {
		return true
	}

	return false
}

// SetDeviceId gets a reference to the given string and assigns it to the DeviceId field.
func (o *HyperflexCluster) SetDeviceId(v string) {
	o.DeviceId = &v
}

// GetDnsServers returns the DnsServers field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HyperflexCluster) GetDnsServers() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.DnsServers
}

// GetDnsServersOk returns a tuple with the DnsServers field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HyperflexCluster) GetDnsServersOk() ([]string, bool) {
	if o == nil || IsNil(o.DnsServers) {
		return nil, false
	}
	return o.DnsServers, true
}

// HasDnsServers returns a boolean if a field has been set.
func (o *HyperflexCluster) HasDnsServers() bool {
	if o != nil && !IsNil(o.DnsServers) {
		return true
	}

	return false
}

// SetDnsServers gets a reference to the given []string and assigns it to the DnsServers field.
func (o *HyperflexCluster) SetDnsServers(v []string) {
	o.DnsServers = v
}

// GetEncryptionStatus returns the EncryptionStatus field value if set, zero value otherwise.
func (o *HyperflexCluster) GetEncryptionStatus() string {
	if o == nil || IsNil(o.EncryptionStatus) {
		var ret string
		return ret
	}
	return *o.EncryptionStatus
}

// GetEncryptionStatusOk returns a tuple with the EncryptionStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HyperflexCluster) GetEncryptionStatusOk() (*string, bool) {
	if o == nil || IsNil(o.EncryptionStatus) {
		return nil, false
	}
	return o.EncryptionStatus, true
}

// HasEncryptionStatus returns a boolean if a field has been set.
func (o *HyperflexCluster) HasEncryptionStatus() bool {
	if o != nil && !IsNil(o.EncryptionStatus) {
		return true
	}

	return false
}

// SetEncryptionStatus gets a reference to the given string and assigns it to the EncryptionStatus field.
func (o *HyperflexCluster) SetEncryptionStatus(v string) {
	o.EncryptionStatus = &v
}

// GetFltAggr returns the FltAggr field value if set, zero value otherwise.
// Deprecated
func (o *HyperflexCluster) GetFltAggr() int64 {
	if o == nil || IsNil(o.FltAggr) {
		var ret int64
		return ret
	}
	return *o.FltAggr
}

// GetFltAggrOk returns a tuple with the FltAggr field value if set, nil otherwise
// and a boolean to check if the value has been set.
// Deprecated
func (o *HyperflexCluster) GetFltAggrOk() (*int64, bool) {
	if o == nil || IsNil(o.FltAggr) {
		return nil, false
	}
	return o.FltAggr, true
}

// HasFltAggr returns a boolean if a field has been set.
func (o *HyperflexCluster) HasFltAggr() bool {
	if o != nil && !IsNil(o.FltAggr) {
		return true
	}

	return false
}

// SetFltAggr gets a reference to the given int64 and assigns it to the FltAggr field.
// Deprecated
func (o *HyperflexCluster) SetFltAggr(v int64) {
	o.FltAggr = &v
}

// GetHxdpBuildVersion returns the HxdpBuildVersion field value if set, zero value otherwise.
func (o *HyperflexCluster) GetHxdpBuildVersion() string {
	if o == nil || IsNil(o.HxdpBuildVersion) {
		var ret string
		return ret
	}
	return *o.HxdpBuildVersion
}

// GetHxdpBuildVersionOk returns a tuple with the HxdpBuildVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HyperflexCluster) GetHxdpBuildVersionOk() (*string, bool) {
	if o == nil || IsNil(o.HxdpBuildVersion) {
		return nil, false
	}
	return o.HxdpBuildVersion, true
}

// HasHxdpBuildVersion returns a boolean if a field has been set.
func (o *HyperflexCluster) HasHxdpBuildVersion() bool {
	if o != nil && !IsNil(o.HxdpBuildVersion) {
		return true
	}

	return false
}

// SetHxdpBuildVersion gets a reference to the given string and assigns it to the HxdpBuildVersion field.
func (o *HyperflexCluster) SetHxdpBuildVersion(v string) {
	o.HxdpBuildVersion = &v
}

// GetNetworkConfiguration returns the NetworkConfiguration field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HyperflexCluster) GetNetworkConfiguration() HyperflexNetworkConfiguration {
	if o == nil || IsNil(o.NetworkConfiguration.Get()) {
		var ret HyperflexNetworkConfiguration
		return ret
	}
	return *o.NetworkConfiguration.Get()
}

// GetNetworkConfigurationOk returns a tuple with the NetworkConfiguration field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HyperflexCluster) GetNetworkConfigurationOk() (*HyperflexNetworkConfiguration, bool) {
	if o == nil {
		return nil, false
	}
	return o.NetworkConfiguration.Get(), o.NetworkConfiguration.IsSet()
}

// HasNetworkConfiguration returns a boolean if a field has been set.
func (o *HyperflexCluster) HasNetworkConfiguration() bool {
	if o != nil && o.NetworkConfiguration.IsSet() {
		return true
	}

	return false
}

// SetNetworkConfiguration gets a reference to the given NullableHyperflexNetworkConfiguration and assigns it to the NetworkConfiguration field.
func (o *HyperflexCluster) SetNetworkConfiguration(v HyperflexNetworkConfiguration) {
	o.NetworkConfiguration.Set(&v)
}

// SetNetworkConfigurationNil sets the value for NetworkConfiguration to be an explicit nil
func (o *HyperflexCluster) SetNetworkConfigurationNil() {
	o.NetworkConfiguration.Set(nil)
}

// UnsetNetworkConfiguration ensures that no value is present for NetworkConfiguration, not even an explicit nil
func (o *HyperflexCluster) UnsetNetworkConfiguration() {
	o.NetworkConfiguration.Unset()
}

// GetNtpServers returns the NtpServers field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HyperflexCluster) GetNtpServers() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.NtpServers
}

// GetNtpServersOk returns a tuple with the NtpServers field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HyperflexCluster) GetNtpServersOk() ([]string, bool) {
	if o == nil || IsNil(o.NtpServers) {
		return nil, false
	}
	return o.NtpServers, true
}

// HasNtpServers returns a boolean if a field has been set.
func (o *HyperflexCluster) HasNtpServers() bool {
	if o != nil && !IsNil(o.NtpServers) {
		return true
	}

	return false
}

// SetNtpServers gets a reference to the given []string and assigns it to the NtpServers field.
func (o *HyperflexCluster) SetNtpServers(v []string) {
	o.NtpServers = v
}

// GetSummary returns the Summary field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HyperflexCluster) GetSummary() HyperflexSummary {
	if o == nil || IsNil(o.Summary.Get()) {
		var ret HyperflexSummary
		return ret
	}
	return *o.Summary.Get()
}

// GetSummaryOk returns a tuple with the Summary field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HyperflexCluster) GetSummaryOk() (*HyperflexSummary, bool) {
	if o == nil {
		return nil, false
	}
	return o.Summary.Get(), o.Summary.IsSet()
}

// HasSummary returns a boolean if a field has been set.
func (o *HyperflexCluster) HasSummary() bool {
	if o != nil && o.Summary.IsSet() {
		return true
	}

	return false
}

// SetSummary gets a reference to the given NullableHyperflexSummary and assigns it to the Summary field.
func (o *HyperflexCluster) SetSummary(v HyperflexSummary) {
	o.Summary.Set(&v)
}

// SetSummaryNil sets the value for Summary to be an explicit nil
func (o *HyperflexCluster) SetSummaryNil() {
	o.Summary.Set(nil)
}

// UnsetSummary ensures that no value is present for Summary, not even an explicit nil
func (o *HyperflexCluster) UnsetSummary() {
	o.Summary.Unset()
}

// GetUpgradeStatus returns the UpgradeStatus field value if set, zero value otherwise.
func (o *HyperflexCluster) GetUpgradeStatus() string {
	if o == nil || IsNil(o.UpgradeStatus) {
		var ret string
		return ret
	}
	return *o.UpgradeStatus
}

// GetUpgradeStatusOk returns a tuple with the UpgradeStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HyperflexCluster) GetUpgradeStatusOk() (*string, bool) {
	if o == nil || IsNil(o.UpgradeStatus) {
		return nil, false
	}
	return o.UpgradeStatus, true
}

// HasUpgradeStatus returns a boolean if a field has been set.
func (o *HyperflexCluster) HasUpgradeStatus() bool {
	if o != nil && !IsNil(o.UpgradeStatus) {
		return true
	}

	return false
}

// SetUpgradeStatus gets a reference to the given string and assigns it to the UpgradeStatus field.
func (o *HyperflexCluster) SetUpgradeStatus(v string) {
	o.UpgradeStatus = &v
}

// GetUplinkSpeed returns the UplinkSpeed field value if set, zero value otherwise.
func (o *HyperflexCluster) GetUplinkSpeed() string {
	if o == nil || IsNil(o.UplinkSpeed) {
		var ret string
		return ret
	}
	return *o.UplinkSpeed
}

// GetUplinkSpeedOk returns a tuple with the UplinkSpeed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HyperflexCluster) GetUplinkSpeedOk() (*string, bool) {
	if o == nil || IsNil(o.UplinkSpeed) {
		return nil, false
	}
	return o.UplinkSpeed, true
}

// HasUplinkSpeed returns a boolean if a field has been set.
func (o *HyperflexCluster) HasUplinkSpeed() bool {
	if o != nil && !IsNil(o.UplinkSpeed) {
		return true
	}

	return false
}

// SetUplinkSpeed gets a reference to the given string and assigns it to the UplinkSpeed field.
func (o *HyperflexCluster) SetUplinkSpeed(v string) {
	o.UplinkSpeed = &v
}

// GetVcenterConfiguration returns the VcenterConfiguration field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HyperflexCluster) GetVcenterConfiguration() HyperflexVcenterConfiguration {
	if o == nil || IsNil(o.VcenterConfiguration.Get()) {
		var ret HyperflexVcenterConfiguration
		return ret
	}
	return *o.VcenterConfiguration.Get()
}

// GetVcenterConfigurationOk returns a tuple with the VcenterConfiguration field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HyperflexCluster) GetVcenterConfigurationOk() (*HyperflexVcenterConfiguration, bool) {
	if o == nil {
		return nil, false
	}
	return o.VcenterConfiguration.Get(), o.VcenterConfiguration.IsSet()
}

// HasVcenterConfiguration returns a boolean if a field has been set.
func (o *HyperflexCluster) HasVcenterConfiguration() bool {
	if o != nil && o.VcenterConfiguration.IsSet() {
		return true
	}

	return false
}

// SetVcenterConfiguration gets a reference to the given NullableHyperflexVcenterConfiguration and assigns it to the VcenterConfiguration field.
func (o *HyperflexCluster) SetVcenterConfiguration(v HyperflexVcenterConfiguration) {
	o.VcenterConfiguration.Set(&v)
}

// SetVcenterConfigurationNil sets the value for VcenterConfiguration to be an explicit nil
func (o *HyperflexCluster) SetVcenterConfigurationNil() {
	o.VcenterConfiguration.Set(nil)
}

// UnsetVcenterConfiguration ensures that no value is present for VcenterConfiguration, not even an explicit nil
func (o *HyperflexCluster) UnsetVcenterConfiguration() {
	o.VcenterConfiguration.Unset()
}

// GetVmCount returns the VmCount field value if set, zero value otherwise.
func (o *HyperflexCluster) GetVmCount() int64 {
	if o == nil || IsNil(o.VmCount) {
		var ret int64
		return ret
	}
	return *o.VmCount
}

// GetVmCountOk returns a tuple with the VmCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HyperflexCluster) GetVmCountOk() (*int64, bool) {
	if o == nil || IsNil(o.VmCount) {
		return nil, false
	}
	return o.VmCount, true
}

// HasVmCount returns a boolean if a field has been set.
func (o *HyperflexCluster) HasVmCount() bool {
	if o != nil && !IsNil(o.VmCount) {
		return true
	}

	return false
}

// SetVmCount gets a reference to the given int64 and assigns it to the VmCount field.
func (o *HyperflexCluster) SetVmCount(v int64) {
	o.VmCount = &v
}

// GetZoneType returns the ZoneType field value if set, zero value otherwise.
func (o *HyperflexCluster) GetZoneType() string {
	if o == nil || IsNil(o.ZoneType) {
		var ret string
		return ret
	}
	return *o.ZoneType
}

// GetZoneTypeOk returns a tuple with the ZoneType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HyperflexCluster) GetZoneTypeOk() (*string, bool) {
	if o == nil || IsNil(o.ZoneType) {
		return nil, false
	}
	return o.ZoneType, true
}

// HasZoneType returns a boolean if a field has been set.
func (o *HyperflexCluster) HasZoneType() bool {
	if o != nil && !IsNil(o.ZoneType) {
		return true
	}

	return false
}

// SetZoneType gets a reference to the given string and assigns it to the ZoneType field.
func (o *HyperflexCluster) SetZoneType(v string) {
	o.ZoneType = &v
}

// GetAlarm returns the Alarm field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HyperflexCluster) GetAlarm() []HyperflexAlarmRelationship {
	if o == nil {
		var ret []HyperflexAlarmRelationship
		return ret
	}
	return o.Alarm
}

// GetAlarmOk returns a tuple with the Alarm field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HyperflexCluster) GetAlarmOk() ([]HyperflexAlarmRelationship, bool) {
	if o == nil || IsNil(o.Alarm) {
		return nil, false
	}
	return o.Alarm, true
}

// HasAlarm returns a boolean if a field has been set.
func (o *HyperflexCluster) HasAlarm() bool {
	if o != nil && !IsNil(o.Alarm) {
		return true
	}

	return false
}

// SetAlarm gets a reference to the given []HyperflexAlarmRelationship and assigns it to the Alarm field.
func (o *HyperflexCluster) SetAlarm(v []HyperflexAlarmRelationship) {
	o.Alarm = v
}

// GetEncryption returns the Encryption field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HyperflexCluster) GetEncryption() HyperflexEncryptionRelationship {
	if o == nil || IsNil(o.Encryption.Get()) {
		var ret HyperflexEncryptionRelationship
		return ret
	}
	return *o.Encryption.Get()
}

// GetEncryptionOk returns a tuple with the Encryption field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HyperflexCluster) GetEncryptionOk() (*HyperflexEncryptionRelationship, bool) {
	if o == nil {
		return nil, false
	}
	return o.Encryption.Get(), o.Encryption.IsSet()
}

// HasEncryption returns a boolean if a field has been set.
func (o *HyperflexCluster) HasEncryption() bool {
	if o != nil && o.Encryption.IsSet() {
		return true
	}

	return false
}

// SetEncryption gets a reference to the given NullableHyperflexEncryptionRelationship and assigns it to the Encryption field.
func (o *HyperflexCluster) SetEncryption(v HyperflexEncryptionRelationship) {
	o.Encryption.Set(&v)
}

// SetEncryptionNil sets the value for Encryption to be an explicit nil
func (o *HyperflexCluster) SetEncryptionNil() {
	o.Encryption.Set(nil)
}

// UnsetEncryption ensures that no value is present for Encryption, not even an explicit nil
func (o *HyperflexCluster) UnsetEncryption() {
	o.Encryption.Unset()
}

// GetHealth returns the Health field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HyperflexCluster) GetHealth() HyperflexHealthRelationship {
	if o == nil || IsNil(o.Health.Get()) {
		var ret HyperflexHealthRelationship
		return ret
	}
	return *o.Health.Get()
}

// GetHealthOk returns a tuple with the Health field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HyperflexCluster) GetHealthOk() (*HyperflexHealthRelationship, bool) {
	if o == nil {
		return nil, false
	}
	return o.Health.Get(), o.Health.IsSet()
}

// HasHealth returns a boolean if a field has been set.
func (o *HyperflexCluster) HasHealth() bool {
	if o != nil && o.Health.IsSet() {
		return true
	}

	return false
}

// SetHealth gets a reference to the given NullableHyperflexHealthRelationship and assigns it to the Health field.
func (o *HyperflexCluster) SetHealth(v HyperflexHealthRelationship) {
	o.Health.Set(&v)
}

// SetHealthNil sets the value for Health to be an explicit nil
func (o *HyperflexCluster) SetHealthNil() {
	o.Health.Set(nil)
}

// UnsetHealth ensures that no value is present for Health, not even an explicit nil
func (o *HyperflexCluster) UnsetHealth() {
	o.Health.Unset()
}

// GetLicense returns the License field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HyperflexCluster) GetLicense() HyperflexLicenseRelationship {
	if o == nil || IsNil(o.License.Get()) {
		var ret HyperflexLicenseRelationship
		return ret
	}
	return *o.License.Get()
}

// GetLicenseOk returns a tuple with the License field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HyperflexCluster) GetLicenseOk() (*HyperflexLicenseRelationship, bool) {
	if o == nil {
		return nil, false
	}
	return o.License.Get(), o.License.IsSet()
}

// HasLicense returns a boolean if a field has been set.
func (o *HyperflexCluster) HasLicense() bool {
	if o != nil && o.License.IsSet() {
		return true
	}

	return false
}

// SetLicense gets a reference to the given NullableHyperflexLicenseRelationship and assigns it to the License field.
func (o *HyperflexCluster) SetLicense(v HyperflexLicenseRelationship) {
	o.License.Set(&v)
}

// SetLicenseNil sets the value for License to be an explicit nil
func (o *HyperflexCluster) SetLicenseNil() {
	o.License.Set(nil)
}

// UnsetLicense ensures that no value is present for License, not even an explicit nil
func (o *HyperflexCluster) UnsetLicense() {
	o.License.Unset()
}

// GetNodes returns the Nodes field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HyperflexCluster) GetNodes() []HyperflexNodeRelationship {
	if o == nil {
		var ret []HyperflexNodeRelationship
		return ret
	}
	return o.Nodes
}

// GetNodesOk returns a tuple with the Nodes field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HyperflexCluster) GetNodesOk() ([]HyperflexNodeRelationship, bool) {
	if o == nil || IsNil(o.Nodes) {
		return nil, false
	}
	return o.Nodes, true
}

// HasNodes returns a boolean if a field has been set.
func (o *HyperflexCluster) HasNodes() bool {
	if o != nil && !IsNil(o.Nodes) {
		return true
	}

	return false
}

// SetNodes gets a reference to the given []HyperflexNodeRelationship and assigns it to the Nodes field.
func (o *HyperflexCluster) SetNodes(v []HyperflexNodeRelationship) {
	o.Nodes = v
}

// GetRegisteredDevice returns the RegisteredDevice field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HyperflexCluster) GetRegisteredDevice() AssetDeviceRegistrationRelationship {
	if o == nil || IsNil(o.RegisteredDevice.Get()) {
		var ret AssetDeviceRegistrationRelationship
		return ret
	}
	return *o.RegisteredDevice.Get()
}

// GetRegisteredDeviceOk returns a tuple with the RegisteredDevice field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HyperflexCluster) GetRegisteredDeviceOk() (*AssetDeviceRegistrationRelationship, bool) {
	if o == nil {
		return nil, false
	}
	return o.RegisteredDevice.Get(), o.RegisteredDevice.IsSet()
}

// HasRegisteredDevice returns a boolean if a field has been set.
func (o *HyperflexCluster) HasRegisteredDevice() bool {
	if o != nil && o.RegisteredDevice.IsSet() {
		return true
	}

	return false
}

// SetRegisteredDevice gets a reference to the given NullableAssetDeviceRegistrationRelationship and assigns it to the RegisteredDevice field.
func (o *HyperflexCluster) SetRegisteredDevice(v AssetDeviceRegistrationRelationship) {
	o.RegisteredDevice.Set(&v)
}

// SetRegisteredDeviceNil sets the value for RegisteredDevice to be an explicit nil
func (o *HyperflexCluster) SetRegisteredDeviceNil() {
	o.RegisteredDevice.Set(nil)
}

// UnsetRegisteredDevice ensures that no value is present for RegisteredDevice, not even an explicit nil
func (o *HyperflexCluster) UnsetRegisteredDevice() {
	o.RegisteredDevice.Unset()
}

// GetStorageClientIpPools returns the StorageClientIpPools field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HyperflexCluster) GetStorageClientIpPools() []IppoolPoolRelationship {
	if o == nil {
		var ret []IppoolPoolRelationship
		return ret
	}
	return o.StorageClientIpPools
}

// GetStorageClientIpPoolsOk returns a tuple with the StorageClientIpPools field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HyperflexCluster) GetStorageClientIpPoolsOk() ([]IppoolPoolRelationship, bool) {
	if o == nil || IsNil(o.StorageClientIpPools) {
		return nil, false
	}
	return o.StorageClientIpPools, true
}

// HasStorageClientIpPools returns a boolean if a field has been set.
func (o *HyperflexCluster) HasStorageClientIpPools() bool {
	if o != nil && !IsNil(o.StorageClientIpPools) {
		return true
	}

	return false
}

// SetStorageClientIpPools gets a reference to the given []IppoolPoolRelationship and assigns it to the StorageClientIpPools field.
func (o *HyperflexCluster) SetStorageClientIpPools(v []IppoolPoolRelationship) {
	o.StorageClientIpPools = v
}

// GetStorageClientVrf returns the StorageClientVrf field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HyperflexCluster) GetStorageClientVrf() VrfVrfRelationship {
	if o == nil || IsNil(o.StorageClientVrf.Get()) {
		var ret VrfVrfRelationship
		return ret
	}
	return *o.StorageClientVrf.Get()
}

// GetStorageClientVrfOk returns a tuple with the StorageClientVrf field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HyperflexCluster) GetStorageClientVrfOk() (*VrfVrfRelationship, bool) {
	if o == nil {
		return nil, false
	}
	return o.StorageClientVrf.Get(), o.StorageClientVrf.IsSet()
}

// HasStorageClientVrf returns a boolean if a field has been set.
func (o *HyperflexCluster) HasStorageClientVrf() bool {
	if o != nil && o.StorageClientVrf.IsSet() {
		return true
	}

	return false
}

// SetStorageClientVrf gets a reference to the given NullableVrfVrfRelationship and assigns it to the StorageClientVrf field.
func (o *HyperflexCluster) SetStorageClientVrf(v VrfVrfRelationship) {
	o.StorageClientVrf.Set(&v)
}

// SetStorageClientVrfNil sets the value for StorageClientVrf to be an explicit nil
func (o *HyperflexCluster) SetStorageClientVrfNil() {
	o.StorageClientVrf.Set(nil)
}

// UnsetStorageClientVrf ensures that no value is present for StorageClientVrf, not even an explicit nil
func (o *HyperflexCluster) UnsetStorageClientVrf() {
	o.StorageClientVrf.Unset()
}

// GetStorageContainers returns the StorageContainers field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HyperflexCluster) GetStorageContainers() []StorageHyperFlexStorageContainerRelationship {
	if o == nil {
		var ret []StorageHyperFlexStorageContainerRelationship
		return ret
	}
	return o.StorageContainers
}

// GetStorageContainersOk returns a tuple with the StorageContainers field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HyperflexCluster) GetStorageContainersOk() ([]StorageHyperFlexStorageContainerRelationship, bool) {
	if o == nil || IsNil(o.StorageContainers) {
		return nil, false
	}
	return o.StorageContainers, true
}

// HasStorageContainers returns a boolean if a field has been set.
func (o *HyperflexCluster) HasStorageContainers() bool {
	if o != nil && !IsNil(o.StorageContainers) {
		return true
	}

	return false
}

// SetStorageContainers gets a reference to the given []StorageHyperFlexStorageContainerRelationship and assigns it to the StorageContainers field.
func (o *HyperflexCluster) SetStorageContainers(v []StorageHyperFlexStorageContainerRelationship) {
	o.StorageContainers = v
}

// GetVolumes returns the Volumes field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HyperflexCluster) GetVolumes() []StorageHyperFlexVolumeRelationship {
	if o == nil {
		var ret []StorageHyperFlexVolumeRelationship
		return ret
	}
	return o.Volumes
}

// GetVolumesOk returns a tuple with the Volumes field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HyperflexCluster) GetVolumesOk() ([]StorageHyperFlexVolumeRelationship, bool) {
	if o == nil || IsNil(o.Volumes) {
		return nil, false
	}
	return o.Volumes, true
}

// HasVolumes returns a boolean if a field has been set.
func (o *HyperflexCluster) HasVolumes() bool {
	if o != nil && !IsNil(o.Volumes) {
		return true
	}

	return false
}

// SetVolumes gets a reference to the given []StorageHyperFlexVolumeRelationship and assigns it to the Volumes field.
func (o *HyperflexCluster) SetVolumes(v []StorageHyperFlexVolumeRelationship) {
	o.Volumes = v
}

func (o HyperflexCluster) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o HyperflexCluster) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	serializedHyperflexBaseCluster, errHyperflexBaseCluster := json.Marshal(o.HyperflexBaseCluster)
	if errHyperflexBaseCluster != nil {
		return map[string]interface{}{}, errHyperflexBaseCluster
	}
	errHyperflexBaseCluster = json.Unmarshal([]byte(serializedHyperflexBaseCluster), &toSerialize)
	if errHyperflexBaseCluster != nil {
		return map[string]interface{}{}, errHyperflexBaseCluster
	}
	if _, exists := toSerialize["ClassId"]; !exists {
		toSerialize["ClassId"] = o.GetDefaultClassId()
	}
	toSerialize["ClassId"] = o.ClassId
	if _, exists := toSerialize["ObjectType"]; !exists {
		toSerialize["ObjectType"] = o.GetDefaultObjectType()
	}
	toSerialize["ObjectType"] = o.ObjectType
	if o.Capability.IsSet() {
		toSerialize["Capability"] = o.Capability.Get()
	}
	if !IsNil(o.ClusterType) {
		toSerialize["ClusterType"] = o.ClusterType
	}
	if !IsNil(o.ClusterUuid) {
		toSerialize["ClusterUuid"] = o.ClusterUuid
	}
	if !IsNil(o.DeviceId) {
		toSerialize["DeviceId"] = o.DeviceId
	}
	if o.DnsServers != nil {
		toSerialize["DnsServers"] = o.DnsServers
	}
	if !IsNil(o.EncryptionStatus) {
		toSerialize["EncryptionStatus"] = o.EncryptionStatus
	}
	if !IsNil(o.FltAggr) {
		toSerialize["FltAggr"] = o.FltAggr
	}
	if !IsNil(o.HxdpBuildVersion) {
		toSerialize["HxdpBuildVersion"] = o.HxdpBuildVersion
	}
	if o.NetworkConfiguration.IsSet() {
		toSerialize["NetworkConfiguration"] = o.NetworkConfiguration.Get()
	}
	if o.NtpServers != nil {
		toSerialize["NtpServers"] = o.NtpServers
	}
	if o.Summary.IsSet() {
		toSerialize["Summary"] = o.Summary.Get()
	}
	if !IsNil(o.UpgradeStatus) {
		toSerialize["UpgradeStatus"] = o.UpgradeStatus
	}
	if !IsNil(o.UplinkSpeed) {
		toSerialize["UplinkSpeed"] = o.UplinkSpeed
	}
	if o.VcenterConfiguration.IsSet() {
		toSerialize["VcenterConfiguration"] = o.VcenterConfiguration.Get()
	}
	if !IsNil(o.VmCount) {
		toSerialize["VmCount"] = o.VmCount
	}
	if !IsNil(o.ZoneType) {
		toSerialize["ZoneType"] = o.ZoneType
	}
	if o.Alarm != nil {
		toSerialize["Alarm"] = o.Alarm
	}
	if o.Encryption.IsSet() {
		toSerialize["Encryption"] = o.Encryption.Get()
	}
	if o.Health.IsSet() {
		toSerialize["Health"] = o.Health.Get()
	}
	if o.License.IsSet() {
		toSerialize["License"] = o.License.Get()
	}
	if o.Nodes != nil {
		toSerialize["Nodes"] = o.Nodes
	}
	if o.RegisteredDevice.IsSet() {
		toSerialize["RegisteredDevice"] = o.RegisteredDevice.Get()
	}
	if o.StorageClientIpPools != nil {
		toSerialize["StorageClientIpPools"] = o.StorageClientIpPools
	}
	if o.StorageClientVrf.IsSet() {
		toSerialize["StorageClientVrf"] = o.StorageClientVrf.Get()
	}
	if o.StorageContainers != nil {
		toSerialize["StorageContainers"] = o.StorageContainers
	}
	if o.Volumes != nil {
		toSerialize["Volumes"] = o.Volumes
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *HyperflexCluster) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"ClassId",
		"ObjectType",
	}

	// defaultValueFuncMap captures the default values for required properties.
	// These values are used when required properties are missing from the payload.
	defaultValueFuncMap := map[string]func() interface{}{
		"ClassId":    o.GetDefaultClassId,
		"ObjectType": o.GetDefaultObjectType,
	}
	var defaultValueApplied bool
	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			if _, ok := defaultValueFuncMap[requiredProperty]; ok {
				allProperties[requiredProperty] = defaultValueFuncMap[requiredProperty]()
				defaultValueApplied = true
			}
		}
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	if defaultValueApplied {
		data, err = json.Marshal(allProperties)
		if err != nil {
			return err
		}
	}
	type HyperflexClusterWithoutEmbeddedStruct struct {
		// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.
		ClassId string `json:"ClassId"`
		// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
		ObjectType string                      `json:"ObjectType"`
		Capability NullableHyperflexCapability `json:"Capability,omitempty"`
		// The storage type of this cluster (All Flash or Hybrid).
		// Deprecated
		ClusterType *int64 `json:"ClusterType,omitempty"`
		// The unique identifier for this HyperFlex cluster.
		ClusterUuid *string `json:"ClusterUuid,omitempty"`
		// The unique identifier of the device registration that represents this HyperFlex cluster's connection to Intersight.
		DeviceId   *string  `json:"DeviceId,omitempty"`
		DnsServers []string `json:"DnsServers,omitempty"`
		// This captures the encryption status for a HyperFlex cluster. Currently it will have the status if HXA-CLU-0020 alarm is raised. In the future it can capture other details.
		EncryptionStatus *string `json:"EncryptionStatus,omitempty"`
		// The number of yellow (warning) and red (critical) alarms stored as an aggregate. The first 16 bits indicate the number of red alarms, and the last 16 bits contain the number of yellow alarms.
		// Deprecated
		FltAggr *int64 `json:"FltAggr,omitempty"`
		// The version and build number of the HyperFlex Data Platform for this cluster. After a cluster upgrade, this version string will be updated on the next inventory cycle to reflect the newly installed version.
		HxdpBuildVersion     *string                               `json:"HxdpBuildVersion,omitempty"`
		NetworkConfiguration NullableHyperflexNetworkConfiguration `json:"NetworkConfiguration,omitempty"`
		NtpServers           []string                              `json:"NtpServers,omitempty"`
		Summary              NullableHyperflexSummary              `json:"Summary,omitempty"`
		// The upgrade status of the HyperFlex cluster. * `Unknown` - The upgrade status of the HyperFlex cluster could not be determined. * `Ok` - The upgrade of the HyperFlex cluster is complete. * `InProgress` - The upgrade of the HyperFlex cluster is in-progress. * `Failed` - The upgrade of the HyperFlex cluster has failed. * `Waiting` - The upgrade of the HyperFlex cluster is waiting to continue execution.
		UpgradeStatus *string `json:"UpgradeStatus,omitempty"`
		// The uplink speed information of the HyperFlex cluster. * `Unknown` - The uplink speed could not be determined. The physical servers are potentially not claimed. * `10G` - The uplink speed is 10G. * `1G` - The uplink speed is 1G.
		UplinkSpeed          *string                               `json:"UplinkSpeed,omitempty"`
		VcenterConfiguration NullableHyperflexVcenterConfiguration `json:"VcenterConfiguration,omitempty"`
		// The number of virtual machines present on this cluster.
		VmCount *int64 `json:"VmCount,omitempty"`
		// The type of availability zone used by the cluster. Physical zones are always used in HyperFlex Stretched Clusters. Logical zones may be used if a cluster has Logical Availability Zones (LAZ) enabled. * `UNKNOWN` - The type of zone configured on the HyperFlex cluster is not known. * `NOT_CONFIGURED` - The zone type is not configured. * `LOGICAL` - The zone is a logical zone created when the logical availability zones (LAZ) feature is enabled on the HyperFlex cluster. * `PHYSICAL` - The zone is a physical zone configured on a stretched HyperFlex cluster.
		ZoneType *string `json:"ZoneType,omitempty"`
		// An array of relationships to hyperflexAlarm resources.
		Alarm      []HyperflexAlarmRelationship            `json:"Alarm,omitempty"`
		Encryption NullableHyperflexEncryptionRelationship `json:"Encryption,omitempty"`
		Health     NullableHyperflexHealthRelationship     `json:"Health,omitempty"`
		License    NullableHyperflexLicenseRelationship    `json:"License,omitempty"`
		// An array of relationships to hyperflexNode resources.
		Nodes            []HyperflexNodeRelationship                 `json:"Nodes,omitempty"`
		RegisteredDevice NullableAssetDeviceRegistrationRelationship `json:"RegisteredDevice,omitempty"`
		// An array of relationships to ippoolPool resources.
		StorageClientIpPools []IppoolPoolRelationship   `json:"StorageClientIpPools,omitempty"`
		StorageClientVrf     NullableVrfVrfRelationship `json:"StorageClientVrf,omitempty"`
		// An array of relationships to storageHyperFlexStorageContainer resources.
		StorageContainers []StorageHyperFlexStorageContainerRelationship `json:"StorageContainers,omitempty"`
		// An array of relationships to storageHyperFlexVolume resources.
		Volumes []StorageHyperFlexVolumeRelationship `json:"Volumes,omitempty"`
	}

	varHyperflexClusterWithoutEmbeddedStruct := HyperflexClusterWithoutEmbeddedStruct{}

	err = json.Unmarshal(data, &varHyperflexClusterWithoutEmbeddedStruct)
	if err == nil {
		varHyperflexCluster := _HyperflexCluster{}
		varHyperflexCluster.ClassId = varHyperflexClusterWithoutEmbeddedStruct.ClassId
		varHyperflexCluster.ObjectType = varHyperflexClusterWithoutEmbeddedStruct.ObjectType
		varHyperflexCluster.Capability = varHyperflexClusterWithoutEmbeddedStruct.Capability
		varHyperflexCluster.ClusterType = varHyperflexClusterWithoutEmbeddedStruct.ClusterType
		varHyperflexCluster.ClusterUuid = varHyperflexClusterWithoutEmbeddedStruct.ClusterUuid
		varHyperflexCluster.DeviceId = varHyperflexClusterWithoutEmbeddedStruct.DeviceId
		varHyperflexCluster.DnsServers = varHyperflexClusterWithoutEmbeddedStruct.DnsServers
		varHyperflexCluster.EncryptionStatus = varHyperflexClusterWithoutEmbeddedStruct.EncryptionStatus
		varHyperflexCluster.FltAggr = varHyperflexClusterWithoutEmbeddedStruct.FltAggr
		varHyperflexCluster.HxdpBuildVersion = varHyperflexClusterWithoutEmbeddedStruct.HxdpBuildVersion
		varHyperflexCluster.NetworkConfiguration = varHyperflexClusterWithoutEmbeddedStruct.NetworkConfiguration
		varHyperflexCluster.NtpServers = varHyperflexClusterWithoutEmbeddedStruct.NtpServers
		varHyperflexCluster.Summary = varHyperflexClusterWithoutEmbeddedStruct.Summary
		varHyperflexCluster.UpgradeStatus = varHyperflexClusterWithoutEmbeddedStruct.UpgradeStatus
		varHyperflexCluster.UplinkSpeed = varHyperflexClusterWithoutEmbeddedStruct.UplinkSpeed
		varHyperflexCluster.VcenterConfiguration = varHyperflexClusterWithoutEmbeddedStruct.VcenterConfiguration
		varHyperflexCluster.VmCount = varHyperflexClusterWithoutEmbeddedStruct.VmCount
		varHyperflexCluster.ZoneType = varHyperflexClusterWithoutEmbeddedStruct.ZoneType
		varHyperflexCluster.Alarm = varHyperflexClusterWithoutEmbeddedStruct.Alarm
		varHyperflexCluster.Encryption = varHyperflexClusterWithoutEmbeddedStruct.Encryption
		varHyperflexCluster.Health = varHyperflexClusterWithoutEmbeddedStruct.Health
		varHyperflexCluster.License = varHyperflexClusterWithoutEmbeddedStruct.License
		varHyperflexCluster.Nodes = varHyperflexClusterWithoutEmbeddedStruct.Nodes
		varHyperflexCluster.RegisteredDevice = varHyperflexClusterWithoutEmbeddedStruct.RegisteredDevice
		varHyperflexCluster.StorageClientIpPools = varHyperflexClusterWithoutEmbeddedStruct.StorageClientIpPools
		varHyperflexCluster.StorageClientVrf = varHyperflexClusterWithoutEmbeddedStruct.StorageClientVrf
		varHyperflexCluster.StorageContainers = varHyperflexClusterWithoutEmbeddedStruct.StorageContainers
		varHyperflexCluster.Volumes = varHyperflexClusterWithoutEmbeddedStruct.Volumes
		*o = HyperflexCluster(varHyperflexCluster)
	} else {
		return err
	}

	varHyperflexCluster := _HyperflexCluster{}

	err = json.Unmarshal(data, &varHyperflexCluster)
	if err == nil {
		o.HyperflexBaseCluster = varHyperflexCluster.HyperflexBaseCluster
	} else {
		return err
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "ClassId")
		delete(additionalProperties, "ObjectType")
		delete(additionalProperties, "Capability")
		delete(additionalProperties, "ClusterType")
		delete(additionalProperties, "ClusterUuid")
		delete(additionalProperties, "DeviceId")
		delete(additionalProperties, "DnsServers")
		delete(additionalProperties, "EncryptionStatus")
		delete(additionalProperties, "FltAggr")
		delete(additionalProperties, "HxdpBuildVersion")
		delete(additionalProperties, "NetworkConfiguration")
		delete(additionalProperties, "NtpServers")
		delete(additionalProperties, "Summary")
		delete(additionalProperties, "UpgradeStatus")
		delete(additionalProperties, "UplinkSpeed")
		delete(additionalProperties, "VcenterConfiguration")
		delete(additionalProperties, "VmCount")
		delete(additionalProperties, "ZoneType")
		delete(additionalProperties, "Alarm")
		delete(additionalProperties, "Encryption")
		delete(additionalProperties, "Health")
		delete(additionalProperties, "License")
		delete(additionalProperties, "Nodes")
		delete(additionalProperties, "RegisteredDevice")
		delete(additionalProperties, "StorageClientIpPools")
		delete(additionalProperties, "StorageClientVrf")
		delete(additionalProperties, "StorageContainers")
		delete(additionalProperties, "Volumes")

		// remove fields from embedded structs
		reflectHyperflexBaseCluster := reflect.ValueOf(o.HyperflexBaseCluster)
		for i := 0; i < reflectHyperflexBaseCluster.Type().NumField(); i++ {
			t := reflectHyperflexBaseCluster.Type().Field(i)

			if jsonTag := t.Tag.Get("json"); jsonTag != "" {
				fieldName := ""
				if commaIdx := strings.Index(jsonTag, ","); commaIdx > 0 {
					fieldName = jsonTag[:commaIdx]
				} else {
					fieldName = jsonTag
				}
				if fieldName != "AdditionalProperties" {
					delete(additionalProperties, fieldName)
				}
			}
		}

		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableHyperflexCluster struct {
	value *HyperflexCluster
	isSet bool
}

func (v NullableHyperflexCluster) Get() *HyperflexCluster {
	return v.value
}

func (v *NullableHyperflexCluster) Set(val *HyperflexCluster) {
	v.value = val
	v.isSet = true
}

func (v NullableHyperflexCluster) IsSet() bool {
	return v.isSet
}

func (v *NullableHyperflexCluster) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHyperflexCluster(val *HyperflexCluster) *NullableHyperflexCluster {
	return &NullableHyperflexCluster{value: val, isSet: true}
}

func (v NullableHyperflexCluster) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHyperflexCluster) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
