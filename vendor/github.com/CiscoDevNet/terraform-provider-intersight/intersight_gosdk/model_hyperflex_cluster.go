/*
 * Cisco Intersight
 *
 * Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations. The Intersight OpenAPI document defines the complete set of properties that are returned in the HTTP response. From that perspective, a client can expect that no additional properties are returned, unless these properties are explicitly defined in the OpenAPI document. However, when a client uses an older version of the Intersight OpenAPI document, the server may send additional properties because the software is more recent than the client. In that case, the client may receive properties that it does not know about. Some generated SDKs perform a strict validation of the HTTP response body against the OpenAPI document. This document was created on 2021-07-21T16:37:30Z.
 *
 * API version: 1.0.9-4403
 * Contact: intersight@cisco.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package intersight

import (
	"encoding/json"
	"reflect"
	"strings"
)

// HyperflexCluster A HyperFlex cluster. Contains inventory information concerning the health, software versions, storage, and nodes of the cluster.
type HyperflexCluster struct {
	HyperflexBaseCluster
	// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.
	ClassId string `json:"ClassId"`
	// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
	ObjectType string `json:"ObjectType"`
	// The storage type of this cluster (All Flash or Hybrid).
	ClusterType *int64 `json:"ClusterType,omitempty"`
	// The unique identifier for this HyperFlex cluster.
	ClusterUuid *string `json:"ClusterUuid,omitempty"`
	// The unique identifier of the device registration that represents this HyperFlex cluster's connection to Intersight.
	DeviceId *string `json:"DeviceId,omitempty"`
	// The number of yellow (warning) and red (critical) alarms stored as an aggregate. The first 16 bits indicate the number of red alarms, and the last 16 bits contain the number of yellow alarms.
	FltAggr *int64 `json:"FltAggr,omitempty"`
	// The version and build number of the HyperFlex Data Platform for this cluster. After a cluster upgrade, this version string will be updated on the next inventory cycle to reflect the newly installed version.
	HxdpBuildVersion *string                  `json:"HxdpBuildVersion,omitempty"`
	Summary          NullableHyperflexSummary `json:"Summary,omitempty"`
	// The number of virtual machines present on this cluster.
	VmCount *int64 `json:"VmCount,omitempty"`
	// An array of relationships to hyperflexAlarm resources.
	Alarm   []HyperflexAlarmRelationship  `json:"Alarm,omitempty"`
	Health  *HyperflexHealthRelationship  `json:"Health,omitempty"`
	License *HyperflexLicenseRelationship `json:"License,omitempty"`
	// An array of relationships to hyperflexNode resources.
	Nodes            []HyperflexNodeRelationship          `json:"Nodes,omitempty"`
	RegisteredDevice *AssetDeviceRegistrationRelationship `json:"RegisteredDevice,omitempty"`
	// An array of relationships to storageHyperFlexStorageContainer resources.
	StorageContainers []StorageHyperFlexStorageContainerRelationship `json:"StorageContainers,omitempty"`
	// An array of relationships to storageHyperFlexVolume resources.
	Volumes              []StorageHyperFlexVolumeRelationship `json:"Volumes,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _HyperflexCluster HyperflexCluster

// NewHyperflexCluster instantiates a new HyperflexCluster object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHyperflexCluster(classId string, objectType string) *HyperflexCluster {
	this := HyperflexCluster{}
	this.ClassId = classId
	this.ObjectType = objectType
	return &this
}

// NewHyperflexClusterWithDefaults instantiates a new HyperflexCluster object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHyperflexClusterWithDefaults() *HyperflexCluster {
	this := HyperflexCluster{}
	var classId string = "hyperflex.Cluster"
	this.ClassId = classId
	var objectType string = "hyperflex.Cluster"
	this.ObjectType = objectType
	return &this
}

// GetClassId returns the ClassId field value
func (o *HyperflexCluster) GetClassId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ClassId
}

// GetClassIdOk returns a tuple with the ClassId field value
// and a boolean to check if the value has been set.
func (o *HyperflexCluster) GetClassIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ClassId, true
}

// SetClassId sets field value
func (o *HyperflexCluster) SetClassId(v string) {
	o.ClassId = v
}

// GetObjectType returns the ObjectType field value
func (o *HyperflexCluster) GetObjectType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ObjectType
}

// GetObjectTypeOk returns a tuple with the ObjectType field value
// and a boolean to check if the value has been set.
func (o *HyperflexCluster) GetObjectTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ObjectType, true
}

// SetObjectType sets field value
func (o *HyperflexCluster) SetObjectType(v string) {
	o.ObjectType = v
}

// GetClusterType returns the ClusterType field value if set, zero value otherwise.
func (o *HyperflexCluster) GetClusterType() int64 {
	if o == nil || o.ClusterType == nil {
		var ret int64
		return ret
	}
	return *o.ClusterType
}

// GetClusterTypeOk returns a tuple with the ClusterType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HyperflexCluster) GetClusterTypeOk() (*int64, bool) {
	if o == nil || o.ClusterType == nil {
		return nil, false
	}
	return o.ClusterType, true
}

// HasClusterType returns a boolean if a field has been set.
func (o *HyperflexCluster) HasClusterType() bool {
	if o != nil && o.ClusterType != nil {
		return true
	}

	return false
}

// SetClusterType gets a reference to the given int64 and assigns it to the ClusterType field.
func (o *HyperflexCluster) SetClusterType(v int64) {
	o.ClusterType = &v
}

// GetClusterUuid returns the ClusterUuid field value if set, zero value otherwise.
func (o *HyperflexCluster) GetClusterUuid() string {
	if o == nil || o.ClusterUuid == nil {
		var ret string
		return ret
	}
	return *o.ClusterUuid
}

// GetClusterUuidOk returns a tuple with the ClusterUuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HyperflexCluster) GetClusterUuidOk() (*string, bool) {
	if o == nil || o.ClusterUuid == nil {
		return nil, false
	}
	return o.ClusterUuid, true
}

// HasClusterUuid returns a boolean if a field has been set.
func (o *HyperflexCluster) HasClusterUuid() bool {
	if o != nil && o.ClusterUuid != nil {
		return true
	}

	return false
}

// SetClusterUuid gets a reference to the given string and assigns it to the ClusterUuid field.
func (o *HyperflexCluster) SetClusterUuid(v string) {
	o.ClusterUuid = &v
}

// GetDeviceId returns the DeviceId field value if set, zero value otherwise.
func (o *HyperflexCluster) GetDeviceId() string {
	if o == nil || o.DeviceId == nil {
		var ret string
		return ret
	}
	return *o.DeviceId
}

// GetDeviceIdOk returns a tuple with the DeviceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HyperflexCluster) GetDeviceIdOk() (*string, bool) {
	if o == nil || o.DeviceId == nil {
		return nil, false
	}
	return o.DeviceId, true
}

// HasDeviceId returns a boolean if a field has been set.
func (o *HyperflexCluster) HasDeviceId() bool {
	if o != nil && o.DeviceId != nil {
		return true
	}

	return false
}

// SetDeviceId gets a reference to the given string and assigns it to the DeviceId field.
func (o *HyperflexCluster) SetDeviceId(v string) {
	o.DeviceId = &v
}

// GetFltAggr returns the FltAggr field value if set, zero value otherwise.
func (o *HyperflexCluster) GetFltAggr() int64 {
	if o == nil || o.FltAggr == nil {
		var ret int64
		return ret
	}
	return *o.FltAggr
}

// GetFltAggrOk returns a tuple with the FltAggr field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HyperflexCluster) GetFltAggrOk() (*int64, bool) {
	if o == nil || o.FltAggr == nil {
		return nil, false
	}
	return o.FltAggr, true
}

// HasFltAggr returns a boolean if a field has been set.
func (o *HyperflexCluster) HasFltAggr() bool {
	if o != nil && o.FltAggr != nil {
		return true
	}

	return false
}

// SetFltAggr gets a reference to the given int64 and assigns it to the FltAggr field.
func (o *HyperflexCluster) SetFltAggr(v int64) {
	o.FltAggr = &v
}

// GetHxdpBuildVersion returns the HxdpBuildVersion field value if set, zero value otherwise.
func (o *HyperflexCluster) GetHxdpBuildVersion() string {
	if o == nil || o.HxdpBuildVersion == nil {
		var ret string
		return ret
	}
	return *o.HxdpBuildVersion
}

// GetHxdpBuildVersionOk returns a tuple with the HxdpBuildVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HyperflexCluster) GetHxdpBuildVersionOk() (*string, bool) {
	if o == nil || o.HxdpBuildVersion == nil {
		return nil, false
	}
	return o.HxdpBuildVersion, true
}

// HasHxdpBuildVersion returns a boolean if a field has been set.
func (o *HyperflexCluster) HasHxdpBuildVersion() bool {
	if o != nil && o.HxdpBuildVersion != nil {
		return true
	}

	return false
}

// SetHxdpBuildVersion gets a reference to the given string and assigns it to the HxdpBuildVersion field.
func (o *HyperflexCluster) SetHxdpBuildVersion(v string) {
	o.HxdpBuildVersion = &v
}

// GetSummary returns the Summary field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HyperflexCluster) GetSummary() HyperflexSummary {
	if o == nil || o.Summary.Get() == nil {
		var ret HyperflexSummary
		return ret
	}
	return *o.Summary.Get()
}

// GetSummaryOk returns a tuple with the Summary field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HyperflexCluster) GetSummaryOk() (*HyperflexSummary, bool) {
	if o == nil {
		return nil, false
	}
	return o.Summary.Get(), o.Summary.IsSet()
}

// HasSummary returns a boolean if a field has been set.
func (o *HyperflexCluster) HasSummary() bool {
	if o != nil && o.Summary.IsSet() {
		return true
	}

	return false
}

// SetSummary gets a reference to the given NullableHyperflexSummary and assigns it to the Summary field.
func (o *HyperflexCluster) SetSummary(v HyperflexSummary) {
	o.Summary.Set(&v)
}

// SetSummaryNil sets the value for Summary to be an explicit nil
func (o *HyperflexCluster) SetSummaryNil() {
	o.Summary.Set(nil)
}

// UnsetSummary ensures that no value is present for Summary, not even an explicit nil
func (o *HyperflexCluster) UnsetSummary() {
	o.Summary.Unset()
}

// GetVmCount returns the VmCount field value if set, zero value otherwise.
func (o *HyperflexCluster) GetVmCount() int64 {
	if o == nil || o.VmCount == nil {
		var ret int64
		return ret
	}
	return *o.VmCount
}

// GetVmCountOk returns a tuple with the VmCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HyperflexCluster) GetVmCountOk() (*int64, bool) {
	if o == nil || o.VmCount == nil {
		return nil, false
	}
	return o.VmCount, true
}

// HasVmCount returns a boolean if a field has been set.
func (o *HyperflexCluster) HasVmCount() bool {
	if o != nil && o.VmCount != nil {
		return true
	}

	return false
}

// SetVmCount gets a reference to the given int64 and assigns it to the VmCount field.
func (o *HyperflexCluster) SetVmCount(v int64) {
	o.VmCount = &v
}

// GetAlarm returns the Alarm field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HyperflexCluster) GetAlarm() []HyperflexAlarmRelationship {
	if o == nil {
		var ret []HyperflexAlarmRelationship
		return ret
	}
	return o.Alarm
}

// GetAlarmOk returns a tuple with the Alarm field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HyperflexCluster) GetAlarmOk() (*[]HyperflexAlarmRelationship, bool) {
	if o == nil || o.Alarm == nil {
		return nil, false
	}
	return &o.Alarm, true
}

// HasAlarm returns a boolean if a field has been set.
func (o *HyperflexCluster) HasAlarm() bool {
	if o != nil && o.Alarm != nil {
		return true
	}

	return false
}

// SetAlarm gets a reference to the given []HyperflexAlarmRelationship and assigns it to the Alarm field.
func (o *HyperflexCluster) SetAlarm(v []HyperflexAlarmRelationship) {
	o.Alarm = v
}

// GetHealth returns the Health field value if set, zero value otherwise.
func (o *HyperflexCluster) GetHealth() HyperflexHealthRelationship {
	if o == nil || o.Health == nil {
		var ret HyperflexHealthRelationship
		return ret
	}
	return *o.Health
}

// GetHealthOk returns a tuple with the Health field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HyperflexCluster) GetHealthOk() (*HyperflexHealthRelationship, bool) {
	if o == nil || o.Health == nil {
		return nil, false
	}
	return o.Health, true
}

// HasHealth returns a boolean if a field has been set.
func (o *HyperflexCluster) HasHealth() bool {
	if o != nil && o.Health != nil {
		return true
	}

	return false
}

// SetHealth gets a reference to the given HyperflexHealthRelationship and assigns it to the Health field.
func (o *HyperflexCluster) SetHealth(v HyperflexHealthRelationship) {
	o.Health = &v
}

// GetLicense returns the License field value if set, zero value otherwise.
func (o *HyperflexCluster) GetLicense() HyperflexLicenseRelationship {
	if o == nil || o.License == nil {
		var ret HyperflexLicenseRelationship
		return ret
	}
	return *o.License
}

// GetLicenseOk returns a tuple with the License field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HyperflexCluster) GetLicenseOk() (*HyperflexLicenseRelationship, bool) {
	if o == nil || o.License == nil {
		return nil, false
	}
	return o.License, true
}

// HasLicense returns a boolean if a field has been set.
func (o *HyperflexCluster) HasLicense() bool {
	if o != nil && o.License != nil {
		return true
	}

	return false
}

// SetLicense gets a reference to the given HyperflexLicenseRelationship and assigns it to the License field.
func (o *HyperflexCluster) SetLicense(v HyperflexLicenseRelationship) {
	o.License = &v
}

// GetNodes returns the Nodes field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HyperflexCluster) GetNodes() []HyperflexNodeRelationship {
	if o == nil {
		var ret []HyperflexNodeRelationship
		return ret
	}
	return o.Nodes
}

// GetNodesOk returns a tuple with the Nodes field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HyperflexCluster) GetNodesOk() (*[]HyperflexNodeRelationship, bool) {
	if o == nil || o.Nodes == nil {
		return nil, false
	}
	return &o.Nodes, true
}

// HasNodes returns a boolean if a field has been set.
func (o *HyperflexCluster) HasNodes() bool {
	if o != nil && o.Nodes != nil {
		return true
	}

	return false
}

// SetNodes gets a reference to the given []HyperflexNodeRelationship and assigns it to the Nodes field.
func (o *HyperflexCluster) SetNodes(v []HyperflexNodeRelationship) {
	o.Nodes = v
}

// GetRegisteredDevice returns the RegisteredDevice field value if set, zero value otherwise.
func (o *HyperflexCluster) GetRegisteredDevice() AssetDeviceRegistrationRelationship {
	if o == nil || o.RegisteredDevice == nil {
		var ret AssetDeviceRegistrationRelationship
		return ret
	}
	return *o.RegisteredDevice
}

// GetRegisteredDeviceOk returns a tuple with the RegisteredDevice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HyperflexCluster) GetRegisteredDeviceOk() (*AssetDeviceRegistrationRelationship, bool) {
	if o == nil || o.RegisteredDevice == nil {
		return nil, false
	}
	return o.RegisteredDevice, true
}

// HasRegisteredDevice returns a boolean if a field has been set.
func (o *HyperflexCluster) HasRegisteredDevice() bool {
	if o != nil && o.RegisteredDevice != nil {
		return true
	}

	return false
}

// SetRegisteredDevice gets a reference to the given AssetDeviceRegistrationRelationship and assigns it to the RegisteredDevice field.
func (o *HyperflexCluster) SetRegisteredDevice(v AssetDeviceRegistrationRelationship) {
	o.RegisteredDevice = &v
}

// GetStorageContainers returns the StorageContainers field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HyperflexCluster) GetStorageContainers() []StorageHyperFlexStorageContainerRelationship {
	if o == nil {
		var ret []StorageHyperFlexStorageContainerRelationship
		return ret
	}
	return o.StorageContainers
}

// GetStorageContainersOk returns a tuple with the StorageContainers field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HyperflexCluster) GetStorageContainersOk() (*[]StorageHyperFlexStorageContainerRelationship, bool) {
	if o == nil || o.StorageContainers == nil {
		return nil, false
	}
	return &o.StorageContainers, true
}

// HasStorageContainers returns a boolean if a field has been set.
func (o *HyperflexCluster) HasStorageContainers() bool {
	if o != nil && o.StorageContainers != nil {
		return true
	}

	return false
}

// SetStorageContainers gets a reference to the given []StorageHyperFlexStorageContainerRelationship and assigns it to the StorageContainers field.
func (o *HyperflexCluster) SetStorageContainers(v []StorageHyperFlexStorageContainerRelationship) {
	o.StorageContainers = v
}

// GetVolumes returns the Volumes field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HyperflexCluster) GetVolumes() []StorageHyperFlexVolumeRelationship {
	if o == nil {
		var ret []StorageHyperFlexVolumeRelationship
		return ret
	}
	return o.Volumes
}

// GetVolumesOk returns a tuple with the Volumes field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HyperflexCluster) GetVolumesOk() (*[]StorageHyperFlexVolumeRelationship, bool) {
	if o == nil || o.Volumes == nil {
		return nil, false
	}
	return &o.Volumes, true
}

// HasVolumes returns a boolean if a field has been set.
func (o *HyperflexCluster) HasVolumes() bool {
	if o != nil && o.Volumes != nil {
		return true
	}

	return false
}

// SetVolumes gets a reference to the given []StorageHyperFlexVolumeRelationship and assigns it to the Volumes field.
func (o *HyperflexCluster) SetVolumes(v []StorageHyperFlexVolumeRelationship) {
	o.Volumes = v
}

func (o HyperflexCluster) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	serializedHyperflexBaseCluster, errHyperflexBaseCluster := json.Marshal(o.HyperflexBaseCluster)
	if errHyperflexBaseCluster != nil {
		return []byte{}, errHyperflexBaseCluster
	}
	errHyperflexBaseCluster = json.Unmarshal([]byte(serializedHyperflexBaseCluster), &toSerialize)
	if errHyperflexBaseCluster != nil {
		return []byte{}, errHyperflexBaseCluster
	}
	if true {
		toSerialize["ClassId"] = o.ClassId
	}
	if true {
		toSerialize["ObjectType"] = o.ObjectType
	}
	if o.ClusterType != nil {
		toSerialize["ClusterType"] = o.ClusterType
	}
	if o.ClusterUuid != nil {
		toSerialize["ClusterUuid"] = o.ClusterUuid
	}
	if o.DeviceId != nil {
		toSerialize["DeviceId"] = o.DeviceId
	}
	if o.FltAggr != nil {
		toSerialize["FltAggr"] = o.FltAggr
	}
	if o.HxdpBuildVersion != nil {
		toSerialize["HxdpBuildVersion"] = o.HxdpBuildVersion
	}
	if o.Summary.IsSet() {
		toSerialize["Summary"] = o.Summary.Get()
	}
	if o.VmCount != nil {
		toSerialize["VmCount"] = o.VmCount
	}
	if o.Alarm != nil {
		toSerialize["Alarm"] = o.Alarm
	}
	if o.Health != nil {
		toSerialize["Health"] = o.Health
	}
	if o.License != nil {
		toSerialize["License"] = o.License
	}
	if o.Nodes != nil {
		toSerialize["Nodes"] = o.Nodes
	}
	if o.RegisteredDevice != nil {
		toSerialize["RegisteredDevice"] = o.RegisteredDevice
	}
	if o.StorageContainers != nil {
		toSerialize["StorageContainers"] = o.StorageContainers
	}
	if o.Volumes != nil {
		toSerialize["Volumes"] = o.Volumes
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *HyperflexCluster) UnmarshalJSON(bytes []byte) (err error) {
	type HyperflexClusterWithoutEmbeddedStruct struct {
		// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.
		ClassId string `json:"ClassId"`
		// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
		ObjectType string `json:"ObjectType"`
		// The storage type of this cluster (All Flash or Hybrid).
		ClusterType *int64 `json:"ClusterType,omitempty"`
		// The unique identifier for this HyperFlex cluster.
		ClusterUuid *string `json:"ClusterUuid,omitempty"`
		// The unique identifier of the device registration that represents this HyperFlex cluster's connection to Intersight.
		DeviceId *string `json:"DeviceId,omitempty"`
		// The number of yellow (warning) and red (critical) alarms stored as an aggregate. The first 16 bits indicate the number of red alarms, and the last 16 bits contain the number of yellow alarms.
		FltAggr *int64 `json:"FltAggr,omitempty"`
		// The version and build number of the HyperFlex Data Platform for this cluster. After a cluster upgrade, this version string will be updated on the next inventory cycle to reflect the newly installed version.
		HxdpBuildVersion *string                  `json:"HxdpBuildVersion,omitempty"`
		Summary          NullableHyperflexSummary `json:"Summary,omitempty"`
		// The number of virtual machines present on this cluster.
		VmCount *int64 `json:"VmCount,omitempty"`
		// An array of relationships to hyperflexAlarm resources.
		Alarm   []HyperflexAlarmRelationship  `json:"Alarm,omitempty"`
		Health  *HyperflexHealthRelationship  `json:"Health,omitempty"`
		License *HyperflexLicenseRelationship `json:"License,omitempty"`
		// An array of relationships to hyperflexNode resources.
		Nodes            []HyperflexNodeRelationship          `json:"Nodes,omitempty"`
		RegisteredDevice *AssetDeviceRegistrationRelationship `json:"RegisteredDevice,omitempty"`
		// An array of relationships to storageHyperFlexStorageContainer resources.
		StorageContainers []StorageHyperFlexStorageContainerRelationship `json:"StorageContainers,omitempty"`
		// An array of relationships to storageHyperFlexVolume resources.
		Volumes []StorageHyperFlexVolumeRelationship `json:"Volumes,omitempty"`
	}

	varHyperflexClusterWithoutEmbeddedStruct := HyperflexClusterWithoutEmbeddedStruct{}

	err = json.Unmarshal(bytes, &varHyperflexClusterWithoutEmbeddedStruct)
	if err == nil {
		varHyperflexCluster := _HyperflexCluster{}
		varHyperflexCluster.ClassId = varHyperflexClusterWithoutEmbeddedStruct.ClassId
		varHyperflexCluster.ObjectType = varHyperflexClusterWithoutEmbeddedStruct.ObjectType
		varHyperflexCluster.ClusterType = varHyperflexClusterWithoutEmbeddedStruct.ClusterType
		varHyperflexCluster.ClusterUuid = varHyperflexClusterWithoutEmbeddedStruct.ClusterUuid
		varHyperflexCluster.DeviceId = varHyperflexClusterWithoutEmbeddedStruct.DeviceId
		varHyperflexCluster.FltAggr = varHyperflexClusterWithoutEmbeddedStruct.FltAggr
		varHyperflexCluster.HxdpBuildVersion = varHyperflexClusterWithoutEmbeddedStruct.HxdpBuildVersion
		varHyperflexCluster.Summary = varHyperflexClusterWithoutEmbeddedStruct.Summary
		varHyperflexCluster.VmCount = varHyperflexClusterWithoutEmbeddedStruct.VmCount
		varHyperflexCluster.Alarm = varHyperflexClusterWithoutEmbeddedStruct.Alarm
		varHyperflexCluster.Health = varHyperflexClusterWithoutEmbeddedStruct.Health
		varHyperflexCluster.License = varHyperflexClusterWithoutEmbeddedStruct.License
		varHyperflexCluster.Nodes = varHyperflexClusterWithoutEmbeddedStruct.Nodes
		varHyperflexCluster.RegisteredDevice = varHyperflexClusterWithoutEmbeddedStruct.RegisteredDevice
		varHyperflexCluster.StorageContainers = varHyperflexClusterWithoutEmbeddedStruct.StorageContainers
		varHyperflexCluster.Volumes = varHyperflexClusterWithoutEmbeddedStruct.Volumes
		*o = HyperflexCluster(varHyperflexCluster)
	} else {
		return err
	}

	varHyperflexCluster := _HyperflexCluster{}

	err = json.Unmarshal(bytes, &varHyperflexCluster)
	if err == nil {
		o.HyperflexBaseCluster = varHyperflexCluster.HyperflexBaseCluster
	} else {
		return err
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "ClassId")
		delete(additionalProperties, "ObjectType")
		delete(additionalProperties, "ClusterType")
		delete(additionalProperties, "ClusterUuid")
		delete(additionalProperties, "DeviceId")
		delete(additionalProperties, "FltAggr")
		delete(additionalProperties, "HxdpBuildVersion")
		delete(additionalProperties, "Summary")
		delete(additionalProperties, "VmCount")
		delete(additionalProperties, "Alarm")
		delete(additionalProperties, "Health")
		delete(additionalProperties, "License")
		delete(additionalProperties, "Nodes")
		delete(additionalProperties, "RegisteredDevice")
		delete(additionalProperties, "StorageContainers")
		delete(additionalProperties, "Volumes")

		// remove fields from embedded structs
		reflectHyperflexBaseCluster := reflect.ValueOf(o.HyperflexBaseCluster)
		for i := 0; i < reflectHyperflexBaseCluster.Type().NumField(); i++ {
			t := reflectHyperflexBaseCluster.Type().Field(i)

			if jsonTag := t.Tag.Get("json"); jsonTag != "" {
				fieldName := ""
				if commaIdx := strings.Index(jsonTag, ","); commaIdx > 0 {
					fieldName = jsonTag[:commaIdx]
				} else {
					fieldName = jsonTag
				}
				if fieldName != "AdditionalProperties" {
					delete(additionalProperties, fieldName)
				}
			}
		}

		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableHyperflexCluster struct {
	value *HyperflexCluster
	isSet bool
}

func (v NullableHyperflexCluster) Get() *HyperflexCluster {
	return v.value
}

func (v *NullableHyperflexCluster) Set(val *HyperflexCluster) {
	v.value = val
	v.isSet = true
}

func (v NullableHyperflexCluster) IsSet() bool {
	return v.isSet
}

func (v *NullableHyperflexCluster) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHyperflexCluster(val *HyperflexCluster) *NullableHyperflexCluster {
	return &NullableHyperflexCluster{value: val, isSet: true}
}

func (v NullableHyperflexCluster) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHyperflexCluster) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
