/*
Cisco Intersight

Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations. The Intersight OpenAPI document defines the complete set of properties that are returned in the HTTP response. From that perspective, a client can expect that no additional properties are returned, unless these properties are explicitly defined in the OpenAPI document. However, when a client uses an older version of the Intersight OpenAPI document, the server may send additional properties because the software is more recent than the client. In that case, the client may receive properties that it does not know about. Some generated SDKs perform a strict validation of the HTTP response body against the OpenAPI document.

API version: 1.0.11-18775
Contact: intersight@cisco.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package intersight

import (
	"encoding/json"
	"fmt"
	"reflect"
	"strings"
)

// checks if the EtherPhysicalPort type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EtherPhysicalPort{}

// EtherPhysicalPort Physical ethernet port present on a FI.
type EtherPhysicalPort struct {
	EtherPhysicalPortBase
	// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.
	ClassId string `json:"ClassId"`
	// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
	ObjectType string `json:"ObjectType"`
	// Administratively configured speed for this port.
	AdminSpeed *string `json:"AdminSpeed,omitempty"`
	// Administratively configured state (enabled/disabled) for this port.
	AdminState *string `json:"AdminState,omitempty"`
	// Breakout port member in the Fabric Interconnect.
	AggregatePortId *int64 `json:"AggregatePortId,omitempty"`
	// The number of days this port's license has been in Grace Period for.
	LicenseGrace *string `json:"LicenseGrace,omitempty"`
	// The state of the port's licensing.
	LicenseState *string `json:"LicenseState,omitempty"`
	// Name of the Physical Port.
	Name                 *string                                     `json:"Name,omitempty"`
	InventoryDeviceInfo  NullableInventoryDeviceInfoRelationship     `json:"InventoryDeviceInfo,omitempty"`
	PortGroup            NullablePortGroupRelationship               `json:"PortGroup,omitempty"`
	PortSubGroup         NullablePortSubGroupRelationship            `json:"PortSubGroup,omitempty"`
	RegisteredDevice     NullableAssetDeviceRegistrationRelationship `json:"RegisteredDevice,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _EtherPhysicalPort EtherPhysicalPort

// NewEtherPhysicalPort instantiates a new EtherPhysicalPort object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEtherPhysicalPort(classId string, objectType string) *EtherPhysicalPort {
	this := EtherPhysicalPort{}
	this.ClassId = classId
	this.ObjectType = objectType
	return &this
}

// NewEtherPhysicalPortWithDefaults instantiates a new EtherPhysicalPort object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEtherPhysicalPortWithDefaults() *EtherPhysicalPort {
	this := EtherPhysicalPort{}
	var classId string = "ether.PhysicalPort"
	this.ClassId = classId
	var objectType string = "ether.PhysicalPort"
	this.ObjectType = objectType
	return &this
}

// GetClassId returns the ClassId field value
func (o *EtherPhysicalPort) GetClassId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ClassId
}

// GetClassIdOk returns a tuple with the ClassId field value
// and a boolean to check if the value has been set.
func (o *EtherPhysicalPort) GetClassIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ClassId, true
}

// SetClassId sets field value
func (o *EtherPhysicalPort) SetClassId(v string) {
	o.ClassId = v
}

// GetDefaultClassId returns the default value "ether.PhysicalPort" of the ClassId field.
func (o *EtherPhysicalPort) GetDefaultClassId() interface{} {
	return "ether.PhysicalPort"
}

// GetObjectType returns the ObjectType field value
func (o *EtherPhysicalPort) GetObjectType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ObjectType
}

// GetObjectTypeOk returns a tuple with the ObjectType field value
// and a boolean to check if the value has been set.
func (o *EtherPhysicalPort) GetObjectTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ObjectType, true
}

// SetObjectType sets field value
func (o *EtherPhysicalPort) SetObjectType(v string) {
	o.ObjectType = v
}

// GetDefaultObjectType returns the default value "ether.PhysicalPort" of the ObjectType field.
func (o *EtherPhysicalPort) GetDefaultObjectType() interface{} {
	return "ether.PhysicalPort"
}

// GetAdminSpeed returns the AdminSpeed field value if set, zero value otherwise.
func (o *EtherPhysicalPort) GetAdminSpeed() string {
	if o == nil || IsNil(o.AdminSpeed) {
		var ret string
		return ret
	}
	return *o.AdminSpeed
}

// GetAdminSpeedOk returns a tuple with the AdminSpeed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EtherPhysicalPort) GetAdminSpeedOk() (*string, bool) {
	if o == nil || IsNil(o.AdminSpeed) {
		return nil, false
	}
	return o.AdminSpeed, true
}

// HasAdminSpeed returns a boolean if a field has been set.
func (o *EtherPhysicalPort) HasAdminSpeed() bool {
	if o != nil && !IsNil(o.AdminSpeed) {
		return true
	}

	return false
}

// SetAdminSpeed gets a reference to the given string and assigns it to the AdminSpeed field.
func (o *EtherPhysicalPort) SetAdminSpeed(v string) {
	o.AdminSpeed = &v
}

// GetAdminState returns the AdminState field value if set, zero value otherwise.
func (o *EtherPhysicalPort) GetAdminState() string {
	if o == nil || IsNil(o.AdminState) {
		var ret string
		return ret
	}
	return *o.AdminState
}

// GetAdminStateOk returns a tuple with the AdminState field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EtherPhysicalPort) GetAdminStateOk() (*string, bool) {
	if o == nil || IsNil(o.AdminState) {
		return nil, false
	}
	return o.AdminState, true
}

// HasAdminState returns a boolean if a field has been set.
func (o *EtherPhysicalPort) HasAdminState() bool {
	if o != nil && !IsNil(o.AdminState) {
		return true
	}

	return false
}

// SetAdminState gets a reference to the given string and assigns it to the AdminState field.
func (o *EtherPhysicalPort) SetAdminState(v string) {
	o.AdminState = &v
}

// GetAggregatePortId returns the AggregatePortId field value if set, zero value otherwise.
func (o *EtherPhysicalPort) GetAggregatePortId() int64 {
	if o == nil || IsNil(o.AggregatePortId) {
		var ret int64
		return ret
	}
	return *o.AggregatePortId
}

// GetAggregatePortIdOk returns a tuple with the AggregatePortId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EtherPhysicalPort) GetAggregatePortIdOk() (*int64, bool) {
	if o == nil || IsNil(o.AggregatePortId) {
		return nil, false
	}
	return o.AggregatePortId, true
}

// HasAggregatePortId returns a boolean if a field has been set.
func (o *EtherPhysicalPort) HasAggregatePortId() bool {
	if o != nil && !IsNil(o.AggregatePortId) {
		return true
	}

	return false
}

// SetAggregatePortId gets a reference to the given int64 and assigns it to the AggregatePortId field.
func (o *EtherPhysicalPort) SetAggregatePortId(v int64) {
	o.AggregatePortId = &v
}

// GetLicenseGrace returns the LicenseGrace field value if set, zero value otherwise.
func (o *EtherPhysicalPort) GetLicenseGrace() string {
	if o == nil || IsNil(o.LicenseGrace) {
		var ret string
		return ret
	}
	return *o.LicenseGrace
}

// GetLicenseGraceOk returns a tuple with the LicenseGrace field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EtherPhysicalPort) GetLicenseGraceOk() (*string, bool) {
	if o == nil || IsNil(o.LicenseGrace) {
		return nil, false
	}
	return o.LicenseGrace, true
}

// HasLicenseGrace returns a boolean if a field has been set.
func (o *EtherPhysicalPort) HasLicenseGrace() bool {
	if o != nil && !IsNil(o.LicenseGrace) {
		return true
	}

	return false
}

// SetLicenseGrace gets a reference to the given string and assigns it to the LicenseGrace field.
func (o *EtherPhysicalPort) SetLicenseGrace(v string) {
	o.LicenseGrace = &v
}

// GetLicenseState returns the LicenseState field value if set, zero value otherwise.
func (o *EtherPhysicalPort) GetLicenseState() string {
	if o == nil || IsNil(o.LicenseState) {
		var ret string
		return ret
	}
	return *o.LicenseState
}

// GetLicenseStateOk returns a tuple with the LicenseState field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EtherPhysicalPort) GetLicenseStateOk() (*string, bool) {
	if o == nil || IsNil(o.LicenseState) {
		return nil, false
	}
	return o.LicenseState, true
}

// HasLicenseState returns a boolean if a field has been set.
func (o *EtherPhysicalPort) HasLicenseState() bool {
	if o != nil && !IsNil(o.LicenseState) {
		return true
	}

	return false
}

// SetLicenseState gets a reference to the given string and assigns it to the LicenseState field.
func (o *EtherPhysicalPort) SetLicenseState(v string) {
	o.LicenseState = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *EtherPhysicalPort) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EtherPhysicalPort) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *EtherPhysicalPort) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *EtherPhysicalPort) SetName(v string) {
	o.Name = &v
}

// GetInventoryDeviceInfo returns the InventoryDeviceInfo field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EtherPhysicalPort) GetInventoryDeviceInfo() InventoryDeviceInfoRelationship {
	if o == nil || IsNil(o.InventoryDeviceInfo.Get()) {
		var ret InventoryDeviceInfoRelationship
		return ret
	}
	return *o.InventoryDeviceInfo.Get()
}

// GetInventoryDeviceInfoOk returns a tuple with the InventoryDeviceInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EtherPhysicalPort) GetInventoryDeviceInfoOk() (*InventoryDeviceInfoRelationship, bool) {
	if o == nil {
		return nil, false
	}
	return o.InventoryDeviceInfo.Get(), o.InventoryDeviceInfo.IsSet()
}

// HasInventoryDeviceInfo returns a boolean if a field has been set.
func (o *EtherPhysicalPort) HasInventoryDeviceInfo() bool {
	if o != nil && o.InventoryDeviceInfo.IsSet() {
		return true
	}

	return false
}

// SetInventoryDeviceInfo gets a reference to the given NullableInventoryDeviceInfoRelationship and assigns it to the InventoryDeviceInfo field.
func (o *EtherPhysicalPort) SetInventoryDeviceInfo(v InventoryDeviceInfoRelationship) {
	o.InventoryDeviceInfo.Set(&v)
}

// SetInventoryDeviceInfoNil sets the value for InventoryDeviceInfo to be an explicit nil
func (o *EtherPhysicalPort) SetInventoryDeviceInfoNil() {
	o.InventoryDeviceInfo.Set(nil)
}

// UnsetInventoryDeviceInfo ensures that no value is present for InventoryDeviceInfo, not even an explicit nil
func (o *EtherPhysicalPort) UnsetInventoryDeviceInfo() {
	o.InventoryDeviceInfo.Unset()
}

// GetPortGroup returns the PortGroup field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EtherPhysicalPort) GetPortGroup() PortGroupRelationship {
	if o == nil || IsNil(o.PortGroup.Get()) {
		var ret PortGroupRelationship
		return ret
	}
	return *o.PortGroup.Get()
}

// GetPortGroupOk returns a tuple with the PortGroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EtherPhysicalPort) GetPortGroupOk() (*PortGroupRelationship, bool) {
	if o == nil {
		return nil, false
	}
	return o.PortGroup.Get(), o.PortGroup.IsSet()
}

// HasPortGroup returns a boolean if a field has been set.
func (o *EtherPhysicalPort) HasPortGroup() bool {
	if o != nil && o.PortGroup.IsSet() {
		return true
	}

	return false
}

// SetPortGroup gets a reference to the given NullablePortGroupRelationship and assigns it to the PortGroup field.
func (o *EtherPhysicalPort) SetPortGroup(v PortGroupRelationship) {
	o.PortGroup.Set(&v)
}

// SetPortGroupNil sets the value for PortGroup to be an explicit nil
func (o *EtherPhysicalPort) SetPortGroupNil() {
	o.PortGroup.Set(nil)
}

// UnsetPortGroup ensures that no value is present for PortGroup, not even an explicit nil
func (o *EtherPhysicalPort) UnsetPortGroup() {
	o.PortGroup.Unset()
}

// GetPortSubGroup returns the PortSubGroup field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EtherPhysicalPort) GetPortSubGroup() PortSubGroupRelationship {
	if o == nil || IsNil(o.PortSubGroup.Get()) {
		var ret PortSubGroupRelationship
		return ret
	}
	return *o.PortSubGroup.Get()
}

// GetPortSubGroupOk returns a tuple with the PortSubGroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EtherPhysicalPort) GetPortSubGroupOk() (*PortSubGroupRelationship, bool) {
	if o == nil {
		return nil, false
	}
	return o.PortSubGroup.Get(), o.PortSubGroup.IsSet()
}

// HasPortSubGroup returns a boolean if a field has been set.
func (o *EtherPhysicalPort) HasPortSubGroup() bool {
	if o != nil && o.PortSubGroup.IsSet() {
		return true
	}

	return false
}

// SetPortSubGroup gets a reference to the given NullablePortSubGroupRelationship and assigns it to the PortSubGroup field.
func (o *EtherPhysicalPort) SetPortSubGroup(v PortSubGroupRelationship) {
	o.PortSubGroup.Set(&v)
}

// SetPortSubGroupNil sets the value for PortSubGroup to be an explicit nil
func (o *EtherPhysicalPort) SetPortSubGroupNil() {
	o.PortSubGroup.Set(nil)
}

// UnsetPortSubGroup ensures that no value is present for PortSubGroup, not even an explicit nil
func (o *EtherPhysicalPort) UnsetPortSubGroup() {
	o.PortSubGroup.Unset()
}

// GetRegisteredDevice returns the RegisteredDevice field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EtherPhysicalPort) GetRegisteredDevice() AssetDeviceRegistrationRelationship {
	if o == nil || IsNil(o.RegisteredDevice.Get()) {
		var ret AssetDeviceRegistrationRelationship
		return ret
	}
	return *o.RegisteredDevice.Get()
}

// GetRegisteredDeviceOk returns a tuple with the RegisteredDevice field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EtherPhysicalPort) GetRegisteredDeviceOk() (*AssetDeviceRegistrationRelationship, bool) {
	if o == nil {
		return nil, false
	}
	return o.RegisteredDevice.Get(), o.RegisteredDevice.IsSet()
}

// HasRegisteredDevice returns a boolean if a field has been set.
func (o *EtherPhysicalPort) HasRegisteredDevice() bool {
	if o != nil && o.RegisteredDevice.IsSet() {
		return true
	}

	return false
}

// SetRegisteredDevice gets a reference to the given NullableAssetDeviceRegistrationRelationship and assigns it to the RegisteredDevice field.
func (o *EtherPhysicalPort) SetRegisteredDevice(v AssetDeviceRegistrationRelationship) {
	o.RegisteredDevice.Set(&v)
}

// SetRegisteredDeviceNil sets the value for RegisteredDevice to be an explicit nil
func (o *EtherPhysicalPort) SetRegisteredDeviceNil() {
	o.RegisteredDevice.Set(nil)
}

// UnsetRegisteredDevice ensures that no value is present for RegisteredDevice, not even an explicit nil
func (o *EtherPhysicalPort) UnsetRegisteredDevice() {
	o.RegisteredDevice.Unset()
}

func (o EtherPhysicalPort) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EtherPhysicalPort) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	serializedEtherPhysicalPortBase, errEtherPhysicalPortBase := json.Marshal(o.EtherPhysicalPortBase)
	if errEtherPhysicalPortBase != nil {
		return map[string]interface{}{}, errEtherPhysicalPortBase
	}
	errEtherPhysicalPortBase = json.Unmarshal([]byte(serializedEtherPhysicalPortBase), &toSerialize)
	if errEtherPhysicalPortBase != nil {
		return map[string]interface{}{}, errEtherPhysicalPortBase
	}
	if _, exists := toSerialize["ClassId"]; !exists {
		toSerialize["ClassId"] = o.GetDefaultClassId()
	}
	toSerialize["ClassId"] = o.ClassId
	if _, exists := toSerialize["ObjectType"]; !exists {
		toSerialize["ObjectType"] = o.GetDefaultObjectType()
	}
	toSerialize["ObjectType"] = o.ObjectType
	if !IsNil(o.AdminSpeed) {
		toSerialize["AdminSpeed"] = o.AdminSpeed
	}
	if !IsNil(o.AdminState) {
		toSerialize["AdminState"] = o.AdminState
	}
	if !IsNil(o.AggregatePortId) {
		toSerialize["AggregatePortId"] = o.AggregatePortId
	}
	if !IsNil(o.LicenseGrace) {
		toSerialize["LicenseGrace"] = o.LicenseGrace
	}
	if !IsNil(o.LicenseState) {
		toSerialize["LicenseState"] = o.LicenseState
	}
	if !IsNil(o.Name) {
		toSerialize["Name"] = o.Name
	}
	if o.InventoryDeviceInfo.IsSet() {
		toSerialize["InventoryDeviceInfo"] = o.InventoryDeviceInfo.Get()
	}
	if o.PortGroup.IsSet() {
		toSerialize["PortGroup"] = o.PortGroup.Get()
	}
	if o.PortSubGroup.IsSet() {
		toSerialize["PortSubGroup"] = o.PortSubGroup.Get()
	}
	if o.RegisteredDevice.IsSet() {
		toSerialize["RegisteredDevice"] = o.RegisteredDevice.Get()
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *EtherPhysicalPort) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"ClassId",
		"ObjectType",
	}

	// defaultValueFuncMap captures the default values for required properties.
	// These values are used when required properties are missing from the payload.
	defaultValueFuncMap := map[string]func() interface{}{
		"ClassId":    o.GetDefaultClassId,
		"ObjectType": o.GetDefaultObjectType,
	}
	var defaultValueApplied bool
	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			if _, ok := defaultValueFuncMap[requiredProperty]; ok {
				allProperties[requiredProperty] = defaultValueFuncMap[requiredProperty]()
				defaultValueApplied = true
			}
		}
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	if defaultValueApplied {
		data, err = json.Marshal(allProperties)
		if err != nil {
			return err
		}
	}
	type EtherPhysicalPortWithoutEmbeddedStruct struct {
		// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.
		ClassId string `json:"ClassId"`
		// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
		ObjectType string `json:"ObjectType"`
		// Administratively configured speed for this port.
		AdminSpeed *string `json:"AdminSpeed,omitempty"`
		// Administratively configured state (enabled/disabled) for this port.
		AdminState *string `json:"AdminState,omitempty"`
		// Breakout port member in the Fabric Interconnect.
		AggregatePortId *int64 `json:"AggregatePortId,omitempty"`
		// The number of days this port's license has been in Grace Period for.
		LicenseGrace *string `json:"LicenseGrace,omitempty"`
		// The state of the port's licensing.
		LicenseState *string `json:"LicenseState,omitempty"`
		// Name of the Physical Port.
		Name                *string                                     `json:"Name,omitempty"`
		InventoryDeviceInfo NullableInventoryDeviceInfoRelationship     `json:"InventoryDeviceInfo,omitempty"`
		PortGroup           NullablePortGroupRelationship               `json:"PortGroup,omitempty"`
		PortSubGroup        NullablePortSubGroupRelationship            `json:"PortSubGroup,omitempty"`
		RegisteredDevice    NullableAssetDeviceRegistrationRelationship `json:"RegisteredDevice,omitempty"`
	}

	varEtherPhysicalPortWithoutEmbeddedStruct := EtherPhysicalPortWithoutEmbeddedStruct{}

	err = json.Unmarshal(data, &varEtherPhysicalPortWithoutEmbeddedStruct)
	if err == nil {
		varEtherPhysicalPort := _EtherPhysicalPort{}
		varEtherPhysicalPort.ClassId = varEtherPhysicalPortWithoutEmbeddedStruct.ClassId
		varEtherPhysicalPort.ObjectType = varEtherPhysicalPortWithoutEmbeddedStruct.ObjectType
		varEtherPhysicalPort.AdminSpeed = varEtherPhysicalPortWithoutEmbeddedStruct.AdminSpeed
		varEtherPhysicalPort.AdminState = varEtherPhysicalPortWithoutEmbeddedStruct.AdminState
		varEtherPhysicalPort.AggregatePortId = varEtherPhysicalPortWithoutEmbeddedStruct.AggregatePortId
		varEtherPhysicalPort.LicenseGrace = varEtherPhysicalPortWithoutEmbeddedStruct.LicenseGrace
		varEtherPhysicalPort.LicenseState = varEtherPhysicalPortWithoutEmbeddedStruct.LicenseState
		varEtherPhysicalPort.Name = varEtherPhysicalPortWithoutEmbeddedStruct.Name
		varEtherPhysicalPort.InventoryDeviceInfo = varEtherPhysicalPortWithoutEmbeddedStruct.InventoryDeviceInfo
		varEtherPhysicalPort.PortGroup = varEtherPhysicalPortWithoutEmbeddedStruct.PortGroup
		varEtherPhysicalPort.PortSubGroup = varEtherPhysicalPortWithoutEmbeddedStruct.PortSubGroup
		varEtherPhysicalPort.RegisteredDevice = varEtherPhysicalPortWithoutEmbeddedStruct.RegisteredDevice
		*o = EtherPhysicalPort(varEtherPhysicalPort)
	} else {
		return err
	}

	varEtherPhysicalPort := _EtherPhysicalPort{}

	err = json.Unmarshal(data, &varEtherPhysicalPort)
	if err == nil {
		o.EtherPhysicalPortBase = varEtherPhysicalPort.EtherPhysicalPortBase
	} else {
		return err
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "ClassId")
		delete(additionalProperties, "ObjectType")
		delete(additionalProperties, "AdminSpeed")
		delete(additionalProperties, "AdminState")
		delete(additionalProperties, "AggregatePortId")
		delete(additionalProperties, "LicenseGrace")
		delete(additionalProperties, "LicenseState")
		delete(additionalProperties, "Name")
		delete(additionalProperties, "InventoryDeviceInfo")
		delete(additionalProperties, "PortGroup")
		delete(additionalProperties, "PortSubGroup")
		delete(additionalProperties, "RegisteredDevice")

		// remove fields from embedded structs
		reflectEtherPhysicalPortBase := reflect.ValueOf(o.EtherPhysicalPortBase)
		for i := 0; i < reflectEtherPhysicalPortBase.Type().NumField(); i++ {
			t := reflectEtherPhysicalPortBase.Type().Field(i)

			if jsonTag := t.Tag.Get("json"); jsonTag != "" {
				fieldName := ""
				if commaIdx := strings.Index(jsonTag, ","); commaIdx > 0 {
					fieldName = jsonTag[:commaIdx]
				} else {
					fieldName = jsonTag
				}
				if fieldName != "AdditionalProperties" {
					delete(additionalProperties, fieldName)
				}
			}
		}

		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableEtherPhysicalPort struct {
	value *EtherPhysicalPort
	isSet bool
}

func (v NullableEtherPhysicalPort) Get() *EtherPhysicalPort {
	return v.value
}

func (v *NullableEtherPhysicalPort) Set(val *EtherPhysicalPort) {
	v.value = val
	v.isSet = true
}

func (v NullableEtherPhysicalPort) IsSet() bool {
	return v.isSet
}

func (v *NullableEtherPhysicalPort) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEtherPhysicalPort(val *EtherPhysicalPort) *NullableEtherPhysicalPort {
	return &NullableEtherPhysicalPort{value: val, isSet: true}
}

func (v NullableEtherPhysicalPort) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEtherPhysicalPort) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
