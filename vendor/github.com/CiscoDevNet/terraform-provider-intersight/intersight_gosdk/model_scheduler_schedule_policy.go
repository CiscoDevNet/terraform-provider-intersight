/*
Cisco Intersight

Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations. The Intersight OpenAPI document defines the complete set of properties that are returned in the HTTP response. From that perspective, a client can expect that no additional properties are returned, unless these properties are explicitly defined in the OpenAPI document. However, when a client uses an older version of the Intersight OpenAPI document, the server may send additional properties because the software is more recent than the client. In that case, the client may receive properties that it does not know about. Some generated SDKs perform a strict validation of the HTTP response body against the OpenAPI document.

API version: 1.0.11-2025092610
Contact: intersight@cisco.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package intersight

import (
	"encoding/json"
	"fmt"
	"reflect"
	"strings"
)

// checks if the SchedulerSchedulePolicy type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SchedulerSchedulePolicy{}

// SchedulerSchedulePolicy Metadata used to create a policy to schedule one-time or repeated tasks.
type SchedulerSchedulePolicy struct {
	PolicyAbstractPolicy
	// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.
	ClassId string `json:"ClassId"`
	// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
	ObjectType string               `json:"ObjectType"`
	BlockDates []SchedulerBlockDate `json:"BlockDates,omitempty"`
	// Enable or disable block dates. If set to true, the schedule will not run during the block date interval.
	EnableBlockDates *bool                         `json:"EnableBlockDates,omitempty"`
	ScheduleParams   []SchedulerBaseScheduleParams `json:"ScheduleParams,omitempty"`
	// The number of profiles, templates and deployments that are using this policy.  This is used to determine if the policy can be deleted. If the usageCount is greater than 0, the policy cannot be deleted.
	UsageCount *int64 `json:"UsageCount,omitempty"`
	// An array of relationships to moBaseMo resources.
	AssociatedObjects    []MoBaseMoRelationship                       `json:"AssociatedObjects,omitempty"`
	Organization         NullableOrganizationOrganizationRelationship `json:"Organization,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _SchedulerSchedulePolicy SchedulerSchedulePolicy

// NewSchedulerSchedulePolicy instantiates a new SchedulerSchedulePolicy object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSchedulerSchedulePolicy(classId string, objectType string) *SchedulerSchedulePolicy {
	this := SchedulerSchedulePolicy{}
	this.ClassId = classId
	this.ObjectType = objectType
	return &this
}

// NewSchedulerSchedulePolicyWithDefaults instantiates a new SchedulerSchedulePolicy object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSchedulerSchedulePolicyWithDefaults() *SchedulerSchedulePolicy {
	this := SchedulerSchedulePolicy{}
	var classId string = "scheduler.SchedulePolicy"
	this.ClassId = classId
	var objectType string = "scheduler.SchedulePolicy"
	this.ObjectType = objectType
	return &this
}

// GetClassId returns the ClassId field value
func (o *SchedulerSchedulePolicy) GetClassId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ClassId
}

// GetClassIdOk returns a tuple with the ClassId field value
// and a boolean to check if the value has been set.
func (o *SchedulerSchedulePolicy) GetClassIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ClassId, true
}

// SetClassId sets field value
func (o *SchedulerSchedulePolicy) SetClassId(v string) {
	o.ClassId = v
}

// GetDefaultClassId returns the default value "scheduler.SchedulePolicy" of the ClassId field.
func (o *SchedulerSchedulePolicy) GetDefaultClassId() interface{} {
	return "scheduler.SchedulePolicy"
}

// GetObjectType returns the ObjectType field value
func (o *SchedulerSchedulePolicy) GetObjectType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ObjectType
}

// GetObjectTypeOk returns a tuple with the ObjectType field value
// and a boolean to check if the value has been set.
func (o *SchedulerSchedulePolicy) GetObjectTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ObjectType, true
}

// SetObjectType sets field value
func (o *SchedulerSchedulePolicy) SetObjectType(v string) {
	o.ObjectType = v
}

// GetDefaultObjectType returns the default value "scheduler.SchedulePolicy" of the ObjectType field.
func (o *SchedulerSchedulePolicy) GetDefaultObjectType() interface{} {
	return "scheduler.SchedulePolicy"
}

// GetBlockDates returns the BlockDates field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SchedulerSchedulePolicy) GetBlockDates() []SchedulerBlockDate {
	if o == nil {
		var ret []SchedulerBlockDate
		return ret
	}
	return o.BlockDates
}

// GetBlockDatesOk returns a tuple with the BlockDates field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SchedulerSchedulePolicy) GetBlockDatesOk() ([]SchedulerBlockDate, bool) {
	if o == nil || IsNil(o.BlockDates) {
		return nil, false
	}
	return o.BlockDates, true
}

// HasBlockDates returns a boolean if a field has been set.
func (o *SchedulerSchedulePolicy) HasBlockDates() bool {
	if o != nil && !IsNil(o.BlockDates) {
		return true
	}

	return false
}

// SetBlockDates gets a reference to the given []SchedulerBlockDate and assigns it to the BlockDates field.
func (o *SchedulerSchedulePolicy) SetBlockDates(v []SchedulerBlockDate) {
	o.BlockDates = v
}

// GetEnableBlockDates returns the EnableBlockDates field value if set, zero value otherwise.
func (o *SchedulerSchedulePolicy) GetEnableBlockDates() bool {
	if o == nil || IsNil(o.EnableBlockDates) {
		var ret bool
		return ret
	}
	return *o.EnableBlockDates
}

// GetEnableBlockDatesOk returns a tuple with the EnableBlockDates field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchedulerSchedulePolicy) GetEnableBlockDatesOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableBlockDates) {
		return nil, false
	}
	return o.EnableBlockDates, true
}

// HasEnableBlockDates returns a boolean if a field has been set.
func (o *SchedulerSchedulePolicy) HasEnableBlockDates() bool {
	if o != nil && !IsNil(o.EnableBlockDates) {
		return true
	}

	return false
}

// SetEnableBlockDates gets a reference to the given bool and assigns it to the EnableBlockDates field.
func (o *SchedulerSchedulePolicy) SetEnableBlockDates(v bool) {
	o.EnableBlockDates = &v
}

// GetScheduleParams returns the ScheduleParams field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SchedulerSchedulePolicy) GetScheduleParams() []SchedulerBaseScheduleParams {
	if o == nil {
		var ret []SchedulerBaseScheduleParams
		return ret
	}
	return o.ScheduleParams
}

// GetScheduleParamsOk returns a tuple with the ScheduleParams field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SchedulerSchedulePolicy) GetScheduleParamsOk() ([]SchedulerBaseScheduleParams, bool) {
	if o == nil || IsNil(o.ScheduleParams) {
		return nil, false
	}
	return o.ScheduleParams, true
}

// HasScheduleParams returns a boolean if a field has been set.
func (o *SchedulerSchedulePolicy) HasScheduleParams() bool {
	if o != nil && !IsNil(o.ScheduleParams) {
		return true
	}

	return false
}

// SetScheduleParams gets a reference to the given []SchedulerBaseScheduleParams and assigns it to the ScheduleParams field.
func (o *SchedulerSchedulePolicy) SetScheduleParams(v []SchedulerBaseScheduleParams) {
	o.ScheduleParams = v
}

// GetUsageCount returns the UsageCount field value if set, zero value otherwise.
func (o *SchedulerSchedulePolicy) GetUsageCount() int64 {
	if o == nil || IsNil(o.UsageCount) {
		var ret int64
		return ret
	}
	return *o.UsageCount
}

// GetUsageCountOk returns a tuple with the UsageCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchedulerSchedulePolicy) GetUsageCountOk() (*int64, bool) {
	if o == nil || IsNil(o.UsageCount) {
		return nil, false
	}
	return o.UsageCount, true
}

// HasUsageCount returns a boolean if a field has been set.
func (o *SchedulerSchedulePolicy) HasUsageCount() bool {
	if o != nil && !IsNil(o.UsageCount) {
		return true
	}

	return false
}

// SetUsageCount gets a reference to the given int64 and assigns it to the UsageCount field.
func (o *SchedulerSchedulePolicy) SetUsageCount(v int64) {
	o.UsageCount = &v
}

// GetAssociatedObjects returns the AssociatedObjects field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SchedulerSchedulePolicy) GetAssociatedObjects() []MoBaseMoRelationship {
	if o == nil {
		var ret []MoBaseMoRelationship
		return ret
	}
	return o.AssociatedObjects
}

// GetAssociatedObjectsOk returns a tuple with the AssociatedObjects field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SchedulerSchedulePolicy) GetAssociatedObjectsOk() ([]MoBaseMoRelationship, bool) {
	if o == nil || IsNil(o.AssociatedObjects) {
		return nil, false
	}
	return o.AssociatedObjects, true
}

// HasAssociatedObjects returns a boolean if a field has been set.
func (o *SchedulerSchedulePolicy) HasAssociatedObjects() bool {
	if o != nil && !IsNil(o.AssociatedObjects) {
		return true
	}

	return false
}

// SetAssociatedObjects gets a reference to the given []MoBaseMoRelationship and assigns it to the AssociatedObjects field.
func (o *SchedulerSchedulePolicy) SetAssociatedObjects(v []MoBaseMoRelationship) {
	o.AssociatedObjects = v
}

// GetOrganization returns the Organization field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SchedulerSchedulePolicy) GetOrganization() OrganizationOrganizationRelationship {
	if o == nil || IsNil(o.Organization.Get()) {
		var ret OrganizationOrganizationRelationship
		return ret
	}
	return *o.Organization.Get()
}

// GetOrganizationOk returns a tuple with the Organization field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SchedulerSchedulePolicy) GetOrganizationOk() (*OrganizationOrganizationRelationship, bool) {
	if o == nil {
		return nil, false
	}
	return o.Organization.Get(), o.Organization.IsSet()
}

// HasOrganization returns a boolean if a field has been set.
func (o *SchedulerSchedulePolicy) HasOrganization() bool {
	if o != nil && o.Organization.IsSet() {
		return true
	}

	return false
}

// SetOrganization gets a reference to the given NullableOrganizationOrganizationRelationship and assigns it to the Organization field.
func (o *SchedulerSchedulePolicy) SetOrganization(v OrganizationOrganizationRelationship) {
	o.Organization.Set(&v)
}

// SetOrganizationNil sets the value for Organization to be an explicit nil
func (o *SchedulerSchedulePolicy) SetOrganizationNil() {
	o.Organization.Set(nil)
}

// UnsetOrganization ensures that no value is present for Organization, not even an explicit nil
func (o *SchedulerSchedulePolicy) UnsetOrganization() {
	o.Organization.Unset()
}

func (o SchedulerSchedulePolicy) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SchedulerSchedulePolicy) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	serializedPolicyAbstractPolicy, errPolicyAbstractPolicy := json.Marshal(o.PolicyAbstractPolicy)
	if errPolicyAbstractPolicy != nil {
		return map[string]interface{}{}, errPolicyAbstractPolicy
	}
	errPolicyAbstractPolicy = json.Unmarshal([]byte(serializedPolicyAbstractPolicy), &toSerialize)
	if errPolicyAbstractPolicy != nil {
		return map[string]interface{}{}, errPolicyAbstractPolicy
	}
	if _, exists := toSerialize["ClassId"]; !exists {
		toSerialize["ClassId"] = o.GetDefaultClassId()
	}
	toSerialize["ClassId"] = o.ClassId
	if _, exists := toSerialize["ObjectType"]; !exists {
		toSerialize["ObjectType"] = o.GetDefaultObjectType()
	}
	toSerialize["ObjectType"] = o.ObjectType
	if o.BlockDates != nil {
		toSerialize["BlockDates"] = o.BlockDates
	}
	if !IsNil(o.EnableBlockDates) {
		toSerialize["EnableBlockDates"] = o.EnableBlockDates
	}
	if o.ScheduleParams != nil {
		toSerialize["ScheduleParams"] = o.ScheduleParams
	}
	if !IsNil(o.UsageCount) {
		toSerialize["UsageCount"] = o.UsageCount
	}
	if o.AssociatedObjects != nil {
		toSerialize["AssociatedObjects"] = o.AssociatedObjects
	}
	if o.Organization.IsSet() {
		toSerialize["Organization"] = o.Organization.Get()
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *SchedulerSchedulePolicy) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"ClassId",
		"ObjectType",
	}

	// defaultValueFuncMap captures the default values for required properties.
	// These values are used when required properties are missing from the payload.
	defaultValueFuncMap := map[string]func() interface{}{
		"ClassId":    o.GetDefaultClassId,
		"ObjectType": o.GetDefaultObjectType,
	}
	var defaultValueApplied bool
	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			if _, ok := defaultValueFuncMap[requiredProperty]; ok {
				allProperties[requiredProperty] = defaultValueFuncMap[requiredProperty]()
				defaultValueApplied = true
			}
		}
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	if defaultValueApplied {
		data, err = json.Marshal(allProperties)
		if err != nil {
			return err
		}
	}
	type SchedulerSchedulePolicyWithoutEmbeddedStruct struct {
		// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.
		ClassId string `json:"ClassId"`
		// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
		ObjectType string               `json:"ObjectType"`
		BlockDates []SchedulerBlockDate `json:"BlockDates,omitempty"`
		// Enable or disable block dates. If set to true, the schedule will not run during the block date interval.
		EnableBlockDates *bool                         `json:"EnableBlockDates,omitempty"`
		ScheduleParams   []SchedulerBaseScheduleParams `json:"ScheduleParams,omitempty"`
		// The number of profiles, templates and deployments that are using this policy.  This is used to determine if the policy can be deleted. If the usageCount is greater than 0, the policy cannot be deleted.
		UsageCount *int64 `json:"UsageCount,omitempty"`
		// An array of relationships to moBaseMo resources.
		AssociatedObjects []MoBaseMoRelationship                       `json:"AssociatedObjects,omitempty"`
		Organization      NullableOrganizationOrganizationRelationship `json:"Organization,omitempty"`
	}

	varSchedulerSchedulePolicyWithoutEmbeddedStruct := SchedulerSchedulePolicyWithoutEmbeddedStruct{}

	err = json.Unmarshal(data, &varSchedulerSchedulePolicyWithoutEmbeddedStruct)
	if err == nil {
		varSchedulerSchedulePolicy := _SchedulerSchedulePolicy{}
		varSchedulerSchedulePolicy.ClassId = varSchedulerSchedulePolicyWithoutEmbeddedStruct.ClassId
		varSchedulerSchedulePolicy.ObjectType = varSchedulerSchedulePolicyWithoutEmbeddedStruct.ObjectType
		varSchedulerSchedulePolicy.BlockDates = varSchedulerSchedulePolicyWithoutEmbeddedStruct.BlockDates
		varSchedulerSchedulePolicy.EnableBlockDates = varSchedulerSchedulePolicyWithoutEmbeddedStruct.EnableBlockDates
		varSchedulerSchedulePolicy.ScheduleParams = varSchedulerSchedulePolicyWithoutEmbeddedStruct.ScheduleParams
		varSchedulerSchedulePolicy.UsageCount = varSchedulerSchedulePolicyWithoutEmbeddedStruct.UsageCount
		varSchedulerSchedulePolicy.AssociatedObjects = varSchedulerSchedulePolicyWithoutEmbeddedStruct.AssociatedObjects
		varSchedulerSchedulePolicy.Organization = varSchedulerSchedulePolicyWithoutEmbeddedStruct.Organization
		*o = SchedulerSchedulePolicy(varSchedulerSchedulePolicy)
	} else {
		return err
	}

	varSchedulerSchedulePolicy := _SchedulerSchedulePolicy{}

	err = json.Unmarshal(data, &varSchedulerSchedulePolicy)
	if err == nil {
		o.PolicyAbstractPolicy = varSchedulerSchedulePolicy.PolicyAbstractPolicy
	} else {
		return err
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "ClassId")
		delete(additionalProperties, "ObjectType")
		delete(additionalProperties, "BlockDates")
		delete(additionalProperties, "EnableBlockDates")
		delete(additionalProperties, "ScheduleParams")
		delete(additionalProperties, "UsageCount")
		delete(additionalProperties, "AssociatedObjects")
		delete(additionalProperties, "Organization")

		// remove fields from embedded structs
		reflectPolicyAbstractPolicy := reflect.ValueOf(o.PolicyAbstractPolicy)
		for i := 0; i < reflectPolicyAbstractPolicy.Type().NumField(); i++ {
			t := reflectPolicyAbstractPolicy.Type().Field(i)

			if jsonTag := t.Tag.Get("json"); jsonTag != "" {
				fieldName := ""
				if commaIdx := strings.Index(jsonTag, ","); commaIdx > 0 {
					fieldName = jsonTag[:commaIdx]
				} else {
					fieldName = jsonTag
				}
				if fieldName != "AdditionalProperties" {
					delete(additionalProperties, fieldName)
				}
			}
		}

		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableSchedulerSchedulePolicy struct {
	value *SchedulerSchedulePolicy
	isSet bool
}

func (v NullableSchedulerSchedulePolicy) Get() *SchedulerSchedulePolicy {
	return v.value
}

func (v *NullableSchedulerSchedulePolicy) Set(val *SchedulerSchedulePolicy) {
	v.value = val
	v.isSet = true
}

func (v NullableSchedulerSchedulePolicy) IsSet() bool {
	return v.isSet
}

func (v *NullableSchedulerSchedulePolicy) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSchedulerSchedulePolicy(val *SchedulerSchedulePolicy) *NullableSchedulerSchedulePolicy {
	return &NullableSchedulerSchedulePolicy{value: val, isSet: true}
}

func (v NullableSchedulerSchedulePolicy) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSchedulerSchedulePolicy) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
