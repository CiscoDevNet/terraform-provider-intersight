/*
Cisco Intersight

Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations. The Intersight OpenAPI document defines the complete set of properties that are returned in the HTTP response. From that perspective, a client can expect that no additional properties are returned, unless these properties are explicitly defined in the OpenAPI document. However, when a client uses an older version of the Intersight OpenAPI document, the server may send additional properties because the software is more recent than the client. In that case, the client may receive properties that it does not know about. Some generated SDKs perform a strict validation of the HTTP response body against the OpenAPI document.

API version: 1.0.11-14828
Contact: intersight@cisco.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package intersight

import (
	"encoding/json"
)

// MetricsMetricsExplorationAllOf Definition of the list of properties defined in 'metrics.MetricsExploration', excluding properties defined in parent classes.
type MetricsMetricsExplorationAllOf struct {
	// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.
	ClassId string `json:"ClassId"`
	// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
	ObjectType string `json:"ObjectType"`
	// User specified description of this MetricsExploration.
	Description *string `json:"Description,omitempty"`
	// The time unit in which the metrics will be aggregated into.
	Granularity *string  `json:"Granularity,omitempty"`
	Intervals   []string `json:"Intervals,omitempty"`
	// True when this MetricsExploration is exposed as a Dashlet widget.
	IsWidget       *bool                    `json:"IsWidget,omitempty"`
	MetricCriteria []MetricsMetricCriterion `json:"MetricCriteria,omitempty"`
	// User specified name of this MetricsExploration.
	Name       *string  `json:"Name,omitempty"`
	RawQueries []string `json:"RawQueries,omitempty"`
	// Chart configuration options.
	VisualConfig         interface{}                           `json:"VisualConfig,omitempty"`
	Organization         *OrganizationOrganizationRelationship `json:"Organization,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _MetricsMetricsExplorationAllOf MetricsMetricsExplorationAllOf

// NewMetricsMetricsExplorationAllOf instantiates a new MetricsMetricsExplorationAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMetricsMetricsExplorationAllOf(classId string, objectType string) *MetricsMetricsExplorationAllOf {
	this := MetricsMetricsExplorationAllOf{}
	this.ClassId = classId
	this.ObjectType = objectType
	return &this
}

// NewMetricsMetricsExplorationAllOfWithDefaults instantiates a new MetricsMetricsExplorationAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMetricsMetricsExplorationAllOfWithDefaults() *MetricsMetricsExplorationAllOf {
	this := MetricsMetricsExplorationAllOf{}
	var classId string = "metrics.MetricsExploration"
	this.ClassId = classId
	var objectType string = "metrics.MetricsExploration"
	this.ObjectType = objectType
	return &this
}

// GetClassId returns the ClassId field value
func (o *MetricsMetricsExplorationAllOf) GetClassId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ClassId
}

// GetClassIdOk returns a tuple with the ClassId field value
// and a boolean to check if the value has been set.
func (o *MetricsMetricsExplorationAllOf) GetClassIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ClassId, true
}

// SetClassId sets field value
func (o *MetricsMetricsExplorationAllOf) SetClassId(v string) {
	o.ClassId = v
}

// GetObjectType returns the ObjectType field value
func (o *MetricsMetricsExplorationAllOf) GetObjectType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ObjectType
}

// GetObjectTypeOk returns a tuple with the ObjectType field value
// and a boolean to check if the value has been set.
func (o *MetricsMetricsExplorationAllOf) GetObjectTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ObjectType, true
}

// SetObjectType sets field value
func (o *MetricsMetricsExplorationAllOf) SetObjectType(v string) {
	o.ObjectType = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *MetricsMetricsExplorationAllOf) GetDescription() string {
	if o == nil || o.Description == nil {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetricsMetricsExplorationAllOf) GetDescriptionOk() (*string, bool) {
	if o == nil || o.Description == nil {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *MetricsMetricsExplorationAllOf) HasDescription() bool {
	if o != nil && o.Description != nil {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *MetricsMetricsExplorationAllOf) SetDescription(v string) {
	o.Description = &v
}

// GetGranularity returns the Granularity field value if set, zero value otherwise.
func (o *MetricsMetricsExplorationAllOf) GetGranularity() string {
	if o == nil || o.Granularity == nil {
		var ret string
		return ret
	}
	return *o.Granularity
}

// GetGranularityOk returns a tuple with the Granularity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetricsMetricsExplorationAllOf) GetGranularityOk() (*string, bool) {
	if o == nil || o.Granularity == nil {
		return nil, false
	}
	return o.Granularity, true
}

// HasGranularity returns a boolean if a field has been set.
func (o *MetricsMetricsExplorationAllOf) HasGranularity() bool {
	if o != nil && o.Granularity != nil {
		return true
	}

	return false
}

// SetGranularity gets a reference to the given string and assigns it to the Granularity field.
func (o *MetricsMetricsExplorationAllOf) SetGranularity(v string) {
	o.Granularity = &v
}

// GetIntervals returns the Intervals field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MetricsMetricsExplorationAllOf) GetIntervals() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.Intervals
}

// GetIntervalsOk returns a tuple with the Intervals field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MetricsMetricsExplorationAllOf) GetIntervalsOk() ([]string, bool) {
	if o == nil || o.Intervals == nil {
		return nil, false
	}
	return o.Intervals, true
}

// HasIntervals returns a boolean if a field has been set.
func (o *MetricsMetricsExplorationAllOf) HasIntervals() bool {
	if o != nil && o.Intervals != nil {
		return true
	}

	return false
}

// SetIntervals gets a reference to the given []string and assigns it to the Intervals field.
func (o *MetricsMetricsExplorationAllOf) SetIntervals(v []string) {
	o.Intervals = v
}

// GetIsWidget returns the IsWidget field value if set, zero value otherwise.
func (o *MetricsMetricsExplorationAllOf) GetIsWidget() bool {
	if o == nil || o.IsWidget == nil {
		var ret bool
		return ret
	}
	return *o.IsWidget
}

// GetIsWidgetOk returns a tuple with the IsWidget field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetricsMetricsExplorationAllOf) GetIsWidgetOk() (*bool, bool) {
	if o == nil || o.IsWidget == nil {
		return nil, false
	}
	return o.IsWidget, true
}

// HasIsWidget returns a boolean if a field has been set.
func (o *MetricsMetricsExplorationAllOf) HasIsWidget() bool {
	if o != nil && o.IsWidget != nil {
		return true
	}

	return false
}

// SetIsWidget gets a reference to the given bool and assigns it to the IsWidget field.
func (o *MetricsMetricsExplorationAllOf) SetIsWidget(v bool) {
	o.IsWidget = &v
}

// GetMetricCriteria returns the MetricCriteria field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MetricsMetricsExplorationAllOf) GetMetricCriteria() []MetricsMetricCriterion {
	if o == nil {
		var ret []MetricsMetricCriterion
		return ret
	}
	return o.MetricCriteria
}

// GetMetricCriteriaOk returns a tuple with the MetricCriteria field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MetricsMetricsExplorationAllOf) GetMetricCriteriaOk() ([]MetricsMetricCriterion, bool) {
	if o == nil || o.MetricCriteria == nil {
		return nil, false
	}
	return o.MetricCriteria, true
}

// HasMetricCriteria returns a boolean if a field has been set.
func (o *MetricsMetricsExplorationAllOf) HasMetricCriteria() bool {
	if o != nil && o.MetricCriteria != nil {
		return true
	}

	return false
}

// SetMetricCriteria gets a reference to the given []MetricsMetricCriterion and assigns it to the MetricCriteria field.
func (o *MetricsMetricsExplorationAllOf) SetMetricCriteria(v []MetricsMetricCriterion) {
	o.MetricCriteria = v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *MetricsMetricsExplorationAllOf) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetricsMetricsExplorationAllOf) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *MetricsMetricsExplorationAllOf) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *MetricsMetricsExplorationAllOf) SetName(v string) {
	o.Name = &v
}

// GetRawQueries returns the RawQueries field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MetricsMetricsExplorationAllOf) GetRawQueries() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.RawQueries
}

// GetRawQueriesOk returns a tuple with the RawQueries field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MetricsMetricsExplorationAllOf) GetRawQueriesOk() ([]string, bool) {
	if o == nil || o.RawQueries == nil {
		return nil, false
	}
	return o.RawQueries, true
}

// HasRawQueries returns a boolean if a field has been set.
func (o *MetricsMetricsExplorationAllOf) HasRawQueries() bool {
	if o != nil && o.RawQueries != nil {
		return true
	}

	return false
}

// SetRawQueries gets a reference to the given []string and assigns it to the RawQueries field.
func (o *MetricsMetricsExplorationAllOf) SetRawQueries(v []string) {
	o.RawQueries = v
}

// GetVisualConfig returns the VisualConfig field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MetricsMetricsExplorationAllOf) GetVisualConfig() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.VisualConfig
}

// GetVisualConfigOk returns a tuple with the VisualConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MetricsMetricsExplorationAllOf) GetVisualConfigOk() (*interface{}, bool) {
	if o == nil || o.VisualConfig == nil {
		return nil, false
	}
	return &o.VisualConfig, true
}

// HasVisualConfig returns a boolean if a field has been set.
func (o *MetricsMetricsExplorationAllOf) HasVisualConfig() bool {
	if o != nil && o.VisualConfig != nil {
		return true
	}

	return false
}

// SetVisualConfig gets a reference to the given interface{} and assigns it to the VisualConfig field.
func (o *MetricsMetricsExplorationAllOf) SetVisualConfig(v interface{}) {
	o.VisualConfig = v
}

// GetOrganization returns the Organization field value if set, zero value otherwise.
func (o *MetricsMetricsExplorationAllOf) GetOrganization() OrganizationOrganizationRelationship {
	if o == nil || o.Organization == nil {
		var ret OrganizationOrganizationRelationship
		return ret
	}
	return *o.Organization
}

// GetOrganizationOk returns a tuple with the Organization field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetricsMetricsExplorationAllOf) GetOrganizationOk() (*OrganizationOrganizationRelationship, bool) {
	if o == nil || o.Organization == nil {
		return nil, false
	}
	return o.Organization, true
}

// HasOrganization returns a boolean if a field has been set.
func (o *MetricsMetricsExplorationAllOf) HasOrganization() bool {
	if o != nil && o.Organization != nil {
		return true
	}

	return false
}

// SetOrganization gets a reference to the given OrganizationOrganizationRelationship and assigns it to the Organization field.
func (o *MetricsMetricsExplorationAllOf) SetOrganization(v OrganizationOrganizationRelationship) {
	o.Organization = &v
}

func (o MetricsMetricsExplorationAllOf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["ClassId"] = o.ClassId
	}
	if true {
		toSerialize["ObjectType"] = o.ObjectType
	}
	if o.Description != nil {
		toSerialize["Description"] = o.Description
	}
	if o.Granularity != nil {
		toSerialize["Granularity"] = o.Granularity
	}
	if o.Intervals != nil {
		toSerialize["Intervals"] = o.Intervals
	}
	if o.IsWidget != nil {
		toSerialize["IsWidget"] = o.IsWidget
	}
	if o.MetricCriteria != nil {
		toSerialize["MetricCriteria"] = o.MetricCriteria
	}
	if o.Name != nil {
		toSerialize["Name"] = o.Name
	}
	if o.RawQueries != nil {
		toSerialize["RawQueries"] = o.RawQueries
	}
	if o.VisualConfig != nil {
		toSerialize["VisualConfig"] = o.VisualConfig
	}
	if o.Organization != nil {
		toSerialize["Organization"] = o.Organization
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *MetricsMetricsExplorationAllOf) UnmarshalJSON(bytes []byte) (err error) {
	varMetricsMetricsExplorationAllOf := _MetricsMetricsExplorationAllOf{}

	if err = json.Unmarshal(bytes, &varMetricsMetricsExplorationAllOf); err == nil {
		*o = MetricsMetricsExplorationAllOf(varMetricsMetricsExplorationAllOf)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "ClassId")
		delete(additionalProperties, "ObjectType")
		delete(additionalProperties, "Description")
		delete(additionalProperties, "Granularity")
		delete(additionalProperties, "Intervals")
		delete(additionalProperties, "IsWidget")
		delete(additionalProperties, "MetricCriteria")
		delete(additionalProperties, "Name")
		delete(additionalProperties, "RawQueries")
		delete(additionalProperties, "VisualConfig")
		delete(additionalProperties, "Organization")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableMetricsMetricsExplorationAllOf struct {
	value *MetricsMetricsExplorationAllOf
	isSet bool
}

func (v NullableMetricsMetricsExplorationAllOf) Get() *MetricsMetricsExplorationAllOf {
	return v.value
}

func (v *NullableMetricsMetricsExplorationAllOf) Set(val *MetricsMetricsExplorationAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableMetricsMetricsExplorationAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableMetricsMetricsExplorationAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMetricsMetricsExplorationAllOf(val *MetricsMetricsExplorationAllOf) *NullableMetricsMetricsExplorationAllOf {
	return &NullableMetricsMetricsExplorationAllOf{value: val, isSet: true}
}

func (v NullableMetricsMetricsExplorationAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMetricsMetricsExplorationAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
