/*
Cisco Intersight

Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations. The Intersight OpenAPI document defines the complete set of properties that are returned in the HTTP response. From that perspective, a client can expect that no additional properties are returned, unless these properties are explicitly defined in the OpenAPI document. However, when a client uses an older version of the Intersight OpenAPI document, the server may send additional properties because the software is more recent than the client. In that case, the client may receive properties that it does not know about. Some generated SDKs perform a strict validation of the HTTP response body against the OpenAPI document.

API version: 1.0.11-2024100405
Contact: intersight@cisco.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package intersight

import (
	"encoding/json"
	"fmt"
	"reflect"
	"strings"
)

// checks if the AssetAddressInformation type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AssetAddressInformation{}

// AssetAddressInformation Type for saving the address information. It is used in asset.DeviceContractInformation object to save customer address.
type AssetAddressInformation struct {
	MoBaseComplexType
	// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.
	ClassId string `json:"ClassId"`
	// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
	ObjectType string `json:"ObjectType"`
	// Address Line one of the address information. example \"PO BOX 641570\".
	Address1 *string `json:"Address1,omitempty"`
	// Address Line two of the address information. example \"Cisco Systems\".
	Address2 *string `json:"Address2,omitempty"`
	// Address Line three of the address information. example \"Cisco Systems\".
	Address3 *string `json:"Address3,omitempty"`
	// City in which the address resides. example \"San Jose\".
	City *string `json:"City,omitempty"`
	// Country in which the address resides. example \"US\".
	Country *string `json:"Country,omitempty"`
	// County in which the address resides. example \"Washington County\".
	County *string `json:"County,omitempty"`
	// Location in which the address resides. example \"14852\".
	Location *string `json:"Location,omitempty"`
	// Name of the user whose address is being populated.
	Name *string `json:"Name,omitempty"`
	// Postal Code in which the address resides. example \"95164-1570\".
	PostalCode *string `json:"PostalCode,omitempty"`
	// Province in which the address resides. example \"AB\".
	Province *string `json:"Province,omitempty"`
	// State in which the address resides. example \"CA\".
	State                *string `json:"State,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _AssetAddressInformation AssetAddressInformation

// NewAssetAddressInformation instantiates a new AssetAddressInformation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAssetAddressInformation(classId string, objectType string) *AssetAddressInformation {
	this := AssetAddressInformation{}
	this.ClassId = classId
	this.ObjectType = objectType
	return &this
}

// NewAssetAddressInformationWithDefaults instantiates a new AssetAddressInformation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAssetAddressInformationWithDefaults() *AssetAddressInformation {
	this := AssetAddressInformation{}
	var classId string = "asset.AddressInformation"
	this.ClassId = classId
	var objectType string = "asset.AddressInformation"
	this.ObjectType = objectType
	return &this
}

// GetClassId returns the ClassId field value
func (o *AssetAddressInformation) GetClassId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ClassId
}

// GetClassIdOk returns a tuple with the ClassId field value
// and a boolean to check if the value has been set.
func (o *AssetAddressInformation) GetClassIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ClassId, true
}

// SetClassId sets field value
func (o *AssetAddressInformation) SetClassId(v string) {
	o.ClassId = v
}

// GetDefaultClassId returns the default value "asset.AddressInformation" of the ClassId field.
func (o *AssetAddressInformation) GetDefaultClassId() interface{} {
	return "asset.AddressInformation"
}

// GetObjectType returns the ObjectType field value
func (o *AssetAddressInformation) GetObjectType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ObjectType
}

// GetObjectTypeOk returns a tuple with the ObjectType field value
// and a boolean to check if the value has been set.
func (o *AssetAddressInformation) GetObjectTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ObjectType, true
}

// SetObjectType sets field value
func (o *AssetAddressInformation) SetObjectType(v string) {
	o.ObjectType = v
}

// GetDefaultObjectType returns the default value "asset.AddressInformation" of the ObjectType field.
func (o *AssetAddressInformation) GetDefaultObjectType() interface{} {
	return "asset.AddressInformation"
}

// GetAddress1 returns the Address1 field value if set, zero value otherwise.
func (o *AssetAddressInformation) GetAddress1() string {
	if o == nil || IsNil(o.Address1) {
		var ret string
		return ret
	}
	return *o.Address1
}

// GetAddress1Ok returns a tuple with the Address1 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AssetAddressInformation) GetAddress1Ok() (*string, bool) {
	if o == nil || IsNil(o.Address1) {
		return nil, false
	}
	return o.Address1, true
}

// HasAddress1 returns a boolean if a field has been set.
func (o *AssetAddressInformation) HasAddress1() bool {
	if o != nil && !IsNil(o.Address1) {
		return true
	}

	return false
}

// SetAddress1 gets a reference to the given string and assigns it to the Address1 field.
func (o *AssetAddressInformation) SetAddress1(v string) {
	o.Address1 = &v
}

// GetAddress2 returns the Address2 field value if set, zero value otherwise.
func (o *AssetAddressInformation) GetAddress2() string {
	if o == nil || IsNil(o.Address2) {
		var ret string
		return ret
	}
	return *o.Address2
}

// GetAddress2Ok returns a tuple with the Address2 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AssetAddressInformation) GetAddress2Ok() (*string, bool) {
	if o == nil || IsNil(o.Address2) {
		return nil, false
	}
	return o.Address2, true
}

// HasAddress2 returns a boolean if a field has been set.
func (o *AssetAddressInformation) HasAddress2() bool {
	if o != nil && !IsNil(o.Address2) {
		return true
	}

	return false
}

// SetAddress2 gets a reference to the given string and assigns it to the Address2 field.
func (o *AssetAddressInformation) SetAddress2(v string) {
	o.Address2 = &v
}

// GetAddress3 returns the Address3 field value if set, zero value otherwise.
func (o *AssetAddressInformation) GetAddress3() string {
	if o == nil || IsNil(o.Address3) {
		var ret string
		return ret
	}
	return *o.Address3
}

// GetAddress3Ok returns a tuple with the Address3 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AssetAddressInformation) GetAddress3Ok() (*string, bool) {
	if o == nil || IsNil(o.Address3) {
		return nil, false
	}
	return o.Address3, true
}

// HasAddress3 returns a boolean if a field has been set.
func (o *AssetAddressInformation) HasAddress3() bool {
	if o != nil && !IsNil(o.Address3) {
		return true
	}

	return false
}

// SetAddress3 gets a reference to the given string and assigns it to the Address3 field.
func (o *AssetAddressInformation) SetAddress3(v string) {
	o.Address3 = &v
}

// GetCity returns the City field value if set, zero value otherwise.
func (o *AssetAddressInformation) GetCity() string {
	if o == nil || IsNil(o.City) {
		var ret string
		return ret
	}
	return *o.City
}

// GetCityOk returns a tuple with the City field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AssetAddressInformation) GetCityOk() (*string, bool) {
	if o == nil || IsNil(o.City) {
		return nil, false
	}
	return o.City, true
}

// HasCity returns a boolean if a field has been set.
func (o *AssetAddressInformation) HasCity() bool {
	if o != nil && !IsNil(o.City) {
		return true
	}

	return false
}

// SetCity gets a reference to the given string and assigns it to the City field.
func (o *AssetAddressInformation) SetCity(v string) {
	o.City = &v
}

// GetCountry returns the Country field value if set, zero value otherwise.
func (o *AssetAddressInformation) GetCountry() string {
	if o == nil || IsNil(o.Country) {
		var ret string
		return ret
	}
	return *o.Country
}

// GetCountryOk returns a tuple with the Country field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AssetAddressInformation) GetCountryOk() (*string, bool) {
	if o == nil || IsNil(o.Country) {
		return nil, false
	}
	return o.Country, true
}

// HasCountry returns a boolean if a field has been set.
func (o *AssetAddressInformation) HasCountry() bool {
	if o != nil && !IsNil(o.Country) {
		return true
	}

	return false
}

// SetCountry gets a reference to the given string and assigns it to the Country field.
func (o *AssetAddressInformation) SetCountry(v string) {
	o.Country = &v
}

// GetCounty returns the County field value if set, zero value otherwise.
func (o *AssetAddressInformation) GetCounty() string {
	if o == nil || IsNil(o.County) {
		var ret string
		return ret
	}
	return *o.County
}

// GetCountyOk returns a tuple with the County field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AssetAddressInformation) GetCountyOk() (*string, bool) {
	if o == nil || IsNil(o.County) {
		return nil, false
	}
	return o.County, true
}

// HasCounty returns a boolean if a field has been set.
func (o *AssetAddressInformation) HasCounty() bool {
	if o != nil && !IsNil(o.County) {
		return true
	}

	return false
}

// SetCounty gets a reference to the given string and assigns it to the County field.
func (o *AssetAddressInformation) SetCounty(v string) {
	o.County = &v
}

// GetLocation returns the Location field value if set, zero value otherwise.
func (o *AssetAddressInformation) GetLocation() string {
	if o == nil || IsNil(o.Location) {
		var ret string
		return ret
	}
	return *o.Location
}

// GetLocationOk returns a tuple with the Location field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AssetAddressInformation) GetLocationOk() (*string, bool) {
	if o == nil || IsNil(o.Location) {
		return nil, false
	}
	return o.Location, true
}

// HasLocation returns a boolean if a field has been set.
func (o *AssetAddressInformation) HasLocation() bool {
	if o != nil && !IsNil(o.Location) {
		return true
	}

	return false
}

// SetLocation gets a reference to the given string and assigns it to the Location field.
func (o *AssetAddressInformation) SetLocation(v string) {
	o.Location = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *AssetAddressInformation) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AssetAddressInformation) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *AssetAddressInformation) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *AssetAddressInformation) SetName(v string) {
	o.Name = &v
}

// GetPostalCode returns the PostalCode field value if set, zero value otherwise.
func (o *AssetAddressInformation) GetPostalCode() string {
	if o == nil || IsNil(o.PostalCode) {
		var ret string
		return ret
	}
	return *o.PostalCode
}

// GetPostalCodeOk returns a tuple with the PostalCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AssetAddressInformation) GetPostalCodeOk() (*string, bool) {
	if o == nil || IsNil(o.PostalCode) {
		return nil, false
	}
	return o.PostalCode, true
}

// HasPostalCode returns a boolean if a field has been set.
func (o *AssetAddressInformation) HasPostalCode() bool {
	if o != nil && !IsNil(o.PostalCode) {
		return true
	}

	return false
}

// SetPostalCode gets a reference to the given string and assigns it to the PostalCode field.
func (o *AssetAddressInformation) SetPostalCode(v string) {
	o.PostalCode = &v
}

// GetProvince returns the Province field value if set, zero value otherwise.
func (o *AssetAddressInformation) GetProvince() string {
	if o == nil || IsNil(o.Province) {
		var ret string
		return ret
	}
	return *o.Province
}

// GetProvinceOk returns a tuple with the Province field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AssetAddressInformation) GetProvinceOk() (*string, bool) {
	if o == nil || IsNil(o.Province) {
		return nil, false
	}
	return o.Province, true
}

// HasProvince returns a boolean if a field has been set.
func (o *AssetAddressInformation) HasProvince() bool {
	if o != nil && !IsNil(o.Province) {
		return true
	}

	return false
}

// SetProvince gets a reference to the given string and assigns it to the Province field.
func (o *AssetAddressInformation) SetProvince(v string) {
	o.Province = &v
}

// GetState returns the State field value if set, zero value otherwise.
func (o *AssetAddressInformation) GetState() string {
	if o == nil || IsNil(o.State) {
		var ret string
		return ret
	}
	return *o.State
}

// GetStateOk returns a tuple with the State field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AssetAddressInformation) GetStateOk() (*string, bool) {
	if o == nil || IsNil(o.State) {
		return nil, false
	}
	return o.State, true
}

// HasState returns a boolean if a field has been set.
func (o *AssetAddressInformation) HasState() bool {
	if o != nil && !IsNil(o.State) {
		return true
	}

	return false
}

// SetState gets a reference to the given string and assigns it to the State field.
func (o *AssetAddressInformation) SetState(v string) {
	o.State = &v
}

func (o AssetAddressInformation) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AssetAddressInformation) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	serializedMoBaseComplexType, errMoBaseComplexType := json.Marshal(o.MoBaseComplexType)
	if errMoBaseComplexType != nil {
		return map[string]interface{}{}, errMoBaseComplexType
	}
	errMoBaseComplexType = json.Unmarshal([]byte(serializedMoBaseComplexType), &toSerialize)
	if errMoBaseComplexType != nil {
		return map[string]interface{}{}, errMoBaseComplexType
	}
	if _, exists := toSerialize["ClassId"]; !exists {
		toSerialize["ClassId"] = o.GetDefaultClassId()
	}
	toSerialize["ClassId"] = o.ClassId
	if _, exists := toSerialize["ObjectType"]; !exists {
		toSerialize["ObjectType"] = o.GetDefaultObjectType()
	}
	toSerialize["ObjectType"] = o.ObjectType
	if !IsNil(o.Address1) {
		toSerialize["Address1"] = o.Address1
	}
	if !IsNil(o.Address2) {
		toSerialize["Address2"] = o.Address2
	}
	if !IsNil(o.Address3) {
		toSerialize["Address3"] = o.Address3
	}
	if !IsNil(o.City) {
		toSerialize["City"] = o.City
	}
	if !IsNil(o.Country) {
		toSerialize["Country"] = o.Country
	}
	if !IsNil(o.County) {
		toSerialize["County"] = o.County
	}
	if !IsNil(o.Location) {
		toSerialize["Location"] = o.Location
	}
	if !IsNil(o.Name) {
		toSerialize["Name"] = o.Name
	}
	if !IsNil(o.PostalCode) {
		toSerialize["PostalCode"] = o.PostalCode
	}
	if !IsNil(o.Province) {
		toSerialize["Province"] = o.Province
	}
	if !IsNil(o.State) {
		toSerialize["State"] = o.State
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *AssetAddressInformation) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"ClassId",
		"ObjectType",
	}

	// defaultValueFuncMap captures the default values for required properties.
	// These values are used when required properties are missing from the payload.
	defaultValueFuncMap := map[string]func() interface{}{
		"ClassId":    o.GetDefaultClassId,
		"ObjectType": o.GetDefaultObjectType,
	}
	var defaultValueApplied bool
	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			if _, ok := defaultValueFuncMap[requiredProperty]; ok {
				allProperties[requiredProperty] = defaultValueFuncMap[requiredProperty]()
				defaultValueApplied = true
			}
		}
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	if defaultValueApplied {
		data, err = json.Marshal(allProperties)
		if err != nil {
			return err
		}
	}
	type AssetAddressInformationWithoutEmbeddedStruct struct {
		// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.
		ClassId string `json:"ClassId"`
		// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
		ObjectType string `json:"ObjectType"`
		// Address Line one of the address information. example \"PO BOX 641570\".
		Address1 *string `json:"Address1,omitempty"`
		// Address Line two of the address information. example \"Cisco Systems\".
		Address2 *string `json:"Address2,omitempty"`
		// Address Line three of the address information. example \"Cisco Systems\".
		Address3 *string `json:"Address3,omitempty"`
		// City in which the address resides. example \"San Jose\".
		City *string `json:"City,omitempty"`
		// Country in which the address resides. example \"US\".
		Country *string `json:"Country,omitempty"`
		// County in which the address resides. example \"Washington County\".
		County *string `json:"County,omitempty"`
		// Location in which the address resides. example \"14852\".
		Location *string `json:"Location,omitempty"`
		// Name of the user whose address is being populated.
		Name *string `json:"Name,omitempty"`
		// Postal Code in which the address resides. example \"95164-1570\".
		PostalCode *string `json:"PostalCode,omitempty"`
		// Province in which the address resides. example \"AB\".
		Province *string `json:"Province,omitempty"`
		// State in which the address resides. example \"CA\".
		State *string `json:"State,omitempty"`
	}

	varAssetAddressInformationWithoutEmbeddedStruct := AssetAddressInformationWithoutEmbeddedStruct{}

	err = json.Unmarshal(data, &varAssetAddressInformationWithoutEmbeddedStruct)
	if err == nil {
		varAssetAddressInformation := _AssetAddressInformation{}
		varAssetAddressInformation.ClassId = varAssetAddressInformationWithoutEmbeddedStruct.ClassId
		varAssetAddressInformation.ObjectType = varAssetAddressInformationWithoutEmbeddedStruct.ObjectType
		varAssetAddressInformation.Address1 = varAssetAddressInformationWithoutEmbeddedStruct.Address1
		varAssetAddressInformation.Address2 = varAssetAddressInformationWithoutEmbeddedStruct.Address2
		varAssetAddressInformation.Address3 = varAssetAddressInformationWithoutEmbeddedStruct.Address3
		varAssetAddressInformation.City = varAssetAddressInformationWithoutEmbeddedStruct.City
		varAssetAddressInformation.Country = varAssetAddressInformationWithoutEmbeddedStruct.Country
		varAssetAddressInformation.County = varAssetAddressInformationWithoutEmbeddedStruct.County
		varAssetAddressInformation.Location = varAssetAddressInformationWithoutEmbeddedStruct.Location
		varAssetAddressInformation.Name = varAssetAddressInformationWithoutEmbeddedStruct.Name
		varAssetAddressInformation.PostalCode = varAssetAddressInformationWithoutEmbeddedStruct.PostalCode
		varAssetAddressInformation.Province = varAssetAddressInformationWithoutEmbeddedStruct.Province
		varAssetAddressInformation.State = varAssetAddressInformationWithoutEmbeddedStruct.State
		*o = AssetAddressInformation(varAssetAddressInformation)
	} else {
		return err
	}

	varAssetAddressInformation := _AssetAddressInformation{}

	err = json.Unmarshal(data, &varAssetAddressInformation)
	if err == nil {
		o.MoBaseComplexType = varAssetAddressInformation.MoBaseComplexType
	} else {
		return err
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "ClassId")
		delete(additionalProperties, "ObjectType")
		delete(additionalProperties, "Address1")
		delete(additionalProperties, "Address2")
		delete(additionalProperties, "Address3")
		delete(additionalProperties, "City")
		delete(additionalProperties, "Country")
		delete(additionalProperties, "County")
		delete(additionalProperties, "Location")
		delete(additionalProperties, "Name")
		delete(additionalProperties, "PostalCode")
		delete(additionalProperties, "Province")
		delete(additionalProperties, "State")

		// remove fields from embedded structs
		reflectMoBaseComplexType := reflect.ValueOf(o.MoBaseComplexType)
		for i := 0; i < reflectMoBaseComplexType.Type().NumField(); i++ {
			t := reflectMoBaseComplexType.Type().Field(i)

			if jsonTag := t.Tag.Get("json"); jsonTag != "" {
				fieldName := ""
				if commaIdx := strings.Index(jsonTag, ","); commaIdx > 0 {
					fieldName = jsonTag[:commaIdx]
				} else {
					fieldName = jsonTag
				}
				if fieldName != "AdditionalProperties" {
					delete(additionalProperties, fieldName)
				}
			}
		}

		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableAssetAddressInformation struct {
	value *AssetAddressInformation
	isSet bool
}

func (v NullableAssetAddressInformation) Get() *AssetAddressInformation {
	return v.value
}

func (v *NullableAssetAddressInformation) Set(val *AssetAddressInformation) {
	v.value = val
	v.isSet = true
}

func (v NullableAssetAddressInformation) IsSet() bool {
	return v.isSet
}

func (v *NullableAssetAddressInformation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAssetAddressInformation(val *AssetAddressInformation) *NullableAssetAddressInformation {
	return &NullableAssetAddressInformation{value: val, isSet: true}
}

func (v NullableAssetAddressInformation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAssetAddressInformation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
