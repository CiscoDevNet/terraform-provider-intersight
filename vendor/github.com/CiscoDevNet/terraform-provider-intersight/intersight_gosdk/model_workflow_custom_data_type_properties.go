/*
 * Cisco Intersight
 *
 * Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations. The Intersight OpenAPI document defines the complete set of properties that are returned in the HTTP response. From that perspective, a client can expect that no additional properties are returned, unless these properties are explicitly defined in the OpenAPI document. However, when a client uses an older version of the Intersight OpenAPI document, the server may send additional properties because the software is more recent than the client. In that case, the client may receive properties that it does not know about. Some generated SDKs perform a strict validation of the HTTP response body against the OpenAPI document. This document was created on 2021-07-21T16:37:30Z.
 *
 * API version: 1.0.9-4403
 * Contact: intersight@cisco.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package intersight

import (
	"encoding/json"
	"reflect"
	"strings"
)

// WorkflowCustomDataTypeProperties Properties for a custom data type definition.
type WorkflowCustomDataTypeProperties struct {
	MoBaseComplexType
	// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.
	ClassId string `json:"ClassId"`
	// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
	ObjectType string `json:"ObjectType"`
	// When set to false custom data type is not cloneable. It is set to true only if data type is not internal and it is not using any internal custom data type.
	Cloneable *bool `json:"Cloneable,omitempty"`
	// When set to false the custom data type is owned by the system and used for internal services. Such custom data type cannot be directly used by external entities.
	ExternalMeta         *bool `json:"ExternalMeta,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _WorkflowCustomDataTypeProperties WorkflowCustomDataTypeProperties

// NewWorkflowCustomDataTypeProperties instantiates a new WorkflowCustomDataTypeProperties object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWorkflowCustomDataTypeProperties(classId string, objectType string) *WorkflowCustomDataTypeProperties {
	this := WorkflowCustomDataTypeProperties{}
	this.ClassId = classId
	this.ObjectType = objectType
	var cloneable bool = true
	this.Cloneable = &cloneable
	var externalMeta bool = false
	this.ExternalMeta = &externalMeta
	return &this
}

// NewWorkflowCustomDataTypePropertiesWithDefaults instantiates a new WorkflowCustomDataTypeProperties object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWorkflowCustomDataTypePropertiesWithDefaults() *WorkflowCustomDataTypeProperties {
	this := WorkflowCustomDataTypeProperties{}
	var classId string = "workflow.CustomDataTypeProperties"
	this.ClassId = classId
	var objectType string = "workflow.CustomDataTypeProperties"
	this.ObjectType = objectType
	var cloneable bool = true
	this.Cloneable = &cloneable
	var externalMeta bool = false
	this.ExternalMeta = &externalMeta
	return &this
}

// GetClassId returns the ClassId field value
func (o *WorkflowCustomDataTypeProperties) GetClassId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ClassId
}

// GetClassIdOk returns a tuple with the ClassId field value
// and a boolean to check if the value has been set.
func (o *WorkflowCustomDataTypeProperties) GetClassIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ClassId, true
}

// SetClassId sets field value
func (o *WorkflowCustomDataTypeProperties) SetClassId(v string) {
	o.ClassId = v
}

// GetObjectType returns the ObjectType field value
func (o *WorkflowCustomDataTypeProperties) GetObjectType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ObjectType
}

// GetObjectTypeOk returns a tuple with the ObjectType field value
// and a boolean to check if the value has been set.
func (o *WorkflowCustomDataTypeProperties) GetObjectTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ObjectType, true
}

// SetObjectType sets field value
func (o *WorkflowCustomDataTypeProperties) SetObjectType(v string) {
	o.ObjectType = v
}

// GetCloneable returns the Cloneable field value if set, zero value otherwise.
func (o *WorkflowCustomDataTypeProperties) GetCloneable() bool {
	if o == nil || o.Cloneable == nil {
		var ret bool
		return ret
	}
	return *o.Cloneable
}

// GetCloneableOk returns a tuple with the Cloneable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkflowCustomDataTypeProperties) GetCloneableOk() (*bool, bool) {
	if o == nil || o.Cloneable == nil {
		return nil, false
	}
	return o.Cloneable, true
}

// HasCloneable returns a boolean if a field has been set.
func (o *WorkflowCustomDataTypeProperties) HasCloneable() bool {
	if o != nil && o.Cloneable != nil {
		return true
	}

	return false
}

// SetCloneable gets a reference to the given bool and assigns it to the Cloneable field.
func (o *WorkflowCustomDataTypeProperties) SetCloneable(v bool) {
	o.Cloneable = &v
}

// GetExternalMeta returns the ExternalMeta field value if set, zero value otherwise.
func (o *WorkflowCustomDataTypeProperties) GetExternalMeta() bool {
	if o == nil || o.ExternalMeta == nil {
		var ret bool
		return ret
	}
	return *o.ExternalMeta
}

// GetExternalMetaOk returns a tuple with the ExternalMeta field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkflowCustomDataTypeProperties) GetExternalMetaOk() (*bool, bool) {
	if o == nil || o.ExternalMeta == nil {
		return nil, false
	}
	return o.ExternalMeta, true
}

// HasExternalMeta returns a boolean if a field has been set.
func (o *WorkflowCustomDataTypeProperties) HasExternalMeta() bool {
	if o != nil && o.ExternalMeta != nil {
		return true
	}

	return false
}

// SetExternalMeta gets a reference to the given bool and assigns it to the ExternalMeta field.
func (o *WorkflowCustomDataTypeProperties) SetExternalMeta(v bool) {
	o.ExternalMeta = &v
}

func (o WorkflowCustomDataTypeProperties) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	serializedMoBaseComplexType, errMoBaseComplexType := json.Marshal(o.MoBaseComplexType)
	if errMoBaseComplexType != nil {
		return []byte{}, errMoBaseComplexType
	}
	errMoBaseComplexType = json.Unmarshal([]byte(serializedMoBaseComplexType), &toSerialize)
	if errMoBaseComplexType != nil {
		return []byte{}, errMoBaseComplexType
	}
	if true {
		toSerialize["ClassId"] = o.ClassId
	}
	if true {
		toSerialize["ObjectType"] = o.ObjectType
	}
	if o.Cloneable != nil {
		toSerialize["Cloneable"] = o.Cloneable
	}
	if o.ExternalMeta != nil {
		toSerialize["ExternalMeta"] = o.ExternalMeta
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *WorkflowCustomDataTypeProperties) UnmarshalJSON(bytes []byte) (err error) {
	type WorkflowCustomDataTypePropertiesWithoutEmbeddedStruct struct {
		// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.
		ClassId string `json:"ClassId"`
		// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
		ObjectType string `json:"ObjectType"`
		// When set to false custom data type is not cloneable. It is set to true only if data type is not internal and it is not using any internal custom data type.
		Cloneable *bool `json:"Cloneable,omitempty"`
		// When set to false the custom data type is owned by the system and used for internal services. Such custom data type cannot be directly used by external entities.
		ExternalMeta *bool `json:"ExternalMeta,omitempty"`
	}

	varWorkflowCustomDataTypePropertiesWithoutEmbeddedStruct := WorkflowCustomDataTypePropertiesWithoutEmbeddedStruct{}

	err = json.Unmarshal(bytes, &varWorkflowCustomDataTypePropertiesWithoutEmbeddedStruct)
	if err == nil {
		varWorkflowCustomDataTypeProperties := _WorkflowCustomDataTypeProperties{}
		varWorkflowCustomDataTypeProperties.ClassId = varWorkflowCustomDataTypePropertiesWithoutEmbeddedStruct.ClassId
		varWorkflowCustomDataTypeProperties.ObjectType = varWorkflowCustomDataTypePropertiesWithoutEmbeddedStruct.ObjectType
		varWorkflowCustomDataTypeProperties.Cloneable = varWorkflowCustomDataTypePropertiesWithoutEmbeddedStruct.Cloneable
		varWorkflowCustomDataTypeProperties.ExternalMeta = varWorkflowCustomDataTypePropertiesWithoutEmbeddedStruct.ExternalMeta
		*o = WorkflowCustomDataTypeProperties(varWorkflowCustomDataTypeProperties)
	} else {
		return err
	}

	varWorkflowCustomDataTypeProperties := _WorkflowCustomDataTypeProperties{}

	err = json.Unmarshal(bytes, &varWorkflowCustomDataTypeProperties)
	if err == nil {
		o.MoBaseComplexType = varWorkflowCustomDataTypeProperties.MoBaseComplexType
	} else {
		return err
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "ClassId")
		delete(additionalProperties, "ObjectType")
		delete(additionalProperties, "Cloneable")
		delete(additionalProperties, "ExternalMeta")

		// remove fields from embedded structs
		reflectMoBaseComplexType := reflect.ValueOf(o.MoBaseComplexType)
		for i := 0; i < reflectMoBaseComplexType.Type().NumField(); i++ {
			t := reflectMoBaseComplexType.Type().Field(i)

			if jsonTag := t.Tag.Get("json"); jsonTag != "" {
				fieldName := ""
				if commaIdx := strings.Index(jsonTag, ","); commaIdx > 0 {
					fieldName = jsonTag[:commaIdx]
				} else {
					fieldName = jsonTag
				}
				if fieldName != "AdditionalProperties" {
					delete(additionalProperties, fieldName)
				}
			}
		}

		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableWorkflowCustomDataTypeProperties struct {
	value *WorkflowCustomDataTypeProperties
	isSet bool
}

func (v NullableWorkflowCustomDataTypeProperties) Get() *WorkflowCustomDataTypeProperties {
	return v.value
}

func (v *NullableWorkflowCustomDataTypeProperties) Set(val *WorkflowCustomDataTypeProperties) {
	v.value = val
	v.isSet = true
}

func (v NullableWorkflowCustomDataTypeProperties) IsSet() bool {
	return v.isSet
}

func (v *NullableWorkflowCustomDataTypeProperties) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWorkflowCustomDataTypeProperties(val *WorkflowCustomDataTypeProperties) *NullableWorkflowCustomDataTypeProperties {
	return &NullableWorkflowCustomDataTypeProperties{value: val, isSet: true}
}

func (v NullableWorkflowCustomDataTypeProperties) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWorkflowCustomDataTypeProperties) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
