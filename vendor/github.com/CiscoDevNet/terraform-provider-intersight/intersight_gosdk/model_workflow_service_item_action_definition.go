/*
Cisco Intersight

Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations. The Intersight OpenAPI document defines the complete set of properties that are returned in the HTTP response. From that perspective, a client can expect that no additional properties are returned, unless these properties are explicitly defined in the OpenAPI document. However, when a client uses an older version of the Intersight OpenAPI document, the server may send additional properties because the software is more recent than the client. In that case, the client may receive properties that it does not know about. Some generated SDKs perform a strict validation of the HTTP response body against the OpenAPI document.

API version: 1.0.11-2024100405
Contact: intersight@cisco.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package intersight

import (
	"encoding/json"
	"fmt"
	"reflect"
	"strings"
)

// checks if the WorkflowServiceItemActionDefinition type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &WorkflowServiceItemActionDefinition{}

// WorkflowServiceItemActionDefinition Definition to capture the details needed to execute an action on the service item.
type WorkflowServiceItemActionDefinition struct {
	MoBaseMo
	// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.
	ClassId string `json:"ClassId"`
	// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
	ObjectType       string                                      `json:"ObjectType"`
	ActionProperties NullableWorkflowServiceItemActionProperties `json:"ActionProperties,omitempty"`
	// Type of actionDefinition which decides on how to trigger the action. * `External` - External actions definition can be triggered by enduser to perform actions on the service item. Once action is completed successfully (eg. create/deploy), user cannot re-trigger that action again. * `Internal` - Internal action definition is used to trigger periodic actions on the service item instance. * `Repetitive` - Repetitive action definition is an external action that can be triggered by enduser to perform repetitive actions (eg. Edit/Update/Perform health check) on the created service item.
	ActionType            *string  `json:"ActionType,omitempty"`
	AllowedInstanceStates []string `json:"AllowedInstanceStates,omitempty"`
	// The mappings from workflows in the action definition to the service item attribute definition. Any output from core or post-core workflow can be mapped to service item attribute definition. The attribute can be referred using the name of the workflow definition and the attribute name in the following format '${<ServiceItemActionWorkflowDefinition.Name>.output.<outputName>'.
	AttributeParameters interface{}                                   `json:"AttributeParameters,omitempty"`
	CoreWorkflows       []WorkflowServiceItemActionWorkflowDefinition `json:"CoreWorkflows,omitempty"`
	// The description for this action which provides information on what are the pre-requisites to use this action on the service item and what features are supported by this action.
	Description     *string                `json:"Description,omitempty"`
	InputDefinition []WorkflowBaseDataType `json:"InputDefinition,omitempty"`
	// A user friendly short name to identify the action. Name can only contain letters (a-z, A-Z), numbers (0-9), hyphen (-), period (.), colon (:), space ( ) or an underscore (_).
	Label *string `json:"Label,omitempty" validate:"regexp=^[a-zA-Z0-9]+[\\\\sa-zA-Z0-9_.:-]{1,92}$"`
	// The name for this action definition. Name can only contain letters (a-z, A-Z), numbers (0-9), hyphen (-), period (.), colon (:) or an underscore (_). Name of the action must be unique within a service item definition.
	Name *string `json:"Name,omitempty" validate:"regexp=^[a-zA-Z0-9_.:-]{1,64}$"`
	// Value in seconds to specify the periodicity of the workflows. A zero value indicate the workflow will not execute periodically. A non-zero value indicate, the workflow will be executed periodically with this periodicity.
	Periodicity       *int64                                        `json:"Periodicity,omitempty"`
	PostCoreWorkflows []WorkflowServiceItemActionWorkflowDefinition `json:"PostCoreWorkflows,omitempty"`
	PreCoreWorkflows  []WorkflowServiceItemActionWorkflowDefinition `json:"PreCoreWorkflows,omitempty"`
	// The flag to indicate that action is restricted on a Private Virtual Appliance.
	RestrictOnPrivateAppliance *bool                                         `json:"RestrictOnPrivateAppliance,omitempty"`
	StopWorkflows              []WorkflowServiceItemActionWorkflowDefinition `json:"StopWorkflows,omitempty"`
	// The user identifier who created or updated the service item action definition.
	UserIdOrEmail         *string                                       `json:"UserIdOrEmail,omitempty"`
	ValidationInformation NullableWorkflowValidationInformation         `json:"ValidationInformation,omitempty"`
	ValidationWorkflows   []WorkflowServiceItemActionWorkflowDefinition `json:"ValidationWorkflows,omitempty"`
	// An array of relationships to iamRole resources.
	AssociatedRoles       []IamRoleRelationship                             `json:"AssociatedRoles,omitempty"`
	ServiceItemDefinition NullableWorkflowServiceItemDefinitionRelationship `json:"ServiceItemDefinition,omitempty"`
	WorkflowDefinition    NullableWorkflowWorkflowDefinitionRelationship    `json:"WorkflowDefinition,omitempty"`
	AdditionalProperties  map[string]interface{}
}

type _WorkflowServiceItemActionDefinition WorkflowServiceItemActionDefinition

// NewWorkflowServiceItemActionDefinition instantiates a new WorkflowServiceItemActionDefinition object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWorkflowServiceItemActionDefinition(classId string, objectType string) *WorkflowServiceItemActionDefinition {
	this := WorkflowServiceItemActionDefinition{}
	this.ClassId = classId
	this.ObjectType = objectType
	var actionType string = "External"
	this.ActionType = &actionType
	var restrictOnPrivateAppliance bool = false
	this.RestrictOnPrivateAppliance = &restrictOnPrivateAppliance
	return &this
}

// NewWorkflowServiceItemActionDefinitionWithDefaults instantiates a new WorkflowServiceItemActionDefinition object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWorkflowServiceItemActionDefinitionWithDefaults() *WorkflowServiceItemActionDefinition {
	this := WorkflowServiceItemActionDefinition{}
	var classId string = "workflow.ServiceItemActionDefinition"
	this.ClassId = classId
	var objectType string = "workflow.ServiceItemActionDefinition"
	this.ObjectType = objectType
	var actionType string = "External"
	this.ActionType = &actionType
	var restrictOnPrivateAppliance bool = false
	this.RestrictOnPrivateAppliance = &restrictOnPrivateAppliance
	return &this
}

// GetClassId returns the ClassId field value
func (o *WorkflowServiceItemActionDefinition) GetClassId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ClassId
}

// GetClassIdOk returns a tuple with the ClassId field value
// and a boolean to check if the value has been set.
func (o *WorkflowServiceItemActionDefinition) GetClassIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ClassId, true
}

// SetClassId sets field value
func (o *WorkflowServiceItemActionDefinition) SetClassId(v string) {
	o.ClassId = v
}

// GetDefaultClassId returns the default value "workflow.ServiceItemActionDefinition" of the ClassId field.
func (o *WorkflowServiceItemActionDefinition) GetDefaultClassId() interface{} {
	return "workflow.ServiceItemActionDefinition"
}

// GetObjectType returns the ObjectType field value
func (o *WorkflowServiceItemActionDefinition) GetObjectType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ObjectType
}

// GetObjectTypeOk returns a tuple with the ObjectType field value
// and a boolean to check if the value has been set.
func (o *WorkflowServiceItemActionDefinition) GetObjectTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ObjectType, true
}

// SetObjectType sets field value
func (o *WorkflowServiceItemActionDefinition) SetObjectType(v string) {
	o.ObjectType = v
}

// GetDefaultObjectType returns the default value "workflow.ServiceItemActionDefinition" of the ObjectType field.
func (o *WorkflowServiceItemActionDefinition) GetDefaultObjectType() interface{} {
	return "workflow.ServiceItemActionDefinition"
}

// GetActionProperties returns the ActionProperties field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *WorkflowServiceItemActionDefinition) GetActionProperties() WorkflowServiceItemActionProperties {
	if o == nil || IsNil(o.ActionProperties.Get()) {
		var ret WorkflowServiceItemActionProperties
		return ret
	}
	return *o.ActionProperties.Get()
}

// GetActionPropertiesOk returns a tuple with the ActionProperties field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *WorkflowServiceItemActionDefinition) GetActionPropertiesOk() (*WorkflowServiceItemActionProperties, bool) {
	if o == nil {
		return nil, false
	}
	return o.ActionProperties.Get(), o.ActionProperties.IsSet()
}

// HasActionProperties returns a boolean if a field has been set.
func (o *WorkflowServiceItemActionDefinition) HasActionProperties() bool {
	if o != nil && o.ActionProperties.IsSet() {
		return true
	}

	return false
}

// SetActionProperties gets a reference to the given NullableWorkflowServiceItemActionProperties and assigns it to the ActionProperties field.
func (o *WorkflowServiceItemActionDefinition) SetActionProperties(v WorkflowServiceItemActionProperties) {
	o.ActionProperties.Set(&v)
}

// SetActionPropertiesNil sets the value for ActionProperties to be an explicit nil
func (o *WorkflowServiceItemActionDefinition) SetActionPropertiesNil() {
	o.ActionProperties.Set(nil)
}

// UnsetActionProperties ensures that no value is present for ActionProperties, not even an explicit nil
func (o *WorkflowServiceItemActionDefinition) UnsetActionProperties() {
	o.ActionProperties.Unset()
}

// GetActionType returns the ActionType field value if set, zero value otherwise.
func (o *WorkflowServiceItemActionDefinition) GetActionType() string {
	if o == nil || IsNil(o.ActionType) {
		var ret string
		return ret
	}
	return *o.ActionType
}

// GetActionTypeOk returns a tuple with the ActionType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkflowServiceItemActionDefinition) GetActionTypeOk() (*string, bool) {
	if o == nil || IsNil(o.ActionType) {
		return nil, false
	}
	return o.ActionType, true
}

// HasActionType returns a boolean if a field has been set.
func (o *WorkflowServiceItemActionDefinition) HasActionType() bool {
	if o != nil && !IsNil(o.ActionType) {
		return true
	}

	return false
}

// SetActionType gets a reference to the given string and assigns it to the ActionType field.
func (o *WorkflowServiceItemActionDefinition) SetActionType(v string) {
	o.ActionType = &v
}

// GetAllowedInstanceStates returns the AllowedInstanceStates field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *WorkflowServiceItemActionDefinition) GetAllowedInstanceStates() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.AllowedInstanceStates
}

// GetAllowedInstanceStatesOk returns a tuple with the AllowedInstanceStates field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *WorkflowServiceItemActionDefinition) GetAllowedInstanceStatesOk() ([]string, bool) {
	if o == nil || IsNil(o.AllowedInstanceStates) {
		return nil, false
	}
	return o.AllowedInstanceStates, true
}

// HasAllowedInstanceStates returns a boolean if a field has been set.
func (o *WorkflowServiceItemActionDefinition) HasAllowedInstanceStates() bool {
	if o != nil && !IsNil(o.AllowedInstanceStates) {
		return true
	}

	return false
}

// SetAllowedInstanceStates gets a reference to the given []string and assigns it to the AllowedInstanceStates field.
func (o *WorkflowServiceItemActionDefinition) SetAllowedInstanceStates(v []string) {
	o.AllowedInstanceStates = v
}

// GetAttributeParameters returns the AttributeParameters field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *WorkflowServiceItemActionDefinition) GetAttributeParameters() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.AttributeParameters
}

// GetAttributeParametersOk returns a tuple with the AttributeParameters field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *WorkflowServiceItemActionDefinition) GetAttributeParametersOk() (*interface{}, bool) {
	if o == nil || IsNil(o.AttributeParameters) {
		return nil, false
	}
	return &o.AttributeParameters, true
}

// HasAttributeParameters returns a boolean if a field has been set.
func (o *WorkflowServiceItemActionDefinition) HasAttributeParameters() bool {
	if o != nil && !IsNil(o.AttributeParameters) {
		return true
	}

	return false
}

// SetAttributeParameters gets a reference to the given interface{} and assigns it to the AttributeParameters field.
func (o *WorkflowServiceItemActionDefinition) SetAttributeParameters(v interface{}) {
	o.AttributeParameters = v
}

// GetCoreWorkflows returns the CoreWorkflows field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *WorkflowServiceItemActionDefinition) GetCoreWorkflows() []WorkflowServiceItemActionWorkflowDefinition {
	if o == nil {
		var ret []WorkflowServiceItemActionWorkflowDefinition
		return ret
	}
	return o.CoreWorkflows
}

// GetCoreWorkflowsOk returns a tuple with the CoreWorkflows field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *WorkflowServiceItemActionDefinition) GetCoreWorkflowsOk() ([]WorkflowServiceItemActionWorkflowDefinition, bool) {
	if o == nil || IsNil(o.CoreWorkflows) {
		return nil, false
	}
	return o.CoreWorkflows, true
}

// HasCoreWorkflows returns a boolean if a field has been set.
func (o *WorkflowServiceItemActionDefinition) HasCoreWorkflows() bool {
	if o != nil && !IsNil(o.CoreWorkflows) {
		return true
	}

	return false
}

// SetCoreWorkflows gets a reference to the given []WorkflowServiceItemActionWorkflowDefinition and assigns it to the CoreWorkflows field.
func (o *WorkflowServiceItemActionDefinition) SetCoreWorkflows(v []WorkflowServiceItemActionWorkflowDefinition) {
	o.CoreWorkflows = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *WorkflowServiceItemActionDefinition) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkflowServiceItemActionDefinition) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *WorkflowServiceItemActionDefinition) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *WorkflowServiceItemActionDefinition) SetDescription(v string) {
	o.Description = &v
}

// GetInputDefinition returns the InputDefinition field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *WorkflowServiceItemActionDefinition) GetInputDefinition() []WorkflowBaseDataType {
	if o == nil {
		var ret []WorkflowBaseDataType
		return ret
	}
	return o.InputDefinition
}

// GetInputDefinitionOk returns a tuple with the InputDefinition field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *WorkflowServiceItemActionDefinition) GetInputDefinitionOk() ([]WorkflowBaseDataType, bool) {
	if o == nil || IsNil(o.InputDefinition) {
		return nil, false
	}
	return o.InputDefinition, true
}

// HasInputDefinition returns a boolean if a field has been set.
func (o *WorkflowServiceItemActionDefinition) HasInputDefinition() bool {
	if o != nil && !IsNil(o.InputDefinition) {
		return true
	}

	return false
}

// SetInputDefinition gets a reference to the given []WorkflowBaseDataType and assigns it to the InputDefinition field.
func (o *WorkflowServiceItemActionDefinition) SetInputDefinition(v []WorkflowBaseDataType) {
	o.InputDefinition = v
}

// GetLabel returns the Label field value if set, zero value otherwise.
func (o *WorkflowServiceItemActionDefinition) GetLabel() string {
	if o == nil || IsNil(o.Label) {
		var ret string
		return ret
	}
	return *o.Label
}

// GetLabelOk returns a tuple with the Label field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkflowServiceItemActionDefinition) GetLabelOk() (*string, bool) {
	if o == nil || IsNil(o.Label) {
		return nil, false
	}
	return o.Label, true
}

// HasLabel returns a boolean if a field has been set.
func (o *WorkflowServiceItemActionDefinition) HasLabel() bool {
	if o != nil && !IsNil(o.Label) {
		return true
	}

	return false
}

// SetLabel gets a reference to the given string and assigns it to the Label field.
func (o *WorkflowServiceItemActionDefinition) SetLabel(v string) {
	o.Label = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *WorkflowServiceItemActionDefinition) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkflowServiceItemActionDefinition) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *WorkflowServiceItemActionDefinition) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *WorkflowServiceItemActionDefinition) SetName(v string) {
	o.Name = &v
}

// GetPeriodicity returns the Periodicity field value if set, zero value otherwise.
func (o *WorkflowServiceItemActionDefinition) GetPeriodicity() int64 {
	if o == nil || IsNil(o.Periodicity) {
		var ret int64
		return ret
	}
	return *o.Periodicity
}

// GetPeriodicityOk returns a tuple with the Periodicity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkflowServiceItemActionDefinition) GetPeriodicityOk() (*int64, bool) {
	if o == nil || IsNil(o.Periodicity) {
		return nil, false
	}
	return o.Periodicity, true
}

// HasPeriodicity returns a boolean if a field has been set.
func (o *WorkflowServiceItemActionDefinition) HasPeriodicity() bool {
	if o != nil && !IsNil(o.Periodicity) {
		return true
	}

	return false
}

// SetPeriodicity gets a reference to the given int64 and assigns it to the Periodicity field.
func (o *WorkflowServiceItemActionDefinition) SetPeriodicity(v int64) {
	o.Periodicity = &v
}

// GetPostCoreWorkflows returns the PostCoreWorkflows field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *WorkflowServiceItemActionDefinition) GetPostCoreWorkflows() []WorkflowServiceItemActionWorkflowDefinition {
	if o == nil {
		var ret []WorkflowServiceItemActionWorkflowDefinition
		return ret
	}
	return o.PostCoreWorkflows
}

// GetPostCoreWorkflowsOk returns a tuple with the PostCoreWorkflows field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *WorkflowServiceItemActionDefinition) GetPostCoreWorkflowsOk() ([]WorkflowServiceItemActionWorkflowDefinition, bool) {
	if o == nil || IsNil(o.PostCoreWorkflows) {
		return nil, false
	}
	return o.PostCoreWorkflows, true
}

// HasPostCoreWorkflows returns a boolean if a field has been set.
func (o *WorkflowServiceItemActionDefinition) HasPostCoreWorkflows() bool {
	if o != nil && !IsNil(o.PostCoreWorkflows) {
		return true
	}

	return false
}

// SetPostCoreWorkflows gets a reference to the given []WorkflowServiceItemActionWorkflowDefinition and assigns it to the PostCoreWorkflows field.
func (o *WorkflowServiceItemActionDefinition) SetPostCoreWorkflows(v []WorkflowServiceItemActionWorkflowDefinition) {
	o.PostCoreWorkflows = v
}

// GetPreCoreWorkflows returns the PreCoreWorkflows field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *WorkflowServiceItemActionDefinition) GetPreCoreWorkflows() []WorkflowServiceItemActionWorkflowDefinition {
	if o == nil {
		var ret []WorkflowServiceItemActionWorkflowDefinition
		return ret
	}
	return o.PreCoreWorkflows
}

// GetPreCoreWorkflowsOk returns a tuple with the PreCoreWorkflows field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *WorkflowServiceItemActionDefinition) GetPreCoreWorkflowsOk() ([]WorkflowServiceItemActionWorkflowDefinition, bool) {
	if o == nil || IsNil(o.PreCoreWorkflows) {
		return nil, false
	}
	return o.PreCoreWorkflows, true
}

// HasPreCoreWorkflows returns a boolean if a field has been set.
func (o *WorkflowServiceItemActionDefinition) HasPreCoreWorkflows() bool {
	if o != nil && !IsNil(o.PreCoreWorkflows) {
		return true
	}

	return false
}

// SetPreCoreWorkflows gets a reference to the given []WorkflowServiceItemActionWorkflowDefinition and assigns it to the PreCoreWorkflows field.
func (o *WorkflowServiceItemActionDefinition) SetPreCoreWorkflows(v []WorkflowServiceItemActionWorkflowDefinition) {
	o.PreCoreWorkflows = v
}

// GetRestrictOnPrivateAppliance returns the RestrictOnPrivateAppliance field value if set, zero value otherwise.
func (o *WorkflowServiceItemActionDefinition) GetRestrictOnPrivateAppliance() bool {
	if o == nil || IsNil(o.RestrictOnPrivateAppliance) {
		var ret bool
		return ret
	}
	return *o.RestrictOnPrivateAppliance
}

// GetRestrictOnPrivateApplianceOk returns a tuple with the RestrictOnPrivateAppliance field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkflowServiceItemActionDefinition) GetRestrictOnPrivateApplianceOk() (*bool, bool) {
	if o == nil || IsNil(o.RestrictOnPrivateAppliance) {
		return nil, false
	}
	return o.RestrictOnPrivateAppliance, true
}

// HasRestrictOnPrivateAppliance returns a boolean if a field has been set.
func (o *WorkflowServiceItemActionDefinition) HasRestrictOnPrivateAppliance() bool {
	if o != nil && !IsNil(o.RestrictOnPrivateAppliance) {
		return true
	}

	return false
}

// SetRestrictOnPrivateAppliance gets a reference to the given bool and assigns it to the RestrictOnPrivateAppliance field.
func (o *WorkflowServiceItemActionDefinition) SetRestrictOnPrivateAppliance(v bool) {
	o.RestrictOnPrivateAppliance = &v
}

// GetStopWorkflows returns the StopWorkflows field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *WorkflowServiceItemActionDefinition) GetStopWorkflows() []WorkflowServiceItemActionWorkflowDefinition {
	if o == nil {
		var ret []WorkflowServiceItemActionWorkflowDefinition
		return ret
	}
	return o.StopWorkflows
}

// GetStopWorkflowsOk returns a tuple with the StopWorkflows field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *WorkflowServiceItemActionDefinition) GetStopWorkflowsOk() ([]WorkflowServiceItemActionWorkflowDefinition, bool) {
	if o == nil || IsNil(o.StopWorkflows) {
		return nil, false
	}
	return o.StopWorkflows, true
}

// HasStopWorkflows returns a boolean if a field has been set.
func (o *WorkflowServiceItemActionDefinition) HasStopWorkflows() bool {
	if o != nil && !IsNil(o.StopWorkflows) {
		return true
	}

	return false
}

// SetStopWorkflows gets a reference to the given []WorkflowServiceItemActionWorkflowDefinition and assigns it to the StopWorkflows field.
func (o *WorkflowServiceItemActionDefinition) SetStopWorkflows(v []WorkflowServiceItemActionWorkflowDefinition) {
	o.StopWorkflows = v
}

// GetUserIdOrEmail returns the UserIdOrEmail field value if set, zero value otherwise.
func (o *WorkflowServiceItemActionDefinition) GetUserIdOrEmail() string {
	if o == nil || IsNil(o.UserIdOrEmail) {
		var ret string
		return ret
	}
	return *o.UserIdOrEmail
}

// GetUserIdOrEmailOk returns a tuple with the UserIdOrEmail field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkflowServiceItemActionDefinition) GetUserIdOrEmailOk() (*string, bool) {
	if o == nil || IsNil(o.UserIdOrEmail) {
		return nil, false
	}
	return o.UserIdOrEmail, true
}

// HasUserIdOrEmail returns a boolean if a field has been set.
func (o *WorkflowServiceItemActionDefinition) HasUserIdOrEmail() bool {
	if o != nil && !IsNil(o.UserIdOrEmail) {
		return true
	}

	return false
}

// SetUserIdOrEmail gets a reference to the given string and assigns it to the UserIdOrEmail field.
func (o *WorkflowServiceItemActionDefinition) SetUserIdOrEmail(v string) {
	o.UserIdOrEmail = &v
}

// GetValidationInformation returns the ValidationInformation field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *WorkflowServiceItemActionDefinition) GetValidationInformation() WorkflowValidationInformation {
	if o == nil || IsNil(o.ValidationInformation.Get()) {
		var ret WorkflowValidationInformation
		return ret
	}
	return *o.ValidationInformation.Get()
}

// GetValidationInformationOk returns a tuple with the ValidationInformation field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *WorkflowServiceItemActionDefinition) GetValidationInformationOk() (*WorkflowValidationInformation, bool) {
	if o == nil {
		return nil, false
	}
	return o.ValidationInformation.Get(), o.ValidationInformation.IsSet()
}

// HasValidationInformation returns a boolean if a field has been set.
func (o *WorkflowServiceItemActionDefinition) HasValidationInformation() bool {
	if o != nil && o.ValidationInformation.IsSet() {
		return true
	}

	return false
}

// SetValidationInformation gets a reference to the given NullableWorkflowValidationInformation and assigns it to the ValidationInformation field.
func (o *WorkflowServiceItemActionDefinition) SetValidationInformation(v WorkflowValidationInformation) {
	o.ValidationInformation.Set(&v)
}

// SetValidationInformationNil sets the value for ValidationInformation to be an explicit nil
func (o *WorkflowServiceItemActionDefinition) SetValidationInformationNil() {
	o.ValidationInformation.Set(nil)
}

// UnsetValidationInformation ensures that no value is present for ValidationInformation, not even an explicit nil
func (o *WorkflowServiceItemActionDefinition) UnsetValidationInformation() {
	o.ValidationInformation.Unset()
}

// GetValidationWorkflows returns the ValidationWorkflows field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *WorkflowServiceItemActionDefinition) GetValidationWorkflows() []WorkflowServiceItemActionWorkflowDefinition {
	if o == nil {
		var ret []WorkflowServiceItemActionWorkflowDefinition
		return ret
	}
	return o.ValidationWorkflows
}

// GetValidationWorkflowsOk returns a tuple with the ValidationWorkflows field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *WorkflowServiceItemActionDefinition) GetValidationWorkflowsOk() ([]WorkflowServiceItemActionWorkflowDefinition, bool) {
	if o == nil || IsNil(o.ValidationWorkflows) {
		return nil, false
	}
	return o.ValidationWorkflows, true
}

// HasValidationWorkflows returns a boolean if a field has been set.
func (o *WorkflowServiceItemActionDefinition) HasValidationWorkflows() bool {
	if o != nil && !IsNil(o.ValidationWorkflows) {
		return true
	}

	return false
}

// SetValidationWorkflows gets a reference to the given []WorkflowServiceItemActionWorkflowDefinition and assigns it to the ValidationWorkflows field.
func (o *WorkflowServiceItemActionDefinition) SetValidationWorkflows(v []WorkflowServiceItemActionWorkflowDefinition) {
	o.ValidationWorkflows = v
}

// GetAssociatedRoles returns the AssociatedRoles field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *WorkflowServiceItemActionDefinition) GetAssociatedRoles() []IamRoleRelationship {
	if o == nil {
		var ret []IamRoleRelationship
		return ret
	}
	return o.AssociatedRoles
}

// GetAssociatedRolesOk returns a tuple with the AssociatedRoles field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *WorkflowServiceItemActionDefinition) GetAssociatedRolesOk() ([]IamRoleRelationship, bool) {
	if o == nil || IsNil(o.AssociatedRoles) {
		return nil, false
	}
	return o.AssociatedRoles, true
}

// HasAssociatedRoles returns a boolean if a field has been set.
func (o *WorkflowServiceItemActionDefinition) HasAssociatedRoles() bool {
	if o != nil && !IsNil(o.AssociatedRoles) {
		return true
	}

	return false
}

// SetAssociatedRoles gets a reference to the given []IamRoleRelationship and assigns it to the AssociatedRoles field.
func (o *WorkflowServiceItemActionDefinition) SetAssociatedRoles(v []IamRoleRelationship) {
	o.AssociatedRoles = v
}

// GetServiceItemDefinition returns the ServiceItemDefinition field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *WorkflowServiceItemActionDefinition) GetServiceItemDefinition() WorkflowServiceItemDefinitionRelationship {
	if o == nil || IsNil(o.ServiceItemDefinition.Get()) {
		var ret WorkflowServiceItemDefinitionRelationship
		return ret
	}
	return *o.ServiceItemDefinition.Get()
}

// GetServiceItemDefinitionOk returns a tuple with the ServiceItemDefinition field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *WorkflowServiceItemActionDefinition) GetServiceItemDefinitionOk() (*WorkflowServiceItemDefinitionRelationship, bool) {
	if o == nil {
		return nil, false
	}
	return o.ServiceItemDefinition.Get(), o.ServiceItemDefinition.IsSet()
}

// HasServiceItemDefinition returns a boolean if a field has been set.
func (o *WorkflowServiceItemActionDefinition) HasServiceItemDefinition() bool {
	if o != nil && o.ServiceItemDefinition.IsSet() {
		return true
	}

	return false
}

// SetServiceItemDefinition gets a reference to the given NullableWorkflowServiceItemDefinitionRelationship and assigns it to the ServiceItemDefinition field.
func (o *WorkflowServiceItemActionDefinition) SetServiceItemDefinition(v WorkflowServiceItemDefinitionRelationship) {
	o.ServiceItemDefinition.Set(&v)
}

// SetServiceItemDefinitionNil sets the value for ServiceItemDefinition to be an explicit nil
func (o *WorkflowServiceItemActionDefinition) SetServiceItemDefinitionNil() {
	o.ServiceItemDefinition.Set(nil)
}

// UnsetServiceItemDefinition ensures that no value is present for ServiceItemDefinition, not even an explicit nil
func (o *WorkflowServiceItemActionDefinition) UnsetServiceItemDefinition() {
	o.ServiceItemDefinition.Unset()
}

// GetWorkflowDefinition returns the WorkflowDefinition field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *WorkflowServiceItemActionDefinition) GetWorkflowDefinition() WorkflowWorkflowDefinitionRelationship {
	if o == nil || IsNil(o.WorkflowDefinition.Get()) {
		var ret WorkflowWorkflowDefinitionRelationship
		return ret
	}
	return *o.WorkflowDefinition.Get()
}

// GetWorkflowDefinitionOk returns a tuple with the WorkflowDefinition field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *WorkflowServiceItemActionDefinition) GetWorkflowDefinitionOk() (*WorkflowWorkflowDefinitionRelationship, bool) {
	if o == nil {
		return nil, false
	}
	return o.WorkflowDefinition.Get(), o.WorkflowDefinition.IsSet()
}

// HasWorkflowDefinition returns a boolean if a field has been set.
func (o *WorkflowServiceItemActionDefinition) HasWorkflowDefinition() bool {
	if o != nil && o.WorkflowDefinition.IsSet() {
		return true
	}

	return false
}

// SetWorkflowDefinition gets a reference to the given NullableWorkflowWorkflowDefinitionRelationship and assigns it to the WorkflowDefinition field.
func (o *WorkflowServiceItemActionDefinition) SetWorkflowDefinition(v WorkflowWorkflowDefinitionRelationship) {
	o.WorkflowDefinition.Set(&v)
}

// SetWorkflowDefinitionNil sets the value for WorkflowDefinition to be an explicit nil
func (o *WorkflowServiceItemActionDefinition) SetWorkflowDefinitionNil() {
	o.WorkflowDefinition.Set(nil)
}

// UnsetWorkflowDefinition ensures that no value is present for WorkflowDefinition, not even an explicit nil
func (o *WorkflowServiceItemActionDefinition) UnsetWorkflowDefinition() {
	o.WorkflowDefinition.Unset()
}

func (o WorkflowServiceItemActionDefinition) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o WorkflowServiceItemActionDefinition) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	serializedMoBaseMo, errMoBaseMo := json.Marshal(o.MoBaseMo)
	if errMoBaseMo != nil {
		return map[string]interface{}{}, errMoBaseMo
	}
	errMoBaseMo = json.Unmarshal([]byte(serializedMoBaseMo), &toSerialize)
	if errMoBaseMo != nil {
		return map[string]interface{}{}, errMoBaseMo
	}
	if _, exists := toSerialize["ClassId"]; !exists {
		toSerialize["ClassId"] = o.GetDefaultClassId()
	}
	toSerialize["ClassId"] = o.ClassId
	if _, exists := toSerialize["ObjectType"]; !exists {
		toSerialize["ObjectType"] = o.GetDefaultObjectType()
	}
	toSerialize["ObjectType"] = o.ObjectType
	if o.ActionProperties.IsSet() {
		toSerialize["ActionProperties"] = o.ActionProperties.Get()
	}
	if !IsNil(o.ActionType) {
		toSerialize["ActionType"] = o.ActionType
	}
	if o.AllowedInstanceStates != nil {
		toSerialize["AllowedInstanceStates"] = o.AllowedInstanceStates
	}
	if o.AttributeParameters != nil {
		toSerialize["AttributeParameters"] = o.AttributeParameters
	}
	if o.CoreWorkflows != nil {
		toSerialize["CoreWorkflows"] = o.CoreWorkflows
	}
	if !IsNil(o.Description) {
		toSerialize["Description"] = o.Description
	}
	if o.InputDefinition != nil {
		toSerialize["InputDefinition"] = o.InputDefinition
	}
	if !IsNil(o.Label) {
		toSerialize["Label"] = o.Label
	}
	if !IsNil(o.Name) {
		toSerialize["Name"] = o.Name
	}
	if !IsNil(o.Periodicity) {
		toSerialize["Periodicity"] = o.Periodicity
	}
	if o.PostCoreWorkflows != nil {
		toSerialize["PostCoreWorkflows"] = o.PostCoreWorkflows
	}
	if o.PreCoreWorkflows != nil {
		toSerialize["PreCoreWorkflows"] = o.PreCoreWorkflows
	}
	if !IsNil(o.RestrictOnPrivateAppliance) {
		toSerialize["RestrictOnPrivateAppliance"] = o.RestrictOnPrivateAppliance
	}
	if o.StopWorkflows != nil {
		toSerialize["StopWorkflows"] = o.StopWorkflows
	}
	if !IsNil(o.UserIdOrEmail) {
		toSerialize["UserIdOrEmail"] = o.UserIdOrEmail
	}
	if o.ValidationInformation.IsSet() {
		toSerialize["ValidationInformation"] = o.ValidationInformation.Get()
	}
	if o.ValidationWorkflows != nil {
		toSerialize["ValidationWorkflows"] = o.ValidationWorkflows
	}
	if o.AssociatedRoles != nil {
		toSerialize["AssociatedRoles"] = o.AssociatedRoles
	}
	if o.ServiceItemDefinition.IsSet() {
		toSerialize["ServiceItemDefinition"] = o.ServiceItemDefinition.Get()
	}
	if o.WorkflowDefinition.IsSet() {
		toSerialize["WorkflowDefinition"] = o.WorkflowDefinition.Get()
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *WorkflowServiceItemActionDefinition) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"ClassId",
		"ObjectType",
	}

	// defaultValueFuncMap captures the default values for required properties.
	// These values are used when required properties are missing from the payload.
	defaultValueFuncMap := map[string]func() interface{}{
		"ClassId":    o.GetDefaultClassId,
		"ObjectType": o.GetDefaultObjectType,
	}
	var defaultValueApplied bool
	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			if _, ok := defaultValueFuncMap[requiredProperty]; ok {
				allProperties[requiredProperty] = defaultValueFuncMap[requiredProperty]()
				defaultValueApplied = true
			}
		}
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	if defaultValueApplied {
		data, err = json.Marshal(allProperties)
		if err != nil {
			return err
		}
	}
	type WorkflowServiceItemActionDefinitionWithoutEmbeddedStruct struct {
		// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.
		ClassId string `json:"ClassId"`
		// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
		ObjectType       string                                      `json:"ObjectType"`
		ActionProperties NullableWorkflowServiceItemActionProperties `json:"ActionProperties,omitempty"`
		// Type of actionDefinition which decides on how to trigger the action. * `External` - External actions definition can be triggered by enduser to perform actions on the service item. Once action is completed successfully (eg. create/deploy), user cannot re-trigger that action again. * `Internal` - Internal action definition is used to trigger periodic actions on the service item instance. * `Repetitive` - Repetitive action definition is an external action that can be triggered by enduser to perform repetitive actions (eg. Edit/Update/Perform health check) on the created service item.
		ActionType            *string  `json:"ActionType,omitempty"`
		AllowedInstanceStates []string `json:"AllowedInstanceStates,omitempty"`
		// The mappings from workflows in the action definition to the service item attribute definition. Any output from core or post-core workflow can be mapped to service item attribute definition. The attribute can be referred using the name of the workflow definition and the attribute name in the following format '${<ServiceItemActionWorkflowDefinition.Name>.output.<outputName>'.
		AttributeParameters interface{}                                   `json:"AttributeParameters,omitempty"`
		CoreWorkflows       []WorkflowServiceItemActionWorkflowDefinition `json:"CoreWorkflows,omitempty"`
		// The description for this action which provides information on what are the pre-requisites to use this action on the service item and what features are supported by this action.
		Description     *string                `json:"Description,omitempty"`
		InputDefinition []WorkflowBaseDataType `json:"InputDefinition,omitempty"`
		// A user friendly short name to identify the action. Name can only contain letters (a-z, A-Z), numbers (0-9), hyphen (-), period (.), colon (:), space ( ) or an underscore (_).
		Label *string `json:"Label,omitempty" validate:"regexp=^[a-zA-Z0-9]+[\\\\sa-zA-Z0-9_.:-]{1,92}$"`
		// The name for this action definition. Name can only contain letters (a-z, A-Z), numbers (0-9), hyphen (-), period (.), colon (:) or an underscore (_). Name of the action must be unique within a service item definition.
		Name *string `json:"Name,omitempty" validate:"regexp=^[a-zA-Z0-9_.:-]{1,64}$"`
		// Value in seconds to specify the periodicity of the workflows. A zero value indicate the workflow will not execute periodically. A non-zero value indicate, the workflow will be executed periodically with this periodicity.
		Periodicity       *int64                                        `json:"Periodicity,omitempty"`
		PostCoreWorkflows []WorkflowServiceItemActionWorkflowDefinition `json:"PostCoreWorkflows,omitempty"`
		PreCoreWorkflows  []WorkflowServiceItemActionWorkflowDefinition `json:"PreCoreWorkflows,omitempty"`
		// The flag to indicate that action is restricted on a Private Virtual Appliance.
		RestrictOnPrivateAppliance *bool                                         `json:"RestrictOnPrivateAppliance,omitempty"`
		StopWorkflows              []WorkflowServiceItemActionWorkflowDefinition `json:"StopWorkflows,omitempty"`
		// The user identifier who created or updated the service item action definition.
		UserIdOrEmail         *string                                       `json:"UserIdOrEmail,omitempty"`
		ValidationInformation NullableWorkflowValidationInformation         `json:"ValidationInformation,omitempty"`
		ValidationWorkflows   []WorkflowServiceItemActionWorkflowDefinition `json:"ValidationWorkflows,omitempty"`
		// An array of relationships to iamRole resources.
		AssociatedRoles       []IamRoleRelationship                             `json:"AssociatedRoles,omitempty"`
		ServiceItemDefinition NullableWorkflowServiceItemDefinitionRelationship `json:"ServiceItemDefinition,omitempty"`
		WorkflowDefinition    NullableWorkflowWorkflowDefinitionRelationship    `json:"WorkflowDefinition,omitempty"`
	}

	varWorkflowServiceItemActionDefinitionWithoutEmbeddedStruct := WorkflowServiceItemActionDefinitionWithoutEmbeddedStruct{}

	err = json.Unmarshal(data, &varWorkflowServiceItemActionDefinitionWithoutEmbeddedStruct)
	if err == nil {
		varWorkflowServiceItemActionDefinition := _WorkflowServiceItemActionDefinition{}
		varWorkflowServiceItemActionDefinition.ClassId = varWorkflowServiceItemActionDefinitionWithoutEmbeddedStruct.ClassId
		varWorkflowServiceItemActionDefinition.ObjectType = varWorkflowServiceItemActionDefinitionWithoutEmbeddedStruct.ObjectType
		varWorkflowServiceItemActionDefinition.ActionProperties = varWorkflowServiceItemActionDefinitionWithoutEmbeddedStruct.ActionProperties
		varWorkflowServiceItemActionDefinition.ActionType = varWorkflowServiceItemActionDefinitionWithoutEmbeddedStruct.ActionType
		varWorkflowServiceItemActionDefinition.AllowedInstanceStates = varWorkflowServiceItemActionDefinitionWithoutEmbeddedStruct.AllowedInstanceStates
		varWorkflowServiceItemActionDefinition.AttributeParameters = varWorkflowServiceItemActionDefinitionWithoutEmbeddedStruct.AttributeParameters
		varWorkflowServiceItemActionDefinition.CoreWorkflows = varWorkflowServiceItemActionDefinitionWithoutEmbeddedStruct.CoreWorkflows
		varWorkflowServiceItemActionDefinition.Description = varWorkflowServiceItemActionDefinitionWithoutEmbeddedStruct.Description
		varWorkflowServiceItemActionDefinition.InputDefinition = varWorkflowServiceItemActionDefinitionWithoutEmbeddedStruct.InputDefinition
		varWorkflowServiceItemActionDefinition.Label = varWorkflowServiceItemActionDefinitionWithoutEmbeddedStruct.Label
		varWorkflowServiceItemActionDefinition.Name = varWorkflowServiceItemActionDefinitionWithoutEmbeddedStruct.Name
		varWorkflowServiceItemActionDefinition.Periodicity = varWorkflowServiceItemActionDefinitionWithoutEmbeddedStruct.Periodicity
		varWorkflowServiceItemActionDefinition.PostCoreWorkflows = varWorkflowServiceItemActionDefinitionWithoutEmbeddedStruct.PostCoreWorkflows
		varWorkflowServiceItemActionDefinition.PreCoreWorkflows = varWorkflowServiceItemActionDefinitionWithoutEmbeddedStruct.PreCoreWorkflows
		varWorkflowServiceItemActionDefinition.RestrictOnPrivateAppliance = varWorkflowServiceItemActionDefinitionWithoutEmbeddedStruct.RestrictOnPrivateAppliance
		varWorkflowServiceItemActionDefinition.StopWorkflows = varWorkflowServiceItemActionDefinitionWithoutEmbeddedStruct.StopWorkflows
		varWorkflowServiceItemActionDefinition.UserIdOrEmail = varWorkflowServiceItemActionDefinitionWithoutEmbeddedStruct.UserIdOrEmail
		varWorkflowServiceItemActionDefinition.ValidationInformation = varWorkflowServiceItemActionDefinitionWithoutEmbeddedStruct.ValidationInformation
		varWorkflowServiceItemActionDefinition.ValidationWorkflows = varWorkflowServiceItemActionDefinitionWithoutEmbeddedStruct.ValidationWorkflows
		varWorkflowServiceItemActionDefinition.AssociatedRoles = varWorkflowServiceItemActionDefinitionWithoutEmbeddedStruct.AssociatedRoles
		varWorkflowServiceItemActionDefinition.ServiceItemDefinition = varWorkflowServiceItemActionDefinitionWithoutEmbeddedStruct.ServiceItemDefinition
		varWorkflowServiceItemActionDefinition.WorkflowDefinition = varWorkflowServiceItemActionDefinitionWithoutEmbeddedStruct.WorkflowDefinition
		*o = WorkflowServiceItemActionDefinition(varWorkflowServiceItemActionDefinition)
	} else {
		return err
	}

	varWorkflowServiceItemActionDefinition := _WorkflowServiceItemActionDefinition{}

	err = json.Unmarshal(data, &varWorkflowServiceItemActionDefinition)
	if err == nil {
		o.MoBaseMo = varWorkflowServiceItemActionDefinition.MoBaseMo
	} else {
		return err
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "ClassId")
		delete(additionalProperties, "ObjectType")
		delete(additionalProperties, "ActionProperties")
		delete(additionalProperties, "ActionType")
		delete(additionalProperties, "AllowedInstanceStates")
		delete(additionalProperties, "AttributeParameters")
		delete(additionalProperties, "CoreWorkflows")
		delete(additionalProperties, "Description")
		delete(additionalProperties, "InputDefinition")
		delete(additionalProperties, "Label")
		delete(additionalProperties, "Name")
		delete(additionalProperties, "Periodicity")
		delete(additionalProperties, "PostCoreWorkflows")
		delete(additionalProperties, "PreCoreWorkflows")
		delete(additionalProperties, "RestrictOnPrivateAppliance")
		delete(additionalProperties, "StopWorkflows")
		delete(additionalProperties, "UserIdOrEmail")
		delete(additionalProperties, "ValidationInformation")
		delete(additionalProperties, "ValidationWorkflows")
		delete(additionalProperties, "AssociatedRoles")
		delete(additionalProperties, "ServiceItemDefinition")
		delete(additionalProperties, "WorkflowDefinition")

		// remove fields from embedded structs
		reflectMoBaseMo := reflect.ValueOf(o.MoBaseMo)
		for i := 0; i < reflectMoBaseMo.Type().NumField(); i++ {
			t := reflectMoBaseMo.Type().Field(i)

			if jsonTag := t.Tag.Get("json"); jsonTag != "" {
				fieldName := ""
				if commaIdx := strings.Index(jsonTag, ","); commaIdx > 0 {
					fieldName = jsonTag[:commaIdx]
				} else {
					fieldName = jsonTag
				}
				if fieldName != "AdditionalProperties" {
					delete(additionalProperties, fieldName)
				}
			}
		}

		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableWorkflowServiceItemActionDefinition struct {
	value *WorkflowServiceItemActionDefinition
	isSet bool
}

func (v NullableWorkflowServiceItemActionDefinition) Get() *WorkflowServiceItemActionDefinition {
	return v.value
}

func (v *NullableWorkflowServiceItemActionDefinition) Set(val *WorkflowServiceItemActionDefinition) {
	v.value = val
	v.isSet = true
}

func (v NullableWorkflowServiceItemActionDefinition) IsSet() bool {
	return v.isSet
}

func (v *NullableWorkflowServiceItemActionDefinition) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWorkflowServiceItemActionDefinition(val *WorkflowServiceItemActionDefinition) *NullableWorkflowServiceItemActionDefinition {
	return &NullableWorkflowServiceItemActionDefinition{value: val, isSet: true}
}

func (v NullableWorkflowServiceItemActionDefinition) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWorkflowServiceItemActionDefinition) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
