/*
Cisco Intersight

Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations. The Intersight OpenAPI document defines the complete set of properties that are returned in the HTTP response. From that perspective, a client can expect that no additional properties are returned, unless these properties are explicitly defined in the OpenAPI document. However, when a client uses an older version of the Intersight OpenAPI document, the server may send additional properties because the software is more recent than the client. In that case, the client may receive properties that it does not know about. Some generated SDKs perform a strict validation of the HTTP response body against the OpenAPI document.

API version: 1.0.11-2024100405
Contact: intersight@cisco.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package intersight

import (
	"encoding/json"
	"fmt"
	"reflect"
	"strings"
)

// checks if the HyperflexNodeProfile type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &HyperflexNodeProfile{}

// HyperflexNodeProfile A configuration profile per node in the HyperFlex cluster. It defines node settings such as IP address configuration for hypervisor management network, storage data network, HyperFlex management network, and the assigned physical server.
type HyperflexNodeProfile struct {
	PolicyAbstractConfigProfile
	// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.
	ClassId string `json:"ClassId"`
	// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
	ObjectType string `json:"ObjectType"`
	// IP address for storage data network (Controller VM interface).
	HxdpDataIp *string `json:"HxdpDataIp,omitempty" validate:"regexp=^$|^([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\\\.([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\\\.([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\\\.([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])$"`
	// IP address for HyperFlex management network.
	HxdpMgmtIp *string `json:"HxdpMgmtIp,omitempty" validate:"regexp=^$|^([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\\\.([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\\\.([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\\\.([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])$"`
	// IP address for storage client network (Controller VM interface).
	HxdpStorageClientIp *string `json:"HxdpStorageClientIp,omitempty" validate:"regexp=^$|^([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\\\.([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\\\.([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\\\.([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])$"`
	// IP address for hypervisor control such as VM migration or pod management.
	HypervisorControlIp *string `json:"HypervisorControlIp,omitempty" validate:"regexp=^$|^([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\\\.([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\\\.([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\\\.([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])$"`
	// IP address for storage data network (Hypervisor interface).
	HypervisorDataIp *string `json:"HypervisorDataIp,omitempty" validate:"regexp=^$|^([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\\\.([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\\\.([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\\\.([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])$"`
	// IP address for Hypervisor management network.
	HypervisorMgmtIp *string `json:"HypervisorMgmtIp,omitempty" validate:"regexp=^$|^([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\\\.([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\\\.([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\\\.([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])$"`
	// The role that this node performs in the HyperFlex cluster. * `Unknown` - The node role is not available. * `Storage` - The node persists data and contributes to the storage capacity of a cluster. * `Compute` - The node contributes to the compute capacity of a cluster.
	NodeRole             *string                                     `json:"NodeRole,omitempty"`
	AssignedServer       NullableComputePhysicalRelationship         `json:"AssignedServer,omitempty"`
	ClusterProfile       NullableHyperflexClusterProfileRelationship `json:"ClusterProfile,omitempty"`
	Node                 NullableHyperflexNodeRelationship           `json:"Node,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _HyperflexNodeProfile HyperflexNodeProfile

// NewHyperflexNodeProfile instantiates a new HyperflexNodeProfile object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHyperflexNodeProfile(classId string, objectType string) *HyperflexNodeProfile {
	this := HyperflexNodeProfile{}
	this.ClassId = classId
	this.ObjectType = objectType
	var type_ string = "instance"
	this.Type = &type_
	var action string = "No-op"
	this.Action = &action
	var nodeRole string = "Unknown"
	this.NodeRole = &nodeRole
	return &this
}

// NewHyperflexNodeProfileWithDefaults instantiates a new HyperflexNodeProfile object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHyperflexNodeProfileWithDefaults() *HyperflexNodeProfile {
	this := HyperflexNodeProfile{}
	var classId string = "hyperflex.NodeProfile"
	this.ClassId = classId
	var objectType string = "hyperflex.NodeProfile"
	this.ObjectType = objectType
	var nodeRole string = "Unknown"
	this.NodeRole = &nodeRole
	return &this
}

// GetClassId returns the ClassId field value
func (o *HyperflexNodeProfile) GetClassId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ClassId
}

// GetClassIdOk returns a tuple with the ClassId field value
// and a boolean to check if the value has been set.
func (o *HyperflexNodeProfile) GetClassIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ClassId, true
}

// SetClassId sets field value
func (o *HyperflexNodeProfile) SetClassId(v string) {
	o.ClassId = v
}

// GetDefaultClassId returns the default value "hyperflex.NodeProfile" of the ClassId field.
func (o *HyperflexNodeProfile) GetDefaultClassId() interface{} {
	return "hyperflex.NodeProfile"
}

// GetObjectType returns the ObjectType field value
func (o *HyperflexNodeProfile) GetObjectType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ObjectType
}

// GetObjectTypeOk returns a tuple with the ObjectType field value
// and a boolean to check if the value has been set.
func (o *HyperflexNodeProfile) GetObjectTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ObjectType, true
}

// SetObjectType sets field value
func (o *HyperflexNodeProfile) SetObjectType(v string) {
	o.ObjectType = v
}

// GetDefaultObjectType returns the default value "hyperflex.NodeProfile" of the ObjectType field.
func (o *HyperflexNodeProfile) GetDefaultObjectType() interface{} {
	return "hyperflex.NodeProfile"
}

// GetHxdpDataIp returns the HxdpDataIp field value if set, zero value otherwise.
func (o *HyperflexNodeProfile) GetHxdpDataIp() string {
	if o == nil || IsNil(o.HxdpDataIp) {
		var ret string
		return ret
	}
	return *o.HxdpDataIp
}

// GetHxdpDataIpOk returns a tuple with the HxdpDataIp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HyperflexNodeProfile) GetHxdpDataIpOk() (*string, bool) {
	if o == nil || IsNil(o.HxdpDataIp) {
		return nil, false
	}
	return o.HxdpDataIp, true
}

// HasHxdpDataIp returns a boolean if a field has been set.
func (o *HyperflexNodeProfile) HasHxdpDataIp() bool {
	if o != nil && !IsNil(o.HxdpDataIp) {
		return true
	}

	return false
}

// SetHxdpDataIp gets a reference to the given string and assigns it to the HxdpDataIp field.
func (o *HyperflexNodeProfile) SetHxdpDataIp(v string) {
	o.HxdpDataIp = &v
}

// GetHxdpMgmtIp returns the HxdpMgmtIp field value if set, zero value otherwise.
func (o *HyperflexNodeProfile) GetHxdpMgmtIp() string {
	if o == nil || IsNil(o.HxdpMgmtIp) {
		var ret string
		return ret
	}
	return *o.HxdpMgmtIp
}

// GetHxdpMgmtIpOk returns a tuple with the HxdpMgmtIp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HyperflexNodeProfile) GetHxdpMgmtIpOk() (*string, bool) {
	if o == nil || IsNil(o.HxdpMgmtIp) {
		return nil, false
	}
	return o.HxdpMgmtIp, true
}

// HasHxdpMgmtIp returns a boolean if a field has been set.
func (o *HyperflexNodeProfile) HasHxdpMgmtIp() bool {
	if o != nil && !IsNil(o.HxdpMgmtIp) {
		return true
	}

	return false
}

// SetHxdpMgmtIp gets a reference to the given string and assigns it to the HxdpMgmtIp field.
func (o *HyperflexNodeProfile) SetHxdpMgmtIp(v string) {
	o.HxdpMgmtIp = &v
}

// GetHxdpStorageClientIp returns the HxdpStorageClientIp field value if set, zero value otherwise.
func (o *HyperflexNodeProfile) GetHxdpStorageClientIp() string {
	if o == nil || IsNil(o.HxdpStorageClientIp) {
		var ret string
		return ret
	}
	return *o.HxdpStorageClientIp
}

// GetHxdpStorageClientIpOk returns a tuple with the HxdpStorageClientIp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HyperflexNodeProfile) GetHxdpStorageClientIpOk() (*string, bool) {
	if o == nil || IsNil(o.HxdpStorageClientIp) {
		return nil, false
	}
	return o.HxdpStorageClientIp, true
}

// HasHxdpStorageClientIp returns a boolean if a field has been set.
func (o *HyperflexNodeProfile) HasHxdpStorageClientIp() bool {
	if o != nil && !IsNil(o.HxdpStorageClientIp) {
		return true
	}

	return false
}

// SetHxdpStorageClientIp gets a reference to the given string and assigns it to the HxdpStorageClientIp field.
func (o *HyperflexNodeProfile) SetHxdpStorageClientIp(v string) {
	o.HxdpStorageClientIp = &v
}

// GetHypervisorControlIp returns the HypervisorControlIp field value if set, zero value otherwise.
func (o *HyperflexNodeProfile) GetHypervisorControlIp() string {
	if o == nil || IsNil(o.HypervisorControlIp) {
		var ret string
		return ret
	}
	return *o.HypervisorControlIp
}

// GetHypervisorControlIpOk returns a tuple with the HypervisorControlIp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HyperflexNodeProfile) GetHypervisorControlIpOk() (*string, bool) {
	if o == nil || IsNil(o.HypervisorControlIp) {
		return nil, false
	}
	return o.HypervisorControlIp, true
}

// HasHypervisorControlIp returns a boolean if a field has been set.
func (o *HyperflexNodeProfile) HasHypervisorControlIp() bool {
	if o != nil && !IsNil(o.HypervisorControlIp) {
		return true
	}

	return false
}

// SetHypervisorControlIp gets a reference to the given string and assigns it to the HypervisorControlIp field.
func (o *HyperflexNodeProfile) SetHypervisorControlIp(v string) {
	o.HypervisorControlIp = &v
}

// GetHypervisorDataIp returns the HypervisorDataIp field value if set, zero value otherwise.
func (o *HyperflexNodeProfile) GetHypervisorDataIp() string {
	if o == nil || IsNil(o.HypervisorDataIp) {
		var ret string
		return ret
	}
	return *o.HypervisorDataIp
}

// GetHypervisorDataIpOk returns a tuple with the HypervisorDataIp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HyperflexNodeProfile) GetHypervisorDataIpOk() (*string, bool) {
	if o == nil || IsNil(o.HypervisorDataIp) {
		return nil, false
	}
	return o.HypervisorDataIp, true
}

// HasHypervisorDataIp returns a boolean if a field has been set.
func (o *HyperflexNodeProfile) HasHypervisorDataIp() bool {
	if o != nil && !IsNil(o.HypervisorDataIp) {
		return true
	}

	return false
}

// SetHypervisorDataIp gets a reference to the given string and assigns it to the HypervisorDataIp field.
func (o *HyperflexNodeProfile) SetHypervisorDataIp(v string) {
	o.HypervisorDataIp = &v
}

// GetHypervisorMgmtIp returns the HypervisorMgmtIp field value if set, zero value otherwise.
func (o *HyperflexNodeProfile) GetHypervisorMgmtIp() string {
	if o == nil || IsNil(o.HypervisorMgmtIp) {
		var ret string
		return ret
	}
	return *o.HypervisorMgmtIp
}

// GetHypervisorMgmtIpOk returns a tuple with the HypervisorMgmtIp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HyperflexNodeProfile) GetHypervisorMgmtIpOk() (*string, bool) {
	if o == nil || IsNil(o.HypervisorMgmtIp) {
		return nil, false
	}
	return o.HypervisorMgmtIp, true
}

// HasHypervisorMgmtIp returns a boolean if a field has been set.
func (o *HyperflexNodeProfile) HasHypervisorMgmtIp() bool {
	if o != nil && !IsNil(o.HypervisorMgmtIp) {
		return true
	}

	return false
}

// SetHypervisorMgmtIp gets a reference to the given string and assigns it to the HypervisorMgmtIp field.
func (o *HyperflexNodeProfile) SetHypervisorMgmtIp(v string) {
	o.HypervisorMgmtIp = &v
}

// GetNodeRole returns the NodeRole field value if set, zero value otherwise.
func (o *HyperflexNodeProfile) GetNodeRole() string {
	if o == nil || IsNil(o.NodeRole) {
		var ret string
		return ret
	}
	return *o.NodeRole
}

// GetNodeRoleOk returns a tuple with the NodeRole field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HyperflexNodeProfile) GetNodeRoleOk() (*string, bool) {
	if o == nil || IsNil(o.NodeRole) {
		return nil, false
	}
	return o.NodeRole, true
}

// HasNodeRole returns a boolean if a field has been set.
func (o *HyperflexNodeProfile) HasNodeRole() bool {
	if o != nil && !IsNil(o.NodeRole) {
		return true
	}

	return false
}

// SetNodeRole gets a reference to the given string and assigns it to the NodeRole field.
func (o *HyperflexNodeProfile) SetNodeRole(v string) {
	o.NodeRole = &v
}

// GetAssignedServer returns the AssignedServer field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HyperflexNodeProfile) GetAssignedServer() ComputePhysicalRelationship {
	if o == nil || IsNil(o.AssignedServer.Get()) {
		var ret ComputePhysicalRelationship
		return ret
	}
	return *o.AssignedServer.Get()
}

// GetAssignedServerOk returns a tuple with the AssignedServer field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HyperflexNodeProfile) GetAssignedServerOk() (*ComputePhysicalRelationship, bool) {
	if o == nil {
		return nil, false
	}
	return o.AssignedServer.Get(), o.AssignedServer.IsSet()
}

// HasAssignedServer returns a boolean if a field has been set.
func (o *HyperflexNodeProfile) HasAssignedServer() bool {
	if o != nil && o.AssignedServer.IsSet() {
		return true
	}

	return false
}

// SetAssignedServer gets a reference to the given NullableComputePhysicalRelationship and assigns it to the AssignedServer field.
func (o *HyperflexNodeProfile) SetAssignedServer(v ComputePhysicalRelationship) {
	o.AssignedServer.Set(&v)
}

// SetAssignedServerNil sets the value for AssignedServer to be an explicit nil
func (o *HyperflexNodeProfile) SetAssignedServerNil() {
	o.AssignedServer.Set(nil)
}

// UnsetAssignedServer ensures that no value is present for AssignedServer, not even an explicit nil
func (o *HyperflexNodeProfile) UnsetAssignedServer() {
	o.AssignedServer.Unset()
}

// GetClusterProfile returns the ClusterProfile field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HyperflexNodeProfile) GetClusterProfile() HyperflexClusterProfileRelationship {
	if o == nil || IsNil(o.ClusterProfile.Get()) {
		var ret HyperflexClusterProfileRelationship
		return ret
	}
	return *o.ClusterProfile.Get()
}

// GetClusterProfileOk returns a tuple with the ClusterProfile field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HyperflexNodeProfile) GetClusterProfileOk() (*HyperflexClusterProfileRelationship, bool) {
	if o == nil {
		return nil, false
	}
	return o.ClusterProfile.Get(), o.ClusterProfile.IsSet()
}

// HasClusterProfile returns a boolean if a field has been set.
func (o *HyperflexNodeProfile) HasClusterProfile() bool {
	if o != nil && o.ClusterProfile.IsSet() {
		return true
	}

	return false
}

// SetClusterProfile gets a reference to the given NullableHyperflexClusterProfileRelationship and assigns it to the ClusterProfile field.
func (o *HyperflexNodeProfile) SetClusterProfile(v HyperflexClusterProfileRelationship) {
	o.ClusterProfile.Set(&v)
}

// SetClusterProfileNil sets the value for ClusterProfile to be an explicit nil
func (o *HyperflexNodeProfile) SetClusterProfileNil() {
	o.ClusterProfile.Set(nil)
}

// UnsetClusterProfile ensures that no value is present for ClusterProfile, not even an explicit nil
func (o *HyperflexNodeProfile) UnsetClusterProfile() {
	o.ClusterProfile.Unset()
}

// GetNode returns the Node field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HyperflexNodeProfile) GetNode() HyperflexNodeRelationship {
	if o == nil || IsNil(o.Node.Get()) {
		var ret HyperflexNodeRelationship
		return ret
	}
	return *o.Node.Get()
}

// GetNodeOk returns a tuple with the Node field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HyperflexNodeProfile) GetNodeOk() (*HyperflexNodeRelationship, bool) {
	if o == nil {
		return nil, false
	}
	return o.Node.Get(), o.Node.IsSet()
}

// HasNode returns a boolean if a field has been set.
func (o *HyperflexNodeProfile) HasNode() bool {
	if o != nil && o.Node.IsSet() {
		return true
	}

	return false
}

// SetNode gets a reference to the given NullableHyperflexNodeRelationship and assigns it to the Node field.
func (o *HyperflexNodeProfile) SetNode(v HyperflexNodeRelationship) {
	o.Node.Set(&v)
}

// SetNodeNil sets the value for Node to be an explicit nil
func (o *HyperflexNodeProfile) SetNodeNil() {
	o.Node.Set(nil)
}

// UnsetNode ensures that no value is present for Node, not even an explicit nil
func (o *HyperflexNodeProfile) UnsetNode() {
	o.Node.Unset()
}

func (o HyperflexNodeProfile) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o HyperflexNodeProfile) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	serializedPolicyAbstractConfigProfile, errPolicyAbstractConfigProfile := json.Marshal(o.PolicyAbstractConfigProfile)
	if errPolicyAbstractConfigProfile != nil {
		return map[string]interface{}{}, errPolicyAbstractConfigProfile
	}
	errPolicyAbstractConfigProfile = json.Unmarshal([]byte(serializedPolicyAbstractConfigProfile), &toSerialize)
	if errPolicyAbstractConfigProfile != nil {
		return map[string]interface{}{}, errPolicyAbstractConfigProfile
	}
	if _, exists := toSerialize["ClassId"]; !exists {
		toSerialize["ClassId"] = o.GetDefaultClassId()
	}
	toSerialize["ClassId"] = o.ClassId
	if _, exists := toSerialize["ObjectType"]; !exists {
		toSerialize["ObjectType"] = o.GetDefaultObjectType()
	}
	toSerialize["ObjectType"] = o.ObjectType
	if !IsNil(o.HxdpDataIp) {
		toSerialize["HxdpDataIp"] = o.HxdpDataIp
	}
	if !IsNil(o.HxdpMgmtIp) {
		toSerialize["HxdpMgmtIp"] = o.HxdpMgmtIp
	}
	if !IsNil(o.HxdpStorageClientIp) {
		toSerialize["HxdpStorageClientIp"] = o.HxdpStorageClientIp
	}
	if !IsNil(o.HypervisorControlIp) {
		toSerialize["HypervisorControlIp"] = o.HypervisorControlIp
	}
	if !IsNil(o.HypervisorDataIp) {
		toSerialize["HypervisorDataIp"] = o.HypervisorDataIp
	}
	if !IsNil(o.HypervisorMgmtIp) {
		toSerialize["HypervisorMgmtIp"] = o.HypervisorMgmtIp
	}
	if !IsNil(o.NodeRole) {
		toSerialize["NodeRole"] = o.NodeRole
	}
	if o.AssignedServer.IsSet() {
		toSerialize["AssignedServer"] = o.AssignedServer.Get()
	}
	if o.ClusterProfile.IsSet() {
		toSerialize["ClusterProfile"] = o.ClusterProfile.Get()
	}
	if o.Node.IsSet() {
		toSerialize["Node"] = o.Node.Get()
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *HyperflexNodeProfile) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"ClassId",
		"ObjectType",
	}

	// defaultValueFuncMap captures the default values for required properties.
	// These values are used when required properties are missing from the payload.
	defaultValueFuncMap := map[string]func() interface{}{
		"ClassId":    o.GetDefaultClassId,
		"ObjectType": o.GetDefaultObjectType,
	}
	var defaultValueApplied bool
	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			if _, ok := defaultValueFuncMap[requiredProperty]; ok {
				allProperties[requiredProperty] = defaultValueFuncMap[requiredProperty]()
				defaultValueApplied = true
			}
		}
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	if defaultValueApplied {
		data, err = json.Marshal(allProperties)
		if err != nil {
			return err
		}
	}
	type HyperflexNodeProfileWithoutEmbeddedStruct struct {
		// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.
		ClassId string `json:"ClassId"`
		// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
		ObjectType string `json:"ObjectType"`
		// IP address for storage data network (Controller VM interface).
		HxdpDataIp *string `json:"HxdpDataIp,omitempty" validate:"regexp=^$|^([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\\\.([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\\\.([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\\\.([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])$"`
		// IP address for HyperFlex management network.
		HxdpMgmtIp *string `json:"HxdpMgmtIp,omitempty" validate:"regexp=^$|^([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\\\.([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\\\.([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\\\.([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])$"`
		// IP address for storage client network (Controller VM interface).
		HxdpStorageClientIp *string `json:"HxdpStorageClientIp,omitempty" validate:"regexp=^$|^([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\\\.([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\\\.([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\\\.([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])$"`
		// IP address for hypervisor control such as VM migration or pod management.
		HypervisorControlIp *string `json:"HypervisorControlIp,omitempty" validate:"regexp=^$|^([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\\\.([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\\\.([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\\\.([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])$"`
		// IP address for storage data network (Hypervisor interface).
		HypervisorDataIp *string `json:"HypervisorDataIp,omitempty" validate:"regexp=^$|^([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\\\.([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\\\.([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\\\.([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])$"`
		// IP address for Hypervisor management network.
		HypervisorMgmtIp *string `json:"HypervisorMgmtIp,omitempty" validate:"regexp=^$|^([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\\\.([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\\\.([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\\\.([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])$"`
		// The role that this node performs in the HyperFlex cluster. * `Unknown` - The node role is not available. * `Storage` - The node persists data and contributes to the storage capacity of a cluster. * `Compute` - The node contributes to the compute capacity of a cluster.
		NodeRole       *string                                     `json:"NodeRole,omitempty"`
		AssignedServer NullableComputePhysicalRelationship         `json:"AssignedServer,omitempty"`
		ClusterProfile NullableHyperflexClusterProfileRelationship `json:"ClusterProfile,omitempty"`
		Node           NullableHyperflexNodeRelationship           `json:"Node,omitempty"`
	}

	varHyperflexNodeProfileWithoutEmbeddedStruct := HyperflexNodeProfileWithoutEmbeddedStruct{}

	err = json.Unmarshal(data, &varHyperflexNodeProfileWithoutEmbeddedStruct)
	if err == nil {
		varHyperflexNodeProfile := _HyperflexNodeProfile{}
		varHyperflexNodeProfile.ClassId = varHyperflexNodeProfileWithoutEmbeddedStruct.ClassId
		varHyperflexNodeProfile.ObjectType = varHyperflexNodeProfileWithoutEmbeddedStruct.ObjectType
		varHyperflexNodeProfile.HxdpDataIp = varHyperflexNodeProfileWithoutEmbeddedStruct.HxdpDataIp
		varHyperflexNodeProfile.HxdpMgmtIp = varHyperflexNodeProfileWithoutEmbeddedStruct.HxdpMgmtIp
		varHyperflexNodeProfile.HxdpStorageClientIp = varHyperflexNodeProfileWithoutEmbeddedStruct.HxdpStorageClientIp
		varHyperflexNodeProfile.HypervisorControlIp = varHyperflexNodeProfileWithoutEmbeddedStruct.HypervisorControlIp
		varHyperflexNodeProfile.HypervisorDataIp = varHyperflexNodeProfileWithoutEmbeddedStruct.HypervisorDataIp
		varHyperflexNodeProfile.HypervisorMgmtIp = varHyperflexNodeProfileWithoutEmbeddedStruct.HypervisorMgmtIp
		varHyperflexNodeProfile.NodeRole = varHyperflexNodeProfileWithoutEmbeddedStruct.NodeRole
		varHyperflexNodeProfile.AssignedServer = varHyperflexNodeProfileWithoutEmbeddedStruct.AssignedServer
		varHyperflexNodeProfile.ClusterProfile = varHyperflexNodeProfileWithoutEmbeddedStruct.ClusterProfile
		varHyperflexNodeProfile.Node = varHyperflexNodeProfileWithoutEmbeddedStruct.Node
		*o = HyperflexNodeProfile(varHyperflexNodeProfile)
	} else {
		return err
	}

	varHyperflexNodeProfile := _HyperflexNodeProfile{}

	err = json.Unmarshal(data, &varHyperflexNodeProfile)
	if err == nil {
		o.PolicyAbstractConfigProfile = varHyperflexNodeProfile.PolicyAbstractConfigProfile
	} else {
		return err
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "ClassId")
		delete(additionalProperties, "ObjectType")
		delete(additionalProperties, "HxdpDataIp")
		delete(additionalProperties, "HxdpMgmtIp")
		delete(additionalProperties, "HxdpStorageClientIp")
		delete(additionalProperties, "HypervisorControlIp")
		delete(additionalProperties, "HypervisorDataIp")
		delete(additionalProperties, "HypervisorMgmtIp")
		delete(additionalProperties, "NodeRole")
		delete(additionalProperties, "AssignedServer")
		delete(additionalProperties, "ClusterProfile")
		delete(additionalProperties, "Node")

		// remove fields from embedded structs
		reflectPolicyAbstractConfigProfile := reflect.ValueOf(o.PolicyAbstractConfigProfile)
		for i := 0; i < reflectPolicyAbstractConfigProfile.Type().NumField(); i++ {
			t := reflectPolicyAbstractConfigProfile.Type().Field(i)

			if jsonTag := t.Tag.Get("json"); jsonTag != "" {
				fieldName := ""
				if commaIdx := strings.Index(jsonTag, ","); commaIdx > 0 {
					fieldName = jsonTag[:commaIdx]
				} else {
					fieldName = jsonTag
				}
				if fieldName != "AdditionalProperties" {
					delete(additionalProperties, fieldName)
				}
			}
		}

		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableHyperflexNodeProfile struct {
	value *HyperflexNodeProfile
	isSet bool
}

func (v NullableHyperflexNodeProfile) Get() *HyperflexNodeProfile {
	return v.value
}

func (v *NullableHyperflexNodeProfile) Set(val *HyperflexNodeProfile) {
	v.value = val
	v.isSet = true
}

func (v NullableHyperflexNodeProfile) IsSet() bool {
	return v.isSet
}

func (v *NullableHyperflexNodeProfile) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHyperflexNodeProfile(val *HyperflexNodeProfile) *NullableHyperflexNodeProfile {
	return &NullableHyperflexNodeProfile{value: val, isSet: true}
}

func (v NullableHyperflexNodeProfile) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHyperflexNodeProfile) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
