/*
Cisco Intersight

Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations. The Intersight OpenAPI document defines the complete set of properties that are returned in the HTTP response. From that perspective, a client can expect that no additional properties are returned, unless these properties are explicitly defined in the OpenAPI document. However, when a client uses an older version of the Intersight OpenAPI document, the server may send additional properties because the software is more recent than the client. In that case, the client may receive properties that it does not know about. Some generated SDKs perform a strict validation of the HTTP response body against the OpenAPI document.

API version: 1.0.11-2025101412
Contact: intersight@cisco.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package intersight

import (
	"encoding/json"
	"fmt"
	"reflect"
	"strings"
)

// checks if the PciZone type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PciZone{}

// PciZone PCIe endpoints that are zoned (logically connected together) through a PCIe switch.
type PciZone struct {
	InventoryBase
	// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.
	ClassId string `json:"ClassId"`
	// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
	ObjectType string `json:"ObjectType"`
	// The name of the PCIe endpoint zone, as reported by the platform software (BMC).
	Name       *string  `json:"Name,omitempty"`
	OperReason []string `json:"OperReason,omitempty"`
	// Operational state of the pcie node.
	OperState *string `json:"OperState,omitempty"`
	// The identifier of the PCIe endpoint zone as reported by the chassis expander module management controller.
	Uri *string `json:"Uri,omitempty"`
	// The identifier of the PCIe endpoint zone where all PCIe devices are logically connected.
	ZoneId                  *string                                     `json:"ZoneId,omitempty"`
	EquipmentExpanderModule NullableEquipmentExpanderModuleRelationship `json:"EquipmentExpanderModule,omitempty"`
	InventoryDeviceInfo     NullableInventoryDeviceInfoRelationship     `json:"InventoryDeviceInfo,omitempty"`
	// An array of relationships to pciEndpoint resources.
	PciEndpoints         []PciEndpointRelationship                   `json:"PciEndpoints,omitempty"`
	RegisteredDevice     NullableAssetDeviceRegistrationRelationship `json:"RegisteredDevice,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _PciZone PciZone

// NewPciZone instantiates a new PciZone object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPciZone(classId string, objectType string) *PciZone {
	this := PciZone{}
	this.ClassId = classId
	this.ObjectType = objectType
	return &this
}

// NewPciZoneWithDefaults instantiates a new PciZone object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPciZoneWithDefaults() *PciZone {
	this := PciZone{}
	var classId string = "pci.Zone"
	this.ClassId = classId
	var objectType string = "pci.Zone"
	this.ObjectType = objectType
	return &this
}

// GetClassId returns the ClassId field value
func (o *PciZone) GetClassId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ClassId
}

// GetClassIdOk returns a tuple with the ClassId field value
// and a boolean to check if the value has been set.
func (o *PciZone) GetClassIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ClassId, true
}

// SetClassId sets field value
func (o *PciZone) SetClassId(v string) {
	o.ClassId = v
}

// GetDefaultClassId returns the default value "pci.Zone" of the ClassId field.
func (o *PciZone) GetDefaultClassId() interface{} {
	return "pci.Zone"
}

// GetObjectType returns the ObjectType field value
func (o *PciZone) GetObjectType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ObjectType
}

// GetObjectTypeOk returns a tuple with the ObjectType field value
// and a boolean to check if the value has been set.
func (o *PciZone) GetObjectTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ObjectType, true
}

// SetObjectType sets field value
func (o *PciZone) SetObjectType(v string) {
	o.ObjectType = v
}

// GetDefaultObjectType returns the default value "pci.Zone" of the ObjectType field.
func (o *PciZone) GetDefaultObjectType() interface{} {
	return "pci.Zone"
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *PciZone) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PciZone) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *PciZone) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *PciZone) SetName(v string) {
	o.Name = &v
}

// GetOperReason returns the OperReason field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PciZone) GetOperReason() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.OperReason
}

// GetOperReasonOk returns a tuple with the OperReason field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PciZone) GetOperReasonOk() ([]string, bool) {
	if o == nil || IsNil(o.OperReason) {
		return nil, false
	}
	return o.OperReason, true
}

// HasOperReason returns a boolean if a field has been set.
func (o *PciZone) HasOperReason() bool {
	if o != nil && !IsNil(o.OperReason) {
		return true
	}

	return false
}

// SetOperReason gets a reference to the given []string and assigns it to the OperReason field.
func (o *PciZone) SetOperReason(v []string) {
	o.OperReason = v
}

// GetOperState returns the OperState field value if set, zero value otherwise.
func (o *PciZone) GetOperState() string {
	if o == nil || IsNil(o.OperState) {
		var ret string
		return ret
	}
	return *o.OperState
}

// GetOperStateOk returns a tuple with the OperState field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PciZone) GetOperStateOk() (*string, bool) {
	if o == nil || IsNil(o.OperState) {
		return nil, false
	}
	return o.OperState, true
}

// HasOperState returns a boolean if a field has been set.
func (o *PciZone) HasOperState() bool {
	if o != nil && !IsNil(o.OperState) {
		return true
	}

	return false
}

// SetOperState gets a reference to the given string and assigns it to the OperState field.
func (o *PciZone) SetOperState(v string) {
	o.OperState = &v
}

// GetUri returns the Uri field value if set, zero value otherwise.
func (o *PciZone) GetUri() string {
	if o == nil || IsNil(o.Uri) {
		var ret string
		return ret
	}
	return *o.Uri
}

// GetUriOk returns a tuple with the Uri field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PciZone) GetUriOk() (*string, bool) {
	if o == nil || IsNil(o.Uri) {
		return nil, false
	}
	return o.Uri, true
}

// HasUri returns a boolean if a field has been set.
func (o *PciZone) HasUri() bool {
	if o != nil && !IsNil(o.Uri) {
		return true
	}

	return false
}

// SetUri gets a reference to the given string and assigns it to the Uri field.
func (o *PciZone) SetUri(v string) {
	o.Uri = &v
}

// GetZoneId returns the ZoneId field value if set, zero value otherwise.
func (o *PciZone) GetZoneId() string {
	if o == nil || IsNil(o.ZoneId) {
		var ret string
		return ret
	}
	return *o.ZoneId
}

// GetZoneIdOk returns a tuple with the ZoneId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PciZone) GetZoneIdOk() (*string, bool) {
	if o == nil || IsNil(o.ZoneId) {
		return nil, false
	}
	return o.ZoneId, true
}

// HasZoneId returns a boolean if a field has been set.
func (o *PciZone) HasZoneId() bool {
	if o != nil && !IsNil(o.ZoneId) {
		return true
	}

	return false
}

// SetZoneId gets a reference to the given string and assigns it to the ZoneId field.
func (o *PciZone) SetZoneId(v string) {
	o.ZoneId = &v
}

// GetEquipmentExpanderModule returns the EquipmentExpanderModule field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PciZone) GetEquipmentExpanderModule() EquipmentExpanderModuleRelationship {
	if o == nil || IsNil(o.EquipmentExpanderModule.Get()) {
		var ret EquipmentExpanderModuleRelationship
		return ret
	}
	return *o.EquipmentExpanderModule.Get()
}

// GetEquipmentExpanderModuleOk returns a tuple with the EquipmentExpanderModule field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PciZone) GetEquipmentExpanderModuleOk() (*EquipmentExpanderModuleRelationship, bool) {
	if o == nil {
		return nil, false
	}
	return o.EquipmentExpanderModule.Get(), o.EquipmentExpanderModule.IsSet()
}

// HasEquipmentExpanderModule returns a boolean if a field has been set.
func (o *PciZone) HasEquipmentExpanderModule() bool {
	if o != nil && o.EquipmentExpanderModule.IsSet() {
		return true
	}

	return false
}

// SetEquipmentExpanderModule gets a reference to the given NullableEquipmentExpanderModuleRelationship and assigns it to the EquipmentExpanderModule field.
func (o *PciZone) SetEquipmentExpanderModule(v EquipmentExpanderModuleRelationship) {
	o.EquipmentExpanderModule.Set(&v)
}

// SetEquipmentExpanderModuleNil sets the value for EquipmentExpanderModule to be an explicit nil
func (o *PciZone) SetEquipmentExpanderModuleNil() {
	o.EquipmentExpanderModule.Set(nil)
}

// UnsetEquipmentExpanderModule ensures that no value is present for EquipmentExpanderModule, not even an explicit nil
func (o *PciZone) UnsetEquipmentExpanderModule() {
	o.EquipmentExpanderModule.Unset()
}

// GetInventoryDeviceInfo returns the InventoryDeviceInfo field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PciZone) GetInventoryDeviceInfo() InventoryDeviceInfoRelationship {
	if o == nil || IsNil(o.InventoryDeviceInfo.Get()) {
		var ret InventoryDeviceInfoRelationship
		return ret
	}
	return *o.InventoryDeviceInfo.Get()
}

// GetInventoryDeviceInfoOk returns a tuple with the InventoryDeviceInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PciZone) GetInventoryDeviceInfoOk() (*InventoryDeviceInfoRelationship, bool) {
	if o == nil {
		return nil, false
	}
	return o.InventoryDeviceInfo.Get(), o.InventoryDeviceInfo.IsSet()
}

// HasInventoryDeviceInfo returns a boolean if a field has been set.
func (o *PciZone) HasInventoryDeviceInfo() bool {
	if o != nil && o.InventoryDeviceInfo.IsSet() {
		return true
	}

	return false
}

// SetInventoryDeviceInfo gets a reference to the given NullableInventoryDeviceInfoRelationship and assigns it to the InventoryDeviceInfo field.
func (o *PciZone) SetInventoryDeviceInfo(v InventoryDeviceInfoRelationship) {
	o.InventoryDeviceInfo.Set(&v)
}

// SetInventoryDeviceInfoNil sets the value for InventoryDeviceInfo to be an explicit nil
func (o *PciZone) SetInventoryDeviceInfoNil() {
	o.InventoryDeviceInfo.Set(nil)
}

// UnsetInventoryDeviceInfo ensures that no value is present for InventoryDeviceInfo, not even an explicit nil
func (o *PciZone) UnsetInventoryDeviceInfo() {
	o.InventoryDeviceInfo.Unset()
}

// GetPciEndpoints returns the PciEndpoints field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PciZone) GetPciEndpoints() []PciEndpointRelationship {
	if o == nil {
		var ret []PciEndpointRelationship
		return ret
	}
	return o.PciEndpoints
}

// GetPciEndpointsOk returns a tuple with the PciEndpoints field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PciZone) GetPciEndpointsOk() ([]PciEndpointRelationship, bool) {
	if o == nil || IsNil(o.PciEndpoints) {
		return nil, false
	}
	return o.PciEndpoints, true
}

// HasPciEndpoints returns a boolean if a field has been set.
func (o *PciZone) HasPciEndpoints() bool {
	if o != nil && !IsNil(o.PciEndpoints) {
		return true
	}

	return false
}

// SetPciEndpoints gets a reference to the given []PciEndpointRelationship and assigns it to the PciEndpoints field.
func (o *PciZone) SetPciEndpoints(v []PciEndpointRelationship) {
	o.PciEndpoints = v
}

// GetRegisteredDevice returns the RegisteredDevice field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PciZone) GetRegisteredDevice() AssetDeviceRegistrationRelationship {
	if o == nil || IsNil(o.RegisteredDevice.Get()) {
		var ret AssetDeviceRegistrationRelationship
		return ret
	}
	return *o.RegisteredDevice.Get()
}

// GetRegisteredDeviceOk returns a tuple with the RegisteredDevice field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PciZone) GetRegisteredDeviceOk() (*AssetDeviceRegistrationRelationship, bool) {
	if o == nil {
		return nil, false
	}
	return o.RegisteredDevice.Get(), o.RegisteredDevice.IsSet()
}

// HasRegisteredDevice returns a boolean if a field has been set.
func (o *PciZone) HasRegisteredDevice() bool {
	if o != nil && o.RegisteredDevice.IsSet() {
		return true
	}

	return false
}

// SetRegisteredDevice gets a reference to the given NullableAssetDeviceRegistrationRelationship and assigns it to the RegisteredDevice field.
func (o *PciZone) SetRegisteredDevice(v AssetDeviceRegistrationRelationship) {
	o.RegisteredDevice.Set(&v)
}

// SetRegisteredDeviceNil sets the value for RegisteredDevice to be an explicit nil
func (o *PciZone) SetRegisteredDeviceNil() {
	o.RegisteredDevice.Set(nil)
}

// UnsetRegisteredDevice ensures that no value is present for RegisteredDevice, not even an explicit nil
func (o *PciZone) UnsetRegisteredDevice() {
	o.RegisteredDevice.Unset()
}

func (o PciZone) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PciZone) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	serializedInventoryBase, errInventoryBase := json.Marshal(o.InventoryBase)
	if errInventoryBase != nil {
		return map[string]interface{}{}, errInventoryBase
	}
	errInventoryBase = json.Unmarshal([]byte(serializedInventoryBase), &toSerialize)
	if errInventoryBase != nil {
		return map[string]interface{}{}, errInventoryBase
	}
	if _, exists := toSerialize["ClassId"]; !exists {
		toSerialize["ClassId"] = o.GetDefaultClassId()
	}
	toSerialize["ClassId"] = o.ClassId
	if _, exists := toSerialize["ObjectType"]; !exists {
		toSerialize["ObjectType"] = o.GetDefaultObjectType()
	}
	toSerialize["ObjectType"] = o.ObjectType
	if !IsNil(o.Name) {
		toSerialize["Name"] = o.Name
	}
	if o.OperReason != nil {
		toSerialize["OperReason"] = o.OperReason
	}
	if !IsNil(o.OperState) {
		toSerialize["OperState"] = o.OperState
	}
	if !IsNil(o.Uri) {
		toSerialize["Uri"] = o.Uri
	}
	if !IsNil(o.ZoneId) {
		toSerialize["ZoneId"] = o.ZoneId
	}
	if o.EquipmentExpanderModule.IsSet() {
		toSerialize["EquipmentExpanderModule"] = o.EquipmentExpanderModule.Get()
	}
	if o.InventoryDeviceInfo.IsSet() {
		toSerialize["InventoryDeviceInfo"] = o.InventoryDeviceInfo.Get()
	}
	if o.PciEndpoints != nil {
		toSerialize["PciEndpoints"] = o.PciEndpoints
	}
	if o.RegisteredDevice.IsSet() {
		toSerialize["RegisteredDevice"] = o.RegisteredDevice.Get()
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *PciZone) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"ClassId",
		"ObjectType",
	}

	// defaultValueFuncMap captures the default values for required properties.
	// These values are used when required properties are missing from the payload.
	defaultValueFuncMap := map[string]func() interface{}{
		"ClassId":    o.GetDefaultClassId,
		"ObjectType": o.GetDefaultObjectType,
	}
	var defaultValueApplied bool
	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			if _, ok := defaultValueFuncMap[requiredProperty]; ok {
				allProperties[requiredProperty] = defaultValueFuncMap[requiredProperty]()
				defaultValueApplied = true
			}
		}
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	if defaultValueApplied {
		data, err = json.Marshal(allProperties)
		if err != nil {
			return err
		}
	}
	type PciZoneWithoutEmbeddedStruct struct {
		// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.
		ClassId string `json:"ClassId"`
		// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
		ObjectType string `json:"ObjectType"`
		// The name of the PCIe endpoint zone, as reported by the platform software (BMC).
		Name       *string  `json:"Name,omitempty"`
		OperReason []string `json:"OperReason,omitempty"`
		// Operational state of the pcie node.
		OperState *string `json:"OperState,omitempty"`
		// The identifier of the PCIe endpoint zone as reported by the chassis expander module management controller.
		Uri *string `json:"Uri,omitempty"`
		// The identifier of the PCIe endpoint zone where all PCIe devices are logically connected.
		ZoneId                  *string                                     `json:"ZoneId,omitempty"`
		EquipmentExpanderModule NullableEquipmentExpanderModuleRelationship `json:"EquipmentExpanderModule,omitempty"`
		InventoryDeviceInfo     NullableInventoryDeviceInfoRelationship     `json:"InventoryDeviceInfo,omitempty"`
		// An array of relationships to pciEndpoint resources.
		PciEndpoints     []PciEndpointRelationship                   `json:"PciEndpoints,omitempty"`
		RegisteredDevice NullableAssetDeviceRegistrationRelationship `json:"RegisteredDevice,omitempty"`
	}

	varPciZoneWithoutEmbeddedStruct := PciZoneWithoutEmbeddedStruct{}

	err = json.Unmarshal(data, &varPciZoneWithoutEmbeddedStruct)
	if err == nil {
		varPciZone := _PciZone{}
		varPciZone.ClassId = varPciZoneWithoutEmbeddedStruct.ClassId
		varPciZone.ObjectType = varPciZoneWithoutEmbeddedStruct.ObjectType
		varPciZone.Name = varPciZoneWithoutEmbeddedStruct.Name
		varPciZone.OperReason = varPciZoneWithoutEmbeddedStruct.OperReason
		varPciZone.OperState = varPciZoneWithoutEmbeddedStruct.OperState
		varPciZone.Uri = varPciZoneWithoutEmbeddedStruct.Uri
		varPciZone.ZoneId = varPciZoneWithoutEmbeddedStruct.ZoneId
		varPciZone.EquipmentExpanderModule = varPciZoneWithoutEmbeddedStruct.EquipmentExpanderModule
		varPciZone.InventoryDeviceInfo = varPciZoneWithoutEmbeddedStruct.InventoryDeviceInfo
		varPciZone.PciEndpoints = varPciZoneWithoutEmbeddedStruct.PciEndpoints
		varPciZone.RegisteredDevice = varPciZoneWithoutEmbeddedStruct.RegisteredDevice
		*o = PciZone(varPciZone)
	} else {
		return err
	}

	varPciZone := _PciZone{}

	err = json.Unmarshal(data, &varPciZone)
	if err == nil {
		o.InventoryBase = varPciZone.InventoryBase
	} else {
		return err
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "ClassId")
		delete(additionalProperties, "ObjectType")
		delete(additionalProperties, "Name")
		delete(additionalProperties, "OperReason")
		delete(additionalProperties, "OperState")
		delete(additionalProperties, "Uri")
		delete(additionalProperties, "ZoneId")
		delete(additionalProperties, "EquipmentExpanderModule")
		delete(additionalProperties, "InventoryDeviceInfo")
		delete(additionalProperties, "PciEndpoints")
		delete(additionalProperties, "RegisteredDevice")

		// remove fields from embedded structs
		reflectInventoryBase := reflect.ValueOf(o.InventoryBase)
		for i := 0; i < reflectInventoryBase.Type().NumField(); i++ {
			t := reflectInventoryBase.Type().Field(i)

			if jsonTag := t.Tag.Get("json"); jsonTag != "" {
				fieldName := ""
				if commaIdx := strings.Index(jsonTag, ","); commaIdx > 0 {
					fieldName = jsonTag[:commaIdx]
				} else {
					fieldName = jsonTag
				}
				if fieldName != "AdditionalProperties" {
					delete(additionalProperties, fieldName)
				}
			}
		}

		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullablePciZone struct {
	value *PciZone
	isSet bool
}

func (v NullablePciZone) Get() *PciZone {
	return v.value
}

func (v *NullablePciZone) Set(val *PciZone) {
	v.value = val
	v.isSet = true
}

func (v NullablePciZone) IsSet() bool {
	return v.isSet
}

func (v *NullablePciZone) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePciZone(val *PciZone) *NullablePciZone {
	return &NullablePciZone{value: val, isSet: true}
}

func (v NullablePciZone) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePciZone) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
