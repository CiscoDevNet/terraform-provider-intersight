/*
Cisco Intersight

Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations. The Intersight OpenAPI document defines the complete set of properties that are returned in the HTTP response. From that perspective, a client can expect that no additional properties are returned, unless these properties are explicitly defined in the OpenAPI document. However, when a client uses an older version of the Intersight OpenAPI document, the server may send additional properties because the software is more recent than the client. In that case, the client may receive properties that it does not know about. Some generated SDKs perform a strict validation of the HTTP response body against the OpenAPI document.

API version: 1.0.11-2024100405
Contact: intersight@cisco.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package intersight

import (
	"encoding/json"
	"fmt"
	"reflect"
	"strings"
)

// checks if the StorageNetAppLun type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &StorageNetAppLun{}

// StorageNetAppLun NetApp LUN (logical unit number) is an identifier for a device called a logical unit addressed by a SAN protocol.
type StorageNetAppLun struct {
	StorageBaseVolume
	// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.
	ClassId string `json:"ClassId"`
	// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
	ObjectType            string                                  `json:"ObjectType"`
	AvgPerformanceMetrics *StorageNetAppPerformanceMetricsAverage `json:"AvgPerformanceMetrics,omitempty"`
	// The state of the volume and aggregate that contain the LUN. LUNs are only available when their containers are available.
	ContainerState *string `json:"ContainerState,omitempty"`
	// Reports if the LUN is mapped to one or more initiator groups.
	IsMapped *string `json:"IsMapped,omitempty"`
	// Unique identifier of LUN across data center.
	Key *string `json:"Key,omitempty"`
	// Reports if the LUN is mapped to one or more initiator groups.
	// Deprecated
	Mapped *bool `json:"Mapped,omitempty"`
	// The operating system (OS) type for this LUN. * `Linux` - Family of open source Unix-like operating systems based on the Linux kernel. * `AIX` - Advanced Interactive Executive (AIX). * `HP-UX` - HP-UX is implementation of the Unix operating system, based on Unix System V. * `Hyper-V` - Windows Server 2008 or Windows Server 2012 Hyper-V. * `OpenVMS` - OpenVMS is multi-user, multiprocessing virtual memory-based operating system. * `Solaris` - Solaris is a Unix operating system. * `NetWare` - NetWare is a computer network operating system. * `VMware` - An enterprise-class, type-1 hypervisor developed by VMware for deploying and serving virtual computers. * `Windows` - Single-partition Windows disk using the Master Boot Record (MBR) partitioning style. * `Xen` - Xen is a type-1 hypervisor, providing services that allow multiple computer operating systems to execute on the same computer hardware concurrently.
	OsType *string `json:"OsType,omitempty"`
	// Path where the LUN is mounted.
	Path *string `json:"Path,omitempty"`
	// Serial number for the provisioned LUN.
	Serial *string `json:"Serial,omitempty"`
	// The administrative state of a LUN. * `offline` - The LUN is administratively offline, or a more detailed offline reason is not available. * `online` - The state of the LUN is online.
	State *string `json:"State,omitempty"`
	// The storage virtual machine name for the lun.
	SvmName *string `json:"SvmName,omitempty"`
	// Universally unique identifier of the LUN.
	Uuid *string `json:"Uuid,omitempty" validate:"regexp=^$|^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"`
	// The parent volume name for the lun.
	VolumeName *string                                  `json:"VolumeName,omitempty"`
	Array      NullableStorageNetAppClusterRelationship `json:"Array,omitempty"`
	// An array of relationships to storageNetAppLunEvent resources.
	Events []StorageNetAppLunEventRelationship `json:"Events,omitempty"`
	// An array of relationships to storageNetAppInitiatorGroup resources.
	Host                 []StorageNetAppInitiatorGroupRelationship `json:"Host,omitempty"`
	StorageContainer     NullableStorageNetAppVolumeRelationship   `json:"StorageContainer,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _StorageNetAppLun StorageNetAppLun

// NewStorageNetAppLun instantiates a new StorageNetAppLun object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStorageNetAppLun(classId string, objectType string) *StorageNetAppLun {
	this := StorageNetAppLun{}
	this.ClassId = classId
	this.ObjectType = objectType
	return &this
}

// NewStorageNetAppLunWithDefaults instantiates a new StorageNetAppLun object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStorageNetAppLunWithDefaults() *StorageNetAppLun {
	this := StorageNetAppLun{}
	var classId string = "storage.NetAppLun"
	this.ClassId = classId
	var objectType string = "storage.NetAppLun"
	this.ObjectType = objectType
	return &this
}

// GetClassId returns the ClassId field value
func (o *StorageNetAppLun) GetClassId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ClassId
}

// GetClassIdOk returns a tuple with the ClassId field value
// and a boolean to check if the value has been set.
func (o *StorageNetAppLun) GetClassIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ClassId, true
}

// SetClassId sets field value
func (o *StorageNetAppLun) SetClassId(v string) {
	o.ClassId = v
}

// GetDefaultClassId returns the default value "storage.NetAppLun" of the ClassId field.
func (o *StorageNetAppLun) GetDefaultClassId() interface{} {
	return "storage.NetAppLun"
}

// GetObjectType returns the ObjectType field value
func (o *StorageNetAppLun) GetObjectType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ObjectType
}

// GetObjectTypeOk returns a tuple with the ObjectType field value
// and a boolean to check if the value has been set.
func (o *StorageNetAppLun) GetObjectTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ObjectType, true
}

// SetObjectType sets field value
func (o *StorageNetAppLun) SetObjectType(v string) {
	o.ObjectType = v
}

// GetDefaultObjectType returns the default value "storage.NetAppLun" of the ObjectType field.
func (o *StorageNetAppLun) GetDefaultObjectType() interface{} {
	return "storage.NetAppLun"
}

// GetAvgPerformanceMetrics returns the AvgPerformanceMetrics field value if set, zero value otherwise.
func (o *StorageNetAppLun) GetAvgPerformanceMetrics() StorageNetAppPerformanceMetricsAverage {
	if o == nil || IsNil(o.AvgPerformanceMetrics) {
		var ret StorageNetAppPerformanceMetricsAverage
		return ret
	}
	return *o.AvgPerformanceMetrics
}

// GetAvgPerformanceMetricsOk returns a tuple with the AvgPerformanceMetrics field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageNetAppLun) GetAvgPerformanceMetricsOk() (*StorageNetAppPerformanceMetricsAverage, bool) {
	if o == nil || IsNil(o.AvgPerformanceMetrics) {
		return nil, false
	}
	return o.AvgPerformanceMetrics, true
}

// HasAvgPerformanceMetrics returns a boolean if a field has been set.
func (o *StorageNetAppLun) HasAvgPerformanceMetrics() bool {
	if o != nil && !IsNil(o.AvgPerformanceMetrics) {
		return true
	}

	return false
}

// SetAvgPerformanceMetrics gets a reference to the given StorageNetAppPerformanceMetricsAverage and assigns it to the AvgPerformanceMetrics field.
func (o *StorageNetAppLun) SetAvgPerformanceMetrics(v StorageNetAppPerformanceMetricsAverage) {
	o.AvgPerformanceMetrics = &v
}

// GetContainerState returns the ContainerState field value if set, zero value otherwise.
func (o *StorageNetAppLun) GetContainerState() string {
	if o == nil || IsNil(o.ContainerState) {
		var ret string
		return ret
	}
	return *o.ContainerState
}

// GetContainerStateOk returns a tuple with the ContainerState field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageNetAppLun) GetContainerStateOk() (*string, bool) {
	if o == nil || IsNil(o.ContainerState) {
		return nil, false
	}
	return o.ContainerState, true
}

// HasContainerState returns a boolean if a field has been set.
func (o *StorageNetAppLun) HasContainerState() bool {
	if o != nil && !IsNil(o.ContainerState) {
		return true
	}

	return false
}

// SetContainerState gets a reference to the given string and assigns it to the ContainerState field.
func (o *StorageNetAppLun) SetContainerState(v string) {
	o.ContainerState = &v
}

// GetIsMapped returns the IsMapped field value if set, zero value otherwise.
func (o *StorageNetAppLun) GetIsMapped() string {
	if o == nil || IsNil(o.IsMapped) {
		var ret string
		return ret
	}
	return *o.IsMapped
}

// GetIsMappedOk returns a tuple with the IsMapped field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageNetAppLun) GetIsMappedOk() (*string, bool) {
	if o == nil || IsNil(o.IsMapped) {
		return nil, false
	}
	return o.IsMapped, true
}

// HasIsMapped returns a boolean if a field has been set.
func (o *StorageNetAppLun) HasIsMapped() bool {
	if o != nil && !IsNil(o.IsMapped) {
		return true
	}

	return false
}

// SetIsMapped gets a reference to the given string and assigns it to the IsMapped field.
func (o *StorageNetAppLun) SetIsMapped(v string) {
	o.IsMapped = &v
}

// GetKey returns the Key field value if set, zero value otherwise.
func (o *StorageNetAppLun) GetKey() string {
	if o == nil || IsNil(o.Key) {
		var ret string
		return ret
	}
	return *o.Key
}

// GetKeyOk returns a tuple with the Key field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageNetAppLun) GetKeyOk() (*string, bool) {
	if o == nil || IsNil(o.Key) {
		return nil, false
	}
	return o.Key, true
}

// HasKey returns a boolean if a field has been set.
func (o *StorageNetAppLun) HasKey() bool {
	if o != nil && !IsNil(o.Key) {
		return true
	}

	return false
}

// SetKey gets a reference to the given string and assigns it to the Key field.
func (o *StorageNetAppLun) SetKey(v string) {
	o.Key = &v
}

// GetMapped returns the Mapped field value if set, zero value otherwise.
// Deprecated
func (o *StorageNetAppLun) GetMapped() bool {
	if o == nil || IsNil(o.Mapped) {
		var ret bool
		return ret
	}
	return *o.Mapped
}

// GetMappedOk returns a tuple with the Mapped field value if set, nil otherwise
// and a boolean to check if the value has been set.
// Deprecated
func (o *StorageNetAppLun) GetMappedOk() (*bool, bool) {
	if o == nil || IsNil(o.Mapped) {
		return nil, false
	}
	return o.Mapped, true
}

// HasMapped returns a boolean if a field has been set.
func (o *StorageNetAppLun) HasMapped() bool {
	if o != nil && !IsNil(o.Mapped) {
		return true
	}

	return false
}

// SetMapped gets a reference to the given bool and assigns it to the Mapped field.
// Deprecated
func (o *StorageNetAppLun) SetMapped(v bool) {
	o.Mapped = &v
}

// GetOsType returns the OsType field value if set, zero value otherwise.
func (o *StorageNetAppLun) GetOsType() string {
	if o == nil || IsNil(o.OsType) {
		var ret string
		return ret
	}
	return *o.OsType
}

// GetOsTypeOk returns a tuple with the OsType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageNetAppLun) GetOsTypeOk() (*string, bool) {
	if o == nil || IsNil(o.OsType) {
		return nil, false
	}
	return o.OsType, true
}

// HasOsType returns a boolean if a field has been set.
func (o *StorageNetAppLun) HasOsType() bool {
	if o != nil && !IsNil(o.OsType) {
		return true
	}

	return false
}

// SetOsType gets a reference to the given string and assigns it to the OsType field.
func (o *StorageNetAppLun) SetOsType(v string) {
	o.OsType = &v
}

// GetPath returns the Path field value if set, zero value otherwise.
func (o *StorageNetAppLun) GetPath() string {
	if o == nil || IsNil(o.Path) {
		var ret string
		return ret
	}
	return *o.Path
}

// GetPathOk returns a tuple with the Path field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageNetAppLun) GetPathOk() (*string, bool) {
	if o == nil || IsNil(o.Path) {
		return nil, false
	}
	return o.Path, true
}

// HasPath returns a boolean if a field has been set.
func (o *StorageNetAppLun) HasPath() bool {
	if o != nil && !IsNil(o.Path) {
		return true
	}

	return false
}

// SetPath gets a reference to the given string and assigns it to the Path field.
func (o *StorageNetAppLun) SetPath(v string) {
	o.Path = &v
}

// GetSerial returns the Serial field value if set, zero value otherwise.
func (o *StorageNetAppLun) GetSerial() string {
	if o == nil || IsNil(o.Serial) {
		var ret string
		return ret
	}
	return *o.Serial
}

// GetSerialOk returns a tuple with the Serial field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageNetAppLun) GetSerialOk() (*string, bool) {
	if o == nil || IsNil(o.Serial) {
		return nil, false
	}
	return o.Serial, true
}

// HasSerial returns a boolean if a field has been set.
func (o *StorageNetAppLun) HasSerial() bool {
	if o != nil && !IsNil(o.Serial) {
		return true
	}

	return false
}

// SetSerial gets a reference to the given string and assigns it to the Serial field.
func (o *StorageNetAppLun) SetSerial(v string) {
	o.Serial = &v
}

// GetState returns the State field value if set, zero value otherwise.
func (o *StorageNetAppLun) GetState() string {
	if o == nil || IsNil(o.State) {
		var ret string
		return ret
	}
	return *o.State
}

// GetStateOk returns a tuple with the State field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageNetAppLun) GetStateOk() (*string, bool) {
	if o == nil || IsNil(o.State) {
		return nil, false
	}
	return o.State, true
}

// HasState returns a boolean if a field has been set.
func (o *StorageNetAppLun) HasState() bool {
	if o != nil && !IsNil(o.State) {
		return true
	}

	return false
}

// SetState gets a reference to the given string and assigns it to the State field.
func (o *StorageNetAppLun) SetState(v string) {
	o.State = &v
}

// GetSvmName returns the SvmName field value if set, zero value otherwise.
func (o *StorageNetAppLun) GetSvmName() string {
	if o == nil || IsNil(o.SvmName) {
		var ret string
		return ret
	}
	return *o.SvmName
}

// GetSvmNameOk returns a tuple with the SvmName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageNetAppLun) GetSvmNameOk() (*string, bool) {
	if o == nil || IsNil(o.SvmName) {
		return nil, false
	}
	return o.SvmName, true
}

// HasSvmName returns a boolean if a field has been set.
func (o *StorageNetAppLun) HasSvmName() bool {
	if o != nil && !IsNil(o.SvmName) {
		return true
	}

	return false
}

// SetSvmName gets a reference to the given string and assigns it to the SvmName field.
func (o *StorageNetAppLun) SetSvmName(v string) {
	o.SvmName = &v
}

// GetUuid returns the Uuid field value if set, zero value otherwise.
func (o *StorageNetAppLun) GetUuid() string {
	if o == nil || IsNil(o.Uuid) {
		var ret string
		return ret
	}
	return *o.Uuid
}

// GetUuidOk returns a tuple with the Uuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageNetAppLun) GetUuidOk() (*string, bool) {
	if o == nil || IsNil(o.Uuid) {
		return nil, false
	}
	return o.Uuid, true
}

// HasUuid returns a boolean if a field has been set.
func (o *StorageNetAppLun) HasUuid() bool {
	if o != nil && !IsNil(o.Uuid) {
		return true
	}

	return false
}

// SetUuid gets a reference to the given string and assigns it to the Uuid field.
func (o *StorageNetAppLun) SetUuid(v string) {
	o.Uuid = &v
}

// GetVolumeName returns the VolumeName field value if set, zero value otherwise.
func (o *StorageNetAppLun) GetVolumeName() string {
	if o == nil || IsNil(o.VolumeName) {
		var ret string
		return ret
	}
	return *o.VolumeName
}

// GetVolumeNameOk returns a tuple with the VolumeName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageNetAppLun) GetVolumeNameOk() (*string, bool) {
	if o == nil || IsNil(o.VolumeName) {
		return nil, false
	}
	return o.VolumeName, true
}

// HasVolumeName returns a boolean if a field has been set.
func (o *StorageNetAppLun) HasVolumeName() bool {
	if o != nil && !IsNil(o.VolumeName) {
		return true
	}

	return false
}

// SetVolumeName gets a reference to the given string and assigns it to the VolumeName field.
func (o *StorageNetAppLun) SetVolumeName(v string) {
	o.VolumeName = &v
}

// GetArray returns the Array field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *StorageNetAppLun) GetArray() StorageNetAppClusterRelationship {
	if o == nil || IsNil(o.Array.Get()) {
		var ret StorageNetAppClusterRelationship
		return ret
	}
	return *o.Array.Get()
}

// GetArrayOk returns a tuple with the Array field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *StorageNetAppLun) GetArrayOk() (*StorageNetAppClusterRelationship, bool) {
	if o == nil {
		return nil, false
	}
	return o.Array.Get(), o.Array.IsSet()
}

// HasArray returns a boolean if a field has been set.
func (o *StorageNetAppLun) HasArray() bool {
	if o != nil && o.Array.IsSet() {
		return true
	}

	return false
}

// SetArray gets a reference to the given NullableStorageNetAppClusterRelationship and assigns it to the Array field.
func (o *StorageNetAppLun) SetArray(v StorageNetAppClusterRelationship) {
	o.Array.Set(&v)
}

// SetArrayNil sets the value for Array to be an explicit nil
func (o *StorageNetAppLun) SetArrayNil() {
	o.Array.Set(nil)
}

// UnsetArray ensures that no value is present for Array, not even an explicit nil
func (o *StorageNetAppLun) UnsetArray() {
	o.Array.Unset()
}

// GetEvents returns the Events field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *StorageNetAppLun) GetEvents() []StorageNetAppLunEventRelationship {
	if o == nil {
		var ret []StorageNetAppLunEventRelationship
		return ret
	}
	return o.Events
}

// GetEventsOk returns a tuple with the Events field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *StorageNetAppLun) GetEventsOk() ([]StorageNetAppLunEventRelationship, bool) {
	if o == nil || IsNil(o.Events) {
		return nil, false
	}
	return o.Events, true
}

// HasEvents returns a boolean if a field has been set.
func (o *StorageNetAppLun) HasEvents() bool {
	if o != nil && !IsNil(o.Events) {
		return true
	}

	return false
}

// SetEvents gets a reference to the given []StorageNetAppLunEventRelationship and assigns it to the Events field.
func (o *StorageNetAppLun) SetEvents(v []StorageNetAppLunEventRelationship) {
	o.Events = v
}

// GetHost returns the Host field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *StorageNetAppLun) GetHost() []StorageNetAppInitiatorGroupRelationship {
	if o == nil {
		var ret []StorageNetAppInitiatorGroupRelationship
		return ret
	}
	return o.Host
}

// GetHostOk returns a tuple with the Host field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *StorageNetAppLun) GetHostOk() ([]StorageNetAppInitiatorGroupRelationship, bool) {
	if o == nil || IsNil(o.Host) {
		return nil, false
	}
	return o.Host, true
}

// HasHost returns a boolean if a field has been set.
func (o *StorageNetAppLun) HasHost() bool {
	if o != nil && !IsNil(o.Host) {
		return true
	}

	return false
}

// SetHost gets a reference to the given []StorageNetAppInitiatorGroupRelationship and assigns it to the Host field.
func (o *StorageNetAppLun) SetHost(v []StorageNetAppInitiatorGroupRelationship) {
	o.Host = v
}

// GetStorageContainer returns the StorageContainer field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *StorageNetAppLun) GetStorageContainer() StorageNetAppVolumeRelationship {
	if o == nil || IsNil(o.StorageContainer.Get()) {
		var ret StorageNetAppVolumeRelationship
		return ret
	}
	return *o.StorageContainer.Get()
}

// GetStorageContainerOk returns a tuple with the StorageContainer field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *StorageNetAppLun) GetStorageContainerOk() (*StorageNetAppVolumeRelationship, bool) {
	if o == nil {
		return nil, false
	}
	return o.StorageContainer.Get(), o.StorageContainer.IsSet()
}

// HasStorageContainer returns a boolean if a field has been set.
func (o *StorageNetAppLun) HasStorageContainer() bool {
	if o != nil && o.StorageContainer.IsSet() {
		return true
	}

	return false
}

// SetStorageContainer gets a reference to the given NullableStorageNetAppVolumeRelationship and assigns it to the StorageContainer field.
func (o *StorageNetAppLun) SetStorageContainer(v StorageNetAppVolumeRelationship) {
	o.StorageContainer.Set(&v)
}

// SetStorageContainerNil sets the value for StorageContainer to be an explicit nil
func (o *StorageNetAppLun) SetStorageContainerNil() {
	o.StorageContainer.Set(nil)
}

// UnsetStorageContainer ensures that no value is present for StorageContainer, not even an explicit nil
func (o *StorageNetAppLun) UnsetStorageContainer() {
	o.StorageContainer.Unset()
}

func (o StorageNetAppLun) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o StorageNetAppLun) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	serializedStorageBaseVolume, errStorageBaseVolume := json.Marshal(o.StorageBaseVolume)
	if errStorageBaseVolume != nil {
		return map[string]interface{}{}, errStorageBaseVolume
	}
	errStorageBaseVolume = json.Unmarshal([]byte(serializedStorageBaseVolume), &toSerialize)
	if errStorageBaseVolume != nil {
		return map[string]interface{}{}, errStorageBaseVolume
	}
	if _, exists := toSerialize["ClassId"]; !exists {
		toSerialize["ClassId"] = o.GetDefaultClassId()
	}
	toSerialize["ClassId"] = o.ClassId
	if _, exists := toSerialize["ObjectType"]; !exists {
		toSerialize["ObjectType"] = o.GetDefaultObjectType()
	}
	toSerialize["ObjectType"] = o.ObjectType
	if !IsNil(o.AvgPerformanceMetrics) {
		toSerialize["AvgPerformanceMetrics"] = o.AvgPerformanceMetrics
	}
	if !IsNil(o.ContainerState) {
		toSerialize["ContainerState"] = o.ContainerState
	}
	if !IsNil(o.IsMapped) {
		toSerialize["IsMapped"] = o.IsMapped
	}
	if !IsNil(o.Key) {
		toSerialize["Key"] = o.Key
	}
	if !IsNil(o.Mapped) {
		toSerialize["Mapped"] = o.Mapped
	}
	if !IsNil(o.OsType) {
		toSerialize["OsType"] = o.OsType
	}
	if !IsNil(o.Path) {
		toSerialize["Path"] = o.Path
	}
	if !IsNil(o.Serial) {
		toSerialize["Serial"] = o.Serial
	}
	if !IsNil(o.State) {
		toSerialize["State"] = o.State
	}
	if !IsNil(o.SvmName) {
		toSerialize["SvmName"] = o.SvmName
	}
	if !IsNil(o.Uuid) {
		toSerialize["Uuid"] = o.Uuid
	}
	if !IsNil(o.VolumeName) {
		toSerialize["VolumeName"] = o.VolumeName
	}
	if o.Array.IsSet() {
		toSerialize["Array"] = o.Array.Get()
	}
	if o.Events != nil {
		toSerialize["Events"] = o.Events
	}
	if o.Host != nil {
		toSerialize["Host"] = o.Host
	}
	if o.StorageContainer.IsSet() {
		toSerialize["StorageContainer"] = o.StorageContainer.Get()
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *StorageNetAppLun) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"ClassId",
		"ObjectType",
	}

	// defaultValueFuncMap captures the default values for required properties.
	// These values are used when required properties are missing from the payload.
	defaultValueFuncMap := map[string]func() interface{}{
		"ClassId":    o.GetDefaultClassId,
		"ObjectType": o.GetDefaultObjectType,
	}
	var defaultValueApplied bool
	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			if _, ok := defaultValueFuncMap[requiredProperty]; ok {
				allProperties[requiredProperty] = defaultValueFuncMap[requiredProperty]()
				defaultValueApplied = true
			}
		}
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	if defaultValueApplied {
		data, err = json.Marshal(allProperties)
		if err != nil {
			return err
		}
	}
	type StorageNetAppLunWithoutEmbeddedStruct struct {
		// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.
		ClassId string `json:"ClassId"`
		// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
		ObjectType            string                                  `json:"ObjectType"`
		AvgPerformanceMetrics *StorageNetAppPerformanceMetricsAverage `json:"AvgPerformanceMetrics,omitempty"`
		// The state of the volume and aggregate that contain the LUN. LUNs are only available when their containers are available.
		ContainerState *string `json:"ContainerState,omitempty"`
		// Reports if the LUN is mapped to one or more initiator groups.
		IsMapped *string `json:"IsMapped,omitempty"`
		// Unique identifier of LUN across data center.
		Key *string `json:"Key,omitempty"`
		// Reports if the LUN is mapped to one or more initiator groups.
		// Deprecated
		Mapped *bool `json:"Mapped,omitempty"`
		// The operating system (OS) type for this LUN. * `Linux` - Family of open source Unix-like operating systems based on the Linux kernel. * `AIX` - Advanced Interactive Executive (AIX). * `HP-UX` - HP-UX is implementation of the Unix operating system, based on Unix System V. * `Hyper-V` - Windows Server 2008 or Windows Server 2012 Hyper-V. * `OpenVMS` - OpenVMS is multi-user, multiprocessing virtual memory-based operating system. * `Solaris` - Solaris is a Unix operating system. * `NetWare` - NetWare is a computer network operating system. * `VMware` - An enterprise-class, type-1 hypervisor developed by VMware for deploying and serving virtual computers. * `Windows` - Single-partition Windows disk using the Master Boot Record (MBR) partitioning style. * `Xen` - Xen is a type-1 hypervisor, providing services that allow multiple computer operating systems to execute on the same computer hardware concurrently.
		OsType *string `json:"OsType,omitempty"`
		// Path where the LUN is mounted.
		Path *string `json:"Path,omitempty"`
		// Serial number for the provisioned LUN.
		Serial *string `json:"Serial,omitempty"`
		// The administrative state of a LUN. * `offline` - The LUN is administratively offline, or a more detailed offline reason is not available. * `online` - The state of the LUN is online.
		State *string `json:"State,omitempty"`
		// The storage virtual machine name for the lun.
		SvmName *string `json:"SvmName,omitempty"`
		// Universally unique identifier of the LUN.
		Uuid *string `json:"Uuid,omitempty" validate:"regexp=^$|^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"`
		// The parent volume name for the lun.
		VolumeName *string                                  `json:"VolumeName,omitempty"`
		Array      NullableStorageNetAppClusterRelationship `json:"Array,omitempty"`
		// An array of relationships to storageNetAppLunEvent resources.
		Events []StorageNetAppLunEventRelationship `json:"Events,omitempty"`
		// An array of relationships to storageNetAppInitiatorGroup resources.
		Host             []StorageNetAppInitiatorGroupRelationship `json:"Host,omitempty"`
		StorageContainer NullableStorageNetAppVolumeRelationship   `json:"StorageContainer,omitempty"`
	}

	varStorageNetAppLunWithoutEmbeddedStruct := StorageNetAppLunWithoutEmbeddedStruct{}

	err = json.Unmarshal(data, &varStorageNetAppLunWithoutEmbeddedStruct)
	if err == nil {
		varStorageNetAppLun := _StorageNetAppLun{}
		varStorageNetAppLun.ClassId = varStorageNetAppLunWithoutEmbeddedStruct.ClassId
		varStorageNetAppLun.ObjectType = varStorageNetAppLunWithoutEmbeddedStruct.ObjectType
		varStorageNetAppLun.AvgPerformanceMetrics = varStorageNetAppLunWithoutEmbeddedStruct.AvgPerformanceMetrics
		varStorageNetAppLun.ContainerState = varStorageNetAppLunWithoutEmbeddedStruct.ContainerState
		varStorageNetAppLun.IsMapped = varStorageNetAppLunWithoutEmbeddedStruct.IsMapped
		varStorageNetAppLun.Key = varStorageNetAppLunWithoutEmbeddedStruct.Key
		varStorageNetAppLun.Mapped = varStorageNetAppLunWithoutEmbeddedStruct.Mapped
		varStorageNetAppLun.OsType = varStorageNetAppLunWithoutEmbeddedStruct.OsType
		varStorageNetAppLun.Path = varStorageNetAppLunWithoutEmbeddedStruct.Path
		varStorageNetAppLun.Serial = varStorageNetAppLunWithoutEmbeddedStruct.Serial
		varStorageNetAppLun.State = varStorageNetAppLunWithoutEmbeddedStruct.State
		varStorageNetAppLun.SvmName = varStorageNetAppLunWithoutEmbeddedStruct.SvmName
		varStorageNetAppLun.Uuid = varStorageNetAppLunWithoutEmbeddedStruct.Uuid
		varStorageNetAppLun.VolumeName = varStorageNetAppLunWithoutEmbeddedStruct.VolumeName
		varStorageNetAppLun.Array = varStorageNetAppLunWithoutEmbeddedStruct.Array
		varStorageNetAppLun.Events = varStorageNetAppLunWithoutEmbeddedStruct.Events
		varStorageNetAppLun.Host = varStorageNetAppLunWithoutEmbeddedStruct.Host
		varStorageNetAppLun.StorageContainer = varStorageNetAppLunWithoutEmbeddedStruct.StorageContainer
		*o = StorageNetAppLun(varStorageNetAppLun)
	} else {
		return err
	}

	varStorageNetAppLun := _StorageNetAppLun{}

	err = json.Unmarshal(data, &varStorageNetAppLun)
	if err == nil {
		o.StorageBaseVolume = varStorageNetAppLun.StorageBaseVolume
	} else {
		return err
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "ClassId")
		delete(additionalProperties, "ObjectType")
		delete(additionalProperties, "AvgPerformanceMetrics")
		delete(additionalProperties, "ContainerState")
		delete(additionalProperties, "IsMapped")
		delete(additionalProperties, "Key")
		delete(additionalProperties, "Mapped")
		delete(additionalProperties, "OsType")
		delete(additionalProperties, "Path")
		delete(additionalProperties, "Serial")
		delete(additionalProperties, "State")
		delete(additionalProperties, "SvmName")
		delete(additionalProperties, "Uuid")
		delete(additionalProperties, "VolumeName")
		delete(additionalProperties, "Array")
		delete(additionalProperties, "Events")
		delete(additionalProperties, "Host")
		delete(additionalProperties, "StorageContainer")

		// remove fields from embedded structs
		reflectStorageBaseVolume := reflect.ValueOf(o.StorageBaseVolume)
		for i := 0; i < reflectStorageBaseVolume.Type().NumField(); i++ {
			t := reflectStorageBaseVolume.Type().Field(i)

			if jsonTag := t.Tag.Get("json"); jsonTag != "" {
				fieldName := ""
				if commaIdx := strings.Index(jsonTag, ","); commaIdx > 0 {
					fieldName = jsonTag[:commaIdx]
				} else {
					fieldName = jsonTag
				}
				if fieldName != "AdditionalProperties" {
					delete(additionalProperties, fieldName)
				}
			}
		}

		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableStorageNetAppLun struct {
	value *StorageNetAppLun
	isSet bool
}

func (v NullableStorageNetAppLun) Get() *StorageNetAppLun {
	return v.value
}

func (v *NullableStorageNetAppLun) Set(val *StorageNetAppLun) {
	v.value = val
	v.isSet = true
}

func (v NullableStorageNetAppLun) IsSet() bool {
	return v.isSet
}

func (v *NullableStorageNetAppLun) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStorageNetAppLun(val *StorageNetAppLun) *NullableStorageNetAppLun {
	return &NullableStorageNetAppLun{value: val, isSet: true}
}

func (v NullableStorageNetAppLun) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStorageNetAppLun) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
