/*
Cisco Intersight

Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations. The Intersight OpenAPI document defines the complete set of properties that are returned in the HTTP response. From that perspective, a client can expect that no additional properties are returned, unless these properties are explicitly defined in the OpenAPI document. However, when a client uses an older version of the Intersight OpenAPI document, the server may send additional properties because the software is more recent than the client. In that case, the client may receive properties that it does not know about. Some generated SDKs perform a strict validation of the HTTP response body against the OpenAPI document.

API version: 1.0.11-2024100405
Contact: intersight@cisco.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package intersight

import (
	"encoding/json"
	"fmt"
	"reflect"
	"strings"
)

// checks if the HyperflexTarget type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &HyperflexTarget{}

// HyperflexTarget A HyperFlex iSCSI target entity. Contains detailed information about the iSCSI target which includes a list of linked iSCSI initiator group objects, list of iSCSI lun objects associated with the iSCSI target, authorization method and iSCSI qualified name.
type HyperflexTarget struct {
	StorageBaseTarget
	// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.
	ClassId string `json:"ClassId"`
	// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
	ObjectType string `json:"ObjectType"`
	// Auth method of the target inventory. * `NOT_APPLICABLE` - Authorization method of the HyperFlex iSCSI target is not applicable. * `CHAP` - Authorization method of the HyperFlex iSCSI target is CHAP. * `NONE` - Authorization method of the HyperFlex iSCSI target is none.
	AuthMethod          *string  `json:"AuthMethod,omitempty"`
	InitiatorGroupUuids []string `json:"InitiatorGroupUuids,omitempty"`
	// Source of the target inventory. * `NOT_APPLICABLE` - The source of the HyperFlex inventory is not applicable. * `ONLINE` - The source of the HyperFlex inventory is online. * `OFFLINE` - The source of the HyperFlex inventory is offline.
	InventorySource *string `json:"InventorySource,omitempty"`
	// The iSCSI qualified name (IQN) of target.
	Iqn      *string  `json:"Iqn,omitempty"`
	LunUuids []string `json:"LunUuids,omitempty"`
	// Number of active initiators in the initiator group.
	NumActiveInitiators *int64 `json:"NumActiveInitiators,omitempty"`
	// UUID of the HyperFlex iSCSI target.
	Uuid *string `json:"Uuid,omitempty"`
	// Version of the Initiator Group.
	Version *int64                               `json:"Version,omitempty"`
	Cluster NullableHyperflexClusterRelationship `json:"Cluster,omitempty"`
	// An array of relationships to hyperflexInitiatorGroup resources.
	InitiatorGroups []HyperflexInitiatorGroupRelationship `json:"InitiatorGroups,omitempty"`
	// An array of relationships to hyperflexLun resources.
	Luns                 []HyperflexLunRelationship `json:"Luns,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _HyperflexTarget HyperflexTarget

// NewHyperflexTarget instantiates a new HyperflexTarget object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHyperflexTarget(classId string, objectType string) *HyperflexTarget {
	this := HyperflexTarget{}
	this.ClassId = classId
	this.ObjectType = objectType
	return &this
}

// NewHyperflexTargetWithDefaults instantiates a new HyperflexTarget object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHyperflexTargetWithDefaults() *HyperflexTarget {
	this := HyperflexTarget{}
	var classId string = "hyperflex.Target"
	this.ClassId = classId
	var objectType string = "hyperflex.Target"
	this.ObjectType = objectType
	return &this
}

// GetClassId returns the ClassId field value
func (o *HyperflexTarget) GetClassId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ClassId
}

// GetClassIdOk returns a tuple with the ClassId field value
// and a boolean to check if the value has been set.
func (o *HyperflexTarget) GetClassIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ClassId, true
}

// SetClassId sets field value
func (o *HyperflexTarget) SetClassId(v string) {
	o.ClassId = v
}

// GetDefaultClassId returns the default value "hyperflex.Target" of the ClassId field.
func (o *HyperflexTarget) GetDefaultClassId() interface{} {
	return "hyperflex.Target"
}

// GetObjectType returns the ObjectType field value
func (o *HyperflexTarget) GetObjectType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ObjectType
}

// GetObjectTypeOk returns a tuple with the ObjectType field value
// and a boolean to check if the value has been set.
func (o *HyperflexTarget) GetObjectTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ObjectType, true
}

// SetObjectType sets field value
func (o *HyperflexTarget) SetObjectType(v string) {
	o.ObjectType = v
}

// GetDefaultObjectType returns the default value "hyperflex.Target" of the ObjectType field.
func (o *HyperflexTarget) GetDefaultObjectType() interface{} {
	return "hyperflex.Target"
}

// GetAuthMethod returns the AuthMethod field value if set, zero value otherwise.
func (o *HyperflexTarget) GetAuthMethod() string {
	if o == nil || IsNil(o.AuthMethod) {
		var ret string
		return ret
	}
	return *o.AuthMethod
}

// GetAuthMethodOk returns a tuple with the AuthMethod field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HyperflexTarget) GetAuthMethodOk() (*string, bool) {
	if o == nil || IsNil(o.AuthMethod) {
		return nil, false
	}
	return o.AuthMethod, true
}

// HasAuthMethod returns a boolean if a field has been set.
func (o *HyperflexTarget) HasAuthMethod() bool {
	if o != nil && !IsNil(o.AuthMethod) {
		return true
	}

	return false
}

// SetAuthMethod gets a reference to the given string and assigns it to the AuthMethod field.
func (o *HyperflexTarget) SetAuthMethod(v string) {
	o.AuthMethod = &v
}

// GetInitiatorGroupUuids returns the InitiatorGroupUuids field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HyperflexTarget) GetInitiatorGroupUuids() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.InitiatorGroupUuids
}

// GetInitiatorGroupUuidsOk returns a tuple with the InitiatorGroupUuids field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HyperflexTarget) GetInitiatorGroupUuidsOk() ([]string, bool) {
	if o == nil || IsNil(o.InitiatorGroupUuids) {
		return nil, false
	}
	return o.InitiatorGroupUuids, true
}

// HasInitiatorGroupUuids returns a boolean if a field has been set.
func (o *HyperflexTarget) HasInitiatorGroupUuids() bool {
	if o != nil && !IsNil(o.InitiatorGroupUuids) {
		return true
	}

	return false
}

// SetInitiatorGroupUuids gets a reference to the given []string and assigns it to the InitiatorGroupUuids field.
func (o *HyperflexTarget) SetInitiatorGroupUuids(v []string) {
	o.InitiatorGroupUuids = v
}

// GetInventorySource returns the InventorySource field value if set, zero value otherwise.
func (o *HyperflexTarget) GetInventorySource() string {
	if o == nil || IsNil(o.InventorySource) {
		var ret string
		return ret
	}
	return *o.InventorySource
}

// GetInventorySourceOk returns a tuple with the InventorySource field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HyperflexTarget) GetInventorySourceOk() (*string, bool) {
	if o == nil || IsNil(o.InventorySource) {
		return nil, false
	}
	return o.InventorySource, true
}

// HasInventorySource returns a boolean if a field has been set.
func (o *HyperflexTarget) HasInventorySource() bool {
	if o != nil && !IsNil(o.InventorySource) {
		return true
	}

	return false
}

// SetInventorySource gets a reference to the given string and assigns it to the InventorySource field.
func (o *HyperflexTarget) SetInventorySource(v string) {
	o.InventorySource = &v
}

// GetIqn returns the Iqn field value if set, zero value otherwise.
func (o *HyperflexTarget) GetIqn() string {
	if o == nil || IsNil(o.Iqn) {
		var ret string
		return ret
	}
	return *o.Iqn
}

// GetIqnOk returns a tuple with the Iqn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HyperflexTarget) GetIqnOk() (*string, bool) {
	if o == nil || IsNil(o.Iqn) {
		return nil, false
	}
	return o.Iqn, true
}

// HasIqn returns a boolean if a field has been set.
func (o *HyperflexTarget) HasIqn() bool {
	if o != nil && !IsNil(o.Iqn) {
		return true
	}

	return false
}

// SetIqn gets a reference to the given string and assigns it to the Iqn field.
func (o *HyperflexTarget) SetIqn(v string) {
	o.Iqn = &v
}

// GetLunUuids returns the LunUuids field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HyperflexTarget) GetLunUuids() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.LunUuids
}

// GetLunUuidsOk returns a tuple with the LunUuids field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HyperflexTarget) GetLunUuidsOk() ([]string, bool) {
	if o == nil || IsNil(o.LunUuids) {
		return nil, false
	}
	return o.LunUuids, true
}

// HasLunUuids returns a boolean if a field has been set.
func (o *HyperflexTarget) HasLunUuids() bool {
	if o != nil && !IsNil(o.LunUuids) {
		return true
	}

	return false
}

// SetLunUuids gets a reference to the given []string and assigns it to the LunUuids field.
func (o *HyperflexTarget) SetLunUuids(v []string) {
	o.LunUuids = v
}

// GetNumActiveInitiators returns the NumActiveInitiators field value if set, zero value otherwise.
func (o *HyperflexTarget) GetNumActiveInitiators() int64 {
	if o == nil || IsNil(o.NumActiveInitiators) {
		var ret int64
		return ret
	}
	return *o.NumActiveInitiators
}

// GetNumActiveInitiatorsOk returns a tuple with the NumActiveInitiators field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HyperflexTarget) GetNumActiveInitiatorsOk() (*int64, bool) {
	if o == nil || IsNil(o.NumActiveInitiators) {
		return nil, false
	}
	return o.NumActiveInitiators, true
}

// HasNumActiveInitiators returns a boolean if a field has been set.
func (o *HyperflexTarget) HasNumActiveInitiators() bool {
	if o != nil && !IsNil(o.NumActiveInitiators) {
		return true
	}

	return false
}

// SetNumActiveInitiators gets a reference to the given int64 and assigns it to the NumActiveInitiators field.
func (o *HyperflexTarget) SetNumActiveInitiators(v int64) {
	o.NumActiveInitiators = &v
}

// GetUuid returns the Uuid field value if set, zero value otherwise.
func (o *HyperflexTarget) GetUuid() string {
	if o == nil || IsNil(o.Uuid) {
		var ret string
		return ret
	}
	return *o.Uuid
}

// GetUuidOk returns a tuple with the Uuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HyperflexTarget) GetUuidOk() (*string, bool) {
	if o == nil || IsNil(o.Uuid) {
		return nil, false
	}
	return o.Uuid, true
}

// HasUuid returns a boolean if a field has been set.
func (o *HyperflexTarget) HasUuid() bool {
	if o != nil && !IsNil(o.Uuid) {
		return true
	}

	return false
}

// SetUuid gets a reference to the given string and assigns it to the Uuid field.
func (o *HyperflexTarget) SetUuid(v string) {
	o.Uuid = &v
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *HyperflexTarget) GetVersion() int64 {
	if o == nil || IsNil(o.Version) {
		var ret int64
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HyperflexTarget) GetVersionOk() (*int64, bool) {
	if o == nil || IsNil(o.Version) {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *HyperflexTarget) HasVersion() bool {
	if o != nil && !IsNil(o.Version) {
		return true
	}

	return false
}

// SetVersion gets a reference to the given int64 and assigns it to the Version field.
func (o *HyperflexTarget) SetVersion(v int64) {
	o.Version = &v
}

// GetCluster returns the Cluster field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HyperflexTarget) GetCluster() HyperflexClusterRelationship {
	if o == nil || IsNil(o.Cluster.Get()) {
		var ret HyperflexClusterRelationship
		return ret
	}
	return *o.Cluster.Get()
}

// GetClusterOk returns a tuple with the Cluster field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HyperflexTarget) GetClusterOk() (*HyperflexClusterRelationship, bool) {
	if o == nil {
		return nil, false
	}
	return o.Cluster.Get(), o.Cluster.IsSet()
}

// HasCluster returns a boolean if a field has been set.
func (o *HyperflexTarget) HasCluster() bool {
	if o != nil && o.Cluster.IsSet() {
		return true
	}

	return false
}

// SetCluster gets a reference to the given NullableHyperflexClusterRelationship and assigns it to the Cluster field.
func (o *HyperflexTarget) SetCluster(v HyperflexClusterRelationship) {
	o.Cluster.Set(&v)
}

// SetClusterNil sets the value for Cluster to be an explicit nil
func (o *HyperflexTarget) SetClusterNil() {
	o.Cluster.Set(nil)
}

// UnsetCluster ensures that no value is present for Cluster, not even an explicit nil
func (o *HyperflexTarget) UnsetCluster() {
	o.Cluster.Unset()
}

// GetInitiatorGroups returns the InitiatorGroups field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HyperflexTarget) GetInitiatorGroups() []HyperflexInitiatorGroupRelationship {
	if o == nil {
		var ret []HyperflexInitiatorGroupRelationship
		return ret
	}
	return o.InitiatorGroups
}

// GetInitiatorGroupsOk returns a tuple with the InitiatorGroups field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HyperflexTarget) GetInitiatorGroupsOk() ([]HyperflexInitiatorGroupRelationship, bool) {
	if o == nil || IsNil(o.InitiatorGroups) {
		return nil, false
	}
	return o.InitiatorGroups, true
}

// HasInitiatorGroups returns a boolean if a field has been set.
func (o *HyperflexTarget) HasInitiatorGroups() bool {
	if o != nil && !IsNil(o.InitiatorGroups) {
		return true
	}

	return false
}

// SetInitiatorGroups gets a reference to the given []HyperflexInitiatorGroupRelationship and assigns it to the InitiatorGroups field.
func (o *HyperflexTarget) SetInitiatorGroups(v []HyperflexInitiatorGroupRelationship) {
	o.InitiatorGroups = v
}

// GetLuns returns the Luns field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HyperflexTarget) GetLuns() []HyperflexLunRelationship {
	if o == nil {
		var ret []HyperflexLunRelationship
		return ret
	}
	return o.Luns
}

// GetLunsOk returns a tuple with the Luns field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HyperflexTarget) GetLunsOk() ([]HyperflexLunRelationship, bool) {
	if o == nil || IsNil(o.Luns) {
		return nil, false
	}
	return o.Luns, true
}

// HasLuns returns a boolean if a field has been set.
func (o *HyperflexTarget) HasLuns() bool {
	if o != nil && !IsNil(o.Luns) {
		return true
	}

	return false
}

// SetLuns gets a reference to the given []HyperflexLunRelationship and assigns it to the Luns field.
func (o *HyperflexTarget) SetLuns(v []HyperflexLunRelationship) {
	o.Luns = v
}

func (o HyperflexTarget) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o HyperflexTarget) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	serializedStorageBaseTarget, errStorageBaseTarget := json.Marshal(o.StorageBaseTarget)
	if errStorageBaseTarget != nil {
		return map[string]interface{}{}, errStorageBaseTarget
	}
	errStorageBaseTarget = json.Unmarshal([]byte(serializedStorageBaseTarget), &toSerialize)
	if errStorageBaseTarget != nil {
		return map[string]interface{}{}, errStorageBaseTarget
	}
	if _, exists := toSerialize["ClassId"]; !exists {
		toSerialize["ClassId"] = o.GetDefaultClassId()
	}
	toSerialize["ClassId"] = o.ClassId
	if _, exists := toSerialize["ObjectType"]; !exists {
		toSerialize["ObjectType"] = o.GetDefaultObjectType()
	}
	toSerialize["ObjectType"] = o.ObjectType
	if !IsNil(o.AuthMethod) {
		toSerialize["AuthMethod"] = o.AuthMethod
	}
	if o.InitiatorGroupUuids != nil {
		toSerialize["InitiatorGroupUuids"] = o.InitiatorGroupUuids
	}
	if !IsNil(o.InventorySource) {
		toSerialize["InventorySource"] = o.InventorySource
	}
	if !IsNil(o.Iqn) {
		toSerialize["Iqn"] = o.Iqn
	}
	if o.LunUuids != nil {
		toSerialize["LunUuids"] = o.LunUuids
	}
	if !IsNil(o.NumActiveInitiators) {
		toSerialize["NumActiveInitiators"] = o.NumActiveInitiators
	}
	if !IsNil(o.Uuid) {
		toSerialize["Uuid"] = o.Uuid
	}
	if !IsNil(o.Version) {
		toSerialize["Version"] = o.Version
	}
	if o.Cluster.IsSet() {
		toSerialize["Cluster"] = o.Cluster.Get()
	}
	if o.InitiatorGroups != nil {
		toSerialize["InitiatorGroups"] = o.InitiatorGroups
	}
	if o.Luns != nil {
		toSerialize["Luns"] = o.Luns
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *HyperflexTarget) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"ClassId",
		"ObjectType",
	}

	// defaultValueFuncMap captures the default values for required properties.
	// These values are used when required properties are missing from the payload.
	defaultValueFuncMap := map[string]func() interface{}{
		"ClassId":    o.GetDefaultClassId,
		"ObjectType": o.GetDefaultObjectType,
	}
	var defaultValueApplied bool
	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			if _, ok := defaultValueFuncMap[requiredProperty]; ok {
				allProperties[requiredProperty] = defaultValueFuncMap[requiredProperty]()
				defaultValueApplied = true
			}
		}
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	if defaultValueApplied {
		data, err = json.Marshal(allProperties)
		if err != nil {
			return err
		}
	}
	type HyperflexTargetWithoutEmbeddedStruct struct {
		// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.
		ClassId string `json:"ClassId"`
		// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
		ObjectType string `json:"ObjectType"`
		// Auth method of the target inventory. * `NOT_APPLICABLE` - Authorization method of the HyperFlex iSCSI target is not applicable. * `CHAP` - Authorization method of the HyperFlex iSCSI target is CHAP. * `NONE` - Authorization method of the HyperFlex iSCSI target is none.
		AuthMethod          *string  `json:"AuthMethod,omitempty"`
		InitiatorGroupUuids []string `json:"InitiatorGroupUuids,omitempty"`
		// Source of the target inventory. * `NOT_APPLICABLE` - The source of the HyperFlex inventory is not applicable. * `ONLINE` - The source of the HyperFlex inventory is online. * `OFFLINE` - The source of the HyperFlex inventory is offline.
		InventorySource *string `json:"InventorySource,omitempty"`
		// The iSCSI qualified name (IQN) of target.
		Iqn      *string  `json:"Iqn,omitempty"`
		LunUuids []string `json:"LunUuids,omitempty"`
		// Number of active initiators in the initiator group.
		NumActiveInitiators *int64 `json:"NumActiveInitiators,omitempty"`
		// UUID of the HyperFlex iSCSI target.
		Uuid *string `json:"Uuid,omitempty"`
		// Version of the Initiator Group.
		Version *int64                               `json:"Version,omitempty"`
		Cluster NullableHyperflexClusterRelationship `json:"Cluster,omitempty"`
		// An array of relationships to hyperflexInitiatorGroup resources.
		InitiatorGroups []HyperflexInitiatorGroupRelationship `json:"InitiatorGroups,omitempty"`
		// An array of relationships to hyperflexLun resources.
		Luns []HyperflexLunRelationship `json:"Luns,omitempty"`
	}

	varHyperflexTargetWithoutEmbeddedStruct := HyperflexTargetWithoutEmbeddedStruct{}

	err = json.Unmarshal(data, &varHyperflexTargetWithoutEmbeddedStruct)
	if err == nil {
		varHyperflexTarget := _HyperflexTarget{}
		varHyperflexTarget.ClassId = varHyperflexTargetWithoutEmbeddedStruct.ClassId
		varHyperflexTarget.ObjectType = varHyperflexTargetWithoutEmbeddedStruct.ObjectType
		varHyperflexTarget.AuthMethod = varHyperflexTargetWithoutEmbeddedStruct.AuthMethod
		varHyperflexTarget.InitiatorGroupUuids = varHyperflexTargetWithoutEmbeddedStruct.InitiatorGroupUuids
		varHyperflexTarget.InventorySource = varHyperflexTargetWithoutEmbeddedStruct.InventorySource
		varHyperflexTarget.Iqn = varHyperflexTargetWithoutEmbeddedStruct.Iqn
		varHyperflexTarget.LunUuids = varHyperflexTargetWithoutEmbeddedStruct.LunUuids
		varHyperflexTarget.NumActiveInitiators = varHyperflexTargetWithoutEmbeddedStruct.NumActiveInitiators
		varHyperflexTarget.Uuid = varHyperflexTargetWithoutEmbeddedStruct.Uuid
		varHyperflexTarget.Version = varHyperflexTargetWithoutEmbeddedStruct.Version
		varHyperflexTarget.Cluster = varHyperflexTargetWithoutEmbeddedStruct.Cluster
		varHyperflexTarget.InitiatorGroups = varHyperflexTargetWithoutEmbeddedStruct.InitiatorGroups
		varHyperflexTarget.Luns = varHyperflexTargetWithoutEmbeddedStruct.Luns
		*o = HyperflexTarget(varHyperflexTarget)
	} else {
		return err
	}

	varHyperflexTarget := _HyperflexTarget{}

	err = json.Unmarshal(data, &varHyperflexTarget)
	if err == nil {
		o.StorageBaseTarget = varHyperflexTarget.StorageBaseTarget
	} else {
		return err
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "ClassId")
		delete(additionalProperties, "ObjectType")
		delete(additionalProperties, "AuthMethod")
		delete(additionalProperties, "InitiatorGroupUuids")
		delete(additionalProperties, "InventorySource")
		delete(additionalProperties, "Iqn")
		delete(additionalProperties, "LunUuids")
		delete(additionalProperties, "NumActiveInitiators")
		delete(additionalProperties, "Uuid")
		delete(additionalProperties, "Version")
		delete(additionalProperties, "Cluster")
		delete(additionalProperties, "InitiatorGroups")
		delete(additionalProperties, "Luns")

		// remove fields from embedded structs
		reflectStorageBaseTarget := reflect.ValueOf(o.StorageBaseTarget)
		for i := 0; i < reflectStorageBaseTarget.Type().NumField(); i++ {
			t := reflectStorageBaseTarget.Type().Field(i)

			if jsonTag := t.Tag.Get("json"); jsonTag != "" {
				fieldName := ""
				if commaIdx := strings.Index(jsonTag, ","); commaIdx > 0 {
					fieldName = jsonTag[:commaIdx]
				} else {
					fieldName = jsonTag
				}
				if fieldName != "AdditionalProperties" {
					delete(additionalProperties, fieldName)
				}
			}
		}

		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableHyperflexTarget struct {
	value *HyperflexTarget
	isSet bool
}

func (v NullableHyperflexTarget) Get() *HyperflexTarget {
	return v.value
}

func (v *NullableHyperflexTarget) Set(val *HyperflexTarget) {
	v.value = val
	v.isSet = true
}

func (v NullableHyperflexTarget) IsSet() bool {
	return v.isSet
}

func (v *NullableHyperflexTarget) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHyperflexTarget(val *HyperflexTarget) *NullableHyperflexTarget {
	return &NullableHyperflexTarget{value: val, isSet: true}
}

func (v NullableHyperflexTarget) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHyperflexTarget) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
