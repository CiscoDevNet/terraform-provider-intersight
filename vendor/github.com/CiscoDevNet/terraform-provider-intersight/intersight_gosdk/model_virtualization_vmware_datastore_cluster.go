/*
Cisco Intersight

Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations. The Intersight OpenAPI document defines the complete set of properties that are returned in the HTTP response. From that perspective, a client can expect that no additional properties are returned, unless these properties are explicitly defined in the OpenAPI document. However, when a client uses an older version of the Intersight OpenAPI document, the server may send additional properties because the software is more recent than the client. In that case, the client may receive properties that it does not know about. Some generated SDKs perform a strict validation of the HTTP response body against the OpenAPI document.

API version: 1.0.11-18775
Contact: intersight@cisco.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package intersight

import (
	"encoding/json"
	"fmt"
	"reflect"
	"strings"
)

// checks if the VirtualizationVmwareDatastoreCluster type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VirtualizationVmwareDatastoreCluster{}

// VirtualizationVmwareDatastoreCluster The VMware Datastore cluster entity with its attributes. Datastore cluster is a collection of datastores with shared resources and a shared management interface.
type VirtualizationVmwareDatastoreCluster struct {
	VirtualizationBaseDatastoreCluster
	// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.
	ClassId string `json:"ClassId"`
	// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
	ObjectType string `json:"ObjectType"`
	// The global automation level for all virtual machines in this datastore cluster.
	AutomationLevel *string `json:"AutomationLevel,omitempty"`
	// Minimum level of free space for each datastore that is the threshold for action.
	FreeSpaceThreshold *int64 `json:"FreeSpaceThreshold,omitempty"`
	// Inventory path of the Datastore Cluster.
	InventoryPath *string `json:"InventoryPath,omitempty"`
	// Minimum I/O latency for each datastore below which I/O load balancing moves are not considered.
	IoLatencyThreshold *int32 `json:"IoLatencyThreshold,omitempty"`
	// Storage DRS behavior when it generates recommendations for correcting I/O load imbalance in a datastore cluster.
	IoLoadBalanceAutomationMode *string `json:"IoLoadBalanceAutomationMode,omitempty"`
	// Amount of imbalance that Storage DRS should tolerate.
	IoLoadImbalanceThreshold *int32 `json:"IoLoadImbalanceThreshold,omitempty"`
	// Is I/O Metrics enabled for this datastore cluster.
	IoMetricsEnabled *bool `json:"IoMetricsEnabled,omitempty"`
	// Specify how much of an improvement DRS should look for before making a recommendation or performing a migration.
	MinSpaceUtilizationDifference *int32 `json:"MinSpaceUtilizationDifference,omitempty"`
	// Storage DRS behavior when it generates recommendations for correcting storage and VM policy violations in a datastore cluster.
	PolicyEnforcementAutomationMode *string `json:"PolicyEnforcementAutomationMode,omitempty"`
	// Storage DRS makes storage migration recommendations if total IOPs reservation of all VMs running on a datastore is higher than the specified threshold.
	ReservablePercentThreshold *int32 `json:"ReservablePercentThreshold,omitempty"`
	// Storage DRS behavior when it generates recommendations for correcting affinity rule violations in a datastore cluster.
	RuleEnforcementAutomationMode *string `json:"RuleEnforcementAutomationMode,omitempty"`
	// Storage DRS behavior when it generates recommendations for correcting space load imbalance in a datastore cluster.
	SpaceLoadBalanceAutomationMode *string `json:"SpaceLoadBalanceAutomationMode,omitempty"`
	// Runtime thresholds govern when Storage DRS performs or recommends migrations.
	SpaceThresholdMode *string `json:"SpaceThresholdMode,omitempty"`
	// Datastore cluster health status, as reported by the hypervisor platform. * `Unknown` - Entity status is unknown. * `Degraded` - State is degraded, and might impact normal operation of the entity. * `Critical` - Entity is in a critical state, impacting operations. * `Ok` - Entity status is in a stable state, operating normally.
	Status *string `json:"Status,omitempty"`
	// Is Storage DRS enabled for this datastore cluster.
	StorageDrsEnabled *bool `json:"StorageDrsEnabled,omitempty"`
	// Minimum level of consumed space for each datastore that is the threshold for action.
	UtilizedSpaceThreshold *int32 `json:"UtilizedSpaceThreshold,omitempty"`
	// Storage DRS behavior when it generates recommendations for VM evacuations from datastores in a datastore cluster.
	VmEvacuationAutomationMode *string                                            `json:"VmEvacuationAutomationMode,omitempty"`
	Datacenter                 NullableVirtualizationVmwareDatacenterRelationship `json:"Datacenter,omitempty"`
	AdditionalProperties       map[string]interface{}
}

type _VirtualizationVmwareDatastoreCluster VirtualizationVmwareDatastoreCluster

// NewVirtualizationVmwareDatastoreCluster instantiates a new VirtualizationVmwareDatastoreCluster object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVirtualizationVmwareDatastoreCluster(classId string, objectType string) *VirtualizationVmwareDatastoreCluster {
	this := VirtualizationVmwareDatastoreCluster{}
	this.ClassId = classId
	this.ObjectType = objectType
	var type_ string = "Unknown"
	this.Type = &type_
	var status string = "Unknown"
	this.Status = &status
	return &this
}

// NewVirtualizationVmwareDatastoreClusterWithDefaults instantiates a new VirtualizationVmwareDatastoreCluster object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVirtualizationVmwareDatastoreClusterWithDefaults() *VirtualizationVmwareDatastoreCluster {
	this := VirtualizationVmwareDatastoreCluster{}
	var classId string = "virtualization.VmwareDatastoreCluster"
	this.ClassId = classId
	var objectType string = "virtualization.VmwareDatastoreCluster"
	this.ObjectType = objectType
	var status string = "Unknown"
	this.Status = &status
	return &this
}

// GetClassId returns the ClassId field value
func (o *VirtualizationVmwareDatastoreCluster) GetClassId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ClassId
}

// GetClassIdOk returns a tuple with the ClassId field value
// and a boolean to check if the value has been set.
func (o *VirtualizationVmwareDatastoreCluster) GetClassIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ClassId, true
}

// SetClassId sets field value
func (o *VirtualizationVmwareDatastoreCluster) SetClassId(v string) {
	o.ClassId = v
}

// GetDefaultClassId returns the default value "virtualization.VmwareDatastoreCluster" of the ClassId field.
func (o *VirtualizationVmwareDatastoreCluster) GetDefaultClassId() interface{} {
	return "virtualization.VmwareDatastoreCluster"
}

// GetObjectType returns the ObjectType field value
func (o *VirtualizationVmwareDatastoreCluster) GetObjectType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ObjectType
}

// GetObjectTypeOk returns a tuple with the ObjectType field value
// and a boolean to check if the value has been set.
func (o *VirtualizationVmwareDatastoreCluster) GetObjectTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ObjectType, true
}

// SetObjectType sets field value
func (o *VirtualizationVmwareDatastoreCluster) SetObjectType(v string) {
	o.ObjectType = v
}

// GetDefaultObjectType returns the default value "virtualization.VmwareDatastoreCluster" of the ObjectType field.
func (o *VirtualizationVmwareDatastoreCluster) GetDefaultObjectType() interface{} {
	return "virtualization.VmwareDatastoreCluster"
}

// GetAutomationLevel returns the AutomationLevel field value if set, zero value otherwise.
func (o *VirtualizationVmwareDatastoreCluster) GetAutomationLevel() string {
	if o == nil || IsNil(o.AutomationLevel) {
		var ret string
		return ret
	}
	return *o.AutomationLevel
}

// GetAutomationLevelOk returns a tuple with the AutomationLevel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualizationVmwareDatastoreCluster) GetAutomationLevelOk() (*string, bool) {
	if o == nil || IsNil(o.AutomationLevel) {
		return nil, false
	}
	return o.AutomationLevel, true
}

// HasAutomationLevel returns a boolean if a field has been set.
func (o *VirtualizationVmwareDatastoreCluster) HasAutomationLevel() bool {
	if o != nil && !IsNil(o.AutomationLevel) {
		return true
	}

	return false
}

// SetAutomationLevel gets a reference to the given string and assigns it to the AutomationLevel field.
func (o *VirtualizationVmwareDatastoreCluster) SetAutomationLevel(v string) {
	o.AutomationLevel = &v
}

// GetFreeSpaceThreshold returns the FreeSpaceThreshold field value if set, zero value otherwise.
func (o *VirtualizationVmwareDatastoreCluster) GetFreeSpaceThreshold() int64 {
	if o == nil || IsNil(o.FreeSpaceThreshold) {
		var ret int64
		return ret
	}
	return *o.FreeSpaceThreshold
}

// GetFreeSpaceThresholdOk returns a tuple with the FreeSpaceThreshold field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualizationVmwareDatastoreCluster) GetFreeSpaceThresholdOk() (*int64, bool) {
	if o == nil || IsNil(o.FreeSpaceThreshold) {
		return nil, false
	}
	return o.FreeSpaceThreshold, true
}

// HasFreeSpaceThreshold returns a boolean if a field has been set.
func (o *VirtualizationVmwareDatastoreCluster) HasFreeSpaceThreshold() bool {
	if o != nil && !IsNil(o.FreeSpaceThreshold) {
		return true
	}

	return false
}

// SetFreeSpaceThreshold gets a reference to the given int64 and assigns it to the FreeSpaceThreshold field.
func (o *VirtualizationVmwareDatastoreCluster) SetFreeSpaceThreshold(v int64) {
	o.FreeSpaceThreshold = &v
}

// GetInventoryPath returns the InventoryPath field value if set, zero value otherwise.
func (o *VirtualizationVmwareDatastoreCluster) GetInventoryPath() string {
	if o == nil || IsNil(o.InventoryPath) {
		var ret string
		return ret
	}
	return *o.InventoryPath
}

// GetInventoryPathOk returns a tuple with the InventoryPath field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualizationVmwareDatastoreCluster) GetInventoryPathOk() (*string, bool) {
	if o == nil || IsNil(o.InventoryPath) {
		return nil, false
	}
	return o.InventoryPath, true
}

// HasInventoryPath returns a boolean if a field has been set.
func (o *VirtualizationVmwareDatastoreCluster) HasInventoryPath() bool {
	if o != nil && !IsNil(o.InventoryPath) {
		return true
	}

	return false
}

// SetInventoryPath gets a reference to the given string and assigns it to the InventoryPath field.
func (o *VirtualizationVmwareDatastoreCluster) SetInventoryPath(v string) {
	o.InventoryPath = &v
}

// GetIoLatencyThreshold returns the IoLatencyThreshold field value if set, zero value otherwise.
func (o *VirtualizationVmwareDatastoreCluster) GetIoLatencyThreshold() int32 {
	if o == nil || IsNil(o.IoLatencyThreshold) {
		var ret int32
		return ret
	}
	return *o.IoLatencyThreshold
}

// GetIoLatencyThresholdOk returns a tuple with the IoLatencyThreshold field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualizationVmwareDatastoreCluster) GetIoLatencyThresholdOk() (*int32, bool) {
	if o == nil || IsNil(o.IoLatencyThreshold) {
		return nil, false
	}
	return o.IoLatencyThreshold, true
}

// HasIoLatencyThreshold returns a boolean if a field has been set.
func (o *VirtualizationVmwareDatastoreCluster) HasIoLatencyThreshold() bool {
	if o != nil && !IsNil(o.IoLatencyThreshold) {
		return true
	}

	return false
}

// SetIoLatencyThreshold gets a reference to the given int32 and assigns it to the IoLatencyThreshold field.
func (o *VirtualizationVmwareDatastoreCluster) SetIoLatencyThreshold(v int32) {
	o.IoLatencyThreshold = &v
}

// GetIoLoadBalanceAutomationMode returns the IoLoadBalanceAutomationMode field value if set, zero value otherwise.
func (o *VirtualizationVmwareDatastoreCluster) GetIoLoadBalanceAutomationMode() string {
	if o == nil || IsNil(o.IoLoadBalanceAutomationMode) {
		var ret string
		return ret
	}
	return *o.IoLoadBalanceAutomationMode
}

// GetIoLoadBalanceAutomationModeOk returns a tuple with the IoLoadBalanceAutomationMode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualizationVmwareDatastoreCluster) GetIoLoadBalanceAutomationModeOk() (*string, bool) {
	if o == nil || IsNil(o.IoLoadBalanceAutomationMode) {
		return nil, false
	}
	return o.IoLoadBalanceAutomationMode, true
}

// HasIoLoadBalanceAutomationMode returns a boolean if a field has been set.
func (o *VirtualizationVmwareDatastoreCluster) HasIoLoadBalanceAutomationMode() bool {
	if o != nil && !IsNil(o.IoLoadBalanceAutomationMode) {
		return true
	}

	return false
}

// SetIoLoadBalanceAutomationMode gets a reference to the given string and assigns it to the IoLoadBalanceAutomationMode field.
func (o *VirtualizationVmwareDatastoreCluster) SetIoLoadBalanceAutomationMode(v string) {
	o.IoLoadBalanceAutomationMode = &v
}

// GetIoLoadImbalanceThreshold returns the IoLoadImbalanceThreshold field value if set, zero value otherwise.
func (o *VirtualizationVmwareDatastoreCluster) GetIoLoadImbalanceThreshold() int32 {
	if o == nil || IsNil(o.IoLoadImbalanceThreshold) {
		var ret int32
		return ret
	}
	return *o.IoLoadImbalanceThreshold
}

// GetIoLoadImbalanceThresholdOk returns a tuple with the IoLoadImbalanceThreshold field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualizationVmwareDatastoreCluster) GetIoLoadImbalanceThresholdOk() (*int32, bool) {
	if o == nil || IsNil(o.IoLoadImbalanceThreshold) {
		return nil, false
	}
	return o.IoLoadImbalanceThreshold, true
}

// HasIoLoadImbalanceThreshold returns a boolean if a field has been set.
func (o *VirtualizationVmwareDatastoreCluster) HasIoLoadImbalanceThreshold() bool {
	if o != nil && !IsNil(o.IoLoadImbalanceThreshold) {
		return true
	}

	return false
}

// SetIoLoadImbalanceThreshold gets a reference to the given int32 and assigns it to the IoLoadImbalanceThreshold field.
func (o *VirtualizationVmwareDatastoreCluster) SetIoLoadImbalanceThreshold(v int32) {
	o.IoLoadImbalanceThreshold = &v
}

// GetIoMetricsEnabled returns the IoMetricsEnabled field value if set, zero value otherwise.
func (o *VirtualizationVmwareDatastoreCluster) GetIoMetricsEnabled() bool {
	if o == nil || IsNil(o.IoMetricsEnabled) {
		var ret bool
		return ret
	}
	return *o.IoMetricsEnabled
}

// GetIoMetricsEnabledOk returns a tuple with the IoMetricsEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualizationVmwareDatastoreCluster) GetIoMetricsEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.IoMetricsEnabled) {
		return nil, false
	}
	return o.IoMetricsEnabled, true
}

// HasIoMetricsEnabled returns a boolean if a field has been set.
func (o *VirtualizationVmwareDatastoreCluster) HasIoMetricsEnabled() bool {
	if o != nil && !IsNil(o.IoMetricsEnabled) {
		return true
	}

	return false
}

// SetIoMetricsEnabled gets a reference to the given bool and assigns it to the IoMetricsEnabled field.
func (o *VirtualizationVmwareDatastoreCluster) SetIoMetricsEnabled(v bool) {
	o.IoMetricsEnabled = &v
}

// GetMinSpaceUtilizationDifference returns the MinSpaceUtilizationDifference field value if set, zero value otherwise.
func (o *VirtualizationVmwareDatastoreCluster) GetMinSpaceUtilizationDifference() int32 {
	if o == nil || IsNil(o.MinSpaceUtilizationDifference) {
		var ret int32
		return ret
	}
	return *o.MinSpaceUtilizationDifference
}

// GetMinSpaceUtilizationDifferenceOk returns a tuple with the MinSpaceUtilizationDifference field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualizationVmwareDatastoreCluster) GetMinSpaceUtilizationDifferenceOk() (*int32, bool) {
	if o == nil || IsNil(o.MinSpaceUtilizationDifference) {
		return nil, false
	}
	return o.MinSpaceUtilizationDifference, true
}

// HasMinSpaceUtilizationDifference returns a boolean if a field has been set.
func (o *VirtualizationVmwareDatastoreCluster) HasMinSpaceUtilizationDifference() bool {
	if o != nil && !IsNil(o.MinSpaceUtilizationDifference) {
		return true
	}

	return false
}

// SetMinSpaceUtilizationDifference gets a reference to the given int32 and assigns it to the MinSpaceUtilizationDifference field.
func (o *VirtualizationVmwareDatastoreCluster) SetMinSpaceUtilizationDifference(v int32) {
	o.MinSpaceUtilizationDifference = &v
}

// GetPolicyEnforcementAutomationMode returns the PolicyEnforcementAutomationMode field value if set, zero value otherwise.
func (o *VirtualizationVmwareDatastoreCluster) GetPolicyEnforcementAutomationMode() string {
	if o == nil || IsNil(o.PolicyEnforcementAutomationMode) {
		var ret string
		return ret
	}
	return *o.PolicyEnforcementAutomationMode
}

// GetPolicyEnforcementAutomationModeOk returns a tuple with the PolicyEnforcementAutomationMode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualizationVmwareDatastoreCluster) GetPolicyEnforcementAutomationModeOk() (*string, bool) {
	if o == nil || IsNil(o.PolicyEnforcementAutomationMode) {
		return nil, false
	}
	return o.PolicyEnforcementAutomationMode, true
}

// HasPolicyEnforcementAutomationMode returns a boolean if a field has been set.
func (o *VirtualizationVmwareDatastoreCluster) HasPolicyEnforcementAutomationMode() bool {
	if o != nil && !IsNil(o.PolicyEnforcementAutomationMode) {
		return true
	}

	return false
}

// SetPolicyEnforcementAutomationMode gets a reference to the given string and assigns it to the PolicyEnforcementAutomationMode field.
func (o *VirtualizationVmwareDatastoreCluster) SetPolicyEnforcementAutomationMode(v string) {
	o.PolicyEnforcementAutomationMode = &v
}

// GetReservablePercentThreshold returns the ReservablePercentThreshold field value if set, zero value otherwise.
func (o *VirtualizationVmwareDatastoreCluster) GetReservablePercentThreshold() int32 {
	if o == nil || IsNil(o.ReservablePercentThreshold) {
		var ret int32
		return ret
	}
	return *o.ReservablePercentThreshold
}

// GetReservablePercentThresholdOk returns a tuple with the ReservablePercentThreshold field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualizationVmwareDatastoreCluster) GetReservablePercentThresholdOk() (*int32, bool) {
	if o == nil || IsNil(o.ReservablePercentThreshold) {
		return nil, false
	}
	return o.ReservablePercentThreshold, true
}

// HasReservablePercentThreshold returns a boolean if a field has been set.
func (o *VirtualizationVmwareDatastoreCluster) HasReservablePercentThreshold() bool {
	if o != nil && !IsNil(o.ReservablePercentThreshold) {
		return true
	}

	return false
}

// SetReservablePercentThreshold gets a reference to the given int32 and assigns it to the ReservablePercentThreshold field.
func (o *VirtualizationVmwareDatastoreCluster) SetReservablePercentThreshold(v int32) {
	o.ReservablePercentThreshold = &v
}

// GetRuleEnforcementAutomationMode returns the RuleEnforcementAutomationMode field value if set, zero value otherwise.
func (o *VirtualizationVmwareDatastoreCluster) GetRuleEnforcementAutomationMode() string {
	if o == nil || IsNil(o.RuleEnforcementAutomationMode) {
		var ret string
		return ret
	}
	return *o.RuleEnforcementAutomationMode
}

// GetRuleEnforcementAutomationModeOk returns a tuple with the RuleEnforcementAutomationMode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualizationVmwareDatastoreCluster) GetRuleEnforcementAutomationModeOk() (*string, bool) {
	if o == nil || IsNil(o.RuleEnforcementAutomationMode) {
		return nil, false
	}
	return o.RuleEnforcementAutomationMode, true
}

// HasRuleEnforcementAutomationMode returns a boolean if a field has been set.
func (o *VirtualizationVmwareDatastoreCluster) HasRuleEnforcementAutomationMode() bool {
	if o != nil && !IsNil(o.RuleEnforcementAutomationMode) {
		return true
	}

	return false
}

// SetRuleEnforcementAutomationMode gets a reference to the given string and assigns it to the RuleEnforcementAutomationMode field.
func (o *VirtualizationVmwareDatastoreCluster) SetRuleEnforcementAutomationMode(v string) {
	o.RuleEnforcementAutomationMode = &v
}

// GetSpaceLoadBalanceAutomationMode returns the SpaceLoadBalanceAutomationMode field value if set, zero value otherwise.
func (o *VirtualizationVmwareDatastoreCluster) GetSpaceLoadBalanceAutomationMode() string {
	if o == nil || IsNil(o.SpaceLoadBalanceAutomationMode) {
		var ret string
		return ret
	}
	return *o.SpaceLoadBalanceAutomationMode
}

// GetSpaceLoadBalanceAutomationModeOk returns a tuple with the SpaceLoadBalanceAutomationMode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualizationVmwareDatastoreCluster) GetSpaceLoadBalanceAutomationModeOk() (*string, bool) {
	if o == nil || IsNil(o.SpaceLoadBalanceAutomationMode) {
		return nil, false
	}
	return o.SpaceLoadBalanceAutomationMode, true
}

// HasSpaceLoadBalanceAutomationMode returns a boolean if a field has been set.
func (o *VirtualizationVmwareDatastoreCluster) HasSpaceLoadBalanceAutomationMode() bool {
	if o != nil && !IsNil(o.SpaceLoadBalanceAutomationMode) {
		return true
	}

	return false
}

// SetSpaceLoadBalanceAutomationMode gets a reference to the given string and assigns it to the SpaceLoadBalanceAutomationMode field.
func (o *VirtualizationVmwareDatastoreCluster) SetSpaceLoadBalanceAutomationMode(v string) {
	o.SpaceLoadBalanceAutomationMode = &v
}

// GetSpaceThresholdMode returns the SpaceThresholdMode field value if set, zero value otherwise.
func (o *VirtualizationVmwareDatastoreCluster) GetSpaceThresholdMode() string {
	if o == nil || IsNil(o.SpaceThresholdMode) {
		var ret string
		return ret
	}
	return *o.SpaceThresholdMode
}

// GetSpaceThresholdModeOk returns a tuple with the SpaceThresholdMode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualizationVmwareDatastoreCluster) GetSpaceThresholdModeOk() (*string, bool) {
	if o == nil || IsNil(o.SpaceThresholdMode) {
		return nil, false
	}
	return o.SpaceThresholdMode, true
}

// HasSpaceThresholdMode returns a boolean if a field has been set.
func (o *VirtualizationVmwareDatastoreCluster) HasSpaceThresholdMode() bool {
	if o != nil && !IsNil(o.SpaceThresholdMode) {
		return true
	}

	return false
}

// SetSpaceThresholdMode gets a reference to the given string and assigns it to the SpaceThresholdMode field.
func (o *VirtualizationVmwareDatastoreCluster) SetSpaceThresholdMode(v string) {
	o.SpaceThresholdMode = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *VirtualizationVmwareDatastoreCluster) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualizationVmwareDatastoreCluster) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *VirtualizationVmwareDatastoreCluster) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *VirtualizationVmwareDatastoreCluster) SetStatus(v string) {
	o.Status = &v
}

// GetStorageDrsEnabled returns the StorageDrsEnabled field value if set, zero value otherwise.
func (o *VirtualizationVmwareDatastoreCluster) GetStorageDrsEnabled() bool {
	if o == nil || IsNil(o.StorageDrsEnabled) {
		var ret bool
		return ret
	}
	return *o.StorageDrsEnabled
}

// GetStorageDrsEnabledOk returns a tuple with the StorageDrsEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualizationVmwareDatastoreCluster) GetStorageDrsEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.StorageDrsEnabled) {
		return nil, false
	}
	return o.StorageDrsEnabled, true
}

// HasStorageDrsEnabled returns a boolean if a field has been set.
func (o *VirtualizationVmwareDatastoreCluster) HasStorageDrsEnabled() bool {
	if o != nil && !IsNil(o.StorageDrsEnabled) {
		return true
	}

	return false
}

// SetStorageDrsEnabled gets a reference to the given bool and assigns it to the StorageDrsEnabled field.
func (o *VirtualizationVmwareDatastoreCluster) SetStorageDrsEnabled(v bool) {
	o.StorageDrsEnabled = &v
}

// GetUtilizedSpaceThreshold returns the UtilizedSpaceThreshold field value if set, zero value otherwise.
func (o *VirtualizationVmwareDatastoreCluster) GetUtilizedSpaceThreshold() int32 {
	if o == nil || IsNil(o.UtilizedSpaceThreshold) {
		var ret int32
		return ret
	}
	return *o.UtilizedSpaceThreshold
}

// GetUtilizedSpaceThresholdOk returns a tuple with the UtilizedSpaceThreshold field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualizationVmwareDatastoreCluster) GetUtilizedSpaceThresholdOk() (*int32, bool) {
	if o == nil || IsNil(o.UtilizedSpaceThreshold) {
		return nil, false
	}
	return o.UtilizedSpaceThreshold, true
}

// HasUtilizedSpaceThreshold returns a boolean if a field has been set.
func (o *VirtualizationVmwareDatastoreCluster) HasUtilizedSpaceThreshold() bool {
	if o != nil && !IsNil(o.UtilizedSpaceThreshold) {
		return true
	}

	return false
}

// SetUtilizedSpaceThreshold gets a reference to the given int32 and assigns it to the UtilizedSpaceThreshold field.
func (o *VirtualizationVmwareDatastoreCluster) SetUtilizedSpaceThreshold(v int32) {
	o.UtilizedSpaceThreshold = &v
}

// GetVmEvacuationAutomationMode returns the VmEvacuationAutomationMode field value if set, zero value otherwise.
func (o *VirtualizationVmwareDatastoreCluster) GetVmEvacuationAutomationMode() string {
	if o == nil || IsNil(o.VmEvacuationAutomationMode) {
		var ret string
		return ret
	}
	return *o.VmEvacuationAutomationMode
}

// GetVmEvacuationAutomationModeOk returns a tuple with the VmEvacuationAutomationMode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualizationVmwareDatastoreCluster) GetVmEvacuationAutomationModeOk() (*string, bool) {
	if o == nil || IsNil(o.VmEvacuationAutomationMode) {
		return nil, false
	}
	return o.VmEvacuationAutomationMode, true
}

// HasVmEvacuationAutomationMode returns a boolean if a field has been set.
func (o *VirtualizationVmwareDatastoreCluster) HasVmEvacuationAutomationMode() bool {
	if o != nil && !IsNil(o.VmEvacuationAutomationMode) {
		return true
	}

	return false
}

// SetVmEvacuationAutomationMode gets a reference to the given string and assigns it to the VmEvacuationAutomationMode field.
func (o *VirtualizationVmwareDatastoreCluster) SetVmEvacuationAutomationMode(v string) {
	o.VmEvacuationAutomationMode = &v
}

// GetDatacenter returns the Datacenter field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VirtualizationVmwareDatastoreCluster) GetDatacenter() VirtualizationVmwareDatacenterRelationship {
	if o == nil || IsNil(o.Datacenter.Get()) {
		var ret VirtualizationVmwareDatacenterRelationship
		return ret
	}
	return *o.Datacenter.Get()
}

// GetDatacenterOk returns a tuple with the Datacenter field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VirtualizationVmwareDatastoreCluster) GetDatacenterOk() (*VirtualizationVmwareDatacenterRelationship, bool) {
	if o == nil {
		return nil, false
	}
	return o.Datacenter.Get(), o.Datacenter.IsSet()
}

// HasDatacenter returns a boolean if a field has been set.
func (o *VirtualizationVmwareDatastoreCluster) HasDatacenter() bool {
	if o != nil && o.Datacenter.IsSet() {
		return true
	}

	return false
}

// SetDatacenter gets a reference to the given NullableVirtualizationVmwareDatacenterRelationship and assigns it to the Datacenter field.
func (o *VirtualizationVmwareDatastoreCluster) SetDatacenter(v VirtualizationVmwareDatacenterRelationship) {
	o.Datacenter.Set(&v)
}

// SetDatacenterNil sets the value for Datacenter to be an explicit nil
func (o *VirtualizationVmwareDatastoreCluster) SetDatacenterNil() {
	o.Datacenter.Set(nil)
}

// UnsetDatacenter ensures that no value is present for Datacenter, not even an explicit nil
func (o *VirtualizationVmwareDatastoreCluster) UnsetDatacenter() {
	o.Datacenter.Unset()
}

func (o VirtualizationVmwareDatastoreCluster) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VirtualizationVmwareDatastoreCluster) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	serializedVirtualizationBaseDatastoreCluster, errVirtualizationBaseDatastoreCluster := json.Marshal(o.VirtualizationBaseDatastoreCluster)
	if errVirtualizationBaseDatastoreCluster != nil {
		return map[string]interface{}{}, errVirtualizationBaseDatastoreCluster
	}
	errVirtualizationBaseDatastoreCluster = json.Unmarshal([]byte(serializedVirtualizationBaseDatastoreCluster), &toSerialize)
	if errVirtualizationBaseDatastoreCluster != nil {
		return map[string]interface{}{}, errVirtualizationBaseDatastoreCluster
	}
	if _, exists := toSerialize["ClassId"]; !exists {
		toSerialize["ClassId"] = o.GetDefaultClassId()
	}
	toSerialize["ClassId"] = o.ClassId
	if _, exists := toSerialize["ObjectType"]; !exists {
		toSerialize["ObjectType"] = o.GetDefaultObjectType()
	}
	toSerialize["ObjectType"] = o.ObjectType
	if !IsNil(o.AutomationLevel) {
		toSerialize["AutomationLevel"] = o.AutomationLevel
	}
	if !IsNil(o.FreeSpaceThreshold) {
		toSerialize["FreeSpaceThreshold"] = o.FreeSpaceThreshold
	}
	if !IsNil(o.InventoryPath) {
		toSerialize["InventoryPath"] = o.InventoryPath
	}
	if !IsNil(o.IoLatencyThreshold) {
		toSerialize["IoLatencyThreshold"] = o.IoLatencyThreshold
	}
	if !IsNil(o.IoLoadBalanceAutomationMode) {
		toSerialize["IoLoadBalanceAutomationMode"] = o.IoLoadBalanceAutomationMode
	}
	if !IsNil(o.IoLoadImbalanceThreshold) {
		toSerialize["IoLoadImbalanceThreshold"] = o.IoLoadImbalanceThreshold
	}
	if !IsNil(o.IoMetricsEnabled) {
		toSerialize["IoMetricsEnabled"] = o.IoMetricsEnabled
	}
	if !IsNil(o.MinSpaceUtilizationDifference) {
		toSerialize["MinSpaceUtilizationDifference"] = o.MinSpaceUtilizationDifference
	}
	if !IsNil(o.PolicyEnforcementAutomationMode) {
		toSerialize["PolicyEnforcementAutomationMode"] = o.PolicyEnforcementAutomationMode
	}
	if !IsNil(o.ReservablePercentThreshold) {
		toSerialize["ReservablePercentThreshold"] = o.ReservablePercentThreshold
	}
	if !IsNil(o.RuleEnforcementAutomationMode) {
		toSerialize["RuleEnforcementAutomationMode"] = o.RuleEnforcementAutomationMode
	}
	if !IsNil(o.SpaceLoadBalanceAutomationMode) {
		toSerialize["SpaceLoadBalanceAutomationMode"] = o.SpaceLoadBalanceAutomationMode
	}
	if !IsNil(o.SpaceThresholdMode) {
		toSerialize["SpaceThresholdMode"] = o.SpaceThresholdMode
	}
	if !IsNil(o.Status) {
		toSerialize["Status"] = o.Status
	}
	if !IsNil(o.StorageDrsEnabled) {
		toSerialize["StorageDrsEnabled"] = o.StorageDrsEnabled
	}
	if !IsNil(o.UtilizedSpaceThreshold) {
		toSerialize["UtilizedSpaceThreshold"] = o.UtilizedSpaceThreshold
	}
	if !IsNil(o.VmEvacuationAutomationMode) {
		toSerialize["VmEvacuationAutomationMode"] = o.VmEvacuationAutomationMode
	}
	if o.Datacenter.IsSet() {
		toSerialize["Datacenter"] = o.Datacenter.Get()
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *VirtualizationVmwareDatastoreCluster) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"ClassId",
		"ObjectType",
	}

	// defaultValueFuncMap captures the default values for required properties.
	// These values are used when required properties are missing from the payload.
	defaultValueFuncMap := map[string]func() interface{}{
		"ClassId":    o.GetDefaultClassId,
		"ObjectType": o.GetDefaultObjectType,
	}
	var defaultValueApplied bool
	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			if _, ok := defaultValueFuncMap[requiredProperty]; ok {
				allProperties[requiredProperty] = defaultValueFuncMap[requiredProperty]()
				defaultValueApplied = true
			}
		}
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	if defaultValueApplied {
		data, err = json.Marshal(allProperties)
		if err != nil {
			return err
		}
	}
	type VirtualizationVmwareDatastoreClusterWithoutEmbeddedStruct struct {
		// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.
		ClassId string `json:"ClassId"`
		// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
		ObjectType string `json:"ObjectType"`
		// The global automation level for all virtual machines in this datastore cluster.
		AutomationLevel *string `json:"AutomationLevel,omitempty"`
		// Minimum level of free space for each datastore that is the threshold for action.
		FreeSpaceThreshold *int64 `json:"FreeSpaceThreshold,omitempty"`
		// Inventory path of the Datastore Cluster.
		InventoryPath *string `json:"InventoryPath,omitempty"`
		// Minimum I/O latency for each datastore below which I/O load balancing moves are not considered.
		IoLatencyThreshold *int32 `json:"IoLatencyThreshold,omitempty"`
		// Storage DRS behavior when it generates recommendations for correcting I/O load imbalance in a datastore cluster.
		IoLoadBalanceAutomationMode *string `json:"IoLoadBalanceAutomationMode,omitempty"`
		// Amount of imbalance that Storage DRS should tolerate.
		IoLoadImbalanceThreshold *int32 `json:"IoLoadImbalanceThreshold,omitempty"`
		// Is I/O Metrics enabled for this datastore cluster.
		IoMetricsEnabled *bool `json:"IoMetricsEnabled,omitempty"`
		// Specify how much of an improvement DRS should look for before making a recommendation or performing a migration.
		MinSpaceUtilizationDifference *int32 `json:"MinSpaceUtilizationDifference,omitempty"`
		// Storage DRS behavior when it generates recommendations for correcting storage and VM policy violations in a datastore cluster.
		PolicyEnforcementAutomationMode *string `json:"PolicyEnforcementAutomationMode,omitempty"`
		// Storage DRS makes storage migration recommendations if total IOPs reservation of all VMs running on a datastore is higher than the specified threshold.
		ReservablePercentThreshold *int32 `json:"ReservablePercentThreshold,omitempty"`
		// Storage DRS behavior when it generates recommendations for correcting affinity rule violations in a datastore cluster.
		RuleEnforcementAutomationMode *string `json:"RuleEnforcementAutomationMode,omitempty"`
		// Storage DRS behavior when it generates recommendations for correcting space load imbalance in a datastore cluster.
		SpaceLoadBalanceAutomationMode *string `json:"SpaceLoadBalanceAutomationMode,omitempty"`
		// Runtime thresholds govern when Storage DRS performs or recommends migrations.
		SpaceThresholdMode *string `json:"SpaceThresholdMode,omitempty"`
		// Datastore cluster health status, as reported by the hypervisor platform. * `Unknown` - Entity status is unknown. * `Degraded` - State is degraded, and might impact normal operation of the entity. * `Critical` - Entity is in a critical state, impacting operations. * `Ok` - Entity status is in a stable state, operating normally.
		Status *string `json:"Status,omitempty"`
		// Is Storage DRS enabled for this datastore cluster.
		StorageDrsEnabled *bool `json:"StorageDrsEnabled,omitempty"`
		// Minimum level of consumed space for each datastore that is the threshold for action.
		UtilizedSpaceThreshold *int32 `json:"UtilizedSpaceThreshold,omitempty"`
		// Storage DRS behavior when it generates recommendations for VM evacuations from datastores in a datastore cluster.
		VmEvacuationAutomationMode *string                                            `json:"VmEvacuationAutomationMode,omitempty"`
		Datacenter                 NullableVirtualizationVmwareDatacenterRelationship `json:"Datacenter,omitempty"`
	}

	varVirtualizationVmwareDatastoreClusterWithoutEmbeddedStruct := VirtualizationVmwareDatastoreClusterWithoutEmbeddedStruct{}

	err = json.Unmarshal(data, &varVirtualizationVmwareDatastoreClusterWithoutEmbeddedStruct)
	if err == nil {
		varVirtualizationVmwareDatastoreCluster := _VirtualizationVmwareDatastoreCluster{}
		varVirtualizationVmwareDatastoreCluster.ClassId = varVirtualizationVmwareDatastoreClusterWithoutEmbeddedStruct.ClassId
		varVirtualizationVmwareDatastoreCluster.ObjectType = varVirtualizationVmwareDatastoreClusterWithoutEmbeddedStruct.ObjectType
		varVirtualizationVmwareDatastoreCluster.AutomationLevel = varVirtualizationVmwareDatastoreClusterWithoutEmbeddedStruct.AutomationLevel
		varVirtualizationVmwareDatastoreCluster.FreeSpaceThreshold = varVirtualizationVmwareDatastoreClusterWithoutEmbeddedStruct.FreeSpaceThreshold
		varVirtualizationVmwareDatastoreCluster.InventoryPath = varVirtualizationVmwareDatastoreClusterWithoutEmbeddedStruct.InventoryPath
		varVirtualizationVmwareDatastoreCluster.IoLatencyThreshold = varVirtualizationVmwareDatastoreClusterWithoutEmbeddedStruct.IoLatencyThreshold
		varVirtualizationVmwareDatastoreCluster.IoLoadBalanceAutomationMode = varVirtualizationVmwareDatastoreClusterWithoutEmbeddedStruct.IoLoadBalanceAutomationMode
		varVirtualizationVmwareDatastoreCluster.IoLoadImbalanceThreshold = varVirtualizationVmwareDatastoreClusterWithoutEmbeddedStruct.IoLoadImbalanceThreshold
		varVirtualizationVmwareDatastoreCluster.IoMetricsEnabled = varVirtualizationVmwareDatastoreClusterWithoutEmbeddedStruct.IoMetricsEnabled
		varVirtualizationVmwareDatastoreCluster.MinSpaceUtilizationDifference = varVirtualizationVmwareDatastoreClusterWithoutEmbeddedStruct.MinSpaceUtilizationDifference
		varVirtualizationVmwareDatastoreCluster.PolicyEnforcementAutomationMode = varVirtualizationVmwareDatastoreClusterWithoutEmbeddedStruct.PolicyEnforcementAutomationMode
		varVirtualizationVmwareDatastoreCluster.ReservablePercentThreshold = varVirtualizationVmwareDatastoreClusterWithoutEmbeddedStruct.ReservablePercentThreshold
		varVirtualizationVmwareDatastoreCluster.RuleEnforcementAutomationMode = varVirtualizationVmwareDatastoreClusterWithoutEmbeddedStruct.RuleEnforcementAutomationMode
		varVirtualizationVmwareDatastoreCluster.SpaceLoadBalanceAutomationMode = varVirtualizationVmwareDatastoreClusterWithoutEmbeddedStruct.SpaceLoadBalanceAutomationMode
		varVirtualizationVmwareDatastoreCluster.SpaceThresholdMode = varVirtualizationVmwareDatastoreClusterWithoutEmbeddedStruct.SpaceThresholdMode
		varVirtualizationVmwareDatastoreCluster.Status = varVirtualizationVmwareDatastoreClusterWithoutEmbeddedStruct.Status
		varVirtualizationVmwareDatastoreCluster.StorageDrsEnabled = varVirtualizationVmwareDatastoreClusterWithoutEmbeddedStruct.StorageDrsEnabled
		varVirtualizationVmwareDatastoreCluster.UtilizedSpaceThreshold = varVirtualizationVmwareDatastoreClusterWithoutEmbeddedStruct.UtilizedSpaceThreshold
		varVirtualizationVmwareDatastoreCluster.VmEvacuationAutomationMode = varVirtualizationVmwareDatastoreClusterWithoutEmbeddedStruct.VmEvacuationAutomationMode
		varVirtualizationVmwareDatastoreCluster.Datacenter = varVirtualizationVmwareDatastoreClusterWithoutEmbeddedStruct.Datacenter
		*o = VirtualizationVmwareDatastoreCluster(varVirtualizationVmwareDatastoreCluster)
	} else {
		return err
	}

	varVirtualizationVmwareDatastoreCluster := _VirtualizationVmwareDatastoreCluster{}

	err = json.Unmarshal(data, &varVirtualizationVmwareDatastoreCluster)
	if err == nil {
		o.VirtualizationBaseDatastoreCluster = varVirtualizationVmwareDatastoreCluster.VirtualizationBaseDatastoreCluster
	} else {
		return err
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "ClassId")
		delete(additionalProperties, "ObjectType")
		delete(additionalProperties, "AutomationLevel")
		delete(additionalProperties, "FreeSpaceThreshold")
		delete(additionalProperties, "InventoryPath")
		delete(additionalProperties, "IoLatencyThreshold")
		delete(additionalProperties, "IoLoadBalanceAutomationMode")
		delete(additionalProperties, "IoLoadImbalanceThreshold")
		delete(additionalProperties, "IoMetricsEnabled")
		delete(additionalProperties, "MinSpaceUtilizationDifference")
		delete(additionalProperties, "PolicyEnforcementAutomationMode")
		delete(additionalProperties, "ReservablePercentThreshold")
		delete(additionalProperties, "RuleEnforcementAutomationMode")
		delete(additionalProperties, "SpaceLoadBalanceAutomationMode")
		delete(additionalProperties, "SpaceThresholdMode")
		delete(additionalProperties, "Status")
		delete(additionalProperties, "StorageDrsEnabled")
		delete(additionalProperties, "UtilizedSpaceThreshold")
		delete(additionalProperties, "VmEvacuationAutomationMode")
		delete(additionalProperties, "Datacenter")

		// remove fields from embedded structs
		reflectVirtualizationBaseDatastoreCluster := reflect.ValueOf(o.VirtualizationBaseDatastoreCluster)
		for i := 0; i < reflectVirtualizationBaseDatastoreCluster.Type().NumField(); i++ {
			t := reflectVirtualizationBaseDatastoreCluster.Type().Field(i)

			if jsonTag := t.Tag.Get("json"); jsonTag != "" {
				fieldName := ""
				if commaIdx := strings.Index(jsonTag, ","); commaIdx > 0 {
					fieldName = jsonTag[:commaIdx]
				} else {
					fieldName = jsonTag
				}
				if fieldName != "AdditionalProperties" {
					delete(additionalProperties, fieldName)
				}
			}
		}

		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableVirtualizationVmwareDatastoreCluster struct {
	value *VirtualizationVmwareDatastoreCluster
	isSet bool
}

func (v NullableVirtualizationVmwareDatastoreCluster) Get() *VirtualizationVmwareDatastoreCluster {
	return v.value
}

func (v *NullableVirtualizationVmwareDatastoreCluster) Set(val *VirtualizationVmwareDatastoreCluster) {
	v.value = val
	v.isSet = true
}

func (v NullableVirtualizationVmwareDatastoreCluster) IsSet() bool {
	return v.isSet
}

func (v *NullableVirtualizationVmwareDatastoreCluster) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVirtualizationVmwareDatastoreCluster(val *VirtualizationVmwareDatastoreCluster) *NullableVirtualizationVmwareDatastoreCluster {
	return &NullableVirtualizationVmwareDatastoreCluster{value: val, isSet: true}
}

func (v NullableVirtualizationVmwareDatastoreCluster) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVirtualizationVmwareDatastoreCluster) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
