/*
Cisco Intersight

Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations. The Intersight OpenAPI document defines the complete set of properties that are returned in the HTTP response. From that perspective, a client can expect that no additional properties are returned, unless these properties are explicitly defined in the OpenAPI document. However, when a client uses an older version of the Intersight OpenAPI document, the server may send additional properties because the software is more recent than the client. In that case, the client may receive properties that it does not know about. Some generated SDKs perform a strict validation of the HTTP response body against the OpenAPI document.

API version: 1.0.11-2025092610
Contact: intersight@cisco.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package intersight

import (
	"encoding/json"
	"fmt"
	"reflect"
	"strings"
)

// checks if the StoragePureDirectoryPolicy type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &StoragePureDirectoryPolicy{}

// StoragePureDirectoryPolicy Displays a list of policies that are attached to directories.
type StoragePureDirectoryPolicy struct {
	MoBaseMo
	// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.
	ClassId string `json:"ClassId"`
	// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
	ObjectType string `json:"ObjectType"`
	// Returns a value of true if the managed directory of the export has been destroyed and is pending eradication. The export can be recovered by recovering the destroyed managed directory.
	Destroyed *bool `json:"Destroyed,omitempty"`
	// Returns a value of true if the export policy that manages this export is enabled.
	Enabled *bool `json:"Enabled,omitempty"`
	// The export name for accessing this export.
	Name *string `json:"Name,omitempty"`
	// The export policy that manages this export. An export can be managed by at most one export policy.
	PolicyType *string                              `json:"PolicyType,omitempty"`
	Array      NullableStoragePureArrayRelationship `json:"Array,omitempty"`
	// An array of relationships to storagePureDirectoryExport resources.
	ExportMembers []StoragePureDirectoryExportRelationship `json:"ExportMembers,omitempty"`
	// An array of relationships to storagePureNfsPolicyRule resources.
	NfsRules []StoragePureNfsPolicyRuleRelationship `json:"NfsRules,omitempty"`
	// An array of relationships to storagePureDirectoryQuota resources.
	QuotaMembers []StoragePureDirectoryQuotaRelationship `json:"QuotaMembers,omitempty"`
	// An array of relationships to storagePureQuotaPolicyRule resources.
	QuotaRules       []StoragePureQuotaPolicyRuleRelationship    `json:"QuotaRules,omitempty"`
	RegisteredDevice NullableAssetDeviceRegistrationRelationship `json:"RegisteredDevice,omitempty"`
	// An array of relationships to storagePureSmbPolicyRule resources.
	SmbRules             []StoragePureSmbPolicyRuleRelationship `json:"SmbRules,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _StoragePureDirectoryPolicy StoragePureDirectoryPolicy

// NewStoragePureDirectoryPolicy instantiates a new StoragePureDirectoryPolicy object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStoragePureDirectoryPolicy(classId string, objectType string) *StoragePureDirectoryPolicy {
	this := StoragePureDirectoryPolicy{}
	this.ClassId = classId
	this.ObjectType = objectType
	return &this
}

// NewStoragePureDirectoryPolicyWithDefaults instantiates a new StoragePureDirectoryPolicy object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStoragePureDirectoryPolicyWithDefaults() *StoragePureDirectoryPolicy {
	this := StoragePureDirectoryPolicy{}
	var classId string = "storage.PureDirectoryPolicy"
	this.ClassId = classId
	var objectType string = "storage.PureDirectoryPolicy"
	this.ObjectType = objectType
	return &this
}

// GetClassId returns the ClassId field value
func (o *StoragePureDirectoryPolicy) GetClassId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ClassId
}

// GetClassIdOk returns a tuple with the ClassId field value
// and a boolean to check if the value has been set.
func (o *StoragePureDirectoryPolicy) GetClassIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ClassId, true
}

// SetClassId sets field value
func (o *StoragePureDirectoryPolicy) SetClassId(v string) {
	o.ClassId = v
}

// GetDefaultClassId returns the default value "storage.PureDirectoryPolicy" of the ClassId field.
func (o *StoragePureDirectoryPolicy) GetDefaultClassId() interface{} {
	return "storage.PureDirectoryPolicy"
}

// GetObjectType returns the ObjectType field value
func (o *StoragePureDirectoryPolicy) GetObjectType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ObjectType
}

// GetObjectTypeOk returns a tuple with the ObjectType field value
// and a boolean to check if the value has been set.
func (o *StoragePureDirectoryPolicy) GetObjectTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ObjectType, true
}

// SetObjectType sets field value
func (o *StoragePureDirectoryPolicy) SetObjectType(v string) {
	o.ObjectType = v
}

// GetDefaultObjectType returns the default value "storage.PureDirectoryPolicy" of the ObjectType field.
func (o *StoragePureDirectoryPolicy) GetDefaultObjectType() interface{} {
	return "storage.PureDirectoryPolicy"
}

// GetDestroyed returns the Destroyed field value if set, zero value otherwise.
func (o *StoragePureDirectoryPolicy) GetDestroyed() bool {
	if o == nil || IsNil(o.Destroyed) {
		var ret bool
		return ret
	}
	return *o.Destroyed
}

// GetDestroyedOk returns a tuple with the Destroyed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StoragePureDirectoryPolicy) GetDestroyedOk() (*bool, bool) {
	if o == nil || IsNil(o.Destroyed) {
		return nil, false
	}
	return o.Destroyed, true
}

// HasDestroyed returns a boolean if a field has been set.
func (o *StoragePureDirectoryPolicy) HasDestroyed() bool {
	if o != nil && !IsNil(o.Destroyed) {
		return true
	}

	return false
}

// SetDestroyed gets a reference to the given bool and assigns it to the Destroyed field.
func (o *StoragePureDirectoryPolicy) SetDestroyed(v bool) {
	o.Destroyed = &v
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *StoragePureDirectoryPolicy) GetEnabled() bool {
	if o == nil || IsNil(o.Enabled) {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StoragePureDirectoryPolicy) GetEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.Enabled) {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *StoragePureDirectoryPolicy) HasEnabled() bool {
	if o != nil && !IsNil(o.Enabled) {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *StoragePureDirectoryPolicy) SetEnabled(v bool) {
	o.Enabled = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *StoragePureDirectoryPolicy) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StoragePureDirectoryPolicy) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *StoragePureDirectoryPolicy) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *StoragePureDirectoryPolicy) SetName(v string) {
	o.Name = &v
}

// GetPolicyType returns the PolicyType field value if set, zero value otherwise.
func (o *StoragePureDirectoryPolicy) GetPolicyType() string {
	if o == nil || IsNil(o.PolicyType) {
		var ret string
		return ret
	}
	return *o.PolicyType
}

// GetPolicyTypeOk returns a tuple with the PolicyType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StoragePureDirectoryPolicy) GetPolicyTypeOk() (*string, bool) {
	if o == nil || IsNil(o.PolicyType) {
		return nil, false
	}
	return o.PolicyType, true
}

// HasPolicyType returns a boolean if a field has been set.
func (o *StoragePureDirectoryPolicy) HasPolicyType() bool {
	if o != nil && !IsNil(o.PolicyType) {
		return true
	}

	return false
}

// SetPolicyType gets a reference to the given string and assigns it to the PolicyType field.
func (o *StoragePureDirectoryPolicy) SetPolicyType(v string) {
	o.PolicyType = &v
}

// GetArray returns the Array field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *StoragePureDirectoryPolicy) GetArray() StoragePureArrayRelationship {
	if o == nil || IsNil(o.Array.Get()) {
		var ret StoragePureArrayRelationship
		return ret
	}
	return *o.Array.Get()
}

// GetArrayOk returns a tuple with the Array field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *StoragePureDirectoryPolicy) GetArrayOk() (*StoragePureArrayRelationship, bool) {
	if o == nil {
		return nil, false
	}
	return o.Array.Get(), o.Array.IsSet()
}

// HasArray returns a boolean if a field has been set.
func (o *StoragePureDirectoryPolicy) HasArray() bool {
	if o != nil && o.Array.IsSet() {
		return true
	}

	return false
}

// SetArray gets a reference to the given NullableStoragePureArrayRelationship and assigns it to the Array field.
func (o *StoragePureDirectoryPolicy) SetArray(v StoragePureArrayRelationship) {
	o.Array.Set(&v)
}

// SetArrayNil sets the value for Array to be an explicit nil
func (o *StoragePureDirectoryPolicy) SetArrayNil() {
	o.Array.Set(nil)
}

// UnsetArray ensures that no value is present for Array, not even an explicit nil
func (o *StoragePureDirectoryPolicy) UnsetArray() {
	o.Array.Unset()
}

// GetExportMembers returns the ExportMembers field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *StoragePureDirectoryPolicy) GetExportMembers() []StoragePureDirectoryExportRelationship {
	if o == nil {
		var ret []StoragePureDirectoryExportRelationship
		return ret
	}
	return o.ExportMembers
}

// GetExportMembersOk returns a tuple with the ExportMembers field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *StoragePureDirectoryPolicy) GetExportMembersOk() ([]StoragePureDirectoryExportRelationship, bool) {
	if o == nil || IsNil(o.ExportMembers) {
		return nil, false
	}
	return o.ExportMembers, true
}

// HasExportMembers returns a boolean if a field has been set.
func (o *StoragePureDirectoryPolicy) HasExportMembers() bool {
	if o != nil && !IsNil(o.ExportMembers) {
		return true
	}

	return false
}

// SetExportMembers gets a reference to the given []StoragePureDirectoryExportRelationship and assigns it to the ExportMembers field.
func (o *StoragePureDirectoryPolicy) SetExportMembers(v []StoragePureDirectoryExportRelationship) {
	o.ExportMembers = v
}

// GetNfsRules returns the NfsRules field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *StoragePureDirectoryPolicy) GetNfsRules() []StoragePureNfsPolicyRuleRelationship {
	if o == nil {
		var ret []StoragePureNfsPolicyRuleRelationship
		return ret
	}
	return o.NfsRules
}

// GetNfsRulesOk returns a tuple with the NfsRules field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *StoragePureDirectoryPolicy) GetNfsRulesOk() ([]StoragePureNfsPolicyRuleRelationship, bool) {
	if o == nil || IsNil(o.NfsRules) {
		return nil, false
	}
	return o.NfsRules, true
}

// HasNfsRules returns a boolean if a field has been set.
func (o *StoragePureDirectoryPolicy) HasNfsRules() bool {
	if o != nil && !IsNil(o.NfsRules) {
		return true
	}

	return false
}

// SetNfsRules gets a reference to the given []StoragePureNfsPolicyRuleRelationship and assigns it to the NfsRules field.
func (o *StoragePureDirectoryPolicy) SetNfsRules(v []StoragePureNfsPolicyRuleRelationship) {
	o.NfsRules = v
}

// GetQuotaMembers returns the QuotaMembers field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *StoragePureDirectoryPolicy) GetQuotaMembers() []StoragePureDirectoryQuotaRelationship {
	if o == nil {
		var ret []StoragePureDirectoryQuotaRelationship
		return ret
	}
	return o.QuotaMembers
}

// GetQuotaMembersOk returns a tuple with the QuotaMembers field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *StoragePureDirectoryPolicy) GetQuotaMembersOk() ([]StoragePureDirectoryQuotaRelationship, bool) {
	if o == nil || IsNil(o.QuotaMembers) {
		return nil, false
	}
	return o.QuotaMembers, true
}

// HasQuotaMembers returns a boolean if a field has been set.
func (o *StoragePureDirectoryPolicy) HasQuotaMembers() bool {
	if o != nil && !IsNil(o.QuotaMembers) {
		return true
	}

	return false
}

// SetQuotaMembers gets a reference to the given []StoragePureDirectoryQuotaRelationship and assigns it to the QuotaMembers field.
func (o *StoragePureDirectoryPolicy) SetQuotaMembers(v []StoragePureDirectoryQuotaRelationship) {
	o.QuotaMembers = v
}

// GetQuotaRules returns the QuotaRules field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *StoragePureDirectoryPolicy) GetQuotaRules() []StoragePureQuotaPolicyRuleRelationship {
	if o == nil {
		var ret []StoragePureQuotaPolicyRuleRelationship
		return ret
	}
	return o.QuotaRules
}

// GetQuotaRulesOk returns a tuple with the QuotaRules field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *StoragePureDirectoryPolicy) GetQuotaRulesOk() ([]StoragePureQuotaPolicyRuleRelationship, bool) {
	if o == nil || IsNil(o.QuotaRules) {
		return nil, false
	}
	return o.QuotaRules, true
}

// HasQuotaRules returns a boolean if a field has been set.
func (o *StoragePureDirectoryPolicy) HasQuotaRules() bool {
	if o != nil && !IsNil(o.QuotaRules) {
		return true
	}

	return false
}

// SetQuotaRules gets a reference to the given []StoragePureQuotaPolicyRuleRelationship and assigns it to the QuotaRules field.
func (o *StoragePureDirectoryPolicy) SetQuotaRules(v []StoragePureQuotaPolicyRuleRelationship) {
	o.QuotaRules = v
}

// GetRegisteredDevice returns the RegisteredDevice field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *StoragePureDirectoryPolicy) GetRegisteredDevice() AssetDeviceRegistrationRelationship {
	if o == nil || IsNil(o.RegisteredDevice.Get()) {
		var ret AssetDeviceRegistrationRelationship
		return ret
	}
	return *o.RegisteredDevice.Get()
}

// GetRegisteredDeviceOk returns a tuple with the RegisteredDevice field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *StoragePureDirectoryPolicy) GetRegisteredDeviceOk() (*AssetDeviceRegistrationRelationship, bool) {
	if o == nil {
		return nil, false
	}
	return o.RegisteredDevice.Get(), o.RegisteredDevice.IsSet()
}

// HasRegisteredDevice returns a boolean if a field has been set.
func (o *StoragePureDirectoryPolicy) HasRegisteredDevice() bool {
	if o != nil && o.RegisteredDevice.IsSet() {
		return true
	}

	return false
}

// SetRegisteredDevice gets a reference to the given NullableAssetDeviceRegistrationRelationship and assigns it to the RegisteredDevice field.
func (o *StoragePureDirectoryPolicy) SetRegisteredDevice(v AssetDeviceRegistrationRelationship) {
	o.RegisteredDevice.Set(&v)
}

// SetRegisteredDeviceNil sets the value for RegisteredDevice to be an explicit nil
func (o *StoragePureDirectoryPolicy) SetRegisteredDeviceNil() {
	o.RegisteredDevice.Set(nil)
}

// UnsetRegisteredDevice ensures that no value is present for RegisteredDevice, not even an explicit nil
func (o *StoragePureDirectoryPolicy) UnsetRegisteredDevice() {
	o.RegisteredDevice.Unset()
}

// GetSmbRules returns the SmbRules field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *StoragePureDirectoryPolicy) GetSmbRules() []StoragePureSmbPolicyRuleRelationship {
	if o == nil {
		var ret []StoragePureSmbPolicyRuleRelationship
		return ret
	}
	return o.SmbRules
}

// GetSmbRulesOk returns a tuple with the SmbRules field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *StoragePureDirectoryPolicy) GetSmbRulesOk() ([]StoragePureSmbPolicyRuleRelationship, bool) {
	if o == nil || IsNil(o.SmbRules) {
		return nil, false
	}
	return o.SmbRules, true
}

// HasSmbRules returns a boolean if a field has been set.
func (o *StoragePureDirectoryPolicy) HasSmbRules() bool {
	if o != nil && !IsNil(o.SmbRules) {
		return true
	}

	return false
}

// SetSmbRules gets a reference to the given []StoragePureSmbPolicyRuleRelationship and assigns it to the SmbRules field.
func (o *StoragePureDirectoryPolicy) SetSmbRules(v []StoragePureSmbPolicyRuleRelationship) {
	o.SmbRules = v
}

func (o StoragePureDirectoryPolicy) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o StoragePureDirectoryPolicy) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	serializedMoBaseMo, errMoBaseMo := json.Marshal(o.MoBaseMo)
	if errMoBaseMo != nil {
		return map[string]interface{}{}, errMoBaseMo
	}
	errMoBaseMo = json.Unmarshal([]byte(serializedMoBaseMo), &toSerialize)
	if errMoBaseMo != nil {
		return map[string]interface{}{}, errMoBaseMo
	}
	if _, exists := toSerialize["ClassId"]; !exists {
		toSerialize["ClassId"] = o.GetDefaultClassId()
	}
	toSerialize["ClassId"] = o.ClassId
	if _, exists := toSerialize["ObjectType"]; !exists {
		toSerialize["ObjectType"] = o.GetDefaultObjectType()
	}
	toSerialize["ObjectType"] = o.ObjectType
	if !IsNil(o.Destroyed) {
		toSerialize["Destroyed"] = o.Destroyed
	}
	if !IsNil(o.Enabled) {
		toSerialize["Enabled"] = o.Enabled
	}
	if !IsNil(o.Name) {
		toSerialize["Name"] = o.Name
	}
	if !IsNil(o.PolicyType) {
		toSerialize["PolicyType"] = o.PolicyType
	}
	if o.Array.IsSet() {
		toSerialize["Array"] = o.Array.Get()
	}
	if o.ExportMembers != nil {
		toSerialize["ExportMembers"] = o.ExportMembers
	}
	if o.NfsRules != nil {
		toSerialize["NfsRules"] = o.NfsRules
	}
	if o.QuotaMembers != nil {
		toSerialize["QuotaMembers"] = o.QuotaMembers
	}
	if o.QuotaRules != nil {
		toSerialize["QuotaRules"] = o.QuotaRules
	}
	if o.RegisteredDevice.IsSet() {
		toSerialize["RegisteredDevice"] = o.RegisteredDevice.Get()
	}
	if o.SmbRules != nil {
		toSerialize["SmbRules"] = o.SmbRules
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *StoragePureDirectoryPolicy) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"ClassId",
		"ObjectType",
	}

	// defaultValueFuncMap captures the default values for required properties.
	// These values are used when required properties are missing from the payload.
	defaultValueFuncMap := map[string]func() interface{}{
		"ClassId":    o.GetDefaultClassId,
		"ObjectType": o.GetDefaultObjectType,
	}
	var defaultValueApplied bool
	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			if _, ok := defaultValueFuncMap[requiredProperty]; ok {
				allProperties[requiredProperty] = defaultValueFuncMap[requiredProperty]()
				defaultValueApplied = true
			}
		}
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	if defaultValueApplied {
		data, err = json.Marshal(allProperties)
		if err != nil {
			return err
		}
	}
	type StoragePureDirectoryPolicyWithoutEmbeddedStruct struct {
		// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.
		ClassId string `json:"ClassId"`
		// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
		ObjectType string `json:"ObjectType"`
		// Returns a value of true if the managed directory of the export has been destroyed and is pending eradication. The export can be recovered by recovering the destroyed managed directory.
		Destroyed *bool `json:"Destroyed,omitempty"`
		// Returns a value of true if the export policy that manages this export is enabled.
		Enabled *bool `json:"Enabled,omitempty"`
		// The export name for accessing this export.
		Name *string `json:"Name,omitempty"`
		// The export policy that manages this export. An export can be managed by at most one export policy.
		PolicyType *string                              `json:"PolicyType,omitempty"`
		Array      NullableStoragePureArrayRelationship `json:"Array,omitempty"`
		// An array of relationships to storagePureDirectoryExport resources.
		ExportMembers []StoragePureDirectoryExportRelationship `json:"ExportMembers,omitempty"`
		// An array of relationships to storagePureNfsPolicyRule resources.
		NfsRules []StoragePureNfsPolicyRuleRelationship `json:"NfsRules,omitempty"`
		// An array of relationships to storagePureDirectoryQuota resources.
		QuotaMembers []StoragePureDirectoryQuotaRelationship `json:"QuotaMembers,omitempty"`
		// An array of relationships to storagePureQuotaPolicyRule resources.
		QuotaRules       []StoragePureQuotaPolicyRuleRelationship    `json:"QuotaRules,omitempty"`
		RegisteredDevice NullableAssetDeviceRegistrationRelationship `json:"RegisteredDevice,omitempty"`
		// An array of relationships to storagePureSmbPolicyRule resources.
		SmbRules []StoragePureSmbPolicyRuleRelationship `json:"SmbRules,omitempty"`
	}

	varStoragePureDirectoryPolicyWithoutEmbeddedStruct := StoragePureDirectoryPolicyWithoutEmbeddedStruct{}

	err = json.Unmarshal(data, &varStoragePureDirectoryPolicyWithoutEmbeddedStruct)
	if err == nil {
		varStoragePureDirectoryPolicy := _StoragePureDirectoryPolicy{}
		varStoragePureDirectoryPolicy.ClassId = varStoragePureDirectoryPolicyWithoutEmbeddedStruct.ClassId
		varStoragePureDirectoryPolicy.ObjectType = varStoragePureDirectoryPolicyWithoutEmbeddedStruct.ObjectType
		varStoragePureDirectoryPolicy.Destroyed = varStoragePureDirectoryPolicyWithoutEmbeddedStruct.Destroyed
		varStoragePureDirectoryPolicy.Enabled = varStoragePureDirectoryPolicyWithoutEmbeddedStruct.Enabled
		varStoragePureDirectoryPolicy.Name = varStoragePureDirectoryPolicyWithoutEmbeddedStruct.Name
		varStoragePureDirectoryPolicy.PolicyType = varStoragePureDirectoryPolicyWithoutEmbeddedStruct.PolicyType
		varStoragePureDirectoryPolicy.Array = varStoragePureDirectoryPolicyWithoutEmbeddedStruct.Array
		varStoragePureDirectoryPolicy.ExportMembers = varStoragePureDirectoryPolicyWithoutEmbeddedStruct.ExportMembers
		varStoragePureDirectoryPolicy.NfsRules = varStoragePureDirectoryPolicyWithoutEmbeddedStruct.NfsRules
		varStoragePureDirectoryPolicy.QuotaMembers = varStoragePureDirectoryPolicyWithoutEmbeddedStruct.QuotaMembers
		varStoragePureDirectoryPolicy.QuotaRules = varStoragePureDirectoryPolicyWithoutEmbeddedStruct.QuotaRules
		varStoragePureDirectoryPolicy.RegisteredDevice = varStoragePureDirectoryPolicyWithoutEmbeddedStruct.RegisteredDevice
		varStoragePureDirectoryPolicy.SmbRules = varStoragePureDirectoryPolicyWithoutEmbeddedStruct.SmbRules
		*o = StoragePureDirectoryPolicy(varStoragePureDirectoryPolicy)
	} else {
		return err
	}

	varStoragePureDirectoryPolicy := _StoragePureDirectoryPolicy{}

	err = json.Unmarshal(data, &varStoragePureDirectoryPolicy)
	if err == nil {
		o.MoBaseMo = varStoragePureDirectoryPolicy.MoBaseMo
	} else {
		return err
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "ClassId")
		delete(additionalProperties, "ObjectType")
		delete(additionalProperties, "Destroyed")
		delete(additionalProperties, "Enabled")
		delete(additionalProperties, "Name")
		delete(additionalProperties, "PolicyType")
		delete(additionalProperties, "Array")
		delete(additionalProperties, "ExportMembers")
		delete(additionalProperties, "NfsRules")
		delete(additionalProperties, "QuotaMembers")
		delete(additionalProperties, "QuotaRules")
		delete(additionalProperties, "RegisteredDevice")
		delete(additionalProperties, "SmbRules")

		// remove fields from embedded structs
		reflectMoBaseMo := reflect.ValueOf(o.MoBaseMo)
		for i := 0; i < reflectMoBaseMo.Type().NumField(); i++ {
			t := reflectMoBaseMo.Type().Field(i)

			if jsonTag := t.Tag.Get("json"); jsonTag != "" {
				fieldName := ""
				if commaIdx := strings.Index(jsonTag, ","); commaIdx > 0 {
					fieldName = jsonTag[:commaIdx]
				} else {
					fieldName = jsonTag
				}
				if fieldName != "AdditionalProperties" {
					delete(additionalProperties, fieldName)
				}
			}
		}

		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableStoragePureDirectoryPolicy struct {
	value *StoragePureDirectoryPolicy
	isSet bool
}

func (v NullableStoragePureDirectoryPolicy) Get() *StoragePureDirectoryPolicy {
	return v.value
}

func (v *NullableStoragePureDirectoryPolicy) Set(val *StoragePureDirectoryPolicy) {
	v.value = val
	v.isSet = true
}

func (v NullableStoragePureDirectoryPolicy) IsSet() bool {
	return v.isSet
}

func (v *NullableStoragePureDirectoryPolicy) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStoragePureDirectoryPolicy(val *StoragePureDirectoryPolicy) *NullableStoragePureDirectoryPolicy {
	return &NullableStoragePureDirectoryPolicy{value: val, isSet: true}
}

func (v NullableStoragePureDirectoryPolicy) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStoragePureDirectoryPolicy) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
