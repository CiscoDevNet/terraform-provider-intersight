/*
Cisco Intersight

Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations. The Intersight OpenAPI document defines the complete set of properties that are returned in the HTTP response. From that perspective, a client can expect that no additional properties are returned, unless these properties are explicitly defined in the OpenAPI document. However, when a client uses an older version of the Intersight OpenAPI document, the server may send additional properties because the software is more recent than the client. In that case, the client may receive properties that it does not know about. Some generated SDKs perform a strict validation of the HTTP response body against the OpenAPI document.

API version: 1.0.11-2024100405
Contact: intersight@cisco.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package intersight

import (
	"encoding/json"
	"fmt"
	"reflect"
	"strings"
)

// checks if the ChassisBaseProfile type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ChassisBaseProfile{}

// ChassisBaseProfile Abstract class for chassis profile and profile template.
type ChassisBaseProfile struct {
	PolicyAbstractConfigProfile
	// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data. The enum values provides the list of concrete types that can be instantiated from this abstract type.
	ClassId string `json:"ClassId"`
	// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property. The enum values provides the list of concrete types that can be instantiated from this abstract type.
	ObjectType string `json:"ObjectType"`
	// The platform for which the chassis profile is applicable. It can either be a chassis that is operating in standalone mode or which is attached to a Fabric Interconnect managed by Intersight. * `FIAttached` - Chassis which are connected to a Fabric Interconnect that is managed by Intersight.
	TargetPlatform *string                                 `json:"TargetPlatform,omitempty"`
	ConfigResult   NullableChassisConfigResultRelationship `json:"ConfigResult,omitempty"`
	// An array of relationships to chassisIomProfile resources.
	IomProfiles          []ChassisIomProfileRelationship `json:"IomProfiles,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ChassisBaseProfile ChassisBaseProfile

// NewChassisBaseProfile instantiates a new ChassisBaseProfile object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewChassisBaseProfile(classId string, objectType string) *ChassisBaseProfile {
	this := ChassisBaseProfile{}
	this.ClassId = classId
	this.ObjectType = objectType
	var type_ string = "instance"
	this.Type = &type_
	var action string = "No-op"
	this.Action = &action
	var targetPlatform string = "FIAttached"
	this.TargetPlatform = &targetPlatform
	return &this
}

// NewChassisBaseProfileWithDefaults instantiates a new ChassisBaseProfile object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewChassisBaseProfileWithDefaults() *ChassisBaseProfile {
	this := ChassisBaseProfile{}
	var targetPlatform string = "FIAttached"
	this.TargetPlatform = &targetPlatform
	return &this
}

// GetClassId returns the ClassId field value
func (o *ChassisBaseProfile) GetClassId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ClassId
}

// GetClassIdOk returns a tuple with the ClassId field value
// and a boolean to check if the value has been set.
func (o *ChassisBaseProfile) GetClassIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ClassId, true
}

// SetClassId sets field value
func (o *ChassisBaseProfile) SetClassId(v string) {
	o.ClassId = v
}

// GetObjectType returns the ObjectType field value
func (o *ChassisBaseProfile) GetObjectType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ObjectType
}

// GetObjectTypeOk returns a tuple with the ObjectType field value
// and a boolean to check if the value has been set.
func (o *ChassisBaseProfile) GetObjectTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ObjectType, true
}

// SetObjectType sets field value
func (o *ChassisBaseProfile) SetObjectType(v string) {
	o.ObjectType = v
}

// GetTargetPlatform returns the TargetPlatform field value if set, zero value otherwise.
func (o *ChassisBaseProfile) GetTargetPlatform() string {
	if o == nil || IsNil(o.TargetPlatform) {
		var ret string
		return ret
	}
	return *o.TargetPlatform
}

// GetTargetPlatformOk returns a tuple with the TargetPlatform field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChassisBaseProfile) GetTargetPlatformOk() (*string, bool) {
	if o == nil || IsNil(o.TargetPlatform) {
		return nil, false
	}
	return o.TargetPlatform, true
}

// HasTargetPlatform returns a boolean if a field has been set.
func (o *ChassisBaseProfile) HasTargetPlatform() bool {
	if o != nil && !IsNil(o.TargetPlatform) {
		return true
	}

	return false
}

// SetTargetPlatform gets a reference to the given string and assigns it to the TargetPlatform field.
func (o *ChassisBaseProfile) SetTargetPlatform(v string) {
	o.TargetPlatform = &v
}

// GetConfigResult returns the ConfigResult field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ChassisBaseProfile) GetConfigResult() ChassisConfigResultRelationship {
	if o == nil || IsNil(o.ConfigResult.Get()) {
		var ret ChassisConfigResultRelationship
		return ret
	}
	return *o.ConfigResult.Get()
}

// GetConfigResultOk returns a tuple with the ConfigResult field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ChassisBaseProfile) GetConfigResultOk() (*ChassisConfigResultRelationship, bool) {
	if o == nil {
		return nil, false
	}
	return o.ConfigResult.Get(), o.ConfigResult.IsSet()
}

// HasConfigResult returns a boolean if a field has been set.
func (o *ChassisBaseProfile) HasConfigResult() bool {
	if o != nil && o.ConfigResult.IsSet() {
		return true
	}

	return false
}

// SetConfigResult gets a reference to the given NullableChassisConfigResultRelationship and assigns it to the ConfigResult field.
func (o *ChassisBaseProfile) SetConfigResult(v ChassisConfigResultRelationship) {
	o.ConfigResult.Set(&v)
}

// SetConfigResultNil sets the value for ConfigResult to be an explicit nil
func (o *ChassisBaseProfile) SetConfigResultNil() {
	o.ConfigResult.Set(nil)
}

// UnsetConfigResult ensures that no value is present for ConfigResult, not even an explicit nil
func (o *ChassisBaseProfile) UnsetConfigResult() {
	o.ConfigResult.Unset()
}

// GetIomProfiles returns the IomProfiles field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ChassisBaseProfile) GetIomProfiles() []ChassisIomProfileRelationship {
	if o == nil {
		var ret []ChassisIomProfileRelationship
		return ret
	}
	return o.IomProfiles
}

// GetIomProfilesOk returns a tuple with the IomProfiles field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ChassisBaseProfile) GetIomProfilesOk() ([]ChassisIomProfileRelationship, bool) {
	if o == nil || IsNil(o.IomProfiles) {
		return nil, false
	}
	return o.IomProfiles, true
}

// HasIomProfiles returns a boolean if a field has been set.
func (o *ChassisBaseProfile) HasIomProfiles() bool {
	if o != nil && !IsNil(o.IomProfiles) {
		return true
	}

	return false
}

// SetIomProfiles gets a reference to the given []ChassisIomProfileRelationship and assigns it to the IomProfiles field.
func (o *ChassisBaseProfile) SetIomProfiles(v []ChassisIomProfileRelationship) {
	o.IomProfiles = v
}

func (o ChassisBaseProfile) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ChassisBaseProfile) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	serializedPolicyAbstractConfigProfile, errPolicyAbstractConfigProfile := json.Marshal(o.PolicyAbstractConfigProfile)
	if errPolicyAbstractConfigProfile != nil {
		return map[string]interface{}{}, errPolicyAbstractConfigProfile
	}
	errPolicyAbstractConfigProfile = json.Unmarshal([]byte(serializedPolicyAbstractConfigProfile), &toSerialize)
	if errPolicyAbstractConfigProfile != nil {
		return map[string]interface{}{}, errPolicyAbstractConfigProfile
	}
	toSerialize["ClassId"] = o.ClassId
	toSerialize["ObjectType"] = o.ObjectType
	if !IsNil(o.TargetPlatform) {
		toSerialize["TargetPlatform"] = o.TargetPlatform
	}
	if o.ConfigResult.IsSet() {
		toSerialize["ConfigResult"] = o.ConfigResult.Get()
	}
	if o.IomProfiles != nil {
		toSerialize["IomProfiles"] = o.IomProfiles
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ChassisBaseProfile) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"ClassId",
		"ObjectType",
	}

	// defaultValueFuncMap captures the default values for required properties.
	// These values are used when required properties are missing from the payload.
	defaultValueFuncMap := map[string]func() interface{}{}
	var defaultValueApplied bool
	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			if _, ok := defaultValueFuncMap[requiredProperty]; ok {
				allProperties[requiredProperty] = defaultValueFuncMap[requiredProperty]()
				defaultValueApplied = true
			}
		}
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	if defaultValueApplied {
		data, err = json.Marshal(allProperties)
		if err != nil {
			return err
		}
	}
	type ChassisBaseProfileWithoutEmbeddedStruct struct {
		// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data. The enum values provides the list of concrete types that can be instantiated from this abstract type.
		ClassId string `json:"ClassId"`
		// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property. The enum values provides the list of concrete types that can be instantiated from this abstract type.
		ObjectType string `json:"ObjectType"`
		// The platform for which the chassis profile is applicable. It can either be a chassis that is operating in standalone mode or which is attached to a Fabric Interconnect managed by Intersight. * `FIAttached` - Chassis which are connected to a Fabric Interconnect that is managed by Intersight.
		TargetPlatform *string                                 `json:"TargetPlatform,omitempty"`
		ConfigResult   NullableChassisConfigResultRelationship `json:"ConfigResult,omitempty"`
		// An array of relationships to chassisIomProfile resources.
		IomProfiles []ChassisIomProfileRelationship `json:"IomProfiles,omitempty"`
	}

	varChassisBaseProfileWithoutEmbeddedStruct := ChassisBaseProfileWithoutEmbeddedStruct{}

	err = json.Unmarshal(data, &varChassisBaseProfileWithoutEmbeddedStruct)
	if err == nil {
		varChassisBaseProfile := _ChassisBaseProfile{}
		varChassisBaseProfile.ClassId = varChassisBaseProfileWithoutEmbeddedStruct.ClassId
		varChassisBaseProfile.ObjectType = varChassisBaseProfileWithoutEmbeddedStruct.ObjectType
		varChassisBaseProfile.TargetPlatform = varChassisBaseProfileWithoutEmbeddedStruct.TargetPlatform
		varChassisBaseProfile.ConfigResult = varChassisBaseProfileWithoutEmbeddedStruct.ConfigResult
		varChassisBaseProfile.IomProfiles = varChassisBaseProfileWithoutEmbeddedStruct.IomProfiles
		*o = ChassisBaseProfile(varChassisBaseProfile)
	} else {
		return err
	}

	varChassisBaseProfile := _ChassisBaseProfile{}

	err = json.Unmarshal(data, &varChassisBaseProfile)
	if err == nil {
		o.PolicyAbstractConfigProfile = varChassisBaseProfile.PolicyAbstractConfigProfile
	} else {
		return err
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "ClassId")
		delete(additionalProperties, "ObjectType")
		delete(additionalProperties, "TargetPlatform")
		delete(additionalProperties, "ConfigResult")
		delete(additionalProperties, "IomProfiles")

		// remove fields from embedded structs
		reflectPolicyAbstractConfigProfile := reflect.ValueOf(o.PolicyAbstractConfigProfile)
		for i := 0; i < reflectPolicyAbstractConfigProfile.Type().NumField(); i++ {
			t := reflectPolicyAbstractConfigProfile.Type().Field(i)

			if jsonTag := t.Tag.Get("json"); jsonTag != "" {
				fieldName := ""
				if commaIdx := strings.Index(jsonTag, ","); commaIdx > 0 {
					fieldName = jsonTag[:commaIdx]
				} else {
					fieldName = jsonTag
				}
				if fieldName != "AdditionalProperties" {
					delete(additionalProperties, fieldName)
				}
			}
		}

		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableChassisBaseProfile struct {
	value *ChassisBaseProfile
	isSet bool
}

func (v NullableChassisBaseProfile) Get() *ChassisBaseProfile {
	return v.value
}

func (v *NullableChassisBaseProfile) Set(val *ChassisBaseProfile) {
	v.value = val
	v.isSet = true
}

func (v NullableChassisBaseProfile) IsSet() bool {
	return v.isSet
}

func (v *NullableChassisBaseProfile) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableChassisBaseProfile(val *ChassisBaseProfile) *NullableChassisBaseProfile {
	return &NullableChassisBaseProfile{value: val, isSet: true}
}

func (v NullableChassisBaseProfile) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableChassisBaseProfile) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
