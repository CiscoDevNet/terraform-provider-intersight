/*
Cisco Intersight

Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations. The Intersight OpenAPI document defines the complete set of properties that are returned in the HTTP response. From that perspective, a client can expect that no additional properties are returned, unless these properties are explicitly defined in the OpenAPI document. However, when a client uses an older version of the Intersight OpenAPI document, the server may send additional properties because the software is more recent than the client. In that case, the client may receive properties that it does not know about. Some generated SDKs perform a strict validation of the HTTP response body against the OpenAPI document.

API version: 1.0.11-2024120409
Contact: intersight@cisco.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package intersight

import (
	"encoding/json"
	"fmt"
	"reflect"
	"strings"
)

// checks if the FunctionsFunction type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FunctionsFunction{}

// FunctionsFunction The managed object which has info about custom function to be built and deployed.
type FunctionsFunction struct {
	MoBaseMo
	// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.
	ClassId string `json:"ClassId"`
	// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
	ObjectType string `json:"ObjectType"`
	// Action of the function such as build, deploy, undeploy. * `None` - No action is set, this is the default value for action field. * `Publish` - Publish a Function that was saved or built.
	Action *string `json:"Action,omitempty"`
	// Custom function code to create the first function version, mandatory in function creation payload.
	Code *string `json:"Code,omitempty"`
	// The user identifier who created the Function.
	CreateUser *string `json:"CreateUser,omitempty"`
	// Description of the function.
	Description *string `json:"Description,omitempty"`
	// The display name of the function. Display name can only contain letters (a-z, A-Z), numbers (0-9), hyphen (-), period (.), colon (:), space ( ) or an underscore (_).
	DisplayName *string `json:"DisplayName,omitempty" validate:"regexp=^[a-zA-Z0-9]{1}[\\\\sa-zA-Z0-9_.:-]{0,91}$"`
	// The user identifier who last updated the Function.
	ModUser *string `json:"ModUser,omitempty"`
	// The name of the function. Name can only contain letters (a-z), numbers (0-9), hyphen (-).
	Name *string `json:"Name,omitempty" validate:"regexp=^[a-zA-Z0-9]{1}[a-zA-Z0-9-]{0,62}[a-zA-Z0-9]{1}$"`
	// Moid of runtime which is used to create the first function version, mandatory in function creation payload.
	RuntimeMoid *string `json:"RuntimeMoid,omitempty"`
	// The target version of the function, which is needed by action.
	Version              *int64                                       `json:"Version,omitempty"`
	Organization         NullableOrganizationOrganizationRelationship `json:"Organization,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _FunctionsFunction FunctionsFunction

// NewFunctionsFunction instantiates a new FunctionsFunction object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFunctionsFunction(classId string, objectType string) *FunctionsFunction {
	this := FunctionsFunction{}
	this.ClassId = classId
	this.ObjectType = objectType
	var action string = "None"
	this.Action = &action
	return &this
}

// NewFunctionsFunctionWithDefaults instantiates a new FunctionsFunction object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFunctionsFunctionWithDefaults() *FunctionsFunction {
	this := FunctionsFunction{}
	var classId string = "functions.Function"
	this.ClassId = classId
	var objectType string = "functions.Function"
	this.ObjectType = objectType
	var action string = "None"
	this.Action = &action
	return &this
}

// GetClassId returns the ClassId field value
func (o *FunctionsFunction) GetClassId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ClassId
}

// GetClassIdOk returns a tuple with the ClassId field value
// and a boolean to check if the value has been set.
func (o *FunctionsFunction) GetClassIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ClassId, true
}

// SetClassId sets field value
func (o *FunctionsFunction) SetClassId(v string) {
	o.ClassId = v
}

// GetDefaultClassId returns the default value "functions.Function" of the ClassId field.
func (o *FunctionsFunction) GetDefaultClassId() interface{} {
	return "functions.Function"
}

// GetObjectType returns the ObjectType field value
func (o *FunctionsFunction) GetObjectType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ObjectType
}

// GetObjectTypeOk returns a tuple with the ObjectType field value
// and a boolean to check if the value has been set.
func (o *FunctionsFunction) GetObjectTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ObjectType, true
}

// SetObjectType sets field value
func (o *FunctionsFunction) SetObjectType(v string) {
	o.ObjectType = v
}

// GetDefaultObjectType returns the default value "functions.Function" of the ObjectType field.
func (o *FunctionsFunction) GetDefaultObjectType() interface{} {
	return "functions.Function"
}

// GetAction returns the Action field value if set, zero value otherwise.
func (o *FunctionsFunction) GetAction() string {
	if o == nil || IsNil(o.Action) {
		var ret string
		return ret
	}
	return *o.Action
}

// GetActionOk returns a tuple with the Action field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FunctionsFunction) GetActionOk() (*string, bool) {
	if o == nil || IsNil(o.Action) {
		return nil, false
	}
	return o.Action, true
}

// HasAction returns a boolean if a field has been set.
func (o *FunctionsFunction) HasAction() bool {
	if o != nil && !IsNil(o.Action) {
		return true
	}

	return false
}

// SetAction gets a reference to the given string and assigns it to the Action field.
func (o *FunctionsFunction) SetAction(v string) {
	o.Action = &v
}

// GetCode returns the Code field value if set, zero value otherwise.
func (o *FunctionsFunction) GetCode() string {
	if o == nil || IsNil(o.Code) {
		var ret string
		return ret
	}
	return *o.Code
}

// GetCodeOk returns a tuple with the Code field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FunctionsFunction) GetCodeOk() (*string, bool) {
	if o == nil || IsNil(o.Code) {
		return nil, false
	}
	return o.Code, true
}

// HasCode returns a boolean if a field has been set.
func (o *FunctionsFunction) HasCode() bool {
	if o != nil && !IsNil(o.Code) {
		return true
	}

	return false
}

// SetCode gets a reference to the given string and assigns it to the Code field.
func (o *FunctionsFunction) SetCode(v string) {
	o.Code = &v
}

// GetCreateUser returns the CreateUser field value if set, zero value otherwise.
func (o *FunctionsFunction) GetCreateUser() string {
	if o == nil || IsNil(o.CreateUser) {
		var ret string
		return ret
	}
	return *o.CreateUser
}

// GetCreateUserOk returns a tuple with the CreateUser field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FunctionsFunction) GetCreateUserOk() (*string, bool) {
	if o == nil || IsNil(o.CreateUser) {
		return nil, false
	}
	return o.CreateUser, true
}

// HasCreateUser returns a boolean if a field has been set.
func (o *FunctionsFunction) HasCreateUser() bool {
	if o != nil && !IsNil(o.CreateUser) {
		return true
	}

	return false
}

// SetCreateUser gets a reference to the given string and assigns it to the CreateUser field.
func (o *FunctionsFunction) SetCreateUser(v string) {
	o.CreateUser = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *FunctionsFunction) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FunctionsFunction) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *FunctionsFunction) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *FunctionsFunction) SetDescription(v string) {
	o.Description = &v
}

// GetDisplayName returns the DisplayName field value if set, zero value otherwise.
func (o *FunctionsFunction) GetDisplayName() string {
	if o == nil || IsNil(o.DisplayName) {
		var ret string
		return ret
	}
	return *o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FunctionsFunction) GetDisplayNameOk() (*string, bool) {
	if o == nil || IsNil(o.DisplayName) {
		return nil, false
	}
	return o.DisplayName, true
}

// HasDisplayName returns a boolean if a field has been set.
func (o *FunctionsFunction) HasDisplayName() bool {
	if o != nil && !IsNil(o.DisplayName) {
		return true
	}

	return false
}

// SetDisplayName gets a reference to the given string and assigns it to the DisplayName field.
func (o *FunctionsFunction) SetDisplayName(v string) {
	o.DisplayName = &v
}

// GetModUser returns the ModUser field value if set, zero value otherwise.
func (o *FunctionsFunction) GetModUser() string {
	if o == nil || IsNil(o.ModUser) {
		var ret string
		return ret
	}
	return *o.ModUser
}

// GetModUserOk returns a tuple with the ModUser field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FunctionsFunction) GetModUserOk() (*string, bool) {
	if o == nil || IsNil(o.ModUser) {
		return nil, false
	}
	return o.ModUser, true
}

// HasModUser returns a boolean if a field has been set.
func (o *FunctionsFunction) HasModUser() bool {
	if o != nil && !IsNil(o.ModUser) {
		return true
	}

	return false
}

// SetModUser gets a reference to the given string and assigns it to the ModUser field.
func (o *FunctionsFunction) SetModUser(v string) {
	o.ModUser = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *FunctionsFunction) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FunctionsFunction) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *FunctionsFunction) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *FunctionsFunction) SetName(v string) {
	o.Name = &v
}

// GetRuntimeMoid returns the RuntimeMoid field value if set, zero value otherwise.
func (o *FunctionsFunction) GetRuntimeMoid() string {
	if o == nil || IsNil(o.RuntimeMoid) {
		var ret string
		return ret
	}
	return *o.RuntimeMoid
}

// GetRuntimeMoidOk returns a tuple with the RuntimeMoid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FunctionsFunction) GetRuntimeMoidOk() (*string, bool) {
	if o == nil || IsNil(o.RuntimeMoid) {
		return nil, false
	}
	return o.RuntimeMoid, true
}

// HasRuntimeMoid returns a boolean if a field has been set.
func (o *FunctionsFunction) HasRuntimeMoid() bool {
	if o != nil && !IsNil(o.RuntimeMoid) {
		return true
	}

	return false
}

// SetRuntimeMoid gets a reference to the given string and assigns it to the RuntimeMoid field.
func (o *FunctionsFunction) SetRuntimeMoid(v string) {
	o.RuntimeMoid = &v
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *FunctionsFunction) GetVersion() int64 {
	if o == nil || IsNil(o.Version) {
		var ret int64
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FunctionsFunction) GetVersionOk() (*int64, bool) {
	if o == nil || IsNil(o.Version) {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *FunctionsFunction) HasVersion() bool {
	if o != nil && !IsNil(o.Version) {
		return true
	}

	return false
}

// SetVersion gets a reference to the given int64 and assigns it to the Version field.
func (o *FunctionsFunction) SetVersion(v int64) {
	o.Version = &v
}

// GetOrganization returns the Organization field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FunctionsFunction) GetOrganization() OrganizationOrganizationRelationship {
	if o == nil || IsNil(o.Organization.Get()) {
		var ret OrganizationOrganizationRelationship
		return ret
	}
	return *o.Organization.Get()
}

// GetOrganizationOk returns a tuple with the Organization field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FunctionsFunction) GetOrganizationOk() (*OrganizationOrganizationRelationship, bool) {
	if o == nil {
		return nil, false
	}
	return o.Organization.Get(), o.Organization.IsSet()
}

// HasOrganization returns a boolean if a field has been set.
func (o *FunctionsFunction) HasOrganization() bool {
	if o != nil && o.Organization.IsSet() {
		return true
	}

	return false
}

// SetOrganization gets a reference to the given NullableOrganizationOrganizationRelationship and assigns it to the Organization field.
func (o *FunctionsFunction) SetOrganization(v OrganizationOrganizationRelationship) {
	o.Organization.Set(&v)
}

// SetOrganizationNil sets the value for Organization to be an explicit nil
func (o *FunctionsFunction) SetOrganizationNil() {
	o.Organization.Set(nil)
}

// UnsetOrganization ensures that no value is present for Organization, not even an explicit nil
func (o *FunctionsFunction) UnsetOrganization() {
	o.Organization.Unset()
}

func (o FunctionsFunction) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FunctionsFunction) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	serializedMoBaseMo, errMoBaseMo := json.Marshal(o.MoBaseMo)
	if errMoBaseMo != nil {
		return map[string]interface{}{}, errMoBaseMo
	}
	errMoBaseMo = json.Unmarshal([]byte(serializedMoBaseMo), &toSerialize)
	if errMoBaseMo != nil {
		return map[string]interface{}{}, errMoBaseMo
	}
	if _, exists := toSerialize["ClassId"]; !exists {
		toSerialize["ClassId"] = o.GetDefaultClassId()
	}
	toSerialize["ClassId"] = o.ClassId
	if _, exists := toSerialize["ObjectType"]; !exists {
		toSerialize["ObjectType"] = o.GetDefaultObjectType()
	}
	toSerialize["ObjectType"] = o.ObjectType
	if !IsNil(o.Action) {
		toSerialize["Action"] = o.Action
	}
	if !IsNil(o.Code) {
		toSerialize["Code"] = o.Code
	}
	if !IsNil(o.CreateUser) {
		toSerialize["CreateUser"] = o.CreateUser
	}
	if !IsNil(o.Description) {
		toSerialize["Description"] = o.Description
	}
	if !IsNil(o.DisplayName) {
		toSerialize["DisplayName"] = o.DisplayName
	}
	if !IsNil(o.ModUser) {
		toSerialize["ModUser"] = o.ModUser
	}
	if !IsNil(o.Name) {
		toSerialize["Name"] = o.Name
	}
	if !IsNil(o.RuntimeMoid) {
		toSerialize["RuntimeMoid"] = o.RuntimeMoid
	}
	if !IsNil(o.Version) {
		toSerialize["Version"] = o.Version
	}
	if o.Organization.IsSet() {
		toSerialize["Organization"] = o.Organization.Get()
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *FunctionsFunction) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"ClassId",
		"ObjectType",
	}

	// defaultValueFuncMap captures the default values for required properties.
	// These values are used when required properties are missing from the payload.
	defaultValueFuncMap := map[string]func() interface{}{
		"ClassId":    o.GetDefaultClassId,
		"ObjectType": o.GetDefaultObjectType,
	}
	var defaultValueApplied bool
	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			if _, ok := defaultValueFuncMap[requiredProperty]; ok {
				allProperties[requiredProperty] = defaultValueFuncMap[requiredProperty]()
				defaultValueApplied = true
			}
		}
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	if defaultValueApplied {
		data, err = json.Marshal(allProperties)
		if err != nil {
			return err
		}
	}
	type FunctionsFunctionWithoutEmbeddedStruct struct {
		// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.
		ClassId string `json:"ClassId"`
		// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
		ObjectType string `json:"ObjectType"`
		// Action of the function such as build, deploy, undeploy. * `None` - No action is set, this is the default value for action field. * `Publish` - Publish a Function that was saved or built.
		Action *string `json:"Action,omitempty"`
		// Custom function code to create the first function version, mandatory in function creation payload.
		Code *string `json:"Code,omitempty"`
		// The user identifier who created the Function.
		CreateUser *string `json:"CreateUser,omitempty"`
		// Description of the function.
		Description *string `json:"Description,omitempty"`
		// The display name of the function. Display name can only contain letters (a-z, A-Z), numbers (0-9), hyphen (-), period (.), colon (:), space ( ) or an underscore (_).
		DisplayName *string `json:"DisplayName,omitempty" validate:"regexp=^[a-zA-Z0-9]{1}[\\\\sa-zA-Z0-9_.:-]{0,91}$"`
		// The user identifier who last updated the Function.
		ModUser *string `json:"ModUser,omitempty"`
		// The name of the function. Name can only contain letters (a-z), numbers (0-9), hyphen (-).
		Name *string `json:"Name,omitempty" validate:"regexp=^[a-zA-Z0-9]{1}[a-zA-Z0-9-]{0,62}[a-zA-Z0-9]{1}$"`
		// Moid of runtime which is used to create the first function version, mandatory in function creation payload.
		RuntimeMoid *string `json:"RuntimeMoid,omitempty"`
		// The target version of the function, which is needed by action.
		Version      *int64                                       `json:"Version,omitempty"`
		Organization NullableOrganizationOrganizationRelationship `json:"Organization,omitempty"`
	}

	varFunctionsFunctionWithoutEmbeddedStruct := FunctionsFunctionWithoutEmbeddedStruct{}

	err = json.Unmarshal(data, &varFunctionsFunctionWithoutEmbeddedStruct)
	if err == nil {
		varFunctionsFunction := _FunctionsFunction{}
		varFunctionsFunction.ClassId = varFunctionsFunctionWithoutEmbeddedStruct.ClassId
		varFunctionsFunction.ObjectType = varFunctionsFunctionWithoutEmbeddedStruct.ObjectType
		varFunctionsFunction.Action = varFunctionsFunctionWithoutEmbeddedStruct.Action
		varFunctionsFunction.Code = varFunctionsFunctionWithoutEmbeddedStruct.Code
		varFunctionsFunction.CreateUser = varFunctionsFunctionWithoutEmbeddedStruct.CreateUser
		varFunctionsFunction.Description = varFunctionsFunctionWithoutEmbeddedStruct.Description
		varFunctionsFunction.DisplayName = varFunctionsFunctionWithoutEmbeddedStruct.DisplayName
		varFunctionsFunction.ModUser = varFunctionsFunctionWithoutEmbeddedStruct.ModUser
		varFunctionsFunction.Name = varFunctionsFunctionWithoutEmbeddedStruct.Name
		varFunctionsFunction.RuntimeMoid = varFunctionsFunctionWithoutEmbeddedStruct.RuntimeMoid
		varFunctionsFunction.Version = varFunctionsFunctionWithoutEmbeddedStruct.Version
		varFunctionsFunction.Organization = varFunctionsFunctionWithoutEmbeddedStruct.Organization
		*o = FunctionsFunction(varFunctionsFunction)
	} else {
		return err
	}

	varFunctionsFunction := _FunctionsFunction{}

	err = json.Unmarshal(data, &varFunctionsFunction)
	if err == nil {
		o.MoBaseMo = varFunctionsFunction.MoBaseMo
	} else {
		return err
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "ClassId")
		delete(additionalProperties, "ObjectType")
		delete(additionalProperties, "Action")
		delete(additionalProperties, "Code")
		delete(additionalProperties, "CreateUser")
		delete(additionalProperties, "Description")
		delete(additionalProperties, "DisplayName")
		delete(additionalProperties, "ModUser")
		delete(additionalProperties, "Name")
		delete(additionalProperties, "RuntimeMoid")
		delete(additionalProperties, "Version")
		delete(additionalProperties, "Organization")

		// remove fields from embedded structs
		reflectMoBaseMo := reflect.ValueOf(o.MoBaseMo)
		for i := 0; i < reflectMoBaseMo.Type().NumField(); i++ {
			t := reflectMoBaseMo.Type().Field(i)

			if jsonTag := t.Tag.Get("json"); jsonTag != "" {
				fieldName := ""
				if commaIdx := strings.Index(jsonTag, ","); commaIdx > 0 {
					fieldName = jsonTag[:commaIdx]
				} else {
					fieldName = jsonTag
				}
				if fieldName != "AdditionalProperties" {
					delete(additionalProperties, fieldName)
				}
			}
		}

		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableFunctionsFunction struct {
	value *FunctionsFunction
	isSet bool
}

func (v NullableFunctionsFunction) Get() *FunctionsFunction {
	return v.value
}

func (v *NullableFunctionsFunction) Set(val *FunctionsFunction) {
	v.value = val
	v.isSet = true
}

func (v NullableFunctionsFunction) IsSet() bool {
	return v.isSet
}

func (v *NullableFunctionsFunction) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFunctionsFunction(val *FunctionsFunction) *NullableFunctionsFunction {
	return &NullableFunctionsFunction{value: val, isSet: true}
}

func (v NullableFunctionsFunction) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFunctionsFunction) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
