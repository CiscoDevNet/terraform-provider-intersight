/*
Cisco Intersight

Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations. The Intersight OpenAPI document defines the complete set of properties that are returned in the HTTP response. From that perspective, a client can expect that no additional properties are returned, unless these properties are explicitly defined in the OpenAPI document. However, when a client uses an older version of the Intersight OpenAPI document, the server may send additional properties because the software is more recent than the client. In that case, the client may receive properties that it does not know about. Some generated SDKs perform a strict validation of the HTTP response body against the OpenAPI document.

API version: 1.0.11-2024100405
Contact: intersight@cisco.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package intersight

import (
	"encoding/json"
	"fmt"
	"reflect"
	"strings"
)

// checks if the LicenseIncCustomerOp type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LicenseIncCustomerOp{}

// LicenseIncCustomerOp Customer operation object to refresh the registration or start the trial period of the Intersight Nexus Cloud license tiers.
type LicenseIncCustomerOp struct {
	MoBaseMo
	// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.
	ClassId string `json:"ClassId"`
	// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
	ObjectType string `json:"ObjectType"`
	// The Nexus Cloud license administrative state. Set this property to 'true' to activate the Nexus Cloud license entitlements.
	ActiveAdmin *bool `json:"ActiveAdmin,omitempty"`
	// Enable trial for Nexus Cloud licensing.
	EnableTrial *bool `json:"EnableTrial,omitempty"`
	// The default Trial or Grace period the customer is entitled to.
	EvaluationPeriod *int64 `json:"EvaluationPeriod,omitempty"`
	// The number of days the trial Trial or Grace period is extended. The trial or grace period can be extended once.
	ExtraEvaluation *int64 `json:"ExtraEvaluation,omitempty"`
	// Terminate trial mode for Nexus Cloud.
	TerminateTrial       *bool                                         `json:"TerminateTrial,omitempty"`
	AccountLicenseData   NullableLicenseAccountLicenseDataRelationship `json:"AccountLicenseData,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _LicenseIncCustomerOp LicenseIncCustomerOp

// NewLicenseIncCustomerOp instantiates a new LicenseIncCustomerOp object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLicenseIncCustomerOp(classId string, objectType string) *LicenseIncCustomerOp {
	this := LicenseIncCustomerOp{}
	this.ClassId = classId
	this.ObjectType = objectType
	return &this
}

// NewLicenseIncCustomerOpWithDefaults instantiates a new LicenseIncCustomerOp object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLicenseIncCustomerOpWithDefaults() *LicenseIncCustomerOp {
	this := LicenseIncCustomerOp{}
	var classId string = "license.IncCustomerOp"
	this.ClassId = classId
	var objectType string = "license.IncCustomerOp"
	this.ObjectType = objectType
	return &this
}

// GetClassId returns the ClassId field value
func (o *LicenseIncCustomerOp) GetClassId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ClassId
}

// GetClassIdOk returns a tuple with the ClassId field value
// and a boolean to check if the value has been set.
func (o *LicenseIncCustomerOp) GetClassIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ClassId, true
}

// SetClassId sets field value
func (o *LicenseIncCustomerOp) SetClassId(v string) {
	o.ClassId = v
}

// GetDefaultClassId returns the default value "license.IncCustomerOp" of the ClassId field.
func (o *LicenseIncCustomerOp) GetDefaultClassId() interface{} {
	return "license.IncCustomerOp"
}

// GetObjectType returns the ObjectType field value
func (o *LicenseIncCustomerOp) GetObjectType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ObjectType
}

// GetObjectTypeOk returns a tuple with the ObjectType field value
// and a boolean to check if the value has been set.
func (o *LicenseIncCustomerOp) GetObjectTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ObjectType, true
}

// SetObjectType sets field value
func (o *LicenseIncCustomerOp) SetObjectType(v string) {
	o.ObjectType = v
}

// GetDefaultObjectType returns the default value "license.IncCustomerOp" of the ObjectType field.
func (o *LicenseIncCustomerOp) GetDefaultObjectType() interface{} {
	return "license.IncCustomerOp"
}

// GetActiveAdmin returns the ActiveAdmin field value if set, zero value otherwise.
func (o *LicenseIncCustomerOp) GetActiveAdmin() bool {
	if o == nil || IsNil(o.ActiveAdmin) {
		var ret bool
		return ret
	}
	return *o.ActiveAdmin
}

// GetActiveAdminOk returns a tuple with the ActiveAdmin field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LicenseIncCustomerOp) GetActiveAdminOk() (*bool, bool) {
	if o == nil || IsNil(o.ActiveAdmin) {
		return nil, false
	}
	return o.ActiveAdmin, true
}

// HasActiveAdmin returns a boolean if a field has been set.
func (o *LicenseIncCustomerOp) HasActiveAdmin() bool {
	if o != nil && !IsNil(o.ActiveAdmin) {
		return true
	}

	return false
}

// SetActiveAdmin gets a reference to the given bool and assigns it to the ActiveAdmin field.
func (o *LicenseIncCustomerOp) SetActiveAdmin(v bool) {
	o.ActiveAdmin = &v
}

// GetEnableTrial returns the EnableTrial field value if set, zero value otherwise.
func (o *LicenseIncCustomerOp) GetEnableTrial() bool {
	if o == nil || IsNil(o.EnableTrial) {
		var ret bool
		return ret
	}
	return *o.EnableTrial
}

// GetEnableTrialOk returns a tuple with the EnableTrial field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LicenseIncCustomerOp) GetEnableTrialOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableTrial) {
		return nil, false
	}
	return o.EnableTrial, true
}

// HasEnableTrial returns a boolean if a field has been set.
func (o *LicenseIncCustomerOp) HasEnableTrial() bool {
	if o != nil && !IsNil(o.EnableTrial) {
		return true
	}

	return false
}

// SetEnableTrial gets a reference to the given bool and assigns it to the EnableTrial field.
func (o *LicenseIncCustomerOp) SetEnableTrial(v bool) {
	o.EnableTrial = &v
}

// GetEvaluationPeriod returns the EvaluationPeriod field value if set, zero value otherwise.
func (o *LicenseIncCustomerOp) GetEvaluationPeriod() int64 {
	if o == nil || IsNil(o.EvaluationPeriod) {
		var ret int64
		return ret
	}
	return *o.EvaluationPeriod
}

// GetEvaluationPeriodOk returns a tuple with the EvaluationPeriod field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LicenseIncCustomerOp) GetEvaluationPeriodOk() (*int64, bool) {
	if o == nil || IsNil(o.EvaluationPeriod) {
		return nil, false
	}
	return o.EvaluationPeriod, true
}

// HasEvaluationPeriod returns a boolean if a field has been set.
func (o *LicenseIncCustomerOp) HasEvaluationPeriod() bool {
	if o != nil && !IsNil(o.EvaluationPeriod) {
		return true
	}

	return false
}

// SetEvaluationPeriod gets a reference to the given int64 and assigns it to the EvaluationPeriod field.
func (o *LicenseIncCustomerOp) SetEvaluationPeriod(v int64) {
	o.EvaluationPeriod = &v
}

// GetExtraEvaluation returns the ExtraEvaluation field value if set, zero value otherwise.
func (o *LicenseIncCustomerOp) GetExtraEvaluation() int64 {
	if o == nil || IsNil(o.ExtraEvaluation) {
		var ret int64
		return ret
	}
	return *o.ExtraEvaluation
}

// GetExtraEvaluationOk returns a tuple with the ExtraEvaluation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LicenseIncCustomerOp) GetExtraEvaluationOk() (*int64, bool) {
	if o == nil || IsNil(o.ExtraEvaluation) {
		return nil, false
	}
	return o.ExtraEvaluation, true
}

// HasExtraEvaluation returns a boolean if a field has been set.
func (o *LicenseIncCustomerOp) HasExtraEvaluation() bool {
	if o != nil && !IsNil(o.ExtraEvaluation) {
		return true
	}

	return false
}

// SetExtraEvaluation gets a reference to the given int64 and assigns it to the ExtraEvaluation field.
func (o *LicenseIncCustomerOp) SetExtraEvaluation(v int64) {
	o.ExtraEvaluation = &v
}

// GetTerminateTrial returns the TerminateTrial field value if set, zero value otherwise.
func (o *LicenseIncCustomerOp) GetTerminateTrial() bool {
	if o == nil || IsNil(o.TerminateTrial) {
		var ret bool
		return ret
	}
	return *o.TerminateTrial
}

// GetTerminateTrialOk returns a tuple with the TerminateTrial field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LicenseIncCustomerOp) GetTerminateTrialOk() (*bool, bool) {
	if o == nil || IsNil(o.TerminateTrial) {
		return nil, false
	}
	return o.TerminateTrial, true
}

// HasTerminateTrial returns a boolean if a field has been set.
func (o *LicenseIncCustomerOp) HasTerminateTrial() bool {
	if o != nil && !IsNil(o.TerminateTrial) {
		return true
	}

	return false
}

// SetTerminateTrial gets a reference to the given bool and assigns it to the TerminateTrial field.
func (o *LicenseIncCustomerOp) SetTerminateTrial(v bool) {
	o.TerminateTrial = &v
}

// GetAccountLicenseData returns the AccountLicenseData field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *LicenseIncCustomerOp) GetAccountLicenseData() LicenseAccountLicenseDataRelationship {
	if o == nil || IsNil(o.AccountLicenseData.Get()) {
		var ret LicenseAccountLicenseDataRelationship
		return ret
	}
	return *o.AccountLicenseData.Get()
}

// GetAccountLicenseDataOk returns a tuple with the AccountLicenseData field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *LicenseIncCustomerOp) GetAccountLicenseDataOk() (*LicenseAccountLicenseDataRelationship, bool) {
	if o == nil {
		return nil, false
	}
	return o.AccountLicenseData.Get(), o.AccountLicenseData.IsSet()
}

// HasAccountLicenseData returns a boolean if a field has been set.
func (o *LicenseIncCustomerOp) HasAccountLicenseData() bool {
	if o != nil && o.AccountLicenseData.IsSet() {
		return true
	}

	return false
}

// SetAccountLicenseData gets a reference to the given NullableLicenseAccountLicenseDataRelationship and assigns it to the AccountLicenseData field.
func (o *LicenseIncCustomerOp) SetAccountLicenseData(v LicenseAccountLicenseDataRelationship) {
	o.AccountLicenseData.Set(&v)
}

// SetAccountLicenseDataNil sets the value for AccountLicenseData to be an explicit nil
func (o *LicenseIncCustomerOp) SetAccountLicenseDataNil() {
	o.AccountLicenseData.Set(nil)
}

// UnsetAccountLicenseData ensures that no value is present for AccountLicenseData, not even an explicit nil
func (o *LicenseIncCustomerOp) UnsetAccountLicenseData() {
	o.AccountLicenseData.Unset()
}

func (o LicenseIncCustomerOp) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LicenseIncCustomerOp) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	serializedMoBaseMo, errMoBaseMo := json.Marshal(o.MoBaseMo)
	if errMoBaseMo != nil {
		return map[string]interface{}{}, errMoBaseMo
	}
	errMoBaseMo = json.Unmarshal([]byte(serializedMoBaseMo), &toSerialize)
	if errMoBaseMo != nil {
		return map[string]interface{}{}, errMoBaseMo
	}
	if _, exists := toSerialize["ClassId"]; !exists {
		toSerialize["ClassId"] = o.GetDefaultClassId()
	}
	toSerialize["ClassId"] = o.ClassId
	if _, exists := toSerialize["ObjectType"]; !exists {
		toSerialize["ObjectType"] = o.GetDefaultObjectType()
	}
	toSerialize["ObjectType"] = o.ObjectType
	if !IsNil(o.ActiveAdmin) {
		toSerialize["ActiveAdmin"] = o.ActiveAdmin
	}
	if !IsNil(o.EnableTrial) {
		toSerialize["EnableTrial"] = o.EnableTrial
	}
	if !IsNil(o.EvaluationPeriod) {
		toSerialize["EvaluationPeriod"] = o.EvaluationPeriod
	}
	if !IsNil(o.ExtraEvaluation) {
		toSerialize["ExtraEvaluation"] = o.ExtraEvaluation
	}
	if !IsNil(o.TerminateTrial) {
		toSerialize["TerminateTrial"] = o.TerminateTrial
	}
	if o.AccountLicenseData.IsSet() {
		toSerialize["AccountLicenseData"] = o.AccountLicenseData.Get()
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *LicenseIncCustomerOp) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"ClassId",
		"ObjectType",
	}

	// defaultValueFuncMap captures the default values for required properties.
	// These values are used when required properties are missing from the payload.
	defaultValueFuncMap := map[string]func() interface{}{
		"ClassId":    o.GetDefaultClassId,
		"ObjectType": o.GetDefaultObjectType,
	}
	var defaultValueApplied bool
	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			if _, ok := defaultValueFuncMap[requiredProperty]; ok {
				allProperties[requiredProperty] = defaultValueFuncMap[requiredProperty]()
				defaultValueApplied = true
			}
		}
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	if defaultValueApplied {
		data, err = json.Marshal(allProperties)
		if err != nil {
			return err
		}
	}
	type LicenseIncCustomerOpWithoutEmbeddedStruct struct {
		// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.
		ClassId string `json:"ClassId"`
		// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
		ObjectType string `json:"ObjectType"`
		// The Nexus Cloud license administrative state. Set this property to 'true' to activate the Nexus Cloud license entitlements.
		ActiveAdmin *bool `json:"ActiveAdmin,omitempty"`
		// Enable trial for Nexus Cloud licensing.
		EnableTrial *bool `json:"EnableTrial,omitempty"`
		// The default Trial or Grace period the customer is entitled to.
		EvaluationPeriod *int64 `json:"EvaluationPeriod,omitempty"`
		// The number of days the trial Trial or Grace period is extended. The trial or grace period can be extended once.
		ExtraEvaluation *int64 `json:"ExtraEvaluation,omitempty"`
		// Terminate trial mode for Nexus Cloud.
		TerminateTrial     *bool                                         `json:"TerminateTrial,omitempty"`
		AccountLicenseData NullableLicenseAccountLicenseDataRelationship `json:"AccountLicenseData,omitempty"`
	}

	varLicenseIncCustomerOpWithoutEmbeddedStruct := LicenseIncCustomerOpWithoutEmbeddedStruct{}

	err = json.Unmarshal(data, &varLicenseIncCustomerOpWithoutEmbeddedStruct)
	if err == nil {
		varLicenseIncCustomerOp := _LicenseIncCustomerOp{}
		varLicenseIncCustomerOp.ClassId = varLicenseIncCustomerOpWithoutEmbeddedStruct.ClassId
		varLicenseIncCustomerOp.ObjectType = varLicenseIncCustomerOpWithoutEmbeddedStruct.ObjectType
		varLicenseIncCustomerOp.ActiveAdmin = varLicenseIncCustomerOpWithoutEmbeddedStruct.ActiveAdmin
		varLicenseIncCustomerOp.EnableTrial = varLicenseIncCustomerOpWithoutEmbeddedStruct.EnableTrial
		varLicenseIncCustomerOp.EvaluationPeriod = varLicenseIncCustomerOpWithoutEmbeddedStruct.EvaluationPeriod
		varLicenseIncCustomerOp.ExtraEvaluation = varLicenseIncCustomerOpWithoutEmbeddedStruct.ExtraEvaluation
		varLicenseIncCustomerOp.TerminateTrial = varLicenseIncCustomerOpWithoutEmbeddedStruct.TerminateTrial
		varLicenseIncCustomerOp.AccountLicenseData = varLicenseIncCustomerOpWithoutEmbeddedStruct.AccountLicenseData
		*o = LicenseIncCustomerOp(varLicenseIncCustomerOp)
	} else {
		return err
	}

	varLicenseIncCustomerOp := _LicenseIncCustomerOp{}

	err = json.Unmarshal(data, &varLicenseIncCustomerOp)
	if err == nil {
		o.MoBaseMo = varLicenseIncCustomerOp.MoBaseMo
	} else {
		return err
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "ClassId")
		delete(additionalProperties, "ObjectType")
		delete(additionalProperties, "ActiveAdmin")
		delete(additionalProperties, "EnableTrial")
		delete(additionalProperties, "EvaluationPeriod")
		delete(additionalProperties, "ExtraEvaluation")
		delete(additionalProperties, "TerminateTrial")
		delete(additionalProperties, "AccountLicenseData")

		// remove fields from embedded structs
		reflectMoBaseMo := reflect.ValueOf(o.MoBaseMo)
		for i := 0; i < reflectMoBaseMo.Type().NumField(); i++ {
			t := reflectMoBaseMo.Type().Field(i)

			if jsonTag := t.Tag.Get("json"); jsonTag != "" {
				fieldName := ""
				if commaIdx := strings.Index(jsonTag, ","); commaIdx > 0 {
					fieldName = jsonTag[:commaIdx]
				} else {
					fieldName = jsonTag
				}
				if fieldName != "AdditionalProperties" {
					delete(additionalProperties, fieldName)
				}
			}
		}

		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableLicenseIncCustomerOp struct {
	value *LicenseIncCustomerOp
	isSet bool
}

func (v NullableLicenseIncCustomerOp) Get() *LicenseIncCustomerOp {
	return v.value
}

func (v *NullableLicenseIncCustomerOp) Set(val *LicenseIncCustomerOp) {
	v.value = val
	v.isSet = true
}

func (v NullableLicenseIncCustomerOp) IsSet() bool {
	return v.isSet
}

func (v *NullableLicenseIncCustomerOp) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLicenseIncCustomerOp(val *LicenseIncCustomerOp) *NullableLicenseIncCustomerOp {
	return &NullableLicenseIncCustomerOp{value: val, isSet: true}
}

func (v NullableLicenseIncCustomerOp) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLicenseIncCustomerOp) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
