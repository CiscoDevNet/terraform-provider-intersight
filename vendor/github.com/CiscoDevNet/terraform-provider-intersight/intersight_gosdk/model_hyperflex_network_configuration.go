/*
Cisco Intersight

Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations. The Intersight OpenAPI document defines the complete set of properties that are returned in the HTTP response. From that perspective, a client can expect that no additional properties are returned, unless these properties are explicitly defined in the OpenAPI document. However, when a client uses an older version of the Intersight OpenAPI document, the server may send additional properties because the software is more recent than the client. In that case, the client may receive properties that it does not know about. Some generated SDKs perform a strict validation of the HTTP response body against the OpenAPI document.

API version: 1.0.11-2024100405
Contact: intersight@cisco.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package intersight

import (
	"encoding/json"
	"fmt"
	"reflect"
	"strings"
)

// checks if the HyperflexNetworkConfiguration type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &HyperflexNetworkConfiguration{}

// HyperflexNetworkConfiguration The network configuration information including data and management IPs as well as their netmasks.
type HyperflexNetworkConfiguration struct {
	MoBaseComplexType
	// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.
	ClassId string `json:"ClassId"`
	// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
	ObjectType string `json:"ObjectType"`
	// The data gateway IP of the HyperFlex cluster.
	DataGatewayIpAddress *string `json:"DataGatewayIpAddress,omitempty"`
	// The data IP of the HyperFlex cluster.
	DataIpAddress *string `json:"DataIpAddress,omitempty"`
	// The data subnet mask of the HyperFlex cluster.
	DataNetmask *string `json:"DataNetmask,omitempty" validate:"regexp=^$|^(((255\\\\.){3}(255|254|252|248|240|224|192|128|0+))|((255\\\\.){2}(255|254|252|248|240|224|192|128|0+)\\\\.0)|((255\\\\.)(255|254|252|248|240|224|192|128|0+)(\\\\.0+){2})|((255|254|252|248|240|224|192|128|0+)(\\\\.0+){3}))$"`
	// The data VLAN of the HyperFlex cluster.
	DataVlan *int64 `json:"DataVlan,omitempty"`
	// The DNS domain suffix configured for the HyperFlex Cluster.
	DnsSuffix *string `json:"DnsSuffix,omitempty"`
	// The jumbo frame enablement of the HyperFlex cluster.
	JumboFrameEnabled *bool `json:"JumboFrameEnabled,omitempty"`
	// The live migration VLAN ID of the HyperFlex cluster.
	LiveMigrationVlan *int64 `json:"LiveMigrationVlan,omitempty"`
	// The management gateway IP of the HyperFlex cluster.
	MgmtGatewayIpAddress *string `json:"MgmtGatewayIpAddress,omitempty"`
	// The management IP or the hostname of the HyperFlex cluster.
	MgmtIpAddress *string `json:"MgmtIpAddress,omitempty"`
	// The management subnet mask of the HyperFlex cluster.
	MgmtNetmask *string `json:"MgmtNetmask,omitempty" validate:"regexp=^$|^(((255\\\\.){3}(255|254|252|248|240|224|192|128|0+))|((255\\\\.){2}(255|254|252|248|240|224|192|128|0+)\\\\.0)|((255\\\\.)(255|254|252|248|240|224|192|128|0+)(\\\\.0+){2})|((255|254|252|248|240|224|192|128|0+)(\\\\.0+){3}))$"`
	// The management VLAN ID of the HyperFlex cluster.
	MgmtVlan *int64 `json:"MgmtVlan,omitempty"`
	// The timezone configured on the HyperFlex Cluster.
	Timezone             *string `json:"Timezone,omitempty"`
	VmNetworkVlans       []int64 `json:"VmNetworkVlans,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _HyperflexNetworkConfiguration HyperflexNetworkConfiguration

// NewHyperflexNetworkConfiguration instantiates a new HyperflexNetworkConfiguration object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHyperflexNetworkConfiguration(classId string, objectType string) *HyperflexNetworkConfiguration {
	this := HyperflexNetworkConfiguration{}
	this.ClassId = classId
	this.ObjectType = objectType
	return &this
}

// NewHyperflexNetworkConfigurationWithDefaults instantiates a new HyperflexNetworkConfiguration object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHyperflexNetworkConfigurationWithDefaults() *HyperflexNetworkConfiguration {
	this := HyperflexNetworkConfiguration{}
	var classId string = "hyperflex.NetworkConfiguration"
	this.ClassId = classId
	var objectType string = "hyperflex.NetworkConfiguration"
	this.ObjectType = objectType
	return &this
}

// GetClassId returns the ClassId field value
func (o *HyperflexNetworkConfiguration) GetClassId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ClassId
}

// GetClassIdOk returns a tuple with the ClassId field value
// and a boolean to check if the value has been set.
func (o *HyperflexNetworkConfiguration) GetClassIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ClassId, true
}

// SetClassId sets field value
func (o *HyperflexNetworkConfiguration) SetClassId(v string) {
	o.ClassId = v
}

// GetDefaultClassId returns the default value "hyperflex.NetworkConfiguration" of the ClassId field.
func (o *HyperflexNetworkConfiguration) GetDefaultClassId() interface{} {
	return "hyperflex.NetworkConfiguration"
}

// GetObjectType returns the ObjectType field value
func (o *HyperflexNetworkConfiguration) GetObjectType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ObjectType
}

// GetObjectTypeOk returns a tuple with the ObjectType field value
// and a boolean to check if the value has been set.
func (o *HyperflexNetworkConfiguration) GetObjectTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ObjectType, true
}

// SetObjectType sets field value
func (o *HyperflexNetworkConfiguration) SetObjectType(v string) {
	o.ObjectType = v
}

// GetDefaultObjectType returns the default value "hyperflex.NetworkConfiguration" of the ObjectType field.
func (o *HyperflexNetworkConfiguration) GetDefaultObjectType() interface{} {
	return "hyperflex.NetworkConfiguration"
}

// GetDataGatewayIpAddress returns the DataGatewayIpAddress field value if set, zero value otherwise.
func (o *HyperflexNetworkConfiguration) GetDataGatewayIpAddress() string {
	if o == nil || IsNil(o.DataGatewayIpAddress) {
		var ret string
		return ret
	}
	return *o.DataGatewayIpAddress
}

// GetDataGatewayIpAddressOk returns a tuple with the DataGatewayIpAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HyperflexNetworkConfiguration) GetDataGatewayIpAddressOk() (*string, bool) {
	if o == nil || IsNil(o.DataGatewayIpAddress) {
		return nil, false
	}
	return o.DataGatewayIpAddress, true
}

// HasDataGatewayIpAddress returns a boolean if a field has been set.
func (o *HyperflexNetworkConfiguration) HasDataGatewayIpAddress() bool {
	if o != nil && !IsNil(o.DataGatewayIpAddress) {
		return true
	}

	return false
}

// SetDataGatewayIpAddress gets a reference to the given string and assigns it to the DataGatewayIpAddress field.
func (o *HyperflexNetworkConfiguration) SetDataGatewayIpAddress(v string) {
	o.DataGatewayIpAddress = &v
}

// GetDataIpAddress returns the DataIpAddress field value if set, zero value otherwise.
func (o *HyperflexNetworkConfiguration) GetDataIpAddress() string {
	if o == nil || IsNil(o.DataIpAddress) {
		var ret string
		return ret
	}
	return *o.DataIpAddress
}

// GetDataIpAddressOk returns a tuple with the DataIpAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HyperflexNetworkConfiguration) GetDataIpAddressOk() (*string, bool) {
	if o == nil || IsNil(o.DataIpAddress) {
		return nil, false
	}
	return o.DataIpAddress, true
}

// HasDataIpAddress returns a boolean if a field has been set.
func (o *HyperflexNetworkConfiguration) HasDataIpAddress() bool {
	if o != nil && !IsNil(o.DataIpAddress) {
		return true
	}

	return false
}

// SetDataIpAddress gets a reference to the given string and assigns it to the DataIpAddress field.
func (o *HyperflexNetworkConfiguration) SetDataIpAddress(v string) {
	o.DataIpAddress = &v
}

// GetDataNetmask returns the DataNetmask field value if set, zero value otherwise.
func (o *HyperflexNetworkConfiguration) GetDataNetmask() string {
	if o == nil || IsNil(o.DataNetmask) {
		var ret string
		return ret
	}
	return *o.DataNetmask
}

// GetDataNetmaskOk returns a tuple with the DataNetmask field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HyperflexNetworkConfiguration) GetDataNetmaskOk() (*string, bool) {
	if o == nil || IsNil(o.DataNetmask) {
		return nil, false
	}
	return o.DataNetmask, true
}

// HasDataNetmask returns a boolean if a field has been set.
func (o *HyperflexNetworkConfiguration) HasDataNetmask() bool {
	if o != nil && !IsNil(o.DataNetmask) {
		return true
	}

	return false
}

// SetDataNetmask gets a reference to the given string and assigns it to the DataNetmask field.
func (o *HyperflexNetworkConfiguration) SetDataNetmask(v string) {
	o.DataNetmask = &v
}

// GetDataVlan returns the DataVlan field value if set, zero value otherwise.
func (o *HyperflexNetworkConfiguration) GetDataVlan() int64 {
	if o == nil || IsNil(o.DataVlan) {
		var ret int64
		return ret
	}
	return *o.DataVlan
}

// GetDataVlanOk returns a tuple with the DataVlan field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HyperflexNetworkConfiguration) GetDataVlanOk() (*int64, bool) {
	if o == nil || IsNil(o.DataVlan) {
		return nil, false
	}
	return o.DataVlan, true
}

// HasDataVlan returns a boolean if a field has been set.
func (o *HyperflexNetworkConfiguration) HasDataVlan() bool {
	if o != nil && !IsNil(o.DataVlan) {
		return true
	}

	return false
}

// SetDataVlan gets a reference to the given int64 and assigns it to the DataVlan field.
func (o *HyperflexNetworkConfiguration) SetDataVlan(v int64) {
	o.DataVlan = &v
}

// GetDnsSuffix returns the DnsSuffix field value if set, zero value otherwise.
func (o *HyperflexNetworkConfiguration) GetDnsSuffix() string {
	if o == nil || IsNil(o.DnsSuffix) {
		var ret string
		return ret
	}
	return *o.DnsSuffix
}

// GetDnsSuffixOk returns a tuple with the DnsSuffix field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HyperflexNetworkConfiguration) GetDnsSuffixOk() (*string, bool) {
	if o == nil || IsNil(o.DnsSuffix) {
		return nil, false
	}
	return o.DnsSuffix, true
}

// HasDnsSuffix returns a boolean if a field has been set.
func (o *HyperflexNetworkConfiguration) HasDnsSuffix() bool {
	if o != nil && !IsNil(o.DnsSuffix) {
		return true
	}

	return false
}

// SetDnsSuffix gets a reference to the given string and assigns it to the DnsSuffix field.
func (o *HyperflexNetworkConfiguration) SetDnsSuffix(v string) {
	o.DnsSuffix = &v
}

// GetJumboFrameEnabled returns the JumboFrameEnabled field value if set, zero value otherwise.
func (o *HyperflexNetworkConfiguration) GetJumboFrameEnabled() bool {
	if o == nil || IsNil(o.JumboFrameEnabled) {
		var ret bool
		return ret
	}
	return *o.JumboFrameEnabled
}

// GetJumboFrameEnabledOk returns a tuple with the JumboFrameEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HyperflexNetworkConfiguration) GetJumboFrameEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.JumboFrameEnabled) {
		return nil, false
	}
	return o.JumboFrameEnabled, true
}

// HasJumboFrameEnabled returns a boolean if a field has been set.
func (o *HyperflexNetworkConfiguration) HasJumboFrameEnabled() bool {
	if o != nil && !IsNil(o.JumboFrameEnabled) {
		return true
	}

	return false
}

// SetJumboFrameEnabled gets a reference to the given bool and assigns it to the JumboFrameEnabled field.
func (o *HyperflexNetworkConfiguration) SetJumboFrameEnabled(v bool) {
	o.JumboFrameEnabled = &v
}

// GetLiveMigrationVlan returns the LiveMigrationVlan field value if set, zero value otherwise.
func (o *HyperflexNetworkConfiguration) GetLiveMigrationVlan() int64 {
	if o == nil || IsNil(o.LiveMigrationVlan) {
		var ret int64
		return ret
	}
	return *o.LiveMigrationVlan
}

// GetLiveMigrationVlanOk returns a tuple with the LiveMigrationVlan field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HyperflexNetworkConfiguration) GetLiveMigrationVlanOk() (*int64, bool) {
	if o == nil || IsNil(o.LiveMigrationVlan) {
		return nil, false
	}
	return o.LiveMigrationVlan, true
}

// HasLiveMigrationVlan returns a boolean if a field has been set.
func (o *HyperflexNetworkConfiguration) HasLiveMigrationVlan() bool {
	if o != nil && !IsNil(o.LiveMigrationVlan) {
		return true
	}

	return false
}

// SetLiveMigrationVlan gets a reference to the given int64 and assigns it to the LiveMigrationVlan field.
func (o *HyperflexNetworkConfiguration) SetLiveMigrationVlan(v int64) {
	o.LiveMigrationVlan = &v
}

// GetMgmtGatewayIpAddress returns the MgmtGatewayIpAddress field value if set, zero value otherwise.
func (o *HyperflexNetworkConfiguration) GetMgmtGatewayIpAddress() string {
	if o == nil || IsNil(o.MgmtGatewayIpAddress) {
		var ret string
		return ret
	}
	return *o.MgmtGatewayIpAddress
}

// GetMgmtGatewayIpAddressOk returns a tuple with the MgmtGatewayIpAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HyperflexNetworkConfiguration) GetMgmtGatewayIpAddressOk() (*string, bool) {
	if o == nil || IsNil(o.MgmtGatewayIpAddress) {
		return nil, false
	}
	return o.MgmtGatewayIpAddress, true
}

// HasMgmtGatewayIpAddress returns a boolean if a field has been set.
func (o *HyperflexNetworkConfiguration) HasMgmtGatewayIpAddress() bool {
	if o != nil && !IsNil(o.MgmtGatewayIpAddress) {
		return true
	}

	return false
}

// SetMgmtGatewayIpAddress gets a reference to the given string and assigns it to the MgmtGatewayIpAddress field.
func (o *HyperflexNetworkConfiguration) SetMgmtGatewayIpAddress(v string) {
	o.MgmtGatewayIpAddress = &v
}

// GetMgmtIpAddress returns the MgmtIpAddress field value if set, zero value otherwise.
func (o *HyperflexNetworkConfiguration) GetMgmtIpAddress() string {
	if o == nil || IsNil(o.MgmtIpAddress) {
		var ret string
		return ret
	}
	return *o.MgmtIpAddress
}

// GetMgmtIpAddressOk returns a tuple with the MgmtIpAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HyperflexNetworkConfiguration) GetMgmtIpAddressOk() (*string, bool) {
	if o == nil || IsNil(o.MgmtIpAddress) {
		return nil, false
	}
	return o.MgmtIpAddress, true
}

// HasMgmtIpAddress returns a boolean if a field has been set.
func (o *HyperflexNetworkConfiguration) HasMgmtIpAddress() bool {
	if o != nil && !IsNil(o.MgmtIpAddress) {
		return true
	}

	return false
}

// SetMgmtIpAddress gets a reference to the given string and assigns it to the MgmtIpAddress field.
func (o *HyperflexNetworkConfiguration) SetMgmtIpAddress(v string) {
	o.MgmtIpAddress = &v
}

// GetMgmtNetmask returns the MgmtNetmask field value if set, zero value otherwise.
func (o *HyperflexNetworkConfiguration) GetMgmtNetmask() string {
	if o == nil || IsNil(o.MgmtNetmask) {
		var ret string
		return ret
	}
	return *o.MgmtNetmask
}

// GetMgmtNetmaskOk returns a tuple with the MgmtNetmask field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HyperflexNetworkConfiguration) GetMgmtNetmaskOk() (*string, bool) {
	if o == nil || IsNil(o.MgmtNetmask) {
		return nil, false
	}
	return o.MgmtNetmask, true
}

// HasMgmtNetmask returns a boolean if a field has been set.
func (o *HyperflexNetworkConfiguration) HasMgmtNetmask() bool {
	if o != nil && !IsNil(o.MgmtNetmask) {
		return true
	}

	return false
}

// SetMgmtNetmask gets a reference to the given string and assigns it to the MgmtNetmask field.
func (o *HyperflexNetworkConfiguration) SetMgmtNetmask(v string) {
	o.MgmtNetmask = &v
}

// GetMgmtVlan returns the MgmtVlan field value if set, zero value otherwise.
func (o *HyperflexNetworkConfiguration) GetMgmtVlan() int64 {
	if o == nil || IsNil(o.MgmtVlan) {
		var ret int64
		return ret
	}
	return *o.MgmtVlan
}

// GetMgmtVlanOk returns a tuple with the MgmtVlan field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HyperflexNetworkConfiguration) GetMgmtVlanOk() (*int64, bool) {
	if o == nil || IsNil(o.MgmtVlan) {
		return nil, false
	}
	return o.MgmtVlan, true
}

// HasMgmtVlan returns a boolean if a field has been set.
func (o *HyperflexNetworkConfiguration) HasMgmtVlan() bool {
	if o != nil && !IsNil(o.MgmtVlan) {
		return true
	}

	return false
}

// SetMgmtVlan gets a reference to the given int64 and assigns it to the MgmtVlan field.
func (o *HyperflexNetworkConfiguration) SetMgmtVlan(v int64) {
	o.MgmtVlan = &v
}

// GetTimezone returns the Timezone field value if set, zero value otherwise.
func (o *HyperflexNetworkConfiguration) GetTimezone() string {
	if o == nil || IsNil(o.Timezone) {
		var ret string
		return ret
	}
	return *o.Timezone
}

// GetTimezoneOk returns a tuple with the Timezone field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HyperflexNetworkConfiguration) GetTimezoneOk() (*string, bool) {
	if o == nil || IsNil(o.Timezone) {
		return nil, false
	}
	return o.Timezone, true
}

// HasTimezone returns a boolean if a field has been set.
func (o *HyperflexNetworkConfiguration) HasTimezone() bool {
	if o != nil && !IsNil(o.Timezone) {
		return true
	}

	return false
}

// SetTimezone gets a reference to the given string and assigns it to the Timezone field.
func (o *HyperflexNetworkConfiguration) SetTimezone(v string) {
	o.Timezone = &v
}

// GetVmNetworkVlans returns the VmNetworkVlans field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HyperflexNetworkConfiguration) GetVmNetworkVlans() []int64 {
	if o == nil {
		var ret []int64
		return ret
	}
	return o.VmNetworkVlans
}

// GetVmNetworkVlansOk returns a tuple with the VmNetworkVlans field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HyperflexNetworkConfiguration) GetVmNetworkVlansOk() ([]int64, bool) {
	if o == nil || IsNil(o.VmNetworkVlans) {
		return nil, false
	}
	return o.VmNetworkVlans, true
}

// HasVmNetworkVlans returns a boolean if a field has been set.
func (o *HyperflexNetworkConfiguration) HasVmNetworkVlans() bool {
	if o != nil && !IsNil(o.VmNetworkVlans) {
		return true
	}

	return false
}

// SetVmNetworkVlans gets a reference to the given []int64 and assigns it to the VmNetworkVlans field.
func (o *HyperflexNetworkConfiguration) SetVmNetworkVlans(v []int64) {
	o.VmNetworkVlans = v
}

func (o HyperflexNetworkConfiguration) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o HyperflexNetworkConfiguration) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	serializedMoBaseComplexType, errMoBaseComplexType := json.Marshal(o.MoBaseComplexType)
	if errMoBaseComplexType != nil {
		return map[string]interface{}{}, errMoBaseComplexType
	}
	errMoBaseComplexType = json.Unmarshal([]byte(serializedMoBaseComplexType), &toSerialize)
	if errMoBaseComplexType != nil {
		return map[string]interface{}{}, errMoBaseComplexType
	}
	if _, exists := toSerialize["ClassId"]; !exists {
		toSerialize["ClassId"] = o.GetDefaultClassId()
	}
	toSerialize["ClassId"] = o.ClassId
	if _, exists := toSerialize["ObjectType"]; !exists {
		toSerialize["ObjectType"] = o.GetDefaultObjectType()
	}
	toSerialize["ObjectType"] = o.ObjectType
	if !IsNil(o.DataGatewayIpAddress) {
		toSerialize["DataGatewayIpAddress"] = o.DataGatewayIpAddress
	}
	if !IsNil(o.DataIpAddress) {
		toSerialize["DataIpAddress"] = o.DataIpAddress
	}
	if !IsNil(o.DataNetmask) {
		toSerialize["DataNetmask"] = o.DataNetmask
	}
	if !IsNil(o.DataVlan) {
		toSerialize["DataVlan"] = o.DataVlan
	}
	if !IsNil(o.DnsSuffix) {
		toSerialize["DnsSuffix"] = o.DnsSuffix
	}
	if !IsNil(o.JumboFrameEnabled) {
		toSerialize["JumboFrameEnabled"] = o.JumboFrameEnabled
	}
	if !IsNil(o.LiveMigrationVlan) {
		toSerialize["LiveMigrationVlan"] = o.LiveMigrationVlan
	}
	if !IsNil(o.MgmtGatewayIpAddress) {
		toSerialize["MgmtGatewayIpAddress"] = o.MgmtGatewayIpAddress
	}
	if !IsNil(o.MgmtIpAddress) {
		toSerialize["MgmtIpAddress"] = o.MgmtIpAddress
	}
	if !IsNil(o.MgmtNetmask) {
		toSerialize["MgmtNetmask"] = o.MgmtNetmask
	}
	if !IsNil(o.MgmtVlan) {
		toSerialize["MgmtVlan"] = o.MgmtVlan
	}
	if !IsNil(o.Timezone) {
		toSerialize["Timezone"] = o.Timezone
	}
	if o.VmNetworkVlans != nil {
		toSerialize["VmNetworkVlans"] = o.VmNetworkVlans
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *HyperflexNetworkConfiguration) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"ClassId",
		"ObjectType",
	}

	// defaultValueFuncMap captures the default values for required properties.
	// These values are used when required properties are missing from the payload.
	defaultValueFuncMap := map[string]func() interface{}{
		"ClassId":    o.GetDefaultClassId,
		"ObjectType": o.GetDefaultObjectType,
	}
	var defaultValueApplied bool
	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			if _, ok := defaultValueFuncMap[requiredProperty]; ok {
				allProperties[requiredProperty] = defaultValueFuncMap[requiredProperty]()
				defaultValueApplied = true
			}
		}
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	if defaultValueApplied {
		data, err = json.Marshal(allProperties)
		if err != nil {
			return err
		}
	}
	type HyperflexNetworkConfigurationWithoutEmbeddedStruct struct {
		// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.
		ClassId string `json:"ClassId"`
		// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
		ObjectType string `json:"ObjectType"`
		// The data gateway IP of the HyperFlex cluster.
		DataGatewayIpAddress *string `json:"DataGatewayIpAddress,omitempty"`
		// The data IP of the HyperFlex cluster.
		DataIpAddress *string `json:"DataIpAddress,omitempty"`
		// The data subnet mask of the HyperFlex cluster.
		DataNetmask *string `json:"DataNetmask,omitempty" validate:"regexp=^$|^(((255\\\\.){3}(255|254|252|248|240|224|192|128|0+))|((255\\\\.){2}(255|254|252|248|240|224|192|128|0+)\\\\.0)|((255\\\\.)(255|254|252|248|240|224|192|128|0+)(\\\\.0+){2})|((255|254|252|248|240|224|192|128|0+)(\\\\.0+){3}))$"`
		// The data VLAN of the HyperFlex cluster.
		DataVlan *int64 `json:"DataVlan,omitempty"`
		// The DNS domain suffix configured for the HyperFlex Cluster.
		DnsSuffix *string `json:"DnsSuffix,omitempty"`
		// The jumbo frame enablement of the HyperFlex cluster.
		JumboFrameEnabled *bool `json:"JumboFrameEnabled,omitempty"`
		// The live migration VLAN ID of the HyperFlex cluster.
		LiveMigrationVlan *int64 `json:"LiveMigrationVlan,omitempty"`
		// The management gateway IP of the HyperFlex cluster.
		MgmtGatewayIpAddress *string `json:"MgmtGatewayIpAddress,omitempty"`
		// The management IP or the hostname of the HyperFlex cluster.
		MgmtIpAddress *string `json:"MgmtIpAddress,omitempty"`
		// The management subnet mask of the HyperFlex cluster.
		MgmtNetmask *string `json:"MgmtNetmask,omitempty" validate:"regexp=^$|^(((255\\\\.){3}(255|254|252|248|240|224|192|128|0+))|((255\\\\.){2}(255|254|252|248|240|224|192|128|0+)\\\\.0)|((255\\\\.)(255|254|252|248|240|224|192|128|0+)(\\\\.0+){2})|((255|254|252|248|240|224|192|128|0+)(\\\\.0+){3}))$"`
		// The management VLAN ID of the HyperFlex cluster.
		MgmtVlan *int64 `json:"MgmtVlan,omitempty"`
		// The timezone configured on the HyperFlex Cluster.
		Timezone       *string `json:"Timezone,omitempty"`
		VmNetworkVlans []int64 `json:"VmNetworkVlans,omitempty"`
	}

	varHyperflexNetworkConfigurationWithoutEmbeddedStruct := HyperflexNetworkConfigurationWithoutEmbeddedStruct{}

	err = json.Unmarshal(data, &varHyperflexNetworkConfigurationWithoutEmbeddedStruct)
	if err == nil {
		varHyperflexNetworkConfiguration := _HyperflexNetworkConfiguration{}
		varHyperflexNetworkConfiguration.ClassId = varHyperflexNetworkConfigurationWithoutEmbeddedStruct.ClassId
		varHyperflexNetworkConfiguration.ObjectType = varHyperflexNetworkConfigurationWithoutEmbeddedStruct.ObjectType
		varHyperflexNetworkConfiguration.DataGatewayIpAddress = varHyperflexNetworkConfigurationWithoutEmbeddedStruct.DataGatewayIpAddress
		varHyperflexNetworkConfiguration.DataIpAddress = varHyperflexNetworkConfigurationWithoutEmbeddedStruct.DataIpAddress
		varHyperflexNetworkConfiguration.DataNetmask = varHyperflexNetworkConfigurationWithoutEmbeddedStruct.DataNetmask
		varHyperflexNetworkConfiguration.DataVlan = varHyperflexNetworkConfigurationWithoutEmbeddedStruct.DataVlan
		varHyperflexNetworkConfiguration.DnsSuffix = varHyperflexNetworkConfigurationWithoutEmbeddedStruct.DnsSuffix
		varHyperflexNetworkConfiguration.JumboFrameEnabled = varHyperflexNetworkConfigurationWithoutEmbeddedStruct.JumboFrameEnabled
		varHyperflexNetworkConfiguration.LiveMigrationVlan = varHyperflexNetworkConfigurationWithoutEmbeddedStruct.LiveMigrationVlan
		varHyperflexNetworkConfiguration.MgmtGatewayIpAddress = varHyperflexNetworkConfigurationWithoutEmbeddedStruct.MgmtGatewayIpAddress
		varHyperflexNetworkConfiguration.MgmtIpAddress = varHyperflexNetworkConfigurationWithoutEmbeddedStruct.MgmtIpAddress
		varHyperflexNetworkConfiguration.MgmtNetmask = varHyperflexNetworkConfigurationWithoutEmbeddedStruct.MgmtNetmask
		varHyperflexNetworkConfiguration.MgmtVlan = varHyperflexNetworkConfigurationWithoutEmbeddedStruct.MgmtVlan
		varHyperflexNetworkConfiguration.Timezone = varHyperflexNetworkConfigurationWithoutEmbeddedStruct.Timezone
		varHyperflexNetworkConfiguration.VmNetworkVlans = varHyperflexNetworkConfigurationWithoutEmbeddedStruct.VmNetworkVlans
		*o = HyperflexNetworkConfiguration(varHyperflexNetworkConfiguration)
	} else {
		return err
	}

	varHyperflexNetworkConfiguration := _HyperflexNetworkConfiguration{}

	err = json.Unmarshal(data, &varHyperflexNetworkConfiguration)
	if err == nil {
		o.MoBaseComplexType = varHyperflexNetworkConfiguration.MoBaseComplexType
	} else {
		return err
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "ClassId")
		delete(additionalProperties, "ObjectType")
		delete(additionalProperties, "DataGatewayIpAddress")
		delete(additionalProperties, "DataIpAddress")
		delete(additionalProperties, "DataNetmask")
		delete(additionalProperties, "DataVlan")
		delete(additionalProperties, "DnsSuffix")
		delete(additionalProperties, "JumboFrameEnabled")
		delete(additionalProperties, "LiveMigrationVlan")
		delete(additionalProperties, "MgmtGatewayIpAddress")
		delete(additionalProperties, "MgmtIpAddress")
		delete(additionalProperties, "MgmtNetmask")
		delete(additionalProperties, "MgmtVlan")
		delete(additionalProperties, "Timezone")
		delete(additionalProperties, "VmNetworkVlans")

		// remove fields from embedded structs
		reflectMoBaseComplexType := reflect.ValueOf(o.MoBaseComplexType)
		for i := 0; i < reflectMoBaseComplexType.Type().NumField(); i++ {
			t := reflectMoBaseComplexType.Type().Field(i)

			if jsonTag := t.Tag.Get("json"); jsonTag != "" {
				fieldName := ""
				if commaIdx := strings.Index(jsonTag, ","); commaIdx > 0 {
					fieldName = jsonTag[:commaIdx]
				} else {
					fieldName = jsonTag
				}
				if fieldName != "AdditionalProperties" {
					delete(additionalProperties, fieldName)
				}
			}
		}

		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableHyperflexNetworkConfiguration struct {
	value *HyperflexNetworkConfiguration
	isSet bool
}

func (v NullableHyperflexNetworkConfiguration) Get() *HyperflexNetworkConfiguration {
	return v.value
}

func (v *NullableHyperflexNetworkConfiguration) Set(val *HyperflexNetworkConfiguration) {
	v.value = val
	v.isSet = true
}

func (v NullableHyperflexNetworkConfiguration) IsSet() bool {
	return v.isSet
}

func (v *NullableHyperflexNetworkConfiguration) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHyperflexNetworkConfiguration(val *HyperflexNetworkConfiguration) *NullableHyperflexNetworkConfiguration {
	return &NullableHyperflexNetworkConfiguration{value: val, isSet: true}
}

func (v NullableHyperflexNetworkConfiguration) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHyperflexNetworkConfiguration) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
