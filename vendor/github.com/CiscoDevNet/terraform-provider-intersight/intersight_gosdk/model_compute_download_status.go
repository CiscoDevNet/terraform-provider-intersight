/*
Cisco Intersight

Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations. The Intersight OpenAPI document defines the complete set of properties that are returned in the HTTP response. From that perspective, a client can expect that no additional properties are returned, unless these properties are explicitly defined in the OpenAPI document. However, when a client uses an older version of the Intersight OpenAPI document, the server may send additional properties because the software is more recent than the client. In that case, the client may receive properties that it does not know about. Some generated SDKs perform a strict validation of the HTTP response body against the OpenAPI document.

API version: 1.0.11-18775
Contact: intersight@cisco.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package intersight

import (
	"encoding/json"
	"fmt"
	"reflect"
	"strings"
)

// checks if the ComputeDownloadStatus type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ComputeDownloadStatus{}

// ComputeDownloadStatus The status for the file download initiated in the endpoint.
type ComputeDownloadStatus struct {
	ConnectorDownloadStatus
	// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.
	ClassId string `json:"ClassId"`
	// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
	ObjectType string `json:"ObjectType"`
	// The message from the endpoint during the download.
	DownloadMessage *string `json:"DownloadMessage,omitempty"`
	// The percentage of the image downloaded in the endpoint.
	DownloadPercentage *int64 `json:"DownloadPercentage,omitempty"`
	// The image download stages. Example:downloading, flashing.
	DownloadStage *string `json:"DownloadStage,omitempty"`
	// The error message from the endpoint during the SD card download.
	SdCardDownloadError  *string                                         `json:"SdCardDownloadError,omitempty"`
	HostOp               NullableComputeHostUtilityOperationRelationship `json:"HostOp,omitempty"`
	Workflow             NullableWorkflowWorkflowInfoRelationship        `json:"Workflow,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ComputeDownloadStatus ComputeDownloadStatus

// NewComputeDownloadStatus instantiates a new ComputeDownloadStatus object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewComputeDownloadStatus(classId string, objectType string) *ComputeDownloadStatus {
	this := ComputeDownloadStatus{}
	this.ClassId = classId
	this.ObjectType = objectType
	return &this
}

// NewComputeDownloadStatusWithDefaults instantiates a new ComputeDownloadStatus object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewComputeDownloadStatusWithDefaults() *ComputeDownloadStatus {
	this := ComputeDownloadStatus{}
	var classId string = "compute.DownloadStatus"
	this.ClassId = classId
	var objectType string = "compute.DownloadStatus"
	this.ObjectType = objectType
	return &this
}

// GetClassId returns the ClassId field value
func (o *ComputeDownloadStatus) GetClassId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ClassId
}

// GetClassIdOk returns a tuple with the ClassId field value
// and a boolean to check if the value has been set.
func (o *ComputeDownloadStatus) GetClassIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ClassId, true
}

// SetClassId sets field value
func (o *ComputeDownloadStatus) SetClassId(v string) {
	o.ClassId = v
}

// GetDefaultClassId returns the default value "compute.DownloadStatus" of the ClassId field.
func (o *ComputeDownloadStatus) GetDefaultClassId() interface{} {
	return "compute.DownloadStatus"
}

// GetObjectType returns the ObjectType field value
func (o *ComputeDownloadStatus) GetObjectType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ObjectType
}

// GetObjectTypeOk returns a tuple with the ObjectType field value
// and a boolean to check if the value has been set.
func (o *ComputeDownloadStatus) GetObjectTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ObjectType, true
}

// SetObjectType sets field value
func (o *ComputeDownloadStatus) SetObjectType(v string) {
	o.ObjectType = v
}

// GetDefaultObjectType returns the default value "compute.DownloadStatus" of the ObjectType field.
func (o *ComputeDownloadStatus) GetDefaultObjectType() interface{} {
	return "compute.DownloadStatus"
}

// GetDownloadMessage returns the DownloadMessage field value if set, zero value otherwise.
func (o *ComputeDownloadStatus) GetDownloadMessage() string {
	if o == nil || IsNil(o.DownloadMessage) {
		var ret string
		return ret
	}
	return *o.DownloadMessage
}

// GetDownloadMessageOk returns a tuple with the DownloadMessage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComputeDownloadStatus) GetDownloadMessageOk() (*string, bool) {
	if o == nil || IsNil(o.DownloadMessage) {
		return nil, false
	}
	return o.DownloadMessage, true
}

// HasDownloadMessage returns a boolean if a field has been set.
func (o *ComputeDownloadStatus) HasDownloadMessage() bool {
	if o != nil && !IsNil(o.DownloadMessage) {
		return true
	}

	return false
}

// SetDownloadMessage gets a reference to the given string and assigns it to the DownloadMessage field.
func (o *ComputeDownloadStatus) SetDownloadMessage(v string) {
	o.DownloadMessage = &v
}

// GetDownloadPercentage returns the DownloadPercentage field value if set, zero value otherwise.
func (o *ComputeDownloadStatus) GetDownloadPercentage() int64 {
	if o == nil || IsNil(o.DownloadPercentage) {
		var ret int64
		return ret
	}
	return *o.DownloadPercentage
}

// GetDownloadPercentageOk returns a tuple with the DownloadPercentage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComputeDownloadStatus) GetDownloadPercentageOk() (*int64, bool) {
	if o == nil || IsNil(o.DownloadPercentage) {
		return nil, false
	}
	return o.DownloadPercentage, true
}

// HasDownloadPercentage returns a boolean if a field has been set.
func (o *ComputeDownloadStatus) HasDownloadPercentage() bool {
	if o != nil && !IsNil(o.DownloadPercentage) {
		return true
	}

	return false
}

// SetDownloadPercentage gets a reference to the given int64 and assigns it to the DownloadPercentage field.
func (o *ComputeDownloadStatus) SetDownloadPercentage(v int64) {
	o.DownloadPercentage = &v
}

// GetDownloadStage returns the DownloadStage field value if set, zero value otherwise.
func (o *ComputeDownloadStatus) GetDownloadStage() string {
	if o == nil || IsNil(o.DownloadStage) {
		var ret string
		return ret
	}
	return *o.DownloadStage
}

// GetDownloadStageOk returns a tuple with the DownloadStage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComputeDownloadStatus) GetDownloadStageOk() (*string, bool) {
	if o == nil || IsNil(o.DownloadStage) {
		return nil, false
	}
	return o.DownloadStage, true
}

// HasDownloadStage returns a boolean if a field has been set.
func (o *ComputeDownloadStatus) HasDownloadStage() bool {
	if o != nil && !IsNil(o.DownloadStage) {
		return true
	}

	return false
}

// SetDownloadStage gets a reference to the given string and assigns it to the DownloadStage field.
func (o *ComputeDownloadStatus) SetDownloadStage(v string) {
	o.DownloadStage = &v
}

// GetSdCardDownloadError returns the SdCardDownloadError field value if set, zero value otherwise.
func (o *ComputeDownloadStatus) GetSdCardDownloadError() string {
	if o == nil || IsNil(o.SdCardDownloadError) {
		var ret string
		return ret
	}
	return *o.SdCardDownloadError
}

// GetSdCardDownloadErrorOk returns a tuple with the SdCardDownloadError field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComputeDownloadStatus) GetSdCardDownloadErrorOk() (*string, bool) {
	if o == nil || IsNil(o.SdCardDownloadError) {
		return nil, false
	}
	return o.SdCardDownloadError, true
}

// HasSdCardDownloadError returns a boolean if a field has been set.
func (o *ComputeDownloadStatus) HasSdCardDownloadError() bool {
	if o != nil && !IsNil(o.SdCardDownloadError) {
		return true
	}

	return false
}

// SetSdCardDownloadError gets a reference to the given string and assigns it to the SdCardDownloadError field.
func (o *ComputeDownloadStatus) SetSdCardDownloadError(v string) {
	o.SdCardDownloadError = &v
}

// GetHostOp returns the HostOp field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ComputeDownloadStatus) GetHostOp() ComputeHostUtilityOperationRelationship {
	if o == nil || IsNil(o.HostOp.Get()) {
		var ret ComputeHostUtilityOperationRelationship
		return ret
	}
	return *o.HostOp.Get()
}

// GetHostOpOk returns a tuple with the HostOp field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ComputeDownloadStatus) GetHostOpOk() (*ComputeHostUtilityOperationRelationship, bool) {
	if o == nil {
		return nil, false
	}
	return o.HostOp.Get(), o.HostOp.IsSet()
}

// HasHostOp returns a boolean if a field has been set.
func (o *ComputeDownloadStatus) HasHostOp() bool {
	if o != nil && o.HostOp.IsSet() {
		return true
	}

	return false
}

// SetHostOp gets a reference to the given NullableComputeHostUtilityOperationRelationship and assigns it to the HostOp field.
func (o *ComputeDownloadStatus) SetHostOp(v ComputeHostUtilityOperationRelationship) {
	o.HostOp.Set(&v)
}

// SetHostOpNil sets the value for HostOp to be an explicit nil
func (o *ComputeDownloadStatus) SetHostOpNil() {
	o.HostOp.Set(nil)
}

// UnsetHostOp ensures that no value is present for HostOp, not even an explicit nil
func (o *ComputeDownloadStatus) UnsetHostOp() {
	o.HostOp.Unset()
}

// GetWorkflow returns the Workflow field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ComputeDownloadStatus) GetWorkflow() WorkflowWorkflowInfoRelationship {
	if o == nil || IsNil(o.Workflow.Get()) {
		var ret WorkflowWorkflowInfoRelationship
		return ret
	}
	return *o.Workflow.Get()
}

// GetWorkflowOk returns a tuple with the Workflow field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ComputeDownloadStatus) GetWorkflowOk() (*WorkflowWorkflowInfoRelationship, bool) {
	if o == nil {
		return nil, false
	}
	return o.Workflow.Get(), o.Workflow.IsSet()
}

// HasWorkflow returns a boolean if a field has been set.
func (o *ComputeDownloadStatus) HasWorkflow() bool {
	if o != nil && o.Workflow.IsSet() {
		return true
	}

	return false
}

// SetWorkflow gets a reference to the given NullableWorkflowWorkflowInfoRelationship and assigns it to the Workflow field.
func (o *ComputeDownloadStatus) SetWorkflow(v WorkflowWorkflowInfoRelationship) {
	o.Workflow.Set(&v)
}

// SetWorkflowNil sets the value for Workflow to be an explicit nil
func (o *ComputeDownloadStatus) SetWorkflowNil() {
	o.Workflow.Set(nil)
}

// UnsetWorkflow ensures that no value is present for Workflow, not even an explicit nil
func (o *ComputeDownloadStatus) UnsetWorkflow() {
	o.Workflow.Unset()
}

func (o ComputeDownloadStatus) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ComputeDownloadStatus) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	serializedConnectorDownloadStatus, errConnectorDownloadStatus := json.Marshal(o.ConnectorDownloadStatus)
	if errConnectorDownloadStatus != nil {
		return map[string]interface{}{}, errConnectorDownloadStatus
	}
	errConnectorDownloadStatus = json.Unmarshal([]byte(serializedConnectorDownloadStatus), &toSerialize)
	if errConnectorDownloadStatus != nil {
		return map[string]interface{}{}, errConnectorDownloadStatus
	}
	if _, exists := toSerialize["ClassId"]; !exists {
		toSerialize["ClassId"] = o.GetDefaultClassId()
	}
	toSerialize["ClassId"] = o.ClassId
	if _, exists := toSerialize["ObjectType"]; !exists {
		toSerialize["ObjectType"] = o.GetDefaultObjectType()
	}
	toSerialize["ObjectType"] = o.ObjectType
	if !IsNil(o.DownloadMessage) {
		toSerialize["DownloadMessage"] = o.DownloadMessage
	}
	if !IsNil(o.DownloadPercentage) {
		toSerialize["DownloadPercentage"] = o.DownloadPercentage
	}
	if !IsNil(o.DownloadStage) {
		toSerialize["DownloadStage"] = o.DownloadStage
	}
	if !IsNil(o.SdCardDownloadError) {
		toSerialize["SdCardDownloadError"] = o.SdCardDownloadError
	}
	if o.HostOp.IsSet() {
		toSerialize["HostOp"] = o.HostOp.Get()
	}
	if o.Workflow.IsSet() {
		toSerialize["Workflow"] = o.Workflow.Get()
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ComputeDownloadStatus) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"ClassId",
		"ObjectType",
	}

	// defaultValueFuncMap captures the default values for required properties.
	// These values are used when required properties are missing from the payload.
	defaultValueFuncMap := map[string]func() interface{}{
		"ClassId":    o.GetDefaultClassId,
		"ObjectType": o.GetDefaultObjectType,
	}
	var defaultValueApplied bool
	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			if _, ok := defaultValueFuncMap[requiredProperty]; ok {
				allProperties[requiredProperty] = defaultValueFuncMap[requiredProperty]()
				defaultValueApplied = true
			}
		}
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	if defaultValueApplied {
		data, err = json.Marshal(allProperties)
		if err != nil {
			return err
		}
	}
	type ComputeDownloadStatusWithoutEmbeddedStruct struct {
		// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.
		ClassId string `json:"ClassId"`
		// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
		ObjectType string `json:"ObjectType"`
		// The message from the endpoint during the download.
		DownloadMessage *string `json:"DownloadMessage,omitempty"`
		// The percentage of the image downloaded in the endpoint.
		DownloadPercentage *int64 `json:"DownloadPercentage,omitempty"`
		// The image download stages. Example:downloading, flashing.
		DownloadStage *string `json:"DownloadStage,omitempty"`
		// The error message from the endpoint during the SD card download.
		SdCardDownloadError *string                                         `json:"SdCardDownloadError,omitempty"`
		HostOp              NullableComputeHostUtilityOperationRelationship `json:"HostOp,omitempty"`
		Workflow            NullableWorkflowWorkflowInfoRelationship        `json:"Workflow,omitempty"`
	}

	varComputeDownloadStatusWithoutEmbeddedStruct := ComputeDownloadStatusWithoutEmbeddedStruct{}

	err = json.Unmarshal(data, &varComputeDownloadStatusWithoutEmbeddedStruct)
	if err == nil {
		varComputeDownloadStatus := _ComputeDownloadStatus{}
		varComputeDownloadStatus.ClassId = varComputeDownloadStatusWithoutEmbeddedStruct.ClassId
		varComputeDownloadStatus.ObjectType = varComputeDownloadStatusWithoutEmbeddedStruct.ObjectType
		varComputeDownloadStatus.DownloadMessage = varComputeDownloadStatusWithoutEmbeddedStruct.DownloadMessage
		varComputeDownloadStatus.DownloadPercentage = varComputeDownloadStatusWithoutEmbeddedStruct.DownloadPercentage
		varComputeDownloadStatus.DownloadStage = varComputeDownloadStatusWithoutEmbeddedStruct.DownloadStage
		varComputeDownloadStatus.SdCardDownloadError = varComputeDownloadStatusWithoutEmbeddedStruct.SdCardDownloadError
		varComputeDownloadStatus.HostOp = varComputeDownloadStatusWithoutEmbeddedStruct.HostOp
		varComputeDownloadStatus.Workflow = varComputeDownloadStatusWithoutEmbeddedStruct.Workflow
		*o = ComputeDownloadStatus(varComputeDownloadStatus)
	} else {
		return err
	}

	varComputeDownloadStatus := _ComputeDownloadStatus{}

	err = json.Unmarshal(data, &varComputeDownloadStatus)
	if err == nil {
		o.ConnectorDownloadStatus = varComputeDownloadStatus.ConnectorDownloadStatus
	} else {
		return err
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "ClassId")
		delete(additionalProperties, "ObjectType")
		delete(additionalProperties, "DownloadMessage")
		delete(additionalProperties, "DownloadPercentage")
		delete(additionalProperties, "DownloadStage")
		delete(additionalProperties, "SdCardDownloadError")
		delete(additionalProperties, "HostOp")
		delete(additionalProperties, "Workflow")

		// remove fields from embedded structs
		reflectConnectorDownloadStatus := reflect.ValueOf(o.ConnectorDownloadStatus)
		for i := 0; i < reflectConnectorDownloadStatus.Type().NumField(); i++ {
			t := reflectConnectorDownloadStatus.Type().Field(i)

			if jsonTag := t.Tag.Get("json"); jsonTag != "" {
				fieldName := ""
				if commaIdx := strings.Index(jsonTag, ","); commaIdx > 0 {
					fieldName = jsonTag[:commaIdx]
				} else {
					fieldName = jsonTag
				}
				if fieldName != "AdditionalProperties" {
					delete(additionalProperties, fieldName)
				}
			}
		}

		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableComputeDownloadStatus struct {
	value *ComputeDownloadStatus
	isSet bool
}

func (v NullableComputeDownloadStatus) Get() *ComputeDownloadStatus {
	return v.value
}

func (v *NullableComputeDownloadStatus) Set(val *ComputeDownloadStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableComputeDownloadStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableComputeDownloadStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableComputeDownloadStatus(val *ComputeDownloadStatus) *NullableComputeDownloadStatus {
	return &NullableComputeDownloadStatus{value: val, isSet: true}
}

func (v NullableComputeDownloadStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableComputeDownloadStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
