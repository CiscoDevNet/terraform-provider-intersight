/*
Cisco Intersight

Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations. The Intersight OpenAPI document defines the complete set of properties that are returned in the HTTP response. From that perspective, a client can expect that no additional properties are returned, unless these properties are explicitly defined in the OpenAPI document. However, when a client uses an older version of the Intersight OpenAPI document, the server may send additional properties because the software is more recent than the client. In that case, the client may receive properties that it does not know about. Some generated SDKs perform a strict validation of the HTTP response body against the OpenAPI document.

API version: 1.0.11-2025101412
Contact: intersight@cisco.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package intersight

import (
	"encoding/json"
	"fmt"
	"reflect"
	"strings"
	"time"
)

// checks if the HciAhvVm type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &HciAhvVm{}

// HciAhvVm An AHV VM reported by Prism Central.
type HciAhvVm struct {
	HciBaseVm
	// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.
	ClassId string `json:"ClassId"`
	// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
	ObjectType string `json:"ObjectType"`
	// The BIOS UUID of the VM, similar to physical server's serial number.
	BiosUuid *string `json:"BiosUuid,omitempty"`
	// The time the VM was created.
	CreationTime       *time.Time `json:"CreationTime,omitempty"`
	EnabledCpuFeatures []string   `json:"EnabledCpuFeatures,omitempty"`
	// The generation UUID of the VM.
	GenerationUuid *string                  `json:"GenerationUuid,omitempty"`
	GuestTools     NullableHciAhvGuestTools `json:"GuestTools,omitempty"`
	// VM hardware clock timezone in IANA TZDB format (America/Los_Angeles).  Default: UTC.
	HardwareClockTimezone *string `json:"HardwareClockTimezone,omitempty"`
	// Indicates whether the VM is an agent VM or not. When their host enters maintenance mode, once the normal VMs are evacuated, the  agent VMs are powered off. When the host is restored, agent VMs  are powered on before the normal VMs are restored. In other words,  agent VMs cannot be HA-protected or live migrated.
	IsAgentVm *bool `json:"IsAgentVm,omitempty"`
	// Indicates whether to remove AHV branding from VM firmware tables or not.
	IsBrandingEnabled *bool `json:"IsBrandingEnabled,omitempty"`
	// The CPU hotplug status of the VM. It indicates whether the CPU  hotplug feature should be enabled for the VM or not. If enabled,  the VM can add or remove vCPUs while the VM is running.
	IsCpuHotplugEnabled *bool `json:"IsCpuHotplugEnabled,omitempty"`
	// The CPU passthrough status of the VM. It Indicates whether to passthrough the host CPU features to the guest or not.  Enabling this will make VM incapable of live migration.
	IsCpuPassthroughEnabled *bool `json:"IsCpuPassthroughEnabled,omitempty"`
	// Indicates whether the VM is in the process of cross cluster migration or not.
	IsCrossClusterMigrationInProgress *bool `json:"IsCrossClusterMigrationInProgress,omitempty"`
	// The GPU console status of the VM. It indicates whether the GPU  console should be enabled for the VM or not. If enabled, the VM  will have access to the GPU console.
	IsGpuConsoleEnabled *bool `json:"IsGpuConsoleEnabled,omitempty"`
	// Indicates whether the VM is live migrate capable or not.  If the VM is not live migrate capable, it cannot be live migrated.
	IsLiveMigrateCapable *bool `json:"IsLiveMigrateCapable,omitempty"`
	// The memory overcommit status of the VM. It indicates whether the memory overcommit feature should be enabled for the VM or not. If enabled, parts of the VM memory may reside outside of the  hypervisor physical memory. Once enabled, it should be expected  that the VM may suffer performance degradation.
	IsMemoryOvercommitEnabled *bool `json:"IsMemoryOvercommitEnabled,omitempty"`
	// The SCSI controller status of the VM. It indicates whether the  SCSI controller should be enabled for the VM or not. If enabled,  the VM will have access to the SCSI controller.
	IsScsiControllerEnabled *bool `json:"IsScsiControllerEnabled,omitempty"`
	// The hard pinning status of the vCPU. It indicates whether the vCPUs  should be hard pinned to specific pCPUs or not.
	IsVcpuHardPinningEnabled *bool `json:"IsVcpuHardPinningEnabled,omitempty"`
	// Indicates whether to enable VGA console for the VM or not.
	IsVgaConsoleEnabled *bool `json:"IsVgaConsoleEnabled,omitempty"`
	// Indicates whether the VM has a virtual TPM enabled or not.
	IsVtpmEnabled *bool `json:"IsVtpmEnabled,omitempty"`
	// The machine type of the VM. Possible values are PC, PSERIES, Q35.
	MachineType *string `json:"MachineType,omitempty"`
	// Number of NUMA nodes. 0 means NUMA is disabled.
	NumNumaNodes *int32 `json:"NumNumaNodes,omitempty"`
	// The number of sockets of the VM.
	NumSockets *int32 `json:"NumSockets,omitempty"`
	// The number of threads per core of the VM.
	NumThreadsPerCore *int32 `json:"NumThreadsPerCore,omitempty"`
	// The type of protection applied on a VM.  Possible values are UNPROTECTED, PD_PROTECTED, and RULE_PROTECTED. PD_PROTECTED indicates a VM is protected using the Prism Element.  RULE_PROTECTED indicates a VM protection using the Prism Central.
	ProtectionType *string `json:"ProtectionType,omitempty"`
	// The source UUID of the VM.
	SourceUuid *string `json:"SourceUuid,omitempty"`
	// The time the VM was last updated.
	UpdateTime *time.Time `json:"UpdateTime,omitempty"`
	// The version of the vTPM module.
	VtpmModuleVersion *string `json:"VtpmModuleVersion,omitempty"`
	// An array of relationships to hciAhvVmDisk resources.
	Disks []HciAhvVmDiskRelationship `json:"Disks,omitempty"`
	// An array of relationships to hciAhvVmGpu resources.
	Gpus []HciAhvVmGpuRelationship `json:"Gpus,omitempty"`
	// An array of relationships to hciAhvVmNic resources.
	Nics                 []HciAhvVmNicRelationship                   `json:"Nics,omitempty"`
	RegisteredDevice     NullableAssetDeviceRegistrationRelationship `json:"RegisteredDevice,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _HciAhvVm HciAhvVm

// NewHciAhvVm instantiates a new HciAhvVm object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHciAhvVm(classId string, objectType string) *HciAhvVm {
	this := HciAhvVm{}
	this.ClassId = classId
	this.ObjectType = objectType
	return &this
}

// NewHciAhvVmWithDefaults instantiates a new HciAhvVm object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHciAhvVmWithDefaults() *HciAhvVm {
	this := HciAhvVm{}
	var classId string = "hci.AhvVm"
	this.ClassId = classId
	var objectType string = "hci.AhvVm"
	this.ObjectType = objectType
	return &this
}

// GetClassId returns the ClassId field value
func (o *HciAhvVm) GetClassId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ClassId
}

// GetClassIdOk returns a tuple with the ClassId field value
// and a boolean to check if the value has been set.
func (o *HciAhvVm) GetClassIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ClassId, true
}

// SetClassId sets field value
func (o *HciAhvVm) SetClassId(v string) {
	o.ClassId = v
}

// GetDefaultClassId returns the default value "hci.AhvVm" of the ClassId field.
func (o *HciAhvVm) GetDefaultClassId() interface{} {
	return "hci.AhvVm"
}

// GetObjectType returns the ObjectType field value
func (o *HciAhvVm) GetObjectType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ObjectType
}

// GetObjectTypeOk returns a tuple with the ObjectType field value
// and a boolean to check if the value has been set.
func (o *HciAhvVm) GetObjectTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ObjectType, true
}

// SetObjectType sets field value
func (o *HciAhvVm) SetObjectType(v string) {
	o.ObjectType = v
}

// GetDefaultObjectType returns the default value "hci.AhvVm" of the ObjectType field.
func (o *HciAhvVm) GetDefaultObjectType() interface{} {
	return "hci.AhvVm"
}

// GetBiosUuid returns the BiosUuid field value if set, zero value otherwise.
func (o *HciAhvVm) GetBiosUuid() string {
	if o == nil || IsNil(o.BiosUuid) {
		var ret string
		return ret
	}
	return *o.BiosUuid
}

// GetBiosUuidOk returns a tuple with the BiosUuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HciAhvVm) GetBiosUuidOk() (*string, bool) {
	if o == nil || IsNil(o.BiosUuid) {
		return nil, false
	}
	return o.BiosUuid, true
}

// HasBiosUuid returns a boolean if a field has been set.
func (o *HciAhvVm) HasBiosUuid() bool {
	if o != nil && !IsNil(o.BiosUuid) {
		return true
	}

	return false
}

// SetBiosUuid gets a reference to the given string and assigns it to the BiosUuid field.
func (o *HciAhvVm) SetBiosUuid(v string) {
	o.BiosUuid = &v
}

// GetCreationTime returns the CreationTime field value if set, zero value otherwise.
func (o *HciAhvVm) GetCreationTime() time.Time {
	if o == nil || IsNil(o.CreationTime) {
		var ret time.Time
		return ret
	}
	return *o.CreationTime
}

// GetCreationTimeOk returns a tuple with the CreationTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HciAhvVm) GetCreationTimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.CreationTime) {
		return nil, false
	}
	return o.CreationTime, true
}

// HasCreationTime returns a boolean if a field has been set.
func (o *HciAhvVm) HasCreationTime() bool {
	if o != nil && !IsNil(o.CreationTime) {
		return true
	}

	return false
}

// SetCreationTime gets a reference to the given time.Time and assigns it to the CreationTime field.
func (o *HciAhvVm) SetCreationTime(v time.Time) {
	o.CreationTime = &v
}

// GetEnabledCpuFeatures returns the EnabledCpuFeatures field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HciAhvVm) GetEnabledCpuFeatures() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.EnabledCpuFeatures
}

// GetEnabledCpuFeaturesOk returns a tuple with the EnabledCpuFeatures field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HciAhvVm) GetEnabledCpuFeaturesOk() ([]string, bool) {
	if o == nil || IsNil(o.EnabledCpuFeatures) {
		return nil, false
	}
	return o.EnabledCpuFeatures, true
}

// HasEnabledCpuFeatures returns a boolean if a field has been set.
func (o *HciAhvVm) HasEnabledCpuFeatures() bool {
	if o != nil && !IsNil(o.EnabledCpuFeatures) {
		return true
	}

	return false
}

// SetEnabledCpuFeatures gets a reference to the given []string and assigns it to the EnabledCpuFeatures field.
func (o *HciAhvVm) SetEnabledCpuFeatures(v []string) {
	o.EnabledCpuFeatures = v
}

// GetGenerationUuid returns the GenerationUuid field value if set, zero value otherwise.
func (o *HciAhvVm) GetGenerationUuid() string {
	if o == nil || IsNil(o.GenerationUuid) {
		var ret string
		return ret
	}
	return *o.GenerationUuid
}

// GetGenerationUuidOk returns a tuple with the GenerationUuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HciAhvVm) GetGenerationUuidOk() (*string, bool) {
	if o == nil || IsNil(o.GenerationUuid) {
		return nil, false
	}
	return o.GenerationUuid, true
}

// HasGenerationUuid returns a boolean if a field has been set.
func (o *HciAhvVm) HasGenerationUuid() bool {
	if o != nil && !IsNil(o.GenerationUuid) {
		return true
	}

	return false
}

// SetGenerationUuid gets a reference to the given string and assigns it to the GenerationUuid field.
func (o *HciAhvVm) SetGenerationUuid(v string) {
	o.GenerationUuid = &v
}

// GetGuestTools returns the GuestTools field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HciAhvVm) GetGuestTools() HciAhvGuestTools {
	if o == nil || IsNil(o.GuestTools.Get()) {
		var ret HciAhvGuestTools
		return ret
	}
	return *o.GuestTools.Get()
}

// GetGuestToolsOk returns a tuple with the GuestTools field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HciAhvVm) GetGuestToolsOk() (*HciAhvGuestTools, bool) {
	if o == nil {
		return nil, false
	}
	return o.GuestTools.Get(), o.GuestTools.IsSet()
}

// HasGuestTools returns a boolean if a field has been set.
func (o *HciAhvVm) HasGuestTools() bool {
	if o != nil && o.GuestTools.IsSet() {
		return true
	}

	return false
}

// SetGuestTools gets a reference to the given NullableHciAhvGuestTools and assigns it to the GuestTools field.
func (o *HciAhvVm) SetGuestTools(v HciAhvGuestTools) {
	o.GuestTools.Set(&v)
}

// SetGuestToolsNil sets the value for GuestTools to be an explicit nil
func (o *HciAhvVm) SetGuestToolsNil() {
	o.GuestTools.Set(nil)
}

// UnsetGuestTools ensures that no value is present for GuestTools, not even an explicit nil
func (o *HciAhvVm) UnsetGuestTools() {
	o.GuestTools.Unset()
}

// GetHardwareClockTimezone returns the HardwareClockTimezone field value if set, zero value otherwise.
func (o *HciAhvVm) GetHardwareClockTimezone() string {
	if o == nil || IsNil(o.HardwareClockTimezone) {
		var ret string
		return ret
	}
	return *o.HardwareClockTimezone
}

// GetHardwareClockTimezoneOk returns a tuple with the HardwareClockTimezone field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HciAhvVm) GetHardwareClockTimezoneOk() (*string, bool) {
	if o == nil || IsNil(o.HardwareClockTimezone) {
		return nil, false
	}
	return o.HardwareClockTimezone, true
}

// HasHardwareClockTimezone returns a boolean if a field has been set.
func (o *HciAhvVm) HasHardwareClockTimezone() bool {
	if o != nil && !IsNil(o.HardwareClockTimezone) {
		return true
	}

	return false
}

// SetHardwareClockTimezone gets a reference to the given string and assigns it to the HardwareClockTimezone field.
func (o *HciAhvVm) SetHardwareClockTimezone(v string) {
	o.HardwareClockTimezone = &v
}

// GetIsAgentVm returns the IsAgentVm field value if set, zero value otherwise.
func (o *HciAhvVm) GetIsAgentVm() bool {
	if o == nil || IsNil(o.IsAgentVm) {
		var ret bool
		return ret
	}
	return *o.IsAgentVm
}

// GetIsAgentVmOk returns a tuple with the IsAgentVm field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HciAhvVm) GetIsAgentVmOk() (*bool, bool) {
	if o == nil || IsNil(o.IsAgentVm) {
		return nil, false
	}
	return o.IsAgentVm, true
}

// HasIsAgentVm returns a boolean if a field has been set.
func (o *HciAhvVm) HasIsAgentVm() bool {
	if o != nil && !IsNil(o.IsAgentVm) {
		return true
	}

	return false
}

// SetIsAgentVm gets a reference to the given bool and assigns it to the IsAgentVm field.
func (o *HciAhvVm) SetIsAgentVm(v bool) {
	o.IsAgentVm = &v
}

// GetIsBrandingEnabled returns the IsBrandingEnabled field value if set, zero value otherwise.
func (o *HciAhvVm) GetIsBrandingEnabled() bool {
	if o == nil || IsNil(o.IsBrandingEnabled) {
		var ret bool
		return ret
	}
	return *o.IsBrandingEnabled
}

// GetIsBrandingEnabledOk returns a tuple with the IsBrandingEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HciAhvVm) GetIsBrandingEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.IsBrandingEnabled) {
		return nil, false
	}
	return o.IsBrandingEnabled, true
}

// HasIsBrandingEnabled returns a boolean if a field has been set.
func (o *HciAhvVm) HasIsBrandingEnabled() bool {
	if o != nil && !IsNil(o.IsBrandingEnabled) {
		return true
	}

	return false
}

// SetIsBrandingEnabled gets a reference to the given bool and assigns it to the IsBrandingEnabled field.
func (o *HciAhvVm) SetIsBrandingEnabled(v bool) {
	o.IsBrandingEnabled = &v
}

// GetIsCpuHotplugEnabled returns the IsCpuHotplugEnabled field value if set, zero value otherwise.
func (o *HciAhvVm) GetIsCpuHotplugEnabled() bool {
	if o == nil || IsNil(o.IsCpuHotplugEnabled) {
		var ret bool
		return ret
	}
	return *o.IsCpuHotplugEnabled
}

// GetIsCpuHotplugEnabledOk returns a tuple with the IsCpuHotplugEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HciAhvVm) GetIsCpuHotplugEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.IsCpuHotplugEnabled) {
		return nil, false
	}
	return o.IsCpuHotplugEnabled, true
}

// HasIsCpuHotplugEnabled returns a boolean if a field has been set.
func (o *HciAhvVm) HasIsCpuHotplugEnabled() bool {
	if o != nil && !IsNil(o.IsCpuHotplugEnabled) {
		return true
	}

	return false
}

// SetIsCpuHotplugEnabled gets a reference to the given bool and assigns it to the IsCpuHotplugEnabled field.
func (o *HciAhvVm) SetIsCpuHotplugEnabled(v bool) {
	o.IsCpuHotplugEnabled = &v
}

// GetIsCpuPassthroughEnabled returns the IsCpuPassthroughEnabled field value if set, zero value otherwise.
func (o *HciAhvVm) GetIsCpuPassthroughEnabled() bool {
	if o == nil || IsNil(o.IsCpuPassthroughEnabled) {
		var ret bool
		return ret
	}
	return *o.IsCpuPassthroughEnabled
}

// GetIsCpuPassthroughEnabledOk returns a tuple with the IsCpuPassthroughEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HciAhvVm) GetIsCpuPassthroughEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.IsCpuPassthroughEnabled) {
		return nil, false
	}
	return o.IsCpuPassthroughEnabled, true
}

// HasIsCpuPassthroughEnabled returns a boolean if a field has been set.
func (o *HciAhvVm) HasIsCpuPassthroughEnabled() bool {
	if o != nil && !IsNil(o.IsCpuPassthroughEnabled) {
		return true
	}

	return false
}

// SetIsCpuPassthroughEnabled gets a reference to the given bool and assigns it to the IsCpuPassthroughEnabled field.
func (o *HciAhvVm) SetIsCpuPassthroughEnabled(v bool) {
	o.IsCpuPassthroughEnabled = &v
}

// GetIsCrossClusterMigrationInProgress returns the IsCrossClusterMigrationInProgress field value if set, zero value otherwise.
func (o *HciAhvVm) GetIsCrossClusterMigrationInProgress() bool {
	if o == nil || IsNil(o.IsCrossClusterMigrationInProgress) {
		var ret bool
		return ret
	}
	return *o.IsCrossClusterMigrationInProgress
}

// GetIsCrossClusterMigrationInProgressOk returns a tuple with the IsCrossClusterMigrationInProgress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HciAhvVm) GetIsCrossClusterMigrationInProgressOk() (*bool, bool) {
	if o == nil || IsNil(o.IsCrossClusterMigrationInProgress) {
		return nil, false
	}
	return o.IsCrossClusterMigrationInProgress, true
}

// HasIsCrossClusterMigrationInProgress returns a boolean if a field has been set.
func (o *HciAhvVm) HasIsCrossClusterMigrationInProgress() bool {
	if o != nil && !IsNil(o.IsCrossClusterMigrationInProgress) {
		return true
	}

	return false
}

// SetIsCrossClusterMigrationInProgress gets a reference to the given bool and assigns it to the IsCrossClusterMigrationInProgress field.
func (o *HciAhvVm) SetIsCrossClusterMigrationInProgress(v bool) {
	o.IsCrossClusterMigrationInProgress = &v
}

// GetIsGpuConsoleEnabled returns the IsGpuConsoleEnabled field value if set, zero value otherwise.
func (o *HciAhvVm) GetIsGpuConsoleEnabled() bool {
	if o == nil || IsNil(o.IsGpuConsoleEnabled) {
		var ret bool
		return ret
	}
	return *o.IsGpuConsoleEnabled
}

// GetIsGpuConsoleEnabledOk returns a tuple with the IsGpuConsoleEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HciAhvVm) GetIsGpuConsoleEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.IsGpuConsoleEnabled) {
		return nil, false
	}
	return o.IsGpuConsoleEnabled, true
}

// HasIsGpuConsoleEnabled returns a boolean if a field has been set.
func (o *HciAhvVm) HasIsGpuConsoleEnabled() bool {
	if o != nil && !IsNil(o.IsGpuConsoleEnabled) {
		return true
	}

	return false
}

// SetIsGpuConsoleEnabled gets a reference to the given bool and assigns it to the IsGpuConsoleEnabled field.
func (o *HciAhvVm) SetIsGpuConsoleEnabled(v bool) {
	o.IsGpuConsoleEnabled = &v
}

// GetIsLiveMigrateCapable returns the IsLiveMigrateCapable field value if set, zero value otherwise.
func (o *HciAhvVm) GetIsLiveMigrateCapable() bool {
	if o == nil || IsNil(o.IsLiveMigrateCapable) {
		var ret bool
		return ret
	}
	return *o.IsLiveMigrateCapable
}

// GetIsLiveMigrateCapableOk returns a tuple with the IsLiveMigrateCapable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HciAhvVm) GetIsLiveMigrateCapableOk() (*bool, bool) {
	if o == nil || IsNil(o.IsLiveMigrateCapable) {
		return nil, false
	}
	return o.IsLiveMigrateCapable, true
}

// HasIsLiveMigrateCapable returns a boolean if a field has been set.
func (o *HciAhvVm) HasIsLiveMigrateCapable() bool {
	if o != nil && !IsNil(o.IsLiveMigrateCapable) {
		return true
	}

	return false
}

// SetIsLiveMigrateCapable gets a reference to the given bool and assigns it to the IsLiveMigrateCapable field.
func (o *HciAhvVm) SetIsLiveMigrateCapable(v bool) {
	o.IsLiveMigrateCapable = &v
}

// GetIsMemoryOvercommitEnabled returns the IsMemoryOvercommitEnabled field value if set, zero value otherwise.
func (o *HciAhvVm) GetIsMemoryOvercommitEnabled() bool {
	if o == nil || IsNil(o.IsMemoryOvercommitEnabled) {
		var ret bool
		return ret
	}
	return *o.IsMemoryOvercommitEnabled
}

// GetIsMemoryOvercommitEnabledOk returns a tuple with the IsMemoryOvercommitEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HciAhvVm) GetIsMemoryOvercommitEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.IsMemoryOvercommitEnabled) {
		return nil, false
	}
	return o.IsMemoryOvercommitEnabled, true
}

// HasIsMemoryOvercommitEnabled returns a boolean if a field has been set.
func (o *HciAhvVm) HasIsMemoryOvercommitEnabled() bool {
	if o != nil && !IsNil(o.IsMemoryOvercommitEnabled) {
		return true
	}

	return false
}

// SetIsMemoryOvercommitEnabled gets a reference to the given bool and assigns it to the IsMemoryOvercommitEnabled field.
func (o *HciAhvVm) SetIsMemoryOvercommitEnabled(v bool) {
	o.IsMemoryOvercommitEnabled = &v
}

// GetIsScsiControllerEnabled returns the IsScsiControllerEnabled field value if set, zero value otherwise.
func (o *HciAhvVm) GetIsScsiControllerEnabled() bool {
	if o == nil || IsNil(o.IsScsiControllerEnabled) {
		var ret bool
		return ret
	}
	return *o.IsScsiControllerEnabled
}

// GetIsScsiControllerEnabledOk returns a tuple with the IsScsiControllerEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HciAhvVm) GetIsScsiControllerEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.IsScsiControllerEnabled) {
		return nil, false
	}
	return o.IsScsiControllerEnabled, true
}

// HasIsScsiControllerEnabled returns a boolean if a field has been set.
func (o *HciAhvVm) HasIsScsiControllerEnabled() bool {
	if o != nil && !IsNil(o.IsScsiControllerEnabled) {
		return true
	}

	return false
}

// SetIsScsiControllerEnabled gets a reference to the given bool and assigns it to the IsScsiControllerEnabled field.
func (o *HciAhvVm) SetIsScsiControllerEnabled(v bool) {
	o.IsScsiControllerEnabled = &v
}

// GetIsVcpuHardPinningEnabled returns the IsVcpuHardPinningEnabled field value if set, zero value otherwise.
func (o *HciAhvVm) GetIsVcpuHardPinningEnabled() bool {
	if o == nil || IsNil(o.IsVcpuHardPinningEnabled) {
		var ret bool
		return ret
	}
	return *o.IsVcpuHardPinningEnabled
}

// GetIsVcpuHardPinningEnabledOk returns a tuple with the IsVcpuHardPinningEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HciAhvVm) GetIsVcpuHardPinningEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.IsVcpuHardPinningEnabled) {
		return nil, false
	}
	return o.IsVcpuHardPinningEnabled, true
}

// HasIsVcpuHardPinningEnabled returns a boolean if a field has been set.
func (o *HciAhvVm) HasIsVcpuHardPinningEnabled() bool {
	if o != nil && !IsNil(o.IsVcpuHardPinningEnabled) {
		return true
	}

	return false
}

// SetIsVcpuHardPinningEnabled gets a reference to the given bool and assigns it to the IsVcpuHardPinningEnabled field.
func (o *HciAhvVm) SetIsVcpuHardPinningEnabled(v bool) {
	o.IsVcpuHardPinningEnabled = &v
}

// GetIsVgaConsoleEnabled returns the IsVgaConsoleEnabled field value if set, zero value otherwise.
func (o *HciAhvVm) GetIsVgaConsoleEnabled() bool {
	if o == nil || IsNil(o.IsVgaConsoleEnabled) {
		var ret bool
		return ret
	}
	return *o.IsVgaConsoleEnabled
}

// GetIsVgaConsoleEnabledOk returns a tuple with the IsVgaConsoleEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HciAhvVm) GetIsVgaConsoleEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.IsVgaConsoleEnabled) {
		return nil, false
	}
	return o.IsVgaConsoleEnabled, true
}

// HasIsVgaConsoleEnabled returns a boolean if a field has been set.
func (o *HciAhvVm) HasIsVgaConsoleEnabled() bool {
	if o != nil && !IsNil(o.IsVgaConsoleEnabled) {
		return true
	}

	return false
}

// SetIsVgaConsoleEnabled gets a reference to the given bool and assigns it to the IsVgaConsoleEnabled field.
func (o *HciAhvVm) SetIsVgaConsoleEnabled(v bool) {
	o.IsVgaConsoleEnabled = &v
}

// GetIsVtpmEnabled returns the IsVtpmEnabled field value if set, zero value otherwise.
func (o *HciAhvVm) GetIsVtpmEnabled() bool {
	if o == nil || IsNil(o.IsVtpmEnabled) {
		var ret bool
		return ret
	}
	return *o.IsVtpmEnabled
}

// GetIsVtpmEnabledOk returns a tuple with the IsVtpmEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HciAhvVm) GetIsVtpmEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.IsVtpmEnabled) {
		return nil, false
	}
	return o.IsVtpmEnabled, true
}

// HasIsVtpmEnabled returns a boolean if a field has been set.
func (o *HciAhvVm) HasIsVtpmEnabled() bool {
	if o != nil && !IsNil(o.IsVtpmEnabled) {
		return true
	}

	return false
}

// SetIsVtpmEnabled gets a reference to the given bool and assigns it to the IsVtpmEnabled field.
func (o *HciAhvVm) SetIsVtpmEnabled(v bool) {
	o.IsVtpmEnabled = &v
}

// GetMachineType returns the MachineType field value if set, zero value otherwise.
func (o *HciAhvVm) GetMachineType() string {
	if o == nil || IsNil(o.MachineType) {
		var ret string
		return ret
	}
	return *o.MachineType
}

// GetMachineTypeOk returns a tuple with the MachineType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HciAhvVm) GetMachineTypeOk() (*string, bool) {
	if o == nil || IsNil(o.MachineType) {
		return nil, false
	}
	return o.MachineType, true
}

// HasMachineType returns a boolean if a field has been set.
func (o *HciAhvVm) HasMachineType() bool {
	if o != nil && !IsNil(o.MachineType) {
		return true
	}

	return false
}

// SetMachineType gets a reference to the given string and assigns it to the MachineType field.
func (o *HciAhvVm) SetMachineType(v string) {
	o.MachineType = &v
}

// GetNumNumaNodes returns the NumNumaNodes field value if set, zero value otherwise.
func (o *HciAhvVm) GetNumNumaNodes() int32 {
	if o == nil || IsNil(o.NumNumaNodes) {
		var ret int32
		return ret
	}
	return *o.NumNumaNodes
}

// GetNumNumaNodesOk returns a tuple with the NumNumaNodes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HciAhvVm) GetNumNumaNodesOk() (*int32, bool) {
	if o == nil || IsNil(o.NumNumaNodes) {
		return nil, false
	}
	return o.NumNumaNodes, true
}

// HasNumNumaNodes returns a boolean if a field has been set.
func (o *HciAhvVm) HasNumNumaNodes() bool {
	if o != nil && !IsNil(o.NumNumaNodes) {
		return true
	}

	return false
}

// SetNumNumaNodes gets a reference to the given int32 and assigns it to the NumNumaNodes field.
func (o *HciAhvVm) SetNumNumaNodes(v int32) {
	o.NumNumaNodes = &v
}

// GetNumSockets returns the NumSockets field value if set, zero value otherwise.
func (o *HciAhvVm) GetNumSockets() int32 {
	if o == nil || IsNil(o.NumSockets) {
		var ret int32
		return ret
	}
	return *o.NumSockets
}

// GetNumSocketsOk returns a tuple with the NumSockets field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HciAhvVm) GetNumSocketsOk() (*int32, bool) {
	if o == nil || IsNil(o.NumSockets) {
		return nil, false
	}
	return o.NumSockets, true
}

// HasNumSockets returns a boolean if a field has been set.
func (o *HciAhvVm) HasNumSockets() bool {
	if o != nil && !IsNil(o.NumSockets) {
		return true
	}

	return false
}

// SetNumSockets gets a reference to the given int32 and assigns it to the NumSockets field.
func (o *HciAhvVm) SetNumSockets(v int32) {
	o.NumSockets = &v
}

// GetNumThreadsPerCore returns the NumThreadsPerCore field value if set, zero value otherwise.
func (o *HciAhvVm) GetNumThreadsPerCore() int32 {
	if o == nil || IsNil(o.NumThreadsPerCore) {
		var ret int32
		return ret
	}
	return *o.NumThreadsPerCore
}

// GetNumThreadsPerCoreOk returns a tuple with the NumThreadsPerCore field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HciAhvVm) GetNumThreadsPerCoreOk() (*int32, bool) {
	if o == nil || IsNil(o.NumThreadsPerCore) {
		return nil, false
	}
	return o.NumThreadsPerCore, true
}

// HasNumThreadsPerCore returns a boolean if a field has been set.
func (o *HciAhvVm) HasNumThreadsPerCore() bool {
	if o != nil && !IsNil(o.NumThreadsPerCore) {
		return true
	}

	return false
}

// SetNumThreadsPerCore gets a reference to the given int32 and assigns it to the NumThreadsPerCore field.
func (o *HciAhvVm) SetNumThreadsPerCore(v int32) {
	o.NumThreadsPerCore = &v
}

// GetProtectionType returns the ProtectionType field value if set, zero value otherwise.
func (o *HciAhvVm) GetProtectionType() string {
	if o == nil || IsNil(o.ProtectionType) {
		var ret string
		return ret
	}
	return *o.ProtectionType
}

// GetProtectionTypeOk returns a tuple with the ProtectionType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HciAhvVm) GetProtectionTypeOk() (*string, bool) {
	if o == nil || IsNil(o.ProtectionType) {
		return nil, false
	}
	return o.ProtectionType, true
}

// HasProtectionType returns a boolean if a field has been set.
func (o *HciAhvVm) HasProtectionType() bool {
	if o != nil && !IsNil(o.ProtectionType) {
		return true
	}

	return false
}

// SetProtectionType gets a reference to the given string and assigns it to the ProtectionType field.
func (o *HciAhvVm) SetProtectionType(v string) {
	o.ProtectionType = &v
}

// GetSourceUuid returns the SourceUuid field value if set, zero value otherwise.
func (o *HciAhvVm) GetSourceUuid() string {
	if o == nil || IsNil(o.SourceUuid) {
		var ret string
		return ret
	}
	return *o.SourceUuid
}

// GetSourceUuidOk returns a tuple with the SourceUuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HciAhvVm) GetSourceUuidOk() (*string, bool) {
	if o == nil || IsNil(o.SourceUuid) {
		return nil, false
	}
	return o.SourceUuid, true
}

// HasSourceUuid returns a boolean if a field has been set.
func (o *HciAhvVm) HasSourceUuid() bool {
	if o != nil && !IsNil(o.SourceUuid) {
		return true
	}

	return false
}

// SetSourceUuid gets a reference to the given string and assigns it to the SourceUuid field.
func (o *HciAhvVm) SetSourceUuid(v string) {
	o.SourceUuid = &v
}

// GetUpdateTime returns the UpdateTime field value if set, zero value otherwise.
func (o *HciAhvVm) GetUpdateTime() time.Time {
	if o == nil || IsNil(o.UpdateTime) {
		var ret time.Time
		return ret
	}
	return *o.UpdateTime
}

// GetUpdateTimeOk returns a tuple with the UpdateTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HciAhvVm) GetUpdateTimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.UpdateTime) {
		return nil, false
	}
	return o.UpdateTime, true
}

// HasUpdateTime returns a boolean if a field has been set.
func (o *HciAhvVm) HasUpdateTime() bool {
	if o != nil && !IsNil(o.UpdateTime) {
		return true
	}

	return false
}

// SetUpdateTime gets a reference to the given time.Time and assigns it to the UpdateTime field.
func (o *HciAhvVm) SetUpdateTime(v time.Time) {
	o.UpdateTime = &v
}

// GetVtpmModuleVersion returns the VtpmModuleVersion field value if set, zero value otherwise.
func (o *HciAhvVm) GetVtpmModuleVersion() string {
	if o == nil || IsNil(o.VtpmModuleVersion) {
		var ret string
		return ret
	}
	return *o.VtpmModuleVersion
}

// GetVtpmModuleVersionOk returns a tuple with the VtpmModuleVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HciAhvVm) GetVtpmModuleVersionOk() (*string, bool) {
	if o == nil || IsNil(o.VtpmModuleVersion) {
		return nil, false
	}
	return o.VtpmModuleVersion, true
}

// HasVtpmModuleVersion returns a boolean if a field has been set.
func (o *HciAhvVm) HasVtpmModuleVersion() bool {
	if o != nil && !IsNil(o.VtpmModuleVersion) {
		return true
	}

	return false
}

// SetVtpmModuleVersion gets a reference to the given string and assigns it to the VtpmModuleVersion field.
func (o *HciAhvVm) SetVtpmModuleVersion(v string) {
	o.VtpmModuleVersion = &v
}

// GetDisks returns the Disks field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HciAhvVm) GetDisks() []HciAhvVmDiskRelationship {
	if o == nil {
		var ret []HciAhvVmDiskRelationship
		return ret
	}
	return o.Disks
}

// GetDisksOk returns a tuple with the Disks field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HciAhvVm) GetDisksOk() ([]HciAhvVmDiskRelationship, bool) {
	if o == nil || IsNil(o.Disks) {
		return nil, false
	}
	return o.Disks, true
}

// HasDisks returns a boolean if a field has been set.
func (o *HciAhvVm) HasDisks() bool {
	if o != nil && !IsNil(o.Disks) {
		return true
	}

	return false
}

// SetDisks gets a reference to the given []HciAhvVmDiskRelationship and assigns it to the Disks field.
func (o *HciAhvVm) SetDisks(v []HciAhvVmDiskRelationship) {
	o.Disks = v
}

// GetGpus returns the Gpus field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HciAhvVm) GetGpus() []HciAhvVmGpuRelationship {
	if o == nil {
		var ret []HciAhvVmGpuRelationship
		return ret
	}
	return o.Gpus
}

// GetGpusOk returns a tuple with the Gpus field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HciAhvVm) GetGpusOk() ([]HciAhvVmGpuRelationship, bool) {
	if o == nil || IsNil(o.Gpus) {
		return nil, false
	}
	return o.Gpus, true
}

// HasGpus returns a boolean if a field has been set.
func (o *HciAhvVm) HasGpus() bool {
	if o != nil && !IsNil(o.Gpus) {
		return true
	}

	return false
}

// SetGpus gets a reference to the given []HciAhvVmGpuRelationship and assigns it to the Gpus field.
func (o *HciAhvVm) SetGpus(v []HciAhvVmGpuRelationship) {
	o.Gpus = v
}

// GetNics returns the Nics field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HciAhvVm) GetNics() []HciAhvVmNicRelationship {
	if o == nil {
		var ret []HciAhvVmNicRelationship
		return ret
	}
	return o.Nics
}

// GetNicsOk returns a tuple with the Nics field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HciAhvVm) GetNicsOk() ([]HciAhvVmNicRelationship, bool) {
	if o == nil || IsNil(o.Nics) {
		return nil, false
	}
	return o.Nics, true
}

// HasNics returns a boolean if a field has been set.
func (o *HciAhvVm) HasNics() bool {
	if o != nil && !IsNil(o.Nics) {
		return true
	}

	return false
}

// SetNics gets a reference to the given []HciAhvVmNicRelationship and assigns it to the Nics field.
func (o *HciAhvVm) SetNics(v []HciAhvVmNicRelationship) {
	o.Nics = v
}

// GetRegisteredDevice returns the RegisteredDevice field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HciAhvVm) GetRegisteredDevice() AssetDeviceRegistrationRelationship {
	if o == nil || IsNil(o.RegisteredDevice.Get()) {
		var ret AssetDeviceRegistrationRelationship
		return ret
	}
	return *o.RegisteredDevice.Get()
}

// GetRegisteredDeviceOk returns a tuple with the RegisteredDevice field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HciAhvVm) GetRegisteredDeviceOk() (*AssetDeviceRegistrationRelationship, bool) {
	if o == nil {
		return nil, false
	}
	return o.RegisteredDevice.Get(), o.RegisteredDevice.IsSet()
}

// HasRegisteredDevice returns a boolean if a field has been set.
func (o *HciAhvVm) HasRegisteredDevice() bool {
	if o != nil && o.RegisteredDevice.IsSet() {
		return true
	}

	return false
}

// SetRegisteredDevice gets a reference to the given NullableAssetDeviceRegistrationRelationship and assigns it to the RegisteredDevice field.
func (o *HciAhvVm) SetRegisteredDevice(v AssetDeviceRegistrationRelationship) {
	o.RegisteredDevice.Set(&v)
}

// SetRegisteredDeviceNil sets the value for RegisteredDevice to be an explicit nil
func (o *HciAhvVm) SetRegisteredDeviceNil() {
	o.RegisteredDevice.Set(nil)
}

// UnsetRegisteredDevice ensures that no value is present for RegisteredDevice, not even an explicit nil
func (o *HciAhvVm) UnsetRegisteredDevice() {
	o.RegisteredDevice.Unset()
}

func (o HciAhvVm) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o HciAhvVm) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	serializedHciBaseVm, errHciBaseVm := json.Marshal(o.HciBaseVm)
	if errHciBaseVm != nil {
		return map[string]interface{}{}, errHciBaseVm
	}
	errHciBaseVm = json.Unmarshal([]byte(serializedHciBaseVm), &toSerialize)
	if errHciBaseVm != nil {
		return map[string]interface{}{}, errHciBaseVm
	}
	if _, exists := toSerialize["ClassId"]; !exists {
		toSerialize["ClassId"] = o.GetDefaultClassId()
	}
	toSerialize["ClassId"] = o.ClassId
	if _, exists := toSerialize["ObjectType"]; !exists {
		toSerialize["ObjectType"] = o.GetDefaultObjectType()
	}
	toSerialize["ObjectType"] = o.ObjectType
	if !IsNil(o.BiosUuid) {
		toSerialize["BiosUuid"] = o.BiosUuid
	}
	if !IsNil(o.CreationTime) {
		toSerialize["CreationTime"] = o.CreationTime
	}
	if o.EnabledCpuFeatures != nil {
		toSerialize["EnabledCpuFeatures"] = o.EnabledCpuFeatures
	}
	if !IsNil(o.GenerationUuid) {
		toSerialize["GenerationUuid"] = o.GenerationUuid
	}
	if o.GuestTools.IsSet() {
		toSerialize["GuestTools"] = o.GuestTools.Get()
	}
	if !IsNil(o.HardwareClockTimezone) {
		toSerialize["HardwareClockTimezone"] = o.HardwareClockTimezone
	}
	if !IsNil(o.IsAgentVm) {
		toSerialize["IsAgentVm"] = o.IsAgentVm
	}
	if !IsNil(o.IsBrandingEnabled) {
		toSerialize["IsBrandingEnabled"] = o.IsBrandingEnabled
	}
	if !IsNil(o.IsCpuHotplugEnabled) {
		toSerialize["IsCpuHotplugEnabled"] = o.IsCpuHotplugEnabled
	}
	if !IsNil(o.IsCpuPassthroughEnabled) {
		toSerialize["IsCpuPassthroughEnabled"] = o.IsCpuPassthroughEnabled
	}
	if !IsNil(o.IsCrossClusterMigrationInProgress) {
		toSerialize["IsCrossClusterMigrationInProgress"] = o.IsCrossClusterMigrationInProgress
	}
	if !IsNil(o.IsGpuConsoleEnabled) {
		toSerialize["IsGpuConsoleEnabled"] = o.IsGpuConsoleEnabled
	}
	if !IsNil(o.IsLiveMigrateCapable) {
		toSerialize["IsLiveMigrateCapable"] = o.IsLiveMigrateCapable
	}
	if !IsNil(o.IsMemoryOvercommitEnabled) {
		toSerialize["IsMemoryOvercommitEnabled"] = o.IsMemoryOvercommitEnabled
	}
	if !IsNil(o.IsScsiControllerEnabled) {
		toSerialize["IsScsiControllerEnabled"] = o.IsScsiControllerEnabled
	}
	if !IsNil(o.IsVcpuHardPinningEnabled) {
		toSerialize["IsVcpuHardPinningEnabled"] = o.IsVcpuHardPinningEnabled
	}
	if !IsNil(o.IsVgaConsoleEnabled) {
		toSerialize["IsVgaConsoleEnabled"] = o.IsVgaConsoleEnabled
	}
	if !IsNil(o.IsVtpmEnabled) {
		toSerialize["IsVtpmEnabled"] = o.IsVtpmEnabled
	}
	if !IsNil(o.MachineType) {
		toSerialize["MachineType"] = o.MachineType
	}
	if !IsNil(o.NumNumaNodes) {
		toSerialize["NumNumaNodes"] = o.NumNumaNodes
	}
	if !IsNil(o.NumSockets) {
		toSerialize["NumSockets"] = o.NumSockets
	}
	if !IsNil(o.NumThreadsPerCore) {
		toSerialize["NumThreadsPerCore"] = o.NumThreadsPerCore
	}
	if !IsNil(o.ProtectionType) {
		toSerialize["ProtectionType"] = o.ProtectionType
	}
	if !IsNil(o.SourceUuid) {
		toSerialize["SourceUuid"] = o.SourceUuid
	}
	if !IsNil(o.UpdateTime) {
		toSerialize["UpdateTime"] = o.UpdateTime
	}
	if !IsNil(o.VtpmModuleVersion) {
		toSerialize["VtpmModuleVersion"] = o.VtpmModuleVersion
	}
	if o.Disks != nil {
		toSerialize["Disks"] = o.Disks
	}
	if o.Gpus != nil {
		toSerialize["Gpus"] = o.Gpus
	}
	if o.Nics != nil {
		toSerialize["Nics"] = o.Nics
	}
	if o.RegisteredDevice.IsSet() {
		toSerialize["RegisteredDevice"] = o.RegisteredDevice.Get()
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *HciAhvVm) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"ClassId",
		"ObjectType",
	}

	// defaultValueFuncMap captures the default values for required properties.
	// These values are used when required properties are missing from the payload.
	defaultValueFuncMap := map[string]func() interface{}{
		"ClassId":    o.GetDefaultClassId,
		"ObjectType": o.GetDefaultObjectType,
	}
	var defaultValueApplied bool
	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			if _, ok := defaultValueFuncMap[requiredProperty]; ok {
				allProperties[requiredProperty] = defaultValueFuncMap[requiredProperty]()
				defaultValueApplied = true
			}
		}
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	if defaultValueApplied {
		data, err = json.Marshal(allProperties)
		if err != nil {
			return err
		}
	}
	type HciAhvVmWithoutEmbeddedStruct struct {
		// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.
		ClassId string `json:"ClassId"`
		// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
		ObjectType string `json:"ObjectType"`
		// The BIOS UUID of the VM, similar to physical server's serial number.
		BiosUuid *string `json:"BiosUuid,omitempty"`
		// The time the VM was created.
		CreationTime       *time.Time `json:"CreationTime,omitempty"`
		EnabledCpuFeatures []string   `json:"EnabledCpuFeatures,omitempty"`
		// The generation UUID of the VM.
		GenerationUuid *string                  `json:"GenerationUuid,omitempty"`
		GuestTools     NullableHciAhvGuestTools `json:"GuestTools,omitempty"`
		// VM hardware clock timezone in IANA TZDB format (America/Los_Angeles).  Default: UTC.
		HardwareClockTimezone *string `json:"HardwareClockTimezone,omitempty"`
		// Indicates whether the VM is an agent VM or not. When their host enters maintenance mode, once the normal VMs are evacuated, the  agent VMs are powered off. When the host is restored, agent VMs  are powered on before the normal VMs are restored. In other words,  agent VMs cannot be HA-protected or live migrated.
		IsAgentVm *bool `json:"IsAgentVm,omitempty"`
		// Indicates whether to remove AHV branding from VM firmware tables or not.
		IsBrandingEnabled *bool `json:"IsBrandingEnabled,omitempty"`
		// The CPU hotplug status of the VM. It indicates whether the CPU  hotplug feature should be enabled for the VM or not. If enabled,  the VM can add or remove vCPUs while the VM is running.
		IsCpuHotplugEnabled *bool `json:"IsCpuHotplugEnabled,omitempty"`
		// The CPU passthrough status of the VM. It Indicates whether to passthrough the host CPU features to the guest or not.  Enabling this will make VM incapable of live migration.
		IsCpuPassthroughEnabled *bool `json:"IsCpuPassthroughEnabled,omitempty"`
		// Indicates whether the VM is in the process of cross cluster migration or not.
		IsCrossClusterMigrationInProgress *bool `json:"IsCrossClusterMigrationInProgress,omitempty"`
		// The GPU console status of the VM. It indicates whether the GPU  console should be enabled for the VM or not. If enabled, the VM  will have access to the GPU console.
		IsGpuConsoleEnabled *bool `json:"IsGpuConsoleEnabled,omitempty"`
		// Indicates whether the VM is live migrate capable or not.  If the VM is not live migrate capable, it cannot be live migrated.
		IsLiveMigrateCapable *bool `json:"IsLiveMigrateCapable,omitempty"`
		// The memory overcommit status of the VM. It indicates whether the memory overcommit feature should be enabled for the VM or not. If enabled, parts of the VM memory may reside outside of the  hypervisor physical memory. Once enabled, it should be expected  that the VM may suffer performance degradation.
		IsMemoryOvercommitEnabled *bool `json:"IsMemoryOvercommitEnabled,omitempty"`
		// The SCSI controller status of the VM. It indicates whether the  SCSI controller should be enabled for the VM or not. If enabled,  the VM will have access to the SCSI controller.
		IsScsiControllerEnabled *bool `json:"IsScsiControllerEnabled,omitempty"`
		// The hard pinning status of the vCPU. It indicates whether the vCPUs  should be hard pinned to specific pCPUs or not.
		IsVcpuHardPinningEnabled *bool `json:"IsVcpuHardPinningEnabled,omitempty"`
		// Indicates whether to enable VGA console for the VM or not.
		IsVgaConsoleEnabled *bool `json:"IsVgaConsoleEnabled,omitempty"`
		// Indicates whether the VM has a virtual TPM enabled or not.
		IsVtpmEnabled *bool `json:"IsVtpmEnabled,omitempty"`
		// The machine type of the VM. Possible values are PC, PSERIES, Q35.
		MachineType *string `json:"MachineType,omitempty"`
		// Number of NUMA nodes. 0 means NUMA is disabled.
		NumNumaNodes *int32 `json:"NumNumaNodes,omitempty"`
		// The number of sockets of the VM.
		NumSockets *int32 `json:"NumSockets,omitempty"`
		// The number of threads per core of the VM.
		NumThreadsPerCore *int32 `json:"NumThreadsPerCore,omitempty"`
		// The type of protection applied on a VM.  Possible values are UNPROTECTED, PD_PROTECTED, and RULE_PROTECTED. PD_PROTECTED indicates a VM is protected using the Prism Element.  RULE_PROTECTED indicates a VM protection using the Prism Central.
		ProtectionType *string `json:"ProtectionType,omitempty"`
		// The source UUID of the VM.
		SourceUuid *string `json:"SourceUuid,omitempty"`
		// The time the VM was last updated.
		UpdateTime *time.Time `json:"UpdateTime,omitempty"`
		// The version of the vTPM module.
		VtpmModuleVersion *string `json:"VtpmModuleVersion,omitempty"`
		// An array of relationships to hciAhvVmDisk resources.
		Disks []HciAhvVmDiskRelationship `json:"Disks,omitempty"`
		// An array of relationships to hciAhvVmGpu resources.
		Gpus []HciAhvVmGpuRelationship `json:"Gpus,omitempty"`
		// An array of relationships to hciAhvVmNic resources.
		Nics             []HciAhvVmNicRelationship                   `json:"Nics,omitempty"`
		RegisteredDevice NullableAssetDeviceRegistrationRelationship `json:"RegisteredDevice,omitempty"`
	}

	varHciAhvVmWithoutEmbeddedStruct := HciAhvVmWithoutEmbeddedStruct{}

	err = json.Unmarshal(data, &varHciAhvVmWithoutEmbeddedStruct)
	if err == nil {
		varHciAhvVm := _HciAhvVm{}
		varHciAhvVm.ClassId = varHciAhvVmWithoutEmbeddedStruct.ClassId
		varHciAhvVm.ObjectType = varHciAhvVmWithoutEmbeddedStruct.ObjectType
		varHciAhvVm.BiosUuid = varHciAhvVmWithoutEmbeddedStruct.BiosUuid
		varHciAhvVm.CreationTime = varHciAhvVmWithoutEmbeddedStruct.CreationTime
		varHciAhvVm.EnabledCpuFeatures = varHciAhvVmWithoutEmbeddedStruct.EnabledCpuFeatures
		varHciAhvVm.GenerationUuid = varHciAhvVmWithoutEmbeddedStruct.GenerationUuid
		varHciAhvVm.GuestTools = varHciAhvVmWithoutEmbeddedStruct.GuestTools
		varHciAhvVm.HardwareClockTimezone = varHciAhvVmWithoutEmbeddedStruct.HardwareClockTimezone
		varHciAhvVm.IsAgentVm = varHciAhvVmWithoutEmbeddedStruct.IsAgentVm
		varHciAhvVm.IsBrandingEnabled = varHciAhvVmWithoutEmbeddedStruct.IsBrandingEnabled
		varHciAhvVm.IsCpuHotplugEnabled = varHciAhvVmWithoutEmbeddedStruct.IsCpuHotplugEnabled
		varHciAhvVm.IsCpuPassthroughEnabled = varHciAhvVmWithoutEmbeddedStruct.IsCpuPassthroughEnabled
		varHciAhvVm.IsCrossClusterMigrationInProgress = varHciAhvVmWithoutEmbeddedStruct.IsCrossClusterMigrationInProgress
		varHciAhvVm.IsGpuConsoleEnabled = varHciAhvVmWithoutEmbeddedStruct.IsGpuConsoleEnabled
		varHciAhvVm.IsLiveMigrateCapable = varHciAhvVmWithoutEmbeddedStruct.IsLiveMigrateCapable
		varHciAhvVm.IsMemoryOvercommitEnabled = varHciAhvVmWithoutEmbeddedStruct.IsMemoryOvercommitEnabled
		varHciAhvVm.IsScsiControllerEnabled = varHciAhvVmWithoutEmbeddedStruct.IsScsiControllerEnabled
		varHciAhvVm.IsVcpuHardPinningEnabled = varHciAhvVmWithoutEmbeddedStruct.IsVcpuHardPinningEnabled
		varHciAhvVm.IsVgaConsoleEnabled = varHciAhvVmWithoutEmbeddedStruct.IsVgaConsoleEnabled
		varHciAhvVm.IsVtpmEnabled = varHciAhvVmWithoutEmbeddedStruct.IsVtpmEnabled
		varHciAhvVm.MachineType = varHciAhvVmWithoutEmbeddedStruct.MachineType
		varHciAhvVm.NumNumaNodes = varHciAhvVmWithoutEmbeddedStruct.NumNumaNodes
		varHciAhvVm.NumSockets = varHciAhvVmWithoutEmbeddedStruct.NumSockets
		varHciAhvVm.NumThreadsPerCore = varHciAhvVmWithoutEmbeddedStruct.NumThreadsPerCore
		varHciAhvVm.ProtectionType = varHciAhvVmWithoutEmbeddedStruct.ProtectionType
		varHciAhvVm.SourceUuid = varHciAhvVmWithoutEmbeddedStruct.SourceUuid
		varHciAhvVm.UpdateTime = varHciAhvVmWithoutEmbeddedStruct.UpdateTime
		varHciAhvVm.VtpmModuleVersion = varHciAhvVmWithoutEmbeddedStruct.VtpmModuleVersion
		varHciAhvVm.Disks = varHciAhvVmWithoutEmbeddedStruct.Disks
		varHciAhvVm.Gpus = varHciAhvVmWithoutEmbeddedStruct.Gpus
		varHciAhvVm.Nics = varHciAhvVmWithoutEmbeddedStruct.Nics
		varHciAhvVm.RegisteredDevice = varHciAhvVmWithoutEmbeddedStruct.RegisteredDevice
		*o = HciAhvVm(varHciAhvVm)
	} else {
		return err
	}

	varHciAhvVm := _HciAhvVm{}

	err = json.Unmarshal(data, &varHciAhvVm)
	if err == nil {
		o.HciBaseVm = varHciAhvVm.HciBaseVm
	} else {
		return err
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "ClassId")
		delete(additionalProperties, "ObjectType")
		delete(additionalProperties, "BiosUuid")
		delete(additionalProperties, "CreationTime")
		delete(additionalProperties, "EnabledCpuFeatures")
		delete(additionalProperties, "GenerationUuid")
		delete(additionalProperties, "GuestTools")
		delete(additionalProperties, "HardwareClockTimezone")
		delete(additionalProperties, "IsAgentVm")
		delete(additionalProperties, "IsBrandingEnabled")
		delete(additionalProperties, "IsCpuHotplugEnabled")
		delete(additionalProperties, "IsCpuPassthroughEnabled")
		delete(additionalProperties, "IsCrossClusterMigrationInProgress")
		delete(additionalProperties, "IsGpuConsoleEnabled")
		delete(additionalProperties, "IsLiveMigrateCapable")
		delete(additionalProperties, "IsMemoryOvercommitEnabled")
		delete(additionalProperties, "IsScsiControllerEnabled")
		delete(additionalProperties, "IsVcpuHardPinningEnabled")
		delete(additionalProperties, "IsVgaConsoleEnabled")
		delete(additionalProperties, "IsVtpmEnabled")
		delete(additionalProperties, "MachineType")
		delete(additionalProperties, "NumNumaNodes")
		delete(additionalProperties, "NumSockets")
		delete(additionalProperties, "NumThreadsPerCore")
		delete(additionalProperties, "ProtectionType")
		delete(additionalProperties, "SourceUuid")
		delete(additionalProperties, "UpdateTime")
		delete(additionalProperties, "VtpmModuleVersion")
		delete(additionalProperties, "Disks")
		delete(additionalProperties, "Gpus")
		delete(additionalProperties, "Nics")
		delete(additionalProperties, "RegisteredDevice")

		// remove fields from embedded structs
		reflectHciBaseVm := reflect.ValueOf(o.HciBaseVm)
		for i := 0; i < reflectHciBaseVm.Type().NumField(); i++ {
			t := reflectHciBaseVm.Type().Field(i)

			if jsonTag := t.Tag.Get("json"); jsonTag != "" {
				fieldName := ""
				if commaIdx := strings.Index(jsonTag, ","); commaIdx > 0 {
					fieldName = jsonTag[:commaIdx]
				} else {
					fieldName = jsonTag
				}
				if fieldName != "AdditionalProperties" {
					delete(additionalProperties, fieldName)
				}
			}
		}

		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableHciAhvVm struct {
	value *HciAhvVm
	isSet bool
}

func (v NullableHciAhvVm) Get() *HciAhvVm {
	return v.value
}

func (v *NullableHciAhvVm) Set(val *HciAhvVm) {
	v.value = val
	v.isSet = true
}

func (v NullableHciAhvVm) IsSet() bool {
	return v.isSet
}

func (v *NullableHciAhvVm) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHciAhvVm(val *HciAhvVm) *NullableHciAhvVm {
	return &NullableHciAhvVm{value: val, isSet: true}
}

func (v NullableHciAhvVm) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHciAhvVm) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
