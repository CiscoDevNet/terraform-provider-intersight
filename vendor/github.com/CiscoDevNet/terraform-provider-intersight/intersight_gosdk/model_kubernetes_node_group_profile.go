/*
Cisco Intersight

Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations. The Intersight OpenAPI document defines the complete set of properties that are returned in the HTTP response. From that perspective, a client can expect that no additional properties are returned, unless these properties are explicitly defined in the OpenAPI document. However, when a client uses an older version of the Intersight OpenAPI document, the server may send additional properties because the software is more recent than the client. In that case, the client may receive properties that it does not know about. Some generated SDKs perform a strict validation of the HTTP response body against the OpenAPI document.

API version: 1.0.11-18775
Contact: intersight@cisco.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package intersight

import (
	"encoding/json"
	"fmt"
	"reflect"
	"strings"
)

// checks if the KubernetesNodeGroupProfile type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &KubernetesNodeGroupProfile{}

// KubernetesNodeGroupProfile A configuration profile for a node group in a Kubernetes cluster.
type KubernetesNodeGroupProfile struct {
	PolicyAbstractConfigProfile
	// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.
	ClassId string `json:"ClassId"`
	// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
	ObjectType string `json:"ObjectType"`
	// Current number of nodes in this node group at any given point in time.
	Currentsize *int64 `json:"Currentsize,omitempty"`
	// Desired number of nodes in this node group, same as minsize initially and is updated by the auto-scaler.
	Desiredsize *int64                      `json:"Desiredsize,omitempty"`
	GpuConfig   []InfraBaseGpuConfiguration `json:"GpuConfig,omitempty"`
	Labels      []KubernetesNodeGroupLabel  `json:"Labels,omitempty"`
	// Maximum number of nodes this node group can scale up to during repair, replacement or upgrade operations.
	Maxsize *int64 `json:"Maxsize,omitempty"`
	// Minimum number of available nodes this node group can scale down to during repair, replacement or upgrade operations.
	Minsize *int64 `json:"Minsize,omitempty"`
	// The node type ControlPlane, Worker or ControlPlaneWorker. * `Worker` - Node will be marked as a worker node. * `ControlPlane` - Node will be marked as a control plane node. * `ControlPlaneWorker` - Node will be both a controle plane and a worker.
	NodeType       *string                                                  `json:"NodeType,omitempty"`
	Taints         []KubernetesNodeGroupTaint                               `json:"Taints,omitempty"`
	ClusterProfile NullableKubernetesClusterProfileRelationship             `json:"ClusterProfile,omitempty"`
	InfraProvider  NullableKubernetesBaseInfrastructureProviderRelationship `json:"InfraProvider,omitempty"`
	// An array of relationships to ippoolPool resources.
	// Deprecated
	IpPools           []IppoolPoolRelationship                    `json:"IpPools,omitempty"`
	KubernetesVersion NullableKubernetesVersionPolicyRelationship `json:"KubernetesVersion,omitempty"`
	// An array of relationships to kubernetesNodeProfile resources.
	Nodes                []KubernetesNodeProfileRelationship `json:"Nodes,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _KubernetesNodeGroupProfile KubernetesNodeGroupProfile

// NewKubernetesNodeGroupProfile instantiates a new KubernetesNodeGroupProfile object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewKubernetesNodeGroupProfile(classId string, objectType string) *KubernetesNodeGroupProfile {
	this := KubernetesNodeGroupProfile{}
	this.ClassId = classId
	this.ObjectType = objectType
	var type_ string = "instance"
	this.Type = &type_
	var action string = "No-op"
	this.Action = &action
	var desiredsize int64 = 3
	this.Desiredsize = &desiredsize
	var nodeType string = "Worker"
	this.NodeType = &nodeType
	return &this
}

// NewKubernetesNodeGroupProfileWithDefaults instantiates a new KubernetesNodeGroupProfile object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewKubernetesNodeGroupProfileWithDefaults() *KubernetesNodeGroupProfile {
	this := KubernetesNodeGroupProfile{}
	var classId string = "kubernetes.NodeGroupProfile"
	this.ClassId = classId
	var objectType string = "kubernetes.NodeGroupProfile"
	this.ObjectType = objectType
	var desiredsize int64 = 3
	this.Desiredsize = &desiredsize
	var nodeType string = "Worker"
	this.NodeType = &nodeType
	return &this
}

// GetClassId returns the ClassId field value
func (o *KubernetesNodeGroupProfile) GetClassId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ClassId
}

// GetClassIdOk returns a tuple with the ClassId field value
// and a boolean to check if the value has been set.
func (o *KubernetesNodeGroupProfile) GetClassIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ClassId, true
}

// SetClassId sets field value
func (o *KubernetesNodeGroupProfile) SetClassId(v string) {
	o.ClassId = v
}

// GetDefaultClassId returns the default value "kubernetes.NodeGroupProfile" of the ClassId field.
func (o *KubernetesNodeGroupProfile) GetDefaultClassId() interface{} {
	return "kubernetes.NodeGroupProfile"
}

// GetObjectType returns the ObjectType field value
func (o *KubernetesNodeGroupProfile) GetObjectType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ObjectType
}

// GetObjectTypeOk returns a tuple with the ObjectType field value
// and a boolean to check if the value has been set.
func (o *KubernetesNodeGroupProfile) GetObjectTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ObjectType, true
}

// SetObjectType sets field value
func (o *KubernetesNodeGroupProfile) SetObjectType(v string) {
	o.ObjectType = v
}

// GetDefaultObjectType returns the default value "kubernetes.NodeGroupProfile" of the ObjectType field.
func (o *KubernetesNodeGroupProfile) GetDefaultObjectType() interface{} {
	return "kubernetes.NodeGroupProfile"
}

// GetCurrentsize returns the Currentsize field value if set, zero value otherwise.
func (o *KubernetesNodeGroupProfile) GetCurrentsize() int64 {
	if o == nil || IsNil(o.Currentsize) {
		var ret int64
		return ret
	}
	return *o.Currentsize
}

// GetCurrentsizeOk returns a tuple with the Currentsize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KubernetesNodeGroupProfile) GetCurrentsizeOk() (*int64, bool) {
	if o == nil || IsNil(o.Currentsize) {
		return nil, false
	}
	return o.Currentsize, true
}

// HasCurrentsize returns a boolean if a field has been set.
func (o *KubernetesNodeGroupProfile) HasCurrentsize() bool {
	if o != nil && !IsNil(o.Currentsize) {
		return true
	}

	return false
}

// SetCurrentsize gets a reference to the given int64 and assigns it to the Currentsize field.
func (o *KubernetesNodeGroupProfile) SetCurrentsize(v int64) {
	o.Currentsize = &v
}

// GetDesiredsize returns the Desiredsize field value if set, zero value otherwise.
func (o *KubernetesNodeGroupProfile) GetDesiredsize() int64 {
	if o == nil || IsNil(o.Desiredsize) {
		var ret int64
		return ret
	}
	return *o.Desiredsize
}

// GetDesiredsizeOk returns a tuple with the Desiredsize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KubernetesNodeGroupProfile) GetDesiredsizeOk() (*int64, bool) {
	if o == nil || IsNil(o.Desiredsize) {
		return nil, false
	}
	return o.Desiredsize, true
}

// HasDesiredsize returns a boolean if a field has been set.
func (o *KubernetesNodeGroupProfile) HasDesiredsize() bool {
	if o != nil && !IsNil(o.Desiredsize) {
		return true
	}

	return false
}

// SetDesiredsize gets a reference to the given int64 and assigns it to the Desiredsize field.
func (o *KubernetesNodeGroupProfile) SetDesiredsize(v int64) {
	o.Desiredsize = &v
}

// GetGpuConfig returns the GpuConfig field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *KubernetesNodeGroupProfile) GetGpuConfig() []InfraBaseGpuConfiguration {
	if o == nil {
		var ret []InfraBaseGpuConfiguration
		return ret
	}
	return o.GpuConfig
}

// GetGpuConfigOk returns a tuple with the GpuConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *KubernetesNodeGroupProfile) GetGpuConfigOk() ([]InfraBaseGpuConfiguration, bool) {
	if o == nil || IsNil(o.GpuConfig) {
		return nil, false
	}
	return o.GpuConfig, true
}

// HasGpuConfig returns a boolean if a field has been set.
func (o *KubernetesNodeGroupProfile) HasGpuConfig() bool {
	if o != nil && !IsNil(o.GpuConfig) {
		return true
	}

	return false
}

// SetGpuConfig gets a reference to the given []InfraBaseGpuConfiguration and assigns it to the GpuConfig field.
func (o *KubernetesNodeGroupProfile) SetGpuConfig(v []InfraBaseGpuConfiguration) {
	o.GpuConfig = v
}

// GetLabels returns the Labels field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *KubernetesNodeGroupProfile) GetLabels() []KubernetesNodeGroupLabel {
	if o == nil {
		var ret []KubernetesNodeGroupLabel
		return ret
	}
	return o.Labels
}

// GetLabelsOk returns a tuple with the Labels field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *KubernetesNodeGroupProfile) GetLabelsOk() ([]KubernetesNodeGroupLabel, bool) {
	if o == nil || IsNil(o.Labels) {
		return nil, false
	}
	return o.Labels, true
}

// HasLabels returns a boolean if a field has been set.
func (o *KubernetesNodeGroupProfile) HasLabels() bool {
	if o != nil && !IsNil(o.Labels) {
		return true
	}

	return false
}

// SetLabels gets a reference to the given []KubernetesNodeGroupLabel and assigns it to the Labels field.
func (o *KubernetesNodeGroupProfile) SetLabels(v []KubernetesNodeGroupLabel) {
	o.Labels = v
}

// GetMaxsize returns the Maxsize field value if set, zero value otherwise.
func (o *KubernetesNodeGroupProfile) GetMaxsize() int64 {
	if o == nil || IsNil(o.Maxsize) {
		var ret int64
		return ret
	}
	return *o.Maxsize
}

// GetMaxsizeOk returns a tuple with the Maxsize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KubernetesNodeGroupProfile) GetMaxsizeOk() (*int64, bool) {
	if o == nil || IsNil(o.Maxsize) {
		return nil, false
	}
	return o.Maxsize, true
}

// HasMaxsize returns a boolean if a field has been set.
func (o *KubernetesNodeGroupProfile) HasMaxsize() bool {
	if o != nil && !IsNil(o.Maxsize) {
		return true
	}

	return false
}

// SetMaxsize gets a reference to the given int64 and assigns it to the Maxsize field.
func (o *KubernetesNodeGroupProfile) SetMaxsize(v int64) {
	o.Maxsize = &v
}

// GetMinsize returns the Minsize field value if set, zero value otherwise.
func (o *KubernetesNodeGroupProfile) GetMinsize() int64 {
	if o == nil || IsNil(o.Minsize) {
		var ret int64
		return ret
	}
	return *o.Minsize
}

// GetMinsizeOk returns a tuple with the Minsize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KubernetesNodeGroupProfile) GetMinsizeOk() (*int64, bool) {
	if o == nil || IsNil(o.Minsize) {
		return nil, false
	}
	return o.Minsize, true
}

// HasMinsize returns a boolean if a field has been set.
func (o *KubernetesNodeGroupProfile) HasMinsize() bool {
	if o != nil && !IsNil(o.Minsize) {
		return true
	}

	return false
}

// SetMinsize gets a reference to the given int64 and assigns it to the Minsize field.
func (o *KubernetesNodeGroupProfile) SetMinsize(v int64) {
	o.Minsize = &v
}

// GetNodeType returns the NodeType field value if set, zero value otherwise.
func (o *KubernetesNodeGroupProfile) GetNodeType() string {
	if o == nil || IsNil(o.NodeType) {
		var ret string
		return ret
	}
	return *o.NodeType
}

// GetNodeTypeOk returns a tuple with the NodeType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KubernetesNodeGroupProfile) GetNodeTypeOk() (*string, bool) {
	if o == nil || IsNil(o.NodeType) {
		return nil, false
	}
	return o.NodeType, true
}

// HasNodeType returns a boolean if a field has been set.
func (o *KubernetesNodeGroupProfile) HasNodeType() bool {
	if o != nil && !IsNil(o.NodeType) {
		return true
	}

	return false
}

// SetNodeType gets a reference to the given string and assigns it to the NodeType field.
func (o *KubernetesNodeGroupProfile) SetNodeType(v string) {
	o.NodeType = &v
}

// GetTaints returns the Taints field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *KubernetesNodeGroupProfile) GetTaints() []KubernetesNodeGroupTaint {
	if o == nil {
		var ret []KubernetesNodeGroupTaint
		return ret
	}
	return o.Taints
}

// GetTaintsOk returns a tuple with the Taints field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *KubernetesNodeGroupProfile) GetTaintsOk() ([]KubernetesNodeGroupTaint, bool) {
	if o == nil || IsNil(o.Taints) {
		return nil, false
	}
	return o.Taints, true
}

// HasTaints returns a boolean if a field has been set.
func (o *KubernetesNodeGroupProfile) HasTaints() bool {
	if o != nil && !IsNil(o.Taints) {
		return true
	}

	return false
}

// SetTaints gets a reference to the given []KubernetesNodeGroupTaint and assigns it to the Taints field.
func (o *KubernetesNodeGroupProfile) SetTaints(v []KubernetesNodeGroupTaint) {
	o.Taints = v
}

// GetClusterProfile returns the ClusterProfile field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *KubernetesNodeGroupProfile) GetClusterProfile() KubernetesClusterProfileRelationship {
	if o == nil || IsNil(o.ClusterProfile.Get()) {
		var ret KubernetesClusterProfileRelationship
		return ret
	}
	return *o.ClusterProfile.Get()
}

// GetClusterProfileOk returns a tuple with the ClusterProfile field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *KubernetesNodeGroupProfile) GetClusterProfileOk() (*KubernetesClusterProfileRelationship, bool) {
	if o == nil {
		return nil, false
	}
	return o.ClusterProfile.Get(), o.ClusterProfile.IsSet()
}

// HasClusterProfile returns a boolean if a field has been set.
func (o *KubernetesNodeGroupProfile) HasClusterProfile() bool {
	if o != nil && o.ClusterProfile.IsSet() {
		return true
	}

	return false
}

// SetClusterProfile gets a reference to the given NullableKubernetesClusterProfileRelationship and assigns it to the ClusterProfile field.
func (o *KubernetesNodeGroupProfile) SetClusterProfile(v KubernetesClusterProfileRelationship) {
	o.ClusterProfile.Set(&v)
}

// SetClusterProfileNil sets the value for ClusterProfile to be an explicit nil
func (o *KubernetesNodeGroupProfile) SetClusterProfileNil() {
	o.ClusterProfile.Set(nil)
}

// UnsetClusterProfile ensures that no value is present for ClusterProfile, not even an explicit nil
func (o *KubernetesNodeGroupProfile) UnsetClusterProfile() {
	o.ClusterProfile.Unset()
}

// GetInfraProvider returns the InfraProvider field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *KubernetesNodeGroupProfile) GetInfraProvider() KubernetesBaseInfrastructureProviderRelationship {
	if o == nil || IsNil(o.InfraProvider.Get()) {
		var ret KubernetesBaseInfrastructureProviderRelationship
		return ret
	}
	return *o.InfraProvider.Get()
}

// GetInfraProviderOk returns a tuple with the InfraProvider field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *KubernetesNodeGroupProfile) GetInfraProviderOk() (*KubernetesBaseInfrastructureProviderRelationship, bool) {
	if o == nil {
		return nil, false
	}
	return o.InfraProvider.Get(), o.InfraProvider.IsSet()
}

// HasInfraProvider returns a boolean if a field has been set.
func (o *KubernetesNodeGroupProfile) HasInfraProvider() bool {
	if o != nil && o.InfraProvider.IsSet() {
		return true
	}

	return false
}

// SetInfraProvider gets a reference to the given NullableKubernetesBaseInfrastructureProviderRelationship and assigns it to the InfraProvider field.
func (o *KubernetesNodeGroupProfile) SetInfraProvider(v KubernetesBaseInfrastructureProviderRelationship) {
	o.InfraProvider.Set(&v)
}

// SetInfraProviderNil sets the value for InfraProvider to be an explicit nil
func (o *KubernetesNodeGroupProfile) SetInfraProviderNil() {
	o.InfraProvider.Set(nil)
}

// UnsetInfraProvider ensures that no value is present for InfraProvider, not even an explicit nil
func (o *KubernetesNodeGroupProfile) UnsetInfraProvider() {
	o.InfraProvider.Unset()
}

// GetIpPools returns the IpPools field value if set, zero value otherwise (both if not set or set to explicit null).
// Deprecated
func (o *KubernetesNodeGroupProfile) GetIpPools() []IppoolPoolRelationship {
	if o == nil {
		var ret []IppoolPoolRelationship
		return ret
	}
	return o.IpPools
}

// GetIpPoolsOk returns a tuple with the IpPools field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
// Deprecated
func (o *KubernetesNodeGroupProfile) GetIpPoolsOk() ([]IppoolPoolRelationship, bool) {
	if o == nil || IsNil(o.IpPools) {
		return nil, false
	}
	return o.IpPools, true
}

// HasIpPools returns a boolean if a field has been set.
func (o *KubernetesNodeGroupProfile) HasIpPools() bool {
	if o != nil && !IsNil(o.IpPools) {
		return true
	}

	return false
}

// SetIpPools gets a reference to the given []IppoolPoolRelationship and assigns it to the IpPools field.
// Deprecated
func (o *KubernetesNodeGroupProfile) SetIpPools(v []IppoolPoolRelationship) {
	o.IpPools = v
}

// GetKubernetesVersion returns the KubernetesVersion field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *KubernetesNodeGroupProfile) GetKubernetesVersion() KubernetesVersionPolicyRelationship {
	if o == nil || IsNil(o.KubernetesVersion.Get()) {
		var ret KubernetesVersionPolicyRelationship
		return ret
	}
	return *o.KubernetesVersion.Get()
}

// GetKubernetesVersionOk returns a tuple with the KubernetesVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *KubernetesNodeGroupProfile) GetKubernetesVersionOk() (*KubernetesVersionPolicyRelationship, bool) {
	if o == nil {
		return nil, false
	}
	return o.KubernetesVersion.Get(), o.KubernetesVersion.IsSet()
}

// HasKubernetesVersion returns a boolean if a field has been set.
func (o *KubernetesNodeGroupProfile) HasKubernetesVersion() bool {
	if o != nil && o.KubernetesVersion.IsSet() {
		return true
	}

	return false
}

// SetKubernetesVersion gets a reference to the given NullableKubernetesVersionPolicyRelationship and assigns it to the KubernetesVersion field.
func (o *KubernetesNodeGroupProfile) SetKubernetesVersion(v KubernetesVersionPolicyRelationship) {
	o.KubernetesVersion.Set(&v)
}

// SetKubernetesVersionNil sets the value for KubernetesVersion to be an explicit nil
func (o *KubernetesNodeGroupProfile) SetKubernetesVersionNil() {
	o.KubernetesVersion.Set(nil)
}

// UnsetKubernetesVersion ensures that no value is present for KubernetesVersion, not even an explicit nil
func (o *KubernetesNodeGroupProfile) UnsetKubernetesVersion() {
	o.KubernetesVersion.Unset()
}

// GetNodes returns the Nodes field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *KubernetesNodeGroupProfile) GetNodes() []KubernetesNodeProfileRelationship {
	if o == nil {
		var ret []KubernetesNodeProfileRelationship
		return ret
	}
	return o.Nodes
}

// GetNodesOk returns a tuple with the Nodes field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *KubernetesNodeGroupProfile) GetNodesOk() ([]KubernetesNodeProfileRelationship, bool) {
	if o == nil || IsNil(o.Nodes) {
		return nil, false
	}
	return o.Nodes, true
}

// HasNodes returns a boolean if a field has been set.
func (o *KubernetesNodeGroupProfile) HasNodes() bool {
	if o != nil && !IsNil(o.Nodes) {
		return true
	}

	return false
}

// SetNodes gets a reference to the given []KubernetesNodeProfileRelationship and assigns it to the Nodes field.
func (o *KubernetesNodeGroupProfile) SetNodes(v []KubernetesNodeProfileRelationship) {
	o.Nodes = v
}

func (o KubernetesNodeGroupProfile) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o KubernetesNodeGroupProfile) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	serializedPolicyAbstractConfigProfile, errPolicyAbstractConfigProfile := json.Marshal(o.PolicyAbstractConfigProfile)
	if errPolicyAbstractConfigProfile != nil {
		return map[string]interface{}{}, errPolicyAbstractConfigProfile
	}
	errPolicyAbstractConfigProfile = json.Unmarshal([]byte(serializedPolicyAbstractConfigProfile), &toSerialize)
	if errPolicyAbstractConfigProfile != nil {
		return map[string]interface{}{}, errPolicyAbstractConfigProfile
	}
	if _, exists := toSerialize["ClassId"]; !exists {
		toSerialize["ClassId"] = o.GetDefaultClassId()
	}
	toSerialize["ClassId"] = o.ClassId
	if _, exists := toSerialize["ObjectType"]; !exists {
		toSerialize["ObjectType"] = o.GetDefaultObjectType()
	}
	toSerialize["ObjectType"] = o.ObjectType
	if !IsNil(o.Currentsize) {
		toSerialize["Currentsize"] = o.Currentsize
	}
	if !IsNil(o.Desiredsize) {
		toSerialize["Desiredsize"] = o.Desiredsize
	}
	if o.GpuConfig != nil {
		toSerialize["GpuConfig"] = o.GpuConfig
	}
	if o.Labels != nil {
		toSerialize["Labels"] = o.Labels
	}
	if !IsNil(o.Maxsize) {
		toSerialize["Maxsize"] = o.Maxsize
	}
	if !IsNil(o.Minsize) {
		toSerialize["Minsize"] = o.Minsize
	}
	if !IsNil(o.NodeType) {
		toSerialize["NodeType"] = o.NodeType
	}
	if o.Taints != nil {
		toSerialize["Taints"] = o.Taints
	}
	if o.ClusterProfile.IsSet() {
		toSerialize["ClusterProfile"] = o.ClusterProfile.Get()
	}
	if o.InfraProvider.IsSet() {
		toSerialize["InfraProvider"] = o.InfraProvider.Get()
	}
	if o.IpPools != nil {
		toSerialize["IpPools"] = o.IpPools
	}
	if o.KubernetesVersion.IsSet() {
		toSerialize["KubernetesVersion"] = o.KubernetesVersion.Get()
	}
	if o.Nodes != nil {
		toSerialize["Nodes"] = o.Nodes
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *KubernetesNodeGroupProfile) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"ClassId",
		"ObjectType",
	}

	// defaultValueFuncMap captures the default values for required properties.
	// These values are used when required properties are missing from the payload.
	defaultValueFuncMap := map[string]func() interface{}{
		"ClassId":    o.GetDefaultClassId,
		"ObjectType": o.GetDefaultObjectType,
	}
	var defaultValueApplied bool
	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			if _, ok := defaultValueFuncMap[requiredProperty]; ok {
				allProperties[requiredProperty] = defaultValueFuncMap[requiredProperty]()
				defaultValueApplied = true
			}
		}
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	if defaultValueApplied {
		data, err = json.Marshal(allProperties)
		if err != nil {
			return err
		}
	}
	type KubernetesNodeGroupProfileWithoutEmbeddedStruct struct {
		// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.
		ClassId string `json:"ClassId"`
		// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
		ObjectType string `json:"ObjectType"`
		// Current number of nodes in this node group at any given point in time.
		Currentsize *int64 `json:"Currentsize,omitempty"`
		// Desired number of nodes in this node group, same as minsize initially and is updated by the auto-scaler.
		Desiredsize *int64                      `json:"Desiredsize,omitempty"`
		GpuConfig   []InfraBaseGpuConfiguration `json:"GpuConfig,omitempty"`
		Labels      []KubernetesNodeGroupLabel  `json:"Labels,omitempty"`
		// Maximum number of nodes this node group can scale up to during repair, replacement or upgrade operations.
		Maxsize *int64 `json:"Maxsize,omitempty"`
		// Minimum number of available nodes this node group can scale down to during repair, replacement or upgrade operations.
		Minsize *int64 `json:"Minsize,omitempty"`
		// The node type ControlPlane, Worker or ControlPlaneWorker. * `Worker` - Node will be marked as a worker node. * `ControlPlane` - Node will be marked as a control plane node. * `ControlPlaneWorker` - Node will be both a controle plane and a worker.
		NodeType       *string                                                  `json:"NodeType,omitempty"`
		Taints         []KubernetesNodeGroupTaint                               `json:"Taints,omitempty"`
		ClusterProfile NullableKubernetesClusterProfileRelationship             `json:"ClusterProfile,omitempty"`
		InfraProvider  NullableKubernetesBaseInfrastructureProviderRelationship `json:"InfraProvider,omitempty"`
		// An array of relationships to ippoolPool resources.
		// Deprecated
		IpPools           []IppoolPoolRelationship                    `json:"IpPools,omitempty"`
		KubernetesVersion NullableKubernetesVersionPolicyRelationship `json:"KubernetesVersion,omitempty"`
		// An array of relationships to kubernetesNodeProfile resources.
		Nodes []KubernetesNodeProfileRelationship `json:"Nodes,omitempty"`
	}

	varKubernetesNodeGroupProfileWithoutEmbeddedStruct := KubernetesNodeGroupProfileWithoutEmbeddedStruct{}

	err = json.Unmarshal(data, &varKubernetesNodeGroupProfileWithoutEmbeddedStruct)
	if err == nil {
		varKubernetesNodeGroupProfile := _KubernetesNodeGroupProfile{}
		varKubernetesNodeGroupProfile.ClassId = varKubernetesNodeGroupProfileWithoutEmbeddedStruct.ClassId
		varKubernetesNodeGroupProfile.ObjectType = varKubernetesNodeGroupProfileWithoutEmbeddedStruct.ObjectType
		varKubernetesNodeGroupProfile.Currentsize = varKubernetesNodeGroupProfileWithoutEmbeddedStruct.Currentsize
		varKubernetesNodeGroupProfile.Desiredsize = varKubernetesNodeGroupProfileWithoutEmbeddedStruct.Desiredsize
		varKubernetesNodeGroupProfile.GpuConfig = varKubernetesNodeGroupProfileWithoutEmbeddedStruct.GpuConfig
		varKubernetesNodeGroupProfile.Labels = varKubernetesNodeGroupProfileWithoutEmbeddedStruct.Labels
		varKubernetesNodeGroupProfile.Maxsize = varKubernetesNodeGroupProfileWithoutEmbeddedStruct.Maxsize
		varKubernetesNodeGroupProfile.Minsize = varKubernetesNodeGroupProfileWithoutEmbeddedStruct.Minsize
		varKubernetesNodeGroupProfile.NodeType = varKubernetesNodeGroupProfileWithoutEmbeddedStruct.NodeType
		varKubernetesNodeGroupProfile.Taints = varKubernetesNodeGroupProfileWithoutEmbeddedStruct.Taints
		varKubernetesNodeGroupProfile.ClusterProfile = varKubernetesNodeGroupProfileWithoutEmbeddedStruct.ClusterProfile
		varKubernetesNodeGroupProfile.InfraProvider = varKubernetesNodeGroupProfileWithoutEmbeddedStruct.InfraProvider
		varKubernetesNodeGroupProfile.IpPools = varKubernetesNodeGroupProfileWithoutEmbeddedStruct.IpPools
		varKubernetesNodeGroupProfile.KubernetesVersion = varKubernetesNodeGroupProfileWithoutEmbeddedStruct.KubernetesVersion
		varKubernetesNodeGroupProfile.Nodes = varKubernetesNodeGroupProfileWithoutEmbeddedStruct.Nodes
		*o = KubernetesNodeGroupProfile(varKubernetesNodeGroupProfile)
	} else {
		return err
	}

	varKubernetesNodeGroupProfile := _KubernetesNodeGroupProfile{}

	err = json.Unmarshal(data, &varKubernetesNodeGroupProfile)
	if err == nil {
		o.PolicyAbstractConfigProfile = varKubernetesNodeGroupProfile.PolicyAbstractConfigProfile
	} else {
		return err
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "ClassId")
		delete(additionalProperties, "ObjectType")
		delete(additionalProperties, "Currentsize")
		delete(additionalProperties, "Desiredsize")
		delete(additionalProperties, "GpuConfig")
		delete(additionalProperties, "Labels")
		delete(additionalProperties, "Maxsize")
		delete(additionalProperties, "Minsize")
		delete(additionalProperties, "NodeType")
		delete(additionalProperties, "Taints")
		delete(additionalProperties, "ClusterProfile")
		delete(additionalProperties, "InfraProvider")
		delete(additionalProperties, "IpPools")
		delete(additionalProperties, "KubernetesVersion")
		delete(additionalProperties, "Nodes")

		// remove fields from embedded structs
		reflectPolicyAbstractConfigProfile := reflect.ValueOf(o.PolicyAbstractConfigProfile)
		for i := 0; i < reflectPolicyAbstractConfigProfile.Type().NumField(); i++ {
			t := reflectPolicyAbstractConfigProfile.Type().Field(i)

			if jsonTag := t.Tag.Get("json"); jsonTag != "" {
				fieldName := ""
				if commaIdx := strings.Index(jsonTag, ","); commaIdx > 0 {
					fieldName = jsonTag[:commaIdx]
				} else {
					fieldName = jsonTag
				}
				if fieldName != "AdditionalProperties" {
					delete(additionalProperties, fieldName)
				}
			}
		}

		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableKubernetesNodeGroupProfile struct {
	value *KubernetesNodeGroupProfile
	isSet bool
}

func (v NullableKubernetesNodeGroupProfile) Get() *KubernetesNodeGroupProfile {
	return v.value
}

func (v *NullableKubernetesNodeGroupProfile) Set(val *KubernetesNodeGroupProfile) {
	v.value = val
	v.isSet = true
}

func (v NullableKubernetesNodeGroupProfile) IsSet() bool {
	return v.isSet
}

func (v *NullableKubernetesNodeGroupProfile) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableKubernetesNodeGroupProfile(val *KubernetesNodeGroupProfile) *NullableKubernetesNodeGroupProfile {
	return &NullableKubernetesNodeGroupProfile{value: val, isSet: true}
}

func (v NullableKubernetesNodeGroupProfile) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableKubernetesNodeGroupProfile) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
