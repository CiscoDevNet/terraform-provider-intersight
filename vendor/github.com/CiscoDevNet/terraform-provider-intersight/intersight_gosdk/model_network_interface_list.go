/*
Cisco Intersight

Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations. The Intersight OpenAPI document defines the complete set of properties that are returned in the HTTP response. From that perspective, a client can expect that no additional properties are returned, unless these properties are explicitly defined in the OpenAPI document. However, when a client uses an older version of the Intersight OpenAPI document, the server may send additional properties because the software is more recent than the client. In that case, the client may receive properties that it does not know about. Some generated SDKs perform a strict validation of the HTTP response body against the OpenAPI document.

API version: 1.0.11-18775
Contact: intersight@cisco.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package intersight

import (
	"encoding/json"
	"fmt"
	"reflect"
	"strings"
)

// checks if the NetworkInterfaceList type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NetworkInterfaceList{}

// NetworkInterfaceList List of interfaces available on the switch to describe the available port inventory information.
type NetworkInterfaceList struct {
	InventoryBase
	// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.
	ClassId string `json:"ClassId"`
	// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
	ObjectType string `json:"ObjectType"`
	// Admin state of the interface list.
	AdminState *string `json:"AdminState,omitempty"`
	// Allowed VLANs of the interface list.
	AllowedVlans *string `json:"AllowedVlans,omitempty"`
	// Description of the interface list.
	Description *string `json:"Description,omitempty"`
	// Display name of the interface list.
	DisplayName *string `json:"DisplayName,omitempty"`
	// IP address of the interface list.
	IpAddress *string `json:"IpAddress,omitempty"`
	// IP subnet of the interface list.
	IpSubnet *int64 `json:"IpSubnet,omitempty"`
	// MAC address of the interface list.
	Mac *string `json:"Mac,omitempty"`
	// Maximum transmission unit of the interface list.
	Mtu *int64 `json:"Mtu,omitempty"`
	// Name of the interface list.
	Name *string `json:"Name,omitempty"`
	// Operational state of the interface list.
	OperState *string `json:"OperState,omitempty"`
	// Port channel id for port channel created on FI switch.
	PortChannelId *int64 `json:"PortChannelId,omitempty"`
	// Interface types supported in Network device like Subinterfaces, Breakout Interfaces.
	PortSubType *string `json:"PortSubType,omitempty"`
	// Port type of interface list.
	PortType *string `json:"PortType,omitempty"`
	// Slot id of the interface list.
	SlotId *string `json:"SlotId,omitempty"`
	// Port speed of the interface list.
	Speed *string `json:"Speed,omitempty"`
	// Speed Group of the interface list.
	SpeedGroup *string `json:"SpeedGroup,omitempty"`
	// VLAN of the interface list.
	Vlan                 *string                                     `json:"Vlan,omitempty"`
	NetworkElement       NullableNetworkElementRelationship          `json:"NetworkElement,omitempty"`
	RegisteredDevice     NullableAssetDeviceRegistrationRelationship `json:"RegisteredDevice,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _NetworkInterfaceList NetworkInterfaceList

// NewNetworkInterfaceList instantiates a new NetworkInterfaceList object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNetworkInterfaceList(classId string, objectType string) *NetworkInterfaceList {
	this := NetworkInterfaceList{}
	this.ClassId = classId
	this.ObjectType = objectType
	return &this
}

// NewNetworkInterfaceListWithDefaults instantiates a new NetworkInterfaceList object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNetworkInterfaceListWithDefaults() *NetworkInterfaceList {
	this := NetworkInterfaceList{}
	var classId string = "network.InterfaceList"
	this.ClassId = classId
	var objectType string = "network.InterfaceList"
	this.ObjectType = objectType
	return &this
}

// GetClassId returns the ClassId field value
func (o *NetworkInterfaceList) GetClassId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ClassId
}

// GetClassIdOk returns a tuple with the ClassId field value
// and a boolean to check if the value has been set.
func (o *NetworkInterfaceList) GetClassIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ClassId, true
}

// SetClassId sets field value
func (o *NetworkInterfaceList) SetClassId(v string) {
	o.ClassId = v
}

// GetDefaultClassId returns the default value "network.InterfaceList" of the ClassId field.
func (o *NetworkInterfaceList) GetDefaultClassId() interface{} {
	return "network.InterfaceList"
}

// GetObjectType returns the ObjectType field value
func (o *NetworkInterfaceList) GetObjectType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ObjectType
}

// GetObjectTypeOk returns a tuple with the ObjectType field value
// and a boolean to check if the value has been set.
func (o *NetworkInterfaceList) GetObjectTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ObjectType, true
}

// SetObjectType sets field value
func (o *NetworkInterfaceList) SetObjectType(v string) {
	o.ObjectType = v
}

// GetDefaultObjectType returns the default value "network.InterfaceList" of the ObjectType field.
func (o *NetworkInterfaceList) GetDefaultObjectType() interface{} {
	return "network.InterfaceList"
}

// GetAdminState returns the AdminState field value if set, zero value otherwise.
func (o *NetworkInterfaceList) GetAdminState() string {
	if o == nil || IsNil(o.AdminState) {
		var ret string
		return ret
	}
	return *o.AdminState
}

// GetAdminStateOk returns a tuple with the AdminState field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkInterfaceList) GetAdminStateOk() (*string, bool) {
	if o == nil || IsNil(o.AdminState) {
		return nil, false
	}
	return o.AdminState, true
}

// HasAdminState returns a boolean if a field has been set.
func (o *NetworkInterfaceList) HasAdminState() bool {
	if o != nil && !IsNil(o.AdminState) {
		return true
	}

	return false
}

// SetAdminState gets a reference to the given string and assigns it to the AdminState field.
func (o *NetworkInterfaceList) SetAdminState(v string) {
	o.AdminState = &v
}

// GetAllowedVlans returns the AllowedVlans field value if set, zero value otherwise.
func (o *NetworkInterfaceList) GetAllowedVlans() string {
	if o == nil || IsNil(o.AllowedVlans) {
		var ret string
		return ret
	}
	return *o.AllowedVlans
}

// GetAllowedVlansOk returns a tuple with the AllowedVlans field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkInterfaceList) GetAllowedVlansOk() (*string, bool) {
	if o == nil || IsNil(o.AllowedVlans) {
		return nil, false
	}
	return o.AllowedVlans, true
}

// HasAllowedVlans returns a boolean if a field has been set.
func (o *NetworkInterfaceList) HasAllowedVlans() bool {
	if o != nil && !IsNil(o.AllowedVlans) {
		return true
	}

	return false
}

// SetAllowedVlans gets a reference to the given string and assigns it to the AllowedVlans field.
func (o *NetworkInterfaceList) SetAllowedVlans(v string) {
	o.AllowedVlans = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *NetworkInterfaceList) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkInterfaceList) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *NetworkInterfaceList) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *NetworkInterfaceList) SetDescription(v string) {
	o.Description = &v
}

// GetDisplayName returns the DisplayName field value if set, zero value otherwise.
func (o *NetworkInterfaceList) GetDisplayName() string {
	if o == nil || IsNil(o.DisplayName) {
		var ret string
		return ret
	}
	return *o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkInterfaceList) GetDisplayNameOk() (*string, bool) {
	if o == nil || IsNil(o.DisplayName) {
		return nil, false
	}
	return o.DisplayName, true
}

// HasDisplayName returns a boolean if a field has been set.
func (o *NetworkInterfaceList) HasDisplayName() bool {
	if o != nil && !IsNil(o.DisplayName) {
		return true
	}

	return false
}

// SetDisplayName gets a reference to the given string and assigns it to the DisplayName field.
func (o *NetworkInterfaceList) SetDisplayName(v string) {
	o.DisplayName = &v
}

// GetIpAddress returns the IpAddress field value if set, zero value otherwise.
func (o *NetworkInterfaceList) GetIpAddress() string {
	if o == nil || IsNil(o.IpAddress) {
		var ret string
		return ret
	}
	return *o.IpAddress
}

// GetIpAddressOk returns a tuple with the IpAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkInterfaceList) GetIpAddressOk() (*string, bool) {
	if o == nil || IsNil(o.IpAddress) {
		return nil, false
	}
	return o.IpAddress, true
}

// HasIpAddress returns a boolean if a field has been set.
func (o *NetworkInterfaceList) HasIpAddress() bool {
	if o != nil && !IsNil(o.IpAddress) {
		return true
	}

	return false
}

// SetIpAddress gets a reference to the given string and assigns it to the IpAddress field.
func (o *NetworkInterfaceList) SetIpAddress(v string) {
	o.IpAddress = &v
}

// GetIpSubnet returns the IpSubnet field value if set, zero value otherwise.
func (o *NetworkInterfaceList) GetIpSubnet() int64 {
	if o == nil || IsNil(o.IpSubnet) {
		var ret int64
		return ret
	}
	return *o.IpSubnet
}

// GetIpSubnetOk returns a tuple with the IpSubnet field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkInterfaceList) GetIpSubnetOk() (*int64, bool) {
	if o == nil || IsNil(o.IpSubnet) {
		return nil, false
	}
	return o.IpSubnet, true
}

// HasIpSubnet returns a boolean if a field has been set.
func (o *NetworkInterfaceList) HasIpSubnet() bool {
	if o != nil && !IsNil(o.IpSubnet) {
		return true
	}

	return false
}

// SetIpSubnet gets a reference to the given int64 and assigns it to the IpSubnet field.
func (o *NetworkInterfaceList) SetIpSubnet(v int64) {
	o.IpSubnet = &v
}

// GetMac returns the Mac field value if set, zero value otherwise.
func (o *NetworkInterfaceList) GetMac() string {
	if o == nil || IsNil(o.Mac) {
		var ret string
		return ret
	}
	return *o.Mac
}

// GetMacOk returns a tuple with the Mac field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkInterfaceList) GetMacOk() (*string, bool) {
	if o == nil || IsNil(o.Mac) {
		return nil, false
	}
	return o.Mac, true
}

// HasMac returns a boolean if a field has been set.
func (o *NetworkInterfaceList) HasMac() bool {
	if o != nil && !IsNil(o.Mac) {
		return true
	}

	return false
}

// SetMac gets a reference to the given string and assigns it to the Mac field.
func (o *NetworkInterfaceList) SetMac(v string) {
	o.Mac = &v
}

// GetMtu returns the Mtu field value if set, zero value otherwise.
func (o *NetworkInterfaceList) GetMtu() int64 {
	if o == nil || IsNil(o.Mtu) {
		var ret int64
		return ret
	}
	return *o.Mtu
}

// GetMtuOk returns a tuple with the Mtu field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkInterfaceList) GetMtuOk() (*int64, bool) {
	if o == nil || IsNil(o.Mtu) {
		return nil, false
	}
	return o.Mtu, true
}

// HasMtu returns a boolean if a field has been set.
func (o *NetworkInterfaceList) HasMtu() bool {
	if o != nil && !IsNil(o.Mtu) {
		return true
	}

	return false
}

// SetMtu gets a reference to the given int64 and assigns it to the Mtu field.
func (o *NetworkInterfaceList) SetMtu(v int64) {
	o.Mtu = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *NetworkInterfaceList) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkInterfaceList) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *NetworkInterfaceList) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *NetworkInterfaceList) SetName(v string) {
	o.Name = &v
}

// GetOperState returns the OperState field value if set, zero value otherwise.
func (o *NetworkInterfaceList) GetOperState() string {
	if o == nil || IsNil(o.OperState) {
		var ret string
		return ret
	}
	return *o.OperState
}

// GetOperStateOk returns a tuple with the OperState field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkInterfaceList) GetOperStateOk() (*string, bool) {
	if o == nil || IsNil(o.OperState) {
		return nil, false
	}
	return o.OperState, true
}

// HasOperState returns a boolean if a field has been set.
func (o *NetworkInterfaceList) HasOperState() bool {
	if o != nil && !IsNil(o.OperState) {
		return true
	}

	return false
}

// SetOperState gets a reference to the given string and assigns it to the OperState field.
func (o *NetworkInterfaceList) SetOperState(v string) {
	o.OperState = &v
}

// GetPortChannelId returns the PortChannelId field value if set, zero value otherwise.
func (o *NetworkInterfaceList) GetPortChannelId() int64 {
	if o == nil || IsNil(o.PortChannelId) {
		var ret int64
		return ret
	}
	return *o.PortChannelId
}

// GetPortChannelIdOk returns a tuple with the PortChannelId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkInterfaceList) GetPortChannelIdOk() (*int64, bool) {
	if o == nil || IsNil(o.PortChannelId) {
		return nil, false
	}
	return o.PortChannelId, true
}

// HasPortChannelId returns a boolean if a field has been set.
func (o *NetworkInterfaceList) HasPortChannelId() bool {
	if o != nil && !IsNil(o.PortChannelId) {
		return true
	}

	return false
}

// SetPortChannelId gets a reference to the given int64 and assigns it to the PortChannelId field.
func (o *NetworkInterfaceList) SetPortChannelId(v int64) {
	o.PortChannelId = &v
}

// GetPortSubType returns the PortSubType field value if set, zero value otherwise.
func (o *NetworkInterfaceList) GetPortSubType() string {
	if o == nil || IsNil(o.PortSubType) {
		var ret string
		return ret
	}
	return *o.PortSubType
}

// GetPortSubTypeOk returns a tuple with the PortSubType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkInterfaceList) GetPortSubTypeOk() (*string, bool) {
	if o == nil || IsNil(o.PortSubType) {
		return nil, false
	}
	return o.PortSubType, true
}

// HasPortSubType returns a boolean if a field has been set.
func (o *NetworkInterfaceList) HasPortSubType() bool {
	if o != nil && !IsNil(o.PortSubType) {
		return true
	}

	return false
}

// SetPortSubType gets a reference to the given string and assigns it to the PortSubType field.
func (o *NetworkInterfaceList) SetPortSubType(v string) {
	o.PortSubType = &v
}

// GetPortType returns the PortType field value if set, zero value otherwise.
func (o *NetworkInterfaceList) GetPortType() string {
	if o == nil || IsNil(o.PortType) {
		var ret string
		return ret
	}
	return *o.PortType
}

// GetPortTypeOk returns a tuple with the PortType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkInterfaceList) GetPortTypeOk() (*string, bool) {
	if o == nil || IsNil(o.PortType) {
		return nil, false
	}
	return o.PortType, true
}

// HasPortType returns a boolean if a field has been set.
func (o *NetworkInterfaceList) HasPortType() bool {
	if o != nil && !IsNil(o.PortType) {
		return true
	}

	return false
}

// SetPortType gets a reference to the given string and assigns it to the PortType field.
func (o *NetworkInterfaceList) SetPortType(v string) {
	o.PortType = &v
}

// GetSlotId returns the SlotId field value if set, zero value otherwise.
func (o *NetworkInterfaceList) GetSlotId() string {
	if o == nil || IsNil(o.SlotId) {
		var ret string
		return ret
	}
	return *o.SlotId
}

// GetSlotIdOk returns a tuple with the SlotId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkInterfaceList) GetSlotIdOk() (*string, bool) {
	if o == nil || IsNil(o.SlotId) {
		return nil, false
	}
	return o.SlotId, true
}

// HasSlotId returns a boolean if a field has been set.
func (o *NetworkInterfaceList) HasSlotId() bool {
	if o != nil && !IsNil(o.SlotId) {
		return true
	}

	return false
}

// SetSlotId gets a reference to the given string and assigns it to the SlotId field.
func (o *NetworkInterfaceList) SetSlotId(v string) {
	o.SlotId = &v
}

// GetSpeed returns the Speed field value if set, zero value otherwise.
func (o *NetworkInterfaceList) GetSpeed() string {
	if o == nil || IsNil(o.Speed) {
		var ret string
		return ret
	}
	return *o.Speed
}

// GetSpeedOk returns a tuple with the Speed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkInterfaceList) GetSpeedOk() (*string, bool) {
	if o == nil || IsNil(o.Speed) {
		return nil, false
	}
	return o.Speed, true
}

// HasSpeed returns a boolean if a field has been set.
func (o *NetworkInterfaceList) HasSpeed() bool {
	if o != nil && !IsNil(o.Speed) {
		return true
	}

	return false
}

// SetSpeed gets a reference to the given string and assigns it to the Speed field.
func (o *NetworkInterfaceList) SetSpeed(v string) {
	o.Speed = &v
}

// GetSpeedGroup returns the SpeedGroup field value if set, zero value otherwise.
func (o *NetworkInterfaceList) GetSpeedGroup() string {
	if o == nil || IsNil(o.SpeedGroup) {
		var ret string
		return ret
	}
	return *o.SpeedGroup
}

// GetSpeedGroupOk returns a tuple with the SpeedGroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkInterfaceList) GetSpeedGroupOk() (*string, bool) {
	if o == nil || IsNil(o.SpeedGroup) {
		return nil, false
	}
	return o.SpeedGroup, true
}

// HasSpeedGroup returns a boolean if a field has been set.
func (o *NetworkInterfaceList) HasSpeedGroup() bool {
	if o != nil && !IsNil(o.SpeedGroup) {
		return true
	}

	return false
}

// SetSpeedGroup gets a reference to the given string and assigns it to the SpeedGroup field.
func (o *NetworkInterfaceList) SetSpeedGroup(v string) {
	o.SpeedGroup = &v
}

// GetVlan returns the Vlan field value if set, zero value otherwise.
func (o *NetworkInterfaceList) GetVlan() string {
	if o == nil || IsNil(o.Vlan) {
		var ret string
		return ret
	}
	return *o.Vlan
}

// GetVlanOk returns a tuple with the Vlan field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkInterfaceList) GetVlanOk() (*string, bool) {
	if o == nil || IsNil(o.Vlan) {
		return nil, false
	}
	return o.Vlan, true
}

// HasVlan returns a boolean if a field has been set.
func (o *NetworkInterfaceList) HasVlan() bool {
	if o != nil && !IsNil(o.Vlan) {
		return true
	}

	return false
}

// SetVlan gets a reference to the given string and assigns it to the Vlan field.
func (o *NetworkInterfaceList) SetVlan(v string) {
	o.Vlan = &v
}

// GetNetworkElement returns the NetworkElement field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NetworkInterfaceList) GetNetworkElement() NetworkElementRelationship {
	if o == nil || IsNil(o.NetworkElement.Get()) {
		var ret NetworkElementRelationship
		return ret
	}
	return *o.NetworkElement.Get()
}

// GetNetworkElementOk returns a tuple with the NetworkElement field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NetworkInterfaceList) GetNetworkElementOk() (*NetworkElementRelationship, bool) {
	if o == nil {
		return nil, false
	}
	return o.NetworkElement.Get(), o.NetworkElement.IsSet()
}

// HasNetworkElement returns a boolean if a field has been set.
func (o *NetworkInterfaceList) HasNetworkElement() bool {
	if o != nil && o.NetworkElement.IsSet() {
		return true
	}

	return false
}

// SetNetworkElement gets a reference to the given NullableNetworkElementRelationship and assigns it to the NetworkElement field.
func (o *NetworkInterfaceList) SetNetworkElement(v NetworkElementRelationship) {
	o.NetworkElement.Set(&v)
}

// SetNetworkElementNil sets the value for NetworkElement to be an explicit nil
func (o *NetworkInterfaceList) SetNetworkElementNil() {
	o.NetworkElement.Set(nil)
}

// UnsetNetworkElement ensures that no value is present for NetworkElement, not even an explicit nil
func (o *NetworkInterfaceList) UnsetNetworkElement() {
	o.NetworkElement.Unset()
}

// GetRegisteredDevice returns the RegisteredDevice field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NetworkInterfaceList) GetRegisteredDevice() AssetDeviceRegistrationRelationship {
	if o == nil || IsNil(o.RegisteredDevice.Get()) {
		var ret AssetDeviceRegistrationRelationship
		return ret
	}
	return *o.RegisteredDevice.Get()
}

// GetRegisteredDeviceOk returns a tuple with the RegisteredDevice field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NetworkInterfaceList) GetRegisteredDeviceOk() (*AssetDeviceRegistrationRelationship, bool) {
	if o == nil {
		return nil, false
	}
	return o.RegisteredDevice.Get(), o.RegisteredDevice.IsSet()
}

// HasRegisteredDevice returns a boolean if a field has been set.
func (o *NetworkInterfaceList) HasRegisteredDevice() bool {
	if o != nil && o.RegisteredDevice.IsSet() {
		return true
	}

	return false
}

// SetRegisteredDevice gets a reference to the given NullableAssetDeviceRegistrationRelationship and assigns it to the RegisteredDevice field.
func (o *NetworkInterfaceList) SetRegisteredDevice(v AssetDeviceRegistrationRelationship) {
	o.RegisteredDevice.Set(&v)
}

// SetRegisteredDeviceNil sets the value for RegisteredDevice to be an explicit nil
func (o *NetworkInterfaceList) SetRegisteredDeviceNil() {
	o.RegisteredDevice.Set(nil)
}

// UnsetRegisteredDevice ensures that no value is present for RegisteredDevice, not even an explicit nil
func (o *NetworkInterfaceList) UnsetRegisteredDevice() {
	o.RegisteredDevice.Unset()
}

func (o NetworkInterfaceList) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NetworkInterfaceList) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	serializedInventoryBase, errInventoryBase := json.Marshal(o.InventoryBase)
	if errInventoryBase != nil {
		return map[string]interface{}{}, errInventoryBase
	}
	errInventoryBase = json.Unmarshal([]byte(serializedInventoryBase), &toSerialize)
	if errInventoryBase != nil {
		return map[string]interface{}{}, errInventoryBase
	}
	if _, exists := toSerialize["ClassId"]; !exists {
		toSerialize["ClassId"] = o.GetDefaultClassId()
	}
	toSerialize["ClassId"] = o.ClassId
	if _, exists := toSerialize["ObjectType"]; !exists {
		toSerialize["ObjectType"] = o.GetDefaultObjectType()
	}
	toSerialize["ObjectType"] = o.ObjectType
	if !IsNil(o.AdminState) {
		toSerialize["AdminState"] = o.AdminState
	}
	if !IsNil(o.AllowedVlans) {
		toSerialize["AllowedVlans"] = o.AllowedVlans
	}
	if !IsNil(o.Description) {
		toSerialize["Description"] = o.Description
	}
	if !IsNil(o.DisplayName) {
		toSerialize["DisplayName"] = o.DisplayName
	}
	if !IsNil(o.IpAddress) {
		toSerialize["IpAddress"] = o.IpAddress
	}
	if !IsNil(o.IpSubnet) {
		toSerialize["IpSubnet"] = o.IpSubnet
	}
	if !IsNil(o.Mac) {
		toSerialize["Mac"] = o.Mac
	}
	if !IsNil(o.Mtu) {
		toSerialize["Mtu"] = o.Mtu
	}
	if !IsNil(o.Name) {
		toSerialize["Name"] = o.Name
	}
	if !IsNil(o.OperState) {
		toSerialize["OperState"] = o.OperState
	}
	if !IsNil(o.PortChannelId) {
		toSerialize["PortChannelId"] = o.PortChannelId
	}
	if !IsNil(o.PortSubType) {
		toSerialize["PortSubType"] = o.PortSubType
	}
	if !IsNil(o.PortType) {
		toSerialize["PortType"] = o.PortType
	}
	if !IsNil(o.SlotId) {
		toSerialize["SlotId"] = o.SlotId
	}
	if !IsNil(o.Speed) {
		toSerialize["Speed"] = o.Speed
	}
	if !IsNil(o.SpeedGroup) {
		toSerialize["SpeedGroup"] = o.SpeedGroup
	}
	if !IsNil(o.Vlan) {
		toSerialize["Vlan"] = o.Vlan
	}
	if o.NetworkElement.IsSet() {
		toSerialize["NetworkElement"] = o.NetworkElement.Get()
	}
	if o.RegisteredDevice.IsSet() {
		toSerialize["RegisteredDevice"] = o.RegisteredDevice.Get()
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *NetworkInterfaceList) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"ClassId",
		"ObjectType",
	}

	// defaultValueFuncMap captures the default values for required properties.
	// These values are used when required properties are missing from the payload.
	defaultValueFuncMap := map[string]func() interface{}{
		"ClassId":    o.GetDefaultClassId,
		"ObjectType": o.GetDefaultObjectType,
	}
	var defaultValueApplied bool
	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			if _, ok := defaultValueFuncMap[requiredProperty]; ok {
				allProperties[requiredProperty] = defaultValueFuncMap[requiredProperty]()
				defaultValueApplied = true
			}
		}
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	if defaultValueApplied {
		data, err = json.Marshal(allProperties)
		if err != nil {
			return err
		}
	}
	type NetworkInterfaceListWithoutEmbeddedStruct struct {
		// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.
		ClassId string `json:"ClassId"`
		// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
		ObjectType string `json:"ObjectType"`
		// Admin state of the interface list.
		AdminState *string `json:"AdminState,omitempty"`
		// Allowed VLANs of the interface list.
		AllowedVlans *string `json:"AllowedVlans,omitempty"`
		// Description of the interface list.
		Description *string `json:"Description,omitempty"`
		// Display name of the interface list.
		DisplayName *string `json:"DisplayName,omitempty"`
		// IP address of the interface list.
		IpAddress *string `json:"IpAddress,omitempty"`
		// IP subnet of the interface list.
		IpSubnet *int64 `json:"IpSubnet,omitempty"`
		// MAC address of the interface list.
		Mac *string `json:"Mac,omitempty"`
		// Maximum transmission unit of the interface list.
		Mtu *int64 `json:"Mtu,omitempty"`
		// Name of the interface list.
		Name *string `json:"Name,omitempty"`
		// Operational state of the interface list.
		OperState *string `json:"OperState,omitempty"`
		// Port channel id for port channel created on FI switch.
		PortChannelId *int64 `json:"PortChannelId,omitempty"`
		// Interface types supported in Network device like Subinterfaces, Breakout Interfaces.
		PortSubType *string `json:"PortSubType,omitempty"`
		// Port type of interface list.
		PortType *string `json:"PortType,omitempty"`
		// Slot id of the interface list.
		SlotId *string `json:"SlotId,omitempty"`
		// Port speed of the interface list.
		Speed *string `json:"Speed,omitempty"`
		// Speed Group of the interface list.
		SpeedGroup *string `json:"SpeedGroup,omitempty"`
		// VLAN of the interface list.
		Vlan             *string                                     `json:"Vlan,omitempty"`
		NetworkElement   NullableNetworkElementRelationship          `json:"NetworkElement,omitempty"`
		RegisteredDevice NullableAssetDeviceRegistrationRelationship `json:"RegisteredDevice,omitempty"`
	}

	varNetworkInterfaceListWithoutEmbeddedStruct := NetworkInterfaceListWithoutEmbeddedStruct{}

	err = json.Unmarshal(data, &varNetworkInterfaceListWithoutEmbeddedStruct)
	if err == nil {
		varNetworkInterfaceList := _NetworkInterfaceList{}
		varNetworkInterfaceList.ClassId = varNetworkInterfaceListWithoutEmbeddedStruct.ClassId
		varNetworkInterfaceList.ObjectType = varNetworkInterfaceListWithoutEmbeddedStruct.ObjectType
		varNetworkInterfaceList.AdminState = varNetworkInterfaceListWithoutEmbeddedStruct.AdminState
		varNetworkInterfaceList.AllowedVlans = varNetworkInterfaceListWithoutEmbeddedStruct.AllowedVlans
		varNetworkInterfaceList.Description = varNetworkInterfaceListWithoutEmbeddedStruct.Description
		varNetworkInterfaceList.DisplayName = varNetworkInterfaceListWithoutEmbeddedStruct.DisplayName
		varNetworkInterfaceList.IpAddress = varNetworkInterfaceListWithoutEmbeddedStruct.IpAddress
		varNetworkInterfaceList.IpSubnet = varNetworkInterfaceListWithoutEmbeddedStruct.IpSubnet
		varNetworkInterfaceList.Mac = varNetworkInterfaceListWithoutEmbeddedStruct.Mac
		varNetworkInterfaceList.Mtu = varNetworkInterfaceListWithoutEmbeddedStruct.Mtu
		varNetworkInterfaceList.Name = varNetworkInterfaceListWithoutEmbeddedStruct.Name
		varNetworkInterfaceList.OperState = varNetworkInterfaceListWithoutEmbeddedStruct.OperState
		varNetworkInterfaceList.PortChannelId = varNetworkInterfaceListWithoutEmbeddedStruct.PortChannelId
		varNetworkInterfaceList.PortSubType = varNetworkInterfaceListWithoutEmbeddedStruct.PortSubType
		varNetworkInterfaceList.PortType = varNetworkInterfaceListWithoutEmbeddedStruct.PortType
		varNetworkInterfaceList.SlotId = varNetworkInterfaceListWithoutEmbeddedStruct.SlotId
		varNetworkInterfaceList.Speed = varNetworkInterfaceListWithoutEmbeddedStruct.Speed
		varNetworkInterfaceList.SpeedGroup = varNetworkInterfaceListWithoutEmbeddedStruct.SpeedGroup
		varNetworkInterfaceList.Vlan = varNetworkInterfaceListWithoutEmbeddedStruct.Vlan
		varNetworkInterfaceList.NetworkElement = varNetworkInterfaceListWithoutEmbeddedStruct.NetworkElement
		varNetworkInterfaceList.RegisteredDevice = varNetworkInterfaceListWithoutEmbeddedStruct.RegisteredDevice
		*o = NetworkInterfaceList(varNetworkInterfaceList)
	} else {
		return err
	}

	varNetworkInterfaceList := _NetworkInterfaceList{}

	err = json.Unmarshal(data, &varNetworkInterfaceList)
	if err == nil {
		o.InventoryBase = varNetworkInterfaceList.InventoryBase
	} else {
		return err
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "ClassId")
		delete(additionalProperties, "ObjectType")
		delete(additionalProperties, "AdminState")
		delete(additionalProperties, "AllowedVlans")
		delete(additionalProperties, "Description")
		delete(additionalProperties, "DisplayName")
		delete(additionalProperties, "IpAddress")
		delete(additionalProperties, "IpSubnet")
		delete(additionalProperties, "Mac")
		delete(additionalProperties, "Mtu")
		delete(additionalProperties, "Name")
		delete(additionalProperties, "OperState")
		delete(additionalProperties, "PortChannelId")
		delete(additionalProperties, "PortSubType")
		delete(additionalProperties, "PortType")
		delete(additionalProperties, "SlotId")
		delete(additionalProperties, "Speed")
		delete(additionalProperties, "SpeedGroup")
		delete(additionalProperties, "Vlan")
		delete(additionalProperties, "NetworkElement")
		delete(additionalProperties, "RegisteredDevice")

		// remove fields from embedded structs
		reflectInventoryBase := reflect.ValueOf(o.InventoryBase)
		for i := 0; i < reflectInventoryBase.Type().NumField(); i++ {
			t := reflectInventoryBase.Type().Field(i)

			if jsonTag := t.Tag.Get("json"); jsonTag != "" {
				fieldName := ""
				if commaIdx := strings.Index(jsonTag, ","); commaIdx > 0 {
					fieldName = jsonTag[:commaIdx]
				} else {
					fieldName = jsonTag
				}
				if fieldName != "AdditionalProperties" {
					delete(additionalProperties, fieldName)
				}
			}
		}

		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableNetworkInterfaceList struct {
	value *NetworkInterfaceList
	isSet bool
}

func (v NullableNetworkInterfaceList) Get() *NetworkInterfaceList {
	return v.value
}

func (v *NullableNetworkInterfaceList) Set(val *NetworkInterfaceList) {
	v.value = val
	v.isSet = true
}

func (v NullableNetworkInterfaceList) IsSet() bool {
	return v.isSet
}

func (v *NullableNetworkInterfaceList) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNetworkInterfaceList(val *NetworkInterfaceList) *NullableNetworkInterfaceList {
	return &NullableNetworkInterfaceList{value: val, isSet: true}
}

func (v NullableNetworkInterfaceList) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNetworkInterfaceList) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
