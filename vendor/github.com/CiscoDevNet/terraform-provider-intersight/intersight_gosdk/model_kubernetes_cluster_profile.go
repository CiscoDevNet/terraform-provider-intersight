/*
Cisco Intersight

Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations. The Intersight OpenAPI document defines the complete set of properties that are returned in the HTTP response. From that perspective, a client can expect that no additional properties are returned, unless these properties are explicitly defined in the OpenAPI document. However, when a client uses an older version of the Intersight OpenAPI document, the server may send additional properties because the software is more recent than the client. In that case, the client may receive properties that it does not know about. Some generated SDKs perform a strict validation of the HTTP response body against the OpenAPI document.

API version: 1.0.11-18775
Contact: intersight@cisco.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package intersight

import (
	"encoding/json"
	"fmt"
	"reflect"
	"strings"
)

// checks if the KubernetesClusterProfile type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &KubernetesClusterProfile{}

// KubernetesClusterProfile Cluster profile specifies the config profile for a Kubernetes cluster. It also depicts operations to control the life cycle of a Kubernetes cluster.
type KubernetesClusterProfile struct {
	PolicyAbstractConfigProfile
	// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.
	ClassId string `json:"ClassId"`
	// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
	ObjectType string `json:"ObjectType"`
	// Deprecated
	ActionInfo      NullableKubernetesActionInfo                      `json:"ActionInfo,omitempty"`
	CertConfig      NullableKubernetesClusterCertificateConfiguration `json:"CertConfig,omitempty"`
	EssentialAddons []KubernetesEssentialAddon                        `json:"EssentialAddons,omitempty"`
	KubeConfig      NullableKubernetesConfiguration                   `json:"KubeConfig,omitempty"`
	// Management mode for the cluster. In some cases Intersight kubernetes service is not required to provision and manage the management entities and endpoints (for e.g. EKS). In most other cases it will be required to provision and manage these entities and endpoints. * `Provided` - Cluster management entities and endpoints are provided by the infrastructure platform. * `Managed` - Cluster management entities and endpoints are provisioned and managed by Intersight kubernetes service.
	ManagedMode      *string                                   `json:"ManagedMode,omitempty"`
	ManagementConfig NullableKubernetesClusterManagementConfig `json:"ManagementConfig,omitempty"`
	// Status of the Kubernetes cluster and its nodes. * `Undeployed` - The cluster is undeployed. * `Configuring` - The cluster is being configured. * `Deploying` - The cluster is being deployed. * `Undeploying` - The cluster is being undeployed. * `DeployFailedTerminal` - The Cluster Deploy failed creation and can not be recovered, only Delete or Undeploy operations are available for this Cluster. * `DeployFailed` - The cluster deployment failed. * `Upgrading` - The cluster is being upgraded. * `Deleting` - The cluster is being deleted. * `DeleteFailed` - The Cluster Delete failed and the Cluster can not be recovered, only Delete or Undeploy operations are available for this Cluster. * `Ready` - The cluster is ready for use. * `Active` - The cluster is being active. * `Shutdown` - All the nodes in the cluster are powered off. * `Terminated` - The cluster is terminated. * `Deployed` - The cluster is deployed. The cluster may not yet be ready for use. * `UndeployFailed` - The cluster undeploy action failed. * `NotReady` - The cluster is created and some nodes are not ready.
	Status            *string                                     `json:"Status,omitempty"`
	AciCniProfile     NullableKubernetesAciCniProfileRelationship `json:"AciCniProfile,omitempty"`
	AssociatedCluster NullableKubernetesClusterRelationship       `json:"AssociatedCluster,omitempty"`
	// An array of relationships to ippoolPool resources.
	ClusterIpPools              []IppoolPoolRelationship                             `json:"ClusterIpPools,omitempty"`
	ContainerRuntimeConfig      NullableKubernetesContainerRuntimePolicyRelationship `json:"ContainerRuntimeConfig,omitempty"`
	ContainerRuntimeProxyPolicy NullableKubernetesHttpProxyPolicyRelationship        `json:"ContainerRuntimeProxyPolicy,omitempty"`
	DeviceConnectorProxyPolicy  NullableKubernetesHttpProxyPolicyRelationship        `json:"DeviceConnectorProxyPolicy,omitempty"`
	// An array of relationships to ippoolBlockLease resources.
	LoadbalancerBlockIpLeases []IppoolBlockLeaseRelationship `json:"LoadbalancerBlockIpLeases,omitempty"`
	// An array of relationships to ippoolIpLease resources.
	LoadbalancerIpLeases []IppoolIpLeaseRelationship                 `json:"LoadbalancerIpLeases,omitempty"`
	MasterVipLease       NullableIppoolIpLeaseRelationship           `json:"MasterVipLease,omitempty"`
	NetConfig            NullableKubernetesNetworkPolicyRelationship `json:"NetConfig,omitempty"`
	// An array of relationships to kubernetesNodeGroupProfile resources.
	NodeGroups            []KubernetesNodeGroupProfileRelationship              `json:"NodeGroups,omitempty"`
	Organization          NullableOrganizationOrganizationRelationship          `json:"Organization,omitempty"`
	ParentSolutionProfile NullableMoBaseMoRelationship                          `json:"ParentSolutionProfile,omitempty"`
	SysConfig             NullableKubernetesSysConfigPolicyRelationship         `json:"SysConfig,omitempty"`
	TrustedRegistries     NullableKubernetesTrustedRegistriesPolicyRelationship `json:"TrustedRegistries,omitempty"`
	WorkflowInfo          NullableWorkflowWorkflowInfoRelationship              `json:"WorkflowInfo,omitempty"`
	AdditionalProperties  map[string]interface{}
}

type _KubernetesClusterProfile KubernetesClusterProfile

// NewKubernetesClusterProfile instantiates a new KubernetesClusterProfile object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewKubernetesClusterProfile(classId string, objectType string) *KubernetesClusterProfile {
	this := KubernetesClusterProfile{}
	this.ClassId = classId
	this.ObjectType = objectType
	var type_ string = "instance"
	this.Type = &type_
	var action string = "No-op"
	this.Action = &action
	var managedMode string = "Provided"
	this.ManagedMode = &managedMode
	var status string = "Undeployed"
	this.Status = &status
	return &this
}

// NewKubernetesClusterProfileWithDefaults instantiates a new KubernetesClusterProfile object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewKubernetesClusterProfileWithDefaults() *KubernetesClusterProfile {
	this := KubernetesClusterProfile{}
	var classId string = "kubernetes.ClusterProfile"
	this.ClassId = classId
	var objectType string = "kubernetes.ClusterProfile"
	this.ObjectType = objectType
	var managedMode string = "Provided"
	this.ManagedMode = &managedMode
	var status string = "Undeployed"
	this.Status = &status
	return &this
}

// GetClassId returns the ClassId field value
func (o *KubernetesClusterProfile) GetClassId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ClassId
}

// GetClassIdOk returns a tuple with the ClassId field value
// and a boolean to check if the value has been set.
func (o *KubernetesClusterProfile) GetClassIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ClassId, true
}

// SetClassId sets field value
func (o *KubernetesClusterProfile) SetClassId(v string) {
	o.ClassId = v
}

// GetDefaultClassId returns the default value "kubernetes.ClusterProfile" of the ClassId field.
func (o *KubernetesClusterProfile) GetDefaultClassId() interface{} {
	return "kubernetes.ClusterProfile"
}

// GetObjectType returns the ObjectType field value
func (o *KubernetesClusterProfile) GetObjectType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ObjectType
}

// GetObjectTypeOk returns a tuple with the ObjectType field value
// and a boolean to check if the value has been set.
func (o *KubernetesClusterProfile) GetObjectTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ObjectType, true
}

// SetObjectType sets field value
func (o *KubernetesClusterProfile) SetObjectType(v string) {
	o.ObjectType = v
}

// GetDefaultObjectType returns the default value "kubernetes.ClusterProfile" of the ObjectType field.
func (o *KubernetesClusterProfile) GetDefaultObjectType() interface{} {
	return "kubernetes.ClusterProfile"
}

// GetActionInfo returns the ActionInfo field value if set, zero value otherwise (both if not set or set to explicit null).
// Deprecated
func (o *KubernetesClusterProfile) GetActionInfo() KubernetesActionInfo {
	if o == nil || IsNil(o.ActionInfo.Get()) {
		var ret KubernetesActionInfo
		return ret
	}
	return *o.ActionInfo.Get()
}

// GetActionInfoOk returns a tuple with the ActionInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
// Deprecated
func (o *KubernetesClusterProfile) GetActionInfoOk() (*KubernetesActionInfo, bool) {
	if o == nil {
		return nil, false
	}
	return o.ActionInfo.Get(), o.ActionInfo.IsSet()
}

// HasActionInfo returns a boolean if a field has been set.
func (o *KubernetesClusterProfile) HasActionInfo() bool {
	if o != nil && o.ActionInfo.IsSet() {
		return true
	}

	return false
}

// SetActionInfo gets a reference to the given NullableKubernetesActionInfo and assigns it to the ActionInfo field.
// Deprecated
func (o *KubernetesClusterProfile) SetActionInfo(v KubernetesActionInfo) {
	o.ActionInfo.Set(&v)
}

// SetActionInfoNil sets the value for ActionInfo to be an explicit nil
func (o *KubernetesClusterProfile) SetActionInfoNil() {
	o.ActionInfo.Set(nil)
}

// UnsetActionInfo ensures that no value is present for ActionInfo, not even an explicit nil
func (o *KubernetesClusterProfile) UnsetActionInfo() {
	o.ActionInfo.Unset()
}

// GetCertConfig returns the CertConfig field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *KubernetesClusterProfile) GetCertConfig() KubernetesClusterCertificateConfiguration {
	if o == nil || IsNil(o.CertConfig.Get()) {
		var ret KubernetesClusterCertificateConfiguration
		return ret
	}
	return *o.CertConfig.Get()
}

// GetCertConfigOk returns a tuple with the CertConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *KubernetesClusterProfile) GetCertConfigOk() (*KubernetesClusterCertificateConfiguration, bool) {
	if o == nil {
		return nil, false
	}
	return o.CertConfig.Get(), o.CertConfig.IsSet()
}

// HasCertConfig returns a boolean if a field has been set.
func (o *KubernetesClusterProfile) HasCertConfig() bool {
	if o != nil && o.CertConfig.IsSet() {
		return true
	}

	return false
}

// SetCertConfig gets a reference to the given NullableKubernetesClusterCertificateConfiguration and assigns it to the CertConfig field.
func (o *KubernetesClusterProfile) SetCertConfig(v KubernetesClusterCertificateConfiguration) {
	o.CertConfig.Set(&v)
}

// SetCertConfigNil sets the value for CertConfig to be an explicit nil
func (o *KubernetesClusterProfile) SetCertConfigNil() {
	o.CertConfig.Set(nil)
}

// UnsetCertConfig ensures that no value is present for CertConfig, not even an explicit nil
func (o *KubernetesClusterProfile) UnsetCertConfig() {
	o.CertConfig.Unset()
}

// GetEssentialAddons returns the EssentialAddons field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *KubernetesClusterProfile) GetEssentialAddons() []KubernetesEssentialAddon {
	if o == nil {
		var ret []KubernetesEssentialAddon
		return ret
	}
	return o.EssentialAddons
}

// GetEssentialAddonsOk returns a tuple with the EssentialAddons field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *KubernetesClusterProfile) GetEssentialAddonsOk() ([]KubernetesEssentialAddon, bool) {
	if o == nil || IsNil(o.EssentialAddons) {
		return nil, false
	}
	return o.EssentialAddons, true
}

// HasEssentialAddons returns a boolean if a field has been set.
func (o *KubernetesClusterProfile) HasEssentialAddons() bool {
	if o != nil && !IsNil(o.EssentialAddons) {
		return true
	}

	return false
}

// SetEssentialAddons gets a reference to the given []KubernetesEssentialAddon and assigns it to the EssentialAddons field.
func (o *KubernetesClusterProfile) SetEssentialAddons(v []KubernetesEssentialAddon) {
	o.EssentialAddons = v
}

// GetKubeConfig returns the KubeConfig field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *KubernetesClusterProfile) GetKubeConfig() KubernetesConfiguration {
	if o == nil || IsNil(o.KubeConfig.Get()) {
		var ret KubernetesConfiguration
		return ret
	}
	return *o.KubeConfig.Get()
}

// GetKubeConfigOk returns a tuple with the KubeConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *KubernetesClusterProfile) GetKubeConfigOk() (*KubernetesConfiguration, bool) {
	if o == nil {
		return nil, false
	}
	return o.KubeConfig.Get(), o.KubeConfig.IsSet()
}

// HasKubeConfig returns a boolean if a field has been set.
func (o *KubernetesClusterProfile) HasKubeConfig() bool {
	if o != nil && o.KubeConfig.IsSet() {
		return true
	}

	return false
}

// SetKubeConfig gets a reference to the given NullableKubernetesConfiguration and assigns it to the KubeConfig field.
func (o *KubernetesClusterProfile) SetKubeConfig(v KubernetesConfiguration) {
	o.KubeConfig.Set(&v)
}

// SetKubeConfigNil sets the value for KubeConfig to be an explicit nil
func (o *KubernetesClusterProfile) SetKubeConfigNil() {
	o.KubeConfig.Set(nil)
}

// UnsetKubeConfig ensures that no value is present for KubeConfig, not even an explicit nil
func (o *KubernetesClusterProfile) UnsetKubeConfig() {
	o.KubeConfig.Unset()
}

// GetManagedMode returns the ManagedMode field value if set, zero value otherwise.
func (o *KubernetesClusterProfile) GetManagedMode() string {
	if o == nil || IsNil(o.ManagedMode) {
		var ret string
		return ret
	}
	return *o.ManagedMode
}

// GetManagedModeOk returns a tuple with the ManagedMode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KubernetesClusterProfile) GetManagedModeOk() (*string, bool) {
	if o == nil || IsNil(o.ManagedMode) {
		return nil, false
	}
	return o.ManagedMode, true
}

// HasManagedMode returns a boolean if a field has been set.
func (o *KubernetesClusterProfile) HasManagedMode() bool {
	if o != nil && !IsNil(o.ManagedMode) {
		return true
	}

	return false
}

// SetManagedMode gets a reference to the given string and assigns it to the ManagedMode field.
func (o *KubernetesClusterProfile) SetManagedMode(v string) {
	o.ManagedMode = &v
}

// GetManagementConfig returns the ManagementConfig field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *KubernetesClusterProfile) GetManagementConfig() KubernetesClusterManagementConfig {
	if o == nil || IsNil(o.ManagementConfig.Get()) {
		var ret KubernetesClusterManagementConfig
		return ret
	}
	return *o.ManagementConfig.Get()
}

// GetManagementConfigOk returns a tuple with the ManagementConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *KubernetesClusterProfile) GetManagementConfigOk() (*KubernetesClusterManagementConfig, bool) {
	if o == nil {
		return nil, false
	}
	return o.ManagementConfig.Get(), o.ManagementConfig.IsSet()
}

// HasManagementConfig returns a boolean if a field has been set.
func (o *KubernetesClusterProfile) HasManagementConfig() bool {
	if o != nil && o.ManagementConfig.IsSet() {
		return true
	}

	return false
}

// SetManagementConfig gets a reference to the given NullableKubernetesClusterManagementConfig and assigns it to the ManagementConfig field.
func (o *KubernetesClusterProfile) SetManagementConfig(v KubernetesClusterManagementConfig) {
	o.ManagementConfig.Set(&v)
}

// SetManagementConfigNil sets the value for ManagementConfig to be an explicit nil
func (o *KubernetesClusterProfile) SetManagementConfigNil() {
	o.ManagementConfig.Set(nil)
}

// UnsetManagementConfig ensures that no value is present for ManagementConfig, not even an explicit nil
func (o *KubernetesClusterProfile) UnsetManagementConfig() {
	o.ManagementConfig.Unset()
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *KubernetesClusterProfile) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KubernetesClusterProfile) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *KubernetesClusterProfile) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *KubernetesClusterProfile) SetStatus(v string) {
	o.Status = &v
}

// GetAciCniProfile returns the AciCniProfile field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *KubernetesClusterProfile) GetAciCniProfile() KubernetesAciCniProfileRelationship {
	if o == nil || IsNil(o.AciCniProfile.Get()) {
		var ret KubernetesAciCniProfileRelationship
		return ret
	}
	return *o.AciCniProfile.Get()
}

// GetAciCniProfileOk returns a tuple with the AciCniProfile field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *KubernetesClusterProfile) GetAciCniProfileOk() (*KubernetesAciCniProfileRelationship, bool) {
	if o == nil {
		return nil, false
	}
	return o.AciCniProfile.Get(), o.AciCniProfile.IsSet()
}

// HasAciCniProfile returns a boolean if a field has been set.
func (o *KubernetesClusterProfile) HasAciCniProfile() bool {
	if o != nil && o.AciCniProfile.IsSet() {
		return true
	}

	return false
}

// SetAciCniProfile gets a reference to the given NullableKubernetesAciCniProfileRelationship and assigns it to the AciCniProfile field.
func (o *KubernetesClusterProfile) SetAciCniProfile(v KubernetesAciCniProfileRelationship) {
	o.AciCniProfile.Set(&v)
}

// SetAciCniProfileNil sets the value for AciCniProfile to be an explicit nil
func (o *KubernetesClusterProfile) SetAciCniProfileNil() {
	o.AciCniProfile.Set(nil)
}

// UnsetAciCniProfile ensures that no value is present for AciCniProfile, not even an explicit nil
func (o *KubernetesClusterProfile) UnsetAciCniProfile() {
	o.AciCniProfile.Unset()
}

// GetAssociatedCluster returns the AssociatedCluster field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *KubernetesClusterProfile) GetAssociatedCluster() KubernetesClusterRelationship {
	if o == nil || IsNil(o.AssociatedCluster.Get()) {
		var ret KubernetesClusterRelationship
		return ret
	}
	return *o.AssociatedCluster.Get()
}

// GetAssociatedClusterOk returns a tuple with the AssociatedCluster field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *KubernetesClusterProfile) GetAssociatedClusterOk() (*KubernetesClusterRelationship, bool) {
	if o == nil {
		return nil, false
	}
	return o.AssociatedCluster.Get(), o.AssociatedCluster.IsSet()
}

// HasAssociatedCluster returns a boolean if a field has been set.
func (o *KubernetesClusterProfile) HasAssociatedCluster() bool {
	if o != nil && o.AssociatedCluster.IsSet() {
		return true
	}

	return false
}

// SetAssociatedCluster gets a reference to the given NullableKubernetesClusterRelationship and assigns it to the AssociatedCluster field.
func (o *KubernetesClusterProfile) SetAssociatedCluster(v KubernetesClusterRelationship) {
	o.AssociatedCluster.Set(&v)
}

// SetAssociatedClusterNil sets the value for AssociatedCluster to be an explicit nil
func (o *KubernetesClusterProfile) SetAssociatedClusterNil() {
	o.AssociatedCluster.Set(nil)
}

// UnsetAssociatedCluster ensures that no value is present for AssociatedCluster, not even an explicit nil
func (o *KubernetesClusterProfile) UnsetAssociatedCluster() {
	o.AssociatedCluster.Unset()
}

// GetClusterIpPools returns the ClusterIpPools field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *KubernetesClusterProfile) GetClusterIpPools() []IppoolPoolRelationship {
	if o == nil {
		var ret []IppoolPoolRelationship
		return ret
	}
	return o.ClusterIpPools
}

// GetClusterIpPoolsOk returns a tuple with the ClusterIpPools field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *KubernetesClusterProfile) GetClusterIpPoolsOk() ([]IppoolPoolRelationship, bool) {
	if o == nil || IsNil(o.ClusterIpPools) {
		return nil, false
	}
	return o.ClusterIpPools, true
}

// HasClusterIpPools returns a boolean if a field has been set.
func (o *KubernetesClusterProfile) HasClusterIpPools() bool {
	if o != nil && !IsNil(o.ClusterIpPools) {
		return true
	}

	return false
}

// SetClusterIpPools gets a reference to the given []IppoolPoolRelationship and assigns it to the ClusterIpPools field.
func (o *KubernetesClusterProfile) SetClusterIpPools(v []IppoolPoolRelationship) {
	o.ClusterIpPools = v
}

// GetContainerRuntimeConfig returns the ContainerRuntimeConfig field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *KubernetesClusterProfile) GetContainerRuntimeConfig() KubernetesContainerRuntimePolicyRelationship {
	if o == nil || IsNil(o.ContainerRuntimeConfig.Get()) {
		var ret KubernetesContainerRuntimePolicyRelationship
		return ret
	}
	return *o.ContainerRuntimeConfig.Get()
}

// GetContainerRuntimeConfigOk returns a tuple with the ContainerRuntimeConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *KubernetesClusterProfile) GetContainerRuntimeConfigOk() (*KubernetesContainerRuntimePolicyRelationship, bool) {
	if o == nil {
		return nil, false
	}
	return o.ContainerRuntimeConfig.Get(), o.ContainerRuntimeConfig.IsSet()
}

// HasContainerRuntimeConfig returns a boolean if a field has been set.
func (o *KubernetesClusterProfile) HasContainerRuntimeConfig() bool {
	if o != nil && o.ContainerRuntimeConfig.IsSet() {
		return true
	}

	return false
}

// SetContainerRuntimeConfig gets a reference to the given NullableKubernetesContainerRuntimePolicyRelationship and assigns it to the ContainerRuntimeConfig field.
func (o *KubernetesClusterProfile) SetContainerRuntimeConfig(v KubernetesContainerRuntimePolicyRelationship) {
	o.ContainerRuntimeConfig.Set(&v)
}

// SetContainerRuntimeConfigNil sets the value for ContainerRuntimeConfig to be an explicit nil
func (o *KubernetesClusterProfile) SetContainerRuntimeConfigNil() {
	o.ContainerRuntimeConfig.Set(nil)
}

// UnsetContainerRuntimeConfig ensures that no value is present for ContainerRuntimeConfig, not even an explicit nil
func (o *KubernetesClusterProfile) UnsetContainerRuntimeConfig() {
	o.ContainerRuntimeConfig.Unset()
}

// GetContainerRuntimeProxyPolicy returns the ContainerRuntimeProxyPolicy field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *KubernetesClusterProfile) GetContainerRuntimeProxyPolicy() KubernetesHttpProxyPolicyRelationship {
	if o == nil || IsNil(o.ContainerRuntimeProxyPolicy.Get()) {
		var ret KubernetesHttpProxyPolicyRelationship
		return ret
	}
	return *o.ContainerRuntimeProxyPolicy.Get()
}

// GetContainerRuntimeProxyPolicyOk returns a tuple with the ContainerRuntimeProxyPolicy field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *KubernetesClusterProfile) GetContainerRuntimeProxyPolicyOk() (*KubernetesHttpProxyPolicyRelationship, bool) {
	if o == nil {
		return nil, false
	}
	return o.ContainerRuntimeProxyPolicy.Get(), o.ContainerRuntimeProxyPolicy.IsSet()
}

// HasContainerRuntimeProxyPolicy returns a boolean if a field has been set.
func (o *KubernetesClusterProfile) HasContainerRuntimeProxyPolicy() bool {
	if o != nil && o.ContainerRuntimeProxyPolicy.IsSet() {
		return true
	}

	return false
}

// SetContainerRuntimeProxyPolicy gets a reference to the given NullableKubernetesHttpProxyPolicyRelationship and assigns it to the ContainerRuntimeProxyPolicy field.
func (o *KubernetesClusterProfile) SetContainerRuntimeProxyPolicy(v KubernetesHttpProxyPolicyRelationship) {
	o.ContainerRuntimeProxyPolicy.Set(&v)
}

// SetContainerRuntimeProxyPolicyNil sets the value for ContainerRuntimeProxyPolicy to be an explicit nil
func (o *KubernetesClusterProfile) SetContainerRuntimeProxyPolicyNil() {
	o.ContainerRuntimeProxyPolicy.Set(nil)
}

// UnsetContainerRuntimeProxyPolicy ensures that no value is present for ContainerRuntimeProxyPolicy, not even an explicit nil
func (o *KubernetesClusterProfile) UnsetContainerRuntimeProxyPolicy() {
	o.ContainerRuntimeProxyPolicy.Unset()
}

// GetDeviceConnectorProxyPolicy returns the DeviceConnectorProxyPolicy field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *KubernetesClusterProfile) GetDeviceConnectorProxyPolicy() KubernetesHttpProxyPolicyRelationship {
	if o == nil || IsNil(o.DeviceConnectorProxyPolicy.Get()) {
		var ret KubernetesHttpProxyPolicyRelationship
		return ret
	}
	return *o.DeviceConnectorProxyPolicy.Get()
}

// GetDeviceConnectorProxyPolicyOk returns a tuple with the DeviceConnectorProxyPolicy field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *KubernetesClusterProfile) GetDeviceConnectorProxyPolicyOk() (*KubernetesHttpProxyPolicyRelationship, bool) {
	if o == nil {
		return nil, false
	}
	return o.DeviceConnectorProxyPolicy.Get(), o.DeviceConnectorProxyPolicy.IsSet()
}

// HasDeviceConnectorProxyPolicy returns a boolean if a field has been set.
func (o *KubernetesClusterProfile) HasDeviceConnectorProxyPolicy() bool {
	if o != nil && o.DeviceConnectorProxyPolicy.IsSet() {
		return true
	}

	return false
}

// SetDeviceConnectorProxyPolicy gets a reference to the given NullableKubernetesHttpProxyPolicyRelationship and assigns it to the DeviceConnectorProxyPolicy field.
func (o *KubernetesClusterProfile) SetDeviceConnectorProxyPolicy(v KubernetesHttpProxyPolicyRelationship) {
	o.DeviceConnectorProxyPolicy.Set(&v)
}

// SetDeviceConnectorProxyPolicyNil sets the value for DeviceConnectorProxyPolicy to be an explicit nil
func (o *KubernetesClusterProfile) SetDeviceConnectorProxyPolicyNil() {
	o.DeviceConnectorProxyPolicy.Set(nil)
}

// UnsetDeviceConnectorProxyPolicy ensures that no value is present for DeviceConnectorProxyPolicy, not even an explicit nil
func (o *KubernetesClusterProfile) UnsetDeviceConnectorProxyPolicy() {
	o.DeviceConnectorProxyPolicy.Unset()
}

// GetLoadbalancerBlockIpLeases returns the LoadbalancerBlockIpLeases field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *KubernetesClusterProfile) GetLoadbalancerBlockIpLeases() []IppoolBlockLeaseRelationship {
	if o == nil {
		var ret []IppoolBlockLeaseRelationship
		return ret
	}
	return o.LoadbalancerBlockIpLeases
}

// GetLoadbalancerBlockIpLeasesOk returns a tuple with the LoadbalancerBlockIpLeases field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *KubernetesClusterProfile) GetLoadbalancerBlockIpLeasesOk() ([]IppoolBlockLeaseRelationship, bool) {
	if o == nil || IsNil(o.LoadbalancerBlockIpLeases) {
		return nil, false
	}
	return o.LoadbalancerBlockIpLeases, true
}

// HasLoadbalancerBlockIpLeases returns a boolean if a field has been set.
func (o *KubernetesClusterProfile) HasLoadbalancerBlockIpLeases() bool {
	if o != nil && !IsNil(o.LoadbalancerBlockIpLeases) {
		return true
	}

	return false
}

// SetLoadbalancerBlockIpLeases gets a reference to the given []IppoolBlockLeaseRelationship and assigns it to the LoadbalancerBlockIpLeases field.
func (o *KubernetesClusterProfile) SetLoadbalancerBlockIpLeases(v []IppoolBlockLeaseRelationship) {
	o.LoadbalancerBlockIpLeases = v
}

// GetLoadbalancerIpLeases returns the LoadbalancerIpLeases field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *KubernetesClusterProfile) GetLoadbalancerIpLeases() []IppoolIpLeaseRelationship {
	if o == nil {
		var ret []IppoolIpLeaseRelationship
		return ret
	}
	return o.LoadbalancerIpLeases
}

// GetLoadbalancerIpLeasesOk returns a tuple with the LoadbalancerIpLeases field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *KubernetesClusterProfile) GetLoadbalancerIpLeasesOk() ([]IppoolIpLeaseRelationship, bool) {
	if o == nil || IsNil(o.LoadbalancerIpLeases) {
		return nil, false
	}
	return o.LoadbalancerIpLeases, true
}

// HasLoadbalancerIpLeases returns a boolean if a field has been set.
func (o *KubernetesClusterProfile) HasLoadbalancerIpLeases() bool {
	if o != nil && !IsNil(o.LoadbalancerIpLeases) {
		return true
	}

	return false
}

// SetLoadbalancerIpLeases gets a reference to the given []IppoolIpLeaseRelationship and assigns it to the LoadbalancerIpLeases field.
func (o *KubernetesClusterProfile) SetLoadbalancerIpLeases(v []IppoolIpLeaseRelationship) {
	o.LoadbalancerIpLeases = v
}

// GetMasterVipLease returns the MasterVipLease field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *KubernetesClusterProfile) GetMasterVipLease() IppoolIpLeaseRelationship {
	if o == nil || IsNil(o.MasterVipLease.Get()) {
		var ret IppoolIpLeaseRelationship
		return ret
	}
	return *o.MasterVipLease.Get()
}

// GetMasterVipLeaseOk returns a tuple with the MasterVipLease field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *KubernetesClusterProfile) GetMasterVipLeaseOk() (*IppoolIpLeaseRelationship, bool) {
	if o == nil {
		return nil, false
	}
	return o.MasterVipLease.Get(), o.MasterVipLease.IsSet()
}

// HasMasterVipLease returns a boolean if a field has been set.
func (o *KubernetesClusterProfile) HasMasterVipLease() bool {
	if o != nil && o.MasterVipLease.IsSet() {
		return true
	}

	return false
}

// SetMasterVipLease gets a reference to the given NullableIppoolIpLeaseRelationship and assigns it to the MasterVipLease field.
func (o *KubernetesClusterProfile) SetMasterVipLease(v IppoolIpLeaseRelationship) {
	o.MasterVipLease.Set(&v)
}

// SetMasterVipLeaseNil sets the value for MasterVipLease to be an explicit nil
func (o *KubernetesClusterProfile) SetMasterVipLeaseNil() {
	o.MasterVipLease.Set(nil)
}

// UnsetMasterVipLease ensures that no value is present for MasterVipLease, not even an explicit nil
func (o *KubernetesClusterProfile) UnsetMasterVipLease() {
	o.MasterVipLease.Unset()
}

// GetNetConfig returns the NetConfig field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *KubernetesClusterProfile) GetNetConfig() KubernetesNetworkPolicyRelationship {
	if o == nil || IsNil(o.NetConfig.Get()) {
		var ret KubernetesNetworkPolicyRelationship
		return ret
	}
	return *o.NetConfig.Get()
}

// GetNetConfigOk returns a tuple with the NetConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *KubernetesClusterProfile) GetNetConfigOk() (*KubernetesNetworkPolicyRelationship, bool) {
	if o == nil {
		return nil, false
	}
	return o.NetConfig.Get(), o.NetConfig.IsSet()
}

// HasNetConfig returns a boolean if a field has been set.
func (o *KubernetesClusterProfile) HasNetConfig() bool {
	if o != nil && o.NetConfig.IsSet() {
		return true
	}

	return false
}

// SetNetConfig gets a reference to the given NullableKubernetesNetworkPolicyRelationship and assigns it to the NetConfig field.
func (o *KubernetesClusterProfile) SetNetConfig(v KubernetesNetworkPolicyRelationship) {
	o.NetConfig.Set(&v)
}

// SetNetConfigNil sets the value for NetConfig to be an explicit nil
func (o *KubernetesClusterProfile) SetNetConfigNil() {
	o.NetConfig.Set(nil)
}

// UnsetNetConfig ensures that no value is present for NetConfig, not even an explicit nil
func (o *KubernetesClusterProfile) UnsetNetConfig() {
	o.NetConfig.Unset()
}

// GetNodeGroups returns the NodeGroups field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *KubernetesClusterProfile) GetNodeGroups() []KubernetesNodeGroupProfileRelationship {
	if o == nil {
		var ret []KubernetesNodeGroupProfileRelationship
		return ret
	}
	return o.NodeGroups
}

// GetNodeGroupsOk returns a tuple with the NodeGroups field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *KubernetesClusterProfile) GetNodeGroupsOk() ([]KubernetesNodeGroupProfileRelationship, bool) {
	if o == nil || IsNil(o.NodeGroups) {
		return nil, false
	}
	return o.NodeGroups, true
}

// HasNodeGroups returns a boolean if a field has been set.
func (o *KubernetesClusterProfile) HasNodeGroups() bool {
	if o != nil && !IsNil(o.NodeGroups) {
		return true
	}

	return false
}

// SetNodeGroups gets a reference to the given []KubernetesNodeGroupProfileRelationship and assigns it to the NodeGroups field.
func (o *KubernetesClusterProfile) SetNodeGroups(v []KubernetesNodeGroupProfileRelationship) {
	o.NodeGroups = v
}

// GetOrganization returns the Organization field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *KubernetesClusterProfile) GetOrganization() OrganizationOrganizationRelationship {
	if o == nil || IsNil(o.Organization.Get()) {
		var ret OrganizationOrganizationRelationship
		return ret
	}
	return *o.Organization.Get()
}

// GetOrganizationOk returns a tuple with the Organization field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *KubernetesClusterProfile) GetOrganizationOk() (*OrganizationOrganizationRelationship, bool) {
	if o == nil {
		return nil, false
	}
	return o.Organization.Get(), o.Organization.IsSet()
}

// HasOrganization returns a boolean if a field has been set.
func (o *KubernetesClusterProfile) HasOrganization() bool {
	if o != nil && o.Organization.IsSet() {
		return true
	}

	return false
}

// SetOrganization gets a reference to the given NullableOrganizationOrganizationRelationship and assigns it to the Organization field.
func (o *KubernetesClusterProfile) SetOrganization(v OrganizationOrganizationRelationship) {
	o.Organization.Set(&v)
}

// SetOrganizationNil sets the value for Organization to be an explicit nil
func (o *KubernetesClusterProfile) SetOrganizationNil() {
	o.Organization.Set(nil)
}

// UnsetOrganization ensures that no value is present for Organization, not even an explicit nil
func (o *KubernetesClusterProfile) UnsetOrganization() {
	o.Organization.Unset()
}

// GetParentSolutionProfile returns the ParentSolutionProfile field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *KubernetesClusterProfile) GetParentSolutionProfile() MoBaseMoRelationship {
	if o == nil || IsNil(o.ParentSolutionProfile.Get()) {
		var ret MoBaseMoRelationship
		return ret
	}
	return *o.ParentSolutionProfile.Get()
}

// GetParentSolutionProfileOk returns a tuple with the ParentSolutionProfile field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *KubernetesClusterProfile) GetParentSolutionProfileOk() (*MoBaseMoRelationship, bool) {
	if o == nil {
		return nil, false
	}
	return o.ParentSolutionProfile.Get(), o.ParentSolutionProfile.IsSet()
}

// HasParentSolutionProfile returns a boolean if a field has been set.
func (o *KubernetesClusterProfile) HasParentSolutionProfile() bool {
	if o != nil && o.ParentSolutionProfile.IsSet() {
		return true
	}

	return false
}

// SetParentSolutionProfile gets a reference to the given NullableMoBaseMoRelationship and assigns it to the ParentSolutionProfile field.
func (o *KubernetesClusterProfile) SetParentSolutionProfile(v MoBaseMoRelationship) {
	o.ParentSolutionProfile.Set(&v)
}

// SetParentSolutionProfileNil sets the value for ParentSolutionProfile to be an explicit nil
func (o *KubernetesClusterProfile) SetParentSolutionProfileNil() {
	o.ParentSolutionProfile.Set(nil)
}

// UnsetParentSolutionProfile ensures that no value is present for ParentSolutionProfile, not even an explicit nil
func (o *KubernetesClusterProfile) UnsetParentSolutionProfile() {
	o.ParentSolutionProfile.Unset()
}

// GetSysConfig returns the SysConfig field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *KubernetesClusterProfile) GetSysConfig() KubernetesSysConfigPolicyRelationship {
	if o == nil || IsNil(o.SysConfig.Get()) {
		var ret KubernetesSysConfigPolicyRelationship
		return ret
	}
	return *o.SysConfig.Get()
}

// GetSysConfigOk returns a tuple with the SysConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *KubernetesClusterProfile) GetSysConfigOk() (*KubernetesSysConfigPolicyRelationship, bool) {
	if o == nil {
		return nil, false
	}
	return o.SysConfig.Get(), o.SysConfig.IsSet()
}

// HasSysConfig returns a boolean if a field has been set.
func (o *KubernetesClusterProfile) HasSysConfig() bool {
	if o != nil && o.SysConfig.IsSet() {
		return true
	}

	return false
}

// SetSysConfig gets a reference to the given NullableKubernetesSysConfigPolicyRelationship and assigns it to the SysConfig field.
func (o *KubernetesClusterProfile) SetSysConfig(v KubernetesSysConfigPolicyRelationship) {
	o.SysConfig.Set(&v)
}

// SetSysConfigNil sets the value for SysConfig to be an explicit nil
func (o *KubernetesClusterProfile) SetSysConfigNil() {
	o.SysConfig.Set(nil)
}

// UnsetSysConfig ensures that no value is present for SysConfig, not even an explicit nil
func (o *KubernetesClusterProfile) UnsetSysConfig() {
	o.SysConfig.Unset()
}

// GetTrustedRegistries returns the TrustedRegistries field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *KubernetesClusterProfile) GetTrustedRegistries() KubernetesTrustedRegistriesPolicyRelationship {
	if o == nil || IsNil(o.TrustedRegistries.Get()) {
		var ret KubernetesTrustedRegistriesPolicyRelationship
		return ret
	}
	return *o.TrustedRegistries.Get()
}

// GetTrustedRegistriesOk returns a tuple with the TrustedRegistries field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *KubernetesClusterProfile) GetTrustedRegistriesOk() (*KubernetesTrustedRegistriesPolicyRelationship, bool) {
	if o == nil {
		return nil, false
	}
	return o.TrustedRegistries.Get(), o.TrustedRegistries.IsSet()
}

// HasTrustedRegistries returns a boolean if a field has been set.
func (o *KubernetesClusterProfile) HasTrustedRegistries() bool {
	if o != nil && o.TrustedRegistries.IsSet() {
		return true
	}

	return false
}

// SetTrustedRegistries gets a reference to the given NullableKubernetesTrustedRegistriesPolicyRelationship and assigns it to the TrustedRegistries field.
func (o *KubernetesClusterProfile) SetTrustedRegistries(v KubernetesTrustedRegistriesPolicyRelationship) {
	o.TrustedRegistries.Set(&v)
}

// SetTrustedRegistriesNil sets the value for TrustedRegistries to be an explicit nil
func (o *KubernetesClusterProfile) SetTrustedRegistriesNil() {
	o.TrustedRegistries.Set(nil)
}

// UnsetTrustedRegistries ensures that no value is present for TrustedRegistries, not even an explicit nil
func (o *KubernetesClusterProfile) UnsetTrustedRegistries() {
	o.TrustedRegistries.Unset()
}

// GetWorkflowInfo returns the WorkflowInfo field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *KubernetesClusterProfile) GetWorkflowInfo() WorkflowWorkflowInfoRelationship {
	if o == nil || IsNil(o.WorkflowInfo.Get()) {
		var ret WorkflowWorkflowInfoRelationship
		return ret
	}
	return *o.WorkflowInfo.Get()
}

// GetWorkflowInfoOk returns a tuple with the WorkflowInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *KubernetesClusterProfile) GetWorkflowInfoOk() (*WorkflowWorkflowInfoRelationship, bool) {
	if o == nil {
		return nil, false
	}
	return o.WorkflowInfo.Get(), o.WorkflowInfo.IsSet()
}

// HasWorkflowInfo returns a boolean if a field has been set.
func (o *KubernetesClusterProfile) HasWorkflowInfo() bool {
	if o != nil && o.WorkflowInfo.IsSet() {
		return true
	}

	return false
}

// SetWorkflowInfo gets a reference to the given NullableWorkflowWorkflowInfoRelationship and assigns it to the WorkflowInfo field.
func (o *KubernetesClusterProfile) SetWorkflowInfo(v WorkflowWorkflowInfoRelationship) {
	o.WorkflowInfo.Set(&v)
}

// SetWorkflowInfoNil sets the value for WorkflowInfo to be an explicit nil
func (o *KubernetesClusterProfile) SetWorkflowInfoNil() {
	o.WorkflowInfo.Set(nil)
}

// UnsetWorkflowInfo ensures that no value is present for WorkflowInfo, not even an explicit nil
func (o *KubernetesClusterProfile) UnsetWorkflowInfo() {
	o.WorkflowInfo.Unset()
}

func (o KubernetesClusterProfile) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o KubernetesClusterProfile) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	serializedPolicyAbstractConfigProfile, errPolicyAbstractConfigProfile := json.Marshal(o.PolicyAbstractConfigProfile)
	if errPolicyAbstractConfigProfile != nil {
		return map[string]interface{}{}, errPolicyAbstractConfigProfile
	}
	errPolicyAbstractConfigProfile = json.Unmarshal([]byte(serializedPolicyAbstractConfigProfile), &toSerialize)
	if errPolicyAbstractConfigProfile != nil {
		return map[string]interface{}{}, errPolicyAbstractConfigProfile
	}
	if _, exists := toSerialize["ClassId"]; !exists {
		toSerialize["ClassId"] = o.GetDefaultClassId()
	}
	toSerialize["ClassId"] = o.ClassId
	if _, exists := toSerialize["ObjectType"]; !exists {
		toSerialize["ObjectType"] = o.GetDefaultObjectType()
	}
	toSerialize["ObjectType"] = o.ObjectType
	if o.ActionInfo.IsSet() {
		toSerialize["ActionInfo"] = o.ActionInfo.Get()
	}
	if o.CertConfig.IsSet() {
		toSerialize["CertConfig"] = o.CertConfig.Get()
	}
	if o.EssentialAddons != nil {
		toSerialize["EssentialAddons"] = o.EssentialAddons
	}
	if o.KubeConfig.IsSet() {
		toSerialize["KubeConfig"] = o.KubeConfig.Get()
	}
	if !IsNil(o.ManagedMode) {
		toSerialize["ManagedMode"] = o.ManagedMode
	}
	if o.ManagementConfig.IsSet() {
		toSerialize["ManagementConfig"] = o.ManagementConfig.Get()
	}
	if !IsNil(o.Status) {
		toSerialize["Status"] = o.Status
	}
	if o.AciCniProfile.IsSet() {
		toSerialize["AciCniProfile"] = o.AciCniProfile.Get()
	}
	if o.AssociatedCluster.IsSet() {
		toSerialize["AssociatedCluster"] = o.AssociatedCluster.Get()
	}
	if o.ClusterIpPools != nil {
		toSerialize["ClusterIpPools"] = o.ClusterIpPools
	}
	if o.ContainerRuntimeConfig.IsSet() {
		toSerialize["ContainerRuntimeConfig"] = o.ContainerRuntimeConfig.Get()
	}
	if o.ContainerRuntimeProxyPolicy.IsSet() {
		toSerialize["ContainerRuntimeProxyPolicy"] = o.ContainerRuntimeProxyPolicy.Get()
	}
	if o.DeviceConnectorProxyPolicy.IsSet() {
		toSerialize["DeviceConnectorProxyPolicy"] = o.DeviceConnectorProxyPolicy.Get()
	}
	if o.LoadbalancerBlockIpLeases != nil {
		toSerialize["LoadbalancerBlockIpLeases"] = o.LoadbalancerBlockIpLeases
	}
	if o.LoadbalancerIpLeases != nil {
		toSerialize["LoadbalancerIpLeases"] = o.LoadbalancerIpLeases
	}
	if o.MasterVipLease.IsSet() {
		toSerialize["MasterVipLease"] = o.MasterVipLease.Get()
	}
	if o.NetConfig.IsSet() {
		toSerialize["NetConfig"] = o.NetConfig.Get()
	}
	if o.NodeGroups != nil {
		toSerialize["NodeGroups"] = o.NodeGroups
	}
	if o.Organization.IsSet() {
		toSerialize["Organization"] = o.Organization.Get()
	}
	if o.ParentSolutionProfile.IsSet() {
		toSerialize["ParentSolutionProfile"] = o.ParentSolutionProfile.Get()
	}
	if o.SysConfig.IsSet() {
		toSerialize["SysConfig"] = o.SysConfig.Get()
	}
	if o.TrustedRegistries.IsSet() {
		toSerialize["TrustedRegistries"] = o.TrustedRegistries.Get()
	}
	if o.WorkflowInfo.IsSet() {
		toSerialize["WorkflowInfo"] = o.WorkflowInfo.Get()
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *KubernetesClusterProfile) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"ClassId",
		"ObjectType",
	}

	// defaultValueFuncMap captures the default values for required properties.
	// These values are used when required properties are missing from the payload.
	defaultValueFuncMap := map[string]func() interface{}{
		"ClassId":    o.GetDefaultClassId,
		"ObjectType": o.GetDefaultObjectType,
	}
	var defaultValueApplied bool
	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			if _, ok := defaultValueFuncMap[requiredProperty]; ok {
				allProperties[requiredProperty] = defaultValueFuncMap[requiredProperty]()
				defaultValueApplied = true
			}
		}
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	if defaultValueApplied {
		data, err = json.Marshal(allProperties)
		if err != nil {
			return err
		}
	}
	type KubernetesClusterProfileWithoutEmbeddedStruct struct {
		// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.
		ClassId string `json:"ClassId"`
		// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
		ObjectType string `json:"ObjectType"`
		// Deprecated
		ActionInfo      NullableKubernetesActionInfo                      `json:"ActionInfo,omitempty"`
		CertConfig      NullableKubernetesClusterCertificateConfiguration `json:"CertConfig,omitempty"`
		EssentialAddons []KubernetesEssentialAddon                        `json:"EssentialAddons,omitempty"`
		KubeConfig      NullableKubernetesConfiguration                   `json:"KubeConfig,omitempty"`
		// Management mode for the cluster. In some cases Intersight kubernetes service is not required to provision and manage the management entities and endpoints (for e.g. EKS). In most other cases it will be required to provision and manage these entities and endpoints. * `Provided` - Cluster management entities and endpoints are provided by the infrastructure platform. * `Managed` - Cluster management entities and endpoints are provisioned and managed by Intersight kubernetes service.
		ManagedMode      *string                                   `json:"ManagedMode,omitempty"`
		ManagementConfig NullableKubernetesClusterManagementConfig `json:"ManagementConfig,omitempty"`
		// Status of the Kubernetes cluster and its nodes. * `Undeployed` - The cluster is undeployed. * `Configuring` - The cluster is being configured. * `Deploying` - The cluster is being deployed. * `Undeploying` - The cluster is being undeployed. * `DeployFailedTerminal` - The Cluster Deploy failed creation and can not be recovered, only Delete or Undeploy operations are available for this Cluster. * `DeployFailed` - The cluster deployment failed. * `Upgrading` - The cluster is being upgraded. * `Deleting` - The cluster is being deleted. * `DeleteFailed` - The Cluster Delete failed and the Cluster can not be recovered, only Delete or Undeploy operations are available for this Cluster. * `Ready` - The cluster is ready for use. * `Active` - The cluster is being active. * `Shutdown` - All the nodes in the cluster are powered off. * `Terminated` - The cluster is terminated. * `Deployed` - The cluster is deployed. The cluster may not yet be ready for use. * `UndeployFailed` - The cluster undeploy action failed. * `NotReady` - The cluster is created and some nodes are not ready.
		Status            *string                                     `json:"Status,omitempty"`
		AciCniProfile     NullableKubernetesAciCniProfileRelationship `json:"AciCniProfile,omitempty"`
		AssociatedCluster NullableKubernetesClusterRelationship       `json:"AssociatedCluster,omitempty"`
		// An array of relationships to ippoolPool resources.
		ClusterIpPools              []IppoolPoolRelationship                             `json:"ClusterIpPools,omitempty"`
		ContainerRuntimeConfig      NullableKubernetesContainerRuntimePolicyRelationship `json:"ContainerRuntimeConfig,omitempty"`
		ContainerRuntimeProxyPolicy NullableKubernetesHttpProxyPolicyRelationship        `json:"ContainerRuntimeProxyPolicy,omitempty"`
		DeviceConnectorProxyPolicy  NullableKubernetesHttpProxyPolicyRelationship        `json:"DeviceConnectorProxyPolicy,omitempty"`
		// An array of relationships to ippoolBlockLease resources.
		LoadbalancerBlockIpLeases []IppoolBlockLeaseRelationship `json:"LoadbalancerBlockIpLeases,omitempty"`
		// An array of relationships to ippoolIpLease resources.
		LoadbalancerIpLeases []IppoolIpLeaseRelationship                 `json:"LoadbalancerIpLeases,omitempty"`
		MasterVipLease       NullableIppoolIpLeaseRelationship           `json:"MasterVipLease,omitempty"`
		NetConfig            NullableKubernetesNetworkPolicyRelationship `json:"NetConfig,omitempty"`
		// An array of relationships to kubernetesNodeGroupProfile resources.
		NodeGroups            []KubernetesNodeGroupProfileRelationship              `json:"NodeGroups,omitempty"`
		Organization          NullableOrganizationOrganizationRelationship          `json:"Organization,omitempty"`
		ParentSolutionProfile NullableMoBaseMoRelationship                          `json:"ParentSolutionProfile,omitempty"`
		SysConfig             NullableKubernetesSysConfigPolicyRelationship         `json:"SysConfig,omitempty"`
		TrustedRegistries     NullableKubernetesTrustedRegistriesPolicyRelationship `json:"TrustedRegistries,omitempty"`
		WorkflowInfo          NullableWorkflowWorkflowInfoRelationship              `json:"WorkflowInfo,omitempty"`
	}

	varKubernetesClusterProfileWithoutEmbeddedStruct := KubernetesClusterProfileWithoutEmbeddedStruct{}

	err = json.Unmarshal(data, &varKubernetesClusterProfileWithoutEmbeddedStruct)
	if err == nil {
		varKubernetesClusterProfile := _KubernetesClusterProfile{}
		varKubernetesClusterProfile.ClassId = varKubernetesClusterProfileWithoutEmbeddedStruct.ClassId
		varKubernetesClusterProfile.ObjectType = varKubernetesClusterProfileWithoutEmbeddedStruct.ObjectType
		varKubernetesClusterProfile.ActionInfo = varKubernetesClusterProfileWithoutEmbeddedStruct.ActionInfo
		varKubernetesClusterProfile.CertConfig = varKubernetesClusterProfileWithoutEmbeddedStruct.CertConfig
		varKubernetesClusterProfile.EssentialAddons = varKubernetesClusterProfileWithoutEmbeddedStruct.EssentialAddons
		varKubernetesClusterProfile.KubeConfig = varKubernetesClusterProfileWithoutEmbeddedStruct.KubeConfig
		varKubernetesClusterProfile.ManagedMode = varKubernetesClusterProfileWithoutEmbeddedStruct.ManagedMode
		varKubernetesClusterProfile.ManagementConfig = varKubernetesClusterProfileWithoutEmbeddedStruct.ManagementConfig
		varKubernetesClusterProfile.Status = varKubernetesClusterProfileWithoutEmbeddedStruct.Status
		varKubernetesClusterProfile.AciCniProfile = varKubernetesClusterProfileWithoutEmbeddedStruct.AciCniProfile
		varKubernetesClusterProfile.AssociatedCluster = varKubernetesClusterProfileWithoutEmbeddedStruct.AssociatedCluster
		varKubernetesClusterProfile.ClusterIpPools = varKubernetesClusterProfileWithoutEmbeddedStruct.ClusterIpPools
		varKubernetesClusterProfile.ContainerRuntimeConfig = varKubernetesClusterProfileWithoutEmbeddedStruct.ContainerRuntimeConfig
		varKubernetesClusterProfile.ContainerRuntimeProxyPolicy = varKubernetesClusterProfileWithoutEmbeddedStruct.ContainerRuntimeProxyPolicy
		varKubernetesClusterProfile.DeviceConnectorProxyPolicy = varKubernetesClusterProfileWithoutEmbeddedStruct.DeviceConnectorProxyPolicy
		varKubernetesClusterProfile.LoadbalancerBlockIpLeases = varKubernetesClusterProfileWithoutEmbeddedStruct.LoadbalancerBlockIpLeases
		varKubernetesClusterProfile.LoadbalancerIpLeases = varKubernetesClusterProfileWithoutEmbeddedStruct.LoadbalancerIpLeases
		varKubernetesClusterProfile.MasterVipLease = varKubernetesClusterProfileWithoutEmbeddedStruct.MasterVipLease
		varKubernetesClusterProfile.NetConfig = varKubernetesClusterProfileWithoutEmbeddedStruct.NetConfig
		varKubernetesClusterProfile.NodeGroups = varKubernetesClusterProfileWithoutEmbeddedStruct.NodeGroups
		varKubernetesClusterProfile.Organization = varKubernetesClusterProfileWithoutEmbeddedStruct.Organization
		varKubernetesClusterProfile.ParentSolutionProfile = varKubernetesClusterProfileWithoutEmbeddedStruct.ParentSolutionProfile
		varKubernetesClusterProfile.SysConfig = varKubernetesClusterProfileWithoutEmbeddedStruct.SysConfig
		varKubernetesClusterProfile.TrustedRegistries = varKubernetesClusterProfileWithoutEmbeddedStruct.TrustedRegistries
		varKubernetesClusterProfile.WorkflowInfo = varKubernetesClusterProfileWithoutEmbeddedStruct.WorkflowInfo
		*o = KubernetesClusterProfile(varKubernetesClusterProfile)
	} else {
		return err
	}

	varKubernetesClusterProfile := _KubernetesClusterProfile{}

	err = json.Unmarshal(data, &varKubernetesClusterProfile)
	if err == nil {
		o.PolicyAbstractConfigProfile = varKubernetesClusterProfile.PolicyAbstractConfigProfile
	} else {
		return err
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "ClassId")
		delete(additionalProperties, "ObjectType")
		delete(additionalProperties, "ActionInfo")
		delete(additionalProperties, "CertConfig")
		delete(additionalProperties, "EssentialAddons")
		delete(additionalProperties, "KubeConfig")
		delete(additionalProperties, "ManagedMode")
		delete(additionalProperties, "ManagementConfig")
		delete(additionalProperties, "Status")
		delete(additionalProperties, "AciCniProfile")
		delete(additionalProperties, "AssociatedCluster")
		delete(additionalProperties, "ClusterIpPools")
		delete(additionalProperties, "ContainerRuntimeConfig")
		delete(additionalProperties, "ContainerRuntimeProxyPolicy")
		delete(additionalProperties, "DeviceConnectorProxyPolicy")
		delete(additionalProperties, "LoadbalancerBlockIpLeases")
		delete(additionalProperties, "LoadbalancerIpLeases")
		delete(additionalProperties, "MasterVipLease")
		delete(additionalProperties, "NetConfig")
		delete(additionalProperties, "NodeGroups")
		delete(additionalProperties, "Organization")
		delete(additionalProperties, "ParentSolutionProfile")
		delete(additionalProperties, "SysConfig")
		delete(additionalProperties, "TrustedRegistries")
		delete(additionalProperties, "WorkflowInfo")

		// remove fields from embedded structs
		reflectPolicyAbstractConfigProfile := reflect.ValueOf(o.PolicyAbstractConfigProfile)
		for i := 0; i < reflectPolicyAbstractConfigProfile.Type().NumField(); i++ {
			t := reflectPolicyAbstractConfigProfile.Type().Field(i)

			if jsonTag := t.Tag.Get("json"); jsonTag != "" {
				fieldName := ""
				if commaIdx := strings.Index(jsonTag, ","); commaIdx > 0 {
					fieldName = jsonTag[:commaIdx]
				} else {
					fieldName = jsonTag
				}
				if fieldName != "AdditionalProperties" {
					delete(additionalProperties, fieldName)
				}
			}
		}

		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableKubernetesClusterProfile struct {
	value *KubernetesClusterProfile
	isSet bool
}

func (v NullableKubernetesClusterProfile) Get() *KubernetesClusterProfile {
	return v.value
}

func (v *NullableKubernetesClusterProfile) Set(val *KubernetesClusterProfile) {
	v.value = val
	v.isSet = true
}

func (v NullableKubernetesClusterProfile) IsSet() bool {
	return v.isSet
}

func (v *NullableKubernetesClusterProfile) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableKubernetesClusterProfile(val *KubernetesClusterProfile) *NullableKubernetesClusterProfile {
	return &NullableKubernetesClusterProfile{value: val, isSet: true}
}

func (v NullableKubernetesClusterProfile) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableKubernetesClusterProfile) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
