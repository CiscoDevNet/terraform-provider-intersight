/*
Cisco Intersight

Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations. The Intersight OpenAPI document defines the complete set of properties that are returned in the HTTP response. From that perspective, a client can expect that no additional properties are returned, unless these properties are explicitly defined in the OpenAPI document. However, when a client uses an older version of the Intersight OpenAPI document, the server may send additional properties because the software is more recent than the client. In that case, the client may receive properties that it does not know about. Some generated SDKs perform a strict validation of the HTTP response body against the OpenAPI document.

API version: 1.0.11-2024120409
Contact: intersight@cisco.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package intersight

import (
	"encoding/json"
	"fmt"
	"reflect"
	"strings"
)

// checks if the HciManagementServer type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &HciManagementServer{}

// HciManagementServer The management server of a cluster.
type HciManagementServer struct {
	MoBaseComplexType
	// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.
	ClassId string `json:"ClassId"`
	// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
	ObjectType string `json:"ObjectType"`
	// Is DRS enabled on the management server.
	DrsEnabled *bool `json:"DrsEnabled,omitempty"`
	// Indicates if the management server is in use.
	InUse *bool                `json:"InUse,omitempty"`
	Ip    NullableHciIpAddress `json:"Ip,omitempty"`
	// Is the management server registered.
	IsRegistered *bool `json:"IsRegistered,omitempty"`
	// The fully qualified domain name of the management server.
	Type                 *string `json:"Type,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _HciManagementServer HciManagementServer

// NewHciManagementServer instantiates a new HciManagementServer object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHciManagementServer(classId string, objectType string) *HciManagementServer {
	this := HciManagementServer{}
	this.ClassId = classId
	this.ObjectType = objectType
	return &this
}

// NewHciManagementServerWithDefaults instantiates a new HciManagementServer object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHciManagementServerWithDefaults() *HciManagementServer {
	this := HciManagementServer{}
	var classId string = "hci.ManagementServer"
	this.ClassId = classId
	var objectType string = "hci.ManagementServer"
	this.ObjectType = objectType
	return &this
}

// GetClassId returns the ClassId field value
func (o *HciManagementServer) GetClassId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ClassId
}

// GetClassIdOk returns a tuple with the ClassId field value
// and a boolean to check if the value has been set.
func (o *HciManagementServer) GetClassIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ClassId, true
}

// SetClassId sets field value
func (o *HciManagementServer) SetClassId(v string) {
	o.ClassId = v
}

// GetDefaultClassId returns the default value "hci.ManagementServer" of the ClassId field.
func (o *HciManagementServer) GetDefaultClassId() interface{} {
	return "hci.ManagementServer"
}

// GetObjectType returns the ObjectType field value
func (o *HciManagementServer) GetObjectType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ObjectType
}

// GetObjectTypeOk returns a tuple with the ObjectType field value
// and a boolean to check if the value has been set.
func (o *HciManagementServer) GetObjectTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ObjectType, true
}

// SetObjectType sets field value
func (o *HciManagementServer) SetObjectType(v string) {
	o.ObjectType = v
}

// GetDefaultObjectType returns the default value "hci.ManagementServer" of the ObjectType field.
func (o *HciManagementServer) GetDefaultObjectType() interface{} {
	return "hci.ManagementServer"
}

// GetDrsEnabled returns the DrsEnabled field value if set, zero value otherwise.
func (o *HciManagementServer) GetDrsEnabled() bool {
	if o == nil || IsNil(o.DrsEnabled) {
		var ret bool
		return ret
	}
	return *o.DrsEnabled
}

// GetDrsEnabledOk returns a tuple with the DrsEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HciManagementServer) GetDrsEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.DrsEnabled) {
		return nil, false
	}
	return o.DrsEnabled, true
}

// HasDrsEnabled returns a boolean if a field has been set.
func (o *HciManagementServer) HasDrsEnabled() bool {
	if o != nil && !IsNil(o.DrsEnabled) {
		return true
	}

	return false
}

// SetDrsEnabled gets a reference to the given bool and assigns it to the DrsEnabled field.
func (o *HciManagementServer) SetDrsEnabled(v bool) {
	o.DrsEnabled = &v
}

// GetInUse returns the InUse field value if set, zero value otherwise.
func (o *HciManagementServer) GetInUse() bool {
	if o == nil || IsNil(o.InUse) {
		var ret bool
		return ret
	}
	return *o.InUse
}

// GetInUseOk returns a tuple with the InUse field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HciManagementServer) GetInUseOk() (*bool, bool) {
	if o == nil || IsNil(o.InUse) {
		return nil, false
	}
	return o.InUse, true
}

// HasInUse returns a boolean if a field has been set.
func (o *HciManagementServer) HasInUse() bool {
	if o != nil && !IsNil(o.InUse) {
		return true
	}

	return false
}

// SetInUse gets a reference to the given bool and assigns it to the InUse field.
func (o *HciManagementServer) SetInUse(v bool) {
	o.InUse = &v
}

// GetIp returns the Ip field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HciManagementServer) GetIp() HciIpAddress {
	if o == nil || IsNil(o.Ip.Get()) {
		var ret HciIpAddress
		return ret
	}
	return *o.Ip.Get()
}

// GetIpOk returns a tuple with the Ip field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HciManagementServer) GetIpOk() (*HciIpAddress, bool) {
	if o == nil {
		return nil, false
	}
	return o.Ip.Get(), o.Ip.IsSet()
}

// HasIp returns a boolean if a field has been set.
func (o *HciManagementServer) HasIp() bool {
	if o != nil && o.Ip.IsSet() {
		return true
	}

	return false
}

// SetIp gets a reference to the given NullableHciIpAddress and assigns it to the Ip field.
func (o *HciManagementServer) SetIp(v HciIpAddress) {
	o.Ip.Set(&v)
}

// SetIpNil sets the value for Ip to be an explicit nil
func (o *HciManagementServer) SetIpNil() {
	o.Ip.Set(nil)
}

// UnsetIp ensures that no value is present for Ip, not even an explicit nil
func (o *HciManagementServer) UnsetIp() {
	o.Ip.Unset()
}

// GetIsRegistered returns the IsRegistered field value if set, zero value otherwise.
func (o *HciManagementServer) GetIsRegistered() bool {
	if o == nil || IsNil(o.IsRegistered) {
		var ret bool
		return ret
	}
	return *o.IsRegistered
}

// GetIsRegisteredOk returns a tuple with the IsRegistered field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HciManagementServer) GetIsRegisteredOk() (*bool, bool) {
	if o == nil || IsNil(o.IsRegistered) {
		return nil, false
	}
	return o.IsRegistered, true
}

// HasIsRegistered returns a boolean if a field has been set.
func (o *HciManagementServer) HasIsRegistered() bool {
	if o != nil && !IsNil(o.IsRegistered) {
		return true
	}

	return false
}

// SetIsRegistered gets a reference to the given bool and assigns it to the IsRegistered field.
func (o *HciManagementServer) SetIsRegistered(v bool) {
	o.IsRegistered = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *HciManagementServer) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HciManagementServer) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *HciManagementServer) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *HciManagementServer) SetType(v string) {
	o.Type = &v
}

func (o HciManagementServer) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o HciManagementServer) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	serializedMoBaseComplexType, errMoBaseComplexType := json.Marshal(o.MoBaseComplexType)
	if errMoBaseComplexType != nil {
		return map[string]interface{}{}, errMoBaseComplexType
	}
	errMoBaseComplexType = json.Unmarshal([]byte(serializedMoBaseComplexType), &toSerialize)
	if errMoBaseComplexType != nil {
		return map[string]interface{}{}, errMoBaseComplexType
	}
	if _, exists := toSerialize["ClassId"]; !exists {
		toSerialize["ClassId"] = o.GetDefaultClassId()
	}
	toSerialize["ClassId"] = o.ClassId
	if _, exists := toSerialize["ObjectType"]; !exists {
		toSerialize["ObjectType"] = o.GetDefaultObjectType()
	}
	toSerialize["ObjectType"] = o.ObjectType
	if !IsNil(o.DrsEnabled) {
		toSerialize["DrsEnabled"] = o.DrsEnabled
	}
	if !IsNil(o.InUse) {
		toSerialize["InUse"] = o.InUse
	}
	if o.Ip.IsSet() {
		toSerialize["Ip"] = o.Ip.Get()
	}
	if !IsNil(o.IsRegistered) {
		toSerialize["IsRegistered"] = o.IsRegistered
	}
	if !IsNil(o.Type) {
		toSerialize["Type"] = o.Type
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *HciManagementServer) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"ClassId",
		"ObjectType",
	}

	// defaultValueFuncMap captures the default values for required properties.
	// These values are used when required properties are missing from the payload.
	defaultValueFuncMap := map[string]func() interface{}{
		"ClassId":    o.GetDefaultClassId,
		"ObjectType": o.GetDefaultObjectType,
	}
	var defaultValueApplied bool
	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			if _, ok := defaultValueFuncMap[requiredProperty]; ok {
				allProperties[requiredProperty] = defaultValueFuncMap[requiredProperty]()
				defaultValueApplied = true
			}
		}
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	if defaultValueApplied {
		data, err = json.Marshal(allProperties)
		if err != nil {
			return err
		}
	}
	type HciManagementServerWithoutEmbeddedStruct struct {
		// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.
		ClassId string `json:"ClassId"`
		// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
		ObjectType string `json:"ObjectType"`
		// Is DRS enabled on the management server.
		DrsEnabled *bool `json:"DrsEnabled,omitempty"`
		// Indicates if the management server is in use.
		InUse *bool                `json:"InUse,omitempty"`
		Ip    NullableHciIpAddress `json:"Ip,omitempty"`
		// Is the management server registered.
		IsRegistered *bool `json:"IsRegistered,omitempty"`
		// The fully qualified domain name of the management server.
		Type *string `json:"Type,omitempty"`
	}

	varHciManagementServerWithoutEmbeddedStruct := HciManagementServerWithoutEmbeddedStruct{}

	err = json.Unmarshal(data, &varHciManagementServerWithoutEmbeddedStruct)
	if err == nil {
		varHciManagementServer := _HciManagementServer{}
		varHciManagementServer.ClassId = varHciManagementServerWithoutEmbeddedStruct.ClassId
		varHciManagementServer.ObjectType = varHciManagementServerWithoutEmbeddedStruct.ObjectType
		varHciManagementServer.DrsEnabled = varHciManagementServerWithoutEmbeddedStruct.DrsEnabled
		varHciManagementServer.InUse = varHciManagementServerWithoutEmbeddedStruct.InUse
		varHciManagementServer.Ip = varHciManagementServerWithoutEmbeddedStruct.Ip
		varHciManagementServer.IsRegistered = varHciManagementServerWithoutEmbeddedStruct.IsRegistered
		varHciManagementServer.Type = varHciManagementServerWithoutEmbeddedStruct.Type
		*o = HciManagementServer(varHciManagementServer)
	} else {
		return err
	}

	varHciManagementServer := _HciManagementServer{}

	err = json.Unmarshal(data, &varHciManagementServer)
	if err == nil {
		o.MoBaseComplexType = varHciManagementServer.MoBaseComplexType
	} else {
		return err
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "ClassId")
		delete(additionalProperties, "ObjectType")
		delete(additionalProperties, "DrsEnabled")
		delete(additionalProperties, "InUse")
		delete(additionalProperties, "Ip")
		delete(additionalProperties, "IsRegistered")
		delete(additionalProperties, "Type")

		// remove fields from embedded structs
		reflectMoBaseComplexType := reflect.ValueOf(o.MoBaseComplexType)
		for i := 0; i < reflectMoBaseComplexType.Type().NumField(); i++ {
			t := reflectMoBaseComplexType.Type().Field(i)

			if jsonTag := t.Tag.Get("json"); jsonTag != "" {
				fieldName := ""
				if commaIdx := strings.Index(jsonTag, ","); commaIdx > 0 {
					fieldName = jsonTag[:commaIdx]
				} else {
					fieldName = jsonTag
				}
				if fieldName != "AdditionalProperties" {
					delete(additionalProperties, fieldName)
				}
			}
		}

		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableHciManagementServer struct {
	value *HciManagementServer
	isSet bool
}

func (v NullableHciManagementServer) Get() *HciManagementServer {
	return v.value
}

func (v *NullableHciManagementServer) Set(val *HciManagementServer) {
	v.value = val
	v.isSet = true
}

func (v NullableHciManagementServer) IsSet() bool {
	return v.isSet
}

func (v *NullableHciManagementServer) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHciManagementServer(val *HciManagementServer) *NullableHciManagementServer {
	return &NullableHciManagementServer{value: val, isSet: true}
}

func (v NullableHciManagementServer) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHciManagementServer) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
