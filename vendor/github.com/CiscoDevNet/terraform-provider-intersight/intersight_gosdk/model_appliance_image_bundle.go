/*
 * Cisco Intersight
 *
 * Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations. The Intersight OpenAPI document defines the complete set of properties that are returned in the HTTP response. From that perspective, a client can expect that no additional properties are returned, unless these properties are explicitly defined in the OpenAPI document. However, when a client uses an older version of the Intersight OpenAPI document, the server may send additional properties because the software is more recent than the client. In that case, the client may receive properties that it does not know about. Some generated SDKs perform a strict validation of the HTTP response body against the OpenAPI document. This document was created on 2021-07-21T16:37:30Z.
 *
 * API version: 1.0.9-4403
 * Contact: intersight@cisco.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package intersight

import (
	"encoding/json"
	"reflect"
	"strings"
	"time"
)

// ApplianceImageBundle ImageBundle keeps track of all the software bundles installed in the Intersight Appliances. Each ImageBundle managed object is derived from a software upgrade manifest. ImageBundle has additional properties computed during the manifest processing. Additional properties are the dynamic attributes of the software packages declared in the software manifest. For example, SHA256 values of the software packages are computed during the software manifest processing. An ImageBundle managed object named 'current' is always present in the Intersight Appliance. The software upgrade service creates another ImageBundle managed object named 'pending' when there is a pending software upgrade. The upgrade service renames the 'pending' bundle to the 'current' bundle after the software upgrade is successful.
type ApplianceImageBundle struct {
	MoBaseMo
	// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.
	ClassId string `json:"ClassId"`
	// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
	ObjectType      string               `json:"ObjectType"`
	AnsiblePackages []OnpremImagePackage `json:"AnsiblePackages,omitempty"`
	// Indicates that the software upgrade was automatically initiated by the Intersight Appliance.
	AutoUpgrade   *bool                `json:"AutoUpgrade,omitempty"`
	DcPackages    []OnpremImagePackage `json:"DcPackages,omitempty"`
	DebugPackages []OnpremImagePackage `json:"DebugPackages,omitempty"`
	// Short description of the software upgrade bundle.
	Description      *string              `json:"Description,omitempty"`
	EndpointPackages []OnpremImagePackage `json:"EndpointPackages,omitempty"`
	// Fingerprint of the software manifest from which this bundle is created. Fingerprint is calculated using the SHA256 algorithm.
	Fingerprint *string `json:"Fingerprint,omitempty"`
	// Indicates that the ImageBundle has errors. The upgrade service sets this field when it encounters errors during the manifest processing.
	HasError      *bool                `json:"HasError,omitempty"`
	InfraPackages []OnpremImagePackage `json:"InfraPackages,omitempty"`
	InitPackages  []OnpremImagePackage `json:"InitPackages,omitempty"`
	// Name of the software upgrade bundle.
	Name *string `json:"Name,omitempty"`
	// Detailed description of the software upgrade bundle.
	Notes *string `json:"Notes,omitempty"`
	// Software upgrade manifest's upgrade priority. The upgrade service supports two priorities, Normal and Critical. Normal priority is used for regular software upgrades, and the upgrade service uses the Upgrade Policy to compute upgrade start time. Critical priority is used for the critical software security patches, and the upgrade service ignores the Upgrade Policy when it computes the upgrade start time. * `Normal` - Normal upgrade priority is used for all the software upgrades except for the critical security updates. The upgrade service of Intersight Appliance uses the Software Upgrade Policy settings to start the upgrade process. * `Critical` - Critical upgrade priority is used for critical updates such as security patches. The upgrade service of the Intersight Appliance starts the upgrade as specified by the upgrade properties in the software manifest file. The upgrade service will not use the settings specified in the Software Upgrade Policy.
	Priority *string `json:"Priority,omitempty"`
	// Software upgrade manifest's release date and time.
	ReleaseTime     *time.Time           `json:"ReleaseTime,omitempty"`
	ServicePackages []OnpremImagePackage `json:"ServicePackages,omitempty"`
	// Status message set during the manifest processing.
	StatusMessage  *string              `json:"StatusMessage,omitempty"`
	SystemPackages []OnpremImagePackage `json:"SystemPackages,omitempty"`
	UiPackages     []OnpremImagePackage `json:"UiPackages,omitempty"`
	// End date of the software upgrade process.
	UpgradeEndTime *time.Time `json:"UpgradeEndTime,omitempty"`
	// Grace period in seconds before the automatic upgrade is initiated. The upgrade service uses the grace period to compute the upgrade start time when it receives an upgrade notfication from the Intersight. If there is an Upgrade Policy configured for the Intersight Appliance, then the upgrade service uses the policy to compute the upgrade start time. However, the upgrade start time cannot not exceed the limit enforced by the grace period.
	UpgradeGracePeriod *int64 `json:"UpgradeGracePeriod,omitempty"`
	// Duration (in minutes) for which services will be disrupted.
	UpgradeImpactDuration *int64 `json:"UpgradeImpactDuration,omitempty"`
	// UpgradeImpactEnum is used to indicate the kind of impact the upgrade has on currently running services on the appliance. * `None` - The upgrade has no effect on the system. * `Disruptive` - The services will not be functional during the upgrade. * `Disruptive-reboot` - The upgrade needs a reboot.
	UpgradeImpactEnum *string `json:"UpgradeImpactEnum,omitempty"`
	// Start date of the software upgrade process.
	UpgradeStartTime *time.Time `json:"UpgradeStartTime,omitempty"`
	// Software upgrade manifest's version.
	Version              *string `json:"Version,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ApplianceImageBundle ApplianceImageBundle

// NewApplianceImageBundle instantiates a new ApplianceImageBundle object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApplianceImageBundle(classId string, objectType string) *ApplianceImageBundle {
	this := ApplianceImageBundle{}
	this.ClassId = classId
	this.ObjectType = objectType
	var priority string = "Normal"
	this.Priority = &priority
	var upgradeImpactDuration int64 = 0
	this.UpgradeImpactDuration = &upgradeImpactDuration
	var upgradeImpactEnum string = "None"
	this.UpgradeImpactEnum = &upgradeImpactEnum
	return &this
}

// NewApplianceImageBundleWithDefaults instantiates a new ApplianceImageBundle object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApplianceImageBundleWithDefaults() *ApplianceImageBundle {
	this := ApplianceImageBundle{}
	var classId string = "appliance.ImageBundle"
	this.ClassId = classId
	var objectType string = "appliance.ImageBundle"
	this.ObjectType = objectType
	var priority string = "Normal"
	this.Priority = &priority
	var upgradeImpactDuration int64 = 0
	this.UpgradeImpactDuration = &upgradeImpactDuration
	var upgradeImpactEnum string = "None"
	this.UpgradeImpactEnum = &upgradeImpactEnum
	return &this
}

// GetClassId returns the ClassId field value
func (o *ApplianceImageBundle) GetClassId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ClassId
}

// GetClassIdOk returns a tuple with the ClassId field value
// and a boolean to check if the value has been set.
func (o *ApplianceImageBundle) GetClassIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ClassId, true
}

// SetClassId sets field value
func (o *ApplianceImageBundle) SetClassId(v string) {
	o.ClassId = v
}

// GetObjectType returns the ObjectType field value
func (o *ApplianceImageBundle) GetObjectType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ObjectType
}

// GetObjectTypeOk returns a tuple with the ObjectType field value
// and a boolean to check if the value has been set.
func (o *ApplianceImageBundle) GetObjectTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ObjectType, true
}

// SetObjectType sets field value
func (o *ApplianceImageBundle) SetObjectType(v string) {
	o.ObjectType = v
}

// GetAnsiblePackages returns the AnsiblePackages field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ApplianceImageBundle) GetAnsiblePackages() []OnpremImagePackage {
	if o == nil {
		var ret []OnpremImagePackage
		return ret
	}
	return o.AnsiblePackages
}

// GetAnsiblePackagesOk returns a tuple with the AnsiblePackages field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ApplianceImageBundle) GetAnsiblePackagesOk() (*[]OnpremImagePackage, bool) {
	if o == nil || o.AnsiblePackages == nil {
		return nil, false
	}
	return &o.AnsiblePackages, true
}

// HasAnsiblePackages returns a boolean if a field has been set.
func (o *ApplianceImageBundle) HasAnsiblePackages() bool {
	if o != nil && o.AnsiblePackages != nil {
		return true
	}

	return false
}

// SetAnsiblePackages gets a reference to the given []OnpremImagePackage and assigns it to the AnsiblePackages field.
func (o *ApplianceImageBundle) SetAnsiblePackages(v []OnpremImagePackage) {
	o.AnsiblePackages = v
}

// GetAutoUpgrade returns the AutoUpgrade field value if set, zero value otherwise.
func (o *ApplianceImageBundle) GetAutoUpgrade() bool {
	if o == nil || o.AutoUpgrade == nil {
		var ret bool
		return ret
	}
	return *o.AutoUpgrade
}

// GetAutoUpgradeOk returns a tuple with the AutoUpgrade field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplianceImageBundle) GetAutoUpgradeOk() (*bool, bool) {
	if o == nil || o.AutoUpgrade == nil {
		return nil, false
	}
	return o.AutoUpgrade, true
}

// HasAutoUpgrade returns a boolean if a field has been set.
func (o *ApplianceImageBundle) HasAutoUpgrade() bool {
	if o != nil && o.AutoUpgrade != nil {
		return true
	}

	return false
}

// SetAutoUpgrade gets a reference to the given bool and assigns it to the AutoUpgrade field.
func (o *ApplianceImageBundle) SetAutoUpgrade(v bool) {
	o.AutoUpgrade = &v
}

// GetDcPackages returns the DcPackages field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ApplianceImageBundle) GetDcPackages() []OnpremImagePackage {
	if o == nil {
		var ret []OnpremImagePackage
		return ret
	}
	return o.DcPackages
}

// GetDcPackagesOk returns a tuple with the DcPackages field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ApplianceImageBundle) GetDcPackagesOk() (*[]OnpremImagePackage, bool) {
	if o == nil || o.DcPackages == nil {
		return nil, false
	}
	return &o.DcPackages, true
}

// HasDcPackages returns a boolean if a field has been set.
func (o *ApplianceImageBundle) HasDcPackages() bool {
	if o != nil && o.DcPackages != nil {
		return true
	}

	return false
}

// SetDcPackages gets a reference to the given []OnpremImagePackage and assigns it to the DcPackages field.
func (o *ApplianceImageBundle) SetDcPackages(v []OnpremImagePackage) {
	o.DcPackages = v
}

// GetDebugPackages returns the DebugPackages field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ApplianceImageBundle) GetDebugPackages() []OnpremImagePackage {
	if o == nil {
		var ret []OnpremImagePackage
		return ret
	}
	return o.DebugPackages
}

// GetDebugPackagesOk returns a tuple with the DebugPackages field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ApplianceImageBundle) GetDebugPackagesOk() (*[]OnpremImagePackage, bool) {
	if o == nil || o.DebugPackages == nil {
		return nil, false
	}
	return &o.DebugPackages, true
}

// HasDebugPackages returns a boolean if a field has been set.
func (o *ApplianceImageBundle) HasDebugPackages() bool {
	if o != nil && o.DebugPackages != nil {
		return true
	}

	return false
}

// SetDebugPackages gets a reference to the given []OnpremImagePackage and assigns it to the DebugPackages field.
func (o *ApplianceImageBundle) SetDebugPackages(v []OnpremImagePackage) {
	o.DebugPackages = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *ApplianceImageBundle) GetDescription() string {
	if o == nil || o.Description == nil {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplianceImageBundle) GetDescriptionOk() (*string, bool) {
	if o == nil || o.Description == nil {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *ApplianceImageBundle) HasDescription() bool {
	if o != nil && o.Description != nil {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *ApplianceImageBundle) SetDescription(v string) {
	o.Description = &v
}

// GetEndpointPackages returns the EndpointPackages field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ApplianceImageBundle) GetEndpointPackages() []OnpremImagePackage {
	if o == nil {
		var ret []OnpremImagePackage
		return ret
	}
	return o.EndpointPackages
}

// GetEndpointPackagesOk returns a tuple with the EndpointPackages field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ApplianceImageBundle) GetEndpointPackagesOk() (*[]OnpremImagePackage, bool) {
	if o == nil || o.EndpointPackages == nil {
		return nil, false
	}
	return &o.EndpointPackages, true
}

// HasEndpointPackages returns a boolean if a field has been set.
func (o *ApplianceImageBundle) HasEndpointPackages() bool {
	if o != nil && o.EndpointPackages != nil {
		return true
	}

	return false
}

// SetEndpointPackages gets a reference to the given []OnpremImagePackage and assigns it to the EndpointPackages field.
func (o *ApplianceImageBundle) SetEndpointPackages(v []OnpremImagePackage) {
	o.EndpointPackages = v
}

// GetFingerprint returns the Fingerprint field value if set, zero value otherwise.
func (o *ApplianceImageBundle) GetFingerprint() string {
	if o == nil || o.Fingerprint == nil {
		var ret string
		return ret
	}
	return *o.Fingerprint
}

// GetFingerprintOk returns a tuple with the Fingerprint field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplianceImageBundle) GetFingerprintOk() (*string, bool) {
	if o == nil || o.Fingerprint == nil {
		return nil, false
	}
	return o.Fingerprint, true
}

// HasFingerprint returns a boolean if a field has been set.
func (o *ApplianceImageBundle) HasFingerprint() bool {
	if o != nil && o.Fingerprint != nil {
		return true
	}

	return false
}

// SetFingerprint gets a reference to the given string and assigns it to the Fingerprint field.
func (o *ApplianceImageBundle) SetFingerprint(v string) {
	o.Fingerprint = &v
}

// GetHasError returns the HasError field value if set, zero value otherwise.
func (o *ApplianceImageBundle) GetHasError() bool {
	if o == nil || o.HasError == nil {
		var ret bool
		return ret
	}
	return *o.HasError
}

// GetHasErrorOk returns a tuple with the HasError field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplianceImageBundle) GetHasErrorOk() (*bool, bool) {
	if o == nil || o.HasError == nil {
		return nil, false
	}
	return o.HasError, true
}

// HasHasError returns a boolean if a field has been set.
func (o *ApplianceImageBundle) HasHasError() bool {
	if o != nil && o.HasError != nil {
		return true
	}

	return false
}

// SetHasError gets a reference to the given bool and assigns it to the HasError field.
func (o *ApplianceImageBundle) SetHasError(v bool) {
	o.HasError = &v
}

// GetInfraPackages returns the InfraPackages field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ApplianceImageBundle) GetInfraPackages() []OnpremImagePackage {
	if o == nil {
		var ret []OnpremImagePackage
		return ret
	}
	return o.InfraPackages
}

// GetInfraPackagesOk returns a tuple with the InfraPackages field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ApplianceImageBundle) GetInfraPackagesOk() (*[]OnpremImagePackage, bool) {
	if o == nil || o.InfraPackages == nil {
		return nil, false
	}
	return &o.InfraPackages, true
}

// HasInfraPackages returns a boolean if a field has been set.
func (o *ApplianceImageBundle) HasInfraPackages() bool {
	if o != nil && o.InfraPackages != nil {
		return true
	}

	return false
}

// SetInfraPackages gets a reference to the given []OnpremImagePackage and assigns it to the InfraPackages field.
func (o *ApplianceImageBundle) SetInfraPackages(v []OnpremImagePackage) {
	o.InfraPackages = v
}

// GetInitPackages returns the InitPackages field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ApplianceImageBundle) GetInitPackages() []OnpremImagePackage {
	if o == nil {
		var ret []OnpremImagePackage
		return ret
	}
	return o.InitPackages
}

// GetInitPackagesOk returns a tuple with the InitPackages field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ApplianceImageBundle) GetInitPackagesOk() (*[]OnpremImagePackage, bool) {
	if o == nil || o.InitPackages == nil {
		return nil, false
	}
	return &o.InitPackages, true
}

// HasInitPackages returns a boolean if a field has been set.
func (o *ApplianceImageBundle) HasInitPackages() bool {
	if o != nil && o.InitPackages != nil {
		return true
	}

	return false
}

// SetInitPackages gets a reference to the given []OnpremImagePackage and assigns it to the InitPackages field.
func (o *ApplianceImageBundle) SetInitPackages(v []OnpremImagePackage) {
	o.InitPackages = v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ApplianceImageBundle) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplianceImageBundle) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ApplianceImageBundle) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *ApplianceImageBundle) SetName(v string) {
	o.Name = &v
}

// GetNotes returns the Notes field value if set, zero value otherwise.
func (o *ApplianceImageBundle) GetNotes() string {
	if o == nil || o.Notes == nil {
		var ret string
		return ret
	}
	return *o.Notes
}

// GetNotesOk returns a tuple with the Notes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplianceImageBundle) GetNotesOk() (*string, bool) {
	if o == nil || o.Notes == nil {
		return nil, false
	}
	return o.Notes, true
}

// HasNotes returns a boolean if a field has been set.
func (o *ApplianceImageBundle) HasNotes() bool {
	if o != nil && o.Notes != nil {
		return true
	}

	return false
}

// SetNotes gets a reference to the given string and assigns it to the Notes field.
func (o *ApplianceImageBundle) SetNotes(v string) {
	o.Notes = &v
}

// GetPriority returns the Priority field value if set, zero value otherwise.
func (o *ApplianceImageBundle) GetPriority() string {
	if o == nil || o.Priority == nil {
		var ret string
		return ret
	}
	return *o.Priority
}

// GetPriorityOk returns a tuple with the Priority field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplianceImageBundle) GetPriorityOk() (*string, bool) {
	if o == nil || o.Priority == nil {
		return nil, false
	}
	return o.Priority, true
}

// HasPriority returns a boolean if a field has been set.
func (o *ApplianceImageBundle) HasPriority() bool {
	if o != nil && o.Priority != nil {
		return true
	}

	return false
}

// SetPriority gets a reference to the given string and assigns it to the Priority field.
func (o *ApplianceImageBundle) SetPriority(v string) {
	o.Priority = &v
}

// GetReleaseTime returns the ReleaseTime field value if set, zero value otherwise.
func (o *ApplianceImageBundle) GetReleaseTime() time.Time {
	if o == nil || o.ReleaseTime == nil {
		var ret time.Time
		return ret
	}
	return *o.ReleaseTime
}

// GetReleaseTimeOk returns a tuple with the ReleaseTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplianceImageBundle) GetReleaseTimeOk() (*time.Time, bool) {
	if o == nil || o.ReleaseTime == nil {
		return nil, false
	}
	return o.ReleaseTime, true
}

// HasReleaseTime returns a boolean if a field has been set.
func (o *ApplianceImageBundle) HasReleaseTime() bool {
	if o != nil && o.ReleaseTime != nil {
		return true
	}

	return false
}

// SetReleaseTime gets a reference to the given time.Time and assigns it to the ReleaseTime field.
func (o *ApplianceImageBundle) SetReleaseTime(v time.Time) {
	o.ReleaseTime = &v
}

// GetServicePackages returns the ServicePackages field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ApplianceImageBundle) GetServicePackages() []OnpremImagePackage {
	if o == nil {
		var ret []OnpremImagePackage
		return ret
	}
	return o.ServicePackages
}

// GetServicePackagesOk returns a tuple with the ServicePackages field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ApplianceImageBundle) GetServicePackagesOk() (*[]OnpremImagePackage, bool) {
	if o == nil || o.ServicePackages == nil {
		return nil, false
	}
	return &o.ServicePackages, true
}

// HasServicePackages returns a boolean if a field has been set.
func (o *ApplianceImageBundle) HasServicePackages() bool {
	if o != nil && o.ServicePackages != nil {
		return true
	}

	return false
}

// SetServicePackages gets a reference to the given []OnpremImagePackage and assigns it to the ServicePackages field.
func (o *ApplianceImageBundle) SetServicePackages(v []OnpremImagePackage) {
	o.ServicePackages = v
}

// GetStatusMessage returns the StatusMessage field value if set, zero value otherwise.
func (o *ApplianceImageBundle) GetStatusMessage() string {
	if o == nil || o.StatusMessage == nil {
		var ret string
		return ret
	}
	return *o.StatusMessage
}

// GetStatusMessageOk returns a tuple with the StatusMessage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplianceImageBundle) GetStatusMessageOk() (*string, bool) {
	if o == nil || o.StatusMessage == nil {
		return nil, false
	}
	return o.StatusMessage, true
}

// HasStatusMessage returns a boolean if a field has been set.
func (o *ApplianceImageBundle) HasStatusMessage() bool {
	if o != nil && o.StatusMessage != nil {
		return true
	}

	return false
}

// SetStatusMessage gets a reference to the given string and assigns it to the StatusMessage field.
func (o *ApplianceImageBundle) SetStatusMessage(v string) {
	o.StatusMessage = &v
}

// GetSystemPackages returns the SystemPackages field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ApplianceImageBundle) GetSystemPackages() []OnpremImagePackage {
	if o == nil {
		var ret []OnpremImagePackage
		return ret
	}
	return o.SystemPackages
}

// GetSystemPackagesOk returns a tuple with the SystemPackages field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ApplianceImageBundle) GetSystemPackagesOk() (*[]OnpremImagePackage, bool) {
	if o == nil || o.SystemPackages == nil {
		return nil, false
	}
	return &o.SystemPackages, true
}

// HasSystemPackages returns a boolean if a field has been set.
func (o *ApplianceImageBundle) HasSystemPackages() bool {
	if o != nil && o.SystemPackages != nil {
		return true
	}

	return false
}

// SetSystemPackages gets a reference to the given []OnpremImagePackage and assigns it to the SystemPackages field.
func (o *ApplianceImageBundle) SetSystemPackages(v []OnpremImagePackage) {
	o.SystemPackages = v
}

// GetUiPackages returns the UiPackages field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ApplianceImageBundle) GetUiPackages() []OnpremImagePackage {
	if o == nil {
		var ret []OnpremImagePackage
		return ret
	}
	return o.UiPackages
}

// GetUiPackagesOk returns a tuple with the UiPackages field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ApplianceImageBundle) GetUiPackagesOk() (*[]OnpremImagePackage, bool) {
	if o == nil || o.UiPackages == nil {
		return nil, false
	}
	return &o.UiPackages, true
}

// HasUiPackages returns a boolean if a field has been set.
func (o *ApplianceImageBundle) HasUiPackages() bool {
	if o != nil && o.UiPackages != nil {
		return true
	}

	return false
}

// SetUiPackages gets a reference to the given []OnpremImagePackage and assigns it to the UiPackages field.
func (o *ApplianceImageBundle) SetUiPackages(v []OnpremImagePackage) {
	o.UiPackages = v
}

// GetUpgradeEndTime returns the UpgradeEndTime field value if set, zero value otherwise.
func (o *ApplianceImageBundle) GetUpgradeEndTime() time.Time {
	if o == nil || o.UpgradeEndTime == nil {
		var ret time.Time
		return ret
	}
	return *o.UpgradeEndTime
}

// GetUpgradeEndTimeOk returns a tuple with the UpgradeEndTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplianceImageBundle) GetUpgradeEndTimeOk() (*time.Time, bool) {
	if o == nil || o.UpgradeEndTime == nil {
		return nil, false
	}
	return o.UpgradeEndTime, true
}

// HasUpgradeEndTime returns a boolean if a field has been set.
func (o *ApplianceImageBundle) HasUpgradeEndTime() bool {
	if o != nil && o.UpgradeEndTime != nil {
		return true
	}

	return false
}

// SetUpgradeEndTime gets a reference to the given time.Time and assigns it to the UpgradeEndTime field.
func (o *ApplianceImageBundle) SetUpgradeEndTime(v time.Time) {
	o.UpgradeEndTime = &v
}

// GetUpgradeGracePeriod returns the UpgradeGracePeriod field value if set, zero value otherwise.
func (o *ApplianceImageBundle) GetUpgradeGracePeriod() int64 {
	if o == nil || o.UpgradeGracePeriod == nil {
		var ret int64
		return ret
	}
	return *o.UpgradeGracePeriod
}

// GetUpgradeGracePeriodOk returns a tuple with the UpgradeGracePeriod field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplianceImageBundle) GetUpgradeGracePeriodOk() (*int64, bool) {
	if o == nil || o.UpgradeGracePeriod == nil {
		return nil, false
	}
	return o.UpgradeGracePeriod, true
}

// HasUpgradeGracePeriod returns a boolean if a field has been set.
func (o *ApplianceImageBundle) HasUpgradeGracePeriod() bool {
	if o != nil && o.UpgradeGracePeriod != nil {
		return true
	}

	return false
}

// SetUpgradeGracePeriod gets a reference to the given int64 and assigns it to the UpgradeGracePeriod field.
func (o *ApplianceImageBundle) SetUpgradeGracePeriod(v int64) {
	o.UpgradeGracePeriod = &v
}

// GetUpgradeImpactDuration returns the UpgradeImpactDuration field value if set, zero value otherwise.
func (o *ApplianceImageBundle) GetUpgradeImpactDuration() int64 {
	if o == nil || o.UpgradeImpactDuration == nil {
		var ret int64
		return ret
	}
	return *o.UpgradeImpactDuration
}

// GetUpgradeImpactDurationOk returns a tuple with the UpgradeImpactDuration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplianceImageBundle) GetUpgradeImpactDurationOk() (*int64, bool) {
	if o == nil || o.UpgradeImpactDuration == nil {
		return nil, false
	}
	return o.UpgradeImpactDuration, true
}

// HasUpgradeImpactDuration returns a boolean if a field has been set.
func (o *ApplianceImageBundle) HasUpgradeImpactDuration() bool {
	if o != nil && o.UpgradeImpactDuration != nil {
		return true
	}

	return false
}

// SetUpgradeImpactDuration gets a reference to the given int64 and assigns it to the UpgradeImpactDuration field.
func (o *ApplianceImageBundle) SetUpgradeImpactDuration(v int64) {
	o.UpgradeImpactDuration = &v
}

// GetUpgradeImpactEnum returns the UpgradeImpactEnum field value if set, zero value otherwise.
func (o *ApplianceImageBundle) GetUpgradeImpactEnum() string {
	if o == nil || o.UpgradeImpactEnum == nil {
		var ret string
		return ret
	}
	return *o.UpgradeImpactEnum
}

// GetUpgradeImpactEnumOk returns a tuple with the UpgradeImpactEnum field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplianceImageBundle) GetUpgradeImpactEnumOk() (*string, bool) {
	if o == nil || o.UpgradeImpactEnum == nil {
		return nil, false
	}
	return o.UpgradeImpactEnum, true
}

// HasUpgradeImpactEnum returns a boolean if a field has been set.
func (o *ApplianceImageBundle) HasUpgradeImpactEnum() bool {
	if o != nil && o.UpgradeImpactEnum != nil {
		return true
	}

	return false
}

// SetUpgradeImpactEnum gets a reference to the given string and assigns it to the UpgradeImpactEnum field.
func (o *ApplianceImageBundle) SetUpgradeImpactEnum(v string) {
	o.UpgradeImpactEnum = &v
}

// GetUpgradeStartTime returns the UpgradeStartTime field value if set, zero value otherwise.
func (o *ApplianceImageBundle) GetUpgradeStartTime() time.Time {
	if o == nil || o.UpgradeStartTime == nil {
		var ret time.Time
		return ret
	}
	return *o.UpgradeStartTime
}

// GetUpgradeStartTimeOk returns a tuple with the UpgradeStartTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplianceImageBundle) GetUpgradeStartTimeOk() (*time.Time, bool) {
	if o == nil || o.UpgradeStartTime == nil {
		return nil, false
	}
	return o.UpgradeStartTime, true
}

// HasUpgradeStartTime returns a boolean if a field has been set.
func (o *ApplianceImageBundle) HasUpgradeStartTime() bool {
	if o != nil && o.UpgradeStartTime != nil {
		return true
	}

	return false
}

// SetUpgradeStartTime gets a reference to the given time.Time and assigns it to the UpgradeStartTime field.
func (o *ApplianceImageBundle) SetUpgradeStartTime(v time.Time) {
	o.UpgradeStartTime = &v
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *ApplianceImageBundle) GetVersion() string {
	if o == nil || o.Version == nil {
		var ret string
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplianceImageBundle) GetVersionOk() (*string, bool) {
	if o == nil || o.Version == nil {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *ApplianceImageBundle) HasVersion() bool {
	if o != nil && o.Version != nil {
		return true
	}

	return false
}

// SetVersion gets a reference to the given string and assigns it to the Version field.
func (o *ApplianceImageBundle) SetVersion(v string) {
	o.Version = &v
}

func (o ApplianceImageBundle) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	serializedMoBaseMo, errMoBaseMo := json.Marshal(o.MoBaseMo)
	if errMoBaseMo != nil {
		return []byte{}, errMoBaseMo
	}
	errMoBaseMo = json.Unmarshal([]byte(serializedMoBaseMo), &toSerialize)
	if errMoBaseMo != nil {
		return []byte{}, errMoBaseMo
	}
	if true {
		toSerialize["ClassId"] = o.ClassId
	}
	if true {
		toSerialize["ObjectType"] = o.ObjectType
	}
	if o.AnsiblePackages != nil {
		toSerialize["AnsiblePackages"] = o.AnsiblePackages
	}
	if o.AutoUpgrade != nil {
		toSerialize["AutoUpgrade"] = o.AutoUpgrade
	}
	if o.DcPackages != nil {
		toSerialize["DcPackages"] = o.DcPackages
	}
	if o.DebugPackages != nil {
		toSerialize["DebugPackages"] = o.DebugPackages
	}
	if o.Description != nil {
		toSerialize["Description"] = o.Description
	}
	if o.EndpointPackages != nil {
		toSerialize["EndpointPackages"] = o.EndpointPackages
	}
	if o.Fingerprint != nil {
		toSerialize["Fingerprint"] = o.Fingerprint
	}
	if o.HasError != nil {
		toSerialize["HasError"] = o.HasError
	}
	if o.InfraPackages != nil {
		toSerialize["InfraPackages"] = o.InfraPackages
	}
	if o.InitPackages != nil {
		toSerialize["InitPackages"] = o.InitPackages
	}
	if o.Name != nil {
		toSerialize["Name"] = o.Name
	}
	if o.Notes != nil {
		toSerialize["Notes"] = o.Notes
	}
	if o.Priority != nil {
		toSerialize["Priority"] = o.Priority
	}
	if o.ReleaseTime != nil {
		toSerialize["ReleaseTime"] = o.ReleaseTime
	}
	if o.ServicePackages != nil {
		toSerialize["ServicePackages"] = o.ServicePackages
	}
	if o.StatusMessage != nil {
		toSerialize["StatusMessage"] = o.StatusMessage
	}
	if o.SystemPackages != nil {
		toSerialize["SystemPackages"] = o.SystemPackages
	}
	if o.UiPackages != nil {
		toSerialize["UiPackages"] = o.UiPackages
	}
	if o.UpgradeEndTime != nil {
		toSerialize["UpgradeEndTime"] = o.UpgradeEndTime
	}
	if o.UpgradeGracePeriod != nil {
		toSerialize["UpgradeGracePeriod"] = o.UpgradeGracePeriod
	}
	if o.UpgradeImpactDuration != nil {
		toSerialize["UpgradeImpactDuration"] = o.UpgradeImpactDuration
	}
	if o.UpgradeImpactEnum != nil {
		toSerialize["UpgradeImpactEnum"] = o.UpgradeImpactEnum
	}
	if o.UpgradeStartTime != nil {
		toSerialize["UpgradeStartTime"] = o.UpgradeStartTime
	}
	if o.Version != nil {
		toSerialize["Version"] = o.Version
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *ApplianceImageBundle) UnmarshalJSON(bytes []byte) (err error) {
	type ApplianceImageBundleWithoutEmbeddedStruct struct {
		// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.
		ClassId string `json:"ClassId"`
		// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
		ObjectType      string               `json:"ObjectType"`
		AnsiblePackages []OnpremImagePackage `json:"AnsiblePackages,omitempty"`
		// Indicates that the software upgrade was automatically initiated by the Intersight Appliance.
		AutoUpgrade   *bool                `json:"AutoUpgrade,omitempty"`
		DcPackages    []OnpremImagePackage `json:"DcPackages,omitempty"`
		DebugPackages []OnpremImagePackage `json:"DebugPackages,omitempty"`
		// Short description of the software upgrade bundle.
		Description      *string              `json:"Description,omitempty"`
		EndpointPackages []OnpremImagePackage `json:"EndpointPackages,omitempty"`
		// Fingerprint of the software manifest from which this bundle is created. Fingerprint is calculated using the SHA256 algorithm.
		Fingerprint *string `json:"Fingerprint,omitempty"`
		// Indicates that the ImageBundle has errors. The upgrade service sets this field when it encounters errors during the manifest processing.
		HasError      *bool                `json:"HasError,omitempty"`
		InfraPackages []OnpremImagePackage `json:"InfraPackages,omitempty"`
		InitPackages  []OnpremImagePackage `json:"InitPackages,omitempty"`
		// Name of the software upgrade bundle.
		Name *string `json:"Name,omitempty"`
		// Detailed description of the software upgrade bundle.
		Notes *string `json:"Notes,omitempty"`
		// Software upgrade manifest's upgrade priority. The upgrade service supports two priorities, Normal and Critical. Normal priority is used for regular software upgrades, and the upgrade service uses the Upgrade Policy to compute upgrade start time. Critical priority is used for the critical software security patches, and the upgrade service ignores the Upgrade Policy when it computes the upgrade start time. * `Normal` - Normal upgrade priority is used for all the software upgrades except for the critical security updates. The upgrade service of Intersight Appliance uses the Software Upgrade Policy settings to start the upgrade process. * `Critical` - Critical upgrade priority is used for critical updates such as security patches. The upgrade service of the Intersight Appliance starts the upgrade as specified by the upgrade properties in the software manifest file. The upgrade service will not use the settings specified in the Software Upgrade Policy.
		Priority *string `json:"Priority,omitempty"`
		// Software upgrade manifest's release date and time.
		ReleaseTime     *time.Time           `json:"ReleaseTime,omitempty"`
		ServicePackages []OnpremImagePackage `json:"ServicePackages,omitempty"`
		// Status message set during the manifest processing.
		StatusMessage  *string              `json:"StatusMessage,omitempty"`
		SystemPackages []OnpremImagePackage `json:"SystemPackages,omitempty"`
		UiPackages     []OnpremImagePackage `json:"UiPackages,omitempty"`
		// End date of the software upgrade process.
		UpgradeEndTime *time.Time `json:"UpgradeEndTime,omitempty"`
		// Grace period in seconds before the automatic upgrade is initiated. The upgrade service uses the grace period to compute the upgrade start time when it receives an upgrade notfication from the Intersight. If there is an Upgrade Policy configured for the Intersight Appliance, then the upgrade service uses the policy to compute the upgrade start time. However, the upgrade start time cannot not exceed the limit enforced by the grace period.
		UpgradeGracePeriod *int64 `json:"UpgradeGracePeriod,omitempty"`
		// Duration (in minutes) for which services will be disrupted.
		UpgradeImpactDuration *int64 `json:"UpgradeImpactDuration,omitempty"`
		// UpgradeImpactEnum is used to indicate the kind of impact the upgrade has on currently running services on the appliance. * `None` - The upgrade has no effect on the system. * `Disruptive` - The services will not be functional during the upgrade. * `Disruptive-reboot` - The upgrade needs a reboot.
		UpgradeImpactEnum *string `json:"UpgradeImpactEnum,omitempty"`
		// Start date of the software upgrade process.
		UpgradeStartTime *time.Time `json:"UpgradeStartTime,omitempty"`
		// Software upgrade manifest's version.
		Version *string `json:"Version,omitempty"`
	}

	varApplianceImageBundleWithoutEmbeddedStruct := ApplianceImageBundleWithoutEmbeddedStruct{}

	err = json.Unmarshal(bytes, &varApplianceImageBundleWithoutEmbeddedStruct)
	if err == nil {
		varApplianceImageBundle := _ApplianceImageBundle{}
		varApplianceImageBundle.ClassId = varApplianceImageBundleWithoutEmbeddedStruct.ClassId
		varApplianceImageBundle.ObjectType = varApplianceImageBundleWithoutEmbeddedStruct.ObjectType
		varApplianceImageBundle.AnsiblePackages = varApplianceImageBundleWithoutEmbeddedStruct.AnsiblePackages
		varApplianceImageBundle.AutoUpgrade = varApplianceImageBundleWithoutEmbeddedStruct.AutoUpgrade
		varApplianceImageBundle.DcPackages = varApplianceImageBundleWithoutEmbeddedStruct.DcPackages
		varApplianceImageBundle.DebugPackages = varApplianceImageBundleWithoutEmbeddedStruct.DebugPackages
		varApplianceImageBundle.Description = varApplianceImageBundleWithoutEmbeddedStruct.Description
		varApplianceImageBundle.EndpointPackages = varApplianceImageBundleWithoutEmbeddedStruct.EndpointPackages
		varApplianceImageBundle.Fingerprint = varApplianceImageBundleWithoutEmbeddedStruct.Fingerprint
		varApplianceImageBundle.HasError = varApplianceImageBundleWithoutEmbeddedStruct.HasError
		varApplianceImageBundle.InfraPackages = varApplianceImageBundleWithoutEmbeddedStruct.InfraPackages
		varApplianceImageBundle.InitPackages = varApplianceImageBundleWithoutEmbeddedStruct.InitPackages
		varApplianceImageBundle.Name = varApplianceImageBundleWithoutEmbeddedStruct.Name
		varApplianceImageBundle.Notes = varApplianceImageBundleWithoutEmbeddedStruct.Notes
		varApplianceImageBundle.Priority = varApplianceImageBundleWithoutEmbeddedStruct.Priority
		varApplianceImageBundle.ReleaseTime = varApplianceImageBundleWithoutEmbeddedStruct.ReleaseTime
		varApplianceImageBundle.ServicePackages = varApplianceImageBundleWithoutEmbeddedStruct.ServicePackages
		varApplianceImageBundle.StatusMessage = varApplianceImageBundleWithoutEmbeddedStruct.StatusMessage
		varApplianceImageBundle.SystemPackages = varApplianceImageBundleWithoutEmbeddedStruct.SystemPackages
		varApplianceImageBundle.UiPackages = varApplianceImageBundleWithoutEmbeddedStruct.UiPackages
		varApplianceImageBundle.UpgradeEndTime = varApplianceImageBundleWithoutEmbeddedStruct.UpgradeEndTime
		varApplianceImageBundle.UpgradeGracePeriod = varApplianceImageBundleWithoutEmbeddedStruct.UpgradeGracePeriod
		varApplianceImageBundle.UpgradeImpactDuration = varApplianceImageBundleWithoutEmbeddedStruct.UpgradeImpactDuration
		varApplianceImageBundle.UpgradeImpactEnum = varApplianceImageBundleWithoutEmbeddedStruct.UpgradeImpactEnum
		varApplianceImageBundle.UpgradeStartTime = varApplianceImageBundleWithoutEmbeddedStruct.UpgradeStartTime
		varApplianceImageBundle.Version = varApplianceImageBundleWithoutEmbeddedStruct.Version
		*o = ApplianceImageBundle(varApplianceImageBundle)
	} else {
		return err
	}

	varApplianceImageBundle := _ApplianceImageBundle{}

	err = json.Unmarshal(bytes, &varApplianceImageBundle)
	if err == nil {
		o.MoBaseMo = varApplianceImageBundle.MoBaseMo
	} else {
		return err
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "ClassId")
		delete(additionalProperties, "ObjectType")
		delete(additionalProperties, "AnsiblePackages")
		delete(additionalProperties, "AutoUpgrade")
		delete(additionalProperties, "DcPackages")
		delete(additionalProperties, "DebugPackages")
		delete(additionalProperties, "Description")
		delete(additionalProperties, "EndpointPackages")
		delete(additionalProperties, "Fingerprint")
		delete(additionalProperties, "HasError")
		delete(additionalProperties, "InfraPackages")
		delete(additionalProperties, "InitPackages")
		delete(additionalProperties, "Name")
		delete(additionalProperties, "Notes")
		delete(additionalProperties, "Priority")
		delete(additionalProperties, "ReleaseTime")
		delete(additionalProperties, "ServicePackages")
		delete(additionalProperties, "StatusMessage")
		delete(additionalProperties, "SystemPackages")
		delete(additionalProperties, "UiPackages")
		delete(additionalProperties, "UpgradeEndTime")
		delete(additionalProperties, "UpgradeGracePeriod")
		delete(additionalProperties, "UpgradeImpactDuration")
		delete(additionalProperties, "UpgradeImpactEnum")
		delete(additionalProperties, "UpgradeStartTime")
		delete(additionalProperties, "Version")

		// remove fields from embedded structs
		reflectMoBaseMo := reflect.ValueOf(o.MoBaseMo)
		for i := 0; i < reflectMoBaseMo.Type().NumField(); i++ {
			t := reflectMoBaseMo.Type().Field(i)

			if jsonTag := t.Tag.Get("json"); jsonTag != "" {
				fieldName := ""
				if commaIdx := strings.Index(jsonTag, ","); commaIdx > 0 {
					fieldName = jsonTag[:commaIdx]
				} else {
					fieldName = jsonTag
				}
				if fieldName != "AdditionalProperties" {
					delete(additionalProperties, fieldName)
				}
			}
		}

		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableApplianceImageBundle struct {
	value *ApplianceImageBundle
	isSet bool
}

func (v NullableApplianceImageBundle) Get() *ApplianceImageBundle {
	return v.value
}

func (v *NullableApplianceImageBundle) Set(val *ApplianceImageBundle) {
	v.value = val
	v.isSet = true
}

func (v NullableApplianceImageBundle) IsSet() bool {
	return v.isSet
}

func (v *NullableApplianceImageBundle) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApplianceImageBundle(val *ApplianceImageBundle) *NullableApplianceImageBundle {
	return &NullableApplianceImageBundle{value: val, isSet: true}
}

func (v NullableApplianceImageBundle) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApplianceImageBundle) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
