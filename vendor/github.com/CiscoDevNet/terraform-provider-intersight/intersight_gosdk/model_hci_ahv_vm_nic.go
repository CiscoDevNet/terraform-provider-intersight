/*
Cisco Intersight

Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations. The Intersight OpenAPI document defines the complete set of properties that are returned in the HTTP response. From that perspective, a client can expect that no additional properties are returned, unless these properties are explicitly defined in the OpenAPI document. However, when a client uses an older version of the Intersight OpenAPI document, the server may send additional properties because the software is more recent than the client. In that case, the client may receive properties that it does not know about. Some generated SDKs perform a strict validation of the HTTP response body against the OpenAPI document.

API version: 1.0.11-2025091920
Contact: intersight@cisco.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package intersight

import (
	"encoding/json"
	"fmt"
	"reflect"
	"strings"
)

// checks if the HciAhvVmNic type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &HciAhvVmNic{}

// HciAhvVmNic A NIC associated with an AHV VM.
type HciAhvVmNic struct {
	MoBaseMo
	// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.
	ClassId string `json:"ClassId"`
	// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
	ObjectType  string         `json:"ObjectType"`
	IpAddresses []HciIpAddress `json:"IpAddresses,omitempty"`
	// Indicates if the NIC is connected.
	IsConnected        *bool          `json:"IsConnected,omitempty"`
	LearnedIpAddresses []HciIpAddress `json:"LearnedIpAddresses,omitempty"`
	// The MAC address of the NIC.
	MacAddress *string `json:"MacAddress,omitempty"`
	// The model name of emulated NIC.
	Model *string `json:"Model,omitempty"`
	// The type of this network function NIC.
	NetworkFunctionNicType *string `json:"NetworkFunctionNicType,omitempty"`
	// The unique identifier of the NIC.
	NicExtId *string `json:"NicExtId,omitempty"`
	// The type of the NIC. Possible values are 'NORMAL_NIC', 'DIRECT_NIC', 'NETWORK_FUNCTION_NIC', 'SPAN_DESTINATION_NIC'.
	NicType *string `json:"NicType,omitempty"`
	// The number of Tx/Rx queue pairs for this NIC.
	NumQueues *int32 `json:"NumQueues,omitempty"`
	// Indicates whether an unknown unicast traffic is forwarded to this NIC or not, only for the NICs on the overlay subnets.
	ShouldAllowUnknownMacs *bool   `json:"ShouldAllowUnknownMacs,omitempty"`
	TrunkedVlans           []int32 `json:"TrunkedVlans,omitempty"`
	VlanId                 []int32 `json:"VlanId,omitempty"`
	// By default, all the virtual NICs are created in ACCESS mode, which permits only one VLAN per virtual network. TRUNKED mode allows multiple VLANs on a single VM NIC for network-aware user VMs.
	VlanMode *string `json:"VlanMode,omitempty"`
	// The unique identifier of the VM.
	VmExtId              *string                                     `json:"VmExtId,omitempty"`
	RegisteredDevice     NullableAssetDeviceRegistrationRelationship `json:"RegisteredDevice,omitempty"`
	Vm                   NullableHciAhvVmRelationship                `json:"Vm,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _HciAhvVmNic HciAhvVmNic

// NewHciAhvVmNic instantiates a new HciAhvVmNic object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHciAhvVmNic(classId string, objectType string) *HciAhvVmNic {
	this := HciAhvVmNic{}
	this.ClassId = classId
	this.ObjectType = objectType
	return &this
}

// NewHciAhvVmNicWithDefaults instantiates a new HciAhvVmNic object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHciAhvVmNicWithDefaults() *HciAhvVmNic {
	this := HciAhvVmNic{}
	var classId string = "hci.AhvVmNic"
	this.ClassId = classId
	var objectType string = "hci.AhvVmNic"
	this.ObjectType = objectType
	return &this
}

// GetClassId returns the ClassId field value
func (o *HciAhvVmNic) GetClassId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ClassId
}

// GetClassIdOk returns a tuple with the ClassId field value
// and a boolean to check if the value has been set.
func (o *HciAhvVmNic) GetClassIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ClassId, true
}

// SetClassId sets field value
func (o *HciAhvVmNic) SetClassId(v string) {
	o.ClassId = v
}

// GetDefaultClassId returns the default value "hci.AhvVmNic" of the ClassId field.
func (o *HciAhvVmNic) GetDefaultClassId() interface{} {
	return "hci.AhvVmNic"
}

// GetObjectType returns the ObjectType field value
func (o *HciAhvVmNic) GetObjectType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ObjectType
}

// GetObjectTypeOk returns a tuple with the ObjectType field value
// and a boolean to check if the value has been set.
func (o *HciAhvVmNic) GetObjectTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ObjectType, true
}

// SetObjectType sets field value
func (o *HciAhvVmNic) SetObjectType(v string) {
	o.ObjectType = v
}

// GetDefaultObjectType returns the default value "hci.AhvVmNic" of the ObjectType field.
func (o *HciAhvVmNic) GetDefaultObjectType() interface{} {
	return "hci.AhvVmNic"
}

// GetIpAddresses returns the IpAddresses field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HciAhvVmNic) GetIpAddresses() []HciIpAddress {
	if o == nil {
		var ret []HciIpAddress
		return ret
	}
	return o.IpAddresses
}

// GetIpAddressesOk returns a tuple with the IpAddresses field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HciAhvVmNic) GetIpAddressesOk() ([]HciIpAddress, bool) {
	if o == nil || IsNil(o.IpAddresses) {
		return nil, false
	}
	return o.IpAddresses, true
}

// HasIpAddresses returns a boolean if a field has been set.
func (o *HciAhvVmNic) HasIpAddresses() bool {
	if o != nil && !IsNil(o.IpAddresses) {
		return true
	}

	return false
}

// SetIpAddresses gets a reference to the given []HciIpAddress and assigns it to the IpAddresses field.
func (o *HciAhvVmNic) SetIpAddresses(v []HciIpAddress) {
	o.IpAddresses = v
}

// GetIsConnected returns the IsConnected field value if set, zero value otherwise.
func (o *HciAhvVmNic) GetIsConnected() bool {
	if o == nil || IsNil(o.IsConnected) {
		var ret bool
		return ret
	}
	return *o.IsConnected
}

// GetIsConnectedOk returns a tuple with the IsConnected field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HciAhvVmNic) GetIsConnectedOk() (*bool, bool) {
	if o == nil || IsNil(o.IsConnected) {
		return nil, false
	}
	return o.IsConnected, true
}

// HasIsConnected returns a boolean if a field has been set.
func (o *HciAhvVmNic) HasIsConnected() bool {
	if o != nil && !IsNil(o.IsConnected) {
		return true
	}

	return false
}

// SetIsConnected gets a reference to the given bool and assigns it to the IsConnected field.
func (o *HciAhvVmNic) SetIsConnected(v bool) {
	o.IsConnected = &v
}

// GetLearnedIpAddresses returns the LearnedIpAddresses field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HciAhvVmNic) GetLearnedIpAddresses() []HciIpAddress {
	if o == nil {
		var ret []HciIpAddress
		return ret
	}
	return o.LearnedIpAddresses
}

// GetLearnedIpAddressesOk returns a tuple with the LearnedIpAddresses field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HciAhvVmNic) GetLearnedIpAddressesOk() ([]HciIpAddress, bool) {
	if o == nil || IsNil(o.LearnedIpAddresses) {
		return nil, false
	}
	return o.LearnedIpAddresses, true
}

// HasLearnedIpAddresses returns a boolean if a field has been set.
func (o *HciAhvVmNic) HasLearnedIpAddresses() bool {
	if o != nil && !IsNil(o.LearnedIpAddresses) {
		return true
	}

	return false
}

// SetLearnedIpAddresses gets a reference to the given []HciIpAddress and assigns it to the LearnedIpAddresses field.
func (o *HciAhvVmNic) SetLearnedIpAddresses(v []HciIpAddress) {
	o.LearnedIpAddresses = v
}

// GetMacAddress returns the MacAddress field value if set, zero value otherwise.
func (o *HciAhvVmNic) GetMacAddress() string {
	if o == nil || IsNil(o.MacAddress) {
		var ret string
		return ret
	}
	return *o.MacAddress
}

// GetMacAddressOk returns a tuple with the MacAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HciAhvVmNic) GetMacAddressOk() (*string, bool) {
	if o == nil || IsNil(o.MacAddress) {
		return nil, false
	}
	return o.MacAddress, true
}

// HasMacAddress returns a boolean if a field has been set.
func (o *HciAhvVmNic) HasMacAddress() bool {
	if o != nil && !IsNil(o.MacAddress) {
		return true
	}

	return false
}

// SetMacAddress gets a reference to the given string and assigns it to the MacAddress field.
func (o *HciAhvVmNic) SetMacAddress(v string) {
	o.MacAddress = &v
}

// GetModel returns the Model field value if set, zero value otherwise.
func (o *HciAhvVmNic) GetModel() string {
	if o == nil || IsNil(o.Model) {
		var ret string
		return ret
	}
	return *o.Model
}

// GetModelOk returns a tuple with the Model field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HciAhvVmNic) GetModelOk() (*string, bool) {
	if o == nil || IsNil(o.Model) {
		return nil, false
	}
	return o.Model, true
}

// HasModel returns a boolean if a field has been set.
func (o *HciAhvVmNic) HasModel() bool {
	if o != nil && !IsNil(o.Model) {
		return true
	}

	return false
}

// SetModel gets a reference to the given string and assigns it to the Model field.
func (o *HciAhvVmNic) SetModel(v string) {
	o.Model = &v
}

// GetNetworkFunctionNicType returns the NetworkFunctionNicType field value if set, zero value otherwise.
func (o *HciAhvVmNic) GetNetworkFunctionNicType() string {
	if o == nil || IsNil(o.NetworkFunctionNicType) {
		var ret string
		return ret
	}
	return *o.NetworkFunctionNicType
}

// GetNetworkFunctionNicTypeOk returns a tuple with the NetworkFunctionNicType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HciAhvVmNic) GetNetworkFunctionNicTypeOk() (*string, bool) {
	if o == nil || IsNil(o.NetworkFunctionNicType) {
		return nil, false
	}
	return o.NetworkFunctionNicType, true
}

// HasNetworkFunctionNicType returns a boolean if a field has been set.
func (o *HciAhvVmNic) HasNetworkFunctionNicType() bool {
	if o != nil && !IsNil(o.NetworkFunctionNicType) {
		return true
	}

	return false
}

// SetNetworkFunctionNicType gets a reference to the given string and assigns it to the NetworkFunctionNicType field.
func (o *HciAhvVmNic) SetNetworkFunctionNicType(v string) {
	o.NetworkFunctionNicType = &v
}

// GetNicExtId returns the NicExtId field value if set, zero value otherwise.
func (o *HciAhvVmNic) GetNicExtId() string {
	if o == nil || IsNil(o.NicExtId) {
		var ret string
		return ret
	}
	return *o.NicExtId
}

// GetNicExtIdOk returns a tuple with the NicExtId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HciAhvVmNic) GetNicExtIdOk() (*string, bool) {
	if o == nil || IsNil(o.NicExtId) {
		return nil, false
	}
	return o.NicExtId, true
}

// HasNicExtId returns a boolean if a field has been set.
func (o *HciAhvVmNic) HasNicExtId() bool {
	if o != nil && !IsNil(o.NicExtId) {
		return true
	}

	return false
}

// SetNicExtId gets a reference to the given string and assigns it to the NicExtId field.
func (o *HciAhvVmNic) SetNicExtId(v string) {
	o.NicExtId = &v
}

// GetNicType returns the NicType field value if set, zero value otherwise.
func (o *HciAhvVmNic) GetNicType() string {
	if o == nil || IsNil(o.NicType) {
		var ret string
		return ret
	}
	return *o.NicType
}

// GetNicTypeOk returns a tuple with the NicType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HciAhvVmNic) GetNicTypeOk() (*string, bool) {
	if o == nil || IsNil(o.NicType) {
		return nil, false
	}
	return o.NicType, true
}

// HasNicType returns a boolean if a field has been set.
func (o *HciAhvVmNic) HasNicType() bool {
	if o != nil && !IsNil(o.NicType) {
		return true
	}

	return false
}

// SetNicType gets a reference to the given string and assigns it to the NicType field.
func (o *HciAhvVmNic) SetNicType(v string) {
	o.NicType = &v
}

// GetNumQueues returns the NumQueues field value if set, zero value otherwise.
func (o *HciAhvVmNic) GetNumQueues() int32 {
	if o == nil || IsNil(o.NumQueues) {
		var ret int32
		return ret
	}
	return *o.NumQueues
}

// GetNumQueuesOk returns a tuple with the NumQueues field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HciAhvVmNic) GetNumQueuesOk() (*int32, bool) {
	if o == nil || IsNil(o.NumQueues) {
		return nil, false
	}
	return o.NumQueues, true
}

// HasNumQueues returns a boolean if a field has been set.
func (o *HciAhvVmNic) HasNumQueues() bool {
	if o != nil && !IsNil(o.NumQueues) {
		return true
	}

	return false
}

// SetNumQueues gets a reference to the given int32 and assigns it to the NumQueues field.
func (o *HciAhvVmNic) SetNumQueues(v int32) {
	o.NumQueues = &v
}

// GetShouldAllowUnknownMacs returns the ShouldAllowUnknownMacs field value if set, zero value otherwise.
func (o *HciAhvVmNic) GetShouldAllowUnknownMacs() bool {
	if o == nil || IsNil(o.ShouldAllowUnknownMacs) {
		var ret bool
		return ret
	}
	return *o.ShouldAllowUnknownMacs
}

// GetShouldAllowUnknownMacsOk returns a tuple with the ShouldAllowUnknownMacs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HciAhvVmNic) GetShouldAllowUnknownMacsOk() (*bool, bool) {
	if o == nil || IsNil(o.ShouldAllowUnknownMacs) {
		return nil, false
	}
	return o.ShouldAllowUnknownMacs, true
}

// HasShouldAllowUnknownMacs returns a boolean if a field has been set.
func (o *HciAhvVmNic) HasShouldAllowUnknownMacs() bool {
	if o != nil && !IsNil(o.ShouldAllowUnknownMacs) {
		return true
	}

	return false
}

// SetShouldAllowUnknownMacs gets a reference to the given bool and assigns it to the ShouldAllowUnknownMacs field.
func (o *HciAhvVmNic) SetShouldAllowUnknownMacs(v bool) {
	o.ShouldAllowUnknownMacs = &v
}

// GetTrunkedVlans returns the TrunkedVlans field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HciAhvVmNic) GetTrunkedVlans() []int32 {
	if o == nil {
		var ret []int32
		return ret
	}
	return o.TrunkedVlans
}

// GetTrunkedVlansOk returns a tuple with the TrunkedVlans field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HciAhvVmNic) GetTrunkedVlansOk() ([]int32, bool) {
	if o == nil || IsNil(o.TrunkedVlans) {
		return nil, false
	}
	return o.TrunkedVlans, true
}

// HasTrunkedVlans returns a boolean if a field has been set.
func (o *HciAhvVmNic) HasTrunkedVlans() bool {
	if o != nil && !IsNil(o.TrunkedVlans) {
		return true
	}

	return false
}

// SetTrunkedVlans gets a reference to the given []int32 and assigns it to the TrunkedVlans field.
func (o *HciAhvVmNic) SetTrunkedVlans(v []int32) {
	o.TrunkedVlans = v
}

// GetVlanId returns the VlanId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HciAhvVmNic) GetVlanId() []int32 {
	if o == nil {
		var ret []int32
		return ret
	}
	return o.VlanId
}

// GetVlanIdOk returns a tuple with the VlanId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HciAhvVmNic) GetVlanIdOk() ([]int32, bool) {
	if o == nil || IsNil(o.VlanId) {
		return nil, false
	}
	return o.VlanId, true
}

// HasVlanId returns a boolean if a field has been set.
func (o *HciAhvVmNic) HasVlanId() bool {
	if o != nil && !IsNil(o.VlanId) {
		return true
	}

	return false
}

// SetVlanId gets a reference to the given []int32 and assigns it to the VlanId field.
func (o *HciAhvVmNic) SetVlanId(v []int32) {
	o.VlanId = v
}

// GetVlanMode returns the VlanMode field value if set, zero value otherwise.
func (o *HciAhvVmNic) GetVlanMode() string {
	if o == nil || IsNil(o.VlanMode) {
		var ret string
		return ret
	}
	return *o.VlanMode
}

// GetVlanModeOk returns a tuple with the VlanMode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HciAhvVmNic) GetVlanModeOk() (*string, bool) {
	if o == nil || IsNil(o.VlanMode) {
		return nil, false
	}
	return o.VlanMode, true
}

// HasVlanMode returns a boolean if a field has been set.
func (o *HciAhvVmNic) HasVlanMode() bool {
	if o != nil && !IsNil(o.VlanMode) {
		return true
	}

	return false
}

// SetVlanMode gets a reference to the given string and assigns it to the VlanMode field.
func (o *HciAhvVmNic) SetVlanMode(v string) {
	o.VlanMode = &v
}

// GetVmExtId returns the VmExtId field value if set, zero value otherwise.
func (o *HciAhvVmNic) GetVmExtId() string {
	if o == nil || IsNil(o.VmExtId) {
		var ret string
		return ret
	}
	return *o.VmExtId
}

// GetVmExtIdOk returns a tuple with the VmExtId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HciAhvVmNic) GetVmExtIdOk() (*string, bool) {
	if o == nil || IsNil(o.VmExtId) {
		return nil, false
	}
	return o.VmExtId, true
}

// HasVmExtId returns a boolean if a field has been set.
func (o *HciAhvVmNic) HasVmExtId() bool {
	if o != nil && !IsNil(o.VmExtId) {
		return true
	}

	return false
}

// SetVmExtId gets a reference to the given string and assigns it to the VmExtId field.
func (o *HciAhvVmNic) SetVmExtId(v string) {
	o.VmExtId = &v
}

// GetRegisteredDevice returns the RegisteredDevice field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HciAhvVmNic) GetRegisteredDevice() AssetDeviceRegistrationRelationship {
	if o == nil || IsNil(o.RegisteredDevice.Get()) {
		var ret AssetDeviceRegistrationRelationship
		return ret
	}
	return *o.RegisteredDevice.Get()
}

// GetRegisteredDeviceOk returns a tuple with the RegisteredDevice field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HciAhvVmNic) GetRegisteredDeviceOk() (*AssetDeviceRegistrationRelationship, bool) {
	if o == nil {
		return nil, false
	}
	return o.RegisteredDevice.Get(), o.RegisteredDevice.IsSet()
}

// HasRegisteredDevice returns a boolean if a field has been set.
func (o *HciAhvVmNic) HasRegisteredDevice() bool {
	if o != nil && o.RegisteredDevice.IsSet() {
		return true
	}

	return false
}

// SetRegisteredDevice gets a reference to the given NullableAssetDeviceRegistrationRelationship and assigns it to the RegisteredDevice field.
func (o *HciAhvVmNic) SetRegisteredDevice(v AssetDeviceRegistrationRelationship) {
	o.RegisteredDevice.Set(&v)
}

// SetRegisteredDeviceNil sets the value for RegisteredDevice to be an explicit nil
func (o *HciAhvVmNic) SetRegisteredDeviceNil() {
	o.RegisteredDevice.Set(nil)
}

// UnsetRegisteredDevice ensures that no value is present for RegisteredDevice, not even an explicit nil
func (o *HciAhvVmNic) UnsetRegisteredDevice() {
	o.RegisteredDevice.Unset()
}

// GetVm returns the Vm field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HciAhvVmNic) GetVm() HciAhvVmRelationship {
	if o == nil || IsNil(o.Vm.Get()) {
		var ret HciAhvVmRelationship
		return ret
	}
	return *o.Vm.Get()
}

// GetVmOk returns a tuple with the Vm field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HciAhvVmNic) GetVmOk() (*HciAhvVmRelationship, bool) {
	if o == nil {
		return nil, false
	}
	return o.Vm.Get(), o.Vm.IsSet()
}

// HasVm returns a boolean if a field has been set.
func (o *HciAhvVmNic) HasVm() bool {
	if o != nil && o.Vm.IsSet() {
		return true
	}

	return false
}

// SetVm gets a reference to the given NullableHciAhvVmRelationship and assigns it to the Vm field.
func (o *HciAhvVmNic) SetVm(v HciAhvVmRelationship) {
	o.Vm.Set(&v)
}

// SetVmNil sets the value for Vm to be an explicit nil
func (o *HciAhvVmNic) SetVmNil() {
	o.Vm.Set(nil)
}

// UnsetVm ensures that no value is present for Vm, not even an explicit nil
func (o *HciAhvVmNic) UnsetVm() {
	o.Vm.Unset()
}

func (o HciAhvVmNic) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o HciAhvVmNic) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	serializedMoBaseMo, errMoBaseMo := json.Marshal(o.MoBaseMo)
	if errMoBaseMo != nil {
		return map[string]interface{}{}, errMoBaseMo
	}
	errMoBaseMo = json.Unmarshal([]byte(serializedMoBaseMo), &toSerialize)
	if errMoBaseMo != nil {
		return map[string]interface{}{}, errMoBaseMo
	}
	if _, exists := toSerialize["ClassId"]; !exists {
		toSerialize["ClassId"] = o.GetDefaultClassId()
	}
	toSerialize["ClassId"] = o.ClassId
	if _, exists := toSerialize["ObjectType"]; !exists {
		toSerialize["ObjectType"] = o.GetDefaultObjectType()
	}
	toSerialize["ObjectType"] = o.ObjectType
	if o.IpAddresses != nil {
		toSerialize["IpAddresses"] = o.IpAddresses
	}
	if !IsNil(o.IsConnected) {
		toSerialize["IsConnected"] = o.IsConnected
	}
	if o.LearnedIpAddresses != nil {
		toSerialize["LearnedIpAddresses"] = o.LearnedIpAddresses
	}
	if !IsNil(o.MacAddress) {
		toSerialize["MacAddress"] = o.MacAddress
	}
	if !IsNil(o.Model) {
		toSerialize["Model"] = o.Model
	}
	if !IsNil(o.NetworkFunctionNicType) {
		toSerialize["NetworkFunctionNicType"] = o.NetworkFunctionNicType
	}
	if !IsNil(o.NicExtId) {
		toSerialize["NicExtId"] = o.NicExtId
	}
	if !IsNil(o.NicType) {
		toSerialize["NicType"] = o.NicType
	}
	if !IsNil(o.NumQueues) {
		toSerialize["NumQueues"] = o.NumQueues
	}
	if !IsNil(o.ShouldAllowUnknownMacs) {
		toSerialize["ShouldAllowUnknownMacs"] = o.ShouldAllowUnknownMacs
	}
	if o.TrunkedVlans != nil {
		toSerialize["TrunkedVlans"] = o.TrunkedVlans
	}
	if o.VlanId != nil {
		toSerialize["VlanId"] = o.VlanId
	}
	if !IsNil(o.VlanMode) {
		toSerialize["VlanMode"] = o.VlanMode
	}
	if !IsNil(o.VmExtId) {
		toSerialize["VmExtId"] = o.VmExtId
	}
	if o.RegisteredDevice.IsSet() {
		toSerialize["RegisteredDevice"] = o.RegisteredDevice.Get()
	}
	if o.Vm.IsSet() {
		toSerialize["Vm"] = o.Vm.Get()
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *HciAhvVmNic) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"ClassId",
		"ObjectType",
	}

	// defaultValueFuncMap captures the default values for required properties.
	// These values are used when required properties are missing from the payload.
	defaultValueFuncMap := map[string]func() interface{}{
		"ClassId":    o.GetDefaultClassId,
		"ObjectType": o.GetDefaultObjectType,
	}
	var defaultValueApplied bool
	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			if _, ok := defaultValueFuncMap[requiredProperty]; ok {
				allProperties[requiredProperty] = defaultValueFuncMap[requiredProperty]()
				defaultValueApplied = true
			}
		}
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	if defaultValueApplied {
		data, err = json.Marshal(allProperties)
		if err != nil {
			return err
		}
	}
	type HciAhvVmNicWithoutEmbeddedStruct struct {
		// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.
		ClassId string `json:"ClassId"`
		// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
		ObjectType  string         `json:"ObjectType"`
		IpAddresses []HciIpAddress `json:"IpAddresses,omitempty"`
		// Indicates if the NIC is connected.
		IsConnected        *bool          `json:"IsConnected,omitempty"`
		LearnedIpAddresses []HciIpAddress `json:"LearnedIpAddresses,omitempty"`
		// The MAC address of the NIC.
		MacAddress *string `json:"MacAddress,omitempty"`
		// The model name of emulated NIC.
		Model *string `json:"Model,omitempty"`
		// The type of this network function NIC.
		NetworkFunctionNicType *string `json:"NetworkFunctionNicType,omitempty"`
		// The unique identifier of the NIC.
		NicExtId *string `json:"NicExtId,omitempty"`
		// The type of the NIC. Possible values are 'NORMAL_NIC', 'DIRECT_NIC', 'NETWORK_FUNCTION_NIC', 'SPAN_DESTINATION_NIC'.
		NicType *string `json:"NicType,omitempty"`
		// The number of Tx/Rx queue pairs for this NIC.
		NumQueues *int32 `json:"NumQueues,omitempty"`
		// Indicates whether an unknown unicast traffic is forwarded to this NIC or not, only for the NICs on the overlay subnets.
		ShouldAllowUnknownMacs *bool   `json:"ShouldAllowUnknownMacs,omitempty"`
		TrunkedVlans           []int32 `json:"TrunkedVlans,omitempty"`
		VlanId                 []int32 `json:"VlanId,omitempty"`
		// By default, all the virtual NICs are created in ACCESS mode, which permits only one VLAN per virtual network. TRUNKED mode allows multiple VLANs on a single VM NIC for network-aware user VMs.
		VlanMode *string `json:"VlanMode,omitempty"`
		// The unique identifier of the VM.
		VmExtId          *string                                     `json:"VmExtId,omitempty"`
		RegisteredDevice NullableAssetDeviceRegistrationRelationship `json:"RegisteredDevice,omitempty"`
		Vm               NullableHciAhvVmRelationship                `json:"Vm,omitempty"`
	}

	varHciAhvVmNicWithoutEmbeddedStruct := HciAhvVmNicWithoutEmbeddedStruct{}

	err = json.Unmarshal(data, &varHciAhvVmNicWithoutEmbeddedStruct)
	if err == nil {
		varHciAhvVmNic := _HciAhvVmNic{}
		varHciAhvVmNic.ClassId = varHciAhvVmNicWithoutEmbeddedStruct.ClassId
		varHciAhvVmNic.ObjectType = varHciAhvVmNicWithoutEmbeddedStruct.ObjectType
		varHciAhvVmNic.IpAddresses = varHciAhvVmNicWithoutEmbeddedStruct.IpAddresses
		varHciAhvVmNic.IsConnected = varHciAhvVmNicWithoutEmbeddedStruct.IsConnected
		varHciAhvVmNic.LearnedIpAddresses = varHciAhvVmNicWithoutEmbeddedStruct.LearnedIpAddresses
		varHciAhvVmNic.MacAddress = varHciAhvVmNicWithoutEmbeddedStruct.MacAddress
		varHciAhvVmNic.Model = varHciAhvVmNicWithoutEmbeddedStruct.Model
		varHciAhvVmNic.NetworkFunctionNicType = varHciAhvVmNicWithoutEmbeddedStruct.NetworkFunctionNicType
		varHciAhvVmNic.NicExtId = varHciAhvVmNicWithoutEmbeddedStruct.NicExtId
		varHciAhvVmNic.NicType = varHciAhvVmNicWithoutEmbeddedStruct.NicType
		varHciAhvVmNic.NumQueues = varHciAhvVmNicWithoutEmbeddedStruct.NumQueues
		varHciAhvVmNic.ShouldAllowUnknownMacs = varHciAhvVmNicWithoutEmbeddedStruct.ShouldAllowUnknownMacs
		varHciAhvVmNic.TrunkedVlans = varHciAhvVmNicWithoutEmbeddedStruct.TrunkedVlans
		varHciAhvVmNic.VlanId = varHciAhvVmNicWithoutEmbeddedStruct.VlanId
		varHciAhvVmNic.VlanMode = varHciAhvVmNicWithoutEmbeddedStruct.VlanMode
		varHciAhvVmNic.VmExtId = varHciAhvVmNicWithoutEmbeddedStruct.VmExtId
		varHciAhvVmNic.RegisteredDevice = varHciAhvVmNicWithoutEmbeddedStruct.RegisteredDevice
		varHciAhvVmNic.Vm = varHciAhvVmNicWithoutEmbeddedStruct.Vm
		*o = HciAhvVmNic(varHciAhvVmNic)
	} else {
		return err
	}

	varHciAhvVmNic := _HciAhvVmNic{}

	err = json.Unmarshal(data, &varHciAhvVmNic)
	if err == nil {
		o.MoBaseMo = varHciAhvVmNic.MoBaseMo
	} else {
		return err
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "ClassId")
		delete(additionalProperties, "ObjectType")
		delete(additionalProperties, "IpAddresses")
		delete(additionalProperties, "IsConnected")
		delete(additionalProperties, "LearnedIpAddresses")
		delete(additionalProperties, "MacAddress")
		delete(additionalProperties, "Model")
		delete(additionalProperties, "NetworkFunctionNicType")
		delete(additionalProperties, "NicExtId")
		delete(additionalProperties, "NicType")
		delete(additionalProperties, "NumQueues")
		delete(additionalProperties, "ShouldAllowUnknownMacs")
		delete(additionalProperties, "TrunkedVlans")
		delete(additionalProperties, "VlanId")
		delete(additionalProperties, "VlanMode")
		delete(additionalProperties, "VmExtId")
		delete(additionalProperties, "RegisteredDevice")
		delete(additionalProperties, "Vm")

		// remove fields from embedded structs
		reflectMoBaseMo := reflect.ValueOf(o.MoBaseMo)
		for i := 0; i < reflectMoBaseMo.Type().NumField(); i++ {
			t := reflectMoBaseMo.Type().Field(i)

			if jsonTag := t.Tag.Get("json"); jsonTag != "" {
				fieldName := ""
				if commaIdx := strings.Index(jsonTag, ","); commaIdx > 0 {
					fieldName = jsonTag[:commaIdx]
				} else {
					fieldName = jsonTag
				}
				if fieldName != "AdditionalProperties" {
					delete(additionalProperties, fieldName)
				}
			}
		}

		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableHciAhvVmNic struct {
	value *HciAhvVmNic
	isSet bool
}

func (v NullableHciAhvVmNic) Get() *HciAhvVmNic {
	return v.value
}

func (v *NullableHciAhvVmNic) Set(val *HciAhvVmNic) {
	v.value = val
	v.isSet = true
}

func (v NullableHciAhvVmNic) IsSet() bool {
	return v.isSet
}

func (v *NullableHciAhvVmNic) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHciAhvVmNic(val *HciAhvVmNic) *NullableHciAhvVmNic {
	return &NullableHciAhvVmNic{value: val, isSet: true}
}

func (v NullableHciAhvVmNic) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHciAhvVmNic) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
