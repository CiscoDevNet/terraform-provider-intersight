/*
Cisco Intersight

Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations. The Intersight OpenAPI document defines the complete set of properties that are returned in the HTTP response. From that perspective, a client can expect that no additional properties are returned, unless these properties are explicitly defined in the OpenAPI document. However, when a client uses an older version of the Intersight OpenAPI document, the server may send additional properties because the software is more recent than the client. In that case, the client may receive properties that it does not know about. Some generated SDKs perform a strict validation of the HTTP response body against the OpenAPI document.

API version: 1.0.11-2024100405
Contact: intersight@cisco.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package intersight

import (
	"encoding/json"
	"fmt"
	"reflect"
	"strings"
)

// checks if the NetworkconfigPolicyInventory type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NetworkconfigPolicyInventory{}

// NetworkconfigPolicyInventory Enable or disable Dynamic DNS, add or update DNS settings for IPv4 and IPv6 on Cisco IMC.
type NetworkconfigPolicyInventory struct {
	PolicyAbstractPolicyInventory
	// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.
	ClassId string `json:"ClassId"`
	// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
	ObjectType string `json:"ObjectType"`
	// IP address of the secondary DNS server.
	AlternateIpv4dnsServer *string `json:"AlternateIpv4dnsServer,omitempty"`
	// IP address of the secondary DNS server.
	AlternateIpv6dnsServer *string `json:"AlternateIpv6dnsServer,omitempty"`
	// The domain name appended to a hostname for a Dynamic DNS (DDNS) update. If left blank, only a hostname is sent to the DDNS update request.
	DynamicDnsDomain *string `json:"DynamicDnsDomain,omitempty" validate:"regexp=^$|^[a-zA-Z0-9]+([-.]{1}[a-zA-Z0-9]+)*$"`
	// If enabled, updates the resource records to the DNS from Cisco IMC.
	EnableDynamicDns *bool `json:"EnableDynamicDns,omitempty"`
	// If enabled, Cisco IMC retrieves the DNS server addresses from DHCP. Use DHCP field must be enabled for IPv4 in Cisco IMC to enable it.
	EnableIpv4dnsFromDhcp *bool `json:"EnableIpv4dnsFromDhcp,omitempty"`
	// If enabled, allows to configure IPv6 properties.
	EnableIpv6 *bool `json:"EnableIpv6,omitempty"`
	// If enabled, Cisco IMC retrieves the DNS server addresses from DHCP. Use DHCP field must be enabled for IPv6 in Cisco IMC to enable it.
	EnableIpv6dnsFromDhcp *bool `json:"EnableIpv6dnsFromDhcp,omitempty"`
	// IP address of the primary DNS server.
	PreferredIpv4dnsServer *string `json:"PreferredIpv4dnsServer,omitempty"`
	// IP address of the primary DNS server.
	PreferredIpv6dnsServer *string                      `json:"PreferredIpv6dnsServer,omitempty"`
	TargetMo               NullableMoBaseMoRelationship `json:"TargetMo,omitempty"`
	AdditionalProperties   map[string]interface{}
}

type _NetworkconfigPolicyInventory NetworkconfigPolicyInventory

// NewNetworkconfigPolicyInventory instantiates a new NetworkconfigPolicyInventory object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNetworkconfigPolicyInventory(classId string, objectType string) *NetworkconfigPolicyInventory {
	this := NetworkconfigPolicyInventory{}
	this.ClassId = classId
	this.ObjectType = objectType
	return &this
}

// NewNetworkconfigPolicyInventoryWithDefaults instantiates a new NetworkconfigPolicyInventory object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNetworkconfigPolicyInventoryWithDefaults() *NetworkconfigPolicyInventory {
	this := NetworkconfigPolicyInventory{}
	var classId string = "networkconfig.PolicyInventory"
	this.ClassId = classId
	var objectType string = "networkconfig.PolicyInventory"
	this.ObjectType = objectType
	return &this
}

// GetClassId returns the ClassId field value
func (o *NetworkconfigPolicyInventory) GetClassId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ClassId
}

// GetClassIdOk returns a tuple with the ClassId field value
// and a boolean to check if the value has been set.
func (o *NetworkconfigPolicyInventory) GetClassIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ClassId, true
}

// SetClassId sets field value
func (o *NetworkconfigPolicyInventory) SetClassId(v string) {
	o.ClassId = v
}

// GetDefaultClassId returns the default value "networkconfig.PolicyInventory" of the ClassId field.
func (o *NetworkconfigPolicyInventory) GetDefaultClassId() interface{} {
	return "networkconfig.PolicyInventory"
}

// GetObjectType returns the ObjectType field value
func (o *NetworkconfigPolicyInventory) GetObjectType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ObjectType
}

// GetObjectTypeOk returns a tuple with the ObjectType field value
// and a boolean to check if the value has been set.
func (o *NetworkconfigPolicyInventory) GetObjectTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ObjectType, true
}

// SetObjectType sets field value
func (o *NetworkconfigPolicyInventory) SetObjectType(v string) {
	o.ObjectType = v
}

// GetDefaultObjectType returns the default value "networkconfig.PolicyInventory" of the ObjectType field.
func (o *NetworkconfigPolicyInventory) GetDefaultObjectType() interface{} {
	return "networkconfig.PolicyInventory"
}

// GetAlternateIpv4dnsServer returns the AlternateIpv4dnsServer field value if set, zero value otherwise.
func (o *NetworkconfigPolicyInventory) GetAlternateIpv4dnsServer() string {
	if o == nil || IsNil(o.AlternateIpv4dnsServer) {
		var ret string
		return ret
	}
	return *o.AlternateIpv4dnsServer
}

// GetAlternateIpv4dnsServerOk returns a tuple with the AlternateIpv4dnsServer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkconfigPolicyInventory) GetAlternateIpv4dnsServerOk() (*string, bool) {
	if o == nil || IsNil(o.AlternateIpv4dnsServer) {
		return nil, false
	}
	return o.AlternateIpv4dnsServer, true
}

// HasAlternateIpv4dnsServer returns a boolean if a field has been set.
func (o *NetworkconfigPolicyInventory) HasAlternateIpv4dnsServer() bool {
	if o != nil && !IsNil(o.AlternateIpv4dnsServer) {
		return true
	}

	return false
}

// SetAlternateIpv4dnsServer gets a reference to the given string and assigns it to the AlternateIpv4dnsServer field.
func (o *NetworkconfigPolicyInventory) SetAlternateIpv4dnsServer(v string) {
	o.AlternateIpv4dnsServer = &v
}

// GetAlternateIpv6dnsServer returns the AlternateIpv6dnsServer field value if set, zero value otherwise.
func (o *NetworkconfigPolicyInventory) GetAlternateIpv6dnsServer() string {
	if o == nil || IsNil(o.AlternateIpv6dnsServer) {
		var ret string
		return ret
	}
	return *o.AlternateIpv6dnsServer
}

// GetAlternateIpv6dnsServerOk returns a tuple with the AlternateIpv6dnsServer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkconfigPolicyInventory) GetAlternateIpv6dnsServerOk() (*string, bool) {
	if o == nil || IsNil(o.AlternateIpv6dnsServer) {
		return nil, false
	}
	return o.AlternateIpv6dnsServer, true
}

// HasAlternateIpv6dnsServer returns a boolean if a field has been set.
func (o *NetworkconfigPolicyInventory) HasAlternateIpv6dnsServer() bool {
	if o != nil && !IsNil(o.AlternateIpv6dnsServer) {
		return true
	}

	return false
}

// SetAlternateIpv6dnsServer gets a reference to the given string and assigns it to the AlternateIpv6dnsServer field.
func (o *NetworkconfigPolicyInventory) SetAlternateIpv6dnsServer(v string) {
	o.AlternateIpv6dnsServer = &v
}

// GetDynamicDnsDomain returns the DynamicDnsDomain field value if set, zero value otherwise.
func (o *NetworkconfigPolicyInventory) GetDynamicDnsDomain() string {
	if o == nil || IsNil(o.DynamicDnsDomain) {
		var ret string
		return ret
	}
	return *o.DynamicDnsDomain
}

// GetDynamicDnsDomainOk returns a tuple with the DynamicDnsDomain field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkconfigPolicyInventory) GetDynamicDnsDomainOk() (*string, bool) {
	if o == nil || IsNil(o.DynamicDnsDomain) {
		return nil, false
	}
	return o.DynamicDnsDomain, true
}

// HasDynamicDnsDomain returns a boolean if a field has been set.
func (o *NetworkconfigPolicyInventory) HasDynamicDnsDomain() bool {
	if o != nil && !IsNil(o.DynamicDnsDomain) {
		return true
	}

	return false
}

// SetDynamicDnsDomain gets a reference to the given string and assigns it to the DynamicDnsDomain field.
func (o *NetworkconfigPolicyInventory) SetDynamicDnsDomain(v string) {
	o.DynamicDnsDomain = &v
}

// GetEnableDynamicDns returns the EnableDynamicDns field value if set, zero value otherwise.
func (o *NetworkconfigPolicyInventory) GetEnableDynamicDns() bool {
	if o == nil || IsNil(o.EnableDynamicDns) {
		var ret bool
		return ret
	}
	return *o.EnableDynamicDns
}

// GetEnableDynamicDnsOk returns a tuple with the EnableDynamicDns field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkconfigPolicyInventory) GetEnableDynamicDnsOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableDynamicDns) {
		return nil, false
	}
	return o.EnableDynamicDns, true
}

// HasEnableDynamicDns returns a boolean if a field has been set.
func (o *NetworkconfigPolicyInventory) HasEnableDynamicDns() bool {
	if o != nil && !IsNil(o.EnableDynamicDns) {
		return true
	}

	return false
}

// SetEnableDynamicDns gets a reference to the given bool and assigns it to the EnableDynamicDns field.
func (o *NetworkconfigPolicyInventory) SetEnableDynamicDns(v bool) {
	o.EnableDynamicDns = &v
}

// GetEnableIpv4dnsFromDhcp returns the EnableIpv4dnsFromDhcp field value if set, zero value otherwise.
func (o *NetworkconfigPolicyInventory) GetEnableIpv4dnsFromDhcp() bool {
	if o == nil || IsNil(o.EnableIpv4dnsFromDhcp) {
		var ret bool
		return ret
	}
	return *o.EnableIpv4dnsFromDhcp
}

// GetEnableIpv4dnsFromDhcpOk returns a tuple with the EnableIpv4dnsFromDhcp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkconfigPolicyInventory) GetEnableIpv4dnsFromDhcpOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableIpv4dnsFromDhcp) {
		return nil, false
	}
	return o.EnableIpv4dnsFromDhcp, true
}

// HasEnableIpv4dnsFromDhcp returns a boolean if a field has been set.
func (o *NetworkconfigPolicyInventory) HasEnableIpv4dnsFromDhcp() bool {
	if o != nil && !IsNil(o.EnableIpv4dnsFromDhcp) {
		return true
	}

	return false
}

// SetEnableIpv4dnsFromDhcp gets a reference to the given bool and assigns it to the EnableIpv4dnsFromDhcp field.
func (o *NetworkconfigPolicyInventory) SetEnableIpv4dnsFromDhcp(v bool) {
	o.EnableIpv4dnsFromDhcp = &v
}

// GetEnableIpv6 returns the EnableIpv6 field value if set, zero value otherwise.
func (o *NetworkconfigPolicyInventory) GetEnableIpv6() bool {
	if o == nil || IsNil(o.EnableIpv6) {
		var ret bool
		return ret
	}
	return *o.EnableIpv6
}

// GetEnableIpv6Ok returns a tuple with the EnableIpv6 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkconfigPolicyInventory) GetEnableIpv6Ok() (*bool, bool) {
	if o == nil || IsNil(o.EnableIpv6) {
		return nil, false
	}
	return o.EnableIpv6, true
}

// HasEnableIpv6 returns a boolean if a field has been set.
func (o *NetworkconfigPolicyInventory) HasEnableIpv6() bool {
	if o != nil && !IsNil(o.EnableIpv6) {
		return true
	}

	return false
}

// SetEnableIpv6 gets a reference to the given bool and assigns it to the EnableIpv6 field.
func (o *NetworkconfigPolicyInventory) SetEnableIpv6(v bool) {
	o.EnableIpv6 = &v
}

// GetEnableIpv6dnsFromDhcp returns the EnableIpv6dnsFromDhcp field value if set, zero value otherwise.
func (o *NetworkconfigPolicyInventory) GetEnableIpv6dnsFromDhcp() bool {
	if o == nil || IsNil(o.EnableIpv6dnsFromDhcp) {
		var ret bool
		return ret
	}
	return *o.EnableIpv6dnsFromDhcp
}

// GetEnableIpv6dnsFromDhcpOk returns a tuple with the EnableIpv6dnsFromDhcp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkconfigPolicyInventory) GetEnableIpv6dnsFromDhcpOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableIpv6dnsFromDhcp) {
		return nil, false
	}
	return o.EnableIpv6dnsFromDhcp, true
}

// HasEnableIpv6dnsFromDhcp returns a boolean if a field has been set.
func (o *NetworkconfigPolicyInventory) HasEnableIpv6dnsFromDhcp() bool {
	if o != nil && !IsNil(o.EnableIpv6dnsFromDhcp) {
		return true
	}

	return false
}

// SetEnableIpv6dnsFromDhcp gets a reference to the given bool and assigns it to the EnableIpv6dnsFromDhcp field.
func (o *NetworkconfigPolicyInventory) SetEnableIpv6dnsFromDhcp(v bool) {
	o.EnableIpv6dnsFromDhcp = &v
}

// GetPreferredIpv4dnsServer returns the PreferredIpv4dnsServer field value if set, zero value otherwise.
func (o *NetworkconfigPolicyInventory) GetPreferredIpv4dnsServer() string {
	if o == nil || IsNil(o.PreferredIpv4dnsServer) {
		var ret string
		return ret
	}
	return *o.PreferredIpv4dnsServer
}

// GetPreferredIpv4dnsServerOk returns a tuple with the PreferredIpv4dnsServer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkconfigPolicyInventory) GetPreferredIpv4dnsServerOk() (*string, bool) {
	if o == nil || IsNil(o.PreferredIpv4dnsServer) {
		return nil, false
	}
	return o.PreferredIpv4dnsServer, true
}

// HasPreferredIpv4dnsServer returns a boolean if a field has been set.
func (o *NetworkconfigPolicyInventory) HasPreferredIpv4dnsServer() bool {
	if o != nil && !IsNil(o.PreferredIpv4dnsServer) {
		return true
	}

	return false
}

// SetPreferredIpv4dnsServer gets a reference to the given string and assigns it to the PreferredIpv4dnsServer field.
func (o *NetworkconfigPolicyInventory) SetPreferredIpv4dnsServer(v string) {
	o.PreferredIpv4dnsServer = &v
}

// GetPreferredIpv6dnsServer returns the PreferredIpv6dnsServer field value if set, zero value otherwise.
func (o *NetworkconfigPolicyInventory) GetPreferredIpv6dnsServer() string {
	if o == nil || IsNil(o.PreferredIpv6dnsServer) {
		var ret string
		return ret
	}
	return *o.PreferredIpv6dnsServer
}

// GetPreferredIpv6dnsServerOk returns a tuple with the PreferredIpv6dnsServer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkconfigPolicyInventory) GetPreferredIpv6dnsServerOk() (*string, bool) {
	if o == nil || IsNil(o.PreferredIpv6dnsServer) {
		return nil, false
	}
	return o.PreferredIpv6dnsServer, true
}

// HasPreferredIpv6dnsServer returns a boolean if a field has been set.
func (o *NetworkconfigPolicyInventory) HasPreferredIpv6dnsServer() bool {
	if o != nil && !IsNil(o.PreferredIpv6dnsServer) {
		return true
	}

	return false
}

// SetPreferredIpv6dnsServer gets a reference to the given string and assigns it to the PreferredIpv6dnsServer field.
func (o *NetworkconfigPolicyInventory) SetPreferredIpv6dnsServer(v string) {
	o.PreferredIpv6dnsServer = &v
}

// GetTargetMo returns the TargetMo field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NetworkconfigPolicyInventory) GetTargetMo() MoBaseMoRelationship {
	if o == nil || IsNil(o.TargetMo.Get()) {
		var ret MoBaseMoRelationship
		return ret
	}
	return *o.TargetMo.Get()
}

// GetTargetMoOk returns a tuple with the TargetMo field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NetworkconfigPolicyInventory) GetTargetMoOk() (*MoBaseMoRelationship, bool) {
	if o == nil {
		return nil, false
	}
	return o.TargetMo.Get(), o.TargetMo.IsSet()
}

// HasTargetMo returns a boolean if a field has been set.
func (o *NetworkconfigPolicyInventory) HasTargetMo() bool {
	if o != nil && o.TargetMo.IsSet() {
		return true
	}

	return false
}

// SetTargetMo gets a reference to the given NullableMoBaseMoRelationship and assigns it to the TargetMo field.
func (o *NetworkconfigPolicyInventory) SetTargetMo(v MoBaseMoRelationship) {
	o.TargetMo.Set(&v)
}

// SetTargetMoNil sets the value for TargetMo to be an explicit nil
func (o *NetworkconfigPolicyInventory) SetTargetMoNil() {
	o.TargetMo.Set(nil)
}

// UnsetTargetMo ensures that no value is present for TargetMo, not even an explicit nil
func (o *NetworkconfigPolicyInventory) UnsetTargetMo() {
	o.TargetMo.Unset()
}

func (o NetworkconfigPolicyInventory) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NetworkconfigPolicyInventory) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	serializedPolicyAbstractPolicyInventory, errPolicyAbstractPolicyInventory := json.Marshal(o.PolicyAbstractPolicyInventory)
	if errPolicyAbstractPolicyInventory != nil {
		return map[string]interface{}{}, errPolicyAbstractPolicyInventory
	}
	errPolicyAbstractPolicyInventory = json.Unmarshal([]byte(serializedPolicyAbstractPolicyInventory), &toSerialize)
	if errPolicyAbstractPolicyInventory != nil {
		return map[string]interface{}{}, errPolicyAbstractPolicyInventory
	}
	if _, exists := toSerialize["ClassId"]; !exists {
		toSerialize["ClassId"] = o.GetDefaultClassId()
	}
	toSerialize["ClassId"] = o.ClassId
	if _, exists := toSerialize["ObjectType"]; !exists {
		toSerialize["ObjectType"] = o.GetDefaultObjectType()
	}
	toSerialize["ObjectType"] = o.ObjectType
	if !IsNil(o.AlternateIpv4dnsServer) {
		toSerialize["AlternateIpv4dnsServer"] = o.AlternateIpv4dnsServer
	}
	if !IsNil(o.AlternateIpv6dnsServer) {
		toSerialize["AlternateIpv6dnsServer"] = o.AlternateIpv6dnsServer
	}
	if !IsNil(o.DynamicDnsDomain) {
		toSerialize["DynamicDnsDomain"] = o.DynamicDnsDomain
	}
	if !IsNil(o.EnableDynamicDns) {
		toSerialize["EnableDynamicDns"] = o.EnableDynamicDns
	}
	if !IsNil(o.EnableIpv4dnsFromDhcp) {
		toSerialize["EnableIpv4dnsFromDhcp"] = o.EnableIpv4dnsFromDhcp
	}
	if !IsNil(o.EnableIpv6) {
		toSerialize["EnableIpv6"] = o.EnableIpv6
	}
	if !IsNil(o.EnableIpv6dnsFromDhcp) {
		toSerialize["EnableIpv6dnsFromDhcp"] = o.EnableIpv6dnsFromDhcp
	}
	if !IsNil(o.PreferredIpv4dnsServer) {
		toSerialize["PreferredIpv4dnsServer"] = o.PreferredIpv4dnsServer
	}
	if !IsNil(o.PreferredIpv6dnsServer) {
		toSerialize["PreferredIpv6dnsServer"] = o.PreferredIpv6dnsServer
	}
	if o.TargetMo.IsSet() {
		toSerialize["TargetMo"] = o.TargetMo.Get()
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *NetworkconfigPolicyInventory) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"ClassId",
		"ObjectType",
	}

	// defaultValueFuncMap captures the default values for required properties.
	// These values are used when required properties are missing from the payload.
	defaultValueFuncMap := map[string]func() interface{}{
		"ClassId":    o.GetDefaultClassId,
		"ObjectType": o.GetDefaultObjectType,
	}
	var defaultValueApplied bool
	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			if _, ok := defaultValueFuncMap[requiredProperty]; ok {
				allProperties[requiredProperty] = defaultValueFuncMap[requiredProperty]()
				defaultValueApplied = true
			}
		}
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	if defaultValueApplied {
		data, err = json.Marshal(allProperties)
		if err != nil {
			return err
		}
	}
	type NetworkconfigPolicyInventoryWithoutEmbeddedStruct struct {
		// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.
		ClassId string `json:"ClassId"`
		// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
		ObjectType string `json:"ObjectType"`
		// IP address of the secondary DNS server.
		AlternateIpv4dnsServer *string `json:"AlternateIpv4dnsServer,omitempty"`
		// IP address of the secondary DNS server.
		AlternateIpv6dnsServer *string `json:"AlternateIpv6dnsServer,omitempty"`
		// The domain name appended to a hostname for a Dynamic DNS (DDNS) update. If left blank, only a hostname is sent to the DDNS update request.
		DynamicDnsDomain *string `json:"DynamicDnsDomain,omitempty" validate:"regexp=^$|^[a-zA-Z0-9]+([-.]{1}[a-zA-Z0-9]+)*$"`
		// If enabled, updates the resource records to the DNS from Cisco IMC.
		EnableDynamicDns *bool `json:"EnableDynamicDns,omitempty"`
		// If enabled, Cisco IMC retrieves the DNS server addresses from DHCP. Use DHCP field must be enabled for IPv4 in Cisco IMC to enable it.
		EnableIpv4dnsFromDhcp *bool `json:"EnableIpv4dnsFromDhcp,omitempty"`
		// If enabled, allows to configure IPv6 properties.
		EnableIpv6 *bool `json:"EnableIpv6,omitempty"`
		// If enabled, Cisco IMC retrieves the DNS server addresses from DHCP. Use DHCP field must be enabled for IPv6 in Cisco IMC to enable it.
		EnableIpv6dnsFromDhcp *bool `json:"EnableIpv6dnsFromDhcp,omitempty"`
		// IP address of the primary DNS server.
		PreferredIpv4dnsServer *string `json:"PreferredIpv4dnsServer,omitempty"`
		// IP address of the primary DNS server.
		PreferredIpv6dnsServer *string                      `json:"PreferredIpv6dnsServer,omitempty"`
		TargetMo               NullableMoBaseMoRelationship `json:"TargetMo,omitempty"`
	}

	varNetworkconfigPolicyInventoryWithoutEmbeddedStruct := NetworkconfigPolicyInventoryWithoutEmbeddedStruct{}

	err = json.Unmarshal(data, &varNetworkconfigPolicyInventoryWithoutEmbeddedStruct)
	if err == nil {
		varNetworkconfigPolicyInventory := _NetworkconfigPolicyInventory{}
		varNetworkconfigPolicyInventory.ClassId = varNetworkconfigPolicyInventoryWithoutEmbeddedStruct.ClassId
		varNetworkconfigPolicyInventory.ObjectType = varNetworkconfigPolicyInventoryWithoutEmbeddedStruct.ObjectType
		varNetworkconfigPolicyInventory.AlternateIpv4dnsServer = varNetworkconfigPolicyInventoryWithoutEmbeddedStruct.AlternateIpv4dnsServer
		varNetworkconfigPolicyInventory.AlternateIpv6dnsServer = varNetworkconfigPolicyInventoryWithoutEmbeddedStruct.AlternateIpv6dnsServer
		varNetworkconfigPolicyInventory.DynamicDnsDomain = varNetworkconfigPolicyInventoryWithoutEmbeddedStruct.DynamicDnsDomain
		varNetworkconfigPolicyInventory.EnableDynamicDns = varNetworkconfigPolicyInventoryWithoutEmbeddedStruct.EnableDynamicDns
		varNetworkconfigPolicyInventory.EnableIpv4dnsFromDhcp = varNetworkconfigPolicyInventoryWithoutEmbeddedStruct.EnableIpv4dnsFromDhcp
		varNetworkconfigPolicyInventory.EnableIpv6 = varNetworkconfigPolicyInventoryWithoutEmbeddedStruct.EnableIpv6
		varNetworkconfigPolicyInventory.EnableIpv6dnsFromDhcp = varNetworkconfigPolicyInventoryWithoutEmbeddedStruct.EnableIpv6dnsFromDhcp
		varNetworkconfigPolicyInventory.PreferredIpv4dnsServer = varNetworkconfigPolicyInventoryWithoutEmbeddedStruct.PreferredIpv4dnsServer
		varNetworkconfigPolicyInventory.PreferredIpv6dnsServer = varNetworkconfigPolicyInventoryWithoutEmbeddedStruct.PreferredIpv6dnsServer
		varNetworkconfigPolicyInventory.TargetMo = varNetworkconfigPolicyInventoryWithoutEmbeddedStruct.TargetMo
		*o = NetworkconfigPolicyInventory(varNetworkconfigPolicyInventory)
	} else {
		return err
	}

	varNetworkconfigPolicyInventory := _NetworkconfigPolicyInventory{}

	err = json.Unmarshal(data, &varNetworkconfigPolicyInventory)
	if err == nil {
		o.PolicyAbstractPolicyInventory = varNetworkconfigPolicyInventory.PolicyAbstractPolicyInventory
	} else {
		return err
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "ClassId")
		delete(additionalProperties, "ObjectType")
		delete(additionalProperties, "AlternateIpv4dnsServer")
		delete(additionalProperties, "AlternateIpv6dnsServer")
		delete(additionalProperties, "DynamicDnsDomain")
		delete(additionalProperties, "EnableDynamicDns")
		delete(additionalProperties, "EnableIpv4dnsFromDhcp")
		delete(additionalProperties, "EnableIpv6")
		delete(additionalProperties, "EnableIpv6dnsFromDhcp")
		delete(additionalProperties, "PreferredIpv4dnsServer")
		delete(additionalProperties, "PreferredIpv6dnsServer")
		delete(additionalProperties, "TargetMo")

		// remove fields from embedded structs
		reflectPolicyAbstractPolicyInventory := reflect.ValueOf(o.PolicyAbstractPolicyInventory)
		for i := 0; i < reflectPolicyAbstractPolicyInventory.Type().NumField(); i++ {
			t := reflectPolicyAbstractPolicyInventory.Type().Field(i)

			if jsonTag := t.Tag.Get("json"); jsonTag != "" {
				fieldName := ""
				if commaIdx := strings.Index(jsonTag, ","); commaIdx > 0 {
					fieldName = jsonTag[:commaIdx]
				} else {
					fieldName = jsonTag
				}
				if fieldName != "AdditionalProperties" {
					delete(additionalProperties, fieldName)
				}
			}
		}

		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableNetworkconfigPolicyInventory struct {
	value *NetworkconfigPolicyInventory
	isSet bool
}

func (v NullableNetworkconfigPolicyInventory) Get() *NetworkconfigPolicyInventory {
	return v.value
}

func (v *NullableNetworkconfigPolicyInventory) Set(val *NetworkconfigPolicyInventory) {
	v.value = val
	v.isSet = true
}

func (v NullableNetworkconfigPolicyInventory) IsSet() bool {
	return v.isSet
}

func (v *NullableNetworkconfigPolicyInventory) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNetworkconfigPolicyInventory(val *NetworkconfigPolicyInventory) *NullableNetworkconfigPolicyInventory {
	return &NullableNetworkconfigPolicyInventory{value: val, isSet: true}
}

func (v NullableNetworkconfigPolicyInventory) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNetworkconfigPolicyInventory) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
