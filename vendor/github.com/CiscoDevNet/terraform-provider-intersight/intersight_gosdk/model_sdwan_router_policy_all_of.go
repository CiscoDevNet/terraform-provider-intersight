/*
 * Cisco Intersight
 *
 * Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations. The Intersight OpenAPI document defines the complete set of properties that are returned in the HTTP response. From that perspective, a client can expect that no additional properties are returned, unless these properties are explicitly defined in the OpenAPI document. However, when a client uses an older version of the Intersight OpenAPI document, the server may send additional properties because the software is more recent than the client. In that case, the client may receive properties that it does not know about. Some generated SDKs perform a strict validation of the HTTP response body against the OpenAPI document. This document was created on 2021-07-21T16:37:30Z.
 *
 * API version: 1.0.9-4403
 * Contact: intersight@cisco.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package intersight

import (
	"encoding/json"
)

// SdwanRouterPolicyAllOf Definition of the list of properties defined in 'sdwan.RouterPolicy', excluding properties defined in parent classes.
type SdwanRouterPolicyAllOf struct {
	// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.
	ClassId string `json:"ClassId"`
	// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
	ObjectType string `json:"ObjectType"`
	// Scale of the SD-WAN router virtual machine deployment. * `Typical` - Typical deployment configuration with 4 vCPUs and 4GB RAM. * `Minimal` - Minimal deployment configuration with 2 vCPUs and 4GB RAM.
	DeploymentSize *string `json:"DeploymentSize,omitempty"`
	// Number of WAN connections across the SD-WAN site.
	WanCount *int64 `json:"WanCount,omitempty"`
	// Defines if the WAN networks are singly or dually terminated. Dually terminated WANs are configured on all the SD-WAN routers. Singly terminated WANs are configured only on one of the SD-WAN routers. * `Single` - Singly terminated WANs ar evenly distributed across SD-WAN router nodes. A given WAN connection is available only on one of the router nodes. * `Dual` - Dually terminated WANs are configured on all the SD-WAN routers. A given WAN connection is available on multiple router nodes.
	WanTerminationType *string                               `json:"WanTerminationType,omitempty"`
	Organization       *OrganizationOrganizationRelationship `json:"Organization,omitempty"`
	// An array of relationships to sdwanProfile resources.
	Profiles             []SdwanProfileRelationship                 `json:"Profiles,omitempty"`
	SolutionImage        *SoftwareSolutionDistributableRelationship `json:"SolutionImage,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _SdwanRouterPolicyAllOf SdwanRouterPolicyAllOf

// NewSdwanRouterPolicyAllOf instantiates a new SdwanRouterPolicyAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSdwanRouterPolicyAllOf(classId string, objectType string) *SdwanRouterPolicyAllOf {
	this := SdwanRouterPolicyAllOf{}
	this.ClassId = classId
	this.ObjectType = objectType
	var deploymentSize string = "Typical"
	this.DeploymentSize = &deploymentSize
	var wanCount int64 = 2
	this.WanCount = &wanCount
	var wanTerminationType string = "Single"
	this.WanTerminationType = &wanTerminationType
	return &this
}

// NewSdwanRouterPolicyAllOfWithDefaults instantiates a new SdwanRouterPolicyAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSdwanRouterPolicyAllOfWithDefaults() *SdwanRouterPolicyAllOf {
	this := SdwanRouterPolicyAllOf{}
	var classId string = "sdwan.RouterPolicy"
	this.ClassId = classId
	var objectType string = "sdwan.RouterPolicy"
	this.ObjectType = objectType
	var deploymentSize string = "Typical"
	this.DeploymentSize = &deploymentSize
	var wanCount int64 = 2
	this.WanCount = &wanCount
	var wanTerminationType string = "Single"
	this.WanTerminationType = &wanTerminationType
	return &this
}

// GetClassId returns the ClassId field value
func (o *SdwanRouterPolicyAllOf) GetClassId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ClassId
}

// GetClassIdOk returns a tuple with the ClassId field value
// and a boolean to check if the value has been set.
func (o *SdwanRouterPolicyAllOf) GetClassIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ClassId, true
}

// SetClassId sets field value
func (o *SdwanRouterPolicyAllOf) SetClassId(v string) {
	o.ClassId = v
}

// GetObjectType returns the ObjectType field value
func (o *SdwanRouterPolicyAllOf) GetObjectType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ObjectType
}

// GetObjectTypeOk returns a tuple with the ObjectType field value
// and a boolean to check if the value has been set.
func (o *SdwanRouterPolicyAllOf) GetObjectTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ObjectType, true
}

// SetObjectType sets field value
func (o *SdwanRouterPolicyAllOf) SetObjectType(v string) {
	o.ObjectType = v
}

// GetDeploymentSize returns the DeploymentSize field value if set, zero value otherwise.
func (o *SdwanRouterPolicyAllOf) GetDeploymentSize() string {
	if o == nil || o.DeploymentSize == nil {
		var ret string
		return ret
	}
	return *o.DeploymentSize
}

// GetDeploymentSizeOk returns a tuple with the DeploymentSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SdwanRouterPolicyAllOf) GetDeploymentSizeOk() (*string, bool) {
	if o == nil || o.DeploymentSize == nil {
		return nil, false
	}
	return o.DeploymentSize, true
}

// HasDeploymentSize returns a boolean if a field has been set.
func (o *SdwanRouterPolicyAllOf) HasDeploymentSize() bool {
	if o != nil && o.DeploymentSize != nil {
		return true
	}

	return false
}

// SetDeploymentSize gets a reference to the given string and assigns it to the DeploymentSize field.
func (o *SdwanRouterPolicyAllOf) SetDeploymentSize(v string) {
	o.DeploymentSize = &v
}

// GetWanCount returns the WanCount field value if set, zero value otherwise.
func (o *SdwanRouterPolicyAllOf) GetWanCount() int64 {
	if o == nil || o.WanCount == nil {
		var ret int64
		return ret
	}
	return *o.WanCount
}

// GetWanCountOk returns a tuple with the WanCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SdwanRouterPolicyAllOf) GetWanCountOk() (*int64, bool) {
	if o == nil || o.WanCount == nil {
		return nil, false
	}
	return o.WanCount, true
}

// HasWanCount returns a boolean if a field has been set.
func (o *SdwanRouterPolicyAllOf) HasWanCount() bool {
	if o != nil && o.WanCount != nil {
		return true
	}

	return false
}

// SetWanCount gets a reference to the given int64 and assigns it to the WanCount field.
func (o *SdwanRouterPolicyAllOf) SetWanCount(v int64) {
	o.WanCount = &v
}

// GetWanTerminationType returns the WanTerminationType field value if set, zero value otherwise.
func (o *SdwanRouterPolicyAllOf) GetWanTerminationType() string {
	if o == nil || o.WanTerminationType == nil {
		var ret string
		return ret
	}
	return *o.WanTerminationType
}

// GetWanTerminationTypeOk returns a tuple with the WanTerminationType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SdwanRouterPolicyAllOf) GetWanTerminationTypeOk() (*string, bool) {
	if o == nil || o.WanTerminationType == nil {
		return nil, false
	}
	return o.WanTerminationType, true
}

// HasWanTerminationType returns a boolean if a field has been set.
func (o *SdwanRouterPolicyAllOf) HasWanTerminationType() bool {
	if o != nil && o.WanTerminationType != nil {
		return true
	}

	return false
}

// SetWanTerminationType gets a reference to the given string and assigns it to the WanTerminationType field.
func (o *SdwanRouterPolicyAllOf) SetWanTerminationType(v string) {
	o.WanTerminationType = &v
}

// GetOrganization returns the Organization field value if set, zero value otherwise.
func (o *SdwanRouterPolicyAllOf) GetOrganization() OrganizationOrganizationRelationship {
	if o == nil || o.Organization == nil {
		var ret OrganizationOrganizationRelationship
		return ret
	}
	return *o.Organization
}

// GetOrganizationOk returns a tuple with the Organization field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SdwanRouterPolicyAllOf) GetOrganizationOk() (*OrganizationOrganizationRelationship, bool) {
	if o == nil || o.Organization == nil {
		return nil, false
	}
	return o.Organization, true
}

// HasOrganization returns a boolean if a field has been set.
func (o *SdwanRouterPolicyAllOf) HasOrganization() bool {
	if o != nil && o.Organization != nil {
		return true
	}

	return false
}

// SetOrganization gets a reference to the given OrganizationOrganizationRelationship and assigns it to the Organization field.
func (o *SdwanRouterPolicyAllOf) SetOrganization(v OrganizationOrganizationRelationship) {
	o.Organization = &v
}

// GetProfiles returns the Profiles field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SdwanRouterPolicyAllOf) GetProfiles() []SdwanProfileRelationship {
	if o == nil {
		var ret []SdwanProfileRelationship
		return ret
	}
	return o.Profiles
}

// GetProfilesOk returns a tuple with the Profiles field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SdwanRouterPolicyAllOf) GetProfilesOk() (*[]SdwanProfileRelationship, bool) {
	if o == nil || o.Profiles == nil {
		return nil, false
	}
	return &o.Profiles, true
}

// HasProfiles returns a boolean if a field has been set.
func (o *SdwanRouterPolicyAllOf) HasProfiles() bool {
	if o != nil && o.Profiles != nil {
		return true
	}

	return false
}

// SetProfiles gets a reference to the given []SdwanProfileRelationship and assigns it to the Profiles field.
func (o *SdwanRouterPolicyAllOf) SetProfiles(v []SdwanProfileRelationship) {
	o.Profiles = v
}

// GetSolutionImage returns the SolutionImage field value if set, zero value otherwise.
func (o *SdwanRouterPolicyAllOf) GetSolutionImage() SoftwareSolutionDistributableRelationship {
	if o == nil || o.SolutionImage == nil {
		var ret SoftwareSolutionDistributableRelationship
		return ret
	}
	return *o.SolutionImage
}

// GetSolutionImageOk returns a tuple with the SolutionImage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SdwanRouterPolicyAllOf) GetSolutionImageOk() (*SoftwareSolutionDistributableRelationship, bool) {
	if o == nil || o.SolutionImage == nil {
		return nil, false
	}
	return o.SolutionImage, true
}

// HasSolutionImage returns a boolean if a field has been set.
func (o *SdwanRouterPolicyAllOf) HasSolutionImage() bool {
	if o != nil && o.SolutionImage != nil {
		return true
	}

	return false
}

// SetSolutionImage gets a reference to the given SoftwareSolutionDistributableRelationship and assigns it to the SolutionImage field.
func (o *SdwanRouterPolicyAllOf) SetSolutionImage(v SoftwareSolutionDistributableRelationship) {
	o.SolutionImage = &v
}

func (o SdwanRouterPolicyAllOf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["ClassId"] = o.ClassId
	}
	if true {
		toSerialize["ObjectType"] = o.ObjectType
	}
	if o.DeploymentSize != nil {
		toSerialize["DeploymentSize"] = o.DeploymentSize
	}
	if o.WanCount != nil {
		toSerialize["WanCount"] = o.WanCount
	}
	if o.WanTerminationType != nil {
		toSerialize["WanTerminationType"] = o.WanTerminationType
	}
	if o.Organization != nil {
		toSerialize["Organization"] = o.Organization
	}
	if o.Profiles != nil {
		toSerialize["Profiles"] = o.Profiles
	}
	if o.SolutionImage != nil {
		toSerialize["SolutionImage"] = o.SolutionImage
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *SdwanRouterPolicyAllOf) UnmarshalJSON(bytes []byte) (err error) {
	varSdwanRouterPolicyAllOf := _SdwanRouterPolicyAllOf{}

	if err = json.Unmarshal(bytes, &varSdwanRouterPolicyAllOf); err == nil {
		*o = SdwanRouterPolicyAllOf(varSdwanRouterPolicyAllOf)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "ClassId")
		delete(additionalProperties, "ObjectType")
		delete(additionalProperties, "DeploymentSize")
		delete(additionalProperties, "WanCount")
		delete(additionalProperties, "WanTerminationType")
		delete(additionalProperties, "Organization")
		delete(additionalProperties, "Profiles")
		delete(additionalProperties, "SolutionImage")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableSdwanRouterPolicyAllOf struct {
	value *SdwanRouterPolicyAllOf
	isSet bool
}

func (v NullableSdwanRouterPolicyAllOf) Get() *SdwanRouterPolicyAllOf {
	return v.value
}

func (v *NullableSdwanRouterPolicyAllOf) Set(val *SdwanRouterPolicyAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableSdwanRouterPolicyAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableSdwanRouterPolicyAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSdwanRouterPolicyAllOf(val *SdwanRouterPolicyAllOf) *NullableSdwanRouterPolicyAllOf {
	return &NullableSdwanRouterPolicyAllOf{value: val, isSet: true}
}

func (v NullableSdwanRouterPolicyAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSdwanRouterPolicyAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
