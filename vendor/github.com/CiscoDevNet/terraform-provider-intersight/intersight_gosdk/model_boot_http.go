/*
Cisco Intersight

Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations. The Intersight OpenAPI document defines the complete set of properties that are returned in the HTTP response. From that perspective, a client can expect that no additional properties are returned, unless these properties are explicitly defined in the OpenAPI document. However, when a client uses an older version of the Intersight OpenAPI document, the server may send additional properties because the software is more recent than the client. In that case, the client may receive properties that it does not know about. Some generated SDKs perform a strict validation of the HTTP response body against the OpenAPI document.

API version: 1.0.11-2024100405
Contact: intersight@cisco.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package intersight

import (
	"encoding/json"
	"fmt"
	"reflect"
	"strings"
)

// checks if the BootHttp type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BootHttp{}

// BootHttp Device type used in boot policy to boot from HTTP device.
type BootHttp struct {
	BootDeviceBase
	// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.
	ClassId string `json:"ClassId"`
	// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
	ObjectType string `json:"ObjectType"`
	// The name of the underlying virtual ethernet interface used by the HTTP boot device.
	InterfaceName *string `json:"InterfaceName,omitempty" validate:"regexp=^[a-zA-Z0-9-._:]*$"`
	// Lists the supported Interface Source for HTTP device. Supported values are \"name\" and \"mac\". * `name` - Use interface name to select virtual ethernet interface. * `mac` - Use MAC address to select virtual ethernet interface. * `port` - Use port to select virtual ethernet interface.
	InterfaceSource *string `json:"InterfaceSource,omitempty"`
	// The IP config type to use during the HTTP boot process. For DHCP configuration, the IP address, DNS server, netmask and gateway details are obtained from DHCP server. For static configuration, please provide the IP address, DNS server, netmask, and gateway details. * `DHCP` - The type of the IP config is DHCP. * `Static` - The type of the IP config is Static.
	IpConfigType *string `json:"IpConfigType,omitempty"`
	// The IP address family type to use during the HTTP boot process. * `IPv4` - The type of the IP address is IPv4. * `IPv6` - The type of the IP address is IPv6.
	IpType *string `json:"IpType,omitempty"`
	// The MAC Address of the underlying virtual ethernet interface used by the HTTP boot device.
	MacAddress *string `json:"MacAddress,omitempty" validate:"regexp=^$|^(((\\\\d|([a-f]|[A-F])){2}:){5}(\\\\d|([a-f]|[A-F])){2})$"`
	// The Port ID of the adapter on which the underlying virtual ethernet interface is present. If no port is specified, the default value is -1. Supported values are 0 to 255.
	Port *int64 `json:"Port,omitempty"`
	// Protocol to be used for HTTP boot. HTTPS require root certificate for authentication. * `HTTPS` - Secure HTTP protocol, certificate required for authentication. * `HTTP` - HTTP protocol without security certificate requirement.
	Protocol *string `json:"Protocol,omitempty"`
	// The slot ID of the adapter on which the underlying virtual ethernet interface is present. Supported values are ( 1 - 255, \"MLOM\", \"L\", \"L1\", \"L2\", \"OCP\").
	Slot               *string                        `json:"Slot,omitempty" validate:"regexp=^$|^([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5]|L|MLOM|L1|L2|OCP)$"`
	StaticIpV4Settings NullableBootStaticIpV4Settings `json:"StaticIpV4Settings,omitempty"`
	StaticIpV6Settings NullableBootStaticIpV6Settings `json:"StaticIpV6Settings,omitempty"`
	// Boot resource location in URI format.
	Uri                  *string `json:"Uri,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _BootHttp BootHttp

// NewBootHttp instantiates a new BootHttp object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBootHttp(classId string, objectType string) *BootHttp {
	this := BootHttp{}
	this.ClassId = classId
	this.ObjectType = objectType
	var enabled bool = false
	this.Enabled = &enabled
	var interfaceSource string = "name"
	this.InterfaceSource = &interfaceSource
	var ipConfigType string = "DHCP"
	this.IpConfigType = &ipConfigType
	var ipType string = "IPv4"
	this.IpType = &ipType
	var port int64 = -1
	this.Port = &port
	var protocol string = "HTTPS"
	this.Protocol = &protocol
	return &this
}

// NewBootHttpWithDefaults instantiates a new BootHttp object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBootHttpWithDefaults() *BootHttp {
	this := BootHttp{}
	var classId string = "boot.Http"
	this.ClassId = classId
	var objectType string = "boot.Http"
	this.ObjectType = objectType
	var interfaceSource string = "name"
	this.InterfaceSource = &interfaceSource
	var ipConfigType string = "DHCP"
	this.IpConfigType = &ipConfigType
	var ipType string = "IPv4"
	this.IpType = &ipType
	var port int64 = -1
	this.Port = &port
	var protocol string = "HTTPS"
	this.Protocol = &protocol
	return &this
}

// GetClassId returns the ClassId field value
func (o *BootHttp) GetClassId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ClassId
}

// GetClassIdOk returns a tuple with the ClassId field value
// and a boolean to check if the value has been set.
func (o *BootHttp) GetClassIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ClassId, true
}

// SetClassId sets field value
func (o *BootHttp) SetClassId(v string) {
	o.ClassId = v
}

// GetDefaultClassId returns the default value "boot.Http" of the ClassId field.
func (o *BootHttp) GetDefaultClassId() interface{} {
	return "boot.Http"
}

// GetObjectType returns the ObjectType field value
func (o *BootHttp) GetObjectType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ObjectType
}

// GetObjectTypeOk returns a tuple with the ObjectType field value
// and a boolean to check if the value has been set.
func (o *BootHttp) GetObjectTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ObjectType, true
}

// SetObjectType sets field value
func (o *BootHttp) SetObjectType(v string) {
	o.ObjectType = v
}

// GetDefaultObjectType returns the default value "boot.Http" of the ObjectType field.
func (o *BootHttp) GetDefaultObjectType() interface{} {
	return "boot.Http"
}

// GetInterfaceName returns the InterfaceName field value if set, zero value otherwise.
func (o *BootHttp) GetInterfaceName() string {
	if o == nil || IsNil(o.InterfaceName) {
		var ret string
		return ret
	}
	return *o.InterfaceName
}

// GetInterfaceNameOk returns a tuple with the InterfaceName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BootHttp) GetInterfaceNameOk() (*string, bool) {
	if o == nil || IsNil(o.InterfaceName) {
		return nil, false
	}
	return o.InterfaceName, true
}

// HasInterfaceName returns a boolean if a field has been set.
func (o *BootHttp) HasInterfaceName() bool {
	if o != nil && !IsNil(o.InterfaceName) {
		return true
	}

	return false
}

// SetInterfaceName gets a reference to the given string and assigns it to the InterfaceName field.
func (o *BootHttp) SetInterfaceName(v string) {
	o.InterfaceName = &v
}

// GetInterfaceSource returns the InterfaceSource field value if set, zero value otherwise.
func (o *BootHttp) GetInterfaceSource() string {
	if o == nil || IsNil(o.InterfaceSource) {
		var ret string
		return ret
	}
	return *o.InterfaceSource
}

// GetInterfaceSourceOk returns a tuple with the InterfaceSource field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BootHttp) GetInterfaceSourceOk() (*string, bool) {
	if o == nil || IsNil(o.InterfaceSource) {
		return nil, false
	}
	return o.InterfaceSource, true
}

// HasInterfaceSource returns a boolean if a field has been set.
func (o *BootHttp) HasInterfaceSource() bool {
	if o != nil && !IsNil(o.InterfaceSource) {
		return true
	}

	return false
}

// SetInterfaceSource gets a reference to the given string and assigns it to the InterfaceSource field.
func (o *BootHttp) SetInterfaceSource(v string) {
	o.InterfaceSource = &v
}

// GetIpConfigType returns the IpConfigType field value if set, zero value otherwise.
func (o *BootHttp) GetIpConfigType() string {
	if o == nil || IsNil(o.IpConfigType) {
		var ret string
		return ret
	}
	return *o.IpConfigType
}

// GetIpConfigTypeOk returns a tuple with the IpConfigType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BootHttp) GetIpConfigTypeOk() (*string, bool) {
	if o == nil || IsNil(o.IpConfigType) {
		return nil, false
	}
	return o.IpConfigType, true
}

// HasIpConfigType returns a boolean if a field has been set.
func (o *BootHttp) HasIpConfigType() bool {
	if o != nil && !IsNil(o.IpConfigType) {
		return true
	}

	return false
}

// SetIpConfigType gets a reference to the given string and assigns it to the IpConfigType field.
func (o *BootHttp) SetIpConfigType(v string) {
	o.IpConfigType = &v
}

// GetIpType returns the IpType field value if set, zero value otherwise.
func (o *BootHttp) GetIpType() string {
	if o == nil || IsNil(o.IpType) {
		var ret string
		return ret
	}
	return *o.IpType
}

// GetIpTypeOk returns a tuple with the IpType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BootHttp) GetIpTypeOk() (*string, bool) {
	if o == nil || IsNil(o.IpType) {
		return nil, false
	}
	return o.IpType, true
}

// HasIpType returns a boolean if a field has been set.
func (o *BootHttp) HasIpType() bool {
	if o != nil && !IsNil(o.IpType) {
		return true
	}

	return false
}

// SetIpType gets a reference to the given string and assigns it to the IpType field.
func (o *BootHttp) SetIpType(v string) {
	o.IpType = &v
}

// GetMacAddress returns the MacAddress field value if set, zero value otherwise.
func (o *BootHttp) GetMacAddress() string {
	if o == nil || IsNil(o.MacAddress) {
		var ret string
		return ret
	}
	return *o.MacAddress
}

// GetMacAddressOk returns a tuple with the MacAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BootHttp) GetMacAddressOk() (*string, bool) {
	if o == nil || IsNil(o.MacAddress) {
		return nil, false
	}
	return o.MacAddress, true
}

// HasMacAddress returns a boolean if a field has been set.
func (o *BootHttp) HasMacAddress() bool {
	if o != nil && !IsNil(o.MacAddress) {
		return true
	}

	return false
}

// SetMacAddress gets a reference to the given string and assigns it to the MacAddress field.
func (o *BootHttp) SetMacAddress(v string) {
	o.MacAddress = &v
}

// GetPort returns the Port field value if set, zero value otherwise.
func (o *BootHttp) GetPort() int64 {
	if o == nil || IsNil(o.Port) {
		var ret int64
		return ret
	}
	return *o.Port
}

// GetPortOk returns a tuple with the Port field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BootHttp) GetPortOk() (*int64, bool) {
	if o == nil || IsNil(o.Port) {
		return nil, false
	}
	return o.Port, true
}

// HasPort returns a boolean if a field has been set.
func (o *BootHttp) HasPort() bool {
	if o != nil && !IsNil(o.Port) {
		return true
	}

	return false
}

// SetPort gets a reference to the given int64 and assigns it to the Port field.
func (o *BootHttp) SetPort(v int64) {
	o.Port = &v
}

// GetProtocol returns the Protocol field value if set, zero value otherwise.
func (o *BootHttp) GetProtocol() string {
	if o == nil || IsNil(o.Protocol) {
		var ret string
		return ret
	}
	return *o.Protocol
}

// GetProtocolOk returns a tuple with the Protocol field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BootHttp) GetProtocolOk() (*string, bool) {
	if o == nil || IsNil(o.Protocol) {
		return nil, false
	}
	return o.Protocol, true
}

// HasProtocol returns a boolean if a field has been set.
func (o *BootHttp) HasProtocol() bool {
	if o != nil && !IsNil(o.Protocol) {
		return true
	}

	return false
}

// SetProtocol gets a reference to the given string and assigns it to the Protocol field.
func (o *BootHttp) SetProtocol(v string) {
	o.Protocol = &v
}

// GetSlot returns the Slot field value if set, zero value otherwise.
func (o *BootHttp) GetSlot() string {
	if o == nil || IsNil(o.Slot) {
		var ret string
		return ret
	}
	return *o.Slot
}

// GetSlotOk returns a tuple with the Slot field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BootHttp) GetSlotOk() (*string, bool) {
	if o == nil || IsNil(o.Slot) {
		return nil, false
	}
	return o.Slot, true
}

// HasSlot returns a boolean if a field has been set.
func (o *BootHttp) HasSlot() bool {
	if o != nil && !IsNil(o.Slot) {
		return true
	}

	return false
}

// SetSlot gets a reference to the given string and assigns it to the Slot field.
func (o *BootHttp) SetSlot(v string) {
	o.Slot = &v
}

// GetStaticIpV4Settings returns the StaticIpV4Settings field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BootHttp) GetStaticIpV4Settings() BootStaticIpV4Settings {
	if o == nil || IsNil(o.StaticIpV4Settings.Get()) {
		var ret BootStaticIpV4Settings
		return ret
	}
	return *o.StaticIpV4Settings.Get()
}

// GetStaticIpV4SettingsOk returns a tuple with the StaticIpV4Settings field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BootHttp) GetStaticIpV4SettingsOk() (*BootStaticIpV4Settings, bool) {
	if o == nil {
		return nil, false
	}
	return o.StaticIpV4Settings.Get(), o.StaticIpV4Settings.IsSet()
}

// HasStaticIpV4Settings returns a boolean if a field has been set.
func (o *BootHttp) HasStaticIpV4Settings() bool {
	if o != nil && o.StaticIpV4Settings.IsSet() {
		return true
	}

	return false
}

// SetStaticIpV4Settings gets a reference to the given NullableBootStaticIpV4Settings and assigns it to the StaticIpV4Settings field.
func (o *BootHttp) SetStaticIpV4Settings(v BootStaticIpV4Settings) {
	o.StaticIpV4Settings.Set(&v)
}

// SetStaticIpV4SettingsNil sets the value for StaticIpV4Settings to be an explicit nil
func (o *BootHttp) SetStaticIpV4SettingsNil() {
	o.StaticIpV4Settings.Set(nil)
}

// UnsetStaticIpV4Settings ensures that no value is present for StaticIpV4Settings, not even an explicit nil
func (o *BootHttp) UnsetStaticIpV4Settings() {
	o.StaticIpV4Settings.Unset()
}

// GetStaticIpV6Settings returns the StaticIpV6Settings field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BootHttp) GetStaticIpV6Settings() BootStaticIpV6Settings {
	if o == nil || IsNil(o.StaticIpV6Settings.Get()) {
		var ret BootStaticIpV6Settings
		return ret
	}
	return *o.StaticIpV6Settings.Get()
}

// GetStaticIpV6SettingsOk returns a tuple with the StaticIpV6Settings field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BootHttp) GetStaticIpV6SettingsOk() (*BootStaticIpV6Settings, bool) {
	if o == nil {
		return nil, false
	}
	return o.StaticIpV6Settings.Get(), o.StaticIpV6Settings.IsSet()
}

// HasStaticIpV6Settings returns a boolean if a field has been set.
func (o *BootHttp) HasStaticIpV6Settings() bool {
	if o != nil && o.StaticIpV6Settings.IsSet() {
		return true
	}

	return false
}

// SetStaticIpV6Settings gets a reference to the given NullableBootStaticIpV6Settings and assigns it to the StaticIpV6Settings field.
func (o *BootHttp) SetStaticIpV6Settings(v BootStaticIpV6Settings) {
	o.StaticIpV6Settings.Set(&v)
}

// SetStaticIpV6SettingsNil sets the value for StaticIpV6Settings to be an explicit nil
func (o *BootHttp) SetStaticIpV6SettingsNil() {
	o.StaticIpV6Settings.Set(nil)
}

// UnsetStaticIpV6Settings ensures that no value is present for StaticIpV6Settings, not even an explicit nil
func (o *BootHttp) UnsetStaticIpV6Settings() {
	o.StaticIpV6Settings.Unset()
}

// GetUri returns the Uri field value if set, zero value otherwise.
func (o *BootHttp) GetUri() string {
	if o == nil || IsNil(o.Uri) {
		var ret string
		return ret
	}
	return *o.Uri
}

// GetUriOk returns a tuple with the Uri field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BootHttp) GetUriOk() (*string, bool) {
	if o == nil || IsNil(o.Uri) {
		return nil, false
	}
	return o.Uri, true
}

// HasUri returns a boolean if a field has been set.
func (o *BootHttp) HasUri() bool {
	if o != nil && !IsNil(o.Uri) {
		return true
	}

	return false
}

// SetUri gets a reference to the given string and assigns it to the Uri field.
func (o *BootHttp) SetUri(v string) {
	o.Uri = &v
}

func (o BootHttp) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BootHttp) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	serializedBootDeviceBase, errBootDeviceBase := json.Marshal(o.BootDeviceBase)
	if errBootDeviceBase != nil {
		return map[string]interface{}{}, errBootDeviceBase
	}
	errBootDeviceBase = json.Unmarshal([]byte(serializedBootDeviceBase), &toSerialize)
	if errBootDeviceBase != nil {
		return map[string]interface{}{}, errBootDeviceBase
	}
	if _, exists := toSerialize["ClassId"]; !exists {
		toSerialize["ClassId"] = o.GetDefaultClassId()
	}
	toSerialize["ClassId"] = o.ClassId
	if _, exists := toSerialize["ObjectType"]; !exists {
		toSerialize["ObjectType"] = o.GetDefaultObjectType()
	}
	toSerialize["ObjectType"] = o.ObjectType
	if !IsNil(o.InterfaceName) {
		toSerialize["InterfaceName"] = o.InterfaceName
	}
	if !IsNil(o.InterfaceSource) {
		toSerialize["InterfaceSource"] = o.InterfaceSource
	}
	if !IsNil(o.IpConfigType) {
		toSerialize["IpConfigType"] = o.IpConfigType
	}
	if !IsNil(o.IpType) {
		toSerialize["IpType"] = o.IpType
	}
	if !IsNil(o.MacAddress) {
		toSerialize["MacAddress"] = o.MacAddress
	}
	if !IsNil(o.Port) {
		toSerialize["Port"] = o.Port
	}
	if !IsNil(o.Protocol) {
		toSerialize["Protocol"] = o.Protocol
	}
	if !IsNil(o.Slot) {
		toSerialize["Slot"] = o.Slot
	}
	if o.StaticIpV4Settings.IsSet() {
		toSerialize["StaticIpV4Settings"] = o.StaticIpV4Settings.Get()
	}
	if o.StaticIpV6Settings.IsSet() {
		toSerialize["StaticIpV6Settings"] = o.StaticIpV6Settings.Get()
	}
	if !IsNil(o.Uri) {
		toSerialize["Uri"] = o.Uri
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *BootHttp) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"ClassId",
		"ObjectType",
	}

	// defaultValueFuncMap captures the default values for required properties.
	// These values are used when required properties are missing from the payload.
	defaultValueFuncMap := map[string]func() interface{}{
		"ClassId":    o.GetDefaultClassId,
		"ObjectType": o.GetDefaultObjectType,
	}
	var defaultValueApplied bool
	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			if _, ok := defaultValueFuncMap[requiredProperty]; ok {
				allProperties[requiredProperty] = defaultValueFuncMap[requiredProperty]()
				defaultValueApplied = true
			}
		}
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	if defaultValueApplied {
		data, err = json.Marshal(allProperties)
		if err != nil {
			return err
		}
	}
	type BootHttpWithoutEmbeddedStruct struct {
		// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.
		ClassId string `json:"ClassId"`
		// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
		ObjectType string `json:"ObjectType"`
		// The name of the underlying virtual ethernet interface used by the HTTP boot device.
		InterfaceName *string `json:"InterfaceName,omitempty" validate:"regexp=^[a-zA-Z0-9-._:]*$"`
		// Lists the supported Interface Source for HTTP device. Supported values are \"name\" and \"mac\". * `name` - Use interface name to select virtual ethernet interface. * `mac` - Use MAC address to select virtual ethernet interface. * `port` - Use port to select virtual ethernet interface.
		InterfaceSource *string `json:"InterfaceSource,omitempty"`
		// The IP config type to use during the HTTP boot process. For DHCP configuration, the IP address, DNS server, netmask and gateway details are obtained from DHCP server. For static configuration, please provide the IP address, DNS server, netmask, and gateway details. * `DHCP` - The type of the IP config is DHCP. * `Static` - The type of the IP config is Static.
		IpConfigType *string `json:"IpConfigType,omitempty"`
		// The IP address family type to use during the HTTP boot process. * `IPv4` - The type of the IP address is IPv4. * `IPv6` - The type of the IP address is IPv6.
		IpType *string `json:"IpType,omitempty"`
		// The MAC Address of the underlying virtual ethernet interface used by the HTTP boot device.
		MacAddress *string `json:"MacAddress,omitempty" validate:"regexp=^$|^(((\\\\d|([a-f]|[A-F])){2}:){5}(\\\\d|([a-f]|[A-F])){2})$"`
		// The Port ID of the adapter on which the underlying virtual ethernet interface is present. If no port is specified, the default value is -1. Supported values are 0 to 255.
		Port *int64 `json:"Port,omitempty"`
		// Protocol to be used for HTTP boot. HTTPS require root certificate for authentication. * `HTTPS` - Secure HTTP protocol, certificate required for authentication. * `HTTP` - HTTP protocol without security certificate requirement.
		Protocol *string `json:"Protocol,omitempty"`
		// The slot ID of the adapter on which the underlying virtual ethernet interface is present. Supported values are ( 1 - 255, \"MLOM\", \"L\", \"L1\", \"L2\", \"OCP\").
		Slot               *string                        `json:"Slot,omitempty" validate:"regexp=^$|^([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5]|L|MLOM|L1|L2|OCP)$"`
		StaticIpV4Settings NullableBootStaticIpV4Settings `json:"StaticIpV4Settings,omitempty"`
		StaticIpV6Settings NullableBootStaticIpV6Settings `json:"StaticIpV6Settings,omitempty"`
		// Boot resource location in URI format.
		Uri *string `json:"Uri,omitempty"`
	}

	varBootHttpWithoutEmbeddedStruct := BootHttpWithoutEmbeddedStruct{}

	err = json.Unmarshal(data, &varBootHttpWithoutEmbeddedStruct)
	if err == nil {
		varBootHttp := _BootHttp{}
		varBootHttp.ClassId = varBootHttpWithoutEmbeddedStruct.ClassId
		varBootHttp.ObjectType = varBootHttpWithoutEmbeddedStruct.ObjectType
		varBootHttp.InterfaceName = varBootHttpWithoutEmbeddedStruct.InterfaceName
		varBootHttp.InterfaceSource = varBootHttpWithoutEmbeddedStruct.InterfaceSource
		varBootHttp.IpConfigType = varBootHttpWithoutEmbeddedStruct.IpConfigType
		varBootHttp.IpType = varBootHttpWithoutEmbeddedStruct.IpType
		varBootHttp.MacAddress = varBootHttpWithoutEmbeddedStruct.MacAddress
		varBootHttp.Port = varBootHttpWithoutEmbeddedStruct.Port
		varBootHttp.Protocol = varBootHttpWithoutEmbeddedStruct.Protocol
		varBootHttp.Slot = varBootHttpWithoutEmbeddedStruct.Slot
		varBootHttp.StaticIpV4Settings = varBootHttpWithoutEmbeddedStruct.StaticIpV4Settings
		varBootHttp.StaticIpV6Settings = varBootHttpWithoutEmbeddedStruct.StaticIpV6Settings
		varBootHttp.Uri = varBootHttpWithoutEmbeddedStruct.Uri
		*o = BootHttp(varBootHttp)
	} else {
		return err
	}

	varBootHttp := _BootHttp{}

	err = json.Unmarshal(data, &varBootHttp)
	if err == nil {
		o.BootDeviceBase = varBootHttp.BootDeviceBase
	} else {
		return err
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "ClassId")
		delete(additionalProperties, "ObjectType")
		delete(additionalProperties, "InterfaceName")
		delete(additionalProperties, "InterfaceSource")
		delete(additionalProperties, "IpConfigType")
		delete(additionalProperties, "IpType")
		delete(additionalProperties, "MacAddress")
		delete(additionalProperties, "Port")
		delete(additionalProperties, "Protocol")
		delete(additionalProperties, "Slot")
		delete(additionalProperties, "StaticIpV4Settings")
		delete(additionalProperties, "StaticIpV6Settings")
		delete(additionalProperties, "Uri")

		// remove fields from embedded structs
		reflectBootDeviceBase := reflect.ValueOf(o.BootDeviceBase)
		for i := 0; i < reflectBootDeviceBase.Type().NumField(); i++ {
			t := reflectBootDeviceBase.Type().Field(i)

			if jsonTag := t.Tag.Get("json"); jsonTag != "" {
				fieldName := ""
				if commaIdx := strings.Index(jsonTag, ","); commaIdx > 0 {
					fieldName = jsonTag[:commaIdx]
				} else {
					fieldName = jsonTag
				}
				if fieldName != "AdditionalProperties" {
					delete(additionalProperties, fieldName)
				}
			}
		}

		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableBootHttp struct {
	value *BootHttp
	isSet bool
}

func (v NullableBootHttp) Get() *BootHttp {
	return v.value
}

func (v *NullableBootHttp) Set(val *BootHttp) {
	v.value = val
	v.isSet = true
}

func (v NullableBootHttp) IsSet() bool {
	return v.isSet
}

func (v *NullableBootHttp) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBootHttp(val *BootHttp) *NullableBootHttp {
	return &NullableBootHttp{value: val, isSet: true}
}

func (v NullableBootHttp) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBootHttp) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
