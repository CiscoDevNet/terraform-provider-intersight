/*
Cisco Intersight

Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations. The Intersight OpenAPI document defines the complete set of properties that are returned in the HTTP response. From that perspective, a client can expect that no additional properties are returned, unless these properties are explicitly defined in the OpenAPI document. However, when a client uses an older version of the Intersight OpenAPI document, the server may send additional properties because the software is more recent than the client. In that case, the client may receive properties that it does not know about. Some generated SDKs perform a strict validation of the HTTP response body against the OpenAPI document.

API version: 1.0.11-18775
Contact: intersight@cisco.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package intersight

import (
	"encoding/json"
	"fmt"
	"reflect"
	"strings"
)

// checks if the StorageNetAppQtree type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &StorageNetAppQtree{}

// StorageNetAppQtree NetApp qtree is a logically defined file system that can exist as a special subdirectory of the root directory within a volume.
type StorageNetAppQtree struct {
	MoBaseMo
	// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.
	ClassId string `json:"ClassId"`
	// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
	ObjectType string `json:"ObjectType"`
	// Unique identifier of NetApp export policy.
	ExportPolicyId *string `json:"ExportPolicyId,omitempty"`
	// Name of the NetApp Qtree.
	Name *string `json:"Name,omitempty"`
	// Client visible path to the qtree.
	Path *string `json:"Path,omitempty"`
	// Identifies the UNIX permissions for the qtree.
	Permission *string `json:"Permission,omitempty"`
	// NetApp Qtree ID, unique within the qtree's volume.
	QtreeId *int64 `json:"QtreeId,omitempty"`
	// Identifies the security style for the qtree, it determines how access to the qtree is controlled. * `UNIX` - Security style for UNIX uid, gid and mode bits. * `NTFS` - Security style for CIFS ACLs. * `Mixed` - Security style for NFS and CIFS access.
	SecurityStyle *string `json:"SecurityStyle,omitempty"`
	// The storage virtual machine name for the qtree.
	SvmName *string `json:"SvmName,omitempty"`
	// The parent volume name for the qtree.
	VolumeName *string `json:"VolumeName,omitempty"`
	// NetApp Volume uuid, unique identifier for the NetApp volume.
	VolumeUuid           *string                                    `json:"VolumeUuid,omitempty" validate:"regexp=^$|^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"`
	StorageContainer     NullableStorageNetAppVolumeRelationship    `json:"StorageContainer,omitempty"`
	Tenant               NullableStorageNetAppStorageVmRelationship `json:"Tenant,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _StorageNetAppQtree StorageNetAppQtree

// NewStorageNetAppQtree instantiates a new StorageNetAppQtree object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStorageNetAppQtree(classId string, objectType string) *StorageNetAppQtree {
	this := StorageNetAppQtree{}
	this.ClassId = classId
	this.ObjectType = objectType
	return &this
}

// NewStorageNetAppQtreeWithDefaults instantiates a new StorageNetAppQtree object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStorageNetAppQtreeWithDefaults() *StorageNetAppQtree {
	this := StorageNetAppQtree{}
	var classId string = "storage.NetAppQtree"
	this.ClassId = classId
	var objectType string = "storage.NetAppQtree"
	this.ObjectType = objectType
	return &this
}

// GetClassId returns the ClassId field value
func (o *StorageNetAppQtree) GetClassId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ClassId
}

// GetClassIdOk returns a tuple with the ClassId field value
// and a boolean to check if the value has been set.
func (o *StorageNetAppQtree) GetClassIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ClassId, true
}

// SetClassId sets field value
func (o *StorageNetAppQtree) SetClassId(v string) {
	o.ClassId = v
}

// GetDefaultClassId returns the default value "storage.NetAppQtree" of the ClassId field.
func (o *StorageNetAppQtree) GetDefaultClassId() interface{} {
	return "storage.NetAppQtree"
}

// GetObjectType returns the ObjectType field value
func (o *StorageNetAppQtree) GetObjectType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ObjectType
}

// GetObjectTypeOk returns a tuple with the ObjectType field value
// and a boolean to check if the value has been set.
func (o *StorageNetAppQtree) GetObjectTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ObjectType, true
}

// SetObjectType sets field value
func (o *StorageNetAppQtree) SetObjectType(v string) {
	o.ObjectType = v
}

// GetDefaultObjectType returns the default value "storage.NetAppQtree" of the ObjectType field.
func (o *StorageNetAppQtree) GetDefaultObjectType() interface{} {
	return "storage.NetAppQtree"
}

// GetExportPolicyId returns the ExportPolicyId field value if set, zero value otherwise.
func (o *StorageNetAppQtree) GetExportPolicyId() string {
	if o == nil || IsNil(o.ExportPolicyId) {
		var ret string
		return ret
	}
	return *o.ExportPolicyId
}

// GetExportPolicyIdOk returns a tuple with the ExportPolicyId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageNetAppQtree) GetExportPolicyIdOk() (*string, bool) {
	if o == nil || IsNil(o.ExportPolicyId) {
		return nil, false
	}
	return o.ExportPolicyId, true
}

// HasExportPolicyId returns a boolean if a field has been set.
func (o *StorageNetAppQtree) HasExportPolicyId() bool {
	if o != nil && !IsNil(o.ExportPolicyId) {
		return true
	}

	return false
}

// SetExportPolicyId gets a reference to the given string and assigns it to the ExportPolicyId field.
func (o *StorageNetAppQtree) SetExportPolicyId(v string) {
	o.ExportPolicyId = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *StorageNetAppQtree) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageNetAppQtree) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *StorageNetAppQtree) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *StorageNetAppQtree) SetName(v string) {
	o.Name = &v
}

// GetPath returns the Path field value if set, zero value otherwise.
func (o *StorageNetAppQtree) GetPath() string {
	if o == nil || IsNil(o.Path) {
		var ret string
		return ret
	}
	return *o.Path
}

// GetPathOk returns a tuple with the Path field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageNetAppQtree) GetPathOk() (*string, bool) {
	if o == nil || IsNil(o.Path) {
		return nil, false
	}
	return o.Path, true
}

// HasPath returns a boolean if a field has been set.
func (o *StorageNetAppQtree) HasPath() bool {
	if o != nil && !IsNil(o.Path) {
		return true
	}

	return false
}

// SetPath gets a reference to the given string and assigns it to the Path field.
func (o *StorageNetAppQtree) SetPath(v string) {
	o.Path = &v
}

// GetPermission returns the Permission field value if set, zero value otherwise.
func (o *StorageNetAppQtree) GetPermission() string {
	if o == nil || IsNil(o.Permission) {
		var ret string
		return ret
	}
	return *o.Permission
}

// GetPermissionOk returns a tuple with the Permission field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageNetAppQtree) GetPermissionOk() (*string, bool) {
	if o == nil || IsNil(o.Permission) {
		return nil, false
	}
	return o.Permission, true
}

// HasPermission returns a boolean if a field has been set.
func (o *StorageNetAppQtree) HasPermission() bool {
	if o != nil && !IsNil(o.Permission) {
		return true
	}

	return false
}

// SetPermission gets a reference to the given string and assigns it to the Permission field.
func (o *StorageNetAppQtree) SetPermission(v string) {
	o.Permission = &v
}

// GetQtreeId returns the QtreeId field value if set, zero value otherwise.
func (o *StorageNetAppQtree) GetQtreeId() int64 {
	if o == nil || IsNil(o.QtreeId) {
		var ret int64
		return ret
	}
	return *o.QtreeId
}

// GetQtreeIdOk returns a tuple with the QtreeId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageNetAppQtree) GetQtreeIdOk() (*int64, bool) {
	if o == nil || IsNil(o.QtreeId) {
		return nil, false
	}
	return o.QtreeId, true
}

// HasQtreeId returns a boolean if a field has been set.
func (o *StorageNetAppQtree) HasQtreeId() bool {
	if o != nil && !IsNil(o.QtreeId) {
		return true
	}

	return false
}

// SetQtreeId gets a reference to the given int64 and assigns it to the QtreeId field.
func (o *StorageNetAppQtree) SetQtreeId(v int64) {
	o.QtreeId = &v
}

// GetSecurityStyle returns the SecurityStyle field value if set, zero value otherwise.
func (o *StorageNetAppQtree) GetSecurityStyle() string {
	if o == nil || IsNil(o.SecurityStyle) {
		var ret string
		return ret
	}
	return *o.SecurityStyle
}

// GetSecurityStyleOk returns a tuple with the SecurityStyle field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageNetAppQtree) GetSecurityStyleOk() (*string, bool) {
	if o == nil || IsNil(o.SecurityStyle) {
		return nil, false
	}
	return o.SecurityStyle, true
}

// HasSecurityStyle returns a boolean if a field has been set.
func (o *StorageNetAppQtree) HasSecurityStyle() bool {
	if o != nil && !IsNil(o.SecurityStyle) {
		return true
	}

	return false
}

// SetSecurityStyle gets a reference to the given string and assigns it to the SecurityStyle field.
func (o *StorageNetAppQtree) SetSecurityStyle(v string) {
	o.SecurityStyle = &v
}

// GetSvmName returns the SvmName field value if set, zero value otherwise.
func (o *StorageNetAppQtree) GetSvmName() string {
	if o == nil || IsNil(o.SvmName) {
		var ret string
		return ret
	}
	return *o.SvmName
}

// GetSvmNameOk returns a tuple with the SvmName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageNetAppQtree) GetSvmNameOk() (*string, bool) {
	if o == nil || IsNil(o.SvmName) {
		return nil, false
	}
	return o.SvmName, true
}

// HasSvmName returns a boolean if a field has been set.
func (o *StorageNetAppQtree) HasSvmName() bool {
	if o != nil && !IsNil(o.SvmName) {
		return true
	}

	return false
}

// SetSvmName gets a reference to the given string and assigns it to the SvmName field.
func (o *StorageNetAppQtree) SetSvmName(v string) {
	o.SvmName = &v
}

// GetVolumeName returns the VolumeName field value if set, zero value otherwise.
func (o *StorageNetAppQtree) GetVolumeName() string {
	if o == nil || IsNil(o.VolumeName) {
		var ret string
		return ret
	}
	return *o.VolumeName
}

// GetVolumeNameOk returns a tuple with the VolumeName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageNetAppQtree) GetVolumeNameOk() (*string, bool) {
	if o == nil || IsNil(o.VolumeName) {
		return nil, false
	}
	return o.VolumeName, true
}

// HasVolumeName returns a boolean if a field has been set.
func (o *StorageNetAppQtree) HasVolumeName() bool {
	if o != nil && !IsNil(o.VolumeName) {
		return true
	}

	return false
}

// SetVolumeName gets a reference to the given string and assigns it to the VolumeName field.
func (o *StorageNetAppQtree) SetVolumeName(v string) {
	o.VolumeName = &v
}

// GetVolumeUuid returns the VolumeUuid field value if set, zero value otherwise.
func (o *StorageNetAppQtree) GetVolumeUuid() string {
	if o == nil || IsNil(o.VolumeUuid) {
		var ret string
		return ret
	}
	return *o.VolumeUuid
}

// GetVolumeUuidOk returns a tuple with the VolumeUuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageNetAppQtree) GetVolumeUuidOk() (*string, bool) {
	if o == nil || IsNil(o.VolumeUuid) {
		return nil, false
	}
	return o.VolumeUuid, true
}

// HasVolumeUuid returns a boolean if a field has been set.
func (o *StorageNetAppQtree) HasVolumeUuid() bool {
	if o != nil && !IsNil(o.VolumeUuid) {
		return true
	}

	return false
}

// SetVolumeUuid gets a reference to the given string and assigns it to the VolumeUuid field.
func (o *StorageNetAppQtree) SetVolumeUuid(v string) {
	o.VolumeUuid = &v
}

// GetStorageContainer returns the StorageContainer field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *StorageNetAppQtree) GetStorageContainer() StorageNetAppVolumeRelationship {
	if o == nil || IsNil(o.StorageContainer.Get()) {
		var ret StorageNetAppVolumeRelationship
		return ret
	}
	return *o.StorageContainer.Get()
}

// GetStorageContainerOk returns a tuple with the StorageContainer field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *StorageNetAppQtree) GetStorageContainerOk() (*StorageNetAppVolumeRelationship, bool) {
	if o == nil {
		return nil, false
	}
	return o.StorageContainer.Get(), o.StorageContainer.IsSet()
}

// HasStorageContainer returns a boolean if a field has been set.
func (o *StorageNetAppQtree) HasStorageContainer() bool {
	if o != nil && o.StorageContainer.IsSet() {
		return true
	}

	return false
}

// SetStorageContainer gets a reference to the given NullableStorageNetAppVolumeRelationship and assigns it to the StorageContainer field.
func (o *StorageNetAppQtree) SetStorageContainer(v StorageNetAppVolumeRelationship) {
	o.StorageContainer.Set(&v)
}

// SetStorageContainerNil sets the value for StorageContainer to be an explicit nil
func (o *StorageNetAppQtree) SetStorageContainerNil() {
	o.StorageContainer.Set(nil)
}

// UnsetStorageContainer ensures that no value is present for StorageContainer, not even an explicit nil
func (o *StorageNetAppQtree) UnsetStorageContainer() {
	o.StorageContainer.Unset()
}

// GetTenant returns the Tenant field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *StorageNetAppQtree) GetTenant() StorageNetAppStorageVmRelationship {
	if o == nil || IsNil(o.Tenant.Get()) {
		var ret StorageNetAppStorageVmRelationship
		return ret
	}
	return *o.Tenant.Get()
}

// GetTenantOk returns a tuple with the Tenant field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *StorageNetAppQtree) GetTenantOk() (*StorageNetAppStorageVmRelationship, bool) {
	if o == nil {
		return nil, false
	}
	return o.Tenant.Get(), o.Tenant.IsSet()
}

// HasTenant returns a boolean if a field has been set.
func (o *StorageNetAppQtree) HasTenant() bool {
	if o != nil && o.Tenant.IsSet() {
		return true
	}

	return false
}

// SetTenant gets a reference to the given NullableStorageNetAppStorageVmRelationship and assigns it to the Tenant field.
func (o *StorageNetAppQtree) SetTenant(v StorageNetAppStorageVmRelationship) {
	o.Tenant.Set(&v)
}

// SetTenantNil sets the value for Tenant to be an explicit nil
func (o *StorageNetAppQtree) SetTenantNil() {
	o.Tenant.Set(nil)
}

// UnsetTenant ensures that no value is present for Tenant, not even an explicit nil
func (o *StorageNetAppQtree) UnsetTenant() {
	o.Tenant.Unset()
}

func (o StorageNetAppQtree) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o StorageNetAppQtree) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	serializedMoBaseMo, errMoBaseMo := json.Marshal(o.MoBaseMo)
	if errMoBaseMo != nil {
		return map[string]interface{}{}, errMoBaseMo
	}
	errMoBaseMo = json.Unmarshal([]byte(serializedMoBaseMo), &toSerialize)
	if errMoBaseMo != nil {
		return map[string]interface{}{}, errMoBaseMo
	}
	if _, exists := toSerialize["ClassId"]; !exists {
		toSerialize["ClassId"] = o.GetDefaultClassId()
	}
	toSerialize["ClassId"] = o.ClassId
	if _, exists := toSerialize["ObjectType"]; !exists {
		toSerialize["ObjectType"] = o.GetDefaultObjectType()
	}
	toSerialize["ObjectType"] = o.ObjectType
	if !IsNil(o.ExportPolicyId) {
		toSerialize["ExportPolicyId"] = o.ExportPolicyId
	}
	if !IsNil(o.Name) {
		toSerialize["Name"] = o.Name
	}
	if !IsNil(o.Path) {
		toSerialize["Path"] = o.Path
	}
	if !IsNil(o.Permission) {
		toSerialize["Permission"] = o.Permission
	}
	if !IsNil(o.QtreeId) {
		toSerialize["QtreeId"] = o.QtreeId
	}
	if !IsNil(o.SecurityStyle) {
		toSerialize["SecurityStyle"] = o.SecurityStyle
	}
	if !IsNil(o.SvmName) {
		toSerialize["SvmName"] = o.SvmName
	}
	if !IsNil(o.VolumeName) {
		toSerialize["VolumeName"] = o.VolumeName
	}
	if !IsNil(o.VolumeUuid) {
		toSerialize["VolumeUuid"] = o.VolumeUuid
	}
	if o.StorageContainer.IsSet() {
		toSerialize["StorageContainer"] = o.StorageContainer.Get()
	}
	if o.Tenant.IsSet() {
		toSerialize["Tenant"] = o.Tenant.Get()
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *StorageNetAppQtree) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"ClassId",
		"ObjectType",
	}

	// defaultValueFuncMap captures the default values for required properties.
	// These values are used when required properties are missing from the payload.
	defaultValueFuncMap := map[string]func() interface{}{
		"ClassId":    o.GetDefaultClassId,
		"ObjectType": o.GetDefaultObjectType,
	}
	var defaultValueApplied bool
	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			if _, ok := defaultValueFuncMap[requiredProperty]; ok {
				allProperties[requiredProperty] = defaultValueFuncMap[requiredProperty]()
				defaultValueApplied = true
			}
		}
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	if defaultValueApplied {
		data, err = json.Marshal(allProperties)
		if err != nil {
			return err
		}
	}
	type StorageNetAppQtreeWithoutEmbeddedStruct struct {
		// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.
		ClassId string `json:"ClassId"`
		// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
		ObjectType string `json:"ObjectType"`
		// Unique identifier of NetApp export policy.
		ExportPolicyId *string `json:"ExportPolicyId,omitempty"`
		// Name of the NetApp Qtree.
		Name *string `json:"Name,omitempty"`
		// Client visible path to the qtree.
		Path *string `json:"Path,omitempty"`
		// Identifies the UNIX permissions for the qtree.
		Permission *string `json:"Permission,omitempty"`
		// NetApp Qtree ID, unique within the qtree's volume.
		QtreeId *int64 `json:"QtreeId,omitempty"`
		// Identifies the security style for the qtree, it determines how access to the qtree is controlled. * `UNIX` - Security style for UNIX uid, gid and mode bits. * `NTFS` - Security style for CIFS ACLs. * `Mixed` - Security style for NFS and CIFS access.
		SecurityStyle *string `json:"SecurityStyle,omitempty"`
		// The storage virtual machine name for the qtree.
		SvmName *string `json:"SvmName,omitempty"`
		// The parent volume name for the qtree.
		VolumeName *string `json:"VolumeName,omitempty"`
		// NetApp Volume uuid, unique identifier for the NetApp volume.
		VolumeUuid       *string                                    `json:"VolumeUuid,omitempty" validate:"regexp=^$|^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"`
		StorageContainer NullableStorageNetAppVolumeRelationship    `json:"StorageContainer,omitempty"`
		Tenant           NullableStorageNetAppStorageVmRelationship `json:"Tenant,omitempty"`
	}

	varStorageNetAppQtreeWithoutEmbeddedStruct := StorageNetAppQtreeWithoutEmbeddedStruct{}

	err = json.Unmarshal(data, &varStorageNetAppQtreeWithoutEmbeddedStruct)
	if err == nil {
		varStorageNetAppQtree := _StorageNetAppQtree{}
		varStorageNetAppQtree.ClassId = varStorageNetAppQtreeWithoutEmbeddedStruct.ClassId
		varStorageNetAppQtree.ObjectType = varStorageNetAppQtreeWithoutEmbeddedStruct.ObjectType
		varStorageNetAppQtree.ExportPolicyId = varStorageNetAppQtreeWithoutEmbeddedStruct.ExportPolicyId
		varStorageNetAppQtree.Name = varStorageNetAppQtreeWithoutEmbeddedStruct.Name
		varStorageNetAppQtree.Path = varStorageNetAppQtreeWithoutEmbeddedStruct.Path
		varStorageNetAppQtree.Permission = varStorageNetAppQtreeWithoutEmbeddedStruct.Permission
		varStorageNetAppQtree.QtreeId = varStorageNetAppQtreeWithoutEmbeddedStruct.QtreeId
		varStorageNetAppQtree.SecurityStyle = varStorageNetAppQtreeWithoutEmbeddedStruct.SecurityStyle
		varStorageNetAppQtree.SvmName = varStorageNetAppQtreeWithoutEmbeddedStruct.SvmName
		varStorageNetAppQtree.VolumeName = varStorageNetAppQtreeWithoutEmbeddedStruct.VolumeName
		varStorageNetAppQtree.VolumeUuid = varStorageNetAppQtreeWithoutEmbeddedStruct.VolumeUuid
		varStorageNetAppQtree.StorageContainer = varStorageNetAppQtreeWithoutEmbeddedStruct.StorageContainer
		varStorageNetAppQtree.Tenant = varStorageNetAppQtreeWithoutEmbeddedStruct.Tenant
		*o = StorageNetAppQtree(varStorageNetAppQtree)
	} else {
		return err
	}

	varStorageNetAppQtree := _StorageNetAppQtree{}

	err = json.Unmarshal(data, &varStorageNetAppQtree)
	if err == nil {
		o.MoBaseMo = varStorageNetAppQtree.MoBaseMo
	} else {
		return err
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "ClassId")
		delete(additionalProperties, "ObjectType")
		delete(additionalProperties, "ExportPolicyId")
		delete(additionalProperties, "Name")
		delete(additionalProperties, "Path")
		delete(additionalProperties, "Permission")
		delete(additionalProperties, "QtreeId")
		delete(additionalProperties, "SecurityStyle")
		delete(additionalProperties, "SvmName")
		delete(additionalProperties, "VolumeName")
		delete(additionalProperties, "VolumeUuid")
		delete(additionalProperties, "StorageContainer")
		delete(additionalProperties, "Tenant")

		// remove fields from embedded structs
		reflectMoBaseMo := reflect.ValueOf(o.MoBaseMo)
		for i := 0; i < reflectMoBaseMo.Type().NumField(); i++ {
			t := reflectMoBaseMo.Type().Field(i)

			if jsonTag := t.Tag.Get("json"); jsonTag != "" {
				fieldName := ""
				if commaIdx := strings.Index(jsonTag, ","); commaIdx > 0 {
					fieldName = jsonTag[:commaIdx]
				} else {
					fieldName = jsonTag
				}
				if fieldName != "AdditionalProperties" {
					delete(additionalProperties, fieldName)
				}
			}
		}

		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableStorageNetAppQtree struct {
	value *StorageNetAppQtree
	isSet bool
}

func (v NullableStorageNetAppQtree) Get() *StorageNetAppQtree {
	return v.value
}

func (v *NullableStorageNetAppQtree) Set(val *StorageNetAppQtree) {
	v.value = val
	v.isSet = true
}

func (v NullableStorageNetAppQtree) IsSet() bool {
	return v.isSet
}

func (v *NullableStorageNetAppQtree) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStorageNetAppQtree(val *StorageNetAppQtree) *NullableStorageNetAppQtree {
	return &NullableStorageNetAppQtree{value: val, isSet: true}
}

func (v NullableStorageNetAppQtree) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStorageNetAppQtree) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
