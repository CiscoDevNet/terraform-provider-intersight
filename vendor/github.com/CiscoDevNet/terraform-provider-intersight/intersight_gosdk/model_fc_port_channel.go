/*
Cisco Intersight

Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations. The Intersight OpenAPI document defines the complete set of properties that are returned in the HTTP response. From that perspective, a client can expect that no additional properties are returned, unless these properties are explicitly defined in the OpenAPI document. However, when a client uses an older version of the Intersight OpenAPI document, the server may send additional properties because the software is more recent than the client. In that case, the client may receive properties that it does not know about. Some generated SDKs perform a strict validation of the HTTP response body against the OpenAPI document.

API version: 1.0.11-2024100405
Contact: intersight@cisco.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package intersight

import (
	"encoding/json"
	"fmt"
	"reflect"
	"strings"
)

// checks if the FcPortChannel type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FcPortChannel{}

// FcPortChannel Fibre Channel (FC) port channels in a Fabric Interconnect are logical links that aggregate multiple physical Fibre Channel (FC) ports into a single virtual connection. This configuration is primarily used to enhance the bandwidth and redundancy of storage network connections within a data center.
type FcPortChannel struct {
	InventoryInterface
	// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.
	ClassId string `json:"ClassId"`
	// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
	ObjectType string `json:"ObjectType"`
	// Administrator configured Speed applied on the port channel.
	AdminSpeed *string `json:"AdminSpeed,omitempty"`
	// Administratively configured state (enabled/disabled) for this portchannel.
	AdminState *string `json:"AdminState,omitempty"`
	// Mode information N_proxy, F or E associated to the Fibre Channel portchannel.
	Mode *string `json:"Mode,omitempty"`
	// Name of the port channel.
	Name *string `json:"Name,omitempty"`
	// Operational speed of this port-channel.
	OperSpeed *string `json:"OperSpeed,omitempty"`
	// Operational state of this port-channel.
	OperState *string `json:"OperState,omitempty"`
	// Reason for this port-channel's Operational state.
	OperStateQual *string `json:"OperStateQual,omitempty"`
	// Unique identifier for this port-channel on the FI.
	PortChannelId *int64 `json:"PortChannelId,omitempty"`
	// This port-channel's configured role (fcUplink, fcStorage, etc.).
	Role *string `json:"Role,omitempty"`
	// Switch Identifier that is local to a cluster.
	SwitchId *string `json:"SwitchId,omitempty"`
	// Virtual San that is associated to the port-channel.
	Vsan *int64 `json:"Vsan,omitempty"`
	// World Wide Name of the port channel.
	Wwn                 *string                                 `json:"Wwn,omitempty"`
	EquipmentSwitchCard NullableEquipmentSwitchCardRelationship `json:"EquipmentSwitchCard,omitempty"`
	// An array of relationships to fcNeighbor resources.
	FcNeighbor           []FcNeighborRelationship                    `json:"FcNeighbor,omitempty"`
	NetworkElement       NullableNetworkElementRelationship          `json:"NetworkElement,omitempty"`
	RegisteredDevice     NullableAssetDeviceRegistrationRelationship `json:"RegisteredDevice,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _FcPortChannel FcPortChannel

// NewFcPortChannel instantiates a new FcPortChannel object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFcPortChannel(classId string, objectType string) *FcPortChannel {
	this := FcPortChannel{}
	this.ClassId = classId
	this.ObjectType = objectType
	return &this
}

// NewFcPortChannelWithDefaults instantiates a new FcPortChannel object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFcPortChannelWithDefaults() *FcPortChannel {
	this := FcPortChannel{}
	var classId string = "fc.PortChannel"
	this.ClassId = classId
	var objectType string = "fc.PortChannel"
	this.ObjectType = objectType
	return &this
}

// GetClassId returns the ClassId field value
func (o *FcPortChannel) GetClassId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ClassId
}

// GetClassIdOk returns a tuple with the ClassId field value
// and a boolean to check if the value has been set.
func (o *FcPortChannel) GetClassIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ClassId, true
}

// SetClassId sets field value
func (o *FcPortChannel) SetClassId(v string) {
	o.ClassId = v
}

// GetDefaultClassId returns the default value "fc.PortChannel" of the ClassId field.
func (o *FcPortChannel) GetDefaultClassId() interface{} {
	return "fc.PortChannel"
}

// GetObjectType returns the ObjectType field value
func (o *FcPortChannel) GetObjectType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ObjectType
}

// GetObjectTypeOk returns a tuple with the ObjectType field value
// and a boolean to check if the value has been set.
func (o *FcPortChannel) GetObjectTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ObjectType, true
}

// SetObjectType sets field value
func (o *FcPortChannel) SetObjectType(v string) {
	o.ObjectType = v
}

// GetDefaultObjectType returns the default value "fc.PortChannel" of the ObjectType field.
func (o *FcPortChannel) GetDefaultObjectType() interface{} {
	return "fc.PortChannel"
}

// GetAdminSpeed returns the AdminSpeed field value if set, zero value otherwise.
func (o *FcPortChannel) GetAdminSpeed() string {
	if o == nil || IsNil(o.AdminSpeed) {
		var ret string
		return ret
	}
	return *o.AdminSpeed
}

// GetAdminSpeedOk returns a tuple with the AdminSpeed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FcPortChannel) GetAdminSpeedOk() (*string, bool) {
	if o == nil || IsNil(o.AdminSpeed) {
		return nil, false
	}
	return o.AdminSpeed, true
}

// HasAdminSpeed returns a boolean if a field has been set.
func (o *FcPortChannel) HasAdminSpeed() bool {
	if o != nil && !IsNil(o.AdminSpeed) {
		return true
	}

	return false
}

// SetAdminSpeed gets a reference to the given string and assigns it to the AdminSpeed field.
func (o *FcPortChannel) SetAdminSpeed(v string) {
	o.AdminSpeed = &v
}

// GetAdminState returns the AdminState field value if set, zero value otherwise.
func (o *FcPortChannel) GetAdminState() string {
	if o == nil || IsNil(o.AdminState) {
		var ret string
		return ret
	}
	return *o.AdminState
}

// GetAdminStateOk returns a tuple with the AdminState field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FcPortChannel) GetAdminStateOk() (*string, bool) {
	if o == nil || IsNil(o.AdminState) {
		return nil, false
	}
	return o.AdminState, true
}

// HasAdminState returns a boolean if a field has been set.
func (o *FcPortChannel) HasAdminState() bool {
	if o != nil && !IsNil(o.AdminState) {
		return true
	}

	return false
}

// SetAdminState gets a reference to the given string and assigns it to the AdminState field.
func (o *FcPortChannel) SetAdminState(v string) {
	o.AdminState = &v
}

// GetMode returns the Mode field value if set, zero value otherwise.
func (o *FcPortChannel) GetMode() string {
	if o == nil || IsNil(o.Mode) {
		var ret string
		return ret
	}
	return *o.Mode
}

// GetModeOk returns a tuple with the Mode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FcPortChannel) GetModeOk() (*string, bool) {
	if o == nil || IsNil(o.Mode) {
		return nil, false
	}
	return o.Mode, true
}

// HasMode returns a boolean if a field has been set.
func (o *FcPortChannel) HasMode() bool {
	if o != nil && !IsNil(o.Mode) {
		return true
	}

	return false
}

// SetMode gets a reference to the given string and assigns it to the Mode field.
func (o *FcPortChannel) SetMode(v string) {
	o.Mode = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *FcPortChannel) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FcPortChannel) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *FcPortChannel) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *FcPortChannel) SetName(v string) {
	o.Name = &v
}

// GetOperSpeed returns the OperSpeed field value if set, zero value otherwise.
func (o *FcPortChannel) GetOperSpeed() string {
	if o == nil || IsNil(o.OperSpeed) {
		var ret string
		return ret
	}
	return *o.OperSpeed
}

// GetOperSpeedOk returns a tuple with the OperSpeed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FcPortChannel) GetOperSpeedOk() (*string, bool) {
	if o == nil || IsNil(o.OperSpeed) {
		return nil, false
	}
	return o.OperSpeed, true
}

// HasOperSpeed returns a boolean if a field has been set.
func (o *FcPortChannel) HasOperSpeed() bool {
	if o != nil && !IsNil(o.OperSpeed) {
		return true
	}

	return false
}

// SetOperSpeed gets a reference to the given string and assigns it to the OperSpeed field.
func (o *FcPortChannel) SetOperSpeed(v string) {
	o.OperSpeed = &v
}

// GetOperState returns the OperState field value if set, zero value otherwise.
func (o *FcPortChannel) GetOperState() string {
	if o == nil || IsNil(o.OperState) {
		var ret string
		return ret
	}
	return *o.OperState
}

// GetOperStateOk returns a tuple with the OperState field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FcPortChannel) GetOperStateOk() (*string, bool) {
	if o == nil || IsNil(o.OperState) {
		return nil, false
	}
	return o.OperState, true
}

// HasOperState returns a boolean if a field has been set.
func (o *FcPortChannel) HasOperState() bool {
	if o != nil && !IsNil(o.OperState) {
		return true
	}

	return false
}

// SetOperState gets a reference to the given string and assigns it to the OperState field.
func (o *FcPortChannel) SetOperState(v string) {
	o.OperState = &v
}

// GetOperStateQual returns the OperStateQual field value if set, zero value otherwise.
func (o *FcPortChannel) GetOperStateQual() string {
	if o == nil || IsNil(o.OperStateQual) {
		var ret string
		return ret
	}
	return *o.OperStateQual
}

// GetOperStateQualOk returns a tuple with the OperStateQual field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FcPortChannel) GetOperStateQualOk() (*string, bool) {
	if o == nil || IsNil(o.OperStateQual) {
		return nil, false
	}
	return o.OperStateQual, true
}

// HasOperStateQual returns a boolean if a field has been set.
func (o *FcPortChannel) HasOperStateQual() bool {
	if o != nil && !IsNil(o.OperStateQual) {
		return true
	}

	return false
}

// SetOperStateQual gets a reference to the given string and assigns it to the OperStateQual field.
func (o *FcPortChannel) SetOperStateQual(v string) {
	o.OperStateQual = &v
}

// GetPortChannelId returns the PortChannelId field value if set, zero value otherwise.
func (o *FcPortChannel) GetPortChannelId() int64 {
	if o == nil || IsNil(o.PortChannelId) {
		var ret int64
		return ret
	}
	return *o.PortChannelId
}

// GetPortChannelIdOk returns a tuple with the PortChannelId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FcPortChannel) GetPortChannelIdOk() (*int64, bool) {
	if o == nil || IsNil(o.PortChannelId) {
		return nil, false
	}
	return o.PortChannelId, true
}

// HasPortChannelId returns a boolean if a field has been set.
func (o *FcPortChannel) HasPortChannelId() bool {
	if o != nil && !IsNil(o.PortChannelId) {
		return true
	}

	return false
}

// SetPortChannelId gets a reference to the given int64 and assigns it to the PortChannelId field.
func (o *FcPortChannel) SetPortChannelId(v int64) {
	o.PortChannelId = &v
}

// GetRole returns the Role field value if set, zero value otherwise.
func (o *FcPortChannel) GetRole() string {
	if o == nil || IsNil(o.Role) {
		var ret string
		return ret
	}
	return *o.Role
}

// GetRoleOk returns a tuple with the Role field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FcPortChannel) GetRoleOk() (*string, bool) {
	if o == nil || IsNil(o.Role) {
		return nil, false
	}
	return o.Role, true
}

// HasRole returns a boolean if a field has been set.
func (o *FcPortChannel) HasRole() bool {
	if o != nil && !IsNil(o.Role) {
		return true
	}

	return false
}

// SetRole gets a reference to the given string and assigns it to the Role field.
func (o *FcPortChannel) SetRole(v string) {
	o.Role = &v
}

// GetSwitchId returns the SwitchId field value if set, zero value otherwise.
func (o *FcPortChannel) GetSwitchId() string {
	if o == nil || IsNil(o.SwitchId) {
		var ret string
		return ret
	}
	return *o.SwitchId
}

// GetSwitchIdOk returns a tuple with the SwitchId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FcPortChannel) GetSwitchIdOk() (*string, bool) {
	if o == nil || IsNil(o.SwitchId) {
		return nil, false
	}
	return o.SwitchId, true
}

// HasSwitchId returns a boolean if a field has been set.
func (o *FcPortChannel) HasSwitchId() bool {
	if o != nil && !IsNil(o.SwitchId) {
		return true
	}

	return false
}

// SetSwitchId gets a reference to the given string and assigns it to the SwitchId field.
func (o *FcPortChannel) SetSwitchId(v string) {
	o.SwitchId = &v
}

// GetVsan returns the Vsan field value if set, zero value otherwise.
func (o *FcPortChannel) GetVsan() int64 {
	if o == nil || IsNil(o.Vsan) {
		var ret int64
		return ret
	}
	return *o.Vsan
}

// GetVsanOk returns a tuple with the Vsan field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FcPortChannel) GetVsanOk() (*int64, bool) {
	if o == nil || IsNil(o.Vsan) {
		return nil, false
	}
	return o.Vsan, true
}

// HasVsan returns a boolean if a field has been set.
func (o *FcPortChannel) HasVsan() bool {
	if o != nil && !IsNil(o.Vsan) {
		return true
	}

	return false
}

// SetVsan gets a reference to the given int64 and assigns it to the Vsan field.
func (o *FcPortChannel) SetVsan(v int64) {
	o.Vsan = &v
}

// GetWwn returns the Wwn field value if set, zero value otherwise.
func (o *FcPortChannel) GetWwn() string {
	if o == nil || IsNil(o.Wwn) {
		var ret string
		return ret
	}
	return *o.Wwn
}

// GetWwnOk returns a tuple with the Wwn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FcPortChannel) GetWwnOk() (*string, bool) {
	if o == nil || IsNil(o.Wwn) {
		return nil, false
	}
	return o.Wwn, true
}

// HasWwn returns a boolean if a field has been set.
func (o *FcPortChannel) HasWwn() bool {
	if o != nil && !IsNil(o.Wwn) {
		return true
	}

	return false
}

// SetWwn gets a reference to the given string and assigns it to the Wwn field.
func (o *FcPortChannel) SetWwn(v string) {
	o.Wwn = &v
}

// GetEquipmentSwitchCard returns the EquipmentSwitchCard field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FcPortChannel) GetEquipmentSwitchCard() EquipmentSwitchCardRelationship {
	if o == nil || IsNil(o.EquipmentSwitchCard.Get()) {
		var ret EquipmentSwitchCardRelationship
		return ret
	}
	return *o.EquipmentSwitchCard.Get()
}

// GetEquipmentSwitchCardOk returns a tuple with the EquipmentSwitchCard field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FcPortChannel) GetEquipmentSwitchCardOk() (*EquipmentSwitchCardRelationship, bool) {
	if o == nil {
		return nil, false
	}
	return o.EquipmentSwitchCard.Get(), o.EquipmentSwitchCard.IsSet()
}

// HasEquipmentSwitchCard returns a boolean if a field has been set.
func (o *FcPortChannel) HasEquipmentSwitchCard() bool {
	if o != nil && o.EquipmentSwitchCard.IsSet() {
		return true
	}

	return false
}

// SetEquipmentSwitchCard gets a reference to the given NullableEquipmentSwitchCardRelationship and assigns it to the EquipmentSwitchCard field.
func (o *FcPortChannel) SetEquipmentSwitchCard(v EquipmentSwitchCardRelationship) {
	o.EquipmentSwitchCard.Set(&v)
}

// SetEquipmentSwitchCardNil sets the value for EquipmentSwitchCard to be an explicit nil
func (o *FcPortChannel) SetEquipmentSwitchCardNil() {
	o.EquipmentSwitchCard.Set(nil)
}

// UnsetEquipmentSwitchCard ensures that no value is present for EquipmentSwitchCard, not even an explicit nil
func (o *FcPortChannel) UnsetEquipmentSwitchCard() {
	o.EquipmentSwitchCard.Unset()
}

// GetFcNeighbor returns the FcNeighbor field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FcPortChannel) GetFcNeighbor() []FcNeighborRelationship {
	if o == nil {
		var ret []FcNeighborRelationship
		return ret
	}
	return o.FcNeighbor
}

// GetFcNeighborOk returns a tuple with the FcNeighbor field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FcPortChannel) GetFcNeighborOk() ([]FcNeighborRelationship, bool) {
	if o == nil || IsNil(o.FcNeighbor) {
		return nil, false
	}
	return o.FcNeighbor, true
}

// HasFcNeighbor returns a boolean if a field has been set.
func (o *FcPortChannel) HasFcNeighbor() bool {
	if o != nil && !IsNil(o.FcNeighbor) {
		return true
	}

	return false
}

// SetFcNeighbor gets a reference to the given []FcNeighborRelationship and assigns it to the FcNeighbor field.
func (o *FcPortChannel) SetFcNeighbor(v []FcNeighborRelationship) {
	o.FcNeighbor = v
}

// GetNetworkElement returns the NetworkElement field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FcPortChannel) GetNetworkElement() NetworkElementRelationship {
	if o == nil || IsNil(o.NetworkElement.Get()) {
		var ret NetworkElementRelationship
		return ret
	}
	return *o.NetworkElement.Get()
}

// GetNetworkElementOk returns a tuple with the NetworkElement field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FcPortChannel) GetNetworkElementOk() (*NetworkElementRelationship, bool) {
	if o == nil {
		return nil, false
	}
	return o.NetworkElement.Get(), o.NetworkElement.IsSet()
}

// HasNetworkElement returns a boolean if a field has been set.
func (o *FcPortChannel) HasNetworkElement() bool {
	if o != nil && o.NetworkElement.IsSet() {
		return true
	}

	return false
}

// SetNetworkElement gets a reference to the given NullableNetworkElementRelationship and assigns it to the NetworkElement field.
func (o *FcPortChannel) SetNetworkElement(v NetworkElementRelationship) {
	o.NetworkElement.Set(&v)
}

// SetNetworkElementNil sets the value for NetworkElement to be an explicit nil
func (o *FcPortChannel) SetNetworkElementNil() {
	o.NetworkElement.Set(nil)
}

// UnsetNetworkElement ensures that no value is present for NetworkElement, not even an explicit nil
func (o *FcPortChannel) UnsetNetworkElement() {
	o.NetworkElement.Unset()
}

// GetRegisteredDevice returns the RegisteredDevice field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FcPortChannel) GetRegisteredDevice() AssetDeviceRegistrationRelationship {
	if o == nil || IsNil(o.RegisteredDevice.Get()) {
		var ret AssetDeviceRegistrationRelationship
		return ret
	}
	return *o.RegisteredDevice.Get()
}

// GetRegisteredDeviceOk returns a tuple with the RegisteredDevice field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FcPortChannel) GetRegisteredDeviceOk() (*AssetDeviceRegistrationRelationship, bool) {
	if o == nil {
		return nil, false
	}
	return o.RegisteredDevice.Get(), o.RegisteredDevice.IsSet()
}

// HasRegisteredDevice returns a boolean if a field has been set.
func (o *FcPortChannel) HasRegisteredDevice() bool {
	if o != nil && o.RegisteredDevice.IsSet() {
		return true
	}

	return false
}

// SetRegisteredDevice gets a reference to the given NullableAssetDeviceRegistrationRelationship and assigns it to the RegisteredDevice field.
func (o *FcPortChannel) SetRegisteredDevice(v AssetDeviceRegistrationRelationship) {
	o.RegisteredDevice.Set(&v)
}

// SetRegisteredDeviceNil sets the value for RegisteredDevice to be an explicit nil
func (o *FcPortChannel) SetRegisteredDeviceNil() {
	o.RegisteredDevice.Set(nil)
}

// UnsetRegisteredDevice ensures that no value is present for RegisteredDevice, not even an explicit nil
func (o *FcPortChannel) UnsetRegisteredDevice() {
	o.RegisteredDevice.Unset()
}

func (o FcPortChannel) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FcPortChannel) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	serializedInventoryInterface, errInventoryInterface := json.Marshal(o.InventoryInterface)
	if errInventoryInterface != nil {
		return map[string]interface{}{}, errInventoryInterface
	}
	errInventoryInterface = json.Unmarshal([]byte(serializedInventoryInterface), &toSerialize)
	if errInventoryInterface != nil {
		return map[string]interface{}{}, errInventoryInterface
	}
	if _, exists := toSerialize["ClassId"]; !exists {
		toSerialize["ClassId"] = o.GetDefaultClassId()
	}
	toSerialize["ClassId"] = o.ClassId
	if _, exists := toSerialize["ObjectType"]; !exists {
		toSerialize["ObjectType"] = o.GetDefaultObjectType()
	}
	toSerialize["ObjectType"] = o.ObjectType
	if !IsNil(o.AdminSpeed) {
		toSerialize["AdminSpeed"] = o.AdminSpeed
	}
	if !IsNil(o.AdminState) {
		toSerialize["AdminState"] = o.AdminState
	}
	if !IsNil(o.Mode) {
		toSerialize["Mode"] = o.Mode
	}
	if !IsNil(o.Name) {
		toSerialize["Name"] = o.Name
	}
	if !IsNil(o.OperSpeed) {
		toSerialize["OperSpeed"] = o.OperSpeed
	}
	if !IsNil(o.OperState) {
		toSerialize["OperState"] = o.OperState
	}
	if !IsNil(o.OperStateQual) {
		toSerialize["OperStateQual"] = o.OperStateQual
	}
	if !IsNil(o.PortChannelId) {
		toSerialize["PortChannelId"] = o.PortChannelId
	}
	if !IsNil(o.Role) {
		toSerialize["Role"] = o.Role
	}
	if !IsNil(o.SwitchId) {
		toSerialize["SwitchId"] = o.SwitchId
	}
	if !IsNil(o.Vsan) {
		toSerialize["Vsan"] = o.Vsan
	}
	if !IsNil(o.Wwn) {
		toSerialize["Wwn"] = o.Wwn
	}
	if o.EquipmentSwitchCard.IsSet() {
		toSerialize["EquipmentSwitchCard"] = o.EquipmentSwitchCard.Get()
	}
	if o.FcNeighbor != nil {
		toSerialize["FcNeighbor"] = o.FcNeighbor
	}
	if o.NetworkElement.IsSet() {
		toSerialize["NetworkElement"] = o.NetworkElement.Get()
	}
	if o.RegisteredDevice.IsSet() {
		toSerialize["RegisteredDevice"] = o.RegisteredDevice.Get()
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *FcPortChannel) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"ClassId",
		"ObjectType",
	}

	// defaultValueFuncMap captures the default values for required properties.
	// These values are used when required properties are missing from the payload.
	defaultValueFuncMap := map[string]func() interface{}{
		"ClassId":    o.GetDefaultClassId,
		"ObjectType": o.GetDefaultObjectType,
	}
	var defaultValueApplied bool
	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			if _, ok := defaultValueFuncMap[requiredProperty]; ok {
				allProperties[requiredProperty] = defaultValueFuncMap[requiredProperty]()
				defaultValueApplied = true
			}
		}
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	if defaultValueApplied {
		data, err = json.Marshal(allProperties)
		if err != nil {
			return err
		}
	}
	type FcPortChannelWithoutEmbeddedStruct struct {
		// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.
		ClassId string `json:"ClassId"`
		// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
		ObjectType string `json:"ObjectType"`
		// Administrator configured Speed applied on the port channel.
		AdminSpeed *string `json:"AdminSpeed,omitempty"`
		// Administratively configured state (enabled/disabled) for this portchannel.
		AdminState *string `json:"AdminState,omitempty"`
		// Mode information N_proxy, F or E associated to the Fibre Channel portchannel.
		Mode *string `json:"Mode,omitempty"`
		// Name of the port channel.
		Name *string `json:"Name,omitempty"`
		// Operational speed of this port-channel.
		OperSpeed *string `json:"OperSpeed,omitempty"`
		// Operational state of this port-channel.
		OperState *string `json:"OperState,omitempty"`
		// Reason for this port-channel's Operational state.
		OperStateQual *string `json:"OperStateQual,omitempty"`
		// Unique identifier for this port-channel on the FI.
		PortChannelId *int64 `json:"PortChannelId,omitempty"`
		// This port-channel's configured role (fcUplink, fcStorage, etc.).
		Role *string `json:"Role,omitempty"`
		// Switch Identifier that is local to a cluster.
		SwitchId *string `json:"SwitchId,omitempty"`
		// Virtual San that is associated to the port-channel.
		Vsan *int64 `json:"Vsan,omitempty"`
		// World Wide Name of the port channel.
		Wwn                 *string                                 `json:"Wwn,omitempty"`
		EquipmentSwitchCard NullableEquipmentSwitchCardRelationship `json:"EquipmentSwitchCard,omitempty"`
		// An array of relationships to fcNeighbor resources.
		FcNeighbor       []FcNeighborRelationship                    `json:"FcNeighbor,omitempty"`
		NetworkElement   NullableNetworkElementRelationship          `json:"NetworkElement,omitempty"`
		RegisteredDevice NullableAssetDeviceRegistrationRelationship `json:"RegisteredDevice,omitempty"`
	}

	varFcPortChannelWithoutEmbeddedStruct := FcPortChannelWithoutEmbeddedStruct{}

	err = json.Unmarshal(data, &varFcPortChannelWithoutEmbeddedStruct)
	if err == nil {
		varFcPortChannel := _FcPortChannel{}
		varFcPortChannel.ClassId = varFcPortChannelWithoutEmbeddedStruct.ClassId
		varFcPortChannel.ObjectType = varFcPortChannelWithoutEmbeddedStruct.ObjectType
		varFcPortChannel.AdminSpeed = varFcPortChannelWithoutEmbeddedStruct.AdminSpeed
		varFcPortChannel.AdminState = varFcPortChannelWithoutEmbeddedStruct.AdminState
		varFcPortChannel.Mode = varFcPortChannelWithoutEmbeddedStruct.Mode
		varFcPortChannel.Name = varFcPortChannelWithoutEmbeddedStruct.Name
		varFcPortChannel.OperSpeed = varFcPortChannelWithoutEmbeddedStruct.OperSpeed
		varFcPortChannel.OperState = varFcPortChannelWithoutEmbeddedStruct.OperState
		varFcPortChannel.OperStateQual = varFcPortChannelWithoutEmbeddedStruct.OperStateQual
		varFcPortChannel.PortChannelId = varFcPortChannelWithoutEmbeddedStruct.PortChannelId
		varFcPortChannel.Role = varFcPortChannelWithoutEmbeddedStruct.Role
		varFcPortChannel.SwitchId = varFcPortChannelWithoutEmbeddedStruct.SwitchId
		varFcPortChannel.Vsan = varFcPortChannelWithoutEmbeddedStruct.Vsan
		varFcPortChannel.Wwn = varFcPortChannelWithoutEmbeddedStruct.Wwn
		varFcPortChannel.EquipmentSwitchCard = varFcPortChannelWithoutEmbeddedStruct.EquipmentSwitchCard
		varFcPortChannel.FcNeighbor = varFcPortChannelWithoutEmbeddedStruct.FcNeighbor
		varFcPortChannel.NetworkElement = varFcPortChannelWithoutEmbeddedStruct.NetworkElement
		varFcPortChannel.RegisteredDevice = varFcPortChannelWithoutEmbeddedStruct.RegisteredDevice
		*o = FcPortChannel(varFcPortChannel)
	} else {
		return err
	}

	varFcPortChannel := _FcPortChannel{}

	err = json.Unmarshal(data, &varFcPortChannel)
	if err == nil {
		o.InventoryInterface = varFcPortChannel.InventoryInterface
	} else {
		return err
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "ClassId")
		delete(additionalProperties, "ObjectType")
		delete(additionalProperties, "AdminSpeed")
		delete(additionalProperties, "AdminState")
		delete(additionalProperties, "Mode")
		delete(additionalProperties, "Name")
		delete(additionalProperties, "OperSpeed")
		delete(additionalProperties, "OperState")
		delete(additionalProperties, "OperStateQual")
		delete(additionalProperties, "PortChannelId")
		delete(additionalProperties, "Role")
		delete(additionalProperties, "SwitchId")
		delete(additionalProperties, "Vsan")
		delete(additionalProperties, "Wwn")
		delete(additionalProperties, "EquipmentSwitchCard")
		delete(additionalProperties, "FcNeighbor")
		delete(additionalProperties, "NetworkElement")
		delete(additionalProperties, "RegisteredDevice")

		// remove fields from embedded structs
		reflectInventoryInterface := reflect.ValueOf(o.InventoryInterface)
		for i := 0; i < reflectInventoryInterface.Type().NumField(); i++ {
			t := reflectInventoryInterface.Type().Field(i)

			if jsonTag := t.Tag.Get("json"); jsonTag != "" {
				fieldName := ""
				if commaIdx := strings.Index(jsonTag, ","); commaIdx > 0 {
					fieldName = jsonTag[:commaIdx]
				} else {
					fieldName = jsonTag
				}
				if fieldName != "AdditionalProperties" {
					delete(additionalProperties, fieldName)
				}
			}
		}

		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableFcPortChannel struct {
	value *FcPortChannel
	isSet bool
}

func (v NullableFcPortChannel) Get() *FcPortChannel {
	return v.value
}

func (v *NullableFcPortChannel) Set(val *FcPortChannel) {
	v.value = val
	v.isSet = true
}

func (v NullableFcPortChannel) IsSet() bool {
	return v.isSet
}

func (v *NullableFcPortChannel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFcPortChannel(val *FcPortChannel) *NullableFcPortChannel {
	return &NullableFcPortChannel{value: val, isSet: true}
}

func (v NullableFcPortChannel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFcPortChannel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
